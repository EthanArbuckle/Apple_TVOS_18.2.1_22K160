LABEL_369:
        __break(1u);
LABEL_370:
        __break(1u);
LABEL_371:
        __break(1u);
LABEL_372:
        __break(1u);
        goto LABEL_373;
      }

LABEL_368:
      __break(1u);
      goto LABEL_369;
    }

                  __break(1u);
LABEL_369:
                  __break(1u);
LABEL_370:
                  __break(1u);
LABEL_371:
                  __break(1u);
LABEL_372:
                  __break(1u);
LABEL_373:
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
LABEL_374:
                  result = _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
                  return result;
                }

LABEL_367:
    __break(1u);
    goto LABEL_368;
  }

  v111 = v25 + v16;
  if (__OFADD__(v25, v16))
  {
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
    goto LABEL_377;
  }

  if (v111 > 7) {
    goto LABEL_275;
  }
  if (v111 < 0) {
    goto LABEL_378;
  }
  if (v111) {
    goto LABEL_276;
  }
  swift_bridgeObjectRetain();
  v112 = MEMORY[0x18961AFE8];
LABEL_277:
  v153 = 0LL;
  v154 = v19 + 32;
  v155 = v112 + 32;
  while (2)
  {
    if (v153 == v16)
    {
LABEL_373:
      __break(1u);
      goto LABEL_374;
    }

    v156 = 0;
    v157 = 0LL;
    v158 = v153 + 1;
    do
    {
      if (v25 == v157) {
        goto LABEL_340;
      }
      v161 = v157 + v153;
      if (__OFADD__(v157, v153)) {
        goto LABEL_341;
      }
      if (v161 >= v111)
      {
        if (v156) {
          goto LABEL_304;
        }
        v156 = *(unsigned __int16 *)(v154 + 2 * v153);
        if (*(_WORD *)(v154 + 2 * v153))
        {
          v156 = *(unsigned __int16 *)(v15 + 2 * v157 + 32);
          if (*(_WORD *)(v15 + 2 * v157 + 32)) {
            goto LABEL_304;
          }
        }
      }

      else
      {
        if (v161 < 0) {
          goto LABEL_354;
        }
        v159 = 2 * v161;
        v160 = v156
        v156 = HIWORD(v160);
        *(_WORD *)(v155 + v159) = v160;
      }

      ++v157;
    }

    while (v25 != v157);
    if (!v156)
    {
LABEL_298:
      v153 = v158;
      if (v158 != v16) {
        continue;
      }
      v163 = *(void *)(v112 + 16);
      if (v163 && !*(_WORD *)(v155 + 2 * v163 - 2))
      {
        do
        {
          *(void *)(v112 + 16) = v163 - 1;
          if (v163 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v112 + 28 + 2 * v163--));
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_262;
    }

    break;
  }

  v28 = __OFADD__(v25, v153);
  v162 = v25 + v153;
  if (v28) {
    goto LABEL_375;
  }
  if (v162 >= v111) {
    goto LABEL_304;
  }
  if (v162 < 0) {
    goto LABEL_376;
  }
  if ((unint64_t)v162 < *(void *)(v112 + 16))
  {
    *(_WORD *)(v155 + 2 * v162) = v156;
    goto LABEL_298;
  }

            __break(1u);
            goto LABEL_368;
          }

LABEL_377:
  __break(1u);
LABEL_378:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_379:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

                            __break(1u);
LABEL_378:
                            __break(1u);
                            goto LABEL_379;
                          }

uint64_t specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X8>)
{
  unint64_t v7 = *(void *)(a1 + 16);
  int64_t v8 = *(void *)(a2 + 16);
  if (v8 >= v7) {
    uint64_t v9 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 16);
  }
  if (a3 < 0) {
    goto LABEL_62;
  }
  if (a3)
  {
    uint64_t v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v13 + 16) = a3;
    bzero((void *)(v13 + 32), 2 * a3);
    uint64_t v22 = v13;
    if (v9)
    {
LABEL_7:
      unint64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        unint64_t v4 = 0LL;
        unsigned int v6 = *(unsigned __int16 *)(a2 + 32) + *(unsigned __int16 *)(a1 + 32);
        while (1)
        {
          unsigned int v5 = HIWORD(v6);
          *(_WORD *)(v13 + 32 + 2 * v4) = v6;
          a4 = v4 + 1;
          if (v9 - 1 == v4) {
            break;
          }
          uint64_t v15 = 2 * v4;
          v5 += *(unsigned __int16 *)(a1 + 34 + v15);
          unsigned int v6 = v5 + *(unsigned __int16 *)(a2 + 34 + v15);
          unint64_t v4 = a4;
          if (a4 >= v14) {
            goto LABEL_11;
          }
        }
      }

      else
      {
LABEL_11:
        __break(1u);
      }

      uint64_t v22 = v13;
      if (a4 >= v7)
      {
LABEL_30:
LABEL_31:
        if (v5)
        {
          while ((int64_t)a4 < *(void *)(v13 + 16))
          {
            int v18 = *(unsigned __int16 *)(a2 + 32 + 2 * a4);
            *(_WORD *)(v13 + 2 * a4 + 32) = v18 + 1;
            if (v8 - 1 == a4)
            {
              uint64_t v22 = v13;
              goto LABEL_47;
            }

            ++a4;
            if (v18 != 0xFFFF)
            {
              uint64_t v22 = v13;
              goto LABEL_36;
            }
          }

          goto LABEL_59;
        }

void specialized static NSDecimal._fitMantissa(_:roundingMode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 <= 8)
  {
    swift_bridgeObjectRetain();
    return;
  }

  swift_bridgeObjectRetain();
  if (v3 != 9)
  {
    uint64_t v4 = 0LL;
    unint64_t v5 = 0LL;
    int v6 = 0;
    uint64_t v19 = MEMORY[0x18961A800];
    uint64_t v8 = 10000LL;
    unint64_t v9 = v2;
    do
    {
      uint64_t v44 = v4;
      if ((_DWORD)v5) {
        int v6 = 1;
      }
      uint64_t v4 = v19;
      uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v2 + 16) = v3;
      bzero((void *)(v2 + 32), 2 * v3);
      unint64_t v20 = *(void *)(v9 + 16);
      if (v3 > v20) {
        goto LABEL_86;
      }
      if (v3 - 1 >= *(void *)(v2 + 16)) {
        goto LABEL_53;
      }
      unsigned int v21 = *(unsigned __int16 *)(v9 + 32 + 2 * (v3 - 1));
      int64_t v22 = v3 - 2;
      unsigned int v23 = (839 * (v21 >> 4)) >> 19;
      while (1)
      {
        *(_WORD *)(v2 + 30 + 2 * v3) = v23;
        unint64_t v5 = v21 % 0x2710;
        if (v3 == 1) {
          break;
        }
        unsigned int v21 = *(unsigned __int16 *)(v9 + 28 + 2 * v3) | ((_DWORD)v5 << 16);
        unsigned int v23 = v21 / 0x2710;
        unint64_t v24 = v3 - 2;
        --v3;
        if (v24 >= *(void *)(v2 + 16)) {
          goto LABEL_53;
        }
      }

      uint64_t v25 = *(void *)(v2 + 16);
      if (v25 && !*(_WORD *)(v2 + 32 + 2 * v25 - 2))
      {
        do
        {
          *(void *)(v2 + 16) = v25 - 1;
          if (v25 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v2 + 28 + 2 * v25--));
        swift_bridgeObjectRelease();
        uint64_t v4 = v44 + 4;
        if (__OFADD__(v44, 4LL)) {
          goto LABEL_93;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v44 + 4;
        if (__OFADD__(v44, 4LL)) {
          goto LABEL_93;
        }
      }

      unint64_t v3 = *(void *)(v2 + 16);
      unint64_t v9 = v2;
    }

    while (v3 > 9);
    if (v3 == 9) {
      goto LABEL_4;
    }
LABEL_46:
    if (!v6) {
      goto LABEL_55;
    }
    uint64_t v27 = a2;
    if ((_DWORD)v5 == 5 || !(_DWORD)v5) {
      LODWORD(v5) = v5 + 1;
    }
LABEL_56:
    if (v27)
    {
      if (v27 == 2) {
        goto LABEL_64;
      }
      if (v27 != 3) {
        return;
      }
      if ((_DWORD)v5 == 5)
      {
        if (!v3)
        {
          __break(1u);
LABEL_101:
          __break(1u);
          return;
        }

        if ((*(_WORD *)(v2 + 32) & 1) != 0) {
          return;
        }
        goto LABEL_65;
      }
    }

uint64_t specialized static NSDecimal._integerSubtract(term:subtrahend:maxResultLength:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0) {
    goto LABEL_51;
  }
  if (a3)
  {
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v9 + 16) = a3;
    bzero((void *)(v9 + 32), 2 * a3);
  }

  else
  {
    uint64_t v9 = MEMORY[0x18961AFE8];
  }

  unint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a2 + 16);
  if (v11 >= v10) {
    unint64_t v12 = *(void *)(a1 + 16);
  }
  else {
    unint64_t v12 = *(void *)(a2 + 16);
  }
  if (!v12)
  {
    if (!v10) {
      goto LABEL_36;
    }
    unint64_t v12 = 0LL;
    goto LABEL_22;
  }

  unint64_t v13 = *(void *)(v9 + 16);
  if (v13)
  {
    uint64_t v4 = 0LL;
    unsigned int v14 = (*(unsigned __int16 *)(a1 + 32) | 0x10000) - *(unsigned __int16 *)(a2 + 32);
    unint64_t v15 = v12 - 1;
    uint64_t v5 = a2 + 34;
    while (1)
    {
      int v3 = HIWORD(v14);
      *(_WORD *)(v9 + 32 + 2 * v4) = v14;
      unint64_t v12 = v4 + 1;
      if (v15 == v4) {
        break;
      }
      int v3 = v3 + *(unsigned __int16 *)(a1 + 34 + 2 * v4) - *(unsigned __int16 *)(v5 + 2 * v4);
      unsigned int v14 = v3 + 0xFFFF;
      ++v4;
      if (v12 >= v13) {
        goto LABEL_13;
      }
    }
  }

  else
  {
LABEL_13:
    __break(1u);
  }

  if (v12 < v10)
  {
    if (!v3)
    {
      while ((unint64_t)(v4 + 1) < *(void *)(v9 + 16))
      {
        int v16 = *(unsigned __int16 *)(a1 + 34 + 2 * v4);
        LODWORD(v5) = v16 + 0xFFFF;
        *(_WORD *)(v9 + 34 + 2 * v4) = v16 - 1;
        if (v10 - 2 == v4) {
          goto LABEL_39;
        }
        ++v4;
        if (v16)
        {
          unint64_t v12 = v4 + 1;
          goto LABEL_22;
        }
      }

      goto LABEL_50;
    }

uint64_t specialized static NSDecimal._compare(lhs:rhs:)( unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unsigned int v10 = a1;
  uint64_t v226 = *MEMORY[0x1895F89C0];
  unint64_t v223 = a1;
  unint64_t v205 = HIDWORD(a1);
  unint64_t v208 = HIWORD(a1);
  unsigned __int16 v211 = a2;
  unint64_t v224 = a2;
  unint64_t v11 = a2 >> 16;
  unint64_t v12 = HIDWORD(a2);
  unint64_t v13 = HIWORD(a2);
  unsigned int v14 = HIWORD(a3);
  uint64_t v204 = HIDWORD(a4);
  unsigned int v225 = a3;
  int v15 = _So9NSDecimala__length_getter(&v223);
  unint64_t v16 = a4;
  __int16 v17 = a6;
  unsigned int v18 = HIWORD(a6);
  unint64_t v19 = HIDWORD(a5);
  unint64_t v20 = a5 >> 16;
  unint64_t v21 = HIWORD(v16);
  unint64_t v215 = HIWORD(v16);
  LODWORD(v203) = v14;
  if (!v15)
  {
    LODWORD(v223) = v10;
    WORD2(v223) = v205;
    HIWORD(v223) = v208;
    LOWORD(v224) = v211;
    WORD1(v224) = v11;
    WORD2(v224) = v12;
    HIWORD(v224) = v13;
    LOWORD(v225) = a3;
    HIWORD(v225) = v14;
    __int16 v39 = v17;
    int v198 = v16;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v223);
    LODWORD(v16) = v198;
    __int16 v17 = v39;
    unint64_t v20 = a5 >> 16;
    LOWORD(v21) = v215;
    unint64_t v19 = HIDWORD(a5);
    if (isNegative_getter)
    {
      LODWORD(v223) = v198;
      WORD2(v223) = v204;
      HIWORD(v223) = v215;
      unint64_t v224 = a5;
      LOWORD(v225) = v17;
      HIWORD(v225) = v18;
      __int16 v41 = v17;
      if (!_So9NSDecimala__length_getter(&v223))
      {
        LODWORD(v223) = v198;
        WORD2(v223) = v204;
        HIWORD(v223) = v215;
        unint64_t v224 = a5;
        LOWORD(v225) = v41;
        HIWORD(v225) = v18;
      }

      return -1LL;
    }
  }

  unsigned __int16 v199 = v11;
  unsigned __int16 v200 = v12;
  __int16 v201 = v13;
  LODWORD(v202) = a3;
  LODWORD(v223) = v16;
  WORD2(v223) = v204;
  HIWORD(v223) = v21;
  LOWORD(v224) = a5;
  WORD1(v224) = v20;
  WORD2(v224) = v19;
  HIWORD(v224) = HIWORD(a5);
  LOWORD(v225) = v17;
  HIWORD(v225) = v18;
  __int16 v22 = v18;
  unint64_t v23 = HIWORD(a5);
  __int16 v24 = v19;
  __int16 v25 = v20;
  __int16 v26 = v17;
  unsigned int v27 = v16;
  if (!_So9NSDecimala__length_getter(&v223))
  {
    LODWORD(v223) = v27;
    WORD2(v223) = v204;
    HIWORD(v223) = v215;
    LOWORD(v224) = a5;
    WORD1(v224) = v25;
    WORD2(v224) = v24;
    HIWORD(v224) = HIWORD(a5);
    LOWORD(v225) = v26;
    HIWORD(v225) = v22;
  }

  unsigned int v197 = v10;
  LODWORD(v223) = v10;
  WORD2(v223) = v205;
  HIWORD(v223) = v208;
  LOWORD(v224) = v211;
  WORD1(v224) = v11;
  WORD2(v224) = v200;
  HIWORD(v224) = v201;
  LOWORD(v225) = a3;
  HIWORD(v225) = v203;
  unsigned int v28 = _So9NSDecimala__isNegative_getter(&v223);
  LODWORD(v223) = v27;
  WORD2(v223) = v204;
  HIWORD(v223) = v215;
  LOWORD(v224) = a5;
  WORD1(v224) = v25;
  WORD2(v224) = v24;
  HIWORD(v224) = HIWORD(a5);
  LOWORD(v225) = v26;
  HIWORD(v225) = v22;
  LODWORD(v223) = v10;
  WORD2(v223) = v205;
  HIWORD(v223) = v208;
  LOWORD(v224) = v211;
  WORD1(v224) = v199;
  WORD2(v224) = v200;
  HIWORD(v224) = v201;
  LOWORD(v225) = a3;
  HIWORD(v225) = v203;
  unsigned int v29 = _So9NSDecimala__isNegative_getter(&v223);
  LODWORD(v223) = v27;
  WORD2(v223) = v204;
  HIWORD(v223) = v215;
  LOWORD(v224) = a5;
  WORD1(v224) = v25;
  WORD2(v224) = v24;
  HIWORD(v224) = HIWORD(a5);
  LOWORD(v225) = v26;
  HIWORD(v225) = v22;
  LODWORD(v223) = v10;
  WORD2(v223) = v205;
  HIWORD(v223) = v208;
  LOWORD(v224) = v211;
  WORD1(v224) = v199;
  WORD2(v224) = v200;
  HIWORD(v224) = v201;
  LOWORD(v225) = a3;
  HIWORD(v225) = v203;
  if (!_So9NSDecimala__length_getter(&v223))
  {
    LODWORD(v223) = v27;
    WORD2(v223) = v204;
    HIWORD(v223) = v215;
    LOWORD(v224) = a5;
    WORD1(v224) = v25;
    WORD2(v224) = v24;
    HIWORD(v224) = HIWORD(a5);
    LOWORD(v225) = v26;
    HIWORD(v225) = v22;
    else {
      return 0LL;
    }
  }

  LODWORD(v223) = v27;
  WORD2(v223) = v204;
  HIWORD(v223) = v215;
  __int16 v196 = a5;
  LOWORD(v224) = a5;
  WORD1(v224) = v25;
  WORD2(v224) = v24;
  HIWORD(v224) = HIWORD(a5);
  LOWORD(v225) = v26;
  HIWORD(v225) = v22;
  if (!_So9NSDecimala__length_getter(&v223))
  {
    LODWORD(v223) = v10;
    WORD2(v223) = v205;
    HIWORD(v223) = v208;
    LOWORD(v224) = v211;
    WORD1(v224) = v199;
    WORD2(v224) = v200;
    HIWORD(v224) = v201;
    LOWORD(v225) = a3;
    HIWORD(v225) = v203;
    return _So9NSDecimala__length_getter(&v223) != 0;
  }

  LODWORD(v223) = v10;
  WORD2(v223) = v205;
  HIWORD(v223) = v208;
  LOWORD(v224) = v211;
  WORD1(v224) = v199;
  WORD2(v224) = v200;
  HIWORD(v224) = v201;
  LOWORD(v225) = a3;
  HIWORD(v225) = v203;
  LODWORD(v220) = v27;
  WORD2(v220) = v204;
  HIWORD(v220) = v215;
  LOWORD(v221) = a5;
  WORD1(v221) = v25;
  WORD2(v221) = v24;
  HIWORD(v221) = HIWORD(a5);
  LOWORD(v222) = v26;
  HIWORD(v222) = v22;
  *(_DWORD *)v219 = v10;
  *(_WORD *)&v219[4] = v205;
  *(_DWORD *)&v219[6] = __PAIR32__(v211, v208);
  *(_DWORD *)&v219[10] = __PAIR32__(v200, v199);
  *(_WORD *)&v219[14] = v201;
  *(_WORD *)&v219[16] = a3;
  *(_WORD *)&v219[18] = v203;
  int v30 = _So9NSDecimala__exponent_getter(v219);
  *(_DWORD *)v219 = v27;
  *(_WORD *)&v219[4] = v204;
  *(_WORD *)&v219[6] = v215;
  *(_WORD *)&v219[8] = v196;
  *(_WORD *)&v219[10] = v25;
  *(_WORD *)&v219[12] = v24;
  *(_WORD *)&v219[14] = v23;
  *(_WORD *)&v219[16] = v26;
  *(_WORD *)&v219[18] = v22;
  int v31 = _So9NSDecimala__exponent_getter(v219);
  int v32 = v30 - v31;
  if (v30 == v31) {
    goto LABEL_180;
  }
  uint64_t v33 = v32;
  if (v32 < 0)
  {
    unsigned int v38 = v27;
    v34 = (char *)&v220 + 4;
    uint64_t v33 = -v33;
    uint64_t v36 = (uint64_t)&v220;
    unsigned int v37 = &v223;
    unsigned __int16 v35 = v204;
  }

  else
  {
    v34 = (char *)&v223 + 4;
    unsigned __int16 v35 = v205;
    uint64_t v36 = (uint64_t)&v223;
    unsigned int v37 = &v220;
    unsigned int v38 = v197;
  }

  unint64_t v44 = v38 | ((unint64_t)v35 << 32) | ((unint64_t)*((unsigned __int16 *)v34 + 1) << 48);
  unint64_t v45 = *(void *)(v34 + 4);
  unsigned int v46 = *((_DWORD *)v34 + 3);
  NSDecimal.asVariableLengthInteger()(v44, v45, v46);
  uint64_t v48 = v47;
  if (!v33) {
    goto LABEL_80;
  }
  LODWORD(v206) = v46;
  unint64_t v209 = v45;
  unint64_t v212 = v44;
  v216 = v37;
  uint64_t v49 = specialized abs<A>(_:)(v33);
  uint64_t v50 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v50 != -1) {
    goto LABEL_336;
  }
  while (1)
  {
    v51 = &demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>;
    rawValue = powerOfTen._rawValue;
    uint64_t v53 = *((void *)powerOfTen._rawValue + 2);
    if (v53 > v49) {
      break;
    }
    uint64_t v202 = v33;
    if (!v53) {
      goto LABEL_346;
    }
    uint64_t v33 = v53 - 1;
    uint64_t v55 = v48;
    while (1)
    {
      BOOL v60 = __OFSUB__(v49, v33);
      v49 -= v33;
      if (v60) {
        goto LABEL_334;
      }
      uint64_t v61 = v51[382];
      uint64_t v62 = *(void *)(v55 + 16);
      if (v62 && (uint64_t v63 = *(void *)(v61 + 8 * v33 + 32), (v54 = *(char **)(v63 + 16)) != 0LL))
      {
        if (__OFADD__(v62, v54)) {
          goto LABEL_347;
        }
        uint64_t v203 = v48;
        uint64_t v204 = v36;
        else {
          uint64_t v58 = (uint64_t)&v54[v62];
        }
        if (v58 < 0) {
          goto LABEL_391;
        }
        swift_bridgeObjectRetain();
        uint64_t v64 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v64 + 16) = v58;
        uint64_t v36 = v64 + 32;
        bzero((void *)(v64 + 32), 2 * v58);
        v66 = 0LL;
        uint64_t v67 = v63 + 32;
        do
        {
          unsigned int v68 = 0;
          uint64_t v69 = 0LL;
          v70 = v66++;
          do
          {
            uint64_t v73 = (uint64_t)&v70[v69];
            if (__OFADD__(v69, v70))
            {
              __break(1u);
              swift_bridgeObjectRelease();
              goto LABEL_175;
            }

            if (v73 >= v58)
            {
              if (v68) {
                goto LABEL_77;
              }
              unsigned int v68 = *(unsigned __int16 *)(v67 + 2LL * (void)v70);
              if (*(_WORD *)(v67 + 2LL * (void)v70))
              {
                unsigned int v68 = *(unsigned __int16 *)(v55 + 2 * v69 + 32);
                if (*(_WORD *)(v55 + 2 * v69 + 32)) {
                  goto LABEL_77;
                }
              }
            }

            else
            {
              if (v73 < 0)
              {
                __break(1u);
LABEL_282:
                __break(1u);
LABEL_283:
                uint64_t v142 = v65;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_284:
                uint64_t v59 = v203;
                goto LABEL_285;
              }

              uint64_t v71 = 2 * v73;
              unsigned int v72 = v68
              unsigned int v68 = HIWORD(v72);
              *(_WORD *)(v36 + v71) = v72;
            }

            ++v69;
          }

          while (v62 != v69);
          if (v68)
          {
            BOOL v60 = __OFADD__(v62, v70);
            uint64_t v74 = (uint64_t)&v70[v62];
            if (v60) {
              goto LABEL_351;
            }
            if (v74 >= v58) {
              goto LABEL_77;
            }
            if (v74 < 0) {
              goto LABEL_352;
            }
            *(_WORD *)(v36 + 2 * v74) = v68;
          }
        }

        while (v66 != v54);
        uint64_t v75 = *(void *)(v64 + 16);
        if (v75 && !*(_WORD *)(v36 + 2 * v75 - 2))
        {
          uint64_t v76 = v75 + 14;
          do
          {
            *(void *)(v64 + 16) = v76 - 15;
            if (v76 == 15) {
              break;
            }
          }

          while (!*(unsigned __int16 *)(v64 + 2 * v76--));
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v55 = v64;
        uint64_t v48 = v203;
        uint64_t v36 = v204;
        v51 = &demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>;
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v55 = MEMORY[0x18961AFE8];
      }

      if (v53 > v49)
      {
        rawValue = (void *)v51[382];
        v54 = 0LL;
        uint64_t v33 = v202;
        if (v49 < 0) {
          goto LABEL_76;
        }
        goto LABEL_27;
      }
    }

LABEL_335:
    __break(1u);
LABEL_336:
    swift_once();
  }

  v54 = 0LL;
  uint64_t v55 = v48;
  if (v49 < 0)
  {
LABEL_76:
    __break(1u);
LABEL_77:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    uint64_t v58 = swift_allocError();
    _BYTE *v78 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    unint64_t v79 = 0LL;
    uint64_t v36 = v204;
    uint64_t v33 = v202;
    goto LABEL_114;
  }

              __break(1u);
LABEL_336:
              __break(1u);
LABEL_337:
              __break(1u);
LABEL_338:
              __break(1u);
LABEL_339:
              __break(1u);
LABEL_340:
              __break(1u);
              goto LABEL_341;
            }

    v323 = 0LL;
    v325 = 0LL;
    v326 = 0;
LABEL_336:
    if ((v310 & 1) == 0 && v334 < v297)
    {
      v368 = 0LL;
      v369 = 0LL;
      AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v368, v295, v334, v297);
    }

    if (v332 < v325) {
      v327 = v326;
    }
    else {
      v327 = 0;
    }
    if (v327 == 1)
    {
      v368 = 0LL;
      v369 = 0LL;
      AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v368, v323, v332, v325);
    }

    goto LABEL_238;
  }

  v284 = *(_OWORD *)(v340 + 16);
  v370 = *(_OWORD *)v340;
  v371 = v284;
  v372 = *(_OWORD *)(v340 + 32);
  if (v283 > (unint64_t)BigString.startIndex.getter() >> 10)
  {
    unint64_t v16 = (uint64_t)&v370;
    if (v283 < (unint64_t)BigString.endIndex.getter() >> 10)
    {
      uint64_t result = v334 - 1;
      if (__OFSUB__(v334, 1LL)) {
        goto LABEL_420;
      }
      if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v334) & 1) != 0)
      {
        v285 = *(_OWORD *)v340;
        v286 = *(_OWORD *)(v340 + 32);
        v456 = *(_OWORD *)(v340 + 16);
        v457 = v286;
        v455 = v285;
        v287 = *(_OWORD *)v340;
        v358 = *(_OWORD *)(v340 + 16);
        v359 = v286;
        v357 = v287;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v357, (uint64_t)v423);
        outlined retain of Locale((uint64_t)v423);
        v288 = BigString.index(before:)();
        v290 = v289;
        v292 = v291;
        v294 = v293;
        outlined release of Locale((uint64_t)&v455);
        AttributedString.Guts._paragraphExtending(from:)(v288, v290, v292, v294, (uint64_t)&v363);
        v295 = Range<>._utf8OffsetRange.getter();
        v297 = v296;
        goto LABEL_334;
      }
    }
  }

LABEL_356:
        __break(1u);
LABEL_357:
        __break(1u);
LABEL_358:
        __break(1u);
LABEL_359:
        __break(1u);
LABEL_360:
        __break(1u);
LABEL_361:
        __break(1u);
LABEL_362:
        __break(1u);
LABEL_363:
        __break(1u);
        goto LABEL_364;
      }

      goto LABEL_146;
    }
  }

  __break(1u);
LABEL_325:
  uint64_t v140 = *(void *)(v48 + 3056);
  if (v109 < 0) {
    goto LABEL_326;
  }
  while (2)
  {
    unint64_t v57 = *(void *)(v140 + 8 * v109 + 32);
    if (v203 < 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v65 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v59, v57, 8LL);
      if (v54) {
        goto LABEL_279;
      }
      goto LABEL_283;
    }

    uint64_t v58 = *(void *)(v59 + 16);
    if (!v58 || (uint64_t v53 = *(void *)(v57 + 16)) == 0)
    {
LABEL_277:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v142 = MEMORY[0x18961AFE8];
      goto LABEL_284;
    }

    uint64_t v56 = v36;
    uint64_t v141 = v58 + v53;
    if (__OFADD__(v58, v53)) {
      goto LABEL_387;
    }
    if (v141 > 7)
    {
LABEL_294:
      uint64_t v141 = 8LL;
      goto LABEL_295;
    }

    if (v141 < 0) {
      goto LABEL_391;
    }
    if (!v141)
    {
      swift_bridgeObjectRetain();
      uint64_t v142 = MEMORY[0x18961AFE8];
      goto LABEL_296;
    }

LABEL_295:
    swift_bridgeObjectRetain();
    uint64_t v142 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v142 + 16) = v141;
    bzero((void *)(v142 + 32), 2 * v141);
LABEL_296:
    uint64_t v182 = 0LL;
    unint64_t v183 = v57 + 32;
    uint64_t v184 = v142 + 32;
    while (2)
    {
      if (v182 == v53) {
        goto LABEL_386;
      }
      unsigned int v185 = 0;
      uint64_t v186 = 0LL;
      uint64_t v187 = v182 + 1;
      do
      {
        if (v58 == v186) {
          goto LABEL_354;
        }
        uint64_t v190 = v186 + v182;
        if (__OFADD__(v186, v182)) {
          goto LABEL_355;
        }
        if (v190 >= v141)
        {
          if (v185) {
            goto LABEL_323;
          }
          unsigned int v185 = *(unsigned __int16 *)(v183 + 2 * v182);
          if (*(_WORD *)(v183 + 2 * v182))
          {
            unsigned int v185 = *(unsigned __int16 *)(v59 + 2 * v186 + 32);
            if (*(_WORD *)(v59 + 2 * v186 + 32)) {
              goto LABEL_323;
            }
          }
        }

        else
        {
          if (v190 < 0) {
            goto LABEL_368;
          }
          uint64_t v188 = 2 * v190;
          unsigned int v189 = v185
          unsigned int v185 = HIWORD(v189);
          *(_WORD *)(v184 + v188) = v189;
        }

        ++v186;
      }

      while (v58 != v186);
      if (!v185)
      {
LABEL_317:
        uint64_t v182 = v187;
        if (v187 != v53) {
          continue;
        }
        uint64_t v192 = *(void *)(v142 + 16);
        if (v192 && !*(_WORD *)(v184 + 2 * v192 - 2))
        {
          do
          {
            *(void *)(v142 + 16) = v192 - 1;
            if (v192 == 1) {
              break;
            }
          }

          while (!*(unsigned __int16 *)(v142 + 28 + 2 * v192--));
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v36 = v56;
        goto LABEL_284;
      }

      break;
    }

    BOOL v60 = __OFADD__(v58, v182);
    uint64_t v191 = v58 + v182;
    if (v60) {
      goto LABEL_388;
    }
    if (v191 < v141)
    {
      if (v191 < 0) {
        goto LABEL_389;
      }
      *(_WORD *)(v184 + 2 * v191) = v185;
      goto LABEL_317;
    }

      swift_bridgeObjectRelease();
      uint64_t v178 = v447;
      goto LABEL_305;
    }

              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
            }

            __break(1u);
LABEL_299:
            __break(1u);
            JUMPOUT(0x183430214LL);
          }

          uint64_t v106 = v102 + 1;
          if (__OFADD__(v102, 1LL)) {
            goto LABEL_270;
          }
          ++v102;
          --v101;
          if (a3 + v102 >= v97) {
            goto LABEL_166;
          }
        }

        uint64_t v53 = __OFADD__(v100++, 1LL);
        if (!v53)
        {
          a3 += v102 + 1;
          goto LABEL_164;
        }

        goto LABEL_294;
      }

      uint64_t v170 = a7;
      unint64_t v23 = v14 + 1;
      unint64_t v44 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + 1);
      if (v44 == 48)
      {
        uint64_t v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
        unint64_t v20 = v14 + 2;
        if (specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
        {
          __int16 v22 = 0;
          goto LABEL_46;
        }

        uint64_t v151 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v20);
        __int16 v22 = 0;
        if (v151 <= 0x57u)
        {
          if (v151 == 46 || v151 == 69) {
            goto LABEL_46;
          }
        }

        else
        {
          switch(v151)
          {
            case 'x':
              goto LABEL_239;
            case 'e':
              goto LABEL_46;
            case 'X':
LABEL_239:
              unint64_t v23 = v14 + 3;
              if (specialized static Comparable.<= infix(_:_:)(v14 + 3, v14 + v13)) {
                goto LABEL_13;
              }
              if (v13 - 2 < 1)
              {
                __break(1u);
LABEL_242:
                uint64_t v109 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v184);
                v111 = v152;
                unsigned int v113 = v153;
                unint64_t v23 = v23;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)BOOL v60 = 0xD000000000000013LL;
                *(void *)(v60 + 8) = 0x80000001839CB4D0LL;
LABEL_243:
                *(void *)(v60 + 16) = v23;
                goto LABEL_244;
              }

              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
            }

            __break(1u);
LABEL_299:
            __break(1u);
            JUMPOUT(0x1834345A8LL);
          }

          uint64_t v130 = v126 + 1;
          if (__OFADD__(v126, 1LL)) {
            goto LABEL_270;
          }
          ++v126;
          --v125;
          if (a3 + v126 >= v121) {
            goto LABEL_214;
          }
        }

        uint64_t v58 = __OFADD__(v124++, 1LL);
        if (!v58)
        {
          a3 += v126 + 1;
          goto LABEL_212;
        }

        goto LABEL_294;
      }

      unint64_t v21 = v14 + 1;
      v40 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + 1);
      if (v40 == 48)
      {
        v177 = a7;
        unsigned int v18 = v14 + 2;
        if (specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
        {
          unint64_t v20 = 0;
          goto LABEL_47;
        }

        uint64_t v157 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v18);
        unint64_t v20 = 0;
        v158 = v157;
        if (v157 > 0x57u)
        {
          if (v157 != 120)
          {
            if (v157 == 101) {
              goto LABEL_47;
            }
            if (v157 != 88)
            {
LABEL_251:
              uint64_t v159 = _asciiNumbers.getter();
              v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v18, a3, v11);
              uint64_t v36 = v160;
              unsigned int v38 = v161;
              uint64_t v49 = v157;
              goto LABEL_185;
            }
          }

          unint64_t v21 = v14 + 3;
          if (specialized static Comparable.<= infix(_:_:)(v14 + 3, v14 + v13)) {
            goto LABEL_13;
          }
          if (v13 - 2 >= 1)
          {
LABEL_221:
            uint64_t v139 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v18);
            uint64_t v134 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v18, a3, v11);
            uint64_t v136 = v140;
            uint64_t v138 = v141;
            uint64_t v142 = v139;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v63 = xmmword_1837301C0;
LABEL_231:
            *(void *)(v63 + 16) = v142;
            goto LABEL_232;
          }

          __break(1u);
        }

        if (v158 == 46 || v158 == 69) {
          goto LABEL_47;
        }
        goto LABEL_251;
      }

      int v143 = v40;
      if (v40 == 46) {
        goto LABEL_256;
      }
      if (v40 != 78)
      {
        if (v40 == 73)
        {
          uint64_t v144 = (char *)specialized BufferView.dropFirst(_:)(1LL, v14, v13);
          uint64_t result = specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v144, v145, a3, v11);
          if (v9) {
            return result;
          }
          v177 = a7;
          unint64_t v20 = 1;
          goto LABEL_47;
        }

        unsigned int v197 = 0LL;
        int v198 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(20LL);
        v166._countAndFlagsBits = 0x27207265746661LL;
        v166._object = (void *)0xE700000000000000LL;
        DefaultStringInterpolation.appendLiteral(_:)(v166);
        uint64_t v167 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14);
        unsigned int v168 = (v167 + 1);
        if ((v167 & 0x80) != 0) {
          unsigned int v168 = (((v167 & 0x3F) << 8) | (v167 >> 6)) + 33217;
        }
        __int16 v196 = (v168 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v168) >> 3)) & 7)));
        v169._countAndFlagsBits = MEMORY[0x186E1B6AC](&v196);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v169);
        swift_bridgeObjectRelease();
        v170._countAndFlagsBits = 0x6D756E206E692027LL;
        v170._object = (void *)0xEB00000000726562LL;
        DefaultStringInterpolation.appendLiteral(_:)(v170);
        uint64_t v171 = v197;
        uint64_t v172 = v198;
        unsigned int v173 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v11);
        uint64_t v175 = v174;
        v102 = v176;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v63 = v171;
        *(void *)(v63 + 8) = v172;
        *(void *)(v63 + 16) = v143;
        *(void *)(v63 + 24) = v173;
        *(void *)(v63 + 32) = v175;
LABEL_148:
        *(void *)(v63 + 40) = v102;
LABEL_233:
        uint64_t v64 = 1;
        goto LABEL_234;
      }

      uint64_t v164 = (char *)specialized BufferView.dropFirst(_:)(1LL, v14, v13);
      uint64_t result = specialized static JSON5Scanner.validateNaN(from:fullSource:)(v164, v165, a3, v11);
      if (v9) {
        return result;
      }
      v177 = a7;
      unint64_t v20 = 1;
LABEL_47:
      __int16 v24 = v20;
      uint64_t v50 = v14 + v13;
      v51 = v14 + v13 - 1;
      uint64_t v182 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v51);
      if ((v182 | 0x20) != 0x65)
      {
        unint64_t v23 = 0LL;
        goto LABEL_76;
      }

      v52 = v51 - a3;
      if (v51 < a3 || a3 + v11 < v51) {
        goto LABEL_272;
      }
      uint64_t v53 = v11;
      if (a3 + v11 >= v50) {
        unint64_t v11 = v50;
      }
      else {
        v11 += a3;
      }
      if (v11 <= a3)
      {
        unint64_t v21 = 0LL;
        unint64_t v13 = 1LL;
        goto LABEL_80;
      }

      uint64_t v178 = v51 - a3;
      v54 = v53 + a3;
      uint64_t v55 = -(uint64_t)a3;
      unint64_t v13 = 1LL;
      uint64_t v187 = v53 + a3;
      a8 = -(uint64_t)a3;
      do
      {
        unsigned int v10 = 0LL;
        unsigned int v14 = 0LL;
        uint64_t v56 = v54 - a3;
        a7 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))(v55 + a3);
        while (1)
        {
          if ((uint64_t)((uint64_t)a7 + v14) < 0 || (uint64_t)(v56 + v10) < 1)
          {
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            uint64_t v162 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v14, v13);
            uint64_t result = (uint64_t)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)( v162,  v163,  a3,  v11);
            if (v10) {
              return result;
            }
LABEL_257:
            v177 = a7;
            unint64_t v20 = 0;
            goto LABEL_47;
          }

          unint64_t v57 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v14);
          if (v57 == 10)
          {
            uint64_t v58 = __OFADD__(v13++, 1LL);
            uint64_t v55 = a8;
            if (!v58)
            {
              a3 += v14 + 1;
              goto LABEL_72;
            }

              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
            }

            __break(1u);
LABEL_299:
            __break(1u);
            JUMPOUT(0x1834369CCLL);
          }

          uint64_t v130 = v126 + 1;
          if (__OFADD__(v126, 1LL)) {
            goto LABEL_270;
          }
          ++v126;
          --v125;
          if (a3 + v126 >= v121) {
            goto LABEL_214;
          }
        }

        uint64_t v58 = __OFADD__(v124++, 1LL);
        if (!v58)
        {
          a3 += v126 + 1;
          goto LABEL_212;
        }

        goto LABEL_294;
      }

      unint64_t v21 = v14 + 1;
      v40 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + 1);
      if (v40 == 48)
      {
        v177 = a7;
        unsigned int v18 = v14 + 2;
        if (specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
        {
          unint64_t v20 = 0;
          goto LABEL_47;
        }

        uint64_t v157 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v18);
        unint64_t v20 = 0;
        v158 = v157;
        if (v157 > 0x57u)
        {
          if (v157 != 120)
          {
            if (v157 == 101) {
              goto LABEL_47;
            }
            if (v157 != 88)
            {
LABEL_251:
              uint64_t v159 = _asciiNumbers.getter();
              v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v18, a3, v11);
              uint64_t v36 = v160;
              unsigned int v38 = v161;
              uint64_t v49 = v157;
              goto LABEL_185;
            }
          }

          unint64_t v21 = v14 + 3;
          if (specialized static Comparable.<= infix(_:_:)(v14 + 3, v14 + v13)) {
            goto LABEL_13;
          }
          if (v13 - 2 >= 1)
          {
LABEL_221:
            uint64_t v139 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v18);
            uint64_t v134 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v18, a3, v11);
            uint64_t v136 = v140;
            uint64_t v138 = v141;
            uint64_t v142 = v139;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v63 = xmmword_1837301C0;
LABEL_231:
            *(void *)(v63 + 16) = v142;
            goto LABEL_232;
          }

          __break(1u);
        }

        if (v158 == 46 || v158 == 69) {
          goto LABEL_47;
        }
        goto LABEL_251;
      }

      int v143 = v40;
      if (v40 == 46) {
        goto LABEL_256;
      }
      if (v40 != 78)
      {
        if (v40 == 73)
        {
          uint64_t v144 = (char *)specialized BufferView.dropFirst(_:)(1LL, v14, v13);
          uint64_t result = specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v144, v145, a3, v11);
          if (v9) {
            return result;
          }
          v177 = a7;
          unint64_t v20 = 1;
          goto LABEL_47;
        }

        unsigned int v197 = 0LL;
        int v198 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(20LL);
        v166._countAndFlagsBits = 0x27207265746661LL;
        v166._object = (void *)0xE700000000000000LL;
        DefaultStringInterpolation.appendLiteral(_:)(v166);
        uint64_t v167 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14);
        unsigned int v168 = (v167 + 1);
        if ((v167 & 0x80) != 0) {
          unsigned int v168 = (((v167 & 0x3F) << 8) | (v167 >> 6)) + 33217;
        }
        __int16 v196 = (v168 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v168) >> 3)) & 7)));
        v169._countAndFlagsBits = MEMORY[0x186E1B6AC](&v196);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v169);
        swift_bridgeObjectRelease();
        v170._countAndFlagsBits = 0x6D756E206E692027LL;
        v170._object = (void *)0xEB00000000726562LL;
        DefaultStringInterpolation.appendLiteral(_:)(v170);
        uint64_t v171 = v197;
        uint64_t v172 = v198;
        unsigned int v173 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v11);
        uint64_t v175 = v174;
        v102 = v176;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v63 = v171;
        *(void *)(v63 + 8) = v172;
        *(void *)(v63 + 16) = v143;
        *(void *)(v63 + 24) = v173;
        *(void *)(v63 + 32) = v175;
LABEL_148:
        *(void *)(v63 + 40) = v102;
LABEL_233:
        uint64_t v64 = 1;
        goto LABEL_234;
      }

      uint64_t v164 = (char *)specialized BufferView.dropFirst(_:)(1LL, v14, v13);
      uint64_t result = specialized static JSON5Scanner.validateNaN(from:fullSource:)(v164, v165, a3, v11);
      if (v9) {
        return result;
      }
      v177 = a7;
      unint64_t v20 = 1;
LABEL_47:
      __int16 v24 = v20;
      uint64_t v50 = v14 + v13;
      v51 = v14 + v13 - 1;
      uint64_t v182 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v51);
      if ((v182 | 0x20) != 0x65)
      {
        unint64_t v23 = 0LL;
        goto LABEL_76;
      }

      v52 = v51 - a3;
      if (v51 < a3 || a3 + v11 < v51) {
        goto LABEL_272;
      }
      uint64_t v53 = v11;
      if (a3 + v11 >= v50) {
        unint64_t v11 = v50;
      }
      else {
        v11 += a3;
      }
      if (v11 <= a3)
      {
        unint64_t v21 = 0LL;
        unint64_t v13 = 1LL;
        goto LABEL_80;
      }

      uint64_t v178 = v51 - a3;
      v54 = v53 + a3;
      uint64_t v55 = -(uint64_t)a3;
      unint64_t v13 = 1LL;
      uint64_t v187 = v53 + a3;
      a8 = -(uint64_t)a3;
      do
      {
        unsigned int v10 = 0LL;
        unsigned int v14 = 0LL;
        uint64_t v56 = v54 - a3;
        a7 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))(v55 + a3);
        while (1)
        {
          if ((uint64_t)((uint64_t)a7 + v14) < 0 || (uint64_t)(v56 + v10) < 1)
          {
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            uint64_t v162 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v14, v13);
            uint64_t result = (uint64_t)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)( v162,  v163,  a3,  v11);
            if (v10) {
              return result;
            }
LABEL_257:
            v177 = a7;
            unint64_t v20 = 0;
            goto LABEL_47;
          }

          unint64_t v57 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v14);
          if (v57 == 10)
          {
            uint64_t v58 = __OFADD__(v13++, 1LL);
            uint64_t v55 = a8;
            if (!v58)
            {
              a3 += v14 + 1;
              goto LABEL_72;
            }

              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
            }

            __break(1u);
LABEL_299:
            __break(1u);
            JUMPOUT(0x183439E0CLL);
          }

          unint64_t v132 = v128 + 1;
          if (__OFADD__(v128, 1LL)) {
            goto LABEL_270;
          }
          ++v128;
          --v127;
          if (a3 + v128 >= v123) {
            goto LABEL_214;
          }
        }

        uint64_t v58 = __OFADD__(v126++, 1LL);
        if (!v58)
        {
          a3 += v128 + 1;
          goto LABEL_212;
        }

        goto LABEL_294;
      }

      unint64_t v21 = v14 + 1;
      v40 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + 1);
      if (v40 == 48)
      {
        v177 = a7;
        unsigned int v18 = v14 + 2;
        if (specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
        {
          unint64_t v20 = 0;
          goto LABEL_47;
        }

        uint64_t v159 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v18);
        unint64_t v20 = 0;
        uint64_t v160 = v159;
        if (v159 > 0x57u)
        {
          if (v159 != 120)
          {
            if (v159 == 101) {
              goto LABEL_47;
            }
            if (v159 != 88)
            {
LABEL_251:
              uint64_t v161 = _asciiNumbers.getter();
              v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v18, a3, v11);
              uint64_t v36 = v162;
              unsigned int v38 = v163;
              uint64_t v49 = v159;
              goto LABEL_185;
            }
          }

          unint64_t v21 = v14 + 3;
          if (specialized static Comparable.<= infix(_:_:)(v14 + 3, v14 + v13)) {
            goto LABEL_13;
          }
          if (v13 - 2 >= 1)
          {
LABEL_221:
            uint64_t v141 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v18);
            uint64_t v136 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v18, a3, v11);
            uint64_t v138 = v142;
            uint64_t v140 = v143;
            uint64_t v144 = v141;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v64 = xmmword_1837301C0;
LABEL_231:
            *(void *)(v64 + 16) = v144;
            goto LABEL_232;
          }

          __break(1u);
        }

        if (v160 == 46 || v160 == 69) {
          goto LABEL_47;
        }
        goto LABEL_251;
      }

      uint64_t v145 = v40;
      if (v40 == 46) {
        goto LABEL_256;
      }
      if (v40 != 78)
      {
        if (v40 == 73)
        {
          uint64_t v146 = (char *)specialized BufferView.dropFirst(_:)(1LL, v14, v13);
          uint64_t result = (char *)specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v146, v147, a3, v11);
          if (v9) {
            return result;
          }
          v177 = a7;
          unint64_t v20 = 1;
          goto LABEL_47;
        }

        _StringGuts.grow(_:)(20LL);
        v168._countAndFlagsBits = 0x27207265746661LL;
        v168._object = (void *)0xE700000000000000LL;
        DefaultStringInterpolation.appendLiteral(_:)(v168);
        uint64_t v169 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14);
        uint64_t v170 = (v169 + 1);
        if ((v169 & 0x80) != 0) {
          uint64_t v170 = (((v169 & 0x3F) << 8) | (v169 >> 6)) + 33217;
        }
        __int16 v196 = (v170 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v170) >> 3)) & 7)));
        v171._countAndFlagsBits = MEMORY[0x186E1B6AC](&v196);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v171);
        swift_bridgeObjectRelease();
        v172._countAndFlagsBits = 0x6D756E206E692027LL;
        v172._object = (void *)0xEB00000000726562LL;
        DefaultStringInterpolation.appendLiteral(_:)(v172);
        unsigned int v173 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v11);
        uint64_t v175 = v174;
        uint64_t v103 = v176;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v64 = 0LL;
        *(void *)(v64 + 8) = 0xE000000000000000LL;
        *(void *)(v64 + 16) = v145;
        *(void *)(v64 + 24) = v173;
        *(void *)(v64 + 32) = v175;
LABEL_148:
        *(void *)(v64 + 40) = v103;
LABEL_233:
        uint64_t v65 = 1;
        goto LABEL_234;
      }

      uint64_t v166 = (char *)specialized BufferView.dropFirst(_:)(1LL, v14, v13);
      uint64_t result = (char *)specialized static JSON5Scanner.validateNaN(from:fullSource:)(v166, v167, a3, v11);
      if (v9) {
        return result;
      }
      v177 = a7;
      unint64_t v20 = 1;
LABEL_47:
      __int16 v24 = v20;
      uint64_t v50 = v14 + v13;
      v51 = v14 + v13 - 1;
      uint64_t v182 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v51);
      if ((v182 | 0x20) != 0x65)
      {
        unint64_t v23 = 0;
        goto LABEL_76;
      }

      v52 = v51 - a3;
      if (v51 < a3 || a3 + v11 < v51) {
        goto LABEL_272;
      }
      uint64_t v53 = v11;
      if (a3 + v11 >= v50) {
        unint64_t v11 = v50;
      }
      else {
        v11 += a3;
      }
      if (v11 <= a3)
      {
        unint64_t v21 = 0LL;
        unint64_t v13 = 1LL;
        goto LABEL_80;
      }

      uint64_t v178 = v51 - a3;
      v54 = v53 + a3;
      uint64_t v55 = -(uint64_t)a3;
      unint64_t v13 = 1LL;
      uint64_t v187 = v53 + a3;
      a8 = -(uint64_t)a3;
      do
      {
        unsigned int v10 = 0LL;
        unsigned int v14 = 0LL;
        uint64_t v56 = v54 - a3;
        a7 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t))(v55 + a3);
        while (1)
        {
          if ((uint64_t)((uint64_t)a7 + v14) < 0 || (uint64_t)(v56 + v10) < 1)
          {
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            uint64_t v164 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v14, v13);
            uint64_t result = (char *)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)( v164,  v165,  a3,  v11);
            if (v10) {
              return result;
            }
LABEL_257:
            v177 = a7;
            unint64_t v20 = 0;
            goto LABEL_47;
          }

          unint64_t v57 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v14);
          if (v57 == 10)
          {
            uint64_t v58 = __OFADD__(v13++, 1LL);
            uint64_t v55 = a8;
            if (!v58)
            {
              a3 += v14 + 1;
              goto LABEL_72;
            }

              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
            }

            __break(1u);
LABEL_299:
            __break(1u);
            JUMPOUT(0x18343D1F4LL);
          }

          uint64_t v106 = v102 + 1;
          if (__OFADD__(v102, 1LL)) {
            goto LABEL_270;
          }
          ++v102;
          --v101;
          if (a3 + v102 >= v97) {
            goto LABEL_166;
          }
        }

        v54 = __OFADD__(v100++, 1LL);
        if (!v54)
        {
          a3 += v102 + 1;
          goto LABEL_164;
        }

        goto LABEL_294;
      }

      uint64_t v169 = a7;
      __int16 v24 = v15 + 1;
      unint64_t v45 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15 + 1);
      if (v45 == 48)
      {
        unsigned int v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
        unint64_t v21 = v15 + 2;
        if (specialized Collection.isEmpty.getter(v15 + 2, v14 - 2))
        {
          unint64_t v23 = 0;
          goto LABEL_46;
        }

        uint64_t v150 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v21);
        unint64_t v23 = 0;
        if (v150 <= 0x57u)
        {
          if (v150 == 46 || v150 == 69) {
            goto LABEL_46;
          }
        }

        else
        {
          switch(v150)
          {
            case 'x':
              goto LABEL_239;
            case 'e':
              goto LABEL_46;
            case 'X':
LABEL_239:
              __int16 v24 = v15 + 3;
              if (specialized static Comparable.<= infix(_:_:)(v15 + 3, v15 + v14)) {
                goto LABEL_13;
              }
              if (v14 - 2 < 1)
              {
                __break(1u);
LABEL_242:
                uint64_t v109 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v183);
                v111 = v151;
                unsigned int v113 = v152;
                __int16 v24 = v24;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)BOOL v60 = 0xD000000000000013LL;
                *(void *)(v60 + 8) = 0x80000001839CB4D0LL;
LABEL_243:
                *(void *)(v60 + 16) = v24;
                goto LABEL_244;
              }

              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
            }

            __break(1u);
LABEL_299:
            __break(1u);
            JUMPOUT(0x183440574LL);
          }

          uint64_t v107 = v103 + 1;
          if (__OFADD__(v103, 1LL)) {
            goto LABEL_270;
          }
          ++v103;
          --v102;
          if (a3 + v103 >= v98) {
            goto LABEL_166;
          }
        }

        v54 = __OFADD__(v101++, 1LL);
        if (!v54)
        {
          a3 += v103 + 1;
          goto LABEL_164;
        }

        goto LABEL_294;
      }

      uint64_t v171 = a7;
      __int16 v24 = v15 + 1;
      unint64_t v45 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15 + 1);
      if (v45 == 48)
      {
        uint64_t v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
        unint64_t v21 = v15 + 2;
        if (specialized Collection.isEmpty.getter(v15 + 2, v14 - 2))
        {
          unint64_t v23 = 0;
          goto LABEL_46;
        }

        uint64_t v152 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v21);
        unint64_t v23 = 0;
        if (v152 <= 0x57u)
        {
          if (v152 == 46 || v152 == 69) {
            goto LABEL_46;
          }
        }

        else
        {
          switch(v152)
          {
            case 'x':
              goto LABEL_239;
            case 'e':
              goto LABEL_46;
            case 'X':
LABEL_239:
              __int16 v24 = v15 + 3;
              if (specialized static Comparable.<= infix(_:_:)(v15 + 3, v15 + v14)) {
                goto LABEL_13;
              }
              if (v14 - 2 < 1)
              {
                __break(1u);
LABEL_242:
                uint64_t v110 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v185);
                uint64_t v112 = v153;
                uint64_t v114 = v154;
                __int16 v24 = v24;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v61 = 0xD000000000000013LL;
                *(void *)(v61 + 8) = 0x80000001839CB4D0LL;
LABEL_243:
                *(void *)(v61 + 16) = v24;
                goto LABEL_244;
              }

LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
LABEL_390:
    __break(1u);
LABEL_391:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

LABEL_392:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

                __break(1u);
                goto LABEL_393;
              }

uint64_t specialized NSDecimal._multiplyByPowerOfTen(power:roundingMode:)( uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v29 = a1;
  __int16 v4 = a4;
  __int16 v5 = a3;
  int v6 = a2;
  unint64_t v26 = a2;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = HIWORD(a2);
  unint64_t v27 = a3;
  unint64_t v9 = a3 >> 16;
  unint64_t v10 = HIDWORD(a3);
  unint64_t v11 = HIWORD(a3);
  unsigned int v12 = HIWORD(a4);
  unsigned int v28 = a4;
  if (!_So9NSDecimala__length_getter(&v26))
  {
    LODWORD(v26) = v6;
    WORD2(v26) = v7;
    HIWORD(v26) = v8;
    LOWORD(v27) = v5;
    WORD1(v27) = v9;
    WORD2(v27) = v10;
    HIWORD(v27) = v11;
    LOWORD(v28) = v4;
    HIWORD(v28) = v12;
  }

  LODWORD(v26) = v6;
  WORD2(v26) = v7;
  HIWORD(v26) = v8;
  LOWORD(v27) = v5;
  WORD1(v27) = v9;
  WORD2(v27) = v10;
  HIWORD(v27) = v11;
  LOWORD(v28) = v4;
  HIWORD(v28) = v12;
  LODWORD(v26) = v6;
  WORD2(v26) = v7;
  HIWORD(v26) = v8;
  LOWORD(v27) = v5;
  WORD1(v27) = v9;
  WORD2(v27) = v10;
  HIWORD(v27) = v11;
  LOWORD(v28) = v4;
  HIWORD(v28) = v12;
  int v17 = v6;
  __int16 v18 = v7;
  __int16 v19 = v8;
  __int16 v20 = v5;
  __int16 v21 = v9;
  __int16 v22 = v10;
  __int16 v23 = v11;
  __int16 v24 = v4;
  __int16 v25 = v12;
  uint64_t result = _So9NSDecimala__exponent_getter((char *)&v17);
  if (v29 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_16;
  }

  if (v29 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  BOOL v14 = __OFADD__((_DWORD)result, (_DWORD)v29);
  uint64_t result = (result + v29);
  if (v14)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  if ((int)result <= -129)
  {
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *int v15 = 1;
    return swift_willThrow();
  }

  if ((int)result >= 128)
  {
LABEL_12:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *unint64_t v16 = 0;
    return swift_willThrow();
  }

  _So9NSDecimala__exponent_setter(result, &v26);
  return v26;
}

uint64_t specialized NSDecimal._divide(by:roundingMode:)( unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  LODWORD(v6) = a4;
  uint64_t v159 = *MEMORY[0x1895F89C0];
  unint64_t v156 = a4;
  uint64_t v127 = HIDWORD(a4);
  unint64_t v137 = HIWORD(a4);
  unint64_t v131 = a5 >> 16;
  unsigned __int16 v133 = a5;
  unint64_t v157 = a5;
  uint64_t v135 = HIDWORD(a5);
  unint64_t v129 = HIWORD(a5);
  unsigned __int16 v130 = a6;
  unsigned int v158 = a6;
  unsigned int v139 = HIWORD(a6);
  if (!_So9NSDecimala__length_getter(&v156))
  {
    LODWORD(v156) = v6;
    WORD2(v156) = v127;
    HIWORD(v156) = v137;
    LOWORD(v157) = v133;
    WORD1(v157) = v131;
    WORD2(v157) = v135;
    HIWORD(v157) = v129;
    LOWORD(v158) = v130;
    HIWORD(v158) = v139;
  }

  unint64_t v156 = a1;
  unint64_t v157 = a2;
  unsigned int v158 = a3;
  if (!_So9NSDecimala__length_getter(&v156))
  {
    unint64_t v156 = a1;
    unint64_t v157 = a2;
    unsigned int v158 = a3;
  }

  unint64_t v156 = a1;
  unint64_t v122 = a2 >> 16;
  unint64_t v123 = HIWORD(a1);
  unint64_t v157 = a2;
  unint64_t v121 = HIWORD(a2);
  unsigned int v158 = a3;
  unsigned int v119 = HIWORD(a3);
  if (!_So9NSDecimala__length_getter(&v156))
  {
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    char v48 = 2;
    goto LABEL_55;
  }

  unint64_t v120 = HIDWORD(a2);
  unsigned __int16 v117 = a2;
  unint64_t v118 = HIDWORD(a1);
  int v9 = v6;
  unsigned int v116 = a1;
  LODWORD(v156) = v6;
  WORD2(v156) = v127;
  HIWORD(v156) = v137;
  LOWORD(v157) = v133;
  WORD1(v157) = v131;
  WORD2(v157) = v135;
  HIWORD(v157) = v129;
  LOWORD(v158) = v130;
  HIWORD(v158) = v139;
  LODWORD(v156) = v6;
  WORD2(v156) = v127;
  HIWORD(v156) = v137;
  LOWORD(v157) = v133;
  WORD1(v157) = v131;
  WORD2(v157) = v135;
  HIWORD(v157) = v129;
  LOWORD(v158) = v130;
  HIWORD(v158) = v139;
  unint64_t v153 = a1;
  unint64_t v154 = a2;
  unsigned int v155 = a3;
  int v114 = v6;
  LODWORD(v150) = v6;
  WORD2(v150) = v127;
  HIWORD(v150) = v137;
  LOWORD(v151) = v133;
  WORD1(v151) = v131;
  WORD2(v151) = v135;
  HIWORD(v151) = v129;
  LOWORD(v152) = v130;
  HIWORD(v152) = v139;
  int v10 = _So9NSDecimala__exponent_getter((char *)&v150);
  unint64_t v150 = a1;
  v11._rawValue = (void *)HIWORD(a1);
  unint64_t v151 = a2;
  unsigned int v152 = a3;
  int v12 = _So9NSDecimala__exponent_getter((char *)&v150);
  uint64_t v13 = v127;
  if (v10 - v12 >= 19)
  {
    uint64_t result = specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v156, (uint64_t)&v153);
    uint64_t v18 = v125;
    if (v125) {
      return result;
    }
    unsigned __int16 v50 = WORD1(v157);
    unsigned int v51 = WORD2(v157);
    unsigned int v52 = HIWORD(v157);
    __int16 v53 = v158;
    unsigned int v54 = HIWORD(v158);
    int v108 = v156;
    unsigned int v109 = WORD2(v156);
    unint64_t v150 = v156;
    unsigned int v111 = HIWORD(v156);
    unsigned __int16 v113 = v157;
    unint64_t v151 = v157;
    unsigned int v152 = v158;
    if (_So9NSDecimala__length_getter(&v150))
    {
      unsigned int v106 = v54;
      unsigned int v107 = v51;
      int v55 = v153;
      __int16 v56 = WORD2(v153);
      unsigned __int16 v103 = v50;
      unsigned int v104 = v52;
      unsigned int v57 = HIWORD(v153);
      __int16 v58 = v154;
      __int16 v105 = v53;
      __int16 v59 = WORD1(v154);
      __int16 v60 = WORD2(v154);
      unsigned int v61 = HIWORD(v154);
      __int16 v102 = v155;
      __int16 v62 = HIWORD(v155);
      unint64_t v150 = v153;
      unint64_t v151 = v154;
      unsigned int v152 = v155;
      int v63 = _So9NSDecimala__length_getter(&v150);
      if (v63) {
        int v64 = v55;
      }
      else {
        int v64 = v116;
      }
      unsigned int v116 = v64;
      uint64_t v18 = v125;
      if (v63) {
        __int16 v65 = v56;
      }
      else {
        __int16 v65 = v118;
      }
      LOWORD(v118) = v65;
      if (v63) {
        v11._rawValue = (void *)v57;
      }
      else {
        v11._rawValue = (void *)v123;
      }
      if (v63) {
        __int16 v66 = v58;
      }
      else {
        __int16 v66 = v117;
      }
      unsigned __int16 v117 = v66;
      if (v63) {
        __int16 v67 = v59;
      }
      else {
        __int16 v67 = v122;
      }
      LOWORD(v122) = v67;
      if (v63) {
        __int16 v68 = v60;
      }
      else {
        __int16 v68 = v120;
      }
      LOWORD(v120) = v68;
      if (v63) {
        unint64_t v69 = v61;
      }
      else {
        unint64_t v69 = v121;
      }
      unint64_t v121 = v69;
      __int16 v70 = a3;
      if (v63) {
        __int16 v70 = v102;
      }
      LOWORD(a3) = v70;
      __int16 v71 = v119;
      if (v63) {
        __int16 v71 = v62;
      }
      LOWORD(v119) = v71;
      if (v63) {
        LODWORD(v6) = v108;
      }
      else {
        LODWORD(v6) = v114;
      }
      if (v63) {
        uint64_t v13 = v109;
      }
      else {
        uint64_t v13 = v127;
      }
      if (v63) {
        uint64_t v15 = v111;
      }
      else {
        uint64_t v15 = v137;
      }
      if (v63) {
        unsigned __int16 v17 = v113;
      }
      else {
        unsigned __int16 v17 = v133;
      }
      if (v63) {
        unsigned __int16 v16 = v103;
      }
      else {
        unsigned __int16 v16 = v131;
      }
      if (v63) {
        uint64_t v14 = v107;
      }
      else {
        uint64_t v14 = v135;
      }
      if (v63) {
        unint64_t v72 = v104;
      }
      else {
        unint64_t v72 = v129;
      }
      unint64_t v129 = v72;
      __int16 v73 = v130;
      if (v63) {
        __int16 v73 = v105;
      }
      unsigned __int16 v130 = v73;
      if (v63) {
        int64_t v19 = v106;
      }
      else {
        int64_t v19 = v139;
      }
    }

    else
    {
      uint64_t v14 = v135;
      uint64_t v15 = v137;
      unsigned __int16 v16 = v131;
      unsigned __int16 v17 = v133;
      LODWORD(v6) = v9;
      int64_t v19 = v139;
      uint64_t v13 = v127;
    }
  }

  else
  {
    uint64_t v14 = v135;
    uint64_t v15 = v137;
    unsigned __int16 v16 = v131;
    unsigned __int16 v17 = v133;
    uint64_t v18 = v125;
    int64_t v19 = v139;
  }

  uint64_t v20 = v13;
  unsigned __int16 v132 = v16;
  unsigned __int16 v134 = v17;
  NSDecimal.asVariableLengthInteger()( v6 | ((unint64_t)(unsigned __int16)v13 << 32) | (v15 << 48),  v17 | ((unint64_t)v16 << 16) | ((unint64_t)(unsigned __int16)v14 << 32) | (v129 << 48),  v130 | ((unsigned __int16)v19 << 16));
  __int16 v22 = v21;
  uint64_t v23 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v23 != -1) {
    goto LABEL_178;
  }
  while (1)
  {
    rawValue = powerOfTen._rawValue;
    unint64_t v25 = *((void *)powerOfTen._rawValue + 2);
    uint64_t v124 = v11._rawValue;
    uint64_t v126 = v18;
    __int16 v136 = v14;
    unsigned int v115 = v6;
    if (v25 > 0x26)
    {
      uint64_t v6 = 38LL;
      v11._rawValue = v22;
      uint64_t v18 = v20;
      goto LABEL_113;
    }

    if (!v25) {
      goto LABEL_180;
    }
    uint64_t v18 = v20;
    unint64_t v26 = v25 - 1;
    uint64_t v6 = 38LL;
    v11._rawValue = v22;
    uint64_t v20 = (uint64_t)&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>;
    unsigned int v139 = v19;
    v128 = v22;
    int64_t v110 = *((void *)powerOfTen._rawValue + 2);
    unint64_t v112 = v25 - 1;
    uint64_t v138 = v15;
LABEL_11:
    BOOL v27 = __OFSUB__(v6, v26);
    v6 -= v26;
    if (v27) {
      goto LABEL_176;
    }
    uint64_t v28 = *(void *)(v20 + 3056);
    if (v25 <= *(void *)(v28 + 16)) {
      break;
    }
LABEL_177:
    __break(1u);
LABEL_178:
    swift_once();
  }

  uint64_t v15 = v18;
  uint64_t v29 = *((void *)v11._rawValue + 2);
  if (!v29 || (v30 = *(void *)(v28 + 8 * v26 + 32), (uint64_t v18 = *(void *)(v30 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    v11._rawValue = (void *)MEMORY[0x18961AFE8];
    int64_t v19 = v139;
    uint64_t v18 = v15;
    uint64_t v15 = v138;
    goto LABEL_43;
  }

  if (__OFADD__(v29, v18)) {
    goto LABEL_181;
  }
  if (v29 + v18 >= 16) {
    uint64_t v31 = 16LL;
  }
  else {
    uint64_t v31 = v29 + v18;
  }
  if (v31 < 0) {
    goto LABEL_191;
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v32 + 16) = v31;
  uint64_t v14 = v32 + 32;
  bzero((void *)(v32 + 32), 2 * v31);
  uint64_t v34 = 0LL;
  uint64_t v35 = v30 + 32;
LABEL_21:
  unsigned int v36 = 0;
  uint64_t v37 = 0LL;
  uint64_t v38 = v34++;
  while (1)
  {
    uint64_t v39 = v37 + v38;
    if (__OFADD__(v37, v38))
    {
      __break(1u);
      goto LABEL_166;
    }

    if (v39 < v31) {
      break;
    }
    if (v36) {
      goto LABEL_154;
    }
    unsigned int v36 = *(unsigned __int16 *)(v35 + 2 * v38);
    if (*(_WORD *)(v35 + 2 * v38))
    {
      unsigned int v36 = *((unsigned __int16 *)v11._rawValue + v37 + 16);
      if (*((_WORD *)v11._rawValue + v37 + 16)) {
        goto LABEL_154;
      }
    }

LABEL_191:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
LABEL_192:
            uint64_t result = _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }

        swift_bridgeObjectRelease();
        int v108 = v29;
        goto LABEL_192;
      }

  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v20 = v6;
LABEL_192:
  unsigned int v119 = *(unsigned __int16 *)(v20 + 16);
  if (!*(_WORD *)(v20 + 16))
  {
    unsigned __int16 v16 = v138;
    goto LABEL_204;
  }

  unint64_t v120 = *(void *)(v20 + 24);
  uint64_t v23 = __OFSUB__(a2, v120);
  a2 -= v120;
  if (v23)
  {
LABEL_243:
    __break(1u);
    goto LABEL_244;
  }

  unsigned __int16 v16 = v138;
  if (__OFADD__(a2, 1LL))
  {
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
    return result;
  }

  if (a2 + 1 >= 1)
  {
    if ((_DWORD)v119 != 1)
    {
      unint64_t v121 = (uint64_t *)(v20 + 48);
      unint64_t v122 = 1LL;
      while (1)
      {
        unint64_t v123 = *v121;
        v121 += 3;
        uint64_t v23 = __OFSUB__(a2, v123);
        a2 -= v123;
        if (v23) {
          goto LABEL_239;
        }
        if (__OFADD__(a2, 1LL)) {
          goto LABEL_240;
        }
        if (a2 + 1 < 1) {
          break;
        }
        if (v119 == ++v122) {
          goto LABEL_204;
        }
      }

      unsigned int v119 = v122;
      goto LABEL_217;
    }

_DWORD *_So9NSDecimala__reserved_setter(_DWORD *result)
{
  *result &= 0x3FFFu;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FormatStyleCapitalizationContext.Option@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized FormatStyleCapitalizationContext.Option.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance FormatStyleCapitalizationContext.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FormatStyleCapitalizationContext.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void static FormatStyleCapitalizationContext.middleOfSentence.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FormatStyleCapitalizationContext.CodingKeys()
{
  return 0x6E6F6974706FLL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FormatStyleCapitalizationContext.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FormatStyleCapitalizationContext.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t FormatStyleCapitalizationContext.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FormatStyleCapitalizationContext.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FormatStyleCapitalizationContext.CodingKeys,  &unk_189C73950);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FormatStyleCapitalizationContext.CodingKeys,  &unk_189C73950);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FormatStyleCapitalizationContext.CodingKeys,  &unk_189C73950);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FormatStyleCapitalizationContext.CodingKeys,  &unk_189C73950);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FormatStyleCapitalizationContext.Option,  &type metadata for FormatStyleCapitalizationContext.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FormatStyleCapitalizationContext.Option,  &type metadata for FormatStyleCapitalizationContext.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FormatStyleCapitalizationContext.Option,  &type metadata for FormatStyleCapitalizationContext.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FormatStyleCapitalizationContext.Option,  &type metadata for FormatStyleCapitalizationContext.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option);
  }

  return result;
}

uint64_t FormatStyleCapitalizationContext.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FormatStyleCapitalizationContext.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FormatStyleCapitalizationContext@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return FormatStyleCapitalizationContext.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FormatStyleCapitalizationContext( void *a1)
{
  return FormatStyleCapitalizationContext.encode(to:)(a1);
}

void NumberFormatStyleConfiguration.Collection.hash(into:)()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v8 = *(void *)v0;
    Hasher._combine(_:)(1u);
    if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v9 = v8;
    }
    else {
      Swift::UInt64 v9 = 0LL;
    }
    Hasher._combine(_:)(v9);
  }

  outlined init with take of NumberFormatStyleConfiguration.Precision?(v0 + 16, (uint64_t)v22);
  specialized Optional<A>.hash(into:)();
  int v10 = *(unsigned __int8 *)(v0 + 73);
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v11 = v10 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }

  int v12 = *(unsigned __int16 *)(v0 + 74);
  unsigned int v13 = v12 | (*(unsigned __int8 *)(v0 + 76) << 16);
  if (v12 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13 & 1);
    Hasher._combine(_:)((v13 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v13) & 1);
  }

  int v14 = *(unsigned __int8 *)(v0 + 77);
  if (v14 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v15 = v14 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }

  unsigned __int16 v16 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of FloatingPointRoundingRule?(v0 + v16[9], (uint64_t)v7);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48))(v7, 1LL, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  }

  uint64_t v17 = v0 + v16[10];
  int v18 = *(unsigned __int8 *)(v17 + 8);
  if (v18 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v19 = *(void *)v17;
    Hasher._combine(_:)(1u);
    if ((v18 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v19 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v20 = v19;
      }
      else {
        Swift::UInt64 v20 = 0LL;
      }
      Hasher._combine(_:)(v20);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v19);
    }
  }

  Swift::UInt v21 = *(unsigned __int8 *)(v0 + v16[11]);
  if (v21 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
  }

uint64_t NumberFormatStyleConfiguration.Collection.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_182FB40A8 + 4 * byte_183729E40[a1]))( 0x656C616373LL,  0xE500000000000000LL);
}

uint64_t sub_182FB40A8()
{
  return 0x6F69736963657270LL;
}

uint64_t sub_182FB40C4()
{
  return 0x70756F7267LL;
}

unint64_t sub_182FB40D4()
{
  return 0xD000000000000013LL;
}

uint64_t sub_182FB410C()
{
  return 0x676E69646E756F72LL;
}

unint64_t sub_182FB4124()
{
  return 0xD000000000000011LL;
}

uint64_t sub_182FB4140()
{
  return 0x6E6F697461746F6ELL;
}

uint64_t NumberFormatStyleConfiguration.Collection.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Collection.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  Swift::UInt64 v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = *(void *)(v3 + 64);
    char v10 = *(_BYTE *)(v3 + 72);
    __int128 v11 = *(_OWORD *)(v3 + 32);
    __int128 v19 = *(_OWORD *)(v3 + 16);
    __int128 v20 = v11;
    __int128 v21 = *(_OWORD *)(v3 + 48);
    uint64_t v22 = v9;
    char v23 = v10;
    char v18 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = *(_BYTE *)(v3 + 73);
    char v18 = 2;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    __int16 v12 = *(_WORD *)(v3 + 74);
    BYTE2(v19) = *(_BYTE *)(v3 + 76);
    LOWORD(v19) = v12;
    char v18 = 3;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = *(_BYTE *)(v3 + 77);
    char v18 = 4;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v13 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    LOBYTE(v19) = 5;
    type metadata accessor for FloatingPointRoundingRule();
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule,  (uint64_t (*)(uint64_t))MEMORY[0x189619F98],  (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    int v14 = (uint64_t *)(v3 + *(int *)(v13 + 40));
    uint64_t v15 = *v14;
    LOBYTE(v14) = *((_BYTE *)v14 + 8);
    *(void *)&__int128 v19 = v15;
    BYTE8(v19) = (_BYTE)v14;
    char v18 = 6;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = *(_BYTE *)(v3 + *(int *)(v13 + 44));
    char v18 = 7;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t NumberFormatStyleConfiguration.Collection.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v3);
  uint64_t v33 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Collection.CodingKeys>);
  uint64_t v32 = *(void *)(v35 - 8);
  MEMORY[0x1895F8858](v35);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  char v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)char v10 = 0LL;
  v10[8] = 1;
  *((void *)v10 + 2) = 0LL;
  *((void *)v10 + 3) = 0LL;
  *((void *)v10 + 4) = 0LL;
  *((void *)v10 + 5) = 0x1FFFFFFFELL;
  *((void *)v10 + 7) = 0LL;
  *((void *)v10 + 8) = 0LL;
  *((void *)v10 + 6) = 0LL;
  *((_DWORD *)v10 + 18) = 131584;
  *((_WORD *)v10 + 38) = 512;
  uint64_t v11 = (uint64_t)&v10[*(int *)(v8 + 36)];
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL);
  uint64_t v31 = v11;
  v13(v11, 1LL, 1LL, v12);
  int v14 = &v10[*(int *)(v7 + 40)];
  *(void *)int v14 = 0LL;
  v14[8] = -1;
  uint64_t v15 = *(int *)(v7 + 44);
  v10[v15] = 3;
  uint64_t v16 = a1[3];
  unsigned int v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys();
  uint64_t v17 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    uint64_t v37 = v14;
    uint64_t v30 = v15;
    uint64_t v19 = v32;
    uint64_t v18 = (uint64_t)v33;
    uint64_t v21 = v34;
    uint64_t v20 = v35;
    LOBYTE(v38) = 0;
    *(void *)char v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v10[8] = v22 & 1;
    char v43 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v23 = v41;
    char v24 = v42;
    __int128 v25 = v39;
    *((_OWORD *)v10 + 1) = v38;
    *((_OWORD *)v10 + 2) = v25;
    *((_OWORD *)v10 + 3) = v40;
    *((void *)v10 + 8) = v23;
    v10[72] = v24;
    char v43 = 2;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v10[73] = v38;
    char v43 = 3;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    __int16 v26 = v38;
    v10[76] = BYTE2(v38);
    *((_WORD *)v10 + 37) = v26;
    char v43 = 4;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v10[77] = v38;
    LOBYTE(v38) = 5;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule,  (uint64_t (*)(uint64_t))MEMORY[0x189619F98],  (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of FloatingPointRoundingRule?(v18, v31);
    char v43 = 6;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v28 = v37;
    char v29 = BYTE8(v38);
    *(void *)uint64_t v37 = v38;
    v28[8] = v29;
    char v43 = 7;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v20);
    v10[v30] = v38;
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v10,  v21,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v10,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NumberFormatStyleConfiguration.Collection.CodingKeys()
{
  return NumberFormatStyleConfiguration.Collection.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NumberFormatStyleConfiguration.Collection.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized NumberFormatStyleConfiguration.Collection.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NumberFormatStyleConfiguration.Collection.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Collection.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Collection.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Collection@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return NumberFormatStyleConfiguration.Collection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Collection( void *a1)
{
  return NumberFormatStyleConfiguration.Collection.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.Collection( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  (void (*)(_BYTE *))NumberFormatStyleConfiguration.Collection.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.Collection( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (void (*)(_BYTE *))NumberFormatStyleConfiguration.Collection.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Grouping.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Grouping.Option()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NumberFormatStyleConfiguration.Grouping.description.getter()
{
  if (*v0) {
    return 0x726576656ELL;
  }
  else {
    return 0x6974616D6F747561LL;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Grouping.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Grouping.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t NumberFormatStyleConfiguration.Grouping.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Grouping.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.CodingKeys,  &unk_189C73830);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.CodingKeys,  &unk_189C73830);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.CodingKeys,  &unk_189C73830);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.CodingKeys,  &unk_189C73830);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.Option,  &type metadata for NumberFormatStyleConfiguration.Grouping.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.Option,  &type metadata for NumberFormatStyleConfiguration.Grouping.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.Option,  &type metadata for NumberFormatStyleConfiguration.Grouping.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.Option,  &type metadata for NumberFormatStyleConfiguration.Grouping.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option);
  }

  return result;
}

uint64_t NumberFormatStyleConfiguration.Grouping.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Grouping.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void NumberFormatStyleConfiguration.Precision.Option.hash(into:)()
{
  char v1 = v17;
  if (v17 < 0)
  {
    v17 &= ~0x80u;
    Swift::UInt v5 = v11;
    int v6 = BYTE8(v11);
    Swift::UInt v7 = v12;
    int v8 = v13;
    Swift::UInt v9 = v14;
    int v10 = v15;
    Swift::UInt v2 = v16;
    Hasher._combine(_:)(1uLL);
    if (v6 == 1)
    {
      Hasher._combine(_:)(0);
      if (!v8) {
        goto LABEL_6;
      }
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v5);
      if (!v8)
      {
LABEL_6:
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v7);
        if (!v10) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }

    Hasher._combine(_:)(0);
    if (!v10)
    {
LABEL_7:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9);
      if ((v1 & 1) != 0) {
        goto LABEL_3;
      }
      goto LABEL_12;
    }

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Grouping@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return NumberFormatStyleConfiguration.Grouping.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Grouping( void *a1)
{
  return NumberFormatStyleConfiguration.Grouping.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Grouping()
{
  if (*v0) {
    return 0x726576656ELL;
  }
  else {
    return 0x6974616D6F747561LL;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.Precision.Option()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NumberFormatStyleConfiguration.Precision.Option()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.Precision.Option()
{
  return Hasher._finalize()();
}

double static NumberFormatStyleConfiguration.Precision.significantDigits<A>(_:)@<D0>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = RangeExpression.clampedLowerAndUpperBounds(_:)(1LL, 999LL, a1);
  if ((v6 & 1) != 0) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = v3;
  }
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5 & 1;
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_BYTE *)(a2 + 56) = 0;
  return result;
}

double static NumberFormatStyleConfiguration.Precision.significantDigits(_:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a1;
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 41) = 0u;
  return result;
}

uint64_t static NumberFormatStyleConfiguration.Precision.integerAndFractionLength<A, B>(integerLimits:fractionLimits:)@<X0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = RangeExpression.clampedLowerAndUpperBounds(_:)(0LL, 999LL, a1);
  uint64_t v7 = v6;
  uint64_t v9 = v8 & 1;
  uint64_t v11 = v10 & 1;
  uint64_t result = RangeExpression.clampedLowerAndUpperBounds(_:)(0LL, 999LL, a2);
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = result;
  *(void *)(a3 + 40) = v13 & 1;
  *(void *)(a3 + 48) = v15;
  *(_BYTE *)(a3 + 56) = v14 & 1 | 0x80;
  return result;
}

uint64_t static NumberFormatStyleConfiguration.Precision.integerAndFractionLength(integer:fraction:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = result;
  *(void *)(a3 + 24) = 0LL;
  *(void *)(a3 + 32) = a2;
  *(void *)(a3 + 40) = 0LL;
  *(void *)(a3 + 48) = a2;
  *(_BYTE *)(a3 + 56) = 0x80;
  return result;
}

double static NumberFormatStyleConfiguration.Precision.integerLength<A>(_:)@<D0>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = RangeExpression.clampedLowerAndUpperBounds(_:)(0LL, 999LL, a1);
  *(void *)(a2 + 8) = v3 & 1;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v4 & 1;
  double result = 0.0;
  *(_OWORD *)(a2 + 32) = xmmword_183723F60;
  *(void *)(a2 + 48) = 0LL;
  *(_BYTE *)(a2 + 56) = -127;
  return result;
}

double static NumberFormatStyleConfiguration.Precision.integerLength(_:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 16) = a1;
  *(void *)&double result = 1LL;
  *(_OWORD *)(a2 + 40) = xmmword_18372C2E0;
  *(_BYTE *)(a2 + 56) = -127;
  return result;
}

double static NumberFormatStyleConfiguration.Precision.fractionLength<A>(_:)@<D0>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = RangeExpression.clampedLowerAndUpperBounds(_:)(0LL, 999LL, a1);
  double result = 0.0;
  *(_OWORD *)a2 = xmmword_183723F60;
  *(_OWORD *)(a2 + 16) = xmmword_183723F60;
  *(void *)(a2 + 32) = v3;
  *(void *)(a2 + 40) = v5 & 1;
  *(void *)(a2 + 48) = v7;
  *(_BYTE *)(a2 + 56) = v6 & 1 | 0x80;
  return result;
}

double static NumberFormatStyleConfiguration.Precision.fractionLength(_:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a2 = xmmword_183723F60;
  *(_OWORD *)(a2 + 16) = xmmword_183723F60;
  *(void *)(a2 + 32) = a1;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 48) = a1;
  *(_BYTE *)(a2 + 56) = 0x80;
  return result;
}

void NumberFormatStyleConfiguration.Precision.hash(into:)()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  int v4 = *(char *)(v0 + 56);
  if (v4 < 0)
  {
    uint64_t v7 = *(void *)(v0 + 40);
    Swift::UInt v6 = *(void *)(v0 + 48);
    uint64_t v9 = *(void *)(v0 + 24);
    Swift::UInt v8 = *(void *)(v0 + 32);
    Hasher._combine(_:)(1uLL);
    if ((v1 & 1) != 0)
    {
      Hasher._combine(_:)(0);
      char v10 = v4;
      if ((v9 & 1) != 0)
      {
LABEL_6:
        Hasher._combine(_:)(0);
        if ((v7 & 1) != 0) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
      char v10 = v4;
      if ((v9 & 1) != 0) {
        goto LABEL_6;
      }
    }

    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    if ((v7 & 1) != 0)
    {
LABEL_7:
      Hasher._combine(_:)(0);
      if ((v10 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_12:
      Hasher._combine(_:)(1u);
      Swift::UInt v5 = v6;
      goto LABEL_13;
    }

BOOL static NumberFormatStyleConfiguration.Precision.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  return specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)(v4, v5);
}

_OWORD *outlined init with take of NumberFormatStyleConfiguration.Precision.Option(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  __int128 v4 = a1[2];
  *(_OWORD *)((char *)a2 + 41) = *(__int128 *)((char *)a1 + 41);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Precision.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Precision.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t NumberFormatStyleConfiguration.Precision.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Precision.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  Swift::UInt v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v7 = *v1;
  __int128 v12 = v1[1];
  __int128 v13 = v7;
  __int128 v11 = v1[2];
  uint64_t v8 = *((void *)v1 + 6);
  char v9 = *((_BYTE *)v1 + 56);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v14 = v13;
  __int128 v15 = v12;
  __int128 v16 = v11;
  uint64_t v17 = v8;
  char v18 = v9;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int NumberFormatStyleConfiguration.Precision.hashValue.getter()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  Swift::UInt v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  Swift::UInt v7 = *(void *)(v0 + 48);
  int v8 = *(char *)(v0 + 56);
  Hasher.init(_seed:)();
  if (v8 < 0)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
    }

    if ((v4 & 1) != 0)
    {
      Hasher._combine(_:)(0);
      if ((v6 & 1) != 0)
      {
LABEL_9:
        Hasher._combine(_:)(0);
        if ((v8 & 1) != 0) {
          goto LABEL_10;
        }
LABEL_13:
        Hasher._combine(_:)(1u);
        Swift::UInt v9 = v7;
        goto LABEL_14;
      }
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v3);
      if ((v6 & 1) != 0) {
        goto LABEL_9;
      }
    }

    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    if ((v8 & 1) != 0) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }

  Hasher._combine(_:)(0LL);
  Hasher._combine(_:)(v2);
  if ((v3 & 1) == 0)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v9 = v1;
LABEL_14:
    Hasher._combine(_:)(v9);
    return Hasher._finalize()();
  }

uint64_t NumberFormatStyleConfiguration.Precision.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Precision.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  int v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v9 = v15;
    char v10 = v16;
    __int128 v11 = v14[1];
    __int128 v12 = v14[2];
    *(_OWORD *)a2 = v14[0];
    *(_OWORD *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 32) = v12;
    *(void *)(a2 + 48) = v9;
    *(_BYTE *)(a2 + 56) = v10;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Precision@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return NumberFormatStyleConfiguration.Precision.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Precision( void *a1)
{
  return NumberFormatStyleConfiguration.Precision.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance NumberFormatStyleConfiguration.Precision()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  int v4 = *(char *)(v0 + 56);
  if (v4 < 0)
  {
    uint64_t v7 = *(void *)(v0 + 40);
    Swift::UInt v6 = *(void *)(v0 + 48);
    uint64_t v9 = *(void *)(v0 + 24);
    Swift::UInt v8 = *(void *)(v0 + 32);
    Hasher._combine(_:)(1uLL);
    if ((v1 & 1) != 0)
    {
      Hasher._combine(_:)(0);
      char v10 = v4;
      if ((v9 & 1) != 0)
      {
LABEL_6:
        Hasher._combine(_:)(0);
        if ((v7 & 1) != 0) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
      char v10 = v4;
      if ((v9 & 1) != 0) {
        goto LABEL_6;
      }
    }

    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    if ((v7 & 1) != 0)
    {
LABEL_7:
      Hasher._combine(_:)(0);
      if ((v10 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_12:
      Hasher._combine(_:)(1u);
      Swift::UInt v5 = v6;
      goto LABEL_13;
    }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.Precision()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  Swift::UInt v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  Swift::UInt v7 = *(void *)(v0 + 48);
  int v8 = *(char *)(v0 + 56);
  Hasher.init(_seed:)();
  if (v8 < 0)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
    }

    if ((v4 & 1) != 0)
    {
      Hasher._combine(_:)(0);
      if ((v6 & 1) != 0)
      {
LABEL_9:
        Hasher._combine(_:)(0);
        if ((v8 & 1) != 0) {
          goto LABEL_10;
        }
LABEL_13:
        Hasher._combine(_:)(1u);
        Swift::UInt v9 = v7;
        goto LABEL_14;
      }
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v3);
      if ((v6 & 1) != 0) {
        goto LABEL_9;
      }
    }

    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    if ((v8 & 1) != 0) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }

  Hasher._combine(_:)(0LL);
  Hasher._combine(_:)(v2);
  if ((v3 & 1) == 0)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v9 = v1;
LABEL_14:
    Hasher._combine(_:)(v9);
    return Hasher._finalize()();
  }

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NumberFormatStyleConfiguration.Precision.Option( __int128 *a1, __int128 *a2)
{
  return specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)(v4, v5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void static NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.always.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.description.getter()
{
  if (*v0) {
    return 0x737961776C61LL;
  }
  else {
    return 0x6974616D6F747561LL;
  }
}

void NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.hash(into:)()
{
}

BOOL static NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.init(from:)@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  int v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy( void *a1)
{
  return NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy()
{
  if (*v0) {
    return 0x737961776C61LL;
  }
  else {
    return 0x6974616D6F747561LL;
  }
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option@<X0>( void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1LL) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void static NumberFormatStyleConfiguration.SignDisplayStrategy.automatic.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 1;
  *(_BYTE *)(a1 + 2) = 1;
}

void static NumberFormatStyleConfiguration.SignDisplayStrategy.never.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 257;
  *(_BYTE *)(a1 + 2) = 1;
}

uint64_t static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = result ^ 1;
  return result;
}

uint64_t NumberFormatStyleConfiguration.SignDisplayStrategy.description.getter()
{
  if ((*v0 & 1) != 0)
  {
    if (v0[1]) {
      return 0x726576656ELL;
    }
    else {
      return 0x6974616D6F747561LL;
    }
  }

  else if (v0[2])
  {
    return 0xD00000000000001CLL;
  }

  else
  {
    return 0xD00000000000001BLL;
  }

void NumberFormatStyleConfiguration.SignDisplayStrategy.hash(into:)()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  uint64_t v1 = 0x657669746167656ELL;
  if (*v0 != 1) {
    uint64_t v1 = 1869768058LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6576697469736F70LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t NumberFormatStyleConfiguration.SignDisplayStrategy.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v8 = *v1;
  int v9 = v1[1];
  int v13 = v1[2];
  int v14 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v20 = v8;
  char v19 = 0;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v10 = v13;
    char v18 = v14;
    char v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v16 = v10;
    char v15 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NumberFormatStyleConfiguration.SignDisplayStrategy.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t NumberFormatStyleConfiguration.SignDisplayStrategy.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v18 = 0;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v19;
    char v16 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v13 = v17;
    char v14 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v11 = v15;
    *a2 = v9;
    a2[1] = v13;
    a2[2] = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return NumberFormatStyleConfiguration.SignDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy( void *a1)
{
  return NumberFormatStyleConfiguration.SignDisplayStrategy.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance NumberFormatStyleConfiguration.Notation.Option@<X0>( uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = v2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Notation.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Notation.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void static NumberFormatStyleConfiguration.Notation.scientific.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static NumberFormatStyleConfiguration.Notation.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static NumberFormatStyleConfiguration.Notation.compactName.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t NumberFormatStyleConfiguration.Notation.description.getter()
{
  uint64_t v1 = 0x6669746E65696373LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x20746361706D6F63LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6974616D6F747561LL;
  }
}

void NumberFormatStyleConfiguration.Notation.hash(into:)()
{
}

BOOL static NumberFormatStyleConfiguration.Notation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Notation.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Notation.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t NumberFormatStyleConfiguration.Notation.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Notation.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t NumberFormatStyleConfiguration.Notation.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Notation.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Notation@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return NumberFormatStyleConfiguration.Notation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Notation( void *a1)
{
  return NumberFormatStyleConfiguration.Notation.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Notation()
{
  uint64_t v1 = 0x6669746E65696373LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x20746361706D6F63LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6974616D6F747561LL;
  }
}

Swift::Int NumberFormatStyleConfiguration.RoundingIncrement.hashValue.getter(Swift::UInt a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = a1;
    }
    else {
      Swift::UInt64 v4 = 0LL;
    }
    Hasher._combine(_:)(v4);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(a1);
  }

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  return NumberFormatStyleConfiguration.RoundingIncrement.hashValue.getter(*(void *)v0, *(_BYTE *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  Swift::UInt v1 = *(void *)v0;
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v2 = v1;
    }
    else {
      Swift::UInt64 v2 = 0LL;
    }
    Hasher._combine(_:)(v2);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(v1);
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v3 = v1;
    }
    else {
      Swift::UInt64 v3 = 0LL;
    }
    Hasher._combine(_:)(v3);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(v1);
  }

  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  if (*(_BYTE *)(v0 + 8) == 1) {
    return Double.description.getter();
  }
  else {
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NumberFormatStyleConfiguration.RoundingIncrement( uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 8);
  BOOL v3 = *(double *)a1 == *(double *)a2;
  if ((v2 & 1) == 0) {
    BOOL v3 = 0;
  }
  if (*(_BYTE *)(a1 + 8) == 1) {
    return v3;
  }
  else {
    return (*(void *)a1 == *(void *)a2) & ~v2;
  }
}

void CurrencyFormatStyleConfiguration.Collection.hash(into:)()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  Swift::UInt64 v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v8 = *(void *)v0;
    Hasher._combine(_:)(1u);
    if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v9 = v8;
    }
    else {
      Swift::UInt64 v9 = 0LL;
    }
    Hasher._combine(_:)(v9);
  }

  outlined init with take of NumberFormatStyleConfiguration.Precision?(v0 + 16, (uint64_t)v22);
  specialized Optional<A>.hash(into:)();
  int v10 = *(unsigned __int8 *)(v0 + 73);
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v11 = v10 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }

  unint64_t v12 = *(unsigned int *)(v0 + 74);
  if (*(_DWORD *)(v0 + 74) == 2)
  {
    LOBYTE(v13) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12 & 1);
    Hasher._combine(_:)((v12 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v12) & 1);
    unsigned int v13 = BYTE3(v12) & 1;
  }

  Hasher._combine(_:)(v13);
  int v14 = *(unsigned __int8 *)(v0 + 78);
  if (v14 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v15 = v14 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }

  char v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of FloatingPointRoundingRule?(v0 + v16[9], (uint64_t)v7);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48))(v7, 1LL, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  }

  uint64_t v17 = v0 + v16[10];
  int v18 = *(unsigned __int8 *)(v17 + 8);
  if (v18 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v19 = *(void *)v17;
    Hasher._combine(_:)(1u);
    if ((v18 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v19 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v20 = v19;
      }
      else {
        Swift::UInt64 v20 = 0LL;
      }
      Hasher._combine(_:)(v20);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v19);
    }
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + v16[11]));
  Swift::UInt v21 = *(unsigned __int8 *)(v0 + v16[12]);
  if (v21 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
  }

uint64_t CurrencyFormatStyleConfiguration.Collection.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_182FB7004 + 4 * byte_183729E48[a1]))( 0x656C616373LL,  0xE500000000000000LL);
}

uint64_t sub_182FB7004()
{
  return 0x6F69736963657270LL;
}

uint64_t sub_182FB7020()
{
  return 0x70756F7267LL;
}

unint64_t sub_182FB7030()
{
  return 0xD000000000000013LL;
}

uint64_t sub_182FB7068()
{
  return 0x676E69646E756F72LL;
}

unint64_t sub_182FB7080()
{
  return 0xD000000000000011LL;
}

uint64_t sub_182FB709C()
{
  return 0x61746E6573657270LL;
}

uint64_t sub_182FB70BC()
{
  return 0x6E6F697461746F6ELL;
}

uint64_t CurrencyFormatStyleConfiguration.Collection.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CurrencyFormatStyleConfiguration.Collection.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  Swift::UInt64 v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = *(void *)(v3 + 64);
    char v10 = *(_BYTE *)(v3 + 72);
    __int128 v11 = *(_OWORD *)(v3 + 32);
    __int128 v18 = *(_OWORD *)(v3 + 16);
    __int128 v19 = v11;
    __int128 v20 = *(_OWORD *)(v3 + 48);
    uint64_t v21 = v9;
    char v22 = v10;
    char v17 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = *(_BYTE *)(v3 + 73);
    char v17 = 2;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LODWORD(v18) = *(_DWORD *)(v3 + 74);
    char v17 = 3;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = *(_BYTE *)(v3 + 78);
    char v17 = 4;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    unint64_t v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    LOBYTE(v18) = 5;
    type metadata accessor for FloatingPointRoundingRule();
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule,  (uint64_t (*)(uint64_t))MEMORY[0x189619F98],  (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    unsigned int v13 = (uint64_t *)(v3 + v12[10]);
    uint64_t v14 = *v13;
    LOBYTE(v13) = *((_BYTE *)v13 + 8);
    *(void *)&__int128 v18 = v14;
    BYTE8(v18) = (_BYTE)v13;
    char v17 = 6;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = *(_BYTE *)(v3 + v12[11]);
    char v17 = 7;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v18) = *(_BYTE *)(v3 + v12[12]);
    char v17 = 8;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t CurrencyFormatStyleConfiguration.Collection.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v3);
  uint64_t v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CurrencyFormatStyleConfiguration.Collection.CodingKeys>);
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x1895F8858](v34);
  uint64_t v37 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)uint64_t v9 = 0LL;
  v9[8] = 1;
  *((void *)v9 + 2) = 0LL;
  *((void *)v9 + 3) = 0LL;
  *((void *)v9 + 4) = 0LL;
  *((void *)v9 + 5) = 0x1FFFFFFFELL;
  *((void *)v9 + 7) = 0LL;
  *((void *)v9 + 8) = 0LL;
  *((void *)v9 + 6) = 0LL;
  *((_WORD *)v9 + 36) = 512;
  *(_DWORD *)(v9 + 74) = 2;
  v9[78] = 2;
  uint64_t v10 = (uint64_t)&v9[*(int *)(v7 + 36)];
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL);
  uint64_t v36 = v10;
  v12(v10, 1LL, 1LL, v11);
  unsigned int v13 = &v9[v6[10]];
  *(void *)unsigned int v13 = 0LL;
  v13[8] = -1;
  uint64_t v14 = v6[12];
  v9[v14] = 3;
  uint64_t v15 = a1[3];
  uint64_t v35 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys();
  uint64_t v16 = v38;
  char v17 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
  {
    uint64_t v25 = v36;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    return outlined destroy of Any?(v25, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  }

  else
  {
    uint64_t v38 = v11;
    uint64_t v29 = v14;
    uint64_t v30 = v13;
    uint64_t v19 = v32;
    uint64_t v18 = (uint64_t)v33;
    LOBYTE(v39) = 0;
    uint64_t v20 = v34;
    *(void *)uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v9[8] = v21 & 1;
    char v44 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v22 = v42;
    char v23 = v43;
    __int128 v24 = v40;
    *((_OWORD *)v9 + 1) = v39;
    *((_OWORD *)v9 + 2) = v24;
    *((_OWORD *)v9 + 3) = v41;
    *((void *)v9 + 8) = v22;
    v9[72] = v23;
    char v44 = 2;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v9[73] = v39;
    char v44 = 3;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_DWORD *)(v9 + 74) = v39;
    char v44 = 4;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v9[78] = v39;
    LOBYTE(v39) = 5;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule,  (uint64_t (*)(uint64_t))MEMORY[0x189619F98],  (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of FloatingPointRoundingRule?(v18, v36);
    char v44 = 6;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v26 = BYTE8(v39);
    BOOL v27 = v30;
    *(void *)uint64_t v30 = v39;
    v27[8] = v26;
    char v44 = 7;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9[v6[11]] = v39;
    char v44 = 8;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v20);
    v9[v29] = v39;
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v9,  v31,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    return outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v9,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys()
{
  return CurrencyFormatStyleConfiguration.Collection.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized CurrencyFormatStyleConfiguration.Collection.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.Collection@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return CurrencyFormatStyleConfiguration.Collection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.Collection( void *a1)
{
  return CurrencyFormatStyleConfiguration.Collection.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CurrencyFormatStyleConfiguration.Collection( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  (void (*)(_BYTE *))CurrencyFormatStyleConfiguration.Collection.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CurrencyFormatStyleConfiguration.Collection( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (void (*)(_BYTE *))CurrencyFormatStyleConfiguration.Collection.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  return RawRepresentable<>.encode(to:)();
}

double static CurrencyFormatStyleConfiguration.SignDisplayStrategy.automatic.getter@<D0>(_DWORD *a1@<X8>)
{
  *(void *)&double result = 0x1000100010001LL;
  *a1 = 65537;
  return result;
}

double static CurrencyFormatStyleConfiguration.SignDisplayStrategy.never.getter@<D0>(_DWORD *a1@<X8>)
{
  *(void *)&double result = 65793LL;
  *a1 = 65793;
  return result;
}

uint64_t static CurrencyFormatStyleConfiguration.SignDisplayStrategy.always(showZero:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = result ^ 1;
  *(_BYTE *)(a2 + 3) = 0;
  return result;
}

double static CurrencyFormatStyleConfiguration.SignDisplayStrategy.accounting.getter@<D0>(_DWORD *a1@<X8>)
{
  *(void *)&double result = 16842753LL;
  *a1 = 16842753;
  return result;
}

uint64_t static CurrencyFormatStyleConfiguration.SignDisplayStrategy.accountingAlways(showZero:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = result ^ 1;
  *(_BYTE *)(a2 + 3) = 1;
  return result;
}

void CurrencyFormatStyleConfiguration.SignDisplayStrategy.hash(into:)()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_182FB7B60 + 4 * byte_183729E51[*v0]))( 0x6576697469736F70LL,  0xE800000000000000LL);
}

uint64_t sub_182FB7B60()
{
  return 0x657669746167656ELL;
}

uint64_t sub_182FB7B74()
{
  return 1869768058LL;
}

uint64_t sub_182FB7B84()
{
  return 0x69746E756F636361LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t CurrencyFormatStyleConfiguration.SignDisplayStrategy.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v8 = *v1;
  int v9 = v1[1];
  int v13 = v1[2];
  int v14 = v9;
  v12[1] = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v21 = v8;
  char v20 = 0;
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v10 = v13;
    char v19 = v14;
    char v18 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v17 = v10;
    char v16 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v15 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int CurrencyFormatStyleConfiguration.SignDisplayStrategy.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t CurrencyFormatStyleConfiguration.SignDisplayStrategy.init(from:)@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v20 = 0;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v9 = v21;
    char v18 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v14 = v9;
    LOBYTE(v9) = v19;
    char v16 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v11 = v9;
    LOBYTE(v9) = v17;
    char v15 = 3;
    char v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v14;
    a2[1] = v11;
    a2[2] = v9;
    a2[3] = v12 & 1;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return CurrencyFormatStyleConfiguration.SignDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy( void *a1)
{
  return CurrencyFormatStyleConfiguration.SignDisplayStrategy.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CurrencyFormatStyleConfiguration.Presentation.Option@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized CurrencyFormatStyleConfiguration.Presentation.Option.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.Presentation.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.Presentation.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void static CurrencyFormatStyleConfiguration.Presentation.fullName.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t CurrencyFormatStyleConfiguration.Presentation.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CurrencyFormatStyleConfiguration.Presentation.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t CurrencyFormatStyleConfiguration.Presentation.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CurrencyFormatStyleConfiguration.Presentation.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.Presentation@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return CurrencyFormatStyleConfiguration.Presentation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.Presentation( void *a1)
{
  return CurrencyFormatStyleConfiguration.Presentation.encode(to:)(a1);
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option@<X0>( void *result@<X0>, char *a2@<X8>)
{
  if (*result >= 4uLL) {
    char v2 = 3;
  }
  else {
    char v2 = 0x2010003u >> (8 * *result);
  }
  *a2 = v2;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DescriptiveNumberFormatConfiguration.Presentation.Option( void *a1@<X8>)
{
  *a1 = *v1 + 1LL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void DescriptiveNumberFormatConfiguration.Presentation.hash(into:)()
{
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FormatStyleCapitalizationContext.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x6E6F6974706FLL && a2 == 0xE600000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t DescriptiveNumberFormatConfiguration.Presentation.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DescriptiveNumberFormatConfiguration.Presentation.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int DescriptiveNumberFormatConfiguration.Presentation.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

uint64_t DescriptiveNumberFormatConfiguration.Presentation.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DescriptiveNumberFormatConfiguration.Presentation.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance DescriptiveNumberFormatConfiguration.Presentation@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return DescriptiveNumberFormatConfiguration.Presentation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DescriptiveNumberFormatConfiguration.Presentation( void *a1)
{
  return DescriptiveNumberFormatConfiguration.Presentation.encode(to:)(a1);
}

uint64_t DescriptiveNumberFormatConfiguration.Collection.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DescriptiveNumberFormatConfiguration.Collection.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v8 = *v1;
  int v11 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = v8;
  char v14 = 0;
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v13 = v11;
    char v12 = 1;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DescriptiveNumberFormatConfiguration.Collection.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DescriptiveNumberFormatConfiguration.Collection.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v15 = 0;
    lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v16;
    char v13 = 1;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v10 = v14;
    *a2 = v9;
    a2[1] = v10;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000015LL;
  }
  else {
    return 0x61746E6573657270LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized DescriptiveNumberFormatConfiguration.Collection.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance DescriptiveNumberFormatConfiguration.Collection@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return DescriptiveNumberFormatConfiguration.Collection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DescriptiveNumberFormatConfiguration.Collection( void *a1)
{
  return DescriptiveNumberFormatConfiguration.Collection.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DescriptiveNumberFormatConfiguration.Collection()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  if (v2 == 5)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DescriptiveNumberFormatConfiguration.Collection()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0 + 1LL);
  if (v1 == 5)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DescriptiveNumberFormatConfiguration.Collection()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  if (v2 == 5)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }

  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FloatingPointRoundingRule.CodingValue@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized FloatingPointRoundingRule.CodingValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointRoundingRule.CodingValue()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointRoundingRule.CodingValue()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t FloatingPointRoundingRule.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v11, v11[3]);
    lazy protocol witness table accessor for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, **((unsigned int **)&unk_189C73D40 + v12), v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t FloatingPointRoundingRule.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  int v8 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == *MEMORY[0x189619F78])
  {
    char v9 = 0;
  }

  else
  {
    if (v8 != *MEMORY[0x189619F70])
    {
      if (v8 == *MEMORY[0x189619F88])
      {
        char v9 = 2;
        goto LABEL_13;
      }

      if (v8 == *MEMORY[0x189619F90])
      {
        char v9 = 3;
        goto LABEL_13;
      }

      if (v8 == *MEMORY[0x189619F60])
      {
        char v9 = 4;
        goto LABEL_13;
      }

      if (v8 == *MEMORY[0x189619F68])
      {
        char v9 = 5;
        goto LABEL_13;
      }

      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    }

    char v9 = 1;
  }

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointRoundingRule@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointRoundingRule.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointRoundingRule(void *a1)
{
  return FloatingPointRoundingRule.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys()
{
  if (*v0) {
    return 0x676E6974616F6C66LL;
  }
  else {
    return 0x72656765746E69LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t NumberFormatStyleConfiguration.RoundingIncrement.encode(to:)(void *a1, uint64_t a2, char a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  int v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((a3 & 1) != 0)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }

  else
  {
    char v11 = 0;
    KeyedEncodingContainer.encode(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t NumberFormatStyleConfiguration.Precision.Option.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_182FB9500 + 4 * byte_183729E55[a1]))( 0xD000000000000014LL,  0x80000001839CA680LL);
}

uint64_t sub_182FB9500()
{
  return v0 + 4;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.RoundingIncrement@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized NumberFormatStyleConfiguration.RoundingIncrement.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.RoundingIncrement( void *a1)
{
  return NumberFormatStyleConfiguration.RoundingIncrement.encode(to:)(a1, *(void *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys()
{
  return NumberFormatStyleConfiguration.Precision.Option.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized NumberFormatStyleConfiguration.Precision.Option.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t NumberFormatStyleConfiguration.Precision.Option.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Precision.Option.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  int v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v3, &v20);
  char v9 = v26;
  if (v26 < 0)
  {
    v26 &= ~0x80u;
    int v27 = v22;
    uint64_t v16 = v23;
    uint64_t v17 = v21;
    int v15 = v24;
    uint64_t v12 = v25;
    uint64_t v18 = v20;
    char v19 = BYTE8(v20);
    char v28 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    lazy protocol witness table accessor for type Int? and conformance <A> A?();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v2) {
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    uint64_t v14 = v12;
    uint64_t v18 = v17;
    char v19 = v27;
    char v28 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v18 = v16;
    char v19 = v15;
    char v28 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v18 = v14;
    char v19 = v9 & 1;
    char v28 = 5;
    goto LABEL_4;
  }

  uint64_t v10 = *((void *)&v20 + 1);
  char v11 = v21;
  LOBYTE(v18) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v18 = v10;
    char v19 = v11;
    char v28 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    lazy protocol witness table accessor for type Int? and conformance <A> A?();
LABEL_4:
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

_OWORD *protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Precision.Option@<X0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = (_OWORD *)specialized NumberFormatStyleConfiguration.Precision.Option.init(from:)(a1, (uint64_t)v5);
  if (!v2) {
    return outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v5, a2);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Precision.Option( void *a1)
{
  return NumberFormatStyleConfiguration.Precision.Option.encode(to:)(a1);
}

void NumberFormatStyleConfiguration.Collection.skeleton.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v2);
  int v108 = &v98[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v110 = *(void *)(v4 - 8);
  uint64_t v111 = v4;
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  unsigned int v106 = &v98[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v5);
  unsigned int v109 = &v98[-v7];
  uint64_t v123 = 0LL;
  unint64_t v124 = 0xE000000000000000LL;
  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
  {
    uint64_t v105 = v0;
    double v8 = *(double *)v0;
    uint64_t v115 = 0x2F656C616373LL;
    unint64_t v116 = 0xE600000000000000LL;
    unint64_t v9 = specialized NSDecimal.init(_:)(v8);
    LOWORD(v11) = v10;
    LOWORD(v13) = v12;
    *(void *)unsigned __int16 v117 = v9;
    unint64_t v14 = HIDWORD(v9);
    unint64_t v15 = HIWORD(v9);
    unint64_t v16 = v10 >> 16;
    *(void *)&v117[8] = v10;
    unint64_t v17 = HIDWORD(v10);
    unint64_t v18 = HIWORD(v10);
    LODWORD(v19) = HIWORD(v12);
    *(_DWORD *)&v117[16] = v12;
    if (_So9NSDecimala__length_getter(v117)
      || (*(void *)unsigned __int16 v117 = v9,
          *(_WORD *)&v117[8] = v11,
          *(_WORD *)&v117[10] = v16,
          *(_WORD *)&v117[12] = v17,
          *(_WORD *)&v117[14] = v18,
          *(_WORD *)&v117[16] = v13,
          *(_WORD *)&v117[18] = v19,
          !_So9NSDecimala__isNegative_getter(v117)))
    {
      *(void *)unsigned __int16 v117 = v9;
      *(_WORD *)&v117[8] = v11;
      *(_WORD *)&v117[10] = v16;
      *(_WORD *)&v117[12] = v17;
      *(_WORD *)&v117[14] = v18;
      *(_WORD *)&v117[16] = v13;
      *(_WORD *)&v117[18] = v19;
      if (_So9NSDecimala__length_getter(v117))
      {
        uint64_t v113 = 0LL;
        unint64_t v114 = 0xE000000000000000LL;
        *(void *)unsigned __int16 v117 = v9;
        *(_WORD *)&v117[8] = v11;
        *(_WORD *)&v117[10] = v16;
        *(_WORD *)&v117[12] = v17;
        *(_WORD *)&v117[14] = v18;
        *(_WORD *)&v117[16] = v13;
        *(_WORD *)&v117[18] = v19;
        *(void *)unint64_t v112 = v9;
        *(_WORD *)&v112[8] = v11;
        *(_WORD *)&v112[10] = v16;
        *(_WORD *)&v112[12] = v17;
        *(_WORD *)&v112[14] = v18;
        *(_WORD *)&v112[16] = v13;
        *(_WORD *)&v112[18] = v19;
        if ((int)_So9NSDecimala__exponent_getter(v112) >= 1)
        {
          do
          {
            v20._countAndFlagsBits = 48LL;
            v20._object = (void *)0xE100000000000000LL;
            String.append(_:)(v20);
            *(_DWORD *)unint64_t v112 = v9;
            *(_WORD *)&v112[4] = v14;
            *(_WORD *)&v112[6] = v15;
            *(_WORD *)&v112[8] = v11;
            *(_WORD *)&v112[10] = v16;
            *(_WORD *)&v112[12] = v17;
            *(_WORD *)&v112[14] = v18;
            *(_WORD *)&v112[16] = v13;
            *(_WORD *)&v112[18] = v19;
            int v21 = _So9NSDecimala__exponent_getter(v112);
            _So9NSDecimala__exponent_setter((v21 - 1), v117);
            unint64_t v9 = *(unsigned int *)v117;
            unint64_t v14 = *(unsigned __int16 *)&v117[4];
            LOWORD(v15) = *(_WORD *)&v117[6];
            LOWORD(v11) = *(_WORD *)&v117[8];
            LOWORD(v16) = *(_WORD *)&v117[10];
            LOWORD(v17) = *(_WORD *)&v117[12];
            LOWORD(v18) = *(_WORD *)&v117[14];
            LOWORD(v13) = *(_WORD *)&v117[16];
            LOWORD(v19) = *(_WORD *)&v117[18];
            *(void *)unint64_t v112 = *(void *)v117;
            *(void *)&v112[8] = *(void *)&v117[8];
            *(_DWORD *)&v112[16] = *(_DWORD *)&v117[16];
          }

          while ((int)_So9NSDecimala__exponent_getter(v112) > 0);
        }

        *(_DWORD *)unint64_t v112 = v9;
        *(_WORD *)&v112[4] = v14;
        *(_WORD *)&v112[6] = v15;
        *(_WORD *)&v112[8] = v11;
        *(_WORD *)&v112[10] = v16;
        *(_WORD *)&v112[12] = v17;
        *(_WORD *)&v112[14] = v18;
        *(_WORD *)&v112[16] = v13;
        *(_WORD *)&v112[18] = v19;
        if (!_So9NSDecimala__exponent_getter(v112))
        {
          _So9NSDecimala__exponent_setter(1LL, v117);
          unint64_t v9 = *(unsigned int *)v117;
          unint64_t v14 = *(unsigned __int16 *)&v117[4];
          LOWORD(v15) = *(_WORD *)&v117[6];
          LOWORD(v11) = *(_WORD *)&v117[8];
          LOWORD(v16) = *(_WORD *)&v117[10];
          LOWORD(v17) = *(_WORD *)&v117[12];
          LOWORD(v18) = *(_WORD *)&v117[14];
          LOWORD(v13) = *(_WORD *)&v117[16];
          LOWORD(v19) = *(_WORD *)&v117[18];
        }

        unint64_t v104 = v9;
        *(_DWORD *)unint64_t v112 = v9;
        LOWORD(v22) = v14;
        *(_WORD *)&v112[4] = v14;
        *(_WORD *)&v112[6] = v15;
        *(_WORD *)&v112[8] = v11;
        *(_WORD *)&v112[10] = v16;
        *(_WORD *)&v112[12] = v17;
        *(_WORD *)&v112[14] = v18;
        *(_WORD *)&v112[16] = v13;
        *(_WORD *)&v112[18] = v19;
        if (_So9NSDecimala__length_getter(v112))
        {
          uint64_t v103 = 0LL;
          unint64_t v23 = v14;
          unint64_t v22 = v104;
          while (1)
          {
            unint64_t v107 = v23;
            *(_DWORD *)unint64_t v112 = v22;
            *(_WORD *)&v112[4] = v23;
            *(_WORD *)&v112[6] = v15;
            *(_WORD *)&v112[8] = v11;
            *(_WORD *)&v112[10] = v16;
            *(_WORD *)&v112[12] = v17;
            *(_WORD *)&v112[14] = v18;
            *(_WORD *)&v112[16] = v13;
            *(_WORD *)&v112[18] = v19;
            if (!_So9NSDecimala__exponent_getter(v112))
            {
              unint64_t v104 = v22;
              v24._countAndFlagsBits = 46LL;
              v24._object = (void *)0xE100000000000000LL;
              String.append(_:)(v24);
              LODWORD(v22) = v104;
            }

            *(_DWORD *)unint64_t v112 = v22;
            *(_WORD *)&v112[4] = v107;
            *(_WORD *)&v112[6] = v15;
            *(_WORD *)&v112[8] = v11;
            *(_WORD *)&v112[10] = v16;
            *(_WORD *)&v112[12] = v17;
            *(_WORD *)&v112[14] = v18;
            *(_WORD *)&v112[16] = v13;
            *(_WORD *)&v112[18] = v19;
            int v25 = _So9NSDecimala__exponent_getter(v112);
            _So9NSDecimala__exponent_setter((v25 + 1), v117);
            unint64_t v26 = *(unsigned int *)v117;
            LOWORD(v18) = *(_WORD *)&v117[6];
            LOWORD(v16) = *(_WORD *)&v117[14];
            unint64_t v104 = *(unsigned __int16 *)&v117[4];
            uint64_t v102 = *(unsigned __int16 *)&v117[8];
            uint64_t v101 = *(unsigned __int16 *)&v117[10];
            uint64_t v100 = *(unsigned __int16 *)&v117[12];
            LOWORD(v17) = *(_WORD *)&v117[18];
            int v99 = *(unsigned __int16 *)&v117[16];
            NSDecimal.asVariableLengthInteger()( *(unsigned int *)v117 | ((unint64_t)*(unsigned __int16 *)&v117[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v117[6] << 48),  *(unsigned __int16 *)&v117[8] | ((unint64_t)*(unsigned __int16 *)&v117[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v117[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v117[14] << 48),  *(unsigned __int16 *)&v117[16] | (*(unsigned __int16 *)&v117[18] << 16));
            unint64_t v22 = v27;
            uint64_t v19 = *(void *)(v27 + 16);
            unint64_t v107 = v26;
            if (v19) {
              break;
            }
            unsigned int v13 = 0;
            uint64_t v11 = MEMORY[0x18961AFE8];
LABEL_18:
            uint64_t v31 = *(void *)(v11 + 16);
            if (v31 && !*(_WORD *)(v11 + 2 * v31 + 30))
            {
              do
              {
                *(void *)(v11 + 16) = v31 - 1;
                if (v31 == 1) {
                  break;
                }
              }

              while (!*(unsigned __int16 *)(v11 + 28 + 2 * v31--));
            }

            swift_bridgeObjectRelease();
            *(_DWORD *)unint64_t v112 = v107;
            *(_WORD *)&v112[4] = v104;
            *(_WORD *)&v112[6] = v18;
            *(_WORD *)&v112[8] = v102;
            *(_WORD *)&v112[10] = v101;
            *(_WORD *)&v112[12] = v100;
            *(_WORD *)&v112[14] = v16;
            *(_WORD *)&v112[16] = v99;
            *(_WORD *)&v112[18] = v17;
            NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v11);
            if (v33) {
              goto LABEL_101;
            }
            uint64_t v103 = 0LL;
            unint64_t v34 = *(void *)(v11 + 16);
            swift_bridgeObjectRelease();
            if (HIDWORD(v34)) {
              goto LABEL_102;
            }
            _So9NSDecimala__length_setter(v34, v112);
            *(_DWORD *)unsigned __int16 v117 = *(_DWORD *)v112;
            *(_OWORD *)&v117[4] = *(_OWORD *)&v112[4];
            *(void *)unint64_t v112 = v13 | 0x30;
            v35._countAndFlagsBits = MEMORY[0x186E1B6AC](v112, 1LL);
            String.append(_:)(v35);
            swift_bridgeObjectRelease();
            unint64_t v22 = *(unsigned int *)v117;
            unint64_t v107 = *(unsigned __int16 *)&v117[4];
            LOWORD(v15) = *(_WORD *)&v117[6];
            LOWORD(v11) = *(_WORD *)&v117[8];
            LOWORD(v16) = *(_WORD *)&v117[10];
            LOWORD(v17) = *(_WORD *)&v117[12];
            LOWORD(v18) = *(_WORD *)&v117[14];
            LOWORD(v13) = *(_WORD *)&v117[16];
            LOWORD(v19) = *(_WORD *)&v117[18];
            *(void *)unint64_t v112 = *(void *)v117;
            *(void *)&v112[8] = *(void *)&v117[8];
            *(_DWORD *)&v112[16] = *(_DWORD *)&v117[16];
            int v36 = _So9NSDecimala__length_getter(v112);
            unint64_t v23 = v107;
            if (!v36) {
              goto LABEL_30;
            }
          }

          uint64_t v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          unint64_t v15 = v11 + 30;
          *(void *)(v11 + 16) = v19;
          bzero((void *)(v11 + 32), 2 * v19);
          unsigned int v28 = *(unsigned __int16 *)(2 * v19 + v22 + 30);
          unsigned int v29 = v28 / 0xA;
          do
          {
            *(_WORD *)(v15 + 2 * v19) = v29;
            unsigned int v13 = v28 % 0xA;
            if (v19 == 1) {
              goto LABEL_18;
            }
            unsigned int v28 = *(unsigned __int16 *)(v22 + 28 + 2 * v19) | (v13 << 16);
            unsigned int v29 = v28 / 0xA;
            unint64_t v30 = v19 - 2;
            --v19;
          }

          while (v30 < *(void *)(v11 + 16));
          __break(1u);
        }

        LOWORD(v23) = v22;
        LODWORD(v22) = v104;
LABEL_30:
        *(_DWORD *)unint64_t v112 = v22;
        *(_WORD *)&v112[4] = v23;
        *(_WORD *)&v112[6] = v15;
        *(_WORD *)&v112[8] = v11;
        *(_WORD *)&v112[10] = v16;
        *(_WORD *)&v112[12] = v17;
        *(_WORD *)&v112[14] = v18;
        *(_WORD *)&v112[16] = v13;
        *(_WORD *)&v112[18] = v19;
        __int16 v39 = v23;
        int v40 = v22;
        if ((int)_So9NSDecimala__exponent_getter(v112) <= 0)
        {
          while (1)
          {
            *(_DWORD *)unint64_t v112 = v40;
            *(_WORD *)&v112[4] = v39;
            *(_WORD *)&v112[6] = v15;
            *(_WORD *)&v112[8] = v11;
            *(_WORD *)&v112[10] = v16;
            *(_WORD *)&v112[12] = v17;
            *(_WORD *)&v112[14] = v18;
            *(_WORD *)&v112[16] = v13;
            *(_WORD *)&v112[18] = v19;
            v41._countAndFlagsBits = 48LL;
            v41._object = (void *)0xE100000000000000LL;
            String.append(_:)(v41);
            *(_DWORD *)unint64_t v112 = v40;
            *(_WORD *)&v112[4] = v39;
            *(_WORD *)&v112[6] = v15;
            *(_WORD *)&v112[8] = v11;
            *(_WORD *)&v112[10] = v16;
            *(_WORD *)&v112[12] = v17;
            *(_WORD *)&v112[14] = v18;
            *(_WORD *)&v112[16] = v13;
            *(_WORD *)&v112[18] = v19;
            int v42 = _So9NSDecimala__exponent_getter(v112);
            _So9NSDecimala__exponent_setter((v42 + 1), v117);
            int v40 = *(_DWORD *)v117;
            __int16 v39 = *(_WORD *)&v117[4];
            LOWORD(v15) = *(_WORD *)&v117[6];
            LOWORD(v11) = *(_WORD *)&v117[8];
            LOWORD(v16) = *(_WORD *)&v117[10];
            LOWORD(v17) = *(_WORD *)&v117[12];
            LOWORD(v18) = *(_WORD *)&v117[14];
            LOWORD(v13) = *(_WORD *)&v117[16];
            LOWORD(v19) = *(_WORD *)&v117[18];
          }

          v43._countAndFlagsBits = 46LL;
          v43._object = (void *)0xE100000000000000LL;
          String.append(_:)(v43);
          v44._countAndFlagsBits = 48LL;
          v44._object = (void *)0xE100000000000000LL;
          String.append(_:)(v44);
        }

        *(_DWORD *)unint64_t v112 = v40;
        *(_WORD *)&v112[4] = v39;
        *(_WORD *)&v112[6] = v15;
        *(_WORD *)&v112[8] = v11;
        *(_WORD *)&v112[10] = v16;
        *(_WORD *)&v112[12] = v17;
        *(_WORD *)&v112[14] = v18;
        *(_WORD *)&v112[16] = v13;
        *(_WORD *)&v112[18] = v19;
        if (_So9NSDecimala__isNegative_getter(v112))
        {
          v45._countAndFlagsBits = 45LL;
          v45._object = (void *)0xE100000000000000LL;
          String.append(_:)(v45);
        }

        *(void *)unint64_t v112 = v113;
        *(void *)&v112[8] = v114;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
        lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
        uint64_t v38 = String.init<A>(_:)();
        unint64_t v37 = v46;
      }

      else
      {
        unint64_t v37 = 0xE100000000000000LL;
        uint64_t v38 = 48LL;
      }
    }

    else
    {
      unint64_t v37 = 0xE300000000000000LL;
      uint64_t v38 = 5136718LL;
    }

    uint64_t v1 = v105;
    unint64_t v47 = v37;
    String.append(_:)(*(Swift::String *)&v38);
    swift_bridgeObjectRelease();
    *(void *)unsigned __int16 v117 = v115;
    *(void *)&v117[8] = v116;
    swift_bridgeObjectRetain();
    v48._countAndFlagsBits = 32LL;
    v48._object = (void *)0xE100000000000000LL;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)v117);
    swift_bridgeObjectRelease();
  }

  uint64_t v50 = *(void *)(v1 + 16);
  uint64_t v49 = *(void *)(v1 + 24);
  uint64_t v52 = *(void *)(v1 + 32);
  unint64_t v51 = *(void *)(v1 + 40);
  uint64_t v54 = *(void *)(v1 + 48);
  unint64_t v53 = *(void *)(v1 + 56);
  uint64_t v55 = *(void *)(v1 + 64);
  unsigned int v56 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v57 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v58 = v1 + *(int *)(v57 + 40);
  int v59 = *(unsigned __int8 *)(v58 + 8);
  if (v51 >> 1 == 0xFFFFFFFF && v53 <= 1 && v56 < 2)
  {
    uint64_t v61 = v110;
    uint64_t v60 = v111;
    __int16 v62 = v109;
    uint64_t v63 = (uint64_t)v108;
    if (v59 == 255) {
      goto LABEL_56;
    }
    *(void *)unsigned __int16 v117 = NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(*(void *)v58, v59 & 1);
    *(void *)&v117[8] = v64;
    swift_bridgeObjectRetain();
  }

  else
  {
    if (v59 != 255)
    {
      int64_t v65 = *(void *)v58;
      *(void *)unsigned __int16 v117 = v50;
      *(void *)&v117[8] = v49;
      *(void *)&v117[16] = v52;
      unint64_t v118 = v51;
      uint64_t v119 = v54;
      unint64_t v120 = v53;
      uint64_t v121 = v55;
      char v122 = v56;
      v66._countAndFlagsBits = NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(v65, v59 & 1);
      Swift::String v67 = NumberFormatStyleConfiguration.Precision.skeletonWithRoundingIncrement(stem:)(v66);
      swift_bridgeObjectRelease();
      *(Swift::String *)unsigned __int16 v117 = v67;
      swift_bridgeObjectRetain();
      v68._countAndFlagsBits = 32LL;
      v68._object = (void *)0xE100000000000000LL;
      String.append(_:)(v68);
      swift_bridgeObjectRelease();
      String.append(_:)(*(Swift::String *)v117);
      uint64_t v61 = v110;
      uint64_t v60 = v111;
      __int16 v62 = v109;
      uint64_t v63 = (uint64_t)v108;
LABEL_55:
      swift_bridgeObjectRelease();
LABEL_56:
      int v76 = *(unsigned __int8 *)(v1 + 73);
      if (v76 != 2)
      {
        BOOL v77 = (v76 & 1) == 0;
        uint64_t v78 = 0x666F2D70756F7267LL;
        if (v77)
        {
          uint64_t v78 = 0LL;
          unint64_t v79 = 0xE000000000000000LL;
        }

        else
        {
          unint64_t v79 = 0xE900000000000066LL;
        }

        *(void *)unsigned __int16 v117 = v78;
        *(void *)&v117[8] = v79;
        swift_bridgeObjectRetain();
        v80._countAndFlagsBits = 32LL;
        v80._object = (void *)0xE100000000000000LL;
        String.append(_:)(v80);
        swift_bridgeObjectRelease();
        String.append(_:)(*(Swift::String *)v117);
        swift_bridgeObjectRelease();
      }

      int v81 = *(unsigned __int16 *)(v1 + 74) | (*(unsigned __int8 *)(v1 + 76) << 16);
      if (*(_WORD *)(v1 + 74) != 2)
      {
        uint64_t v82 = 0x76656E2D6E676973LL;
        if ((*(_WORD *)(v1 + 74) & 0x100) == 0) {
          uint64_t v82 = 0x7475612D6E676973LL;
        }
        unint64_t v83 = 0xE90000000000006FLL;
        if ((*(_WORD *)(v1 + 74) & 0x100) != 0) {
          unint64_t v83 = 0xEA00000000007265LL;
        }
        unint64_t v84 = 0xD000000000000010LL;
        if ((v81 & 0x10000) == 0) {
          unint64_t v84 = 0x776C612D6E676973LL;
        }
        unint64_t v85 = 0x80000001839CA560LL;
        if ((v81 & 0x10000) == 0) {
          unint64_t v85 = 0xEB00000000737961LL;
        }
        if ((*(_WORD *)(v1 + 74) & 1) != 0) {
          unint64_t v86 = v82;
        }
        else {
          unint64_t v86 = v84;
        }
        if ((*(_WORD *)(v1 + 74) & 1) != 0) {
          unint64_t v87 = v83;
        }
        else {
          unint64_t v87 = v85;
        }
        *(void *)unsigned __int16 v117 = v86;
        *(void *)&v117[8] = v87;
        swift_bridgeObjectRetain();
        v88._countAndFlagsBits = 32LL;
        v88._object = (void *)0xE100000000000000LL;
        String.append(_:)(v88);
        swift_bridgeObjectRelease();
        String.append(_:)(*(Swift::String *)v117);
        swift_bridgeObjectRelease();
      }

      int v89 = *(unsigned __int8 *)(v1 + 77);
      if (v89 != 2)
      {
        if ((v89 & 1) != 0) {
          unint64_t v90 = 0xEE00737961776C61LL;
        }
        else {
          unint64_t v90 = 0xEC0000006F747561LL;
        }
        *(void *)unsigned __int16 v117 = 0x2D6C616D69636564LL;
        *(void *)&v117[8] = v90;
        swift_bridgeObjectRetain();
        v91._countAndFlagsBits = 32LL;
        v91._object = (void *)0xE100000000000000LL;
        String.append(_:)(v91);
        swift_bridgeObjectRelease();
        String.append(_:)(*(Swift::String *)v117);
        swift_bridgeObjectRelease();
      }

      outlined init with copy of FloatingPointRoundingRule?(v1 + *(int *)(v57 + 36), v63);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v63, 1LL, v60) == 1)
      {
        outlined destroy of Any?(v63, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        goto LABEL_98;
      }

      unint64_t v92 = 0xD000000000000010LL;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v61 + 32))(v62, v63, v60);
      uint64_t v93 = v106;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v61 + 16))(v106, v62, v60);
      int v94 = (*(uint64_t (**)(_BYTE *, uint64_t))(v61 + 88))(v93, v60);
      if (v94 == *MEMORY[0x189619F78])
      {
        unint64_t v92 = 0xD000000000000015LL;
        uint64_t v95 = "rounding-mode-half-up";
      }

      else if (v94 == *MEMORY[0x189619F70])
      {
        unint64_t v92 = 0xD000000000000017LL;
        uint64_t v95 = "rounding-mode-half-even";
      }

      else if (v94 == *MEMORY[0x189619F88])
      {
        unint64_t v92 = 0xD000000000000015LL;
        uint64_t v95 = "rounding-mode-ceiling";
      }

      else if (v94 == *MEMORY[0x189619F90])
      {
        unint64_t v92 = 0xD000000000000013LL;
        uint64_t v95 = "rounding-mode-floor";
      }

      else if (v94 == *MEMORY[0x189619F60])
      {
        unint64_t v92 = 0xD000000000000012LL;
        uint64_t v95 = "rounding-mode-down";
      }

      else
      {
        if (v94 != *MEMORY[0x189619F68])
        {
          (*(void (**)(_BYTE *, uint64_t))(v61 + 8))(v93, v60);
          unint64_t v92 = 0LL;
          unint64_t v96 = 0xE000000000000000LL;
          goto LABEL_97;
        }

        uint64_t v95 = "rounding-mode-up";
      }

      unint64_t v96 = (unint64_t)(v95 - 32) | 0x8000000000000000LL;
LABEL_97:
      *(void *)unsigned __int16 v117 = v92;
      *(void *)&v117[8] = v96;
      swift_bridgeObjectRetain();
      v97._countAndFlagsBits = 32LL;
      v97._object = (void *)0xE100000000000000LL;
      String.append(_:)(v97);
      swift_bridgeObjectRelease();
      String.append(_:)(*(Swift::String *)v117);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v61 + 8))(v62, v60);
LABEL_98:
      __asm { BR              X10 }
    }

    if ((v56 & 0x80) != 0)
    {
      uint64_t v71 = NumberFormatStyleConfiguration.Precision.integerAndFractionalLengthSkeleton(minInt:maxInt:minFrac:maxFrac:)( v50,  v49 & 1,  v52,  v51 & 1,  v54,  v53 & 1,  v55,  v56 & 1);
      uint64_t v73 = v72;
      uint64_t v61 = v110;
      uint64_t v60 = v111;
      __int16 v62 = v109;
      uint64_t v63 = (uint64_t)v108;
    }

    else
    {
      *(void *)unsigned __int16 v117 = MEMORY[0x186E1B904](64LL, 0xE100000000000000LL, v50);
      *(void *)&v117[8] = v69;
      if ((v52 & 1) != 0)
      {
        v74._countAndFlagsBits = 43LL;
        v74._object = (void *)0xE100000000000000LL;
        String.append(_:)(v74);
      }

      else
      {
        if (__OFSUB__(v49, v50))
        {
          __break(1u);
LABEL_101:
          swift_bridgeObjectRelease();
          swift_unexpectedError();
          __break(1u);
LABEL_102:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x182FBA8F0LL);
        }

        v70._countAndFlagsBits = MEMORY[0x186E1B904](35LL, 0xE100000000000000LL, v49 - v50);
        String.append(_:)(v70);
        swift_bridgeObjectRelease();
      }

      uint64_t v61 = v110;
      uint64_t v60 = v111;
      __int16 v62 = v109;
      uint64_t v63 = (uint64_t)v108;
      uint64_t v71 = *(void *)v117;
      uint64_t v73 = *(void *)&v117[8];
    }

    *(void *)unsigned __int16 v117 = v71;
    *(void *)&v117[8] = v73;
    swift_bridgeObjectRetain();
  }

  v75._countAndFlagsBits = 32LL;
  v75._object = (void *)0xE100000000000000LL;
  String.append(_:)(v75);
  swift_bridgeObjectRelease();
  String.append(_:)(*(Swift::String *)v117);
  goto LABEL_55;
}

uint64_t NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(int64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    if (a1 >= 1)
    {
      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease();
      unint64_t v85 = 0xD000000000000014LL;
      unint64_t v86 = 0x80000001839CA5A0LL;
      unint64_t v3 = specialized NSDecimal.init(_:)(a1);
      LOWORD(v5) = v4;
      LOWORD(v7) = v6;
      *(void *)unint64_t v84 = v3;
      unint64_t v8 = HIDWORD(v3);
      unint64_t v9 = HIWORD(v3);
      v10._rawValue = (void *)(v4 >> 16);
      *(void *)&v84[8] = v4;
      unint64_t v11 = HIDWORD(v4);
      unsigned int v12 = (char *)HIWORD(v4);
      unsigned int v13 = HIWORD(v6);
      *(_DWORD *)&v84[16] = v6;
      if (_So9NSDecimala__length_getter(v84)
        || (*(void *)unint64_t v84 = v3,
            *(_WORD *)&v84[8] = v5,
            *(_WORD *)&v84[10] = v10._rawValue,
            *(_WORD *)&v84[12] = v11,
            *(_WORD *)&v84[14] = (_WORD)v12,
            *(_WORD *)&v84[16] = v7,
            *(_WORD *)&v84[18] = v13,
            !_So9NSDecimala__isNegative_getter(v84)))
      {
        *(void *)unint64_t v84 = v3;
        *(_WORD *)&v84[8] = v5;
        *(_WORD *)&v84[10] = v10._rawValue;
        *(_WORD *)&v84[12] = v11;
        *(_WORD *)&v84[14] = (_WORD)v12;
        *(_WORD *)&v84[16] = v7;
        *(_WORD *)&v84[18] = v13;
        if (_So9NSDecimala__length_getter(v84))
        {
          *(void *)&__int128 v83 = 0LL;
          *((void *)&v83 + 1) = 0xE000000000000000LL;
          *(void *)unint64_t v84 = v3;
          *(_WORD *)&v84[8] = v5;
          *(_WORD *)&v84[10] = v10._rawValue;
          *(_WORD *)&v84[12] = v11;
          *(_WORD *)&v84[14] = (_WORD)v12;
          *(_WORD *)&v84[16] = v7;
          *(_WORD *)&v84[18] = v13;
          *(void *)uint64_t v82 = v3;
          *(_WORD *)&v82[8] = v5;
          *(_WORD *)&v82[10] = v10._rawValue;
          *(_WORD *)&v82[12] = v11;
          *(_WORD *)&v82[14] = (_WORD)v12;
          *(_WORD *)&v82[16] = v7;
          *(_WORD *)&v82[18] = v13;
          if ((int)_So9NSDecimala__exponent_getter(v82) >= 1)
          {
            do
            {
              v14._countAndFlagsBits = 48LL;
              v14._object = (void *)0xE100000000000000LL;
              String.append(_:)(v14);
              *(_DWORD *)uint64_t v82 = v3;
              *(_WORD *)&v82[4] = v8;
              *(_WORD *)&v82[6] = v9;
              *(_WORD *)&v82[8] = v5;
              *(_WORD *)&v82[10] = v10._rawValue;
              *(_WORD *)&v82[12] = v11;
              *(_WORD *)&v82[14] = (_WORD)v12;
              *(_WORD *)&v82[16] = v7;
              *(_WORD *)&v82[18] = v13;
              int v15 = _So9NSDecimala__exponent_getter(v82);
              _So9NSDecimala__exponent_setter((v15 - 1), v84);
              LODWORD(v3) = *(_DWORD *)v84;
              LOWORD(v8) = *(_WORD *)&v84[4];
              LOWORD(v9) = *(_WORD *)&v84[6];
              LOWORD(v5) = *(_WORD *)&v84[8];
              LOWORD(v10._rawValue) = *(_WORD *)&v84[10];
              LOWORD(v11) = *(_WORD *)&v84[12];
              LOWORD(v12) = *(_WORD *)&v84[14];
              LOWORD(v7) = *(_WORD *)&v84[16];
              LOWORD(v13) = *(_WORD *)&v84[18];
              *(_OWORD *)uint64_t v82 = *(_OWORD *)v84;
              *(_WORD *)&v82[16] = *(_WORD *)&v84[16];
              *(_WORD *)&v82[18] = *(_WORD *)&v84[18];
            }

            while ((int)_So9NSDecimala__exponent_getter(v82) > 0);
          }

          *(_DWORD *)uint64_t v82 = v3;
          *(_WORD *)&v82[4] = v8;
          *(_WORD *)&v82[6] = v9;
          *(_WORD *)&v82[8] = v5;
          *(_WORD *)&v82[10] = v10._rawValue;
          *(_WORD *)&v82[12] = v11;
          *(_WORD *)&v82[14] = (_WORD)v12;
          *(_WORD *)&v82[16] = v7;
          *(_WORD *)&v82[18] = v13;
          if (!_So9NSDecimala__exponent_getter(v82))
          {
            _So9NSDecimala__exponent_setter(1LL, v84);
            LODWORD(v3) = *(_DWORD *)v84;
            LOWORD(v8) = *(_WORD *)&v84[4];
            LOWORD(v9) = *(_WORD *)&v84[6];
            LOWORD(v5) = *(_WORD *)&v84[8];
            LOWORD(v10._rawValue) = *(_WORD *)&v84[10];
            LOWORD(v11) = *(_WORD *)&v84[12];
            LOWORD(v12) = *(_WORD *)&v84[14];
            LOWORD(v7) = *(_WORD *)&v84[16];
            LOWORD(v13) = *(_WORD *)&v84[18];
          }

          int v75 = v3;
          *(_DWORD *)uint64_t v82 = v3;
          LOWORD(v16) = v8;
          *(_WORD *)&v82[4] = v8;
          *(_WORD *)&v82[6] = v9;
          *(_WORD *)&v82[8] = v5;
          *(_WORD *)&v82[10] = v10._rawValue;
          *(_WORD *)&v82[12] = v11;
          *(_WORD *)&v82[14] = (_WORD)v12;
          *(_WORD *)&v82[16] = v7;
          *(_WORD *)&v82[18] = v13;
          if (_So9NSDecimala__length_getter(v82))
          {
            __int16 v17 = v8;
            int v18 = v3;
            while (1)
            {
              __int16 v76 = v17;
              *(_DWORD *)uint64_t v82 = v18;
              *(_WORD *)&v82[4] = v17;
              *(_WORD *)&v82[6] = v9;
              *(_WORD *)&v82[8] = v5;
              *(_WORD *)&v82[10] = v10._rawValue;
              *(_WORD *)&v82[12] = v11;
              *(_WORD *)&v82[14] = (_WORD)v12;
              *(_WORD *)&v82[16] = v7;
              *(_WORD *)&v82[18] = v13;
              if (!_So9NSDecimala__exponent_getter(v82))
              {
                v19._countAndFlagsBits = 46LL;
                v19._object = (void *)0xE100000000000000LL;
                String.append(_:)(v19);
              }

              *(_DWORD *)uint64_t v82 = v18;
              *(_WORD *)&v82[4] = v76;
              *(_WORD *)&v82[6] = v9;
              *(_WORD *)&v82[8] = v5;
              *(_WORD *)&v82[10] = v10._rawValue;
              *(_WORD *)&v82[12] = v11;
              *(_WORD *)&v82[14] = (_WORD)v12;
              *(_WORD *)&v82[16] = v7;
              *(_WORD *)&v82[18] = v13;
              int v20 = _So9NSDecimala__exponent_getter(v82);
              _So9NSDecimala__exponent_setter((v20 + 1), v84);
              int v21 = *(_DWORD *)v84;
              LOWORD(v9) = *(_WORD *)&v84[6];
              LOWORD(v13) = *(_WORD *)&v84[14];
              int v75 = *(unsigned __int16 *)&v84[8];
              __int16 v77 = *(_WORD *)&v84[4];
              __int16 v71 = *(_WORD *)&v84[12];
              __int16 v73 = *(_WORD *)&v84[10];
              LOWORD(v11) = *(_WORD *)&v84[18];
              __int16 v69 = *(_WORD *)&v84[16];
              NSDecimal.asVariableLengthInteger()( *(unsigned int *)v84 | ((unint64_t)*(unsigned __int16 *)&v84[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v84[6] << 48),  *(unsigned __int16 *)&v84[8] | ((unint64_t)*(unsigned __int16 *)&v84[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v84[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v84[14] << 48),  *(unsigned __int16 *)&v84[16] | (*(unsigned __int16 *)&v84[18] << 16));
              uint64_t v16 = v22;
              uint64_t v7 = *(void *)(v22 + 16);
              if (!v7) {
                break;
              }
              int v67 = v21;
              v10._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
              unsigned int v12 = (char *)v10._rawValue + 30;
              *((void *)v10._rawValue + 2) = v7;
              bzero((char *)v10._rawValue + 32, 2 * v7);
              unsigned int v23 = *(unsigned __int16 *)(2 * v7 + v16 + 30);
              unsigned int v24 = v23 / 0xA;
              while (1)
              {
                *(_WORD *)&v12[2 * v7] = v24;
                unsigned int v5 = v23 % 0xA;
                if (v7 == 1) {
                  break;
                }
                unsigned int v23 = *(unsigned __int16 *)(v16 + 28 + 2 * v7) | (v5 << 16);
                unsigned int v24 = v23 / 0xA;
                unint64_t v25 = v7 - 2;
                --v7;
                if (v25 >= *((void *)v10._rawValue + 2))
                {
                  __break(1u);
                  goto LABEL_60;
                }
              }

              int v21 = v67;
              uint64_t v26 = *((void *)v10._rawValue + 2);
              if (v26) {
                goto LABEL_21;
              }
LABEL_24:
              swift_bridgeObjectRelease();
              *(_DWORD *)uint64_t v82 = v21;
              *(_WORD *)&v82[4] = v77;
              *(_WORD *)&v82[6] = v9;
              *(_WORD *)&v82[8] = v75;
              *(_WORD *)&v82[10] = v73;
              *(_WORD *)&v82[12] = v71;
              *(_WORD *)&v82[14] = v13;
              *(_WORD *)&v82[16] = v69;
              *(_WORD *)&v82[18] = v11;
              NSDecimal.copyVariableLengthInteger(_:)(v10);
              if (v28) {
                goto LABEL_77;
              }
              unint64_t v29 = *((void *)v10._rawValue + 2);
              swift_bridgeObjectRelease();
              if (HIDWORD(v29)) {
                goto LABEL_78;
              }
              _So9NSDecimala__length_setter(v29, v82);
              *(_DWORD *)unint64_t v84 = *(_DWORD *)v82;
              *(_OWORD *)&v84[4] = *(_OWORD *)&v82[4];
              *(void *)uint64_t v82 = v5 | 0x30;
              v30._countAndFlagsBits = MEMORY[0x186E1B6AC](v82, 1LL);
              String.append(_:)(v30);
              swift_bridgeObjectRelease();
              int v18 = *(_DWORD *)v84;
              __int16 v78 = *(_WORD *)&v84[4];
              LOWORD(v9) = *(_WORD *)&v84[6];
              LOWORD(v5) = *(_WORD *)&v84[8];
              LOWORD(v10._rawValue) = *(_WORD *)&v84[10];
              LOWORD(v11) = *(_WORD *)&v84[12];
              LOWORD(v12) = *(_WORD *)&v84[14];
              LOWORD(v7) = *(_WORD *)&v84[16];
              LOWORD(v13) = *(_WORD *)&v84[18];
              *(_OWORD *)uint64_t v82 = *(_OWORD *)v84;
              *(_WORD *)&v82[16] = *(_WORD *)&v84[16];
              *(_WORD *)&v82[18] = *(_WORD *)&v84[18];
              int v31 = _So9NSDecimala__length_getter(v82);
              __int16 v17 = v78;
              if (!v31) {
                goto LABEL_62;
              }
            }

            unsigned int v5 = 0;
            v10._rawValue = (void *)MEMORY[0x18961AFE8];
            uint64_t v26 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
            if (!v26) {
              goto LABEL_24;
            }
LABEL_21:
            if (!*((_WORD *)v10._rawValue + v26 + 15))
            {
              do
              {
                *((void *)v10._rawValue + 2) = v26 - 1;
                if (v26 == 1) {
                  break;
                }
              }

              while (!*((unsigned __int16 *)v10._rawValue + v26-- + 14));
            }

            goto LABEL_24;
          }

LABEL_77:
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_78:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }

    __break(1u);
LABEL_39:
    if (v16)
    {
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }

    if ((uint64_t)v11 < (uint64_t)result)
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }

    goto LABEL_41;
  }

  if ((*(_BYTE *)(v0 + 105) & 1) == 0)
  {
    if (v3 == v1)
    {
      uint64_t v7 = 0LL;
      if (*(_BYTE *)(v0 + 106)) {
        goto LABEL_46;
      }
      goto LABEL_23;
    }

    goto LABEL_31;
  }

      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }

        if ((v56 & 1) != 0) {
          goto LABEL_123;
        }
        Swift::String v64 = &v31[16 * v33];
        unint64_t v66 = *(void *)v64;
        unint64_t v65 = *((void *)v64 + 1);
        unsigned int v44 = __OFSUB__(v65, v66);
        int v67 = v65 - v66;
        if (v44) {
          goto LABEL_126;
        }
        if (v67 < v55) {
          goto LABEL_15;
        }
LABEL_85:
        __int16 v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }

        if (!v10) {
          goto LABEL_142;
        }
        __int16 v73 = &v31[16 * v72];
        __int16 v74 = *(void *)v73;
        int v75 = v31;
        __int16 v76 = &v31[16 * v33];
        __int16 v77 = *((void *)v76 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)( (double *)(v10 + 8LL * *(void *)v73),  (double *)(v10 + 8LL * *(void *)v76),  v10 + 8 * v77,  __dst);
        if (v1) {
          goto LABEL_113;
        }
        if (v77 < v74) {
          goto LABEL_116;
        }
        if (v33 > *((void *)v11 + 2)) {
          goto LABEL_117;
        }
        *(void *)__int16 v73 = v74;
        *(void *)&v75[16 * v72 + 8] = v77;
        __int16 v78 = *((void *)v11 + 2);
        if (v33 >= v78) {
          goto LABEL_118;
        }
        unsigned int v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        int v31 = v75;
        *((void *)v11 + 2) = v78 - 1;
        Swift::OpaquePointer v10 = v99;
        if (v78 <= 2) {
          goto LABEL_15;
        }
      }
    }

    unsigned int v12 = 1LL;
LABEL_15:
    unint64_t v3 = v98;
    if (v9 >= v98)
    {
      unint64_t v8 = v96;
      uint64_t v2 = v94;
      goto LABEL_102;
    }
  }

                              Swift::String v64 = *(void *)(v60 + 56) + 16 * v11;
                              *(void *)Swift::String v64 = v63;
                              *(_BYTE *)(v64 + 8) = 1;
LABEL_115:
                              *(void *)(v5 + 8) = v60;
                              swift_bridgeObjectRelease();
                              return swift_bridgeObjectRelease();
                            }

                            int v68 = v85;
                            Swift::String v60 = v105;
                          }
                        }
                      }
                    }
                  }
                }
              }

          *(unint64_t *)((char *)v114 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v34;
          uint64_t v26 = __OFADD__(v115++, 1LL);
          if (v26)
          {
            __break(1u);
            goto LABEL_80;
          }
        }

        else
        {
LABEL_73:
          swift_getKeyPath();
          int v41 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          unint64_t v46 = v45;
          swift_release();
          if ((v46 & 1) != 0) {
            goto LABEL_163;
          }
LABEL_76:
          unint64_t v3 = v117;
        }
      }
    }
  }

  v112[1] = v112;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  unint64_t v114 = (void *)((char *)v112 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0LL));
  bzero(v114, v5);
  unsigned int v6 = 0LL;
  uint64_t v7 = v3 + 64;
  unint64_t v8 = 1LL << *(_BYTE *)(v3 + 32);
  unint64_t v9 = -1LL;
  if (v8 < 64) {
    unint64_t v9 = ~(-1LL << v8);
  }
  Swift::OpaquePointer v10 = v9 & *(void *)(v3 + 64);
  uint64_t v115 = 0LL;
  unint64_t v116 = (unint64_t)(v8 + 63) >> 6;
  do
  {
    do
    {
      while (1)
      {
        if (v10)
        {
          unint64_t v11 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
          unsigned int v12 = v11 | (v6 << 6);
        }

        else
        {
          unsigned int v13 = v6 + 1;
          if (__OFADD__(v6, 1LL)) {
            goto LABEL_152;
          }
          if (v13 >= v116) {
            goto LABEL_39;
          }
          Swift::String v14 = *(void *)(v7 + 8 * v13);
          ++v6;
          if (!v14)
          {
            unsigned int v6 = v13 + 1;
            if (v13 + 1 >= v116) {
              goto LABEL_39;
            }
            Swift::String v14 = *(void *)(v7 + 8 * v6);
            if (!v14)
            {
              unsigned int v6 = v13 + 2;
              if (v13 + 2 >= v116) {
                goto LABEL_39;
              }
              Swift::String v14 = *(void *)(v7 + 8 * v6);
              if (!v14)
              {
                unsigned int v6 = v13 + 3;
                if (v13 + 3 >= v116) {
                  goto LABEL_39;
                }
                Swift::String v14 = *(void *)(v7 + 8 * v6);
                if (!v14)
                {
                  int v15 = v13 + 4;
                  if (v15 >= v116) {
                    goto LABEL_39;
                  }
                  Swift::String v14 = *(void *)(v7 + 8 * v15);
                  if (!v14)
                  {
                    while (1)
                    {
                      unsigned int v6 = v15 + 1;
                      if (__OFADD__(v15, 1LL)) {
                        break;
                      }
                      if (v6 >= v116) {
                        goto LABEL_39;
                      }
                      Swift::String v14 = *(void *)(v7 + 8 * v6);
                      ++v15;
                      if (v14) {
                        goto LABEL_24;
                      }
                    }

      swift_bridgeObjectRelease();
    }

    specialized _NativeDictionary._delete(at:)(v21, v24);
    *unsigned int v5 = v24;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  unint64_t v9 = swift_isUniquelyReferenced_nonNull_native();
  int v68 = *v3;
  Swift::OpaquePointer v10 = *v3;
  *unint64_t v3 = 0x8000000000000000LL;
  unsigned int v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  unsigned int v13 = *(void *)(v10 + 16);
  Swift::String v14 = (v11 & 1) == 0;
  int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    unint64_t v4 = v11;
    if (*(void *)(v10 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, v9);
      uint64_t v16 = v68;
      __int16 v17 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
      if ((v4 & 1) != (v18 & 1)) {
        goto LABEL_82;
      }
      unsigned int v12 = v17;
      if ((v4 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_13:
      unint64_t v25 = (uint64_t *)(*(void *)(v16 + 56) + 16 * v12);
      swift_bridgeObjectRelease();
      *unint64_t v25 = a1;
      v25[1] = a2;
LABEL_47:
      *unsigned int v5 = v16;
      return swift_bridgeObjectRelease();
    }

    if ((v9 & 1) != 0)
    {
      uint64_t v16 = v10;
      if ((v11 & 1) != 0) {
        goto LABEL_13;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, (void *)v16);
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  uint64_t v26 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v26;
  if (!*(void *)(v10 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }

  unint64_t v27 = (void *)(v26 + 64);
  uint64_t v28 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  unint64_t v66 = v10 + 64;
  unint64_t v29 = 0LL;
  *(void *)(v16 + 16) = *(void *)(v10 + 16);
  Swift::String v30 = 1LL << *(_BYTE *)(v10 + 32);
  int v31 = -1LL;
  if (v30 < 64) {
    int v31 = ~(-1LL << v30);
  }
  unint64_t v32 = v31 & *(void *)(v10 + 64);
  int v67 = (unint64_t)(v30 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      unint64_t v33 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      unsigned int v34 = v33 | (v29 << 6);
      goto LABEL_23;
    }

    int v42 = v29 + 1;
    if (__OFADD__(v29, 1LL))
    {
      __break(1u);
      goto LABEL_79;
    }

    if (v42 >= v67) {
      goto LABEL_45;
    }
    uint64_t v43 = *(void *)(v66 + 8 * v42);
    ++v29;
    if (!v43)
    {
      unint64_t v29 = v42 + 1;
      if (v42 + 1 >= v67) {
        goto LABEL_45;
      }
      uint64_t v43 = *(void *)(v66 + 8 * v29);
      if (!v43)
      {
        unint64_t v29 = v42 + 2;
        if (v42 + 2 >= v67) {
          goto LABEL_45;
        }
        uint64_t v43 = *(void *)(v66 + 8 * v29);
        if (!v43)
        {
          unint64_t v29 = v42 + 3;
          if (v42 + 3 >= v67) {
            goto LABEL_45;
          }
          uint64_t v43 = *(void *)(v66 + 8 * v29);
          if (!v43)
          {
            unint64_t v29 = v42 + 4;
            if (v42 + 4 >= v67) {
              goto LABEL_45;
            }
            uint64_t v43 = *(void *)(v66 + 8 * v29);
            if (!v43)
            {
              unint64_t v29 = v42 + 5;
              if (v42 + 5 >= v67) {
                goto LABEL_45;
              }
              uint64_t v43 = *(void *)(v66 + 8 * v29);
              if (!v43) {
                break;
              }
            }
          }
        }
      }
    }

    unint64_t v86 = (v80 - 1) & v80;
    unint64_t v87 = v81;
    Swift::String v64 = __clz(__rbit64(v80)) + (v81 << 6);
LABEL_56:
    unint64_t v65 = 16 * v64;
    unint64_t v66 = (uint64_t *)(*(void *)(v19 + 48) + 16 * v64);
    int v67 = *v66;
    int v68 = v66[1];
    __int16 v69 = 80 * v64;
    __int16 v70 = *(void *)(v19 + 56) + v69;
    __int16 v71 = *(void *)v70;
    __int16 v72 = *(void *)(v70 + 72);
    __int16 v73 = (void *)(*(void *)(v27 + 48) + v65);
    __int16 v74 = *(_OWORD *)(v70 + 8);
    int v75 = *(_OWORD *)(v70 + 24);
    __int16 v76 = *(_OWORD *)(v70 + 40);
    __int16 v77 = *(_OWORD *)(v70 + 56);
    *__int16 v73 = v67;
    v73[1] = v68;
    __int16 v78 = *(void *)(v27 + 56) + v69;
    *(void *)__int16 v78 = v71;
    *(_OWORD *)(v78 + 8) = v74;
    *(_OWORD *)(v78 + 24) = v75;
    *(_OWORD *)(v78 + 40) = v76;
    *(_OWORD *)(v78 + 56) = v77;
    *(void *)(v78 + 72) = v72;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (char *)swift_bridgeObjectRetain();
    Swift::String v63 = v86;
    Swift::String v60 = v87;
  }

  uint64_t v82 = v60 + 7;
  if (v60 + 7 >= v84) {
    goto LABEL_79;
  }
  __int16 v80 = *(void *)&v85[8 * v82];
  if (v80)
  {
    __int16 v81 = v60 + 7;
    goto LABEL_77;
  }

  while (1)
  {
    __int16 v81 = v82 + 1;
    if (__OFADD__(v82, 1LL)) {
      break;
    }
    int v31 = v90;
    if (v81 >= v84) {
      goto LABEL_79;
    }
    __int16 v80 = *(void *)&v85[8 * v81];
    ++v82;
    if (v80) {
      goto LABEL_77;
    }
  }

      swift_bridgeObjectRelease();
    }

    unsigned int v23 = *(void **)(*(void *)(v22 + 56) + 8 * v19);
    specialized _NativeDictionary._delete(at:)(v19, v22);
    *unint64_t v4 = v22;

    return swift_bridgeObjectRelease();
  }

  uint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
  int v59 = *v2;
  unint64_t v8 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  Swift::OpaquePointer v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  unint64_t v11 = *(void *)(v8 + 16);
  unsigned int v12 = (v9 & 1) == 0;
  unsigned int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    unint64_t v3 = v9;
    if (*(void *)(v8 + 24) < v13)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, v7);
      Swift::String v14 = v59;
      int v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v16 & 1)) {
        goto LABEL_82;
      }
      Swift::OpaquePointer v10 = v15;
      if ((v3 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_13:
      unsigned int v24 = *(void *)(v14 + 56);

      *(void *)(v24 + 8 * v10) = a1;
LABEL_47:
      *unint64_t v4 = v14;
      return swift_bridgeObjectRelease();
    }

    if ((v7 & 1) != 0)
    {
      Swift::String v14 = v8;
      if ((v9 & 1) != 0) {
        goto LABEL_13;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, (void *)v14);
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  unint64_t v25 = static _DictionaryStorage.copy(original:)();
  Swift::String v14 = v25;
  if (!*(void *)(v8 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }

  uint64_t v26 = (void *)(v25 + 64);
  unint64_t v27 = (unint64_t)((1LL << *(_BYTE *)(v14 + 32)) + 63) >> 6;
  Swift::String v58 = v8 + 64;
  uint64_t v28 = 0LL;
  *(void *)(v14 + 16) = *(void *)(v8 + 16);
  unint64_t v29 = 1LL << *(_BYTE *)(v8 + 32);
  Swift::String v30 = -1LL;
  if (v29 < 64) {
    Swift::String v30 = ~(-1LL << v29);
  }
  int v31 = v30 & *(void *)(v8 + 64);
  unint64_t v32 = (unint64_t)(v29 + 63) >> 6;
  while (1)
  {
    if (v31)
    {
      unint64_t v33 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      unsigned int v34 = v33 | (v28 << 6);
      goto LABEL_23;
    }

    __int16 v38 = v28 + 1;
    if (__OFADD__(v28, 1LL))
    {
      __break(1u);
      goto LABEL_79;
    }

    if (v38 >= v32) {
      goto LABEL_45;
    }
    int v39 = *(void *)(v58 + 8 * v38);
    ++v28;
    if (!v39)
    {
      uint64_t v28 = v38 + 1;
      if (v38 + 1 >= v32) {
        goto LABEL_45;
      }
      int v39 = *(void *)(v58 + 8 * v28);
      if (!v39)
      {
        uint64_t v28 = v38 + 2;
        if (v38 + 2 >= v32) {
          goto LABEL_45;
        }
        int v39 = *(void *)(v58 + 8 * v28);
        if (!v39)
        {
          uint64_t v28 = v38 + 3;
          if (v38 + 3 >= v32) {
            goto LABEL_45;
          }
          int v39 = *(void *)(v58 + 8 * v28);
          if (!v39)
          {
            uint64_t v28 = v38 + 4;
            if (v38 + 4 >= v32) {
              goto LABEL_45;
            }
            int v39 = *(void *)(v58 + 8 * v28);
            if (!v39)
            {
              uint64_t v28 = v38 + 5;
              if (v38 + 5 >= v32) {
                goto LABEL_45;
              }
              int v39 = *(void *)(v58 + 8 * v28);
              if (!v39) {
                break;
              }
            }
          }
        }
      }
    }

              Swift::String v62 = v57;
              Swift::String v63 = (v56 - 1) & v56;
              int v52 = __clz(__rbit64(v56)) + (v57 << 6);
            }

            unint64_t v53 = *(void *)(v8 + 72) * v52;
            (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, *(void *)(v25 + 48) + v53, v7);
            unint64_t v54 = 32 * v52;
            outlined init with copy of Any(*(void *)(v25 + 56) + v54, (uint64_t)v66);
            (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(void *)(v26 + 48) + v53, v10, v7);
            outlined init with take of Any(v66, (_OWORD *)(*(void *)(v26 + 56) + v54));
          }
        }

      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    specialized _NativeDictionary._delete(at:)(v21, v27);
    *unsigned int v6 = v27;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  unint64_t v11 = swift_isUniquelyReferenced_nonNull_native();
  __int16 v77 = *v4;
  unsigned int v12 = *v4;
  *unint64_t v4 = 0x8000000000000000LL;
  Swift::String v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  int v15 = *(void *)(v12 + 16);
  uint64_t v16 = (v13 & 1) == 0;
  __int16 v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    unsigned int v5 = v13;
    if (*(void *)(v12 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, v11);
      int v18 = v77;
      Swift::String v19 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
      if ((v5 & 1) != (v20 & 1)) {
        goto LABEL_82;
      }
      Swift::String v14 = v19;
      if ((v5 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_13:
      uint64_t v28 = (uint64_t *)(*(void *)(v18 + 56) + 16 * v14);
      *uint64_t v28 = a1;
      v28[1] = a2;
      swift_bridgeObjectRelease();
LABEL_47:
      *unsigned int v6 = v18;
      return swift_bridgeObjectRelease();
    }

    if ((v11 & 1) != 0)
    {
      int v18 = v12;
      if ((v13 & 1) != 0) {
        goto LABEL_13;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, (void *)v18);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
  unint64_t v29 = static _DictionaryStorage.copy(original:)();
  int v18 = v29;
  if (!*(void *)(v12 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }

  Swift::String v30 = (void *)(v29 + 64);
  int v31 = (unint64_t)((1LL << *(_BYTE *)(v18 + 32)) + 63) >> 6;
  unint64_t v32 = 0LL;
  *(void *)(v18 + 16) = *(void *)(v12 + 16);
  unint64_t v33 = 1LL << *(_BYTE *)(v12 + 32);
  unsigned int v34 = -1LL;
  if (v33 < 64) {
    unsigned int v34 = ~(-1LL << v33);
  }
  unint64_t v35 = v34 & *(void *)(v12 + 64);
  __int16 v73 = v12 + 64;
  __int16 v74 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      int v75 = (v35 - 1) & v35;
      __int16 v76 = v32;
      Swift::String v36 = __clz(__rbit64(v35)) | (v32 << 6);
      goto LABEL_23;
    }

    unint64_t v46 = v32 + 1;
    if (__OFADD__(v32, 1LL))
    {
      __break(1u);
      goto LABEL_79;
    }

    if (v46 >= v74) {
      goto LABEL_45;
    }
    uint64_t v47 = *(void *)(v73 + 8 * v46);
    Swift::String v48 = v32 + 1;
    if (!v47)
    {
      Swift::String v48 = v32 + 2;
      if (v32 + 2 >= v74) {
        goto LABEL_45;
      }
      uint64_t v47 = *(void *)(v73 + 8 * v48);
      if (!v47)
      {
        Swift::String v48 = v32 + 3;
        if (v32 + 3 >= v74) {
          goto LABEL_45;
        }
        uint64_t v47 = *(void *)(v73 + 8 * v48);
        if (!v47)
        {
          Swift::String v48 = v32 + 4;
          if (v32 + 4 >= v74) {
            goto LABEL_45;
          }
          uint64_t v47 = *(void *)(v73 + 8 * v48);
          if (!v47)
          {
            Swift::String v48 = v32 + 5;
            if (v32 + 5 >= v74) {
              goto LABEL_45;
            }
            uint64_t v47 = *(void *)(v73 + 8 * v48);
            if (!v47)
            {
              Swift::String v48 = v32 + 6;
              if (v32 + 6 >= v74) {
                goto LABEL_45;
              }
              uint64_t v47 = *(void *)(v73 + 8 * v48);
              if (!v47) {
                break;
              }
            }
          }
        }
      }
    }

          specialized _NativeDictionary._insert(at:key:value:)( v34,  0x76697463656A6461LL,  0xEA00000000006C61LL,  0x7461636964657270LL,  0xEB00000000657669LL,  (void *)v40);
          goto LABEL_78;
        }

    __int16 v74 = MEMORY[0x18961AFF0];
  }

                  unint64_t v104 = (v97 - 1) & v97;
                  uint64_t v111 = v98;
                  unint64_t v90 = __clz(__rbit64(v97)) + (v98 << 6);
                }

                Swift::String v91 = 16 * v90;
                unint64_t v92 = (uint64_t *)(*(void *)(v114 + 48) + 16 * v90);
                uint64_t v93 = v92[1];
                uint64_t v103 = *v92;
                int v94 = 32 * v90;
                outlined init with copy of Any(*(void *)(v114 + 56) + 32 * v90, (uint64_t)v119);
                uint64_t v95 = (void *)(*(void *)(v74 + 48) + v91);
                *uint64_t v95 = v103;
                v95[1] = v93;
                outlined init with take of Any(v119, (_OWORD *)(*(void *)(v74 + 56) + v94));
                swift_bridgeObjectRetain();
                int v89 = v104;
                Swift::OpaquePointer v10 = 0LL;
                unint64_t v86 = v111;
              }
            }

    __break(1u);
LABEL_78:
    i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  i[2] + 1LL,  1,  i);
LABEL_35:
    int v39 = i[2];
    __int16 v38 = i[3];
    if (v39 >= v38 >> 1) {
      i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v38 > 1),  v39 + 1,  1,  i);
    }
    i[2] = v39 + 1;
    Swift::String v40 = &i[2 * v39];
    v40[4] = v37;
    v40[5] = v12;
  }

  __int16 v78 = v5;
  __int16 v79 = v4;
  lazy protocol witness table accessor for type String and conformance String();
  int v37 = &v78;
  Swift::String v48 = StringProtocol._toUTF16Offsets(_:)();
  unsigned int v12 = v49 - v48;
  if (__OFSUB__(v49, v48))
  {
    __break(1u);
    goto LABEL_77;
  }

  unint64_t v50 = v48;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  i[2] + 1LL,  1,  i);
  }
  int v52 = i[2];
  Swift::String v51 = i[3];
  if (v52 >= v51 >> 1) {
    i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v51 > 1),  v52 + 1,  1,  i);
  }
  i[2] = v52 + 1;
  unint64_t v53 = &i[2 * v52];
  v53[4] = v50;
  v53[5] = v12;
  unsigned int v5 = v77;
  if ((*(_BYTE *)(a1 + 192) & 1) == 0) {
    goto LABEL_53;
  }
LABEL_44:
  if ((*(_BYTE *)(a1 + 216) & 1) != 0)
  {
LABEL_45:
    if ((v41 & 1) != 0) {
      goto LABEL_46;
    }
LABEL_60:
    unsigned int v44 = String.subscript.getter();
  }

  else
  {
    while (1)
    {
      Swift::String v62 = v5;
      int v59 = *(void *)(a1 + 200);
      Swift::String v60 = *(void *)(a1 + 208);
      __int16 v78 = v62;
      __int16 v79 = v4;
      lazy protocol witness table accessor for type String and conformance String();
      int v57 = &v78;
      Swift::String v63 = StringProtocol._toUTF16Offsets(_:)();
      unsigned int v12 = v64 - v63;
      if (!__OFSUB__(v64, v63)) {
        break;
      }
      __break(1u);
LABEL_80:
      i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v58 > 1),  v60,  1,  i);
LABEL_55:
      i[2] = v60;
      int v61 = &i[2 * v59];
      v61[4] = v57;
      v61[5] = v12;
      unsigned int v5 = v77;
      if ((*(_BYTE *)(a1 + 216) & 1) != 0) {
        goto LABEL_45;
      }
    }

    unint64_t v65 = v63;
    int v67 = i[2];
    unint64_t v66 = i[3];
    if (v67 >= v66 >> 1) {
      i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v66 > 1),  v67 + 1,  1,  i);
    }
    i[2] = v67 + 1;
    int v68 = &i[2 * v67];
    v68[4] = v65;
    v68[5] = v12;
    if ((v41 & 1) == 0) {
      goto LABEL_60;
    }
LABEL_46:
    unsigned int v44 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
  }

  __int16 v69 = v44;
  __int16 v70 = v45;
  __int16 v71 = v46;
  __int16 v72 = v47;
  if ((v44 ^ v45) >= 0x4000)
  {
    swift_bridgeObjectRetain();
    Substring.UTF8View.index(before:)();
    Substring.UTF8View.subscript.getter();
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }

  if ((*(_BYTE *)(a1 + 217) & 1) != 0) {
LABEL_65:
  }
    specialized Sequence<>.starts<A>(with:)( (uint64_t)&outlined read-only object #0 of static URL._cfURL(from:baseURL:),  v69,  v70,  v71,  v72);
  else {
    specialized Sequence<>.starts<A>(with:)( (uint64_t)&outlined read-only object #0 of static URL._cfURL(from:baseURL:),  v44,  v45,  v46,  v47);
  }
  __int16 v73 = i[2];
  String._bridgeToObjectiveCImpl()();
  if (v73 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRetain();
    __int16 v74 = _CFURLCreateWithRangesAndFlags();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return v74;
  }

  return result;
}

  unsigned __int16 v130 = v146;
  unint64_t v131 = *v146;
  if (*v146 >= 1)
  {
    unsigned __int16 v132 = v146[1];
    unsigned __int16 v133 = v146[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Rope.append(_:)(v131, v132, v133);
    unsigned __int16 v130 = v146;
  }

  *unsigned __int16 v130 = v124;
  v130[1] = v106;
  v130[2] = v107;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unsigned __int16 v134 = v141;
  if ((*v141 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v135 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v106);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *unsigned __int16 v134 = v135 & 1;
  }

Swift::String __swiftcall NumberFormatStyleConfiguration.Precision.skeletonWithRoundingIncrement(stem:)( Swift::String stem)
{
  object = stem._object;
  uint64_t countAndFlagsBits = stem._countAndFlagsBits;
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  uint64_t v9 = *(void *)(v1 + 40);
  uint64_t v10 = *(void *)(v1 + 48);
  int v11 = *(char *)(v1 + 56);
  uint64_t v12 = String.count.getter();
  if (v12 >= 1)
  {
    uint64_t v27 = countAndFlagsBits;
    uint64_t v28 = object;
    if ((v11 & 0x80000000) == 0)
    {
      swift_bridgeObjectRetain();
LABEL_24:
      uint64_t v13 = v27;
      Swift::String v14 = v28;
      goto LABEL_28;
    }

    if ((v9 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = v7 & 1;
      if ((v5 & 1) == 0) {
        goto LABEL_23;
      }
LABEL_21:
      if (v22) {
        goto LABEL_24;
      }
      uint64_t v4 = 0LL;
LABEL_23:
      v24._uint64_t countAndFlagsBits = NumberFormatStyleConfiguration.Precision.integerStem(min:max:)(v4, v6, v22);
      v29._uint64_t countAndFlagsBits = 32LL;
      v29._object = (void *)0xE100000000000000LL;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }

    v29._uint64_t countAndFlagsBits = 46LL;
    v29._object = (void *)0xE100000000000000LL;
    MEMORY[0x1895F8858](v12);
    v26[2] = &v29;
    swift_bridgeObjectRetain();
    specialized BidirectionalCollection.lastIndex(where:)( partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:),  (uint64_t)v26,  countAndFlagsBits,  (unint64_t)object);
    if ((v16 & 1) != 0)
    {
      v23._uint64_t countAndFlagsBits = MEMORY[0x186E1B904](48LL, 0xE100000000000000LL, v8);
      v29._uint64_t countAndFlagsBits = 46LL;
      v29._object = (void *)0xE100000000000000LL;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      uint64_t v19 = v29._countAndFlagsBits;
      int v20 = v29._object;
      goto LABEL_19;
    }

    swift_bridgeObjectRetain();
    unint64_t v17 = String.index(after:)();
    specialized Collection.suffix(from:)(v17, countAndFlagsBits, (unint64_t)object);
    swift_bridgeObjectRelease();
    if (Substring.distance(from:to:)() >= v8) {
      goto LABEL_20;
    }
    uint64_t v18 = Substring.distance(from:to:)();
    uint64_t v13 = swift_bridgeObjectRelease();
    if (!__OFSUB__(v8, v18))
    {
      uint64_t v19 = MEMORY[0x186E1B904](48LL, 0xE100000000000000LL, v8 - v18);
LABEL_19:
      String.append(_:)(*(Swift::String *)&v19);
LABEL_20:
      swift_bridgeObjectRelease();
      uint64_t v22 = v7 & 1;
      if ((v5 & 1) == 0) {
        goto LABEL_23;
      }
      goto LABEL_21;
    }

    goto LABEL_27;
  }

  if (v11 < 0)
  {
    uint64_t v13 = NumberFormatStyleConfiguration.Precision.integerAndFractionalLengthSkeleton(minInt:maxInt:minFrac:maxFrac:)( v4,  v5 & 1,  v6,  v7 & 1,  v8,  v9 & 1,  v10,  v11 & 1);
  }

  else
  {
    uint64_t v13 = MEMORY[0x186E1B904](64LL, 0xE100000000000000LL, v4);
    v29._uint64_t countAndFlagsBits = v13;
    v29._object = v14;
    if ((v6 & 1) != 0)
    {
      v21._uint64_t countAndFlagsBits = 43LL;
      v21._object = (void *)0xE100000000000000LL;
      String.append(_:)(v21);
    }

    else
    {
      if (__OFSUB__(v5, v4))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }

      v15._uint64_t countAndFlagsBits = MEMORY[0x186E1B904](35LL, 0xE100000000000000LL, v5 - v4);
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
    }

    uint64_t v13 = v29._countAndFlagsBits;
    Swift::String v14 = v29._object;
  }

uint64_t NumberFormatStyleConfiguration.Precision.integerAndFractionalLengthSkeleton(minInt:maxInt:minFrac:maxFrac:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  int v11 = a4 & 1;
  if ((a6 & 1) != 0)
  {
    if ((a8 & 1) != 0) {
      goto LABEL_9;
    }
    if (a7)
    {
      a5 = 0LL;
LABEL_8:
      v12._uint64_t countAndFlagsBits = NumberFormatStyleConfiguration.Precision.fractionalStem(min:max:)(a5, a7, a8 & 1);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
LABEL_9:
      if ((a2 & 1) == 0) {
        goto LABEL_13;
      }
LABEL_12:
      if (v11) {
        return 0LL;
      }
      goto LABEL_13;
    }
  }

  else if ((a8 & 1) != 0 || a7)
  {
    goto LABEL_8;
  }

  v13._object = (void *)0x80000001839CA580LL;
  v13._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v13);
  if ((a2 & 1) != 0) {
    goto LABEL_12;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  uint64_t v14 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v14 >= 1)
  {
    v15._uint64_t countAndFlagsBits = 32LL;
    v15._object = (void *)0xE100000000000000LL;
    String.append(_:)(v15);
  }

  if ((a2 & 1) != 0) {
    uint64_t v16 = 0LL;
  }
  else {
    uint64_t v16 = a1;
  }
  v17._uint64_t countAndFlagsBits = NumberFormatStyleConfiguration.Precision.integerStem(min:max:)(v16, a3, v11);
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return 0LL;
}

uint64_t NumberFormatStyleConfiguration.Precision.fractionalStem(min:max:)(uint64_t a1, uint64_t a2, char a3)
{
  v6._uint64_t countAndFlagsBits = MEMORY[0x186E1B904](48LL, 0xE100000000000000LL, a1);
  String.append(_:)(v6);
  uint64_t result = swift_bridgeObjectRelease();
  if ((a3 & 1) != 0)
  {
    v8._uint64_t countAndFlagsBits = 43LL;
    v8._object = (void *)0xE100000000000000LL;
    String.append(_:)(v8);
  }

  else
  {
    if (a2 < a1)
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }

    if (__OFSUB__(a2, a1))
    {
      __break(1u);
      return result;
    }

    v9._uint64_t countAndFlagsBits = MEMORY[0x186E1B904](35LL, 0xE100000000000000LL, a2 - a1);
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
  }

  return 46LL;
}

uint64_t NumberFormatStyleConfiguration.Precision.integerStem(min:max:)(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3 = result;
  strcpy((char *)v8, "integer-width/");
  HIBYTE(v8[1]) = -18;
  if ((a3 & 1) != 0)
  {
    v5._uint64_t countAndFlagsBits = 43LL;
    v5._object = (void *)0xE100000000000000LL;
    String.append(_:)(v5);
LABEL_5:
    v6._uint64_t countAndFlagsBits = MEMORY[0x186E1B904](48LL, 0xE100000000000000LL, v3);
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return v8[0];
  }

  if (a2 | result)
  {
    if (a2 < result) {
      return 0LL;
    }
    if (__OFSUB__(a2, result))
    {
      __break(1u);
      return result;
    }

    v7._uint64_t countAndFlagsBits = MEMORY[0x186E1B904](35LL, 0xE100000000000000LL, a2 - result);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }

  v4._uint64_t countAndFlagsBits = 42LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return v8[0];
}

void CurrencyFormatStyleConfiguration.Collection.skeleton.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v1);
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = MEMORY[0x1895F8858](v2);
  v6[12] = (char *)v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v3);
  Swift::String v5 = (char *)&loc_182FBBE0C
     + *((int *)qword_182FBCDA0
       + *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL) + 44)));
  __asm { BR              X11 }

void sub_182FBBE1C()
{
  *(void *)(v8 - 248) = v0;
  *(void *)(v8 - 168) = 0xD000000000000010LL;
  *(void *)(v8 - 160) = 0x80000001839CA640LL;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 32LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v8 - 160);
  *(void *)(v8 - 104) = *(void *)(v8 - 168);
  *(void *)(v8 - 96) = v10;
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
LABEL_39:
    uint64_t v61 = *(void *)(v2 + 16);
    uint64_t v60 = *(void *)(v2 + 24);
    uint64_t v63 = *(void *)(v2 + 32);
    unint64_t v62 = *(void *)(v2 + 40);
    uint64_t v64 = *(void *)(v2 + 48);
    unint64_t v65 = *(void *)(v2 + 56);
    uint64_t v66 = *(void *)(v2 + 64);
    unsigned int v67 = *(unsigned __int8 *)(v2 + 72);
    uint64_t v68 = v2 + *(int *)(v5 + 40);
    int v69 = *(unsigned __int8 *)(v68 + 8);
    if (v62 >> 1 == 0xFFFFFFFF && v65 <= 1 && v67 < 2)
    {
      uint64_t v70 = *(void *)(v8 - 248);
      if (v69 == 255) {
        goto LABEL_56;
      }
      *(void *)(v8 - 168) = NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(*(void *)v68, v69 & 1);
      *(void *)(v8 - 160) = v71;
      swift_bridgeObjectRetain();
    }

    else
    {
      if (v69 != 255)
      {
        int64_t v72 = *(void *)v68;
        *(void *)(v8 - 168) = v61;
        *(void *)(v8 - 160) = v60;
        *(void *)(v8 - 152) = v63;
        *(void *)(v8 - 144) = v62;
        *(void *)(v8 - 136) = v64;
        *(void *)(v8 - 128) = v65;
        *(void *)(v8 - 120) = v66;
        *(_BYTE *)(v8 - 112) = v67;
        v73._uint64_t countAndFlagsBits = NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(v72, v69 & 1);
        Swift::String v74 = NumberFormatStyleConfiguration.Precision.skeletonWithRoundingIncrement(stem:)(v73);
        swift_bridgeObjectRelease();
        String.append(_:)(v74);
        uint64_t v70 = *(void *)(v8 - 248);
LABEL_55:
        swift_bridgeObjectRelease();
LABEL_56:
        int v82 = *(unsigned __int8 *)(v2 + 73);
        if (v82 != 2)
        {
          if ((v82 & 1) != 0) {
            uint64_t v83 = 0x666F2D70756F7267LL;
          }
          else {
            uint64_t v83 = 0LL;
          }
          if ((v82 & 1) != 0) {
            unint64_t v84 = 0xE900000000000066LL;
          }
          else {
            unint64_t v84 = 0xE000000000000000LL;
          }
          unint64_t v85 = v84;
          String.append(_:)(*(Swift::String *)&v83);
          swift_bridgeObjectRelease();
        }

        int v86 = *(_DWORD *)(v2 + 74);
        if (v86 != 2)
        {
          uint64_t v87 = 0x776C612D6E676973LL;
          if ((v86 & 0x10000) != 0) {
            uint64_t v87 = v7;
          }
          unint64_t v88 = 0x80000001839CA560LL;
          if ((v86 & 0x10000) == 0) {
            unint64_t v88 = 0xEB00000000737961LL;
          }
          uint64_t v89 = 0x76656E2D6E676973LL;
          if ((v86 & 0x100) == 0) {
            uint64_t v89 = 0x7475612D6E676973LL;
          }
          unint64_t v90 = 0xE90000000000006FLL;
          if ((v86 & 0x100) != 0) {
            unint64_t v90 = 0xEA00000000007265LL;
          }
          if ((v86 & 1) != 0)
          {
            uint64_t v87 = v89;
            unint64_t v88 = v90;
          }

          unint64_t v91 = 0xEF676E69746E756FLL;
          uint64_t v92 = 0x6363612D6E676973LL;
          uint64_t v93 = v7 + 6;
          if ((v86 & 0x10000) != 0) {
            uint64_t v93 = v7 + 11;
          }
          unint64_t v94 = 0x80000001839CA600LL;
          if ((v86 & 0x10000) != 0) {
            unint64_t v94 = 0x80000001839CA5E0LL;
          }
          if ((v86 & 1) == 0)
          {
            uint64_t v92 = v93;
            unint64_t v91 = v94;
          }

          BOOL v95 = (v86 & 0x1000000) == 0;
          if ((v86 & 0x1000000) != 0) {
            uint64_t v96 = v92;
          }
          else {
            uint64_t v96 = v87;
          }
          if (v95) {
            unint64_t v97 = v88;
          }
          else {
            unint64_t v97 = v91;
          }
          *(void *)(v8 - 168) = v96;
          *(void *)(v8 - 160) = v97;
          swift_bridgeObjectRetain();
          v98._uint64_t countAndFlagsBits = 32LL;
          v98._object = (void *)0xE100000000000000LL;
          String.append(_:)(v98);
          swift_bridgeObjectRelease();
          String.append(_:)(*(Swift::String *)(v8 - 168));
          swift_bridgeObjectRelease();
        }

        int v99 = *(unsigned __int8 *)(v2 + 78);
        if (v99 != 2)
        {
          if ((v99 & 1) != 0) {
            unint64_t v100 = 0xEE00737961776C61LL;
          }
          else {
            unint64_t v100 = 0xEC0000006F747561LL;
          }
          *(void *)(v8 - 168) = 0x2D6C616D69636564LL;
          *(void *)(v8 - 160) = v100;
          swift_bridgeObjectRetain();
          v101._uint64_t countAndFlagsBits = 32LL;
          v101._object = (void *)0xE100000000000000LL;
          String.append(_:)(v101);
          swift_bridgeObjectRelease();
          String.append(_:)(*(Swift::String *)(v8 - 168));
          swift_bridgeObjectRelease();
        }

        outlined init with copy of FloatingPointRoundingRule?(v2 + *(int *)(v5 + 36), v70);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v70, 1LL, v3) == 1)
        {
          outlined destroy of Any?(v70, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
          goto LABEL_109;
        }

        (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v6, v70, v3);
        uint64_t v102 = *(void *)(v8 - 256);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v102, v6, v3);
        int v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v102, v3);
        if (v103 == *MEMORY[0x189619F78])
        {
          v7 += 5LL;
          unint64_t v104 = "rounding-mode-half-up";
        }

        else if (v103 == *MEMORY[0x189619F70])
        {
          v7 += 7LL;
          unint64_t v104 = "rounding-mode-half-even";
        }

        else if (v103 == *MEMORY[0x189619F88])
        {
          v7 += 5LL;
          unint64_t v104 = "rounding-mode-ceiling";
        }

        else if (v103 == *MEMORY[0x189619F90])
        {
          v7 += 3LL;
          unint64_t v104 = "rounding-mode-floor";
        }

        else if (v103 == *MEMORY[0x189619F60])
        {
          v7 += 2LL;
          unint64_t v104 = "rounding-mode-down";
        }

        else
        {
          if (v103 != *MEMORY[0x189619F68])
          {
            (*(void (**)(void, uint64_t))(v4 + 8))(*(void *)(v8 - 256), v3);
            unint64_t v7 = 0LL;
            unint64_t v105 = 0xE000000000000000LL;
            goto LABEL_108;
          }

          unint64_t v104 = "rounding-mode-up";
        }

        unint64_t v105 = (unint64_t)(v104 - 32) | 0x8000000000000000LL;
LABEL_108:
        *(void *)(v8 - 168) = v7;
        *(void *)(v8 - 160) = v105;
        swift_bridgeObjectRetain();
        v106._uint64_t countAndFlagsBits = 32LL;
        v106._object = (void *)0xE100000000000000LL;
        String.append(_:)(v106);
        swift_bridgeObjectRelease();
        String.append(_:)(*(Swift::String *)(v8 - 168));
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v3);
LABEL_109:
        __asm { BR              X11 }
      }

      if ((v67 & 0x80) != 0)
      {
        uint64_t v77 = NumberFormatStyleConfiguration.Precision.integerAndFractionalLengthSkeleton(minInt:maxInt:minFrac:maxFrac:)( *(void *)(v2 + 16),  v60 & 1,  *(void *)(v2 + 32),  v62 & 1,  v64,  *(_BYTE *)(v2 + 56) & 1,  v66,  v67 & 1);
        uint64_t v79 = v78;
        uint64_t v70 = *(void *)(v8 - 248);
      }

      else
      {
        *(void *)(v8 - 168) = MEMORY[0x186E1B904](64LL, 0xE100000000000000LL, *(void *)(v2 + 16));
        *(void *)(v8 - 160) = v75;
        if ((v63 & 1) != 0)
        {
          v80._uint64_t countAndFlagsBits = 43LL;
          v80._object = (void *)0xE100000000000000LL;
          String.append(_:)(v80);
        }

        else
        {
          if (__OFSUB__(v60, v61))
          {
            __break(1u);
LABEL_112:
            swift_bridgeObjectRelease();
            swift_unexpectedError();
            __break(1u);
LABEL_113:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x182FBCDA0LL);
          }

          v76._uint64_t countAndFlagsBits = MEMORY[0x186E1B904](35LL, 0xE100000000000000LL, v60 - v61);
          String.append(_:)(v76);
          swift_bridgeObjectRelease();
        }

        uint64_t v70 = *(void *)(v8 - 248);
        uint64_t v77 = *(void *)(v8 - 168);
        uint64_t v79 = *(void *)(v8 - 160);
      }

      *(void *)(v8 - 168) = v77;
      *(void *)(v8 - 160) = v79;
      swift_bridgeObjectRetain();
    }

    v81._uint64_t countAndFlagsBits = 32LL;
    v81._object = (void *)0xE100000000000000LL;
    String.append(_:)(v81);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)(v8 - 168));
    goto LABEL_55;
  }

  *(void *)(v8 - 272) = v3;
  *(void *)(v8 - 264) = v1;
  *(void *)(v8 - 296) = v6;
  *(void *)(v8 - 288) = v5;
  *(void *)(v8 - 280) = v4;
  double v11 = *(double *)v2;
  *(void *)(v8 - 184) = 0x2F656C616373LL;
  *(void *)(v8 - 176) = 0xE600000000000000LL;
  unint64_t v12 = specialized NSDecimal.init(_:)(v11);
  LOWORD(v14) = v13;
  LOWORD(v16) = v15;
  *(void *)(v8 - 168) = v12;
  unint64_t v17 = HIDWORD(v12);
  unint64_t v18 = HIWORD(v12);
  unint64_t v19 = v13 >> 16;
  *(void *)(v8 - 160) = v13;
  unint64_t v20 = HIDWORD(v13);
  uint64_t v21 = HIWORD(v13);
  LODWORD(v22) = HIWORD(v15);
  *(_DWORD *)(v8 - 152) = v15;
  if (_So9NSDecimala__length_getter((_DWORD *)(v8 - 168))
    || (*(void *)(v8 - 168) = v12,
        *(_WORD *)(v8 - 160) = v14,
        *(_WORD *)(v8 - 158) = v19,
        *(_WORD *)(v8 - 156) = v20,
        *(_WORD *)(v8 - 154) = v21,
        *(_WORD *)(v8 - 152) = v16,
        *(_WORD *)(v8 - 150) = v22,
        !_So9NSDecimala__isNegative_getter((_DWORD *)(v8 - 168))))
  {
    *(void *)(v8 - 168) = v12;
    *(_WORD *)(v8 - 160) = v14;
    *(_WORD *)(v8 - 158) = v19;
    *(_WORD *)(v8 - 156) = v20;
    *(_WORD *)(v8 - 154) = v21;
    *(_WORD *)(v8 - 152) = v16;
    *(_WORD *)(v8 - 150) = v22;
    if (_So9NSDecimala__length_getter((_DWORD *)(v8 - 168)))
    {
      *(void *)(v8 - 344) = v2;
      *(void *)(v8 - 200) = 0LL;
      *(void *)(v8 - 192) = 0xE000000000000000LL;
      *(void *)(v8 - 168) = v12;
      *(_WORD *)(v8 - 160) = v14;
      *(_WORD *)(v8 - 158) = v19;
      *(_WORD *)(v8 - 156) = v20;
      *(_WORD *)(v8 - 154) = v21;
      *(_WORD *)(v8 - 152) = v16;
      *(_WORD *)(v8 - 150) = v22;
      *(void *)(v8 - 224) = v12;
      *(_WORD *)(v8 - 216) = v14;
      *(_WORD *)(v8 - 214) = v19;
      *(_WORD *)(v8 - 212) = v20;
      *(_WORD *)(v8 - 210) = v21;
      *(_WORD *)(v8 - 208) = v16;
      *(_WORD *)(v8 - 206) = v22;
      if ((int)_So9NSDecimala__exponent_getter((char *)(v8 - 224)) >= 1)
      {
        do
        {
          v23._uint64_t countAndFlagsBits = 48LL;
          v23._object = (void *)0xE100000000000000LL;
          String.append(_:)(v23);
          *(_DWORD *)(v8 - 224) = v12;
          *(_WORD *)(v8 - 220) = v17;
          *(_WORD *)(v8 - 218) = v18;
          *(_WORD *)(v8 - 216) = v14;
          *(_WORD *)(v8 - 214) = v19;
          *(_WORD *)(v8 - 212) = v20;
          *(_WORD *)(v8 - 210) = v21;
          *(_WORD *)(v8 - 208) = v16;
          *(_WORD *)(v8 - 206) = v22;
          int v24 = _So9NSDecimala__exponent_getter((char *)(v8 - 224));
          _So9NSDecimala__exponent_setter((v24 - 1), (_BYTE *)(v8 - 168));
          unint64_t v12 = *(unsigned int *)(v8 - 168);
          unint64_t v17 = *(unsigned __int16 *)(v8 - 164);
          LOWORD(v18) = *(_WORD *)(v8 - 162);
          LOWORD(v14) = *(_WORD *)(v8 - 160);
          LOWORD(v19) = *(_WORD *)(v8 - 158);
          LOWORD(v20) = *(_WORD *)(v8 - 156);
          LOWORD(v21) = *(_WORD *)(v8 - 154);
          LOWORD(v16) = *(_WORD *)(v8 - 152);
          LOWORD(v22) = *(_WORD *)(v8 - 150);
          *(_DWORD *)(v8 - 224) = v12;
          *(_WORD *)(v8 - 220) = v17;
          *(_WORD *)(v8 - 218) = v18;
          *(_WORD *)(v8 - 216) = v14;
          *(_WORD *)(v8 - 214) = v19;
          *(_WORD *)(v8 - 212) = v20;
          *(_WORD *)(v8 - 210) = v21;
          *(_WORD *)(v8 - 208) = v16;
          *(_WORD *)(v8 - 206) = v22;
        }

        while ((int)_So9NSDecimala__exponent_getter((char *)(v8 - 224)) > 0);
      }

      *(_DWORD *)(v8 - 224) = v12;
      *(_WORD *)(v8 - 220) = v17;
      *(_WORD *)(v8 - 218) = v18;
      *(_WORD *)(v8 - 216) = v14;
      *(_WORD *)(v8 - 214) = v19;
      *(_WORD *)(v8 - 212) = v20;
      *(_WORD *)(v8 - 210) = v21;
      *(_WORD *)(v8 - 208) = v16;
      *(_WORD *)(v8 - 206) = v22;
      if (!_So9NSDecimala__exponent_getter((char *)(v8 - 224)))
      {
        _So9NSDecimala__exponent_setter(1LL, (_BYTE *)(v8 - 168));
        unint64_t v12 = *(unsigned int *)(v8 - 168);
        unint64_t v17 = *(unsigned __int16 *)(v8 - 164);
        LOWORD(v18) = *(_WORD *)(v8 - 162);
        LOWORD(v14) = *(_WORD *)(v8 - 160);
        LOWORD(v19) = *(_WORD *)(v8 - 158);
        LOWORD(v20) = *(_WORD *)(v8 - 156);
        LOWORD(v21) = *(_WORD *)(v8 - 154);
        LOWORD(v16) = *(_WORD *)(v8 - 152);
        LOWORD(v22) = *(_WORD *)(v8 - 150);
      }

      *(_DWORD *)(v8 - 224) = v12;
      *(void *)(v8 - 240) = v17;
      *(_WORD *)(v8 - 220) = v17;
      *(_WORD *)(v8 - 218) = v18;
      *(_WORD *)(v8 - 216) = v14;
      *(_WORD *)(v8 - 214) = v19;
      *(_WORD *)(v8 - 212) = v20;
      *(_WORD *)(v8 - 210) = v21;
      *(_WORD *)(v8 - 208) = v16;
      *(_WORD *)(v8 - 206) = v22;
      if (_So9NSDecimala__length_getter((_DWORD *)(v8 - 224)))
      {
        uint64_t v25 = *(void *)(v8 - 240);
        while (1)
        {
          *(void *)(v8 - 240) = v25;
          *(_DWORD *)(v8 - 224) = v12;
          *(_WORD *)(v8 - 220) = v25;
          *(_WORD *)(v8 - 218) = v18;
          *(_WORD *)(v8 - 216) = v14;
          *(_WORD *)(v8 - 214) = v19;
          *(_WORD *)(v8 - 212) = v20;
          *(_WORD *)(v8 - 210) = v21;
          *(_WORD *)(v8 - 208) = v16;
          *(_WORD *)(v8 - 206) = v22;
          if (!_So9NSDecimala__exponent_getter((char *)(v8 - 224)))
          {
            *(void *)(v8 - 304) = v12;
            v26._uint64_t countAndFlagsBits = 46LL;
            v26._object = (void *)0xE100000000000000LL;
            String.append(_:)(v26);
            unint64_t v12 = *(void *)(v8 - 304);
          }

          *(_DWORD *)(v8 - 224) = v12;
          *(_WORD *)(v8 - 220) = *(void *)(v8 - 240);
          *(_WORD *)(v8 - 218) = v18;
          *(_WORD *)(v8 - 216) = v14;
          *(_WORD *)(v8 - 214) = v19;
          *(_WORD *)(v8 - 212) = v20;
          *(_WORD *)(v8 - 210) = v21;
          *(_WORD *)(v8 - 208) = v16;
          *(_WORD *)(v8 - 206) = v22;
          int v27 = _So9NSDecimala__exponent_getter((char *)(v8 - 224));
          _So9NSDecimala__exponent_setter((v27 + 1), (_BYTE *)(v8 - 168));
          uint64_t v28 = *(unsigned int *)(v8 - 168);
          uint64_t v29 = *(unsigned __int16 *)(v8 - 164);
          uint64_t v22 = *(unsigned __int16 *)(v8 - 162);
          uint64_t v30 = *(unsigned __int16 *)(v8 - 160);
          uint64_t v31 = *(unsigned __int16 *)(v8 - 158);
          uint64_t v32 = *(unsigned __int16 *)(v8 - 156);
          unint64_t v20 = *(unsigned __int16 *)(v8 - 154);
          int v33 = *(unsigned __int16 *)(v8 - 152);
          *(void *)(v8 - 304) = v29;
          *(void *)(v8 - 312) = v30;
          *(void *)(v8 - 320) = v31;
          *(void *)(v8 - 328) = v32;
          LODWORD(v19) = *(unsigned __int16 *)(v8 - 150);
          *(_DWORD *)(v8 - 332) = v33;
          NSDecimal.asVariableLengthInteger()( v28 | (v29 << 32) | (v22 << 48),  v30 | (v31 << 16) | (v32 << 32) | (v20 << 48),  v33 | ((_DWORD)v19 << 16));
          unint64_t v12 = v34;
          unint64_t v18 = *(void *)(v34 + 16);
          *(void *)(v8 - 240) = v28;
          if (v18) {
            break;
          }
          unsigned int v14 = 0;
          uint64_t v16 = MEMORY[0x18961AFE8];
LABEL_18:
          uint64_t v38 = *(void *)(v16 + 16);
          if (v38 && !*(_WORD *)(v16 + 2 * v38 + 30))
          {
            do
            {
              *(void *)(v16 + 16) = v38 - 1;
              if (v38 == 1) {
                break;
              }
            }

            while (!*(unsigned __int16 *)(v16 + 28 + 2 * v38--));
          }

          swift_bridgeObjectRelease();
          *(_DWORD *)(v8 - 224) = *(void *)(v8 - 240);
          *(_WORD *)(v8 - 220) = *(void *)(v8 - 304);
          *(_WORD *)(v8 - 218) = v22;
          *(_WORD *)(v8 - 216) = *(void *)(v8 - 312);
          *(_WORD *)(v8 - 214) = *(void *)(v8 - 320);
          *(_WORD *)(v8 - 212) = *(void *)(v8 - 328);
          *(_WORD *)(v8 - 210) = v20;
          *(_WORD *)(v8 - 208) = *(_DWORD *)(v8 - 332);
          *(_WORD *)(v8 - 206) = v19;
          NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v16);
          if (v40) {
            goto LABEL_112;
          }
          *(void *)(v8 - 264) = 0LL;
          unint64_t v41 = *(void *)(v16 + 16);
          swift_bridgeObjectRelease();
          if (HIDWORD(v41)) {
            goto LABEL_113;
          }
          _So9NSDecimala__length_setter(v41, (_DWORD *)(v8 - 224));
          __int128 v42 = *(_OWORD *)(v8 - 220);
          *(_DWORD *)(v8 - 168) = *(_DWORD *)(v8 - 224);
          *(_OWORD *)(v8 - 164) = v42;
          *(void *)(v8 - 224) = v14 | 0x30;
          v43._uint64_t countAndFlagsBits = MEMORY[0x186E1B6AC](v8 - 224, 1LL);
          String.append(_:)(v43);
          swift_bridgeObjectRelease();
          unint64_t v12 = *(unsigned int *)(v8 - 168);
          uint64_t v44 = *(unsigned __int16 *)(v8 - 164);
          *(void *)(v8 - 240) = v44;
          LOWORD(v18) = *(_WORD *)(v8 - 162);
          LOWORD(v14) = *(_WORD *)(v8 - 160);
          LOWORD(v19) = *(_WORD *)(v8 - 158);
          LOWORD(v20) = *(_WORD *)(v8 - 156);
          LOWORD(v21) = *(_WORD *)(v8 - 154);
          LOWORD(v16) = *(_WORD *)(v8 - 152);
          LOWORD(v22) = *(_WORD *)(v8 - 150);
          *(_DWORD *)(v8 - 224) = v12;
          *(_WORD *)(v8 - 220) = v44;
          *(_WORD *)(v8 - 218) = v18;
          *(_WORD *)(v8 - 216) = v14;
          *(_WORD *)(v8 - 214) = v19;
          *(_WORD *)(v8 - 212) = v20;
          *(_WORD *)(v8 - 210) = v21;
          *(_WORD *)(v8 - 208) = v16;
          *(_WORD *)(v8 - 206) = v22;
          int v45 = _So9NSDecimala__length_getter((_DWORD *)(v8 - 224));
          uint64_t v25 = *(void *)(v8 - 240);
          if (!v45) {
            goto LABEL_31;
          }
        }

        uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        uint64_t v21 = v16 + 30;
        *(void *)(v16 + 16) = v18;
        bzero((void *)(v16 + 32), 2 * v18);
        unsigned int v35 = *(unsigned __int16 *)(2 * v18 + v12 + 30);
        unsigned int v36 = v35 / 0xA;
        do
        {
          *(_WORD *)(v21 + 2 * v18) = v36;
          unsigned int v14 = v35 % 0xA;
          if (v18 == 1) {
            goto LABEL_18;
          }
          unsigned int v35 = *(unsigned __int16 *)(v12 + 28 + 2 * v18) | (v14 << 16);
          unsigned int v36 = v35 / 0xA;
          unint64_t v37 = v18 - 2;
          --v18;
        }

        while (v37 < *(void *)(v16 + 16));
        __break(1u);
      }

      uint64_t v25 = *(void *)(v8 - 240);
LABEL_31:
      *(_DWORD *)(v8 - 224) = v12;
      *(_WORD *)(v8 - 220) = v25;
      *(_WORD *)(v8 - 218) = v18;
      *(_WORD *)(v8 - 216) = v14;
      *(_WORD *)(v8 - 214) = v19;
      *(_WORD *)(v8 - 212) = v20;
      *(_WORD *)(v8 - 210) = v21;
      *(_WORD *)(v8 - 208) = v16;
      *(_WORD *)(v8 - 206) = v22;
      __int16 v48 = v25;
      if ((int)_So9NSDecimala__exponent_getter((char *)(v8 - 224)) <= 0)
      {
        *(_DWORD *)(v8 - 224) = v12;
        *(_WORD *)(v8 - 220) = v48;
        *(_WORD *)(v8 - 218) = v18;
        *(_WORD *)(v8 - 216) = v14;
        *(_WORD *)(v8 - 214) = v19;
        *(_WORD *)(v8 - 212) = v20;
        *(_WORD *)(v8 - 210) = v21;
        *(_WORD *)(v8 - 208) = v16;
        *(_WORD *)(v8 - 206) = v22;
        for (int i = v12; _So9NSDecimala__exponent_getter((char *)(v8 - 224)); *(_WORD *)(v8 - 206) = v22)
        {
          v50._uint64_t countAndFlagsBits = 48LL;
          v50._object = (void *)0xE100000000000000LL;
          String.append(_:)(v50);
          *(_DWORD *)(v8 - 224) = i;
          *(_WORD *)(v8 - 220) = v48;
          *(_WORD *)(v8 - 218) = v18;
          *(_WORD *)(v8 - 216) = v14;
          *(_WORD *)(v8 - 214) = v19;
          *(_WORD *)(v8 - 212) = v20;
          *(_WORD *)(v8 - 210) = v21;
          *(_WORD *)(v8 - 208) = v16;
          *(_WORD *)(v8 - 206) = v22;
          int v51 = _So9NSDecimala__exponent_getter((char *)(v8 - 224));
          _So9NSDecimala__exponent_setter((v51 + 1), (_BYTE *)(v8 - 168));
          int i = *(_DWORD *)(v8 - 168);
          __int16 v48 = *(_WORD *)(v8 - 164);
          LOWORD(v18) = *(_WORD *)(v8 - 162);
          LOWORD(v14) = *(_WORD *)(v8 - 160);
          LOWORD(v19) = *(_WORD *)(v8 - 158);
          LOWORD(v20) = *(_WORD *)(v8 - 156);
          LOWORD(v21) = *(_WORD *)(v8 - 154);
          LOWORD(v16) = *(_WORD *)(v8 - 152);
          LOWORD(v22) = *(_WORD *)(v8 - 150);
          *(_DWORD *)(v8 - 224) = i;
          *(_WORD *)(v8 - 220) = v48;
          *(_WORD *)(v8 - 218) = v18;
          *(_WORD *)(v8 - 216) = v14;
          *(_WORD *)(v8 - 214) = v19;
          *(_WORD *)(v8 - 212) = v20;
          *(_WORD *)(v8 - 210) = v21;
          *(_WORD *)(v8 - 208) = v16;
        }

        v52._uint64_t countAndFlagsBits = 46LL;
        v52._object = (void *)0xE100000000000000LL;
        String.append(_:)(v52);
        v53._uint64_t countAndFlagsBits = 48LL;
        v53._object = (void *)0xE100000000000000LL;
        String.append(_:)(v53);
        LODWORD(v12) = i;
      }

      uint64_t v3 = *(void *)(v8 - 272);
      *(_DWORD *)(v8 - 224) = v12;
      *(_WORD *)(v8 - 220) = v48;
      *(_WORD *)(v8 - 218) = v18;
      *(_WORD *)(v8 - 216) = v14;
      *(_WORD *)(v8 - 214) = v19;
      *(_WORD *)(v8 - 212) = v20;
      *(_WORD *)(v8 - 210) = v21;
      *(_WORD *)(v8 - 208) = v16;
      *(_WORD *)(v8 - 206) = v22;
      if (_So9NSDecimala__isNegative_getter((_DWORD *)(v8 - 224)))
      {
        v54._uint64_t countAndFlagsBits = 45LL;
        v54._object = (void *)0xE100000000000000LL;
        String.append(_:)(v54);
      }

      uint64_t v55 = *(void *)(v8 - 192);
      *(void *)(v8 - 224) = *(void *)(v8 - 200);
      *(void *)(v8 - 216) = v55;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
      uint64_t v47 = String.init<A>(_:)();
      unint64_t v46 = v56;
      uint64_t v4 = *(void *)(v8 - 280);
      uint64_t v5 = *(void *)(v8 - 288);
      unint64_t v7 = 0xD000000000000010LL;
      uint64_t v6 = *(void *)(v8 - 296);
      uint64_t v2 = *(void *)(v8 - 344);
      goto LABEL_38;
    }

    unint64_t v46 = 0xE100000000000000LL;
    uint64_t v47 = 48LL;
  }

  else
  {
    unint64_t v46 = 0xE300000000000000LL;
    uint64_t v47 = 5136718LL;
  }

  uint64_t v4 = *(void *)(v8 - 280);
  uint64_t v5 = *(void *)(v8 - 288);
  unint64_t v7 = 0xD000000000000010LL;
  uint64_t v6 = *(void *)(v8 - 296);
  uint64_t v3 = *(void *)(v8 - 272);
LABEL_38:
  unint64_t v57 = v46;
  String.append(_:)(*(Swift::String *)&v47);
  swift_bridgeObjectRelease();
  uint64_t v58 = *(void *)(v8 - 176);
  *(void *)(v8 - 168) = *(void *)(v8 - 184);
  *(void *)(v8 - 160) = v58;
  swift_bridgeObjectRetain();
  v59._uint64_t countAndFlagsBits = 32LL;
  v59._object = (void *)0xE100000000000000LL;
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  String.append(_:)(*(Swift::String *)(v8 - 168));
  swift_bridgeObjectRelease();
  goto LABEL_39;
}

BOOL specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)( __int128 *a1, __int128 *a2)
{
  char v3 = v31;
  if ((v31 & 0x80) == 0)
  {
    __int128 v4 = v25;
    char v5 = v26;
    outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a2, &v18);
    if (v24 < 0 || (void)v4 != (void)v18) {
      return 0LL;
    }
    char v6 = v19;
    if ((v5 & 1) != 0) {
      return (v6 & 1) != 0;
    }
    if (*((void *)&v4 + 1) != *((void *)&v18 + 1)) {
      char v6 = 1;
    }
    return (v6 & 1) == 0;
  }

  v31 &= ~0x80u;
  uint64_t v7 = v25;
  char v8 = BYTE8(v25);
  uint64_t v9 = v26;
  char v10 = v27;
  uint64_t v11 = v28;
  char v12 = v29;
  uint64_t v13 = v30;
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a2, &v18);
  char v6 = v24;
  if ((v24 & 0x80) == 0) {
    return 0LL;
  }
  char v15 = BYTE8(v18);
  char v16 = v20;
  char v17 = v22;
  if ((v8 & 1) != 0)
  {
    if (!BYTE8(v18)) {
      return 0LL;
    }
  }

  else
  {
    if (v7 != (void)v18) {
      char v15 = 1;
    }
    if ((v15 & 1) != 0) {
      return 0LL;
    }
  }

  if ((v10 & 1) != 0)
  {
    if (!v20) {
      return 0LL;
    }
  }

  else
  {
    if (v9 != v19) {
      char v16 = 1;
    }
    if ((v16 & 1) != 0) {
      return 0LL;
    }
  }

  if ((v12 & 1) != 0)
  {
    if (!v22) {
      return 0LL;
    }
  }

  else
  {
    if (v11 != v21) {
      char v17 = 1;
    }
    if ((v17 & 1) != 0) {
      return 0LL;
    }
  }

  if ((v3 & 1) == 0) {
    return (v24 & 1) == 0 && v13 == v23;
  }
  return (v6 & 1) != 0;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.CodingKeys,  &unk_189C73680);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.CodingKeys,  &unk_189C73680);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.CodingKeys,  &unk_189C73680);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.CodingKeys,  &unk_189C73680);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.Option,  &type metadata for NumberFormatStyleConfiguration.Precision.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.Option,  &type metadata for NumberFormatStyleConfiguration.Precision.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.Option,  &type metadata for NumberFormatStyleConfiguration.Precision.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys,  &unk_189C735F0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys,  &unk_189C735F0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys,  &unk_189C735F0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys,  &unk_189C735F0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option,  &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option,  &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option,  &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option,  &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
  }

  return result;
}

BOOL specialized static CurrencyFormatStyleConfiguration.SignDisplayStrategy.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a1[2] ^ a2[2] | a2[3] ^ a1[3]) & 1) == 0;
}

uint64_t specialized static DescriptiveNumberFormatConfiguration.Collection.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  int v2 = a1[1];
  int v3 = a2[1];
  if (v2 == 5)
  {
    if (v3 != 5) {
      return 0LL;
    }
  }

  else if (v3 == 5 || v2 != v3)
  {
    return 0LL;
  }

  return 1LL;
}

BOOL specialized static NumberFormatStyleConfiguration.SignDisplayStrategy.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a2[2] ^ a1[2]) & 1) == 0;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys,  &unk_189C734D0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys,  &unk_189C734D0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys,  &unk_189C734D0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys,  &unk_189C734D0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.Option,  &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.Option,  &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.Option,  &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.Option,  &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.CodingKeys,  &unk_189C733B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.CodingKeys,  &unk_189C733B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.CodingKeys,  &unk_189C733B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.CodingKeys,  &unk_189C733B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.Option,  &type metadata for NumberFormatStyleConfiguration.Notation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.Option,  &type metadata for NumberFormatStyleConfiguration.Notation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.Option,  &type metadata for NumberFormatStyleConfiguration.Notation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.Option,  &type metadata for NumberFormatStyleConfiguration.Notation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys,  &unk_189C73290);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys,  &unk_189C73290);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys,  &unk_189C73290);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys,  &unk_189C73290);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option,  &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option,  &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option,  &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option,  &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.CodingKeys,  &unk_189C73170);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.CodingKeys,  &unk_189C73170);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.CodingKeys,  &unk_189C73170);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.CodingKeys,  &unk_189C73170);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.Option,  &type metadata for CurrencyFormatStyleConfiguration.Presentation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.Option,  &type metadata for CurrencyFormatStyleConfiguration.Presentation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.Option,  &type metadata for CurrencyFormatStyleConfiguration.Presentation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.Option,  &type metadata for CurrencyFormatStyleConfiguration.Presentation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.CodingKeys,  &unk_189C73050);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.CodingKeys,  &unk_189C73050);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.CodingKeys,  &unk_189C73050);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.CodingKeys,  &unk_189C73050);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.Option,  &type metadata for DescriptiveNumberFormatConfiguration.Presentation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.Option,  &type metadata for DescriptiveNumberFormatConfiguration.Presentation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.Option,  &type metadata for DescriptiveNumberFormatConfiguration.Presentation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.Option,  &type metadata for DescriptiveNumberFormatConfiguration.Presentation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue()
{
  unint64_t result = lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue;
  if (!lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FloatingPointRoundingRule.CodingValue,  &unk_189C72F30);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue;
  if (!lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FloatingPointRoundingRule.CodingValue,  &unk_189C72F30);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue;
  if (!lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FloatingPointRoundingRule.CodingValue,  &unk_189C72F30);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue;
  if (!lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FloatingPointRoundingRule.CodingValue,  &unk_189C72F30);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext()
{
  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FormatStyleCapitalizationContext,  &type metadata for FormatStyleCapitalizationContext);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FormatStyleCapitalizationContext,  &type metadata for FormatStyleCapitalizationContext);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for FormatStyleCapitalizationContext,  &type metadata for FormatStyleCapitalizationContext);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping,  &type metadata for NumberFormatStyleConfiguration.Grouping);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping,  &type metadata for NumberFormatStyleConfiguration.Grouping);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping,  &type metadata for NumberFormatStyleConfiguration.Grouping);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Precision,  &type metadata for NumberFormatStyleConfiguration.Precision);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Precision,  &type metadata for NumberFormatStyleConfiguration.Precision);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Precision,  &type metadata for NumberFormatStyleConfiguration.Precision);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy,  &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy,  &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy,  &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy,  &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy,  &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy,  &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Notation,  &type metadata for NumberFormatStyleConfiguration.Notation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Notation,  &type metadata for NumberFormatStyleConfiguration.Notation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Notation,  &type metadata for NumberFormatStyleConfiguration.Notation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy,  &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy,  &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy,  &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation,  &type metadata for CurrencyFormatStyleConfiguration.Presentation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation,  &type metadata for CurrencyFormatStyleConfiguration.Presentation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation,  &type metadata for CurrencyFormatStyleConfiguration.Presentation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation()
{
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation,  &type metadata for DescriptiveNumberFormatConfiguration.Presentation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation,  &type metadata for DescriptiveNumberFormatConfiguration.Presentation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation,  &type metadata for DescriptiveNumberFormatConfiguration.Presentation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation);
  }

  return result;
}

ValueMetadata *type metadata accessor for FormatStyleCapitalizationContext()
{
  return &type metadata for FormatStyleCapitalizationContext;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration()
{
  return &type metadata for NumberFormatStyleConfiguration;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Grouping()
{
  return &type metadata for NumberFormatStyleConfiguration.Grouping;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Precision()
{
  return &type metadata for NumberFormatStyleConfiguration.Precision;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy()
{
  return &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy;
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NumberFormatStyleConfiguration.SignDisplayStrategy( unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }

    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
    }
  }

  unsigned int v4 = *(unsigned __int8 *)a1;
  BOOL v5 = v4 >= 2;
  int v6 = v4 - 2;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.SignDisplayStrategy( uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)__n128 result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(_BYTE *)(result + 3) = v4;
      }
    }
  }

  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(_BYTE *)__n128 result = a2 + 1;
      return result;
    }

    *(_BYTE *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  return &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Notation()
{
  return &type metadata for NumberFormatStyleConfiguration.Notation;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration()
{
  return &type metadata for CurrencyFormatStyleConfiguration;
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CurrencyFormatStyleConfiguration.SignDisplayStrategy( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && a1[4]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CurrencyFormatStyleConfiguration.SignDisplayStrategy( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 4) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 4) = 0;
    }
    if (a2) {
      *(_BYTE *)__n128 result = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration.SignDisplayStrategy()
{
  return &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration.Presentation()
{
  return &type metadata for CurrencyFormatStyleConfiguration.Presentation;
}

ValueMetadata *type metadata accessor for DescriptiveNumberFormatConfiguration()
{
  return &type metadata for DescriptiveNumberFormatConfiguration;
}

ValueMetadata *type metadata accessor for DescriptiveNumberFormatConfiguration.Presentation()
{
  return &type metadata for DescriptiveNumberFormatConfiguration.Presentation;
}

void *type metadata accessor for FloatingPointRoundingRule.CodingValue()
{
  return &unk_189C72F30;
}

ValueMetadata *type metadata accessor for DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  return &type metadata for DescriptiveNumberFormatConfiguration.Presentation.Option;
}

void *type metadata accessor for DescriptiveNumberFormatConfiguration.Presentation.CodingKeys()
{
  return &unk_189C73050;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration.Presentation.Option()
{
  return &type metadata for CurrencyFormatStyleConfiguration.Presentation.Option;
}

void *type metadata accessor for CurrencyFormatStyleConfiguration.Presentation.CodingKeys()
{
  return &unk_189C73170;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  return &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
}

uint64_t storeEnumTagSinglePayload for CurrencyFormatStyleConfiguration.Presentation( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_182FBDBD4 + 4 * byte_183729E60[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_182FBDC08 + 4 * byte_183729E5B[v4]))();
}

uint64_t sub_182FBDC08(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FBDC10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FBDC18LL);
  }
  return result;
}

uint64_t sub_182FBDC24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FBDC2CLL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_182FBDC30(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FBDC38(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  return &unk_189C73290;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Notation.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.Notation.Option;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Notation.CodingKeys()
{
  return &unk_189C733B0;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Notation( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_182FBDCD0 + 4 * byte_183729E6A[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_182FBDD04 + 4 * byte_183729E65[v4]))();
}

uint64_t sub_182FBDD04(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FBDD0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FBDD14LL);
  }
  return result;
}

uint64_t sub_182FBDD20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FBDD28LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_182FBDD2C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FBDD34(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  return &unk_189C734D0;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
}

void *type metadata accessor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys()
{
  return &unk_189C735F0;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Precision.CodingKeys()
{
  return &unk_189C73680;
}

uint64_t getEnumTagSinglePayload for NumberFormatStyleConfiguration.Precision(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 24) >> 1;
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Precision( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 57) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = 0LL;
      *(void *)(result + 16) = 0LL;
      *(void *)(result + 24) = 2LL * -a2;
      *(void *)(result + 40) = 0LL;
      *(void *)(result + 48) = 0LL;
      *(void *)(result + 32) = 0LL;
      *(_BYTE *)(result + 56) = 0;
      return result;
    }

    *(_BYTE *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t getEnumTag for NumberFormatStyleConfiguration.Precision.Option(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56) >> 7;
}

uint64_t destructiveProjectEnumData for NumberFormatStyleConfiguration.Precision.Option(uint64_t result)
{
  *(_BYTE *)(result + 56) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for NumberFormatStyleConfiguration.Precision.Option( uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 40) & 1LL;
  char v3 = *(_BYTE *)(result + 56) & 1 | (a2 << 7);
  *(void *)(result + 24) &= 1uLL;
  *(void *)(result + 40) = v2;
  *(_BYTE *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Precision.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.Precision.Option;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Grouping.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.Grouping.Option;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Grouping.CodingKeys()
{
  return &unk_189C73830;
}

uint64_t getEnumTagSinglePayload for FormatStyleCapitalizationContext(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for FormatStyleCapitalizationContext( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_182FBDF88 + 4 * byte_183729E74[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_182FBDFBC + 4 * byte_183729E6F[v4]))();
}

uint64_t sub_182FBDFBC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FBDFC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FBDFCCLL);
  }
  return result;
}

uint64_t sub_182FBDFD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FBDFE0LL);
  }
  *(_BYTE *)__n128 result = a2 + 4;
  return result;
}

uint64_t sub_182FBDFE4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FBDFEC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatStyleCapitalizationContext.Option()
{
  return &type metadata for FormatStyleCapitalizationContext.Option;
}

uint64_t storeEnumTagSinglePayload for DescriptiveNumberFormatConfiguration.Presentation.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_182FBE048 + 4 * byte_183729E79[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_182FBE068 + 4 * byte_183729E7E[v4]))();
  }
}

_BYTE *sub_182FBE048(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_182FBE068(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_182FBE070(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_182FBE078(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_182FBE080(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_182FBE088(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

void *type metadata accessor for FormatStyleCapitalizationContext.CodingKeys()
{
  return &unk_189C73950;
}

void *initializeBufferWithCopyOfBuffer for CurrencyFormatStyleConfiguration.Collection( uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    __int128 v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    __int128 v8 = *(_OWORD *)((char *)a2 + 57);
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
    *(_BYTE *)(a1 + 78) = *((_BYTE *)a2 + 78);
    uint64_t v9 = a3[9];
    char v10 = (void *)(a1 + v9);
    uint64_t v11 = (char *)a2 + v9;
    *(_OWORD *)(a1 + 57) = v8;
    uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v16 = a3[10];
    uint64_t v17 = a3[11];
    __int128 v18 = (char *)v4 + v16;
    uint64_t v19 = (uint64_t)a2 + v16;
    *(void *)__int128 v18 = *(void *)v19;
    v18[8] = *(_BYTE *)(v19 + 8);
    *((_BYTE *)v4 + v17) = *((_BYTE *)a2 + v17);
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  }

  return v4;
}

uint64_t initializeWithCopy for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  __int128 v7 = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  uint64_t v8 = a3[9];
  uint64_t v9 = (void *)(a1 + v8);
  char v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithCopy for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  __int128 v7 = *((_OWORD *)a2 + 1);
  __int128 v8 = *((_OWORD *)a2 + 2);
  __int128 v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
  *(_BYTE *)(a1 + 78) = *((_BYTE *)a2 + 78);
  uint64_t v10 = a3[9];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }

  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
LABEL_7:
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  *(_BYTE *)(a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  return a1;
}

uint64_t initializeWithTake for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  __int128 v7 = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  uint64_t v8 = a3[9];
  __int128 v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  __int128 v7 = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  uint64_t v8 = a3[9];
  __int128 v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v17 = a3[10];
  uint64_t v18 = a3[11];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CurrencyFormatStyleConfiguration.Collection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CurrencyFormatStyleConfiguration.Collection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for CurrencyFormatStyleConfiguration.Collection(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for CurrencyFormatStyleConfiguration.Collection);
}

void type metadata completion function for CurrencyFormatStyleConfiguration.Collection()
{
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for FloatingPointRoundingRule?()
{
  if (!lazy cache variable for type metadata for FloatingPointRoundingRule?)
  {
    type metadata accessor for FloatingPointRoundingRule();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FloatingPointRoundingRule?);
    }
  }

void *initializeBufferWithCopyOfBuffer for NumberFormatStyleConfiguration.Collection( uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    __int128 v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    __int128 v8 = *(_OWORD *)((char *)a2 + 57);
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
    *(_WORD *)(a1 + 74) = *((_WORD *)a2 + 37);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    uint64_t v9 = a3[9];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (char *)a2 + v9;
    *(_OWORD *)(a1 + 57) = v8;
    uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v16 = a3[10];
    uint64_t v17 = a3[11];
    uint64_t v18 = (char *)v4 + v16;
    uint64_t v19 = (uint64_t)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = *(_BYTE *)(v19 + 8);
    *((_BYTE *)v4 + v17) = *((_BYTE *)a2 + v17);
  }

  return v4;
}

uint64_t destroy for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 36);
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  return result;
}

uint64_t initializeWithCopy for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  __int128 v7 = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  uint64_t v8 = a3[9];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  return a1;
}

uint64_t assignWithCopy for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  __int128 v7 = *((_OWORD *)a2 + 1);
  __int128 v8 = *((_OWORD *)a2 + 2);
  __int128 v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  LOWORD(v6) = *((_WORD *)a2 + 37);
  *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
  *(_WORD *)(a1 + 74) = v6;
  *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
  uint64_t v10 = a3[9];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }

  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
LABEL_7:
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  *(_BYTE *)(a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

uint64_t initializeWithTake for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  __int128 v7 = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  uint64_t v8 = a3[9];
  __int128 v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  return a1;
}

uint64_t assignWithTake for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  __int128 v7 = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  uint64_t v8 = a3[9];
  __int128 v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v17 = a3[10];
  uint64_t v18 = a3[11];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for NumberFormatStyleConfiguration.Collection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    uint64_t v4 = *(void *)(a1 + 40) >> 1;
    int v5 = -2 - v4;
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))( a1 + *(int *)(a3 + 36),  a2,  v9);
  }

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Collection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)(result + 32) = 0LL;
    *(void *)(result + 40) = 2LL * ~(_DWORD)a2;
    *(void *)(result + 56) = 0LL;
    *(void *)(result + 64) = 0LL;
    *(void *)(result + 48) = 0LL;
    *(_BYTE *)(result + 72) = 0;
  }

  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 36),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for NumberFormatStyleConfiguration.Collection(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for NumberFormatStyleConfiguration.Collection);
}

void type metadata completion function for NumberFormatStyleConfiguration.Collection()
{
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t base witness table accessor for Equatable in NumberFormatStyleConfiguration.Collection()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection,  type metadata accessor for NumberFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
}

uint64_t base witness table accessor for Equatable in CurrencyFormatStyleConfiguration.Collection()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection);
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.Option.CodingKeys,  &unk_189C73B90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.Option.CodingKeys,  &unk_189C73B90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.Option.CodingKeys,  &unk_189C73B90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.Option.CodingKeys,  &unk_189C73B90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Int? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Int? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Int? and conformance <A> A?)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
    uint64_t v2 = MEMORY[0x189618748];
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961AF98], v1, &v2);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int? and conformance <A> A?);
  }

  return result;
}

BOOL specialized static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointRoundingRule?, FloatingPointRoundingRule?));
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  int v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v66 - v17;
  char v19 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8)) {
      return 0LL;
    }
  }

  else
  {
    if ((v19 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v70 = v7;
  uint64_t v71 = v5;
  int64_t v72 = v10;
  Swift::String v73 = (int *)v4;
  unint64_t v20 = *(void *)(a1 + 40);
  unint64_t v21 = *(void *)(a1 + 56);
  unsigned int v22 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = *(void *)(a2 + 24);
  uint64_t v25 = *(void *)(a2 + 32);
  unint64_t v26 = *(void *)(a2 + 40);
  uint64_t v27 = *(void *)(a2 + 48);
  unint64_t v28 = *(void *)(a2 + 56);
  uint64_t v29 = *(void *)(a2 + 64);
  unsigned int v30 = *(unsigned __int8 *)(a2 + 72);
  if (v20 >> 1 != 0xFFFFFFFF || v21 > 1 || v22 >= 2)
  {
    uint64_t v32 = *(void *)(a1 + 64);
    uint64_t v33 = *(void *)(a1 + 48);
    uint64_t v34 = *(void *)(a1 + 32);
    __int128 v74 = *(_OWORD *)(a1 + 16);
    uint64_t v75 = v34;
    unint64_t v76 = v20;
    uint64_t v77 = v33;
    unint64_t v78 = v21;
    uint64_t v79 = v32;
    char v80 = v22;
    if (v26 >> 1 == 0xFFFFFFFF && v28 <= 1 && v30 < 2) {
      return 0LL;
    }
    uint64_t v68 = v14;
    unsigned int v67 = v18;
    uint64_t v69 = v16;
    uint64_t v66 = v29;
    uint64_t v35 = v25;
    uint64_t v36 = v8;
    uint64_t v37 = v27;
    outlined init with take of NumberFormatStyleConfiguration.Precision.Option(&v74, v81);
    *(void *)&__int128 v82 = v23;
    *((void *)&v82 + 1) = v24;
    uint64_t v83 = v35;
    unint64_t v84 = v26;
    uint64_t v85 = v37;
    unint64_t v86 = v28;
    uint64_t v8 = v36;
    uint64_t v87 = v66;
    char v88 = v30;
    BOOL v38 = specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)(v81, &v82);
    uint64_t v16 = v69;
    uint64_t v18 = v67;
    int v14 = v68;
    if (!v38) {
      return 0LL;
    }
LABEL_18:
    int v39 = *(unsigned __int8 *)(a1 + 73);
    int v40 = *(unsigned __int8 *)(a2 + 73);
    if (v39 == 2)
    {
      if (v40 != 2) {
        return 0LL;
      }
    }

    else if (v40 == 2 || ((((v40 & 1) == 0) ^ v39) & 1) == 0)
    {
      return 0LL;
    }

    int v41 = *(_DWORD *)(a2 + 74);
    if (*(_DWORD *)(a1 + 74) == 2)
    {
      if (v41 != 2) {
        return 0LL;
      }
    }

    else
    {
      if (v41 == 2) {
        return 0LL;
      }
      BOOL result = 0LL;
      unsigned int v42 = *(_DWORD *)(a1 + 74) ^ *(_DWORD *)(a2 + 74);
      if ((v42 & 1) != 0 || ((v42 >> 8) & 1) != 0 || (v42 & 0x10000) != 0 || (v42 & 0x1000000) != 0) {
        return result;
      }
    }

    int v43 = *(unsigned __int8 *)(a1 + 78);
    int v44 = *(unsigned __int8 *)(a2 + 78);
    if (v43 == 2)
    {
      int v45 = v73;
      if (v44 != 2) {
        return 0LL;
      }
    }

    else
    {
      int v45 = v73;
      if (v44 == 2 || ((((v44 & 1) == 0) ^ v43) & 1) == 0) {
        return 0LL;
      }
    }

    uint64_t v46 = (uint64_t)v18;
    uint64_t v47 = v16;
    uint64_t v48 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    outlined init with copy of FloatingPointRoundingRule?(a1 + *(int *)(v48 + 36), v46);
    outlined init with copy of FloatingPointRoundingRule?(a2 + *(int *)(v48 + 36), v47);
    uint64_t v49 = (uint64_t)v72;
    uint64_t v50 = (uint64_t)&v72[*(int *)(v8 + 48)];
    outlined init with copy of FloatingPointRoundingRule?(v46, (uint64_t)v72);
    outlined init with copy of FloatingPointRoundingRule?(v47, v50);
    int v51 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v71 + 48);
    if (v51(v49, 1LL, v45) == 1)
    {
      Swift::String v73 = (int *)v48;
      outlined destroy of Any?(v47, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      outlined destroy of Any?(v46, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      if (v51(v50, 1LL, v45) == 1)
      {
        outlined destroy of Any?( (uint64_t)v72,  &demangling cache variable for type metadata for FloatingPointRoundingRule?);
LABEL_45:
        uint64_t v56 = v73[10];
        unint64_t v57 = (double *)(a1 + v56);
        int v58 = *(unsigned __int8 *)(a1 + v56 + 8);
        Swift::String v59 = (double *)(a2 + v56);
        int v60 = *(unsigned __int8 *)(a2 + v56 + 8);
        if (v58 == 255)
        {
          if (v60 != 255) {
            return 0LL;
          }
        }

        else
        {
          if (v60 == 255) {
            return 0LL;
          }
          double v64 = *v57;
          double v65 = *v59;
          BOOL result = 0LL;
          if ((v58 & 1) != 0)
          {
            if ((v60 & 1) == 0 || v64 != v65) {
              return result;
            }
          }

          else if ((v60 & 1) != 0 || *(void *)&v64 != *(void *)&v65)
          {
            return result;
          }
        }

        if (*(unsigned __int8 *)(a1 + v73[11]) == *(unsigned __int8 *)(a2 + v73[11]))
        {
          uint64_t v61 = v73[12];
          int v62 = *(unsigned __int8 *)(a1 + v61);
          int v63 = *(unsigned __int8 *)(a2 + v61);
          if (v62 != 3) {
            return v63 != 3 && v62 == v63;
          }
          if (v63 == 3) {
            return 1LL;
          }
        }

        return 0LL;
      }
    }

    else
    {
      uint64_t v69 = v47;
      outlined init with copy of FloatingPointRoundingRule?(v49, (uint64_t)v14);
      if (v51(v50, 1LL, v45) != 1)
      {
        Swift::String v73 = (int *)v48;
        uint64_t v52 = v71;
        Swift::String v53 = v70;
        (*(void (**)(char *, uint64_t, int *))(v71 + 32))(v70, v50, v45);
        char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v55 = *(void (**)(char *, int *))(v52 + 8);
        v55(v53, v45);
        outlined destroy of Any?(v69, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        outlined destroy of Any?(v46, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        v55(v14, v45);
        outlined destroy of Any?(v49, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        if ((v54 & 1) == 0) {
          return 0LL;
        }
        goto LABEL_45;
      }

      outlined destroy of Any?(v69, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      outlined destroy of Any?(v46, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      (*(void (**)(char *, int *))(v71 + 8))(v14, v45);
    }

    outlined destroy of Any?( (uint64_t)v72,  &demangling cache variable for type metadata for (FloatingPointRoundingRule?, FloatingPointRoundingRule?));
    return 0LL;
  }

  BOOL result = 0LL;
  if (v26 >> 1 == 0xFFFFFFFF && v28 <= 1 && v30 < 2) {
    goto LABEL_18;
  }
  return result;
}

double specialized static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointRoundingRule?, FloatingPointRoundingRule?));
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  int v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  MEMORY[0x1895F8858](v15);
  char v19 = (char *)&v62 - v18;
  char v20 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8)) {
      return *(double *)&v17;
    }
  }

  else
  {
    *(void *)&__int128 v17 = *(void *)a2;
    if ((v20 & 1) != 0) {
      return *(double *)&v17;
    }
  }

  uint64_t v66 = v7;
  uint64_t v68 = v5;
  uint64_t v69 = v10;
  uint64_t v67 = v4;
  unint64_t v21 = *(void *)(a1 + 40);
  unint64_t v22 = *(void *)(a1 + 56);
  unsigned int v23 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v25 = *(void *)(a2 + 24);
  uint64_t v26 = *(void *)(a2 + 32);
  unint64_t v27 = *(void *)(a2 + 40);
  uint64_t v28 = *(void *)(a2 + 48);
  unint64_t v29 = *(void *)(a2 + 56);
  uint64_t v30 = *(void *)(a2 + 64);
  unsigned int v31 = *(unsigned __int8 *)(a2 + 72);
  if (v21 >> 1 == 0xFFFFFFFF && v22 <= 1 && v23 < 2)
  {
    if (v27 >> 1 != 0xFFFFFFFF || v29 > 1 || v31 >= 2) {
      return *(double *)&v17;
    }
LABEL_18:
    int v39 = *(unsigned __int8 *)(a1 + 73);
    int v40 = *(unsigned __int8 *)(a2 + 73);
    if (v39 == 2)
    {
      uint64_t v41 = (uint64_t)v69;
      if (v40 != 2) {
        return *(double *)&v17;
      }
    }

    else
    {
      uint64_t v41 = (uint64_t)v69;
      if (v40 == 2 || ((((v40 & 1) == 0) ^ v39) & 1) == 0) {
        return *(double *)&v17;
      }
    }

    int v42 = *(unsigned __int16 *)(a1 + 74) | (*(unsigned __int8 *)(a1 + 76) << 16);
    int v43 = *(_WORD *)(a2 + 74);
    if (*(_WORD *)(a1 + 74) == 2)
    {
      if (v43 != 2) {
        return *(double *)&v17;
      }
    }

    else if (v43 == 2 {
           || ((((*(_WORD *)(a2 + 74) & 1) == 0) ^ v42) & 1) == 0
    }
           || ((*(_WORD *)(a2 + 74) & 0x100) == 0) == (unsigned __int16)(*(_WORD *)(a1 + 74) & 0x100) >> 8
           || (((*(unsigned __int16 *)(a2 + 74) | (*(unsigned __int8 *)(a2 + 76) << 16)) & 0x10000) == 0) == (v42 & 0x10000u) >> 16)
    {
      return *(double *)&v17;
    }

    int v44 = *(unsigned __int8 *)(a1 + 77);
    int v45 = *(unsigned __int8 *)(a2 + 77);
    if (v44 == 2)
    {
      if (v45 != 2) {
        return *(double *)&v17;
      }
    }

    else if (v45 == 2 || ((((v45 & 1) == 0) ^ v44) & 1) == 0)
    {
      return *(double *)&v17;
    }

    uint64_t v46 = (uint64_t)v19;
    uint64_t v47 = v16;
    uint64_t v48 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    outlined init with copy of FloatingPointRoundingRule?(a1 + *(int *)(v48 + 36), v46);
    outlined init with copy of FloatingPointRoundingRule?(a2 + *(int *)(v48 + 36), v47);
    uint64_t v49 = v41 + *(int *)(v8 + 48);
    outlined init with copy of FloatingPointRoundingRule?(v46, v41);
    outlined init with copy of FloatingPointRoundingRule?(v47, v49);
    uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
    uint64_t v51 = v67;
    if (v50(v41, 1LL, v67) == 1)
    {
      uint64_t v69 = (char *)v48;
      outlined destroy of Any?(v47, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      outlined destroy of Any?(v46, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      if (v50(v49, 1LL, v51) == 1)
      {
        outlined destroy of Any?(v41, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
LABEL_42:
        uint64_t v56 = *((int *)v69 + 10);
        unint64_t v57 = (uint64_t *)(a1 + v56);
        int v58 = *(unsigned __int8 *)(a1 + v56 + 8);
        int v59 = *(unsigned __int8 *)(a2 + v56 + 8);
        if (v58 != 255 && v59 != 255)
        {
          uint64_t v60 = *v57;
          if ((v58 & 1) != 0 && (v59 & 1) != 0) {
            *(void *)&__int128 v17 = v60;
          }
        }

        return *(double *)&v17;
      }
    }

    else
    {
      uint64_t v65 = v47;
      outlined init with copy of FloatingPointRoundingRule?(v41, (uint64_t)v14);
      if (v50(v49, 1LL, v51) != 1)
      {
        uint64_t v69 = (char *)v48;
        uint64_t v52 = v68;
        Swift::String v53 = v66;
        (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v66, v49, v51);
        char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v55 = *(void (**)(char *, uint64_t))(v52 + 8);
        v55(v53, v51);
        outlined destroy of Any?(v65, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        outlined destroy of Any?(v46, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        v55(v14, v51);
        outlined destroy of Any?(v41, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        if ((v54 & 1) == 0) {
          return *(double *)&v17;
        }
        goto LABEL_42;
      }

      outlined destroy of Any?(v65, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      outlined destroy of Any?(v46, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v14, v51);
    }

    outlined destroy of Any?( v41,  &demangling cache variable for type metadata for (FloatingPointRoundingRule?, FloatingPointRoundingRule?));
    return *(double *)&v17;
  }

  uint64_t v32 = *(void *)(a1 + 64);
  uint64_t v33 = *(void *)(a1 + 48);
  uint64_t v34 = *(void *)(a1 + 32);
  __int128 v17 = *(_OWORD *)(a1 + 16);
  __int128 v70 = v17;
  uint64_t v71 = v34;
  unint64_t v72 = v21;
  uint64_t v73 = v33;
  unint64_t v74 = v22;
  uint64_t v75 = v32;
  char v76 = v23;
  if (v27 >> 1 != 0xFFFFFFFF || v29 > 1 || v31 >= 2)
  {
    double v64 = v14;
    int v63 = v19;
    uint64_t v65 = v16;
    uint64_t v62 = v30;
    uint64_t v35 = v26;
    uint64_t v36 = v8;
    uint64_t v37 = v28;
    outlined init with take of NumberFormatStyleConfiguration.Precision.Option(&v70, v77);
    *(void *)&__int128 v78 = v24;
    *((void *)&v78 + 1) = v25;
    uint64_t v79 = v35;
    unint64_t v80 = v27;
    uint64_t v81 = v37;
    unint64_t v82 = v29;
    uint64_t v8 = v36;
    uint64_t v83 = v62;
    char v84 = v31;
    BOOL v38 = specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)(v77, &v78);
    uint64_t v16 = v65;
    char v19 = v63;
    int v14 = v64;
    if (v38) {
      goto LABEL_18;
    }
  }

  return *(double *)&v17;
}

uint64_t specialized NumberFormatStyleConfiguration.RoundingIncrement.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v13[15] = 0;
    uint64_t v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    if ((v9 & 1) != 0)
    {
      v13[14] = 1;
      uint64_t v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      char v12 = v11;
      (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
      if ((v12 & 1) != 0) {
        uint64_t v7 = 0x3FE0000000000000LL;
      }
    }

    else
    {
      uint64_t v7 = v8;
      (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    }
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v7;
}

uint64_t specialized NumberFormatStyleConfiguration.Precision.Option.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Precision.Option.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v40 = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if ((v10 & 1) != 0 || (v12 = v9, v35 = 1, uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(), (v14 & 1) != 0))
  {
    char v39 = 2;
    uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    if ((v18 & 1) == 0)
    {
      uint64_t v12 = v17;
      char v38 = 3;
      uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      if ((v20 & 1) == 0)
      {
        uint64_t v21 = v19;
        char v37 = 4;
        uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
        if ((v23 & 1) == 0)
        {
          uint64_t v31 = v22;
          char v36 = 5;
          uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          if ((v25 & 1) == 0)
          {
            uint64_t v15 = 0LL;
            uint64_t v32 = v24;
            uint64_t v33 = v21;
            LODWORD(v34) = 128;
            uint64_t v16 = v31;
            goto LABEL_7;
          }
        }
      }
    }

    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v34 = v27;
    uint64_t v29 = a1[3];
    uint64_t v28 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v29);
    MEMORY[0x186E1CF78](v29, v28);
    uint64_t v30 = v34;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104LL))( v30,  *MEMORY[0x189619360],  v26);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  uint64_t v15 = v13;
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  uint64_t v16 = 0LL;
  LODWORD(v34) = 0;
LABEL_7:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v33;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 32) = v16;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 48) = v32;
  *(_BYTE *)(a2 + 56) = v34;
  return result;
}

unint64_t specialized Collection.suffix(from:)( unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

unint64_t specialized FormatStyleCapitalizationContext.Option.init(rawValue:)( unint64_t result)
{
  if (result >= 5) {
    return 5LL;
  }
  return result;
}

uint64_t specialized NumberFormatStyleConfiguration.Collection.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C616373LL && a2 == 0xE500000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6F69736963657270LL && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x70756F7267LL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0xD000000000000013LL && a2 == 0x80000001839CA740LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0xD000000000000018LL && a2 == 0x80000001839CA760LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0x676E69646E756F72LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else if (a1 == 0xD000000000000011LL && a2 == 0x80000001839CA780LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6LL;
  }

  else if (a1 == 0x6E6F697461746F6ELL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 7LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 7LL;
    }
    else {
      return 8LL;
    }
  }

uint64_t specialized NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6576697469736F70LL && a2 == 0xE800000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x657669746167656ELL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 1869768058 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t specialized CurrencyFormatStyleConfiguration.Collection.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C616373LL && a2 == 0xE500000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6F69736963657270LL && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x70756F7267LL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0xD000000000000013LL && a2 == 0x80000001839CA740LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0xD000000000000018LL && a2 == 0x80000001839CA760LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0x676E69646E756F72LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else if (a1 == 0xD000000000000011LL && a2 == 0x80000001839CA780LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6LL;
  }

  else if (a1 == 0x61746E6573657270LL && a2 == 0xEC0000006E6F6974LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7LL;
  }

  else if (a1 == 0x6E6F697461746F6ELL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 8LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 8LL;
    }
    else {
      return 9LL;
    }
  }

uint64_t specialized CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6576697469736F70LL && a2 == 0xE800000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x657669746167656ELL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 1869768058 && a2 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x69746E756F636361LL && a2 == 0xEA0000000000676ELL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Collection.CodingKeys,  &unk_189C73B00);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Collection.CodingKeys,  &unk_189C73B00);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Collection.CodingKeys,  &unk_189C73B00);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.Collection.CodingKeys,  &unk_189C73B00);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.RoundingIncrement,  &type metadata for NumberFormatStyleConfiguration.RoundingIncrement);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.RoundingIncrement,  &type metadata for NumberFormatStyleConfiguration.RoundingIncrement);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.RoundingIncrement,  &type metadata for NumberFormatStyleConfiguration.RoundingIncrement);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement);
  }

  return result;
}

uint64_t outlined assign with take of FloatingPointRoundingRule?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection.CodingKeys,  &unk_189C73A70);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection.CodingKeys,  &unk_189C73A70);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection.CodingKeys,  &unk_189C73A70);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection.CodingKeys,  &unk_189C73A70);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys,  &unk_189C739E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys,  &unk_189C739E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys,  &unk_189C739E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys,  &unk_189C739E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>;
  if (!lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ReversedCollection<String>);
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189619928], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>);
  }

  return result;
}

uint64_t partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(void *a1)
{
  return specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)( a1,  *(void **)(v1 + 16)) & 1;
}

unint64_t specialized CurrencyFormatStyleConfiguration.Presentation.Option.init(rawValue:)( unint64_t result)
{
  if (result >= 4) {
    return 4LL;
  }
  return result;
}

uint64_t specialized DescriptiveNumberFormatConfiguration.Collection.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x61746E6573657270LL && a2 == 0xEC0000006E6F6974LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0xD000000000000015LL && a2 == 0x80000001839C8740LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t specialized FloatingPointRoundingRule.CodingValue.init(rawValue:)(unint64_t result)
{
  if (result >= 6) {
    return 6LL;
  }
  return result;
}

uint64_t outlined init with take of NumberFormatStyleConfiguration.Precision?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *type metadata accessor for NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys()
{
  return &unk_189C739E0;
}

uint64_t storeEnumTagSinglePayload for CurrencyFormatStyleConfiguration.Collection.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_182FC21C8 + 4 * byte_183729E88[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_182FC21FC + 4 * byte_183729E83[v4]))();
}

uint64_t sub_182FC21FC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FC2204(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FC220CLL);
  }
  return result;
}

uint64_t sub_182FC2218(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FC2220LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_182FC2224(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FC222C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CurrencyFormatStyleConfiguration.Collection.CodingKeys()
{
  return &unk_189C73A70;
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Collection.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_182FC2294 + 4 * byte_183729E92[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_182FC22C8 + 4 * byte_183729E8D[v4]))();
}

uint64_t sub_182FC22C8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FC22D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FC22D8LL);
  }
  return result;
}

uint64_t sub_182FC22E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FC22ECLL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_182FC22F0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FC22F8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Collection.CodingKeys()
{
  return &unk_189C73B00;
}

uint64_t getEnumTagSinglePayload for FloatingPointRoundingRule.CodingValue( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

uint64_t storeEnumTagSinglePayload for FloatingPointRoundingRule.CodingValue( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_182FC23F0 + 4 * byte_183729E9C[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_182FC2424 + 4 * byte_183729E97[v4]))();
}

uint64_t sub_182FC2424(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FC242C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FC2434LL);
  }
  return result;
}

uint64_t sub_182FC2440(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FC2448LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_182FC244C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FC2454(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Precision.Option.CodingKeys()
{
  return &unk_189C73B90;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DescriptiveNumberFormatConfiguration.Collection( unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 65282 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65282 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65282;
    }

    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }

uint64_t storeEnumTagSinglePayload for DescriptiveNumberFormatConfiguration.Collection( _WORD *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_182FC255C + 4 * byte_183729EA6[v4]))();
  }
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_182FC2590 + 4 * byte_183729EA1[v4]))();
}

uint64_t sub_182FC2590(uint64_t result)
{
  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_182FC2598(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2) {
    JUMPOUT(0x182FC25A0LL);
  }
  return result;
}

uint64_t sub_182FC25AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2) {
    JUMPOUT(0x182FC25B4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_182FC25B8(uint64_t result)
{
  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_182FC25C0(uint64_t result)
{
  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DescriptiveNumberFormatConfiguration.Collection()
{
  return &type metadata for DescriptiveNumberFormatConfiguration.Collection;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NumberFormatStyleConfiguration.RoundingIncrement( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.RoundingIncrement( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for NumberFormatStyleConfiguration.RoundingIncrement(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for NumberFormatStyleConfiguration.RoundingIncrement( uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.RoundingIncrement()
{
  return &type metadata for NumberFormatStyleConfiguration.RoundingIncrement;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection()
{
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Collection,  &type metadata for DescriptiveNumberFormatConfiguration.Collection);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Collection,  &type metadata for DescriptiveNumberFormatConfiguration.Collection);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Collection,  &type metadata for DescriptiveNumberFormatConfiguration.Collection);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Collection.CodingKeys,  &unk_189C73D30);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Collection.CodingKeys,  &unk_189C73D30);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Collection.CodingKeys,  &unk_189C73D30);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Collection.CodingKeys,  &unk_189C73D30);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys);
  }

  return result;
}

uint64_t specialized NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72656765746E69LL && a2 == 0xE700000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x676E6974616F6C66LL && a2 == 0xED0000746E696F50LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized NumberFormatStyleConfiguration.Precision.Option.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014LL && a2 == 0x80000001839CA680LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0xD000000000000014LL && a2 == 0x80000001839CA6A0LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0xD000000000000010LL && a2 == 0x80000001839CA6C0LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0xD000000000000010LL && a2 == 0x80000001839CA6E0LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0xD000000000000013LL && a2 == 0x80000001839CA700LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0xD000000000000013LL && a2 == 0x80000001839CA720LL)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Grouping( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_182FC2F74 + 4 * byte_183729EB0[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_182FC2FA8 + 4 * byte_183729EAB[v4]))();
}

uint64_t sub_182FC2FA8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FC2FB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FC2FB8LL);
  }
  return result;
}

uint64_t sub_182FC2FC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FC2FCCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_182FC2FD0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FC2FD8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for DescriptiveNumberFormatConfiguration.Collection.CodingKeys()
{
  return &unk_189C73D30;
}

double NSRunLoop.SchedulerTimeType.date.getter@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double NSRunLoop.SchedulerTimeType.date.setter(double *a1)
{
  double result = *a1;
  void *v1 = *(void *)a1;
  return result;
}

uint64_t (*NSRunLoop.SchedulerTimeType.date.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double NSRunLoop.SchedulerTimeType.init(_:)@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double NSRunLoop.SchedulerTimeType.distance(to:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 - *v2;
  *a2 = result;
  return result;
}

void NSRunLoop.SchedulerTimeType.Stride.init(floatLiteral:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double NSRunLoop.SchedulerTimeType.advanced(by:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 + *v2;
  *a2 = result;
  return result;
}

double NSRunLoop.SchedulerTimeType.Stride.timeInterval.getter()
{
  return *(double *)v0;
}

double NSRunLoop.SchedulerTimeType.Stride.magnitude.getter()
{
  return *(double *)v0;
}

void NSRunLoop.SchedulerTimeType.Stride.magnitude.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*NSRunLoop.SchedulerTimeType.Stride.magnitude.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSRunLoop.SchedulerTimeType.Stride.init<A>(exactly:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  int v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  uint64_t v9 = Double.init<A>(exactly:)((uint64_t)v8, a2);
  char v11 = v10;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  if ((v11 & 1) != 0) {
    uint64_t v13 = 0LL;
  }
  else {
    uint64_t v13 = v9;
  }
  *(void *)a3 = v13;
  *(_BYTE *)(a3 + 8) = v11 & 1;
  return result;
}

uint64_t Double.init<A>(exactly:)(uint64_t a1, uint64_t a2)
{
  if (dispatch thunk of BinaryInteger.bitWidth.getter() > 64)
  {
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    char v4 = static BinaryFloatingPoint<>._convert<A>(from:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
    if ((v4 & 1) != 0) {
      return v11;
    }
    goto LABEL_13;
  }

  char v6 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v7 = dispatch thunk of BinaryInteger._lowWord.getter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  if ((v6 & 1) != 0)
  {
    double v8 = (double)v7;
    if ((double)v7 < 9.22337204e18)
    {
      *(double *)&uint64_t result = (double)v7;
      if ((~*(void *)&v8 & 0x7FF0000000000000LL) != 0)
      {
        if (v8 > -9.22337204e18)
        {
          uint64_t v9 = (uint64_t)v8;
          goto LABEL_12;
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
      goto LABEL_17;
    }
  }

  else
  {
    double v10 = (double)(unint64_t)v7;
    if ((double)(unint64_t)v7 < 1.84467441e19)
    {
      *(double *)&uint64_t result = (double)(unint64_t)v7;
      if ((~*(void *)&v10 & 0x7FF0000000000000LL) != 0)
      {
        uint64_t v9 = (unint64_t)v10;
LABEL_12:
        if (v7 == v9) {
          return result;
        }
        goto LABEL_13;
      }

BOOL static NSRunLoop.SchedulerTimeType.Stride.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

double static NSRunLoop.SchedulerTimeType.Stride.* infix(_:_:)@<D0>( double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 * *a2;
  *a3 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.+ infix(_:_:)@<D0>( double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 + *a2;
  *a3 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.- infix(_:_:)@<D0>( double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 - *a2;
  *a3 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.*= infix(_:_:)(double *a1, double *a2)
{
  double result = *a2 * *a1;
  *a1 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.+= infix(_:_:)(double *a1, double *a2)
{
  double result = *a2 + *a1;
  *a1 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.-= infix(_:_:)(double *a1, double *a2)
{
  double result = *a1 - *a2;
  *a1 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1;
  *a2 = (double)a1;
  return result;
}

void static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double static NSRunLoop.SchedulerTimeType.Stride.milliseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000.0;
  *a2 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.microseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000000.0;
  *a2 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.nanoseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000000000.0;
  *a2 = result;
  return result;
}

BOOL static NSRunLoop.SchedulerTimeType.Stride.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys()
{
  return 0x647574696E67616DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x647574696E67616DLL && a2 == 0xE900000000000065LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t NSRunLoop.SchedulerTimeType.Stride.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSRunLoop.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride.CodingKeys,  &unk_189C740D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride.CodingKeys,  &unk_189C740D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride.CodingKeys,  &unk_189C740D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride.CodingKeys,  &unk_189C740D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys);
  }

  return result;
}

uint64_t NSRunLoop.SchedulerTimeType.Stride.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSRunLoop.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  double v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

double protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>( double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double protocol witness for static SignedNumeric.- prefix(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>( double *a1@<X0>, double *a2@<X8>)
{
  double result = 0.0 - *a1;
  *a2 = result;
  return result;
}

double protocol witness for SignedNumeric.negate() in conformance NSRunLoop.SchedulerTimeType.Stride()
{
  double result = 0.0 - *v0;
  *uint64_t v0 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSRunLoop.SchedulerTimeType.Stride@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return NSRunLoop.SchedulerTimeType.Stride.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSRunLoop.SchedulerTimeType.Stride( void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSRunLoop.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

double protocol witness for static SchedulerTimeIntervalConvertible.seconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>( uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1;
  *a2 = (double)a1;
  return result;
}

void protocol witness for static SchedulerTimeIntervalConvertible.seconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride( double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double protocol witness for static SchedulerTimeIntervalConvertible.milliseconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>( uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000.0;
  *a2 = result;
  return result;
}

double protocol witness for static SchedulerTimeIntervalConvertible.microseconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>( uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000000.0;
  *a2 = result;
  return result;
}

double protocol witness for static SchedulerTimeIntervalConvertible.nanoseconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>( uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000000000.0;
  *a2 = result;
  return result;
}

double protocol witness for Numeric.magnitude.getter in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>( void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double protocol witness for static Numeric.* infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>( double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 * *a2;
  *a3 = result;
  return result;
}

double protocol witness for static Numeric.*= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride( double *a1, double *a2)
{
  double result = *a2 * *a1;
  *a1 = result;
  return result;
}

double protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>( double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 + *a2;
  *a3 = result;
  return result;
}

double protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride( double *a1, double *a2)
{
  double result = *a2 + *a1;
  *a1 = result;
  return result;
}

double protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>( double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 - *a2;
  *a3 = result;
  return result;
}

double protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride( double *a1, double *a2)
{
  double result = *a1 - *a2;
  *a1 = result;
  return result;
}

void NSRunLoop.SchedulerTimeType.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0LL;
  }
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSRunLoop.SchedulerTimeType.CodingKeys()
{
  return 1702125924LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSRunLoop.SchedulerTimeType.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 1702125924 && a2 == 0xE400000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSRunLoop.SchedulerTimeType.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSRunLoop.SchedulerTimeType.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t NSRunLoop.SchedulerTimeType.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSRunLoop.SchedulerTimeType.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  lazy protocol witness table accessor for type Date and conformance Date();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.CodingKeys,  &unk_189C74048);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.CodingKeys,  &unk_189C74048);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.CodingKeys,  &unk_189C74048);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.CodingKeys,  &unk_189C74048);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys);
  }

  return result;
}

Swift::Int NSRunLoop.SchedulerTimeType.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0LL;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NSRunLoop.SchedulerTimeType.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSRunLoop.SchedulerTimeType.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  double v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance NSRunLoop.SchedulerTimeType( double *a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, double *a6)
{
  *a1 = *a4 + *a6;
  return 0LL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSRunLoop.SchedulerTimeType@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return NSRunLoop.SchedulerTimeType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSRunLoop.SchedulerTimeType(void *a1)
{
  return NSRunLoop.SchedulerTimeType.encode(to:)(a1);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance NSRunLoop.SchedulerTimeType( double *a1, double *a2)
{
  return *a2 - *a1 > 0.0;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType( double *a1, double *a2)
{
  return *a1 - *a2 <= 0.0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType( double *a1, double *a2)
{
  return *a2 - *a1 <= 0.0;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance NSRunLoop.SchedulerTimeType( double *a1, double *a2)
{
  return *a1 - *a2 > 0.0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSRunLoop.SchedulerTimeType( double *a1, double *a2)
{
  return *a2 - *a1 == 0.0;
}

void NSRunLoop.schedule(options:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  v8[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v8[5] = v6;
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 1107296256LL;
  void v8[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v8[3] = &block_descriptor_0;
  uint64_t v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_performBlock_, v7);
  _Block_release(v7);
}

uint64_t sub_182FC3F70()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSRunLoop.schedule(options:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  Swift::UInt64 v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void NSRunLoop.schedule(after:tolerance:options:_:)( double *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v8 = *a1;
  double v9 = *a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  id v11 = objc_allocWithZone(MEMORY[0x189604028]);
  id v12 = objc_allocWithZone(MEMORY[0x189603F50]);
  swift_retain();
  id v13 = objc_msgSend(v12, sel_initWithTimeIntervalSinceReferenceDate_, v8);
  v16[4] = partial apply for closure #1 in NSRunLoop.schedule(after:tolerance:options:_:);
  v16[5] = v10;
  v16[0] = MEMORY[0x1895F87A8];
  v16[1] = 1107296256LL;
  v16[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  v16[3] = &block_descriptor_6;
  uint64_t v14 = _Block_copy(v16);
  id v15 = objc_msgSend(v11, sel_initWithFireDate_interval_repeats_block_, v13, 0, v14, 0.0);
  _Block_release(v14);

  swift_release();
  objc_msgSend(v15, sel_setTolerance_, v9);
  objc_msgSend(v5, sel_addTimer_forMode_, v15, *MEMORY[0x189603A40]);
}

id partial apply for closure #1 in NSRunLoop.schedule(after:tolerance:options:_:)(void *a1)
{
  return objc_msgSend(a1, sel_invalidate);
}

void NSRunLoop.schedule(after:interval:tolerance:options:_:)( double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  double v10 = *a1;
  double v11 = *a2;
  double v12 = *a3;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a4;
  *(void *)(v13 + 24) = a5;
  id v14 = objc_allocWithZone(MEMORY[0x189604028]);
  id v15 = objc_allocWithZone(MEMORY[0x189603F50]);
  swift_retain();
  id v16 = objc_msgSend(v15, sel_initWithTimeIntervalSinceReferenceDate_, v10);
  v23[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v23[5] = v13;
  v23[0] = MEMORY[0x1895F87A8];
  v23[1] = 1107296256LL;
  v23[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  v23[3] = &block_descriptor_12;
  uint64_t v17 = _Block_copy(v23);
  id v18 = objc_msgSend(v14, sel_initWithFireDate_interval_repeats_block_, v16, 1, v17, v11);
  _Block_release(v17);

  swift_release();
  objc_msgSend(v18, sel_setTolerance_, v12);
  objc_msgSend(v6, sel_addTimer_forMode_, v18, *MEMORY[0x189603A40]);
  *(void *)(swift_allocObject() + 16) = v18;
  uint64_t v19 = type metadata accessor for AnyCancellable();
  swift_allocObject();
  id v20 = v18;
  uint64_t v21 = AnyCancellable.init(_:)();
  uint64_t v22 = MEMORY[0x189602280];
  a6[3] = v19;
  a6[4] = v22;

  *a6 = v21;
}

double NSRunLoop.now.getter@<D0>(double *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double result = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  *a1 = result;
  return result;
}

void NSRunLoop.minimumTolerance.getter(void *a1@<X8>)
{
  *a1 = 0LL;
}

void @objc NSRunLoop.runLoopScheduled(action:)(void *a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *(void (**)(void))&a3[OBJC_IVAR____TtC10FoundationP33_AE6BD10245B422606B9EE93C01570D8F21_CombineRunLoopAction_action];
  uint64_t v5 = a3;
  id v6 = a1;
  v4();
}

double protocol witness for Scheduler.now.getter in conformance NSRunLoop@<D0>(double *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double result = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  *a1 = result;
  return result;
}

void protocol witness for Scheduler.schedule(options:_:) in conformance NSRunLoop( uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *v3;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  v9[4] = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v9[5] = v7;
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 1107296256LL;
  void v9[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v9[3] = &block_descriptor_22;
  double v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_performBlock_, v8);
  _Block_release(v8);
}

void protocol witness for Scheduler.schedule(after:tolerance:options:_:) in conformance NSRunLoop( double *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void protocol witness for Scheduler.schedule(after:interval:tolerance:options:_:) in conformance NSRunLoop( double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
}

id _CombineRunLoopAction.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _CombineRunLoopAction();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_182FC468C()
{
  return swift_deallocObject();
}

id partial apply for implicit closure #2 in implicit closure #1 in NSRunLoop.schedule(after:interval:tolerance:options:_:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_invalidate);
}

uint64_t associated type witness table accessor for ExpressibleByFloatLiteral.FloatLiteralType : _ExpressibleByBuiltinFloatLiteral in NSRunLoop.SchedulerTimeType.Stride()
{
  return MEMORY[0x1896185B0];
}

unint64_t lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride()
{
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride,  &type metadata for NSRunLoop.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride,  &type metadata for NSRunLoop.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride,  &type metadata for NSRunLoop.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride,  &type metadata for NSRunLoop.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride,  &type metadata for NSRunLoop.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride,  &type metadata for NSRunLoop.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride,  &type metadata for NSRunLoop.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }

  return result;
}

uint64_t associated type witness table accessor for Numeric.Magnitude : Numeric in NSRunLoop.SchedulerTimeType.Stride()
{
  return MEMORY[0x189618598];
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in NSRunLoop.SchedulerTimeType.Stride()
{
  return MEMORY[0x1896185B8];
}

unint64_t lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType()
{
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType,  &type metadata for NSRunLoop.SchedulerTimeType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType,  &type metadata for NSRunLoop.SchedulerTimeType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSRunLoop.SchedulerTimeType,  &type metadata for NSRunLoop.SchedulerTimeType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType);
  }

  return result;
}

ValueMetadata *type metadata accessor for NSRunLoop.SchedulerTimeType()
{
  return &type metadata for NSRunLoop.SchedulerTimeType;
}

ValueMetadata *type metadata accessor for NSRunLoop.SchedulerTimeType.Stride()
{
  return &type metadata for NSRunLoop.SchedulerTimeType.Stride;
}

ValueMetadata *type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return &type metadata for NSRunLoop.SchedulerOptions;
}

uint64_t type metadata accessor for _CombineRunLoopAction()
{
  return objc_opt_self();
}

void *type metadata accessor for NSRunLoop.SchedulerTimeType.CodingKeys()
{
  return &unk_189C74048;
}

uint64_t storeEnumTagSinglePayload for NSRunLoop.SchedulerTimeType.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_182FC4A58 + 4 * byte_18372C300[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_182FC4A78 + 4 * byte_18372C305[v4]))();
  }
}

_BYTE *sub_182FC4A58(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_182FC4A78(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_182FC4A80(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_182FC4A88(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_182FC4A90(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_182FC4A98(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for NSRunLoop.SchedulerTimeType.Stride.CodingKeys()
{
  return &unk_189C740D8;
}

uint64_t specialized Array.init()()
{
  return MEMORY[0x18961AFE8];
}

uint64_t PropertyListEncoder.outputFormat.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 32);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t (*PropertyListEncoder.outputFormat.modify(void *a1))(void *a1)
{
  int v3 = *(os_unfair_lock_s **)(v1 + 32);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(void *)(v1 + 16);
  return PropertyListEncoder.outputFormat.modify;
}

uint64_t PropertyListEncoder.outputFormat.modify(void *a1)
{
  uint64_t v1 = (os_unfair_lock_s *)a1[2];
  *(void *)(a1[1] + 16LL) = *a1;
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t PropertyListEncoder.outputFormat.setter(uint64_t a1)
{
  int v3 = *(os_unfair_lock_s **)(v1 + 32);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(void *)(v1 + 16) = a1;
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

uint64_t PropertyListEncoder.userInfo.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 32);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t (*PropertyListEncoder.userInfo.modify(void *a1))(void *a1)
{
  int v3 = *(os_unfair_lock_s **)(v1 + 32);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  return PropertyListEncoder.userInfo.modify;
}

uint64_t PropertyListEncoder.userInfo.modify(void *a1)
{
  uint64_t v1 = (os_unfair_lock_s *)a1[2];
  *(void *)(a1[1] + 24LL) = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t PropertyListEncoder.userInfo.setter(uint64_t a1)
{
  int v3 = *(os_unfair_lock_s **)(v1 + 32);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(void *)(v1 + 24) = a1;
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void *PropertyListEncoder.__allocating_init()()
{
  uint64_t v0 = (void *)swift_allocObject();
  uint64_t v1 = MEMORY[0x18961AFF0];
  v0[2] = 200LL;
  v0[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  v0[4] = v2;
  return v0;
}

void *PropertyListEncoder.init()()
{
  uint64_t v1 = MEMORY[0x18961AFF0];
  v0[2] = 200LL;
  v0[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  v0[4] = v2;
  return v0;
}

void PropertyListEncoder.encode<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v3 + 96LL))();
  if (v9 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x189617FA8];
    *(void *)(inited + 40) = v12;
    *(void *)(inited + 48) = 0xD000000000000038LL;
    *(void *)(inited + 56) = 0x80000001839CA8B0LL;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v13 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v55);
    uint64_t v14 = v55;
    uint64_t v15 = v56;
    swift_retain();
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
    if ((v17 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      v13[(v16 >> 6) + 8] |= 1LL << v16;
      id v18 = (uint64_t *)(v13[6] + 16 * v16);
      *id v18 = v14;
      v18[1] = v15;
      outlined init with take of Any(v57, (_OWORD *)(v13[7] + 32 * v16));
      uint64_t v19 = v13[2];
      BOOL v20 = __OFADD__(v19, 1LL);
      uint64_t v21 = v19 + 1;
      if (!v20)
      {
        v13[2] = v21;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v22 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v23 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v24 = objc_msgSend(v22, sel_initWithDomain_code_userInfo_, v23, 3852, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v25 = objc_msgSend(v24, sel_domain);
        id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        a3 = v27;

        id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        uint64_t v5 = v29;
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v30 & 1) != 0)
        {
LABEL_20:
          swift_willThrow();
          goto LABEL_21;
        }

        __break(1u);
LABEL_12:
        PropertyListEncoder._encodeXML<A>(_:)(a1, a2, a3);
        if (!v5) {
          return;
        }
        goto LABEL_13;
      }
    }

    __break(1u);
    goto LABEL_25;
  }

  uint64_t v10 = v9;
  if (v9 == 100) {
    goto LABEL_12;
  }
  if (v9 != 200)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v31 = swift_initStackObject();
    *(_OWORD *)(v31 + 16) = xmmword_183720D90;
    *(void *)(v31 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(v31 + 40) = v32;
    uint64_t v55 = 0LL;
    unint64_t v56 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(31LL);
    v33._object = (void *)0x80000001839CA850LL;
    v33._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v33);
    uint64_t v58 = v10;
    type metadata accessor for NSPropertyListFormat(0LL);
    _print_unlocked<A, B>(_:_:)();
    *(void *)(v31 + 72) = MEMORY[0x189617FA8];
    *(void *)(v31 + 48) = 0LL;
    *(void *)(v31 + 56) = 0xE000000000000000LL;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v34 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(v31 + 32, (uint64_t)&v55);
    uint64_t v35 = v55;
    uint64_t v36 = v56;
    swift_retain();
    unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    if ((v38 & 1) == 0)
    {
      v34[(v37 >> 6) + 8] |= 1LL << v37;
      char v39 = (uint64_t *)(v34[6] + 16 * v37);
      *char v39 = v35;
      v39[1] = v36;
      outlined init with take of Any(v57, (_OWORD *)(v34[7] + 32 * v37));
      uint64_t v40 = v34[2];
      BOOL v20 = __OFADD__(v40, 1LL);
      uint64_t v41 = v40 + 1;
      if (!v20)
      {
        v34[2] = v41;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v42 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v43 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v24 = objc_msgSend(v42, sel_initWithDomain_code_userInfo_, v43, 3852, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v44 = objc_msgSend(v24, sel_domain);
        id v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        uint64_t v47 = v46;

        if (v45 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v47 == v48)
        {
LABEL_18:
          swift_bridgeObjectRelease_n();
          goto LABEL_20;
        }

        char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v49 & 1) != 0) {
          goto LABEL_20;
        }
LABEL_27:
        __break(1u);
        return;
      }

uint64_t *PropertyListEncoder._encodeBPlist<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:)(a1, a2, a3);
  if (!v4)
  {
    uint64_t v8 = (uint64_t)v7;
    unsigned int v9 = *((unsigned __int8 *)v7 + 40);
    uint64_t v10 = v7[2];
    unint64_t v11 = v7[3];
    uint64_t v12 = v7[4];
    switch(v9 >> 4)
    {
      case 0u:
        goto LABEL_17;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
        uint64_t v55 = v7;
        uint64_t v13 = type metadata accessor for EncodingError();
        swift_allocError();
        uint64_t v15 = v14;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
        v15[3] = a2;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a2);
        uint64_t v50 = 0LL;
        unint64_t v51 = 0xE000000000000000LL;
        outlined copy of _BPlistEncodingFormat.Reference.Backing(v10, v11, v12, v9);
        _StringGuts.grow(_:)(54LL);
        v17._uint64_t countAndFlagsBits = 0x6576656C2D706F54LL;
        v17._object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v17);
        v18._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._object = (void *)0x80000001839CAA60LL;
        uint64_t v3 = &v50;
        v19._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
        String.append(_:)(v19);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v13 - 8) + 104LL))( v15,  *MEMORY[0x1896193B8],  v13);
        goto LABEL_22;
      case 7u:
        uint64_t v20 = type metadata accessor for EncodingError();
        swift_allocError();
        id v22 = v21;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
        v22[3] = a2;
        uint64_t v23 = __swift_allocate_boxed_opaque_existential_1(v22);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v23, a1, a2);
        uint64_t v50 = 0LL;
        unint64_t v51 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(52LL);
        v24._uint64_t countAndFlagsBits = 0x6576656C2D706F54LL;
        v24._object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v24);
        v25._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        unint64_t v26 = 0xD000000000000028LL;
        unint64_t v27 = 0x80000001839CAA00LL;
        uint64_t v3 = &v50;
        goto LABEL_18;
      case 9u:
        unint64_t v28 = v12 | v11;
        if (!(v12 | v11 | v10) && v9 == 144
          || (v9 == 144 ? (BOOL v29 = v10 == 1) : (BOOL v29 = 0), v29 ? (v30 = v28 == 0) : (v30 = 0), v30))
        {
          uint64_t v49 = v7[2];
          unint64_t v40 = v7[3];
          uint64_t v41 = v7[4];
          uint64_t v20 = type metadata accessor for EncodingError();
          swift_allocError();
          uint64_t v43 = v42;
          uint64_t v55 = (uint64_t *)((char *)v42
          v43[3] = a2;
          id v44 = __swift_allocate_boxed_opaque_existential_1(v43);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v44, a1, a2);
          uint64_t v50 = 0LL;
          unint64_t v51 = 0xE000000000000000LL;
          outlined copy of _BPlistEncodingFormat.Reference.Backing(v49, v40, v41, v9);
          _StringGuts.grow(_:)(55LL);
          v45._uint64_t countAndFlagsBits = 0x6576656C2D706F54LL;
          v45._object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v45);
          v46._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v46);
          swift_bridgeObjectRelease();
          v47._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
          v47._object = (void *)0x80000001839CAA90LL;
          uint64_t v3 = &v50;
          String.append(_:)(v47);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          uint64_t v35 = *MEMORY[0x1896193B8];
          uint64_t v36 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104LL);
          unint64_t v37 = v43;
        }

        else
        {
          if (v9 != 144 || v10 != 2 || v28)
          {
LABEL_19:
            uint64_t v38 = swift_slowAlloc();
            uint64_t v50 = MEMORY[0x18961AFE8];
            LOBYTE(v51) = 0;
            uint64_t v52 = v38;
            uint64_t v53 = 0x2000LL;
            uint64_t v54 = 0LL;
            _BPlistEncodingFormat.Writer.serializePlist(_:)(v8);
            uint64_t v3 = v39;
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(0LL, 0xC000000000000000LL);
            swift_release();
            return v3;
          }

__int128 *PropertyListEncoder._encodeXML<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!v4)
  {
    __int128 v7 = v40;
    char v8 = v41;
    switch((char)v41)
    {
      case 0:
        goto LABEL_13;
      case 1:
      case 2:
      case 3:
        type metadata accessor for EncodingError();
        unint64_t v44 = *((void *)&v7 + 1);
        swift_allocError();
        uint64_t v10 = v9;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
        v10[3] = a2;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
        (*(void (**)(uint64_t *, unint64_t, unint64_t))(*(void *)(a2 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a2);
        *(void *)&__int128 v40 = 0LL;
        *((void *)&v40 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(54LL);
        v12._uint64_t countAndFlagsBits = 0x6576656C2D706F54LL;
        v12._object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v12);
        v13._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        uint64_t v14 = " encoded as number property list fragment.";
        goto LABEL_14;
      case 4:
        uint64_t v25 = type metadata accessor for EncodingError();
        swift_allocError();
        unint64_t v27 = v26;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
        v27[3] = a2;
        unint64_t v28 = __swift_allocate_boxed_opaque_existential_1(v27);
        (*(void (**)(uint64_t *, unint64_t, unint64_t))(*(void *)(a2 - 8) + 16LL))( v28,  a1,  a2);
        *(void *)&__int128 v40 = 0LL;
        *((void *)&v40 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(52LL);
        v29._uint64_t countAndFlagsBits = 0x6576656C2D706F54LL;
        v29._object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v29);
        v30._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31._uint64_t countAndFlagsBits = 0xD000000000000028LL;
        v31._object = (void *)0x80000001839CAA00LL;
        uint64_t v3 = &v40;
        String.append(_:)(v31);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  *MEMORY[0x1896193B8],  v25);
        swift_willThrow();
        return v3;
      case 8:
        if ((unint64_t)(v40 - 1) <= 1)
        {
          uint64_t v15 = type metadata accessor for EncodingError();
          swift_allocError();
          unint64_t v44 = *((void *)&v7 + 1);
          Swift::String v17 = v16;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
          v17[3] = a2;
          Swift::String v18 = __swift_allocate_boxed_opaque_existential_1(v17);
          (*(void (**)(uint64_t *, unint64_t, unint64_t))(*(void *)(a2 - 8) + 16LL))( v18,  a1,  a2);
          *(void *)&__int128 v40 = 0LL;
          *((void *)&v40 + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(55LL);
          v19._uint64_t countAndFlagsBits = 0x6576656C2D706F54LL;
          v19._object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v19);
          v20._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v20);
          swift_bridgeObjectRelease();
          v21._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
          v21._object = (void *)0x80000001839CAA90LL;
          uint64_t v3 = &v40;
          String.append(_:)(v21);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x1896193B8],  v15);
          swift_willThrow();
          uint64_t v22 = v7;
          unint64_t v23 = v44;
          char v24 = 8;
LABEL_15:
          outlined consume of _XMLPlistEncodingFormat.Reference(v22, v23, v24);
          return v3;
        }

        if (v40 == 0)
        {
LABEL_13:
          type metadata accessor for EncodingError();
          unint64_t v44 = *((void *)&v7 + 1);
          swift_allocError();
          uint64_t v10 = v32;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
          v10[3] = a2;
          Swift::String v33 = __swift_allocate_boxed_opaque_existential_1(v10);
          (*(void (**)(uint64_t *, unint64_t, unint64_t))(*(void *)(a2 - 8) + 16LL))( v33,  a1,  a2);
          *(void *)&__int128 v40 = 0LL;
          *((void *)&v40 + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(54LL);
          v34._uint64_t countAndFlagsBits = 0x6576656C2D706F54LL;
          v34._object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v34);
          v35._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          uint64_t v14 = " encoded as string property list fragment.";
LABEL_14:
          v36._object = (void *)((unint64_t)(v14 - 32) | 0x8000000000000000LL);
          uint64_t v3 = &v40;
          v36._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
          String.append(_:)(v36);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t *, void, void))(*(void *)(*((void *)&v7 + 1) - 8LL) + 104LL))( v10,  *MEMORY[0x1896193B8],  *((void *)&v7 + 1));
          swift_willThrow();
          uint64_t v22 = v7;
          unint64_t v23 = v44;
          char v24 = v8;
          goto LABEL_15;
        }

unint64_t PropertyListEncoder.encode<A>(_:configuration:)(uint64_t a1, id a2, uint64_t a3, uint64_t a4)
{
  id v6 = v5;
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v4 + 96LL))();
  if (v11 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x189617FA8];
    *(void *)(inited + 40) = v17;
    *(void *)(inited + 48) = 0xD000000000000038LL;
    *(void *)(inited + 56) = 0x80000001839CA8B0LL;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    Swift::String v18 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v59);
    uint64_t v19 = v59;
    uint64_t v20 = v60;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
    if ((v22 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      v18[(result >> 6) + 8] |= 1LL << result;
      unint64_t v23 = (uint64_t *)(v18[6] + 16 * result);
      *unint64_t v23 = v19;
      v23[1] = v20;
      unint64_t result = (unint64_t)outlined init with take of Any(&v61, (_OWORD *)(v18[7] + 32 * result));
      uint64_t v24 = v18[2];
      BOOL v25 = __OFADD__(v24, 1LL);
      uint64_t v26 = v24 + 1;
      if (!v25)
      {
        v18[2] = v26;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v27 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v28 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v6 = objc_msgSend(v27, sel_initWithDomain_code_userInfo_, v28, 3852, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        a2 = objc_msgSend(v6, sel_domain);
        id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        uint64_t v31 = v30;

        if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v31 == v32) {
          goto LABEL_18;
        }
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v33 & 1) != 0)
        {
LABEL_20:
          swift_willThrow();
          goto LABEL_21;
        }

        __break(1u);
LABEL_12:
        Swift::String v34 = PropertyListEncoder._encodeXML<A>(_:configuration:)(a1, (uint64_t)a2, a3);
        if (!v6) {
          return (unint64_t)v34;
        }
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v12 = v11;
  if (v11 == 100) {
    goto LABEL_12;
  }
  if (v11 == 200)
  {
    Swift::String v13 = PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:configuration:)(a1, (uint64_t)a2, a3, a4);
    if (!v5)
    {
      uint64_t v14 = (uint64_t)v13;
      uint64_t v15 = swift_slowAlloc();
      uint64_t v59 = MEMORY[0x18961AFE8];
      LOBYTE(v60) = 0;
      *(void *)&__int128 v61 = v15;
      *((void *)&v61 + 1) = 0x2000LL;
      uint64_t v62 = 0LL;
      _BPlistEncodingFormat.Writer.serializePlist(_:)(v14);
      id v6 = v58;
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(0LL, 0xC000000000000000LL);
      swift_release();
      return (unint64_t)v6;
    }

uint64_t *PropertyListEncoder._encodeXML<A>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = &v12;
  PropertyListEncoder.encodeToTopLevelContainerXML<A>(_:configuration:)(a1, a3, (uint64_t)&v12);
  if (!v3)
  {
    uint64_t v5 = v12;
    unint64_t v6 = v13;
    char v7 = v14;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = 0x2000LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    unint64_t v16 = 0xC000000000000000LL;
    _XMLPlistEncodingFormat.Writer.append(_:)( (uint64_t)"<?xml version=1.0 encoding=UTF-8?>\n <!DOCTYPE plist PUBLIC -//Apple//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.dtd >\n <plist version=1.0>\n",  164LL);
    uint64_t v9 = v5;
    unint64_t v10 = v6;
    char v11 = v7;
    _XMLPlistEncodingFormat.Writer.append(_:indentation:)((uint64_t)&v9, 0LL);
    uint64_t v9 = 0x3E7473696C702F3CLL;
    unint64_t v10 = 0xE90000000000000ALL;
    specialized String.withUTF8<A>(_:)(&v9);
    swift_bridgeObjectRelease();
    if (v14 >= 1) {
      Data._Representation.append(contentsOf:)();
    }
    uint64_t v4 = v15;
    if (v12) {
      MEMORY[0x186E20E60](v12, -1LL, -1LL);
    }
    outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, v7);
  }

  return v4;
}

uint64_t PropertyListEncoder.encode<A, B>(_:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v16 = (char *)&v19 - v15;
  (*(void (**)(uint64_t, uint64_t))(a6 + 16))(a4, a6);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)v7 + 200LL))(a1, v16, a3, a5);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  return v17;
}

void *PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  type metadata accessor for __PlistEncoderBPlist();
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = MEMORY[0x18961AFE8];
  *(void *)(v10 + 24) = v9;
  *(void *)(v10 + 32) = v8;
  *(void *)(v10 + 16) = v11;
  *(_OWORD *)(v10 + 40) = xmmword_18372C9E0;
  specialized _BPlistEncodingFormat.init()((uint64_t *)v23);
  __int128 v12 = v23[1];
  *(_OWORD *)(v10 + 56) = v23[0];
  *(_OWORD *)(v10 + 72) = v12;
  *(void *)(v10 + 88) = v24;
  swift_bridgeObjectRetain();
  uint64_t v13 = (void *)v10;
  uint64_t v14 = specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)( a1,  0x8000000000000000LL,  0LL,  0LL,  0LL,  255,  a2,  a3);
  if (!v4)
  {
    uint64_t v13 = (void *)v14;
    if (v14)
    {
      swift_release();
      return v13;
    }

    uint64_t v16 = type metadata accessor for EncodingError();
    swift_allocError();
    Swift::String v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v18[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a2);
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    v22[0] = 0x6576656C2D706F54LL;
    v22[1] = 0xEA0000000000206CLL;
    v20._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._object = (void *)0x80000001839CA930LL;
    uint64_t v13 = v22;
    v21._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v21);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v18,  *MEMORY[0x1896193B8],  v16);
    swift_willThrow();
  }

  swift_release();
  return v13;
}

uint64_t PropertyListEncoder.encodeToTopLevelContainerXML<A>(_:)@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v4 + 24);
  type metadata accessor for __PlistEncoderXML();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = MEMORY[0x18961AFE8];
  *(void *)(v12 + 24) = v11;
  *(void *)(v12 + 32) = v10;
  *(void *)(v12 + 40) = 0x8000000000000000LL;
  *(void *)(v12 + 56) = 0LL;
  *(void *)(v12 + 64) = 0LL;
  *(void *)(v12 + 48) = 0LL;
  *(_BYTE *)(v12 + 72) = 8;
  *(_OWORD *)(v12 + 80) = xmmword_18372C2E0;
  *(_BYTE *)(v12 + 96) = 8;
  *(_OWORD *)(v12 + 104) = xmmword_18372C9F0;
  *(_BYTE *)(v12 + 120) = 8;
  swift_bridgeObjectRetain();
  specialized __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(a1, 0x8000000000000000LL, 0LL, 0LL, 0LL, 255, a2, a3, &v23);
  if (v5) {
    return swift_release();
  }
  unsigned __int8 v14 = v25;
  if (v25 == 255)
  {
    uint64_t v17 = type metadata accessor for EncodingError();
    swift_allocError();
    uint64_t v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v19[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
    (*(void (**)(uint64_t *, unint64_t, unint64_t))(*(void *)(a2 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a2);
    uint64_t v23 = 0LL;
    unint64_t v24 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    uint64_t v23 = 0x6576656C2D706F54LL;
    unint64_t v24 = 0xEA0000000000206CLL;
    v21._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x80000001839CA930LL;
    v22._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v22);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v17 - 8) + 104LL))( v19,  *MEMORY[0x1896193B8],  v17);
    swift_willThrow();
    return swift_release();
  }

  uint64_t v16 = v23;
  unint64_t v15 = v24;
  uint64_t result = swift_release();
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v15;
  *(_BYTE *)(a4 + 16) = v14;
  return result;
}

uint64_t *PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v4 + 24);
  type metadata accessor for __PlistEncoderBPlist();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x18961AFE8];
  *(void *)(v12 + 24) = v11;
  *(void *)(v12 + 32) = v10;
  *(void *)(v12 + 16) = v13;
  *(_OWORD *)(v12 + 40) = xmmword_18372C9E0;
  specialized _BPlistEncodingFormat.init()((uint64_t *)v27);
  __int128 v14 = v27[1];
  *(_OWORD *)(v12 + 56) = v27[0];
  *(_OWORD *)(v12 + 72) = v14;
  *(void *)(v12 + 88) = v28;
  v24[2] = a3;
  v24[3] = a4;
  v24[4] = a1;
  v24[5] = a2;
  swift_bridgeObjectRetain();
  unint64_t v15 = (uint64_t *)v12;
  uint64_t v16 = specialized __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)( (void (*)(void *))partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:),  (uint64_t)v24,  0x8000000000000000LL,  0LL,  0LL,  0LL,  255);
  if (!v5)
  {
    unint64_t v15 = (uint64_t *)v16;
    if (!v16)
    {
      uint64_t v18 = type metadata accessor for EncodingError();
      swift_allocError();
      Swift::String v20 = v19;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
      v20[3] = a3;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a3);
      uint64_t v25 = 0LL;
      unint64_t v26 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(39LL);
      swift_bridgeObjectRelease();
      uint64_t v25 = 0x6576656C2D706F54LL;
      unint64_t v26 = 0xEA0000000000206CLL;
      v22._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._object = (void *)0x80000001839CA930LL;
      unint64_t v15 = &v25;
      v23._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v23);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v18 - 8) + 104LL))( v20,  *MEMORY[0x1896193B8],  v18);
      swift_willThrow();
    }
  }

  swift_release();
  return v15;
}

uint64_t PropertyListEncoder.encodeToTopLevelContainerXML<A>(_:configuration:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  type metadata accessor for __PlistEncoderXML();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x18961AFE8];
  *(void *)(v10 + 24) = v9;
  *(void *)(v10 + 32) = v8;
  *(void *)(v10 + 40) = 0x8000000000000000LL;
  *(void *)(v10 + 56) = 0LL;
  *(void *)(v10 + 64) = 0LL;
  *(void *)(v10 + 48) = 0LL;
  *(_BYTE *)(v10 + 72) = 8;
  *(_OWORD *)(v10 + 80) = xmmword_18372C2E0;
  *(_BYTE *)(v10 + 96) = 8;
  *(_OWORD *)(v10 + 104) = xmmword_18372C9F0;
  *(_BYTE *)(v10 + 120) = 8;
  swift_bridgeObjectRetain();
  specialized __PlistEncoderXML._wrapGeneric<A>(_:for:_:)( (void (*)(void *))partial apply for specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:configuration:for:_:),  0x8000000000000000LL,  0LL,  0LL,  0LL,  255,  (uint64_t)&v21);
  if (v4) {
    return swift_release();
  }
  unsigned __int8 v12 = v23;
  if (v23 == 255)
  {
    uint64_t v15 = type metadata accessor for EncodingError();
    swift_allocError();
    uint64_t v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v17[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a2);
    uint64_t v21 = 0LL;
    unint64_t v22 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    uint64_t v21 = 0x6576656C2D706F54LL;
    unint64_t v22 = 0xEA0000000000206CLL;
    v19._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x80000001839CA930LL;
    v20._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v20);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x1896193B8],  v15);
    swift_willThrow();
    return swift_release();
  }

  uint64_t v14 = v21;
  unint64_t v13 = v22;
  uint64_t result = swift_release();
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v13;
  *(_BYTE *)(a3 + 16) = v12;
  return result;
}

uint64_t PropertyListEncoder.deinit()
{
  return v0;
}

uint64_t PropertyListEncoder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void specialized String.withUTF8<A>(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  if ((v2 & 0x1000000000000000LL) == 0)
  {
    if ((v2 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v4 = HIBYTE(v2) & 0xF;
    v8[0] = v1;
    v8[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v3 = v8;
    goto LABEL_7;
  }

  uint64_t v1 = static String._copying(_:)();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  *a1 = v1;
  a1[1] = v7;
  unint64_t v2 = v7;
  if ((v7 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000LL) != 0)
  {
    uint64_t v3 = (void *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v3 = (void *)_StringObject.sharedUTF8.getter();
  }

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  if ((v2 & 0x1000000000000000LL) == 0)
  {
    if ((v2 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    if ((v2 & 0xF00000000000000LL) == 0) {
      return;
    }
    goto LABEL_8;
  }

  uint64_t v1 = static String._copying(_:)();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  *a1 = v1;
  a1[1] = v5;
  unint64_t v2 = v5;
  if ((v5 & 0x2000000000000000LL) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000LL) != 0)
  {
    if ((v1 & 0xFFFFFFFFFFFFLL) == 0) {
      return;
    }
  }

  else
  {
    _StringObject.sharedUTF8.getter();
    if (!v6) {
      return;
    }
  }

{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  Swift::Int64 v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  Swift::Int64 v10;
  void v11[2];
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  if ((v2 & 0x1000000000000000LL) != 0)
  {
    uint64_t v1 = static String._copying(_:)();
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    *a1 = v1;
    a1[1] = v9;
    unint64_t v2 = v9;
    if ((v9 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    v11[0] = v1;
    v11[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    _BPlistEncodingFormat.Writer.append(_:count:)(6, HIBYTE(v2) & 0xF);
    uint64_t v5 = v11;
    uint64_t v6 = HIBYTE(v2) & 0xF;
    goto LABEL_8;
  }

  if ((v2 & 0x2000000000000000LL) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000LL) != 0)
  {
    uint64_t v3 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v3 = _StringObject.sharedUTF8.getter();
    uint64_t v4 = v10;
  }

  _BPlistEncodingFormat.Writer.append(_:count:)(6, v4);
  uint64_t v5 = (void *)v3;
  uint64_t v6 = v4;
LABEL_8:
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)v5, v6);
}

uint64_t specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  v17[3] = a6(0LL);
  v17[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(a7, a6, a8);
  v17[0] = a1;
  uint64_t v15 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a5 + 16);
  swift_retain();
  v15(v17, a3, a4, a5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
}

uint64_t outlined init with copy of (String, Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_182FC760C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96LL))();
  *a2 = result;
  return result;
}

uint64_t sub_182FC763C(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 104LL))(*a1);
}

uint64_t sub_182FC7668@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120LL))();
  *a2 = result;
  return result;
}

uint64_t sub_182FC7698(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 128LL);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for PropertyListEncoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96LL))();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of PropertyListEncoder.userInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of PropertyListEncoder.userInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of PropertyListEncoder.userInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of PropertyListEncoder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A, B>(_:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

void *initializeBufferWithCopyOfBuffer for PropertyListEncoder._Options(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for PropertyListEncoder._Options()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for PropertyListEncoder._Options(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for PropertyListEncoder._Options(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PropertyListEncoder._Options()
{
  return &type metadata for PropertyListEncoder._Options;
}

uint64_t partial apply for specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:configuration:for:_:)( uint64_t a1)
{
  return specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:)( a1,  v1[4],  v1[5],  v1[2],  v1[3],  (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderXML,  &lazy protocol witness table cache variable for type __PlistEncoderXML and conformance __PlistEncoderXML,  (uint64_t)&protocol conformance descriptor for __PlistEncoderXML);
}

uint64_t partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:)( uint64_t a1)
{
  return specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:)( a1,  v1[4],  v1[5],  v1[2],  v1[3],  (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist,  &lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist,  (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
}

uint64_t outlined copy of _BPlistEncodingFormat.Reference.Backing( uint64_t result, unint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  switch(a4 >> 4)
  {
    case 0:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    case 5:
      goto LABEL_4;
    case 6:
      swift_retain();
      swift_retain();
LABEL_4:
      uint64_t result = swift_retain();
      break;
    case 8:
      uint64_t result = outlined copy of Data._Representation(result, a2);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t URL.ParseStrategy.requiredComponentsValue.getter()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  unint64_t v6 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  unint64_t v7 = *(void *)(v0 + 56);
  unsigned __int8 v24 = *(_BYTE *)(v0 + 72);
  unint64_t v8 = *(void *)(v0 + 88);
  unint64_t v9 = *(void *)(v0 + 104);
  uint64_t v20 = *(void *)(v0 + 80);
  uint64_t v21 = *(void *)(v0 + 96);
  uint64_t v22 = *(void *)(v0 + 112);
  uint64_t v23 = *(void *)(v0 + 64);
  unint64_t v25 = *(void *)(v0 + 120);
  if (v2)
  {
    uint64_t v10 = *(void *)v0;
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v10, v2);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v10, v2);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0LL, 0LL);
    uint64_t v11 = 0LL;
    if (v3) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v11 = 1LL;
    if (v3)
    {
LABEL_3:
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v1, v3);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v1, v3);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0LL, 0LL);
      uint64_t v12 = 0LL;
      if (v6) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t v13 = 4LL;
      if (v7) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }
  }

  uint64_t v12 = 2LL;
  if (!v6) {
    goto LABEL_8;
  }
LABEL_4:
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v6);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v6);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0LL, 0LL);
  uint64_t v13 = 0LL;
  if (v7)
  {
LABEL_5:
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v5, v7);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v5, v7);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0LL, 0LL);
    uint64_t v14 = 0LL;
    goto LABEL_10;
  }

uint64_t specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2)
  {
    if (!a4) {
      return 1LL;
    }
    goto LABEL_8;
  }

  if (a2 == 1)
  {
    if (a4 == 1) {
      return 1LL;
    }
LABEL_8:
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(a1, a2);
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(a3, a4);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(a1, a2);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(a3, a4);
    return 0LL;
  }

  if (a4 < 2) {
    goto LABEL_8;
  }
  if (a1 == a3 && a2 == a4) {
    return 1LL;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(uint64_t a1)
{
}

uint64_t sub_182FC7C98(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v7 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  *(void *)(v5 - 128) = &v22[-v8];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(void *)(v5 - 136) = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v12 = &v22[-v11];
  uint64_t v13 = &v22[*(int *)(v10 + 48) - v11];
  uint64_t v14 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16);
  v14(&v22[-v11], v2, v6);
  v14(v13, *(void *)(v5 - 120), v6);
  uint64_t v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48);
  int v16 = v15(v12, 2LL, v1);
  if (!v16)
  {
    v14(*(_BYTE **)(v5 - 128), (uint64_t)v12, v6);
    if (!v15(v13, 2LL, v1))
    {
      uint64_t v18 = v4;
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v3 + 32))(v4, v13, v1);
      uint64_t v19 = *(void *)(v5 - 128);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v20(v18, v1);
      v20(v19, v1);
      goto LABEL_11;
    }

    (*(void (**)(void, uint64_t))(v3 + 8))(*(void *)(v5 - 128), v1);
    goto LABEL_9;
  }

  if (v16 == 1)
  {
LABEL_9:
    char v17 = 0;
    uint64_t v7 = *(void *)(v5 - 136);
    uint64_t v6 = TupleTypeMetadata2;
    goto LABEL_11;
  }

void type metadata accessor for URL.ParseStrategy.ComponentParseStrategy()
{
}

uint64_t URL.ParseStrategy.defaultValues.getter()
{
  unint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 24);
  unint64_t v4 = *(void *)(v0 + 40);
  uint64_t v237 = *(void *)(v0 + 48);
  uint64_t v238 = *(void *)(v0 + 32);
  int64_t v239 = *(void *)(v0 + 16);
  v240 = *(char **)(v0 + 56);
  unint64_t v5 = *(unsigned __int8 *)(v0 + 72);
  unint64_t v6 = *(void *)(v0 + 88);
  unint64_t v7 = *(void *)(v0 + 104);
  uint64_t v234 = *(void *)(v0 + 96);
  uint64_t v235 = *(void *)(v0 + 80);
  unint64_t v8 = *(void *)(v0 + 120);
  uint64_t v236 = *(void *)(v0 + 112);
  unint64_t v9 = MEMORY[0x18961AFF0];
  unint64_t v242 = MEMORY[0x18961AFF0];
  unint64_t v241 = v4;
  if (v1 < 2) {
    goto LABEL_11;
  }
  unsigned int v233 = *(unsigned __int8 *)(v0 + 72);
  unint64_t v5 = *(void *)(v0 + 88);
  unint64_t v232 = *(void *)(v0 + 104);
  unint64_t v6 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(1LL);
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v11 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_76;
  }

  LOBYTE(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v11;
  if (*(void *)(v9 + 24) >= v14)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_82;
    }
  }

  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, isUniquelyReferenced_nonNull_native);
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(1LL);
    if ((v4 & 1) != (v16 & 1)) {
      goto LABEL_334;
    }
    unint64_t v7 = v15;
  }

  while (1)
  {
    unint64_t v8 = v6;
    unint64_t v6 = v5;
    if ((v4 & 1) != 0)
    {
      char v17 = (unint64_t *)(*(void *)(v9 + 56) + 16 * v7);
      swift_bridgeObjectRelease();
      *char v17 = v2;
      v17[1] = v1;
    }

    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(v7, 1LL, v2, v1, (void *)v9);
    }

    unint64_t v5 = v233;
    unint64_t v4 = v241;
    unint64_t v242 = v9;
    swift_bridgeObjectRelease();
    unint64_t v7 = v232;
LABEL_11:
    if (v3 < 2)
    {
      unint64_t v1 = v9;
      unint64_t v18 = (unint64_t)v240;
      if (v4 >= 2) {
        goto LABEL_29;
      }
LABEL_13:
      unint64_t v3 = v1;
      if (v18 >= 2) {
        goto LABEL_38;
      }
LABEL_14:
      unint64_t v4 = v3;
      if ((v5 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_15:
      unint64_t v3 = v4;
      if (v6 >= 2) {
        goto LABEL_56;
      }
LABEL_16:
      unint64_t v4 = v3;
      if (v7 >= 2) {
        goto LABEL_65;
      }
LABEL_17:
      unint64_t v19 = v4;
      if (v8 < 2) {
        return v19;
      }
      goto LABEL_18;
    }

    swift_bridgeObjectRetain();
    unint64_t v1 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(2LL);
    uint64_t v23 = *(void *)(v9 + 16);
    BOOL v24 = (v22 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24))
    {
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }

    char v26 = v22;
    if (*(void *)(v9 + 24) < v25)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v1);
      unint64_t v1 = v9;
      unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(2LL);
      if ((v26 & 1) != (v28 & 1)) {
        goto LABEL_334;
      }
      unint64_t v2 = v27;
      unint64_t v18 = (unint64_t)v240;
      if ((v26 & 1) == 0) {
        goto LABEL_27;
      }
      goto LABEL_24;
    }

    if ((v1 & 1) != 0)
    {
      unint64_t v1 = v9;
      unint64_t v18 = (unint64_t)v240;
      if ((v22 & 1) == 0) {
        goto LABEL_27;
      }
LABEL_24:
      id v29 = (int64_t *)(*(void *)(v1 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *id v29 = v239;
      v29[1] = v3;
      goto LABEL_28;
    }

    unsigned int v233 = v5;
    unint64_t v96 = v6;
    unint64_t v232 = v7;
    unint64_t v97 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    uint64_t v98 = static _DictionaryStorage.copy(original:)();
    unint64_t v1 = v98;
    if (!*(void *)(v9 + 16)) {
      goto LABEL_308;
    }
    int v99 = (char *)(v98 + 64);
    __srca = (char *)(v9 + 64);
    unint64_t v100 = (unint64_t)((1LL << *(_BYTE *)(v1 + 32)) + 63) >> 6;
    if (v1 != v9 || v99 >= &__srca[8 * v100]) {
      memmove(v99, __srca, 8 * v100);
    }
    int64_t v101 = 0LL;
    *(void *)(v1 + 16) = *(void *)(v9 + 16);
    uint64_t v102 = 1LL << *(_BYTE *)(v9 + 32);
    uint64_t v103 = -1LL;
    if (v102 < 64) {
      uint64_t v103 = ~(-1LL << v102);
    }
    unint64_t v104 = v103 & *(void *)(v9 + 64);
    int64_t v105 = (unint64_t)(v102 + 63) >> 6;
    while (1)
    {
      if (v104)
      {
        unint64_t v106 = __clz(__rbit64(v104));
        v104 &= v104 - 1;
        unint64_t v107 = v106 | (v101 << 6);
        goto LABEL_123;
      }

      int64_t v115 = v101 + 1;
      if (__OFADD__(v101, 1LL)) {
        goto LABEL_321;
      }
      if (v115 >= v105) {
        goto LABEL_308;
      }
      unint64_t v116 = *(void *)&__srca[8 * v115];
      ++v101;
      if (!v116)
      {
        int64_t v101 = v115 + 1;
        if (v115 + 1 >= v105) {
          goto LABEL_308;
        }
        unint64_t v116 = *(void *)&__srca[8 * v101];
        if (!v116)
        {
          int64_t v101 = v115 + 2;
          if (v115 + 2 >= v105) {
            goto LABEL_308;
          }
          unint64_t v116 = *(void *)&__srca[8 * v101];
          if (!v116)
          {
            int64_t v101 = v115 + 3;
            if (v115 + 3 >= v105) {
              goto LABEL_308;
            }
            unint64_t v116 = *(void *)&__srca[8 * v101];
            if (!v116)
            {
              int64_t v101 = v115 + 4;
              if (v115 + 4 >= v105) {
                goto LABEL_308;
              }
              unint64_t v116 = *(void *)&__srca[8 * v101];
              if (!v116)
              {
                int64_t v101 = v115 + 5;
                if (v115 + 5 >= v105) {
                  goto LABEL_308;
                }
                unint64_t v116 = *(void *)&__srca[8 * v101];
                if (!v116)
                {
                  int64_t v101 = v115 + 6;
                  if (v115 + 6 >= v105) {
                    goto LABEL_308;
                  }
                  unint64_t v116 = *(void *)&__srca[8 * v101];
                  if (!v116) {
                    break;
                  }
                }
              }
            }
          }
        }
      }

LABEL_146:
      unint64_t v104 = (v116 - 1) & v116;
      unint64_t v107 = __clz(__rbit64(v116)) + (v101 << 6);
LABEL_123:
      uint64_t v108 = 8 * v107;
      uint64_t v109 = *(void *)(*(void *)(v9 + 48) + 8 * v107);
      uint64_t v110 = 16 * v107;
      uint64_t v111 = (uint64_t *)(*(void *)(v9 + 56) + v110);
      uint64_t v113 = *v111;
      uint64_t v112 = v111[1];
      *(void *)(*(void *)(v1 + 48) + v108) = v109;
      unint64_t v114 = (void *)(*(void *)(v1 + 56) + v110);
      *unint64_t v114 = v113;
      v114[1] = v112;
      swift_bridgeObjectRetain();
    }

    int64_t v117 = v115 + 7;
    if (v117 >= v105) {
      goto LABEL_308;
    }
    unint64_t v116 = *(void *)&__srca[8 * v117];
    if (v116)
    {
      int64_t v101 = v117;
      goto LABEL_146;
    }

    while (1)
    {
      int64_t v101 = v117 + 1;
      if (__OFADD__(v117, 1LL)) {
        goto LABEL_328;
      }
      if (v101 >= v105) {
        break;
      }
      unint64_t v116 = *(void *)&__srca[8 * v101];
      ++v117;
      if (v116) {
        goto LABEL_146;
      }
    }

          unint64_t v122 = 256LL;
        }

      unint64_t v122 = v93;
      if ((v107 & 1) != 0) {
        goto LABEL_147;
      }
      char v16 = v106;
      goto LABEL_149;
    }

    swift_bridgeObjectRelease();
LABEL_104:
    LODWORD(v210) = 0;
    goto LABEL_105;
  }

  if ((BYTE8(v268[1]) & 1) != 0)
  {
    unint64_t v209 = v25;
    *(void *)&v230 = v58;
    *((void *)&v230 + 1) = v57;
    MEMORY[0x1895F8858](v59);
    unint64_t v183 = (uint64_t)&v230;
    unint64_t v184 = MEMORY[0x18961AFF8];
    outlined retain of String?((uint64_t)v270);
    swift_bridgeObjectRetain();
    unint64_t v69 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v182,  v58,  v57);
    if (v70 == 1)
    {
      uint64_t v71 = v230;
      swift_bridgeObjectRetain();
      BOOL v66 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v71,  *((unint64_t *)&v71 + 1),  MEMORY[0x18961AFF8]);
      char v68 = v72;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }

    else
    {
      BOOL v66 = (uint64_t)v69;
      char v68 = v70;
      swift_bridgeObjectRelease_n();
    }

    uint64_t v23 = v211;
    outlined release of URLComponents?(v253);
    uint64_t v25 = v209;
    if (!v68) {
      goto LABEL_104;
    }
    goto LABEL_94;
  }

  if ((v57 & 0x1000000000000000LL) != 0)
  {
    outlined retain of String?((uint64_t)v270);
    swift_bridgeObjectRetain();
  }

  else
  {
    if ((v57 & 0x2000000000000000LL) != 0)
    {
      *(void *)&v230 = v58;
      *((void *)&v230 + 1) = v57 & 0xFFFFFFFFFFFFFFLL;
      *(void *)&uint64_t v221 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((void *)&v221 + 1) = 0LL;
      swift_bridgeObjectRetain();
      outlined retain of String?((uint64_t)v270);
      swift_bridgeObjectRetain();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v230,  HIBYTE(v57) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v221,  0,  (unsigned __int8 *)&v230,  HIBYTE(v57) & 0xF,  (uint64_t *)&v212);
      char v68 = *((void *)&v212 + 1);
      BOOL v66 = v212;
      swift_release();
    }

    else
    {
      if ((v58 & 0x1000000000000000LL) != 0)
      {
        uint64_t v65 = (unsigned __int8 *)((v57 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }

      else
      {
        uint64_t v65 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        uint64_t v63 = v174;
      }

      *(void *)&v230 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((void *)&v230 + 1) = 0LL;
      swift_bridgeObjectRetain();
      outlined retain of String?((uint64_t)v270);
      swift_bridgeObjectRetain();
      BOOL v66 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v65,  v63,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v230,  0,  v65,  v63);
      char v68 = v67;
    }

    swift_bridgeObjectRelease();
    if (v68 != 1)
    {
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents?(v253);
      uint64_t v23 = v211;
      if (!v68) {
        goto LABEL_104;
      }
      goto LABEL_94;
    }
  }

  *(void *)&v230 = v58;
  *((void *)&v230 + 1) = v57;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  uint64_t v73 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v74 = objc_msgSend(v73, sel__fastCharacterContents);
  uint64_t v75 = v73;
  uint64_t v185 = v16;
  if (!v74)
  {
    *(void *)&v230 = v58;
    *((void *)&v230 + 1) = v57;
    swift_bridgeObjectRetain();
    unint64_t v84 = String.init<A>(_:)();
    uint64_t v86 = v85;
    if ((v85 & 0x1000000000000000LL) != 0)
    {
      unint64_t v84 = static String._copying(_:)();
      int64_t v180 = v179;
      swift_bridgeObjectRelease();
      uint64_t v86 = v180;
    }

    if ((v86 & 0x2000000000000000LL) != 0)
    {
      *(void *)&v230 = v84;
      *((void *)&v230 + 1) = v86 & 0xFFFFFFFFFFFFFFLL;
      *(void *)&uint64_t v221 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((void *)&v221 + 1) = 0LL;
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v230,  HIBYTE(v86) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v221,  0,  (unsigned __int8 *)&v230,  HIBYTE(v86) & 0xF,  (uint64_t *)&v212);
      char v68 = *((void *)&v212 + 1);
      BOOL v66 = v212;
      swift_release();
    }

    else
    {
      if ((v84 & 0x1000000000000000LL) != 0)
      {
        uint64_t v87 = (unsigned __int8 *)((v86 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v88 = v84 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v87 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }

      *(void *)&v230 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((void *)&v230 + 1) = 0LL;
      BOOL v66 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v87,  v88,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v230,  0,  v87,  v88);
      char v68 = v89;
    }

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    outlined release of URLComponents?(v253);
    uint64_t v23 = v211;
    char v16 = v185;
    if (!v68) {
      goto LABEL_104;
    }
    goto LABEL_94;
  }

  *(void *)&v230 = v58;
  *((void *)&v230 + 1) = v57;
  StringProtocol._ephemeralString.getter();
  char v76 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  unint64_t v77 = objc_msgSend(v76, sel_length);
  uint64_t v78 = swift_unknownObjectRelease();
  uint64_t v79 = MEMORY[0x1895F8858](v78);
  LOBYTE(v183) = 0;
  MEMORY[0x1895F8858](v79);
  v181[2] = v74;
  v181[3] = v77;
  BOOL v66 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v74,  (uint64_t)v77,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  v80,  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)v181);
  char v68 = v81;
  swift_bridgeObjectRelease_n();
  outlined release of URLComponents?(v253);
  if (v68)
  {
    uint64_t v23 = v211;
    char v16 = v185;
    goto LABEL_94;
  }

  LODWORD(v210) = 0;
  uint64_t v23 = v211;
  char v16 = v185;
LABEL_105:
  *(void *)&uint64_t v221 = v16;
  *((void *)&v221 + 1) = v23;
  *(void *)&unsigned int v222 = v25;
  LOBYTE(v212) = v193;
  *((void *)&v212 + 1) = v192;
  *(void *)&uint64_t v213 = v191;
  uint64_t v236 = v248;
  uint64_t v237 = v249;
  v238[0] = v250[0];
  *(_OWORD *)((char *)v238 + 10) = *(_OWORD *)((char *)v250 + 10);
  unint64_t v232 = v244;
  unsigned int v233 = v245;
  uint64_t v234 = v246;
  uint64_t v235 = v247;
  v230 = v242;
  v231 = v243;
  unint64_t v97 = URLComponents.port.getter();
  BYTE8(v239) = 0;
  BYTE13(v239) = 0;
  if ((v98 & 1) != 0 || (v97 & 0x8000000000000000LL) == 0)
  {
    *((void *)&v240[4] + 1) = v97;
    LOBYTE(v241[0]) = v98 & 1;
LABEL_109:
    *(void *)&uint64_t v221 = v16;
    *((void *)&v221 + 1) = v23;
    *(void *)&unsigned int v222 = v25;
    LOBYTE(v212) = v196;
    *((void *)&v212 + 1) = v195;
    *(void *)&uint64_t v213 = v194;
    if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v221, (unsigned __int8 *)&v212) & 1) != 0)
    {
      outlined init with take of LocalePreferences?( (uint64_t)v252,  (uint64_t)&v230,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
      outlined retain of URLComponents((uint64_t)&v230);
      int v99 = (unint64_t)URLComponents._URLComponents.path.getter();
      int64_t v101 = v100;
      outlined release of URLComponents?(v253);
      BYTE8(v239) = 0;
      BYTE14(v239) = 0;
      uint64_t v102 = HIBYTE(v101) & 0xF;
      if ((v101 & 0x2000000000000000LL) == 0) {
        uint64_t v102 = v99 & 0xFFFFFFFFFFFFLL;
      }
      if (v102)
      {
        uint64_t v103 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v99, v101);
        int64_t v105 = v104;
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v103 = 0LL;
        int64_t v105 = 0xE000000000000000LL;
      }

      swift_bridgeObjectRelease();
      *((void *)&v241[0] + 1) = v103;
      *(void *)&v241[1] = v105;
      uint64_t v23 = v211;
    }

    *(void *)&uint64_t v221 = v16;
    *((void *)&v221 + 1) = v23;
    *(void *)&unsigned int v222 = v25;
    LOBYTE(v212) = v199;
    *((void *)&v212 + 1) = v198;
    *(void *)&uint64_t v213 = v197;
    if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v221, (unsigned __int8 *)&v212) & 1) == 0)
    {
LABEL_160:
      *(void *)&uint64_t v221 = v16;
      *((void *)&v221 + 1) = v23;
      *(void *)&unsigned int v222 = v25;
      LOBYTE(v212) = v202;
      *((void *)&v212 + 1) = v201;
      *(void *)&uint64_t v213 = v200;
      if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v221, (unsigned __int8 *)&v212) & 1) == 0)
      {
LABEL_177:
        unint64_t v227 = v241[0];
        int64_t v228 = v241[1];
        v229[0] = v241[2];
        *(_OWORD *)((char *)v229 + 10) = *(_OWORD *)((char *)&v241[2] + 10);
        uint64_t v223 = v240[1];
        uint64_t v224 = v240[2];
        unsigned int v225 = v240[3];
        int64_t v226 = v240[4];
        uint64_t v221 = v239;
        unsigned int v222 = v240[0];
        unint64_t v217 = v240[4];
        unint64_t v218 = v241[0];
        uint64_t v219 = v241[1];
        v220[0] = v241[2];
        *(_OWORD *)((char *)v220 + 10) = *(_OWORD *)((char *)&v241[2] + 10);
        uint64_t v214 = v240[1];
        unint64_t v215 = v240[2];
        int64_t v216 = v240[3];
        int64_t v212 = v239;
        uint64_t v213 = v240[0];
        outlined retain of URLComponents((uint64_t)&v221);
        char v22 = URL.FormatStyle.generateFormattedString(from:useEncodedHost:)(&v212, v210 & 1);
        outlined release of URLComponents?(v253);
        outlined release of URLComponents((uint64_t)&v221);
        outlined release of URLComponents((uint64_t)&v221);
        return v22;
      }

      unsigned __int16 v134 = outlined retain of URLComponents((uint64_t)&v242);
      uint64_t v135 = (unint64_t)URLComponents._URLComponents.fragment.getter(v134);
      unint64_t v137 = v136;
      outlined release of URLComponents?(v253);
      BYTE8(v239) = 0;
      LOBYTE(v240[0]) = 0;
      if (v137)
      {
        if ((v137 & 0x1000000000000000LL) != 0)
        {
          *(void *)&v230 = v135;
          *((void *)&v230 + 1) = v137;
          lazy protocol witness table accessor for type String and conformance String();
          swift_bridgeObjectRetain();
          StringProtocol._ephemeralString.getter();
          uint64_t v168 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v169 = (unsigned __int16 *)objc_msgSend(v168, sel__fastCharacterContents);
          unint64_t v170 = v168;
          if (v169)
          {
            *(void *)&v230 = v135;
            *((void *)&v230 + 1) = v137;
            StringProtocol._ephemeralString.getter();
            unint64_t v171 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            unint64_t v172 = objc_msgSend(v171, sel_length);
            swift_unknownObjectRelease();
            uint64_t v173 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v169,  (uint64_t)v172,  0x40u,  0);
          }

          else
          {
            uint64_t v173 = specialized Sequence.allSatisfy(_:)(v135, v137, 64);
          }

          uint64_t v178 = v173;
          int64_t v140 = swift_bridgeObjectRelease();
          if ((v178 & 1) == 0) {
            goto LABEL_168;
          }
        }

        else
        {
          if ((v137 & 0x2000000000000000LL) != 0)
          {
            unint64_t v139 = HIBYTE(v137) & 0xF;
            *(void *)&v230 = v135;
            *((void *)&v230 + 1) = v137 & 0xFFFFFFFFFFFFFFLL;
            int64_t v138 = (char *)&v230;
          }

          else if ((v135 & 0x1000000000000000LL) != 0)
          {
            int64_t v138 = (char *)((v137 & 0xFFFFFFFFFFFFFFFLL) + 32);
            unint64_t v139 = v135 & 0xFFFFFFFFFFFFLL;
          }

          else
          {
            int64_t v138 = (char *)_StringObject.sharedUTF8.getter();
          }

          int64_t v140 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v138,  v139,  0x40u,  0);
          if ((v140 & 1) == 0)
          {
LABEL_168:
            unint64_t v141 = HIBYTE(v137) & 0xF;
            if ((v137 & 0x2000000000000000LL) == 0) {
              unint64_t v141 = v135 & 0xFFFFFFFFFFFFLL;
            }
            if (v141)
            {
              *(void *)&v230 = v135;
              *((void *)&v230 + 1) = v137;
              MEMORY[0x1895F8858](v140);
              unint64_t v183 = (uint64_t)&v230;
              LOBYTE(v184) = 64;
              swift_bridgeObjectRetain();
              unint64_t v142 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (uint64_t)v182,  v135,  v137);
              if (v143)
              {
                uint64_t v135 = (unint64_t)v142;
                unsigned __int16 v144 = v143;
                swift_bridgeObjectRelease_n();
              }

              else
              {
                unint64_t v146 = *((void *)&v230 + 1);
                unint64_t v145 = v230;
                swift_bridgeObjectRetain();
                uint64_t v135 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v145, v146, 0x40u);
                unsigned __int16 v144 = v147;
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
              }

              unint64_t v137 = v144;
            }

            else
            {
              swift_bridgeObjectRelease();
              uint64_t v135 = 0LL;
              unint64_t v137 = 0xE000000000000000LL;
            }
          }
        }
      }

      swift_bridgeObjectRelease();
      *((void *)&v241[2] + 1) = v135;
      *(void *)&v241[3] = v137;
      goto LABEL_177;
    }

    uint64_t v109 = outlined retain of URLComponents((uint64_t)&v242);
    uint64_t v110 = (unint64_t)URLComponents._URLComponents.query.getter(v109);
    uint64_t v112 = v111;
    outlined release of URLComponents?(v253);
    BYTE8(v239) = 0;
    HIBYTE(v239) = 0;
    if (v112)
    {
      if ((v112 & 0x1000000000000000LL) != 0)
      {
        *(void *)&v230 = v110;
        *((void *)&v230 + 1) = v112;
        int64_t v161 = lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        unint64_t v209 = v161;
        StringProtocol._ephemeralString.getter();
        unint64_t v162 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        int64_t v163 = (unsigned __int16 *)objc_msgSend(v162, sel__fastCharacterContents);
        uint64_t v164 = v162;
        if (v163)
        {
          *(void *)&v230 = v110;
          *((void *)&v230 + 1) = v112;
          StringProtocol._ephemeralString.getter();
          uint64_t v165 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          unint64_t v166 = objc_msgSend(v165, sel_length);
          swift_unknownObjectRelease();
          unint64_t v167 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v163,  (uint64_t)v166,  0x40u,  0);
        }

        else
        {
          unint64_t v167 = specialized Sequence.allSatisfy(_:)(v110, v112, 64);
        }

        uint64_t v177 = v167;
        int64_t v115 = swift_bridgeObjectRelease();
        if ((v177 & 1) == 0) {
          goto LABEL_130;
        }
      }

      else
      {
        if ((v112 & 0x2000000000000000LL) != 0)
        {
          unint64_t v114 = HIBYTE(v112) & 0xF;
          *(void *)&v230 = v110;
          *((void *)&v230 + 1) = v112 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v113 = (char *)&v230;
        }

        else if ((v110 & 0x1000000000000000LL) != 0)
        {
          uint64_t v113 = (char *)((v112 & 0xFFFFFFFFFFFFFFFLL) + 32);
          unint64_t v114 = v110 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          uint64_t v113 = (char *)_StringObject.sharedUTF8.getter();
        }

        int64_t v115 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v113,  v114,  0x40u,  0);
        if ((v115 & 1) == 0)
        {
LABEL_130:
          unint64_t v116 = HIBYTE(v112) & 0xF;
          if ((v112 & 0x2000000000000000LL) == 0) {
            unint64_t v116 = v110 & 0xFFFFFFFFFFFFLL;
          }
          if (v116)
          {
            *(void *)&v230 = v110;
            *((void *)&v230 + 1) = v112;
            MEMORY[0x1895F8858](v115);
            unint64_t v183 = (uint64_t)&v230;
            LOBYTE(v184) = 64;
            swift_bridgeObjectRetain();
            int64_t v117 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v182,  v110,  v112);
            if (v118)
            {
              uint64_t v110 = (unint64_t)v117;
              unint64_t v119 = v118;
              swift_bridgeObjectRelease_n();
            }

            else
            {
              uint64_t v132 = *((void *)&v230 + 1);
              uint64_t v131 = v230;
              swift_bridgeObjectRetain();
              uint64_t v110 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v131, v132, 0x40u);
              unint64_t v119 = v133;
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
            }

            uint64_t v112 = v119;
          }

          else
          {
            swift_bridgeObjectRelease();
            uint64_t v110 = 0LL;
            uint64_t v112 = 0xE000000000000000LL;
          }
        }
      }
    }

    swift_bridgeObjectRelease();
    *((void *)&v241[1] + 1) = v110;
    *(void *)&v241[2] = v112;
    uint64_t v23 = v211;
    goto LABEL_160;
  }

  LODWORD(v184) = 0;
  unint64_t v183 = 764LL;
LABEL_211:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
    if ((v39 & 1) != 0) {
      goto LABEL_36;
    }
LABEL_147:
    *(void *)(v23 + 8 * (v35 >> 6) + 64) |= 1LL << v35;
    *(_BYTE *)(*(void *)(v23 + 48) + v35) = v26;
    *(void *)(*(void *)(v23 + 56) + 8 * v35) = v29;
    int64_t v101 = *(void *)(v23 + 16);
    uint64_t v52 = __OFADD__(v101, 1LL);
    char v53 = v101 + 1;
    if (v52)
    {
      __break(1u);
      goto LABEL_150;
    }

    outlined release of Locale((uint64_t)v428);
LABEL_147:
    v337 = v52;
    uint64_t result = outlined release of AttributedString.Runs((uint64_t)v445);
    goto LABEL_148;
  }

  BigString.utf8.getter();
  unint64_t v139 = (uint64_t)v370;
  unint64_t v137 = v371;
  int64_t v140 = BigString.UTF8View.index(before:)();
  v366 = v142;
  v367 = v141;
  v365 = v143;
  outlined release of Locale((uint64_t)&v402);
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  uint64_t result = outlined release of Locale((uint64_t)&v403);
  if (v128 < v140 >> 10)
  {
LABEL_432:
    __break(1u);
    goto LABEL_433;
  }

  v429[0] = v140;
  v429[1] = v367;
  v429[2] = v366;
  v429[3] = v365;
  v429[4] = v132;
  v429[5] = v135;
  v429[6] = v137;
  v429[7] = v139;
  specialized BidirectionalCollection<>._getBlock(for:in:)(1LL, v429, &v379);
  uint64_t result = outlined release of Locale((uint64_t)&v404);
  BOOL v24 = v359;
  uint64_t v23 = v364;
  uint64_t v52 = v337;
  uint64_t v136 = v342;
  if (v382 == 2) {
    goto LABEL_142;
  }
  uint64_t v52 = v379;
  if (v128 >= v379 >> 10)
  {
    v338 = v380;
    uint64_t v136 = (unint64_t)v381;
    char v53 = v382;
    goto LABEL_142;
  }

  outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v186);
LABEL_147:
  memcpy(__dst, __src, sizeof(__dst));
  outlined release of AttributedString.Runs((uint64_t)__dst);
  outlined release of AttributedString.Runs((uint64_t)&v209);
LABEL_148:
  outlined release of AttributedString.Runs((uint64_t)v222);
  outlined release of AttributedString.Runs((uint64_t)&v209);
  return 0LL;
}

LABEL_308:
    swift_bridgeObjectRelease();
    unint64_t v8 = v97;
    unint64_t v7 = v232;
    unint64_t v6 = v96;
    unint64_t v5 = v233;
    unint64_t v18 = (unint64_t)v240;
    if ((v26 & 1) != 0) {
      goto LABEL_24;
    }
LABEL_27:
    specialized _NativeDictionary._insert(at:key:value:)(v2, 2LL, v239, v3, (void *)v1);
LABEL_28:
    LOBYTE(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v241;
    unint64_t v242 = v1;
    swift_bridgeObjectRelease();
    if (v241 < 2) {
      goto LABEL_13;
    }
LABEL_29:
    swift_bridgeObjectRetain();
    unint64_t v3 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(4LL);
    uint64_t v31 = *(void *)(v1 + 16);
    BOOL v32 = (v30 & 1) == 0;
    uint64_t v33 = v31 + v32;
    if (__OFADD__(v31, v32)) {
      goto LABEL_77;
    }
    char v34 = v30;
    if (*(void *)(v1 + 24) < v33)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, v3);
      unint64_t v3 = v1;
      unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(4LL);
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_334;
      }
      unint64_t v2 = v35;
      if ((v34 & 1) == 0) {
        goto LABEL_36;
      }
      goto LABEL_33;
    }

    if ((v3 & 1) != 0)
    {
      unint64_t v3 = v1;
      if ((v30 & 1) == 0) {
        goto LABEL_36;
      }
      goto LABEL_33;
    }

    unsigned int v233 = v5;
    unint64_t v118 = v6;
    unint64_t v232 = v7;
    unint64_t v119 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    uint64_t v120 = static _DictionaryStorage.copy(original:)();
    unint64_t v3 = v120;
    if (!*(void *)(v1 + 16)) {
      goto LABEL_310;
    }
    uint64_t v121 = (void *)(v120 + 64);
    unint64_t v122 = v1 + 64;
    unint64_t v123 = (unint64_t)((1LL << *(_BYTE *)(v3 + 32)) + 63) >> 6;
    int64_t v124 = 0LL;
    *(void *)(v3 + 16) = *(void *)(v1 + 16);
    uint64_t v125 = 1LL << *(_BYTE *)(v1 + 32);
    uint64_t v126 = -1LL;
    if (v125 < 64) {
      uint64_t v126 = ~(-1LL << v125);
    }
    unint64_t v127 = v126 & *(void *)(v1 + 64);
    int64_t v128 = (unint64_t)(v125 + 63) >> 6;
    while (2)
    {
      if (v127)
      {
        unint64_t v129 = __clz(__rbit64(v127));
        v127 &= v127 - 1;
        unint64_t v130 = v129 | (v124 << 6);
LABEL_155:
        uint64_t v131 = 8 * v130;
        uint64_t v132 = *(void *)(*(void *)(v1 + 48) + 8 * v130);
        uint64_t v133 = 16 * v130;
        unsigned __int16 v134 = (uint64_t *)(*(void *)(v1 + 56) + v133);
        uint64_t v136 = *v134;
        uint64_t v135 = v134[1];
        *(void *)(*(void *)(v3 + 48) + v131) = v132;
        unint64_t v137 = (void *)(*(void *)(v3 + 56) + v133);
        *unint64_t v137 = v136;
        v137[1] = v135;
        swift_bridgeObjectRetain();
        continue;
      }

      break;
    }

    int64_t v138 = v124 + 1;
    if (__OFADD__(v124, 1LL)) {
      goto LABEL_322;
    }
    unint64_t v18 = (unint64_t)v240;
    if (v138 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v138);
    ++v124;
    if (v139) {
      goto LABEL_178;
    }
    int64_t v124 = v138 + 1;
    if (v138 + 1 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v124);
    if (v139) {
      goto LABEL_178;
    }
    int64_t v124 = v138 + 2;
    if (v138 + 2 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v124);
    if (v139) {
      goto LABEL_178;
    }
    int64_t v124 = v138 + 3;
    if (v138 + 3 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v124);
    if (v139) {
      goto LABEL_178;
    }
    int64_t v124 = v138 + 4;
    if (v138 + 4 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v124);
    if (v139) {
      goto LABEL_178;
    }
    int64_t v124 = v138 + 5;
    if (v138 + 5 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v124);
    if (v139) {
      goto LABEL_178;
    }
    int64_t v124 = v138 + 6;
    if (v138 + 6 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v124);
    if (v139)
    {
LABEL_178:
      unint64_t v127 = (v139 - 1) & v139;
      unint64_t v130 = __clz(__rbit64(v139)) + (v124 << 6);
      goto LABEL_155;
    }

    int64_t v140 = v138 + 7;
    if (v140 >= v128) {
      goto LABEL_310;
    }
    unint64_t v139 = *(void *)(v122 + 8 * v140);
    if (v139)
    {
      int64_t v124 = v140;
      goto LABEL_178;
    }

    while (1)
    {
      int64_t v124 = v140 + 1;
      if (__OFADD__(v140, 1LL)) {
        goto LABEL_329;
      }
      unint64_t v18 = (unint64_t)v240;
      if (v124 >= v128) {
        break;
      }
      unint64_t v139 = *(void *)(v122 + 8 * v124);
      ++v140;
      if (v139) {
        goto LABEL_178;
      }
    }

            v284 = 256LL;
          }

  swift_release();
  v279 = v327 >> 10;
  if (!specialized Range.isEmpty.getter())
  {
    v294 = *(_OWORD *)(v336 + 16);
    v419[0] = *(_OWORD *)v336;
    v419[1] = v294;
    v419[2] = *(_OWORD *)(v336 + 32);
    uint64_t result = v329 - 1;
    if (__OFSUB__(v329, 1LL)) {
      goto LABEL_418;
    }
    if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v329) & 1) != 0)
    {
      v295 = *(_OWORD *)v336;
      v296 = *(_OWORD *)(v336 + 16);
      v418 = *(_OWORD *)(v336 + 32);
      v417[1] = v296;
      v417[0] = v295;
      v297 = *(_OWORD *)v336;
      v465 = *(_OWORD *)(v336 + 16);
      v466 = v418;
      v464 = v297;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v464, (uint64_t)v467);
      outlined retain of Locale((uint64_t)v467);
      v298 = BigString.index(before:)();
      v300 = v299;
      v302 = v301;
      v304 = v303;
      outlined release of Locale((uint64_t)v417);
      AttributedString.Guts._paragraphExtending(from:)(v298, v300, v302, v304, (uint64_t)&v353);
      v291 = Range<>._utf8OffsetRange.getter();
      v293 = v305;
      v306 = 0;
    }

    else
    {
LABEL_318:
      v291 = 0LL;
      v293 = 0LL;
      v306 = 1;
    }

    v307 = *(_OWORD *)(v336 + 16);
    v414 = *(_OWORD *)v336;
    v415 = v307;
    v416 = *(_OWORD *)(v336 + 32);
    if ((v306 & 1) != 0)
    {
      if (v328 < 1) {
        goto LABEL_237;
      }
    }

    else if (v293 >= v328)
    {
LABEL_333:
      v306 = 0;
      goto LABEL_334;
    }

    if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v328 - 1, v328) & 1) != 0)
    {
      v309 = *(_OWORD *)v336;
      v310 = *(_OWORD *)(v336 + 16);
      v413 = *(_OWORD *)(v336 + 32);
      v412[1] = v310;
      v412[0] = v309;
      v311 = *(_OWORD *)v336;
      v367 = *(_OWORD *)(v336 + 16);
      v368 = v413;
      v366 = v311;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v366, (uint64_t)v468);
      outlined retain of Locale((uint64_t)v468);
      v312 = BigString.index(before:)();
      v314 = v313;
      v316 = v315;
      v318 = v317;
      outlined release of Locale((uint64_t)v412);
      AttributedString.Guts._paragraphExtending(from:)(v312, v314, v316, v318, (uint64_t)&v359);
      v319 = Range<>._utf8OffsetRange.getter();
      v321 = v320;
      v322 = 1;
      goto LABEL_335;
    }

LABEL_310:
    swift_bridgeObjectRelease();
    unint64_t v8 = v119;
    unint64_t v7 = v232;
    unint64_t v6 = v118;
    unint64_t v5 = v233;
    if ((v34 & 1) != 0)
    {
LABEL_33:
      Swift::String v37 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *Swift::String v37 = v238;
      v37[1] = v241;
      goto LABEL_37;
    }

                              v326 = 0LL;
                              v328 = 0LL;
                              v329 = 0;
LABEL_311:
                              if ((v38 & 1) == 0 && a1 < v29)
                              {
                                v383 = 0LL;
                                v384 = 0LL;
                                AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v383, v36, a1, v29);
                              }

                              else {
                                v330 = 0;
                              }
                              if (v330 == 1)
                              {
                                v383 = 0LL;
                                v384 = 0LL;
                                AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v383, v326, v336, v328);
                              }

                              goto LABEL_206;
                            }

                            v280 = *(void *)(v274 + 8 * v273);
                            if (!v280)
                            {
                              v281 = v273 + 1;
                              if (v273 + 1 >= v372) {
                                goto LABEL_279;
                              }
                              v280 = *(void *)(v274 + 8 * v281);
                              if (!v280)
                              {
                                v281 = v273 + 2;
                                if (v273 + 2 >= v372) {
                                  goto LABEL_279;
                                }
                                v280 = *(void *)(v274 + 8 * v281);
                                if (!v280)
                                {
                                  v281 = v273 + 3;
                                  if (v273 + 3 >= v372) {
                                    goto LABEL_279;
                                  }
                                  v280 = *(void *)(v274 + 8 * v281);
                                  if (!v280)
                                  {
                                    while (1)
                                    {
                                      v273 = v281 + 1;
                                      if (__OFADD__(v281, 1LL)) {
                                        goto LABEL_359;
                                      }
                                      if (v273 >= v372) {
                                        goto LABEL_279;
                                      }
                                      v280 = *(void *)(v274 + 8 * v273);
                                      ++v281;
                                      if (v280) {
                                        goto LABEL_269;
                                      }
                                    }
                                  }
                                }
                              }

                              v273 = v281;
                            }

          *(void *)&v361 = v352;
          *((void *)&v361 + 1) = v345;
          *(void *)&v362 = v344;
          *((void *)&v362 + 1) = v343;
          *(void *)&v363 = v254;
          *((void *)&v363 + 1) = v262;
          *(void *)&v364 = v256;
          *((void *)&v364 + 1) = v257;
          v265 = *(void *)(v150 + 16);
          v360 = v262;
          if (v265)
          {
            v266 = 40LL;
            while (!*(void *)(v150 + v266))
            {
              v266 += 16LL;
              if (!--v265) {
                goto LABEL_314;
              }
            }

            *(void *)&v383 = MEMORY[0x18961AFE8];
            swift_bridgeObjectRetain();
            v293 = (unint64_t *)(v150 + 40);
            do
            {
              v298 = *v293;
              if (*v293)
              {
                v299 = *(v293 - 1);
                if ((v298 & 0x2000000000000000LL) != 0 ? HIBYTE(v298) & 0xF : v299 & 0xFFFFFFFFFFFFLL)
                {
                  if ((v298 & 0x1000000000000000LL) != 0)
                  {
                    v294 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                  }

                  else
                  {
                    if ((v298 & 0x2000000000000000LL) != 0)
                    {
                      v368 = *(v293 - 1);
                      v369 = v298 & 0xFFFFFFFFFFFFFFLL;
                      swift_bridgeObjectRetain();
                    }

                    else
                    {
                      if ((v299 & 0x1000000000000000LL) == 0) {
                        _StringObject.sharedUTF8.getter();
                      }
                      swift_bridgeObjectRetain();
                    }

                    v294 = _decodeScalar(_:startingAt:)();
                    swift_bridgeObjectRelease();
                  }

                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  v295 = *(void *)(v383 + 16);
                  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v295);
                  v296 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v295, v294);
                  destructiveProjectEnumData for PredicateCodableError(v296, v297);
                }
              }

              v293 += 2;
              --v261;
            }

            while (v261);
            swift_bridgeObjectRelease();
            v301 = v383;
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)v411);
            v302 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v301);
            v304 = v303;
            v306 = v305;
            v308 = v307;
            swift_bridgeObjectRelease();
            outlined release of Locale((uint64_t)&v368);
            outlined release of Locale((uint64_t)v414);
            uint64_t result = outlined release of AttributedString.Runs((uint64_t)v434);
            if (v308 != 2)
            {
              if (v334 > v302 >> 10)
              {
LABEL_419:
                __break(1u);
                goto LABEL_420;
              }

              v254 = v302;
              v360 = v304;
              v256 = v306;
              v257 = v308;
            }

                              v333 = 0LL;
                              v335 = 0LL;
                              v336 = 0;
LABEL_311:
                              if ((v38 & 1) == 0 && a1 < v107)
                              {
                                v388 = 0LL;
                                v389 = 0LL;
                                AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v388, v35, a1, v107);
                              }

                              else {
                                v337 = 0;
                              }
                              if (v337 == 1)
                              {
                                v388 = 0LL;
                                v389 = 0LL;
                                AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v388, v333, v343, v335);
                              }

                              goto LABEL_206;
                            }

                            v287 = *(void *)(v281 + 8 * v280);
                            if (!v287)
                            {
                              v288 = v280 + 1;
                              if (v280 + 1 >= v377) {
                                goto LABEL_279;
                              }
                              v287 = *(void *)(v281 + 8 * v288);
                              if (!v287)
                              {
                                v288 = v280 + 2;
                                if (v280 + 2 >= v377) {
                                  goto LABEL_279;
                                }
                                v287 = *(void *)(v281 + 8 * v288);
                                if (!v287)
                                {
                                  v288 = v280 + 3;
                                  if (v280 + 3 >= v377) {
                                    goto LABEL_279;
                                  }
                                  v287 = *(void *)(v281 + 8 * v288);
                                  if (!v287)
                                  {
                                    while (1)
                                    {
                                      v280 = v288 + 1;
                                      if (__OFADD__(v288, 1LL)) {
                                        goto LABEL_359;
                                      }
                                      if (v280 >= v377) {
                                        goto LABEL_279;
                                      }
                                      v287 = *(void *)(v281 + 8 * v280);
                                      ++v288;
                                      if (v287) {
                                        goto LABEL_269;
                                      }
                                    }
                                  }
                                }
                              }

                              v280 = v288;
                            }

LABEL_312:
    swift_bridgeObjectRelease();
    unint64_t v8 = v142;
    unint64_t v7 = v141;
    unint64_t v6 = v241;
    unint64_t v5 = v233;
    uint64_t v44 = v237;
    if ((v1 & 1) != 0)
    {
LABEL_42:
      id v45 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *id v45 = v44;
      v45[1] = v18;
      goto LABEL_46;
    }

                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    uint64_t v136 = v134 & 0xFFFFFFFFFFFFF0FFLL | (v145 << 8);
                    uint64_t v133 = v152;
                  }

                  swift_unknownObjectRetain();
                  specialized Rope._Node.distanceFromStart<A>(to:in:)(v133, v136, v26, v9, v155);
                  uint64_t result = swift_unknownObjectRelease_n();
                  uint64_t v131 = v156;
                  char v26 = a2;
                  uint64_t v132 = v153;
                }

                else
                {
                  if (v26 > 0) {
                    goto LABEL_366;
                  }
                  unint64_t v137 = 0LL;
                }

                int64_t v138 = v26 - v137;
                if (__OFSUB__(v26, v137)) {
                  goto LABEL_350;
                }
              }

              else if (v9)
              {
                int64_t v138 = v131[10];
              }

              else
              {
                int64_t v138 = 0LL;
              }

              if (v4 >= v138 || !*(void *)(v159 + 16))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                uint64_t result = v161;
                if (v160 >= v161) {
                  return result;
                }
LABEL_381:
                __break(1u);
LABEL_382:
                __break(1u);
LABEL_383:
                __break(1u);
LABEL_384:
                __break(1u);
                goto LABEL_385;
              }

              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              specialized AttributedString.Guts.updateRun(at:within:with:)( v157,  v26,  v53,  v131,  &v159,  v57,  v132,  (uint64_t)&v160);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = (uint64_t)$defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)( v131,  v26,  v53,  v157);
              unint64_t v4 = v158;
              continue;
            }
          }

          unint64_t v9 = v56;
        }

                                          if (v152) {
                                            goto LABEL_452;
                                          }
LABEL_313:
                                          uint64_t v175 = (4 * *(_BYTE *)(v153 + 18) + 8) & 0x3C;
                                          int64_t v151 = ((-15LL << v175) - 1) & v151 | (v177 << v175);
                                          uint64_t v176 = *(void *)(v153 + 24 + 24 * v177);
                                          swift_unknownObjectRetain();
                                          uint64_t result = swift_unknownObjectRelease();
                                          unint64_t v153 = v176;
                                          if (!*(_BYTE *)(v176 + 18)) {
                                            goto LABEL_343;
                                          }
                                        }
                                      }

                                      swift_unknownObjectRetain_n();
                                      unint64_t v152 = v254;
                                      uint64_t v176 = v147;
LABEL_343:
                                      uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)( v152,  0,  (_WORD *)(v176 + 16),  (uint64_t *)(v176 + 24));
                                      if ((result & 0x8000000000000000LL) == 0)
                                      {
                                        uint64_t v213 = result;
                                        uint64_t v185 = v212;
                                        swift_unknownObjectRelease();
                                        swift_unknownObjectRelease();
                                        unint64_t v184 = v151 & 0xFFFFFFFFFFFFF0FFLL | (v213 << 8);
                                        uint64_t v149 = v262;
                                        uint64_t v154 = v254;
LABEL_330:
                                        swift_unknownObjectRetain();
                                        v251 = specialized Rope._Node.distanceFromStart<A>(to:in:)( v150,  v184,  v176,  v147,  v149);
                                        uint64_t result = swift_unknownObjectRelease_n();
                                        char v30 = __OFSUB__(v154, v185);
                                        v154 -= v185;
                                        if (!v30) {
                                          goto LABEL_346;
                                        }
LABEL_473:
                                        __break(1u);
LABEL_474:
                                        __break(1u);
LABEL_475:
                                        __break(1u);
LABEL_476:
                                        __break(1u);
LABEL_477:
                                        __break(1u);
LABEL_478:
                                        __break(1u);
                                        goto LABEL_479;
                                      }

LABEL_314:
    swift_bridgeObjectRelease();
    if ((v53 & 1) != 0)
    {
LABEL_51:
      unint64_t v56 = (unint64_t *)(*(void *)(v3 + 56) + 16 * v49);
      swift_bridgeObjectRelease();
      *unint64_t v56 = v2;
      v56[1] = v1;
      goto LABEL_55;
    }

            __break(1u);
            goto LABEL_315;
          }

          if (v136 < 0) {
            goto LABEL_335;
          }
          *(_WORD *)(v90 + 2 * v136) = v92;
        }

        uint64_t v91 = v93;
        if ((void *)v93 == v41)
        {
          unint64_t v137 = *(void *)(v15 + 16);
          if (v137 && !*(_WORD *)(v90 + 2 * v137 - 2))
          {
            do
            {
              *(void *)(v15 + 16) = v137 - 1;
              if (v137 == 1) {
                break;
              }
            }

            while (!*(unsigned __int16 *)(v15 + 28 + 2 * v137--));
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v87._rawValue = (void *)v15;
LABEL_106:
          NSDecimal.copyVariableLengthInteger(_:)(v87);
          unint64_t v18 = v120;
          if (v120) {
            goto LABEL_173;
          }
          uint64_t v121 = *((void *)v87._rawValue + 2);
          swift_bridgeObjectRelease();
          if (HIDWORD(v121)) {
            goto LABEL_354;
          }
          _So9NSDecimala__length_setter(v121, (_DWORD *)v20);
          *(_DWORD *)v279 = *(_DWORD *)v73;
          *(_OWORD *)&v279[4] = *(__int128 *)((char *)v73 + 4);
          unint64_t v122 = _So9NSDecimala__exponent_getter(v279);
          _So9NSDecimala__exponent_setter(v122, (_BYTE *)v20);
          unint64_t v123 = (_DWORD *)v20;
LABEL_110:
          _So9NSDecimala__isCompact_setter_0(0LL, v123);
          goto LABEL_7;
        }

        continue;
      }

      goto LABEL_124;
    }

    break;
  }

  if ((v134 & 0x8000000000000000LL) == 0)
  {
    uint64_t v135 = 2 * v134;
    uint64_t v86 = *(unsigned __int16 *)(v34 + 2 * v94 + 32);
    uint64_t v85 = v92 + *(unsigned __int16 *)(v90 + v135) + v86 * *(unsigned __int16 *)(v89 + 2 * v91);
    LODWORD(v92) = HIWORD(v85);
    *(_WORD *)(v90 + v135) = v85;
    goto LABEL_123;
  }

  __break(1u);
LABEL_272:
  __break(1u);
LABEL_273:
  __break(1u);
LABEL_274:
  v231 = v92 + *(unsigned __int16 *)(v34 + 46) - *(unsigned __int16 *)(v40 + 46);
  unint64_t v118 = v231 + 0xFFFF;
  *(_WORD *)(v84 + 46) = v231 - 1;
  if (v91 == 7)
  {
    LODWORD(v92) = HIWORD(v118);
    unint64_t v119 = 8LL;
    goto LABEL_276;
  }

          outlined release of Locale((uint64_t)v414);
        }

        uint64_t result = outlined release of AttributedString.Runs((uint64_t)v434);
        goto LABEL_316;
      }

LABEL_316:
    swift_bridgeObjectRelease();
    unint64_t v8 = v184;
    unint64_t v7 = v232;
    if ((v1 & 1) != 0)
    {
LABEL_60:
      uint64_t v63 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *uint64_t v63 = v235;
      v63[1] = v6;
      goto LABEL_64;
    }

            v278 = 256LL;
          }

                __break(1u);
                goto LABEL_317;
              }

          *(void *)&v361 = v352;
          *((void *)&v361 + 1) = v345;
          *(void *)&v362 = v344;
          *((void *)&v362 + 1) = v343;
          *(void *)&v363 = v259;
          *((void *)&v363 + 1) = v260;
          *(void *)&v364 = v262;
          *((void *)&v364 + 1) = v263;
          v270 = v191[2];
          if (v270)
          {
            v271 = 5LL;
            while (!v191[v271])
            {
              v271 += 2LL;
              if (!--v270) {
                goto LABEL_320;
              }
            }

            v360 = (_BYTE *)v263;
            v293 = v260;
            *(void *)&v383 = MEMORY[0x18961AFE8];
            swift_bridgeObjectRetain();
            v294 = v191 + 5;
            do
            {
              v299 = *v294;
              if (*v294)
              {
                v300 = *(v294 - 1);
                if ((v299 & 0x2000000000000000LL) != 0 ? HIBYTE(v299) & 0xF : v300 & 0xFFFFFFFFFFFFLL)
                {
                  if ((v299 & 0x1000000000000000LL) != 0)
                  {
                    v295 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                  }

                  else
                  {
                    if ((v299 & 0x2000000000000000LL) != 0)
                    {
                      v368 = *(v294 - 1);
                      v369 = v299 & 0xFFFFFFFFFFFFFFLL;
                      swift_bridgeObjectRetain();
                    }

                    else
                    {
                      if ((v300 & 0x1000000000000000LL) == 0) {
                        _StringObject.sharedUTF8.getter();
                      }
                      swift_bridgeObjectRetain();
                    }

                    v295 = _decodeScalar(_:startingAt:)();
                    swift_bridgeObjectRelease();
                  }

                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  v296 = *(void *)(v383 + 16);
                  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v296);
                  v297 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v296, v295);
                  destructiveProjectEnumData for PredicateCodableError(v297, v298);
                }
              }

              v294 += 2;
              --v267;
            }

            while (v267);
            swift_bridgeObjectRelease();
            v302 = v383;
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)v411);
            v303 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v302);
            v305 = v304;
            v307 = v306;
            v309 = v308;
            swift_bridgeObjectRelease();
            outlined release of Locale((uint64_t)&v368);
            outlined release of Locale((uint64_t)v414);
            uint64_t result = outlined release of AttributedString.Runs((uint64_t)v434);
            v260 = v293;
            v263 = (uint64_t)v360;
            if (v309 != 2)
            {
              if (v334 > v303 >> 10)
              {
LABEL_418:
                __break(1u);
                goto LABEL_419;
              }

              v259 = v303;
              v260 = v305;
              v262 = v307;
              v263 = v309;
            }

            if (v342 == *(void *)(v349 + 88))
            {
              if (v314)
              {
                v267 = *(void *)(v314 + 24 * ((v335 >> ((4 * *(_BYTE *)(v314 + 18) + 8) & 0x3C)) & 0xF) + 32);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }

              else
              {
                v268 = *(void *)(v349 + 64);
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v335, v268);
                v267 = v269;
                swift_unknownObjectRelease();
              }

              v270 = (*(uint64_t (**)(void, void))(v339[5] + 24LL))(v339[2], v339[5]);
              if (*(void *)(v267 + 16)
                && (v272 = specialized __RawDictionaryStorage.find<A>(_:)(v270, v271), (v273 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue( *(void *)(v267 + 56) + 72 * v272,  (uint64_t)&v383);
              }

              else
              {
                v387 = 0LL;
                v385 = 0u;
                v386 = 0u;
                v383 = 0u;
                v384 = 0u;
              }

              swift_bridgeObjectRelease();
              if (*((void *)&v384 + 1))
              {
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v383,  (uint64_t)v367);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                v275 = v316;
                swift_dynamicCast();
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v275,  0LL,  1LL,  AssociatedTypeWitness);
              }

              else
              {
                outlined destroy of Any?( (uint64_t)&v383,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                v276 = swift_getAssociatedTypeWitness();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v276 - 8) + 56LL))( v316,  1LL,  1LL,  v276);
              }

              v277 = (*(uint64_t (**)(void, void))(v339[6] + 24LL))(v339[3], v339[6]);
              if (*(void *)(v267 + 16)
                && (v279 = specialized __RawDictionaryStorage.find<A>(_:)(v277, v278), (v280 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue( *(void *)(v267 + 56) + 72 * v279,  (uint64_t)&v383);
              }

              else
              {
                v387 = 0LL;
                v385 = 0u;
                v386 = 0u;
                v383 = 0u;
                v384 = 0u;
              }

              swift_bridgeObjectRelease();
              if (*((void *)&v384 + 1))
              {
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v383,  (uint64_t)v367);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                v281 = swift_getAssociatedTypeWitness();
                v282 = v317;
                swift_dynamicCast();
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v281 - 8) + 56LL))( v282,  0LL,  1LL,  v281);
              }

              else
              {
                outlined destroy of Any?( (uint64_t)&v383,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                v283 = swift_getAssociatedTypeWitness();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v283 - 8) + 56LL))( v317,  1LL,  1LL,  v283);
              }

              v284 = (*(uint64_t (**)(void, void))(v339[7] + 24LL))(v339[4], v339[7]);
              if (*(void *)(v267 + 16)
                && (v286 = specialized __RawDictionaryStorage.find<A>(_:)(v284, v285), (v287 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue( *(void *)(v267 + 56) + 72 * v286,  (uint64_t)&v383);
              }

              else
              {
                v387 = 0LL;
                v385 = 0u;
                v386 = 0u;
                v383 = 0u;
                v384 = 0u;
              }

              swift_bridgeObjectRelease();
              if (*((void *)&v384 + 1))
              {
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v383,  (uint64_t)v367);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                v288 = swift_getAssociatedTypeWitness();
                v289 = v318;
                swift_dynamicCast();
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v288 - 8) + 56LL))( v289,  0LL,  1LL,  v288);
              }

              else
              {
                outlined destroy of Any?( (uint64_t)&v383,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                v290 = swift_getAssociatedTypeWitness();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v290 - 8) + 56LL))( v318,  1LL,  1LL,  v290);
              }

              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              v291 = v329;
              if (v254 >> 10 >= v328 >> 10)
              {
                v292 = v315;
                *v315 = v328;
                v292[1] = v333;
                v292[2] = v291;
                v292[3] = (unint64_t)v323;
                v292[4] = v254;
                v292[5] = v360;
                v292[6] = v256;
                v292[7] = v257;
                return result;
              }

              *(void *)&v382 = v373;
              *((void *)&v382 + 1) = v366;
              *(void *)&v383 = v365;
              *((void *)&v383 + 1) = v364;
              *(void *)&v384 = v257;
              *((void *)&v384 + 1) = v265;
              *(void *)&v385 = v259;
              *((void *)&v385 + 1) = v260;
              v268 = *(void *)(v201 + 16);
              v381 = v265;
              if (v268)
              {
                v269 = 40LL;
                while (!*(void *)(v201 + v269))
                {
                  v269 += 16LL;
                  if (!--v268) {
                    goto LABEL_320;
                  }
                }

                *(void *)&v404 = MEMORY[0x18961AFE8];
                swift_bridgeObjectRetain();
                v312 = (unint64_t *)(v201 + 40);
                do
                {
                  v317 = *v312;
                  if (*v312)
                  {
                    v318 = *(v312 - 1);
                    if ((v317 & 0x2000000000000000LL) != 0 ? HIBYTE(v317) & 0xF : v318 & 0xFFFFFFFFFFFFLL)
                    {
                      if ((v317 & 0x1000000000000000LL) != 0)
                      {
                        v313 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                      }

                      else
                      {
                        if ((v317 & 0x2000000000000000LL) != 0)
                        {
                          v389 = *(v312 - 1);
                          v390 = v317 & 0xFFFFFFFFFFFFFFLL;
                          swift_bridgeObjectRetain();
                        }

                        else
                        {
                          if ((v318 & 0x1000000000000000LL) == 0) {
                            _StringObject.sharedUTF8.getter();
                          }
                          swift_bridgeObjectRetain();
                        }

                        v313 = _decodeScalar(_:startingAt:)();
                        swift_bridgeObjectRelease();
                      }

                      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                      v314 = *(void *)(v404 + 16);
                      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v314);
                      v315 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v314, v313);
                      destructiveProjectEnumData for PredicateCodableError(v315, v316);
                    }
                  }

                  v312 += 2;
                  --v264;
                }

                while (v264);
                swift_bridgeObjectRelease();
                v320 = v404;
                BigString.unicodeScalars.getter();
                BigString.UnicodeScalarView.subscript.getter();
                outlined release of Locale((uint64_t)v432);
                v321 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v320);
                v323 = v322;
                v325 = v324;
                v327 = v326;
                swift_bridgeObjectRelease();
                outlined release of Locale((uint64_t)&v389);
                outlined release of Locale((uint64_t)v435);
                uint64_t result = outlined release of AttributedString.Runs((uint64_t)v455);
                v270 = v354;
                if (v327 != 2)
                {
                  if (v352 > v321 >> 10)
                  {
LABEL_439:
                    __break(1u);
                    goto LABEL_440;
                  }

                  v257 = v321;
                  v381 = v323;
                  v259 = v325;
                  v260 = v327;
                }

LABEL_327:
                          __break(1u);
LABEL_328:
                          __break(1u);
LABEL_329:
                          __break(1u);
LABEL_330:
                          __break(1u);
LABEL_331:
                          __break(1u);
LABEL_332:
                          __break(1u);
                          goto LABEL_333;
                        }
                      }
                    }
                  }
                }
              }
            }

            uint64_t v78 = v95;
          }

  if ((v443 & 0x2000000000000000LL) != 0) {
    isStackAllocationSafe = HIBYTE(v443) & 0xF;
  }
  else {
    isStackAllocationSafe = v120 & 0xFFFFFFFFFFFFLL;
  }
LABEL_333:
  v393 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_378;
  }

  if (v393 < -1)
  {
LABEL_378:
    __break(1u);
    goto LABEL_379;
  }

  v445 = (id)v120;
  v394 = v393 + 1;
  if (v393 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v438 = &v437;
    MEMORY[0x1895F8858](isStackAllocationSafe);
    v396 = (char *)&v437 - v395;
    v397 = v443;
    swift_bridgeObjectRetain();
    IsSafeForMapping = 1;
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v396, v394, 1, (uint64_t)v445, v397);
    v399 = v398;
    swift_bridgeObjectRelease();
    if ((v399 & 1) == 0) {
      IsSafeForMapping = _NSFileCompressionTypeIsSafeForMapping((uint64_t)v396);
    }
  }

  else
  {
    v421 = swift_slowAlloc();
    v422 = v443;
    swift_bridgeObjectRetain();
    IsSafeForMapping = 1;
    String._decomposed(_:into:nullTerminated:)(1, v421, v394, 1, (uint64_t)v445, v422);
    v424 = v423;
    swift_bridgeObjectRelease();
    if ((v424 & 1) == 0) {
      IsSafeForMapping = _NSFileCompressionTypeIsSafeForMapping(v421);
    }
    MEMORY[0x186E20E60](v421, -1LL, -1LL);
  }

  swift_bridgeObjectRelease();
  uint64_t v10 = v447;
  uint64_t v12 = v448;
LABEL_103:
  uint64_t v125 = (unsigned __int16)(v107 & st_mode);
  if (v125 != (unsigned __int16)S_IFREG.getter())
  {
    else {
      st_mode = 13;
    }
    if ((v446 & 1) == 0)
    {
      unint64_t v146 = (uint64_t)v10;
      CocoaError.Code.init(fileErrno:reading:)(st_mode, 1);
      v448 = (uint64_t (*)(void))v453._countAndFlagsBits;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
        goto LABEL_382;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      int64_t v147 = (int)POSIXErrorCode.rawValue.getter();
      uint64_t v148 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      uint64_t v149 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unint64_t v150 = objc_msgSend(v148, sel_initWithDomain_code_userInfo_, v149, v147, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      int64_t v151 = objc_msgSend(v150, sel_domain);
      unint64_t v152 = static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
      uint64_t v154 = v153;

      if (v152 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v154 == v155)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v156 = v146;
        unint64_t v157 = (int)v449;
      }

      else
      {
        uint64_t v191 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v156 = v146;
        unint64_t v157 = (int)v449;
        if ((v191 & 1) == 0)
        {
LABEL_375:
          __break(1u);
LABEL_376:
          __break(1u);
        }
      }

      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( v448,  v156,  v11,  v150,  0LL,  0LL,  0LL,  0LL,  &v455,  0LL,  0LL);
LABEL_318:
      swift_willThrow();
      v270 = v157;
      return close(v270);
    }

    CocoaError.Code.init(fileErrno:reading:)(st_mode, 1);
    v446 = v450._countAndFlagsBits;
    v448 = v12;
    swift_retain_n();
    v447 = v10;
    int64_t v128 = v10;
    v445 = (id)v11;
    swift_retain_n();
    unint64_t v129 = v128;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      unint64_t v130 = (int)POSIXErrorCode.rawValue.getter();
      uint64_t v131 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      uint64_t v132 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v133 = objc_msgSend(v131, sel_initWithDomain_code_userInfo_, v132, v130, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unsigned __int16 v134 = objc_msgSend(v133, sel_domain);
      uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v134);
      unint64_t v137 = v136;

      int64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      v444 = (uint64_t)v133;
      if (v135 == v138 && v137 == v139)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        uint64_t v174 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v174 & 1) == 0)
        {
LABEL_374:
          __break(1u);
          goto LABEL_375;
        }
      }

      char v11 = (uint64_t)v129;
      uint64_t v175 = (uint64_t)v445;
      swift_retain();
      uint64_t v176 = v448;
      swift_retain();
      uint64_t v177 = _foundation_swift_url_feature_enabled();
      uint64_t v178 = v447;
      if ((v177 & 1) == 0)
      {
        unint64_t v192 = objc_msgSend((id)v11, sel__parameterString);
        if (v192)
        {
          int64_t v193 = v192;
          unint64_t v194 = static String._unconditionallyBridgeFromObjectiveC(_:)(v192);
          uint64_t v196 = v195;

          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
            && (uint64_t v197 = objc_msgSend((id)v11, sel_path)) != 0)
          {
            uint64_t v198 = v197;
            unsigned __int16 v199 = static String._unconditionallyBridgeFromObjectiveC(_:)(v197);
            uint64_t v201 = v200;

            *(void *)&v455.f_bsize = v199;
            v455.f_blocks = v201;
            swift_bridgeObjectRetain();
            v202._uint64_t countAndFlagsBits = 59LL;
            v202._object = (void *)0xE100000000000000LL;
            String.append(_:)(v202);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v203._uint64_t countAndFlagsBits = (uint64_t)v194;
            v203._object = v196;
            String.append(_:)(v203);
            swift_bridgeObjectRelease();
          }

          else
          {
            *(void *)&v455.f_bsize = 59LL;
            v455.f_blocks = 0xE100000000000000LL;
            v340._uint64_t countAndFlagsBits = (uint64_t)v194;
            v340._object = v196;
            String.append(_:)(v340);
          }

          swift_bridgeObjectRelease();
          v341 = (uint64_t)v445;
          uint64_t v176 = v448;
          outlined consume of PathOrURL(v178, (uint64_t)v445, (uint64_t)v448, 1);
        }

        else
        {
          v360 = objc_msgSend((id)v11, sel_path);
          if (v360)
          {
            v361 = v360;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v360);
          }

          v341 = (uint64_t)v445;
          outlined consume of PathOrURL(v178, (uint64_t)v445, (uint64_t)v176, 1);
        }

        goto LABEL_311;
      }

      *(void *)&v455.f_bsize = v11;
      v455.f_blocks = v175;
      v455.f_bfree = (uint64_t)v176;
      uint64_t v179 = (id)v11;
      swift_retain();
      swift_retain();
      int64_t v180 = URL.path(percentEncoded:)(1);
      *(void *)&v455.f_bsize = v180._countAndFlagsBits;
      v455.f_blocks = (uint64_t)v180._object;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v180._countAndFlagsBits, (unint64_t)v180._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }

      v453._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      unint64_t v181 = specialized Set._Variant.insert(_:)(&v451, 0x2FuLL);
      int64_t v182 = v453._countAndFlagsBits;
      unint64_t v183 = *(void *)&v455.f_bsize;
      unint64_t v184 = v455.f_blocks;
      uint64_t v185 = HIBYTE(v455.f_blocks) & 0xF;
      if ((v455.f_blocks & 0x2000000000000000LL) == 0) {
        uint64_t v185 = *(void *)&v455.f_bsize & 0xFFFFFFFFFFFFLL;
      }
      if (v185)
      {
        v453._uint64_t countAndFlagsBits = *(void *)&v455.f_bsize;
        v453._object = (void *)v455.f_blocks;
        MEMORY[0x1895F8858](v181);
        v435 = (uint64_t)&v453;
        v436 = v182;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v434,  v183,  v184);
        if (v186 == 1)
        {
          unint64_t v187 = v453._countAndFlagsBits;
          unint64_t v188 = v453._object;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v187,  (unint64_t)v188,  v182);
          uint64_t v190 = v189;
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v190 = v186;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v178 = v447;
        if (!v190)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v376 = (uint64_t)v445;
          v377 = v448;
          outlined consume of PathOrURL(v178, (uint64_t)v445, (uint64_t)v448, 1);
          outlined consume of PathOrURL(v178, v376, (uint64_t)v377, 1);
          goto LABEL_310;
        }

                      *(void *)&v354 = v345;
                      *((void *)&v354 + 1) = v339;
                      v355 = v340;
                      *(void *)&v356 = v9;
                      *((void *)&v356 + 1) = v10;
                      *(void *)&v357 = v21;
                      *((void *)&v357 + 1) = v22;
                      if (!specialized Collection<>._containsScalarConstraint.getter(v254))
                      {
                        outlined release of Locale((uint64_t)v423);
                        goto LABEL_346;
                      }

                      uint64_t result = specialized static Array._allocateUninitialized(_:)(0LL);
                      *(void *)&v380 = result;
                      if (v256 < 1) {
                        goto LABEL_445;
                      }
                      swift_bridgeObjectRetain();
                      v259 = (unint64_t *)(v254 + 40);
                      do
                      {
                        v264 = *v259;
                        if (*v259)
                        {
                          v265 = *(v259 - 1);
                          if ((v264 & 0x2000000000000000LL) != 0 ? HIBYTE(v264) & 0xF : v265 & 0xFFFFFFFFFFFFLL)
                          {
                            if ((v264 & 0x1000000000000000LL) != 0)
                            {
                              v260 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                            }

                            else
                            {
                              if ((v264 & 0x2000000000000000LL) != 0)
                              {
                                v365 = *(v259 - 1);
                                v366 = v264 & 0xFFFFFFFFFFFFFFLL;
                                swift_bridgeObjectRetain();
                              }

                              else
                              {
                                if ((v265 & 0x1000000000000000LL) == 0) {
                                  _StringObject.sharedUTF8.getter();
                                }
                                swift_bridgeObjectRetain();
                              }

                              v260 = _decodeScalar(_:startingAt:)();
                              swift_bridgeObjectRelease();
                            }

                            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                            v261 = *(void *)(v380 + 16);
                            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v261);
                            v262 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v261, v260);
                            destructiveProjectEnumData for PredicateCodableError(v262, v263);
                          }
                        }

                        v259 += 2;
                        --v256;
                      }

                      while (v256);
                      swift_bridgeObjectRelease();
                      v276 = v380;
                      BigString.unicodeScalars.getter();
                      BigString.UnicodeScalarView.subscript.getter();
                      outlined release of Locale((uint64_t)v396);
                      v277 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v276);
                      v279 = v278;
                      v281 = v280;
                      v283 = v282;
                      swift_bridgeObjectRelease();
                      outlined release of Locale((uint64_t)&v365);
                      outlined release of Locale((uint64_t)v423);
                      uint64_t result = outlined release of AttributedString.Runs((uint64_t)v413);
                      if (v283 != 2)
                      {
                        if (v334 > v277 >> 10) {
                          goto LABEL_455;
                        }
                        unint64_t v9 = v277;
                        uint64_t v10 = v279;
                        uint64_t v21 = v281;
                        char v22 = v283;
                      }

                      goto LABEL_347;
                    }

LABEL_333:
  __break(1u);
LABEL_334:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

__n128 URL.ParseStrategy.init(scheme:user:password:host:port:path:query:fragment:)@<Q0>( _OWORD *a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X2>, __int128 *a4@<X3>, uint64_t *a5@<X4>, _OWORD *a6@<X5>, __int128 *a7@<X6>, __n128 *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9 = *a5;
  char v10 = *((_BYTE *)a5 + 8);
  __int128 v11 = *a2;
  *(_OWORD *)a9 = *a1;
  *(_OWORD *)(a9 + 16) = v11;
  __int128 v12 = *a4;
  *(_OWORD *)(a9 + 32) = *a3;
  *(_OWORD *)(a9 + 48) = v12;
  *(void *)(a9 + 64) = v9;
  *(_BYTE *)(a9 + 72) = v10;
  __int128 v13 = *a7;
  *(_OWORD *)(a9 + 80) = *a6;
  *(_OWORD *)(a9 + 96) = v13;
  __n128 result = *a8;
  *(__n128 *)(a9 + 112) = *a8;
  return result;
}

uint64_t URL.ParseStrategy.init(format:lenient:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3 = a1[11];
  __int128 v28 = a1[10];
  __int128 v29 = v3;
  __int128 v30 = a1[12];
  __int128 v4 = a1[7];
  __int128 v24 = a1[6];
  __int128 v25 = v4;
  __int128 v5 = a1[9];
  __int128 v26 = a1[8];
  __int128 v27 = v5;
  __int128 v6 = a1[3];
  __int128 v20 = a1[2];
  __int128 v21 = v6;
  __int128 v7 = a1[5];
  __int128 v22 = a1[4];
  __int128 v23 = v7;
  __int128 v8 = a1[1];
  __int128 v18 = *a1;
  __int128 v19 = v8;
  if ((void)v19)
  {
    swift_bridgeObjectRelease();
LABEL_4:
    uint64_t v9 = 1LL;
    goto LABEL_6;
  }

  uint64_t v9 = 0LL;
LABEL_6:
  if (BYTE8(v19) != 1)
  {
LABEL_9:
    uint64_t v10 = 1LL;
    goto LABEL_11;
  }

  if (*((void *)&v20 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  uint64_t v10 = 0LL;
LABEL_11:
  if (v21 != 1)
  {
LABEL_14:
    uint64_t v11 = 1LL;
    goto LABEL_16;
  }

  if ((void)v22)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }

  uint64_t v11 = 0LL;
LABEL_16:
  if (BYTE8(v22) != 1)
  {
LABEL_19:
    uint64_t v12 = 1LL;
    goto LABEL_21;
  }

  if (*((void *)&v23 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }

  uint64_t v12 = 0LL;
LABEL_21:
  if (v25 != 1)
  {
LABEL_24:
    uint64_t v13 = 1LL;
    goto LABEL_26;
  }

  if ((void)v26)
  {
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }

  uint64_t v13 = 0LL;
LABEL_26:
  if (BYTE8(v26) != 1)
  {
LABEL_29:
    uint64_t v14 = 1LL;
    goto LABEL_31;
  }

  if (*((void *)&v27 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }

  uint64_t v14 = 0LL;
LABEL_31:
  if (v28 != 1)
  {
LABEL_34:
    uint64_t v15 = 1LL;
    goto LABEL_36;
  }

  if ((void)v29)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }

  uint64_t v15 = 0LL;
LABEL_36:
  if (BYTE8(v29) == 1)
  {
    if (!*((void *)&v30 + 1))
    {
      uint64_t result = outlined release of URL.FormatStyle((uint64_t)&v18);
      uint64_t v17 = 0LL;
      goto LABEL_42;
    }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of URL.FormatStyle((uint64_t)&v18);
    uint64_t result = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t result = outlined release of URL.FormatStyle((uint64_t)&v18);
  }

  uint64_t v17 = 1LL;
LABEL_42:
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = v11;
  *(void *)(a2 + 48) = 0LL;
  *(void *)(a2 + 56) = v12;
  *(void *)(a2 + 64) = v13;
  *(_BYTE *)(a2 + 72) = 1;
  *(void *)(a2 + 80) = 0LL;
  *(void *)(a2 + 88) = v14;
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = v15;
  *(void *)(a2 + 112) = 0LL;
  *(void *)(a2 + 120) = v17;
  return result;
}

void URL.ParseStrategy.hash(into:)()
{
  unint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  unint64_t v4 = *(void *)(v0 + 40);
  uint64_t v24 = *(void *)(v0 + 32);
  uint64_t v25 = *(void *)(v0 + 48);
  unint64_t v5 = *(void *)(v0 + 56);
  int v27 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v26 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 96);
  Swift::UInt v28 = *(void *)(v0 + 64);
  unint64_t v29 = *(void *)(v0 + 88);
  unint64_t v8 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 112);
  unint64_t v9 = *(void *)(v0 + 120);
  if (!v1)
  {
    Swift::UInt v10 = 0LL;
LABEL_5:
    Hasher._combine(_:)(v10);
    if (v3) {
      goto LABEL_6;
    }
LABEL_9:
    Swift::UInt v11 = 0LL;
LABEL_10:
    Hasher._combine(_:)(v11);
    if (v4) {
      goto LABEL_11;
    }
LABEL_14:
    Swift::UInt v17 = 0LL;
LABEL_15:
    Hasher._combine(_:)(v17);
    unint64_t v18 = v29;
    if (v5) {
      goto LABEL_16;
    }
LABEL_19:
    Swift::UInt v19 = 0LL;
LABEL_20:
    Hasher._combine(_:)(v19);
    if (v27) {
      goto LABEL_21;
    }
    goto LABEL_25;
  }

  if (v1 == 1)
  {
    Swift::UInt v10 = 1LL;
    goto LABEL_5;
  }

  unint64_t v23 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 96);
  unint64_t v13 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v15 = *(void *)v0;
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  uint64_t v16 = v15;
  uint64_t v7 = v14;
  unint64_t v9 = v13;
  uint64_t v6 = v12;
  unint64_t v8 = v23;
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v16, v1);
  if (!v3) {
    goto LABEL_9;
  }
LABEL_6:
  if (v3 == 1)
  {
    Swift::UInt v11 = 1LL;
    goto LABEL_10;
  }

  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v2, v3);
  if (!v4) {
    goto LABEL_14;
  }
LABEL_11:
  if (v4 == 1)
  {
    Swift::UInt v17 = 1LL;
    goto LABEL_15;
  }

  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v24, v4);
  unint64_t v18 = v29;
  if (!v5) {
    goto LABEL_19;
  }
LABEL_16:
  if (v5 == 1)
  {
    Swift::UInt v19 = 1LL;
    goto LABEL_20;
  }

  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v25, v5);
  if (v27)
  {
LABEL_21:
    Hasher._combine(_:)(v28 != 0);
    if (v18) {
      goto LABEL_22;
    }
LABEL_26:
    Swift::UInt v20 = 0LL;
LABEL_27:
    Hasher._combine(_:)(v20);
    if (v8) {
      goto LABEL_28;
    }
LABEL_31:
    Swift::UInt v21 = 0LL;
LABEL_32:
    Hasher._combine(_:)(v21);
    if (v9) {
      goto LABEL_33;
    }
LABEL_36:
    Swift::UInt v22 = 0LL;
    goto LABEL_37;
  }

uint64_t outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>( uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.ParseStrategy.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_182FC9AB4
                                                            + 4 * asc_18372CA80[*v0]))( 0x656D65686373LL,  0xE600000000000000LL);
}

uint64_t sub_182FC9AB4()
{
  return 1919251317LL;
}

uint64_t sub_182FC9AC4()
{
  return 0x64726F7773736170LL;
}

uint64_t sub_182FC9ADC()
{
  return 1953722216LL;
}

uint64_t sub_182FC9AEC()
{
  return 1953656688LL;
}

uint64_t sub_182FC9AFC()
{
  return 1752457584LL;
}

uint64_t sub_182FC9B0C()
{
  return 0x7972657571LL;
}

uint64_t sub_182FC9B20()
{
  return 0x746E656D67617266LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t URL.ParseStrategy.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.ParseStrategy.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v1;
  uint64_t v7 = v1[1];
  uint64_t v9 = v1[2];
  uint64_t v30 = v1[3];
  uint64_t v31 = v9;
  uint64_t v10 = v1[4];
  uint64_t v28 = v1[5];
  uint64_t v29 = v10;
  uint64_t v11 = v1[7];
  uint64_t v26 = v1[6];
  uint64_t v27 = v11;
  uint64_t v12 = v1[8];
  int v35 = *((unsigned __int8 *)v1 + 72);
  uint64_t v13 = v1[10];
  uint64_t v24 = v1[11];
  uint64_t v25 = v12;
  uint64_t v14 = v1[12];
  uint64_t v22 = v1[13];
  uint64_t v23 = v13;
  uint64_t v19 = v1[14];
  uint64_t v20 = v1[15];
  uint64_t v21 = v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v33 = v8;
  uint64_t v34 = v7;
  char v36 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<String>);
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type URL.ParseStrategy.ComponentParseStrategy<String> and conformance URL.ParseStrategy.ComponentParseStrategy<A>,  &demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<String>,  (uint64_t)&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>);
  uint64_t v15 = v32;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v15)
  {
    uint64_t v17 = v28;
    uint64_t v16 = v29;
    uint64_t v33 = v31;
    uint64_t v34 = v30;
    char v36 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v33 = v16;
    uint64_t v34 = v17;
    char v36 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v33 = v26;
    uint64_t v34 = v27;
    char v36 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v33 = v25;
    LOBYTE(v34) = v35;
    char v36 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<Int>);
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type URL.ParseStrategy.ComponentParseStrategy<Int> and conformance URL.ParseStrategy.ComponentParseStrategy<A>,  &demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<Int>,  (uint64_t)&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v33 = v23;
    uint64_t v34 = v24;
    char v36 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v33 = v21;
    uint64_t v34 = v22;
    char v36 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v33 = v19;
    uint64_t v34 = v20;
    char v36 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int URL.ParseStrategy.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t *URL.ParseStrategy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.ParseStrategy.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  unint64_t v10 = a1[4];
  char v62 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    char v13 = 0;
  }

  else
  {
    uint64_t v60 = (_OWORD *)a2;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<String>);
    LOBYTE(v63) = 0;
    uint64_t v12 = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type URL.ParseStrategy.ComponentParseStrategy<String> and conformance URL.ParseStrategy.ComponentParseStrategy<A>,  &demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<String>,  (uint64_t)&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v15 = v12;
    uint64_t v16 = v71;
    unint64_t v17 = v72;
    LOBYTE(v63) = 1;
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v71, v72);
    uint64_t v58 = v15;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v59 = 0LL;
    *(void *)&__int128 v57 = v16;
    *((void *)&v57 + 1) = v17;
    a2 = v71;
    unint64_t v18 = v72;
    LOBYTE(v63) = 2;
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v71, v72);
    uint64_t v19 = v59;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    unint64_t v61 = v18;
    if (!v19)
    {
      uint64_t v56 = a2;
      uint64_t v20 = v11;
      uint64_t v21 = v71;
      unint64_t v22 = v72;
      LOBYTE(v63) = 3;
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v71, v72);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v59 = v20;
      *(void *)&__int128 v54 = v21;
      *((void *)&v54 + 1) = v22;
      uint64_t v23 = v71;
      unint64_t v24 = v72;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<Int>);
      LOBYTE(v63) = 4;
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v23, v24);
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type URL.ParseStrategy.ComponentParseStrategy<Int> and conformance URL.ParseStrategy.ComponentParseStrategy<A>,  &demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<Int>,  (uint64_t)&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v55 = v23;
      unint64_t v52 = v24;
      uint64_t v49 = v71;
      LODWORD(v24) = v72;
      char v88 = v72;
      LOBYTE(v63) = 5;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      int v48 = v24;
      uint64_t v26 = v71;
      unint64_t v25 = v72;
      LOBYTE(v63) = 6;
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v71, v72);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v51 = v26;
      unint64_t v47 = v25;
      uint64_t v28 = v71;
      unint64_t v27 = v72;
      char v89 = 7;
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v71, v72);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v59 = 0LL;
      unint64_t v50 = v27;
      uint64_t v53 = v28;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v46 = *((void *)&v87 + 1);
      uint64_t v58 = v87;
      uint64_t v29 = v57;
      __int128 v63 = v57;
      uint64_t v30 = v55;
      *(void *)&__int128 v64 = v56;
      *((void *)&v64 + 1) = v61;
      uint64_t v31 = v54;
      __int128 v65 = v54;
      uint64_t v32 = v28;
      uint64_t v33 = v51;
      unint64_t v34 = v52;
      *(void *)&__int128 v66 = v55;
      *((void *)&v66 + 1) = v52;
      *(void *)&__int128 v67 = v49;
      BYTE8(v67) = v48;
      unint64_t v35 = v47;
      *(void *)&__int128 v68 = v51;
      *((void *)&v68 + 1) = v47;
      *(void *)&__int128 v69 = v32;
      *((void *)&v69 + 1) = v27;
      __int128 v70 = v87;
      outlined retain of URL.ParseStrategy( (uint64_t *)&v63,  (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v32, v27);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v33, v35);
      unint64_t v36 = v34;
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v30, v34);
      uint64_t v37 = *((void *)&v54 + 1);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v31, *((unint64_t *)&v54 + 1));
      uint64_t v38 = v56;
      unint64_t v39 = v61;
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v56, v61);
      unint64_t v40 = *((void *)&v57 + 1);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v29, *((unint64_t *)&v57 + 1));
      __int128 v41 = v68;
      unint64_t v42 = v60;
      v60[4] = v67;
      v42[5] = v41;
      __int128 v43 = v70;
      v42[6] = v69;
      v42[7] = v43;
      __int128 v44 = v64;
      *unint64_t v42 = v63;
      v42[1] = v44;
      __int128 v45 = v66;
      v42[2] = v65;
      v42[3] = v45;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
      uint64_t v71 = v29;
      unint64_t v72 = v40;
      uint64_t v73 = v38;
      unint64_t v74 = v39;
      uint64_t v75 = v31;
      uint64_t v76 = v37;
      uint64_t v77 = v55;
      unint64_t v78 = v36;
      uint64_t v79 = v49;
      char v80 = v88;
      uint64_t v81 = v51;
      unint64_t v82 = v47;
      uint64_t v83 = v53;
      unint64_t v84 = v50;
      uint64_t v85 = v58;
      uint64_t v86 = v46;
      return outlined retain of URL.ParseStrategy( &v71,  (void (*)(uint64_t, uint64_t))outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(a2, v18);
    unint64_t v10 = *((void *)&v57 + 1);
    uint64_t v5 = v57;
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v57, *((unint64_t *)&v57 + 1));
    char v13 = 3;
  }

  uint64_t result = (uint64_t *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  if ((v13 & 1) != 0) {
    uint64_t result = (uint64_t *)outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v5, v10);
  }
  if ((v13 & 2) != 0) {
    return (uint64_t *)outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(a2, v61);
  }
  return result;
}

uint64_t *protocol witness for Decodable.init(from:) in conformance URL.ParseStrategy@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return URL.ParseStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.ParseStrategy(void *a1)
{
  return URL.ParseStrategy.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.ParseStrategy()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.ParseStrategy()
{
  return Hasher._finalize()();
}

uint64_t URL.ParseStrategy.ComponentParseStrategy.description.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1895F8858](a1);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v3);
  uint64_t v8 = (char *)&v16 - v7;
  MEMORY[0x1895F8858](v6);
  unint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v11 + 16))(v10);
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48))(v10, 2LL, v1);
  if (v12)
  {
    if (v12 == 1) {
      return 0x6465726975716572LL;
    }
    else {
      return 0x6C616E6F6974706FLL;
    }
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v8, v10, v1);
    unint64_t v16 = 0LL;
    unint64_t v17 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(23LL);
    swift_bridgeObjectRelease();
    unint64_t v16 = 0xD000000000000015LL;
    unint64_t v17 = 0x80000001839CAAC0LL;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v8, v1);
    v14._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    unint64_t v13 = v16;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
  }

  return v13;
}

void URL.ParseStrategy.ComponentParseStrategy.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v9, v11, a2);
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 2LL, v3);
  if (v12)
  {
    Hasher._combine(_:)(v12 != 1);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    Hasher._combine(_:)(2uLL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }

uint64_t URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6465726975716572LL && a2 == 0xE800000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6C616E6F6974706FLL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x56746C7561666564LL && a2 == 0xEC00000065756C61LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t URL.ParseStrategy.ComponentParseStrategy.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x6465726975716572LL;
  }
  if (a1 == 1) {
    return 0x6C616E6F6974706FLL;
  }
  return 0x56746C7561666564LL;
}

uint64_t URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }

  return v4 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys( char *a1, char *a2)
{
  return static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  return FloatingPointParseStrategy.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys( uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  return URL.ParseStrategy.ComponentParseStrategy.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = specialized URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys@<X0>( void *a1@<X1>, _BYTE *a2@<X8>)
{
  return protocol witness for CodingKey.init(intValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys( a1,  (uint64_t (*)(void, void, void, void))default argument 1 of _typeName(_:qualified:),  a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys()
{
  return 0LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys@<X0>( void *a1@<X2>, _BYTE *a2@<X8>)
{
  return protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys( a1,  (uint64_t (*)(void, void, void, void))default argument 1 of _typeName(_:qualified:),  a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys@<X0>( void *a1@<X2>, uint64_t (*a2)(void, void, void, void)@<X4>, _BYTE *a3@<X8>)
{
  char v4 = a2(a1[2], a1[3], a1[4], a1[5]);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4 & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys@<X0>( void *a1@<X1>, uint64_t (*a2)(void, void, void, void)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result = a2(a1[2], a1[3], a1[4], a1[5]);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

void URL.ParseStrategy.ComponentParseStrategy.encode(to:)()
{
}

void sub_182FCB074( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v13 - 216) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys,  a1);
  *(void *)(v13 - 208) = a1;
  uint64_t v15 = type metadata accessor for KeyedEncodingContainer();
  *(void *)(v13 - 184) = v15;
  *(void *)(v13 - 224) = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v15);
  *(void *)(v13 - 200) = (char *)&a9 - v17;
  *(void *)(v13 - 160) = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v16);
  *(void *)(v13 - 192) = (char *)&a9 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v13 - 120) = v10;
  *(void *)(v13 - 112) = v9;
  *(void *)(v13 - 104) = v12;
  *(void *)(v13 - 96) = v11;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.OptionalCodingKeys();
}

void sub_182FCB118( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v13 - 240) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys,  a1);
  *(void *)(v13 - 232) = a1;
  uint64_t v15 = type metadata accessor for KeyedEncodingContainer();
  *(void *)(v13 - 256) = *(void *)(v15 - 8);
  *(void *)(v13 - 248) = v15;
  MEMORY[0x1895F8858](v15);
  *(void *)(v13 - 264) = (char *)&a9 - v16;
  *(void *)(v13 - 120) = v10;
  *(void *)(v13 - 112) = v9;
  *(void *)(v13 - 104) = v12;
  *(void *)(v13 - 96) = v11;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.RequiredCodingKeys();
}

void sub_182FCB188( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys,  a1);
  *(void *)(v13 - 272) = a1;
  *(void *)(v13 - 280) = v15;
  uint64_t v16 = type metadata accessor for KeyedEncodingContainer();
  *(void *)(v13 - 288) = v16;
  *(void *)(v13 - 296) = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v16);
  *(void *)(v13 - 304) = (char *)&a9 - v18;
  MEMORY[0x1895F8858](v17);
  *(void *)(v13 - 120) = v10;
  *(void *)(v13 - 112) = v9;
  *(void *)(v13 - 176) = v12;
  *(void *)(v13 - 104) = v12;
  *(void *)(v13 - 96) = v11;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.CodingKeys();
}

uint64_t sub_182FCB240(uint64_t a1)
{
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer();
  *(void *)(v5 - 144) = *(void *)(v6 - 8);
  *(void *)(v5 - 136) = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v23 - v7;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  *(void *)(v5 - 152) = v8;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = *(void (**)(uint64_t, void, void))(v2 + 16);
  uint64_t v10 = v3;
  uint64_t v11 = *(void *)(v5 - 160);
  v9(v4, *(void *)(v5 - 128), *(void *)(v5 - 168));
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v4, 2LL, v10);
  if (v12)
  {
    if (v12 == 1)
    {
      *(_BYTE *)(v5 - 120) = 0;
      uint64_t v13 = *(void *)(v5 - 304);
      uint64_t v14 = *(void *)(v5 - 136);
      uint64_t v15 = *(void *)(v5 - 152);
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(uint64_t, void))(*(void *)(v5 - 296) + 8LL))(v13, *(void *)(v5 - 288));
    }

    else
    {
      *(_BYTE *)(v5 - 120) = 1;
      uint64_t v22 = *(void *)(v5 - 264);
      uint64_t v14 = *(void *)(v5 - 136);
      uint64_t v15 = *(void *)(v5 - 152);
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(uint64_t, void))(*(void *)(v5 - 256) + 8LL))(v22, *(void *)(v5 - 248));
    }

    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 144) + 8LL))(v15, v14);
  }

  else
  {
    uint64_t v16 = *(void *)(v5 - 192);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v16, v4, v10);
    *(_BYTE *)(v5 - 120) = 2;
    uint64_t v17 = *(void *)(v5 - 200);
    uint64_t v18 = *(void *)(v5 - 136);
    uint64_t v19 = *(void *)(v5 - 152);
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v20 = *(void *)(v5 - 184);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 224) + 8LL))(v17, v20);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v16, v10);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 144) + 8LL))(v19, v18);
  }

Swift::Int URL.ParseStrategy.ComponentParseStrategy.hashValue.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher.init(_seed:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v2, a1);
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 2LL, v4);
  if (v12)
  {
    Hasher._combine(_:)(v12 != 1);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v11, v4);
    Hasher._combine(_:)(2uLL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }

  return Hasher._finalize()();
}

void URL.ParseStrategy.ComponentParseStrategy.init(from:)()
{
}

void sub_182FCB604( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys,  a1);
  *(void *)(v13 - 144) = a1;
  *(void *)(v13 - 192) = v15;
  uint64_t v16 = type metadata accessor for KeyedDecodingContainer();
  *(void *)(v13 - 264) = v16;
  *(void *)(v13 - 272) = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  *(void *)(v13 - 184) = (char *)&a9 - v17;
  *(void *)(v13 - 120) = v9;
  *(void *)(v13 - 112) = v11;
  *(void *)(v13 - 104) = v12;
  *(void *)(v13 - 96) = v10;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.OptionalCodingKeys();
}

void sub_182FCB680( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v13 - 208) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys,  a1);
  *(void *)(v13 - 200) = a1;
  uint64_t v15 = type metadata accessor for KeyedDecodingContainer();
  *(void *)(v13 - 280) = v15;
  *(void *)(v13 - 288) = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  *(void *)(v13 - 216) = (char *)&a9 - v16;
  *(void *)(v13 - 120) = v9;
  *(void *)(v13 - 112) = v11;
  *(void *)(v13 - 104) = v12;
  *(void *)(v13 - 96) = v10;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.RequiredCodingKeys();
}

void sub_182FCB6F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v13 - 232) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys,  a1);
  *(void *)(v13 - 224) = a1;
  uint64_t v15 = type metadata accessor for KeyedDecodingContainer();
  *(void *)(v13 - 296) = v15;
  *(void *)(v13 - 304) = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  *(void *)(v13 - 240) = (char *)&a9 - v16;
  *(void *)(v13 - 120) = v9;
  *(void *)(v13 - 112) = v11;
  *(void *)(v13 - 104) = v12;
  *(void *)(v13 - 96) = v10;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.CodingKeys();
}

void sub_182FCB770(uint64_t a1)
{
  uint64_t v6 = type metadata accessor for KeyedDecodingContainer();
  *(void *)(v5 - 136) = v6;
  *(void *)(v5 - 160) = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  *(void *)(v5 - 176) = v1;
  *(void *)(v5 - 120) = v1;
  *(void *)(v5 - 112) = v3;
  *(void *)(v5 - 256) = v3;
  *(void *)(v5 - 104) = v4;
  *(void *)(v5 - 96) = v2;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy();
}

uint64_t sub_182FCB7E4(uint64_t a1)
{
  *(void *)(v3 - 168) = a1;
  *(void *)(v3 - 248) = *(void *)(a1 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](a1);
  uint64_t v6 = &v37[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v4);
  uint64_t v8 = &v37[-v7];
  uint64_t v9 = v2;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  uint64_t v10 = *(void *)(v3 - 128);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v10)
  {
    *(void *)(v3 - 320) = v6;
    *(void *)(v3 - 312) = v8;
    uint64_t v11 = *(void *)(v3 - 152);
    *(void *)(v3 - 128) = v2;
    uint64_t v12 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v13 = _ArrayBuffer.requestNativeBuffer()();
    if (!v13)
    {
      *(void *)(v3 - 72) = v12;
      uint64_t v14 = type metadata accessor for Array();
      MEMORY[0x186E20D4C](MEMORY[0x189618488], v14);
      uint64_t v13 = _copyCollectionToContiguousArray<A>(_:)();
    }

    uint64_t v15 = v13;
    swift_bridgeObjectRelease();
    uint64_t v16 = v11;
    uint64_t v17 = (2LL * *(void *)(v15 + 16)) | 1;
    *(void *)(v3 - 120) = v15;
    *(void *)(v3 - 112) = v15 + 32;
    *(void *)(v3 - 104) = 0LL;
    *(void *)(v3 - 96) = v17;
    uint64_t v18 = type metadata accessor for ArraySlice();
    MEMORY[0x186E20D4C](MEMORY[0x189618FA0], v18);
    Collection<>.popFirst()();
    int v19 = *(unsigned __int8 *)(v3 - 72);
    uint64_t v20 = *(void *)(v3 - 136);
    if (v19 != 3 && *(void *)(v3 - 104) == *(void *)(v3 - 96) >> 1)
    {
      if (*(_BYTE *)(v3 - 72))
      {
        if (v19 != 1)
        {
          *(_BYTE *)(v3 - 72) = 2;
          uint64_t v31 = *(void *)(v3 - 184);
          uint64_t v32 = v1;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v33 = *(void *)(v3 - 320);
          uint64_t v34 = *(void *)(v3 - 176);
          uint64_t v35 = *(void *)(v3 - 264);
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v36 = *(void *)(v3 - 160);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 272) + 8LL))(v31, v35);
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v32, v20);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v33, 0LL, 2LL, v34);
          uint64_t v30 = *(void *)(v3 - 248);
          uint64_t v22 = *(void *)(v3 - 312);
          uint64_t v29 = *(void *)(v3 - 168);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v22, v33, v29);
          goto LABEL_14;
        }

        *(_BYTE *)(v3 - 72) = 1;
        uint64_t v21 = *(void *)(v3 - 216);
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(uint64_t, void))(*(void *)(v3 - 288) + 8LL))(v21, *(void *)(v3 - 280));
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 160) + 8LL))(v1, v20);
        uint64_t v22 = *(void *)(v3 - 312);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v3 - 176) - 8LL) + 56LL))( v22,  2LL,  2LL);
      }

      else
      {
        *(_BYTE *)(v3 - 72) = 0;
        uint64_t v28 = *(void *)(v3 - 240);
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(uint64_t, void))(*(void *)(v3 - 304) + 8LL))(v28, *(void *)(v3 - 296));
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 160) + 8LL))(v1, v20);
        uint64_t v22 = *(void *)(v3 - 312);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v3 - 176) - 8LL) + 56LL))( v22,  1LL,  2LL);
      }

      uint64_t v29 = *(void *)(v3 - 168);
      uint64_t v30 = *(void *)(v3 - 248);
LABEL_14:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v16, v22, v29);
      uint64_t v26 = *(void *)(v3 - 128);
      return __swift_destroy_boxed_opaque_existential_1(v26);
    }

    uint64_t v23 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *unint64_t v25 = *(void *)(v3 - 168);
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104LL))( v25,  *MEMORY[0x189619358],  v23);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 160) + 8LL))(v1, v20);
    uint64_t v9 = *(void **)(v3 - 128);
  }

  uint64_t v26 = (uint64_t)v9;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

void protocol witness for Decodable.init(from:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>()
{
}

  ;
}

void protocol witness for Encodable.encode(to:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>()
{
}

  ;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>( uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>( uint64_t a1)
{
  static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(a1);
}

__n128 URL.ParseStrategy.scheme(_:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  __n128 v6 = v2[7];
  __n128 v25 = v2[6];
  __n128 v26 = v6;
  __n128 v7 = v2[5];
  __n128 v23 = v2[4];
  __n128 v24 = v7;
  __n128 v8 = v2[3];
  __n128 v21 = v2[2];
  __n128 v22 = v8;
  __n128 v9 = v2[1];
  v20[0] = *v2;
  v20[1] = v9;
  __n128 v10 = v26;
  __n128 v18 = v24;
  __n128 v19 = v25;
  unint64_t v11 = v23.n128_u64[0];
  char v12 = v23.n128_i8[8];
  __n128 v16 = v21;
  __n128 v17 = v22;
  __n128 v15 = v9;
  __int128 v13 = v20[0];
  outlined retain of URL.ParseStrategy( (uint64_t *)v20,  (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v13, *((unint64_t *)&v13 + 1));
  a2->n128_u64[0] = v4;
  a2->n128_u64[1] = v5;
  a2[1] = v15;
  a2[2] = v16;
  a2[3] = v17;
  a2[4].n128_u64[0] = v11;
  a2[4].n128_u8[8] = v12;
  __n128 result = v19;
  a2[5] = v18;
  a2[6] = v19;
  a2[7] = v10;
  return result;
}

__n128 URL.ParseStrategy.user(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  __n128 v6 = v2[7];
  __n128 v26 = v2[6];
  __n128 v27 = v6;
  __n128 v7 = v2[5];
  __n128 v24 = v2[4];
  __n128 v25 = v7;
  __n128 v8 = v2[3];
  __n128 v22 = v2[2];
  __n128 v23 = v8;
  __n128 v9 = v2[1];
  v21[0] = *v2;
  v21[1] = v9;
  uint64_t v10 = v27.n128_i64[1];
  unint64_t v20 = v27.n128_u64[0];
  __n128 v18 = v25;
  __n128 v19 = v26;
  unint64_t v11 = v24.n128_u64[0];
  char v12 = v24.n128_i8[8];
  __n128 v16 = v22;
  __n128 v17 = v8;
  __int128 v13 = v21[0];
  __n128 v14 = v9;
  outlined retain of URL.ParseStrategy( (uint64_t *)v21,  (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v14.n128_i64[0], v14.n128_u64[1]);
  *(_OWORD *)a2 = v13;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  *(__n128 *)(a2 + 32) = v16;
  *(__n128 *)(a2 + 48) = v17;
  *(void *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = v12;
  __n128 result = v19;
  *(__n128 *)(a2 + 80) = v18;
  *(__n128 *)(a2 + 96) = v19;
  *(void *)(a2 + 112) = v20;
  *(void *)(a2 + 120) = v10;
  return result;
}

__n128 URL.ParseStrategy.password(_:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  __n128 v6 = v2[7];
  __n128 v27 = v2[6];
  __n128 v28 = v6;
  __n128 v7 = v2[5];
  __n128 v25 = v2[4];
  __n128 v26 = v7;
  __n128 v8 = v2[1];
  __n128 v21 = *v2;
  __n128 v22 = v8;
  __n128 v9 = v2[3];
  __n128 v23 = v2[2];
  __n128 v24 = v9;
  uint64_t v10 = v28.n128_i64[1];
  unint64_t v20 = v28.n128_u64[0];
  __n128 v18 = v26;
  __n128 v19 = v27;
  unint64_t v11 = v25.n128_u64[0];
  char v12 = v25.n128_i8[8];
  __n128 v13 = v22;
  __n128 v16 = v21;
  __n128 v17 = v9;
  __n128 v14 = v23;
  outlined retain of URL.ParseStrategy( (uint64_t *)&v21,  (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v14.n128_i64[0], v14.n128_u64[1]);
  *a2 = v16;
  a2[1] = v13;
  a2[2].n128_u64[0] = v4;
  a2[2].n128_u64[1] = v5;
  a2[3] = v17;
  a2[4].n128_u64[0] = v11;
  a2[4].n128_u8[8] = v12;
  __n128 result = v19;
  a2[5] = v18;
  a2[6] = v19;
  a2[7].n128_u64[0] = v20;
  a2[7].n128_u64[1] = v10;
  return result;
}

__n128 URL.ParseStrategy.host(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  __n128 v6 = v2[7];
  __n128 v27 = v2[6];
  __n128 v28 = v6;
  __n128 v7 = v2[5];
  __n128 v25 = v2[4];
  __n128 v26 = v7;
  __n128 v8 = v2[1];
  v22[0] = *v2;
  v22[1] = v8;
  __n128 v9 = v2[3];
  __n128 v23 = v2[2];
  __n128 v24 = v9;
  uint64_t v10 = v28.n128_i64[1];
  unint64_t v21 = v28.n128_u64[0];
  __n128 v19 = v26;
  __n128 v20 = v27;
  unint64_t v11 = v9.n128_u64[1];
  unint64_t v12 = v25.n128_u64[0];
  char v13 = v25.n128_i8[8];
  __n128 v14 = v23;
  __int128 v17 = v22[0];
  __n128 v18 = v8;
  uint64_t v15 = v9.n128_u64[0];
  outlined retain of URL.ParseStrategy( (uint64_t *)v22,  (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v15, v11);
  *(_OWORD *)a2 = v17;
  *(__n128 *)(a2 + 16) = v18;
  *(__n128 *)(a2 + 32) = v14;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  *(void *)(a2 + 64) = v12;
  *(_BYTE *)(a2 + 72) = v13;
  __n128 result = v20;
  *(__n128 *)(a2 + 80) = v19;
  *(__n128 *)(a2 + 96) = v20;
  *(void *)(a2 + 112) = v21;
  *(void *)(a2 + 120) = v10;
  return result;
}

uint64_t *URL.ParseStrategy.port(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((_BYTE *)a1 + 8);
  __int128 v5 = v2[5];
  __int128 v17 = v2[4];
  __int128 v18 = v5;
  __int128 v6 = v2[7];
  __int128 v19 = v2[6];
  __int128 v20 = v6;
  __int128 v7 = v2[1];
  __int128 v13 = *v2;
  __int128 v14 = v7;
  __int128 v8 = v2[3];
  __int128 v15 = v2[2];
  __int128 v16 = v8;
  char v21 = v4;
  __int128 v9 = v14;
  *(_OWORD *)a2 = v13;
  *(_OWORD *)(a2 + 16) = v9;
  __int128 v10 = v16;
  *(_OWORD *)(a2 + 32) = v15;
  *(_OWORD *)(a2 + 48) = v10;
  *(void *)(a2 + 64) = v3;
  *(_BYTE *)(a2 + 72) = v4;
  __int128 v11 = v19;
  *(_OWORD *)(a2 + 80) = v18;
  *(_OWORD *)(a2 + 96) = v11;
  *(_OWORD *)(a2 + 112) = v20;
  return outlined retain of URL.ParseStrategy( (uint64_t *)&v13,  (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
}

__n128 URL.ParseStrategy.path(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  __n128 v6 = v2[7];
  __n128 v25 = v2[6];
  __n128 v26 = v6;
  __n128 v7 = v2[3];
  __n128 v21 = v2[2];
  __n128 v22 = v7;
  __n128 v8 = v2[1];
  v20[0] = *v2;
  v20[1] = v8;
  __n128 v9 = v2[5];
  __n128 v23 = v2[4];
  __n128 v24 = v9;
  __n128 v10 = v26;
  unint64_t v11 = v23.n128_u64[0];
  char v12 = v23.n128_i8[8];
  __n128 v18 = v22;
  __n128 v19 = v25;
  __n128 v16 = v8;
  __n128 v17 = v21;
  __int128 v15 = v20[0];
  __n128 v13 = v9;
  outlined retain of URL.ParseStrategy( (uint64_t *)v20,  (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v13.n128_i64[0], v13.n128_u64[1]);
  *(_OWORD *)a2 = v15;
  *(__n128 *)(a2 + 16) = v16;
  *(__n128 *)(a2 + 32) = v17;
  *(__n128 *)(a2 + 48) = v18;
  *(void *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = v12;
  *(void *)(a2 + 80) = v4;
  *(void *)(a2 + 88) = v5;
  __n128 result = v19;
  *(__n128 *)(a2 + 96) = v19;
  *(__n128 *)(a2 + 112) = v10;
  return result;
}

__n128 URL.ParseStrategy.query(_:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  __n128 v6 = v2[5];
  __n128 v25 = v2[4];
  __n128 v26 = v6;
  __n128 v7 = v2[3];
  __n128 v23 = v2[2];
  __n128 v24 = v7;
  __n128 v8 = v2[1];
  __n128 v21 = *v2;
  __n128 v22 = v8;
  __n128 v9 = v2[7];
  __n128 v27 = v2[6];
  __n128 v28 = v9;
  uint64_t v10 = v9.n128_i64[1];
  unint64_t v20 = v9.n128_u64[0];
  __n128 v11 = v26;
  unint64_t v12 = v25.n128_u64[0];
  char v13 = v25.n128_i8[8];
  __n128 v18 = v23;
  __n128 v19 = v24;
  __n128 v16 = v21;
  __n128 v17 = v22;
  __n128 v14 = v27;
  outlined retain of URL.ParseStrategy( (uint64_t *)&v21,  (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v14.n128_i64[0], v14.n128_u64[1]);
  *a2 = v16;
  a2[1] = v17;
  __n128 result = v19;
  a2[2] = v18;
  a2[3] = v19;
  a2[4].n128_u64[0] = v12;
  a2[4].n128_u8[8] = v13;
  a2[5] = v11;
  a2[6].n128_u64[0] = v4;
  a2[6].n128_u64[1] = v5;
  a2[7].n128_u64[0] = v20;
  a2[7].n128_u64[1] = v10;
  return result;
}

__n128 URL.ParseStrategy.fragment(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  __n128 v6 = v2[5];
  __n128 v23 = v2[4];
  __n128 v24 = v6;
  __n128 v7 = v2[3];
  __n128 v21 = v2[2];
  __n128 v22 = v7;
  __n128 v8 = v2[1];
  v20[0] = *v2;
  v20[1] = v8;
  __n128 v9 = v2[7];
  __n128 v25 = v2[6];
  __n128 v26 = v9;
  __n128 v10 = v25;
  unint64_t v11 = v23.n128_u64[0];
  char v12 = v23.n128_i8[8];
  __n128 v18 = v22;
  __n128 v19 = v24;
  __n128 v16 = v8;
  __n128 v17 = v21;
  __int128 v15 = v20[0];
  __n128 v13 = v9;
  outlined retain of URL.ParseStrategy( (uint64_t *)v20,  (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v13.n128_i64[0], v13.n128_u64[1]);
  *(_OWORD *)a2 = v15;
  *(__n128 *)(a2 + 16) = v16;
  *(__n128 *)(a2 + 32) = v17;
  *(__n128 *)(a2 + 48) = v18;
  *(void *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = v12;
  __n128 result = v19;
  *(__n128 *)(a2 + 80) = v19;
  *(__n128 *)(a2 + 96) = v10;
  *(void *)(a2 + 112) = v4;
  *(void *)(a2 + 120) = v5;
  return result;
}

uint64_t URL.ParseStrategy.validate(_:)(__int128 *a1)
{
  __int128 v2 = a1[7];
  __int128 v130 = a1[6];
  __int128 v131 = v2;
  v132[0] = a1[8];
  *(_OWORD *)((char *)v132 + 10) = *(__int128 *)((char *)a1 + 138);
  __int128 v3 = a1[3];
  __int128 v126 = a1[2];
  __int128 v127 = v3;
  __int128 v4 = a1[5];
  __int128 v128 = a1[4];
  __int128 v129 = v4;
  __int128 v5 = a1[1];
  __int128 v124 = *a1;
  __int128 v125 = v5;
  __int128 v6 = v1[5];
  __int128 v7 = v1[3];
  __int128 v137 = v1[4];
  __int128 v138 = v6;
  __int128 v8 = v1[5];
  __int128 v9 = v1[7];
  __int128 v139 = v1[6];
  __int128 v140 = v9;
  __int128 v10 = v1[1];
  __int128 v133 = *v1;
  __int128 v134 = v10;
  __int128 v11 = v1[3];
  __int128 v13 = *v1;
  __int128 v12 = v1[1];
  __int128 v135 = v1[2];
  __int128 v136 = v11;
  __int128 v119 = v137;
  __int128 v120 = v8;
  __int128 v14 = v1[7];
  __int128 v121 = v139;
  __int128 v122 = v14;
  __int128 v115 = v13;
  __int128 v116 = v12;
  __int128 v117 = v135;
  __int128 v118 = v7;
  if ((URL.ParseStrategy.requiredComponentsValue.getter() & 1) != 0 && !(void)v126)
  {
    if (BYTE9(v124) != 1 || !(void)v124 || (*(_BYTE *)(v124 + 48) & 1) != 0) {
      return 0LL;
    }
    outlined retain of URLComponents((uint64_t)&v124);
    uint64_t v15 = String.subscript.getter();
    MEMORY[0x186E1B610](v15);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v124);
    swift_bridgeObjectRelease();
  }

  __int128 v119 = v137;
  __int128 v120 = v138;
  __int128 v121 = v139;
  __int128 v122 = v140;
  __int128 v115 = v133;
  __int128 v116 = v134;
  __int128 v117 = v135;
  __int128 v118 = v136;
  if ((URL.ParseStrategy.requiredComponentsValue.getter() & 2) == 0) {
    goto LABEL_71;
  }
  __int128 v121 = v130;
  __int128 v122 = v131;
  v123[0] = v132[0];
  *(_OWORD *)((char *)v123 + 10) = *(_OWORD *)((char *)v132 + 10);
  __int128 v117 = v126;
  __int128 v118 = v127;
  __int128 v119 = v128;
  __int128 v120 = v129;
  __int128 v115 = v124;
  __int128 v116 = v125;
  uint64_t v16 = outlined retain of URLComponents((uint64_t)&v124);
  URLComponents._URLComponents.user.getter(v16);
  uint64_t v18 = v17;
  outlined release of URLComponents((uint64_t)&v124);
  swift_bridgeObjectRelease();
  if (v18)
  {
LABEL_71:
    __int128 v110 = v137;
    __int128 v111 = v138;
    __int128 v112 = v139;
    __int128 v113 = v140;
    __int128 v106 = v133;
    __int128 v107 = v134;
    __int128 v108 = v135;
    __int128 v109 = v136;
    if ((URL.ParseStrategy.requiredComponentsValue.getter() & 4) == 0) {
      goto LABEL_11;
    }
    __int128 v112 = v130;
    __int128 v113 = v131;
    v114[0] = v132[0];
    *(_OWORD *)((char *)v114 + 10) = *(_OWORD *)((char *)v132 + 10);
    __int128 v108 = v126;
    __int128 v109 = v127;
    __int128 v110 = v128;
    __int128 v111 = v129;
    __int128 v106 = v124;
    __int128 v107 = v125;
    uint64_t v19 = outlined retain of URLComponents((uint64_t)&v124);
    URLComponents._URLComponents.password.getter(v19);
    uint64_t v18 = v20;
    outlined release of URLComponents((uint64_t)&v124);
    swift_bridgeObjectRelease();
    if (v18)
    {
LABEL_11:
      __int128 v101 = v137;
      __int128 v102 = v138;
      __int128 v103 = v139;
      __int128 v104 = v140;
      __int128 v97 = v133;
      __int128 v98 = v134;
      __int128 v99 = v135;
      __int128 v100 = v136;
      if ((URL.ParseStrategy.requiredComponentsValue.getter() & 8) == 0) {
        goto LABEL_55;
      }
      __int128 v103 = v130;
      __int128 v104 = v131;
      v105[0] = v132[0];
      *(_OWORD *)((char *)v105 + 10) = *(_OWORD *)((char *)v132 + 10);
      __int128 v99 = v126;
      __int128 v100 = v127;
      __int128 v101 = v128;
      __int128 v102 = v129;
      __int128 v97 = v124;
      __int128 v98 = v125;
      unint64_t v21 = v129;
      if ((void)v129)
      {
        uint64_t v22 = *((void *)&v128 + 1);
        uint64_t v23 = outlined retain of URLComponents((uint64_t)&v124);
        unint64_t v24 = v21;
      }

      else if ((BYTE12(v124) & 1) != 0 && (void)v124 && (*(_BYTE *)(v124 + 120) & 1) == 0)
      {
        outlined retain of URLComponents((uint64_t)&v124);
        uint64_t v44 = String.subscript.getter();
        uint64_t v22 = MEMORY[0x186E1B610](v44);
        unint64_t v24 = v45;
        uint64_t v23 = swift_bridgeObjectRelease();
      }

      else
      {
        outlined retain of URLComponents((uint64_t)&v124);
        uint64_t v23 = URLComponents._URLComponents.port.getter();
        if ((v25 & 1) != 0)
        {
          URLComponents._URLComponents.percentEncodedUser.getter();
          uint64_t v18 = v26;
          uint64_t v23 = swift_bridgeObjectRelease();
          if (!v18)
          {
            outlined release of URLComponents((uint64_t)&v124);
            return v18;
          }
        }

        uint64_t v22 = 0LL;
        unint64_t v24 = 0xE000000000000000LL;
      }

      uint64_t v27 = v22 & 0xFFFFFFFFFFFFLL;
      if ((v24 & 0x2000000000000000LL) != 0) {
        uint64_t v28 = HIBYTE(v24) & 0xF;
      }
      else {
        uint64_t v28 = v22 & 0xFFFFFFFFFFFFLL;
      }
      if (!v28)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        outlined release of URLComponents((uint64_t)&v124);
        goto LABEL_55;
      }

      if ((BYTE8(v132[1]) & 1) != 0)
      {
        *(void *)&__int128 v88 = v22;
        *((void *)&v88 + 1) = v24;
        MEMORY[0x1895F8858](v23);
        __int128 v68 = &v88;
        uint64_t v69 = MEMORY[0x18961AFF8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v67,  v22,  v24);
        if (v29 == 1)
        {
          unint64_t v31 = *((void *)&v88 + 1);
          Swift::Int v30 = v88;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v30, v31, MEMORY[0x18961AFF8]);
          uint64_t v18 = v32;
          swift_bridgeObjectRelease_n();
LABEL_52:
          swift_bridgeObjectRelease();
LABEL_53:
          outlined release of URLComponents((uint64_t)&v124);
          if (!v18) {
            return v18;
          }
          goto LABEL_54;
        }

        uint64_t v18 = v29;
LABEL_39:
        swift_bridgeObjectRelease_n();
        goto LABEL_53;
      }

      if ((v24 & 0x1000000000000000LL) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else
      {
        if ((v24 & 0x2000000000000000LL) != 0)
        {
          *(void *)&__int128 v88 = v22;
          *((void *)&v88 + 1) = v24 & 0xFFFFFFFFFFFFFFLL;
          *(void *)&__int128 v79 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          *((void *)&v79 + 1) = 0LL;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v88,  HIBYTE(v24) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v79,  0,  (unsigned __int8 *)&v88,  HIBYTE(v24) & 0xF,  (uint64_t *)&v70);
          uint64_t v18 = *((void *)&v70 + 1);
          swift_release();
        }

        else
        {
          if ((v22 & 0x1000000000000000LL) != 0)
          {
            uint64_t v33 = (unsigned __int8 *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }

          else
          {
            uint64_t v33 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            uint64_t v27 = v52;
          }

          *(void *)&__int128 v88 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          *((void *)&v88 + 1) = 0LL;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v33,  v27,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v88,  0,  v33,  v27);
          uint64_t v18 = v34;
        }

        swift_bridgeObjectRelease();
        if (v18 != 1) {
          goto LABEL_39;
        }
      }

      *(void *)&__int128 v88 = v22;
      *((void *)&v88 + 1) = v24;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      uint64_t v35 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v36 = objc_msgSend(v35, sel__fastCharacterContents);
      id v37 = v35;
      if (v36)
      {
        *(void *)&__int128 v88 = v22;
        *((void *)&v88 + 1) = v24;
        StringProtocol._ephemeralString.getter();
        uint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v39 = objc_msgSend(v38, sel_length);
        uint64_t v40 = swift_unknownObjectRelease();
        uint64_t v41 = MEMORY[0x1895F8858](v40);
        LOBYTE(v68) = 0;
        MEMORY[0x1895F8858](v41);
        v66[2] = v36;
        v66[3] = v39;
        specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v36,  (uint64_t)v39,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  v42,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t)v66);
        uint64_t v18 = v43;
        swift_bridgeObjectRelease_n();
        outlined release of URLComponents((uint64_t)&v124);
        if (!v18) {
          return v18;
        }
LABEL_54:
        swift_bridgeObjectRelease();
LABEL_55:
        __int128 v92 = v137;
        __int128 v93 = v138;
        __int128 v94 = v139;
        __int128 v95 = v140;
        __int128 v88 = v133;
        __int128 v89 = v134;
        __int128 v90 = v135;
        __int128 v91 = v136;
        if ((URL.ParseStrategy.requiredComponentsValue.getter() & 0x10) == 0) {
          goto LABEL_60;
        }
        __int128 v94 = v130;
        __int128 v95 = v131;
        v96[0] = v132[0];
        *(_OWORD *)((char *)v96 + 10) = *(_OWORD *)((char *)v132 + 10);
        __int128 v90 = v126;
        __int128 v91 = v127;
        __int128 v92 = v128;
        __int128 v93 = v129;
        __int128 v88 = v124;
        __int128 v89 = v125;
        URLComponents.port.getter();
        if ((v55 & 1) == 0)
        {
LABEL_60:
          __int128 v92 = v137;
          __int128 v93 = v138;
          __int128 v94 = v139;
          __int128 v95 = v140;
          __int128 v88 = v133;
          __int128 v89 = v134;
          __int128 v90 = v135;
          __int128 v91 = v136;
          if ((URL.ParseStrategy.requiredComponentsValue.getter() & 0x20) == 0) {
            goto LABEL_61;
          }
          __int128 v94 = v130;
          __int128 v95 = v131;
          v96[0] = v132[0];
          *(_OWORD *)((char *)v96 + 10) = *(_OWORD *)((char *)v132 + 10);
          __int128 v90 = v126;
          __int128 v91 = v127;
          __int128 v92 = v128;
          __int128 v93 = v129;
          __int128 v88 = v124;
          __int128 v89 = v125;
          outlined retain of URLComponents((uint64_t)&v124);
          uint64_t v56 = URLComponents._URLComponents.path.getter();
          unint64_t v58 = v57;
          outlined release of URLComponents((uint64_t)&v124);
          swift_bridgeObjectRelease();
          uint64_t v59 = HIBYTE(v58) & 0xF;
          if ((v58 & 0x2000000000000000LL) == 0) {
            uint64_t v59 = (unint64_t)v56 & 0xFFFFFFFFFFFFLL;
          }
          if (v59)
          {
LABEL_61:
            __int128 v83 = v137;
            __int128 v84 = v138;
            __int128 v85 = v139;
            __int128 v86 = v140;
            __int128 v79 = v133;
            __int128 v80 = v134;
            __int128 v81 = v135;
            __int128 v82 = v136;
            if ((URL.ParseStrategy.requiredComponentsValue.getter() & 0x40) == 0) {
              goto LABEL_63;
            }
            __int128 v85 = v130;
            __int128 v86 = v131;
            v87[0] = v132[0];
            *(_OWORD *)((char *)v87 + 10) = *(_OWORD *)((char *)v132 + 10);
            __int128 v81 = v126;
            __int128 v82 = v127;
            __int128 v83 = v128;
            __int128 v84 = v129;
            __int128 v79 = v124;
            __int128 v80 = v125;
            uint64_t v60 = outlined retain of URLComponents((uint64_t)&v124);
            URLComponents._URLComponents.query.getter(v60);
            uint64_t v18 = v61;
            outlined release of URLComponents((uint64_t)&v124);
            swift_bridgeObjectRelease();
            if (v18)
            {
LABEL_63:
              __int128 v74 = v137;
              __int128 v75 = v138;
              __int128 v76 = v139;
              __int128 v77 = v140;
              __int128 v70 = v133;
              __int128 v71 = v134;
              __int128 v72 = v135;
              __int128 v73 = v136;
              if ((URL.ParseStrategy.requiredComponentsValue.getter() & 0x80) != 0)
              {
                __int128 v77 = v131;
                v78[0] = v132[0];
                *(_OWORD *)((char *)v78 + 10) = *(_OWORD *)((char *)v132 + 10);
                __int128 v72 = v126;
                __int128 v73 = v127;
                __int128 v74 = v128;
                __int128 v75 = v129;
                __int128 v76 = v130;
                __int128 v70 = v124;
                __int128 v71 = v125;
                uint64_t v63 = outlined retain of URLComponents((uint64_t)&v124);
                URLComponents._URLComponents.fragment.getter(v63);
                uint64_t v65 = v64;
                outlined release of URLComponents((uint64_t)&v124);
                uint64_t v18 = v65 != 0;
                swift_bridgeObjectRelease();
              }

              else
              {
                return 1LL;
              }
            }

            return v18;
          }
        }

        return 0LL;
      }

      *(void *)&__int128 v88 = v22;
      *((void *)&v88 + 1) = v24;
      swift_bridgeObjectRetain();
      uint64_t v47 = String.init<A>(_:)();
      unint64_t v48 = v46;
      if ((v46 & 0x1000000000000000LL) != 0)
      {
        uint64_t v47 = static String._copying(_:)();
        unint64_t v54 = v53;
        swift_bridgeObjectRelease();
        unint64_t v48 = v54;
        if ((v54 & 0x2000000000000000LL) == 0) {
          goto LABEL_44;
        }
      }

      else if ((v46 & 0x2000000000000000LL) == 0)
      {
LABEL_44:
        if ((v47 & 0x1000000000000000LL) != 0)
        {
          uint64_t v49 = (unsigned __int8 *)((v48 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v50 = v47 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          uint64_t v49 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }

        *(void *)&__int128 v88 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v88 + 1) = 0LL;
        _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v49,  v50,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v88,  0,  v49,  v50);
        uint64_t v18 = v51;
        goto LABEL_51;
      }

      *(void *)&__int128 v88 = v47;
      *((void *)&v88 + 1) = v48 & 0xFFFFFFFFFFFFFFLL;
      *(void *)&__int128 v79 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((void *)&v79 + 1) = 0LL;
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v88,  HIBYTE(v48) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v79,  0,  (unsigned __int8 *)&v88,  HIBYTE(v48) & 0xF,  (uint64_t *)&v70);
      uint64_t v18 = *((void *)&v70 + 1);
      swift_release();
LABEL_51:
      swift_bridgeObjectRelease_n();
      goto LABEL_52;
    }
  }

  return v18;
}

uint64_t URL.ParseStrategy.fillDefaultValues(for:)(__int128 *a1)
{
  __int128 v3 = 0LL;
  __int128 v4 = v1[5];
  v383[6] = v1[4];
  v383[7] = v4;
  __int128 v5 = v1[7];
  v383[8] = v1[6];
  v383[9] = v5;
  __int128 v6 = v1[1];
  v383[2] = *v1;
  v383[3] = v6;
  __int128 v7 = v1[3];
  v383[4] = v1[2];
  v383[5] = v7;
  uint64_t v8 = *((void *)a1 + 4);
  if (v8)
  {
    if ((v8 & 0x2000000000000000LL) == 0)
    {
      uint64_t v9 = *((void *)a1 + 3);
      goto LABEL_4;
    }

    uint64_t v13 = v8;
LABEL_12:
    swift_bridgeObjectRetain();
    uint64_t v10 = swift_bridgeObjectRelease();
    if ((v13 & 0xF00000000000000LL) != 0) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }

  if (*((_BYTE *)a1 + 9) == 1 && *(void *)a1 && (*(_BYTE *)(*(void *)a1 + 48LL) & 1) == 0)
  {
    uint64_t v11 = String.subscript.getter();
    uint64_t v9 = MEMORY[0x186E1B610](v11);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    if ((v13 & 0x2000000000000000LL) == 0)
    {
LABEL_4:
      swift_bridgeObjectRetain();
      uint64_t v10 = swift_bridgeObjectRelease();
      if ((v9 & 0xFFFFFFFFFFFFLL) != 0) {
        goto LABEL_19;
      }
      goto LABEL_13;
    }

    goto LABEL_12;
  }

void URL.ParseStrategy.parse(_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  __int128 v7 = v3[5];
  v85[6] = v3[4];
  v85[7] = v7;
  __int128 v8 = v3[7];
  v85[8] = v3[6];
  v85[9] = v8;
  __int128 v9 = v3[1];
  v85[2] = *v3;
  v85[3] = v9;
  __int128 v10 = v3[3];
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v11 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v85[4] = v3[2];
  v85[5] = v10;
  if (v11)
  {
    do
    {
      String.subscript.getter();
      char v12 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
    }

    while ((v12 & 1) == 0 && 4 * v11 != (unint64_t)String.index(after:)() >> 14);
  }

  *(void *)&__int128 v68 = String.subscript.getter();
  *((void *)&v68 + 1) = v13;
  *(void *)&__int128 v69 = v14;
  *((void *)&v69 + 1) = v15;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v16 = String.init<A>(_:)();
  unint64_t v18 = v17;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v16, v18, 1, (uint64_t)v83);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v83, (uint64_t)v84);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v84) == 1)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    __int128 v65 = v84[6];
    __int128 v66 = v84[7];
    v67[0] = v85[0];
    *(_OWORD *)((char *)v67 + 10) = *(_OWORD *)((char *)v85 + 10);
    __int128 v61 = v84[2];
    __int128 v62 = v84[3];
    __int128 v63 = v84[4];
    __int128 v64 = v84[5];
    __int128 v59 = v84[0];
    __int128 v60 = v84[1];
    swift_bridgeObjectRelease();
    __int128 v56 = v65;
    __int128 v57 = v66;
    v58[0] = v67[0];
    *(_OWORD *)((char *)v58 + 10) = *(_OWORD *)((char *)v67 + 10);
    __int128 v52 = v61;
    __int128 v53 = v62;
    __int128 v54 = v63;
    __int128 v55 = v64;
    __int128 v50 = v59;
    __int128 v51 = v60;
    __int128 v74 = v65;
    __int128 v75 = v66;
    *(_OWORD *)char v76 = v67[0];
    *(_OWORD *)&v76[10] = *(_OWORD *)((char *)v67 + 10);
    __int128 v70 = v61;
    __int128 v71 = v62;
    __int128 v72 = v63;
    __int128 v73 = v64;
    __int128 v68 = v59;
    __int128 v69 = v60;
    if ((URL.ParseStrategy.validate(_:)(&v50) & 1) != 0)
    {
      URL.ParseStrategy.fillDefaultValues(for:)(&v68);
      __int128 v56 = v74;
      __int128 v57 = v75;
      v58[0] = *(_OWORD *)v76;
      *(_OWORD *)((char *)v58 + 10) = *(_OWORD *)&v76[10];
      __int128 v52 = v70;
      __int128 v53 = v71;
      __int128 v54 = v72;
      __int128 v55 = v73;
      __int128 v50 = v68;
      __int128 v51 = v69;
      URLComponents.url.getter(v49);
      outlined release of URLComponents((uint64_t)&v50);
      uint64_t v19 = v49[1];
      uint64_t v20 = v49[2];
      if (v49[0])
      {
        *a3 = v49[0];
        a3[1] = v19;
        a3[2] = v20;
        return;
      }
    }

    else
    {
      outlined release of URLComponents?(v83);
    }
  }

  URL.init(string:)(0xD000000000000039LL, 0x80000001839CAAE0LL, (uint64_t *)&v59);
  __int128 v21 = (void *)v59;
  if (!(void)v59) {
    goto LABEL_24;
  }
  LOBYTE(v68) = 1;
  *(void *)&__int128 v69 = 0LL;
  *((void *)&v68 + 1) = 0LL;
  BYTE8(v69) = 1;
  __int128 v70 = 0uLL;
  LOBYTE(v71) = 1;
  *(void *)&__int128 v72 = 0LL;
  *((void *)&v71 + 1) = 0LL;
  BYTE8(v72) = 1;
  __int128 v73 = 0uLL;
  LOBYTE(v74) = 0;
  *((void *)&v74 + 1) = 0LL;
  LOBYTE(v75) = 1;
  *(void *)char v76 = 0LL;
  *((void *)&v75 + 1) = 0LL;
  v76[8] = 1;
  *(void *)&v76[16] = 0LL;
  *(void *)&v76[24] = 0LL;
  char v77 = 1;
  uint64_t v79 = 0LL;
  uint64_t v78 = 0LL;
  char v80 = 1;
  uint64_t v81 = 0LL;
  uint64_t v82 = 0LL;
  __int128 v50 = v59;
  *(void *)&__int128 v51 = v60;
  uint64_t v22 = URL.FormatStyle.format(_:)((uint64_t *)&v50);
  __int128 v24 = v23;
  *(void *)&__int128 v68 = 0LL;
  *((void *)&v68 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(88LL);
  v25._uint64_t countAndFlagsBits = 0x7020746F6E6E6143LL;
  v25._object = (void *)0xED00002065737261LL;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = a1;
  v26._object = (void *)a2;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = 0xD000000000000046LL;
  v27._object = (void *)0x80000001839CAB20LL;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = v22;
  unint64_t v86 = v24;
  v28._object = v24;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 46LL;
  v29._object = (void *)0xE100000000000000LL;
  String.append(_:)(v29);
  __int128 v30 = v68;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_183720D90;
  *(void *)(v31 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(v31 + 72) = MEMORY[0x189617FA8];
  *(void *)(v31 + 40) = v32;
  *(_OWORD *)(v31 + 48) = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  unint64_t v33 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(v31 + 32, (uint64_t)&v68);
  __int128 v34 = v68;
  swift_retain();
  unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v34, *((uint64_t *)&v34 + 1));
  if ((v36 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    v33[(v35 >> 6) + 8] |= 1LL << v35;
    *(_OWORD *)(v33[6] + 16 * v35) = v34;
    outlined init with take of Any(&v69, (_OWORD *)(v33[7] + 32 * v35));
    uint64_t v37 = v33[2];
    BOOL v38 = __OFADD__(v37, 1LL);
    uint64_t v39 = v37 + 1;
    if (!v38)
    {
      v33[2] = v39;
      swift_release();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      id v40 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      uint64_t v41 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v42 = objc_msgSend(v40, sel_initWithDomain_code_userInfo_, v41, 2048, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v43 = objc_msgSend(v42, sel_domain);
      id v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      uint64_t v46 = v45;

      if (v44 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v46 == v47)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_20:
        swift_willThrow();
        outlined consume of URL?(v21);
        outlined consume of URL?(0LL);
        return;
      }

      char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v48 & 1) != 0) {
        goto LABEL_20;
      }
      goto LABEL_23;
    }
  }

  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
}

void protocol witness for ParseStrategy.parse(_:) in conformance URL.ParseStrategy( uint64_t a1@<X0>, void *a2@<X8>)
{
}

double static ParseStrategy<>.url.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = 0LL;
  *(_OWORD *)(a1 + 24) = xmmword_18372C2E0;
  *(void *)(a1 + 40) = 1LL;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 1LL;
  *(_BYTE *)(a1 + 72) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = xmmword_183723F60;
  *(_OWORD *)(a1 + 96) = xmmword_183723F60;
  *(_OWORD *)(a1 + 112) = xmmword_183723F60;
  return result;
}

__n128 URL.init<A>(_:strategy:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 48))(&v12, a1, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(a1, AssociatedTypeWitness);
  if (!v5)
  {
    __n128 result = v13;
    *(void *)a5 = v12;
    *(__n128 *)(a5 + 8) = result;
  }

  return result;
}

void URL.ParseStrategy.consuming(_:startingAt:in:)( unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  __int128 v5 = v3[5];
  v72[6] = v3[4];
  v72[7] = v5;
  __int128 v6 = v3[7];
  v72[8] = v3[6];
  v72[9] = v6;
  __int128 v7 = v3[1];
  v72[2] = *v3;
  v72[3] = v7;
  __int128 v8 = v3[3];
  v72[4] = v3[2];
  v72[5] = v8;
  if (a1 >> 14 >= a2 >> 14) {
    goto LABEL_21;
  }
  unint64_t v9 = String.subscript.getter();
  unint64_t v12 = v9;
  unint64_t v13 = v10;
  uint64_t v14 = v11;
  unint64_t v15 = v10 >> 14;
  unint64_t v16 = v9 >> 14;
  if (v9 >> 14 == v10 >> 14)
  {
    uint64_t v73 = v11;
    unint64_t v17 = v10;
  }

  else
  {
    unint64_t v33 = v9 >> 14;
    Substring.subscript.getter();
    char v18 = Character.isWhitespace.getter();
    swift_bridgeObjectRelease();
    unint64_t v17 = v12;
    if ((v18 & 1) != 0)
    {
LABEL_14:
      *(void *)&__int128 v64 = Substring.subscript.getter();
      *((void *)&v64 + 1) = v24;
      *(void *)&__int128 v65 = v25;
      *((void *)&v65 + 1) = v26;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      uint64_t v27 = String.init<A>(_:)();
      unint64_t v29 = v28;
      swift_bridgeObjectRetain();
      specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v27, v29, 1, (uint64_t)v63);
      outlined init with take of URLComponents._URLComponents?((uint64_t)v63, (uint64_t)&v64);
      if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v64) == 1)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        __int128 v51 = v70;
        __int128 v52 = v71;
        v53[0] = v72[0];
        *(_OWORD *)((char *)v53 + 10) = *(_OWORD *)((char *)v72 + 10);
        __int128 v47 = v66;
        __int128 v48 = v67;
        __int128 v49 = v68;
        __int128 v50 = v69;
        __int128 v45 = v64;
        __int128 v46 = v65;
        swift_bridgeObjectRelease();
        __int128 v42 = v51;
        __int128 v43 = v52;
        v44[0] = v53[0];
        *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v53 + 10);
        __int128 v38 = v47;
        __int128 v39 = v48;
        __int128 v40 = v49;
        __int128 v41 = v50;
        __int128 v36 = v45;
        __int128 v37 = v46;
        __int128 v60 = v51;
        __int128 v61 = v52;
        v62[0] = v53[0];
        *(_OWORD *)((char *)v62 + 10) = *(_OWORD *)((char *)v53 + 10);
        __int128 v56 = v47;
        __int128 v57 = v48;
        __int128 v58 = v49;
        __int128 v59 = v50;
        __int128 v54 = v45;
        __int128 v55 = v46;
        if ((URL.ParseStrategy.validate(_:)(&v36) & 1) != 0)
        {
          URL.ParseStrategy.fillDefaultValues(for:)(&v54);
          __int128 v42 = v60;
          __int128 v43 = v61;
          v44[0] = v62[0];
          *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v62 + 10);
          __int128 v38 = v56;
          __int128 v39 = v57;
          __int128 v40 = v58;
          __int128 v41 = v59;
          __int128 v36 = v54;
          __int128 v37 = v55;
          URLComponents.url.getter((uint64_t *)&v34);
          outlined release of URLComponents((uint64_t)&v36);
          swift_bridgeObjectRelease();
          __int128 v30 = v34;
          if ((void)v34)
          {
            uint64_t v31 = v35;
            *(void *)a3 = v17;
            *(_OWORD *)(a3 + 8) = v30;
            *(void *)(a3 + 24) = v31;
            return;
          }

          goto LABEL_21;
        }

        outlined release of URLComponents?(v63);
      }

      swift_bridgeObjectRelease();
LABEL_21:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return;
    }

    uint64_t v32 = a3;
    unint64_t v19 = Substring.index(after:)();
    unint64_t v20 = v19 >> 14;
    uint64_t v73 = v14;
    if (v19 >> 14 == v15)
    {
      unint64_t v17 = v13;
    }

    else
    {
      unint64_t v17 = v19;
      Substring.subscript.getter();
      char v21 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
      {
LABEL_10:
        unint64_t v15 = v20;
      }

      else
      {
        while (1)
        {
          unint64_t v22 = Substring.index(after:)();
          unint64_t v20 = v22 >> 14;
          if (v22 >> 14 == v15) {
            break;
          }
          unint64_t v17 = v22;
          Substring.subscript.getter();
          char v23 = Character.isWhitespace.getter();
          swift_bridgeObjectRelease();
          if ((v23 & 1) != 0) {
            goto LABEL_10;
          }
        }

        unint64_t v17 = v13;
      }
    }

    a3 = v32;
    unint64_t v16 = v33;
  }

  if (v15 >= v16) {
    goto LABEL_14;
  }
  __break(1u);
}

void protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance URL.ParseStrategy( unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance URL.ParseStrategy()
{
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t static RegexComponent<>.url(scheme:user:password:host:port:path:query:fragment:)@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  uint64_t v11 = *a2;
  unint64_t v12 = a2[1];
  uint64_t v13 = *a3;
  unint64_t v14 = a3[1];
  uint64_t v15 = *a4;
  unint64_t v16 = a4[1];
  uint64_t v17 = *a5;
  uint64_t v18 = *a6;
  unint64_t v19 = a6[1];
  uint64_t v20 = *a7;
  unint64_t v21 = a7[1];
  unint64_t v23 = a8[1];
  uint64_t v24 = *a8;
  char v25 = *((_BYTE *)a5 + 8);
  *(void *)a9 = *a1;
  *(void *)(a9 + 8) = v10;
  *(void *)(a9 + 16) = v11;
  *(void *)(a9 + 24) = v12;
  *(void *)(a9 + 32) = v13;
  *(void *)(a9 + 40) = v14;
  *(void *)(a9 + 48) = v15;
  *(void *)(a9 + 56) = v16;
  *(void *)(a9 + 64) = v17;
  *(_BYTE *)(a9 + 72) = v25;
  *(void *)(a9 + 80) = v18;
  *(void *)(a9 + 88) = v19;
  *(void *)(a9 + 96) = v20;
  *(void *)(a9 + 104) = v21;
  *(void *)(a9 + 112) = v24;
  *(void *)(a9 + 120) = v23;
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v9, v10);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v11, v12);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v13, v14);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v15, v16);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v18, v19);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v20, v21);
  return outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v24, v23);
}

uint64_t specialized static URL.ParseStrategy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 24);
  unint64_t v43 = *(void *)(a1 + 40);
  uint64_t v44 = *(void *)(a1 + 32);
  unint64_t v40 = *(void *)(a1 + 56);
  uint64_t v41 = *(void *)(a1 + 48);
  uint64_t v36 = *(void *)(a1 + 64);
  int v37 = *(unsigned __int8 *)(a1 + 72);
  unint64_t v32 = *(void *)(a1 + 88);
  uint64_t v33 = *(void *)(a1 + 80);
  unint64_t v28 = *(void *)(a1 + 104);
  uint64_t v29 = *(void *)(a1 + 96);
  unint64_t v24 = *(void *)(a1 + 120);
  uint64_t v25 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  unint64_t v10 = *(void *)(a2 + 40);
  uint64_t v42 = *(void *)(a2 + 32);
  unint64_t v38 = *(void *)(a2 + 56);
  uint64_t v39 = *(void *)(a2 + 48);
  uint64_t v34 = *(void *)(a2 + 64);
  char v35 = *(_BYTE *)(a2 + 72);
  unint64_t v30 = *(void *)(a2 + 88);
  uint64_t v31 = *(void *)(a2 + 80);
  unint64_t v26 = *(void *)(a2 + 104);
  uint64_t v27 = *(void *)(a2 + 96);
  unint64_t v22 = *(void *)(a2 + 120);
  uint64_t v23 = *(void *)(a2 + 112);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(*(void *)a1, v3);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v6, v7);
  char v11 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v2, v3, v6, v7);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v6, v7);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v2, v3);
  if ((v11 & 1) != 0)
  {
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v8, v9);
    char v12 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v4, v5, v8, v9);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v8, v9);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
    if ((v12 & 1) != 0)
    {
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v44, v43);
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v42, v10);
      char v13 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v44, v43, v42, v10);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v42, v10);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v44, v43);
      if ((v13 & 1) != 0)
      {
        outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v41, v40);
        outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v39, v38);
        char v14 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v41, v40, v39, v38);
        outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v39, v38);
        outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v41, v40);
        if ((v14 & 1) != 0)
        {
          if (v37)
          {
            if (v36)
            {
              char v15 = v35;
              if (!v34) {
                char v15 = 0;
              }
              if ((v15 & 1) == 0) {
                return 0LL;
              }
            }

            else
            {
              char v17 = v35;
              if (v34) {
                char v17 = 0;
              }
              if ((v17 & 1) == 0) {
                return 0LL;
              }
            }
          }

          else
          {
            char v16 = v35;
            if (v36 != v34) {
              char v16 = 1;
            }
            if ((v16 & 1) != 0) {
              return 0LL;
            }
          }

          outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v33, v32);
          outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v31, v30);
          char v18 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v33, v32, v31, v30);
          outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v31, v30);
          outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v33, v32);
          if ((v18 & 1) != 0)
          {
            outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v29, v28);
            outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v27, v26);
            char v19 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v29, v28, v27, v26);
            outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v27, v26);
            outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v29, v28);
            if ((v19 & 1) != 0)
            {
              outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v25, v24);
              outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v23, v22);
              char v20 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v25, v24, v23, v22);
              outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v23, v22);
              outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v25, v24);
              return v20 & 1;
            }
          }
        }
      }
    }
  }

  return 0LL;
}

unint64_t lazy protocol witness table accessor for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL.ParseStrategy.CodingKeys, &unk_189C746C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL.ParseStrategy.CodingKeys, &unk_189C746C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL.ParseStrategy.CodingKeys, &unk_189C746C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL.ParseStrategy.CodingKeys, &unk_189C746C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys);
  }

  return result;
}

uint64_t outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t *outlined retain of URL.ParseStrategy(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[10];
  uint64_t v11 = a1[11];
  uint64_t v13 = a1[13];
  uint64_t v14 = a1[12];
  uint64_t v15 = a1[15];
  uint64_t v16 = a1[14];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  return a1;
}

void type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys()
{
}

void type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.OptionalCodingKeys()
{
}

void type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.RequiredCodingKeys()
{
}

void type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.CodingKeys()
{
}

uint64_t outlined init with take of URLComponents._URLComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents._URLComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type URL.ParseStrategy and conformance URL.ParseStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.ParseStrategy,  &type metadata for URL.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.ParseStrategy,  &type metadata for URL.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.ParseStrategy,  &type metadata for URL.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.ParseStrategy,  &type metadata for URL.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.ParseStrategy,  &type metadata for URL.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.ParseStrategy,  &type metadata for URL.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.ParseStrategy,  &type metadata for URL.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }

  return result;
}

void base witness table accessor for Equatable in URL.ParseStrategy.ComponentParseStrategy<A>()
{
}

unint64_t instantiation function for generic protocol witness table for URL.ParseStrategy(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type URL.ParseStrategy and conformance URL.ParseStrategy();
  a1[2] = lazy protocol witness table accessor for type URL.ParseStrategy and conformance URL.ParseStrategy();
  unint64_t result = lazy protocol witness table accessor for type URL.ParseStrategy and conformance URL.ParseStrategy();
  a1[3] = result;
  return result;
}

unint64_t destroy for URL.ParseStrategy(void *a1)
{
  if (a1[1] >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  if (a1[3] >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  if (a1[5] >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  if (a1[7] >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  if (a1[11] >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  if (a1[13] >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  unint64_t result = a1[15];
  if (result >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for URL.ParseStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= 2)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    swift_bridgeObjectRetain();
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  uint64_t v5 = (void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  if (v6 >= 2)
  {
    *(void *)(a1 + 16) = *v5;
    *(void *)(a1 + 24) = v6;
    swift_bridgeObjectRetain();
  }

  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
  }

  uint64_t v7 = (void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  if (v8 >= 2)
  {
    *(void *)(a1 + 32) = *v7;
    *(void *)(a1 + 40) = v8;
    swift_bridgeObjectRetain();
  }

  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v7;
  }

  uint64_t v9 = (void *)(a2 + 48);
  unint64_t v10 = *(void *)(a2 + 56);
  if (v10 >= 2)
  {
    *(void *)(a1 + 48) = *v9;
    *(void *)(a1 + 56) = v10;
    swift_bridgeObjectRetain();
  }

  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v9;
  }

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  uint64_t v11 = (void *)(a2 + 80);
  unint64_t v12 = *(void *)(a2 + 88);
  if (v12 >= 2)
  {
    *(void *)(a1 + 80) = *v11;
    *(void *)(a1 + 88) = v12;
    swift_bridgeObjectRetain();
  }

  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v11;
  }

  uint64_t v13 = (void *)(a2 + 96);
  unint64_t v14 = *(void *)(a2 + 104);
  if (v14 >= 2)
  {
    *(void *)(a1 + 96) = *v13;
    *(void *)(a1 + 104) = v14;
    swift_bridgeObjectRetain();
  }

  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v13;
  }

  uint64_t v15 = (void *)(a2 + 112);
  unint64_t v16 = *(void *)(a2 + 120);
  if (v16 >= 2)
  {
    *(void *)(a1 + 112) = *v15;
    *(void *)(a1 + 120) = v16;
    swift_bridgeObjectRetain();
  }

  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)v15;
  }

  return a1;
}

uint64_t assignWithCopy for URL.ParseStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) < 2uLL)
  {
    if (v4 >= 2)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v4 < 2)
  {
    outlined destroy of String(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  unint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) < 2uLL)
  {
    if (v5 >= 2)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  if (v5 < 2)
  {
    outlined destroy of String(a1 + 16);
LABEL_13:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_15;
  }

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_15:
  unint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) < 2uLL)
  {
    if (v6 >= 2)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }

    goto LABEL_20;
  }

  if (v6 < 2)
  {
    outlined destroy of String(a1 + 32);
LABEL_20:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_22;
  }

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_22:
  unint64_t v7 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) < 2uLL)
  {
    if (v7 >= 2)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }

    goto LABEL_27;
  }

  if (v7 < 2)
  {
    outlined destroy of String(a1 + 48);
LABEL_27:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_29;
  }

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_29:
  uint64_t v8 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  unint64_t v9 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) < 2uLL)
  {
    if (v9 >= 2)
    {
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      goto LABEL_36;
    }

    goto LABEL_34;
  }

  if (v9 < 2)
  {
    outlined destroy of String(a1 + 80);
LABEL_34:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_36;
  }

  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_36:
  unint64_t v10 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104) < 2uLL)
  {
    if (v10 >= 2)
    {
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      goto LABEL_43;
    }

    goto LABEL_41;
  }

  if (v10 < 2)
  {
    outlined destroy of String(a1 + 96);
LABEL_41:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_43;
  }

  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_43:
  unint64_t v11 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 120) >= 2uLL)
  {
    if (v11 >= 2)
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }

    outlined destroy of String(a1 + 112);
    goto LABEL_48;
  }

  if (v11 < 2)
  {
LABEL_48:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    return a1;
  }

  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined destroy of String(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for URL.ParseStrategy(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 2uLL) {
    goto LABEL_4;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 2)
  {
    outlined destroy of String(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
LABEL_6:
  unint64_t v5 = (_OWORD *)(a2 + 16);
  if (*(void *)(a1 + 24) < 2uLL)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = *v5;
    goto LABEL_11;
  }

  unint64_t v6 = *(void *)(a2 + 24);
  if (v6 < 2)
  {
    outlined destroy of String(a1 + 16);
    goto LABEL_9;
  }

  *(void *)(a1 + 16) = *(void *)v5;
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
LABEL_11:
  __int128 v7 = (_OWORD *)(a2 + 32);
  if (*(void *)(a1 + 40) < 2uLL)
  {
LABEL_14:
    *(_OWORD *)(a1 + 32) = *v7;
    goto LABEL_16;
  }

  unint64_t v8 = *(void *)(a2 + 40);
  if (v8 < 2)
  {
    outlined destroy of String(a1 + 32);
    goto LABEL_14;
  }

  *(void *)(a1 + 32) = *(void *)v7;
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
LABEL_16:
  unint64_t v9 = (_OWORD *)(a2 + 48);
  if (*(void *)(a1 + 56) < 2uLL)
  {
LABEL_19:
    *(_OWORD *)(a1 + 48) = *v9;
    goto LABEL_21;
  }

  unint64_t v10 = *(void *)(a2 + 56);
  if (v10 < 2)
  {
    outlined destroy of String(a1 + 48);
    goto LABEL_19;
  }

  *(void *)(a1 + 48) = *(void *)v9;
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
LABEL_21:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  unint64_t v11 = (_OWORD *)(a2 + 80);
  if (*(void *)(a1 + 88) < 2uLL)
  {
LABEL_24:
    *(_OWORD *)(a1 + 80) = *v11;
    goto LABEL_26;
  }

  unint64_t v12 = *(void *)(a2 + 88);
  if (v12 < 2)
  {
    outlined destroy of String(a1 + 80);
    goto LABEL_24;
  }

  *(void *)(a1 + 80) = *(void *)v11;
  *(void *)(a1 + 88) = v12;
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v13 = (_OWORD *)(a2 + 96);
  if (*(void *)(a1 + 104) < 2uLL)
  {
LABEL_29:
    *(_OWORD *)(a1 + 96) = *v13;
    goto LABEL_31;
  }

  unint64_t v14 = *(void *)(a2 + 104);
  if (v14 < 2)
  {
    outlined destroy of String(a1 + 96);
    goto LABEL_29;
  }

  *(void *)(a1 + 96) = *(void *)v13;
  *(void *)(a1 + 104) = v14;
  swift_bridgeObjectRelease();
LABEL_31:
  uint64_t v15 = (void *)(a2 + 112);
  if (*(void *)(a1 + 120) >= 2uLL)
  {
    unint64_t v16 = *(void *)(a2 + 120);
    if (v16 >= 2)
    {
      *(void *)(a1 + 112) = *v15;
      *(void *)(a1 + 120) = v16;
      swift_bridgeObjectRelease();
      return a1;
    }

    outlined destroy of String(a1 + 112);
  }

  *(_OWORD *)(a1 + 112) = *(_OWORD *)v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.ParseStrategy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 2;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URL.ParseStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 120) = 0LL;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(_BYTE *)(result + 128) = 1;
    }
  }

  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(_BYTE *)(result + 128) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for URL.ParseStrategy()
{
  return &type metadata for URL.ParseStrategy;
}

uint64_t type metadata completion function for URL.ParseStrategy.ComponentParseStrategy()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for URL.ParseStrategy.ComponentParseStrategy( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  unint64_t v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4LL;
      }

      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2LL;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }

    else
    {
      uint64_t v10 = 1LL;
    }

    unint64_t v9 = v10 + v8;
  }

  uint64_t v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, void))(v6 + 48))(a2, 2LL, *(void *)(a3 + 16)))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          unsigned int v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            uint64_t v18 = 4LL;
          }

          else
          {
            BOOL v20 = v19 != 0;
            BOOL v13 = v19 >= 0xFF;
            uint64_t v18 = 2LL;
            if (!v13) {
              uint64_t v18 = v20;
            }
          }
        }

        else
        {
          uint64_t v18 = 1LL;
        }

        v8 += v18;
      }

      memcpy(a1, a2, v8);
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 2LL, v5);
    }
  }

  else
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }

  return a1;
}

uint64_t destroy for URL.ParseStrategy.ComponentParseStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 2LL, v3);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for URL.ParseStrategy.ComponentParseStrategy(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2LL, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4LL;
        }

        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2LL;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }

      else
      {
        uint64_t v9 = 1LL;
      }

      v8 += v9;
    }

    memcpy(a1, a2, v8);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 2LL, v5);
  }

  return a1;
}

void *assignWithCopy for URL.ParseStrategy.ComponentParseStrategy(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2LL, v5);
  int v9 = v7(a2, 2LL, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1LL;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }

void *initializeWithTake for URL.ParseStrategy.ComponentParseStrategy(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2LL, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4LL;
        }

        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2LL;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }

      else
      {
        uint64_t v9 = 1LL;
      }

      v8 += v9;
    }

    memcpy(a1, a2, v8);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 2LL, v5);
  }

  return a1;
}

void *assignWithTake for URL.ParseStrategy.ComponentParseStrategy(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2LL, v5);
  int v9 = v7(a2, 2LL, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1LL;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }

uint64_t getEnumTagSinglePayload for URL.ParseStrategy.ComponentParseStrategy( uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 2;
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 1)
  {
    unsigned int v6 = 0;
    if (v7 <= 3)
    {
      unsigned int v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        uint64_t v8 = 4LL;
      }

      else
      {
        BOOL v10 = v9 != 0;
        BOOL v11 = v9 >= 0xFF;
        uint64_t v8 = 2LL;
        if (!v11) {
          uint64_t v8 = v10;
        }
      }
    }

    else
    {
      uint64_t v8 = 1LL;
    }

    v7 += v8;
  }

  if (!a2) {
    return 0LL;
  }
  int v12 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_29;
  }
  char v13 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v7);
      if (!v14) {
        goto LABEL_29;
      }
      goto LABEL_20;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_29;
      }
      goto LABEL_20;
    }

    if (v15 < 2)
    {
LABEL_29:
      if (v6)
      {
        unsigned int v18 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v18 >= 3) {
          return v18 - 2;
        }
        else {
          return 0LL;
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_29;
  }
LABEL_20:
  int v16 = (v14 - 1) << v13;
  if ((_DWORD)v7)
  {
    else {
      int v17 = 4;
    }
    __asm { BR              X12 }
  }

  return v6 + v16 + 1;
}

void storeEnumTagSinglePayload for URL.ParseStrategy.ComponentParseStrategy( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 2;
  size_t v9 = *(void *)(v6 + 64);
  if (v7 <= 1)
  {
    unsigned int v8 = 0;
    if (v9 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4LL;
      }

      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2LL;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }

    else
    {
      uint64_t v10 = 1LL;
    }

    v9 += v10;
  }

  BOOL v13 = a3 >= v8;
  unsigned int v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      unsigned int v17 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v17))
      {
        unsigned int v15 = 4u;
      }

      else if (v17 >= 0x100)
      {
        unsigned int v15 = 2;
      }

      else
      {
        unsigned int v15 = v17 > 1;
      }
    }

    else
    {
      unsigned int v15 = 1u;
    }
  }

  else
  {
    unsigned int v15 = 0u;
  }

  if (v8 < a2)
  {
    int v16 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        int v18 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v18;
          *((_BYTE *)a1 + 2) = BYTE2(v18);
        }

        else if ((_DWORD)v9 == 2)
        {
          *a1 = v18;
        }

        else
        {
          *(_BYTE *)a1 = v18;
        }
      }
    }

    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t getEnumTag for URL.ParseStrategy.ComponentParseStrategy(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 48LL))(a1, 2LL);
}

uint64_t destructiveInjectEnumTag for URL.ParseStrategy.ComponentParseStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8LL) + 56LL))( a1,  a2,  2LL);
}

uint64_t storeEnumTagSinglePayload for URL.ParseStrategy.ComponentParseStrategy.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_182FD0D58 + 4 * byte_18372CA9B[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_182FD0D8C + 4 * byte_18372CA96[v4]))();
}

uint64_t sub_182FD0D8C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FD0D94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FD0D9CLL);
  }
  return result;
}

uint64_t sub_182FD0DA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FD0DB0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_182FD0DB4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FD0DBC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_182FD0E08 + 4 * byte_18372CAA0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_182FD0E28 + 4 * byte_18372CAA5[v4]))();
  }
}

_BYTE *sub_182FD0E08(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_182FD0E28(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_182FD0E30(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_182FD0E38(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_182FD0E40(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_182FD0E48(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t storeEnumTagSinglePayload for URL.ParseStrategy.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_182FD0EA0 + 4 * byte_18372CAAF[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_182FD0ED4 + 4 * byte_18372CAAA[v4]))();
}

uint64_t sub_182FD0ED4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FD0EDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FD0EE4LL);
  }
  return result;
}

uint64_t sub_182FD0EF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FD0EF8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 7;
  return result;
}

uint64_t sub_182FD0EFC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FD0F04(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for URL.ParseStrategy.CodingKeys()
{
  return &unk_189C746C8;
}

void base witness table accessor for Equatable in URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys()
{
}

void base witness table accessor for Equatable in URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys()
{
}

uint64_t specialized URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(intValue:)()
{
  return 3LL;
}

uint64_t outlined release of URL.FormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t _sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)( a1,  a2,  *(unsigned __int8 *)(v3 + 24),  a3);
}

uint64_t closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return _sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0( a1,  a2,  a3);
}

{
  return _sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0( a1,  a2,  a3);
}

uint64_t specialized Array.append(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v3[2] + 1LL,  1,  v3);
    uint64_t v3 = (void *)result;
  }

  unint64_t v6 = v3[2];
  unint64_t v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v5 > 1),  v6 + 1,  1,  v3);
    uint64_t v3 = (void *)result;
  }

  v3[2] = v6 + 1;
  v3[v6 + 4] = a1;
  _OWORD *v1 = v3;
  return result;
}

void specialized Sequence._copyContents(initializing:)(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (!a2)
  {
    __int128 v8 = *(_OWORD *)((char *)v37 + 9);
    __int128 v9 = v36;
    a1[10] = v35;
    a1[11] = v9;
    a1[12] = v37[0];
LABEL_11:
    *(_OWORD *)((char *)a1 + 201) = v8;
    __int128 v11 = v32;
    a1[6] = v31;
    a1[7] = v11;
    __int128 v12 = v34;
    a1[8] = v33;
    a1[9] = v12;
    __int128 v13 = v28;
    a1[2] = v27;
    a1[3] = v13;
    __int128 v14 = v30;
    a1[4] = v29;
    a1[5] = v14;
    __int128 v15 = v25;
    __int128 v16 = v26;
LABEL_13:
    *a1 = v15;
    a1[1] = v16;
    return;
  }

  if (!a3)
  {
LABEL_10:
    __int128 v10 = v36;
    a1[10] = v35;
    a1[11] = v10;
    a1[12] = v37[0];
    __int128 v8 = *(_OWORD *)((char *)v37 + 9);
    goto LABEL_11;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    NSFastEnumerationIterator.next()((uint64_t)&v22);
    if (!v23)
    {
LABEL_12:
      outlined destroy of Any?((uint64_t)&v22);
      __int128 v17 = v36;
      a1[10] = v35;
      a1[11] = v17;
      a1[12] = v37[0];
      *(_OWORD *)((char *)a1 + 201) = *(_OWORD *)((char *)v37 + 9);
      __int128 v18 = v32;
      a1[6] = v31;
      a1[7] = v18;
      __int128 v19 = v34;
      a1[8] = v33;
      a1[9] = v19;
      __int128 v20 = v28;
      a1[2] = v27;
      a1[3] = v20;
      __int128 v21 = v30;
      a1[4] = v29;
      a1[5] = v21;
      __int128 v15 = v25;
      __int128 v16 = v26;
      goto LABEL_13;
    }

    uint64_t v7 = 0LL;
    while (1)
    {
      outlined init with take of Any(&v22, v24);
      outlined init with take of Any(v24, a2);
      if (a3 - 1 == v7) {
        goto LABEL_10;
      }
      a2 += 2;
      NSFastEnumerationIterator.next()((uint64_t)&v22);
      ++v7;
      if (!v23) {
        goto LABEL_12;
      }
    }
  }

  __break(1u);
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = result;
  if (!a2)
  {
    id v11 = 0LL;
    uint64_t v6 = 0LL;
    *(void *)uint64_t result = v4;
    BOOL v7 = 1;
    *(_BYTE *)(result + 8) = 1;
    goto LABEL_14;
  }

  uint64_t v6 = a3;
  BOOL v7 = a3 == 0;
  if (!a3)
  {
    id v11 = 0LL;
    goto LABEL_13;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    id v9 = objc_msgSend(v4, sel_firstIndex);
    if (v9 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t i = 0LL;
LABEL_6:
      id v11 = 0LL;
      *(void *)uint64_t v5 = v4;
      *(_BYTE *)(v5 + 8) = 0;
      BOOL v7 = 1;
      uint64_t v6 = i;
LABEL_14:
      *(void *)(v5 + 16) = v11;
      *(_BYTE *)(v5 + 24) = v7;
      return v6;
    }

    id v11 = v9;
    *a2 = v9;
    if (v6 != 1)
    {
      for (uint64_t i = 1LL; i != v6; a2[i++] = v12)
      {
        id v12 = objc_msgSend(v4, sel_indexGreaterThanIndex_, v11);
        if (v12 == (id)0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_6;
        }
        id v11 = v12;
      }
    }

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (_OWORD *)result;
  uint64_t v5 = *((void *)v3 + 17);
  uint64_t v6 = *((void *)v3 + 18);
  uint64_t v7 = *((void *)v3 + 19);
  __int128 v9 = v3[9];
  __int128 v10 = v3[11];
  __int128 v55 = v3[10];
  uint64_t v8 = v55;
  __int128 v56 = v10;
  __int128 v57 = v3[12];
  __int128 v11 = v3[7];
  __int128 v51 = v3[6];
  __int128 v52 = v11;
  __int128 v53 = v3[8];
  __int128 v54 = v9;
  __int128 v12 = v3[3];
  __int128 v47 = v3[2];
  __int128 v48 = v12;
  __int128 v13 = v3[5];
  __int128 v49 = v3[4];
  __int128 v50 = v13;
  __int128 v14 = v3[1];
  __int128 v45 = *v3;
  __int128 v46 = v14;
  *(void *)&__int128 v58 = v5;
  *((void *)&v58 + 1) = v6;
  *(void *)&__int128 v59 = v7;
  *((void *)&v59 + 1) = v55;
  if (!a2)
  {
    uint64_t v15 = 0LL;
    __int128 v24 = v3[11];
    *(_OWORD *)(result + 160) = v3[10];
    *(_OWORD *)(result + 176) = v24;
    *(_OWORD *)(result + 192) = v3[12];
    __int128 v25 = v3[7];
    *(_OWORD *)(result + 96) = v3[6];
    *(_OWORD *)(result + 112) = v25;
    __int128 v26 = v3[9];
    *(_OWORD *)(result + 128) = v3[8];
    *(_OWORD *)(result + 144) = v26;
    __int128 v27 = v3[3];
    *(_OWORD *)(result + 32) = v3[2];
    *(_OWORD *)(result + 48) = v27;
    __int128 v28 = v3[5];
    *(_OWORD *)(result + 64) = v3[4];
    *(_OWORD *)(result + 80) = v28;
    __int128 v29 = v3[1];
    *(_OWORD *)uint64_t result = *v3;
    *(_OWORD *)(result + 16) = v29;
    *(void *)(result + 208) = v5;
    *(void *)(result + 216) = v6;
    *(void *)(result + 224) = v7;
    *(void *)(result + 232) = v8;
    return v15;
  }

  uint64_t v15 = a3;
  if (!a3) {
    goto LABEL_10;
  }
  if ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v16 = a2;
    AttributedString.Runs.NSAttributesSlice.Iterator.next()(v44);
    uint64_t v17 = *(void *)&v44[0];
    if (!*(void *)&v44[0])
    {
      uint64_t v18 = 0LL;
LABEL_12:
      __int128 v38 = v58;
      v4[12] = v57;
      v4[13] = v38;
      v4[14] = v59;
      __int128 v39 = v54;
      v4[8] = v53;
      v4[9] = v39;
      __int128 v40 = v56;
      v4[10] = v55;
      v4[11] = v40;
      __int128 v41 = v50;
      _OWORD v4[4] = v49;
      v4[5] = v41;
      __int128 v42 = v52;
      v4[6] = v51;
      v4[7] = v42;
      __int128 v43 = v46;
      *uint64_t v4 = v45;
      v4[1] = v43;
      __int128 v37 = v47;
      __int128 v36 = v48;
      uint64_t v15 = v18;
      goto LABEL_13;
    }

    uint64_t v18 = 0LL;
    while (1)
    {
      uint64_t v19 = *((void *)&v44[0] + 1);
      __int128 v20 = v44[1];
      __int128 v21 = v44[2];
      __int128 v22 = v44[3];
      __int128 v23 = v44[4];
      *(void *)uint64_t v16 = v17;
      *(void *)(v16 + 8) = v19;
      *(_OWORD *)(v16 + 16) = v20;
      *(_OWORD *)(v16 + 32) = v21;
      *(_OWORD *)(v16 + 48) = v22;
      *(_OWORD *)(v16 + 64) = v23;
      if (v15 - 1 == v18) {
        break;
      }
      AttributedString.Runs.NSAttributesSlice.Iterator.next()(v44);
      uint64_t v17 = *(void *)&v44[0];
      v16 += 80LL;
      ++v18;
      if (!*(void *)&v44[0]) {
        goto LABEL_12;
      }
    }

{
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39[4];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  unint64_t v83;
  uint64_t v4 = v3[9];
  uint64_t v5 = v3[11];
  __int128 v67 = v3[10];
  __int128 v68 = v5;
  uint64_t v6 = v3[11];
  __int128 v69 = v3[12];
  uint64_t v7 = v3[5];
  uint64_t v8 = v3[7];
  __int128 v63 = v3[6];
  __int128 v64 = v8;
  __int128 v9 = v3[7];
  __int128 v10 = v3[9];
  __int128 v65 = v3[8];
  __int128 v66 = v10;
  __int128 v11 = v3[1];
  __int128 v12 = v3[3];
  __int128 v59 = v3[2];
  __int128 v60 = v12;
  __int128 v13 = v3[3];
  __int128 v14 = v3[5];
  __int128 v61 = v3[4];
  __int128 v62 = v14;
  uint64_t v15 = v3[1];
  __int128 v57 = *v3;
  __int128 v58 = v15;
  uint64_t v81 = v67;
  uint64_t v82 = v6;
  char v77 = v63;
  uint64_t v78 = v9;
  uint64_t v79 = v65;
  char v80 = v4;
  uint64_t v73 = v59;
  __int128 v74 = v13;
  __int128 v75 = v61;
  char v76 = v7;
  __int128 v70 = *((void *)v3 + 26);
  uint64_t v83 = *((void *)v3 + 24);
  __int128 v71 = v57;
  __int128 v72 = v11;
  uint64_t v16 = *((void *)&v67 + 1);
  uint64_t v18 = *((void *)&v6 + 1);
  uint64_t v17 = v6;
  uint64_t v19 = v83;
  __int128 v35 = result;
  if (!a2)
  {
LABEL_10:
    __int128 v21 = 0LL;
LABEL_12:
    __int128 v27 = v3[11];
    *(_OWORD *)(v35 + 160) = v3[10];
    *(_OWORD *)(v35 + 176) = v27;
    *(_OWORD *)(v35 + 192) = v3[12];
    __int128 v28 = *((void *)v3 + 26);
    __int128 v29 = v3[7];
    *(_OWORD *)(v35 + 96) = v3[6];
    *(_OWORD *)(v35 + 112) = v29;
    __int128 v30 = v3[9];
    *(_OWORD *)(v35 + 128) = v3[8];
    *(_OWORD *)(v35 + 144) = v30;
    __int128 v31 = v3[3];
    *(_OWORD *)(v35 + 32) = v3[2];
    *(_OWORD *)(v35 + 48) = v31;
    __int128 v32 = v3[5];
    *(_OWORD *)(v35 + 64) = v3[4];
    *(_OWORD *)(v35 + 80) = v32;
    __int128 v33 = v3[1];
    *(_OWORD *)__int128 v35 = *v3;
    *(_OWORD *)(v35 + 16) = v33;
    *(void *)(v35 + 208) = v28;
    *(void *)(v35 + 216) = v16;
    *(void *)(v35 + 224) = v17;
    *(void *)(v35 + 232) = v18;
    *(void *)(v35 + 240) = v19;
    return v21;
  }

  if (!a3)
  {
    __int128 v21 = 0LL;
    goto LABEL_12;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    __int128 v36 = *((void *)&v79 + 1) >> 10;
    if (*((void *)&v79 + 1) >> 10 != *((void *)&v67 + 1) >> 10)
    {
      __int128 v20 = a2;
      __int128 v21 = 0LL;
      __int128 v37 = *((void *)&v69 + 1);
      __int128 v38 = v70;
      __int128 v22 = a3 - 1;
      while (1)
      {
        __int128 v50 = v81;
        __int128 v51 = v82;
        __int128 v52 = v83;
        __int128 v46 = v77;
        __int128 v47 = v78;
        __int128 v48 = v79;
        __int128 v49 = v80;
        __int128 v42 = v73;
        __int128 v43 = v74;
        uint64_t v44 = v75;
        __int128 v45 = v76;
        __int128 v40 = v71;
        __int128 v41 = v72;
        v39[0] = v16;
        v39[1] = v17;
        v39[2] = v18;
        v39[3] = v19;
        outlined retain of AttributedString.Runs((uint64_t)&v71);
        AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)(v39, v37, v38, &v53);
        outlined release of AttributedString.Runs((uint64_t)&v71);
        uint64_t v16 = v53;
        uint64_t v17 = v54;
        uint64_t v18 = v55;
        uint64_t v19 = v56;
        specialized AttributedString.Runs.AttributesSlice1.subscript.getter( &v40,  (__int128 *)((char *)&v40 + 8),  v53,  v54,  v55,  v56);
        __int128 v23 = v44;
        __int128 v24 = v41;
        __int128 v25 = v42;
        __int128 v26 = v43;
        *(_OWORD *)__int128 v20 = v40;
        *(_OWORD *)(v20 + 16) = v24;
        *(_OWORD *)(v20 + 32) = v25;
        *(_OWORD *)(v20 + 48) = v26;
        *(void *)(v20 + 64) = v23;
        if (v22 == v21) {
          break;
        }
        ++v21;
        v20 += 72LL;
        if (v36 == v16 >> 10) {
          goto LABEL_12;
        }
      }

      __int128 v21 = a3;
      goto LABEL_12;
    }

    goto LABEL_10;
  }

  __break(1u);
  return result;
}

{
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41[4];
  __int128 v42;
  _BYTE v43[80];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v4 = v3[9];
  uint64_t v5 = v3[11];
  __int128 v65 = v3[10];
  __int128 v66 = v5;
  uint64_t v6 = v3[11];
  __int128 v67 = v3[12];
  uint64_t v7 = v3[5];
  uint64_t v8 = v3[7];
  __int128 v61 = v3[6];
  __int128 v62 = v8;
  __int128 v9 = v3[7];
  __int128 v10 = v3[9];
  __int128 v63 = v3[8];
  __int128 v64 = v10;
  __int128 v11 = v3[1];
  __int128 v12 = v3[3];
  __int128 v57 = v3[2];
  __int128 v58 = v12;
  __int128 v13 = v3[3];
  __int128 v14 = v3[5];
  __int128 v59 = v3[4];
  __int128 v60 = v14;
  uint64_t v15 = v3[1];
  __int128 v55 = *v3;
  __int128 v56 = v15;
  uint64_t v79 = v65;
  char v80 = v6;
  __int128 v75 = v61;
  char v76 = v9;
  char v77 = v63;
  uint64_t v78 = v4;
  __int128 v71 = v57;
  __int128 v72 = v13;
  uint64_t v73 = v59;
  __int128 v74 = v7;
  __int128 v68 = *((void *)v3 + 26);
  uint64_t v81 = *((void *)v3 + 24);
  __int128 v69 = v55;
  __int128 v70 = v11;
  uint64_t v16 = *((void *)&v65 + 1);
  uint64_t v18 = *((void *)&v6 + 1);
  uint64_t v17 = v6;
  uint64_t v19 = v81;
  __int128 v37 = result;
  if (!a2)
  {
LABEL_10:
    __int128 v21 = 0LL;
LABEL_12:
    __int128 v29 = v3[11];
    *(_OWORD *)(v37 + 160) = v3[10];
    *(_OWORD *)(v37 + 176) = v29;
    *(_OWORD *)(v37 + 192) = v3[12];
    __int128 v30 = *((void *)v3 + 26);
    __int128 v31 = v3[7];
    *(_OWORD *)(v37 + 96) = v3[6];
    *(_OWORD *)(v37 + 112) = v31;
    __int128 v32 = v3[9];
    *(_OWORD *)(v37 + 128) = v3[8];
    *(_OWORD *)(v37 + 144) = v32;
    __int128 v33 = v3[3];
    *(_OWORD *)(v37 + 32) = v3[2];
    *(_OWORD *)(v37 + 48) = v33;
    __int128 v34 = v3[5];
    *(_OWORD *)(v37 + 64) = v3[4];
    *(_OWORD *)(v37 + 80) = v34;
    __int128 v35 = v3[1];
    *(_OWORD *)__int128 v37 = *v3;
    *(_OWORD *)(v37 + 16) = v35;
    *(void *)(v37 + 208) = v30;
    *(void *)(v37 + 216) = v16;
    *(void *)(v37 + 224) = v17;
    *(void *)(v37 + 232) = v18;
    *(void *)(v37 + 240) = v19;
    return v21;
  }

  if (!a3)
  {
    __int128 v21 = 0LL;
    goto LABEL_12;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    __int128 v38 = *((void *)&v77 + 1) >> 10;
    if (*((void *)&v77 + 1) >> 10 != *((void *)&v65 + 1) >> 10)
    {
      __int128 v20 = a2;
      __int128 v21 = 0LL;
      __int128 v39 = *((void *)&v67 + 1);
      __int128 v40 = v68;
      __int128 v22 = a3 - 1;
      while (1)
      {
        __int128 v48 = v79;
        __int128 v49 = v80;
        __int128 v50 = v81;
        uint64_t v44 = v75;
        __int128 v45 = v76;
        __int128 v46 = v77;
        __int128 v47 = v78;
        *(_OWORD *)&v43[16] = v71;
        *(_OWORD *)&v43[32] = v72;
        *(_OWORD *)&v43[48] = v73;
        *(_OWORD *)&v43[64] = v74;
        __int128 v42 = v69;
        *(_OWORD *)__int128 v43 = v70;
        v41[0] = v16;
        v41[1] = v17;
        v41[2] = v18;
        v41[3] = v19;
        outlined retain of AttributedString.Runs((uint64_t)&v69);
        AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)(v41, v39, v40, &v51);
        outlined release of AttributedString.Runs((uint64_t)&v69);
        uint64_t v16 = v51;
        uint64_t v17 = v52;
        uint64_t v18 = v53;
        uint64_t v19 = v54;
        specialized AttributedString.Runs.AttributesSlice1.subscript.getter(&v42, &v43[8], v51, v52, v53, v54);
        __int128 v23 = *(_DWORD *)v43;
        __int128 v24 = v43[4];
        __int128 v25 = *(_OWORD *)&v43[8];
        __int128 v26 = *(_OWORD *)&v43[24];
        __int128 v27 = *(_OWORD *)&v43[40];
        __int128 v28 = *(_OWORD *)&v43[56];
        *(_OWORD *)__int128 v20 = v42;
        *(_BYTE *)(v20 + 20) = v24;
        *(_DWORD *)(v20 + 16) = v23;
        *(_OWORD *)(v20 + 24) = v25;
        *(_OWORD *)(v20 + 40) = v26;
        *(_OWORD *)(v20 + 56) = v27;
        *(_OWORD *)(v20 + 72) = v28;
        if (v22 == v21) {
          break;
        }
        ++v21;
        v20 += 88LL;
        if (v38 == v16 >> 10) {
          goto LABEL_12;
        }
      }

      __int128 v21 = a3;
      goto LABEL_12;
    }

    goto LABEL_10;
  }

  __break(1u);
  return result;
}

void *specialized Sequence._copyContents(initializing:)(void *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }

  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2LL;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }

  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }

  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0LL;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }

    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }

void *specialized Sequence._copyContents(initializing:)( void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1LL << -(char)v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0LL;
    uint64_t v12 = 0LL;
LABEL_37:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v12;
  }

  if (!a3)
  {
    int64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    goto LABEL_37;
  }

  if (a3 < 0) {
    goto LABEL_39;
  }
  uint64_t v10 = a2;
  uint64_t v24 = -1LL << *(_BYTE *)(a4 + 32);
  __int128 v25 = result;
  int64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  int64_t v26 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    uint64_t v18 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( *(void *)(a4 + 56) + 40 * v14,  (uint64_t)&v28);
    *(void *)&__int128 v27 = v20;
    *((void *)&v27 + 1) = v19;
    uint64_t v21 = v30;
    uint64_t v34 = v30;
    __int128 v22 = v29;
    __int128 v23 = v28;
    __int128 v32 = v28;
    __int128 v33 = v29;
    __int128 v31 = v27;
    *(_OWORD *)uint64_t v10 = v27;
    *(_OWORD *)(v10 + 16) = v23;
    *(_OWORD *)(v10 + 32) = v22;
    *(void *)(v10 + 48) = v21;
    if (v12 == a3)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = a3;
      goto LABEL_36;
    }

    v10 += 56LL;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_35;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    if (!v16)
    {
      int64_t v17 = v11 + 2;
      ++v11;
      if (v15 + 1 >= v26) {
        goto LABEL_35;
      }
      unint64_t v16 = *(void *)(v5 + 8 * v17);
      if (v16) {
        goto LABEL_14;
      }
      int64_t v11 = v15 + 1;
      if (v15 + 2 >= v26) {
        goto LABEL_35;
      }
      unint64_t v16 = *(void *)(v5 + 8 * (v15 + 2));
      if (v16)
      {
        v15 += 2LL;
      }

      else
      {
        int64_t v11 = v15 + 2;
        if (v15 + 3 >= v26) {
          goto LABEL_35;
        }
        unint64_t v16 = *(void *)(v5 + 8 * (v15 + 3));
        if (!v16)
        {
          int64_t v17 = v15 + 4;
          int64_t v11 = v15 + 3;
          if (v15 + 4 < v26)
          {
            unint64_t v16 = *(void *)(v5 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v15 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_40;
                }
                if (v15 >= v26)
                {
                  int64_t v11 = v26 - 1;
                  goto LABEL_35;
                }

                unint64_t v16 = *(void *)(v5 + 8 * v15);
                ++v17;
                if (v16) {
                  goto LABEL_21;
                }
              }
            }

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  int64_t v29;
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1LL << -(char)v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0LL;
    uint64_t v9 = 0LL;
LABEL_39:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v9;
  }

  uint64_t v9 = a3;
  if (!a3)
  {
    int64_t v11 = 0LL;
    goto LABEL_39;
  }

  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v10 = a2;
  __int128 v27 = -1LL << *(_BYTE *)(a4 + 32);
  __int128 v28 = result;
  int64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  __int128 v29 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    uint64_t v18 = 24 * v14;
    uint64_t v19 = *(void *)(a4 + 48) + 24 * v14;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    __int128 v22 = *(_BYTE *)(v19 + 16);
    __int128 v23 = *(void *)(a4 + 56) + v18;
    __int128 v25 = *(void *)v23;
    uint64_t v24 = *(void *)(v23 + 8);
    int64_t v26 = *(_BYTE *)(v23 + 16);
    *(void *)uint64_t v10 = *(void *)v19;
    *(void *)(v10 + 8) = v21;
    *(_BYTE *)(v10 + 16) = v22;
    *(void *)(v10 + 24) = v25;
    *(void *)(v10 + 32) = v24;
    *(_BYTE *)(v10 + 40) = v26;
    if (v12 == v9)
    {
      outlined copy of _XMLPlistEncodingFormat.Reference(v20, v21, v22);
      outlined copy of _XMLPlistEncodingFormat.Reference(v25, v24, v26);
      goto LABEL_38;
    }

    v10 += 48LL;
    outlined copy of _XMLPlistEncodingFormat.Reference(v20, v21, v22);
    uint64_t result = (void *)outlined copy of _XMLPlistEncodingFormat.Reference(v25, v24, v26);
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v15 >= v29) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    if (!v16)
    {
      v11 += 2LL;
      if (v15 + 1 >= v29)
      {
        unint64_t v8 = 0LL;
        int64_t v11 = v15;
      }

      else
      {
        unint64_t v16 = *(void *)(v5 + 8 * v11);
        if (v16) {
          goto LABEL_14;
        }
        int64_t v17 = v15 + 2;
        if (v15 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v5 + 8 * v17);
        if (v16)
        {
LABEL_17:
          int64_t v15 = v17;
          goto LABEL_18;
        }

        int64_t v11 = v15 + 3;
        if (v15 + 3 < v29)
        {
          unint64_t v16 = *(void *)(v5 + 8 * v11);
          if (v16)
          {
LABEL_14:
            int64_t v15 = v11;
            goto LABEL_18;
          }

          int64_t v17 = v15 + 4;
          if (v15 + 4 >= v29)
          {
LABEL_33:
            unint64_t v8 = 0LL;
            goto LABEL_37;
          }

          unint64_t v16 = *(void *)(v5 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              int64_t v15 = v17 + 1;
              if (__OFADD__(v17, 1LL)) {
                goto LABEL_42;
              }
              if (v15 >= v29)
              {
                unint64_t v8 = 0LL;
                int64_t v11 = v29 - 1;
                goto LABEL_37;
              }

              unint64_t v16 = *(void *)(v5 + 8 * v15);
              ++v17;
              if (v16) {
                goto LABEL_18;
              }
            }
          }

          goto LABEL_17;
        }

        unint64_t v8 = 0LL;
        int64_t v11 = v15 + 2;
      }

void *specialized Sequence._copyContents(initializing:)( void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    __int128 v5[4] = v9;
    return (void *)v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  int64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 48) + 8 * v16);
    *int64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t specialized Sequence._copyContents(initializing:)( uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    __int128 v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_39;
  }

  if (a3 < 0) {
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v23 = -1LL << *(_BYTE *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    uint64_t v22 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *int64_t v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_38;
    }

    v11 += 3;
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2LL;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0LL;
        int64_t v12 = v17;
      }

      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }

        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }

          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0LL;
            goto LABEL_37;
          }

          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0LL;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }

              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }

          goto LABEL_17;
        }

        unint64_t v9 = 0LL;
        int64_t v12 = v17 + 2;
      }

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    __int128 v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  int64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *int64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    __int128 v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_39;
  }

  if (a3 < 0) {
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v24 = -1LL << *(_BYTE *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 32 * v16);
    uint64_t v21 = v20[1];
    uint64_t v22 = v20[2];
    uint64_t v23 = v20[3];
    *int64_t v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    v11[3] = v23;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }

    v11 += 4;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2LL;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0LL;
        int64_t v12 = v17;
      }

      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }

        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }

          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0LL;
            goto LABEL_37;
          }

          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0LL;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }

              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }

          goto LABEL_17;
        }

        unint64_t v9 = 0LL;
        int64_t v12 = v17 + 2;
      }

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    __int128 v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  int64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *int64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

void *specialized Array.reserveCapacity(_:)(int64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || a1 > v3[3] >> 1)
  {
    if (v3[2] <= a1) {
      int64_t v5 = a1;
    }
    else {
      int64_t v5 = v3[2];
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v5,  0,  v3);
    uint64_t v3 = result;
  }

  _OWORD *v1 = v3;
  return result;
}

void IndexPath.Storage.append(contentsOf:)()
{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

uint64_t sub_182FD2C70(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(void))((char *)&loc_182FD2C7C + *((int *)qword_182FD3020 + a3)))();
}

void sub_182FD2C8C()
{
  *(void *)(v0 + 8) = v1;
  *(_BYTE *)(v0 + 16) = 1;
}

uint64_t sub_182FD3070()
{
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3 == 1)
  {
    uint64_t v7 = *(void *)(v2 + 32);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v0 = v1;
    *(void *)(v0 + 8) = v7;
    char v6 = 1;
  }

  else
  {
    if (!v3) {
      return swift_bridgeObjectRelease();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_183720D90;
    *(void *)(v4 + 32) = v1;
    uint64_t v8 = v4;
    uint64_t result = specialized Array.append<A>(contentsOf:)(v2);
    *(void *)uint64_t v0 = v8;
    *(void *)(v0 + 8) = 0LL;
    char v6 = 2;
  }

  *(_BYTE *)(v0 + 16) = v6;
  return result;
}

void IndexPath.Storage.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }

uint64_t sub_182FD31B8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    __break(1u);
    JUMPOUT(0x182FD31C0LL);
  }

  return a2;
}

void sub_182FD320C()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x80000001839CAB90LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x182FD32C8LL);
}

void IndexPath.Storage.subscript.setter()
{
  __asm { BR              X9 }

{
  __asm { BR              X10 }

void sub_182FD3314()
{
  if (v0)
  {
    __break(1u);
    JUMPOUT(0x182FD33A0LL);
  }

  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = 0LL;
  *(_BYTE *)(v1 + 16) = v3;
}

void sub_182FD33A8()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x80000001839CAB90LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x182FD3460LL);
}

void IndexPath.Storage.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __asm { BR              X10 }

uint64_t sub_182FD34B8()
{
  if (!(v1 | v2) || v1 == 1 && v2 == 1) {
    return 0LL;
  }
  if (v1 || v2 != 1)
  {
    _StringGuts.grow(_:)(36LL);
    swift_bridgeObjectRelease();
    _print_unlocked<A, B>(_:_:)();
    v4._uint64_t countAndFlagsBits = 3943982LL;
    v4._object = (void *)0xE300000000000000LL;
    String.append(_:)(v4);
    _print_unlocked<A, B>(_:_:)();
    v5._uint64_t countAndFlagsBits = 0LL;
    v5._object = (void *)0xE000000000000000LL;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._object = (void *)0x80000001839CABD0LL;
    v6._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v6);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x182FD38F0LL);
  }

  return v0;
}

uint64_t sub_182FD3A2C()
{
  return ((uint64_t (*)(void))((char *)&loc_182FD3A3C + dword_182FD42C4[v0]))();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance IndexPath.Storage@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized IndexPath.Storage.init(arrayLiteral:)(a1);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  return result;
}

void IndexPath.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)(a1 + 16) = 3;
}

uint64_t IndexPath.init<A>(indexes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v30 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v33 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11 & ~(v11 >> 63), 0);
  uint64_t v12 = v33;
  uint64_t v28 = v5;
  uint64_t v29 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v11 < 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }

  if (v11)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      uint64_t result = dispatch thunk of IteratorProtocol.next()();
      if ((v32 & 1) != 0) {
        goto LABEL_17;
      }
      uint64_t v14 = v31;
      uint64_t v33 = v12;
      unint64_t v16 = *(void *)(v12 + 16);
      unint64_t v15 = *(void *)(v12 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v12 = v33;
      }

      *(void *)(v12 + 16) = v16 + 1;
      *(void *)(v12 + 8 * v16 + 32) = v14;
      if (!--v11) {
        goto LABEL_10;
      }
    }
  }

  swift_getAssociatedConformanceWitness();
LABEL_10:
  dispatch thunk of IteratorProtocol.next()();
  if ((v32 & 1) == 0)
  {
    do
    {
      uint64_t v23 = v31;
      uint64_t v33 = v12;
      unint64_t v25 = *(void *)(v12 + 16);
      unint64_t v24 = *(void *)(v12 + 24);
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        uint64_t v12 = v33;
      }

      *(void *)(v12 + 16) = v25 + 1;
      *(void *)(v12 + 8 * v25 + 32) = v23;
      dispatch thunk of IteratorProtocol.next()();
    }

    while (v32 != 1);
  }

  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, AssociatedTypeWitness);
  uint64_t v17 = specialized IndexPath.Storage.init(arrayLiteral:)(v33);
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v29, a2);
  uint64_t v22 = v30;
  *uint64_t v30 = v17;
  v22[1] = v19;
  *((_BYTE *)v22 + 16) = v21;
  return result;
}

uint64_t IndexPath.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, __n128 *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4 == 2)
  {
    __n128 v7 = *(__n128 *)(result + 32);
    uint64_t result = swift_bridgeObjectRelease();
    __n128 v5 = v7;
    char v6 = 1;
  }

  else if (v4 == 1)
  {
    a3.n128_u64[0] = *(void *)(result + 32);
    __n128 v8 = a3;
    uint64_t result = swift_bridgeObjectRelease();
    __n128 v5 = v8;
    char v6 = 0;
  }

  else if (v4)
  {
    __n128 v5 = (__n128)(unint64_t)result;
    char v6 = 2;
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __n128 v5 = 0uLL;
    char v6 = 3;
  }

  *a2 = v5;
  a2[1].n128_u8[0] = v6;
  return result;
}

uint64_t IndexPath.init(index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_183720D90;
  *(void *)(v4 + 32) = a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0LL;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

void IndexPath.dropLast()()
{
  __asm { BR              X10 }

void sub_182FD46D8()
{
  *(void *)uint64_t v0 = 0LL;
  *(void *)(v0 + 8) = 0LL;
  *(_BYTE *)(v0 + 16) = 3;
}

void IndexPath.append(_:)()
{
}

Swift::Void __swiftcall IndexPath.append(_:)(Swift::Int a1)
{
  __asm { BR              X12 }

uint64_t sub_182FD483C()
{
  uint64_t v3 = *(void *)(v1 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_183729E30;
  *(void *)(result + 32) = v2;
  *(void *)(result + 40) = v3;
  *(void *)(result + 48) = v0;
  *(void *)uint64_t v1 = result;
  *(void *)(v1 + 8) = 0LL;
  *(_BYTE *)(v1 + 16) = 2;
  return result;
}

Swift::Void __swiftcall IndexPath.append(_:)(Swift::OpaquePointer a1)
{
}

void IndexPath.appending(_:)()
{
  __asm { BR              X12 }

uint64_t sub_182FD4974()
{
  uint64_t result = v1;
  *(void *)uint64_t v0 = v1;
  *(void *)(v0 + 8) = v2;
  *(_BYTE *)(v0 + 16) = 1;
  return result;
}

double IndexPath.appending(_:)@<D0>(uint64_t a1@<X8>)
{
  __int128 v4 = *v1;
  char v5 = *((_BYTE *)v1 + 16);
  outlined copy of IndexPath.Storage(*(void *)v1, *((void *)v1 + 1), v5);
  IndexPath.Storage.append(contentsOf:)();
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

{
  __int128 *v1;
  double result;
  __int128 v4;
  char v5;
  __int128 v4 = *v1;
  char v5 = *((_BYTE *)v1 + 16);
  outlined copy of IndexPath.Storage(*(void *)v1, *((void *)v1 + 1), v5);
  swift_bridgeObjectRetain();
  IndexPath.Storage.append(contentsOf:)();
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

void IndexPath.subscript.getter()
{
  __asm { BR              X12 }

void sub_182FD4B68(uint64_t a1@<X8>)
{
  if (a1)
  {
    __break(1u);
    JUMPOUT(0x182FD4B70LL);
  }

void sub_182FD4BB8()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x80000001839CAB90LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x182FD4C74LL);
}

void (*IndexPath.subscript.modify(void *a1, uint64_t a2))()
{
  a1[1] = a2;
  a1[2] = v2;
  IndexPath.subscript.getter();
  *a1 = v4;
  return IndexPath.subscript.modify;
}

void IndexPath.subscript.modify()
{
}

void IndexPath.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v7;
}

uint64_t key path getter for IndexPath.subscript(_:) : IndexPath@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *(_BYTE *)(a1 + 16);
  outlined copy of IndexPath.Storage(*(void *)a1, v5, v8);
  IndexPath.Storage.subscript.getter(v6, v7, v4, v5, v8);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  char v14 = v13;
  uint64_t result = outlined consume of IndexPath.Storage(v4, v5, v8);
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v12;
  *(_BYTE *)(a3 + 16) = v14;
  return result;
}

void key path setter for IndexPath.subscript(_:) : IndexPath(uint64_t a1)
{
}

void IndexPath.subscript.setter()
{
}

void (*IndexPath.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  v7[5] = v3;
  v7[3] = a2;
  IndexPath.Storage.subscript.getter(a2, a3, *(void *)v3, *(void *)(v3 + 8), *(_BYTE *)(v3 + 16));
  *uint64_t v7 = v8;
  v7[1] = v9;
  *((_BYTE *)v7 + 16) = v10;
  return IndexPath.subscript.modify;
}

void IndexPath.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    outlined copy of IndexPath.Storage(**a1, (*a1)[1], *((_BYTE *)*a1 + 16));
    IndexPath.Storage.subscript.setter();
    outlined consume of IndexPath.Storage(*v2, v2[1], *((_BYTE *)v2 + 16));
  }

  else
  {
    IndexPath.Storage.subscript.setter();
  }

  free(v2);
}

uint64_t IndexPath.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  char v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = 0LL;
  return outlined copy of IndexPath.Storage(v2, v3, v4);
}

uint64_t IndexPath.count.getter()
{
  return ((uint64_t (*)(void))((char *)sub_182FD4F7C + 4 * byte_18372D220[*(unsigned __int8 *)(v0 + 16)]))(0LL);
}

uint64_t sub_182FD4F7C()
{
  return 1LL;
}

uint64_t sub_182FD4F84()
{
  return 2LL;
}

uint64_t sub_182FD4F8C()
{
  return *(void *)(*(void *)v0 + 16LL);
}

uint64_t IndexPath.startIndex.getter()
{
  return 0LL;
}

uint64_t IndexPath.endIndex.getter()
{
  return ((uint64_t (*)(void))((char *)sub_182FD4FC0 + 4 * byte_18372D224[*(unsigned __int8 *)(v0 + 16)]))(0LL);
}

uint64_t sub_182FD4FC0()
{
  return 1LL;
}

uint64_t sub_182FD4FC8()
{
  return 2LL;
}

uint64_t sub_182FD4FD0()
{
  return *(void *)(*(void *)v0 + 16LL);
}

Swift::Int __swiftcall IndexPath.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1LL);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall IndexPath.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1LL);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

void IndexPath.compare(_:)()
{
  __asm { BR              X9 }

uint64_t sub_182FD5048()
{
  return ((uint64_t (*)(void))((char *)&loc_182FD5064 + dword_182FD53DC[v0]))();
}

uint64_t sub_182FD5074()
{
  if (v0) {
    __asm { BR              X9 }
  }

  return -1LL;
}

void sub_182FD5314()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x80000001839CAB90LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x182FD53CCLL);
}

void IndexPath.hash(into:)()
{
  __asm { BR              X12 }

void sub_182FD544C(uint64_t a1@<X8>)
{
  Swift::UInt v2 = *(void *)(a1 + 8);
  Hasher._combine(_:)(2uLL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

void sub_182FD5480()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    Swift::UInt v2 = (Swift::UInt *)(v0 + 32);
    do
    {
      Swift::UInt v3 = *v2++;
      Hasher._combine(_:)(v3);
      --v1;
    }

    while (v1);
  }

  JUMPOUT(0x182FD5470LL);
}

uint64_t static IndexPath.== infix(_:_:)(uint64_t a1, void *a2)
{
  return ((uint64_t (*)(void, void))((char *)sub_182FD54E0
                                                 + 4 * byte_18372D22C[*(unsigned __int8 *)(a1 + 16)]))( *(void *)a1,  *a2);
}

BOOL sub_182FD54E0@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  return !a3 && a1 == a2;
}

double static IndexPath.+ infix(_:_:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4 = *a1;
  char v5 = *((_BYTE *)a1 + 16);
  outlined copy of IndexPath.Storage(*(void *)a1, *((void *)a1 + 1), v5);
  IndexPath.Storage.append(contentsOf:)();
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_BYTE *)(a2 + 16) = v5;
  return result;
}

void static IndexPath.+= infix(_:_:)()
{
}

BOOL static IndexPath.< infix(_:_:)()
{
  return v0 == -1;
}

Swift::Int IndexPath.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IndexPath( uint64_t a1, void *a2)
{
  return ((uint64_t (*)(void, void))((char *)sub_182FD56C4
                                                 + 4 * byte_18372D230[*(unsigned __int8 *)(a1 + 16)]))( *(void *)a1,  *a2);
}

BOOL sub_182FD56C4@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  return !a3 && a1 == a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IndexPath()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IndexPath()
{
  return Hasher._finalize()();
}

void protocol witness for MutableCollection.subscript.setter in conformance IndexPath()
{
}

{
  IndexPath.Storage.subscript.setter();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance IndexPath( void *a1, uint64_t *a2))()
{
  uint64_t v4 = *a2;
  a1[1] = v2;
  a1[2] = v4;
  IndexPath.subscript.getter();
  *a1 = v5;
  return protocol witness for MutableCollection.subscript.modify in conformance IndexPath;
}

void protocol witness for MutableCollection.subscript.modify in conformance IndexPath()
{
}

void (*protocol witness for MutableCollection.subscript.modify in conformance IndexPath( void *a1, uint64_t *a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  v5[3] = v2;
  __int128 v5[4] = v6;
  v5[5] = v7;
  IndexPath.Storage.subscript.getter(v6, v7, *(void *)v2, *(void *)(v2 + 8), *(_BYTE *)(v2 + 16));
  *uint64_t v5 = v8;
  v5[1] = v9;
  *((_BYTE *)v5 + 16) = v10;
  return protocol witness for MutableCollection.subscript.modify in conformance IndexPath;
}

void protocol witness for MutableCollection.subscript.modify in conformance IndexPath(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    outlined copy of IndexPath.Storage(**a1, (*a1)[1], *((_BYTE *)*a1 + 16));
    IndexPath.Storage.subscript.setter();
    outlined consume of IndexPath.Storage(*v2, v2[1], *((_BYTE *)v2 + 16));
  }

  else
  {
    IndexPath.Storage.subscript.setter();
  }

  free(v2);
}

void protocol witness for MutableCollection.partition(by:) in conformance IndexPath(void *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
}

void protocol witness for MutableCollection.swapAt(_:_:) in conformance IndexPath(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a1 != *a2)
  {
    uint64_t v4 = *(void *)v2;
    uint64_t v5 = *(void *)(v2 + 8);
    char v6 = *(_BYTE *)(v2 + 16);
    IndexPath.Storage.subscript.getter(*a1, *(void *)v2, v5, v6);
    IndexPath.Storage.subscript.getter(v3, v4, v5, v6);
    IndexPath.Storage.subscript.setter();
    IndexPath.Storage.subscript.setter();
  }

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance IndexPath@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance IndexPath( a1,  a2);
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance IndexPath@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance IndexPath()
{
  return v0 == -1;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance IndexPath()
{
  return ((uint64_t (*)(void))((char *)sub_182FD5AC4 + 4 * byte_18372D234[*(unsigned __int8 *)(v0 + 16)]))();
}

void sub_182FD5AC4(void *a1@<X8>)
{
  *a1 = 1LL;
}

void sub_182FD5AD0(void *a1@<X8>)
{
  *a1 = 2LL;
}

void sub_182FD5ADC(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 16LL);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IndexPath( void *a1, uint64_t *a2))(void, void)
{
  *a1 = v4;
  return destructiveProjectEnumData for PredicateCodableError;
}

void protocol witness for Collection.subscript.getter in conformance IndexPath( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6;
}

void protocol witness for Collection.indices.getter in conformance IndexPath(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = 0LL;
  __asm { BR              X10 }

void sub_182FD5BA4()
{
  *(void *)(v0 + 32) = 1LL;
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance IndexPath()
{
  return ((uint64_t (*)(uint64_t))((char *)sub_182FD5BF4 + 4 * byte_18372D23C[*(unsigned __int8 *)(v0 + 16)]))(1LL);
}

uint64_t sub_182FD5BF4()
{
  return 0LL;
}

BOOL sub_182FD5BFC()
{
  return *(void *)(*(void *)v0 + 16LL) == 0LL;
}

void protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance IndexPath( uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance IndexPath( uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }

  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }

  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance IndexPath( void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection.index(after:) in conformance IndexPath@<X0>( void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1LL;
  }
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance IndexPath@<X0>( void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1LL)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1LL;
  }
  return result;
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance IndexPath( void *result)
{
  if (__OFSUB__(*result, 1LL)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance IndexPath@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized BidirectionalCollection.index(_:offsetBy:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance IndexPath@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance IndexPath( void *a1, void *a2)
{
  return specialized BidirectionalCollection.distance(from:to:)(*a1, *a2);
}

__n128 protocol witness for Sequence.makeIterator() in conformance IndexPath@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  a1[1].n128_u64[1] = 0LL;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance IndexPath()
{
  return ((uint64_t (*)(void))((char *)sub_182FD5D60 + 4 * byte_18372D240[*(unsigned __int8 *)(v0 + 16)]))(0LL);
}

uint64_t sub_182FD5D60()
{
  return 1LL;
}

uint64_t sub_182FD5D68()
{
  return 2LL;
}

uint64_t sub_182FD5D70()
{
  return *(void *)(*(void *)v0 + 16LL);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IndexPath()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  char v3 = *(_BYTE *)(v0 + 16);
  specialized _copyCollectionToContiguousArray<A>(_:)(v1, v2, v3);
  uint64_t v5 = v4;
  outlined consume of IndexPath.Storage(v1, v2, v3);
  return v5;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance IndexPath( uint64_t a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)( a1,  a2,  a3,  *(void **)v3,  *(void *)(v3 + 8),  *(_BYTE *)(v3 + 16));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance IndexPath@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K9RunsSliceVABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

void IndexPath.description.getter()
{
  __asm { BR              X11 }

uint64_t sub_182FD5E38()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 93LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return 91LL;
}

void IndexPath.debugDescription.getter()
{
  __asm { BR              X11 }

uint64_t sub_182FD5F60()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 93LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return 91LL;
}

uint64_t IndexPath.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v16[1] = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)v1;
  uint64_t v10 = *(void *)(v1 + 8);
  char v11 = *(_BYTE *)(v1 + 16);
  uint64_t v18 = v9;
  uint64_t v19 = v10;
  char v20 = v11;
  v16[2] = v9;
  v16[3] = v10;
  char v17 = v11;
  uint64_t v12 = *MEMORY[0x18961A6F8];
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 104))(v8, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v8, 0LL, 1LL, v13);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x18961A748], v2);
  outlined copy of IndexPath.Storage(v9, v10, v11);
  outlined copy of IndexPath.Storage(v9, v10, v11);
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance IndexPath@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v17[0] = a2;
  v17[1] = a1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)v2;
  uint64_t v11 = *(void *)(v2 + 8);
  char v12 = *(_BYTE *)(v2 + 16);
  uint64_t v19 = v10;
  uint64_t v20 = v11;
  char v21 = v12;
  v17[2] = v10;
  v17[3] = v11;
  char v18 = v12;
  uint64_t v13 = *MEMORY[0x18961A6F8];
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v9, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v9, 0LL, 1LL, v14);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x18961A748], v3);
  outlined copy of IndexPath.Storage(v10, v11, v12);
  outlined copy of IndexPath.Storage(v10, v11, v12);
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance IndexPath.CodingKeys@<X0>( void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0LL;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IndexPath.CodingKeys()
{
  return 0x73657865646E69LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IndexPath.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x73657865646E69LL && a2 == 0xE700000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance IndexPath.CodingKeys()
{
  return 0LL;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance IndexPath.CodingKeys@<X0>( uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IndexPath.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IndexPath.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t IndexPath.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<IndexPath.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v22[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
    __swift_project_boxed_opaque_existential_1(v22, v23);
    uint64_t v9 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
    unint64_t v24 = a2;
    if ((v10 & 1) != 0) {
      uint64_t v11 = (void *)MEMORY[0x18961AFE8];
    }
    else {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9 & ~(v9 >> 63),  0,  MEMORY[0x18961AFE8]);
    }
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v22, v23);
      if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0) {
        break;
      }
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v22, v23);
      uint64_t v12 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v11[2] + 1LL,  1,  v11);
      }
      unint64_t v14 = v11[2];
      unint64_t v13 = v11[3];
      if (v14 >= v13 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v13 > 1),  v14 + 1,  1,  v11);
      }
      v11[2] = v14 + 1;
      v11[v14 + 4] = v12;
    }

    uint64_t v15 = v11[2];
    if (v15 == 2)
    {
      unint64_t v16 = (void *)v11[4];
      uint64_t v17 = v11[5];
      swift_bridgeObjectRelease();
      char v18 = 1;
    }

    else if (v15 == 1)
    {
      unint64_t v16 = (void *)v11[4];
      swift_bridgeObjectRelease();
      uint64_t v17 = 0LL;
      char v18 = 0;
    }

    else if (v15)
    {
      uint64_t v17 = 0LL;
      char v18 = 2;
      unint64_t v16 = v11;
    }

    else
    {
      swift_bridgeObjectRelease();
      unint64_t v16 = 0LL;
      uint64_t v17 = 0LL;
      char v18 = 3;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    uint64_t v19 = v24;
    *unint64_t v24 = v16;
    v19[1] = v17;
    *((_BYTE *)v19 + 16) = v18;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void IndexPath.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<IndexPath.CodingKeys>);
  MEMORY[0x1895F8858](v3);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  __asm { BR              X9 }

uint64_t sub_182FD6808()
{
  return __swift_destroy_boxed_opaque_existential_1(v2 - 120);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IndexPath@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return IndexPath.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance IndexPath(void *a1)
{
}

uint64_t NSIndexPath._toCustomAnyHashable()()
{
  id v1 = v0;
  unint64_t v2 = (unint64_t)objc_msgSend(v1, sel_length);
  if (v2 == 2)
  {
    objc_msgSend(v1, sel_indexAtPosition_, 0);
    objc_msgSend(v1, sel_indexAtPosition_, 1);
    goto LABEL_7;
  }

  unint64_t v3 = v2;
  if (v2 == 1)
  {
    objc_msgSend(v1, sel_indexAtPosition_, 0);

LABEL_10:
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
    return AnyHashable.init<A>(_:)();
  }

  if (!v2)
  {
    specialized IndexPath.Storage.init(arrayLiteral:)(MEMORY[0x18961AFE8]);
LABEL_7:

    goto LABEL_10;
  }

  if ((v2 & 0x8000000000000000LL) == 0)
  {
    uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v4 + 16) = v3;
    objc_msgSend(v1, sel_getIndexes_range_, v4 + 32, 0, v3);
    *(void *)(v4 + 16) = v3;

    goto LABEL_10;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!a1)
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    char v11 = 3;
LABEL_11:
    *(_BYTE *)(a2 + 16) = v11;
    return;
  }

  id v3 = a1;
  unint64_t v4 = (unint64_t)objc_msgSend(v3, sel_length);
  if (v4 == 2)
  {
    id v13 = objc_msgSend(v3, sel_indexAtPosition_, 0);
    id v14 = objc_msgSend(v3, sel_indexAtPosition_, 1);

    *(void *)a2 = v13;
    *(void *)(a2 + 8) = v14;
    *(_BYTE *)(a2 + 16) = 1;
    return;
  }

  unint64_t v5 = v4;
  if (v4 == 1)
  {
    id v12 = objc_msgSend(v3, sel_indexAtPosition_, 0);

    *(void *)a2 = v12;
    *(void *)(a2 + 8) = 0LL;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }

  if (!v4)
  {
    uint64_t v6 = specialized IndexPath.Storage.init(arrayLiteral:)(MEMORY[0x18961AFE8]);
    uint64_t v8 = v7;
    char v10 = v9;

    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 16) = v10;
    return;
  }

  if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v5;
    objc_msgSend(v3, sel_getIndexes_range_, v15 + 32, 0, v5);
    *(void *)(v15 + 16) = v5;

    *(void *)a2 = v15;
    *(void *)(a2 + 8) = 0LL;
    char v11 = 2;
    goto LABEL_11;
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSIndexPath()
{
  id v1 = *v0;
  NSIndexPath._toCustomAnyHashable()();
}

unint64_t static IndexPath._getObjectiveCType()()
{
  return type metadata accessor for NSIndexPath();
}

NSIndexPath __swiftcall IndexPath._bridgeToObjectiveC()()
{
  __asm { BR              X10 }

  return result;
}

id sub_182FD6D10()
{
  return objc_msgSend(objc_allocWithZone((Class)NSIndexPath), sel_initWithIndex_, v0);
}

id sub_182FD6D34()
{
  return objc_msgSend( objc_allocWithZone((Class)NSIndexPath),  sel_initWithIndexes_length_,  v0 + 32,  *(void *)(v0 + 16));
}

id sub_182FD6D64()
{
  return objc_msgSend(objc_allocWithZone((Class)NSIndexPath), sel_init);
}

uint64_t sub_182FD6D84()
{
  return swift_dynamicCastObjCClassUnconditional();
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(void *a1)
{
  uint64_t v2 = (uint64_t)objc_msgSend(a1, sel_length);
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_length);
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t result = (uint64_t)objc_msgSend(a1, sel_length);
    if ((v2 & 0x8000000000000000LL) == 0 && result >= v2)
    {
      if (v2)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        unint64_t v4 = (void *)swift_allocObject();
        size_t v5 = _swift_stdlib_malloc_size(v4);
        v4[2] = v2;
        v4[3] = 2 * v5 - 64;
        id v6 = a1;
        uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)(v8, (uint64_t)(v4 + 4), v2);

        if (v7 == (void *)v2) {
          return (uint64_t)v4;
        }
        __break(1u);
      }

      return MEMORY[0x18961AFE8];
    }
  }

  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  void v18[14];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v2 = *a1;
  uint64_t v17 = a1[1];
  id v3 = a1[2];
  unint64_t v4 = a1[3];
  size_t v5 = a1[4];
  id v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  char v9 = a1[8];
  char v10 = *(_OWORD *)(*a1 + 32LL);
  uint64_t v19 = *(_OWORD *)(*a1 + 16LL);
  uint64_t v20 = v10;
  char v21 = *(_OWORD *)(v2 + 48);
  uint64_t v22 = v17;
  uint64_t v23 = v3;
  unint64_t v24 = v4;
  unint64_t v25 = v5;
  uint64_t v26 = v6;
  uint64_t v27 = v7;
  uint64_t v28 = v8;
  uint64_t v29 = v9;
  swift_unknownObjectRetain();
  char v11 = BigSubstring.UnicodeScalarView.distance(from:to:)();
  swift_unknownObjectRelease();
  if (!v11) {
    return MEMORY[0x18961AFE8];
  }
  if (v11 <= 0)
  {
    id v12 = (void *)MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
    id v12 = (void *)swift_allocObject();
    id v13 = _swift_stdlib_malloc_size(v12);
    id v14 = v13 - 32;
    if (v13 < 32) {
      id v14 = v13 - 29;
    }
    _DWORD v12[2] = v11;
    v12[3] = 2 * (v14 >> 2);
  }

  outlined retain of AttributedString.Runs((uint64_t)a1);
  uint64_t v15 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v18, (uint64_t)(v12 + 4), v11);
  uint64_t result = swift_release();
  if (v15 == v11) {
    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int64_t v11;
  uint64_t *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  void v18[14];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v2 = *a1;
  uint64_t v17 = a1[1];
  id v3 = a1[2];
  unint64_t v4 = a1[3];
  size_t v5 = a1[4];
  id v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  char v9 = a1[8];
  char v10 = *(_OWORD *)(*a1 + 32LL);
  uint64_t v19 = *(_OWORD *)(*a1 + 16LL);
  uint64_t v20 = v10;
  char v21 = *(_OWORD *)(v2 + 48);
  uint64_t v22 = v17;
  uint64_t v23 = v3;
  unint64_t v24 = v4;
  unint64_t v25 = v5;
  uint64_t v26 = v6;
  uint64_t v27 = v7;
  uint64_t v28 = v8;
  uint64_t v29 = v9;
  swift_unknownObjectRetain();
  char v11 = BigSubstring.distance(from:to:)();
  swift_unknownObjectRelease();
  if (!v11) {
    return MEMORY[0x18961AFE8];
  }
  if (v11 <= 0)
  {
    id v12 = (uint64_t *)MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    id v12 = (uint64_t *)swift_allocObject();
    id v13 = _swift_stdlib_malloc_size(v12);
    id v14 = v13 - 32;
    if (v13 < 32) {
      id v14 = v13 - 17;
    }
    _DWORD v12[2] = v11;
    v12[3] = 2 * (v14 >> 4);
  }

  outlined retain of AttributedString.Runs((uint64_t)a1);
  uint64_t v15 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v18, v12 + 4, v11);
  uint64_t result = swift_release();
  if (v15 == v11) {
    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
    __break(1u);
    goto LABEL_12;
  }

  if (v3 < a3)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (__OFSUB__(v3, a3))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!a2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  uint64_t v7 = (uint64_t)result;
  if (a2 <= 0)
  {
    uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v8 = (void *)swift_allocObject();
    size_t v9 = _swift_stdlib_malloc_size(v8);
    id v8[2] = a2;
    v8[3] = 2 * v9 - 64;
  }

  uint64_t result = specialized Sequence._copySequenceContents(initializing:)(v10, (uint64_t)(v8 + 4), a2, v7, a2, a3);
  if (result == (void *)a2) {
    return v8;
  }
LABEL_14:
  __break(1u);
  return result;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

void *sub_182FD6FD8()
{
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = 2LL;
  v3[3] = 2 * (v5 >> 3);
  outlined copy of IndexPath.Storage((uint64_t)v2, v1, v0);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v8, v3 + 4, 2LL, v2, v1, v0);
  outlined consume of IndexPath.Storage(v8[0], v8[1], v9);
  if (v6 != 2)
  {
    __break(1u);
    JUMPOUT(0x182FD708CLL);
  }

  return v3;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(a1 + 16), sel_count);
  if (!v2) {
    return MEMORY[0x18961AFE8];
  }
  uint64_t v3 = (uint64_t)v2;
  if ((uint64_t)v2 <= 0)
  {
    int64_t v4 = (void *)MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    int64_t v4 = (void *)swift_allocObject();
    int64_t v5 = _swift_stdlib_malloc_size(v4);
    uint64_t v6 = v5 - 32;
    if (v5 < 32) {
      uint64_t v6 = v5 - 25;
    }
    v4[2] = v3;
    v4[3] = 2 * (v6 >> 3);
  }

  swift_retain();
  uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)(v9, (uint64_t)(v4 + 4), v3, a1);
  uint64_t result = swift_release();
  if (v7 == v3) {
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

{
  int64_t v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[240];
  id v2 = specialized BidirectionalCollection._distance(from:to:)( *(void *)(a1 + 136),  *(void **)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168));
  if (!v2) {
    return MEMORY[0x18961AFE8];
  }
  uint64_t v3 = v2;
  if (v2 <= 0)
  {
    int64_t v4 = (void *)MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AttributeContainer, Range<AttributedString.Index>)>);
    int64_t v4 = (void *)swift_allocObject();
    int64_t v5 = _swift_stdlib_malloc_size(v4);
    v4[2] = v3;
    v4[3] = 2 * ((uint64_t)(v5 - 32) / 80);
  }

  outlined retain of AttributedString.Runs.NSAttributesSlice(a1);
  uint64_t v6 = specialized Sequence._copyContents(initializing:)((uint64_t)v8, (uint64_t)(v4 + 4), v3);
  uint64_t result = outlined release of AttributedString.Runs.NSAttributesSlice.Iterator((uint64_t)v8);
  if (v6 == v3) {
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

{
  int64_t v2;
  uint64_t v3;
  void *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void v9[15];
  id v2 = specialized Collection.distance(from:to:)( (*(void *)(a1 + 48) >> 11 << 16) | 4LL,  (*(void *)(a1 + 80) >> 11 << 16) | 4LL);
  if (!v2) {
    return MEMORY[0x18961AFE8];
  }
  uint64_t v3 = v2;
  if (v2 <= 0)
  {
    int64_t v4 = (void *)MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String.Index>);
    int64_t v4 = (void *)swift_allocObject();
    int64_t v5 = _swift_stdlib_malloc_size(v4);
    uint64_t v6 = v5 - 32;
    if (v5 < 32) {
      uint64_t v6 = v5 - 25;
    }
    v4[2] = v3;
    v4[3] = 2 * (v6 >> 3);
  }

  outlined retain of Locale(a1);
  uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v9, (uint64_t)(v4 + 4), v3);
  uint64_t result = swift_unknownObjectRelease();
  if (v7 == v3) {
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
  uint64_t v3 = swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * v4 - 64;
  int64_t v5 = specialized Sequence._copyContents(initializing:)(&v7, (_BYTE *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x18961AFE8];
  }

  return v3;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[248];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  id v2 = *(_OWORD *)(a1 + 176);
  unint64_t v25 = *(_OWORD *)(a1 + 160);
  uint64_t v26 = v2;
  uint64_t v27 = *(_OWORD *)(a1 + 192);
  uint64_t v28 = *(void *)(a1 + 208);
  uint64_t v3 = *(_OWORD *)(a1 + 112);
  char v21 = *(_OWORD *)(a1 + 96);
  uint64_t v22 = v3;
  int64_t v4 = *(_OWORD *)(a1 + 144);
  uint64_t v23 = *(_OWORD *)(a1 + 128);
  unint64_t v24 = v4;
  int64_t v5 = *(_OWORD *)(a1 + 48);
  uint64_t v17 = *(_OWORD *)(a1 + 32);
  char v18 = v5;
  uint64_t v6 = *(_OWORD *)(a1 + 80);
  uint64_t v19 = *(_OWORD *)(a1 + 64);
  uint64_t v20 = v6;
  uint64_t v7 = *(_OWORD *)(a1 + 16);
  uint64_t v15 = *(_OWORD *)a1;
  unint64_t v16 = v7;
  uint64_t v8 = specialized BidirectionalCollection._distance(from:to:)( *((void *)&v23 + 1),  v24,  *((void *)&v24 + 1),  v25,  *((void *)&v25 + 1),  v26,  *((void *)&v26 + 1),  v27);
  if (!v8) {
    return MEMORY[0x18961AFE8];
  }
  char v9 = v8;
  if (v8 <= 0)
  {
    char v10 = (void *)MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AttributedString?, Range<AttributedString.Index>)>);
    char v10 = (void *)swift_allocObject();
    char v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v9;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
  }

  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>(a1);
  id v12 = specialized Sequence._copyContents(initializing:)((uint64_t)v14, (uint64_t)(v10 + 4), v9);
  uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v14);
  if (v12 == v9) {
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[248];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  id v2 = *(_OWORD *)(a1 + 176);
  unint64_t v25 = *(_OWORD *)(a1 + 160);
  uint64_t v26 = v2;
  uint64_t v27 = *(_OWORD *)(a1 + 192);
  uint64_t v28 = *(void *)(a1 + 208);
  uint64_t v3 = *(_OWORD *)(a1 + 112);
  char v21 = *(_OWORD *)(a1 + 96);
  uint64_t v22 = v3;
  int64_t v4 = *(_OWORD *)(a1 + 144);
  uint64_t v23 = *(_OWORD *)(a1 + 128);
  unint64_t v24 = v4;
  int64_t v5 = *(_OWORD *)(a1 + 48);
  uint64_t v17 = *(_OWORD *)(a1 + 32);
  char v18 = v5;
  uint64_t v6 = *(_OWORD *)(a1 + 80);
  uint64_t v19 = *(_OWORD *)(a1 + 64);
  uint64_t v20 = v6;
  uint64_t v7 = *(_OWORD *)(a1 + 16);
  uint64_t v15 = *(_OWORD *)a1;
  unint64_t v16 = v7;
  uint64_t v8 = specialized BidirectionalCollection._distance(from:to:)( *((void *)&v23 + 1),  v24,  *((void *)&v24 + 1),  v25,  *((void *)&v25 + 1),  v26,  *((void *)&v26 + 1),  v27);
  if (!v8) {
    return MEMORY[0x18961AFE8];
  }
  char v9 = v8;
  if (v8 <= 0)
  {
    char v10 = (void *)MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InflectionRule?, Range<AttributedString.Index>)>);
    char v10 = (void *)swift_allocObject();
    char v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v9;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
  }

  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>(a1);
  id v12 = specialized Sequence._copyContents(initializing:)((uint64_t)v14, (uint64_t)(v10 + 4), v9);
  uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v14);
  if (v12 == v9) {
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = a2 - result;
  if (a2 > result)
  {
    uint64_t v7 = 0LL;
    while ((unint64_t)(~result + a2) <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v6 == ++v7) {
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }

  if (a2 < result)
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = ~a2 + result;
    if (v8 >= (result ^ 0x8000000000000000LL)) {
      unint64_t v8 = result ^ 0x8000000000000000LL;
    }
    unint64_t v9 = 0x8000000000000000LL;
    if (v8 < 0x8000000000000000LL) {
      unint64_t v9 = v8;
    }
    while ((v8 & 0x8000000000000000LL) == 0)
    {
      if ((result ^ 0x8000000000000000LL) == v9) {
        goto LABEL_25;
      }
      if (v6 == --v7)
      {
LABEL_14:
        if (!v7) {
          return MEMORY[0x18961AFE8];
        }
        if (v7 <= 0)
        {
          char v10 = (void *)MEMORY[0x18961AFE8];
        }

        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
          char v10 = (void *)swift_allocObject();
          int64_t v11 = _swift_stdlib_malloc_size(v10);
          uint64_t v12 = v11 - 32;
          if (v11 < 32) {
            uint64_t v12 = v11 - 17;
          }
          void v10[2] = v7;
          v10[3] = 2 * (v12 >> 4);
        }

        swift_retain();
        id v13 = specialized Sequence._copySequenceContents(initializing:)(&v14, v10 + 4, v7, v5, a2, a3);
        uint64_t result = swift_release();
        if (v13 != (void *)v7) {
          goto LABEL_26;
        }
        return (uint64_t)v10;
      }
    }

    goto LABEL_24;
  }

  return MEMORY[0x18961AFE8];
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void *sub_182FD7318()
{
  if (BYTE6(v0))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    id v2 = (void *)swift_allocObject();
    size_t v3 = _swift_stdlib_malloc_size(v2);
    v2[2] = BYTE6(v0);
    v2[3] = 2 * v3 - 64;
    outlined copy of Data._Representation(v1, v0);
    Data._copyContents(initializing:)((uint64_t)v7, (uint64_t)(v2 + 4), BYTE6(v0), v1, v0);
    uint64_t v5 = v4;
    outlined consume of Data._Representation(v1, v0);
    outlined consume of Data._Representation(v7[0], v7[1]);
    if (v5 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x182FD73E0LL);
    }
  }

  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 72);
  uint64_t v3 = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
  }

  else
  {
    if (!v3) {
      return MEMORY[0x18961AFE8];
    }
    uint64_t v4 = result;
    if (v3 <= 0)
    {
      uint64_t v5 = (void *)MEMORY[0x18961AFE8];
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.Runs.Run>);
      uint64_t v5 = (void *)swift_allocObject();
      size_t v6 = _swift_stdlib_malloc_size(v5);
      v5[2] = v3;
      v5[3] = 2 * ((uint64_t)(v6 - 32) / 88);
    }

    outlined retain of AttributedString.Runs(v4);
    uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v8, v5 + 4, v3);
    uint64_t result = outlined release of AttributedString.Runs((uint64_t)v8);
    if (v7 == v3) {
      return (uint64_t)v5;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  size_t v6 = specialized Collection.count.getter(a1, a2, a3);
  if (!v6) {
    return MEMORY[0x18961AFE8];
  }
  uint64_t v7 = (uint64_t)v6;
  if ((uint64_t)v6 <= 0)
  {
    unint64_t v8 = (void *)MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString._InternalRun>);
    unint64_t v8 = (void *)swift_allocObject();
    size_t v9 = _swift_stdlib_malloc_size(v8);
    uint64_t v8[2] = v7;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 24);
  }

  swift_retain();
  uint64_t v10 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v12, v8 + 4, v7, a1, a2, a3);
  uint64_t result = swift_release();
  if (v10 == v7) {
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = (unint64_t *)MEMORY[0x18961AFE8];
  if (!a1 || !a2) {
    return (uint64_t)v4;
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString._InternalRun>);
    uint64_t v4 = (unint64_t *)swift_allocObject();
    size_t v9 = _swift_stdlib_malloc_size(v4);
    v4[2] = a2;
    v4[3] = 2 * ((uint64_t)(v9 - 32) / 24);
  }

  swift_unknownObjectRetain();
  uint64_t v10 = specialized Sequence._copySequenceContents(initializing:)(v12, v4 + 4, a2, a1, a2, a3, a4);
  uint64_t result = swift_unknownObjectRelease();
  if (v10 == (void *)a2) {
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;
  uint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x18961AFE8];
    }
    unint64_t v8 = 8 * v5;
    if (v5 <= 0)
    {
      size_t v9 = (char *)MEMORY[0x18961AFE8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        uint64_t v12 = v9 + 32;
        id v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8]) {
          goto LABEL_19;
        }
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      size_t v9 = (char *)swift_allocObject();
      uint64_t v10 = _swift_stdlib_malloc_size(v9);
      int64_t v11 = v10 - 32;
      if (v10 < 32) {
        int64_t v11 = v10 - 25;
      }
      *((void *)v9 + 2) = v5;
      *((void *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }

    __break(1u);
  }

  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  int64_t v5;
  void *v8;
  size_t v9;
  void *v10;
  uint64_t result;
  uint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x18961AFE8];
    }
    if (v5 <= 0)
    {
      unint64_t v8 = (void *)MEMORY[0x18961AFE8];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0) {
          goto LABEL_17;
        }
        uint64_t v10 = v8 + 4;
        memcpy(v10, (const void *)(a2 + a3), v5);
        return (uint64_t)v8;
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
      unint64_t v8 = (void *)swift_allocObject();
      size_t v9 = _swift_stdlib_malloc_size(v8);
      uint64_t v8[2] = v5;
      v8[3] = 2 * v9 - 64;
      if (v4 != a3) {
        goto LABEL_5;
      }
    }

    __break(1u);
  }

  __break(1u);
LABEL_17:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = BigString.Index.init(_utf8Offset:)();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  unint64_t v15 = BigString.Index.init(_utf8Offset:)();
  int64_t v16 = specialized Collection.distance(from:to:)(v8, v10, v12, v14, v15);
  if (!v16) {
    return MEMORY[0x18961AFE8];
  }
  uint64_t v17 = v16;
  if (v16 <= 0)
  {
    char v18 = (unint64_t *)MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.Index>);
    char v18 = (unint64_t *)swift_allocObject();
    int64_t v19 = _swift_stdlib_malloc_size(v18);
    uint64_t v20 = v19 - 32;
    if (v19 < 32) {
      uint64_t v20 = v19 - 1;
    }
    v18[2] = v17;
    v18[3] = 2 * (v20 >> 5);
  }

  swift_bridgeObjectRetain();
  uint64_t v21 = specialized Sequence._copySequenceContents(initializing:)(v23, v18 + 4, v17, a1, a2, a3, a4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v21 == v17) {
    return (uint64_t)v18;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, int64_t a2)
{
  if (!a2) {
    return MEMORY[0x18961AFE8];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v4 = (char *)swift_allocObject();
    size_t v5 = _swift_stdlib_malloc_size(v4);
    *((void *)v4 + 2) = a2;
    *((void *)v4 + 3) = 2 * v5 - 64;
    size_t v6 = v4 + 32;
    if (&v4[a2 + 32] <= a1 || v6 >= &a1[a2])
    {
      memcpy(v6, a1, a2);
      return (uint64_t)v4;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_BYTE *specialized _copyCollectionToContiguousArray<A>(_:)(_BYTE *result, uint64_t a2)
{
  if (!a2) {
    return (_BYTE *)MEMORY[0x18961AFE8];
  }
  if (a2 > 0)
  {
    uint64_t v3 = result;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v4 = swift_allocObject();
    size_t v5 = _swift_stdlib_malloc_size((const void *)v4);
    *(void *)(v4 + 16) = a2;
    *(void *)(v4 + 24) = 2 * v5 - 64;
    *(_BYTE *)(v4 + 32) = *v3;
    uint64_t v6 = v4 + 32;
    uint64_t v7 = a2 - 1;
    if (a2 != 1)
    {
      if ((unint64_t)a2 < 9)
      {
        unint64_t v8 = 1LL;
        uint64_t v9 = v3;
        goto LABEL_18;
      }

      if ((unint64_t)a2 >= 0x21)
      {
        uint64_t v11 = 0LL;
        unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFE0LL;
        do
        {
          uint64_t v12 = v4 + v11;
          __int128 v13 = *(_OWORD *)&v3[v11 + 17];
          *(_OWORD *)(v12 + 33) = *(_OWORD *)&v3[v11 + 1];
          *(_OWORD *)(v12 + 49) = v13;
          v11 += 32LL;
        }

        while (v10 != v11);
        if (v7 == v10) {
          return (_BYTE *)v4;
        }
        if ((v7 & 0x18) == 0)
        {
          uint64_t v9 = &v3[v10];
          v6 += v10;
          unint64_t v8 = v10 | 1;
LABEL_18:
          unint64_t v15 = a2 - v8;
          int64_t v16 = (_BYTE *)(v6 + 1);
          uint64_t v17 = v9 + 1;
          do
          {
            char v18 = *v17++;
            *v16++ = v18;
            --v15;
          }

          while (v15);
          return (_BYTE *)v4;
        }
      }

      else
      {
        unint64_t v10 = 0LL;
      }

      unint64_t v14 = v7 & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8LL | 1;
      v6 += v7 & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v9 = &v3[v7 & 0xFFFFFFFFFFFFFFF8LL];
      do
      {
        *(void *)(v4 + v10 + 33) = *(void *)&v3[v10 + 1];
        v10 += 8LL;
      }

      while (v14 != v10);
      if (v7 == v14) {
        return (_BYTE *)v4;
      }
      goto LABEL_18;
    }

    return (_BYTE *)v4;
  }

  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)( a1,  (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, MEMORY[0x1896192E0]);
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: Encodable)>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 56);
  size_t v5 = specialized Sequence._copyContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  size_t v5 = v4 - 32;
  if (v4 < 32) {
    size_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  uint64_t v6 = specialized Sequence._copyContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v3;
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: _XMLPlistEncodingFormat.Reference, value: _XMLPlistEncodingFormat.Reference)>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 48);
  size_t v5 = specialized Sequence._copyContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v3;
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: JSONReference)>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  size_t v5 = specialized Sequence._copyContents(initializing:)((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  size_t v5 = v4 - 32;
  if (v4 < 32) {
    size_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copyContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.NumberingSystem>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  size_t v5 = v4 - 32;
  if (v4 < 32) {
    size_t v5 = v4 - 1;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 5);
  uint64_t v6 = specialized Sequence._copyContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  size_t v5 = v4 - 32;
  if (v4 < 32) {
    size_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copyContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v3;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)( unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v4) {
    return (void *)MEMORY[0x18961AFE8];
  }
  while (1)
  {
    if (v4 <= 0)
    {
      size_t v5 = (void *)MEMORY[0x18961AFE8];
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      size_t v5 = (void *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }

    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return (void *)MEMORY[0x18961AFE8];
    }
  }

  return v5;
}

char *specialized UnsafeBufferPointer._copyContents(initializing:)( char *a1, int64_t a2, char *__src, int64_t a4)
{
  uint64_t v4 = __src;
  if (!a4 || !a2) {
    return v4;
  }
  if (a4 >= a2) {
    size_t v5 = a2;
  }
  else {
    size_t v5 = a4;
  }
  if ((v5 & 0x8000000000000000LL) == 0 && (&a1[v5] <= __src || &__src[v5] <= a1))
  {
    memcpy(a1, __src, v5);
    v4 += v5;
    return v4;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [_BPlistEncodingFormat.Reference] and conformance [A],  &demangling cache variable for type metadata for [_BPlistEncodingFormat.Reference],  MEMORY[0x189618488]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [_BPlistEncodingFormat.Reference]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0LL);
          *(void *)(a1 + 8 * i) = v14;
        }

        swift_bridgeObjectRelease();
        return a3;
      }

      goto LABEL_18;
    }

void (*specialized protocol witness for Collection.subscript.read in conformance [A]( uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for SortComparator.order.modify in conformance KeyPathComparator<A>;
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    uint64_t v4 = MEMORY[0x186E1C36C](a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }

  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

void specialized static IndexPath.> infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }

uint64_t sub_182FD90DC()
{
  return ((uint64_t (*)(void))((char *)&loc_182FD90F8 + *((int *)qword_182FD9460 + v0)))();
}

uint64_t sub_182FD9108()
{
  if (v0) {
    __asm { BR              X9 }
  }

  return 0LL;
}

void sub_182FD9398()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x80000001839CAB90LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x182FD9450LL);
}

void specialized static IndexPath.>= infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }

uint64_t sub_182FD94DC()
{
  return ((uint64_t (*)(void))((char *)&loc_182FD94F8 + *((int *)qword_182FD9858 + v0)))();
}

uint64_t sub_182FD9508()
{
  if (v0) {
    __asm { BR              X9 }
  }

  return 0LL;
}

void sub_182FD9790()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x80000001839CAB90LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x182FD9848LL);
}

void specialized static IndexPath.<= infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }

uint64_t sub_182FD98D4()
{
  return ((uint64_t (*)(void))((char *)&loc_182FD98F0 + dword_182FD9C5C[v0]))();
}

uint64_t sub_182FD9900()
{
  if (v0) {
    __asm { BR              X9 }
  }

  return 1LL;
}

void sub_182FD9B94()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x80000001839CAB90LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x182FD9C4CLL);
}

uint64_t specialized IndexPath.Storage.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1 == 2 || v1 == 1)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    swift_bridgeObjectRelease();
  }

  else if (v1)
  {
    return a1;
  }

  else
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v2;
}

uint64_t outlined copy of IndexPath.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of IndexPath.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexPath and conformance IndexPath()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexPath.CodingKeys, &unk_189C74998);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexPath.CodingKeys, &unk_189C74998);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexPath.CodingKeys, &unk_189C74998);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IndexPath.CodingKeys, &unk_189C74998);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys);
  }

  return result;
}

unint64_t type metadata accessor for NSIndexPath()
{
  unint64_t result = lazy cache variable for type metadata for NSIndexPath;
  if (!lazy cache variable for type metadata for NSIndexPath)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSIndexPath);
  }

  return result;
}

id specialized static IndexPath._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  unint64_t v4 = (unint64_t)objc_msgSend(a1, sel_length);
  if (v4 == 2)
  {
    unint64_t v6 = objc_msgSend(a1, sel_indexAtPosition_, 0);
    char v10 = 1;
    id result = objc_msgSend(a1, sel_indexAtPosition_, 1);
    goto LABEL_9;
  }

  unint64_t v5 = v4;
  if (v4 == 1)
  {
    unint64_t v6 = objc_msgSend(a1, sel_indexAtPosition_, 0);
    id result = 0LL;
    char v10 = 0;
    goto LABEL_9;
  }

  if (!v4)
  {
    unint64_t v6 = (void *)specialized IndexPath.Storage.init(arrayLiteral:)(MEMORY[0x18961AFE8]);
    id result = v7;
    char v10 = v9;
LABEL_9:
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = result;
    *(_BYTE *)(a2 + 16) = v10;
    return result;
  }

  if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v6 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v6[2] = v5;
    objc_msgSend(a1, sel_getIndexes_range_, v6 + 4, 0, v5);
    id result = 0LL;
    v6[2] = v5;
    char v10 = 2;
    goto LABEL_9;
  }

  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static IndexPath._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  unint64_t v4 = (unint64_t)objc_msgSend(a1, sel_length);
  if (v4 == 2)
  {
    unint64_t v6 = objc_msgSend(a1, sel_indexAtPosition_, 0);
    char v10 = 1;
    id v8 = objc_msgSend(a1, sel_indexAtPosition_, 1);
    goto LABEL_9;
  }

  unint64_t v5 = v4;
  if (v4 == 1)
  {
    unint64_t v6 = objc_msgSend(a1, sel_indexAtPosition_, 0);
    id v8 = 0LL;
    char v10 = 0;
    goto LABEL_9;
  }

  if (!v4)
  {
    unint64_t v6 = (void *)specialized IndexPath.Storage.init(arrayLiteral:)(MEMORY[0x18961AFE8]);
    id v8 = v7;
    char v10 = v9;
LABEL_9:
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 16) = v10;
    return 1LL;
  }

  if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v6 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v6[2] = v5;
    objc_msgSend(a1, sel_getIndexes_range_, v6 + 4, 0, v5);
    id v8 = 0LL;
    v6[2] = v5;
    char v10 = 2;
    goto LABEL_9;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in IndexPath()
{
  return lazy protocol witness table accessor for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>( &lazy protocol witness table cache variable for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>,  (uint64_t (*)(void))lazy protocol witness table accessor for type IndexPath and conformance IndexPath,  MEMORY[0x189617A20]);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in IndexPath()
{
  return MEMORY[0x189618758];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IndexPath()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type DefaultIndices<IndexPath> and conformance DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<IndexPath>,  MEMORY[0x189617A28]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in IndexPath()
{
  return lazy protocol witness table accessor for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>( &lazy protocol witness table cache variable for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>,  (uint64_t (*)(void))lazy protocol witness table accessor for type IndexPath and conformance IndexPath,  MEMORY[0x189617A18]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>( unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for DefaultIndices<IndexPath>);
    uint64_t v8 = a2();
    uint64_t result = MEMORY[0x186E20D4C](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in IndexPath()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IndexingIterator<IndexPath> and conformance IndexingIterator<A>,  &demangling cache variable for type metadata for IndexingIterator<IndexPath>,  MEMORY[0x189619678]);
}

unint64_t instantiation function for generic protocol witness table for IndexPath(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  a1[2] = lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  a1[3] = lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  unint64_t result = lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  a1[4] = result;
  return result;
}

void sub_182FDA4A4(void *a1@<X8>)
{
  *a1 = v2;
}

void sub_182FDA4EC()
{
}

uint64_t sub_182FDA514()
{
  return 0LL;
}

uint64_t sub_182FDA52C()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for IndexPath()
{
  return &type metadata for IndexPath;
}

uint64_t destroy for IndexPath.Storage(uint64_t a1)
{
  return outlined consume of IndexPath.Storage(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for IndexPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of IndexPath.Storage(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for IndexPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of IndexPath.Storage(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of IndexPath.Storage(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for IndexPath(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of IndexPath.Storage(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexPath(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IndexPath(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for IndexPath.Storage(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for IndexPath.Storage(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 3;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

void *type metadata accessor for IndexPath.Storage()
{
  return &unk_189C74908;
}

uint64_t storeEnumTagSinglePayload for IndexPath.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_182FDA75C + 4 * byte_18372D254[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_182FDA77C + 4 * byte_18372D259[v4]))();
  }
}

_BYTE *sub_182FDA75C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_182FDA77C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_182FDA784(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_182FDA78C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_182FDA794(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_182FDA79C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for IndexPath.CodingKeys()
{
  return &unk_189C74998;
}

uint64_t outlined retain of AttributedString.Runs.NSAttributesSlice(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>( uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator( uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of IndexPath?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined consume of IndexPath.Storage(a1, a2, a3);
  }
  return a1;
}

uint64_t Locale.Language.hash(into:)()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[4];
  uint64_t v12 = *v0;
  uint64_t v13 = v0[5];
  uint64_t v4 = v0[9];
  uint64_t v11 = v0[8];
  if (v1)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v2, v1);
    outlined copy of Locale.LanguageCode?(v3, v13);
    uint64_t v5 = v11;
    outlined copy of Locale.LanguageCode?(v11, v4);
    outlined copy of Locale.LanguageCode?(v2, v1);
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v2, v1);
    uint64_t v6 = v13;
    if (v13) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    uint64_t v8 = v1;
    uint64_t v7 = v3;
    uint64_t v9 = v4;
    if (v4) {
      goto LABEL_4;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }

  Hasher._combine(_:)(0);
  outlined copy of Locale.LanguageCode?(v2, 0LL);
  outlined copy of Locale.LanguageCode?(v3, v13);
  uint64_t v5 = v11;
  outlined copy of Locale.LanguageCode?(v11, v4);
  uint64_t v6 = v13;
  if (!v13) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  uint64_t v7 = v3;
  outlined consume of Locale.LanguageCode?(v3, v6);
  uint64_t v8 = v1;
  uint64_t v9 = v4;
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v5, v9);
LABEL_8:
  outlined consume of Locale.LanguageCode?(v12, v8);
  outlined consume of Locale.LanguageCode?(v7, v6);
  return outlined consume of Locale.LanguageCode?(v5, v9);
}

__n128 Locale.Language.Components.init(languageCode:script:region:)@<Q0>( _OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v4 = a1[1];
  *a4 = *a1;
  a4[1] = v4;
  __int128 v5 = a2[1];
  a4[2] = *a2;
  a4[3] = v5;
  __n128 result = *(__n128 *)a3;
  __int128 v7 = *(_OWORD *)(a3 + 16);
  a4[4] = *(_OWORD *)a3;
  a4[5] = v7;
  return result;
}

__n128 Locale.Language.init(components:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  __n128 result = *(__n128 *)(a1 + 64);
  __int128 v5 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v5;
  return result;
}

uint64_t Locale.Language.Components.languageCode.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Language.Components.languageCode.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(*v1, v1[1]);
  __n128 result = v5;
  *(__n128 *)uint64_t v1 = v5;
  v1[2] = v2;
  v1[3] = v3;
  return result;
}

uint64_t (*Locale.Language.Components.languageCode.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Language.Components.script.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[4];
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  uint64_t v5 = v1[7];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Language.Components.script.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[4], v1[5]);
  __n128 result = v5;
  *((__n128 *)v1 + 2) = v5;
  v1[6] = v2;
  v1[7] = v3;
  return result;
}

uint64_t (*Locale.Language.Components.script.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Language.Components.region.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[8];
  uint64_t v3 = v1[9];
  uint64_t v4 = v1[10];
  uint64_t v5 = v1[11];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Language.Components.region.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[8], v1[9]);
  __n128 result = v5;
  *((__n128 *)v1 + 4) = v5;
  v1[10] = v2;
  v1[11] = v3;
  return result;
}

uint64_t (*Locale.Language.Components.region.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Language.Components.identifier.getter()
{
  object = v0[2]._object;
  uint64_t countAndFlagsBits = v0[3]._countAndFlagsBits;
  uint64_t v3 = v0[3]._object;
  __n128 v5 = v0[4]._object;
  uint64_t v4 = v0[5]._countAndFlagsBits;
  uint64_t v6 = v0[5]._object;
  if (v0->_object) {
    String.append(_:)(v0[1]);
  }
  if (object)
  {
    v7._uint64_t countAndFlagsBits = 45LL;
    v7._object = (void *)0xE100000000000000LL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = countAndFlagsBits;
    v8._object = v3;
    String.append(_:)(v8);
  }

  if (v5)
  {
    v9._uint64_t countAndFlagsBits = 95LL;
    v9._object = (void *)0xE100000000000000LL;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = v4;
    v10._object = v6;
    String.append(_:)(v10);
  }

  return 0LL;
}

void Locale.Language.Components.hash(into:)()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[9];
  uint64_t v6 = v0[8];
  if (v1)
  {
    uint64_t v5 = *v0;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v5, v1);
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  Hasher._combine(_:)(0);
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v2, v3);
  if (v4)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v6, v4);
    return;
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.Language.Components.CodingKeys()
{
  uint64_t v1 = 0x747069726373LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6F69676572LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65676175676E616CLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.Language.Components.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Locale.Language.Components.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Language.Components.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Language.Components.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Language.Components.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Locale.Language.Components.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  Swift::String v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v31 = *v1;
  uint64_t v9 = *((void *)v1 + 2);
  uint64_t v8 = *((void *)v1 + 3);
  uint64_t v10 = *((void *)v1 + 4);
  uint64_t v29 = *((void *)v1 + 5);
  uint64_t v30 = v10;
  uint64_t v11 = *((void *)v1 + 6);
  uint64_t v27 = *((void *)v1 + 7);
  uint64_t v28 = v11;
  uint64_t v12 = *((void *)v1 + 8);
  uint64_t v25 = *((void *)v1 + 9);
  uint64_t v26 = v12;
  uint64_t v13 = *((void *)v1 + 10);
  uint64_t v23 = *((void *)v1 + 11);
  uint64_t v24 = v13;
  uint64_t v14 = a1[3];
  unint64_t v15 = a1;
  uint64_t v17 = v16;
  __swift_project_boxed_opaque_existential_1(v15, v14);
  lazy protocol witness table accessor for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v32 = v31;
  uint64_t v33 = v9;
  uint64_t v34 = v8;
  char v35 = 0;
  lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v19 = v23;
    uint64_t v18 = v24;
    uint64_t v21 = v25;
    uint64_t v20 = v26;
    *(void *)&__int128 v32 = v30;
    *((void *)&v32 + 1) = v29;
    uint64_t v33 = v28;
    uint64_t v34 = v27;
    char v35 = 1;
    lazy protocol witness table accessor for type Locale.Script and conformance Locale.Script();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&__int128 v32 = v20;
    *((void *)&v32 + 1) = v21;
    uint64_t v33 = v18;
    uint64_t v34 = v19;
    char v35 = 2;
    lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v17);
}

Swift::Int Locale.Language.Components.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t Locale.Language.Components.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Language.Components.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v46 = 0LL;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of Locale.LanguageCode?(0LL, 0LL);
    outlined consume of Locale.LanguageCode?(0LL, 0LL);
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
  }

  else
  {
    char v51 = 0;
    lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v10 = v47;
    uint64_t v11 = v48;
    char v51 = 1;
    uint64_t v44 = v50;
    uint64_t v45 = v49;
    outlined copy of Locale.LanguageCode?(v47, v48);
    lazy protocol witness table accessor for type Locale.Script and conformance Locale.Script();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    __int128 v40 = a2;
    uint64_t v42 = v10;
    uint64_t v43 = v11;
    char v51 = 2;
    uint64_t v12 = v47;
    uint64_t v13 = v48;
    uint64_t v14 = v49;
    uint64_t v46 = v50;
    outlined copy of Locale.LanguageCode?(v47, v48);
    lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v15 = v47;
    uint64_t v39 = v49;
    uint64_t v41 = v50;
    uint64_t v16 = v48;
    outlined copy of Locale.LanguageCode?(v47, v48);
    outlined consume of Locale.LanguageCode?(0LL, 0LL);
    uint64_t v17 = v44;
    outlined copy of Locale.LanguageCode?(v42, v43);
    uint64_t v18 = v12;
    uint64_t v19 = v12;
    uint64_t v34 = v12;
    uint64_t v37 = v13;
    uint64_t v38 = v14;
    uint64_t v20 = v46;
    outlined copy of Locale.LanguageCode?(v19, v13);
    uint64_t v35 = v16;
    uint64_t v36 = v15;
    outlined copy of Locale.LanguageCode?(v15, v16);
    outlined consume of Locale.LanguageCode?(v15, v16);
    uint64_t v22 = v37;
    uint64_t v21 = v38;
    outlined consume of Locale.LanguageCode?(v18, v37);
    uint64_t v24 = v42;
    uint64_t v23 = v43;
    uint64_t v25 = v45;
    outlined consume of Locale.LanguageCode?(v42, v43);
    uint64_t v26 = v40;
    uint64_t v27 = v41;
    *__int128 v40 = v24;
    v26[1] = v23;
    v26[2] = v25;
    v26[3] = v17;
    uint64_t v28 = v34;
    v26[4] = v34;
    v26[5] = v22;
    void v26[6] = v21;
    v26[7] = v20;
    uint64_t v30 = v35;
    uint64_t v29 = v36;
    v26[8] = v36;
    v26[9] = v30;
    v26[10] = v39;
    v26[11] = v27;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of Locale.LanguageCode?(v24, v43);
    outlined consume of Locale.LanguageCode?(v28, v37);
    uint64_t v31 = v29;
    uint64_t v32 = v30;
  }

  return outlined consume of Locale.LanguageCode?(v31, v32);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Locale.Language.Components()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Language.Components()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Language.Components@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Language.Components.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Language.Components(void *a1)
{
  return Locale.Language.Components.encode(to:)(a1);
}

uint64_t Locale.Language.components.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = v1[9];
  uint64_t v13 = v1[10];
  uint64_t v12 = v1[11];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v13;
  a1[11] = v12;
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v6, v7);
  return outlined copy of Locale.LanguageCode?(v10, v11);
}

__n128 Locale.Language.components.setter(__int128 *a1)
{
  __int128 v12 = a1[1];
  __int128 v13 = *a1;
  __int128 v10 = a1[3];
  __int128 v11 = a1[2];
  __n128 v9 = (__n128)a1[4];
  uint64_t v2 = *((void *)a1 + 10);
  uint64_t v8 = *((void *)a1 + 11);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  outlined consume of Locale.LanguageCode?(*(void *)v1, *(void *)(v1 + 8));
  outlined consume of Locale.LanguageCode?(v3, v4);
  outlined consume of Locale.LanguageCode?(v5, v6);
  *(_OWORD *)uint64_t v1 = v13;
  *(_OWORD *)(v1 + 16) = v12;
  *(_OWORD *)(v1 + 32) = v11;
  *(_OWORD *)(v1 + 48) = v10;
  __n128 result = v9;
  *(__n128 *)(v1 + 64) = v9;
  *(void *)(v1 + 80) = v2;
  *(void *)(v1 + 88) = v8;
  return result;
}

uint64_t (*Locale.Language.components.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 Locale.Language.init(languageCode:script:region:)@<Q0>( _OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v4 = a1[1];
  *a4 = *a1;
  a4[1] = v4;
  __int128 v5 = a2[1];
  a4[2] = *a2;
  a4[3] = v5;
  __n128 result = *(__n128 *)a3;
  __int128 v7 = *(_OWORD *)(a3 + 16);
  a4[4] = *(_OWORD *)a3;
  a4[5] = v7;
  return result;
}

uint64_t static Locale.Language.systemLanguages.getter()
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  id v0 = objc_msgSend((id)objc_opt_self(), sel_systemLanguages);
  if (!v0) {
    __break(1u);
  }
  uint64_t v1 = v0;
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v2 = swift_dynamicCastClass();
  if (!v2)
  {
    swift_unknownObjectRelease();
    objc_msgSend(v1, sel_copy);
    uint64_t v35 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v3 = specialized _arrayForceCast<A, B>(_:)(v35);

    swift_bridgeObjectRelease();
    int64_t v4 = *(void *)(v3 + 16);
    if (v4) {
      goto LABEL_6;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    return MEMORY[0x18961AFE8];
  }

  uint64_t v3 = v2;

  int64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    goto LABEL_30;
  }
LABEL_6:
  uint64_t v49 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  uint64_t v38 = v3;
  uint64_t v5 = v3 + 32;
  uint64_t v39 = MEMORY[0x18961AFC0] + 8LL;
  do
  {
    uint64_t v45 = v5;
    outlined init with copy of Any(v5, (uint64_t)v51);
    outlined init with copy of Any((uint64_t)v51, (uint64_t)v50);
    uint64_t v6 = swift_dynamicCast();
    MEMORY[0x1895F8858](v6);
    LODWORD(v47) = 0;
    String.utf8CString.getter();
    int Language = uloc_getLanguage();
    uint64_t v8 = swift_release();
    uint64_t v9 = 0LL;
    int64_t v46 = v4;
    uint64_t v10 = 0LL;
    if ((int)v47 <= 0 && Language > 0)
    {
      v37[Language] = 0;
      uint64_t v8 = MEMORY[0x186E1B634](v37);
      uint64_t v9 = v8;
      uint64_t v10 = v11;
    }

    MEMORY[0x1895F8858](v8);
    LODWORD(v47) = 0;
    String.utf8CString.getter();
    int Script = uloc_getScript();
    uint64_t v13 = swift_release();
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    if ((int)v47 <= 0 && Script > 0)
    {
      v37[Script] = 0;
      uint64_t v13 = MEMORY[0x186E1B634](v37);
      uint64_t v14 = v13;
      uint64_t v15 = v16;
    }

    MEMORY[0x1895F8858](v13);
    LODWORD(v47) = 0;
    String.utf8CString.getter();
    int Country = uloc_getCountry();
    swift_release();
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    if ((int)v47 <= 0 && Country > 0)
    {
      v37[Country] = 0;
      uint64_t v18 = MEMORY[0x186E1B634](v37);
      uint64_t v19 = v20;
    }

    swift_bridgeObjectRelease();
    if (v10)
    {
      Swift::String v21 = String.lowercased()();
      object = v21._object;
      uint64_t countAndFlagsBits = v21._countAndFlagsBits;
      if (v15) {
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v9 = 0LL;
      object = 0LL;
      uint64_t countAndFlagsBits = 0LL;
      if (v15)
      {
LABEL_18:
        uint64_t v47 = v14;
        uint64_t v48 = v15;
        swift_bridgeObjectRetain_n();
        String.init<A>(_:)();
        Swift::String v22 = String._capitalized()();
        uint64_t v41 = v22._object;
        uint64_t v42 = v22._countAndFlagsBits;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v23 = v14;
        if (v19) {
          goto LABEL_19;
        }
        goto LABEL_22;
      }
    }

    uint64_t v41 = 0LL;
    uint64_t v42 = 0LL;
    uint64_t v23 = 0LL;
    if (v19)
    {
LABEL_19:
      Swift::String v24 = String.uppercased()();
      uint64_t v40 = v24._countAndFlagsBits;
      uint64_t v25 = v24._object;
      goto LABEL_23;
    }

BOOL static Locale.Language.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  v10[0] = *a1;
  v10[1] = v2;
  __int128 v3 = a1[3];
  void v10[2] = a1[2];
  v10[3] = v3;
  __int128 v4 = a1[5];
  void v10[4] = a1[4];
  v10[5] = v4;
  __int128 v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  __int128 v6 = a2[3];
  void v9[2] = a2[2];
  v9[3] = v6;
  __int128 v7 = a2[5];
  v9[4] = a2[4];
  v9[5] = v7;
  return specialized static Locale.Language.Components.== infix(_:_:)((uint64_t *)v10, (uint64_t *)v9);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.Language.CodingKeys()
{
  return 0x6E656E6F706D6F63LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.Language.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x6E656E6F706D6F63LL && a2 == 0xEA00000000007374LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Language.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Language.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Language.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Locale.Language.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  __int128 v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v7 = *v1;
  __int128 v15 = v1[1];
  __int128 v16 = v7;
  __int128 v8 = v1[2];
  __int128 v13 = v1[3];
  __int128 v14 = v8;
  __int128 v12 = v1[4];
  uint64_t v10 = *((void *)v1 + 10);
  uint64_t v9 = *((void *)v1 + 11);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v17 = v16;
  __int128 v18 = v15;
  __int128 v19 = v14;
  __int128 v20 = v13;
  __int128 v21 = v12;
  uint64_t v22 = v10;
  uint64_t v23 = v9;
  lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Locale.Language.hashValue.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[9];
  uint64_t v7 = v0[8];
  uint64_t v6 = v0[4];
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v2, v1);
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4) {
      goto LABEL_4;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  Hasher._combine(_:)(0);
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v6, v3);
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v7, v4);
  return Hasher._finalize()();
}

uint64_t Locale.Language.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Language.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  __int128 v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __int128 v9 = v15[1];
    __int128 v10 = v15[2];
    __int128 v11 = v15[3];
    __int128 v12 = v15[4];
    __int128 v13 = v15[5];
    *a2 = v15[0];
    a2[1] = v9;
    a2[2] = v10;
    a2[3] = v11;
    a2[4] = v12;
    a2[5] = v13;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for Hashable.hash(into:) in conformance Locale.Language()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[9];
  uint64_t v6 = v0[8];
  if (v1)
  {
    uint64_t v5 = *v0;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v5, v1);
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  Hasher._combine(_:)(0);
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v2, v3);
  if (v4)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v6, v4);
    return;
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Language()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[9];
  uint64_t v7 = v0[8];
  uint64_t v6 = v0[4];
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v2, v1);
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4) {
      goto LABEL_4;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  Hasher._combine(_:)(0);
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v6, v3);
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v7, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Language@<X0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  return Locale.Language.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Language(void *a1)
{
  return Locale.Language.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Locale.Language( _OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  v10[0] = *a1;
  v10[1] = v2;
  __int128 v3 = a1[3];
  void v10[2] = a1[2];
  v10[3] = v3;
  __int128 v4 = a1[5];
  void v10[4] = a1[4];
  v10[5] = v4;
  __int128 v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  __int128 v6 = a2[3];
  void v9[2] = a2[2];
  v9[3] = v6;
  __int128 v7 = a2[5];
  v9[4] = a2[4];
  v9[5] = v7;
  return specialized static Locale.Language.Components.== infix(_:_:)((uint64_t *)v10, (uint64_t *)v9);
}

BOOL specialized static Locale.Language.Components.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v7 = a1[8];
  uint64_t v8 = a1[9];
  uint64_t v10 = a1[10];
  uint64_t v9 = a1[11];
  uint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = a2[6];
  uint64_t v16 = a2[7];
  uint64_t v17 = a2[8];
  uint64_t v18 = a2[9];
  uint64_t v19 = a2[10];
  uint64_t v20 = a2[11];
  if (!v3)
  {
    uint64_t v56 = a1[4];
    if (!v11) {
      goto LABEL_8;
    }
LABEL_15:
    outlined copy of Locale.LanguageCode?(v12, v11);
    outlined consume of Locale.LanguageCode?(v2, v3);
    uint64_t v42 = v12;
    uint64_t v43 = v11;
    goto LABEL_29;
  }

  if (!v11)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }

  uint64_t v56 = a1[4];
  if (a1[2] == a2[2] && a1[3] == a2[3]) {
    goto LABEL_8;
  }
  uint64_t v54 = a2[10];
  uint64_t v55 = a1[10];
  uint64_t v52 = a2[6];
  uint64_t v53 = a1[11];
  uint64_t v51 = a2[11];
  uint64_t v21 = a1[8];
  uint64_t v22 = a1[9];
  uint64_t v23 = a2[8];
  uint64_t v24 = a2[9];
  uint64_t v25 = a1[7];
  uint64_t v26 = a1[6];
  uint64_t v27 = a2[7];
  uint64_t v28 = a2[4];
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v13 = v28;
  uint64_t v20 = v51;
  uint64_t v15 = v52;
  uint64_t v16 = v27;
  uint64_t v6 = v26;
  uint64_t v5 = v25;
  uint64_t v18 = v24;
  uint64_t v17 = v23;
  uint64_t v8 = v22;
  uint64_t v7 = v21;
  uint64_t v19 = v54;
  uint64_t v10 = v55;
  uint64_t v9 = v53;
  char v30 = v29;
  BOOL result = 0LL;
  if ((v30 & 1) != 0)
  {
LABEL_8:
    if (v4)
    {
      if (v14)
      {
        if (v6 != v15 || v5 != v16)
        {
          uint64_t v32 = v10;
          uint64_t v33 = v19;
          uint64_t v34 = v9;
          uint64_t v35 = v20;
          uint64_t v36 = v7;
          uint64_t v37 = v8;
          uint64_t v38 = v17;
          uint64_t v39 = v18;
          char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v18 = v39;
          uint64_t v17 = v38;
          uint64_t v8 = v37;
          uint64_t v7 = v36;
          uint64_t v19 = v33;
          uint64_t v20 = v35;
          uint64_t v10 = v32;
          uint64_t v9 = v34;
          char v41 = v40;
          BOOL result = 0LL;
          if ((v41 & 1) == 0) {
            return result;
          }
        }

        goto LABEL_17;
      }

      uint64_t v44 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = v44;
    }

    else if (!v14)
    {
LABEL_17:
      if (v8)
      {
        if (v18) {
          return v10 == v19 && v9 == v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0;
        }
        uint64_t v47 = v7;
        uint64_t v46 = v8;
        uint64_t v48 = v17;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v18 = 0LL;
        uint64_t v17 = v48;
      }

      else
      {
        uint64_t v46 = 0LL;
        uint64_t v47 = v7;
        if (!v18) {
          return 1LL;
        }
      }

      uint64_t v49 = v17;
      uint64_t v50 = v18;
      outlined copy of Locale.LanguageCode?(v17, v18);
      outlined consume of Locale.LanguageCode?(v47, v46);
      uint64_t v42 = v49;
      uint64_t v43 = v50;
LABEL_29:
      outlined consume of Locale.LanguageCode?(v42, v43);
      return 0LL;
    }

    uint64_t v45 = v13;
    outlined copy of Locale.LanguageCode?(v13, v14);
    outlined consume of Locale.LanguageCode?(v56, v4);
    uint64_t v42 = v45;
    uint64_t v43 = v14;
    goto LABEL_29;
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Language.Components.CodingKeys,  &unk_189C74F20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Language.Components.CodingKeys,  &unk_189C74F20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Language.Components.CodingKeys,  &unk_189C74F20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Language.Components.CodingKeys,  &unk_189C74F20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.LanguageCode,  &type metadata for Locale.LanguageCode);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.LanguageCode,  &type metadata for Locale.LanguageCode);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.LanguageCode,  &type metadata for Locale.LanguageCode);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.LanguageCode,  &type metadata for Locale.LanguageCode);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.LanguageCode,  &type metadata for Locale.LanguageCode);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Script and conformance Locale.Script()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Script, &type metadata for Locale.Script);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Script, &type metadata for Locale.Script);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Script, &type metadata for Locale.Script);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Script, &type metadata for Locale.Script);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Script, &type metadata for Locale.Script);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Region, &type metadata for Locale.Region);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Region, &type metadata for Locale.Region);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Region, &type metadata for Locale.Region);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Region, &type metadata for Locale.Region);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Region, &type metadata for Locale.Region);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Language.CodingKeys, &unk_189C74E90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Language.CodingKeys, &unk_189C74E90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Language.CodingKeys, &unk_189C74E90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Language.CodingKeys, &unk_189C74E90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Language.Components,  &type metadata for Locale.Language.Components);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Language.Components,  &type metadata for Locale.Language.Components);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Language.Components,  &type metadata for Locale.Language.Components);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Language and conformance Locale.Language()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Language and conformance Locale.Language;
  if (!lazy protocol witness table cache variable for type Locale.Language and conformance Locale.Language)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Language,  &type metadata for Locale.Language);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language and conformance Locale.Language);
  }

  return result;
}

ValueMetadata *type metadata accessor for Locale.Language()
{
  return &type metadata for Locale.Language;
}

uint64_t destroy for Locale.Language(void *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t result = a1[9];
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t initializeWithCopy for Locale.Language(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    __int128 v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    uint64_t v8 = *(void *)(a2 + 72);
    if (v8) {
      goto LABEL_4;
    }
LABEL_7:
    __int128 v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    return a1;
  }

  __int128 v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = *(void *)(a2 + 72);
  if (!v8) {
    goto LABEL_7;
  }
LABEL_4:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Locale.Language(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.LanguageCode((uint64_t)a1);
      __int128 v5 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v5;
    }
  }

  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v6;
  }

  uint64_t v7 = a1 + 4;
  uint64_t v8 = a2 + 4;
  uint64_t v9 = a2[5];
  if (a1[5])
  {
    if (v9)
    {
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[6] = a2[6];
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.Script((uint64_t)(a1 + 4));
      __int128 v10 = *((_OWORD *)a2 + 3);
      *uint64_t v7 = *v8;
      *((_OWORD *)a1 + 3) = v10;
    }
  }

  else if (v9)
  {
    a1[4] = a2[4];
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v11 = *((_OWORD *)a2 + 3);
    *uint64_t v7 = *v8;
    *((_OWORD *)a1 + 3) = v11;
  }

  __int128 v12 = a1 + 8;
  __int128 v13 = a2 + 8;
  uint64_t v14 = a2[9];
  if (a1[9])
  {
    if (v14)
    {
      a1[8] = a2[8];
      a1[9] = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[10] = a2[10];
      a1[11] = a2[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.Region((uint64_t)(a1 + 8));
      __int128 v15 = *((_OWORD *)a2 + 5);
      *__int128 v12 = *v13;
      *((_OWORD *)a1 + 5) = v15;
    }
  }

  else if (v14)
  {
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    a1[11] = a2[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v16 = *((_OWORD *)a2 + 5);
    *__int128 v12 = *v13;
    *((_OWORD *)a1 + 5) = v16;
  }

  return a1;
}

uint64_t assignWithTake for Locale.Language(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }

    outlined destroy of Locale.LanguageCode(a1);
  }

  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_6:
  if (*(void *)(a1 + 40))
  {
    uint64_t v7 = *(void *)(a2 + 40);
    if (v7)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }

    outlined destroy of Locale.Script(a1 + 32);
  }

  __int128 v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
LABEL_11:
  if (!*(void *)(a1 + 72))
  {
LABEL_15:
    __int128 v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v12;
    return a1;
  }

  uint64_t v10 = *(void *)(a2 + 72);
  if (!v10)
  {
    outlined destroy of Locale.Region(a1 + 64);
    goto LABEL_15;
  }

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Locale.Language(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Locale.Language(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Locale.Language.Components()
{
  return &type metadata for Locale.Language.Components;
}

uint64_t storeEnumTagSinglePayload for Locale.Language.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_182FDD2CC + 4 * byte_18372D89C[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_182FDD2EC + 4 * byte_18372D8A1[v4]))();
  }
}

_BYTE *sub_182FDD2CC(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_182FDD2EC(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_182FDD2F4(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_182FDD2FC(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_182FDD304(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_182FDD30C(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void *type metadata accessor for Locale.Language.CodingKeys()
{
  return &unk_189C74E90;
}

uint64_t storeEnumTagSinglePayload for Locale.Language.Components.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_182FDD374 + 4 * byte_18372D8AB[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_182FDD3A8 + 4 * byte_18372D8A6[v4]))();
}

uint64_t sub_182FDD3A8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FDD3B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FDD3B8LL);
  }
  return result;
}

uint64_t sub_182FDD3C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FDD3CCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_182FDD3D0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FDD3D8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Locale.Language.Components.CodingKeys()
{
  return &unk_189C74F20;
}

uint64_t specialized Locale.Language.Components.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65676175676E616CLL && a2 == 0xEC00000065646F43LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x747069726373LL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x6E6F69676572LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSFileManager.replaceItemAtURL(originalItemURL:withItemAtURL:backupItemName:options:)( NSURL_optional *__return_ptr retstr, NSURL *originalItemURL, NSURL *withItemAtURL, Swift::String_optional backupItemName, NSFileManagerItemReplacementOptions options)
{
  object = backupItemName.value._object;
  URL.init(reference:)(originalItemURL, &v14);
  uint64_t v8 = v14;
  URL.init(reference:)(withItemAtURL, &v13);
  __int128 v9 = v13;
  id v10 = v15[4];
  NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)(&v14, &v13, (uint64_t)object, options, (uint64_t)v15);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (!v10)
  {
    id v11 = v15[0];
    if (v15[0])
    {
      id v12 = v15[0];
      outlined consume of URL?(v11);
    }
  }

void NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)( void **a1@<X0>, void **a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  char v6 = v5;
  uint64_t v28 = *MEMORY[0x1895F89C0];
  __int128 v9 = *a1;
  id v10 = *a2;
  if (a3) {
    id v11 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    id v11 = 0LL;
  }
  id v25 = 0LL;
  uint64_t v26 = 0LL;
  id v12 = v9;
  id v13 = v10;
  unsigned int v14 = objc_msgSend( v6,  sel__replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_,  v12,  v13,  v11,  a4,  &v26,  &v25);

  id v16 = v25;
  __int128 v15 = v26;
  if (v14)
  {
    if (v26)
    {
      URL.init(reference:)(v26, &v26);
      __int128 v15 = v26;
      __int128 v24 = v27;
      id v17 = v16;
      __int128 v18 = v24;
    }

    else
    {
      id v20 = v25;
      __int128 v18 = 0uLL;
    }

    *(void *)a5 = v15;
    *(_OWORD *)(a5 + 8) = v18;
  }

  else
  {
    if (v25)
    {
      v25;
      id v19 = v15;
    }

    else
    {
      uint64_t v21 = one-time initialization token for _nilObjCError;
      id v22 = v26;
      if (v21 != -1) {
        swift_once();
      }
      id v23 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

id NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void **)a2;
  id v12 = *(void **)a1;
  __int128 v13 = *(_OWORD *)(a1 + 8);
  id v10 = v7;
  __int128 v11 = *(_OWORD *)(a2 + 8);
  NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)(&v12, &v10, a4, a5, (uint64_t)&v14);
  if (!v6)
  {
    id v5 = v14;
    if (v14)
    {
      id v8 = v14;
      outlined consume of URL?(v5);
    }
  }

  return v5;
}

id NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)( void **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  id v10 = a2;
  __int128 v11 = *a1;
  if (a2)
  {
    type metadata accessor for NSURLResourceKey(0LL);
    id v12 = v11;
    swift_bridgeObjectRetain();
    id v10 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }

  else
  {
    id v13 = v11;
  }

  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  v18[4] = partial apply for closure #1 in NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:);
  v18[5] = v14;
  v18[0] = MEMORY[0x1895F87A8];
  v18[1] = 1107296256LL;
  v18[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool);
  v18[3] = &block_descriptor_1;
  __int128 v15 = _Block_copy(v18);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(a4);
  swift_release();
  id v16 = (id)__NSFileManagerEnumeratorAtURL( v6,  (uint64_t)v11,  (uint64_t)v10,  a3,  (uint64_t)v15);
  _Block_release(v15);

  return v16;
}

uint64_t closure #1 in NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)( uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t))
{
  if (a3)
  {
    uint64_t v7 = *a1;
    __int128 v8 = *(_OWORD *)(a1 + 1);
    swift_retain();
    char v5 = a3(&v7, a2);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)a3);
  }

  else
  {
    char v5 = 1;
  }

  return v5 & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool)( uint64_t a1, void *a2, void *a3)
{
  char v5 = *(uint64_t (**)(void **, id))(a1 + 32);
  swift_retain();
  URL.init(reference:)(a2, &v9);
  uint64_t v6 = v9;
  id v7 = a3;
  LOBYTE(a2) = v5(&v9, v7);

  swift_release();
  swift_release();
  swift_release();
  return a2 & 1;
}

uint64_t sub_182FDDC6C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)( uint64_t *a1, uint64_t a2)
{
  return closure #1 in NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)( a1,  a2,  *(uint64_t (**)(uint64_t *, uint64_t))(v2 + 16));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?( uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?( uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(int a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v167 = *MEMORY[0x1895F89C0];
  uint64_t v4 = MEMORY[0x18961AFF0];
  unint64_t v165 = MEMORY[0x18961AFF0];
  uint64_t v162 = specialized Array._getCount()(a2);
  if (!v162) {
    return v4;
  }
  uint64_t v161 = v2 + 32;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0LL;
  uint64_t v155 = 0LL;
  __int128 v156 = xmmword_18372C9F0;
  uint64_t v154 = MEMORY[0x18961AFC8] + 8LL;
  uint64_t v158 = v2;
  int v159 = a1;
  while (1)
  {
    uint64_t v6 = specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v5, 1LL, v2);
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
LABEL_183:
      __break(1u);
      goto LABEL_184;
    }

    __int128 v8 = (uint64_t *)(v161 + 16 * v5);
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    MEMORY[0x1895F8858](v6);
    v147[4] = a1;
    uint64_t v148 = &v165;
    uint64_t v149 = v10;
    uint64_t v150 = v9;
    if ((v9 & 0x1000000000000000LL) != 0) {
      goto LABEL_69;
    }
    if ((v9 & 0x2000000000000000LL) == 0) {
      break;
    }
    *(void *)name = v10;
    *(void *)&name[8] = v9 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v16 = swift_bridgeObjectRetain();
    MEMORY[0x1895F8858](v16);
    ssize_t v17 = fgetxattr(a1, name, v146, 0x3E8uLL, 0, 0);
    if (v17 == -1)
    {
      ssize_t v23 = fgetxattr(a1, name, 0LL, 0LL, 0, 0);
      __int128 v24 = malloc(v23);
      if (!v24) {
        goto LABEL_191;
      }
      id v25 = v24;
      if (fgetxattr(a1, name, v24, v23, 0, 0) == v23)
      {
        uint64_t v163 = &v151;
        unint64_t v160 = v147;
        if (v23)
        {
          type metadata accessor for __DataStorage();
          uint64_t v26 = swift_allocObject();
          if (v23 > 0x3FFFFFFFFFFFFFFELL)
          {
LABEL_187:
            __break(1u);
            goto LABEL_188;
          }

          __int128 v27 = (void *)v26;
          *(void *)(v26 + 32) = v23;
          *(void *)(v26 + 40) = 0LL;
          *(_BYTE *)(v26 + 64) = 0;
          *(void *)(v26 + 16) = v25;
          *(void *)(v26 + 24) = v23;
          *(void *)(v26 + 48) = closure #2 in Data.Deallocator._deallocator.getter;
          *(void *)(v26 + 56) = 0LL;
          swift_bridgeObjectRetain();
          uint64_t v28 = specialized Data._Representation.init(_:count:)(v27, v23);
          unint64_t v157 = v29;
        }

        else
        {
          swift_bridgeObjectRetain();
          free(v25);
          uint64_t v28 = 0LL;
          unint64_t v157 = 0xC000000000000000LL;
        }

        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v69 = v165;
        unint64_t v164 = v165;
        unint64_t v165 = 0x8000000000000000LL;
        unint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
        uint64_t v72 = *(void *)(v69 + 16);
        BOOL v73 = (v70 & 1) == 0;
        uint64_t v74 = v72 + v73;
        if (!__OFADD__(v72, v73))
        {
          char v75 = v70;
          if (*(void *)(v69 + 24) < v74)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v74,  isUniquelyReferenced_nonNull_native);
            unint64_t v76 = v164;
            unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
            if ((v75 & 1) != (v78 & 1)) {
              goto LABEL_197;
            }
            unint64_t v71 = v77;
            if ((v75 & 1) == 0) {
              goto LABEL_66;
            }
            goto LABEL_63;
          }

          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            unint64_t v76 = v69;
            if ((v70 & 1) == 0) {
              goto LABEL_66;
            }
            goto LABEL_63;
          }

          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
          uint64_t v127 = static _DictionaryStorage.copy(original:)();
          unint64_t v76 = v127;
          if (!*(void *)(v69 + 16)) {
            goto LABEL_176;
          }
          uint64_t v128 = (void *)(v127 + 64);
          unint64_t v129 = (unint64_t)((1LL << *(_BYTE *)(v76 + 32)) + 63) >> 6;
          unint64_t v151 = v69 + 64;
          int64_t v130 = 0LL;
          *(void *)(v76 + 16) = *(void *)(v69 + 16);
          uint64_t v131 = 1LL << *(_BYTE *)(v69 + 32);
          if (v131 < 64) {
            uint64_t v132 = ~(-1LL << v131);
          }
          else {
            uint64_t v132 = -1LL;
          }
          unint64_t v133 = v132 & *(void *)(v69 + 64);
          int64_t v152 = (unint64_t)(v131 + 63) >> 6;
          while (1)
          {
            if (v133)
            {
              unint64_t v134 = __clz(__rbit64(v133));
              v133 &= v133 - 1;
              unint64_t v135 = v134 | (v130 << 6);
            }

            else
            {
              BOOL v52 = __OFADD__(v130++, 1LL);
              if (v52) {
                goto LABEL_193;
              }
              if (v130 >= v152) {
                goto LABEL_175;
              }
              unint64_t v143 = *(void *)(v151 + 8 * v130);
              if (!v143)
              {
                int64_t v144 = v130 + 1;
                if (v130 + 1 >= v152) {
                  goto LABEL_175;
                }
                unint64_t v143 = *(void *)(v151 + 8 * v144);
                if (!v143)
                {
                  int64_t v144 = v130 + 2;
                  if (v130 + 2 >= v152) {
                    goto LABEL_175;
                  }
                  unint64_t v143 = *(void *)(v151 + 8 * v144);
                  if (!v143)
                  {
                    int64_t v144 = v130 + 3;
                    if (v130 + 3 >= v152) {
                      goto LABEL_175;
                    }
                    unint64_t v143 = *(void *)(v151 + 8 * v144);
                    if (!v143)
                    {
                      int64_t v144 = v130 + 4;
                      if (v130 + 4 >= v152) {
                        goto LABEL_175;
                      }
                      unint64_t v143 = *(void *)(v151 + 8 * v144);
                      if (!v143)
                      {
                        int64_t v144 = v130 + 5;
                        if (v130 + 5 >= v152) {
                          goto LABEL_175;
                        }
                        unint64_t v143 = *(void *)(v151 + 8 * v144);
                        if (!v143)
                        {
                          int64_t v144 = v130 + 6;
                          if (v130 + 6 >= v152) {
                            goto LABEL_175;
                          }
                          unint64_t v143 = *(void *)(v151 + 8 * v144);
                          if (!v143)
                          {
                            int64_t v144 = v130 + 7;
                            if (v130 + 7 >= v152) {
                              goto LABEL_175;
                            }
                            unint64_t v143 = *(void *)(v151 + 8 * v144);
                            if (!v143)
                            {
                              while (1)
                              {
                                int64_t v130 = v144 + 1;
                                if (__OFADD__(v144, 1LL)) {
                                  goto LABEL_196;
                                }
                                if (v130 >= v152) {
                                  break;
                                }
                                unint64_t v143 = *(void *)(v151 + 8 * v130);
                                ++v144;
                                if (v143) {
                                  goto LABEL_170;
                                }
                              }

LABEL_175:
                              uint64_t v2 = v158;
LABEL_176:
                              swift_bridgeObjectRelease();
                              if ((v75 & 1) == 0)
                              {
LABEL_66:
                                *(void *)(v76 + 8 * (v71 >> 6) + 64) |= 1LL << v71;
                                uint64_t v81 = (uint64_t *)(*(void *)(v76 + 48) + 16 * v71);
                                *uint64_t v81 = v10;
                                v81[1] = v9;
                                uint64_t v82 = (uint64_t *)(*(void *)(v76 + 56) + 16 * v71);
                                unint64_t v83 = v157;
                                *uint64_t v82 = v28;
                                v82[1] = v83;
                                uint64_t v84 = *(void *)(v76 + 16);
                                BOOL v52 = __OFADD__(v84, 1LL);
                                uint64_t v85 = v84 + 1;
                                if (!v52)
                                {
                                  *(void *)(v76 + 16) = v85;
                                  swift_bridgeObjectRetain();
                                  goto LABEL_68;
                                }

          v444 = v100;
          swift_retain_n();
          uint64_t v207 = v10;
          swift_retain_n();
          char v208 = v207;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_379;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          char v209 = (int)POSIXErrorCode.rawValue.getter();
          unint64_t v210 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          unint64_t v211 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          int64_t v212 = objc_msgSend(v210, sel_initWithDomain_code_userInfo_, v211, v209, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v446 = (uint64_t)v212;
          unint64_t v213 = objc_msgSend(v212, sel_domain);
          uint64_t v214 = static String._unconditionallyBridgeFromObjectiveC(_:)(v213);
          uint64_t v216 = v215;

          if (v214 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v216 == v217)
          {
            swift_bridgeObjectRelease_n();
LABEL_180:
            uint64_t v10 = v447;
            ssize_t v12 = v448;
LABEL_181:
            unint64_t v219 = v10;
            swift_retain();
            swift_retain();
            if (!_foundation_swift_url_feature_enabled())
            {
              unint64_t v232 = objc_msgSend(v219, sel__parameterString);
              if (v232)
              {
                unint64_t v233 = v232;
                unint64_t v234 = static String._unconditionallyBridgeFromObjectiveC(_:)(v232);
                uint64_t v236 = v235;

                uint64_t v237 = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
                id v238 = (id)v446;
                if (v237 && (int64_t v239 = objc_msgSend(v219, sel_path)) != 0)
                {
                  uint64_t v240 = v239;
                  unint64_t v241 = static String._unconditionallyBridgeFromObjectiveC(_:)(v239);
                  id v243 = v242;

                  *(void *)&v455.f_bsize = v241;
                  v455.f_blocks = v243;
                  swift_bridgeObjectRetain();
                  v244._uint64_t countAndFlagsBits = 59LL;
                  v244._object = (void *)0xE100000000000000LL;
                  String.append(_:)(v244);
                  id v238 = (id)v446;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  v245._uint64_t countAndFlagsBits = (uint64_t)v234;
                  v245._object = v236;
                  String.append(_:)(v245);
                  swift_bridgeObjectRelease();
                }

                else
                {
                  *(void *)&v455.f_bsize = 59LL;
                  v455.f_blocks = 0xE100000000000000LL;
                  v246._uint64_t countAndFlagsBits = (uint64_t)v234;
                  v246._object = v236;
                  String.append(_:)(v246);
                }

                swift_bridgeObjectRelease();
                v247 = v448;
                outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
              }

              else
              {
                v248 = objc_msgSend(v219, sel_path);
                id v238 = (id)v446;
                if (v248)
                {
                  v249 = v248;
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v248);
                  v247 = v12;

                  outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
                }

                else
                {
                  outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
                  v247 = v12;
                }
              }

              goto LABEL_217;
            }

            *(void *)&v455.f_bsize = v219;
            v455.f_blocks = v11;
            v455.f_bfree = (uint64_t)v12;
            uint64_t v220 = v219;
            swift_retain();
            swift_retain();
            uint64_t v221 = URL.path(percentEncoded:)(1);
            *(void *)&v455.f_bsize = v221._countAndFlagsBits;
            v455.f_blocks = (uint64_t)v221._object;
            swift_bridgeObjectRetain();
            if (String.count.getter() > 1
              && (specialized BidirectionalCollection.last.getter( v221._countAndFlagsBits,  (unint64_t)v221._object) & 0x1FF) == 0x2F)
            {
              specialized RangeReplaceableCollection<>.popLast()();
              swift_bridgeObjectRelease();
            }

            v453._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
            uint64_t v222 = specialized Set._Variant.insert(_:)(&v450, 0x2FuLL);
            uint64_t v223 = v453._countAndFlagsBits;
            uint64_t v224 = *(void *)&v455.f_bsize;
            unint64_t v225 = v455.f_blocks;
            unint64_t v226 = HIBYTE(v455.f_blocks) & 0xF;
            if ((v455.f_blocks & 0x2000000000000000LL) == 0) {
              unint64_t v226 = *(void *)&v455.f_bsize & 0xFFFFFFFFFFFFLL;
            }
            if (v226)
            {
              v445 = (id)v11;
              v453._uint64_t countAndFlagsBits = *(void *)&v455.f_bsize;
              v453._object = (void *)v455.f_blocks;
              MEMORY[0x1895F8858](v222);
              v435 = (uint64_t)&v453;
              v436 = v223;
              swift_bridgeObjectRetain();
              specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v434,  v224,  v225);
              if (v227 == 1)
              {
                unint64_t v228 = v453._countAndFlagsBits;
                unint64_t v229 = v453._object;
                swift_bridgeObjectRetain();
                specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v228,  (unint64_t)v229,  v223);
                unint64_t v231 = v230;
                swift_bridgeObjectRelease();
              }

              else
              {
                unint64_t v231 = v227;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v11 = (uint64_t)v445;
              id v238 = (id)v446;
              uint64_t v10 = v447;
              if (!v231)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v261 = v448;
                outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
                outlined consume of PathOrURL(v10, v11, (uint64_t)v261, 1);
                goto LABEL_216;
              }

              v445 = v219;
            }

            else
            {
              v445 = v219;
              swift_bridgeObjectRelease();
              id v238 = (id)v446;
              uint64_t v10 = v447;
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v250 = v448;
            outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
            outlined consume of PathOrURL(v10, v11, (uint64_t)v250, 1);
            unint64_t v219 = v445;
LABEL_216:
            v247 = v448;
LABEL_217:
            char v262 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            char v263 = v219;
            outlined consume of PathOrURL(v10, v11, (uint64_t)v247, 1);
            if (v238)
            {
              *(void *)&v455.f_bsize = v238;
              lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
              char v264 = v238;
              if (_getErrorEmbeddedNSError<A>(_:)())
              {
              }

              else
              {
                swift_allocError();
                *unint64_t v266 = v264;
              }

              v446 = (uint64_t)v264;
              char v265 = (void *)_swift_stdlib_bridgeErrorToNSError();
            }

            else
            {
              char v265 = 0LL;
            }

             objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v444,  v262,  v263,  v265,  0,  0,  0);

            swift_unknownObjectRelease();
            unint64_t v267 = v10;
            v268 = v11;
            v269 = v247;
            goto LABEL_224;
          }

          unint64_t v218 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v218 & 1) != 0) {
            goto LABEL_180;
          }
          __break(1u);
          break;
      }

      goto LABEL_371;
    }

    __int128 v122 = 263LL;
    switch(v98)
    {
      case 1:
      case 13:
        __int128 v122 = 257LL;
        goto LABEL_204;
      case 2:
        __int128 v122 = 260LL;
        goto LABEL_204;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_146;
      case 27:
        goto LABEL_204;
      default:
        if (v98 == 63)
        {
          __int128 v122 = 258LL;
        }

        else
        {
          if (v98 == 102)
          {
            uint64_t v142 = 0LL;
            __int128 v122 = 256LL;
            goto LABEL_210;
          }

      char v70 = v333;
      goto LABEL_176;
    }

LABEL_188:
                                __break(1u);
LABEL_189:
                                __break(1u);
LABEL_190:
                                __break(1u);
LABEL_191:
                                __break(1u);
LABEL_192:
                                __break(1u);
LABEL_193:
                                __break(1u);
                              }

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v26 = v53 & 0xFFFFFFFFFFFFF0FFLL | (v97 << 8);
      }

      else
      {
        uint64_t v26 = ((-15LL << ((4 * v53 + 8) & 0x3C)) - 1) & v53 | ((unint64_t)*(unsigned __int16 *)(v49 + 16) << ((4 * v53 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v9 = 0LL;
        unint64_t v45 = 0LL;
      }

      swift_unknownObjectRetain();
      unint64_t v46 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v73, v26, v45, v49, v57);
      uint64_t result = swift_unknownObjectRelease_n();
      char v47 = v153;
      uint64_t v48 = v153 - v9;
      if (__OFSUB__(v153, v9)) {
        goto LABEL_351;
      }
LABEL_171:
      *(void *)&unint64_t v164 = v73;
      *((void *)&v164 + 1) = v26;
      *(void *)&unint64_t v165 = v45;
      *((void *)&v165 + 1) = v46;
      *(void *)&unint64_t v166 = v48;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v3 = v156;
      specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v164,  0LL,  v47,  v156,  v157,  v4,  v152,  (uint64_t)&v161);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      char v44 = v166;
      uint64_t v43 = -15LL;
    }

    if (*(_BYTE *)(v49 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t v9 = 0LL;
      char v57 = v49;
      while (1)
      {
        uint64_t v59 = *(unsigned __int16 *)(v57 + 16);
        if (*(_WORD *)(v57 + 16))
        {
          BOOL v60 = *(void *)(v57 + 40);
          unint64_t v32 = __OFSUB__(v9, v60);
          unint64_t v56 = v9 - v60;
          if (v32) {
            goto LABEL_324;
          }
          if (__OFADD__(v56, 1LL))
          {
LABEL_325:
            __break(1u);
LABEL_326:
            uint64_t v127 = v56;
            unint64_t v116 = v59;
            goto LABEL_262;
          }

          if (v56 + 1 < 1)
          {
            uint64_t v59 = 0LL;
            goto LABEL_92;
          }

          if ((_DWORD)v59 != 1)
          {
            uint64_t v61 = (uint64_t *)(v57 + 64);
            char v62 = 1LL;
            while (1)
            {
              unint64_t v63 = *v61;
              v61 += 3;
              uint64_t v9 = v56 - v63;
              if (__OFSUB__(v56, v63)) {
                goto LABEL_246;
              }
              if (__OFADD__(v9, 1LL)) {
                break;
              }
              if (v9 + 1 < 1)
              {
                uint64_t v59 = v62;
                uint64_t v9 = v56;
                goto LABEL_92;
              }

              ++v62;
              unint64_t v56 = v9;
              if (v59 == v62) {
                goto LABEL_91;
              }
            }

    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    __break(1u);
    goto LABEL_197;
  }

  int64_t v182 = v19;
  __int128 v153 = v7;
  uint64_t v155 = result >> 11;
  __int128 v156 = *(void *)&v217[0];
  unint64_t v20 = *(unsigned __int8 *)(v14 + 18);
  if (*(_BYTE *)(v14 + 18))
  {
    swift_unknownObjectRetain_n();
    uint64_t result = outlined retain of AttributedString.Runs((uint64_t)v217);
    uint64_t v21 = v18;
    unint64_t v22 = v14;
    while (1)
    {
      id v25 = *(unsigned __int16 *)(v22 + 16);
      if (!*(_WORD *)(v22 + 16)) {
        goto LABEL_15;
      }
      uint64_t v26 = *(void *)(v22 + 40);
      __int128 v27 = v21 - v26;
      if (__OFSUB__(v21, v26)) {
        goto LABEL_193;
      }
      if (__OFADD__(v27, 1LL)) {
        goto LABEL_194;
      }
      if (v27 + 1 <= 0)
      {
        id v25 = 0LL;
      }

      else
      {
        if ((_DWORD)v25 == 1)
        {
          v21 -= v26;
          goto LABEL_15;
        }

        uint64_t v28 = *(void *)(v22 + 64);
        unint64_t v29 = __OFSUB__(v27, v28);
        ssize_t v30 = v27 - v28;
        if (v29) {
          goto LABEL_195;
        }
        if (__OFADD__(v30, 1LL)) {
          goto LABEL_196;
        }
        if (v30 + 1 < 1)
        {
          id v25 = 1LL;
          uint64_t v21 = v27;
        }

        else
        {
          if ((_DWORD)v25 == 2)
          {
            uint64_t v21 = v30;
LABEL_15:
            if (v21) {
              goto LABEL_192;
            }
            goto LABEL_16;
          }

          uint64_t v31 = (void *)(v22 + 88);
          unint64_t v32 = 2LL;
          while (1)
          {
            if (v25 == v32) {
              goto LABEL_189;
            }
            uint64_t v21 = v30 - *v31;
            if (__OFSUB__(v30, *v31)) {
              goto LABEL_190;
            }
            if (__OFADD__(v21, 1LL)) {
              goto LABEL_191;
            }
            if (v21 + 1 < 1) {
              break;
            }
            ++v32;
            v31 += 3;
            ssize_t v30 = v21;
            if (v25 == v32) {
              goto LABEL_15;
            }
          }

          id v25 = v32;
          uint64_t v21 = v30;
        }
      }

LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

                      swift_bridgeObjectRelease();
                      a1 = v210;
                      a2 = v212;
                      uint64_t v7 = v145;
                      if ((v220 & 1) != 0) {
                        goto LABEL_107;
                      }
LABEL_196:
                      *(void *)(v7 + 8 * (v90 >> 6) + 64) |= 1LL << v90;
                      unint64_t v165 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v90);
                      *unint64_t v165 = v222;
                      v165[1] = v87;
                      unint64_t v166 = (uint64_t *)(*(void *)(v7 + 56) + 16 * v90);
                      *unint64_t v166 = v27;
                      v166[1] = v26;
                      uint64_t v167 = *(void *)(v7 + 16);
                      BOOL v60 = __OFADD__(v167, 1LL);
                      unint64_t v168 = v167 + 1;
                      if (v60) {
                        goto LABEL_263;
                      }
                      *(void *)(v7 + 16) = v168;
                      swift_bridgeObjectRetain();
LABEL_198:
                      uint64_t v4 = &unk_18C5D1000;
                      __int128 v8 = v19 + 1;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      __int128 v169 = swift_conformsToProtocol2();
                      if (v169) {
                        __int128 v170 = v169;
                      }
                      else {
                        __int128 v170 = 0LL;
                      }
                      if (!v169) {
                        __int128 v27 = 0LL;
                      }
                      if (v27)
                      {
                        uint64_t v216 = v7;
                        uint64_t v214 = v19;
                        __int128 v171 = (*(uint64_t (**)(uint64_t, uint64_t))(v170 + 24))(v27, v170);
                        uint64_t v173 = v172;
                        unint64_t v174 = swift_isUniquelyReferenced_nonNull_native();
                        *(void *)&unint64_t v227 = v225;
                        unint64_t v176 = specialized __RawDictionaryStorage.find<A>(_:)(v171, v173);
                        uint64_t v177 = *(void *)(v225 + 16);
                        uint64_t v178 = (v175 & 1) == 0;
                        unint64_t v179 = v177 + v178;
                        if (__OFADD__(v177, v178)) {
                          goto LABEL_266;
                        }
                        if (*(void *)(v225 + 24) < v179)
                        {
                          uint64_t v223 = v175;
                          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v179, v174);
                          uint64_t v121 = v227;
                          uint64_t v180 = specialized __RawDictionaryStorage.find<A>(_:)(v171, v173);
                          if ((v223 & 1) != (v181 & 1)) {
                            goto LABEL_272;
                          }
                          unint64_t v176 = v180;
                          if ((v223 & 1) == 0) {
                            goto LABEL_211;
                          }
                          goto LABEL_208;
                        }

                        if ((v174 & 1) != 0)
                        {
                          uint64_t v121 = v225;
                          if ((v175 & 1) == 0) {
                            goto LABEL_211;
                          }
                          goto LABEL_208;
                        }

                        uint64_t v224 = v175;
                        uint64_t v221 = v171;
                        unint64_t v213 = a2;
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
                        unint64_t v187 = static _DictionaryStorage.copy(original:)();
                        uint64_t v121 = v187;
                        if (!*(void *)(v225 + 16)) {
                          goto LABEL_248;
                        }
                        uint64_t result = (void *)(v187 + 64);
                        unint64_t v188 = v225 + 64;
                        unint64_t v189 = (unint64_t)((1LL << *(_BYTE *)(v121 + 32)) + 63) >> 6;
                        uint64_t v190 = 0LL;
                        *(void *)(v121 + 16) = *(void *)(v225 + 16);
                        unint64_t v191 = 1LL << *(_BYTE *)(v225 + 32);
                        if (v191 < 64) {
                          unint64_t v192 = ~(-1LL << v191);
                        }
                        else {
                          unint64_t v192 = -1LL;
                        }
                        uint64_t v193 = v192 & *(void *)(v225 + 64);
                        unint64_t v194 = (unint64_t)(v191 + 63) >> 6;
                        while (2)
                        {
                          if (v193)
                          {
                            unint64_t v195 = __clz(__rbit64(v193));
                            v193 &= v193 - 1;
                            unint64_t v196 = v195 | (v190 << 6);
LABEL_223:
                            uint64_t v197 = 16 * v196;
                            char v198 = (uint64_t *)(*(void *)(v225 + 48) + v197);
                            char v200 = *v198;
                            char v199 = v198[1];
                            char v201 = *(_OWORD *)(*(void *)(v225 + 56) + v197);
                            char v202 = (void *)(*(void *)(v121 + 48) + v197);
                            *char v202 = v200;
                            v202[1] = v199;
                            *(_OWORD *)(*(void *)(v121 + 56) + v197) = v201;
                            uint64_t result = (void *)swift_bridgeObjectRetain();
                            continue;
                          }

                          break;
                        }

                        BOOL v60 = __OFADD__(v190++, 1LL);
                        if (v60) {
                          goto LABEL_271;
                        }
                        if (v190 >= v194) {
                          goto LABEL_248;
                        }
                        char v203 = *(void *)(v188 + 8 * v190);
                        if (v203)
                        {
LABEL_243:
                          uint64_t v193 = (v203 - 1) & v203;
                          unint64_t v196 = __clz(__rbit64(v203)) + (v190 << 6);
                          goto LABEL_223;
                        }

                        char v204 = v190 + 1;
                        if (v190 + 1 >= v194) {
                          goto LABEL_248;
                        }
                        char v203 = *(void *)(v188 + 8 * v204);
                        if (v203) {
                          goto LABEL_242;
                        }
                        char v204 = v190 + 2;
                        if (v190 + 2 >= v194) {
                          goto LABEL_248;
                        }
                        char v203 = *(void *)(v188 + 8 * v204);
                        if (v203) {
                          goto LABEL_242;
                        }
                        char v204 = v190 + 3;
                        if (v190 + 3 >= v194) {
                          goto LABEL_248;
                        }
                        char v203 = *(void *)(v188 + 8 * v204);
                        if (v203) {
                          goto LABEL_242;
                        }
                        char v204 = v190 + 4;
                        if (v190 + 4 >= v194) {
                          goto LABEL_248;
                        }
                        char v203 = *(void *)(v188 + 8 * v204);
                        if (v203) {
                          goto LABEL_242;
                        }
                        char v204 = v190 + 5;
                        if (v190 + 5 >= v194) {
                          goto LABEL_248;
                        }
                        char v203 = *(void *)(v188 + 8 * v204);
                        if (v203) {
                          goto LABEL_242;
                        }
                        char v204 = v190 + 6;
                        if (v190 + 6 >= v194) {
                          goto LABEL_248;
                        }
                        char v203 = *(void *)(v188 + 8 * v204);
                        if (v203) {
                          goto LABEL_242;
                        }
                        char v204 = v190 + 7;
                        if (v190 + 7 >= v194) {
                          goto LABEL_248;
                        }
                        char v203 = *(void *)(v188 + 8 * v204);
                        if (v203)
                        {
LABEL_242:
                          uint64_t v190 = v204;
                          goto LABEL_243;
                        }

                        while (1)
                        {
                          uint64_t v190 = v204 + 1;
                          if (__OFADD__(v204, 1LL)) {
                            goto LABEL_274;
                          }
                          if (v190 >= v194) {
                            break;
                          }
                          char v203 = *(void *)(v188 + 8 * v190);
                          ++v204;
                          if (v203) {
                            goto LABEL_243;
                          }
                        }

void closure #1 in readExtendedAttributesFromFileDescriptor(_:attrsToRead:)( char *name, int fd, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  closure #1 in closure #1 in readExtendedAttributesFromFileDescriptor(_:attrsToRead:)( v6,  1000,  fd,  name,  0x3E8uLL,  a3,  a4,  a5);
  if (v5)
  {
    swift_willThrow();
    __break(1u);
  }

void closure #1 in closure #1 in readExtendedAttributesFromFileDescriptor(_:attrsToRead:)( _BYTE *value, int a2, int fd, char *name, size_t size, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  ssize_t v14 = fgetxattr(fd, name, value, size, 0, 0);
  if (v14 == -1)
  {
    ssize_t v28 = fgetxattr(fd, name, 0LL, 0LL, 0, 0);
    unint64_t v29 = malloc(v28);
    if (v29)
    {
      ssize_t v30 = v29;
      if (fgetxattr(fd, name, v29, v28, 0, 0) != v28)
      {
        free(v30);
        return;
      }

      if (v28)
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        swift_bridgeObjectRetain();
        uint64_t v31 = (void *)__DataStorage.init(bytes:length:copy:deallocator:offset:)( (unint64_t)v30,  v28,  0,  (void (*)(unint64_t, uint64_t))closure #2 in Data.Deallocator._deallocator.getter,  0LL,  0LL);
        uint64_t v96 = specialized Data._Representation.init(_:count:)(v31, v28);
        unint64_t v33 = v32;
      }

      else
      {
        swift_bridgeObjectRetain();
        free(v30);
        uint64_t v96 = 0LL;
        unint64_t v33 = 0xC000000000000000LL;
      }

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v98 = *a6;
      uint64_t v36 = *a6;
      *a6 = 0x8000000000000000LL;
      uint64_t v37 = a7;
      unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(a7, a8);
      uint64_t v40 = *(void *)(v36 + 16);
      BOOL v41 = (v38 & 1) == 0;
      uint64_t v42 = v40 + v41;
      if (__OFADD__(v40, v41))
      {
        __break(1u);
      }

      else
      {
        LOBYTE(a7) = v38;
        if (*(void *)(v36 + 24) < v42)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v42,  isUniquelyReferenced_nonNull_native);
          uint64_t v25 = v98;
          unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v37, a8);
          if ((a7 & 1) != (v44 & 1)) {
            goto LABEL_105;
          }
          unint64_t v39 = v43;
          uint64_t v45 = v96;
          if ((a7 & 1) == 0) {
            goto LABEL_98;
          }
          goto LABEL_25;
        }

        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          uint64_t v25 = v36;
          uint64_t v45 = v96;
          if ((v38 & 1) == 0) {
            goto LABEL_98;
          }
          goto LABEL_25;
        }
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
      uint64_t v70 = static _DictionaryStorage.copy(original:)();
      uint64_t v25 = v70;
      if (!*(void *)(v36 + 16)) {
        goto LABEL_97;
      }
      unint64_t v71 = (char *)(v70 + 64);
      __srca = (char *)(v36 + 64);
      unint64_t v72 = (unint64_t)((1LL << *(_BYTE *)(v25 + 32)) + 63) >> 6;
      if (v25 != v36 || v71 >= &__srca[8 * v72]) {
        memmove(v71, __srca, 8 * v72);
      }
      int64_t v92 = 0LL;
      *(void *)(v25 + 16) = *(void *)(v36 + 16);
      uint64_t v73 = 1LL << *(_BYTE *)(v36 + 32);
      uint64_t v74 = -1LL;
      if (v73 < 64) {
        uint64_t v74 = ~(-1LL << v73);
      }
      unint64_t v75 = v74 & *(void *)(v36 + 64);
      int64_t v88 = (unint64_t)(v73 + 63) >> 6;
      while (1)
      {
        if (v75)
        {
          unint64_t v76 = __clz(__rbit64(v75));
          v75 &= v75 - 1;
          unint64_t v77 = v76 | (v92 << 6);
        }

        else
        {
          int64_t v83 = v92 + 1;
          if (__OFADD__(v92, 1LL)) {
            goto LABEL_102;
          }
          if (v83 >= v88) {
            goto LABEL_97;
          }
          unint64_t v84 = *(void *)&__srca[8 * v83];
          int64_t v85 = v92 + 1;
          if (!v84)
          {
            int64_t v85 = v92 + 2;
            if (v92 + 2 >= v88) {
              goto LABEL_97;
            }
            unint64_t v84 = *(void *)&__srca[8 * v85];
            if (!v84)
            {
              int64_t v85 = v92 + 3;
              if (v92 + 3 >= v88) {
                goto LABEL_97;
              }
              unint64_t v84 = *(void *)&__srca[8 * v85];
              if (!v84)
              {
                int64_t v85 = v92 + 4;
                if (v92 + 4 >= v88) {
                  goto LABEL_97;
                }
                unint64_t v84 = *(void *)&__srca[8 * v85];
                if (!v84)
                {
                  int64_t v85 = v92 + 5;
                  if (v92 + 5 >= v88) {
                    goto LABEL_97;
                  }
                  unint64_t v84 = *(void *)&__srca[8 * v85];
                  if (!v84)
                  {
                    int64_t v85 = v92 + 6;
                    if (v92 + 6 >= v88) {
                      goto LABEL_97;
                    }
                    unint64_t v84 = *(void *)&__srca[8 * v85];
                    if (!v84)
                    {
                      int64_t v85 = v92 + 7;
                      if (v92 + 7 >= v88) {
                        goto LABEL_97;
                      }
                      unint64_t v84 = *(void *)&__srca[8 * v85];
                      if (!v84)
                      {
                        int64_t v86 = v92 + 8;
                        if (v92 + 8 >= v88) {
                          goto LABEL_97;
                        }
                        unint64_t v84 = *(void *)&__srca[8 * v86];
                        if (!v84)
                        {
                          while (1)
                          {
                            int64_t v85 = v86 + 1;
                            if (__OFADD__(v86, 1LL)) {
                              goto LABEL_104;
                            }
                            if (v85 >= v88) {
                              break;
                            }
                            unint64_t v84 = *(void *)&__srca[8 * v85];
                            ++v86;
                            if (v84) {
                              goto LABEL_96;
                            }
                          }

uint64_t readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)@<X0>( uint64_t a1@<X0>, int a2@<W1>, off_t a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, char **a8@<X8>)
{
  uint64_t v9 = v8;
  uint64_t v440 = a6;
  v441 = a8;
  id v445 = a5;
  LODWORD(v444) = a4;
  off_t v443 = a3;
  int v442 = a2;
  uint64_t v456 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *(void **)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  ssize_t v12 = *(uint64_t (**)(void))(a1 + 16);
  int v13 = *(unsigned __int8 *)(a1 + 24);
  v439 = a7;
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v19 = (uint64_t)v10;
    uint64_t f_blocks = v11;
    goto LABEL_28;
  }

  swift_retain_n();
  id v14 = v10;
  swift_retain_n();
  uint64_t v15 = (void **)v14;
  id v449 = (id)v9;
  if ((_foundation_swift_url_feature_enabled() & 1) == 0)
  {
    id v21 = objc_msgSend(v15, sel__parameterString);
    if (v21)
    {
      uint64_t v22 = v21;
      id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      uint64_t v25 = v24;

      if (!getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        || (id v26 = objc_msgSend(v15, sel_path)) == 0)
      {
        *(void *)&v455.f_bsize = 59LL;
        v455.uint64_t f_blocks = 0xE100000000000000LL;
        v44._uint64_t countAndFlagsBits = (uint64_t)v23;
        v44.___darwin_ino64_t object = v25;
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        uint64_t v19 = 59LL;
        uint64_t f_blocks = 0xE100000000000000LL;
        goto LABEL_26;
      }

      char v27 = v26;
      v447 = v10;
      v448 = v12;
      id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v29 = v11;
      int v30 = v13;
      uint64_t v32 = v31;

      *(void *)&v455.f_bsize = v28;
      v455.uint64_t f_blocks = v32;
      swift_bridgeObjectRetain();
      v33._uint64_t countAndFlagsBits = 59LL;
      v33.___darwin_ino64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v33);
      int v13 = v30;
      uint64_t v11 = v29;
      uint64_t v10 = v447;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v34._uint64_t countAndFlagsBits = (uint64_t)v23;
      v34.___darwin_ino64_t object = v25;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      ssize_t v12 = v448;
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v447, v11, (uint64_t)v448, 1);
      uint64_t v19 = *(void *)&v455.f_bsize;
      uint64_t f_blocks = v455.f_blocks;
    }

    else
    {
      id v45 = objc_msgSend(v15, sel_path);
      if (!v45)
      {
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        swift_release();
        swift_release();

        uint64_t v19 = 0LL;
        uint64_t f_blocks = 0xE000000000000000LL;
        goto LABEL_27;
      }

      uint64_t v46 = v45;
      uint64_t v19 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      uint64_t f_blocks = v47;

      outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
    }

    outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
    goto LABEL_26;
  }

  v455.f_bfree = (uint64_t)v12;
  uint64_t v15 = v15;
  swift_retain();
  v448 = v12;
  swift_retain();
  Swift::String v16 = URL.path(percentEncoded:)(1);
  uint64_t countAndFlagsBits = v16._countAndFlagsBits;
  *(void *)&v455.f_bsize = v16._countAndFlagsBits;
  v455.uint64_t f_blocks = (uint64_t)v16._object;
  swift_bridgeObjectRetain();
  v447 = v10;
  LODWORD(v446) = v13;
  if (String.count.getter() <= 1)
  {
    __darwin_ino64_t object = (__darwin_ino64_t)v16._object;
  }

  else
  {
    __darwin_ino64_t object = (__darwin_ino64_t)v16._object;
    if ((specialized BidirectionalCollection.last.getter(v16._countAndFlagsBits, (unint64_t)v16._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = *(void *)&v455.f_bsize;
      __darwin_ino64_t object = v455.f_blocks;
    }
  }

  *(void *)&v452.st_dev = Set.init(minimumCapacity:)();
  uint64_t v35 = specialized Set._Variant.insert(_:)(&v453, 0x2FuLL);
  uint64_t v36 = *(void *)&v452.st_dev;
  uint64_t v37 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000LL) == 0) {
    uint64_t v37 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v37)
  {
    v438 = v15;
    *(void *)&v452.st_dev = countAndFlagsBits;
    v452.__darwin_ino64_t st_ino = object;
    MEMORY[0x1895F8858](v35);
    uint64_t v435 = (uint64_t)&v452;
    uint64_t v436 = v36;
    swift_bridgeObjectRetain();
    id v38 = v449;
    unint64_t v39 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v434,  countAndFlagsBits,  object);
    id v449 = v38;
    if (v40 == 1)
    {
      Swift::Int v41 = *(void *)&v452.st_dev;
      __darwin_ino64_t st_ino = v452.st_ino;
      swift_bridgeObjectRetain();
      uint64_t v19 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v41, st_ino, v36);
      uint64_t f_blocks = v43;
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v19 = (uint64_t)v39;
      uint64_t f_blocks = v40;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v13 = v446;
    uint64_t v10 = v447;
    uint64_t v15 = v438;
    if (!f_blocks)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ssize_t v12 = v448;
      outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
      outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
      swift_release();
      swift_release();

      uint64_t v19 = 0LL;
      uint64_t f_blocks = 0xE000000000000000LL;
      goto LABEL_26;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = 0LL;
    uint64_t f_blocks = 0xE000000000000000LL;
    uint64_t v10 = v447;
    int v13 = v446;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ssize_t v12 = v448;
  outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
  outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
  swift_release();
  swift_release();

LABEL_26:
  swift_release();
  swift_release();

LABEL_27:
  uint64_t v9 = (uint64_t)v449;
LABEL_28:
  swift_bridgeObjectRelease();
  outlined consume of PathOrURL(v10, v11, (uint64_t)v12, v13);
  uint64_t v48 = HIBYTE(f_blocks) & 0xF;
  if ((f_blocks & 0x2000000000000000LL) == 0) {
    uint64_t v48 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (!v48)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v67 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v68 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v69 = objc_msgSend(v67, sel_initWithDomain_code_userInfo_, v68, 258, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    ssize_t v12 = (uint64_t (*)(void))objc_msgSend(v69, sel_domain);
    id v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v72 = v71;

    if (v70 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v72 == v73)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      uint64_t v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0)
      {
        __break(1u);
        goto LABEL_47;
      }
    }

    return swift_willThrow();
  }

  LODWORD(v446) = v13;
  if ((v13 & 1) == 0)
  {
LABEL_47:
    swift_bridgeObjectRetain();
    id v64 = v10;
    uint64_t v66 = v11;
    goto LABEL_65;
  }

  swift_retain_n();
  id v49 = v10;
  swift_retain_n();
  id v50 = v49;
  char v51 = _foundation_swift_url_feature_enabled();
  id v449 = (id)v9;
  if ((v51 & 1) == 0)
  {
    id v76 = objc_msgSend(v50, sel__parameterString);
    if (v76)
    {
      unint64_t v77 = v76;
      id v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
      uint64_t v80 = v79;

      if (!getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        || (id v81 = objc_msgSend(v50, sel_path)) == 0)
      {
        *(void *)&v455.f_bsize = 59LL;
        v455.uint64_t f_blocks = 0xE100000000000000LL;
        v89._uint64_t countAndFlagsBits = (uint64_t)v78;
        v89.___darwin_ino64_t object = v80;
        String.append(_:)(v89);
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        id v64 = *(id *)&v455.f_bsize;
        uint64_t v66 = v455.f_blocks;
        goto LABEL_63;
      }

      uint64_t v82 = v81;
      id v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v448 = v12;
      id v84 = v83;
      uint64_t v86 = v85;

      *(void *)&v455.f_bsize = v84;
      v455.uint64_t f_blocks = v86;
      swift_bridgeObjectRetain();
      v87._uint64_t countAndFlagsBits = 59LL;
      v87.___darwin_ino64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v87);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v88._uint64_t countAndFlagsBits = (uint64_t)v78;
      v88.___darwin_ino64_t object = v80;
      String.append(_:)(v88);
      swift_bridgeObjectRelease();
      ssize_t v12 = v448;
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
      id v64 = *(id *)&v455.f_bsize;
      uint64_t v66 = v455.f_blocks;
    }

    else
    {
      id v90 = objc_msgSend(v50, sel_path);
      if (!v90)
      {
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
        swift_release();
        swift_release();

        id v64 = 0LL;
        uint64_t v66 = 0xE000000000000000LL;
        goto LABEL_64;
      }

      __int128 v91 = v90;
      id v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
      uint64_t v66 = v92;

      outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
    }

    outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
    goto LABEL_63;
  }

  v447 = v10;
  *(void *)&v455.f_bsize = v50;
  v455.uint64_t f_blocks = v11;
  v455.f_bfree = (uint64_t)v12;
  id v50 = v50;
  swift_retain();
  v448 = v12;
  swift_retain();
  Swift::String v52 = URL.path(percentEncoded:)(1);
  *(void *)&v455.f_bsize = v52._countAndFlagsBits;
  v455.uint64_t f_blocks = (uint64_t)v52._object;
  swift_bridgeObjectRetain();
  if (String.count.getter() > 1
    && (specialized BidirectionalCollection.last.getter(v52._countAndFlagsBits, (unint64_t)v52._object) & 0x1FF) == 0x2F)
  {
    specialized RangeReplaceableCollection<>.popLast()();
    swift_bridgeObjectRelease();
  }

  *(void *)&v452.st_dev = Set.init(minimumCapacity:)();
  uint64_t v53 = specialized Set._Variant.insert(_:)(&v453, 0x2FuLL);
  uint64_t v54 = *(void *)&v452.st_dev;
  uint64_t v55 = *(void *)&v455.f_bsize;
  uint64_t v56 = v455.f_blocks;
  uint64_t v57 = HIBYTE(v455.f_blocks) & 0xF;
  if ((v455.f_blocks & 0x2000000000000000LL) == 0) {
    uint64_t v57 = *(void *)&v455.f_bsize & 0xFFFFFFFFFFFFLL;
  }
  if (v57)
  {
    *(void *)&v452.st_dev = *(void *)&v455.f_bsize;
    v452.__darwin_ino64_t st_ino = v455.f_blocks;
    MEMORY[0x1895F8858](v53);
    uint64_t v435 = (uint64_t)&v452;
    uint64_t v436 = v54;
    swift_bridgeObjectRetain();
    uint64_t v58 = v55;
    id v59 = v449;
    BOOL v60 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v434,  v58,  v56);
    id v449 = v59;
    if (v61 == 1)
    {
      Swift::Int v62 = *(void *)&v452.st_dev;
      __darwin_ino64_t v63 = v452.st_ino;
      swift_bridgeObjectRetain();
      id v64 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v62, v63, v54);
      uint64_t v66 = v65;
      swift_bridgeObjectRelease();
    }

    else
    {
      id v64 = v60;
      uint64_t v66 = v61;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = v447;
    if (!v66)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ssize_t v12 = v448;
      outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
      outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
      swift_release();
      swift_release();

      id v64 = 0LL;
      uint64_t v66 = 0xE000000000000000LL;
      goto LABEL_63;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    id v64 = 0LL;
    uint64_t v66 = 0xE000000000000000LL;
    uint64_t v10 = v447;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ssize_t v12 = v448;
  outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
  outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
  swift_release();
  swift_release();

LABEL_63:
  swift_release();
  swift_release();

LABEL_64:
  uint64_t v9 = (uint64_t)v449;
LABEL_65:
  uint64_t v93 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v64, v66);
  if (v9) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v94 = v93;
  uint64_t v95 = swift_bridgeObjectRelease();
  if ((v94 & 0x80000000) != 0)
  {
    dev_t v101 = MEMORY[0x186E1B0E8](v95);
    dev_t v102 = v101;
    v447 = v10;
    if ((v446 & 1) != 0)
    {
      v448 = v12;
      uint64_t v103 = 263LL;
      switch(v101)
      {
        case 1:
        case 13:
          uint64_t v103 = 257LL;
          goto LABEL_229;
        case 2:
          uint64_t v103 = 260LL;
          goto LABEL_229;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_147;
        case 27:
          goto LABEL_229;
        default:
          if (v101 == 63)
          {
            uint64_t v103 = 258LL;
          }

          else
          {
            if (v101 == 102)
            {
              swift_retain_n();
              id v143 = v10;
              swift_retain_n();
              id v144 = v143;
              id v449 = 0LL;
              uint64_t v446 = 256LL;
              goto LABEL_235;
            }

LABEL_229:
          uint64_t v446 = v103;
          swift_retain_n();
          id v271 = v10;
          swift_retain_n();
          id v272 = v271;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v273 = (int)POSIXErrorCode.rawValue.getter();
            id v274 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
            uint64_t v275 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v276 = objc_msgSend(v274, sel_initWithDomain_code_userInfo_, v275, v273, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v449 = v276;
            id v277 = objc_msgSend(v276, sel_domain);
            id v278 = static String._unconditionallyBridgeFromObjectiveC(_:)(v277);
            uint64_t v280 = v279;

            if (v278 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v280 == v281)
            {
              swift_bridgeObjectRelease_n();
            }

            else
            {
              char v282 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v282 & 1) == 0)
              {
LABEL_372:
                __break(1u);
                goto LABEL_373;
              }
            }

            uint64_t v10 = v447;
            ssize_t v12 = v448;
LABEL_235:
            id v283 = v10;
            swift_retain();
            swift_retain();
            if (!_foundation_swift_url_feature_enabled())
            {
              id v296 = objc_msgSend(v283, sel__parameterString);
              if (v296)
              {
                char v297 = v296;
                id v298 = static String._unconditionallyBridgeFromObjectiveC(_:)(v296);
                char v300 = v299;

                int Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
                id v302 = v449;
                if (Enum && (id v303 = objc_msgSend(v283, sel_path)) != 0)
                {
                  uint64_t v304 = v303;
                  id v305 = static String._unconditionallyBridgeFromObjectiveC(_:)(v303);
                  uint64_t v307 = v306;

                  *(void *)&v455.f_bsize = v305;
                  v455.uint64_t f_blocks = v307;
                  swift_bridgeObjectRetain();
                  v308._uint64_t countAndFlagsBits = 59LL;
                  v308.___darwin_ino64_t object = (void *)0xE100000000000000LL;
                  String.append(_:)(v308);
                  id v302 = v449;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  v309._uint64_t countAndFlagsBits = (uint64_t)v298;
                  v309.___darwin_ino64_t object = v300;
                  String.append(_:)(v309);
                  swift_bridgeObjectRelease();
                }

                else
                {
                  *(void *)&v455.f_bsize = 59LL;
                  v455.uint64_t f_blocks = 0xE100000000000000LL;
                  v310._uint64_t countAndFlagsBits = (uint64_t)v298;
                  v310.___darwin_ino64_t object = v300;
                  String.append(_:)(v310);
                }

                swift_bridgeObjectRelease();
                uint64_t v311 = v448;
                outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
              }

              else
              {
                id v312 = objc_msgSend(v283, sel_path);
                id v302 = v449;
                if (v312)
                {
                  __int128 v313 = v312;
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
                  uint64_t v311 = v12;

                  outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
                }

                else
                {
                  outlined consume of PathOrURL(v10, v11, (uint64_t)v12, 1);
                  uint64_t v311 = v12;
                }
              }

              goto LABEL_270;
            }

            *(void *)&v455.f_bsize = v283;
            v455.uint64_t f_blocks = v11;
            v455.f_bfree = (uint64_t)v12;
            id v284 = v283;
            swift_retain();
            swift_retain();
            Swift::String v285 = URL.path(percentEncoded:)(1);
            *(void *)&v455.f_bsize = v285._countAndFlagsBits;
            v455.uint64_t f_blocks = (uint64_t)v285._object;
            swift_bridgeObjectRetain();
            if (String.count.getter() > 1
              && (specialized BidirectionalCollection.last.getter( v285._countAndFlagsBits,  (unint64_t)v285._object) & 0x1FF) == 0x2F)
            {
              specialized RangeReplaceableCollection<>.popLast()();
              swift_bridgeObjectRelease();
            }

            *(void *)&v452.st_dev = Set.init(minimumCapacity:)();
            uint64_t v286 = specialized Set._Variant.insert(_:)(&v453, 0x2FuLL);
            uint64_t v287 = *(void *)&v452.st_dev;
            uint64_t v288 = *(void *)&v455.f_bsize;
            uint64_t v289 = v455.f_blocks;
            uint64_t v290 = HIBYTE(v455.f_blocks) & 0xF;
            if ((v455.f_blocks & 0x2000000000000000LL) == 0) {
              uint64_t v290 = *(void *)&v455.f_bsize & 0xFFFFFFFFFFFFLL;
            }
            if (v290)
            {
              id v445 = (id)v11;
              *(void *)&v452.st_dev = *(void *)&v455.f_bsize;
              v452.__darwin_ino64_t st_ino = v455.f_blocks;
              MEMORY[0x1895F8858](v286);
              uint64_t v435 = (uint64_t)&v452;
              uint64_t v436 = v287;
              swift_bridgeObjectRetain();
              specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v434,  v288,  v289);
              if (v291 == 1)
              {
                Swift::Int v292 = *(void *)&v452.st_dev;
                __darwin_ino64_t v293 = v452.st_ino;
                swift_bridgeObjectRetain();
                specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v292, v293, v287);
                uint64_t v295 = v294;
                swift_bridgeObjectRelease();
              }

              else
              {
                uint64_t v295 = v291;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v11 = (uint64_t)v445;
              id v302 = v449;
              uint64_t v10 = v447;
              if (!v295)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v332 = v448;
                outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
                outlined consume of PathOrURL(v10, v11, (uint64_t)v332, 1);
                goto LABEL_269;
              }

              id v445 = v283;
            }

            else
            {
              id v445 = v283;
              swift_bridgeObjectRelease();
              uint64_t v10 = v447;
              id v302 = v449;
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v314 = v448;
            outlined consume of PathOrURL(v10, v11, (uint64_t)v448, 1);
            outlined consume of PathOrURL(v10, v11, (uint64_t)v314, 1);
            id v283 = v445;
LABEL_269:
            uint64_t v311 = v448;
LABEL_270:
            uint64_t v333 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v334 = v283;
            outlined consume of PathOrURL(v10, v11, (uint64_t)v311, 1);
            if (v302)
            {
              *(void *)&v455.f_bsize = v302;
              lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
              id v335 = v302;
              if (_getErrorEmbeddedNSError<A>(_:)())
              {
              }

              else
              {
                swift_allocError();
                *uint64_t v337 = v335;
              }

              id v449 = v335;
              v336 = (void *)_swift_stdlib_bridgeErrorToNSError();
            }

            else
            {
              v336 = 0LL;
            }

             objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v446,  v333,  v334,  v336,  0,  0,  0);

            swift_unknownObjectRelease();
            outlined consume of PathOrURL(v10, v11, (uint64_t)v311, 1);
            return swift_willThrow();
          }

          break;
      }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_231;
  }

  uint64_t v186 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v179 = v186 & 1;
LABEL_237:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v179;
}

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v95 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v128 << 8);
      uint64_t v86 = v181;
      uint64_t v93 = v170;
      goto LABEL_168;
    }

    if (v12 != v181[11]) {
      goto LABEL_357;
    }
    if (!*v6) {
      goto LABEL_411;
    }
    specialized Rope._Node._prepareModify(at:)(v45, (uint64_t)&v192);
    v203[0] = v193;
    uint64_t v186 = v192;
    Swift::Int v187 = v193;
    unint64_t v188 = v194;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)v203);
    uint64_t result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v203 + 8);
    Swift::Int v187 = MEMORY[0x18961AFF0];
    v181[11] = v12 + 1;
    if (!v181[8]) {
      goto LABEL_412;
    }
    specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v190 = 0LL;
    unint64_t v188 = 0u;
    uint64_t v189 = 0u;
    uint64_t v186 = 0u;
    Swift::Int v187 = 0u;
    uint64_t result = (void *)specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v186, a4, a5);
    if (v12 + 1 != v181[11]) {
      goto LABEL_359;
    }
    if (!*v6) {
      goto LABEL_413;
    }
    specialized Rope._Node._prepareModify(at:)(v45, (uint64_t)&v195);
    uint64_t v201 = v196;
    Swift::String v202 = v197;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v201);
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v202);
    uint64_t v186 = v195;
    unint64_t v188 = v198;
    id v70 = *((void *)&v191 + 1);
    uint64_t result = (void *)v191;
    Swift::Int v187 = v191;
    uint64_t v71 = v12 + 2;
    v181[11] = v12 + 2;
    if (!v181[8]) {
      goto LABEL_414;
    }
    uint64_t v72 = v45;
    Swift::Int32 v173 = (uint64_t)result;
    swift_bridgeObjectRetain_n();
    __int128 v171 = v70;
    swift_bridgeObjectRetain_n();
    uint64_t v18 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v73 = v181[8];
    uint64_t v74 = v181[9];
    unint64_t v75 = v181[10];
    id v76 = v181[11];
    Swift::String v180 = v71;
    *(void *)&uint64_t v186 = v71;
    *((void *)&v186 + 1) = v72;
    *(void *)&Swift::Int v187 = v18;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v186, v73, v74, v75, v76);
    swift_unknownObjectRelease();
    unint64_t v77 = v186;
    id v78 = v187;
    uint64_t v79 = swift_unknownObjectRetain();
    uint64_t v80 = specialized Rope._endPath.getter(v79);
    uint64_t result = (void *)swift_unknownObjectRelease();
    if (*((void *)&v77 + 1) >= v80)
    {
      uint64_t v9 = a3;
      id v81 = v175;
      uint64_t v6 = v170;
      char v96 = v177;
    }

    else
    {
      id v81 = v175;
      if ((void)v77 != v181[11]) {
        goto LABEL_371;
      }
      if (v78)
      {
        uint64_t v82 = v78 + 24 * ((*((void *)&v77 + 1) >> ((4 * *(_BYTE *)(v78 + 18) + 8) & 0x3C)) & 0xFLL);
        id v83 = *(void *)(v82 + 32);
        id v84 = *(void *)(v82 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else
      {
        int v97 = v181[8];
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(*((unint64_t *)&v77 + 1), v97);
        id v83 = v98;
        id v84 = v99;
        swift_unknownObjectRelease();
      }

      uint64_t v9 = a3;
      uint64_t v6 = v170;
      char v96 = v177;
      if ((specialized static Dictionary<>.== infix(_:_:)(v83, v173) & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_184:
        uint64_t result = (void *)swift_bridgeObjectRelease();
        goto LABEL_185;
      }

      uint64_t v100 = specialized static Set.== infix(_:_:)(v84, v171);
      swift_bridgeObjectRelease();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      if ((v100 & 1) != 0)
      {
        char v96 = specialized Rope._remove(at:)((uint64_t)&v186, v180, v177);
        dev_t v101 = v181;
        dev_t v102 = v181[8];
        uint64_t v103 = v181[11];
        if (v96 < specialized Rope._endPath.getter(v102) && *(_BYTE *)(v102 + 18))
        {
          unint64_t v104 = (v96 >> ((4 * *(_BYTE *)(v102 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          dev_t v101 = v181;
          specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v102 + 24, v104, v96);
          swift_unknownObjectRelease();
        }

        off_t v105 = v186;
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if (v103 != v101[11]) {
          goto LABEL_392;
        }
        if (!*v170) {
          goto LABEL_415;
        }
        uint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(v96, (uint64_t)v199);
        uint64_t v186 = v199[0];
        Swift::Int v187 = v199[1];
        unint64_t v188 = v199[2];
        if (__OFADD__(*((void *)&v199[0] + 1), v105)) {
          goto LABEL_393;
        }
        *((void *)&v186 + 1) = *((void *)&v199[0] + 1) + v105;
        Swift::String v180 = v103 + 1;
        v101[11] = v103 + 1;
        if (!v101[8]) {
          goto LABEL_416;
        }
        uint64_t v18 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        goto LABEL_184;
      }
    }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v94 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v127 << 8);
      id v84 = v180;
      uint64_t v92 = v169;
      goto LABEL_168;
    }

    if (v12 != v180[11]) {
      goto LABEL_357;
    }
    if (!*v6) {
      goto LABEL_411;
    }
    specialized Rope._Node._prepareModify(at:)(v176, (uint64_t)&v191);
    v202[0] = v192;
    uint64_t v185 = v191;
    uint64_t v186 = v192;
    Swift::Int v187 = v193;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)v202);
    uint64_t result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v202 + 8);
    uint64_t v186 = MEMORY[0x18961AFF0];
    v180[11] = v12 + 1;
    if (!v180[8]) {
      goto LABEL_412;
    }
    specialized Rope._Node._finalizeModify(_:)(&v182, &v185);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v189 = 0LL;
    Swift::Int v187 = 0u;
    unint64_t v188 = 0u;
    uint64_t v185 = 0u;
    uint64_t v186 = 0u;
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v185, a4, a5);
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v12 + 1 != v180[11]) {
      goto LABEL_359;
    }
    if (!*v6) {
      goto LABEL_413;
    }
    specialized Rope._Node._prepareModify(at:)(v176, (uint64_t)&v194);
    uint64_t v200 = v195;
    uint64_t v201 = v196;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v200);
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v201);
    uint64_t v185 = v194;
    Swift::Int v187 = v197;
    id v70 = *((void *)&v190 + 1);
    uint64_t result = (void *)v190;
    uint64_t v186 = v190;
    uint64_t v71 = v12 + 2;
    v180[11] = v12 + 2;
    if (!v180[8]) {
      goto LABEL_414;
    }
    uint64_t v172 = (uint64_t)result;
    swift_bridgeObjectRetain_n();
    __int128 v170 = v70;
    swift_bridgeObjectRetain_n();
    uint64_t v18 = specialized Rope._Node._finalizeModify(_:)(v181, &v185);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v73 = v180[8];
    uint64_t v72 = v180[9];
    uint64_t v74 = v180[10];
    unint64_t v75 = v180[11];
    id v179 = v71;
    *(void *)&uint64_t v185 = v71;
    *((void *)&v185 + 1) = v176;
    *(void *)&uint64_t v186 = v18;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v185, v73, v72, v74, v75);
    swift_unknownObjectRelease();
    id v76 = v185;
    unint64_t v77 = v186;
    id v78 = swift_unknownObjectRetain();
    uint64_t v79 = specialized Rope._endPath.getter(v78);
    uint64_t result = (void *)swift_unknownObjectRelease();
    if (*((void *)&v76 + 1) >= v79)
    {
      uint64_t v9 = a3;
      uint64_t v80 = v174;
      uint64_t v6 = v169;
      uint64_t v95 = v176;
    }

    else
    {
      uint64_t v80 = v174;
      if ((void)v76 != v180[11]) {
        goto LABEL_371;
      }
      if (v77)
      {
        id v81 = v77 + 24 * ((*((void *)&v76 + 1) >> ((4 * *(_BYTE *)(v77 + 18) + 8) & 0x3C)) & 0xFLL);
        uint64_t v82 = *(void *)(v81 + 32);
        id v83 = *(void *)(v81 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else
      {
        char v96 = v180[8];
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(*((unint64_t *)&v76 + 1), v96);
        uint64_t v82 = v97;
        id v83 = v98;
        swift_unknownObjectRelease();
      }

      uint64_t v9 = a3;
      uint64_t v6 = v169;
      uint64_t v95 = v176;
      if ((specialized static Dictionary<>.== infix(_:_:)(v82, v172) & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_184:
        uint64_t result = (void *)swift_bridgeObjectRelease();
        goto LABEL_185;
      }

      uint64_t v99 = specialized static Set.== infix(_:_:)(v83, v170);
      swift_bridgeObjectRelease();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      if ((v99 & 1) != 0)
      {
        uint64_t v95 = specialized Rope._remove(at:)((uint64_t)&v185, v179, v176);
        uint64_t v100 = v180;
        dev_t v101 = v180[8];
        dev_t v102 = v180[11];
        if (v95 < specialized Rope._endPath.getter(v101) && *(_BYTE *)(v101 + 18))
        {
          uint64_t v103 = (v95 >> ((4 * *(_BYTE *)(v101 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          uint64_t v100 = v180;
          specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v101 + 24, v103, v95);
          swift_unknownObjectRelease();
        }

        unint64_t v104 = v185;
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if (v102 != v100[11]) {
          goto LABEL_392;
        }
        if (!*v169) {
          goto LABEL_415;
        }
        uint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(v95, (uint64_t)v198);
        uint64_t v185 = v198[0];
        uint64_t v186 = v198[1];
        Swift::Int v187 = v198[2];
        if (__OFADD__(*((void *)&v198[0] + 1), v104)) {
          goto LABEL_393;
        }
        *((void *)&v185 + 1) = *((void *)&v198[0] + 1) + v104;
        id v179 = v102 + 1;
        v100[11] = v102 + 1;
        if (!v100[8]) {
          goto LABEL_416;
        }
        uint64_t v18 = specialized Rope._Node._finalizeModify(_:)(v181, &v185);
        swift_bridgeObjectRelease();
        goto LABEL_184;
      }
    }

LABEL_380:
      *(void *)&v455.f_bsize = 0LL;
      v455.uint64_t f_blocks = 0xE000000000000000LL;
      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease();
      *(void *)&v455.f_bsize = 0xD000000000000014LL;
      v455.uint64_t f_blocks = 0x80000001839C9190LL;
      v452.st_dev = v102;
      goto LABEL_381;
    }

    uint64_t v123 = 263LL;
    switch(v101)
    {
      case 1:
      case 13:
        uint64_t v123 = 257LL;
        goto LABEL_258;
      case 2:
        uint64_t v123 = 260LL;
        goto LABEL_258;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_148;
      case 27:
        goto LABEL_258;
      default:
        if (v101 == 63)
        {
          uint64_t v123 = 258LL;
        }

        else
        {
          if (v101 == 102)
          {
            id v145 = 0LL;
            uint64_t v123 = 256LL;
LABEL_263:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v123,  (uint64_t)v10,  v11,  v145,  0LL,  0LL,  0LL,  0LL,  &v455,  0LL,  0LL);
            return swift_willThrow();
          }

LABEL_258:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
          goto LABEL_380;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v315 = (int)POSIXErrorCode.rawValue.getter();
        id v316 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v317 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v145 = objc_msgSend(v316, sel_initWithDomain_code_userInfo_, v317, v315, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v318 = objc_msgSend(v145, sel_domain);
        id v319 = static String._unconditionallyBridgeFromObjectiveC(_:)(v318);
        uint64_t v321 = v320;

        if (v319 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v321 == v322)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v10 = v447;
        }

        else
        {
          char v323 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v10 = v447;
          if ((v323 & 1) == 0)
          {
LABEL_373:
            __break(1u);
            goto LABEL_374;
          }
        }

        goto LABEL_263;
    }
  }

  char v96 = (char)v445;
  memset(&v452, 0, 28);
  memset(&v452.st_atimespec, 0, 112);
  int v97 = fstat(v94, &v452);
  LODWORD(v449) = v94;
  if (v97)
  {
    Swift::Int32 v98 = MEMORY[0x186E1B0E8]();
    Swift::Int32 st_mode = v98;
    v447 = v10;
    if ((v446 & 1) != 0)
    {
      v448 = v12;
      uint64_t v100 = 263LL;
      switch(v98)
      {
        case 1:
        case 13:
          uint64_t v100 = 257LL;
          goto LABEL_175;
        case 2:
          uint64_t v100 = 260LL;
          goto LABEL_175;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_145;
        case 27:
          goto LABEL_175;
        default:
          if (v98 == 63)
          {
            uint64_t v100 = 258LL;
          }

          else
          {
            if (v98 == 102)
            {
              swift_retain_n();
              id v140 = v10;
              swift_retain_n();
              id v141 = v140;
              uint64_t v446 = 0LL;
              uint64_t v444 = 256LL;
              goto LABEL_181;
            }

                    uint64_t v153 = (4 * *(_BYTE *)(v152 + 18) + 8) & 0x3C;
                    id v151 = ((-15LL << v153) - 1) & v151 | (v154 << v153);
                    uint64_t v15 = *(void *)(v152 + 24 + 24 * v154);
                    swift_unknownObjectRetain();
                    uint64_t result = (void *)swift_unknownObjectRelease();
                    id v152 = v15;
                    if (!*(_BYTE *)(v15 + 18)) {
                      goto LABEL_284;
                    }
                  }
                }

                uint64_t result = (void *)swift_unknownObjectRetain_n();
                id v151 = 0LL;
                uint64_t v35 = a2;
                uint64_t v15 = v148;
LABEL_284:
                id v161 = *(unsigned __int16 *)(v15 + 16);
                if (*(_WORD *)(v15 + 16))
                {
                  uint64_t v162 = *(void *)(v15 + 24);
                  id v21 = __OFSUB__(v35, v162);
                  id v163 = v35 - v162;
                  if (v21) {
                    goto LABEL_397;
                  }
                  if (__OFADD__(v163, 1LL)) {
                    goto LABEL_398;
                  }
                  if (v163 + 1 <= 0)
                  {
                    id v161 = 0LL;
                    goto LABEL_321;
                  }

                  if ((_DWORD)v161 != 1)
                  {
                    id v164 = *(void *)(v15 + 48);
                    uint64_t v35 = v163 - v164;
                    if (__OFSUB__(v163, v164)) {
                      goto LABEL_400;
                    }
                    if (__OFADD__(v35, 1LL)) {
                      goto LABEL_401;
                    }
                    if (v35 + 1 >= 1)
                    {
                      if ((_DWORD)v161 != 2)
                      {
                        __int128 v169 = (void *)(v15 + 72);
                        __int128 v170 = 2LL;
                        while (v161 != v170)
                        {
                          id v163 = v35 - *v169;
                          if (__OFSUB__(v35, *v169)) {
                            goto LABEL_382;
                          }
                          if (__OFADD__(v163, 1LL)) {
                            goto LABEL_383;
                          }
                          if (v163 + 1 < 1)
                          {
                            id v161 = v170;
                            goto LABEL_321;
                          }

                          ++v170;
                          v169 += 3;
                          uint64_t v35 = v163;
                          if (v161 == v170) {
                            goto LABEL_294;
                          }
                        }

                        goto LABEL_381;
                      }

                      goto LABEL_293;
                    }

                    id v161 = 1LL;
                    uint64_t v35 = v163;
LABEL_321:
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    Swift::String v34 = v151 & 0xFFFFFFFFFFFFF0FFLL | (v161 << 8);
LABEL_52:
                    swift_unknownObjectRetain();
                    uint64_t v178 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v34, v15, v148, v150);
                    uint64_t result = (void *)swift_unknownObjectRelease_n();
                    uint64_t v5 = a2;
                    Swift::String v33 = v34;
                    goto LABEL_53;
                  }
                }

                else
                {
LABEL_293:
                  id v163 = v35;
                }

        uint64_t v32 = v186;
        int v13 = (void *)v187;
        if (v31 >= v7)
        {
          id v150 = *v5;
          if (v9 == v7)
          {
            uint64_t v32 = v180[11];
            if (v150)
            {
              id v151 = v180[10];
              if (v151 < v9) {
                goto LABEL_380;
              }
              id v152 = v180[9];
              uint64_t v153 = *(unsigned __int8 *)(v150 + 18);
              if (*(_WORD *)(v150 + 16) && v151 > a2)
              {
                if (*(_BYTE *)(v150 + 18))
                {
                  uint64_t result = swift_unknownObjectRetain_n();
                  Swift::String v34 = a2;
                  uint64_t v154 = (void *)v150;
                  while (1)
                  {
                    uint64_t v156 = *((unsigned __int16 *)v154 + 8);
                    if (!*((_WORD *)v154 + 8)) {
                      goto LABEL_267;
                    }
                    int v157 = v154[5];
                    id v158 = v34 - v157;
                    if (__OFSUB__(v34, v157)) {
                      goto LABEL_356;
                    }
                    if (__OFADD__(v158, 1LL)) {
                      goto LABEL_357;
                    }
                    if (v158 + 1 <= 0)
                    {
                      uint64_t v156 = 0LL;
                    }

                    else
                    {
                      if ((_DWORD)v156 == 1)
                      {
                        v34 -= v157;
LABEL_267:
                        if (v34) {
                          goto LABEL_354;
                        }
                        goto LABEL_268;
                      }

                      id v159 = v154[8];
                      char v20 = __OFSUB__(v158, v159);
                      uint64_t v160 = v158 - v159;
                      if (v20) {
                        goto LABEL_366;
                      }
                      if (__OFADD__(v160, 1LL)) {
                        goto LABEL_367;
                      }
                      if (v160 + 1 >= 1)
                      {
                        if ((_DWORD)v156 != 2)
                        {
                          id v161 = v154 + 11;
                          uint64_t v162 = 2LL;
                          while (v156 != v162)
                          {
                            Swift::String v34 = v160 - *v161;
                            if (__OFSUB__(v160, *v161)) {
                              goto LABEL_343;
                            }
                            if (__OFADD__(v34, 1LL)) {
                              goto LABEL_344;
                            }
                            if (v34 + 1 < 1)
                            {
                              uint64_t v156 = v162;
                              Swift::String v34 = v160;
                              goto LABEL_268;
                            }

                            ++v162;
                            v161 += 3;
                            uint64_t v160 = v34;
                            if (v156 == v162) {
                              goto LABEL_267;
                            }
                          }

LABEL_379:
    *(void *)&v455.f_bsize = 0LL;
    v455.uint64_t f_blocks = 0xE000000000000000LL;
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    *(void *)&v455.f_bsize = 0xD000000000000014LL;
    v455.uint64_t f_blocks = 0x80000001839C9190LL;
    LODWORD(v453._countAndFlagsBits) = st_mode;
    goto LABEL_381;
  }

  size_t v126 = v444;
  if (v444 < 0)
  {
    if ((v446 & 1) != 0)
    {
      CocoaError.Code.init(fileErrno:reading:)(12, 1);
      uint64_t v446 = v450._countAndFlagsBits;
      v448 = v12;
      swift_retain_n();
      v447 = v10;
      id v158 = v10;
      swift_retain_n();
      id v159 = v158;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v160 = (int)POSIXErrorCode.rawValue.getter();
        id v161 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v162 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v163 = objc_msgSend(v161, sel_initWithDomain_code_userInfo_, v162, v160, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v444 = (uint64_t)v163;
        id v164 = objc_msgSend(v163, sel_domain);
        id v165 = static String._unconditionallyBridgeFromObjectiveC(_:)(v164);
        uint64_t v167 = v166;

        if (v165 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v167 == v168)
        {
          __int128 v169 = (void *)v11;
          swift_bridgeObjectRelease_n();
        }

        else
        {
          __int128 v169 = (void *)v11;
          char v342 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v342 & 1) == 0) {
            goto LABEL_376;
          }
        }

        id v343 = v159;
        swift_retain();
        char v344 = v448;
        swift_retain();
        char v345 = _foundation_swift_url_feature_enabled();
        uint64_t v346 = v447;
        if ((v345 & 1) == 0)
        {
          id v362 = objc_msgSend(v343, sel__parameterString);
          if (v362)
          {
            __int128 v363 = v362;
            id v364 = static String._unconditionallyBridgeFromObjectiveC(_:)(v362);
            uint64_t v366 = v365;

            if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
              && (id v367 = objc_msgSend(v343, sel_path)) != 0)
            {
              __int128 v368 = v367;
              id v369 = static String._unconditionallyBridgeFromObjectiveC(_:)(v367);
              uint64_t v371 = v370;

              *(void *)&v455.f_bsize = v369;
              v455.uint64_t f_blocks = v371;
              swift_bridgeObjectRetain();
              v372._uint64_t countAndFlagsBits = 59LL;
              v372.___darwin_ino64_t object = (void *)0xE100000000000000LL;
              String.append(_:)(v372);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v373._uint64_t countAndFlagsBits = (uint64_t)v364;
              v373.___darwin_ino64_t object = v366;
              String.append(_:)(v373);
              swift_bridgeObjectRelease();
            }

            else
            {
              *(void *)&v455.f_bsize = 59LL;
              v455.uint64_t f_blocks = 0xE100000000000000LL;
              v386._uint64_t countAndFlagsBits = (uint64_t)v364;
              v386.___darwin_ino64_t object = v366;
              String.append(_:)(v386);
            }

            swift_bridgeObjectRelease();
            uint64_t v387 = (uint64_t)v169;
            char v344 = v448;
            outlined consume of PathOrURL(v346, (uint64_t)v169, (uint64_t)v448, 1);
          }

          else
          {
            id v388 = objc_msgSend(v343, sel_path);
            if (v388)
            {
              v389 = v388;
              static String._unconditionallyBridgeFromObjectiveC(_:)(v388);
            }

            uint64_t v387 = (uint64_t)v169;
            outlined consume of PathOrURL(v346, (uint64_t)v169, (uint64_t)v344, 1);
          }

          goto LABEL_343;
        }

        *(void *)&v455.f_bsize = v343;
        v455.uint64_t f_blocks = (uint64_t)v169;
        v455.f_bfree = (uint64_t)v344;
        id v347 = v343;
        id v445 = v169;
        swift_retain();
        swift_retain();
        Swift::String v348 = URL.path(percentEncoded:)(1);
        *(void *)&v455.f_bsize = v348._countAndFlagsBits;
        v455.uint64_t f_blocks = (uint64_t)v348._object;
        swift_bridgeObjectRetain();
        if (String.count.getter() > 1
          && (specialized BidirectionalCollection.last.getter(v348._countAndFlagsBits, (unint64_t)v348._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }

        v453._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
        uint64_t v349 = specialized Set._Variant.insert(_:)(&v451, 0x2FuLL);
        uint64_t v350 = v453._countAndFlagsBits;
        uint64_t v351 = *(void *)&v455.f_bsize;
        uint64_t v352 = v455.f_blocks;
        uint64_t v353 = HIBYTE(v455.f_blocks) & 0xF;
        if ((v455.f_blocks & 0x2000000000000000LL) == 0) {
          uint64_t v353 = *(void *)&v455.f_bsize & 0xFFFFFFFFFFFFLL;
        }
        if (v353)
        {
          v453._uint64_t countAndFlagsBits = *(void *)&v455.f_bsize;
          v453.___darwin_ino64_t object = (void *)v455.f_blocks;
          MEMORY[0x1895F8858](v349);
          uint64_t v435 = (uint64_t)&v453;
          uint64_t v436 = v350;
          swift_bridgeObjectRetain();
          specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v434,  v351,  v352);
          if (v354 == 1)
          {
            Swift::Int v355 = v453._countAndFlagsBits;
            __int128 v356 = v453._object;
            swift_bridgeObjectRetain();
            specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v355,  (unint64_t)v356,  v350);
            uint64_t v358 = v357;
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v358 = v354;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v346 = v447;
          if (!v358)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v400 = (uint64_t)v445;
            v401 = v448;
            outlined consume of PathOrURL(v346, (uint64_t)v445, (uint64_t)v448, 1);
            outlined consume of PathOrURL(v346, v400, (uint64_t)v401, 1);
            goto LABEL_342;
          }
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t v346 = v447;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v391 = (uint64_t)v445;
        v392 = v448;
        outlined consume of PathOrURL(v346, (uint64_t)v445, (uint64_t)v448, 1);
        outlined consume of PathOrURL(v346, v391, (uint64_t)v392, 1);
LABEL_342:
        uint64_t v387 = (uint64_t)v445;
        char v344 = v448;
LABEL_343:
        v402 = (void *)v444;
        uint64_t v403 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v404 = v343;
        outlined consume of PathOrURL(v346, v387, (uint64_t)v344, 1);
        *(void *)&v455.f_bsize = v402;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        id v405 = v402;
        uint64_t v406 = v387;
        if (_getErrorEmbeddedNSError<A>(_:)())
        {
        }

        else
        {
          swift_allocError();
          void *v407 = v405;
        }

        uint64_t v408 = v446;
        v409 = (void *)objc_opt_self();
         objc_msgSend( v409,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v408,  v403,  v404,  _swift_stdlib_bridgeErrorToNSError(),  0,  0,  0);

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v267 = v447;
        v269 = v448;
        uint64_t v268 = v406;
LABEL_224:
        outlined consume of PathOrURL(v267, v268, (uint64_t)v269, 1);
        LODWORD(v94) = (_DWORD)v449;
        goto LABEL_225;
      }

      *(void *)&v455.f_bsize = 0LL;
      v455.uint64_t f_blocks = 0xE000000000000000LL;
      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease();
      *(void *)&v455.f_bsize = 0xD000000000000014LL;
      v455.uint64_t f_blocks = 0x80000001839C9190LL;
      LODWORD(v453._countAndFlagsBits) = 12;
      while (1)
      {
LABEL_381:
        v433._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        Swift::Int32 st_mode = (Swift::Int32)v433._object;
        String.append(_:)(v433);
        swift_bridgeObjectRelease();
        LODWORD(v436) = 0;
        uint64_t v435 = 73LL;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_382:
        *(void *)&v455.f_bsize = 0LL;
        v455.uint64_t f_blocks = 0xE000000000000000LL;
        _StringGuts.grow(_:)(22LL);
        swift_bridgeObjectRelease();
        *(void *)&v455.f_bsize = 0xD000000000000014LL;
        v455.uint64_t f_blocks = 0x80000001839C9190LL;
        LODWORD(v450._countAndFlagsBits) = st_mode;
      }
    }

    CocoaError.Code.init(fileErrno:reading:)(12, 1);
    uint64_t v122 = v453._countAndFlagsBits;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
    {
      *(void *)&v455.f_bsize = 0LL;
      v455.uint64_t f_blocks = 0xE000000000000000LL;
      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease();
      *(void *)&v455.f_bsize = 0xD000000000000014LL;
      v455.uint64_t f_blocks = 0x80000001839C9190LL;
      LODWORD(v450._countAndFlagsBits) = 12;
      goto LABEL_381;
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
    uint64_t v324 = (int)POSIXErrorCode.rawValue.getter();
    id v325 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v326 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v142 = objc_msgSend(v325, sel_initWithDomain_code_userInfo_, v326, v324, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v327 = objc_msgSend(v142, sel_domain);
    id v328 = static String._unconditionallyBridgeFromObjectiveC(_:)(v327);
    uint64_t v330 = v329;

    if (v328 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v330 == v331)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_208;
    }

    char v359 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v94) = (_DWORD)v449;
    if ((v359 & 1) != 0) {
      goto LABEL_210;
    }
    __break(1u);
    goto LABEL_295;
  }

  if ((v442 & 1) != 0)
  {
    id v127 = objc_msgSend((id)objc_opt_self(), sel_currentProgress);

    if (v127)
    {
      type metadata accessor for NSProgress();
      id v127 = @nonobjc NSProgress.__allocating_init(totalUnitCount:)(v126);
    }
  }

  else
  {
    id v127 = 0LL;
  }

  if (!v126)
  {
    if (v127)
    {
      objc_msgSend(v127, sel_setTotalUnitCount_, 1);
      objc_msgSend(v127, sel_setCompletedUnitCount_, 1);
    }

    __int128 v171 = 0LL;
    uint64_t v444 = 0LL;
    uint64_t v204 = 4LL;
    LODWORD(v94) = (_DWORD)v449;
    goto LABEL_172;
  }

  if (!IsSafeForMapping)
  {
    char v260 = (char *)malloc(v126);
    if (!v260)
    {
      *(void *)&v455.f_bsize = v10;
      v455.uint64_t f_blocks = v11;
      v455.f_bfree = (uint64_t)v12;
      LOBYTE(v455.f_bavail) = v446;
      static CocoaError.errorWithFilePath(_:errno:reading:variant:source:destination:)( 12,  (uint64_t)&v455,  1,  0LL,  0LL,  0LL,  0LL,  0LL,  &v453,  0LL);
      swift_willThrow();

      int v270 = (int)v449;
      return close(v270);
    }

    __int128 v171 = v260;
    LODWORD(v94) = (_DWORD)v449;
    if (v127) {
      objc_msgSend(v127, sel_becomeCurrentWithPendingUnitCount_, v126);
    }
    *(void *)&v455.f_bsize = v10;
    v455.uint64_t f_blocks = v11;
    v455.f_bfree = (uint64_t)v12;
    LOBYTE(v455.f_bavail) = v446;
    readBytesFromFileDescriptor(_:path:buffer:length:readUntilLength:reportProgress:)( v94,  (uint64_t)&v455,  v171,  v126,  1,  v442 & 1);
    uint64_t v444 = v385;
    objc_msgSend(v127, sel_resignCurrent);
    uint64_t v204 = 2LL;
    goto LABEL_172;
  }

  LODWORD(v94) = (_DWORD)v449;
  __int128 v170 = (char *)mmap(0LL, v126, 1, 2, (int)v449, 0LL);
  if (v170)
  {
    __int128 v171 = v170;
    uint64_t v172 = MAP_FAILED.getter();
    if (!v172 || v171 != (char *)v172)
    {
      uint64_t v204 = 1LL;
      if (v127)
      {
        objc_msgSend(v127, sel_setTotalUnitCount_, 1);
        objc_msgSend(v127, sel_setCompletedUnitCount_, 1);
      }

              __break(1u);
LABEL_380:
              __break(1u);
              goto LABEL_381;
            }

            id v127 = 0LL;
LABEL_262:
            swift_unknownObjectRelease();
            uint64_t result = swift_unknownObjectRelease();
            int v125 = v4 & 0xFFFFFFFFFFFFF0FFLL | (v127 << 8);
            uint64_t v43 = v9;
            uint64_t v9 = v152;
            if (v49) {
              goto LABEL_243;
            }
LABEL_263:
            size_t v126 = 0LL;
LABEL_264:
            uint64_t v4 = a2 - v116;
            if (__OFSUB__(a2, v116)) {
              goto LABEL_378;
            }
            v157[0] = v43;
            v157[1] = v125;
            v157[2] = v26;
            v157[3] = v126;
            id v158 = a2 - v116;
            id v131 = v156;
            id v26 = a2;
            uint64_t v132 = v153;
            while (2)
            {
              uint64_t v9 = v131[8];
              if (v53 == v26)
              {
                if (v9)
                {
                  id v49 = v131[10];
                  if (v49 < v26) {
                    goto LABEL_356;
                  }
                  uint64_t v155 = v131[9];
                  id v133 = v131[11];
                  id v134 = *(unsigned __int8 *)(v9 + 18);
                  if (*(_WORD *)(v9 + 16)) {
                    id v135 = v49 <= v26;
                  }
                  else {
                    id v135 = 1;
                  }
                  if (v135)
                  {
                    uint64_t v136 = ((-15LL << ((4 * v134 + 8) & 0x3C)) - 1) & v134 | ((unint64_t)*(unsigned __int16 *)(v9 + 16) << ((4 * v134 + 8) & 0x3C));
                    swift_unknownObjectRetain();
                    uint64_t v137 = 0LL;
                    id v26 = 0LL;
                  }

                  else
                  {
                    id v152 = v133;
                    if (*(_BYTE *)(v9 + 18))
                    {
                      uint64_t result = swift_unknownObjectRetain_n();
                      uint64_t v137 = v26;
                      uint64_t v139 = v9;
                      while (1)
                      {
                        id v59 = *(unsigned __int16 *)(v139 + 16);
                        if (!*(_WORD *)(v139 + 16)) {
                          goto LABEL_283;
                        }
                        id v141 = *(void *)(v139 + 40);
                        uint64_t v32 = __OFSUB__(v137, v141);
                        uint64_t v56 = v137 - v141;
                        if (v32) {
                          goto LABEL_334;
                        }
                        if (__OFADD__(v56, 1LL)) {
                          goto LABEL_335;
                        }
                        if (v56 + 1 >= 1) {
                          break;
                        }
                        id v59 = 0LL;
LABEL_284:
                        id v140 = (4 * *(_BYTE *)(v139 + 18) + 8) & 0x3C;
                        id v134 = ((-15LL << v140) - 1) & v134 | (v59 << v140);
                        id v26 = *(void *)(v139 + 24 + 24 * v59);
                        swift_unknownObjectRetain();
                        uint64_t result = swift_unknownObjectRelease();
                        uint64_t v139 = v26;
                        if (!*(_BYTE *)(v26 + 18)) {
                          goto LABEL_299;
                        }
                      }

                      if ((_DWORD)v59 != 1)
                      {
                        id v142 = (uint64_t *)(v139 + 64);
                        id v143 = 1LL;
                        while (1)
                        {
                          id v144 = *v142;
                          v142 += 3;
                          uint64_t v137 = v56 - v144;
                          if (__OFSUB__(v56, v144)) {
                            break;
                          }
                          if (__OFADD__(v137, 1LL)) {
                            goto LABEL_322;
                          }
                          if (v137 + 1 < 1)
                          {
                            id v59 = v143;
                            uint64_t v137 = v56;
                            goto LABEL_284;
                          }

                          ++v143;
                          uint64_t v56 = v137;
                          if (v59 == v143) {
                            goto LABEL_283;
                          }
                        }

                        __break(1u);
LABEL_322:
                        __break(1u);
LABEL_323:
                        __break(1u);
LABEL_324:
                        __break(1u);
                        goto LABEL_325;
                      }

                      uint64_t v137 = v56;
LABEL_283:
                      if (v137) {
                        goto LABEL_333;
                      }
                      goto LABEL_284;
                    }

                    uint64_t result = swift_unknownObjectRetain_n();
                    id v134 = 0LL;
                    uint64_t v137 = v26;
                    id v26 = v9;
LABEL_299:
                    id v145 = *(unsigned __int16 *)(v26 + 16);
                    if (*(_WORD *)(v26 + 16))
                    {
                      uint64_t v146 = *(void *)(v26 + 24);
                      uint64_t v32 = __OFSUB__(v137, v146);
                      uint64_t v147 = v137 - v146;
                      if (v32) {
                        goto LABEL_373;
                      }
                      if (__OFADD__(v147, 1LL)) {
                        goto LABEL_374;
                      }
                      if (v147 + 1 >= 1)
                      {
                        if ((_DWORD)v145 != 1)
                        {
                          id v148 = (uint64_t *)(v26 + 48);
                          uint64_t v149 = 1LL;
                          while (1)
                          {
                            id v150 = *v148;
                            v148 += 3;
                            uint64_t v137 = v147 - v150;
                            if (__OFSUB__(v147, v150)) {
                              break;
                            }
                            if (__OFADD__(v137, 1LL)) {
                              goto LABEL_353;
                            }
                            if (v137 + 1 < 1)
                            {
                              id v145 = v149;
                              uint64_t v137 = v147;
                              goto LABEL_312;
                            }

                            ++v149;
                            uint64_t v147 = v137;
                            if (v145 == v149) {
                              goto LABEL_311;
                            }
                          }

LABEL_172:
      uint64_t v206 = v440;
      char v205 = v441;
      if (specialized Collection.isEmpty.getter(v440))
      {
      }

      else
      {
        uint64_t v338 = v439;
        swift_bridgeObjectRelease();
        uint64_t v94 = readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(v94, v206);

        *uint64_t v338 = v94;
        LODWORD(v94) = (_DWORD)v449;
      }

      uint64_t v339 = v444;
      *char v205 = v171;
      v205[1] = (char *)v339;
      v205[2] = (char *)v204;
      v205[3] = 0LL;
      goto LABEL_226;
    }
  }

  *(void *)&v455.f_bsize = v10;
  v455.uint64_t f_blocks = v11;
  v455.f_bfree = (uint64_t)v12;
  LOBYTE(v455.f_bavail) = v446;
  Swift::Int32 v173 = MEMORY[0x186E1B0E8]();
  static CocoaError.errorWithFilePath(_:errno:reading:variant:source:destination:)( v173,  (uint64_t)&v455,  1,  0LL,  0LL,  0LL,  0LL,  0LL,  &v453,  0LL);
  swift_willThrow();

LABEL_226:
  int v270 = v94;
  return close(v270);
}

    swift_bridgeObjectRelease();
    uint64_t v7 = (uint64_t)v164;
    id v64 = v152;
LABEL_99:
    swift_bridgeObjectRelease();
    id v70 = *(void *)(v69 + 56) + 72 * v64;
    unint64_t v176 = *(_OWORD *)v70;
    uint64_t v72 = *(_OWORD *)(v70 + 32);
    uint64_t v71 = *(_OWORD *)(v70 + 48);
    uint64_t v73 = *(void *)(v70 + 64);
    char v177 = *(_OWORD *)(v70 + 16);
    uint64_t v178 = v72;
    Swift::String v180 = v73;
    id v179 = v71;
    specialized _NativeDictionary._delete(at:)(v64, v69);
    *(void *)uint64_t v7 = v69;
    swift_bridgeObjectRelease();
    uint64_t v29 = a1;
    uint64_t v8 = v163;
LABEL_108:
    AttributedString._AttributeStorage._attributeModified(_:old:new:)(v36, v5, &v176, &v181);
    swift_bridgeObjectRelease();
    outlined destroy of Any?( (uint64_t)&v181,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?( (uint64_t)&v176,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v186);
    uint64_t v25 = v165;
    uint64_t v6 = (void *)v7;
    uint64_t v7 = (uint64_t)v174;
  }

  v174[3] = v179;
  uint64_t v175 = v180;
  v174[1] = v177;
  v174[2] = v178;
  v174[0] = v176;
  outlined init with copy of AttributedString._AttributeValue((uint64_t)v174, (uint64_t)&v176);
  uint64_t v7 = (uint64_t)v164;
  uint64_t v8 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v168 = *v164;
  uint64_t v54 = *v164;
  *id v164 = 0x8000000000000000LL;
  uint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v5);
  uint64_t v57 = *(void *)(v54 + 16);
  uint64_t v58 = (v56 & 1) == 0;
  id v59 = __OFADD__(v57, v58);
  BOOL v60 = v57 + v58;
  if (v59) {
    goto LABEL_179;
  }
  uint64_t v61 = v56;
  if (*(void *)(v54 + 24) < v60)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v60, v8);
    Swift::Int v62 = v168;
    uint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v5);
    if ((v61 & 1) != (v63 & 1)) {
      goto LABEL_218;
    }
    goto LABEL_102;
  }

  if ((v8 & 1) != 0)
  {
    Swift::Int v62 = v54;
LABEL_102:
    uint64_t v29 = a1;
    uint64_t v8 = v163;
    if ((v61 & 1) != 0)
    {
      uint64_t v74 = *(void *)(v62 + 56) + 72 * v55;
      id v76 = *(_OWORD *)(v74 + 16);
      unint64_t v75 = *(_OWORD *)(v74 + 32);
      unint64_t v77 = *(_OWORD *)(v74 + 48);
      Swift::Int32 v173 = *(void *)(v74 + 64);
      uint64_t v172 = v77;
      __int128 v169 = *(_OWORD *)v74;
      __int128 v170 = v76;
      __int128 v171 = v75;
      id v78 = *(void *)(v62 + 56) + 72 * v55;
      uint64_t v79 = v177;
      uint64_t v80 = v178;
      id v81 = v179;
      *(void *)(v78 + 64) = v180;
      *(_OWORD *)(v78 + 32) = v80;
      *(_OWORD *)(v78 + 48) = v81;
      *(_OWORD *)(v78 + 16) = v79;
      *(_OWORD *)id v78 = v176;
    }

    else
    {
      *(void *)(v62 + 8 * (v55 >> 6) + 64) |= 1LL << v55;
      uint64_t v82 = (uint64_t *)(*(void *)(v62 + 48) + 16 * v55);
      *uint64_t v82 = v36;
      v82[1] = v5;
      id v83 = *(void *)(v62 + 56) + 72 * v55;
      *(_OWORD *)id v83 = v176;
      id v84 = v177;
      uint64_t v85 = v178;
      uint64_t v86 = v179;
      *(void *)(v83 + 64) = v180;
      *(_OWORD *)(v83 + 32) = v85;
      *(_OWORD *)(v83 + 48) = v86;
      *(_OWORD *)(v83 + 16) = v84;
      Swift::String v87 = *(void *)(v62 + 16);
      id v59 = __OFADD__(v87, 1LL);
      Swift::String v88 = v87 + 1;
      if (v59)
      {
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
        goto LABEL_215;
      }

      *(void *)(v62 + 16) = v88;
      Swift::Int32 v173 = 0LL;
      __int128 v171 = 0u;
      uint64_t v172 = 0u;
      __int128 v169 = 0u;
      __int128 v170 = 0u;
      swift_bridgeObjectRetain();
    }

    *(void *)uint64_t v7 = v62;
    swift_bridgeObjectRelease();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v174);
    outlined init with take of LocalePreferences?( (uint64_t)&v169,  (uint64_t)&v176,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    goto LABEL_108;
  }

  id v150 = v55;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
  Swift::String v89 = static _DictionaryStorage.copy(original:)();
  Swift::Int v62 = v89;
  if (!*(void *)(v54 + 16))
  {
LABEL_140:
    swift_bridgeObjectRelease();
    uint64_t v55 = v150;
    goto LABEL_102;
  }

  uint64_t v155 = v61;
  id v90 = (char *)(v89 + 64);
  __src = (char *)(v54 + 64);
  __int128 v91 = (unint64_t)((1LL << *(_BYTE *)(v62 + 32)) + 63) >> 6;
  int v157 = v54;
  if (v62 != v54 || v90 >= &__src[8 * v91]) {
    memmove(v90, __src, 8 * v91);
  }
  *(void *)(v62 + 16) = *(void *)(v54 + 16);
  uint64_t v92 = 1LL << *(_BYTE *)(v54 + 32);
  if (v92 < 64) {
    uint64_t v93 = ~(-1LL << v92);
  }
  else {
    uint64_t v93 = -1LL;
  }
  id v159 = 0LL;
  id v161 = v93 & *(void *)(v54 + 64);
  id v151 = (unint64_t)(v92 + 63) >> 6;
  while (2)
  {
    uint64_t v7 = (uint64_t)v164;
    uint64_t v61 = v155;
    if (v161)
    {
      uint64_t v94 = __clz(__rbit64(v161));
      v161 &= v161 - 1;
      uint64_t v95 = v94 | (v159 << 6);
      char v96 = v157;
LABEL_118:
      int v97 = 16 * v95;
      Swift::Int32 v98 = *(void *)(v96 + 56);
      uint64_t v99 = (uint64_t *)(*(void *)(v96 + 48) + 16 * v95);
      dev_t v101 = *v99;
      uint64_t v100 = v99[1];
      dev_t v102 = 72 * v95;
      outlined init with copy of AttributedString._AttributeValue(v98 + 72 * v95, (uint64_t)&v169);
      uint64_t v103 = (void *)(*(void *)(v62 + 48) + v97);
      *uint64_t v103 = v101;
      v103[1] = v100;
      unint64_t v104 = *(void *)(v62 + 56) + v102;
      *(_OWORD *)unint64_t v104 = v169;
      off_t v105 = v170;
      char v106 = v171;
      __int16 v107 = v172;
      *(void *)(v104 + 64) = v173;
      *(_OWORD *)(v104 + 32) = v106;
      *(_OWORD *)(v104 + 48) = v107;
      *(_OWORD *)(v104 + 16) = v105;
      swift_bridgeObjectRetain();
      continue;
    }

    break;
  }

  id v108 = v159 + 1;
  char v96 = v157;
  if (__OFADD__(v159, 1LL)) {
    goto LABEL_213;
  }
  if (v108 >= v151) {
    goto LABEL_140;
  }
  id v109 = *(void *)&__src[8 * v108];
  Swift::String v110 = v159 + 1;
  if (v109) {
    goto LABEL_139;
  }
  Swift::String v110 = v159 + 2;
  if (v159 + 2 >= v151) {
    goto LABEL_140;
  }
  id v109 = *(void *)&__src[8 * v110];
  if (v109) {
    goto LABEL_139;
  }
  Swift::String v110 = v159 + 3;
  if (v159 + 3 >= v151) {
    goto LABEL_140;
  }
  id v109 = *(void *)&__src[8 * v110];
  if (v109) {
    goto LABEL_139;
  }
  Swift::String v110 = v159 + 4;
  if (v159 + 4 >= v151) {
    goto LABEL_140;
  }
  id v109 = *(void *)&__src[8 * v110];
  if (v109) {
    goto LABEL_139;
  }
  Swift::String v110 = v159 + 5;
  if (v159 + 5 >= v151) {
    goto LABEL_140;
  }
  id v109 = *(void *)&__src[8 * v110];
  if (v109) {
    goto LABEL_139;
  }
  Swift::String v110 = v159 + 6;
  if (v159 + 6 >= v151) {
    goto LABEL_140;
  }
  id v109 = *(void *)&__src[8 * v110];
  if (v109)
  {
LABEL_139:
    id v159 = v110;
    id v161 = (v109 - 1) & v109;
    uint64_t v95 = __clz(__rbit64(v109)) + (v110 << 6);
    goto LABEL_118;
  }

  uint64_t v111 = v159 + 7;
  if (v159 + 7 >= v151) {
    goto LABEL_140;
  }
  id v109 = *(void *)&__src[8 * v111];
  if (v109)
  {
    Swift::String v110 = v159 + 7;
    char v96 = v157;
    goto LABEL_139;
  }

  while (1)
  {
    Swift::String v110 = v111 + 1;
    if (__OFADD__(v111, 1LL)) {
      break;
    }
    uint64_t v7 = (uint64_t)v164;
    uint64_t v61 = v155;
    char v96 = v157;
    if (v110 >= v151) {
      goto LABEL_140;
    }
    id v109 = *(void *)&__src[8 * v110];
    ++v111;
    if (v109) {
      goto LABEL_139;
    }
  }

            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
            goto LABEL_176;
          }

          uint64_t v9 = v39;
          goto LABEL_42;
        }

        uint64_t v35 = 1LL;
        uint64_t v9 = v37;
      }

                  Swift::String v87 = (4 * *(_BYTE *)(v86 + 18) + 8) & 0x3C;
                  id v84 = ((-15LL << v87) - 1) & v84 | (v88 << v87);
                  int v13 = *(void *)(v86 + 24 + 24 * v88);
                  swift_unknownObjectRetain();
                  uint64_t result = swift_unknownObjectRelease();
                  uint64_t v86 = v13;
                  if (!*(_BYTE *)(v13 + 18)) {
                    goto LABEL_200;
                  }
                }
              }

              uint64_t result = swift_unknownObjectRetain_n();
              id v84 = 0LL;
              uint64_t v85 = a5;
              int v13 = v81;
LABEL_200:
              unint64_t v114 = v83;
              int v97 = *(unsigned __int16 *)(v13 + 16);
              if (*(_WORD *)(v13 + 16))
              {
                Swift::Int32 v98 = *(void *)(v13 + 24);
                id v23 = __OFSUB__(v85, v98);
                uint64_t v99 = v85 - v98;
                if (v23) {
                  goto LABEL_282;
                }
                if (__OFADD__(v99, 1LL)) {
                  goto LABEL_283;
                }
                if (v99 + 1 <= 0)
                {
                  int v97 = 0LL;
                  goto LABEL_223;
                }

                if ((_DWORD)v97 != 1)
                {
                  uint64_t v100 = *(void *)(v13 + 48);
                  uint64_t v85 = v99 - v100;
                  if (__OFSUB__(v99, v100)) {
                    goto LABEL_287;
                  }
                  if (__OFADD__(v85, 1LL)) {
                    goto LABEL_288;
                  }
                  if (v85 + 1 >= 1)
                  {
                    if ((_DWORD)v97 != 2)
                    {
                      dev_t v101 = (void *)(v13 + 72);
                      dev_t v102 = 2LL;
                      while (v97 != v102)
                      {
                        uint64_t v99 = v85 - *v101;
                        if (__OFSUB__(v85, *v101)) {
                          goto LABEL_276;
                        }
                        if (__OFADD__(v99, 1LL)) {
                          goto LABEL_277;
                        }
                        if (v99 + 1 < 1)
                        {
                          int v97 = v102;
                          goto LABEL_223;
                        }

                        ++v102;
                        v101 += 3;
                        uint64_t v85 = v99;
                        if (v97 == v102) {
                          goto LABEL_210;
                        }
                      }

uint64_t @objc static NSData._readBytes(fromPath:maxLength:bytes:length:didMap:options:reportProgress:)( uint64_t a1, uint64_t a2, void *a3, off_t a4, char **a5, char **a6, BOOL *a7, void *a8, unsigned __int8 a9)
{
  id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static NSData._readBytes(fromPath:maxLength:bytes:length:didMap:options:reportProgress:)( (uint64_t)v14,  v15,  a4,  a5,  a6,  a7,  a8,  a9);
  swift_bridgeObjectRelease();
  return 1LL;
}

uint64_t @objc static NSData._readBytesAndEncoding(fromPath:maxLength:encoding:bytes:length:didMap:options:reportProgress:)( uint64_t a1, uint64_t a2, void *a3, off_t a4, void *a5, char **a6, void *a7, BOOL *a8, void *a9, unsigned __int8 a10)
{
  id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static NSData._readBytesAndEncoding(fromPath:maxLength:encoding:bytes:length:didMap:options:reportProgress:)( (uint64_t)v15,  v16,  a4,  a5,  a6,  a7,  a8,  a9,  a10);
  swift_bridgeObjectRelease();
  return 1LL;
}

uint64_t readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)( __int128 *a1, int a2, off_t a3, char a4, void *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v9 = *((void *)a1 + 2);
  char v10 = *((_BYTE *)a1 + 24);
  __int128 v18 = *a1;
  uint64_t v19 = v9;
  char v20 = v10;
  readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)( (uint64_t)&v18,  a2,  a3,  a4 & 1,  a5,  a6,  a7,  &v21);
  if (!v8)
  {
    uint64_t v12 = v22;
    unint64_t v11 = (unint64_t)v23;
    if (v22)
    {
      int v13 = v21;
      if (!v21)
      {
        __break(1u);
LABEL_14:
        __break(1u);
        JUMPOUT(0x182FE3258LL);
      }

      uint64_t v14 = 0LL;
      id v15 = (void (*)(unint64_t, uint64_t))closure #1 in Data.Deallocator._deallocator.getter;
      switch((unint64_t)v23)
      {
        case 0uLL:
          uint64_t v14 = 0LL;
          id v15 = (void (*)(unint64_t, uint64_t))closure #4 in Data.Deallocator._deallocator.getter;
          goto LABEL_10;
        case 1uLL:
          goto LABEL_10;
        case 2uLL:
          uint64_t v14 = 0LL;
          id v15 = (void (*)(unint64_t, uint64_t))closure #2 in Data.Deallocator._deallocator.getter;
          goto LABEL_10;
        case 3uLL:
          uint64_t v14 = 0LL;
          id v15 = (void (*)(unint64_t, uint64_t))destructiveProjectEnumData for PredicateCodableError;
          goto LABEL_10;
        case 4uLL:
          goto LABEL_14;
        default:
          id v15 = v23;
          uint64_t v14 = v24;
LABEL_10:
          type metadata accessor for __DataStorage();
          swift_allocObject();
          outlined copy of Data.Deallocator?(v11);
          swift_retain();
          uint64_t v16 = (void *)__DataStorage.init(bytes:length:copy:deallocator:offset:)( (unint64_t)v13,  v12,  0,  v15,  v14,  0LL);
          uint64_t v7 = specialized Data._Representation.init(_:count:)(v16, v12);
          swift_release();
          break;
      }
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    outlined consume of Data.Deallocator?(v11);
  }

  return v7;
}

void readBytesFromFileDescriptor(_:path:buffer:length:readUntilLength:reportProgress:)( int a1, uint64_t a2, char *a3, uint64_t a4, int a5, char a6)
{
  uint64_t v12 = *(void **)a2;
  unint64_t v11 = *(void *)(a2 + 8);
  uint64_t v120 = *(void *)(a2 + 16);
  int v13 = *(unsigned __int8 *)(a2 + 24);
  int v122 = a5;
  int v123 = v13;
  uint64_t v14 = (void *)objc_opt_self();
  id v15 = objc_msgSend(v14, sel_currentProgress);

  id v126 = 0LL;
  uint64_t v16 = a4;
  if (v15)
  {
    if ((a6 & 1) != 0)
    {
      id v126 = objc_msgSend(v14, sel_progressWithTotalUnitCount_, a4);
      uint64_t v16 = a4 / 100;
      if (a4 / 100 <= 4096) {
        uint64_t v16 = 4096LL;
      }
    }
  }

  if (a4 < 1)
  {
    uint64_t v19 = a4;
    unint64_t v20 = (unint64_t)v126;
    goto LABEL_42;
  }

  uint64_t v117 = v6;
  uint64_t v118 = v16;
  off_t v121 = v12;
  unint64_t v119 = v11;
  LODWORD(v17) = 0x7FFFFFFF;
  if (v16 >= 0x7FFFFFFF) {
    uint64_t v18 = 0x7FFFFFFFLL;
  }
  else {
    uint64_t v18 = v16;
  }
  id v125 = (id)v18;
  uint64_t v124 = v18;
  uint64_t v19 = a4;
  unint64_t v20 = (unint64_t)v126;
  while (1)
  {
    if (v20)
    {
      uint64_t v21 = v16;
      id v22 = (id)v20;
      if (objc_msgSend(v22, sel_isCancelled))
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v101 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v102 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v103 = objc_msgSend(v101, sel_initWithDomain_code_userInfo_, v102, 3072, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v104 = objc_msgSend(v103, sel_domain);
        id v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        uint64_t v107 = v106;

        if (v105 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v107 != v108)
        {
          char v110 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v110 & 1) != 0) {
            goto LABEL_118;
          }
          __break(1u);
        }

unint64_t specialized static NSData._readBytes(fromPath:maxLength:bytes:length:didMap:options:reportProgress:)( uint64_t a1, uint64_t a2, off_t a3, char **a4, char **a5, BOOL *a6, void *a7, int a8)
{
  uint64_t v22 = MEMORY[0x18961AFF0];
  v19[0] = a1;
  v19[1] = a2;
  v19[2] = 0LL;
  char v20 = 0;
  BOOL v14 = a3 == 0x7FFFFFFFFFFFFFFFLL;
  if (a3 == 0x7FFFFFFFFFFFFFFFLL) {
    off_t v15 = 0LL;
  }
  else {
    off_t v15 = a3;
  }
  swift_bridgeObjectRetain();
  readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)( (uint64_t)v19,  a8,  v15,  v14,  a7,  MEMORY[0x18961AFE8],  &v22,  v21);
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  if (!v8)
  {
    id v17 = v21[1];
    uint64_t v18 = v21[2];
    *a4 = v21[0];
    *a5 = v17;
    *a6 = v18 == (char *)1;
    return outlined consume of Data.Deallocator?((unint64_t)v18);
  }

  return result;
}

uint64_t specialized static NSData._readBytesAndEncoding(fromPath:maxLength:encoding:bytes:length:didMap:options:reportProgress:)( uint64_t a1, uint64_t a2, off_t a3, void *a4, char **a5, void *a6, BOOL *a7, void *a8, unsigned __int8 a9)
{
  uint64_t v39 = MEMORY[0x18961AFF0];
  v34[0] = a1;
  v34[1] = a2;
  v34[2] = 0LL;
  char v35 = 0;
  BOOL v12 = a3 == 0x7FFFFFFFFFFFFFFFLL;
  if (a3 == 0x7FFFFFFFFFFFFFFFLL) {
    off_t v13 = 0LL;
  }
  else {
    off_t v13 = a3;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"com.apple.TextEncoding");
  *(void *)(inited + 40) = v15;
  readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)( (uint64_t)v34,  a9,  v13,  v12,  a8,  inited,  &v39,  &v36);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (!v9)
  {
    uint64_t v16 = v36;
    uint64_t v30 = v37;
    unint64_t v17 = v38;
    id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"com.apple.TextEncoding");
    uint64_t v20 = v39;
    if (*(void *)(v39 + 16)
      && (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18, v19), (v22 & 1) != 0))
    {
      uint64_t v29 = v16;
      uint64_t v23 = (uint64_t *)(*(void *)(v20 + 56) + 16 * v21);
      uint64_t v25 = *v23;
      unint64_t v24 = v23[1];
      outlined copy of Data._Representation(*v23, v24);
      swift_bridgeObjectRelease();
      encodingFromDataForExtendedAttribute(_:)(v25, v24, (uint64_t)&v36);
      if ((v37 & 1) == 0)
      {
        *a4 = v36;
        outlined consume of Data._Representation(v25, v24);
        uint64_t v16 = v29;
        uint64_t v27 = v30;
        goto LABEL_11;
      }

      outlined consume of Data._Representation(v25, v24);
      uint64_t v26 = a4;
      uint64_t v16 = v29;
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = a4;
    }

    uint64_t v27 = v30;
    *uint64_t v26 = 0xFFFFFFFFLL;
LABEL_11:
    *a5 = v16;
    *a6 = v27;
    *a7 = v17 == 1;
    outlined consume of Data.Deallocator?(v17);
  }

  return swift_bridgeObjectRelease();
}

unint64_t outlined consume of Data.Deallocator?(unint64_t result)
{
  if (result != 4) {
    return outlined consume of Data.Deallocator(result);
  }
  return result;
}

unint64_t outlined consume of Data.Deallocator(unint64_t result)
{
  if (result >= 4) {
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of PathOrURL(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }

  swift_release();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type POSIXError and conformance POSIXError()
{
  unint64_t result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for POSIXError, &type metadata for POSIXError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for POSIXError, &type metadata for POSIXError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for POSIXError, &type metadata for POSIXError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for POSIXError, &type metadata for POSIXError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for POSIXError, &type metadata for POSIXError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for POSIXError, &type metadata for POSIXError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }

  return result;
}

unint64_t type metadata accessor for NSProgress()
{
  unint64_t result = lazy cache variable for type metadata for NSProgress;
  if (!lazy cache variable for type metadata for NSProgress)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSProgress);
  }

  return result;
}

void partial apply for closure #1 in readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(char *a1)
{
}

unint64_t outlined copy of Data.Deallocator?(unint64_t result)
{
  if (result != 4) {
    return outlined copy of Data.Deallocator(result);
  }
  return result;
}

unint64_t outlined copy of Data.Deallocator(unint64_t result)
{
  if (result >= 4) {
    return swift_retain();
  }
  return result;
}

id NSFileHandle.readToEnd()()
{
  v9[1] = *(id *)MEMORY[0x1895F89C0];
  v9[0] = 0LL;
  id v1 = objc_msgSend(v0, sel_readDataToEndOfFileAndReturnError_, v9);
  id v2 = v9[0];
  if (v1)
  {
    id v3 = v1;
    id v4 = v2;
    specialized Data.init(referencing:)(v3);
    uint64_t v6 = v5;

    __asm { BR              X10 }
  }

  if (v9[0])
  {
    v9[0];
  }

  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    id v7 = (id)_nilObjCError;
  }

  swift_willThrow();
  return v2;
}

id NSFileHandle.read(upToCount:)(uint64_t a1)
{
  v10[1] = *(id *)MEMORY[0x1895F89C0];
  v10[0] = 0LL;
  id v2 = objc_msgSend(v1, sel_readDataUpToLength_error_, a1, v10);
  id v3 = v10[0];
  if (v2)
  {
    id v4 = v2;
    id v5 = v3;
    specialized Data.init(referencing:)(v4);
    uint64_t v7 = v6;

    __asm { BR              X10 }
  }

  if (v10[0])
  {
    v10[0];
  }

  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    id v8 = (id)_nilObjCError;
  }

  swift_willThrow();
  return v3;
}

Swift::UInt64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSFileHandle.offset()()
{
  return (Swift::UInt64)NSFileHandle.offset()((SEL *)&selRef_getOffset_error_);
}

Swift::UInt64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSFileHandle.seekToEnd()()
{
  return (Swift::UInt64)NSFileHandle.offset()((SEL *)&selRef_seekToEndReturningOffset_error_);
}

void *NSFileHandle.offset()(SEL *a1)
{
  v6[1] = *MEMORY[0x1895F89C0];
  id v5 = 0LL;
  v6[0] = 0LL;
  if (objc_msgSend(v1, *a1, v6, &v5))
  {
    id v1 = (void *)v6[0];
    id v2 = v5;
  }

  else
  {
    if (v5)
    {
      v5;
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v3 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

  return v1;
}

uint64_t specialized NSFileHandle.write<A>(contentsOf:)()
{
  id v1 = v0;
  uint64_t v76 = *MEMORY[0x1895F89C0];
  if ((_NSFileHandleIsClosed((uint64_t)v0) & 1) == 0)
  {
    id CanPerformWritingInSwiftOverlay = (id)_NSFileHandleCanPerformWritingInSwiftOverlay(v0);
    if ((CanPerformWritingInSwiftOverlay & 1) == 0
      || (id CanPerformWritingInSwiftOverlay = objc_msgSend(v0, sel_fileDescriptor),
          (CanPerformWritingInSwiftOverlay & 0x80000000) != 0))
    {
      *(void *)&__int128 v72 = MEMORY[0x18961AFE8];
      MEMORY[0x1895F8858](CanPerformWritingInSwiftOverlay);
      DispatchData.enumerateBytes(_:)();
      uint64_t v28 = *(void *)(v72 + 16);
      if (v28)
      {
        for (unint64_t i = (uint64_t *)(v72 + 40); ; i += 3)
        {
          uint64_t v33 = *(i - 1);
          if (v33)
          {
            uint64_t v34 = *i;
            if (*i)
            {
              type metadata accessor for __DataStorage();
              uint64_t v35 = swift_allocObject();
              if (v34 <= 0x3FFFFFFFFFFFFFFELL)
              {
                *(void *)(v35 + 32) = v34;
                *(void *)(v35 + 40) = 0LL;
                *(_BYTE *)(v35 + 64) = 0;
                *(void *)(v35 + 16) = v33;
                *(void *)(v35 + 24) = v34;
                *(void *)(v35 + 48) = destructiveProjectEnumData for PredicateCodableError;
                *(void *)(v35 + 56) = 0LL;
                specialized Data._Representation.init(_:count:)((void *)v35, v34);
                __asm { BR              X9 }
              }

              goto LABEL_76;
            }

            id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_init);
            outlined consume of Data._Representation(0LL, 0xC000000000000000LL);
            *(void *)&__int128 v72 = 0LL;
            unsigned int v31 = objc_msgSend(v1, sel_writeData_error_, v30, &v72);

            if (!v31)
            {
              if (!(void)v72)
              {
                if (one-time initialization token for _nilObjCError != -1) {
                  goto LABEL_80;
                }
                goto LABEL_70;
              }

              (id)v72;
LABEL_71:
              swift_willThrow();
              return swift_bridgeObjectRelease();
            }

            id v32 = (id)v72;
          }

          if (!--v28) {
            return swift_bridgeObjectRelease();
          }
        }
      }
    }

    else
    {
      type metadata accessor for DispatchData();
      lazy protocol witness table accessor for type DispatchData and conformance DispatchData();
      *(void *)&v69[0] = dispatch thunk of Collection.count.getter();
      uint64_t v16 = (void *)MEMORY[0x18961AFE8];
      *(void *)&__int128 v72 = MEMORY[0x18961AFE8];
      MEMORY[0x1895F8858](*(void *)&v69[0]);
      DispatchData.enumerateBytes(_:)();
      uint64_t v17 = v72;
      int64_t v18 = *(void *)(v72 + 16);
      if (v18)
      {
        *(void *)&__int128 v72 = v16;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
        uint64_t v19 = v16;
        unint64_t v20 = v16[2];
        uint64_t v21 = 2 * v20;
        char v22 = (uint64_t *)(v17 + 40);
        do
        {
          uint64_t v23 = *(v22 - 1);
          if (v23) {
            uint64_t v24 = *v22;
          }
          else {
            uint64_t v24 = 0LL;
          }
          *(void *)&__int128 v72 = v19;
          unint64_t v25 = v19[3];
          unint64_t v26 = v20 + 1;
          if (v20 >= v25 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v25 > 1,  v20 + 1,  1);
            uint64_t v19 = (void *)v72;
          }

          v22 += 3;
          v19[2] = v26;
          uint64_t v27 = &v19[v21];
          v27[4] = v23;
          v27[5] = v24;
          v21 += 2LL;
          unint64_t v20 = v26;
          --v18;
        }

        while (v18);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v19 = (void *)MEMORY[0x18961AFE8];
      }

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      }
      uint64_t v59 = v19[2];
      *(void *)&__int128 v72 = v19 + 4;
      *((void *)&v72 + 1) = v59;
      closure #3 in NSFileHandle.write<A>(contentsOf:)((uint64_t)&v72, (uint64_t *)v69, v1);
    }

    return swift_bridgeObjectRelease();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183720D90;
  *(void *)&__int128 v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *((void *)&v72 + 1) = v3;
  uint64_t v4 = MEMORY[0x189617FA8];
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = v4;
  *(void *)(inited + 72) = 0xD00000000000002ELL;
  *(void *)(inited + 80) = 0x80000001839CACA0LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (AnyHashable, Any)(inited + 32, (uint64_t)&v72);
  swift_retain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v72);
  if ((v7 & 1) != 0)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }

  uint64_t v62 = v5 + 64;
  *(void *)(v5 + 64 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v6;
  uint64_t v8 = *(void *)(v5 + 48) + 40 * v6;
  __int128 v9 = v72;
  __int128 v10 = v73;
  *(void *)(v8 + 32) = *(void *)&v74[0];
  *(_OWORD *)uint64_t v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  outlined init with take of Any((_OWORD *)((char *)v74 + 8), (_OWORD *)(*(void *)(v5 + 56) + 32 * v6));
  uint64_t v11 = *(void *)(v5 + 16);
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12)
  {
LABEL_78:
    __break(1u);
    JUMPOUT(0x182FE5510LL);
  }

  *(void *)(v5 + 16) = v13;
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v5 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    BOOL v14 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }

  else
  {
    BOOL v14 = (void *)MEMORY[0x18961AFF0];
  }

  uint64_t v37 = -1LL;
  uint64_t v38 = -1LL << *(_BYTE *)(v5 + 32);
  if (-v38 < 64) {
    uint64_t v37 = ~(-1LL << -(char)v38);
  }
  unint64_t v39 = v37 & *(void *)(v5 + 64);
  int64_t v61 = (unint64_t)(63 - v38) >> 6;
  swift_retain();
  int64_t v40 = 0LL;
  while (1)
  {
    if (v39)
    {
      uint64_t v44 = (v39 - 1) & v39;
      unint64_t v45 = __clz(__rbit64(v39)) | (v40 << 6);
      int64_t v46 = v40;
      goto LABEL_54;
    }

    int64_t v47 = v40 + 1;
    if (__OFADD__(v40, 1LL)) {
      goto LABEL_75;
    }
    if (v47 >= v61) {
      break;
    }
    unint64_t v48 = *(void *)(v62 + 8 * v47);
    int64_t v46 = v40 + 1;
    if (!v48)
    {
      int64_t v46 = v40 + 2;
      if (v40 + 2 >= v61) {
        break;
      }
      unint64_t v48 = *(void *)(v62 + 8 * v46);
      if (!v48)
      {
        int64_t v46 = v40 + 3;
        if (v40 + 3 >= v61) {
          break;
        }
        unint64_t v48 = *(void *)(v62 + 8 * v46);
        if (!v48)
        {
          int64_t v46 = v40 + 4;
          if (v40 + 4 >= v61) {
            break;
          }
          unint64_t v48 = *(void *)(v62 + 8 * v46);
          if (!v48)
          {
            int64_t v46 = v40 + 5;
            if (v40 + 5 >= v61) {
              break;
            }
            unint64_t v48 = *(void *)(v62 + 8 * v46);
            if (!v48)
            {
              int64_t v46 = v40 + 6;
              if (v40 + 6 >= v61) {
                break;
              }
              unint64_t v48 = *(void *)(v62 + 8 * v46);
              if (!v48)
              {
                int64_t v49 = v40 + 7;
                if (v40 + 7 >= v61) {
                  break;
                }
                unint64_t v48 = *(void *)(v62 + 8 * v49);
                if (!v48)
                {
                  while (1)
                  {
                    int64_t v46 = v49 + 1;
                    if (__OFADD__(v49, 1LL)) {
                      break;
                    }
                    if (v46 >= v61) {
                      goto LABEL_60;
                    }
                    unint64_t v48 = *(void *)(v62 + 8 * v46);
                    ++v49;
                    if (v48) {
                      goto LABEL_53;
                    }
                  }

                  __break(1u);
LABEL_80:
                  swift_once();
LABEL_70:
                  id v60 = (id)_nilObjCError;
                  goto LABEL_71;
                }

                int64_t v46 = v40 + 7;
              }
            }
          }
        }
      }
    }

uint64_t specialized NSFileHandle.write<A>(contentsOf:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v64 = *MEMORY[0x1895F89C0];
  if ((_NSFileHandleIsClosed((uint64_t)v3) & 1) == 0)
  {
    if (_NSFileHandleCanPerformWritingInSwiftOverlay(v3)
      && (objc_msgSend(v3, sel_fileDescriptor) & 0x80000000) == 0)
    {
      outlined copy of Data._Representation(a1, a2);
      objc_msgSend(v3, sel_fileDescriptor);
      __asm { BR              X9 }
    }

    outlined copy of Data._Representation(a1, a2);
    id v19 = v3;
    specialized Data._Representation.withUnsafeBytes<A>(_:)(a1, a2);
    return outlined consume of Data._Representation(a1, a2);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183720D90;
  *(void *)&__int128 v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *((void *)&v60 + 1) = v7;
  uint64_t v8 = MEMORY[0x189617FA8];
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = v8;
  *(void *)(inited + 72) = 0xD00000000000002ELL;
  *(void *)(inited + 80) = 0x80000001839CACA0LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v9 = static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (AnyHashable, Any)(inited + 32, (uint64_t)&v60);
  swift_retain();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v60);
  if ((v11 & 1) != 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v48 = v9 + 64;
  *(void *)(v9 + 64 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
  uint64_t v12 = *(void *)(v9 + 48) + 40 * v10;
  __int128 v13 = v60;
  __int128 v14 = v61;
  *(void *)(v12 + 32) = *(void *)&v62[0];
  *(_OWORD *)uint64_t v12 = v13;
  *(_OWORD *)(v12 + 16) = v14;
  outlined init with take of Any((_OWORD *)((char *)v62 + 8), (_OWORD *)(*(void *)(v9 + 56) + 32 * v10));
  uint64_t v15 = *(void *)(v9 + 16);
  BOOL v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  *(void *)(v9 + 16) = v17;
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v9 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    int64_t v18 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }

  else
  {
    int64_t v18 = (void *)MEMORY[0x18961AFF0];
  }

  uint64_t v20 = -1LL;
  uint64_t v21 = -1LL << *(_BYTE *)(v9 + 32);
  if (-v21 < 64) {
    uint64_t v20 = ~(-1LL << -(char)v21);
  }
  unint64_t v22 = v20 & *(void *)(v9 + 64);
  int64_t v47 = (unint64_t)(63 - v21) >> 6;
  uint64_t v23 = (char *)v62 + 8;
  uint64_t v24 = (char *)v58 + 8;
  unint64_t v25 = &v53;
  swift_retain();
  for (int64_t i = 0LL; ; int64_t i = v50)
  {
    if (v22)
    {
      uint64_t v49 = (v22 - 1) & v22;
      int64_t v50 = i;
      unint64_t v33 = __clz(__rbit64(v22)) | (i << 6);
      goto LABEL_38;
    }

    int64_t v34 = i + 1;
    if (__OFADD__(i, 1LL)) {
      goto LABEL_48;
    }
    if (v34 >= v47) {
      break;
    }
    unint64_t v35 = *(void *)(v48 + 8 * v34);
    int64_t v36 = i + 1;
    if (!v35)
    {
      int64_t v36 = i + 2;
      if (i + 2 >= v47) {
        break;
      }
      unint64_t v35 = *(void *)(v48 + 8 * v36);
      if (!v35)
      {
        int64_t v36 = i + 3;
        if (i + 3 >= v47) {
          break;
        }
        unint64_t v35 = *(void *)(v48 + 8 * v36);
        if (!v35)
        {
          int64_t v36 = i + 4;
          if (i + 4 >= v47) {
            break;
          }
          unint64_t v35 = *(void *)(v48 + 8 * v36);
          if (!v35)
          {
            int64_t v36 = i + 5;
            if (i + 5 >= v47) {
              break;
            }
            unint64_t v35 = *(void *)(v48 + 8 * v36);
            if (!v35)
            {
              int64_t v36 = i + 6;
              if (i + 6 >= v47) {
                break;
              }
              unint64_t v35 = *(void *)(v48 + 8 * v36);
              if (!v35)
              {
                uint64_t v37 = i + 7;
                if (i + 7 >= v47) {
                  break;
                }
                unint64_t v35 = *(void *)(v48 + 8 * v37);
                if (!v35)
                {
                  while (1)
                  {
                    int64_t v36 = v37 + 1;
                    if (__OFADD__(v37, 1LL)) {
                      break;
                    }
                    if (v36 >= v47) {
                      goto LABEL_44;
                    }
                    unint64_t v35 = *(void *)(v48 + 8 * v36);
                    ++v37;
                    if (v35) {
                      goto LABEL_37;
                    }
                  }

uint64_t NSFileHandle.write<A>(contentsOf:)( uint64_t a1, ValueMetadata *a2, void (**a3)(int64_t))
{
  uint64_t v109 = *MEMORY[0x1895F89C0];
  swift_getAssociatedTypeWitness();
  uint64_t v92 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v85 = (char *)&v82 - v13;
  id v86 = v7;
  uint64_t v93 = swift_getAssociatedTypeWitness();
  uint64_t v87 = *(void *)(v93 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v93);
  uint64_t v90 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  AssociatedConformanceWitness = (char *)&v82 - v17;
  char v91 = *(uint64_t **)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v83 = (char *)&v82 - v21;
  uint64_t v22 = swift_checkMetadataState();
  MEMORY[0x1895F8858](v22);
  if (a2 == &type metadata for Data) {
    return specialized NSFileHandle.write<A>(contentsOf:)(*(void *)a1, *(void *)(a1 + 8));
  }
  uint64_t v84 = a1;
  if ((ValueMetadata *)type metadata accessor for DispatchData() == a2) {
    return specialized NSFileHandle.write<A>(contentsOf:)();
  }
  int64_t v89 = (int64_t)a2;
  id v23 = v94;
  if ((_NSFileHandleIsClosed((uint64_t)v94) & 1) == 0)
  {
    if (!_NSFileHandleCanPerformWritingInSwiftOverlay(v23)
      || (objc_msgSend(v94, sel_fileDescriptor) & 0x80000000) != 0)
    {
      v92[8](v89);
      unint64_t v40 = v90;
      dispatch thunk of Sequence.makeIterator()();
      AssociatedConformanceWitness = (char *)swift_getAssociatedConformanceWitness();
      dispatch thunk of IteratorProtocol.next()();
      int64_t v50 = v91;
      id v86 = (unsigned int (*)(char *, uint64_t, uint64_t))v91[6];
      if (v86(v12, 1LL, AssociatedTypeWitness) != 1)
      {
        __int128 v51 = (uint64_t (*)(char *, char *, uint64_t))v50[4];
        uint64_t v52 = MEMORY[0x18961AFC8] + 8LL;
        do
        {
          uint64_t v53 = v51(v20, v12, AssociatedTypeWitness);
          MEMORY[0x1895F8858](v53);
          *(&v82 - 2) = (uint64_t)v94;
          uint64_t v54 = swift_getAssociatedConformanceWitness();
          (*(void (**)(_BYTE *(*)(_BYTE *, _BYTE *), uint64_t *, uint64_t, uint64_t, uint64_t))(v54 + 8))( partial apply for closure #1 in NSFileHandle.write<A>(contentsOf:),  &v82 - 4,  v52,  AssociatedTypeWitness,  v54);
          if (v3)
          {
            ((void (*)(char *, uint64_t))v91[1])(v20, AssociatedTypeWitness);
            return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v90, v93);
          }

          ((void (*)(char *, uint64_t))v91[1])(v20, AssociatedTypeWitness);
          uint64_t v55 = v90;
          dispatch thunk of IteratorProtocol.next()();
        }

        while (v86(v12, 1LL, AssociatedTypeWitness) != 1);
        unint64_t v40 = v55;
      }
    }

    else
    {
      v92[8](v89);
      unint64_t v40 = AssociatedConformanceWitness;
      dispatch thunk of Sequence.makeIterator()();
      uint64_t v41 = swift_getAssociatedConformanceWitness();
      uint64_t v42 = v85;
      uint64_t v90 = (char *)v41;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v43 = v91;
      id v86 = (unsigned int (*)(char *, uint64_t, uint64_t))v91[6];
      if (v86(v42, 1LL, AssociatedTypeWitness) != 1)
      {
        id v44 = (void (*)(char *, char *, uint64_t))v43[4];
        uint64_t v45 = MEMORY[0x18961AFC8] + 8LL;
        int64_t v46 = v83;
        do
        {
          v44(v46, v42, AssociatedTypeWitness);
          id v47 = objc_msgSend(v94, sel_fileDescriptor);
          *((_DWORD *)&v82 - 4) = MEMORY[0x1895F8858](v47);
          uint64_t v48 = swift_getAssociatedConformanceWitness();
          (*(void (**)(ssize_t (*)(ssize_t, uint64_t), uint64_t *, uint64_t, uint64_t, uint64_t))(v48 + 8))( partial apply for closure #1 in writeSingleRegion #1 <A><A1>(_:) in NSFileHandle.write<A>(contentsOf:),  &v82 - 4,  v45,  AssociatedTypeWitness,  v48);
          if (v3)
          {
            ((void (*)(char *, uint64_t))v91[1])(v46, AssociatedTypeWitness);
            return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(AssociatedConformanceWitness, v93);
          }

          ((void (*)(char *, uint64_t))v91[1])(v46, AssociatedTypeWitness);
          dispatch thunk of IteratorProtocol.next()();
        }

        while (v86(v42, 1LL, AssociatedTypeWitness) != 1);
        uint64_t v49 = v87;
        unint64_t v40 = AssociatedConformanceWitness;
        return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v40, v93);
      }
    }

    uint64_t v49 = v87;
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v40, v93);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183720D90;
  *(void *)&__int128 v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *((void *)&v105 + 1) = v25;
  uint64_t v26 = MEMORY[0x189617FA8];
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = v26;
  *(void *)(inited + 72) = 0xD00000000000002ELL;
  *(void *)(inited + 80) = 0x80000001839CACA0LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v27 = static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (AnyHashable, Any)(inited + 32, (uint64_t)&v105);
  swift_retain();
  unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v105);
  if ((v29 & 1) != 0) {
    goto LABEL_65;
  }
  uint64_t v30 = (v28 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
  uint64_t v31 = *(void *)(v27 + 64 + v30) | (1LL << v28);
  uint64_t v90 = (char *)(v27 + 64);
  *(void *)(v27 + 64 + v30) = v31;
  uint64_t v32 = *(void *)(v27 + 48) + 40 * v28;
  __int128 v33 = v105;
  __int128 v34 = v106;
  *(void *)(v32 + 32) = *(void *)&v107[0];
  *(_OWORD *)uint64_t v32 = v33;
  *(_OWORD *)(v32 + 16) = v34;
  outlined init with take of Any((_OWORD *)((char *)v107 + 8), (_OWORD *)(*(void *)(v27 + 56) + 32 * v28));
  uint64_t v35 = *(void *)(v27 + 16);
  BOOL v36 = __OFADD__(v35, 1LL);
  uint64_t v37 = v35 + 1;
  if (v36)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }

  *(void *)(v27 + 16) = v37;
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v27 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    __int128 v38 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }

  else
  {
    __int128 v38 = (void *)MEMORY[0x18961AFF0];
  }

  uint64_t v56 = -1LL;
  uint64_t v57 = -1LL << *(_BYTE *)(v27 + 32);
  uint64_t v87 = ~v57;
  if (-v57 < 64) {
    uint64_t v56 = ~(-1LL << -(char)v57);
  }
  unint64_t v58 = v56 & *(void *)(v27 + 64);
  uint64_t v93 = (uint64_t)v103 + 8;
  id v94 = (char *)v107 + 8;
  char v91 = &v100;
  uint64_t v92 = (void (**)(int64_t))&v98;
  AssociatedConformanceWitness = (char *)(v38 + 8);
  int64_t v89 = (unint64_t)(63 - v57) >> 6;
  swift_retain();
  int64_t v59 = 0LL;
  while (1)
  {
    if (v58)
    {
      uint64_t v63 = (v58 - 1) & v58;
      unint64_t v64 = __clz(__rbit64(v58)) | (v59 << 6);
      int64_t v65 = v59;
      goto LABEL_52;
    }

    int64_t v66 = v59 + 1;
    if (__OFADD__(v59, 1LL)) {
      goto LABEL_64;
    }
    if (v66 >= v89) {
      break;
    }
    unint64_t v67 = *(void *)&v90[8 * v66];
    int64_t v65 = v59 + 1;
    if (!v67)
    {
      int64_t v65 = v59 + 2;
      if (v59 + 2 >= v89) {
        break;
      }
      unint64_t v67 = *(void *)&v90[8 * v65];
      if (!v67)
      {
        int64_t v65 = v59 + 3;
        if (v59 + 3 >= v89) {
          break;
        }
        unint64_t v67 = *(void *)&v90[8 * v65];
        if (!v67)
        {
          int64_t v65 = v59 + 4;
          if (v59 + 4 >= v89) {
            break;
          }
          unint64_t v67 = *(void *)&v90[8 * v65];
          if (!v67)
          {
            int64_t v65 = v59 + 5;
            if (v59 + 5 >= v89) {
              break;
            }
            unint64_t v67 = *(void *)&v90[8 * v65];
            if (!v67)
            {
              int64_t v65 = v59 + 6;
              if (v59 + 6 >= v89) {
                break;
              }
              unint64_t v67 = *(void *)&v90[8 * v65];
              if (!v67)
              {
                int64_t v68 = v59 + 7;
                if (v59 + 7 >= v89) {
                  break;
                }
                unint64_t v67 = *(void *)&v90[8 * v68];
                if (!v67)
                {
                  while (1)
                  {
                    int64_t v65 = v68 + 1;
                    if (__OFADD__(v68, 1LL)) {
                      break;
                    }
                    if (v65 >= v89) {
                      goto LABEL_58;
                    }
                    unint64_t v67 = *(void *)&v90[8 * v65];
                    ++v68;
                    if (v67) {
                      goto LABEL_51;
                    }
                  }

_BYTE *closure #1 in NSFileHandle.write<A>(contentsOf:)(_BYTE *result, _BYTE *a2, void *a3)
{
  v11[2] = *(id *)MEMORY[0x1895F89C0];
  if (result)
  {
    unint64_t v4 = (unint64_t)result;
    uint64_t v5 = a2 - result;
    if (a2 != result)
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      unint64_t v6 = (void *)__DataStorage.init(bytes:length:copy:deallocator:offset:)( v4,  v5,  0,  (void (*)(unint64_t, uint64_t))destructiveProjectEnumData for PredicateCodableError,  0LL,  0LL);
      specialized Data._Representation.init(_:count:)(v6, v5);
      __asm { BR              X10 }
    }

    id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_init);
    outlined consume of Data._Representation(0LL, 0xC000000000000000LL);
    v11[0] = 0LL;
    unsigned int v9 = objc_msgSend(a3, sel_writeData_error_, v8, v11);

    if (v9)
    {
      return v11[0];
    }

    else
    {
      if (v11[0])
      {
        v11[0];
      }

      else
      {
        if (one-time initialization token for _nilObjCError != -1) {
          swift_once();
        }
        id v10 = (id)_nilObjCError;
      }

      return (_BYTE *)swift_willThrow();
    }
  }

  return result;
}

ssize_t closure #1 in writeSingleRegion #1 <A><A1>(_:) in NSFileHandle.write<A>(contentsOf:)( ssize_t __buf, uint64_t a2, int __fd)
{
  if (__buf)
  {
    uint64_t v3 = (char *)__buf;
    int64_t v4 = a2 - __buf;
    if (a2 - __buf >= 1)
    {
      do
      {
        while (1)
        {
          __buf = write(__fd, v3, v4);
          if (__buf < 0) {
            break;
          }
          v4 -= __buf;
          v3 += __buf;
          if (v4 <= 0) {
            return __buf;
          }
        }
      }

      while (MEMORY[0x186E1B0E8]() == 35);
      int v6 = MEMORY[0x186E1B0E8]();
      __buf = _NSErrorWithFilePathAndErrno(v6, 0LL, 0);
      if (__buf) {
        return swift_willThrow();
      }
      else {
        __break(1u);
      }
    }
  }

  return __buf;
}

uint64_t closure #3 in NSFileHandle.write<A>(contentsOf:)(uint64_t result, uint64_t *a2, id a3)
{
  uint64_t v3 = *(void *)(result + 8);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  if (v3 > 0x7FFFFFFF) {
    goto LABEL_33;
  }
  if (*a2 < 1) {
    return result;
  }
  int v6 = *(const iovec **)result;
  do
  {
    while (1)
    {
      unint64_t result = writev((int)objc_msgSend(a3, sel_fileDescriptor), v6, v3);
      if (result < 0) {
        break;
      }
      uint64_t v7 = *a2 - result;
      if (__OFSUB__(*a2, result)) {
        goto LABEL_34;
      }
      *a2 = v7;
      if (v7 < 1) {
        return result;
      }
      if ((v3 & 0x80000000) != 0) {
        goto LABEL_35;
      }
      unint64_t v8 = 0LL;
      if ((_DWORD)v3)
      {
        unsigned int v9 = 0LL;
        id v10 = v6;
        while (1)
        {
          if (v3 == v8)
          {
            __break(1u);
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }

          if (!v6) {
            goto LABEL_39;
          }
          size_t iov_len = v10->iov_len;
          BOOL v12 = __OFADD__(v9, iov_len);
          uint64_t v13 = (NSError *)((char *)v9 + iov_len);
          if (v12) {
            goto LABEL_31;
          }
          ++v8;
          ++v10;
          unsigned int v9 = v13;
          if (v3 == v8)
          {
            unint64_t v8 = v3;
            goto LABEL_22;
          }
        }

        if (!v10->iov_base) {
          goto LABEL_41;
        }
        BOOL v12 = __OFSUB__(result, v9);
        uint64_t v14 = (char *)(result - (void)v9);
        if (v12) {
          goto LABEL_38;
        }
        v10->iov_base = (char *)v10->iov_base + (unint64_t)v14;
LABEL_22:
        if (v8 >> 31) {
          goto LABEL_36;
        }
      }

      BOOL v12 = __OFSUB__((_DWORD)v3, (_DWORD)v8);
      LODWORD(v3) = v3 - v8;
      if (v12) {
        goto LABEL_37;
      }
      uint64_t v15 = &v6[v8];
      if (v6) {
        int v6 = v15;
      }
      else {
        int v6 = 0LL;
      }
    }
  }

  while (MEMORY[0x186E1B0E8]() == 35);
  int v16 = MEMORY[0x186E1B0E8]();
  unint64_t result = _NSErrorWithFilePathAndErrno(v16, 0LL, 0);
  if (result) {
    return swift_willThrow();
  }
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)( uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = v3[2];
  if (!v4)
  {
    if (!__OFSUB__(a2, result))
    {
      uint64_t v9 = 0LL;
      uint64_t v11 = 0LL;
      return a3(v9, v11);
    }

    goto LABEL_10;
  }

  uint64_t v5 = v3[5];
  BOOL v6 = __OFSUB__(result, v5);
  uint64_t v7 = result - v5;
  if (!v6)
  {
    uint64_t v8 = a2 - result;
    if (!__OFSUB__(a2, result))
    {
      uint64_t v9 = v4 + v7;
      uint64_t v10 = v3[3];
      if (v10 >= v8) {
        uint64_t v10 = v8;
      }
      uint64_t v11 = v9 + v10;
      return a3(v9, v11);
    }

void specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_182FE6F58()
{
  uint64_t v4 = v1;
  __int16 v5 = v2;
  char v6 = BYTE2(v2);
  char v7 = BYTE3(v2);
  char v8 = BYTE4(v2);
  char v9 = BYTE5(v2);
  return v0(&v4, (char *)&v4 + BYTE6(v2));
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  JUMPOUT(0x186E1C378LL);
}

_BYTE *partial apply for closure #1 in NSFileHandle.write<A>(contentsOf:)(_BYTE *a1, _BYTE *a2)
{
  return closure #1 in NSFileHandle.write<A>(contentsOf:)(a1, a2, *(void **)(v2 + 16));
}

ssize_t partial apply for closure #1 in writeSingleRegion #1 <A><A1>(_:) in NSFileHandle.write<A>(contentsOf:)( ssize_t a1, uint64_t a2)
{
  return closure #1 in writeSingleRegion #1 <A><A1>(_:) in NSFileHandle.write<A>(contentsOf:)( a1,  a2,  *(_DWORD *)(v2 + 16));
}

uint64_t outlined init with copy of (AnyHashable, Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (key: AnyHashable, value: Any)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: AnyHashable, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in DispatchData.regions.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in DispatchData.regions.getter(a1, a2, a3, a4, *(uint64_t **)(v4 + 16));
}

unint64_t lazy protocol witness table accessor for type DispatchData and conformance DispatchData()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchData and conformance DispatchData;
  if (!lazy protocol witness table cache variable for type DispatchData and conformance DispatchData)
  {
    uint64_t v1 = type metadata accessor for DispatchData();
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961B770], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
  }

  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS10Foundation13JSONReferenceCG_So8NSStringC3key_AH5valuets5NeverOTg5061_s10Foundation10JSONWriterV15serializeObject_5depthySDySSAA13e11CG_SitKFSo8F31C3key_AG5valuetSSAK_AgLt_tXEfU_Tf1cn_n( uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v28 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v28;
  uint64_t result = specialized Dictionary.startIndex.getter(v3);
  uint64_t v6 = result;
  uint64_t v7 = 0LL;
  uint64_t v8 = v3 + 64;
  uint64_t v23 = v3 + 80;
  int64_t v24 = v1;
  int v25 = v5;
  uint64_t v26 = v3 + 64;
  while ((v6 & 0x8000000000000000LL) == 0 && v6 < 1LL << *(_BYTE *)(v3 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v27 = v7;
    uint64_t v12 = *(void *)(*(void *)(v3 + 56) + 8 * v6);
    uint64_t v13 = String._bridgeToObjectiveCImpl()();
    uint64_t v14 = v3;
    unint64_t v16 = *(void *)(v28 + 16);
    unint64_t v15 = *(void *)(v28 + 24);
    uint64_t result = swift_retain();
    if (v16 >= v15 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v15 > 1,  v16 + 1,  1);
    }
    *(void *)(v28 + 16) = v16 + 1;
    uint64_t v17 = v28 + 16 * v16;
    *(void *)(v17 + 32) = v13;
    *(void *)(v17 + 40) = v12;
    int64_t v9 = 1LL << *(_BYTE *)(v14 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = v26;
    uint64_t v18 = *(void *)(v26 + 8 * v11);
    if ((v18 & (1LL << v6)) == 0) {
      goto LABEL_26;
    }
    uint64_t v3 = v14;
    int v5 = v25;
    if (*(_DWORD *)(v14 + 36) != v25) {
      goto LABEL_27;
    }
    unint64_t v19 = v18 & (-2LL << (v6 & 0x3F));
    if (v19)
    {
      int64_t v9 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v10 = v24;
    }

    else
    {
      unint64_t v20 = v11 + 1;
      unint64_t v21 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v24;
      if (v11 + 1 < v21)
      {
        unint64_t v22 = *(void *)(v26 + 8 * v20);
        if (v22)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v22)) + (v20 << 6);
        }

        else
        {
          while (v21 - 2 != v11)
          {
            unint64_t v22 = *(void *)(v23 + 8 * v11++);
            if (v22)
            {
              unint64_t v20 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }

    uint64_t v7 = v27 + 1;
    uint64_t v6 = v9;
    if (v27 + 1 == v10) {
      return v2;
    }
  }

  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

Swift::String __swiftcall String.serializedForJSON(withoutEscapingSlashes:)(Swift::Bool withoutEscapingSlashes)
{
  unint64_t v6 = v2;
  uint64_t v7 = v1;
  if ((v2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v42 = String.UTF8View._foreignCount()();
    uint64_t v10 = v42 + 2;
    if (!__OFADD__(v42, 2LL)) {
      goto LABEL_6;
    }
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }

  if ((v2 & 0x2000000000000000LL) != 0) {
    uint64_t v9 = HIBYTE(v2) & 0xF;
  }
  else {
    uint64_t v9 = v1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v9 + 2;
  if (__OFADD__(v9, 2LL)) {
    goto LABEL_83;
  }
LABEL_6:
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v10 & ~(v10 >> 63),  0,  MEMORY[0x18961AFE8]);
  unint64_t v5 = *((void *)v3 + 2);
  uint64_t v10 = *((void *)v3 + 3);
  int64_t v4 = v5 + 1;
  if (v5 >= (unint64_t)v10 >> 1) {
LABEL_84:
  }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)((unint64_t)v10 > 1),  v4,  1,  v3);
  *((void *)v3 + 2) = v4;
  v3[v5 + 32] = 34;
  uint64_t v49 = v3;
  swift_bridgeObjectRetain();
  if ((v6 & 0x1000000000000000LL) != 0)
  {
    uint64_t v7 = static String._copying(_:)();
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    unint64_t v6 = v12;
  }

  if ((v6 & 0x2000000000000000LL) == 0)
  {
    if ((v7 & 0x1000000000000000LL) != 0)
    {
      uint64_t v13 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = v7 & 0xFFFFFFFFFFFFLL;
      if ((v7 & 0xFFFFFFFFFFFFLL) == 0) {
        goto LABEL_76;
      }
    }

    else
    {
      uint64_t v43 = _StringObject.sharedUTF8.getter();
      if (!v43)
      {
        __break(1u);
        JUMPOUT(0x182FE7B20LL);
      }

      uint64_t v13 = (char *)v43;
      if (v14 < 1) {
        goto LABEL_76;
      }
    }

    unint64_t v15 = &v13[v14];
    unint64_t v16 = v13;
    while (1)
    {
      unsigned int v17 = *v13;
      unint64_t v18 = 0xE200000000000000LL;
      Swift::Int v19 = 8796LL;
      switch(*v13)
      {
        case 8:
          Swift::Int v19 = 25180LL;
          if (v16 < v13) {
            goto LABEL_36;
          }
          goto LABEL_37;
        case 9:
          Swift::Int v19 = 29788LL;
          if (v16 >= v13) {
            goto LABEL_37;
          }
          goto LABEL_36;
        case 10:
          Swift::Int v19 = 28252LL;
          if (v16 >= v13) {
            goto LABEL_37;
          }
          goto LABEL_36;
        case 11:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
          goto LABEL_19;
        case 12:
          Swift::Int v19 = 26204LL;
          if (v16 >= v13) {
            goto LABEL_37;
          }
          goto LABEL_36;
        case 13:
          Swift::Int v19 = 29276LL;
          if (v16 >= v13) {
            goto LABEL_37;
          }
          goto LABEL_36;
        case 34:
          goto LABEL_35;
        case 47:
          if (withoutEscapingSlashes) {
            goto LABEL_23;
          }
          Swift::Int v19 = 12124LL;
          if (v16 >= v13) {
            goto LABEL_37;
          }
          goto LABEL_36;
        default:
          if (v17 == 92)
          {
            unint64_t v18 = 0xE200000000000000LL;
            Swift::Int v19 = 23644LL;
            if (v16 >= v13) {
              goto LABEL_37;
            }
            goto LABEL_36;
          }

void specialized String.withUTF8<A>(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if ((v4 & 0x1000000000000000LL) != 0)
  {
    uint64_t v3 = static String._copying(_:)();
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    *a1 = v3;
    a1[1] = v16;
    unint64_t v4 = v16;
    if ((v16 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
    goto LABEL_39;
  }

  if ((v4 & 0x2000000000000000LL) != 0)
  {
LABEL_39:
    uint64_t v17 = HIBYTE(v4) & 0xF;
    uint64_t v27 = v3;
    uint64_t v28 = v4 & 0xFFFFFFFFFFFFFFLL;
    if (!v17) {
      return;
    }
    unint64_t v18 = (uint64_t *)((char *)&v27 + v17);
    Swift::Int v19 = &v27;
    unint64_t v20 = &v27;
    while (1)
    {
      unsigned int v21 = *(unsigned __int8 *)v19;
      unint64_t v22 = 0xE200000000000000LL;
      switch(*(_BYTE *)v19)
      {
        case 8:
          if (v20 < v19) {
            goto LABEL_64;
          }
          goto LABEL_65;
        case 9:
          if (v20 >= v19) {
            goto LABEL_65;
          }
          goto LABEL_64;
        case 0xA:
          if (v20 >= v19) {
            goto LABEL_65;
          }
          goto LABEL_64;
        case 0xB:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
          goto LABEL_47;
        case 0xC:
          if (v20 >= v19) {
            goto LABEL_65;
          }
          goto LABEL_64;
        case 0xD:
          if (v20 >= v19) {
            goto LABEL_65;
          }
          goto LABEL_64;
        case 0x22:
          goto LABEL_63;
        case 0x2F:
          if ((*(_BYTE *)(a2 + 10) & 1) != 0) {
            goto LABEL_51;
          }
          if (v20 >= v19) {
            goto LABEL_65;
          }
          goto LABEL_64;
        default:
          if (v21 == 92)
          {
            unint64_t v22 = 0xE200000000000000LL;
            if (v20 < v19) {
              goto LABEL_64;
            }
LABEL_65:
            swift_bridgeObjectRetain();
            if ((v22 & 0xF00000000000000LL) != 0) {
              Data._Representation.append(contentsOf:)();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            Swift::Int v19 = (uint64_t *)((char *)v19 + 1);
            unint64_t v20 = v19;
            if (v19 >= v18)
            {
LABEL_71:
              if (v20 < v19) {
                goto LABEL_72;
              }
              return;
            }
          }

          else
          {
LABEL_47:
            if (v21 < 0x10)
            {
              unint64_t v23 = 0xE500000000000000LL;
              goto LABEL_62;
            }

            if (v21 <= 0x1F)
            {
              unint64_t v23 = 0xE400000000000000LL;
LABEL_62:
              unint64_t v26 = v23;
              char v29 = *(_BYTE *)v19;
              lazy protocol witness table accessor for type UInt8 and conformance UInt8();
              v24._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
              String.append(_:)(v24);
              swift_bridgeObjectRelease();
              unint64_t v22 = v26;
LABEL_63:
              if (v20 >= v19) {
                goto LABEL_65;
              }
LABEL_64:
              Data._Representation.append(contentsOf:)();
              goto LABEL_65;
            }

LABEL_3:
  if ((v3 & 0x1000000000000000LL) != 0)
  {
    unint64_t v5 = (_BYTE *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
    if ((v3 & 0xFFFFFFFFFFFFLL) == 0) {
      return;
    }
  }

  else
  {
    uint64_t v25 = _StringObject.sharedUTF8.getter();
    if (!v25)
    {
      __break(1u);
      JUMPOUT(0x182FE825CLL);
    }

    unint64_t v5 = (_BYTE *)v25;
    if (v6 < 1) {
      return;
    }
  }

  uint64_t v7 = &v5[v6];
  uint64_t v8 = v5;
  while (2)
  {
    unsigned int v9 = *v5;
    unint64_t v10 = 0xE200000000000000LL;
    uint64_t v11 = 8796LL;
    switch(*v5)
    {
      case 8:
        uint64_t v11 = 25180LL;
        if (v8 < v5) {
          goto LABEL_29;
        }
        goto LABEL_30;
      case 9:
        uint64_t v11 = 29788LL;
        if (v8 >= v5) {
          goto LABEL_30;
        }
        goto LABEL_29;
      case 0xA:
        uint64_t v11 = 28252LL;
        if (v8 >= v5) {
          goto LABEL_30;
        }
        goto LABEL_29;
      case 0xB:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
        goto LABEL_12;
      case 0xC:
        uint64_t v11 = 26204LL;
        if (v8 >= v5) {
          goto LABEL_30;
        }
        goto LABEL_29;
      case 0xD:
        uint64_t v11 = 29276LL;
        if (v8 >= v5) {
          goto LABEL_30;
        }
        goto LABEL_29;
      case 0x22:
        goto LABEL_28;
      case 0x2F:
        if ((*(_BYTE *)(a2 + 10) & 1) != 0) {
          goto LABEL_16;
        }
        uint64_t v11 = 12124LL;
        if (v8 >= v5) {
          goto LABEL_30;
        }
        goto LABEL_29;
      default:
        if (v9 == 92)
        {
          unint64_t v10 = 0xE200000000000000LL;
          uint64_t v11 = 23644LL;
          if (v8 >= v5) {
            goto LABEL_30;
          }
LABEL_29:
          Data._Representation.append(contentsOf:)();
          goto LABEL_30;
        }

    ++v7;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    if (v7 == v6) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

      ++v7;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      if (v7 == v6) {
        goto LABEL_25;
      }
    }

    if (v19 != v18 || v19 >= &v18[8 * v12]) {
      memmove(v19, v18, 8 * v12);
    }
    __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
    Swift::Int v19 = (char *)v4[5];
    goto LABEL_19;
  }

    _HashTable.BucketIterator.advance()();
    uint64_t v15 = v23;
    Swift::String v13 = v24;
    unsigned int v9 = v25;
    uint64_t v11 = v26;
    unint64_t v12 = v27;
    unint64_t v10 = v28;
    if (!v25) {
      return _HashTable.UnsafeHandle.subscript.setter();
    }
  }

  __break(1u);
  return result;
}

      ++v7;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      if (v7 == v6) {
        goto LABEL_25;
      }
    }

    if (result != v18 || result >= &v18[8 * v12]) {
      memmove(result, v18, 8 * v12);
    }
    __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
    Swift::String result = (char *)v4[5];
    goto LABEL_19;
  }

      unsigned int v9 = 0LL;
      goto LABEL_16;
    }

    ++v9;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    if (v9 == v8) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

    unint64_t v2 = v0[1];
    if (v1 == v2) {
      goto LABEL_29;
    }
    *uint64_t v0 = v1 + 1;
    if (v1 + 1 == v2) {
      goto LABEL_29;
    }
    uint64_t v3 = *v1;
    goto LABEL_20;
  }

  unint64_t v4 = 1;
  *((_BYTE *)v0 + 17) = 1;
  if (!v1) {
    return v1 | ((unint64_t)v4 << 32);
  }
  unint64_t v2 = v0[1];
  if (v1 == v2) {
    goto LABEL_29;
  }
  unint64_t v5 = v1 + 1;
  *uint64_t v0 = v1 + 1;
  uint64_t v3 = *v1;
  if (!*v1 || v3 == 255)
  {
    if (v5 == v2) {
      goto LABEL_29;
    }
    *uint64_t v0 = v1 + 2;
    if (v1 + 2 == v2) {
      goto LABEL_29;
    }
    uint64_t v6 = v1[1];
    *uint64_t v0 = v1 + 3;
    if (v1 + 3 == v2) {
      goto LABEL_29;
    }
    uint64_t v7 = v1[2];
    uint64_t v8 = v1 + 4;
    *uint64_t v0 = v1 + 4;
    unsigned int v9 = v1[3];
    if (v3 != 255 || v6 != 254 || v7 || v9)
    {
      if (v3 || v6 || v7 != 254 || v9 != 255)
      {
        unint64_t v4 = 0;
        Swift::String v13 = v3 | (v6 << 8) | (v7 << 16);
        goto LABEL_23;
      }

      unint64_t v18 = *((unsigned __int8 *)v0 + 16);
      if (v18 != 2)
      {
        unint64_t v4 = 0;
        if ((v18 & 1) != 0) {
          LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, v1) = 65279;
        }
        else {
          LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, v1) = -131072;
        }
        return v1 | ((unint64_t)v4 << 32);
      }

      *((_BYTE *)v0 + 16) = 1;
    }

    else
    {
      unint64_t v10 = *((unsigned __int8 *)v0 + 16);
      if (v10 != 2)
      {
        unint64_t v4 = 0;
        if ((v10 & 1) != 0) {
          LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, v1) = -131072;
        }
        else {
          LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, v1) = 65279;
        }
        return v1 | ((unint64_t)v4 << 32);
      }

      *((_BYTE *)v0 + 16) = 0;
    }

    uint64_t v1 = v8;
    goto LABEL_3;
  }

  if (v5 == v2)
  {
LABEL_29:
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, v1) = 0;
    goto LABEL_30;
  }

  uint64_t v6 = 0;
LABEL_4:
  Limit = ucal_getLimit();
  uint64_t v8 = ucal_getLimit();
  unsigned int v9 = v8 - Limit;
  if (__OFSUB__(v8, Limit))
  {
    __break(1u);
    goto LABEL_58;
  }

  unint64_t v10 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  uint64_t v11 = ucal_get();
  unint64_t v12 = v11 + a2;
  if (__OFADD__(v11, (_DWORD)a2))
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }

  Swift::String v13 = __OFSUB__(v12, Limit);
  uint64_t v14 = v12 - Limit;
  if (v13)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }

  if (!v10)
  {
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  if (v14 == 0x80000000 && v10 == -1) {
    goto LABEL_66;
  }
  uint64_t v15 = v14 % v10;
  if (v15 < 0)
  {
    Swift::String v13 = __OFADD__(v15, v10);
    v15 += v10;
    if (v13)
    {
LABEL_68:
      __break(1u);
      JUMPOUT(0x1833702F8LL);
    }
  }

  uint64_t v16 = v15 + Limit;
  if (__OFADD__(v15, Limit)) {
    goto LABEL_62;
  }
  if (v16 >= v11 || a2 < 1)
  {
    LODWORD(a2) = v16 - v11;
    if (__OFSUB__(v16, v11))
    {
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }

    unint64_t v18 = 0.0;
    if (!v6)
    {
      Swift::Int v19 = 0;
      unint64_t v20 = 0;
      unsigned int v21 = 0;
      goto LABEL_35;
    }
  }

  else
  {
    ucal_getMillis();
    unint64_t v23 = v22 / 1000.0 + -978307200.0;
    else {
      Swift::String v24 = 0x5040303u >> (8 * (a1 - 10));
    }
    unint64_t v18 = _CalendarICU.totalSecondsInSmallUnits(_:status:)(a1);
    LOBYTE(v36) = v24;
    uint64_t v37 = v23;
    _CalendarICU._locked_setToFirstInstant(of:at:)((unsigned __int8 *)&v36);
    if ((v6 & 1) == 0)
    {
      Swift::Int v19 = 0;
      unint64_t v20 = 0;
      unsigned int v21 = 0;
      LODWORD(a2) = v16;
      goto LABEL_35;
    }

    LODWORD(a2) = v16;
  }

    ++v5;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    if (v5 == v4) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

    ++v6;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
    if (v6 == v5) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

    ++v9;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
    if (v9 == v8) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

  LOBYTE(v28[0]) = v11;
  return v10 | ((unint64_t)v11 << 32);
}

  uint64_t v3 = 0LL;
  unint64_t v4 = 1;
  return v3 | ((unint64_t)v4 << 32);
}

          unint64_t v10 = v275;
          goto LABEL_4;
        }
      }
    }

  uint64_t v3 = 0;
LABEL_6:
  objc_sync_exit(self);
  return v3;
}

  uint64_t v8 = *v7;
  if (v6 == 0xC000000000000007LL) {
    uint64_t v8 = 0LL;
  }
  unsigned int v9 = v8 ^ (unint64_t)self;
  if ((~(_BYTE)v9 & 7) != 0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = 0xFFFFFFFFFFFFFLL;
  }
  if ((v10 & (v9 >> 3)) != 0) {
    goto LABEL_17;
  }
}

        v7 += 2LL;
        continue;
    }
  }

uint64_t specialized String.withUTF8<A>(_:)(uint64_t (*a1)(void *, uint64_t))
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  if ((v4 & 0x1000000000000000LL) == 0)
  {
    if ((v4 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v5 = v10;
    return a1(v5, v6);
  }

  uint64_t v3 = static String._copying(_:)();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t *v1 = v3;
  v1[1] = v8;
  unint64_t v4 = v8;
  if ((v8 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v3 & 0x1000000000000000LL) != 0)
  {
    unint64_t v5 = (void *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    unint64_t v5 = (void *)_StringObject.sharedUTF8.getter();
  }

  return a1(v5, v6);
}

uint64_t closure #2 in String.serializedForJSON(withoutEscapingSlashes:)( void *a1, int64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  int64_t v5 = *(void *)(*a3 + 16);
  if (!v5) {
    return 0LL;
  }
  if (a1)
  {
    if (v5 <= a2)
    {
      if (v4 + 32 >= (unint64_t)a1 + v5 || v4 + 32 + v5 <= (unint64_t)a1)
      {
        memcpy(a1, (const void *)(v4 + 32), v5);
        return *(void *)(*a3 + 16);
      }

      goto LABEL_12;
    }

    __break(1u);
  }

  __break(1u);
LABEL_12:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void JSONWriter.serializeJSON(_:depth:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_182FE8554()
{
  v2._uint64_t countAndFlagsBits = v1;
  v2._unint64_t object = v0;
  JSONWriter.serializeString(_:)(v2);
  return outlined consume of JSONReference.Backing(v1, (uint64_t)v0, 0);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONWriter.serializeString(_:)( Swift::String a1)
{
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v5 = 34LL;
  unint64_t v6 = 0xE100000000000000LL;
  specialized String.withUTF8<A>(_:)(&v5);
  swift_bridgeObjectRelease();
  uint64_t v5 = countAndFlagsBits;
  unint64_t v6 = (unint64_t)object;
  swift_bridgeObjectRetain();
  specialized String.withUTF8<A>(_:)(&v5, v1);
  swift_bridgeObjectRelease();
  v4[0] = 34LL;
  v4[1] = 0xE100000000000000LL;
  specialized String.withUTF8<A>(_:)(v4);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONWriter.serializeArray(_:depth:)( Swift::OpaquePointer _, Swift::Int depth)
{
  if (depth > 511)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(void *)(v6 + 16) = 0LL;
    *(void *)(v6 + 24) = 1LL;
    *(void *)(v6 + 32) = 0LL;
    *(void *)(v6 + 40) = 0LL;
    *(_BYTE *)(v6 + 48) = 2;
    swift_willThrow();
    return;
  }

  uint64_t v7 = 91LL;
  unint64_t v8 = 0xE100000000000000LL;
  specialized String.withUTF8<A>(_:)(&v7);
  swift_bridgeObjectRelease();
  if (*((_BYTE *)v2 + 8) == 1)
  {
    uint64_t v7 = 10LL;
    unint64_t v8 = 0xE100000000000000LL;
    specialized String.withUTF8<A>(_:)(&v7);
    swift_bridgeObjectRelease();
    if (__OFADD__(*v2, 1LL))
    {
      __break(1u);
      goto LABEL_22;
    }

    ++*v2;
  }

  uint64_t v4 = *(void *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (1)
    {
      unint64_t v9 = (unint64_t)_._rawValue & 0xC000000000000001LL;
      if (*(void *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8LL) + 0x10))
      {
        uint64_t v5 = *((void *)_._rawValue + 4);
        swift_retain();
LABEL_11:
        if ((v2[1] & 1) != 0) {
          JSONWriter.writeIndent()();
        }
        __asm { BR              X9 }
      }

      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_17;
      }
    }

    uint64_t v5 = MEMORY[0x186E1C36C](0LL, _._rawValue);
    goto LABEL_11;
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONWriter.serializePreformattedStringArray(_:depth:)( Swift::OpaquePointer _, Swift::Int depth)
{
  if (depth > 511)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v15 = 0LL;
    *(void *)(v15 + 8) = 0LL;
    *(void *)(v15 + 16) = 0LL;
    *(void *)(v15 + 24) = 1LL;
    *(void *)(v15 + 32) = 0LL;
    *(void *)(v15 + 40) = 0LL;
    *(_BYTE *)(v15 + 48) = 2;
    swift_willThrow();
    return;
  }

  uint64_t v3 = v2;
  *(void *)&__int128 v16 = 91LL;
  *((void *)&v16 + 1) = 0xE100000000000000LL;
  specialized String.withUTF8<A>(_:)((uint64_t *)&v16);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    *(void *)&__int128 v16 = 10LL;
    *((void *)&v16 + 1) = 0xE100000000000000LL;
    specialized String.withUTF8<A>(_:)((uint64_t *)&v16);
    swift_bridgeObjectRelease();
    if (__OFADD__(*(void *)v2, 1LL))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    ++*(void *)v2;
  }

  uint64_t v5 = *((void *)_._rawValue + 2);
  if (!v5) {
    goto LABEL_30;
  }
  uint64_t v17 = (char *)&v16 + 1;
  swift_bridgeObjectRetain();
  uint64_t v6 = (uint64_t *)((char *)_._rawValue + 40);
  char v7 = 1;
  uint64_t v8 = 1 - v5;
  while (1)
  {
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    int v11 = *(unsigned __int8 *)(v3 + 8);
    swift_bridgeObjectRetain();
    if ((v7 & 1) != 0)
    {
      if ((v11 & 1) == 0) {
        goto LABEL_10;
      }
LABEL_9:
      JSONWriter.writeIndent()();
      goto LABEL_10;
    }

    if (v11) {
      __int128 v16 = xmmword_18372DC80;
    }
    else {
      __int128 v16 = xmmword_18372DC70;
    }
    Data._Representation.append(contentsOf:)();
    swift_bridgeObjectRelease();
    if (*(_BYTE *)(v3 + 8) == 1) {
      goto LABEL_9;
    }
LABEL_10:
    swift_bridgeObjectRetain();
    if ((v9 & 0x1000000000000000LL) != 0)
    {
      uint64_t v10 = static String._copying(_:)();
      uint64_t v12 = v13;
      swift_bridgeObjectRelease();
      if ((v12 & 0x2000000000000000LL) != 0)
      {
LABEL_21:
        *(void *)&__int128 v16 = v10;
        *((void *)&v16 + 1) = v12 & 0xFFFFFFFFFFFFFFLL;
        if ((v12 & 0xF00000000000000LL) == 0) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v12 = v9;
      if ((v9 & 0x2000000000000000LL) != 0) {
        goto LABEL_21;
      }
    }

    if ((v10 & 0x1000000000000000LL) != 0)
    {
      if ((v10 & 0xFFFFFFFFFFFFLL) == 0) {
        goto LABEL_23;
      }
LABEL_22:
      Data._Representation.append(contentsOf:)();
      goto LABEL_23;
    }

    _StringObject.sharedUTF8.getter();
    if (v14) {
      goto LABEL_22;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v8) {
      break;
    }
    char v7 = 0;
    v6 += 2;
    if (++v8 == 1)
    {
      __break(1u);
      goto LABEL_34;
    }
  }

  swift_bridgeObjectRelease();
LABEL_30:
  if (*(_BYTE *)(v3 + 8) == 1)
  {
    *(void *)&__int128 v16 = 10LL;
    *((void *)&v16 + 1) = 0xE100000000000000LL;
    specialized String.withUTF8<A>(_:)((uint64_t *)&v16);
    swift_bridgeObjectRelease();
    if (!__OFSUB__(*(void *)v3, 1LL))
    {
      --*(void *)v3;
      JSONWriter.writeIndent()();
      goto LABEL_33;
    }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONWriter.serializeObject(_:depth:)( Swift::OpaquePointer _, Swift::Int depth)
{
  if (depth > 511)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v17 = 0LL;
    *(void *)(v17 + 8) = 0LL;
    *(void *)(v17 + 16) = 0LL;
    *(void *)(v17 + 24) = 1LL;
    *(void *)(v17 + 32) = 0LL;
    *(void *)(v17 + 40) = 0LL;
    *(_BYTE *)(v17 + 48) = 2;
    swift_willThrow();
    return;
  }

  uint64_t v44 = 123LL;
  unint64_t v45 = 0xE100000000000000LL;
  specialized String.withUTF8<A>(_:)(&v44);
  uint64_t v5 = v3;
  swift_bridgeObjectRelease();
  if (*((_BYTE *)v2 + 8) == 1)
  {
    uint64_t v44 = 10LL;
    unint64_t v45 = 0xE100000000000000LL;
    specialized String.withUTF8<A>(_:)(&v44);
    swift_bridgeObjectRelease();
    if (__OFADD__(*v2, 1LL)) {
      goto LABEL_71;
    }
    ++*v2;
    if (*((void *)_._rawValue + 2)) {
      JSONWriter.writeIndent()();
    }
  }

  if (*((_BYTE *)v2 + 9) == 1)
  {
    if (one-time initialization token for compatibility1 != -1) {
      goto LABEL_72;
    }
    goto LABEL_8;
  }

  uint64_t v40 = (char *)_._rawValue + 64;
  char v18 = 1;
  uint64_t v19 = 1LL << *((_BYTE *)_._rawValue + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & *((void *)_._rawValue + 8);
  int64_t v41 = (unint64_t)(v19 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v22 = 0LL;
  while (v21)
  {
    unint64_t v23 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
    unint64_t v24 = v23 | (v22 << 6);
LABEL_41:
    uint64_t v28 = (uint64_t *)(*((void *)_._rawValue + 6) + 16 * v24);
    uint64_t v30 = *v28;
    unint64_t v29 = v28[1];
    uint64_t v31 = *(void *)(*((void *)_._rawValue + 7) + 8 * v24);
    if ((v18 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }

    else if ((v2[1] & 1) != 0)
    {
      uint64_t v44 = 2604LL;
      unint64_t v45 = 0xE200000000000000LL;
      swift_bridgeObjectRetain();
      swift_retain();
      specialized String.withUTF8<A>(_:)(&v44);
      swift_bridgeObjectRelease();
      JSONWriter.writeIndent()();
    }

    else
    {
      uint64_t v44 = 44LL;
      unint64_t v45 = 0xE100000000000000LL;
      swift_bridgeObjectRetain();
      swift_retain();
      specialized String.withUTF8<A>(_:)(&v44);
      swift_bridgeObjectRelease();
    }

    uint64_t v44 = 34LL;
    unint64_t v45 = 0xE100000000000000LL;
    specialized String.withUTF8<A>(_:)(&v44);
    swift_bridgeObjectRelease();
    uint64_t v44 = v30;
    unint64_t v45 = v29;
    swift_bridgeObjectRetain();
    specialized String.withUTF8<A>(_:)(&v44, (uint64_t)v2);
    swift_bridgeObjectRelease();
    uint64_t v42 = 34LL;
    unint64_t v43 = 0xE100000000000000LL;
    specialized String.withUTF8<A>(_:)(&v42);
    swift_bridgeObjectRelease();
    if (*((_BYTE *)v2 + 8) == 1)
    {
      uint64_t v44 = 2112032LL;
      unint64_t v45 = 0xE300000000000000LL;
    }

    else
    {
      uint64_t v44 = 58LL;
      unint64_t v45 = 0xE100000000000000LL;
    }

    specialized String.withUTF8<A>(_:)(&v44);
    swift_bridgeObjectRelease();
    JSONWriter.serializeJSON(_:depth:)(v31);
    swift_bridgeObjectRelease();
    swift_release();
    char v18 = 0;
    if (v5)
    {
      swift_release();
      return;
    }
  }

  if (__OFADD__(v22++, 1LL))
  {
    __break(1u);
    goto LABEL_70;
  }

  if (v22 >= v41) {
    goto LABEL_65;
  }
  unint64_t v26 = *(void *)&v40[8 * v22];
  if (v26)
  {
LABEL_40:
    unint64_t v21 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v22 << 6);
    goto LABEL_41;
  }

  int64_t v27 = v22 + 1;
  if (v22 + 1 >= v41) {
    goto LABEL_65;
  }
  unint64_t v26 = *(void *)&v40[8 * v27];
  if (v26) {
    goto LABEL_39;
  }
  int64_t v27 = v22 + 2;
  if (v22 + 2 >= v41) {
    goto LABEL_65;
  }
  unint64_t v26 = *(void *)&v40[8 * v27];
  if (v26) {
    goto LABEL_39;
  }
  int64_t v27 = v22 + 3;
  if (v22 + 3 >= v41) {
    goto LABEL_65;
  }
  unint64_t v26 = *(void *)&v40[8 * v27];
  if (v26)
  {
LABEL_39:
    int64_t v22 = v27;
    goto LABEL_40;
  }

  while (1)
  {
    int64_t v22 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v22 >= v41) {
      goto LABEL_65;
    }
    unint64_t v26 = *(void *)&v40[8 * v22];
    ++v27;
    if (v26) {
      goto LABEL_40;
    }
  }

Swift::Void __swiftcall JSONWriter.writeIndent()()
{
  uint64_t v1 = *v0;
  switch(*v0)
  {
    case 0LL:
      return;
    case 1LL:
      unint64_t v2 = 8224LL;
      unint64_t v3 = 0xE200000000000000LL;
      goto LABEL_16;
    case 2LL:
      unint64_t v2 = 538976288LL;
      unint64_t v3 = 0xE400000000000000LL;
      goto LABEL_16;
    case 3LL:
      unint64_t v2 = 0x202020202020LL;
      unint64_t v3 = 0xE600000000000000LL;
      goto LABEL_16;
    case 4LL:
      unint64_t v2 = 0x2020202020202020LL;
      unint64_t v3 = 0xE800000000000000LL;
      goto LABEL_16;
    case 5LL:
      unint64_t v2 = 0x2020202020202020LL;
      unint64_t v3 = 0xEA00000000002020LL;
      goto LABEL_16;
    case 6LL:
      unint64_t v2 = 0x2020202020202020LL;
      unint64_t v3 = 0xEC00000020202020LL;
      goto LABEL_16;
    case 7LL:
      unint64_t v2 = 0x2020202020202020LL;
      unint64_t v3 = 0xEE00202020202020LL;
      goto LABEL_16;
    case 8LL:
      unint64_t v2 = 0xD000000000000010LL;
      uint64_t v4 = "                ";
      goto LABEL_15;
    case 9LL:
      unint64_t v2 = 0xD000000000000012LL;
      uint64_t v4 = "                  ";
      goto LABEL_15;
    case 10LL:
      unint64_t v2 = 0xD000000000000014LL;
      uint64_t v4 = "                    ";
LABEL_15:
      unint64_t v3 = (unint64_t)(v4 - 32) | 0x8000000000000000LL;
LABEL_16:
      *(void *)&__int128 v5 = v2;
      *((void *)&v5 + 1) = v3;
      specialized String.withUTF8<A>(_:)((uint64_t *)&v5);
      swift_bridgeObjectRelease();
      break;
    default:
      if (v1 < 0)
      {
        __break(1u);
        JUMPOUT(0x182FE9BBCLL);
      }

      do
      {
        __int128 v5 = xmmword_18372DCA0;
        Data._Representation.append(contentsOf:)();
        swift_bridgeObjectRelease();
        --v1;
      }

      while (v1);
      break;
  }

unint64_t specialized Sequence<>.lexicographicallyPrecedes<A>(_:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v34 = v7;
  uint64_t v8 = 4 * v7;
  uint64_t v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4LL << v9;
  uint64_t v28 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v29 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v31 = v8;
  unint64_t v32 = v11;
  uint64_t v30 = 4 * v11;
  uint64_t v12 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4LL << v12;
  uint64_t v26 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v27 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v14 = 15LL;
  unint64_t v15 = 15LL;
  while (v31 != v15 >> 14)
  {
    unint64_t v16 = v15 & 0xC;
    unint64_t v17 = v15;
    if (v16 == v10) {
      unint64_t v17 = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a3, a4);
    }
    unint64_t v18 = v17 >> 16;
    if (v17 >> 16 >= v34)
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
      goto LABEL_50;
    }

    if ((a4 & 0x1000000000000000LL) != 0)
    {
      unsigned __int8 v20 = String.UTF8View._foreignSubscript(position:)();
      if (v16 == v10) {
        goto LABEL_19;
      }
    }

    else if ((a4 & 0x2000000000000000LL) != 0)
    {
      unint64_t v35 = a3;
      uint64_t v36 = v29;
      unsigned __int8 v20 = *((_BYTE *)&v35 + v18);
      if (v16 == v10) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v19 = v28;
      if ((a3 & 0x1000000000000000LL) == 0) {
        uint64_t v19 = _StringObject.sharedUTF8.getter();
      }
      unsigned __int8 v20 = *(_BYTE *)(v19 + v18);
      if (v16 == v10)
      {
LABEL_19:
        unint64_t v15 = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a3, a4);
        if ((a4 & 0x1000000000000000LL) == 0) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
    }

    if ((a4 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_25;
    }

uint64_t specialized MutableCollection<>.sort(by:)( uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t partial apply for closure #2 in String.serializedForJSON(withoutEscapingSlashes:)( void *a1, int64_t a2)
{
  return closure #2 in String.serializedForJSON(withoutEscapingSlashes:)(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t outlined consume of JSONReference.Backing(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type JSONError and conformance JSONError()
{
  unint64_t result = lazy protocol witness table cache variable for type JSONError and conformance JSONError;
  if (!lazy protocol witness table cache variable for type JSONError and conformance JSONError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for JSONError, &type metadata for JSONError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type JSONError and conformance JSONError);
  }

  return result;
}

uint64_t outlined copy of JSONReference.Backing(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }

  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  Swift::Int v108 = v3;
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_139;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v85 = *v2;
      uint64_t v86 = -1LL;
      uint64_t v87 = 1LL;
      uint64_t v88 = v85;
      do
      {
        int64_t v89 = (unint64_t *)(v85 + 24 * v87);
        unint64_t v90 = *v89;
        unint64_t v91 = v89[1];
        uint64_t v92 = v86;
        uint64_t v93 = v88;
        do
        {
          uint64_t result = specialized Sequence<>.lexicographicallyPrecedes<A>(_:)( *(void *)v93,  *(void *)(v93 + 8),  v90,  v91);
          if ((result & 1) == 0) {
            break;
          }
          if (!v85) {
            goto LABEL_143;
          }
          __int128 v94 = *(_OWORD *)(v93 + 32);
          uint64_t v95 = *(void *)(v93 + 16);
          unint64_t v90 = *(void *)(v93 + 24);
          *(_OWORD *)(v93 + 24) = *(_OWORD *)v93;
          *(void *)(v93 + 40) = v95;
          *(void *)uint64_t v93 = v90;
          *(_OWORD *)(v93 + 8) = v94;
          unint64_t v91 = v94;
          v93 -= 24LL;
        }

        while (!__CFADD__(v92++, 1LL));
        ++v87;
        v88 += 24LL;
        --v86;
      }

      while (v87 != v3);
    }

    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_148;
  }
  uint64_t v107 = result;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x18961AFE8];
    __dst = (unint64_t *)(MEMORY[0x18961AFE8] + 32LL);
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      id v97 = (char *)MEMORY[0x18961AFE8];
LABEL_105:
      uint64_t v106 = v8;
      if (v11 >= 2)
      {
        uint64_t v98 = *v2;
        do
        {
          unint64_t v99 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_134;
          }
          if (!v98) {
            goto LABEL_147;
          }
          uint64_t v100 = v97;
          uint64_t v101 = *(void *)&v97[16 * v99 + 32];
          uint64_t v102 = *(void *)&v97[16 * v11 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)( (unint64_t *)(v98 + 24 * v101),  (unint64_t *)(v98 + 24LL * *(void *)&v97[16 * v11 + 16]),  v98 + 24 * v102,  __dst);
          if (v1) {
            break;
          }
          if (v102 < v101) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v100 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v100);
          }
          if (v99 >= *((void *)v100 + 2)) {
            goto LABEL_136;
          }
          id v103 = &v100[16 * v99 + 32];
          *(void *)id v103 = v101;
          *((void *)v103 + 1) = v102;
          unint64_t v104 = *((void *)v100 + 2);
          if (v11 > v104) {
            goto LABEL_137;
          }
          memmove(&v100[16 * v11 + 16], &v100[16 * v11 + 32], 16 * (v104 - v11));
          id v97 = v100;
          *((void *)v100 + 2) = v104 - 1;
          unint64_t v11 = v104 - 1;
        }

        while (v104 > 2);
      }

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v3 = v1;
  Swift::Int v5 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v5);
  id v134 = (char *)v5;
  if (result >= v5)
  {
    if (v5 < 0) {
      goto LABEL_159;
    }
    uint64_t v144 = v1;
    uint64_t v101 = -1LL;
    uint64_t v102 = 1LL;
    uint64_t v2 = *a1;
    uint64_t v140 = *a1;
LABEL_113:
    uint64_t v131 = v2;
    __dsta = (char *)v102;
    __int128 v103 = *(_OWORD *)(v140 + 16 * v102);
    uint64_t v136 = v101;
    while (1)
    {
      unint64_t v104 = *(void **)v2;
      id v105 = (id)v103;
      swift_retain();
      id v106 = v104;
      swift_retain();
      id v107 = objc_msgSend(v105, sel_length);
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v108 = static LocaleCache.cache + 16;
      uint64_t v109 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
      swift_retain_n();
      os_unfair_lock_lock(v109);
      uint64_t v110 = v144;
      closure #1 in LocaleCache.system.getter(v108, &v142);
      uint64_t v144 = v110;
      uint64_t result = (uint64_t)v109;
      if (v110) {
        goto LABEL_168;
      }
      os_unfair_lock_unlock(v109);
      swift_release_n();
      uint64_t v111 = v143;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v113 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v111 + 488))(ObjectType, v111);
      id v114 = objc_msgSend(v105, sel_compare_options_range_locale_, v106, 577, 0, v107, v113);
      swift_release();

      swift_release();
      uint64_t result = swift_unknownObjectRelease();
      if (v114 != (id)-1LL) {
        goto LABEL_112;
      }
      if (!v140) {
        break;
      }
      __int128 v103 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v2 + 16) = *(_OWORD *)v2;
      *(_OWORD *)uint64_t v2 = v103;
      v2 -= 16LL;
      if (__CFADD__(v101++, 1LL))
      {
LABEL_112:
        uint64_t v102 = (uint64_t)(__dsta + 1);
        uint64_t v2 = v131 + 16;
        uint64_t v101 = v136 - 1;
        if (__dsta + 1 == v134) {
          return result;
        }
        goto LABEL_113;
      }
    }

LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    os_unfair_lock_unlock((os_unfair_lock_t)result);
    __break(1u);
LABEL_169:
    os_unfair_lock_unlock((os_unfair_lock_t)v2);
    __break(1u);
LABEL_170:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  if (v5 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v5 + 1;
  }
  if (v5 < -1) {
    goto LABEL_170;
  }
  uint64_t v125 = result;
  off_t v121 = a1;
  if (v5 < 2)
  {
    uint64_t v9 = MEMORY[0x18961AFE8];
    __dst = (void **)(MEMORY[0x18961AFE8] + 32LL);
    if (v5 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      uint64_t v12 = MEMORY[0x18961AFE8];
      goto LABEL_123;
    }

    uint64_t v124 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v8 = v7 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: NSString, value: JSONReference));
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = v8;
    uint64_t v124 = result;
    __dst = (void **)(result + 32);
  }

  Swift::Int v10 = 0LL;
  uint64_t v11 = *a1;
  uint64_t v122 = *a1 - 16;
  uint64_t v123 = *a1 + 40;
  uint64_t v12 = MEMORY[0x18961AFE8];
  uint64_t v135 = *a1;
  do
  {
    Swift::Int v14 = v10 + 1;
    Swift::Int v128 = v10;
    if (v10 + 1 < v5)
    {
      uint64_t v126 = v12;
      uint64_t v15 = v3;
      unint64_t v16 = *(void **)(v11 + 16 * v10);
      id v17 = *(id *)(v11 + 16 * v14);
      swift_retain();
      id v18 = v16;
      swift_retain();
      id v19 = objc_msgSend(v17, sel_length);
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v20 = static LocaleCache.cache + 16;
      uint64_t v2 = static LocaleCache.cache + 124;
      swift_retain_n();
      os_unfair_lock_lock((os_unfair_lock_t)v2);
      closure #1 in LocaleCache.system.getter(v20, &v142);
      uint64_t v144 = v15;
      if (v15) {
        goto LABEL_169;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)v2);
      swift_release_n();
      uint64_t v21 = v143;
      uint64_t v22 = swift_getObjectType();
      uint64_t v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 488))(v22, v21);
      id v129 = objc_msgSend(v17, sel_compare_options_range_locale_, v18, 577, 0, v19, v23);
      swift_release();

      swift_release();
      uint64_t result = swift_unknownObjectRelease();
      Swift::Int v10 = v128;
      Swift::Int v14 = v128 + 2;
      Swift::Int v5 = (Swift::Int)v134;
      if (v128 + 2 >= (uint64_t)v134)
      {
        uint64_t v12 = v126;
      }

      else
      {
        uint64_t v24 = v123 + 16 * v128;
        while (1)
        {
          Swift::Int v137 = v14;
          __int128 v25 = *(void **)(v24 - 24);
          id v26 = *(id *)(v24 - 8);
          swift_retain();
          id v27 = v25;
          swift_retain();
          id v28 = objc_msgSend(v26, sel_length);
          uint64_t v29 = static LocaleCache.cache + 16;
          uint64_t v2 = static LocaleCache.cache + 124;
          swift_retain_n();
          os_unfair_lock_lock((os_unfair_lock_t)v2);
          uint64_t v30 = v144;
          closure #1 in LocaleCache.system.getter(v29, &v142);
          uint64_t v144 = v30;
          if (v30) {
            goto LABEL_169;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)v2);
          swift_release_n();
          uint64_t v31 = v143;
          uint64_t v32 = swift_getObjectType();
          uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 488))(v32, v31);
          id v33 = objc_msgSend(v26, sel_compare_options_range_locale_, v27, 577, 0, v28, v2);
          swift_release();

          swift_release();
          uint64_t result = swift_unknownObjectRelease();
          if ((v129 == (id)-1LL) == (v33 != (id)-1LL)) {
            break;
          }
          Swift::Int v14 = v137 + 1;
          v24 += 16LL;
          if (v134 == (char *)(v137 + 1))
          {
            Swift::Int v5 = (Swift::Int)v134;
            Swift::Int v14 = (Swift::Int)v134;
            uint64_t v12 = v126;
            goto LABEL_28;
          }
        }

        Swift::Int v5 = (Swift::Int)v134;
        uint64_t v12 = v126;
        Swift::Int v14 = v137;
LABEL_28:
        Swift::Int v10 = v128;
      }

      uint64_t v3 = v144;
      uint64_t v11 = v135;
      if (v129 == (id)-1LL)
      {
        if (v14 < v10) {
          goto LABEL_163;
        }
        if (v10 < v14)
        {
          Swift::Int v34 = v10;
          uint64_t v35 = (__int128 *)(v122 + 16 * v14);
          Swift::Int v36 = v14;
          Swift::Int v37 = v34;
          uint64_t v38 = (__int128 *)(v135 + 16 * v34);
          do
          {
            if (v37 != --v36)
            {
              if (!v135) {
                goto LABEL_166;
              }
              __int128 v39 = *v38;
              *uint64_t v38 = *v35;
              *uint64_t v35 = v39;
            }

            ++v37;
            --v35;
            ++v38;
          }

          while (v37 < v36);
          Swift::Int v10 = v128;
        }
      }
    }

    if (v14 >= v5) {
      goto LABEL_50;
    }
    if (__OFSUB__(v14, v10)) {
      goto LABEL_158;
    }
    if (v14 - v10 >= v125)
    {
      Swift::Int v10 = v128;
LABEL_50:
      if (v14 < v10) {
        goto LABEL_153;
      }
      goto LABEL_51;
    }

    if (__OFADD__(v128, v125)) {
      goto LABEL_160;
    }
    if (v128 + v125 >= v5) {
      Swift::Int v40 = v5;
    }
    else {
      Swift::Int v40 = v128 + v125;
    }
    if (v40 < v128)
    {
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }

    if (v14 == v40)
    {
      if (v14 < v128) {
        goto LABEL_153;
      }
    }

    else
    {
      uint64_t v144 = v3;
      uint64_t v89 = v122 + 16 * v14;
      Swift::Int v127 = v40;
      do
      {
        __int128 v91 = *(_OWORD *)(v11 + 16 * v14);
        Swift::Int v92 = v128;
        uint64_t v130 = v89;
        Swift::Int v139 = v14;
        while (1)
        {
          uint64_t v93 = *(void **)v89;
          id v94 = (id)v91;
          swift_retain();
          id v95 = v93;
          swift_retain();
          id v141 = objc_msgSend(v94, sel_length);
          if (one-time initialization token for cache != -1) {
            swift_once();
          }
          uint64_t v96 = static LocaleCache.cache + 16;
          uint64_t v2 = static LocaleCache.cache + 124;
          swift_retain_n();
          os_unfair_lock_lock((os_unfair_lock_t)v2);
          uint64_t v97 = v144;
          closure #1 in LocaleCache.system.getter(v96, &v142);
          uint64_t v144 = v97;
          if (v97) {
            goto LABEL_169;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)v2);
          swift_release_n();
          uint64_t v98 = v143;
          uint64_t v99 = swift_getObjectType();
          uint64_t v100 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v98 + 488))(v99, v98);
          uint64_t v2 = (uint64_t)objc_msgSend(v94, sel_compare_options_range_locale_, v95, 577, 0, v141, v100);
          swift_release();

          swift_release();
          uint64_t result = swift_unknownObjectRelease();
          if (v2 != -1) {
            break;
          }
          uint64_t v11 = v135;
          Swift::Int v90 = v139;
          if (!v135) {
            goto LABEL_164;
          }
          __int128 v91 = *(_OWORD *)(v89 + 16);
          *(_OWORD *)(v89 + 16) = *(_OWORD *)v89;
          *(_OWORD *)uint64_t v89 = v91;
          v89 -= 16LL;
          if (v139 == ++v92) {
            goto LABEL_100;
          }
        }

        uint64_t v11 = v135;
        Swift::Int v90 = v139;
LABEL_100:
        Swift::Int v14 = v90 + 1;
        uint64_t v89 = v130 + 16;
      }

      while (v14 != v127);
      Swift::Int v14 = v127;
      uint64_t v3 = v144;
      if (v127 < v128) {
        goto LABEL_153;
      }
    }

        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_163:
        type metadata accessor for NSComparisonResult(0LL);
        off_t v121 = v36;
        _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return;
      }
    }

    __break(1u);
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }

  if (!v99)
  {
    id v17 = 0;
    LOWORD(v6) = 0;
    LOWORD(v7) = 0;
    LOWORD(v8) = 0;
    LOWORD(v9) = 0;
    LOWORD(v10) = 0;
    LOWORD(v11) = 0;
    LOWORD(v5) = 0;
    LOWORD(v18) = 0;
    goto LABEL_17;
  }

  if (v99 != 1) {
    goto LABEL_163;
  }
  NSDecimal.asVariableLengthInteger()(v98, v93, v97);
  unint64_t v41 = v53;
  NSDecimal.asVariableLengthInteger()(v96, v95, v94);
  uint64_t v6 = v54;
  uint64_t v55 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  Swift::Int v36 = v55;
  *(void *)(v55 + 32) = 0LL;
  unint64_t v45 = (_WORD *)(v55 + 32);
  *(void *)(v55 + 16) = 8LL;
  *(void *)(v55 + 40) = 0LL;
  uint64_t v46 = *(void *)(v41 + 16);
  uint64_t v47 = *(void *)(v6 + 16);
  if (v47 >= v46) {
    BOOL v56 = *(void *)(v41 + 16);
  }
  else {
    BOOL v56 = *(void *)(v6 + 16);
  }
  if (v56)
  {
    unint64_t v57 = v41 + 32;
    uint64_t v58 = (*(unsigned __int16 *)(v41 + 32) | 0x10000) - *(unsigned __int16 *)(v6 + 32);
    LODWORD(v59) = HIWORD(v58);
    *unint64_t v45 = *(_WORD *)(v41 + 32) - *(_WORD *)(v6 + 32);
    uint64_t v52 = v56 - 1;
    uint64_t v60 = v120;
    if (!v52)
    {
      uint64_t v61 = 1LL;
      goto LABEL_118;
    }

    uint64_t v58 = v59 + *(unsigned __int16 *)(v41 + 34) - *(unsigned __int16 *)(v6 + 34) + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 34) = v58;
    if (v52 == 1)
    {
      uint64_t v61 = 2LL;
      goto LABEL_118;
    }

    uint64_t v43 = *(unsigned __int16 *)(v6 + 36);
    uint64_t v58 = v59 + *(unsigned __int16 *)(v41 + 36) - v43 + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 36) = v58;
    if (v52 == 2)
    {
      uint64_t v61 = 3LL;
      goto LABEL_118;
    }

    uint64_t v58 = v59 + *(unsigned __int16 *)(v41 + 38) - *(unsigned __int16 *)(v6 + 38) + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 38) = v58;
    if (v52 == 3)
    {
      uint64_t v61 = 4LL;
      goto LABEL_118;
    }

    uint64_t v43 = *(unsigned __int16 *)(v6 + 40);
    uint64_t v58 = v59 + *(unsigned __int16 *)(v41 + 40) - v43 + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 40) = v58;
    if (v52 == 4)
    {
      uint64_t v61 = 5LL;
      goto LABEL_118;
    }

    uint64_t v58 = v59 + *(unsigned __int16 *)(v41 + 42) - *(unsigned __int16 *)(v6 + 42) + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 42) = v58;
    if (v52 == 5)
    {
      uint64_t v61 = 6LL;
      goto LABEL_118;
    }

    uint64_t v43 = *(unsigned __int16 *)(v6 + 44);
    uint64_t v58 = v59 + *(unsigned __int16 *)(v41 + 44) - v43 + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 44) = v58;
    if (v52 == 6)
    {
      uint64_t v61 = 7LL;
LABEL_117:
      uint64_t v60 = v120;
LABEL_118:
      if (v61 >= v46) {
        goto LABEL_130;
      }
      if (!HIWORD(v58))
      {
        while (v61 < *(void *)(v36 + 16))
        {
          unint64_t v84 = *(unsigned __int16 *)(v57 + 2 * v61);
          uint64_t v43 = v84 + 0xFFFF;
          v45[v61] = v84 - 1;
          if (v46 - 1 == v61) {
            goto LABEL_137;
          }
          ++v61;
          if (v84) {
            goto LABEL_123;
          }
        }

        goto LABEL_153;
      }

      goto LABEL_123;
    }

        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_163:
        type metadata accessor for NSComparisonResult(0LL);
        *(void *)id v129 = v28;
        uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return result;
      }
    }

    __break(1u);
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }

  if (!v50)
  {
    LODWORD(v5) = 0;
    LOWORD(v6) = 0;
    LOWORD(v7) = 0;
    id v18 = 0;
    LOWORD(v9) = 0;
    LOWORD(v10) = 0;
    LOWORD(v11) = 0;
    LOWORD(v12) = 0;
    id v19 = 0;
    goto LABEL_26;
  }

  if (v50 != 1) {
    goto LABEL_163;
  }
  NSDecimal.asVariableLengthInteger()(v110, v105, v103);
  id v28 = v66;
  NSDecimal.asVariableLengthInteger()(v102, v101, v100);
  uint64_t v7 = v67;
  char v68 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  unint64_t v57 = v68;
  *(void *)(v68 + 32) = 0LL;
  uint64_t v58 = (_WORD *)(v68 + 32);
  *(void *)(v68 + 16) = 8LL;
  *(void *)(v68 + 40) = 0LL;
  uint64_t v59 = *(void *)(v28 + 16);
  uint64_t v60 = *(void *)(v7 + 16);
  if (v60 >= v59) {
    uint64_t v69 = *(void *)(v28 + 16);
  }
  else {
    uint64_t v69 = *(void *)(v7 + 16);
  }
  uint64_t v70 = v125;
  uint64_t v71 = v123;
  uint64_t v72 = v113;
  BOOL v73 = v121;
  if (v69)
  {
    uint64_t v74 = v28 + 32;
    uint64_t v75 = (*(unsigned __int16 *)(v28 + 32) | 0x10000) - *(unsigned __int16 *)(v7 + 32);
    LODWORD(v76) = HIWORD(v75);
    *uint64_t v58 = *(_WORD *)(v28 + 32) - *(_WORD *)(v7 + 32);
    uint64_t v65 = v69 - 1;
    uint64_t v77 = v127;
    if (!v65)
    {
      uint64_t v78 = 1LL;
      goto LABEL_118;
    }

    uint64_t v75 = v76 + *(unsigned __int16 *)(v28 + 34) - *(unsigned __int16 *)(v7 + 34) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 34) = v75;
    if (v65 == 1)
    {
      uint64_t v78 = 2LL;
      goto LABEL_118;
    }

    BOOL v56 = *(unsigned __int16 *)(v7 + 36);
    uint64_t v75 = v76 + *(unsigned __int16 *)(v28 + 36) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 36) = v75;
    if (v65 == 2)
    {
      uint64_t v78 = 3LL;
      goto LABEL_118;
    }

    uint64_t v75 = v76 + *(unsigned __int16 *)(v28 + 38) - *(unsigned __int16 *)(v7 + 38) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 38) = v75;
    if (v65 == 3)
    {
      uint64_t v78 = 4LL;
      goto LABEL_118;
    }

    BOOL v56 = *(unsigned __int16 *)(v7 + 40);
    uint64_t v75 = v76 + *(unsigned __int16 *)(v28 + 40) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 40) = v75;
    if (v65 == 4)
    {
      uint64_t v78 = 5LL;
      goto LABEL_118;
    }

    uint64_t v75 = v76 + *(unsigned __int16 *)(v28 + 42) - *(unsigned __int16 *)(v7 + 42) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 42) = v75;
    if (v65 == 5)
    {
      uint64_t v78 = 6LL;
      goto LABEL_118;
    }

    BOOL v56 = *(unsigned __int16 *)(v7 + 44);
    uint64_t v75 = v76 + *(unsigned __int16 *)(v28 + 44) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 44) = v75;
    if (v65 == 6)
    {
      uint64_t v78 = 7LL;
LABEL_117:
      uint64_t v70 = v125;
      uint64_t v77 = v127;
      uint64_t v71 = v123;
      uint64_t v72 = v113;
      uint64_t v51 = v115;
      BOOL v73 = v121;
LABEL_118:
      if (v78 >= v59) {
        goto LABEL_130;
      }
      if (!HIWORD(v75))
      {
        while (v78 < *(void *)(v57 + 16))
        {
          Swift::Int v92 = *(unsigned __int16 *)(v74 + 2 * v78);
          BOOL v56 = v92 + 0xFFFF;
          v58[v78] = v92 - 1;
          if (v59 - 1 == v78) {
            goto LABEL_137;
          }
          ++v78;
          if (v92) {
            goto LABEL_123;
          }
        }

        goto LABEL_153;
      }

      goto LABEL_123;
    }

        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_163:
        type metadata accessor for NSComparisonResult(0LL);
        *(void *)id v129 = v28;
        uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return result;
      }
    }

    __break(1u);
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }

  if (!v50)
  {
    LODWORD(v5) = 0;
    LOWORD(v6) = 0;
    LOWORD(v7) = 0;
    id v18 = 0;
    LOWORD(v9) = 0;
    LOWORD(v10) = 0;
    LOWORD(v11) = 0;
    LOWORD(v12) = 0;
    id v19 = 0;
    goto LABEL_26;
  }

  if (v50 != 1) {
    goto LABEL_163;
  }
  NSDecimal.asVariableLengthInteger()(v110, v105, v103);
  id v28 = v66;
  NSDecimal.asVariableLengthInteger()(v102, v101, v100);
  uint64_t v7 = v67;
  char v68 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  unint64_t v57 = v68;
  *(void *)(v68 + 32) = 0LL;
  uint64_t v58 = (_WORD *)(v68 + 32);
  *(void *)(v68 + 16) = 8LL;
  *(void *)(v68 + 40) = 0LL;
  uint64_t v59 = *(void *)(v28 + 16);
  uint64_t v60 = *(void *)(v7 + 16);
  if (v60 >= v59) {
    uint64_t v69 = *(void *)(v28 + 16);
  }
  else {
    uint64_t v69 = *(void *)(v7 + 16);
  }
  uint64_t v70 = v125;
  uint64_t v71 = v123;
  uint64_t v72 = v113;
  BOOL v73 = v121;
  if (v69)
  {
    uint64_t v74 = v28 + 32;
    uint64_t v75 = (*(unsigned __int16 *)(v28 + 32) | 0x10000) - *(unsigned __int16 *)(v7 + 32);
    LODWORD(v76) = HIWORD(v75);
    *uint64_t v58 = *(_WORD *)(v28 + 32) - *(_WORD *)(v7 + 32);
    uint64_t v65 = v69 - 1;
    uint64_t v77 = v127;
    if (!v65)
    {
      uint64_t v78 = 1LL;
      goto LABEL_118;
    }

    uint64_t v75 = v76 + *(unsigned __int16 *)(v28 + 34) - *(unsigned __int16 *)(v7 + 34) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 34) = v75;
    if (v65 == 1)
    {
      uint64_t v78 = 2LL;
      goto LABEL_118;
    }

    BOOL v56 = *(unsigned __int16 *)(v7 + 36);
    uint64_t v75 = v76 + *(unsigned __int16 *)(v28 + 36) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 36) = v75;
    if (v65 == 2)
    {
      uint64_t v78 = 3LL;
      goto LABEL_118;
    }

    uint64_t v75 = v76 + *(unsigned __int16 *)(v28 + 38) - *(unsigned __int16 *)(v7 + 38) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 38) = v75;
    if (v65 == 3)
    {
      uint64_t v78 = 4LL;
      goto LABEL_118;
    }

    BOOL v56 = *(unsigned __int16 *)(v7 + 40);
    uint64_t v75 = v76 + *(unsigned __int16 *)(v28 + 40) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 40) = v75;
    if (v65 == 4)
    {
      uint64_t v78 = 5LL;
      goto LABEL_118;
    }

    uint64_t v75 = v76 + *(unsigned __int16 *)(v28 + 42) - *(unsigned __int16 *)(v7 + 42) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 42) = v75;
    if (v65 == 5)
    {
      uint64_t v78 = 6LL;
      goto LABEL_118;
    }

    BOOL v56 = *(unsigned __int16 *)(v7 + 44);
    uint64_t v75 = v76 + *(unsigned __int16 *)(v28 + 44) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 44) = v75;
    if (v65 == 6)
    {
      uint64_t v78 = 7LL;
LABEL_117:
      uint64_t v70 = v125;
      uint64_t v77 = v127;
      uint64_t v71 = v123;
      uint64_t v72 = v113;
      uint64_t v51 = v115;
      BOOL v73 = v121;
LABEL_118:
      if (v78 >= v59) {
        goto LABEL_130;
      }
      if (!HIWORD(v75))
      {
        while (v78 < *(void *)(v57 + 16))
        {
          Swift::Int v92 = *(unsigned __int16 *)(v74 + 2 * v78);
          BOOL v56 = v92 + 0xFFFF;
          v58[v78] = v92 - 1;
          if (v59 - 1 == v78) {
            goto LABEL_137;
          }
          ++v78;
          if (v92) {
            goto LABEL_123;
          }
        }

        goto LABEL_153;
      }

      goto LABEL_123;
    }

              uint64_t v136 = (v147 - 1) & v147;
              __srca = v148;
              Swift::Int v138 = __clz(__rbit64(v147)) + (v148 << 6);
            }

            Swift::Int v139 = 4 * v138;
            uint64_t v140 = *(_DWORD *)(*(void *)(v232 + 48) + 4 * v138);
            id v141 = 16 * v138;
            uint64_t v142 = (uint64_t *)(*(void *)(v232 + 56) + v141);
            uint64_t v144 = *v142;
            uint64_t v143 = v142[1];
            *(_DWORD *)(*(void *)(v127 + 48) + v139) = v140;
            id v145 = (void *)(*(void *)(v127 + 56) + v141);
            *id v145 = v144;
            v145[1] = v143;
            swift_bridgeObjectRetain();
          }
        }

      swift_once();
      goto LABEL_55;
    }

    uint64_t v206 = (id)a6;
    uint64_t v204 = v15;
    URL.init(reference:)(v30, &v277);
    uint64_t v32 = (id)v277;
    id v33 = *(void *)v278;
    Swift::Int v34 = *(void *)&v278[8];
    uint64_t v35 = v31;

    id v277 = (uint64_t)v32;
    *(void *)id v278 = v33;
    *(void *)&v278[8] = v34;
    Swift::Int v36 = (unsigned __int128)URL.path(percentEncoded:)(0);

    swift_release();
    swift_release();
    uint64_t v211 = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Path = String._lastPathComponent.getter(v25, v29);
    uint64_t v38 = v37;
    id v199 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    __int128 v39 = String._appendingPathComponent(_:)(Path, v38, v36, *((unint64_t *)&v36 + 1));
    unint64_t v41 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if ((v41 & 0x1000000000000000LL) != 0)
    {
      unint64_t v42 = String.UTF8View._foreignCount()();
      unint64_t v16 = (unint64_t)v205;
    }

    else
    {
      unint64_t v16 = (unint64_t)v205;
      if ((v41 & 0x2000000000000000LL) != 0) {
        unint64_t v42 = HIBYTE(v41) & 0xF;
      }
      else {
        unint64_t v42 = v39 & 0xFFFFFFFFFFFFLL;
      }
    }

    uint64_t v15 = v204;
    a6 = (uint64_t)v206;
    id v17 = 3 * v42;
    if ((unsigned __int128)(v42 * (__int128)3LL) >> 64 != (3 * v42) >> 63)
    {
      __break(1u);
      goto LABEL_155;
    }

    if (v17 < -1) {
      goto LABEL_158;
    }
    uint64_t v65 = v17 + 1;
    outlined copy of PathOrURL(v204, v16, (uint64_t)v206, v208);
    Swift::Int isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v17 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
    {
      MEMORY[0x1895F8858](isStackAllocationSafe);
      char v68 = (char *)&v196 - v67;
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v68, v17 + 1, 1, v39, v41);
      uint64_t v70 = v69;
      swift_bridgeObjectRelease();
      uint64_t v71 = v207;
      if ((v70 & 1) != 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        BOOL v73 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v74 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v75 = objc_msgSend(v73, sel_initWithDomain_code_userInfo_, v74, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v76 = objc_msgSend(v75, sel_domain);
        uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
        uint64_t v79 = v78;

        if (v77 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v79 == v80)
        {
          swift_bridgeObjectRelease_n();
          unint64_t v16 = (unint64_t)v205;
        }

        else
        {
          __int128 v103 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v16 = (unint64_t)v205;
          if ((v103 & 1) == 0)
          {
            __break(1u);
LABEL_164:
            __break(1u);
            goto LABEL_165;
          }
        }

        swift_willThrow();
        a6 = (uint64_t)v206;
        LOBYTE(Path) = v208;
      }

      else
      {
        Path = v208;
        uint64_t v72 = v68;
        unint64_t v16 = (unint64_t)v205;
        closure #1 in createProtectedTemporaryFile(at:inPath:options:variant:)( v72,  (int)v209,  v39,  v41,  (uint64_t *)&v211,  (uint64_t)v204,  (unint64_t)v205,  (id)a6,  (uint64_t)&v213,  v208,  0LL,  0LL);
        id v17 = v71;
        if (!v71)
        {
          char v198 = v213;
          __int128 v39 = v214;
          id v207 = *((void *)&v213 + 1);
          id v197 = *((void *)&v214 + 1);
          uint64_t v209 = (id)v215;
          swift_bridgeObjectRelease();
          uint64_t v15 = v204;
          outlined consume of PathOrURL(v204, v16, a6, Path);
          swift_bridgeObjectRelease();

          swift_release();
          swift_release();
LABEL_42:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_43;
        }
      }

      swift_willThrow();
      uint64_t v15 = v204;
    }

    else
    {
      uint64_t v81 = v39;
      uint64_t v82 = (char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v82, v65, 1, v81, v41);
      unint64_t v84 = v83;
      swift_bridgeObjectRelease();
      if ((v84 & 1) != 0)
      {
        id v210 = (uint64_t)v82;
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        uint64_t v111 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        Swift::String v112 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v113 = objc_msgSend(v111, sel_initWithDomain_code_userInfo_, v112, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v114 = objc_msgSend(v113, sel_domain);
        uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
        unint64_t v117 = v116;

        if (v115 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v117 == v118)
        {
          swift_bridgeObjectRelease_n();
        }

        else
        {
          uint64_t v190 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v190 & 1) == 0)
          {
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
          }
        }

        swift_willThrow();
        a6 = (uint64_t)v206;
        LOBYTE(Path) = v208;
        uint64_t v82 = (char *)v210;
      }

      else
      {
        Path = v208;
        closure #1 in createProtectedTemporaryFile(at:inPath:options:variant:)( v82,  (int)v209,  v81,  v41,  (uint64_t *)&v211,  (uint64_t)v204,  v16,  v206,  (uint64_t)&v277,  v208,  0LL,  0LL);
        id v17 = v207;
        if (!v207)
        {
          MEMORY[0x186E20E60](v82, -1LL, -1LL);
          swift_bridgeObjectRelease();
          outlined consume of PathOrURL(v204, v16, (uint64_t)v206, v208);
          swift_bridgeObjectRelease();

          swift_release();
          swift_release();
          char v198 = v277;
          id v207 = *(void *)v278;
          __int128 v39 = *(void *)&v278[8];
          id v197 = *(void *)&v278[16];
          uint64_t v209 = *(id *)&v278[24];
          goto LABEL_42;
        }
      }

      MEMORY[0x186E20E60](v82, -1LL, -1LL);
    }

    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(v15, v16, a6, Path);
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRetain();
  uint64_t v58 = String._deletingLastPathComponent()(v25, v24);
  uint64_t v60 = v59;
  swift_bridgeObjectRelease();
  id v277 = (uint64_t)v15;
  *(void *)id v278 = v16;
  *(void *)&v278[8] = a6;
  v278[16] = v208 != 0;
  uint64_t v61 = createTemporaryFile(at:inPath:prefix:options:variant:)( v58,  v60,  (uint64_t)&v277,  (char *)0x736F6E2E7461642ELL,  (void *)0xEB00000000636E79LL,  v209,  0LL,  0LL);
  id v17 = v207;
  if (v207)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  Path = v63;
  char v198 = v61;
  id v207 = v62;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v197 = 0LL;
  uint64_t v209 = 0LL;
  __int128 v39 = Path;
LABEL_43:
  close(v198);
  if ((v39 & 0x1000000000000000LL) != 0) {
    goto LABEL_156;
  }
  if ((v39 & 0x2000000000000000LL) != 0) {
    uint64_t v85 = HIBYTE(v39) & 0xF;
  }
  else {
    uint64_t v85 = v207 & 0xFFFFFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v86 = 3 * v85;
    if ((unsigned __int128)(v85 * (__int128)3LL) >> 64 != (3 * v85) >> 63)
    {
      __break(1u);
LABEL_158:
      __break(1u);
      goto LABEL_159;
    }

    if (v86 < -1) {
      goto LABEL_161;
    }
    Path = v86 + 1;
    outlined copy of PathOrURL(v15, v16, a6, v208);
    uint64_t v87 = swift_bridgeObjectRetain();
    Swift::String v203 = v39;
    if (v86 < 1024 || (uint64_t v87 = swift_stdlib_isStackAllocationSafe(), (v87 & 1) != 0))
    {
      char v205 = &v196;
      MEMORY[0x1895F8858](v87);
      uint64_t v89 = (char *)&v196 - v88;
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v89, Path, 1, v207, v39);
      __int128 v91 = v90;
      swift_bridgeObjectRelease();
      if ((v91 & 1) == 0)
      {
        Swift::Int v92 = v208;
        closure #1 in closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( v89,  __new,  (const char *)v210,  v200,  v197,  (unint64_t)v209,  v15,  v16,  a6,  v208);
        if (v17) {
          goto LABEL_80;
        }
        goto LABEL_66;
      }

      id v94 = a6;
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      id v95 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      uint64_t v96 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v97 = objc_msgSend(v95, sel_initWithDomain_code_userInfo_, v96, 514, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v98 = objc_msgSend(v97, sel_domain);
      uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
      uint64_t v101 = v100;

      if (v99 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v101 == v102)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_79;
      }

      unint64_t v119 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v119 & 1) != 0)
      {
LABEL_79:
        swift_willThrow();
        a6 = v94;
        Swift::Int v92 = v208;
LABEL_80:
        swift_willThrow();
LABEL_150:
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v15, v16, a6, v92);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }

      goto LABEL_164;
    }

    unint64_t v104 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v104, Path, 1, v207, v39);
    id v106 = v105;
    swift_bridgeObjectRelease();
    if ((v106 & 1) != 0)
    {
      char v205 = (uint64_t *)v16;
      uint64_t v125 = a6;
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      uint64_t v126 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      Swift::Int v127 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      Swift::Int v128 = objc_msgSend(v126, sel_initWithDomain_code_userInfo_, v127, 514, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v129 = objc_msgSend(v128, sel_domain);
      uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
      uint64_t v132 = v131;

      if (v130 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v132 == v133)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        char v191 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v191 & 1) == 0) {
          goto LABEL_166;
        }
      }

      swift_willThrow();
      a6 = v125;
      unint64_t v16 = (unint64_t)v205;
      Swift::Int v92 = v208;
LABEL_149:
      MEMORY[0x186E20E60](v104, -1LL, -1LL);
      goto LABEL_150;
    }

    Swift::Int v92 = v208;
    closure #1 in closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( v104,  __new,  (const char *)v210,  v200,  v197,  (unint64_t)v209,  v15,  v16,  a6,  v208);
    if (v17) {
      goto LABEL_149;
    }
    MEMORY[0x186E20E60](v104, -1LL, -1LL);
LABEL_66:
    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(v15, v16, a6, v92);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v200;
LABEL_67:
    a6 = a13;
    uint64_t v108 = *v22;
    id v107 = v22[1];
    swift_bridgeObjectRetain();
    cleanupTemporaryDirectory(at:)(v108, v107);
    uint64_t result = swift_bridgeObjectRelease();
    if ((*(_BYTE *)(a13 + 2) & 1) != 0) {
      return result;
    }
    __int128 v39 = (unint64_t)a14;
    uint64_t v109 = *(_WORD *)a13;
    uint64_t v211 = 0x800000000000005uLL;
    id v212 = 0LL;
    bzero(&v277, 0x40CuLL);
    uint64_t result = fgetattrlist(*a14, &v211, &v277, 0x40CuLL, 1u);
    if ((_DWORD)result) {
      return result;
    }
    id v213 = *(_OWORD *)&v278[4];
    id v214 = *(_OWORD *)&v278[20];
    uint64_t v215 = v279;
    uint64_t v216 = v280;
    uint64_t v217 = v281;
    char v218 = v282;
    id v219 = v283;
    id v220 = v284;
    Swift::String v221 = v285;
    uint64_t v222 = v286;
    uint64_t v223 = v287;
    uint64_t v224 = v288;
    uint64_t v225 = v289;
    uint64_t v226 = v290;
    uint64_t v227 = v291;
    Swift::Int v228 = v292;
    unint64_t v229 = v293;
    uint64_t v230 = v294;
    uint64_t v231 = v295;
    id v232 = v296;
    unint64_t v233 = v297;
    id v234 = v298;
    unint64_t v235 = v299;
    uint64_t v236 = v300;
    int v237 = v301;
    id v238 = v302;
    id v239 = v303;
    uint64_t v240 = v304;
    id v241 = v305;
    uint64_t v242 = v306;
    uint64_t v243 = v307;
    Swift::String v244 = v308;
    Swift::String v245 = v309;
    Swift::String v246 = v310;
    v247 = v311;
    id v248 = v312;
    v249 = v313;
    v250 = v314;
    uint64_t v251 = v315;
    id v252 = v316;
    uint64_t v253 = v317;
    id v254 = v318;
    id v255 = v319;
    uint64_t v256 = v320;
    uint64_t v257 = v321;
    uint64_t v258 = v322;
    char v259 = v323;
    char v260 = v324;
    uint64_t v261 = v325;
    uint64_t v262 = v326;
    id v263 = v327;
    id v264 = v328;
    char v265 = v329;
    unint64_t v266 = v330;
    unint64_t v267 = v331;
    uint64_t v268 = v332;
    v269 = v333;
    int v270 = v334;
    id v271 = v335;
    id v272 = v336;
    uint64_t v273 = v337;
    id v274 = v338;
    uint64_t v275 = v339;
    id v276 = v340;
    uint64_t result = strlen(__new);
    uint64_t v110 = result + 1;
    if (!__OFADD__(result, 1LL)) {
      break;
    }
LABEL_155:
    __break(1u);
LABEL_156:
    uint64_t v85 = String.UTF8View._foreignCount()();
  }

  if (v110 == *(unsigned int *)v278)
  {
    uint64_t result = strncmp(__new, (const char *)&v213, v110);
    if (!(_DWORD)result) {
      return fchmod(*a14, v109);
    }
  }

  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)( unint64_t *__src, unint64_t *a2, unint64_t a3, unint64_t *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = ((char *)a2 - (char *)__src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  id v27 = __src;
  id v26 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[3 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      unint64_t v16 = &v4[3 * v11];
      __int128 v25 = v16;
      id v27 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        unint64_t v17 = a3 - 24;
        id v18 = v6;
        while (1)
        {
          id v19 = (unint64_t *)(v17 + 24);
          unint64_t v20 = *(v18 - 3);
          unint64_t v21 = *(v18 - 2);
          v18 -= 3;
          if ((specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(v20, v21, *(v16 - 3), *(v16 - 2)) & 1) != 0)
          {
            if (v19 != v6 || v17 >= (unint64_t)v6)
            {
              __int128 v22 = *(_OWORD *)v18;
              *(void *)(v17 + 16) = v18[2];
              *(_OWORD *)unint64_t v17 = v22;
            }

            id v27 = v18;
            if (v18 <= v7) {
              goto LABEL_38;
            }
          }

          else
          {
            __int128 v25 = v16 - 3;
            if (v19 < v16 || v17 >= (unint64_t)v16 || v19 != v16)
            {
              __int128 v23 = *(_OWORD *)(v16 - 3);
              *(void *)(v17 + 16) = *(v16 - 1);
              *(_OWORD *)unint64_t v17 = v23;
            }

            id v18 = v6;
            v16 -= 3;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }

          v17 -= 24LL;
          uint64_t v6 = v18;
          if (v16 <= v4) {
            goto LABEL_38;
          }
        }
      }

      goto LABEL_38;
    }
  }

  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[3 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    uint64_t v12 = &v4[3 * v9];
    __int128 v25 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        if ((specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(*v4, v4[1], *v6, v6[1]) & 1) != 0)
        {
          unint64_t v13 = v6 + 3;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
          {
            __int128 v14 = *(_OWORD *)v6;
            v7[2] = v6[2];
            *(_OWORD *)uint64_t v7 = v14;
          }
        }

        else
        {
          if (v7 != v4)
          {
            __int128 v15 = *(_OWORD *)v4;
            v7[2] = v4[2];
            *(_OWORD *)uint64_t v7 = v15;
          }

          v4 += 3;
          id v26 = v4;
          unint64_t v13 = v6;
        }

        v7 += 3;
        if (v4 >= v12) {
          break;
        }
        uint64_t v6 = v13;
      }

      while ((unint64_t)v13 < a3);
      id v27 = v7;
    }

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)( void **__src, id *a2, unint64_t a3, void **__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 15;
  uint64_t v9 = v8 >> 4;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 15;
  uint64_t v12 = v11 >> 4;
  uint64_t v51 = __src;
  unint64_t v50 = __dst;
  if (v9 >= v11 >> 4)
  {
    if (v10 >= -15)
    {
      if (__dst != a2 || &a2[2 * v12] <= __dst) {
        memmove(__dst, a2, 16 * v12);
      }
      __int128 v25 = &v4[2 * v12];
      char v49 = v25;
      uint64_t v51 = v5;
      if (v6 < v5 && v10 >= 16)
      {
        __int128 v39 = v4;
        id v26 = (id *)(a3 - 16);
        id v27 = v5;
        unint64_t v44 = v6;
        while (1)
        {
          unint64_t v45 = v5;
          unint64_t v43 = (unint64_t)v25;
          id v28 = v25 - 2;
          uint64_t v29 = *(v27 - 2);
          v27 -= 2;
          id v30 = *(v25 - 2);
          swift_retain();
          id v40 = v29;
          swift_retain();
          id v31 = objc_msgSend(v30, sel_length);
          if (one-time initialization token for cache != -1) {
            swift_once();
          }
          uint64_t v32 = static LocaleCache.cache + 16;
          id v19 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
          swift_retain_n();
          os_unfair_lock_lock(v19);
          closure #1 in LocaleCache.system.getter(v32, &v47);
          if (v46) {
            goto LABEL_51;
          }
          id v33 = v26 + 2;
          os_unfair_lock_unlock(v19);
          swift_release_n();
          uint64_t v34 = v48;
          uint64_t ObjectType = swift_getObjectType();
          Swift::Int v36 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v34 + 488))(ObjectType, v34);
          id v37 = objc_msgSend(v30, sel_compare_options_range_locale_, v40, 577, 0, v31, v36);
          swift_release();

          swift_release();
          swift_unknownObjectRelease();
          if (v37 == (id)-1LL)
          {
            __int128 v25 = (void **)v43;
            if (v33 != v45 || v26 >= v45) {
              *(_OWORD *)id v26 = *(_OWORD *)v27;
            }
            uint64_t v51 = v27;
          }

          else
          {
            char v49 = v28;
            id v27 = v45;
            __int128 v25 = v28;
          }

          if (v27 > v44)
          {
            v26 -= 2;
            Swift::Int v5 = v27;
            if (v25 > v39) {
              continue;
            }
          }

          break;
        }
      }

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0LL;
  uint64_t v29 = (void *)MEMORY[0x18961AFE8];
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v7 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v7 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v24)) + (v6 << 6))
  {
    uint64_t v9 = 16 * i;
    uint64_t v10 = (unint64_t *)(*(void *)(a1 + 48) + v9);
    unint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    unint64_t v13 = (unint64_t *)(*(void *)(a1 + 56) + v9);
    unint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = closure #1 in static Locale.identifier(fromComponents:)(v11, v12, v14, v15);
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v18)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v29[2] + 1LL,  1,  v29);
        uint64_t v29 = (void *)result;
      }

      unint64_t v27 = v29[2];
      unint64_t v26 = v29[3];
      if (v27 >= v26 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v26 > 1),  v27 + 1,  1,  v29);
        uint64_t v29 = (void *)result;
      }

      v29[2] = v27 + 1;
      id v28 = &v29[4 * v27];
      v28[4] = v16;
      v28[5] = v18;
      v28[6] = v20;
      v28[7] = v22;
      if (v4) {
        goto LABEL_4;
      }
    }

    else if (v4)
    {
      goto LABEL_4;
    }

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[32];
  __int128 v25;
  _OWORD v26[2];
  __int128 v27;
  _OWORD v28[2];
  void *v29;
  uint64_t v20 = a1 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  uint64_t v21 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0LL;
  uint64_t v29 = (void *)MEMORY[0x18961AFE8];
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v9 = v6 + 1;
  if (!__OFADD__(v6, 1LL))
  {
    if (v9 < v21)
    {
      uint64_t v10 = *(void *)(v20 + 8 * v9);
      ++v6;
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v21) {
        goto LABEL_30;
      }
      uint64_t v10 = *(void *)(v20 + 8 * v6);
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 2;
      if (v9 + 2 >= v21) {
        goto LABEL_30;
      }
      uint64_t v10 = *(void *)(v20 + 8 * v6);
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 3;
      if (v9 + 3 >= v21) {
        goto LABEL_30;
      }
      uint64_t v10 = *(void *)(v20 + 8 * v6);
      if (v10)
      {
LABEL_22:
        unint64_t v4 = (v10 - 1) & v10;
        for (unint64_t i = __clz(__rbit64(v10)) + (v6 << 6); ; unint64_t i = v7 | (v6 << 6))
        {
          unint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
          unint64_t v14 = *v12;
          unint64_t v13 = v12[1];
          outlined init with copy of Any(*(void *)(a1 + 56) + 32 * i, (uint64_t)v28);
          *(void *)&unint64_t v27 = v14;
          *((void *)&v27 + 1) = v13;
          int64_t v25 = v27;
          v26[0] = v28[0];
          v26[1] = v28[1];
          unint64_t v15 = v27;
          outlined init with copy of Any((uint64_t)v26, (uint64_t)v24);
          swift_bridgeObjectRetain();
          if (swift_dynamicCast())
          {
            swift_bridgeObjectRetain();
            outlined destroy of Any?( (uint64_t)&v25,  &demangling cache variable for type metadata for (key: String, value: Any));
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v29[2] + 1LL,  1,  v29);
              uint64_t v29 = (void *)result;
            }

            uint64_t v17 = v29[2];
            uint64_t v16 = v29[3];
            if (v17 >= v16 >> 1)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v16 > 1),  v17 + 1,  1,  v29);
              uint64_t v29 = (void *)result;
            }

            uint64_t v18 = v29;
            v29[2] = v17 + 1;
            uint64_t v19 = &v18[4 * v17];
            *((_OWORD *)v19 + 2) = v15;
            v19[6] = v22;
            v19[7] = v23;
            if (!v4) {
              goto LABEL_7;
            }
          }

          else
          {
            uint64_t result = outlined destroy of Any?( (uint64_t)&v25,  &demangling cache variable for type metadata for (key: String, value: Any));
            if (!v4) {
              goto LABEL_7;
            }
          }

{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result = MEMORY[0x18961AFE8];
  uint64_t v9 = MEMORY[0x18961AFE8];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    unint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      int64_t v6 = *v4;
      unint64_t v7 = v5 == 0x467463656A627573LL && v6 == 0xEB000000006D726FLL;
      if (v7
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || (v5 == 0x6F467463656A626FLL ? (int64_t v8 = v6 == 0xEA00000000006D72LL) : (int64_t v8 = 0),
            v8
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
         || v5 == 0x6973736573736F70LL && v6 == 0xEE006D726F466576LL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
         || v5 == 0xD000000000000017LL && v6 == 0x80000001839CC300LL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
         || v5 == 0x766978656C666572LL && v6 == 0xED00006D726F4665LL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (swift_getKeyPath())
        {
          MEMORY[0x186E1BAC0]();
          if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }

      v4 += 2;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease();
    return v9;
  }

  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  _OWORD v20[4];
  uint64_t v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v2 = *(void *)(a1 + 64);
  unint64_t v26 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  unint64_t v4 = -1LL;
  if (v3 < 64) {
    unint64_t v4 = ~(-1LL << v3);
  }
  Swift::Int v5 = v4 & v2;
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  uint64_t v9 = (void *)MEMORY[0x18961AFE8];
  while (v5)
  {
    uint64_t v10 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v11 = v10 | (v8 << 6);
LABEL_22:
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v11, (uint64_t)v22);
    _OWORD v20[2] = v23;
    v20[3] = v24;
    uint64_t v21 = v25;
    v20[0] = v22[0];
    v20[1] = v22[1];
    unint64_t v15 = *((void *)&v23 + 1);
    uint64_t v16 = v24;
    outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v23 + 1), v24);
    uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)v20);
    if (v16 != 1)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
        uint64_t v9 = (void *)result;
      }

      uint64_t v18 = v9[2];
      uint64_t v17 = v9[3];
      if (v18 >= v17 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v17 > 1),  v18 + 1,  1,  v9);
        uint64_t v9 = (void *)result;
      }

      void v9[2] = v18 + 1;
      uint64_t v19 = &v9[2 * v18];
      v19[4] = v15;
      v19[5] = v16;
    }
  }

  unint64_t v12 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_30;
  }

  if (v12 >= v6) {
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v26 + 8 * v12);
  ++v8;
  if (v13) {
    goto LABEL_21;
  }
  int64_t v8 = v12 + 1;
  if (v12 + 1 >= v6) {
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v26 + 8 * v8);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v8 = v12 + 2;
  if (v12 + 2 >= v6) {
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v26 + 8 * v8);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v8 = v12 + 3;
  if (v12 + 3 >= v6) {
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(v26 + 8 * v8);
  if (v13)
  {
LABEL_21:
    Swift::Int v5 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_22;
  }

  unint64_t v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_28:
    swift_release();
    return (uint64_t)v9;
  }

  unint64_t v13 = *(void *)(v26 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_28;
    }
    unint64_t v13 = *(void *)(v26 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

{
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X10 }
  }

  return MEMORY[0x18961AFE8];
}

double Locale.init(identifier:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static LocaleCache.cache + 16;
  unint64_t v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.fixed(_:)(v6, a1, a2, &v9);
  os_unfair_lock_unlock(v7);
  swift_bridgeObjectRelease();
  swift_release_n();
  double result = *(double *)&v9;
  *a3 = v9;
  return result;
}

uint64_t Locale.forceTemperatureUnit.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 456))(ObjectType, v1);
}

uint64_t Locale.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
}

uint64_t Locale.forceMeasurementSystem.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 448))(ObjectType, v1);
}

BOOL static Locale.IdentifierType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Locale.IdentifierType.hash(into:)()
{
}

Swift::Int Locale.IdentifierType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static Locale.autoupdatingCurrent.getter@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, &v6);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v6;
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *a1 = v4;
  a1[1] = result;
  return result;
}

uint64_t static Locale.current.getter@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t result = LocaleCache.current.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

double Locale.init(components:)@<D0>(void *__src@<X0>, _OWORD *a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v3 = static LocaleCache.cache + 16;
  uint64_t v4 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in LocaleCache.fixedComponents(_:)(v3, __dst, &v6);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  outlined release of Locale.Components(__dst);
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

double Locale.init(languageComponents:)@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = (void *)a1[3];
  uint64_t v5 = a1[5];
  uint64_t v19 = *a1;
  uint64_t v20 = a1[4];
  uint64_t v6 = a1[6];
  unint64_t v7 = (void *)a1[7];
  uint64_t v8 = a1[9];
  uint64_t v21 = a1[8];
  uint64_t v9 = a1[10];
  uint64_t v10 = (void *)a1[11];
  *(void *)&__int128 v23 = 0LL;
  *((void *)&v23 + 1) = 0xE000000000000000LL;
  if (v2)
  {
    v11._uint64_t countAndFlagsBits = v4;
    v11._unint64_t object = v3;
    String.append(_:)(v11);
  }

  if (v5)
  {
    v12._uint64_t countAndFlagsBits = 45LL;
    v12._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = v6;
    v13._unint64_t object = v7;
    String.append(_:)(v13);
  }

  if (v8)
  {
    v14._uint64_t countAndFlagsBits = 95LL;
    v14._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = v9;
    v15._unint64_t object = v10;
    String.append(_:)(v15);
  }

  outlined consume of Locale.LanguageCode?(v19, v2);
  outlined consume of Locale.LanguageCode?(v20, v5);
  outlined consume of Locale.LanguageCode?(v21, v8);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v16 = static LocaleCache.cache + 16;
  uint64_t v17 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v17);
  closure #1 in LocaleCache.fixed(_:)(v16, v23, *((uint64_t *)&v23 + 1), &v23);
  os_unfair_lock_unlock(v17);
  swift_bridgeObjectRelease();
  swift_release_n();
  double result = *(double *)&v23;
  *a2 = v23;
  return result;
}

double Locale.init(languageCode:script:languageRegion:)@<D0>( _OWORD *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v5 = a1[1];
  __src[0] = *a1;
  __src[1] = v5;
  __int128 v6 = a2[1];
  __src[2] = *a2;
  __src[3] = v6;
  __int128 v7 = a3[1];
  __src[4] = *a3;
  __src[5] = v7;
  LOBYTE(__src[6]) = 16;
  *(_OWORD *)((char *)&__src[6] + 8) = 0u;
  *(_OWORD *)((char *)&__src[7] + 8) = 0u;
  *(_OWORD *)((char *)&__src[8] + 8) = 0u;
  *(_OWORD *)((char *)&__src[9] + 8) = 0u;
  *(_OWORD *)((char *)&__src[10] + 8) = 0u;
  *(_OWORD *)((char *)&__src[11] + 8) = 0u;
  WORD4(__src[12]) = 1031;
  memset(&__src[13], 0, 144);
  memcpy(__dst, __src, sizeof(__dst));
  outlined retain of Locale.Components((uint64_t *)__src);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static LocaleCache.cache + 16;
  uint64_t v9 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in LocaleCache.fixedComponents(_:)(v8, __dst, &v11);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  outlined release of Locale.Components((uint64_t *)__src);
  outlined release of Locale.Components((uint64_t *)__src);
  double result = *(double *)&v11;
  *a4 = v11;
  return result;
}

uint64_t Locale.init(identifier:preferences:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  __int128 v7 = (os_unfair_lock_s *)static LocaleCache.cache;
  outlined init with take of LocalePreferences?((uint64_t)v12, (uint64_t)v13);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v13) == 1)
  {
    swift_retain_n();
    os_unfair_lock_lock(v7 + 31);
    closure #1 in LocaleCache.fixed(_:)((uint64_t)&v7[4], a1, a2, v11);
    os_unfair_lock_unlock(v7 + 31);
    swift_bridgeObjectRelease();
    swift_release_n();
    uint64_t result = outlined retain of LocalePreferences?( (uint64_t)v12,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    uint64_t v10 = *((void *)&v11[0] + 1);
    uint64_t v9 = *(void **)&v11[0];
  }

  else
  {
    type metadata accessor for _LocaleICU();
    uint64_t v10 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU,  (uint64_t)&protocol conformance descriptor for _LocaleICU);
    outlined init with take of LocalePreferences?((uint64_t)v12, (uint64_t)v11);
    swift_allocObject();
    swift_retain();
    outlined retain of LocalePreferences?( (uint64_t)v12,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _LocaleICU.init(identifier:prefs:)(a1, a2, (uint64_t)v11);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = outlined retain of LocalePreferences?( (uint64_t)v12,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  }

  *a4 = v9;
  a4[1] = v10;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forIdentifier:)(Swift::String forIdentifier)
{
  unint64_t object = forIdentifier._object;
  uint64_t countAndFlagsBits = forIdentifier._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 72))( countAndFlagsBits,  object,  ObjectType,  v4);
  result.value._unint64_t object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forLanguageCode:)(Swift::String forLanguageCode)
{
  unint64_t object = forLanguageCode._object;
  uint64_t countAndFlagsBits = forLanguageCode._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 80))( countAndFlagsBits,  object,  ObjectType,  v4);
  result.value._unint64_t object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forRegionCode:)(Swift::String forRegionCode)
{
  unint64_t object = forRegionCode._object;
  uint64_t countAndFlagsBits = forRegionCode._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 88))( countAndFlagsBits,  object,  ObjectType,  v4);
  result.value._unint64_t object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forScriptCode:)(Swift::String forScriptCode)
{
  unint64_t object = forScriptCode._object;
  uint64_t countAndFlagsBits = forScriptCode._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 96))( countAndFlagsBits,  object,  ObjectType,  v4);
  result.value._unint64_t object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forVariantCode:)(Swift::String forVariantCode)
{
  unint64_t object = forVariantCode._object;
  uint64_t countAndFlagsBits = forVariantCode._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 104))( countAndFlagsBits,  object,  ObjectType,  v4);
  result.value._unint64_t object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(for:)(Foundation::Calendar::Identifier a1)
{
  char v2 = *(_BYTE *)a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v8 = v2;
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 112))(&v8, ObjectType, v3);
  result.value._unint64_t object = v6;
  result.value._uint64_t countAndFlagsBits = v5;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forCurrencyCode:)(Swift::String forCurrencyCode)
{
  unint64_t object = forCurrencyCode._object;
  uint64_t countAndFlagsBits = forCurrencyCode._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 120))( countAndFlagsBits,  object,  ObjectType,  v4);
  result.value._unint64_t object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forCollationIdentifier:)( Swift::String forCollationIdentifier)
{
  unint64_t object = forCollationIdentifier._object;
  uint64_t countAndFlagsBits = forCollationIdentifier._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 136))( countAndFlagsBits,  object,  ObjectType,  v4);
  result.value._unint64_t object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forCollatorIdentifier:)(Swift::String forCollatorIdentifier)
{
  unint64_t object = forCollatorIdentifier._object;
  uint64_t countAndFlagsBits = forCollatorIdentifier._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 144))( countAndFlagsBits,  object,  ObjectType,  v4);
  result.value._unint64_t object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

uint64_t Locale.languageCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 152))(ObjectType, v1);
}

uint64_t Locale.regionCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 176))(ObjectType, v1);
  if (v4)
  {
    uint64_t v5 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000LL) == 0) {
      uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
    }
    if (!v5)
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }
  }

  return result;
}

uint64_t Locale.scriptCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 160))(ObjectType, v1);
}

uint64_t Locale.variantCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 168))(ObjectType, v1);
  if (v4)
  {
    uint64_t v5 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000LL) == 0) {
      uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
    }
    if (!v5)
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }
  }

  return result;
}

uint64_t Locale.exemplarCharacterSet.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 184))(ObjectType, v1);
}

void *Locale.calendar.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v2 + 192))(ObjectType, v2);
  v5[0] = v1;
  v5[1] = v2;
  swift_unknownObjectRetain();
  return Calendar.locale.setter(v5);
}

uint64_t Locale._calendarIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 200))(ObjectType, v1);
}

uint64_t Locale.collationIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 208))(ObjectType, v1);
}

uint64_t Locale.usesMetricSystem.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(ObjectType, v1) & 1;
}

uint64_t Locale.decimalSeparator.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 224))(ObjectType, v1);
}

uint64_t Locale.groupingSeparator.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 232))(ObjectType, v1);
}

uint64_t Locale.currencySymbol.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 240))(ObjectType, v1);
}

uint64_t Locale.currencyCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 248))(ObjectType, v1);
}

uint64_t Locale.collatorIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 256))(ObjectType, v1);
}

uint64_t Locale.quotationBeginDelimiter.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 264))(ObjectType, v1);
}

uint64_t Locale.quotationEndDelimiter.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 272))(ObjectType, v1);
}

uint64_t Locale.alternateQuotationBeginDelimiter.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 280))(ObjectType, v1);
}

uint64_t Locale.alternateQuotationEndDelimiter.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 288))(ObjectType, v1);
}

uint64_t Locale.measurementSystem.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 296))(ObjectType, v1);
}

uint64_t Locale.currency.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 304))(ObjectType, v1);
}

uint64_t Locale.numberingSystem.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 312))(ObjectType, v1);
}

uint64_t Locale.availableNumberingSystems.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 320))(ObjectType, v1);
}

uint64_t Locale.firstDayOfWeek.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 328))(ObjectType, v1);
}

uint64_t Locale.language.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 352))(ObjectType, v1);
}

Swift::String __swiftcall Locale.identifier(_:)(Foundation::Locale::IdentifierType a1)
{
  char v2 = *(_BYTE *)a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v8 = v2;
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 416))(&v8, ObjectType, v3);
  result._unint64_t object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t Locale.hourCycle.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 360))(ObjectType, v1);
}

uint64_t Locale.collation.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 368))(ObjectType, v1);
}

uint64_t Locale.region.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 376))(ObjectType, v1);
}

uint64_t Locale.timeZone.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 384))(ObjectType, v1);
}

uint64_t Locale.subdivision.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 392))(ObjectType, v1);
}

uint64_t Locale.variant.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 400))(ObjectType, v1);
}

uint64_t Locale.forceHourCycle.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 424))(ObjectType, v1);
}

uint64_t Locale.forceFirstWeekday(_:)(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v6 = v2;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 432))(&v6, ObjectType, v3);
}

Swift::Int_optional __swiftcall Locale.forceMinDaysInFirstWeek(_:)(Foundation::Calendar::Identifier a1)
{
  char v2 = *(_BYTE *)a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v8 = v2;
  Swift::Int v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 440))(&v8, ObjectType, v3);
  Swift::Bool v7 = v6 & 1;
  result.value = v5;
  result.is_nil = v7;
  return result;
}

uint64_t Locale.customDateFormat(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 496))(&v6, ObjectType, v3);
}

uint64_t Locale.temperatureUnit.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 408))(ObjectType, v1);
}

uint64_t Locale.prefs.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 464))(ObjectType, v1);
}

uint64_t Locale.identifierCapturingPreferences.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 472))(ObjectType, v1);
}

void *static Locale.preferredLanguages.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  return LocaleCache.preferredLanguages(forCurrentUser:)(0);
}

uint64_t closure #1 in static Locale.identifier(fromComponents:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0LL;
  }
  uint64_t v7 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v7) = 1;
  }
  uint64_t v8 = 4LL << v7;
  uint64_t v27 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  uint64_t v9 = (char *)MEMORY[0x18961AFE8];
  unint64_t v10 = 15LL;
  do
  {
    unint64_t v11 = v10 & 0xC;
    unint64_t v12 = v10;
    if (v11 == v8) {
      unint64_t v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a1, a2);
    }
    unint64_t v13 = v12 >> 16;
    if (v12 >> 16 >= v4)
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unsigned __int8 v15 = String.UTF8View._foreignSubscript(position:)();
      if (v11 != v8) {
        goto LABEL_18;
      }
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      v29[0] = a1;
      v29[1] = v28;
      unsigned __int8 v15 = *((_BYTE *)v29 + v13);
      if (v11 != v8) {
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v14 = v27;
      if ((a1 & 0x1000000000000000LL) == 0) {
        uint64_t v14 = _StringObject.sharedUTF8.getter();
      }
      unsigned __int8 v15 = *(_BYTE *)(v14 + v13);
      if (v11 != v8)
      {
LABEL_18:
        if ((a2 & 0x1000000000000000LL) == 0) {
          goto LABEL_19;
        }
        goto LABEL_22;
      }
    }

    unint64_t v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a1, a2);
    if ((a2 & 0x1000000000000000LL) == 0)
    {
LABEL_19:
      unint64_t v10 = (v10 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_24;
    }

unint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 1LL;
  }
  uint64_t v5 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  uint64_t v6 = 4LL << v5;
  uint64_t v14 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v8 = 15LL;
  while (1)
  {
    unint64_t v9 = v8 & 0xC;
    unint64_t result = v8;
    if (v9 == v6) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    }
    unint64_t v11 = result >> 16;
    if (result >> 16 >= v2) {
      break;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      unsigned __int8 v12 = result;
      if (v9 != v6) {
        goto LABEL_19;
      }
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      v13[0] = a1;
      v13[1] = v14;
      unsigned __int8 v12 = *((_BYTE *)v13 + v11);
      if (v9 != v6) {
        goto LABEL_19;
      }
    }

    else
    {
      unint64_t result = v7;
      if ((a1 & 0x1000000000000000LL) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      unsigned __int8 v12 = *(_BYTE *)(result + v11);
      if (v9 != v6)
      {
LABEL_19:
        if ((a2 & 0x1000000000000000LL) == 0) {
          goto LABEL_20;
        }
        goto LABEL_23;
      }
    }

    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    unint64_t v8 = result;
    if ((a2 & 0x1000000000000000LL) == 0)
    {
LABEL_20:
      unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_25;
    }

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  char v13;
  uint64_t v14;
  void v15[2];
  uint64_t v16;
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 4 * v4;
  uint64_t v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v6) = 1;
  }
  uint64_t v7 = 4LL << v6;
  unint64_t v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v8 = 15LL;
  while (1)
  {
    unint64_t v9 = v8 >> 14;
    if (v8 >> 14 == v5) {
      return v9 == v5;
    }
    unint64_t v10 = v8 & 0xC;
    unint64_t result = v8;
    if (v10 == v7) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    }
    unsigned __int8 v12 = result >> 16;
    if (result >> 16 >= v4) {
      break;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      unint64_t v13 = result;
      if (v10 == v7) {
        goto LABEL_24;
      }
LABEL_19:
      if ((a2 & 0x1000000000000000LL) == 0) {
        goto LABEL_7;
      }
LABEL_20:
      if (v4 <= v8 >> 16) {
        goto LABEL_28;
      }
      unint64_t v8 = String.UTF8View._foreignIndex(after:)();
      if (v13 < 0) {
        return v9 == v5;
      }
    }

    else
    {
      if ((a2 & 0x2000000000000000LL) != 0)
      {
        v15[0] = a1;
        v15[1] = v16;
        unint64_t v13 = *((_BYTE *)v15 + v12);
        if (v10 == v7) {
          goto LABEL_24;
        }
        goto LABEL_19;
      }

      unint64_t result = v14;
      if ((a1 & 0x1000000000000000LL) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      unint64_t v13 = *(_BYTE *)(result + v12);
      if (v10 != v7) {
        goto LABEL_19;
      }
LABEL_24:
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
      unint64_t v8 = result;
      if ((a2 & 0x1000000000000000LL) != 0) {
        goto LABEL_20;
      }
LABEL_7:
      unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000LL) + 65540;
      if (v13 < 0) {
        return v9 == v5;
      }
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  char v13;
  uint64_t v14;
  void v15[2];
  uint64_t v16;
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 4 * v4;
  uint64_t v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v6) = 1;
  }
  uint64_t v7 = 4LL << v6;
  unint64_t v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v8 = 15LL;
  while (1)
  {
    unint64_t v9 = v8 >> 14;
    if (v8 >> 14 == v5) {
      return v9 == v5;
    }
    unint64_t v10 = v8 & 0xC;
    unint64_t result = v8;
    if (v10 == v7) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    }
    unsigned __int8 v12 = result >> 16;
    if (result >> 16 >= v4) {
      break;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      unint64_t v13 = result;
      if (v10 != v7) {
        goto LABEL_20;
      }
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      v15[0] = a1;
      v15[1] = v16;
      unint64_t v13 = *((_BYTE *)v15 + v12);
      if (v10 != v7) {
        goto LABEL_20;
      }
    }

    else
    {
      unint64_t result = v14;
      if ((a1 & 0x1000000000000000LL) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      unint64_t v13 = *(_BYTE *)(result + v12);
      if (v10 != v7)
      {
LABEL_20:
        if ((a2 & 0x1000000000000000LL) == 0) {
          goto LABEL_7;
        }
        goto LABEL_21;
      }
    }

    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    unint64_t v8 = result;
    if ((a2 & 0x1000000000000000LL) == 0)
    {
LABEL_7:
      unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_8;
    }

id static Locale.canonicalIdentifier(from:)()
{
  uint64_t v0 = (const __CFAllocator *)*MEMORY[0x189604DD0];
  uint64_t v1 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v0, v1);
  swift_unknownObjectRelease();
  if (!CanonicalLocaleIdentifierFromString) {
    return 0LL;
  }
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);

  return v3;
}

id static Locale._canonicalLocaleIdentifier(from:)(uint64_t a1, uint64_t a2)
{
  return static Locale._canonicalLocaleIdentifier(from:)(a1, a2, MEMORY[0x189602D88]);
}

id static Locale.canonicalLanguageIdentifier(from:)(uint64_t a1, uint64_t a2)
{
  return static Locale._canonicalLocaleIdentifier(from:)(a1, a2, MEMORY[0x189602D80]);
}

id static Locale._canonicalLocaleIdentifier(from:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = *MEMORY[0x189604DD0];
  uint64_t v5 = String._bridgeToObjectiveCImpl()();
  uint64_t v6 = (void *)a3(v4, v5);
  swift_unknownObjectRelease();
  if (!v6) {
    return 0LL;
  }
  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v7;
}

void Locale.hash(into:)(uint64_t a1)
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  Swift::UInt v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  _BYTE v39[144];
  _BYTE v40[8];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  void v58[18];
  _BYTE v59[144];
  _BYTE v60[144];
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(ObjectType, v3) & 1) != 0)
  {
    Swift::UInt8 v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    return;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v6(v58, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v59);
  outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v60) == 1)
  {
    Swift::UInt8 v5 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v40);
  Hasher._combine(_:)(1u);
  if (v40[0] == 2)
  {
    id v7 = 0;
  }

  else
  {
    id v7 = v40[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v7);
  unint64_t v8 = v41;
  if (!v41)
  {
    Hasher._combine(_:)(0);
    unint64_t v13 = v40;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v8 + 16));
  unint64_t v9 = *(void *)(v8 + 16);
  if (!v9)
  {
    outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v39);
    unint64_t v13 = v39;
LABEL_20:
    outlined retain of LocalePreferences(v13);
    if (!v42) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v59,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  unint64_t v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16LL;
    --v9;
  }

  while (v9);
  swift_bridgeObjectRelease();
  if (!v42)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v43) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

Swift::Int Locale.hashValue.getter()
{
  void (*v4)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  Swift::UInt v33;
  Swift::UInt8 v34;
  Swift::UInt8 v35;
  Swift::UInt8 v36;
  _BYTE v38[144];
  _BYTE v39[8];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  char v56;
  void v57[18];
  _BYTE v58[144];
  _BYTE v59[144];
  _BYTE v60[72];
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1) & 1) != 0)
  {
    Swift::UInt8 v3 = 1;
LABEL_5:
    Hasher._combine(_:)(v3);
    return Hasher._finalize()();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v1 + 464);
  swift_unknownObjectRetain();
  v4(v57, ObjectType, v1);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v57, (uint64_t)v58);
  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v59);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v59) == 1)
  {
    Swift::UInt8 v3 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v39);
  Hasher._combine(_:)(1u);
  if (v39[0] == 2)
  {
    Swift::UInt8 v5 = 0;
  }

  else
  {
    Swift::UInt8 v5 = v39[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v5);
  uint64_t v6 = v40;
  if (!v40)
  {
    Hasher._combine(_:)(0);
    unint64_t v11 = v39;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v6 + 16));
  id v7 = *(void *)(v6 + 16);
  if (!v7)
  {
    outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v38);
    unint64_t v11 = v38;
LABEL_20:
    outlined retain of LocalePreferences(v11);
    if (!v41) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v58,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  unint64_t v8 = v6 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 += 16LL;
    --v7;
  }

  while (v7);
  swift_bridgeObjectRelease();
  if (!v41)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v42) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale()
{
  void (*v4)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt v31;
  Swift::UInt v32;
  Swift::UInt8 v33;
  Swift::UInt8 v34;
  Swift::UInt8 v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  void v55[18];
  _BYTE v56[144];
  _BYTE v57[144];
  _BYTE v58[72];
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1) & 1) != 0)
  {
    Swift::UInt8 v3 = 1;
LABEL_5:
    Hasher._combine(_:)(v3);
    return Hasher._finalize()();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v1 + 464);
  swift_unknownObjectRetain();
  v4(v55, ObjectType, v1);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v55, (uint64_t)v56);
  outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v57);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v57) == 1)
  {
    Swift::UInt8 v3 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)&v37);
  Hasher._combine(_:)(1u);
  if (v37 == 2)
  {
    Swift::UInt8 v5 = 0;
  }

  else
  {
    Swift::UInt8 v5 = v37 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v5);
  uint64_t v6 = v38;
  if (!v38)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v37);
    if (!v39) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v6 + 16));
  id v7 = *(void *)(v6 + 16);
  if (!v7) {
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?( (uint64_t)v56,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  unint64_t v8 = v6 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 += 16LL;
    --v7;
  }

  while (v7);
  swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v40) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }

uint64_t Locale.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v33[1] = a1;
  v33[0] = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v33[0] - 8LL);
  MEMORY[0x1895F8858](v33[0]);
  uint64_t v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  id v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v1;
  uint64_t v9 = v1[1];
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 64);
  swift_unknownObjectRetain();
  uint64_t v12 = v11(ObjectType, v9);
  uint64_t v14 = v13;
  swift_unknownObjectRelease();
  uint64_t v15 = MEMORY[0x189617FA8];
  uint64_t v38 = MEMORY[0x189617FA8];
  *(void *)&__int128 v37 = v12;
  *((void *)&v37 + 1) = v14;
  __int128 v34 = xmmword_18372DCC0;
  outlined init with take of Any(&v37, &v35);
  unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
  unint64_t v18 = v16[2];
  unint64_t v17 = v16[3];
  if (v18 >= v17 >> 1) {
    unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v17 > 1),  v18 + 1,  1,  v16);
  }
  v16[2] = v18 + 1;
  unint64_t v19 = &v16[6 * v18];
  __int128 v20 = v34;
  __int128 v21 = v36;
  void v19[3] = v35;
  v19[4] = v21;
  v19[2] = v20;
  *(void *)&__int128 v34 = v8;
  uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v38 = v15;
  *(void *)&__int128 v37 = v22;
  *((void *)&v37 + 1) = v23;
  __int128 v34 = xmmword_18372DCD0;
  outlined init with take of Any(&v37, &v35);
  unint64_t v25 = v16[2];
  unint64_t v24 = v16[3];
  if (v25 >= v24 >> 1) {
    unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v24 > 1),  v25 + 1,  1,  v16);
  }
  v16[2] = v25 + 1;
  unint64_t v26 = &v16[6 * v25];
  __int128 v27 = v34;
  __int128 v28 = v36;
  v26[3] = v35;
  v26[4] = v28;
  v26[2] = v27;
  *(void *)&__int128 v34 = v8;
  *((void *)&v34 + 1) = v9;
  *(void *)&__int128 v37 = v16;
  uint64_t v29 = *MEMORY[0x18961A718];
  uint64_t v30 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v31 = *(void *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 104))(v7, v29, v30);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v7, 0LL, 1LL, v30);
  (*(void (**)(char *, void, void))(v2 + 104))(v4, *MEMORY[0x18961A748], v33[0]);
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Locale.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  swift_unknownObjectRetain();
  uint64_t v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  v5._uint64_t countAndFlagsBits = 10272LL;
  v5._unint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 41LL;
  v7._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  return v4;
}

uint64_t Locale.debugDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  swift_unknownObjectRetain();
  uint64_t v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  v5._uint64_t countAndFlagsBits = 10272LL;
  v5._unint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 41LL;
  v7._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  return v4;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale()
{
  return Locale.description.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.CodingKeys()
{
  if (*v0) {
    return 0x746E6572727563LL;
  }
  else {
    return 0x696669746E656469LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Locale.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Locale.CodingKeys@<X0>( uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Current()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Current()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t Locale.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Locale.CodingKeys>);
  MEMORY[0x1895F8858](v3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.CodingKeys and conformance Locale.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type Locale.Current and conformance Locale.Current();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    __asm { BR              X10 }
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void Locale.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Locale.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  Swift::String v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.CodingKeys and conformance Locale.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 64);
  swift_unknownObjectRetain();
  v10(ObjectType, v8);
  swift_unknownObjectRelease();
  LOBYTE(v24) = 0;
  uint64_t v11 = v26;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRelease();
  }

  else
  {
    __int128 v21 = v6;
    uint64_t v26 = v4;
    swift_bridgeObjectRelease();
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v12 = static LocaleCache.cache + 16;
    uint64_t v13 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
    swift_retain_n();
    os_unfair_lock_lock(v13);
    closure #1 in LocaleCache.autoupdatingCurrent.getter(v12, &v22);
    os_unfair_lock_unlock(v13);
    swift_release_n();
    uint64_t v14 = v22;
    uint64_t v15 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
    uint64_t v22 = v14;
    uint64_t v23 = v15;
    char v16 = specialized static Locale.== infix(_:_:)((uint64_t)&v24, (uint64_t)&v22);
    swift_release();
    if ((v16 & 1) != 0)
    {
      LOBYTE(v24) = 2;
    }

    else
    {
      uint64_t v24 = v7;
      uint64_t v25 = v8;
      uint64_t v22 = static LocaleCache.cache;
      uint64_t v22 = LocaleCache.current.getter();
      uint64_t v23 = v17;
      char v18 = specialized static Locale.== infix(_:_:)((uint64_t)&v24, (uint64_t)&v22);
      swift_unknownObjectRelease();
      LOBYTE(v24) = (v18 & 1) != 0;
    }

    LOBYTE(v22) = 1;
    lazy protocol witness table accessor for type Locale.Current and conformance Locale.Current();
    unint64_t v19 = v21;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v3);
  }

uint64_t protocol witness for Decodable.init(from:) in conformance Locale(void *a1)
{
  return Locale.init(from:)(a1);
}

void protocol witness for Encodable.encode(to:) in conformance Locale(void *a1)
{
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  void v5[2];
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  void v5[2];
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v3, 1LL, a1);
    }
    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x18961AFE8];
    __dst = (char *)(MEMORY[0x18961AFE8] + 32LL);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      uint64_t v11 = (char *)MEMORY[0x18961AFE8];
LABEL_118:
      id v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v95 + 16 * v98),  (char *)(v95 + 16LL * *(void *)&v94[16 * v12 + 16]),  v95 + 16 * v99,  __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          uint64_t v100 = &v97[16 * v96 + 32];
          *(void *)uint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          id v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }

        while (v101 > 2);
      }

{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  __int128 *v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  char *__dst;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v2 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v2);
  if (result >= v2)
  {
    if (v2 < 0) {
      goto LABEL_149;
    }
    if (v2) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v2, 1LL, a1);
    }
    return result;
  }

  if (v2 >= 0) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = v2 + 1;
  }
  if (v2 < -1) {
    goto LABEL_157;
  }
  Swift::Int v105 = result;
  Swift::String v112 = v1;
  if (v2 < 2)
  {
    uint64_t v7 = MEMORY[0x18961AFE8];
    __dst = (char *)(MEMORY[0x18961AFE8] + 32LL);
    if (v2 != 1)
    {
      uint64_t v11 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      Swift::Int v9 = (char *)MEMORY[0x18961AFE8];
      uint64_t v10 = a1;
LABEL_115:
      uint64_t v95 = v9;
      uint64_t v104 = v7;
      if (v11 >= 2)
      {
        unint64_t v96 = *v10;
        do
        {
          uint64_t v97 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_144;
          }
          if (!v96) {
            goto LABEL_156;
          }
          uint64_t v98 = v95;
          uint64_t v99 = *(void *)&v95[16 * v97 + 32];
          uint64_t v100 = *(void *)&v95[16 * v11 + 24];
          unint64_t v101 = v112;
          specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v96 + 56 * v99),  (char *)(v96 + 56LL * *(void *)&v95[16 * v11 + 16]),  v96 + 56 * v100,  __dst);
          Swift::String v112 = v101;
          if (v101) {
            break;
          }
          if (v100 < v99) {
            goto LABEL_145;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
          }
          if (v97 >= *((void *)v98 + 2)) {
            goto LABEL_146;
          }
          uint64_t v102 = &v98[16 * v97 + 32];
          *(void *)uint64_t v102 = v99;
          *((void *)v102 + 1) = v100;
          uint64_t v103 = *((void *)v98 + 2);
          if (v11 > v103) {
            goto LABEL_147;
          }
          memmove(&v98[16 * v11 + 16], &v98[16 * v11 + 32], 16 * (v103 - v11));
          uint64_t v95 = v98;
          *((void *)v98 + 2) = v103 - 1;
          uint64_t v11 = v103 - 1;
        }

        while (v103 > 2);
      }

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  char *v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  char *v37;
  unsigned __int8 v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  Swift::Int v42;
  int v43;
  Swift::Int v44;
  _DWORD *v45;
  Swift::Int v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unsigned __int8 v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  char v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  Swift::Int v124;
  Swift::Int v125;
  void (*v126)(char *, uint64_t);
  void (*v127)(char *, uint64_t);
  Swift::Int v128;
  Swift::Int v129;
  _DWORD *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  Swift::Int v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v140 = type metadata accessor for Unicode.CanonicalCombiningClass();
  id v134 = *(void *)(v140 - 8);
  Swift::Int v3 = MEMORY[0x1895F8858](v140);
  Swift::Int v139 = (char *)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v3);
  Swift::Int v138 = (char *)&v118 - v5;
  Swift::Int v137 = type metadata accessor for Unicode.Scalar.Properties();
  id v133 = *(void *)(v137 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v137);
  uint64_t v136 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v135 = (char *)&v118 - v8;
  Swift::Int v9 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v9);
  if (result >= v9)
  {
    if (v9 < 0) {
      goto LABEL_134;
    }
    if (v9) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v9, 1LL, a1);
    }
    return result;
  }

  if (v9 >= 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v9 + 1;
  }
  if (v9 < -1) {
    goto LABEL_142;
  }
  unint64_t v120 = a1;
  uint64_t v132 = v1;
  uint64_t v124 = result;
  if (v9 < 2)
  {
    uint64_t v14 = (char *)MEMORY[0x18961AFE8];
    uint64_t v131 = (char *)(MEMORY[0x18961AFE8] + 32LL);
    uint64_t v123 = MEMORY[0x18961AFE8];
    if (v9 != 1)
    {
      uint64_t v17 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
LABEL_100:
      if (v17 >= 2)
      {
        uint64_t v111 = *v120;
        do
        {
          Swift::String v112 = v17 - 2;
          if (v17 < 2) {
            goto LABEL_129;
          }
          if (!v111) {
            goto LABEL_141;
          }
          uint64_t v113 = *(void *)&v14[16 * v112 + 32];
          id v114 = *(void *)&v14[16 * v17 + 24];
          uint64_t v115 = v132;
          specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v111 + 4 * v113),  (char *)(v111 + 4LL * *(void *)&v14[16 * v17 + 16]),  (char *)(v111 + 4 * v114),  v131);
          uint64_t v132 = v115;
          if (v115) {
            break;
          }
          if (v114 < v113) {
            goto LABEL_130;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
          }
          if (v112 >= *((void *)v14 + 2)) {
            goto LABEL_131;
          }
          uint64_t v116 = &v14[16 * v112 + 32];
          *(void *)uint64_t v116 = v113;
          *((void *)v116 + 1) = v114;
          unint64_t v117 = *((void *)v14 + 2);
          if (v17 > v117) {
            goto LABEL_132;
          }
          memmove(&v14[16 * v17 + 16], &v14[16 * v17 + 32], 16 * (v117 - v17));
          *((void *)v14 + 2) = v117 - 1;
          uint64_t v17 = v117 - 1;
        }

        while (v117 > 2);
      }

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  Swift::Int v18;
  _BYTE *v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  Swift::Int v26;
  _OWORD *v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  Swift::Int v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  _OWORD *v39;
  BOOL v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  Swift::Int v108;
  Swift::Int v109;
  uint64_t v110;
  char *__dst;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_159;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v3, 1LL, a1);
    }
    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_168;
  }
  uint64_t v108 = result;
  Swift::Int v105 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x18961AFE8];
    __dst = (char *)(MEMORY[0x18961AFE8] + 32LL);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      uint64_t v11 = (char *)MEMORY[0x18961AFE8];
LABEL_125:
      unint64_t v96 = v11;
      Swift::Int v107 = v8;
      if (v12 >= 2)
      {
        uint64_t v97 = *v105;
        do
        {
          uint64_t v98 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_154;
          }
          if (!v97) {
            goto LABEL_166;
          }
          uint64_t v99 = v96;
          uint64_t v100 = *(void *)&v96[16 * v98 + 32];
          unint64_t v101 = *(void *)&v96[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v97 + 48 * v100),  (char *)(v97 + 48LL * *(void *)&v96[16 * v12 + 16]),  v97 + 48 * v101,  __dst);
          if (v1) {
            break;
          }
          if (v101 < v100) {
            goto LABEL_155;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v99);
          }
          if (v98 >= *((void *)v99 + 2)) {
            goto LABEL_156;
          }
          uint64_t v102 = &v99[16 * v98 + 32];
          *(void *)uint64_t v102 = v100;
          *((void *)v102 + 1) = v101;
          uint64_t v103 = *((void *)v99 + 2);
          if (v12 > v103) {
            goto LABEL_157;
          }
          memmove(&v99[16 * v12 + 16], &v99[16 * v12 + 32], 16 * (v103 - v12));
          unint64_t v96 = v99;
          *((void *)v99 + 2) = v103 - 1;
          unint64_t v12 = v103 - 1;
        }

        while (v103 > 2);
      }

LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v104 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = v7;
    __dst = (char *)(v7 + 32);
  }

  Swift::Int v9 = 0LL;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)MEMORY[0x18961AFE8];
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }

    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }

    __int128 v21 = (void *)(v103 + 16 * v20);
    do
    {
      uint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0) {
          goto LABEL_37;
        }
      }

      else if (((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
      {
        goto LABEL_36;
      }

      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }

    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }

          ++v28;
          v25 -= 16LL;
          v26 += 16LL;
        }

        while (v28 < v27);
      }

    unint64_t v83 = v59 + *(unsigned __int16 *)(v41 + 46) - *(unsigned __int16 *)(v6 + 46);
    uint64_t v58 = v83 + 0xFFFF;
    *(_WORD *)(v36 + 46) = v83 - 1;
    if (v52 != 7)
    {
LABEL_161:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_162;
    }

    LODWORD(v59) = HIWORD(v58);
    uint64_t v61 = 8LL;
    goto LABEL_117;
  }

  uint64_t v60 = v120;
  if (!v46)
  {
    if (v47)
    {
      uint64_t v61 = 0LL;
      LODWORD(v59) = 1;
      goto LABEL_131;
    }

    uint64_t v74 = 8LL;
LABEL_140:
    if (!v45[v74 - 1])
    {
      do
      {
        *(void *)(v36 + 16) = v74 - 1;
        if (v74 == 1) {
          break;
        }
      }

      while (!*(unsigned __int16 *)(v36 + 28 + 2 * v74--));
    }

      if ((v226 & 1) != 0)
      {
        uint64_t v92 = v222;
        Unicode.Scalar.properties.getter();
        unint64_t v93 = Unicode.Scalar.Properties._caseFolded.getter();
        uint64_t v95 = v94;
        (*(void (**)(char *, uint64_t))(v223 + 8))(v92, v224);
        unint64_t v96 = v93;
        Swift::Int v90 = v225;
        uint64_t v97 = v95;
      }

      else
      {
        if (v102 >= 0x80)
        {
          uint64_t v108 = (v102 & 0x3F) << 8;
          if (v102 >= 0x800)
          {
            uint64_t v109 = (v108 | (v102 >> 6) & 0x3F) << 8;
            uint64_t v110 = (((v109 | (v102 >> 12) & 0x3F) << 8) | (v102 >> 18)) - 2122219023;
            Swift::Int v107 = (v109 | (v102 >> 12)) + 8487393;
            if (HIWORD(v102)) {
              Swift::Int v107 = v110;
            }
          }

          else
          {
            Swift::Int v107 = (v108 | (v102 >> 6)) + 33217;
          }
        }

        else
        {
          Swift::Int v107 = v102 + 1;
        }

        Swift::Int v228 = (v107 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v107) >> 3))));
        unint64_t v96 = MEMORY[0x186E1B6AC](&v228);
      }

      String.append(_:)(*(Swift::String *)&v96);
      swift_bridgeObjectRelease();
    }

    v91 += v101;
    if (v91 >= v89)
    {
      swift_bridgeObjectRelease();
      unint64_t v120 = v230;
      unint64_t v88 = v231;
      goto LABEL_137;
    }
  }

  LODWORD(v228) = v98;
  CFUniCharCompatibilityDecompose();
  uint64_t v102 = v228;
  if (v228 >> 11 == 27)
  {
    __break(1u);
    goto LABEL_229;
  }

  if (WORD1(v228) <= 0x10u)
  {
    if ((v90 & 1) == 0) {
      goto LABEL_115;
    }
    goto LABEL_106;
  }

  __break(1u);
LABEL_220:
  uint64_t v181 = String.subscript.getter();
  uint64_t v183 = v182;
  if (v181 == String.subscript.getter() && v183 == v184)
  {
    swift_bridgeObjectRelease_n();
    id v179 = 0LL;
    goto LABEL_237;
  }

          BOOL v39 = 0;
          uint64_t v35 = (char *)v64;
          goto LABEL_116;
        }

        if ((v26 & 1) != 0)
        {
          uint64_t v31 = (uint64_t)v67;
          uint64_t v25 = v27;
LABEL_52:
          if ((char *)v66 == v60)
          {
            char v67 = 0LL;
            char v68 = 0LL;
            uint64_t v63 = 0LL;
            BOOL v65 = 0LL;
            uint64_t v66 = (uint64_t)v60;
            uint64_t v17 = 1;
            uint64_t v70 = 1;
          }

          else
          {
            unint64_t v42 = *(_BYTE *)(v71 + 24);
            Swift::Int result = (char *)objc_msgSend(*(id *)(v71 + 16), sel_rangeAtIndex_, v66);
            unint64_t v44 = &result[v43];
            uint64_t v45 = __OFADD__(result, v43);
            if ((v42 & 1) != 0)
            {
              if (v45) {
                goto LABEL_149;
              }
            }

            else
            {
              if (v45) {
                goto LABEL_151;
              }
            }

            if (__OFADD__(v66, 1LL)) {
              goto LABEL_140;
            }
            ++v66;
            char v67 = &result[v43];
            uint64_t v17 = 0;
            uint64_t v70 = 0;
            char v68 = (uint64_t)result;
            uint64_t v63 = (uint64_t)result;
            BOOL v65 = &result[v43];
          }

          goto LABEL_89;
        }

        uint64_t v17 = 0;
        uint64_t v31 = v68;
        uint64_t v25 = v27;
      }

  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
  return result;
}

    uint64_t v91 = v76 + *(unsigned __int16 *)(v28 + 46) - *(unsigned __int16 *)(v7 + 46);
    uint64_t v75 = v91 + 0xFFFF;
    *(_WORD *)(v57 + 46) = v91 - 1;
    if (v65 != 7)
    {
LABEL_161:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_162;
    }

    LODWORD(v76) = HIWORD(v75);
    uint64_t v78 = 8LL;
    goto LABEL_117;
  }

  uint64_t v77 = v127;
  if (!v59)
  {
    if (v60)
    {
      uint64_t v78 = 0LL;
      LODWORD(v76) = 1;
      goto LABEL_131;
    }

    uint64_t v84 = 8LL;
LABEL_140:
    if (!v58[v84 - 1])
    {
      do
      {
        *(void *)(v57 + 16) = v84 - 1;
        if (v84 == 1) {
          break;
        }
      }

      while (!*(unsigned __int16 *)(v57 + 28 + 2 * v84--));
    }

    uint64_t v91 = v76 + *(unsigned __int16 *)(v28 + 46) - *(unsigned __int16 *)(v7 + 46);
    uint64_t v75 = v91 + 0xFFFF;
    *(_WORD *)(v57 + 46) = v91 - 1;
    if (v65 != 7)
    {
LABEL_161:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_162;
    }

    LODWORD(v76) = HIWORD(v75);
    uint64_t v78 = 8LL;
    goto LABEL_117;
  }

  uint64_t v77 = v127;
  if (!v59)
  {
    if (v60)
    {
      uint64_t v78 = 0LL;
      LODWORD(v76) = 1;
      goto LABEL_131;
    }

    uint64_t v84 = 8LL;
LABEL_140:
    if (!v58[v84 - 1])
    {
      do
      {
        *(void *)(v57 + 16) = v84 - 1;
        if (v84 == 1) {
          break;
        }
      }

      while (!*(unsigned __int16 *)(v57 + 28 + 2 * v84--));
    }

  swift_release();
  Duration.TimeFormatStyle.Attributed.formatWithPatternComponents(_:hour:minute:second:)( (uint64_t)v153,  v187,  v157,  v156,  v160);
  swift_bridgeObjectRelease();
  v186(v190, v154);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

  swift_release_n();
  swift_willThrow();
  __break(1u);
LABEL_116:
  swift_release_n();
  Swift::Int result = swift_willThrow();
  __break(1u);
  return result;
}

  swift_release_n();
  swift_willThrow();
  __break(1u);
LABEL_116:
  swift_release_n();
  Swift::Int result = swift_willThrow();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_118:
  Swift::Int result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

        __break(1u);
        goto LABEL_116;
      }

        if ((unint64_t)v46 >= a4)
        {
          uint64_t v62 = a4 + i;
          if (a4 + i >= (unint64_t)v46)
          {
            if (v62 > a4)
            {
              uint64_t v63 = -(uint64_t)a4;
              uint64_t v64 = i + a4;
              unint64_t i = 1LL;
              while (1)
              {
                BOOL v65 = 0LL;
                uint64_t v66 = 0LL;
                char v67 = v64 - a4;
                while (1)
                {
                  char v68 = *(unsigned __int8 *)(a4 + v66);
                  if (v68 == 10)
                  {
                    uint64_t v70 = __OFADD__(i++, 1LL);
                    if (!v70)
                    {
                      a4 += v66 + 1;
                      goto LABEL_138;
                    }

                    goto LABEL_272;
                  }

                  if (v68 == 13) {
                    break;
                  }
                  uint64_t v69 = v66 + 1;
                  if (__OFADD__(v66, 1LL)) {
                    goto LABEL_251;
                  }
                  ++v66;
                  --v65;
                  if (a4 + v66 >= v62)
                  {
                    Swift::Int v13 = 0xED00007265626D75LL;
                    Swift::Int v20 = 0x6E20786568206E69LL;
                    goto LABEL_181;
                  }
                }

                uint64_t v71 = a4 + v66;
                if (*(_BYTE *)(v71 + 1) == 10) {
                  uint64_t v71 = a4 + v66 + 1;
                }
LABEL_136:
                uint64_t v70 = __OFADD__(i++, 1LL);
                if (v70) {
                  goto LABEL_273;
                }
                a4 = v71 + 1;
LABEL_138:
                Swift::Int v13 = 0xED00007265626D75LL;
                Swift::Int v20 = 0x6E20786568206E69LL;
                if (a4 >= v62)
                {
                  uint64_t v69 = 0LL;
                  goto LABEL_181;
                }
              }
            }

            uint64_t v69 = 0LL;
            Swift::Int v13 = 0xED00007265626D75LL;
            Swift::Int v20 = 0x6E20786568206E69LL;
            unint64_t i = 1LL;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)Swift::Int v90 = v20;
            *(void *)(v90 + 8) = v13;
            *(void *)(v90 + 16) = v19;
            *(void *)(v90 + 24) = i;
            *(void *)(v90 + 32) = v69;
            *(void *)(v90 + 40) = a3;
            uint64_t v91 = 1;
            goto LABEL_187;
          }
        }

        if ((unint64_t)v46 >= a4)
        {
          uint64_t v62 = a4 + i;
          if (a4 + i >= (unint64_t)v46)
          {
            if (v62 > a4)
            {
              uint64_t v63 = -(uint64_t)a4;
              uint64_t v64 = i + a4;
              unint64_t i = 1LL;
              while (1)
              {
                BOOL v65 = 0LL;
                uint64_t v66 = 0LL;
                char v67 = v64 - a4;
                while (1)
                {
                  char v68 = *(unsigned __int8 *)(a4 + v66);
                  if (v68 == 10)
                  {
                    uint64_t v70 = __OFADD__(i++, 1LL);
                    if (!v70)
                    {
                      a4 += v66 + 1;
                      goto LABEL_138;
                    }

                    goto LABEL_272;
                  }

                  if (v68 == 13) {
                    break;
                  }
                  uint64_t v69 = v66 + 1;
                  if (__OFADD__(v66, 1LL)) {
                    goto LABEL_251;
                  }
                  ++v66;
                  --v65;
                  if (a4 + v66 >= v62)
                  {
                    Swift::Int v13 = 0xED00007265626D75LL;
                    Swift::Int v20 = 0x6E20786568206E69LL;
                    goto LABEL_181;
                  }
                }

                uint64_t v71 = a4 + v66;
                if (*(_BYTE *)(v71 + 1) == 10) {
                  uint64_t v71 = a4 + v66 + 1;
                }
LABEL_136:
                uint64_t v70 = __OFADD__(i++, 1LL);
                if (v70) {
                  goto LABEL_273;
                }
                a4 = v71 + 1;
LABEL_138:
                Swift::Int v13 = 0xED00007265626D75LL;
                Swift::Int v20 = 0x6E20786568206E69LL;
                if (a4 >= v62)
                {
                  uint64_t v69 = 0LL;
                  goto LABEL_181;
                }
              }
            }

            uint64_t v69 = 0LL;
            Swift::Int v13 = 0xED00007265626D75LL;
            Swift::Int v20 = 0x6E20786568206E69LL;
            unint64_t i = 1LL;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)Swift::Int v90 = v20;
            *(void *)(v90 + 8) = v13;
            *(void *)(v90 + 16) = v19;
            *(void *)(v90 + 24) = i;
            *(void *)(v90 + 32) = v69;
            *(void *)(v90 + 40) = a3;
            uint64_t v91 = 1;
            goto LABEL_187;
          }
        }

        if ((unint64_t)v46 >= a4)
        {
          uint64_t v62 = a4 + i;
          if (a4 + i >= (unint64_t)v46)
          {
            if (v62 > a4)
            {
              uint64_t v63 = -(uint64_t)a4;
              uint64_t v64 = i + a4;
              unint64_t i = 1LL;
              while (1)
              {
                BOOL v65 = 0LL;
                uint64_t v66 = 0LL;
                char v67 = v64 - a4;
                while (1)
                {
                  char v68 = *(unsigned __int8 *)(a4 + v66);
                  if (v68 == 10)
                  {
                    uint64_t v70 = __OFADD__(i++, 1LL);
                    if (!v70)
                    {
                      a4 += v66 + 1;
                      goto LABEL_138;
                    }

                    goto LABEL_272;
                  }

                  if (v68 == 13) {
                    break;
                  }
                  uint64_t v69 = v66 + 1;
                  if (__OFADD__(v66, 1LL)) {
                    goto LABEL_251;
                  }
                  ++v66;
                  --v65;
                  if (a4 + v66 >= v62)
                  {
                    Swift::Int v13 = 0xED00007265626D75LL;
                    Swift::Int v20 = 0x6E20786568206E69LL;
                    goto LABEL_181;
                  }
                }

                uint64_t v71 = a4 + v66;
                if (*(_BYTE *)(v71 + 1) == 10) {
                  uint64_t v71 = a4 + v66 + 1;
                }
LABEL_136:
                uint64_t v70 = __OFADD__(i++, 1LL);
                if (v70) {
                  goto LABEL_273;
                }
                a4 = v71 + 1;
LABEL_138:
                Swift::Int v13 = 0xED00007265626D75LL;
                Swift::Int v20 = 0x6E20786568206E69LL;
                if (a4 >= v62)
                {
                  uint64_t v69 = 0LL;
                  goto LABEL_181;
                }
              }
            }

            uint64_t v69 = 0LL;
            Swift::Int v13 = 0xED00007265626D75LL;
            Swift::Int v20 = 0x6E20786568206E69LL;
            unint64_t i = 1LL;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)Swift::Int v90 = v20;
            *(void *)(v90 + 8) = v13;
            *(void *)(v90 + 16) = v19;
            *(void *)(v90 + 24) = i;
            *(void *)(v90 + 32) = v69;
            *(void *)(v90 + 40) = a3;
            uint64_t v91 = 1;
            goto LABEL_187;
          }
        }

        if ((unint64_t)v48 >= a4)
        {
          uint64_t v64 = a4 + i;
          if (a4 + i >= (unint64_t)v48)
          {
            if (v64 > a4)
            {
              BOOL v65 = -(uint64_t)a4;
              uint64_t v66 = i + a4;
              unint64_t i = 1LL;
              while (1)
              {
                char v67 = 0LL;
                char v68 = 0LL;
                uint64_t v69 = v66 - a4;
                while (1)
                {
                  uint64_t v70 = *(unsigned __int8 *)(a4 + v68);
                  if (v70 == 10)
                  {
                    BOOL v72 = __OFADD__(i++, 1LL);
                    if (!v72)
                    {
                      a4 += v68 + 1;
                      goto LABEL_138;
                    }

                    goto LABEL_271;
                  }

                  if (v70 == 13) {
                    break;
                  }
                  uint64_t v71 = v68 + 1;
                  if (__OFADD__(v68, 1LL)) {
                    goto LABEL_250;
                  }
                  ++v68;
                  --v67;
                  if (a4 + v68 >= v64)
                  {
                    uint64_t v15 = 0xED00007265626D75LL;
                    Swift::Int v22 = 0x6E20786568206E69LL;
                    goto LABEL_181;
                  }
                }

                uint64_t v73 = a4 + v68;
                if (*(_BYTE *)(v73 + 1) == 10) {
                  uint64_t v73 = a4 + v68 + 1;
                }
LABEL_136:
                BOOL v72 = __OFADD__(i++, 1LL);
                if (v72) {
                  goto LABEL_272;
                }
                a4 = v73 + 1;
LABEL_138:
                uint64_t v15 = 0xED00007265626D75LL;
                Swift::Int v22 = 0x6E20786568206E69LL;
                if (a4 >= v64)
                {
                  uint64_t v71 = 0LL;
                  goto LABEL_181;
                }
              }
            }

            uint64_t v71 = 0LL;
            uint64_t v15 = 0xED00007265626D75LL;
            Swift::Int v22 = 0x6E20786568206E69LL;
            unint64_t i = 1LL;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v92 = v22;
            *(void *)(v92 + 8) = v15;
            *(void *)(v92 + 16) = v21;
            *(void *)(v92 + 24) = i;
            *(void *)(v92 + 32) = v71;
            *(void *)(v92 + 40) = a3;
            unint64_t v93 = 1;
            goto LABEL_187;
          }
        }

        if ((unint64_t)v48 >= a4)
        {
          char v68 = a4 + a5;
          if (a4 + a5 >= (unint64_t)v48)
          {
            if (v68 > a4)
            {
              uint64_t v69 = -(uint64_t)a4;
              uint64_t v70 = a5 + a4;
              a5 = 1LL;
              while (1)
              {
                uint64_t v71 = 0LL;
                BOOL v72 = 0LL;
                uint64_t v73 = v70 - a4;
                while (1)
                {
                  uint64_t v74 = *(unsigned __int8 *)(a4 + v72);
                  if (v74 == 10)
                  {
                    uint64_t v76 = __OFADD__(a5++, 1LL);
                    if (!v76)
                    {
                      a4 += v72 + 1;
                      goto LABEL_138;
                    }

                    goto LABEL_268;
                  }

                  if (v74 == 13) {
                    break;
                  }
                  uint64_t v75 = v72 + 1;
                  if (__OFADD__(v72, 1LL)) {
                    goto LABEL_247;
                  }
                  ++v72;
                  --v71;
                  if (a4 + v72 >= v68)
                  {
                    a3 = 0xED00007265626D75LL;
                    uint64_t v14 = 0x6E20786568206E69LL;
                    goto LABEL_179;
                  }
                }

                uint64_t v77 = a4 + v72;
                if (*(_BYTE *)(v77 + 1) == 10) {
                  uint64_t v77 = a4 + v72 + 1;
                }
LABEL_136:
                uint64_t v76 = __OFADD__(a5++, 1LL);
                if (v76) {
                  goto LABEL_269;
                }
                a4 = v77 + 1;
LABEL_138:
                a3 = 0xED00007265626D75LL;
                uint64_t v14 = 0x6E20786568206E69LL;
                if (a4 >= v68)
                {
                  uint64_t v75 = 0LL;
                  goto LABEL_179;
                }
              }
            }

            uint64_t v75 = 0LL;
            a3 = 0xED00007265626D75LL;
            uint64_t v14 = 0x6E20786568206E69LL;
            a5 = 1LL;
LABEL_179:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)unint64_t v56 = v14;
            *(void *)(v56 + 8) = a3;
            *(void *)(v56 + 16) = i;
            *(void *)(v56 + 24) = a5;
            *(void *)(v56 + 32) = v75;
            *(void *)(v56 + 40) = v13;
            unint64_t v57 = 1;
            goto LABEL_80;
          }
        }

      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }

  swift_release();
  Swift::Int v3 = v105[0];
  swift_bridgeObjectRetain();
  unint64_t v89 = _NativeDictionary.bridged()();
  *(void *)&uint64_t v102 = 0LL;
  Swift::Int v90 = objc_msgSend((id)v3, sel_setResourceValues_error_, v89, &v102);
  swift_unknownObjectRelease();
  if (v90)
  {
    uint64_t v91 = (id)v102;
    goto LABEL_122;
  }

  if ((void)v102)
  {
    (id)v102;
    goto LABEL_121;
  }

  if (one-time initialization token for _nilObjCError != -1) {
    goto LABEL_128;
  }
LABEL_120:
  uint64_t v92 = (id)_nilObjCError;
LABEL_121:
  swift_willThrow();
LABEL_122:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_release();
}

      uint64_t v10 = 1;
      return v10 & 1;
    }

    goto LABEL_116;
  }

  if (((unint64_t)self & 0x8000000000000000LL) != 0)
  {
    uint64_t v11 = *MEMORY[0x189616658];
    unint64_t v12 = v11 ^ (unint64_t)self;
    Swift::Int v13 = 0xFFFFFFFFFFFFFFFLL;
    if ((~(_BYTE)v12 & 7) == 0) {
      Swift::Int v13 = 0xFFFFFFFFFFFFFLL;
    }
    location = v13 & (v12 >> 3);
    goto LABEL_34;
  }

  indexSetFlags = self->_indexSetFlags;
  if ((*(_BYTE *)&indexSetFlags & 2) != 0)
  {
    location = self->_internal._singleRange._range.location;
    if (((unint64_t)indexSet & 0x8000000000000000LL) != 0)
    {
LABEL_21:
      uint64_t v15 = *MEMORY[0x189616658];
      uint64_t v16 = v15 ^ (unint64_t)indexSet;
      uint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      if ((~(_BYTE)v16 & 7) == 0) {
        uint64_t v17 = 0xFFFFFFFFFFFFFLL;
      }
      char v18 = v17 & (v16 >> 3);
      goto LABEL_39;
    }

          uint64_t v31 = 1LL;
          goto LABEL_116;
        }

        if (v33 + v53 - 1 == v14)
        {
          uint64_t v31 = 0LL;
          goto LABEL_116;
        }

        if (v33 >= (unint64_t)v50)
        {
          uint64_t v35 = v50 + v53;
          if (v52 > (unint64_t)v50 + v53)
          {
            if (v52 - ((void)v50 + v53) >= 0x20) {
              uint64_t v36 = 32LL;
            }
            else {
              uint64_t v36 = v52 - (v50 + v53);
            }
            v53 += v50;
            *(void *)&uint64_t v50 = v36;
            objc_msgSend(v51, sel_getUid("getCharacters:range:"), v54, v35, v36);
            Swift::Int v32 = v54[0];
            BOOL v55 = v54[0];
            *((void *)&v50 + 1) = 1LL;
            goto LABEL_78;
          }

          id v33 = v50 + 1;
          *((void *)&v50 + 1) = v50 + 1;
          Swift::Int v32 = -1;
          BOOL v55 = -1;
        }

        else
        {
          __int128 v34 = (char *)&v50 + 2 * v33++;
          *((void *)&v50 + 1) = v33;
          Swift::Int v32 = *((_WORD *)v34 + 20);
          BOOL v55 = v32;
        }
      }
    }

    if (v14 - v27 >= 0x20) {
      Swift::Int v28 = 32LL;
    }
    else {
      Swift::Int v28 = v14 - v27;
    }
    *(void *)&uint64_t v50 = v28;
    objc_msgSend(v13, sel_getUid("getCharacters:range:"), v54, v27, v28);
    Swift::Int v32 = v54[0];
    BOOL v55 = v54[0];
    *((void *)&v50 + 1) = 1LL;
    if (v54[0] != 10) {
      goto LABEL_78;
    }
    uint64_t v29 = v53;
    if (!v53)
    {
      uint64_t v14 = 0LL;
      goto LABEL_115;
    }

    if (v53 >= 0x20) {
      uint64_t v30 = 32LL;
    }
    else {
      uint64_t v30 = v53;
    }
    *(void *)&uint64_t v50 = v30;
    *((void *)&v50 + 1) = v30;
    v53 -= v30;
    objc_msgSend(v51, sel_getUid("getCharacters:range:"), v54, v29 - v30, v30);
    uint64_t v31 = 1LL;
    if (v54[v30 - 1] == 13) {
      uint64_t v31 = 2LL;
    }
    uint64_t v14 = v29 - (v54[*((void *)&v50 + 1) - 1] == 13);
LABEL_116:
    if (a5) {
      *a5 = v14;
    }
    if (a4)
    {
      length = v31 + v14;
LABEL_120:
      *a4 = length;
    }
  }

    uint64_t v26 = _NS_cmark_iter_next(v20);
    if (v26 == 1) {
      goto LABEL_19;
    }
  }

  Swift::Int v32 = type;
  switch(type)
  {
    case 49153:
    case 49158:
      appended = appendNodeText( a1,  a4,  node,  v107,  (uint64_t)v27,  (void *)[v106 lastObject],  v102,  v103,  (uint64_t)v109,  a6);
      goto LABEL_68;
    case 49154:
      objc_msgSend( a1,  "appendString:with:",  @" ",  attributesForIntents(v107 | 0x40, (uint64_t)v27, (void *)objc_msgSend(v106, "lastObject")));
      unint64_t v43 = v107 & 0xFFFFFFFFFFFFFFBFLL;
      goto LABEL_64;
    case 49155:
      objc_msgSend( a1,  "appendString:with:",  @"\n",  attributesForIntents(v107 | 0x80, (uint64_t)v27, (void *)objc_msgSend(v106, "lastObject")));
      unint64_t v43 = v107 & 0xFFFFFFFFFFFFFF7FLL;
LABEL_64:
      Swift::Int v107 = v43;
      goto LABEL_115;
    case 49156:
      unint64_t v41 = v107 | 4;
      goto LABEL_67;
    case 49157:
      unint64_t v41 = v107 | 0x100;
LABEL_67:
      appended = appendNodeText( a1,  a4,  node,  v41,  (uint64_t)v27,  (void *)[v106 lastObject],  v102,  v103,  (uint64_t)v109,  a6);
LABEL_68:
      if ((appended & 1) == 0) {
        goto LABEL_186;
      }
      goto LABEL_115;
    case 49159:
      unint64_t v44 = v107;
      uint64_t v45 = v107 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v46 = v26 == 2;
      uint64_t v47 = v107 | 1;
      goto LABEL_72;
    case 49160:
      unint64_t v44 = v107;
      uint64_t v45 = v107 & 0xFFFFFFFFFFFFFFFDLL;
      uint64_t v46 = v26 == 2;
      uint64_t v47 = v107 | 2;
LABEL_72:
      if (!v46) {
        uint64_t v47 = v44;
      }
      if (v26 != 3) {
        uint64_t v45 = v47;
      }
      goto LABEL_76;
    default:
      switch(type)
      {
        case 32770:
          if (v26 == 3) {
            goto LABEL_114;
          }
          if (v26 != 2) {
            goto LABEL_115;
          }
          uint64_t v30 = v105 + 1;
          uint64_t v31 = +[NSPresentationIntent blockQuoteIntentWithIdentity:nestedInsideIntent:]( &OBJC_CLASS___NSPresentationIntent,  "blockQuoteIntentWithIdentity:nestedInsideIntent:");
          goto LABEL_60;
        case 32771:
          if (v26 == 3)
          {
            uint64_t v63 = v100 - 1;
            if (!v100) {
              uint64_t v63 = 0LL;
            }
            uint64_t v100 = v63;
            goto LABEL_114;
          }

          if (v26 != 2) {
            goto LABEL_115;
          }
          list_type = _NS_cmark_node_get_list_type(node);
          uint64_t v35 = v100;
          if (v100 <= 8)
          {
            uint64_t v35 = v100 + 1;
            if (list_type == 2)
            {
              ++v100;
              *((void *)v110 + v35) = (int)_NS_cmark_node_get_list_start(node);
              uint64_t v36 = v105;
LABEL_145:
              uint64_t v30 = v36 + 1;
              uint64_t v31 = +[NSPresentationIntent orderedListIntentWithIdentity:nestedInsideIntent:]( &OBJC_CLASS___NSPresentationIntent,  "orderedListIntentWithIdentity:nestedInsideIntent:");
              goto LABEL_60;
            }

            *((void *)v110 + v35) = 1LL;
          }

          uint64_t v36 = v105;
          uint64_t v100 = v35;
          if (list_type == 2) {
            goto LABEL_145;
          }
          if (list_type != 1) {
            goto LABEL_115;
          }
          uint64_t v30 = v105 + 1;
          uint64_t v31 = +[NSPresentationIntent unorderedListIntentWithIdentity:nestedInsideIntent:]( &OBJC_CLASS___NSPresentationIntent,  "unorderedListIntentWithIdentity:nestedInsideIntent:");
          goto LABEL_60;
        case 32772:
          if (v26 == 3)
          {
            Swift::Int v27 = -[NSPresentationIntent parentIntent](v27, "parentIntent");
            ++*((void *)v110 + v100);
            goto LABEL_115;
          }

          if (v26 != 2) {
            goto LABEL_115;
          }
          uint64_t v30 = v105 + 1;
          uint64_t v31 = +[NSPresentationIntent listItemIntentWithIdentity:ordinal:nestedInsideIntent:]( &OBJC_CLASS___NSPresentationIntent,  "listItemIntentWithIdentity:ordinal:nestedInsideIntent:");
          goto LABEL_60;
        case 32773:
          uint64_t v97 = a4;
          fence_info = (_BYTE *)_NS_cmark_node_get_fence_info(node);
          if (fence_info)
          {
            uint64_t v38 = a6;
            if (*fence_info)
            {
              BOOL v39 = a1;
              unint64_t v40 = -[NSString initWithUTF8String:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithUTF8String:",  fence_info);
              goto LABEL_83;
            }
          }

          else
          {
            uint64_t v38 = a6;
          }

          BOOL v39 = a1;
          unint64_t v40 = 0LL;
LABEL_83:
          char v48 = +[NSPresentationIntent codeBlockIntentWithIdentity:languageHint:nestedInsideIntent:]( &OBJC_CLASS___NSPresentationIntent,  "codeBlockIntentWithIdentity:languageHint:nestedInsideIntent:",  v105,  v40,  v27);

          if (!appendNodeText( v39,  v97,  node,  v107,  (uint64_t)v48,  (void *)[v106 lastObject],  v102,  v103,  (uint64_t)v109,  v38)) {
            goto LABEL_186;
          }
          ++v105;
          Swift::Int v27 = -[NSPresentationIntent parentIntent](v48, "parentIntent");
          a1 = v39;
          a6 = v38;
          a4 = v97;
          goto LABEL_115;
        case 32774:
          unint64_t v41 = v107 | 0x200;
          goto LABEL_67;
        case 32777:
          if (v26 == 3) {
            goto LABEL_114;
          }
          if (v26 != 2) {
            goto LABEL_115;
          }
          uint64_t v30 = v105 + 1;
          uint64_t v31 = +[NSPresentationIntent headerIntentWithIdentity:level:nestedInsideIntent:]( &OBJC_CLASS___NSPresentationIntent,  "headerIntentWithIdentity:level:nestedInsideIntent:");
          goto LABEL_60;
        case 32778:
          uint64_t v30 = v105 + 1;
          unint64_t v42 = +[NSPresentationIntent thematicBreakIntentWithIdentity:nestedInsideIntent:]( &OBJC_CLASS___NSPresentationIntent,  "thematicBreakIntentWithIdentity:nestedInsideIntent:");
          objc_msgSend( v104,  "appendString:with:",  @"⸻",  attributesForIntents(v107, (uint64_t)v42, (void *)objc_msgSend(v106, "lastObject")));
          uint64_t v31 = -[NSPresentationIntent parentIntent](v42, "parentIntent");
          goto LABEL_60;
        default:
          if (type == *(_DWORD *)_NS_CMARK_NODE_STRIKETHROUGH)
          {
            if (v26 == 3)
            {
              uint64_t v45 = v107 & 0xFFFFFFFFFFFFFFDFLL;
            }

            else
            {
              if (v26 != 2) {
                goto LABEL_115;
              }
              uint64_t v45 = v107 | 0x20;
            }

LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
      }

      __break(1u);
      goto LABEL_155;
    }

    __break(1u);
    goto LABEL_155;
  }

  uint64_t v98 = v120 | (v15 << 32) | (v117 << 48);
  unint64_t v93 = v115 | (v111 << 16) | (v109 << 32) | (v107 << 48);
  uint64_t v97 = v105 | (v113 << 16);
  NSDecimal.asVariableLengthInteger()(v98, v93, v97);
  __int128 v34 = v33;
  uint64_t v95 = v8 | (v9 << 16) | (v10 << 32) | (v11 << 48);
  unint64_t v96 = v102 | (v6 << 32) | (v7 << 48);
  id v94 = v5 | (v18 << 16);
  NSDecimal.asVariableLengthInteger()(v96, v95, v94);
  uint64_t v99 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v34, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v36 = v99;
  if (v99 == -1)
  {
    LOWORD(v117) = v18;
    LODWORD(v120) = 0;
    NSDecimal.asVariableLengthInteger()(v96, v95, v94);
    BOOL v39 = v38;
    NSDecimal.asVariableLengthInteger()(v98, v93, v97);
    unint64_t v41 = v40;
    unint64_t v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    unint64_t v44 = v39;
    uint64_t v36 = v42;
    *(void *)(v42 + 32) = 0LL;
    uint64_t v45 = (_WORD *)(v42 + 32);
    *(void *)(v42 + 16) = 8LL;
    *(void *)(v42 + 40) = 0LL;
    uint64_t v46 = *(void *)(v44 + 16);
    uint64_t v47 = *(void *)(v41 + 16);
    if (v47 >= v46) {
      char v48 = *(void *)(v44 + 16);
    }
    else {
      char v48 = *(void *)(v41 + 16);
    }
    if (v48)
    {
      char v49 = (*(unsigned __int16 *)(v44 + 32) | 0x10000) - *(unsigned __int16 *)(v41 + 32);
      uint64_t v50 = HIWORD(v49);
      *uint64_t v45 = *(_WORD *)(v44 + 32) - *(_WORD *)(v41 + 32);
      uint64_t v51 = v48 - 1;
      if (v51)
      {
        char v49 = v50 + *(unsigned __int16 *)(v44 + 34) - *(unsigned __int16 *)(v41 + 34) + 0xFFFF;
        uint64_t v50 = HIWORD(v49);
        *(_WORD *)(v42 + 34) = v49;
        if (v51 == 1)
        {
          uint64_t v52 = 2LL;
        }

        else
        {
          unint64_t v43 = *(unsigned __int16 *)(v41 + 36);
          char v49 = v50 + *(unsigned __int16 *)(v44 + 36) - v43 + 0xFFFF;
          uint64_t v50 = HIWORD(v49);
          *(_WORD *)(v42 + 36) = v49;
          if (v51 == 2)
          {
            uint64_t v52 = 3LL;
          }

          else
          {
            char v49 = v50 + *(unsigned __int16 *)(v44 + 38) - *(unsigned __int16 *)(v41 + 38) + 0xFFFF;
            uint64_t v50 = HIWORD(v49);
            *(_WORD *)(v42 + 38) = v49;
            if (v51 == 3)
            {
              uint64_t v52 = 4LL;
            }

            else
            {
              unint64_t v43 = *(unsigned __int16 *)(v41 + 40);
              char v49 = v50 + *(unsigned __int16 *)(v44 + 40) - v43 + 0xFFFF;
              uint64_t v50 = HIWORD(v49);
              *(_WORD *)(v42 + 40) = v49;
              if (v51 == 4)
              {
                uint64_t v52 = 5LL;
              }

              else
              {
                char v49 = v50 + *(unsigned __int16 *)(v44 + 42) - *(unsigned __int16 *)(v41 + 42) + 0xFFFF;
                uint64_t v50 = HIWORD(v49);
                *(_WORD *)(v42 + 42) = v49;
                if (v51 == 5)
                {
                  uint64_t v52 = 6LL;
                }

                else
                {
                  char v49 = v50 + *(unsigned __int16 *)(v44 + 44) - *(unsigned __int16 *)(v41 + 44) + 0xFFFF;
                  uint64_t v50 = HIWORD(v49);
                  unint64_t v43 = v42;
                  *(_WORD *)(v42 + 44) = v49;
                  if (v51 == 6)
                  {
                    uint64_t v52 = 7LL;
                  }

                  else
                  {
                    uint64_t v75 = v50 + *(unsigned __int16 *)(v44 + 46) - *(unsigned __int16 *)(v41 + 46);
                    char v49 = v75 + 0xFFFF;
                    *(_WORD *)(v42 + 46) = v75 - 1;
                    if (v51 != 7)
                    {
LABEL_160:
                      __break(1u);
                      goto LABEL_161;
                    }

                    uint64_t v50 = HIWORD(v49);
                    uint64_t v52 = 8LL;
                  }
                }
              }
            }
          }
        }
      }

      else
      {
        uint64_t v52 = 1LL;
      }

      if (v52 >= v46) {
        goto LABEL_97;
      }
      if (!HIWORD(v49))
      {
        while (v52 < *(void *)(v42 + 16))
        {
          uint64_t v76 = *(unsigned __int16 *)(v44 + 32 + 2 * v52);
          unint64_t v43 = v76 + 0xFFFF;
          v45[v52] = v76 - 1;
          if (v46 - 1 == v52) {
            goto LABEL_104;
          }
          ++v52;
          if (v76) {
            goto LABEL_90;
          }
        }

        goto LABEL_152;
      }
    }

    else
    {
      if (!v46)
      {
        if (v47)
        {
          uint64_t v52 = 0LL;
          uint64_t v50 = 1;
          goto LABEL_98;
        }

        uint64_t v73 = 8LL;
        goto LABEL_107;
      }

      uint64_t v52 = 0LL;
    }

    __break(1u);
    goto LABEL_155;
  }

  uint64_t v99 = v15;
  uint64_t v110 = v113 | (v15 << 32) | (v127 << 48);
  Swift::Int v105 = v125 | (v121 << 16) | (v16 << 32) | (v119 << 48);
  uint64_t v103 = v117 | (v123 << 16);
  NSDecimal.asVariableLengthInteger()(v110, v105, v103);
  char v48 = v47;
  unint64_t v101 = v107 | (v9 << 16) | (v10 << 32) | (v11 << 48);
  uint64_t v102 = v5 | (v6 << 32) | (v7 << 48);
  uint64_t v100 = v12 | (v108 << 16);
  NSDecimal.asVariableLengthInteger()(v102, v101, v100);
  uint64_t v50 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v48, v49);
  swift_bridgeObjectRelease();
  Swift::Int v28 = v50;
  swift_bridgeObjectRelease();
  uint64_t v51 = v115;
  if (v50 == -1)
  {
    LOWORD(v125) = v12;
    LOWORD(v127) = v11;
    NSDecimal.asVariableLengthInteger()(v102, v101, v100);
    uint64_t v53 = v52;
    NSDecimal.asVariableLengthInteger()(v110, v105, v103);
    Swift::Int v28 = v54;
    BOOL v55 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    unint64_t v57 = v55;
    *(void *)(v55 + 32) = 0LL;
    uint64_t v58 = (_WORD *)(v55 + 32);
    *(void *)(v55 + 16) = 8LL;
    *(void *)(v55 + 40) = 0LL;
    uint64_t v59 = *(void *)(v53 + 16);
    uint64_t v60 = *(void *)(v28 + 16);
    if (v60 >= v59) {
      uint64_t v61 = *(void *)(v53 + 16);
    }
    else {
      uint64_t v61 = *(void *)(v28 + 16);
    }
    if (v61)
    {
      uint64_t v62 = (*(unsigned __int16 *)(v53 + 32) | 0x10000) - *(unsigned __int16 *)(v28 + 32);
      uint64_t v63 = HIWORD(v62);
      *uint64_t v58 = *(_WORD *)(v53 + 32) - *(_WORD *)(v28 + 32);
      uint64_t v64 = v61 - 1;
      if (v64)
      {
        uint64_t v62 = v63 + *(unsigned __int16 *)(v53 + 34) - *(unsigned __int16 *)(v28 + 34) + 0xFFFF;
        uint64_t v63 = HIWORD(v62);
        *(_WORD *)(v55 + 34) = v62;
        if (v64 == 1)
        {
          BOOL v65 = 2LL;
        }

        else
        {
          unint64_t v56 = *(unsigned __int16 *)(v28 + 36);
          uint64_t v62 = v63 + *(unsigned __int16 *)(v53 + 36) - v56 + 0xFFFF;
          uint64_t v63 = HIWORD(v62);
          *(_WORD *)(v55 + 36) = v62;
          if (v64 == 2)
          {
            BOOL v65 = 3LL;
          }

          else
          {
            uint64_t v62 = v63 + *(unsigned __int16 *)(v53 + 38) - *(unsigned __int16 *)(v28 + 38) + 0xFFFF;
            uint64_t v63 = HIWORD(v62);
            *(_WORD *)(v55 + 38) = v62;
            if (v64 == 3)
            {
              BOOL v65 = 4LL;
            }

            else
            {
              unint64_t v56 = *(unsigned __int16 *)(v28 + 40);
              uint64_t v62 = v63 + *(unsigned __int16 *)(v53 + 40) - v56 + 0xFFFF;
              uint64_t v63 = HIWORD(v62);
              *(_WORD *)(v55 + 40) = v62;
              if (v64 == 4)
              {
                BOOL v65 = 5LL;
              }

              else
              {
                uint64_t v62 = v63 + *(unsigned __int16 *)(v53 + 42) - *(unsigned __int16 *)(v28 + 42) + 0xFFFF;
                uint64_t v63 = HIWORD(v62);
                *(_WORD *)(v55 + 42) = v62;
                if (v64 == 5)
                {
                  BOOL v65 = 6LL;
                }

                else
                {
                  unint64_t v56 = *(unsigned __int16 *)(v28 + 44);
                  uint64_t v62 = v63 + *(unsigned __int16 *)(v53 + 44) - v56 + 0xFFFF;
                  uint64_t v63 = HIWORD(v62);
                  *(_WORD *)(v55 + 44) = v62;
                  if (v64 == 6)
                  {
                    BOOL v65 = 7LL;
                  }

                  else
                  {
                    uint64_t v85 = v63 + *(unsigned __int16 *)(v53 + 46) - *(unsigned __int16 *)(v28 + 46);
                    uint64_t v62 = v85 + 0xFFFF;
                    *(_WORD *)(v55 + 46) = v85 - 1;
                    if (v64 != 7)
                    {
LABEL_160:
                      __break(1u);
                      goto LABEL_161;
                    }

                    unint64_t v56 = v53;
                    uint64_t v63 = HIWORD(v62);
                    BOOL v65 = 8LL;
                  }
                }
              }
            }
          }
        }
      }

      else
      {
        BOOL v65 = 1LL;
      }

      if (v65 >= v59) {
        goto LABEL_97;
      }
      if (!HIWORD(v62))
      {
        while (v65 < *(void *)(v55 + 16))
        {
          uint64_t v86 = *(unsigned __int16 *)(v53 + 32 + 2 * v65);
          unint64_t v56 = v86 + 0xFFFF;
          v58[v65] = v86 - 1;
          if (v59 - 1 == v65) {
            goto LABEL_104;
          }
          ++v65;
          if (v86) {
            goto LABEL_90;
          }
        }

        goto LABEL_152;
      }
    }

    else
    {
      if (!v59)
      {
        if (v60)
        {
          BOOL v65 = 0LL;
          uint64_t v63 = 1;
          goto LABEL_98;
        }

        unint64_t v83 = 8LL;
        goto LABEL_107;
      }

      BOOL v65 = 0LL;
    }

    __break(1u);
    goto LABEL_155;
  }

  uint64_t v99 = v15;
  uint64_t v110 = v113 | (v15 << 32) | (v127 << 48);
  Swift::Int v105 = v125 | (v121 << 16) | (v16 << 32) | (v119 << 48);
  uint64_t v103 = v117 | (v123 << 16);
  NSDecimal.asVariableLengthInteger()(v110, v105, v103);
  char v48 = v47;
  unint64_t v101 = v107 | (v9 << 16) | (v10 << 32) | (v11 << 48);
  uint64_t v102 = v5 | (v6 << 32) | (v7 << 48);
  uint64_t v100 = v12 | (v108 << 16);
  NSDecimal.asVariableLengthInteger()(v102, v101, v100);
  uint64_t v50 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v48, v49);
  swift_bridgeObjectRelease();
  Swift::Int v28 = v50;
  swift_bridgeObjectRelease();
  uint64_t v51 = v115;
  if (v50 == -1)
  {
    LOWORD(v125) = v12;
    LOWORD(v127) = v11;
    NSDecimal.asVariableLengthInteger()(v102, v101, v100);
    uint64_t v53 = v52;
    NSDecimal.asVariableLengthInteger()(v110, v105, v103);
    Swift::Int v28 = v54;
    BOOL v55 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    unint64_t v57 = v55;
    *(void *)(v55 + 32) = 0LL;
    uint64_t v58 = (_WORD *)(v55 + 32);
    *(void *)(v55 + 16) = 8LL;
    *(void *)(v55 + 40) = 0LL;
    uint64_t v59 = *(void *)(v53 + 16);
    uint64_t v60 = *(void *)(v28 + 16);
    if (v60 >= v59) {
      uint64_t v61 = *(void *)(v53 + 16);
    }
    else {
      uint64_t v61 = *(void *)(v28 + 16);
    }
    if (v61)
    {
      uint64_t v62 = (*(unsigned __int16 *)(v53 + 32) | 0x10000) - *(unsigned __int16 *)(v28 + 32);
      uint64_t v63 = HIWORD(v62);
      *uint64_t v58 = *(_WORD *)(v53 + 32) - *(_WORD *)(v28 + 32);
      uint64_t v64 = v61 - 1;
      if (v64)
      {
        uint64_t v62 = v63 + *(unsigned __int16 *)(v53 + 34) - *(unsigned __int16 *)(v28 + 34) + 0xFFFF;
        uint64_t v63 = HIWORD(v62);
        *(_WORD *)(v55 + 34) = v62;
        if (v64 == 1)
        {
          BOOL v65 = 2LL;
        }

        else
        {
          unint64_t v56 = *(unsigned __int16 *)(v28 + 36);
          uint64_t v62 = v63 + *(unsigned __int16 *)(v53 + 36) - v56 + 0xFFFF;
          uint64_t v63 = HIWORD(v62);
          *(_WORD *)(v55 + 36) = v62;
          if (v64 == 2)
          {
            BOOL v65 = 3LL;
          }

          else
          {
            uint64_t v62 = v63 + *(unsigned __int16 *)(v53 + 38) - *(unsigned __int16 *)(v28 + 38) + 0xFFFF;
            uint64_t v63 = HIWORD(v62);
            *(_WORD *)(v55 + 38) = v62;
            if (v64 == 3)
            {
              BOOL v65 = 4LL;
            }

            else
            {
              unint64_t v56 = *(unsigned __int16 *)(v28 + 40);
              uint64_t v62 = v63 + *(unsigned __int16 *)(v53 + 40) - v56 + 0xFFFF;
              uint64_t v63 = HIWORD(v62);
              *(_WORD *)(v55 + 40) = v62;
              if (v64 == 4)
              {
                BOOL v65 = 5LL;
              }

              else
              {
                uint64_t v62 = v63 + *(unsigned __int16 *)(v53 + 42) - *(unsigned __int16 *)(v28 + 42) + 0xFFFF;
                uint64_t v63 = HIWORD(v62);
                *(_WORD *)(v55 + 42) = v62;
                if (v64 == 5)
                {
                  BOOL v65 = 6LL;
                }

                else
                {
                  unint64_t v56 = *(unsigned __int16 *)(v28 + 44);
                  uint64_t v62 = v63 + *(unsigned __int16 *)(v53 + 44) - v56 + 0xFFFF;
                  uint64_t v63 = HIWORD(v62);
                  *(_WORD *)(v55 + 44) = v62;
                  if (v64 == 6)
                  {
                    BOOL v65 = 7LL;
                  }

                  else
                  {
                    uint64_t v85 = v63 + *(unsigned __int16 *)(v53 + 46) - *(unsigned __int16 *)(v28 + 46);
                    uint64_t v62 = v85 + 0xFFFF;
                    *(_WORD *)(v55 + 46) = v85 - 1;
                    if (v64 != 7)
                    {
LABEL_160:
                      __break(1u);
                      goto LABEL_161;
                    }

                    unint64_t v56 = v53;
                    uint64_t v63 = HIWORD(v62);
                    BOOL v65 = 8LL;
                  }
                }
              }
            }
          }
        }
      }

      else
      {
        BOOL v65 = 1LL;
      }

      if (v65 >= v59) {
        goto LABEL_97;
      }
      if (!HIWORD(v62))
      {
        while (v65 < *(void *)(v55 + 16))
        {
          uint64_t v86 = *(unsigned __int16 *)(v53 + 32 + 2 * v65);
          unint64_t v56 = v86 + 0xFFFF;
          v58[v65] = v86 - 1;
          if (v59 - 1 == v65) {
            goto LABEL_104;
          }
          ++v65;
          if (v86) {
            goto LABEL_90;
          }
        }

        goto LABEL_152;
      }
    }

    else
    {
      if (!v59)
      {
        if (v60)
        {
          BOOL v65 = 0LL;
          uint64_t v63 = 1;
          goto LABEL_98;
        }

        unint64_t v83 = 8LL;
        goto LABEL_107;
      }

      BOOL v65 = 0LL;
    }

          __break(1u);
LABEL_155:
          __break(1u);
        }

        else
        {
          unint64_t v120 = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F50]),  sel_initWithTimeIntervalSinceReferenceDate_,  v104);
          off_t v121 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v2);
          uint64_t v122 = objc_msgSend(v14, sel_stringFromDate_toDate_, v120, v121);

          if (v122)
          {
            uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);

            return (uint64_t)v123;
          }
        }

        __break(1u);
        goto LABEL_157;
      }

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16LL;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }

      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 48 * a3 - 48;
LABEL_5:
    Swift::Int v9 = v6;
    uint64_t v10 = v8;
    while (!*(_BYTE *)(v10 + 64) && !*(_BYTE *)(v10 + 16))
    {
      uint64_t v11 = (_OWORD *)(v10 + 48);
      Swift::Int result = *(void *)(v10 + 48);
      if (result != *(void *)v10 || *(void *)(v10 + 56) != *(void *)(v10 + 8))
      {
        Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
        {
          if (!v7)
          {
            __break(1u);
            break;
          }

          BOOL v13 = *(_OWORD *)v10;
          uint64_t v14 = *(_OWORD *)(v10 + 16);
          uint64_t v15 = *(_OWORD *)(v10 + 32);
          *(_OWORD *)uint64_t v10 = *(_OWORD *)(v10 + 48);
          *(_OWORD *)(v10 + 24) = *(_OWORD *)(v10 + 72);
          uint64_t v16 = *(_BYTE *)(v10 + 88);
          *(_BYTE *)(v10 + 16) = *(_BYTE *)(v10 + 64);
          *(_BYTE *)(v10 + 40) = v16;
          v10 -= 48LL;
          *uint64_t v11 = v13;
          v11[1] = v14;
          ++v9;
          v11[2] = v15;
          if (v4 != v9) {
            continue;
          }
        }
      }

      ++v4;
      v8 += 48LL;
      if (v4 == a2) {
        return result;
      }
      goto LABEL_5;
    }

    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)( char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  uint64_t v13 = v12 >> 4;
  Swift::Int v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      Swift::Int v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        char v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          Swift::Int v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)char v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }

          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)char v18 = *(_OWORD *)v19;
            }
            Swift::Int v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }

          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }

      goto LABEL_50;
    }
  }

  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }

        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }

        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }

      while ((unint64_t)v16 < a3);
      Swift::Int v27 = v7;
    }

{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 56;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 56;
  unint64_t v44 = __src;
  unint64_t v43 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -55)
    {
      if (__dst != a2 || &a2[56 * v11] <= __dst) {
        memmove(__dst, a2, 56 * v11);
      }
      uint64_t v24 = &v4[56 * v11];
      unint64_t v42 = v24;
      unint64_t v44 = v6;
      if (__src < v6 && v10 >= 56)
      {
        uint64_t v25 = a3 - 56;
        do
        {
          outlined init with copy of (key: String, value: Encodable)((uint64_t)(v24 - 56), (uint64_t)&v40);
          uint64_t v29 = v6 - 56;
          outlined init with copy of (key: String, value: Encodable)((uint64_t)(v6 - 56), (uint64_t)&v38);
          if (v40 == v38 && v41 == v39) {
            uint64_t v31 = 0;
          }
          else {
            uint64_t v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          Swift::Int v32 = (char *)(v25 + 56);
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v38);
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v40);
          if ((v31 & 1) != 0)
          {
            if (v32 != v6 || v25 >= (unint64_t)v6)
            {
              uint64_t v26 = *(_OWORD *)v29;
              Swift::Int v27 = *(_OWORD *)(v6 - 40);
              Swift::Int v28 = *(_OWORD *)(v6 - 24);
              *(void *)(v25 + 48) = *((void *)v6 - 1);
              *(_OWORD *)(v25 + 16) = v27;
              *(_OWORD *)(v25 + 32) = v28;
              *(_OWORD *)uint64_t v25 = v26;
            }

            v44 -= 56;
            uint64_t v24 = v42;
            if (v42 <= v4) {
              break;
            }
          }

          else
          {
            id v33 = v42;
            uint64_t v24 = v42 - 56;
            v42 -= 56;
            if (v32 < v33 || v25 >= (unint64_t)v33 || v32 != v33)
            {
              __int128 v34 = *(_OWORD *)v24;
              uint64_t v35 = *(_OWORD *)(v33 - 40);
              uint64_t v36 = *(_OWORD *)(v33 - 24);
              *(void *)(v25 + 48) = *((void *)v33 - 1);
              *(_OWORD *)(v25 + 16) = v35;
              *(_OWORD *)(v25 + 32) = v36;
              *(_OWORD *)uint64_t v25 = v34;
            }

            uint64_t v29 = v6;
            if (v24 <= v4) {
              break;
            }
          }

          v25 -= 56LL;
          uint64_t v6 = v29;
        }

        while (v29 > __src);
      }

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  BOOL v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t result;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 48;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 48;
  id v33 = __src;
  Swift::Int v32 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -47)
    {
      Swift::Int v20 = 48 * v11;
      if (__dst != a2 || &a2[v20] <= __dst) {
        memmove(__dst, a2, 48 * v11);
      }
      uint64_t v21 = &v4[v20];
      uint64_t v31 = v21;
      id v33 = v6;
      if (v7 < v6 && v10 >= 48)
      {
        uint64_t v22 = (char *)(a3 - 48);
        while (!*(v21 - 32) && !*(v6 - 32))
        {
          BOOL v23 = v22 + 48;
          uint64_t v24 = v6 - 48;
          uint64_t v25 = *((void *)v21 - 6) == *((void *)v6 - 6) && *((void *)v21 - 5) == *((void *)v6 - 5);
          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v31 = v21 - 48;
            if (v23 < v21 || v22 >= v21 || v23 != v21)
            {
              Swift::Int v28 = *((_OWORD *)v21 - 3);
              uint64_t v29 = *((_OWORD *)v21 - 1);
              *((_OWORD *)v22 + 1) = *((_OWORD *)v21 - 2);
              *((_OWORD *)v22 + 2) = v29;
              *(_OWORD *)uint64_t v22 = v28;
            }

            uint64_t v24 = v6;
            v21 -= 48;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }

          else
          {
            if (v23 != v6 || v22 >= v6)
            {
              uint64_t v26 = *(_OWORD *)v24;
              Swift::Int v27 = *((_OWORD *)v6 - 1);
              *((_OWORD *)v22 + 1) = *((_OWORD *)v6 - 2);
              *((_OWORD *)v22 + 2) = v27;
              *(_OWORD *)uint64_t v22 = v26;
            }

            id v33 = v6 - 48;
            if (v24 <= v7) {
              goto LABEL_50;
            }
          }

          v22 -= 48;
          uint64_t v6 = v24;
          if (v21 <= v4) {
            goto LABEL_50;
          }
        }

        goto LABEL_51;
      }

uint64_t specialized static Locale.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void (*v24)(void *__return_ptr, uint64_t, void *);
  void (*v25)(void *__return_ptr, uint64_t, void *);
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  int v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  char v52;
  char v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[28];
  uint64_t v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[28];
  _BYTE v101[144];
  uint64_t v102;
  void v103[18];
  void v104[18];
  _BYTE v105[144];
  _BYTE v106[144];
  _BYTE v107[152];
  uint64_t v2 = *(void **)(a1 + 8);
  Swift::Int v3 = *(void **)(a2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = (uint64_t (*)(uint64_t, void *))v2[6];
  if ((v5(ObjectType, v2) & 1) != 0
    || (uint64_t v6 = swift_getObjectType(),
        uint64_t v7 = (uint64_t (*)(uint64_t, void *))v3[6],
        swift_unknownObjectRetain(),
        char v8 = v7(v6, v3),
        swift_unknownObjectRelease(),
        (v8 & 1) != 0))
  {
    if ((v5(ObjectType, v2) & 1) != 0)
    {
      uint64_t v9 = swift_getObjectType();
      uint64_t v10 = (uint64_t (*)(uint64_t, void *))v3[6];
      swift_unknownObjectRetain();
      char v11 = v10(v9, v3);
      swift_unknownObjectRelease();
      return v11 & 1;
    }

    return 0LL;
  }

  uint64_t v13 = (uint64_t (*)(uint64_t, void *))v2[8];
  swift_unknownObjectRetain();
  uint64_t v14 = v13(ObjectType, v2);
  uint64_t v16 = v15;
  swift_unknownObjectRelease();
  uint64_t v17 = (uint64_t (*)(uint64_t, void *))v3[8];
  swift_unknownObjectRetain();
  uint64_t v18 = v17(v6, v3);
  uint64_t v20 = v19;
  swift_unknownObjectRelease();
  if (v14 == v18 && v16 == v20)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v23 = 0LL;
    if ((v22 & 1) == 0) {
      return v23;
    }
  }

  uint64_t v24 = (void (*)(void *__return_ptr, uint64_t, void *))v2[58];
  swift_unknownObjectRetain();
  v24(v104, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v104, (uint64_t)v105);
  uint64_t v25 = (void (*)(void *__return_ptr, uint64_t, void *))v3[58];
  swift_unknownObjectRetain();
  v25(v103, v6, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v103, (uint64_t)v106);
  outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v107);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v107) != 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)&v93);
    outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)v101);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v101) == 1)
    {
      BOOL v72 = v99;
      *(_OWORD *)uint64_t v73 = *(_OWORD *)v100;
      *(_OWORD *)&v73[12] = *(_OWORD *)&v100[12];
      char v68 = v95;
      uint64_t v69 = v96;
      uint64_t v70 = v97;
      uint64_t v71 = v98;
      uint64_t v66 = v93;
      char v67 = v94;
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)&v74);
      outlined retain of LocalePreferences(&v74);
      outlined release of LocalePreferences(&v66);
      goto LABEL_17;
    }

    outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)&v74);
    uint64_t v26 = v93;
    Swift::Int v27 = *((void *)&v93 + 1);
    Swift::Int v28 = v94;
    uint64_t v29 = v95;
    uint64_t v30 = v96;
    uint64_t v64 = (void *)*((void *)&v97 + 1);
    BOOL v65 = (void *)v97;
    uint64_t v62 = (void *)*((void *)&v98 + 1);
    uint64_t v63 = (void *)v98;
    uint64_t v60 = *((void *)&v99 + 1);
    uint64_t v61 = (void *)v99;
    uint64_t v58 = *(void *)&v100[8];
    uint64_t v59 = *(void *)v100;
    uint64_t v31 = *(void *)&v100[16];
    unint64_t v56 = v100[25];
    unint64_t v57 = v100[24];
    uint64_t v54 = v100[27];
    BOOL v55 = v100[26];
    if (v93 == 2)
    {
    }

    else if (v74 == 2 || ((((v93 & 1) == 0) ^ v74) & 1) == 0)
    {
      goto LABEL_57;
    }

    if (*((void *)&v93 + 1))
    {
      if (!v75 || (specialized static Array<A>.== infix(_:_:)(*((void **)&v93 + 1), v75) & 1) == 0) {
        goto LABEL_57;
      }
    }

    else if (v75)
    {
      goto LABEL_57;
    }

    if (*((void *)&v28 + 1))
    {
      if (!*((void *)&v76 + 1) || v28 != v76 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_57;
      }
    }

    else if (*((void *)&v76 + 1))
    {
      goto LABEL_57;
    }

    if (*((void *)&v29 + 1))
    {
      if (!*((void *)&v77 + 1) || v29 != v77 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_57;
      }
    }

    else if (*((void *)&v77 + 1))
    {
      goto LABEL_57;
    }

    if ((void)v30)
    {
      if (!v78 || (specialized static Dictionary<>.== infix(_:_:)(v30, v78) & 1) == 0) {
        goto LABEL_57;
      }
    }

    else if (v78)
    {
      goto LABEL_57;
    }

    if (*((void *)&v30 + 1))
    {
    }

    else if (v79)
    {
      goto LABEL_57;
    }

    uint64_t v23 = v80;
    char v48 = v82;
    uint64_t v50 = v81;
    unint64_t v43 = v84;
    uint64_t v45 = v83;
    if (v65)
    {
      if (!v80)
      {
        outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        goto LABEL_62;
      }

      type metadata accessor for CFDictionaryRef(0LL);
      outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      BOOL v39 = (id)v23;
      uint64_t v38 = v65;
      Swift::Int v32 = static _CFObject.== infix(_:_:)();

      if ((v32 & 1) == 0)
      {
LABEL_58:
        outlined retain of LocalePreferences?( (uint64_t)v106,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
        uint64_t v23 = 0LL;
LABEL_60:
        LOBYTE(v66) = v26;
        *((void *)&v66 + 1) = v27;
        char v67 = v28;
        char v68 = v29;
        uint64_t v69 = v30;
        *(void *)&uint64_t v70 = v65;
        *((void *)&v70 + 1) = v64;
        *(void *)&uint64_t v71 = v63;
        *((void *)&v71 + 1) = v62;
        *(void *)&BOOL v72 = v61;
        *((void *)&v72 + 1) = v60;
        *(void *)uint64_t v73 = v59;
        *(void *)&v73[8] = v58;
        *(void *)&v73[16] = v31;
        v73[24] = v57;
        v73[25] = v56;
        v73[26] = v55;
        v73[27] = v54;
        outlined release of LocalePreferences(&v66);
        outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        return v23;
      }

uint64_t specialized String.init(cString:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = *(unsigned __int8 *)(result + 32);
    result += 32LL;
    if (!v3) {
      return static String._fromUTF8Repairing(_:)();
    }
    uint64_t v4 = 0LL;
    uint64_t v5 = v1 - 1;
    uint64_t v6 = v2 + 33;
    while (v5 != v4)
    {
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t specialized static Locale.identifier(fromComponents:)(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v185 = 0LL;
  unint64_t v186 = 0xE000000000000000LL;
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_32;
  }
  uint64_t v1 = 0xD000000000000017LL;
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018LL, 0x80000001839CAD90LL);
  uint64_t v5 = v2;
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v4);
    uint64_t v8 = *v7;
    uint64_t v9 = (void *)v7[1];
    swift_bridgeObjectRetain();
    v10._uint64_t countAndFlagsBits = v8;
    v10._unint64_t object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    char v11 = (void *)specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018LL, 0x80000001839CAD90LL);
    char v13 = v12;
    swift_bridgeObjectRelease();
    uint64_t v5 = v2;
    if ((v13 & 1) != 0)
    {
      uint64_t v5 = v2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_62;
      }
LABEL_5:
      swift_bridgeObjectRelease();
      specialized _NativeDictionary._delete(at:)((unint64_t)v11, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }

  if (!*(void *)(v2 + 16)) {
    goto LABEL_31;
  }
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v1 - 1, 0x80000001839CADB0LL);
  if ((v15 & 1) == 0) {
    goto LABEL_12;
  }
  Swift::String v16 = *(Swift::String *)(*(void *)(v2 + 56) + 16 * v14);
  v183._uint64_t countAndFlagsBits = 95LL;
  v183._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  String.append(_:)(v183);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v1 - 1, 0x80000001839CADB0LL);
  char v19 = v18;
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0) {
    goto LABEL_12;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    uint64_t v20 = v5;
    goto LABEL_11;
  }

  uint64_t v107 = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v108 = static _DictionaryStorage.copy(original:)();
  uint64_t v20 = v108;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_123;
  }
  uint64_t v109 = (void *)(v108 + 64);
  uint64_t v110 = v5 + 64;
  unint64_t v111 = (unint64_t)((1LL << *(_BYTE *)(v20 + 32)) + 63) >> 6;
  uint64_t v1 = v20;
  int64_t v112 = 0LL;
  *(void *)(v20 + 16) = *(void *)(v5 + 16);
  uint64_t v113 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v114 = -1LL;
  if (v113 < 64) {
    uint64_t v114 = ~(-1LL << v113);
  }
  unint64_t v115 = v114 & *(void *)(v5 + 64);
  int64_t v116 = (unint64_t)(v113 + 63) >> 6;
  while (1)
  {
    if (v115)
    {
      unint64_t v117 = __clz(__rbit64(v115));
      v115 &= v115 - 1;
      unint64_t v118 = v117 | (v112 << 6);
      goto LABEL_101;
    }

    int64_t v128 = v112 + 1;
    if (__OFADD__(v112, 1LL))
    {
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
      goto LABEL_190;
    }

    if (v128 >= v116) {
      goto LABEL_123;
    }
    unint64_t v129 = *(void *)(v110 + 8 * v128);
    ++v112;
    if (!v129)
    {
      int64_t v112 = v128 + 1;
      if (v128 + 1 >= v116) {
        goto LABEL_123;
      }
      unint64_t v129 = *(void *)(v110 + 8 * v112);
      if (!v129)
      {
        int64_t v112 = v128 + 2;
        if (v128 + 2 >= v116) {
          goto LABEL_123;
        }
        unint64_t v129 = *(void *)(v110 + 8 * v112);
        if (!v129)
        {
          int64_t v112 = v128 + 3;
          if (v128 + 3 >= v116) {
            goto LABEL_123;
          }
          unint64_t v129 = *(void *)(v110 + 8 * v112);
          if (!v129)
          {
            int64_t v112 = v128 + 4;
            if (v128 + 4 >= v116) {
              goto LABEL_123;
            }
            unint64_t v129 = *(void *)(v110 + 8 * v112);
            if (!v129)
            {
              int64_t v112 = v128 + 5;
              if (v128 + 5 >= v116) {
                goto LABEL_123;
              }
              unint64_t v129 = *(void *)(v110 + 8 * v112);
              if (!v129) {
                break;
              }
            }
          }
        }
      }
    }

LABEL_184:
  swift_bridgeObjectRelease();
  uint64_t v5 = v36;
LABEL_25:
  swift_bridgeObjectRelease();
  specialized _NativeDictionary._delete(at:)(v33, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v2 = v5;
  if (!v29) {
    goto LABEL_32;
  }
LABEL_27:
  v183._uint64_t countAndFlagsBits = 95LL;
  v183._unint64_t object = (void *)0xE100000000000000LL;
  v37._uint64_t countAndFlagsBits = v28;
  v37._unint64_t object = v29;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  String.append(_:)(v183);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017LL, 0x80000001839CADF0LL);
  char v40 = v39;
  swift_bridgeObjectRelease();
  if ((v40 & 1) == 0) {
    goto LABEL_31;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    uint64_t v2 = v5;
    goto LABEL_30;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v152 = static _DictionaryStorage.copy(original:)();
  uint64_t v2 = v152;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_185;
  }
  uint64_t v153 = (void *)(v152 + 64);
  uint64_t v154 = v5 + 64;
  unint64_t v155 = (unint64_t)((1LL << *(_BYTE *)(v2 + 32)) + 63) >> 6;
  uint64_t v156 = v2;
  uint64_t v1 = 0LL;
  *(void *)(v2 + 16) = *(void *)(v5 + 16);
  uint64_t v157 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v158 = -1LL;
  if (v157 < 64) {
    uint64_t v158 = ~(-1LL << v157);
  }
  unint64_t v159 = v158 & *(void *)(v5 + 64);
  int64_t v160 = (unint64_t)(v157 + 63) >> 6;
  while (2)
  {
    if (v159)
    {
      unint64_t v161 = __clz(__rbit64(v159));
      v159 &= v159 - 1;
      unint64_t v162 = v161 | (v1 << 6);
LABEL_162:
      uint64_t v163 = 16 * v162;
      id v164 = (uint64_t *)(*(void *)(v5 + 48) + v163);
      uint64_t v166 = *v164;
      uint64_t v165 = v164[1];
      uint64_t v167 = (uint64_t *)(*(void *)(v5 + 56) + v163);
      uint64_t v168 = *v167;
      uint64_t v169 = v167[1];
      __int128 v170 = (void *)(*(void *)(v2 + 48) + v163);
      *__int128 v170 = v166;
      v170[1] = v165;
      __int128 v171 = (void *)(*(void *)(v2 + 56) + v163);
      *__int128 v171 = v168;
      v171[1] = v169;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }

    break;
  }

  int64_t v172 = v1 + 1;
  if (__OFADD__(v1, 1LL)) {
    goto LABEL_189;
  }
  if (v172 >= v160) {
    goto LABEL_185;
  }
  unint64_t v173 = *(void *)(v154 + 8 * v172);
  ++v1;
  if (v173) {
    goto LABEL_183;
  }
  uint64_t v1 = v172 + 1;
  if (v172 + 1 >= v160) {
    goto LABEL_185;
  }
  unint64_t v173 = *(void *)(v154 + 8 * v1);
  if (v173) {
    goto LABEL_183;
  }
  uint64_t v1 = v172 + 2;
  if (v172 + 2 >= v160) {
    goto LABEL_185;
  }
  unint64_t v173 = *(void *)(v154 + 8 * v1);
  if (v173) {
    goto LABEL_183;
  }
  uint64_t v1 = v172 + 3;
  if (v172 + 3 >= v160) {
    goto LABEL_185;
  }
  unint64_t v173 = *(void *)(v154 + 8 * v1);
  if (v173) {
    goto LABEL_183;
  }
  uint64_t v1 = v172 + 4;
  if (v172 + 4 >= v160) {
    goto LABEL_185;
  }
  unint64_t v173 = *(void *)(v154 + 8 * v1);
  if (v173) {
    goto LABEL_183;
  }
  uint64_t v1 = v172 + 5;
  if (v172 + 5 >= v160) {
    goto LABEL_185;
  }
  unint64_t v173 = *(void *)(v154 + 8 * v1);
  if (v173)
  {
LABEL_183:
    unint64_t v159 = (v173 - 1) & v173;
    unint64_t v162 = __clz(__rbit64(v173)) + (v1 << 6);
    goto LABEL_162;
  }

  int64_t v174 = v172 + 6;
  if (v174 >= v160) {
    goto LABEL_185;
  }
  unint64_t v173 = *(void *)(v154 + 8 * v174);
  if (v173)
  {
    uint64_t v1 = v174;
    uint64_t v2 = v156;
    goto LABEL_183;
  }

  while (1)
  {
    uint64_t v1 = v174 + 1;
    if (__OFADD__(v174, 1LL)) {
      goto LABEL_195;
    }
    uint64_t v2 = v156;
    if (v1 >= v160) {
      break;
    }
    unint64_t v173 = *(void *)(v154 + 8 * v1);
    ++v174;
    if (v173) {
      goto LABEL_183;
    }
  }

      uint64_t v225 = (4 * *(_BYTE *)(v224 + 18) + 8) & 0x3C;
      Swift::String v37 = ((-15LL << v225) - 1) & v37 | (v226 << v225);
      uint64_t v29 = *(void *)(v224 + 24 + 24 * v226);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v224 = v29;
      if (!*(_BYTE *)(v29 + 18)) {
        goto LABEL_298;
      }
    }
  }

  uint64_t v337 = *v355;
  *(void *)&id v379 = *v355 >> 11;
  unint64_t v57 = *(void *)(a1 + 64);
  uint64_t v58 = *(void *)(a1 + 72);
  uint64_t v60 = *(void *)(a1 + 80);
  uint64_t v59 = *(void *)(a1 + 88);
  swift_unknownObjectRetain_n();
  Swift::String v37 = specialized Rope.find<A>(at:in:preferEnd:)(v56, 0, v57, v58, v60, v59);
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v37, v62, v64, v57, v58, v60, v59);
  swift_unknownObjectRelease_n();
  BOOL v65 = *(void *)(a1 + 64);
  uint64_t v66 = *(void *)(a1 + 72);
  char v68 = *(void *)(a1 + 80);
  Swift::String v67 = *(void *)(a1 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v37, v62, v64, v65, v66, v68, v67);
  Swift::String v31 = v69;
  __int128 v356 = v70;
  swift_unknownObjectRelease();
  char v71 = swift_bridgeObjectRetain();
  BOOL v72 = specialized _NativeDictionary.filter(_:)(v71);
  swift_bridgeObjectRelease_n();
  uint64_t v36 = *(void *)(v72 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v38 = 0LL;
  *(void *)&v390 = result;
  uint64_t v73 = 1LL << *(_BYTE *)(v72 + 32);
  unint64_t v43 = -1LL;
  if (v73 < 64) {
    unint64_t v43 = ~(-1LL << v73);
  }
  uint64_t v74 = v72 + 64;
  Swift::String v32 = v43 & *(void *)(v72 + 64);
  uint64_t v75 = (unint64_t)(v73 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      Swift::String v76 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      Swift::String v77 = v76 | (v38 << 6);
      goto LABEL_47;
    }

    char v40 = v38 + 1;
    if (__OFADD__(v38, 1LL))
    {
      __break(1u);
LABEL_336:
      __break(1u);
LABEL_337:
      __break(1u);
LABEL_338:
      __break(1u);
LABEL_339:
      unint64_t v105 = v43;
      uint64_t v223 = v40;
      goto LABEL_340;
    }

    if (v40 >= v75) {
      goto LABEL_67;
    }
    uint64_t v79 = *(void *)(v74 + 8 * v40);
    ++v38;
    if (!v79)
    {
      unint64_t v38 = v40 + 1;
      if (v40 + 1 >= v75) {
        goto LABEL_67;
      }
      uint64_t v79 = *(void *)(v74 + 8 * v38);
      if (!v79)
      {
        unint64_t v38 = v40 + 2;
        if (v40 + 2 >= v75) {
          goto LABEL_67;
        }
        uint64_t v79 = *(void *)(v74 + 8 * v38);
        if (!v79)
        {
          unint64_t v38 = v40 + 3;
          if (v40 + 3 >= v75) {
            goto LABEL_67;
          }
          uint64_t v79 = *(void *)(v74 + 8 * v38);
          if (!v79)
          {
            unint64_t v38 = v40 + 4;
            if (v40 + 4 >= v75) {
              goto LABEL_67;
            }
            uint64_t v79 = *(void *)(v74 + 8 * v38);
            if (!v79) {
              break;
            }
          }
        }
      }
    }

          uint64_t v66 = v126;
          goto LABEL_50;
        }

        if (v28)
        {
          if (v29 == v78 && v31 == v219
            || (unint64_t v129 = _stringCompareWithSmolCheck(_:_:expecting:)(), v78 = v194, (v129 & 1) != 0))
          {
            char v22 = v216;
            Swift::Int v127 = v206;
            int64_t v128 = v201;
LABEL_156:
            if (v127) {
              int64_t v130 = v128;
            }
            else {
              int64_t v130 = v43;
            }
            if (v130)
            {
              uint64_t v131 = 4 * v28;
              uint64_t v69 = v81;
              if (4 * v28 != v218 >> 14)
              {
                id v214 = v45;
                id v220 = 4 * v130;
                uint64_t v132 = v217;
                do
                {
                  if (v220 == v132 >> 14) {
                    break;
                  }
                  uint64_t v136 = String.subscript.getter();
                  unint64_t v137 = v33;
                  unint64_t v139 = v138;
                  unint64_t v140 = v22;
                  uint64_t v141 = v137;
                  if (v136 == String.subscript.getter() && v139 == v142)
                  {
                    swift_bridgeObjectRelease_n();
                  }

                  else
                  {
                    unint64_t v133 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v133 & 1) == 0) {
                      goto LABEL_220;
                    }
                  }

                  int64_t v134 = String.index(after:)();
                  char v22 = v140;
                  unint64_t v33 = v141;
                  uint64_t v132 = String.index(after:)();
                  char v218 = v134;
                  uint64_t v135 = v131 == v134 >> 14;
                  uint64_t v28 = v221;
                }

                while (!v135);
                uint64_t v217 = v132;
                uint64_t v66 = v69;
                Swift::String v67 = v68;
                uint64_t v45 = v214;
                char v19 = v189;
LABEL_46:
                char v68 = v67;
                uint64_t v69 = v66;
                if (!v28)
                {
LABEL_51:
                  unint64_t v70 = v45;
                  char v71 = v19;
                  BOOL v72 = HIBYTE(v33) & 0xF;
                  if ((v33 & 0x2000000000000000LL) == 0) {
                    BOOL v72 = v22 & 0xFFFFFFFFFFFFLL;
                  }
                  uint64_t v73 = v66;
                  uint64_t v74 = v67;
                  if (v72)
                  {
                    uint64_t v24 = v217;
                    uint64_t v75 = v210;
                    if (v217 >> 14 == 4 * v72)
                    {
                      swift_bridgeObjectRelease();
                      Swift::String v67 = v74;
                      uint64_t v66 = v73;
                      char v22 = 0LL;
                      unint64_t v33 = 0xE000000000000000LL;
                      uint64_t v24 = 15LL;
                    }
                  }

                  else
                  {
                    uint64_t v75 = v210;
                    uint64_t v24 = v217;
                  }

                  Swift::String v76 = HIBYTE(v66) & 0xF;
                  if ((v66 & 0x2000000000000000LL) == 0) {
                    Swift::String v76 = v67 & 0xFFFFFFFFFFFFLL;
                  }
                  if (!v76) {
                    uint64_t v215 = Substring.index(after:)();
                  }
                  Swift::String v77 = HIBYTE(v33) & 0xF;
                  id v212 = v33;
                  if ((v33 & 0x2000000000000000LL) == 0) {
                    Swift::String v77 = v22 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v77)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    char v26 = v215;
                    unint64_t v25 = v73;
                    uint64_t v23 = v74;
                    char v19 = v71;
                    a4 = v75;
                  }

                  else
                  {
                    unint64_t v70 = Substring.index(after:)();
                    a4 = v75;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    char v26 = v215;
                    unint64_t v25 = v73;
                    uint64_t v23 = v74;
                    char v19 = v71;
                  }

                  goto LABEL_66;
                }

                goto LABEL_47;
              }

              char v19 = v189;
            }

            else
            {
              uint64_t v69 = v81;
            }

  __break(1u);
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_185:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

      id v232 = (4 * *(_BYTE *)(v231 + 18) + 8) & 0x3C;
      Swift::String v31 = ((-15LL << v232) - 1) & v31 | (v233 << v232);
      Swift::String v37 = *(void *)(v231 + 24 + 24 * v233);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v231 = v37;
      if (!*(_BYTE *)(v37 + 18)) {
        goto LABEL_298;
      }
    }
  }

  char v344 = *v360;
  *(void *)&v384 = *v360 >> 11;
  unint64_t v57 = *(void *)(a1 + 64);
  uint64_t v58 = *(void *)(a1 + 72);
  uint64_t v60 = *(void *)(a1 + 80);
  uint64_t v59 = *(void *)(a1 + 88);
  swift_unknownObjectRetain_n();
  Swift::String v61 = specialized Rope.find<A>(at:in:preferEnd:)(v56, 0, v57, v58, v60, v59);
  uint64_t v63 = v62;
  BOOL v65 = v64;
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v61, v63, v65, v57, v58, v60, v59);
  swift_unknownObjectRelease_n();
  uint64_t v66 = *(void *)(a1 + 64);
  Swift::String v67 = *(void *)(a1 + 72);
  uint64_t v69 = *(void *)(a1 + 80);
  char v68 = *(void *)(a1 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v61, v63, v65, v66, v67, v69, v68);
  Swift::String v30 = v70;
  uint64_t v361 = v71;
  swift_unknownObjectRelease();
  BOOL v72 = swift_bridgeObjectRetain();
  uint64_t v73 = specialized _NativeDictionary.filter(_:)(v72);
  swift_bridgeObjectRelease_n();
  char v35 = *(void *)(v73 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v38 = 0LL;
  *(void *)&uint64_t v395 = result;
  uint64_t v74 = 1LL << *(_BYTE *)(v73 + 32);
  unint64_t v43 = -1LL;
  if (v74 < 64) {
    unint64_t v43 = ~(-1LL << v74);
  }
  Swift::String v37 = v73 + 64;
  Swift::String v31 = v43 & *(void *)(v73 + 64);
  uint64_t v75 = (unint64_t)(v74 + 63) >> 6;
  while (1)
  {
    if (v31)
    {
      Swift::String v76 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      Swift::String v77 = v76 | (v38 << 6);
      goto LABEL_47;
    }

    char v40 = v38 + 1;
    if (__OFADD__(v38, 1LL))
    {
      __break(1u);
LABEL_336:
      __break(1u);
LABEL_337:
      __break(1u);
LABEL_338:
      __break(1u);
LABEL_339:
      uint64_t v107 = v43;
      uint64_t v230 = v40;
      goto LABEL_340;
    }

    if (v40 >= v75) {
      goto LABEL_67;
    }
    Swift::String v80 = *(void *)(v37 + 8 * v40);
    ++v38;
    if (!v80)
    {
      unint64_t v38 = v40 + 1;
      if (v40 + 1 >= v75) {
        goto LABEL_67;
      }
      Swift::String v80 = *(void *)(v37 + 8 * v38);
      if (!v80)
      {
        unint64_t v38 = v40 + 2;
        if (v40 + 2 >= v75) {
          goto LABEL_67;
        }
        Swift::String v80 = *(void *)(v37 + 8 * v38);
        if (!v80)
        {
          unint64_t v38 = v40 + 3;
          if (v40 + 3 >= v75) {
            goto LABEL_67;
          }
          Swift::String v80 = *(void *)(v37 + 8 * v38);
          if (!v80)
          {
            unint64_t v38 = v40 + 4;
            if (v40 + 4 >= v75) {
              goto LABEL_67;
            }
            Swift::String v80 = *(void *)(v37 + 8 * v38);
            if (!v80) {
              break;
            }
          }
        }
      }
    }

    uint64_t v144 = (v150 - 1) & v150;
    uint64_t v147 = __clz(__rbit64(v150)) + (v142 << 6);
LABEL_165:
    id v148 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v147);
    uint64_t v2 = *v148;
    int64_t v149 = v148[1];
    swift_bridgeObjectRetain();
    char v15 = (uint64_t)&v353;
    specialized Set._Variant.insert(_:)((unint64_t *)&v439, v2, v149);
    uint64_t result = swift_bridgeObjectRelease();
  }

          uint64_t v49 = v19;
LABEL_185:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v63 = xmmword_1837301C0;
          *(void *)(v63 + 16) = v49;
          *(void *)(v63 + 24) = v34;
          *(void *)(v63 + 32) = v36;
          *(void *)(v63 + 40) = v38;
          goto LABEL_233;
        }
      }
    }

    else
    {
      unint64_t v21 = v14;
      if ((v27 - 58) < 0xF7u)
      {
        if (v27 != 45)
        {
LABEL_275:
          __break(1u);
          goto LABEL_276;
        }

        if (v13 < 2)
        {
          uint64_t v66 = v14 - a3;
          if (v14 < a3 || a3 + a4 < v14) {
            goto LABEL_280;
          }
          if (a3 + a4 >= v14 + 1) {
            Swift::String v67 = v14 + 1;
          }
          else {
            Swift::String v67 = a3 + v11;
          }
          if (v67 <= a3)
          {
            Swift::String v76 = 0LL;
            unint64_t v70 = 1LL;
          }

          else
          {
            char v68 = a4 + a3;
            uint64_t v69 = -(uint64_t)a3;
            unint64_t v70 = 1LL;
            Swift::String v183 = v14 - a3;
            unint64_t v188 = a4 + a3;
            id v192 = -(uint64_t)a3;
            do
            {
              char v71 = 0LL;
              BOOL v72 = 0LL;
              uint64_t v73 = v68 - a3;
              uint64_t v74 = v69 + a3;
              while (1)
              {
                uint64_t v75 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v72);
                if (v75 == 10)
                {
                  uint64_t v58 = __OFADD__(v70++, 1LL);
                  uint64_t v69 = v192;
                  if (v58) {
                    goto LABEL_284;
                  }
                  a3 += v72 + 1;
                  goto LABEL_105;
                }

                if (v75 == 13) {
                  break;
                }
                Swift::String v76 = v72 + 1;
                if (__OFADD__(v72, 1LL)) {
                  goto LABEL_266;
                }
                ++v72;
                --v71;
                if (a3 + v72 >= v67) {
                  goto LABEL_107;
                }
              }

              Swift::String v77 = a3 + v72;
              uint64_t v69 = v192;
              if (!specialized static Comparable.<= infix(_:_:)(a3 + v72 + 1, v14)) {
                goto LABEL_103;
              }
LABEL_103:
              uint64_t v58 = __OFADD__(v70++, 1LL);
              if (v58) {
                goto LABEL_285;
              }
              a3 = v77 + 1;
LABEL_105:
              char v68 = v188;
            }

            while (a3 < v67);
            Swift::String v76 = 0LL;
LABEL_107:
            uint64_t v66 = v183;
          }

          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)int64_t v116 = 0xD000000000000010LL;
          *(void *)(v116 + 8) = 0x80000001839CB4F0LL;
          *(void *)(v116 + 16) = 45LL;
          *(void *)(v116 + 24) = v70;
          *(void *)(v116 + 32) = v76;
          *(void *)(v116 + 40) = v66;
          *(_BYTE *)(v116 + 48) = 1;
          return swift_willThrow();
        }

        unint64_t v21 = v14 + 1;
        uint64_t v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + 1);
        if (v41 == 48)
        {
          uint64_t v42 = v14 + 2;
          if (!specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
          {
            unint64_t v43 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v42);
            uint64_t v44 = v43;
            uint64_t v45 = v43;
            if (v43 - 46 > 0x37 || ((1LL << (v43 - 46)) & 0x80000000800001LL) == 0)
            {
              uint64_t v46 = _asciiNumbers.getter();
              char v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v42, a3, a4);
              uint64_t v36 = v47;
              unint64_t v38 = v48;
              uint64_t v49 = v44;
              goto LABEL_185;
            }
          }
        }

        else
        {
          char v81 = v41;
          if ((v41 - 58) < 0xF7u)
          {
            if (!specialized static Comparable.<= infix(_:_:)(a3, v14 + 1)) {
              goto LABEL_291;
            }
            if (specialized static Comparable.<= infix(_:_:)(v14 + 1, a3 + a4))
            {
              uint64_t v82 = specialized min<A>(_:_:)(v14 + 2, a3 + a4);
              if (v82 <= a3)
              {
                unint64_t v93 = 0LL;
                unint64_t v86 = 1LL;
                goto LABEL_241;
              }

              uint64_t v83 = v82;
              uint64_t v84 = v11 + a3;
              uint64_t v85 = -(uint64_t)a3;
              unint64_t v86 = 1LL;
              uint64_t v87 = a3;
              id v179 = v81;
              uint64_t v184 = v84;
              while (1)
              {
                uint64_t v193 = v86;
                int64_t v88 = 0LL;
                uint64_t v89 = 0LL;
                uint64_t v90 = v84 - v87;
                unint64_t v91 = v85 + v87;
                while (1)
                {
                  int64_t v92 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  v87 + v89);
                  if (v92 == 10) {
                    break;
                  }
                  if (v92 == 13)
                  {
                    unint64_t v94 = v87 + v89;
                    uint64_t v85 = -(uint64_t)a3;
                    if (specialized static Comparable.<= infix(_:_:)(v87 + v89 + 1, v21))
                    {
                      if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  v87 + v89 + 1) == 10) {
                        unint64_t v94 = v87 + v89 + 1;
                      }
                    }

                    unint64_t v86 = v193 + 1;
                    if (__OFADD__(v193, 1LL)) {
                      goto LABEL_297;
                    }
                    uint64_t v87 = v94 + 1;
                    goto LABEL_136;
                  }

                  unint64_t v93 = v89 + 1;
                  if (__OFADD__(v89, 1LL)) {
                    goto LABEL_273;
                  }
                  ++v89;
                  --v88;
                  if (v87 + v89 >= v83)
                  {
                    char v81 = v179;
                    unint64_t v86 = v193;
LABEL_241:
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(void *)uint64_t v156 = 0xD000000000000013LL;
                    *(void *)(v156 + 8) = 0x80000001839CB5E0LL;
                    *(void *)(v156 + 16) = v81;
                    *(void *)(v156 + 24) = v86;
                    *(void *)(v156 + 32) = v93;
                    *(void *)(v156 + 40) = v21 - a3;
                    *(_BYTE *)(v156 + 48) = 1;
                    return swift_willThrow();
                  }
                }

                uint64_t v85 = -(uint64_t)a3;
                unint64_t v86 = v193 + 1;
                if (__OFADD__(v193, 1LL)) {
                  goto LABEL_296;
                }
                v87 += v89 + 1;
LABEL_136:
                uint64_t v84 = v184;
                if (v87 >= v83)
                {
                  unint64_t v93 = 0LL;
                  char v81 = v179;
                  goto LABEL_241;
                }
              }
            }

          uint64_t v49 = v19;
LABEL_185:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v63 = xmmword_1837301C0;
          *(void *)(v63 + 16) = v49;
          *(void *)(v63 + 24) = v34;
          *(void *)(v63 + 32) = v36;
          *(void *)(v63 + 40) = v38;
          goto LABEL_233;
        }
      }
    }

    else
    {
      unint64_t v21 = v14;
      if ((v27 - 58) < 0xF7u)
      {
        if (v27 != 45)
        {
LABEL_275:
          __break(1u);
          goto LABEL_276;
        }

        if (v13 < 2)
        {
          uint64_t v66 = v14 - a3;
          if (v14 < a3 || a3 + a4 < v14) {
            goto LABEL_280;
          }
          if (a3 + a4 >= v14 + 1) {
            Swift::String v67 = v14 + 1;
          }
          else {
            Swift::String v67 = a3 + v11;
          }
          if (v67 <= a3)
          {
            Swift::String v76 = 0LL;
            unint64_t v70 = 1LL;
          }

          else
          {
            char v68 = a4 + a3;
            uint64_t v69 = -(uint64_t)a3;
            unint64_t v70 = 1LL;
            Swift::String v183 = v14 - a3;
            unint64_t v188 = a4 + a3;
            id v192 = -(uint64_t)a3;
            do
            {
              char v71 = 0LL;
              BOOL v72 = 0LL;
              uint64_t v73 = v68 - a3;
              uint64_t v74 = v69 + a3;
              while (1)
              {
                uint64_t v75 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v72);
                if (v75 == 10)
                {
                  uint64_t v58 = __OFADD__(v70++, 1LL);
                  uint64_t v69 = v192;
                  if (v58) {
                    goto LABEL_284;
                  }
                  a3 += v72 + 1;
                  goto LABEL_105;
                }

                if (v75 == 13) {
                  break;
                }
                Swift::String v76 = v72 + 1;
                if (__OFADD__(v72, 1LL)) {
                  goto LABEL_266;
                }
                ++v72;
                --v71;
                if (a3 + v72 >= v67) {
                  goto LABEL_107;
                }
              }

              Swift::String v77 = a3 + v72;
              uint64_t v69 = v192;
              if (!specialized static Comparable.<= infix(_:_:)(a3 + v72 + 1, v14)) {
                goto LABEL_103;
              }
LABEL_103:
              uint64_t v58 = __OFADD__(v70++, 1LL);
              if (v58) {
                goto LABEL_285;
              }
              a3 = v77 + 1;
LABEL_105:
              char v68 = v188;
            }

            while (a3 < v67);
            Swift::String v76 = 0LL;
LABEL_107:
            uint64_t v66 = v183;
          }

          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)int64_t v116 = 0xD000000000000010LL;
          *(void *)(v116 + 8) = 0x80000001839CB4F0LL;
          *(void *)(v116 + 16) = 45LL;
          *(void *)(v116 + 24) = v70;
          *(void *)(v116 + 32) = v76;
          *(void *)(v116 + 40) = v66;
          *(_BYTE *)(v116 + 48) = 1;
          return swift_willThrow();
        }

        unint64_t v21 = v14 + 1;
        uint64_t v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + 1);
        if (v41 == 48)
        {
          uint64_t v42 = v14 + 2;
          if (!specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
          {
            unint64_t v43 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v42);
            uint64_t v44 = v43;
            uint64_t v45 = v43;
            if (v43 - 46 > 0x37 || ((1LL << (v43 - 46)) & 0x80000000800001LL) == 0)
            {
              uint64_t v46 = _asciiNumbers.getter();
              char v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v42, a3, a4);
              uint64_t v36 = v47;
              unint64_t v38 = v48;
              uint64_t v49 = v44;
              goto LABEL_185;
            }
          }
        }

        else
        {
          char v81 = v41;
          if ((v41 - 58) < 0xF7u)
          {
            if (!specialized static Comparable.<= infix(_:_:)(a3, v14 + 1)) {
              goto LABEL_291;
            }
            if (specialized static Comparable.<= infix(_:_:)(v14 + 1, a3 + a4))
            {
              uint64_t v82 = specialized min<A>(_:_:)(v14 + 2, a3 + a4);
              if (v82 <= a3)
              {
                unint64_t v93 = 0LL;
                unint64_t v86 = 1LL;
                goto LABEL_241;
              }

              uint64_t v83 = v82;
              uint64_t v84 = v11 + a3;
              uint64_t v85 = -(uint64_t)a3;
              unint64_t v86 = 1LL;
              uint64_t v87 = a3;
              id v179 = v81;
              uint64_t v184 = v84;
              while (1)
              {
                uint64_t v193 = v86;
                int64_t v88 = 0LL;
                uint64_t v89 = 0LL;
                uint64_t v90 = v84 - v87;
                unint64_t v91 = v85 + v87;
                while (1)
                {
                  int64_t v92 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  v87 + v89);
                  if (v92 == 10) {
                    break;
                  }
                  if (v92 == 13)
                  {
                    unint64_t v94 = v87 + v89;
                    uint64_t v85 = -(uint64_t)a3;
                    if (specialized static Comparable.<= infix(_:_:)(v87 + v89 + 1, v21))
                    {
                      if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  v87 + v89 + 1) == 10) {
                        unint64_t v94 = v87 + v89 + 1;
                      }
                    }

                    unint64_t v86 = v193 + 1;
                    if (__OFADD__(v193, 1LL)) {
                      goto LABEL_297;
                    }
                    uint64_t v87 = v94 + 1;
                    goto LABEL_136;
                  }

                  unint64_t v93 = v89 + 1;
                  if (__OFADD__(v89, 1LL)) {
                    goto LABEL_273;
                  }
                  ++v89;
                  --v88;
                  if (v87 + v89 >= v83)
                  {
                    char v81 = v179;
                    unint64_t v86 = v193;
LABEL_241:
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(void *)uint64_t v156 = 0xD000000000000013LL;
                    *(void *)(v156 + 8) = 0x80000001839CB5E0LL;
                    *(void *)(v156 + 16) = v81;
                    *(void *)(v156 + 24) = v86;
                    *(void *)(v156 + 32) = v93;
                    *(void *)(v156 + 40) = v21 - a3;
                    *(_BYTE *)(v156 + 48) = 1;
                    return swift_willThrow();
                  }
                }

                uint64_t v85 = -(uint64_t)a3;
                unint64_t v86 = v193 + 1;
                if (__OFADD__(v193, 1LL)) {
                  goto LABEL_296;
                }
                v87 += v89 + 1;
LABEL_136:
                uint64_t v84 = v184;
                if (v87 >= v83)
                {
                  unint64_t v93 = 0LL;
                  char v81 = v179;
                  goto LABEL_241;
                }
              }
            }

          uint64_t v49 = v19;
LABEL_185:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v64 = xmmword_1837301C0;
          *(void *)(v64 + 16) = v49;
          *(void *)(v64 + 24) = v34;
          *(void *)(v64 + 32) = v36;
          *(void *)(v64 + 40) = v38;
          goto LABEL_233;
        }
      }
    }

    else
    {
      unint64_t v21 = v14;
      if ((v27 - 58) < 0xF7u)
      {
        if (v27 != 45)
        {
LABEL_275:
          __break(1u);
          goto LABEL_276;
        }

        if (v13 < 2)
        {
          Swift::String v67 = v14 - a3;
          if (v14 < a3 || a3 + a4 < v14) {
            goto LABEL_280;
          }
          if (a3 + a4 >= v14 + 1) {
            char v68 = v14 + 1;
          }
          else {
            char v68 = a3 + v11;
          }
          if (v68 <= a3)
          {
            Swift::String v77 = 0LL;
            char v71 = 1LL;
          }

          else
          {
            uint64_t v69 = a4 + a3;
            unint64_t v70 = -(uint64_t)a3;
            char v71 = 1LL;
            Swift::String v183 = v14 - a3;
            unint64_t v188 = a4 + a3;
            id v192 = -(uint64_t)a3;
            do
            {
              BOOL v72 = 0LL;
              uint64_t v73 = 0LL;
              uint64_t v74 = v69 - a3;
              uint64_t v75 = v70 + a3;
              while (1)
              {
                Swift::String v76 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v73);
                if (v76 == 10)
                {
                  uint64_t v58 = __OFADD__(v71++, 1LL);
                  unint64_t v70 = v192;
                  if (v58) {
                    goto LABEL_284;
                  }
                  a3 += v73 + 1;
                  goto LABEL_105;
                }

                if (v76 == 13) {
                  break;
                }
                Swift::String v77 = v73 + 1;
                if (__OFADD__(v73, 1LL)) {
                  goto LABEL_266;
                }
                ++v73;
                --v72;
                if (a3 + v73 >= v68) {
                  goto LABEL_107;
                }
              }

              uint64_t v78 = a3 + v73;
              unint64_t v70 = v192;
              if (!specialized static Comparable.<= infix(_:_:)(a3 + v73 + 1, v14)) {
                goto LABEL_103;
              }
LABEL_103:
              uint64_t v58 = __OFADD__(v71++, 1LL);
              if (v58) {
                goto LABEL_285;
              }
              a3 = v78 + 1;
LABEL_105:
              uint64_t v69 = v188;
            }

            while (a3 < v68);
            Swift::String v77 = 0LL;
LABEL_107:
            Swift::String v67 = v183;
          }

          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)unint64_t v118 = 0xD000000000000010LL;
          *(void *)(v118 + 8) = 0x80000001839CB4F0LL;
          *(void *)(v118 + 16) = 45LL;
          *(void *)(v118 + 24) = v71;
          *(void *)(v118 + 32) = v77;
          *(void *)(v118 + 40) = v67;
          *(_BYTE *)(v118 + 48) = 1;
          return (char *)swift_willThrow();
        }

        unint64_t v21 = v14 + 1;
        uint64_t v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + 1);
        if (v41 == 48)
        {
          uint64_t v42 = v14 + 2;
          if (!specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
          {
            unint64_t v43 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v42);
            uint64_t v44 = v43;
            uint64_t v45 = v43;
            if (v43 - 46 > 0x37 || ((1LL << (v43 - 46)) & 0x80000000800001LL) == 0)
            {
              uint64_t v46 = _asciiNumbers.getter();
              char v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v42, a3, a4);
              uint64_t v36 = v47;
              unint64_t v38 = v48;
              uint64_t v49 = v44;
              goto LABEL_185;
            }
          }
        }

        else
        {
          uint64_t v82 = v41;
          if ((v41 - 58) < 0xF7u)
          {
            if (!specialized static Comparable.<= infix(_:_:)(a3, v14 + 1)) {
              goto LABEL_291;
            }
            if (specialized static Comparable.<= infix(_:_:)(v14 + 1, a3 + a4))
            {
              uint64_t v83 = specialized min<A>(_:_:)(v14 + 2, a3 + a4);
              if (v83 <= a3)
              {
                unint64_t v94 = 0LL;
                uint64_t v87 = 1LL;
                goto LABEL_241;
              }

              uint64_t v84 = v83;
              uint64_t v85 = v11 + a3;
              unint64_t v86 = -(uint64_t)a3;
              uint64_t v87 = 1LL;
              int64_t v88 = a3;
              id v179 = v82;
              uint64_t v184 = v85;
              while (1)
              {
                uint64_t v193 = v87;
                uint64_t v89 = 0LL;
                uint64_t v90 = 0LL;
                unint64_t v91 = v85 - v88;
                int64_t v92 = v86 + v88;
                while (1)
                {
                  unint64_t v93 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  v88 + v90);
                  if (v93 == 10) {
                    break;
                  }
                  if (v93 == 13)
                  {
                    uint64_t v95 = v88 + v90;
                    unint64_t v86 = -(uint64_t)a3;
                    if (specialized static Comparable.<= infix(_:_:)(v88 + v90 + 1, v21))
                    {
                      if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  v88 + v90 + 1) == 10) {
                        uint64_t v95 = v88 + v90 + 1;
                      }
                    }

                    uint64_t v87 = v193 + 1;
                    if (__OFADD__(v193, 1LL)) {
                      goto LABEL_297;
                    }
                    int64_t v88 = v95 + 1;
                    goto LABEL_136;
                  }

                  unint64_t v94 = v90 + 1;
                  if (__OFADD__(v90, 1LL)) {
                    goto LABEL_273;
                  }
                  ++v90;
                  --v89;
                  if (v88 + v90 >= v84)
                  {
                    uint64_t v82 = v179;
                    uint64_t v87 = v193;
LABEL_241:
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(void *)uint64_t v158 = 0xD000000000000013LL;
                    *(void *)(v158 + 8) = 0x80000001839CB5E0LL;
                    *(void *)(v158 + 16) = v82;
                    *(void *)(v158 + 24) = v87;
                    *(void *)(v158 + 32) = v94;
                    *(void *)(v158 + 40) = v21 - a3;
                    *(_BYTE *)(v158 + 48) = 1;
                    return (char *)swift_willThrow();
                  }
                }

                unint64_t v86 = -(uint64_t)a3;
                uint64_t v87 = v193 + 1;
                if (__OFADD__(v193, 1LL)) {
                  goto LABEL_296;
                }
                v88 += v90 + 1;
LABEL_136:
                uint64_t v85 = v184;
                if (v88 >= v84)
                {
                  unint64_t v94 = 0LL;
                  uint64_t v82 = v179;
                  goto LABEL_241;
                }
              }
            }

              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              __break(1u);
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
LABEL_192:
              __break(1u);
LABEL_193:
              __break(1u);
LABEL_194:
              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              __break(1u);
LABEL_197:
              __break(1u);
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
              goto LABEL_200;
            }

            uint64_t v9 = v74;
            Swift::String v77 = 1LL;
          }

LABEL_190:
  __break(1u);
LABEL_191:
  uint64_t v175 = (void *)swift_allocError();
  swift_willThrow();
  id v182 = v175;
  id v176 = v175;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0)
  {
    _StringGuts.grow(_:)(30LL);
    v177._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v177._unint64_t object = (void *)0x80000001839C8CD0LL;
    String.append(_:)(v177);
    _print_unlocked<A, B>(_:_:)();
    v178._uint64_t countAndFlagsBits = 39LL;
    v178._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v178);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  swift_unexpectedError();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

                                                                            __break(1u);
LABEL_191:
                                                                            __break(1u);
LABEL_192:
                                                                            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                                                                            __break(1u);
                                                                            JUMPOUT(0x1830431B4LL);
                                                                          }

                                                                          unint64_t v105 = v123;
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }

        __break(1u);
      }
    }

    else if (v54)
    {
      uint64_t v51 = ((v54 - 1) << v53) | ((-15LL << v53) - 1) & v48;
      uint64_t v189 = v51;
      uint64_t v190 = v46;
      unint64_t v38 = v46;
      if (v46) {
        goto LABEL_50;
      }
      goto LABEL_53;
    }

    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
    goto LABEL_194;
  }

uint64_t specialized static Locale.identifier(fromAnyComponents:)(unint64_t a1)
{
  void (*v6)(__int128 *__return_ptr, uint64_t);
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  void *v56;
  id v57;
  Swift::String v58;
  Swift::String v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  unint64_t v1 = a1;
  uint64_t v66 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014LL, 0x80000001839CAD70LL);
    if ((v4 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v3, (uint64_t)&v64);
      if ((swift_dynamicCast() & 1) != 0)
      {
        uint64_t ObjectType = swift_getObjectType();
        char v6 = *(void (**)(__int128 *__return_ptr, uint64_t))(v61 + 24);
        swift_unknownObjectRetain();
        v6(&v64, ObjectType);
        swift_unknownObjectRelease();
        uint64_t v7 = Calendar.Identifier.cfCalendarIdentifier.getter();
        *((void *)&v65 + 1) = MEMORY[0x189617FA8];
        *(void *)&uint64_t v64 = v7;
        *((void *)&v64 + 1) = v8;
        specialized Dictionary.subscript.setter((uint64_t)&v64, 0x7261646E656C6163LL, 0xE800000000000000LL);
        swift_unknownObjectRelease();
        unint64_t v1 = v66;
      }
    }
  }

  swift_bridgeObjectRetain();
  uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014LL, 0x80000001839CAD70LL);
  char v11 = v10;
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
    uint64_t v64 = 0u;
    BOOL v65 = 0u;
    goto LABEL_10;
  }

  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v66 = 0x8000000000000000LL;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_26;
  }
  char v13 = v1;
  while (1)
  {
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v13 + 56) + 32 * v9), &v64);
    specialized _NativeDictionary._delete(at:)(v9, v13);
    uint64_t v66 = v13;
    swift_bridgeObjectRelease();
LABEL_10:
    outlined destroy of Any?((uint64_t)&v64, &demangling cache variable for type metadata for Any?);
    unint64_t v14 = swift_bridgeObjectRetain();
    char v15 = specialized Sequence.compactMap<A>(_:)(v14);
    swift_bridgeObjectRelease_n();
    unint64_t v1 = *(void *)(v15 + 16);
    if (!v1)
    {
      Swift::String v16 = (void *)MEMORY[0x18961AFF0];
      goto LABEL_22;
    }

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    Swift::String v16 = (void *)static _DictionaryStorage.allocate(capacity:)();
    unint64_t v17 = *(void *)(v15 + 16);
    uint64_t v63 = v16;
    if (!v17)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      char v35 = specialized static Locale.identifier(fromComponents:)((uint64_t)v16);
      swift_release();
      return v35;
    }

    swift_bridgeObjectRetain_n();
    char v18 = 0LL;
    char v19 = (unint64_t *)(v15 + 56);
    while (1)
    {
      uint64_t v9 = v18 + 1;
      if (__OFADD__(v18, 1LL)) {
        break;
      }
      unint64_t v21 = *(v19 - 2);
      char v22 = *(v19 - 1);
      unint64_t v1 = *v19;
      *(void *)&uint64_t v64 = *(v19 - 3);
      uint64_t v20 = v64;
      *((void *)&v64 + 1) = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      unint64_t v25 = v16[2];
      char v26 = (v24 & 1) == 0;
      Swift::Int v27 = __OFADD__(v25, v26);
      uint64_t v28 = v25 + v26;
      if (v27) {
        goto LABEL_24;
      }
      uint64_t v29 = v24;
      if (v16[3] < v28)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, 1);
        Swift::String v16 = v63;
        uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
        if ((v29 & 1) != (v30 & 1))
        {
LABEL_61:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          goto LABEL_62;
        }
      }

      if ((v29 & 1) != 0) {
        goto LABEL_59;
      }
      v16[(v23 >> 6) + 8] |= 1LL << v23;
      Swift::String v31 = (uint64_t *)(v16[6] + 16 * v23);
      char *v31 = v20;
      v31[1] = v21;
      Swift::String v32 = (void *)(v16[7] + 16 * v23);
      char *v32 = v22;
      v32[1] = v1;
      unint64_t v33 = v16[2];
      Swift::Int v27 = __OFADD__(v33, 1LL);
      char v34 = v33 + 1;
      if (v27) {
        goto LABEL_25;
      }
      v19 += 4;
      v16[2] = v34;
      ++v18;
      if (v9 == v17)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_22;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    Swift::String v37 = static _DictionaryStorage.copy(original:)();
    char v13 = v37;
    if (*(void *)(v1 + 16)) {
      break;
    }
LABEL_56:
    swift_bridgeObjectRelease();
  }

  unint64_t v38 = (void *)(v37 + 64);
  char v39 = (unint64_t)((1LL << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  uint64_t v60 = v1 + 64;
  char v40 = 0LL;
  *(void *)(v13 + 16) = *(void *)(v1 + 16);
  uint64_t v41 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v42 = -1LL;
  if (v41 < 64) {
    uint64_t v42 = ~(-1LL << v41);
  }
  unint64_t v43 = v42 & *(void *)(v1 + 64);
  uint64_t v44 = (unint64_t)(v41 + 63) >> 6;
  while (1)
  {
    if (v43)
    {
      uint64_t v45 = __clz(__rbit64(v43));
      v43 &= v43 - 1;
      uint64_t v46 = v45 | (v40 << 6);
      goto LABEL_34;
    }

    BOOL v53 = v40 + 1;
    if (__OFADD__(v40, 1LL))
    {
      __break(1u);
      goto LABEL_58;
    }

    if (v53 >= v44) {
      goto LABEL_56;
    }
    BOOL v54 = *(void *)(v60 + 8 * v53);
    ++v40;
    if (!v54)
    {
      char v40 = v53 + 1;
      if (v53 + 1 >= v44) {
        goto LABEL_56;
      }
      BOOL v54 = *(void *)(v60 + 8 * v40);
      if (!v54)
      {
        char v40 = v53 + 2;
        if (v53 + 2 >= v44) {
          goto LABEL_56;
        }
        BOOL v54 = *(void *)(v60 + 8 * v40);
        if (!v54)
        {
          char v40 = v53 + 3;
          if (v53 + 3 >= v44) {
            goto LABEL_56;
          }
          BOOL v54 = *(void *)(v60 + 8 * v40);
          if (!v54)
          {
            char v40 = v53 + 4;
            if (v53 + 4 >= v44) {
              goto LABEL_56;
            }
            BOOL v54 = *(void *)(v60 + 8 * v40);
            if (!v54)
            {
              char v40 = v53 + 5;
              if (v53 + 5 >= v44) {
                goto LABEL_56;
              }
              BOOL v54 = *(void *)(v60 + 8 * v40);
              if (!v54) {
                break;
              }
            }
          }
        }
      }
    }

uint64_t specialized static StringProtocol.== infix<A>(_:_:)( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v7 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (a1 == a5 && a2 == a6 && !(a3 >> 16) && v7 == a4 >> 16) {
    return 1LL;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
  }
}

uint64_t specialized static Locale.identifierDoesNotRequireSpecialCaseHandling(_:)()
{
  if (String.count.getter() >= 2)
  {
    swift_bridgeObjectRetain();
    unint64_t v1 = specialized Collection.prefix(_:)(2LL);
    unint64_t v3 = v2;
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    if ((specialized static StringProtocol.== infix<A>(_:_:)(31329LL, 0xE200000000000000LL, v1, v3, v5, v7) & 1) != 0
      || (specialized static StringProtocol.== infix<A>(_:_:)(29804LL, 0xE200000000000000LL, v1, v3, v5, v7) & 1) != 0
      || (specialized static StringProtocol.== infix<A>(_:_:)(29300LL, 0xE200000000000000LL, v1, v3, v5, v7) & 1) != 0
      || (specialized static StringProtocol.== infix<A>(_:_:)(27758LL, 0xE200000000000000LL, v1, v3, v5, v7) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      char v0 = 0;
    }

    else
    {
      char v9 = specialized static StringProtocol.== infix<A>(_:_:)(27749LL, 0xE200000000000000LL, v1, v3, v5, v7);
      swift_bridgeObjectRelease();
      char v0 = v9 ^ 1;
    }
  }

  else
  {
    char v0 = 1;
  }

  return v0 & 1;
}

unint64_t lazy protocol witness table accessor for type Locale.CodingKeys and conformance Locale.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.CodingKeys, &unk_189C75258);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.CodingKeys, &unk_189C75258);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.CodingKeys, &unk_189C75258);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.CodingKeys, &unk_189C75258);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Current and conformance Locale.Current()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current;
  if (!lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Current, &unk_189C751C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current;
  if (!lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Current, &unk_189C751C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current;
  if (!lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Current, &unk_189C751C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current;
  if (!lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Current, &unk_189C751C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.IdentifierType and conformance Locale.IdentifierType()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.IdentifierType and conformance Locale.IdentifierType;
  if (!lazy protocol witness table cache variable for type Locale.IdentifierType and conformance Locale.IdentifierType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.IdentifierType,  &type metadata for Locale.IdentifierType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.IdentifierType and conformance Locale.IdentifierType);
  }

  return result;
}

_OWORD *initializeBufferWithCopyOfBuffer for Locale(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for Locale()
{
  return swift_unknownObjectRelease();
}

void *assignWithCopy for Locale(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v3;
  return a1;
}

_OWORD *assignWithTake for Locale(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for Locale(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Locale(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Locale()
{
  return &type metadata for Locale;
}

ValueMetadata *type metadata accessor for Locale.IdentifierType()
{
  return &type metadata for Locale.IdentifierType;
}

uint64_t storeEnumTagSinglePayload for Locale.IdentifierType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_182FF2FD8 + 4 * byte_18372DCE9[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_182FF300C + 4 * byte_18372DCE4[v4]))();
}

uint64_t sub_182FF300C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FF3014(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FF301CLL);
  }
  return result;
}

uint64_t sub_182FF3028(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FF3030LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_182FF3034(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FF303C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Locale.Current()
{
  return &unk_189C751C8;
}

uint64_t storeEnumTagSinglePayload for Locale.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_182FF30A4 + 4 * byte_18372DCF3[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_182FF30D8 + 4 * byte_18372DCEE[v4]))();
}

uint64_t sub_182FF30D8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FF30E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FF30E8LL);
  }
  return result;
}

uint64_t sub_182FF30F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FF30FCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_182FF3100(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FF3108(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Locale.CodingKeys()
{
  return &unk_189C75258;
}

uint64_t specialized Locale.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x746E6572727563LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

CFMutableCharacterSetRef specialized SetAlgebra.isEmpty.getter(uint64_t a1)
{
  CFMutableCharacterSetRef result = CFCharacterSetCreateMutable(0LL);
  if (result)
  {
    CFMutableCharacterSetRef v3 = result;
    int v4 = CFEqual(*(CFTypeRef *)(a1 + 16), result);

    return (CFMutableCharacterSetRef)(v4 != 0);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void __CharacterSetStorage.hash(into:)()
{
  id v2 = *(id *)(v0 + 16);
  Swift::UInt v1 = CFHash(v2);
  Hasher._combine(_:)(v1);
}

uint64_t __CharacterSetStorage.mutableCopy()()
{
  char v1 = *(_BYTE *)(v0 + 24);
  id v2 = (const __CFCharacterSet *)*(id *)(v0 + 16);
  uint64_t result = (uint64_t)CFCharacterSetCreateMutableCopy(0LL, v2);
  uint64_t v4 = result;
  if ((v1 & 1) != 0)
  {
    if (result)
    {
LABEL_5:

      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v4;
      *(_BYTE *)(result + 24) = 1;
      return result;
    }

    __break(1u);
  }

  if (result) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

CFDataRef __CharacterSetStorage.bitmapRepresentation.getter()
{
  char v1 = *(_BYTE *)(v0 + 24);
  id v2 = (const __CFCharacterSet *)*(id *)(v0 + 16);
  CFDataRef result = CFCharacterSetCreateBitmapRepresentation(0LL, v2);
  CFDataRef v4 = result;
  if ((v1 & 1) != 0)
  {
    if (result)
    {
LABEL_5:
      id v5 = specialized Data.init(referencing:)(result);

      return (CFDataRef)v5;
    }

    __break(1u);
  }

  if (result) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void __CharacterSetStorage.insert(charactersIn:)(unint64_t a1, void (*a2)(void))
{
  unsigned int v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  id v5 = *(void **)(v2 + 16);
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
  {
    if (v4 >= v3)
    {
      ((void (*)(void *, void, void))a2)(v5, v3, v4 - v3);
      return;
    }

    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  char v6 = v5;
  CFMutableCharacterSetRef MutableCopy = CFCharacterSetCreateMutableCopy(0LL, v6);
  if (MutableCopy)
  {
    if (v4 >= v3)
    {
      CFMutableCharacterSetRef v8 = MutableCopy;
      char v9 = MutableCopy;
      a2();

      Swift::String v10 = *(void **)(v2 + 16);
      *(void *)(v2 + 16) = v8;
      *(_BYTE *)(v2 + 24) = 1;

      return;
    }

    goto LABEL_8;
  }

{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  void *v5;
  int v6;
  CFCharacterSetRef v7;
  CFMutableCharacterSetRef MutableCopy;
  CFMutableCharacterSetRef v9;
  __CFCharacterSet *v10;
  void *v11;
  unsigned int v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  id v5 = *(void **)(v2 + 16);
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
  {
    char v6 = v4 - v3;
    if (v4 >= v3)
    {
      if (v6 != -1)
      {
        ((void (*)(void *, void, void))a2)(v5, v3, (v6 + 1));
        return;
      }

      goto LABEL_11;
    }

    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v7 = v5;
  CFMutableCharacterSetRef MutableCopy = CFCharacterSetCreateMutableCopy(0LL, v7);
  if (MutableCopy)
  {
    if (v4 >= v3)
    {
      if ((_DWORD)v4 - v3 != -1)
      {
        char v9 = MutableCopy;
        Swift::String v10 = MutableCopy;
        a2();

        char v11 = *(void **)(v2 + 16);
        *(void *)(v2 + 16) = v9;
        *(_BYTE *)(v2 + 24) = 1;

        return;
      }

      goto LABEL_12;
    }

    goto LABEL_10;
  }

void __CharacterSetStorage.insert(charactersIn:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  id v5 = *(void **)(v3 + 16);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
  {
    String._bridgeToObjectiveCImpl()();
    id v6 = v5;
    a3();

    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v7 = v5;
    CFMutableCharacterSetRef MutableCopy = CFCharacterSetCreateMutableCopy(0LL, v7);
    if (MutableCopy)
    {
      CFMutableCharacterSetRef v9 = MutableCopy;
      String._bridgeToObjectiveCImpl()();
      Swift::String v10 = v9;
      a3();

      swift_unknownObjectRelease();
      char v11 = *(void **)(v3 + 16);
      *(void *)(v3 + 16) = v9;
      *(_BYTE *)(v3 + 24) = 1;
    }

    else
    {
      __break(1u);
    }
  }

uint64_t __CharacterSetStorage.inverted.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + 16);
  char v4 = *(_BYTE *)(v1 + 24);
  id v5 = v3;
  uint64_t result = (uint64_t)CFCharacterSetCreateInvertedSet(0LL, v5);
  uint64_t v7 = result;
  if ((v4 & 1) != 0)
  {
    if (result)
    {
LABEL_5:

      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v7;
      *(_BYTE *)(result + 24) = 0;
      *a1 = result;
      return result;
    }

    __break(1u);
  }

  if (result) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t __CharacterSetStorage.union(_:)@<X0>( uint64_t a1@<X0>, void (*a2)(uint64_t, void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *(void **)(v3 + 16);
  char v8 = *(_BYTE *)(v3 + 24);
  CFMutableCharacterSetRef v9 = v7;
  uint64_t result = (uint64_t)CFCharacterSetCreateMutableCopy(0LL, v9);
  uint64_t v11 = result;
  if ((v8 & 1) != 0)
  {
    if (result)
    {
LABEL_5:

      a2(v11, *(void *)(a1 + 16));
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v11;
      *(_BYTE *)(result + 24) = 1;
      *a3 = result;
      return result;
    }

    __break(1u);
  }

  if (result) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void __CharacterSetStorage.formUnion(_:)(uint64_t a1, void (*a2)(void *, id))
{
  char v4 = *(void **)(v2 + 16);
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
  {
    a2(v4, *(id *)(a1 + 16));
  }

  else
  {
    id v5 = v4;
    CFMutableCharacterSetRef MutableCopy = CFCharacterSetCreateMutableCopy(0LL, v5);
    if (MutableCopy)
    {
      CFMutableCharacterSetRef v7 = MutableCopy;
      id v8 = *(id *)(a1 + 16);
      a2(v7, v8);

      CFMutableCharacterSetRef v9 = *(void **)(v2 + 16);
      *(void *)(v2 + 16) = v7;
      *(_BYTE *)(v2 + 24) = 1;
    }

    else
    {
      __break(1u);
    }
  }

CFCharacterSetRef __CharacterSetStorage.subtracting(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char v3 = *(_BYTE *)(a1 + 24);
  char v4 = (const __CFCharacterSet *)*(id *)(a1 + 16);
  CFCharacterSetRef result = CFCharacterSetCreateInvertedSet(0LL, v4);
  CFCharacterSetRef v6 = result;
  if ((v3 & 1) != 0)
  {
    if (result)
    {
LABEL_5:

      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v6;
      *(_BYTE *)(v7 + 24) = 0;
      __CharacterSetStorage.union(_:)(v7, (void (*)(uint64_t, void))MEMORY[0x1896029D0], a2);
      return (CFCharacterSetRef)swift_release();
    }

    __break(1u);
  }

  if (result) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void __CharacterSetStorage.subtract(_:)(uint64_t a1)
{
  char v2 = *(_BYTE *)(a1 + 24);
  char v3 = (const __CFCharacterSet *)*(id *)(a1 + 16);
  CFCharacterSetRef InvertedSet = CFCharacterSetCreateInvertedSet(0LL, v3);
  id v5 = InvertedSet;
  if ((v2 & 1) != 0)
  {
    if (InvertedSet) {
      goto LABEL_5;
    }
    __break(1u);
  }

  if (!InvertedSet)
  {
    __break(1u);
    goto LABEL_10;
  }

CFCharacterSetRef CharacterSet.subtracting(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return __CharacterSetStorage.subtracting(_:)(*a1, a2);
}

BOOL __CharacterSetStorage.isSuperset(of:)(uint64_t a1)
{
  return CFCharacterSetIsSupersetOfSet(*(CFCharacterSetRef *)(v1 + 16), *(CFCharacterSetRef *)(a1 + 16)) != 0;
}

__CFString *__CharacterSetStorage.description.getter()
{
  char v1 = *(_BYTE *)(v0 + 24);
  id v2 = *(id *)(v0 + 16);
  CFCharacterSetRef result = (__CFString *)CFCopyDescription(v2);
  char v4 = result;
  if ((v1 & 1) != 0)
  {
    if (result)
    {
LABEL_5:
      id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

      return (__CFString *)v5;
    }

    __break(1u);
  }

  if (result) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t __CharacterSetStorage.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

Swift::Int __CharacterSetStorage.hashValue.getter()
{
  id v1 = *(id *)(v0 + 16);
  Swift::UInt v2 = CFHash(v1);
  Hasher._combine(_:)(v2);

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __CharacterSetStorage()
{
  return __CharacterSetStorage.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance __CharacterSetStorage()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __CharacterSetStorage()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + 16);
  Swift::UInt v3 = CFHash(v2);
  Hasher._combine(_:)(v3);

  return Hasher._finalize()();
}

uint64_t CharacterSet.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (uint64_t)CFCharacterSetCreateMutable(0LL);
  if (result)
  {
    uint64_t v3 = result;
    type metadata accessor for __CharacterSetStorage();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v3;
    *(_BYTE *)(result + 24) = 1;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t type metadata accessor for __CharacterSetStorage()
{
  return objc_opt_self();
}

uint64_t CharacterSet.init(charactersIn:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  if (HIDWORD(result) < result)
  {
    __break(1u);
  }

  else
  {
    v4.location = result;
    v4.length = (HIDWORD(result) - result);
    uint64_t result = (uint64_t)CFCharacterSetCreateWithCharactersInRange(0LL, v4);
    if (result)
    {
      uint64_t v3 = result;
      type metadata accessor for __CharacterSetStorage();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v3;
      *(_BYTE *)(result + 24) = 0;
      *a2 = result;
      return result;
    }
  }

  __break(1u);
  return result;
}

{
  int v3;
  uint64_t v4;
  CFRange v5;
  uint64_t v3 = HIDWORD(result) - result;
  if (HIDWORD(result) < result)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v3 == -1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  v5.location = result;
  v5.length = (v3 + 1);
  uint64_t result = (uint64_t)CFCharacterSetCreateWithCharactersInRange(0LL, v5);
  if (result)
  {
    CFRange v4 = result;
    type metadata accessor for __CharacterSetStorage();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(_BYTE *)(result + 24) = 0;
    *a2 = result;
    return result;
  }

uint64_t CharacterSet.init(charactersIn:)@<X0>(uint64_t *a1@<X8>)
{
  id v2 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CFCharacterSetRef v3 = CFCharacterSetCreateWithCharactersInString(0LL, v2);
  uint64_t result = swift_unknownObjectRelease();
  if (v3)
  {
    type metadata accessor for __CharacterSetStorage();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v3;
    *(_BYTE *)(result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void CharacterSet.init(bitmapRepresentation:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_182FF3EE8()
{
  uint64_t v6 = v1;
  __int16 v7 = v2;
  char v8 = BYTE2(v2);
  char v9 = BYTE3(v2);
  char v10 = BYTE4(v2);
  char v11 = BYTE5(v2);
  CFCharacterSetRef v3 = (const __CFData *)objc_msgSend( objc_allocWithZone(MEMORY[0x189603F48]),  sel_initWithBytes_length_,  &v6,  BYTE6(v2));
  CFCharacterSetRef v4 = CFCharacterSetCreateWithBitmapRepresentation(0LL, v3);

  if (!v4) {
    __break(1u);
  }
  type metadata accessor for __CharacterSetStorage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  *(_BYTE *)(result + 24) = 0;
  *uint64_t v0 = result;
  return result;
}

void CharacterSet.init(contentsOfFile:)(uint64_t a1, unint64_t a2)
{
  v6[3] = *MEMORY[0x1895F89C0];
  URL.init(fileURLWithPath:)(a1, a2, (uint64_t)v6);
  uint64_t v2 = (void *)v6[0];
  v5[0] = v6[0];
  v5[1] = v6[1];
  uint64_t v5[2] = v6[2];
  specialized Data.init(contentsOf:options:)((uint64_t)v5, (void *)1);
  uint64_t v4 = v3;

  swift_release();
  swift_release();
  __asm { BR              X10 }

CFCharacterSetRef static CharacterSet.controlCharacters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetControl);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFCharacterSetRef static CharacterSet.whitespaces.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFCharacterSetRef static CharacterSet.whitespacesAndNewlines.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFCharacterSetRef static CharacterSet.decimalDigits.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFCharacterSetRef static CharacterSet.letters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetLetter);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFCharacterSetRef static CharacterSet.lowercaseLetters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetLowercaseLetter);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFCharacterSetRef static CharacterSet.uppercaseLetters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetUppercaseLetter);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFCharacterSetRef static CharacterSet.nonBaseCharacters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetNonBase);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFCharacterSetRef static CharacterSet.alphanumerics.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetAlphaNumeric);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFCharacterSetRef static CharacterSet.decomposables.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetDecomposable);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFCharacterSetRef static CharacterSet.illegalCharacters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetIllegal);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFCharacterSetRef static CharacterSet.punctuationCharacters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFCharacterSetRef static CharacterSet.capitalizedLetters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetCapitalizedLetter);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFCharacterSetRef static CharacterSet.symbols.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetSymbol);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFCharacterSetRef static CharacterSet.newlines.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
  if (result)
  {
    CFCharacterSetRef v3 = result;
    type metadata accessor for __CharacterSetStorage();
    CFCharacterSetRef result = (CFCharacterSetRef)swift_allocObject();
    *((void *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t static CharacterSet.urlUserAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x189604658], a1);
}

uint64_t static CharacterSet.urlPasswordAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x189604640], a1);
}

uint64_t static CharacterSet.urlHostAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x189604638], a1);
}

uint64_t static CharacterSet.urlPathAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x189604648], a1);
}

uint64_t static CharacterSet.urlQueryAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x189604650], a1);
}

uint64_t static CharacterSet.urlFragmentAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x189604630], a1);
}

uint64_t static CharacterSet.urlUserAllowed.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  id v3 = (id)a1();
  type metadata accessor for __CharacterSetStorage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(_BYTE *)(result + 24) = 0;
  *a2 = result;
  return result;
}

CFDataRef CharacterSet.bitmapRepresentation.getter()
{
  return __CharacterSetStorage.bitmapRepresentation.getter();
}

uint64_t CharacterSet.inverted.getter@<X0>(uint64_t *a1@<X8>)
{
  return __CharacterSetStorage.inverted.getter(a1);
}

Swift::Bool __swiftcall CharacterSet.hasMember(inPlane:)(Swift::UInt8 inPlane)
{
  return CFCharacterSetHasMemberInPlane(*(CFCharacterSetRef *)(*(void *)v1 + 16LL), inPlane) != 0;
}

uint64_t CharacterSet.insert(charactersIn:)(uint64_t a1)
{
  return CharacterSet.insert(charactersIn:)( a1,  (uint64_t)MEMORY[0x189602968],  (uint64_t (*)(uint64_t, uint64_t))__CharacterSetStorage.insert(charactersIn:));
}

{
  return CharacterSet.insert(charactersIn:)( a1,  (uint64_t)MEMORY[0x189602968],  (uint64_t (*)(uint64_t, uint64_t))__CharacterSetStorage.insert(charactersIn:));
}

uint64_t CharacterSet.insert(charactersIn:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *id v3 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }

  return a3(a1, a2);
}

uint64_t CharacterSet.remove(charactersIn:)(uint64_t a1)
{
  return CharacterSet.insert(charactersIn:)( a1,  (uint64_t)MEMORY[0x1896029F8],  (uint64_t (*)(uint64_t, uint64_t))__CharacterSetStorage.insert(charactersIn:));
}

{
  return CharacterSet.insert(charactersIn:)( a1,  (uint64_t)MEMORY[0x1896029F8],  (uint64_t (*)(uint64_t, uint64_t))__CharacterSetStorage.insert(charactersIn:));
}

Swift::Void __swiftcall CharacterSet.insert(charactersIn:)(Swift::String charactersIn)
{
}

Swift::Void __swiftcall CharacterSet.remove(charactersIn:)(Swift::String charactersIn)
{
}

void CharacterSet.insert(charactersIn:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *id v3 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }

  __CharacterSetStorage.insert(charactersIn:)(a1, a2, a3);
}

Swift::Void __swiftcall CharacterSet.invert()()
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *uint64_t v0 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }

  uint64_t v1 = *v0;
  uint64_t v2 = *(__CFCharacterSet **)(*v0 + 16);
  if ((*(_BYTE *)(*v0 + 24) & 1) != 0)
  {
    CFCharacterSetInvert(v2);
  }

  else
  {
    id v3 = v2;
    CFMutableCharacterSetRef MutableCopy = CFCharacterSetCreateMutableCopy(0LL, v3);
    if (MutableCopy)
    {
      CFMutableCharacterSetRef v5 = MutableCopy;
      uint64_t v6 = MutableCopy;
      CFCharacterSetInvert(v6);

      __int16 v7 = *(void **)(v1 + 16);
      *(void *)(v1 + 16) = v5;
      *(_BYTE *)(v1 + 24) = 1;
    }

    else
    {
      __break(1u);
    }
  }

unint64_t CharacterSet.insert(_:)(unsigned int a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t *v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }

  __CharacterSetStorage.insert(charactersIn:)(a1 | ((unint64_t)a1 << 32), (void (*)(void))MEMORY[0x189602968]);
  return ((unint64_t)a1 << 32) | 1;
}

uint64_t CharacterSet.update(with:)(unsigned int a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t *v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }

  __CharacterSetStorage.insert(charactersIn:)(a1 | ((unint64_t)a1 << 32), (void (*)(void))MEMORY[0x189602968]);
  return a1;
}

unint64_t CharacterSet.remove(_:)(UTF32Char a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(void *)uint64_t v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }

  int IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(*(void *)v1 + 16LL), a1);
  __CharacterSetStorage.insert(charactersIn:)(a1 | ((unint64_t)a1 << 32), (void (*)(void))MEMORY[0x1896029F8]);
  if (IsLongCharacterMember) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = 0LL;
  }
  return v4 | ((unint64_t)(IsLongCharacterMember == 0) << 32);
}

BOOL CharacterSet.contains(_:)(UTF32Char theChar)
{
  return CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(*(void *)v1 + 16LL), theChar) != 0;
}

uint64_t CharacterSet.union(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return __CharacterSetStorage.union(_:)(*a1, (void (*)(uint64_t, void))MEMORY[0x189602A08], a2);
}

void CharacterSet.formUnion(_:)(uint64_t *a1)
{
}

uint64_t CharacterSet.intersection(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return __CharacterSetStorage.union(_:)(*a1, (void (*)(uint64_t, void))MEMORY[0x1896029D0], a2);
}

void CharacterSet.formIntersection(_:)(uint64_t *a1)
{
}

void CharacterSet.formUnion(_:)(uint64_t *a1, void (*a2)(void *, id))
{
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *uint64_t v2 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }

  __CharacterSetStorage.formUnion(_:)(v4, a2);
}

void CharacterSet.subtract(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t *v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }

  __CharacterSetStorage.subtract(_:)(v2);
}

uint64_t CharacterSet.symmetricDifference(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  __CharacterSetStorage.union(_:)(*a1, (void (*)(uint64_t, void))MEMORY[0x189602A08], &v6);
  __CharacterSetStorage.union(_:)(v3, (void (*)(uint64_t, void))MEMORY[0x1896029D0], &v5);
  __CharacterSetStorage.subtracting(_:)(v5, a2);
  swift_release();
  return swift_release();
}

uint64_t CharacterSet.formSymmetricDifference(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  __CharacterSetStorage.union(_:)(*a1, (void (*)(uint64_t, void))MEMORY[0x189602A08], &v5);
  __CharacterSetStorage.union(_:)(v2, (void (*)(uint64_t, void))MEMORY[0x1896029D0], &v4);
  __CharacterSetStorage.subtracting(_:)(v4, &v6);
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  void *v1 = v6;
  return result;
}

BOOL CharacterSet.isSuperset(of:)(uint64_t a1)
{
  return CFCharacterSetIsSupersetOfSet( *(CFCharacterSetRef *)(*(void *)v1 + 16LL),  *(CFCharacterSetRef *)(*(void *)a1 + 16LL)) != 0;
}

void CharacterSet.hash(into:)()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 16LL);
  swift_retain();
  id v3 = v1;
  Swift::UInt v2 = CFHash(v3);
  Hasher._combine(_:)(v2);
  swift_release();
}

BOOL static CharacterSet.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return CFEqual(*(CFTypeRef *)(*(void *)a1 + 16LL), *(CFTypeRef *)(*(void *)a2 + 16LL)) != 0;
}

Swift::Int CharacterSet.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + 16);
  Swift::UInt v3 = CFHash(v2);
  Hasher._combine(_:)(v3);

  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CharacterSet( uint64_t *a1, uint64_t *a2)
{
  return specialized static __CharacterSetStorage.== infix(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hash(into:) in conformance CharacterSet()
{
  id v2 = *(id *)(*(void *)v0 + 16LL);
  Swift::UInt v1 = CFHash(v2);
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for SetAlgebra.init() in conformance CharacterSet@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (uint64_t)CFCharacterSetCreateMutable(0LL);
  if (result)
  {
    uint64_t v3 = result;
    type metadata accessor for __CharacterSetStorage();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v3;
    *(_BYTE *)(result + 24) = 1;
    *a1 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

BOOL protocol witness for SetAlgebra.contains(_:) in conformance CharacterSet(UTF32Char *a1)
{
  return CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(*(void *)v1 + 16LL), *a1) != 0;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance CharacterSet@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance CharacterSet@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance CharacterSet@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  __CharacterSetStorage.union(_:)(*a1, (void (*)(uint64_t, void))MEMORY[0x189602A08], &v6);
  __CharacterSetStorage.union(_:)(v3, (void (*)(uint64_t, void))MEMORY[0x1896029D0], &v5);
  __CharacterSetStorage.subtracting(_:)(v5, a2);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance CharacterSet(_DWORD *a1, unsigned int *a2)
{
  uint64_t v4 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *id v2 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }

  __CharacterSetStorage.insert(charactersIn:)(v4 | (v4 << 32), (void (*)(void))MEMORY[0x189602968]);
  *a1 = v4;
  return 1LL;
}

unint64_t protocol witness for SetAlgebra.remove(_:) in conformance CharacterSet@<X0>( UTF32Char *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = CharacterSet.remove(_:)(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

void protocol witness for SetAlgebra.update(with:) in conformance CharacterSet( unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *id v2 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }

  __CharacterSetStorage.insert(charactersIn:)(v4 | (v4 << 32), (void (*)(void))MEMORY[0x189602968]);
  *(_DWORD *)a2 = v4;
  *(_BYTE *)(a2 + 4) = 0;
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t *v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }

  __CharacterSetStorage.formUnion(_:)(v2, (void (*)(void *, id))MEMORY[0x189602A08]);
  return swift_release();
}

void protocol witness for SetAlgebra.formIntersection(_:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t *v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }

  __CharacterSetStorage.formUnion(_:)(v2, (void (*)(void *, id))MEMORY[0x1896029D0]);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t v2 = *a1;
  __CharacterSetStorage.union(_:)(*a1, (void (*)(uint64_t, void))MEMORY[0x189602A08], &v5);
  __CharacterSetStorage.union(_:)(v2, (void (*)(uint64_t, void))MEMORY[0x1896029D0], &v4);
  __CharacterSetStorage.subtracting(_:)(v4, &v6);
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  void *v1 = v6;
  return result;
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance CharacterSet@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  swift_retain();
  __CharacterSetStorage.union(_:)(v2, (void (*)(uint64_t, void))MEMORY[0x1896029D0], &v5);
  swift_release();
  LOBYTE(v3) = specialized static __CharacterSetStorage.== infix(_:_:)(v5, v3);
  swift_release();
  return v3 & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_retain();
  __CharacterSetStorage.union(_:)(v1, (void (*)(uint64_t, void))MEMORY[0x1896029D0], &v4);
  swift_release();
  unsigned __int8 v2 = specialized SetAlgebra.isEmpty.getter(v4);
  swift_release();
  return v2 & 1;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance CharacterSet(uint64_t *a1)
{
  return __CharacterSetStorage.isSuperset(of:)(*a1);
}

CFMutableCharacterSetRef protocol witness for SetAlgebra.isEmpty.getter in conformance CharacterSet()
{
  return specialized SetAlgebra.isEmpty.getter(*v0);
}

void protocol witness for SetAlgebra.subtract(_:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t *v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }

  __CharacterSetStorage.subtract(_:)(v2);
}

unint64_t static CharacterSet._getObjectiveCType()()
{
  return type metadata accessor for NSCharacterSet();
}

NSCharacterSet __swiftcall CharacterSet._bridgeToObjectiveC()()
{
  return v2;
}

uint64_t static CharacterSet._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v5;
  *(_BYTE *)(result + 24) = 0;
  *a2 = result;
  return result;
}

uint64_t static CharacterSet._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v6;
  *(_BYTE *)(v4 + 24) = 0;
  *a2 = v4;
  return 1LL;
}

void static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    objc_msgSend(v3, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0LL);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v7;
    *(_BYTE *)(v4 + 24) = 0;

LABEL_5:
    *a2 = v4;
    return;
  }

  CFMutableCharacterSetRef Mutable = CFCharacterSetCreateMutable(0LL);
  if (Mutable)
  {
    CFMutableCharacterSetRef v6 = Mutable;
    type metadata accessor for __CharacterSetStorage();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v6;
    *(_BYTE *)(v4 + 24) = 1;
    goto LABEL_5;
  }

  __break(1u);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CharacterSet()
{
  return v2;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CharacterSet( void *a1, uint64_t *a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v5;
  *(_BYTE *)(result + 24) = 0;
  *a2 = result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CharacterSet( void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v6;
  *(_BYTE *)(v4 + 24) = 0;
  *a2 = v4;
  return 1LL;
}

__CFString *CharacterSet.description.getter()
{
  return __CharacterSetStorage.description.getter();
}

__CFString *CharacterSet.debugDescription.getter()
{
  return __CharacterSetStorage.description.getter();
}

__CFString *protocol witness for CustomStringConvertible.description.getter in conformance CharacterSet()
{
  return __CharacterSetStorage.description.getter();
}

uint64_t NSCharacterSet._toCustomAnyHashable()()
{
  id v1 = v0;
  objc_msgSend(v1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0LL);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v4;
  *(_BYTE *)(v2 + 24) = 0;

  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSCharacterSet()
{
  id v1 = *v0;
  NSCharacterSet._toCustomAnyHashable()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CharacterSet.CodingKeys()
{
  return 0x70616D746962LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CharacterSet.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x70616D746962LL && a2 == 0xE600000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CharacterSet.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CharacterSet.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t CharacterSet.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CharacterSet.CodingKeys>);
  MEMORY[0x1895F8858](v3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __asm { BR              X10 }
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t CharacterSet.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CharacterSet.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  char v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  CFDataRef v6 = __CharacterSetStorage.bitmapRepresentation.getter();
  unint64_t v8 = v7;
  swift_release();
  v10[0] = v6;
  v10[1] = v8;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined consume of Data._Representation((uint64_t)v6, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CharacterSet(void *a1)
{
  return CharacterSet.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CharacterSet(void *a1)
{
  return CharacterSet.encode(to:)(a1);
}

BOOL specialized static __CharacterSetStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16)) != 0;
}

unint64_t type metadata accessor for NSCharacterSet()
{
  unint64_t result = lazy cache variable for type metadata for NSCharacterSet;
  if (!lazy cache variable for type metadata for NSCharacterSet)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSCharacterSet);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet()
{
  unint64_t result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CharacterSet, &type metadata for CharacterSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CharacterSet, &type metadata for CharacterSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CharacterSet, &type metadata for CharacterSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CharacterSet, &type metadata for CharacterSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CharacterSet, &type metadata for CharacterSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CharacterSet, &type metadata for CharacterSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CharacterSet.CodingKeys, &unk_189C75480);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CharacterSet.CodingKeys, &unk_189C75480);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CharacterSet.CodingKeys, &unk_189C75480);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CharacterSet.CodingKeys, &unk_189C75480);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for CharacterSet(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  a1[2] = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  a1[3] = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  unint64_t result = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  a1[4] = result;
  return result;
}

ValueMetadata *type metadata accessor for CharacterSet()
{
  return &type metadata for CharacterSet;
}

uint64_t initializeBufferWithCopyOfBuffer for __CharacterSetStorage.Backing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  id v5 = v3;
  return a1;
}

void destroy for __CharacterSetStorage.Backing(id *a1)
{
}

uint64_t assignWithCopy for __CharacterSetStorage.Backing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  id v6 = v3;

  return a1;
}

uint64_t assignWithTake for __CharacterSetStorage.Backing(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = v3;

  return a1;
}

void *type metadata accessor for __CharacterSetStorage.Backing()
{
  return &unk_189C753F0;
}

uint64_t storeEnumTagSinglePayload for CharacterSet.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_182FF6500 + 4 * byte_18372E100[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_182FF6520 + 4 * byte_18372E105[v4]))();
  }
}

_BYTE *sub_182FF6500(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_182FF6520(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_182FF6528(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_182FF6530(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_182FF6538(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_182FF6540(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for CharacterSet.CodingKeys()
{
  return &unk_189C75480;
}

unint64_t lazy protocol witness table accessor for type __CharacterSetStorage and conformance __CharacterSetStorage()
{
  unint64_t result = lazy protocol witness table cache variable for type __CharacterSetStorage and conformance __CharacterSetStorage;
  if (!lazy protocol witness table cache variable for type __CharacterSetStorage and conformance __CharacterSetStorage)
  {
    uint64_t v1 = type metadata accessor for __CharacterSetStorage();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for __CharacterSetStorage, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type __CharacterSetStorage and conformance __CharacterSetStorage);
  }

  return result;
}

uint64_t closure #1 in _TimeZoneICU.deinit(uint64_t *a1, uint64_t a2)
{
  if (*a1) {
    return ucal_close();
  }
  uint64_t v4 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v4, v5)[2] >> 31) {
    __break(1u);
  }
  uint64_t v6 = ucal_open();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (v6)
  {
    *a1 = v6;
    return ucal_close();
  }

  return result;
}

uint64_t _TimeZoneICU.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  closure #1 in _TimeZoneICU.deinit((uint64_t *)(v1 + 16), v0);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void *_TimeZoneICU.init(identifier:)(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v5 = a1;
  uint64_t v6 = specialized static TimeZone.tryParseGMTName(_:)();
  if ((v7 & 1) != 0 || (uint64_t v8 = specialized static TimeZone.nameForSecondsFromGMT(_:)(v6), !v9))
  {
    swift_bridgeObjectRetain();
    id v12 = specialized _copyCollectionToContiguousArray<A>(_:)(v5, v3);
    swift_bridgeObjectRelease();
    specialized _withResizingUCharBuffer(initialSize:_:)(32LL, (uint64_t)(v12 + 4), v12[2]);
    uint64_t v14 = v13;
    swift_release();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_8;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  uint64_t v10 = v8;
  unint64_t v11 = v9;
  swift_bridgeObjectRelease();
  uint64_t v5 = v10;
  unint64_t v3 = v11;
LABEL_8:
  v2[3] = v5;
  _OWORD v2[4] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_TimeZoneICU.State>._Buffer);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 24) = 0;
  *(void *)(v15 + 16) = 0LL;
  v2[2] = v15;
  return v2;
}

uint64_t closure #1 in _TimeZoneICU.secondsFromGMT(for:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*a1)
  {
LABEL_2:
    ucal_setMillis();
    int v4 = ucal_get();
    uint64_t result = ucal_get();
    if (!__OFADD__(v4, (_DWORD)result))
    {
      *a3 = (v4 + (int)result) / 1000;
      return result;
    }

Swift::String_optional __swiftcall _TimeZoneICU.abbreviation(for:)(Foundation::Date a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)((uint64_t *)(v2 + 16), v1, (double *)v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 24));
  swift_release();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  closure #1 in _TimeZoneICU.abbreviation(for:)((uint64_t *)(v2 + 16), v1, v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 24));
  swift_release();
  uint64_t v3 = v6[0];
  int v4 = (void *)v6[1];
  result.value._unint64_t object = v4;
  result.value._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t closure #1 in _TimeZoneICU.abbreviation(for:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  v19[2] = *MEMORY[0x1895F89C0];
  unint64_t v6 = *(void *)(a2 + 32);
  if (!*a1)
  {
    uint64_t v16 = *(void *)(a2 + 24);
    LODWORD(v19[0]) = 0;
    swift_bridgeObjectRetain();
    if (specialized _copyCollectionToContiguousArray<A>(_:)(v16, v6)[2] >> 31) {
      __break(1u);
    }
    uint64_t v17 = ucal_open();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v17)
    {
      *a3 = 0LL;
      a3[1] = 0LL;
      return result;
    }

    *a1 = v17;
  }

  uint64_t v7 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  v19[0] = static LocaleCache.cache;
  LocaleCache.current.getter();
  uint64_t v9 = v8;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v9 + 64))(ObjectType, v9);
  swift_unknownObjectRelease();
  uint64_t v11 = swift_bridgeObjectRetain_n();
  MEMORY[0x1895F8858](v11);
  swift_bridgeObjectRetain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v18, v19);
  if (v4)
  {
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_willThrow();
    __break(1u);
  }

  else
  {
    uint64_t v12 = v19[0];
    uint64_t v13 = v19[1];
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease_n();
    *a3 = v12;
    a3[1] = v13;
  }

  return result;
}

Swift::Bool __swiftcall _TimeZoneICU.isDaylightSavingTime(for:)(Foundation::Date a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)((uint64_t *)(v2 + 16), v1, &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 24));
  swift_release();
  return v4 != 0.0;
}

uint64_t closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  if (*a1) {
    goto LABEL_2;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v6, v7)[2] >> 31) {
    __break(1u);
  }
  uint64_t v8 = ucal_open();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    *a1 = v8;
LABEL_2:
    ucal_setMillis();
    uint64_t result = ucal_get();
    *a3 = (double)(int)result / 1000.0;
    return result;
  }

  *a3 = 0.0;
  return result;
}

void closure #1 in _TimeZoneICU.nextDaylightSavingTimeTransition(after:)( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  v11[1] = *(double *)MEMORY[0x1895F89C0];
  if (*a1) {
    goto LABEL_2;
  }
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  LODWORD(v11[0]) = 0;
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v7, v8)[2] >> 31) {
    __break(1u);
  }
  uint64_t v9 = ucal_open();
  swift_release();
  swift_bridgeObjectRelease();
  if (v9)
  {
    *a1 = v9;
LABEL_2:
    v11[0] = a4;
    uint64_t v10 = 0x42ACF8AB468F0000LL;
    static _TimeZoneICU.nextDaylightSavingTimeTransition(forLocked:startingAt:limit:)(v11, (double *)&v10, a3);
    return;
  }

  *(void *)a3 = 0LL;
  *(_BYTE *)(a3 + 8) = 1;
}

void static _TimeZoneICU.nextDaylightSavingTimeTransition(forLocked:startingAt:limit:)( double *a1@<X1>, double *a2@<X2>, uint64_t a3@<X8>)
{
  double v4 = (*a2 + 978307200.0) * 1000.0;
  if (v4 >= (*a1 + 978307200.0) * 1000.0)
  {
    ucal_getMillis();
    ucal_setMillis();
    if (ucal_getTimeZoneTransitionDate() && v4 >= 0.0)
    {
      *(double *)a3 = 0.0 / 1000.0 + -978307200.0;
      *(_BYTE *)(a3 + 8) = 0;
    }

    else
    {
      *(void *)a3 = 0LL;
      *(_BYTE *)(a3 + 8) = 1;
    }

    ucal_setMillis();
  }

  else
  {
    *(void *)a3 = 0LL;
    *(_BYTE *)(a3 + 8) = 1;
  }

Swift::tuple_rawOffset_Int_daylightSavingOffset_Double __swiftcall _TimeZoneICU.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)( Foundation::Date a1, Foundation::TimeZone::DaylightSavingTimePolicy repeatedTimePolicy, Foundation::TimeZone::DaylightSavingTimePolicy skippedTimePolicy)
{
  uint64_t v4 = *(void *)(v3 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  closure #1 in _TimeZoneICU.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)( (uint64_t *)(v4 + 16),  v3,  (uint64_t)v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
  swift_release();
  Swift::Int v5 = v8[0];
  double v6 = *(double *)&v8[1];
  result.daylightSavingOffset = v6;
  result.rawOffset = v5;
  return result;
}

uint64_t closure #1 in _TimeZoneICU.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1) {
    goto LABEL_2;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v6, v7)[2] >> 31) {
    __break(1u);
  }
  uint64_t v8 = ucal_open();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    *a1 = v8;
LABEL_2:
    ucal_getMillis();
    ucal_setMillis();
    ucal_getTimeZoneOffsetFromLocal();
    *(void *)a3 = 0LL;
    *(double *)(a3 + 8) = (double)0;
    return ucal_setMillis();
  }

  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  return result;
}

uint64_t _TimeZoneICU.localizedName(for:locale:)(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (*a2)
  {
    uint64_t v5 = a2[1];
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
    swift_unknownObjectRetain();
    uint64_t v8 = v7(ObjectType, v5);
    uint64_t v10 = v9;
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v10 = 0xE000000000000000LL;
  }

  uint64_t v11 = *(void *)(v3 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
  closure #1 in _TimeZoneICU.localizedName(for:locale:)((uint64_t *)(v11 + 16), v3, a1, v8, v10, &v13);
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));
  swift_bridgeObjectRelease();
  swift_release();
  return v13;
}

uint64_t closure #1 in _TimeZoneICU.localizedName(for:locale:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v9 = a4;
  v31[2] = *MEMORY[0x1895F89C0];
  uint64_t v13 = *(void *)(a2 + 24);
  unint64_t v12 = *(void *)(a2 + 32);
  uint64_t v14 = *a1;
  if (*a1) {
    goto LABEL_2;
  }
  uint64_t v30 = a4;
  LODWORD(v31[0]) = 0;
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v13, v12)[2] >> 31) {
    __break(1u);
  }
  uint64_t v14 = ucal_open();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v14)
  {
    *a6 = 0LL;
    a6[1] = 0LL;
    return result;
  }

  *a1 = v14;
  uint64_t v9 = v30;
  if (a3 <= 5)
  {
LABEL_2:
    switch(a3)
    {
      case 0uLL:
      case 1uLL:
      case 2uLL:
      case 3uLL:
        uint64_t v23 = swift_bridgeObjectRetain_n();
        MEMORY[0x1895F8858](v23);
        swift_bridgeObjectRetain();
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v29, v31);
        if (v7)
        {
          swift_bridgeObjectRelease_n();
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x182FF78E0LL);
        }

        uint64_t v24 = v31[0];
        uint64_t v25 = v31[1];
        uint64_t result = swift_bridgeObjectRelease_n();
        *a6 = v24;
        a6[1] = v25;
        break;
      case 4uLL:
        goto LABEL_9;
      case 5uLL:
        swift_bridgeObjectRetain();
        uint64_t v17 = v14;
        uint64_t v18 = v13;
        unint64_t v19 = v12;
        uint64_t v20 = v9;
        uint64_t v21 = a5;
        char v22 = 1;
        goto LABEL_13;
      default:
        goto LABEL_8;
    }
  }

  else
  {
LABEL_8:
    type metadata accessor for NSTimeZoneNameStyle(0LL);
    v31[0] = a3;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
LABEL_9:
    swift_bridgeObjectRetain();
    uint64_t v17 = v14;
    uint64_t v18 = v13;
    unint64_t v19 = v12;
    uint64_t v20 = v9;
    uint64_t v21 = a5;
    char v22 = 0;
LABEL_13:
    uint64_t v26 = specialized static _TimeZoneICU.timeZoneDisplayName(for:timeZoneName:localeName:isShort:isGeneric:isDaylight:)( v17,  v18,  v19,  v20,  v21,  v22,  1);
    uint64_t v28 = v27;
    uint64_t result = swift_bridgeObjectRelease();
    *a6 = v26;
    a6[1] = v28;
  }

  return result;
}

void protocol witness for _TimeZoneProtocol.init(secondsFromGMT:) in conformance _TimeZoneICU()
{
}

void *protocol witness for _TimeZoneProtocol.init(identifier:) in conformance _TimeZoneICU( uint64_t a1, unint64_t a2)
{
  return _TimeZoneICU.init(identifier:)(a1, a2);
}

uint64_t protocol witness for _TimeZoneProtocol.identifier.getter in conformance _TimeZoneICU()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for _TimeZoneProtocol.secondsFromGMT(for:) in conformance _TimeZoneICU()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  partial apply for closure #1 in _TimeZoneICU.secondsFromGMT(for:)((uint64_t *)(v1 + 16), &v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();
  return v3;
}

double protocol witness for _TimeZoneProtocol.daylightSavingTimeOffset(for:) in conformance _TimeZoneICU()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  partial apply for closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)((uint64_t *)(v1 + 16), &v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();
  return v3;
}

uint64_t protocol witness for _TimeZoneProtocol.nextDaylightSavingTimeTransition(after:) in conformance _TimeZoneICU@<X0>( uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  partial apply for closure #1 in _TimeZoneICU.nextDaylightSavingTimeTransition(after:)((uint64_t *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return swift_release();
}

uint64_t protocol witness for _TimeZoneProtocol.data.getter in conformance _TimeZoneICU()
{
  return 0LL;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _TimeZoneICU()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24LL);
  swift_bridgeObjectRetain();
  return v1;
}

void *one-time initialization function for icuTZIdentifiers()
{
  uint64_t result = specialized static _TimeZoneICU.timeZoneNamesFromICU()();
  icuTZIdentifiers._rawValue = result;
  return result;
}

uint64_t static TimeZone.knownTimeZoneIdentifiers.getter()
{
  if (one-time initialization token for icuTZIdentifiers != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t static TimeZone.timeZoneDataVersion.getter()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v3 = 0;
  uint64_t v0 = MEMORY[0x186E211E4](&v3);
  uint64_t result = 0LL;
  if (v0 && v3 <= 0)
  {
    uint64_t result = MEMORY[0x186E1B634](v0, 0xE000000000000000LL);
    if (!v2) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for _TimeZoneICU()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for _TimeZoneICU.State()
{
  return &type metadata for _TimeZoneICU.State;
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneICU(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _TimeZoneICU and conformance _TimeZoneICU();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneICU and conformance _TimeZoneICU()
{
  unint64_t result = lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU;
  if (!lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU)
  {
    uint64_t v1 = type metadata accessor for _TimeZoneICU();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _TimeZoneICU, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU);
  }

  return result;
}

uint64_t specialized static _TimeZoneICU.timeZoneDisplayName(for:timeZoneName:localeName:isShort:isGeneric:isDaylight:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  v19[2] = *MEMORY[0x1895F89C0];
  if ((a7 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = specialized _copyCollectionToContiguousArray<A>(_:)(a2, a3);
    swift_bridgeObjectRelease();
    unint64_t v11 = v10[2];
    LODWORD(v19[0]) = 0;
    if (v11 >> 31)
    {
      __break(1u);
    }

    else
    {
      String.utf8CString.getter();
      uint64_t v12 = udat_open();
      swift_release();
      uint64_t v13 = 0LL;
      if (!v12)
      {
LABEL_11:
        swift_release();
        return v13;
      }

      uint64_t v14 = specialized _copyCollectionToContiguousArray<A>(_:)(1987475062LL, 0xE400000000000000LL);
      if ((a6 & 1) != 0) {
        uint64_t v15 = 1LL;
      }
      else {
        uint64_t v15 = v14[2];
      }
      if (v15 >= (uint64_t)0xFFFFFFFF80000000LL)
      {
        if (v15 <= 0x7FFFFFFF)
        {
          udat_applyPattern();
          uint64_t v13 = specialized _withResizingUCharBuffer(initialSize:_:)(32LL);
          swift_release();
          udat_close();
          goto LABEL_11;
        }

void partial apply for closure #1 in _TimeZoneICU.nextDaylightSavingTimeTransition(after:)( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t partial apply for closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)@<X0>( uint64_t *a1@<X0>, double *a2@<X8>)
{
  return closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)(a1, *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _TimeZoneICU.secondsFromGMT(for:)@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _TimeZoneICU.secondsFromGMT(for:)(a1, *(void *)(v2 + 24), a2);
}

void *specialized static _TimeZoneICU.timeZoneNamesFromICU()()
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  int v14 = 0;
  ucal_openTimeZones();
  unsigned int v13 = 0;
  uint64_t isStackAllocationSafe = uenum_unext();
  uint64_t v1 = (void *)MEMORY[0x18961AFE8];
  if (isStackAllocationSafe)
  {
    uint64_t v2 = (unsigned __int16 *)isStackAllocationSafe;
    while (1)
    {
      uint64_t v3 = v13;
      if ((int)v13 >= 1)
      {
        uint64_t v4 = 3LL * v13;
        if (v13 < 0x156
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1895F8858](isStackAllocationSafe);
          closure #1 in String.init(_utf16:)((_BYTE *)&v12 - ((v4 + 15) & 0x7FFFFFFF0LL), v2, v3, &v15);
          uint64_t v6 = v15;
          uint64_t v5 = v16;
          if (v16) {
            goto LABEL_9;
          }
        }

        else
        {
          uint64_t v7 = (_BYTE *)swift_slowAlloc();
          closure #1 in String.init(_utf16:)(v7, v2, v3, &v15);
          MEMORY[0x186E20E60](v7, -1LL, -1LL);
          uint64_t v6 = v15;
          uint64_t v5 = v16;
          if (v16)
          {
LABEL_9:
            if ((specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.contains(_:)( v6,  v5,  outlined read-only object #0 of static _TimeZoneICU.timeZoneNamesFromICU()) & 1) != 0)
            {
              swift_bridgeObjectRelease();
            }

            else
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v1[2] + 1LL,  1,  v1);
              }
              unint64_t v9 = v1[2];
              unint64_t v8 = v1[3];
              if (v9 >= v8 >> 1) {
                uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v1);
              }
              v1[2] = v9 + 1;
              uint64_t v10 = &v1[2 * v9];
              void v10[4] = v6;
              v10[5] = v5;
            }
          }
        }
      }

      uint64_t isStackAllocationSafe = uenum_unext();
      if (isStackAllocationSafe)
      {
        uint64_t v2 = (unsigned __int16 *)isStackAllocationSafe;
        if (v14 <= 0) {
          continue;
        }
      }

      break;
    }
  }

  uenum_close();
  return v1;
}

uint64_t Usage.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_182FF82EC + 4 * byte_18372E610[a1]))( 0x746C7561666564LL,  0xE700000000000000LL);
}

uint64_t sub_182FF82EC()
{
  return 0x6E6F73726570LL;
}

uint64_t sub_182FF8300()
{
  return 1685024614LL;
}

uint64_t sub_182FF8310()
{
  return 0x682D6E6F73726570LL;
}

uint64_t sub_182FF8334()
{
  return 1684107122LL;
}

uint64_t sub_182FF8344()
{
  return 0x656C2D6C61636F66LL;
}

uint64_t sub_182FF8364()
{
  return 0x6C6C61666E696172LL;
}

uint64_t sub_182FF838C()
{
  return 0x79746C6269736976LL;
}

uint64_t sub_182FF83A4()
{
  return 0x6372746D6F726162LL;
}

uint64_t sub_182FF83BC()
{
  return 1684957559LL;
}

uint64_t sub_182FF83CC()
{
  return 0x72656874616577LL;
}

uint64_t sub_182FF83E0()
{
  return 0x6469756C66LL;
}

uint64_t sub_182FF83F4()
{
  return 0x6469766F72507361LL;
}

id Measurement.unit.getter()
{
  return *v0;
}

double Measurement.value.getter()
{
  return *(double *)(v0 + 8);
}

void Measurement.value.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*Measurement.value.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement.init(value:unit:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)a2 = result;
  *(double *)(a2 + 8) = a3;
  return result;
}

void Measurement.hash(into:)()
{
  uint64_t v1 = *(void **)v0;
  double v2 = *(double *)(v0 + 8);
  objc_opt_self();
  uint64_t v3 = (void *)swift_dynamicCastObjCClass();
  id v9 = v1;
  if (v3)
  {
    id v4 = objc_msgSend(v3, sel_converter);
    objc_msgSend(v4, sel_baseUnitValueFromValue_, v2);
    Swift::UInt64 v6 = v5;

    if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v7 = v6;
    }
    else {
      Swift::UInt64 v7 = 0LL;
    }
    Hasher._combine(_:)(v7);
  }

  else
  {
    NSObject.hash(into:)();

    if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v8 = *(void *)&v2;
    }
    else {
      Swift::UInt64 v8 = 0LL;
    }
    Hasher._combine(_:)(v8);
  }

Swift::Int Measurement.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t static Measurement.< infix<A, B>(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(void **)a1;
  double v3 = *(double *)(a1 + 8);
  id v4 = *(void **)a2;
  double v5 = *(double *)(a2 + 8);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if ((static NSObject.== infix(_:_:)() & 1) != 0) {
    return v3 < v5;
  }
  objc_opt_self();
  uint64_t v6 = swift_dynamicCastObjCClass();
  if (v6)
  {
    Swift::UInt64 v7 = (void *)v6;
    objc_opt_self();
    uint64_t v8 = swift_dynamicCastObjCClass();
    if (v8)
    {
      id v9 = (void *)v8;
      ObjCClassFromObject = (void *)swift_getObjCClassFromObject();
      id v11 = v2;
      id v12 = v4;
      id v13 = objc_msgSend(ObjCClassFromObject, sel_baseUnit);
      id v14 = objc_msgSend((id)swift_getObjCClassFromObject(), sel_baseUnit);
      char v15 = static NSObject.== infix(_:_:)();

      if ((v15 & 1) != 0)
      {
        id v16 = objc_msgSend(v7, sel_converter);
        objc_msgSend(v16, sel_baseUnitValueFromValue_, v3);
        double v3 = v17;

        id v18 = objc_msgSend(v9, sel_converter);
        objc_msgSend(v18, sel_baseUnitValueFromValue_, v5);
        double v5 = v19;

        return v3 < v5;
      }
    }
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static Measurement.== infix<A, B>(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(void **)a1;
  double v3 = *(double *)(a1 + 8);
  id v4 = *(void **)a2;
  double v5 = *(double *)(a2 + 8);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if ((static NSObject.== infix(_:_:)() & 1) != 0) {
    return v3 == v5;
  }
  objc_opt_self();
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    Swift::UInt64 v7 = (void *)result;
    objc_opt_self();
    uint64_t result = swift_dynamicCastObjCClass();
    if (result)
    {
      uint64_t v8 = (void *)result;
      ObjCClassFromObject = (void *)swift_getObjCClassFromObject();
      id v10 = v2;
      id v11 = v4;
      id v12 = objc_msgSend(ObjCClassFromObject, sel_baseUnit);
      id v13 = objc_msgSend((id)swift_getObjCClassFromObject(), sel_baseUnit);
      char v14 = static NSObject.== infix(_:_:)();

      if ((v14 & 1) != 0)
      {
        id v15 = objc_msgSend(v7, sel_converter);
        objc_msgSend(v15, sel_baseUnitValueFromValue_, v3);
        double v3 = v16;

        id v17 = objc_msgSend(v8, sel_converter);
        objc_msgSend(v17, sel_baseUnitValueFromValue_, v5);
        double v5 = v18;

        return v3 == v5;
      }

      return 0LL;
    }
  }

  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A>()
{
  return Hasher._finalize()();
}

uint64_t Measurement.description.getter()
{
  uint64_t v1 = *v0;
  Double.write<A>(to:)();
  v2._uint64_t countAndFlagsBits = 32LL;
  v2._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  id v3 = objc_msgSend(v1, sel_symbol);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  v7._uint64_t countAndFlagsBits = (uint64_t)v4;
  v7._unint64_t object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0LL;
}

uint64_t Measurement.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v33 = a1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v7);
  id v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = *(void **)v2;
  uint64_t v11 = *(void *)(v2 + 8);
  uint64_t v38 = MEMORY[0x189618560];
  *(void *)&__int128 v37 = v11;
  __int128 v34 = xmmword_1837257D0;
  outlined init with take of Any(&v37, &v35);
  id v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
  unint64_t v14 = v12[2];
  unint64_t v13 = v12[3];
  if (v14 >= v13 >> 1) {
    id v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v13 > 1),  v14 + 1,  1,  v12);
  }
  _DWORD v12[2] = v14 + 1;
  id v15 = &v12[6 * v14];
  __int128 v16 = v34;
  __int128 v17 = v36;
  v15[3] = v35;
  v15[4] = v17;
  v15[2] = v16;
  id v18 = objc_msgSend(v10, sel_symbol, v32, v33);
  id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  uint64_t v38 = MEMORY[0x189617FA8];
  *(void *)&__int128 v37 = v19;
  *((void *)&v37 + 1) = v21;
  __int128 v34 = xmmword_18372EDC0;
  outlined init with take of Any(&v37, &v35);
  unint64_t v23 = v12[2];
  unint64_t v22 = v12[3];
  if (v23 >= v22 >> 1) {
    id v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v22 > 1),  v23 + 1,  1,  v12);
  }
  _DWORD v12[2] = v23 + 1;
  uint64_t v24 = &v12[6 * v23];
  __int128 v25 = v34;
  __int128 v26 = v36;
  v24[3] = v35;
  v24[4] = v26;
  _OWORD v24[2] = v25;
  *(void *)&__int128 v34 = v10;
  *((void *)&v34 + 1) = v11;
  *(void *)&__int128 v37 = v12;
  uint64_t v27 = *MEMORY[0x18961A718];
  uint64_t v28 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v29 = *(void *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 104))(v9, v27, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v9, 0LL, 1LL, v28);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x18961A748], v3);
  id v30 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A],  &demangling cache variable for type metadata for [(label: String?, value: Any)],  MEMORY[0x189618488]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

id Measurement<>.converted(to:)@<X0>(void *a1@<X0>, double *a2@<X8>)
{
  id v4 = *(id *)v2;
  double v5 = *(double *)(v2 + 8);
  if ((objc_msgSend(*(id *)v2, sel_isEqual_) & 1) == 0)
  {
    id v6 = objc_msgSend(v4, sel_converter);
    objc_msgSend(v6, sel_baseUnitValueFromValue_, v5);
    double v5 = v7;

    swift_getObjectType();
    id v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_baseUnit);
    unsigned __int8 v9 = objc_msgSend(a1, sel_isEqual_, v8);

    if ((v9 & 1) == 0)
    {
      id v10 = objc_msgSend(a1, sel_converter);
      objc_msgSend(v10, sel_valueFromBaseUnitValue_, v5);
      double v5 = v11;
    }
  }

  *(void *)a2 = a1;
  a2[1] = v5;
  return a1;
}

double Measurement<>.convert(to:)(void *a1)
{
  uint64_t v2 = *(void **)v1;
  Measurement<>.converted(to:)(a1, v4);

  double result = v4[1];
  *(double *)uint64_t v1 = v4[0];
  *(double *)(v1 + 8) = result;
  return result;
}

id static Measurement<>.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v4 = *(id *)a1;
  double v5 = *(double *)(a1 + 8);
  id v6 = *(void **)a2;
  double v7 = *(double *)(a2 + 8);
  if (objc_msgSend(*(id *)a1, sel_isEqual_, *(void *)a2))
  {
    double v8 = v5 + v7;
    id result = v4;
  }

  else
  {
    id v10 = objc_msgSend(v4, sel_converter);
    objc_msgSend(v10, sel_baseUnitValueFromValue_, v5);
    double v12 = v11;

    id v13 = objc_msgSend(v6, sel_converter);
    objc_msgSend(v13, sel_baseUnitValueFromValue_, v7);
    double v15 = v14;

    double v8 = v12 + v15;
    swift_getObjectType();
    id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_baseUnit);
  }

  *(void *)a3 = result;
  *(double *)(a3 + 8) = v8;
  return result;
}

id static Measurement<>.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v4 = *(void **)a1;
  double v5 = *(double *)(a1 + 8);
  id v6 = *(void **)a2;
  double v7 = *(double *)(a2 + 8);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if ((static NSObject.== infix(_:_:)() & 1) != 0)
  {
    double v8 = v5 - v7;
    id result = v4;
  }

  else
  {
    id v10 = objc_msgSend(v4, sel_converter);
    objc_msgSend(v10, sel_baseUnitValueFromValue_, v5);
    double v12 = v11;

    id v13 = objc_msgSend(v6, sel_converter);
    objc_msgSend(v13, sel_baseUnitValueFromValue_, v7);
    double v15 = v14;

    double v8 = v12 - v15;
    swift_getObjectType();
    id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_baseUnit);
  }

  *(void *)a3 = result;
  *(double *)(a3 + 8) = v8;
  return result;
}

id static Measurement.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4 = *(double *)(a1 + 8);
  double v5 = *(double *)(a2 + 8);
  id v7 = *(id *)a1;
  if (objc_msgSend(*(id *)a1, sel_isEqual_, *(void *)a2))
  {
    *(void *)a3 = v7;
    *(double *)(a3 + 8) = v4 + v5;
    return v7;
  }

  else
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

id static Measurement.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4 = *(double *)(a1 + 8);
  double v5 = *(double *)(a2 + 8);
  id v7 = *(id *)a1;
  if (objc_msgSend(*(id *)a1, sel_isEqual_, *(void *)a2))
  {
    *(void *)a3 = v7;
    *(double *)(a3 + 8) = v4 - v5;
    return v7;
  }

  else
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

id static Measurement.* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3 = *(void **)a1;
  double v4 = *(double *)(a1 + 8) * a3;
  *(void *)a2 = *(void *)a1;
  *(double *)(a2 + 8) = v4;
  return v3;
}

{
  void *v3;
  double v4;
  uint64_t v3 = *(void **)a1;
  double v4 = *(double *)(a1 + 8) * a3;
  *(void *)a2 = *(void *)a1;
  *(double *)(a2 + 8) = v4;
  return v3;
}

id static Measurement./ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3 = *(void **)a1;
  double v4 = *(double *)(a1 + 8) / a3;
  *(void *)a2 = *(void *)a1;
  *(double *)(a2 + 8) = v4;
  return v3;
}

{
  void *v3;
  double v4;
  uint64_t v3 = *(void **)a1;
  double v4 = a3 / *(double *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(double *)(a2 + 8) = v4;
  return v3;
}

NSMeasurement __swiftcall Measurement._bridgeToObjectiveC()()
{
  uint64_t v1 = (objc_class *)objc_msgSend( objc_allocWithZone((Class)NSMeasurement),  sel_initWithDoubleValue_unit_,  *(void *)v0,  *(double *)(v0 + 8));
  result._doubleValue = v3;
  result._unit = v2;
  result.super.isa = v1;
  return result;
}

uint64_t static Measurement._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  objc_msgSend(a1, sel_doubleValue);
  uint64_t v5 = v4;
  id v6 = objc_msgSend(a1, sel_unit);
  uint64_t result = swift_dynamicCastUnknownClassUnconditional();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  return result;
}

BOOL static Measurement._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v4 = objc_msgSend(a1, sel_unit);
  uint64_t v5 = swift_dynamicCastUnknownClass();
  if (v5)
  {

    objc_msgSend(a1, sel_doubleValue);
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v6;
  }

  else
  {
  }

  return v5 != 0;
}

id static Measurement._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    uint64_t v2 = result;
    id v4 = objc_msgSend(result, sel_unit);
    uint64_t v5 = swift_dynamicCastUnknownClassUnconditional();
    uint64_t result = objc_msgSend(v2, sel_doubleValue);
    *a2 = v5;
    a2[1] = v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Measurement<A>( void *a1, uint64_t a2)
{
  return static Measurement._forceBridgeFromObjectiveC(_:result:)(a1, a2);
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Measurement<A>( void *a1, uint64_t a2)
{
  return static Measurement._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Measurement<A>@<X0>( id result@<X0>, uint64_t *a2@<X8>)
{
  return static Measurement._unconditionallyBridgeFromObjectiveC(_:)(result, a2);
}

uint64_t NSMeasurement._toCustomAnyHashable()()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t Measurement.CodingKeys.init(rawValue:)(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0LL;
  }
}

uint64_t Measurement.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176LL && a2 == 0xE500000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 1953066613 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t Measurement.CodingKeys.intValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t Measurement.CodingKeys.rawValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t Measurement.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 1953066613LL;
  }
  else {
    return 0x65756C6176LL;
  }
}

uint64_t Measurement.UnitCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C6F626D7973LL && a2 == 0xE600000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x65747265766E6F63LL && a2 == 0xE900000000000072LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t Measurement.UnitCodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x65747265766E6F63LL;
  }
  else {
    return 0x6C6F626D7973LL;
  }
}

uint64_t Measurement.LinearConverterCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6963696666656F63LL && a2 == 0xEB00000000746E65LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x746E6174736E6F63LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t Measurement.LinearConverterCodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x746E6174736E6F63LL;
  }
  else {
    return 0x6963696666656F63LL;
  }
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSMeasurement()
{
  unsigned int v1 = *v0;
  objc_msgSend(v1, sel_unit);
  objc_msgSend(v1, sel_doubleValue);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Measurement<NSUnit> and conformance Measurement<A>,  &demangling cache variable for type metadata for Measurement<NSUnit>,  (uint64_t)&protocol conformance descriptor for Measurement<A>);
  AnyHashable.init<A>(_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A>.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Measurement<A>.CodingKeys(uint64_t a1)
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A>.CodingKeys()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A>.CodingKeys()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Measurement<A>.CodingKeys@<X0>( uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = Measurement.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Measurement<A>.CodingKeys@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = Measurement.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A>.CodingKeys()
{
  return Measurement.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A>.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = Measurement.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.CodingKeys( uint64_t a1, uint64_t a2)
{
  return protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.CodingKeys( a1,  a2,  (uint64_t (*)(void, void))Measurement.CodingKeys.intValue.getter);
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Measurement<A>.CodingKeys@<X0>( uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = Measurement.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A>.UnitCodingKeys( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Measurement<A>.UnitCodingKeys( uint64_t a1)
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A>.UnitCodingKeys()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A>.UnitCodingKeys()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A>.UnitCodingKeys()
{
  return Measurement.UnitCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A>.UnitCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = Measurement.UnitCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.UnitCodingKeys( uint64_t a1, uint64_t a2)
{
  return protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.CodingKeys( a1,  a2,  (uint64_t (*)(void, void))Measurement.UnitCodingKeys.intValue.getter);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A>.UnitCodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A>.UnitCodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A>.LinearConverterCodingKeys( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Measurement<A>.LinearConverterCodingKeys( uint64_t a1)
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A>.LinearConverterCodingKeys()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A>.LinearConverterCodingKeys()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A>.LinearConverterCodingKeys()
{
  return Measurement.LinearConverterCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A>.LinearConverterCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = Measurement.LinearConverterCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.CodingKeys( uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  return a3(*v3, *(void *)(a1 + 16));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A>.LinearConverterCodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A>.LinearConverterCodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t Measurement.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  char v40 = a5;
  uint64_t v7 = type metadata accessor for Measurement.LinearConverterCodingKeys(255LL, a2, a3, a4);
  uint64_t v42 = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A>.LinearConverterCodingKeys, v7);
  uint64_t v43 = v7;
  uint64_t v41 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v39 = *(void *)(v41 - 8);
  MEMORY[0x1895F8858](v41);
  uint64_t v44 = (char *)&v38 - v8;
  uint64_t v11 = type metadata accessor for Measurement.UnitCodingKeys(255LL, a2, v9, v10);
  uint64_t v49 = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A>.UnitCodingKeys, v11);
  uint64_t v48 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v46 = *(void *)(v48 - 8);
  MEMORY[0x1895F8858](v48);
  uint64_t v47 = (char *)&v38 - v12;
  uint64_t v45 = a2;
  uint64_t v15 = type metadata accessor for Measurement.CodingKeys(255LL, a2, v13, v14);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A>.CodingKeys, v15);
  uint64_t v16 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  id v19 = (char *)&v38 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v20 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    uint64_t v24 = (uint64_t)a1;
  }

  else
  {
    uint64_t v21 = v48;
    unint64_t v50 = a1;
    char v56 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v23 = v22;
    char v55 = 1;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v54 = 0;
    uint64_t v38 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v49 = (uint64_t)v19;
    type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSDimension);
    if (swift_dynamicCastMetatype())
    {
      char v53 = 1;
      __int128 v26 = v44;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v52 = 0;
      KeyedDecodingContainer.decode(_:forKey:)();
      double v31 = v30;
      char v51 = 1;
      KeyedDecodingContainer.decode(_:forKey:)();
      double v33 = v32;
      swift_dynamicCastMetatypeUnconditional();
      uint64_t v43 = v17;
      id v34 = objc_msgSend( objc_allocWithZone((Class)NSUnitConverterLinear),  sel_initWithCoefficient_constant_,  v31,  v33);
      id v35 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      uint64_t v36 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_initWithSymbol_converter_, v36, v34);
      swift_unknownObjectRelease();

      (*(void (**)(char *, uint64_t))(v39 + 8))(v26, v41);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v21);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v49, v16);
      id v37 = (id)swift_dynamicCastUnknownClassUnconditional();
    }

    else
    {
      id v27 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      uint64_t v28 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v37 = objc_msgSend(v27, sel_initWithSymbol_, v28);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v21);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v49, v16);
    }

    uint64_t v24 = (uint64_t)v50;
    uint64_t v29 = v40;
    *char v40 = v37;
    v29[1] = v23;
  }

  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t Measurement.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = type metadata accessor for Measurement.LinearConverterCodingKeys(255LL, v7, a3, a4);
  uint64_t v39 = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A>.LinearConverterCodingKeys, v8);
  uint64_t v40 = v8;
  uint64_t v9 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v41 = v9;
  uint64_t v42 = v10;
  MEMORY[0x1895F8858](v9);
  uint64_t v38 = (char *)&v37 - v11;
  uint64_t v14 = type metadata accessor for Measurement.UnitCodingKeys(255LL, v7, v12, v13);
  uint64_t v44 = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A>.UnitCodingKeys, v14);
  uint64_t v46 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v43 = *(void *)(v46 - 8);
  MEMORY[0x1895F8858](v46);
  uint64_t v47 = (char *)&v37 - v15;
  uint64_t v45 = v7;
  uint64_t v18 = type metadata accessor for Measurement.CodingKeys(255LL, v7, v16, v17);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A>.CodingKeys, v18);
  uint64_t v19 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&v37 - v21;
  id v48 = *v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v23 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v55 = 0;
  uint64_t v24 = v49;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v24) {
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }
  uint64_t v49 = v20;
  char v54 = 1;
  __int128 v26 = v47;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  id v27 = v22;
  id v28 = objc_msgSend(v48, sel_symbol);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v28);

  char v53 = 0;
  uint64_t v29 = v46;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v44 = (uint64_t)v27;
  swift_bridgeObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSDimension);
  if (!swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v26, v29);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v44, v23);
  }

  objc_opt_self();
  id v30 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_converter);
  swift_getObjectType();

  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSUnitConverterLinear);
  uint64_t result = swift_dynamicCastMetatype();
  if (result)
  {
    objc_opt_self();
    id v31 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_converter);
    objc_opt_self();
    double v32 = (void *)swift_dynamicCastObjCClassUnconditional();
    char v52 = 1;
    double v33 = v38;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    objc_msgSend(v32, sel_coefficient);
    char v51 = 0;
    uint64_t v34 = v41;
    id v35 = v33;
    KeyedEncodingContainer.encode(_:forKey:)();
    objc_msgSend(v32, sel_constant);
    char v50 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v36 = v42;

    (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v34);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v47, v29);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v44, v23);
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return Measurement.init(from:)(a1, *(void *)(a2 + 16), a3, a4, a5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A>( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Measurement.encode(to:)(a1, a2, a3, a4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Usage( unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = Usage.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == Usage.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Usage@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Usage.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Usage@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Usage.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Usage()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Usage()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Usage()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)();
  Usage.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Usage()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Usage()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)();
  Usage.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Measurement.LinearConverterCodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Measurement.LinearConverterCodingKeys);
}

uint64_t type metadata accessor for Measurement.UnitCodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Measurement.UnitCodingKeys);
}

uint64_t type metadata accessor for Measurement.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Measurement.CodingKeys);
}

uint64_t instantiation function for generic protocol witness table for Measurement<A>(void *a1, uint64_t a2)
{
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A>);
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A>, a2);
  a1[3] = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A>, a2);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A>, a2);
  a1[4] = result;
  return result;
}

void base witness table accessor for Equatable in Measurement<A>()
{
}

uint64_t type metadata instantiation function for Measurement()
{
  return swift_allocateGenericValueMetadata();
}

void *initializeBufferWithCopyOfBuffer for Measurement(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for Measurement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for Measurement(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  return a1;
}

uint64_t type metadata accessor for Measurement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement);
}

uint64_t getEnumTagSinglePayload for Usage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

uint64_t storeEnumTagSinglePayload for Usage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_182FFADF8 + 4 * byte_18372E623[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_182FFAE2C + 4 * byte_18372E61E[v4]))();
}

uint64_t sub_182FFAE2C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FFAE34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FFAE3CLL);
  }
  return result;
}

uint64_t sub_182FFAE48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FFAE50LL);
  }
  *(_BYTE *)uint64_t result = a2 + 13;
  return result;
}

uint64_t sub_182FFAE54(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FFAE5C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Usage()
{
  return &type metadata for Usage;
}

uint64_t type metadata instantiation function for Measurement.CodingKeys()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t storeEnumTagSinglePayload for Measurement.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_182FFAED0 + 4 * byte_18372E62D[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_182FFAF04 + 4 * byte_18372E628[v4]))();
}

uint64_t sub_182FFAF04(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FFAF0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182FFAF14LL);
  }
  return result;
}

uint64_t sub_182FFAF20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182FFAF28LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_182FFAF2C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182FFAF34(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in Measurement<A>.LinearConverterCodingKeys()
{
}

void base witness table accessor for Equatable in Measurement<A>.UnitCodingKeys()
{
}

void base witness table accessor for Equatable in Measurement<A>.CodingKeys()
{
}

unint64_t lazy protocol witness table accessor for type Usage and conformance Usage()
{
  unint64_t result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Usage, &type metadata for Usage);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Usage, &type metadata for Usage);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Usage, &type metadata for Usage);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Usage, &type metadata for Usage);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }

  return result;
}

void base witness table accessor for CustomDebugStringConvertible in Measurement<A>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in Measurement<A>.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in Measurement<A>.UnitCodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in Measurement<A>.UnitCodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in Measurement<A>.LinearConverterCodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in Measurement<A>.LinearConverterCodingKeys()
{
}

unint64_t specialized Usage.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Usage.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xE) {
    return 14LL;
  }
  else {
    return v3;
  }
}

uint64_t _LocaleBridged.copy(newCalendarIdentifier:)(char *a1)
{
  char v2 = *a1;
  id v3 = objc_msgSend(*(id *)(v1 + 16), sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  Locale.Components.init(identifier:)((uint64_t)v4, v6, v13);
  LOBYTE(v13[6]) = v2;
  __src[0] = v13[0];
  __src[1] = v13[1];
  __src[2] = v13[2];
  __src[3] = v13[3];
  __src[4] = v13[4];
  __src[5] = v13[5];
  LOBYTE(__src[6]) = v2;
  *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)((char *)&v13[6] + 8);
  *(_OWORD *)((char *)&__src[7] + 8) = *(_OWORD *)((char *)&v13[7] + 8);
  *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)((char *)&v13[8] + 8);
  *(_OWORD *)((char *)&__src[9] + 8) = *(_OWORD *)((char *)&v13[9] + 8);
  *(_OWORD *)((char *)&__src[10] + 8) = *(_OWORD *)((char *)&v13[10] + 8);
  *(_OWORD *)((char *)&__src[11] + 8) = *(_OWORD *)((char *)&v13[11] + 8);
  WORD4(__src[12]) = WORD4(v13[12]);
  __src[13] = v13[13];
  __src[14] = v13[14];
  __src[15] = v13[15];
  __src[16] = v13[16];
  __src[17] = v13[17];
  __src[18] = v13[18];
  __src[19] = v13[19];
  __src[20] = v13[20];
  __src[21] = v13[21];
  memcpy(__dst, __src, sizeof(__dst));
  outlined retain of Locale.Components((uint64_t *)__src);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v7 = static LocaleCache.cache + 16;
  int v8 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in LocaleCache.fixedComponents(_:)(v7, __dst, &v12);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  outlined release of Locale.Components((uint64_t *)__src);
  uint64_t v9 = v12;
  memcpy(v11, v13, 0x160uLL);
  outlined release of Locale.Components(v11);
  return v9;
}

Swift::String_optional __swiftcall _LocaleBridged.calendarIdentifierDisplayName(for:)( Foundation::Calendar::Identifier a1)
{
  char v2 = *(void **)(v1 + 16);
  id v3 = (const __CFString *)*MEMORY[0x189604FD8];
  char v14 = *(_BYTE *)a1;
  id v4 = (void *)specialized static Calendar._toNSCalendarIdentifier(_:)(&v14);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v5 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  uint64_t v6 = v2;
  swift_bridgeObjectRelease();
  uint64_t v7 = (__CFString *)CFLocaleCopyDisplayNameForPropertyValue(v6, v3, v5);

  swift_unknownObjectRelease();
  if (v7)
  {
    id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;
  }

  else
  {
    id v8 = 0LL;
    uint64_t v10 = 0LL;
  }

  uint64_t v11 = (uint64_t)v8;
  __int128 v12 = v10;
  result.value._unint64_t object = v12;
  result.value._uint64_t countAndFlagsBits = v11;
  return result;
}

uint64_t _LocaleBridged.languageCode.getter(void *a1)
{
  if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, *a1))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v4, 0, sizeof(v4));
  }

  outlined init with take of LocalePreferences?( (uint64_t)v4,  (uint64_t)v5,  &demangling cache variable for type metadata for Any?);
  if (v6)
  {
    else {
      return 0LL;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)v5);
    return 0LL;
  }

uint64_t _LocaleBridged.variantCode.getter(void *a1)
{
  if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, *a1))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v6, 0, sizeof(v6));
  }

  outlined init with take of LocalePreferences?( (uint64_t)v6,  (uint64_t)v7,  &demangling cache variable for type metadata for Any?);
  if (!v8)
  {
    outlined destroy of Any?((uint64_t)v7);
    return 0LL;
  }

  if ((swift_dynamicCast() & 1) == 0) {
    return 0LL;
  }
  uint64_t result = v4;
  uint64_t v3 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return result;
}

uint64_t _LocaleBridged.exemplarCharacterSet.getter@<X0>(void *a1@<X8>)
{
  if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, *MEMORY[0x189603AB8]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v4, 0, sizeof(v4));
  }

  outlined init with take of LocalePreferences?( (uint64_t)v4,  (uint64_t)v5,  &demangling cache variable for type metadata for Any?);
  if (!v6)
  {
    uint64_t result = outlined destroy of Any?((uint64_t)v5);
    goto LABEL_8;
  }

  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
LABEL_8:
  }
    *a1 = 0LL;
  return result;
}

uint64_t _LocaleBridged.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, *MEMORY[0x189603A78]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v8, 0, sizeof(v8));
  }

  outlined init with take of LocalePreferences?( (uint64_t)v8,  (uint64_t)&v9,  &demangling cache variable for type metadata for Any?);
  if (v10)
  {
    uint64_t result = swift_dynamicCast();
    if ((result & 1) != 0)
    {
      __int128 v4 = v7;
      goto LABEL_11;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v9);
  }

  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v5 = static CalendarCache.cache + 16;
  uint64_t v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.fixed(_:)(v5, 0LL, &v9);
  os_unfair_lock_unlock(v6);
  uint64_t result = swift_release_n();
  __int128 v4 = v9;
LABEL_11:
  *a1 = v4;
  return result;
}

void _LocaleBridged.calendarIdentifier.getter(char *a1@<X8>)
{
  id v3 = objc_msgSend(*(id *)(v1 + 16), sel_calendarIdentifier);
  if (!v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    id v3 = (id)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }

  static Calendar._fromNSCalendarIdentifier(_:)(v3, &v5);

  char v4 = v5;
  if (v5 == 16) {
    char v4 = 0;
  }
  *a1 = v4;
}

id _LocaleBridged.usesMetricSystem.getter()
{
  if (objc_msgSend(*(id *)(v0 + 16), sel_objectForKey_, *MEMORY[0x189603B28]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v4, 0, sizeof(v4));
  }

  outlined init with take of LocalePreferences?( (uint64_t)v4,  (uint64_t)v5,  &demangling cache variable for type metadata for Any?);
  if (!v6)
  {
    outlined destroy of Any?((uint64_t)v5);
    return 0LL;
  }

  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0LL;
  }
  id v1 = objc_msgSend(v3, sel_BOOLValue);

  return v1;
}

uint64_t _LocaleBridged.measurementSystem.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 296))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.currency.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 304))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.numberingSystem.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 312))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.availableNumberingSystems.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v11);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v11 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 320))(ObjectType, v7);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t _LocaleBridged.firstDayOfWeek.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 328))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.weekendRange.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 336))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.language.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 352))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.minimumDaysInFirstWeek.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v11);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v11 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 344))(ObjectType, v7);
  swift_unknownObjectRelease();
  return v9;
}

Swift::String __swiftcall _LocaleBridged.identifier(_:)(Foundation::Locale::IdentifierType a1)
{
  char v2 = *(_BYTE *)a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v3 = (os_unfair_lock_s *)static LocaleCache.cache;
  id v4 = *(void **)(v1 + 16);
  swift_retain();
  id v5 = objc_msgSend(v4, sel_localeIdentifier);
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  swift_retain();
  os_unfair_lock_lock(v3 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v3[4], (uint64_t)v6, v8, &v17);
  os_unfair_lock_unlock(v3 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v9 = *((void *)&v17 + 1);
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v17) = v2;
  uint64_t v11 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v9 + 416))(&v17, ObjectType, v9);
  uint64_t v13 = v12;
  swift_unknownObjectRelease();
  uint64_t v14 = v11;
  uint64_t v15 = v13;
  result._unint64_t object = v15;
  result._uint64_t countAndFlagsBits = v14;
  return result;
}

uint64_t _LocaleBridged.hourCycle.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 360))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.collation.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 368))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.region.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 376))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.timeZone.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 384))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.subdivision.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 392))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.variant.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 400))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.temperatureUnit.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  char v2 = *(void **)(v0 + 16);
  swift_retain();
  id v3 = objc_msgSend(v2, sel_localeIdentifier);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v7 = *((void *)&v10 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 408))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for _LocaleBridged()
{
  return objc_opt_self();
}

void protocol witness for _LocaleProtocol.init(identifier:prefs:) in conformance _LocaleBridged()
{
}

void protocol witness for _LocaleProtocol.init(name:prefs:disableBundleMatching:) in conformance _LocaleBridged()
{
}

void protocol witness for _LocaleProtocol.init(components:) in conformance _LocaleBridged()
{
}

id protocol witness for _LocaleProtocol.identifier.getter in conformance _LocaleBridged()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_localeIdentifier);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged( a1,  a2,  a3,  a4,  MEMORY[0x189603AC8]);
}

id protocol witness for _LocaleProtocol.languageCodeDisplayName(for:) in conformance _LocaleBridged( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged( a1,  a2,  a3,  a4,  MEMORY[0x189603AD0]);
}

id protocol witness for _LocaleProtocol.countryCodeDisplayName(for:) in conformance _LocaleBridged( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged( a1,  a2,  a3,  a4,  MEMORY[0x189603A98]);
}

id protocol witness for _LocaleProtocol.scriptCodeDisplayName(for:) in conformance _LocaleBridged( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged( a1,  a2,  a3,  a4,  MEMORY[0x189603B08]);
}

id protocol witness for _LocaleProtocol.variantCodeDisplayName(for:) in conformance _LocaleBridged( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged( a1,  a2,  a3,  a4,  MEMORY[0x189603B30]);
}

id protocol witness for _LocaleProtocol.currencyCodeDisplayName(for:) in conformance _LocaleBridged( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged( a1,  a2,  a3,  a4,  MEMORY[0x189603AA0]);
}

id protocol witness for _LocaleProtocol.currencySymbolDisplayName(for:) in conformance _LocaleBridged( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged( a1,  a2,  a3,  a4,  MEMORY[0x189603AA8]);
}

id protocol witness for _LocaleProtocol.collationIdentifierDisplayName(for:) in conformance _LocaleBridged( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged( a1,  a2,  a3,  a4,  MEMORY[0x189603A88]);
}

id protocol witness for _LocaleProtocol.collatorIdentifierDisplayName(for:) in conformance _LocaleBridged( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged( a1,  a2,  a3,  a4,  MEMORY[0x189603A90]);
}

id protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = objc_msgSend(*(id *)(v5 + 16), sel_displayNameForKey_value_, *a5, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (!v6) {
    return 0LL;
  }
  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v7;
}

uint64_t protocol witness for _LocaleProtocol.languageCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x189603AD0]);
}

uint64_t protocol witness for _LocaleProtocol.scriptCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x189603B08]);
}

uint64_t protocol witness for _LocaleProtocol.variantCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.variantCode.getter(MEMORY[0x189603B30]);
}

uint64_t protocol witness for _LocaleProtocol.regionCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.variantCode.getter(MEMORY[0x189603A98]);
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifier.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x189603A88]);
}

uint64_t protocol witness for _LocaleProtocol.decimalSeparator.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x189603AB0]);
}

uint64_t protocol witness for _LocaleProtocol.groupingSeparator.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x189603AC0]);
}

uint64_t protocol witness for _LocaleProtocol.currencySymbol.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x189603AA8]);
}

uint64_t protocol witness for _LocaleProtocol.currencyCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x189603AA0]);
}

uint64_t protocol witness for _LocaleProtocol.collatorIdentifier.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x189603A90]);
}

uint64_t protocol witness for _LocaleProtocol.quotationBeginDelimiter.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x189603AF8]);
}

uint64_t protocol witness for _LocaleProtocol.quotationEndDelimiter.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x189603B00]);
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationBeginDelimiter.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x189603A68]);
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationEndDelimiter.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x189603A70]);
}

uint64_t protocol witness for _LocaleProtocol.prefs.getter in conformance _LocaleBridged@<X0>( uint64_t a1@<X8>)
{
  return outlined init with take of LocalePreferences?( (uint64_t)v3,  a1,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
}

uint64_t protocol witness for _LocaleProtocol.bridgeToNSLocale() in conformance _LocaleBridged()
{
  return v2;
}

id protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _LocaleBridged()
{
  id v1 = objc_msgSend(*(id *)(*(void *)v0 + 16), sel_debugDescription);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

unint64_t instantiation function for generic protocol witness table for _LocaleBridged(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _LocaleBridged and conformance _LocaleBridged();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _LocaleBridged and conformance _LocaleBridged()
{
  unint64_t result = lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged;
  if (!lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged)
  {
    uint64_t v1 = type metadata accessor for _LocaleBridged();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _LocaleBridged, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged);
  }

  return result;
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else
    {
      unint64_t v2 = *(void *)(*(void *)v1 + 16LL);
      BOOL v3 = v2 >= result;
      unint64_t result = v2 - result;
      if (v3) {
        return (unint64_t)specialized Array.replaceSubrange<A>(_:with:)(result, v2);
      }
    }

    __break(1u);
  }

  return result;
}

{
  void *v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  if (result)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else
    {
      unint64_t v2 = v1[1];
      if ((v2 & 0x2000000000000000LL) != 0) {
        BOOL v3 = HIBYTE(v2) & 0xF;
      }
      else {
        BOOL v3 = *v1 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t result = String.index(_:offsetBy:limitedBy:)();
      if ((v4 & 1) != 0) {
        goto LABEL_12;
      }
      if (4 * v3 >= result >> 14) {
        return String.removeSubrange(_:)();
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
  }

  return result;
}

uint64_t specialized static JSONReference.number<A, B>(from:with:for:_:)( __int128 *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if ((~*(void *)&a7 & 0x7FF0000000000000LL) != 0)
  {
    uint64_t v20 = Double.description.getter();
    uint64_t v22 = v21;
    uint64_t v35 = v21;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = 12334LL;
    v23._unint64_t object = (void *)0xE200000000000000LL;
    Swift::Bool v24 = String.hasSuffix(_:)(v23);
    swift_bridgeObjectRelease();
    if (v24)
    {
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      uint64_t v22 = v35;
    }

    type metadata accessor for JSONReference();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v20;
    *(void *)(v19 + 24) = v22;
    *(_BYTE *)(v19 + 32) = 1;
  }

  else
  {
    outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(a1, &v36);
    uint64_t v13 = *((void *)&v36 + 1);
    if (*((void *)&v36 + 1))
    {
      uint64_t v15 = v37;
      uint64_t v14 = v38;
      uint64_t v17 = v39;
      uint64_t v16 = v40;
      type metadata accessor for JSONReference();
      if (a7 == INFINITY)
      {
        uint64_t v18 = v36;
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = v18;
        *(void *)(v19 + 24) = v13;
        *(_BYTE *)(v19 + 32) = 0;
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v27 = swift_allocObject();
        uint64_t v19 = v27;
        if (a7 == -INFINITY)
        {
          *(void *)(v27 + 16) = v15;
          *(void *)(v27 + 24) = v14;
        }

        else
        {
          *(void *)(v27 + 16) = v17;
          *(void *)(v27 + 24) = v16;
        }

        *(_BYTE *)(v27 + 32) = 0;
        swift_bridgeObjectRetain();
      }
    }

    else
    {
      if (a6 == -1)
      {
        _CodingPathNode.path.getter(a2);
      }

      else
      {
        outlined copy of _CodingKey(a3, a4, a5, a6);
        _CodingPathNode.path.getter(a2);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = a3;
        *(void *)(v26 + 24) = a4;
        *(void *)(v26 + 32) = a5;
        *(_BYTE *)(v26 + 40) = a6;
        specialized Array.append<A>(contentsOf:)(inited);
      }

      uint64_t v28 = type metadata accessor for EncodingError();
      uint64_t v29 = swift_allocError();
      uint64_t v31 = v30;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
      *(void *)(v31 + 24) = MEMORY[0x189618560];
      *(double *)uint64_t v31 = a7;
      _StringGuts.grow(_:)(40LL);
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = Double.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._unint64_t object = (void *)0x80000001839CB190LL;
      v33._uint64_t countAndFlagsBits = 0xD000000000000012LL;
      String.append(_:)(v33);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104LL))( v31,  *MEMORY[0x1896193B8],  v28);
      uint64_t v19 = v29;
      swift_willThrow();
    }
  }

  return v19;
}

uint64_t specialized static JSONReference.number<A, B>(from:with:for:_:)( __int128 *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  unint64_t v47 = a2;
  uint64_t v46 = a5;
  uint64_t v55 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  __int128 v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v46 - v18;
  if ((~*(void *)&a6 & 0x7FF0000000000000LL) != 0)
  {
    uint64_t v27 = Double.description.getter();
    unint64_t v29 = v28;
    unint64_t v48 = v27;
    unint64_t v49 = v28;
    swift_bridgeObjectRetain();
    v30._uint64_t countAndFlagsBits = 12334LL;
    v30._unint64_t object = (void *)0xE200000000000000LL;
    Swift::Bool v31 = String.hasSuffix(_:)(v30);
    swift_bridgeObjectRelease();
    if (v31)
    {
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      uint64_t v27 = v48;
      unint64_t v29 = v49;
    }

    type metadata accessor for JSONReference();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v27;
    *(void *)(v26 + 24) = v29;
    *(_BYTE *)(v26 + 32) = 1;
  }

  else
  {
    outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(a1, &v50);
    uint64_t v20 = *((void *)&v50 + 1);
    if (*((void *)&v50 + 1))
    {
      uint64_t v22 = v51;
      uint64_t v21 = v52;
      uint64_t v24 = v53;
      uint64_t v23 = v54;
      type metadata accessor for JSONReference();
      if (a6 == INFINITY)
      {
        uint64_t v25 = v50;
        uint64_t v26 = swift_allocObject();
        *(void *)(v26 + 16) = v25;
        *(void *)(v26 + 24) = v20;
        *(_BYTE *)(v26 + 32) = 0;
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v34 = swift_allocObject();
        uint64_t v26 = v34;
        if (a6 == -INFINITY)
        {
          *(void *)(v34 + 16) = v22;
          *(void *)(v34 + 24) = v21;
        }

        else
        {
          *(void *)(v34 + 16) = v24;
          *(void *)(v34 + 24) = v23;
        }

        *(_BYTE *)(v34 + 32) = 0;
        swift_bridgeObjectRetain();
      }
    }

    else
    {
      Swift::String v32 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
      v32(v19, a3, v13);
      v32(v17, (uint64_t)v19, v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v17, 1LL, a4) == 1)
      {
        Swift::String v33 = *(void (**)(char *, uint64_t))(v14 + 8);
        v33(v17, v13);
        _CodingPathNode.path.getter(v47);
        v33(v19, v13);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v17, a4);
        uint64_t v35 = _CodingPathNode.path.getter(v47);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_183720D90;
        uint64_t v37 = v46;
        *(void *)(inited + 56) = a4;
        *(void *)(inited + 64) = v37;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v12, a4);
        unint64_t v48 = v35;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a4);
      }

      uint64_t v39 = type metadata accessor for EncodingError();
      uint64_t v40 = swift_allocError();
      uint64_t v42 = v41;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
      *(void *)(v42 + 24) = MEMORY[0x189618560];
      *(double *)uint64_t v42 = a6;
      unint64_t v48 = 0LL;
      unint64_t v49 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(40LL);
      swift_bridgeObjectRelease();
      unint64_t v48 = 0xD000000000000018LL;
      unint64_t v49 = 0x80000001839CB1B0LL;
      v43._uint64_t countAndFlagsBits = Double.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      v44._unint64_t object = (void *)0x80000001839CB190LL;
      v44._uint64_t countAndFlagsBits = 0xD000000000000012LL;
      String.append(_:)(v44);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104LL))( v42,  *MEMORY[0x1896193B8],  v39);
      uint64_t v26 = v40;
      swift_willThrow();
    }
  }

  return v26;
}

uint64_t specialized static JSONReference.number<A, B>(from:with:for:_:)( __int128 *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, float a7)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if ((~LODWORD(a7) & 0x7F800000) != 0)
  {
    uint64_t v20 = Float.description.getter();
    uint64_t v22 = v21;
    uint64_t v35 = v21;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = 12334LL;
    v23._unint64_t object = (void *)0xE200000000000000LL;
    Swift::Bool v24 = String.hasSuffix(_:)(v23);
    swift_bridgeObjectRelease();
    if (v24)
    {
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      uint64_t v22 = v35;
    }

    type metadata accessor for JSONReference();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v20;
    *(void *)(v19 + 24) = v22;
    *(_BYTE *)(v19 + 32) = 1;
  }

  else
  {
    outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(a1, &v36);
    uint64_t v13 = *((void *)&v36 + 1);
    if (*((void *)&v36 + 1))
    {
      uint64_t v15 = v37;
      uint64_t v14 = v38;
      uint64_t v17 = v39;
      uint64_t v16 = v40;
      type metadata accessor for JSONReference();
      if (a7 == INFINITY)
      {
        uint64_t v18 = v36;
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = v18;
        *(void *)(v19 + 24) = v13;
        *(_BYTE *)(v19 + 32) = 0;
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v27 = swift_allocObject();
        uint64_t v19 = v27;
        if (a7 == -INFINITY)
        {
          *(void *)(v27 + 16) = v15;
          *(void *)(v27 + 24) = v14;
        }

        else
        {
          *(void *)(v27 + 16) = v17;
          *(void *)(v27 + 24) = v16;
        }

        *(_BYTE *)(v27 + 32) = 0;
        swift_bridgeObjectRetain();
      }
    }

    else
    {
      if (a6 == -1)
      {
        _CodingPathNode.path.getter(a2);
      }

      else
      {
        outlined copy of _CodingKey(a3, a4, a5, a6);
        _CodingPathNode.path.getter(a2);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v26 = swift_allocObject();
        *(void *)(inited + 32) = v26;
        *(void *)(v26 + 16) = a3;
        *(void *)(v26 + 24) = a4;
        *(void *)(v26 + 32) = a5;
        *(_BYTE *)(v26 + 40) = a6;
        specialized Array.append<A>(contentsOf:)(inited);
      }

      uint64_t v28 = type metadata accessor for EncodingError();
      uint64_t v29 = swift_allocError();
      uint64_t v31 = v30;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
      *(void *)(v31 + 24) = MEMORY[0x189618620];
      *(float *)uint64_t v31 = a7;
      _StringGuts.grow(_:)(40LL);
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = Float.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._unint64_t object = (void *)0x80000001839CB190LL;
      v33._uint64_t countAndFlagsBits = 0xD000000000000012LL;
      String.append(_:)(v33);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104LL))( v31,  *MEMORY[0x1896193B8],  v28);
      uint64_t v19 = v29;
      swift_willThrow();
    }
  }

  return v19;
}

uint64_t specialized static JSONReference.number<A, B>(from:with:for:_:)( __int128 *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  unint64_t v47 = a2;
  uint64_t v46 = a5;
  uint64_t v55 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  __int128 v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v46 - v18;
  if ((~LODWORD(a6) & 0x7F800000) != 0)
  {
    uint64_t v27 = Float.description.getter();
    unint64_t v29 = v28;
    unint64_t v48 = v27;
    unint64_t v49 = v28;
    swift_bridgeObjectRetain();
    v30._uint64_t countAndFlagsBits = 12334LL;
    v30._unint64_t object = (void *)0xE200000000000000LL;
    Swift::Bool v31 = String.hasSuffix(_:)(v30);
    swift_bridgeObjectRelease();
    if (v31)
    {
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      uint64_t v27 = v48;
      unint64_t v29 = v49;
    }

    type metadata accessor for JSONReference();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v27;
    *(void *)(v26 + 24) = v29;
    *(_BYTE *)(v26 + 32) = 1;
  }

  else
  {
    outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(a1, &v50);
    uint64_t v20 = *((void *)&v50 + 1);
    if (*((void *)&v50 + 1))
    {
      uint64_t v22 = v51;
      uint64_t v21 = v52;
      uint64_t v24 = v53;
      uint64_t v23 = v54;
      type metadata accessor for JSONReference();
      if (a6 == INFINITY)
      {
        uint64_t v25 = v50;
        uint64_t v26 = swift_allocObject();
        *(void *)(v26 + 16) = v25;
        *(void *)(v26 + 24) = v20;
        *(_BYTE *)(v26 + 32) = 0;
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v34 = swift_allocObject();
        uint64_t v26 = v34;
        if (a6 == -INFINITY)
        {
          *(void *)(v34 + 16) = v22;
          *(void *)(v34 + 24) = v21;
        }

        else
        {
          *(void *)(v34 + 16) = v24;
          *(void *)(v34 + 24) = v23;
        }

        *(_BYTE *)(v34 + 32) = 0;
        swift_bridgeObjectRetain();
      }
    }

    else
    {
      Swift::String v32 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
      v32(v19, a3, v13);
      v32(v17, (uint64_t)v19, v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v17, 1LL, a4) == 1)
      {
        Swift::String v33 = *(void (**)(char *, uint64_t))(v14 + 8);
        v33(v17, v13);
        _CodingPathNode.path.getter(v47);
        v33(v19, v13);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v17, a4);
        uint64_t v35 = _CodingPathNode.path.getter(v47);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_183720D90;
        uint64_t v37 = v46;
        *(void *)(inited + 56) = a4;
        *(void *)(inited + 64) = v37;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v12, a4);
        unint64_t v48 = v35;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a4);
      }

      uint64_t v39 = type metadata accessor for EncodingError();
      uint64_t v40 = swift_allocError();
      uint64_t v42 = v41;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
      *(void *)(v42 + 24) = MEMORY[0x189618620];
      *(float *)uint64_t v42 = a6;
      unint64_t v48 = 0LL;
      unint64_t v49 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(40LL);
      swift_bridgeObjectRelease();
      unint64_t v48 = 0xD000000000000017LL;
      unint64_t v49 = 0x80000001839CB170LL;
      v43._uint64_t countAndFlagsBits = Float.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      v44._unint64_t object = (void *)0x80000001839CB190LL;
      v44._uint64_t countAndFlagsBits = 0xD000000000000012LL;
      String.append(_:)(v44);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104LL))( v42,  *MEMORY[0x1896193B8],  v39);
      uint64_t v26 = v40;
      swift_willThrow();
    }
  }

  return v26;
}

uint64_t JSONEncoder.OutputFormatting.rawValue.getter()
{
  return *(void *)v0;
}

Foundation::JSONEncoder::OutputFormatting __swiftcall JSONEncoder.OutputFormatting.init(rawValue:)( Foundation::JSONEncoder::OutputFormatting rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static JSONEncoder.OutputFormatting.prettyPrinted.getter(void *a1@<X8>)
{
  *a1 = 1LL;
}

void static JSONEncoder.OutputFormatting.sortedKeys.getter(void *a1@<X8>)
{
  *a1 = 2LL;
}

void static JSONEncoder.OutputFormatting.withoutEscapingSlashes.getter(void *a1@<X8>)
{
  *a1 = 8LL;
}

uint64_t JSONEncoder.outputFormatting.getter@<X0>(void *a1@<X8>)
{
  BOOL v3 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

uint64_t (*JSONEncoder.outputFormatting.modify(void *a1))(void *a1)
{
  BOOL v3 = *(os_unfair_lock_s **)(v1 + 136);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(void *)(v1 + 16);
  return PropertyListEncoder.outputFormat.modify;
}

uint64_t JSONEncoder.outputFormatting.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  BOOL v3 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(void *)(v1 + 16) = v2;
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

uint64_t JSONEncoder.dateEncodingStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  BOOL v3 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  id v4 = *(void **)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  char v6 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 16) = v6;
  swift_retain();
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v6);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void (*JSONEncoder.dateEncodingStrategy.modify(void *a1))(void ***a1)
{
  BOOL v3 = malloc(0x28uLL);
  *a1 = v3;
  id v4 = *(os_unfair_lock_s **)(v1 + 136);
  v3[3] = v1;
  v3[4] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = *(void **)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  *BOOL v3 = v5;
  v3[1] = v6;
  char v7 = *(_BYTE *)(v1 + 40);
  *((_BYTE *)v3 + 16) = v7;
  outlined copy of JSONEncoder.DateEncodingStrategy(v5, v6, v7);
  return JSONEncoder.dateEncodingStrategy.modify;
}

void JSONEncoder.dateEncodingStrategy.modify(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[3];
  BOOL v3 = (os_unfair_lock_s *)(*a1)[4];
  id v4 = **a1;
  uint64_t v5 = (uint64_t)v1[1];
  uint64_t v6 = (void *)*((void *)v2 + 3);
  uint64_t v7 = *((void *)v2 + 4);
  char v8 = *((_BYTE *)v1 + 16);
  *((void *)v2 + 3) = v4;
  *((void *)v2 + 4) = v5;
  char v9 = *((_BYTE *)v2 + 40);
  *((_BYTE *)v2 + 40) = v8;
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v8);
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v9);
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  outlined consume of JSONEncoder.DateEncodingStrategy(*v1, (uint64_t)v1[1], *((_BYTE *)v1 + 16));
  free(v1);
}

uint64_t JSONEncoder.dateEncodingStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((_BYTE *)a1 + 16);
  uint64_t v5 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  swift_release();
  uint64_t v6 = *(void **)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + 32);
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v3;
  char v8 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(v1 + 40) = v4;
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v8);
  swift_retain();
  os_unfair_lock_unlock(v5 + 4);
  return swift_release();
}

uint64_t JSONEncoder.dataEncodingStrategy.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  unint64_t v5 = v1[6];
  unint64_t v4 = v1[7];
  *a1 = v5;
  a1[1] = v4;
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

unint64_t (*JSONEncoder.dataEncodingStrategy.modify( unint64_t *a1))(unint64_t *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[17];
  a1[2] = (unint64_t)v1;
  a1[3] = (unint64_t)v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  unint64_t v4 = v1[6];
  unint64_t v5 = v1[7];
  *a1 = v4;
  a1[1] = v5;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v4);
  return JSONEncoder.dataEncodingStrategy.modify;
}

unint64_t JSONEncoder.dataEncodingStrategy.modify(unint64_t *a1)
{
  unint64_t v1 = a1[2];
  uint64_t v2 = (os_unfair_lock_s *)a1[3];
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = *a1;
  *(void *)(v1 + 56) = v4;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v5);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  return outlined consume of JSONEncoder.KeyEncodingStrategy(v3);
}

uint64_t JSONEncoder.dataEncodingStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  unint64_t v5 = v1[6];
  v1[6] = v2;
  v1[7] = v3;
  outlined consume of JSONEncoder.KeyEncodingStrategy(v5);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  return swift_release();
}

uint64_t key path setter for JSONEncoder.nonConformingFloatEncodingStrategy : JSONEncoder( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = *a2;
  v10[0] = *a1;
  v10[1] = v2;
  void v10[2] = v3;
  v10[3] = v4;
  void v10[4] = v5;
  v10[5] = v6;
  char v8 = *(uint64_t (**)(uint64_t *))(*(void *)v7 + 176LL);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v10[0], v2);
  return v8(v10);
}

uint64_t JSONEncoder.nonConformingFloatEncodingStrategy.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = v1[8];
  uint64_t v5 = v1[9];
  uint64_t v6 = v1[10];
  uint64_t v7 = v1[11];
  uint64_t v9 = v1[12];
  uint64_t v8 = v1[13];
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v9;
  a1[5] = v8;
  swift_retain();
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v4, v5);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void (*JSONEncoder.nonConformingFloatEncodingStrategy.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = (os_unfair_lock_s *)v1[17];
  v3[6] = v1;
  v3[7] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = v1[8];
  uint64_t v6 = v1[9];
  uint64_t v7 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t v9 = v1[12];
  uint64_t v10 = v1[13];
  *uint64_t v3 = v5;
  v3[1] = v6;
  v3[2] = v7;
  v3[3] = v8;
  v3[4] = v9;
  v3[5] = v10;
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v5, v6);
  return JSONEncoder.nonConformingFloatEncodingStrategy.modify;
}

void JSONEncoder.nonConformingFloatEncodingStrategy.modify(uint64_t **a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (void *)(*a1)[6];
  uint64_t v3 = (os_unfair_lock_s *)(*a1)[7];
  uint64_t v4 = **a1;
  uint64_t v5 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v2[8];
  uint64_t v11 = v2[9];
  v2[8] = v4;
  v2[9] = v5;
  v2[10] = v6;
  v2[11] = v7;
  v2[12] = v8;
  v2[13] = v9;
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v4, v5);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v10, v11);
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(*v1, v1[1]);
  free(v1);
}

uint64_t JSONEncoder.nonConformingFloatEncodingStrategy.setter(__int128 *a1)
{
  uint64_t v2 = *((void *)a1 + 2);
  __int128 v8 = *(__int128 *)((char *)a1 + 24);
  __int128 v9 = *a1;
  uint64_t v3 = *((void *)a1 + 5);
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  *(_OWORD *)(v1 + 64) = v9;
  *(void *)(v1 + 80) = v2;
  *(_OWORD *)(v1 + 88) = v8;
  *(void *)(v1 + 104) = v3;
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v5, v6);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  return swift_release();
}

uint64_t JSONEncoder.keyEncodingStrategy.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  unint64_t v5 = v1[14];
  unint64_t v4 = v1[15];
  *a1 = v5;
  a1[1] = v4;
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

unint64_t (*JSONEncoder.keyEncodingStrategy.modify( unint64_t *a1))(unint64_t *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[17];
  a1[2] = (unint64_t)v1;
  a1[3] = (unint64_t)v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  unint64_t v4 = v1[14];
  unint64_t v5 = v1[15];
  *a1 = v4;
  a1[1] = v5;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v4);
  return JSONEncoder.keyEncodingStrategy.modify;
}

unint64_t JSONEncoder.keyEncodingStrategy.modify(unint64_t *a1)
{
  unint64_t v1 = a1[2];
  uint64_t v2 = (os_unfair_lock_s *)a1[3];
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = *a1;
  *(void *)(v1 + 120) = v4;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v5);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  return outlined consume of JSONEncoder.KeyEncodingStrategy(v3);
}

uint64_t JSONEncoder.keyEncodingStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  unint64_t v5 = v1[14];
  v1[14] = v2;
  v1[15] = v3;
  outlined consume of JSONEncoder.KeyEncodingStrategy(v5);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  return swift_release();
}

uint64_t JSONEncoder.userInfo.getter()
{
  unint64_t v1 = *(os_unfair_lock_s **)(v0 + 136);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t (*JSONEncoder.userInfo.modify(void *a1))(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 136);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(void *)(v1 + 128);
  swift_bridgeObjectRetain();
  return JSONEncoder.userInfo.modify;
}

uint64_t JSONEncoder.userInfo.modify(void *a1)
{
  uint64_t v1 = (os_unfair_lock_s *)a1[2];
  *(void *)(a1[1] + 128LL) = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t JSONEncoder.userInfo.setter(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(void *)(v1 + 128) = a1;
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

uint64_t JSONEncoder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = 0LL;
  *(void *)(v0 + 32) = 0LL;
  *(void *)(v0 + 16) = 0LL;
  *(_BYTE *)(v0 + 40) = 2;
  *(void *)(v0 + 48) = 1LL;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  uint64_t v1 = MEMORY[0x18961AFF0];
  *(void *)(v0 + 120) = 0LL;
  *(void *)(v0 + 128) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)(v0 + 136) = v2;
  return v0;
}

uint64_t JSONEncoder.init()()
{
  *(void *)(v0 + 16) = 0LL;
  *(void *)(v0 + 24) = 0LL;
  *(void *)(v0 + 32) = 0LL;
  *(_BYTE *)(v0 + 40) = 2;
  *(void *)(v0 + 48) = 1LL;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  uint64_t v1 = MEMORY[0x18961AFF0];
  *(void *)(v0 + 120) = 0LL;
  *(void *)(v0 + 128) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)(v0 + 136) = v2;
  return v0;
}

void JSONEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(v3 + 32);
  unint64_t v5 = *(void *)(v3 + 48);
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = *(void *)(v3 + 88);
  uint64_t v23 = *(void **)(v3 + 24);
  uint64_t v24 = *(void *)(v3 + 80);
  uint64_t v8 = *(void *)(v3 + 96);
  uint64_t v22 = *(void *)(v3 + 56);
  uint64_t v25 = *(void *)(v3 + 104);
  uint64_t v26 = *(void *)(v3 + 72);
  unint64_t v9 = *(void *)(v3 + 112);
  uint64_t v27 = *(void *)(v3 + 120);
  uint64_t v28 = *(void *)(v3 + 16);
  uint64_t v33 = *(void *)(v3 + 128);
  char v10 = *(_BYTE *)(v3 + 40);
  type metadata accessor for __JSONEncoder();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 32) = v23;
  *(void *)(v11 + 40) = v4;
  *(_BYTE *)(v11 + 48) = v10;
  *(void *)(v11 + 56) = v5;
  *(void *)(v11 + 64) = v22;
  *(void *)(v11 + 72) = v6;
  *(void *)(v11 + 80) = v26;
  *(void *)(v11 + 88) = v24;
  *(void *)(v11 + 96) = v7;
  *(void *)(v11 + 104) = v8;
  *(void *)(v11 + 112) = v25;
  *(void *)(v11 + 120) = v9;
  *(void *)(v11 + 128) = v27;
  uint64_t v12 = MEMORY[0x18961AFE8];
  *(void *)(v11 + 136) = v33;
  *(void *)(v11 + 16) = v12;
  *(void *)(v11 + 24) = v28;
  *(_OWORD *)(v11 + 144) = xmmword_18372C9E0;
  outlined copy of JSONEncoder.DateEncodingStrategy(v23, v4, v10);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v6, v26);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v9);
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(a1, 0x8000000000000000LL, 0LL, 0LL, 0LL, 255, a2, a3);
  if (v30) {
    goto LABEL_2;
  }
  uint64_t v14 = v13;
  if (!v13)
  {
    uint64_t v16 = type metadata accessor for EncodingError();
    swift_allocError();
    uint64_t v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v18[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a2);
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    uint64_t v34 = 0x6576656C2D706F54LL;
    unint64_t v35 = 0xEA0000000000206CLL;
    v20._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._unint64_t object = (void *)0x80000001839CA930LL;
    v21._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v21);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v18,  *MEMORY[0x1896193B8],  v16);
    swift_willThrow();
LABEL_2:
    swift_release();
    return;
  }

  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 96LL))(&v34);
  char v15 = v34;
  uint64_t v34 = 0LL;
  LOBYTE(v35) = v15 & 1;
  BYTE1(v35) = (v15 & 2) != 0;
  BYTE2(v35) = (v15 & 8) != 0;
  __int128 v36 = xmmword_18372EE30;
  JSONWriter.serializeJSON(_:depth:)(v14);
  swift_release();
  swift_release();
}

uint64_t specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, void *a8)
{
  unint64_t v129 = a8;
  uint64_t v8 = a7;
  LODWORD(v133) = a6;
  uint64_t v132 = a5;
  uint64_t v131 = (char *)a4;
  uint64_t v11 = a1;
  uint64_t v12 = *(void *)(a7 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  char v15 = (char *)&v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v121 - v17;
  uint64_t v19 = MEMORY[0x1895F8858](v16);
  Swift::String v21 = (char *)&v121 - v20;
  MEMORY[0x1895F8858](v19);
  uint64_t v23 = (char *)&v121 - v22;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v23, v11, v8);
    swift_dynamicCast();
    uint64_t v24 = v151;
    unint64_t v25 = specialized __JSONEncoder.wrap<A>(_:for:_:)(a2, a3, (uint64_t)v131, v132, v133, *(double *)v135);
    if (!v24) {
      return v25;
    }
    return (uint64_t)v15;
  }

  Swift::Int v127 = v15;
  uint64_t v26 = (uint64_t)v18;
  unint64_t v128 = a2;
  char v15 = v131;
  uint64_t v27 = v132;
  char v28 = v133;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v21, v11, v8);
    swift_dynamicCast();
    __int128 v29 = *(_OWORD *)v135;
    char v15 = (char *)specialized __JSONEncoder.wrap<A>(_:for:_:)( *(uint64_t *)v135,  *(uint64_t *)&v135[8],  v128,  a3,  (unint64_t)v15,  v27,  v28);
    outlined consume of Data._Representation(v29, *((unint64_t *)&v29 + 1));
    return (uint64_t)v15;
  }

  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v26, v11, v8);
    swift_dynamicCast();
    Swift::Bool v31 = *(void **)v135;
    uint64_t v32 = URL.absoluteString.getter();
    uint64_t v34 = v33;

    swift_release();
    swift_release();
    type metadata accessor for JSONReference();
    char v15 = (char *)swift_allocObject();
    *((void *)v15 + 2) = v32;
    *((void *)v15 + 3) = v34;
    v15[32] = 0;
    return (uint64_t)v15;
  }

  uint64_t v35 = (uint64_t)v15;
  type metadata accessor for NSDecimal(0LL);
  if (!swift_dynamicCastMetatype())
  {
    if (swift_conformsToProtocol2()) {
      uint64_t v67 = v8;
    }
    else {
      uint64_t v67 = 0LL;
    }
    if (v67)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v127, v11, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Encodable]);
      swift_dynamicCast();
      char v15 = (char *)specialized __JSONEncoder.wrap<A>(_:for:_:)(*(uint64_t *)v135, v128, a3, (uint64_t)v15, v27, v133);
      swift_bridgeObjectRelease();
      return (uint64_t)v15;
    }

uint64_t __JSONEncoder.wrapGeneric<A, B>(_:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, __int128 *a7)
{
  uint64_t v133 = a7;
  uint64_t v131 = a6;
  uint64_t v132 = a5;
  uint64_t v7 = a4;
  uint64_t v10 = a1;
  uint64_t v11 = *(void *)(a4 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  uint64_t v17 = (char *)&v122 - v16;
  uint64_t v18 = MEMORY[0x1895F8858](v15);
  uint64_t v20 = (char *)&v122 - v19;
  MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)&v122 - v21;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v22, v10, v7);
    swift_dynamicCast();
    *(void *)int64_t v149 = *(void *)v136;
    uint64_t v23 = v152;
    unint64_t v24 = __JSONEncoder.wrap<A>(_:for:_:)((double *)v149, a2, a3, v132, (uint64_t)v133);
    if (!v23) {
      return v24;
    }
    return a2;
  }

  unint64_t v128 = v14;
  unint64_t v129 = a2;
  uint64_t v130 = a3;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v10, v7);
    swift_dynamicCast();
    __int128 v25 = *(_OWORD *)v136;
    a2 = __JSONEncoder.wrap<A>(_:for:_:)(*(uint64_t *)v136, *(uint64_t *)&v136[8], v129, v130, v132, (uint64_t)v133);
    outlined consume of Data._Representation(v25, *((unint64_t *)&v25 + 1));
    return a2;
  }

  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, v10, v7);
    swift_dynamicCast();
    uint64_t v27 = *(void **)v136;
    uint64_t v28 = URL.absoluteString.getter();
    uint64_t v30 = v29;

    swift_release();
    swift_release();
    type metadata accessor for JSONReference();
    a2 = swift_allocObject();
    *(void *)(a2 + 16) = v28;
    *(void *)(a2 + 24) = v30;
    *(_BYTE *)(a2 + 32) = 0;
    return a2;
  }

  type metadata accessor for NSDecimal(0LL);
  if (!swift_dynamicCastMetatype())
  {
    if (swift_conformsToProtocol2()) {
      uint64_t v65 = v7;
    }
    else {
      uint64_t v65 = 0LL;
    }
    if (v65)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v128, v10, v7);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Encodable]);
      swift_dynamicCast();
      a2 = __JSONEncoder.wrap<A>(_:for:_:)(*(uint64_t *)v136, v129, v130, v132, v133);
      swift_bridgeObjectRelease();
      return a2;
    }

void JSONEncoder.encode<A>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = *(void *)(v4 + 16);
  uint64_t v22 = *(void *)(v4 + 32);
  uint64_t v23 = *(void **)(v4 + 24);
  uint64_t v5 = *(void *)(v4 + 88);
  uint64_t v24 = *(void *)(v4 + 80);
  uint64_t v25 = *(void *)(v4 + 56);
  uint64_t v21 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(v4 + 104);
  uint64_t v26 = *(void *)(v4 + 96);
  uint64_t v27 = *(void *)(v4 + 72);
  unint64_t v20 = *(void *)(v4 + 48);
  unint64_t v7 = *(void *)(v4 + 112);
  uint64_t v28 = *(void *)(v4 + 120);
  uint64_t v8 = *(void *)(v4 + 128);
  char v9 = *(_BYTE *)(v4 + 40);
  type metadata accessor for __JSONEncoder();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 32) = v23;
  *(void *)(v10 + 40) = v22;
  *(_BYTE *)(v10 + 48) = v9;
  *(void *)(v10 + 56) = v20;
  *(void *)(v10 + 64) = v25;
  *(void *)(v10 + 72) = v21;
  *(void *)(v10 + 80) = v27;
  *(void *)(v10 + 88) = v24;
  *(void *)(v10 + 96) = v5;
  *(void *)(v10 + 104) = v26;
  *(void *)(v10 + 112) = v6;
  *(void *)(v10 + 120) = v7;
  *(void *)(v10 + 128) = v28;
  *(void *)(v10 + 136) = v8;
  *(void *)(v10 + 16) = MEMORY[0x18961AFE8];
  *(void *)(v10 + 24) = v29;
  *(_OWORD *)(v10 + 144) = xmmword_18372C9E0;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  outlined copy of JSONEncoder.DateEncodingStrategy(v23, v22, v9);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v20);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v21, v27);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v7);
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized __JSONEncoder._wrapGeneric<A>(_:for:_:)( (void (*)(void))partial apply for specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:configuration:for:_:),  (uint64_t)v35,  0x8000000000000000LL,  0LL,  0LL,  0LL,  255);
  if (v32) {
    goto LABEL_2;
  }
  uint64_t v12 = v11;
  if (!v11)
  {
    uint64_t v14 = type metadata accessor for EncodingError();
    swift_allocError();
    uint64_t v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v16[3] = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a3);
    uint64_t v40 = 0LL;
    unint64_t v41 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    uint64_t v40 = 0x6576656C2D706F54LL;
    unint64_t v41 = 0xEA0000000000206CLL;
    v18._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._unint64_t object = (void *)0x80000001839CA930LL;
    v19._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v19);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x1896193B8],  v14);
    swift_willThrow();
LABEL_2:
    swift_release();
    return;
  }

  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 96LL))(&v40);
  char v13 = v40;
  uint64_t v40 = 0LL;
  LOBYTE(v41) = v13 & 1;
  BYTE1(v41) = (v13 & 2) != 0;
  BYTE2(v41) = (v13 & 8) != 0;
  __int128 v42 = xmmword_18372EE30;
  JSONWriter.serializeJSON(_:depth:)(v12);
  swift_release();
  swift_release();
}

uint64_t JSONEncoder.encode<A, B>(_:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v19 - v15;
  (*(void (**)(uint64_t, uint64_t))(a6 + 16))(a4, a6);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)v7 + 280LL))(a1, v16, a3, a5);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  return v17;
}

uint64_t JSONEncoder.deinit()
{
  unint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  unint64_t v4 = *(void *)(v0 + 112);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + 24), *(void *)(v0 + 32), *(_BYTE *)(v0 + 40));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v1);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v2, v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v4);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t JSONEncoder.__deallocating_deinit()
{
  unint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  unint64_t v4 = *(void *)(v0 + 112);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + 24), *(void *)(v0 + 32), *(_BYTE *)(v0 + 40));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v1);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v2, v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v4);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

BOOL __JSONEncoder.canEncodeNewValue.getter()
{
  unint64_t v1 = *(void *)(v0 + 16);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return v2 == *(void *)(v0 + 152);
}

uint64_t __JSONEncoder.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3 + 2;
  if (((*(uint64_t (**)(void))(*v3 + 208))() & 1) != 0)
  {
    type metadata accessor for JSONReference();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = MEMORY[0x18961AFF0];
    *(void *)(v7 + 24) = 0LL;
    *(_BYTE *)(v7 + 32) = 4;
    uint64_t v8 = swift_retain();
    MEMORY[0x186E1BAC0](v8);
    if (*(void *)((*v6 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*v6 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    goto LABEL_13;
  }

  uint64_t v10 = *v6;
  if (!((unint64_t)*v6 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_7;
    }
LABEL_15:
    unint64_t v12 = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_16;
  }

  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  if (!v11) {
    goto LABEL_15;
  }
LABEL_7:
  unint64_t v12 = v11 - 1;
  if (__OFSUB__(v11, 1LL))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if ((v10 & 0xC000000000000001LL) == 0)
  {
    if ((v12 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (v12 < *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      uint64_t v13 = *(void *)(v10 + 8 * v12 + 32);
      swift_retain();
      goto LABEL_12;
    }

    __break(1u);
    goto LABEL_20;
  }

uint64_t __JSONEncoder.unkeyedContainer()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  unint64_t v4 = v1 + 2;
  if (((*(uint64_t (**)(void))(*v1 + 208LL))() & 1) != 0)
  {
    type metadata accessor for JSONReference();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = MEMORY[0x18961AFE8];
    *(void *)(v5 + 24) = 0LL;
    *(_BYTE *)(v5 + 32) = 3;
    uint64_t v6 = swift_retain();
    MEMORY[0x186E1BAC0](v6);
    if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    goto LABEL_13;
  }

  uint64_t v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_7;
    }
LABEL_15:
    unint64_t v9 = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_16;
  }

  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8) {
    goto LABEL_15;
  }
LABEL_7:
  unint64_t v9 = v8 - 1;
  if (__OFSUB__(v8, 1LL))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if ((v7 & 0xC000000000000001LL) == 0)
  {
    if ((v9 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (v9 < *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      uint64_t v5 = *(void *)(v7 + 8 * v9 + 32);
      swift_retain();
      goto LABEL_12;
    }

    __break(1u);
    goto LABEL_20;
  }

uint64_t __JSONEncoder.__deallocating_deinit()
{
  unint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  unint64_t v4 = *(void *)(v0 + 120);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + 32), *(void *)(v0 + 40), *(_BYTE *)(v0 + 48));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v1);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v2, v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v4);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Encoder.userInfo.getter in conformance __JSONEncoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance __JSONEncoder( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __JSONEncoder.container<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance __JSONEncoder@<X0>(void *a1@<X8>)
{
  return __JSONEncoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance __JSONEncoder@<X0>( void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for __JSONEncoder();
  a1[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder,  (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder,  (uint64_t)&protocol conformance descriptor for __JSONEncoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t JSONReference.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t _JSONKeyedEncodingContainer.codingPath.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return _CodingPathNode.path.getter(a3);
}

uint64_t _JSONKeyedEncodingContainer._converted(_:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void (*v4)(void *__return_ptr, uint64_t);
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  __int128 v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void v38[7];
  v38[5] = *MEMORY[0x1895F89C0];
  unint64_t v4 = *(void (**)(void *__return_ptr, uint64_t))(a2 + 120);
  if (v4)
  {
    if (v4 == (void (*)(void *__return_ptr, uint64_t))1)
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      uint64_t v5 = dispatch thunk of CodingKey.stringValue.getter();
      uint64_t v7 = specialized static JSONEncoder.KeyEncodingStrategy._convertToSnakeCase(_:)(v5, v6);
      swift_bridgeObjectRelease();
      return v7;
    }

    else
    {
      __int16 v34 = a4;
      uint64_t v37 = *(void *)(a2 + 128);
      uint64_t v32 = *(_OWORD *)(a1 + 3);
      unint64_t v9 = v32;
      uint64_t v10 = (char *)__swift_project_boxed_opaque_existential_1(a1, v32);
      uint64_t v11 = type metadata accessor for Optional();
      uint64_t v36 = &v30;
      unint64_t v12 = *(void **)(v11 - 8);
      uint64_t v13 = v12[8];
      MEMORY[0x1895F8858](v11);
      uint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0LL;
      uint64_t v15 = (char *)&v30 - v14;
      uint64_t v16 = *(void *)(v9 - 8);
      int v31 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
      v31((char *)&v30 - v14, v10, v9);
      uint64_t v17 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v16 + 56))((char *)&v30 - v14, 0LL, 1LL, v9);
      int v33 = &v30;
      Swift::String v18 = MEMORY[0x1895F8858](v17);
      unint64_t v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      MEMORY[0x1895F8858](v18);
      uint64_t v21 = (char *)&v30 - v14;
      uint64_t v22 = (void (*)(char *, char *, uint64_t))v12[2];
      __int16 v35 = v11;
      v22((char *)&v30 - v14, (char *)&v30 - v14, v11);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))((char *)&v30 - v14, 1LL, v9) == 1)
      {
        uint64_t v23 = (void (*)(char *, uint64_t))v12[1];
        swift_retain();
        uint64_t v24 = v35;
        v23(v21, v35);
        uint64_t v25 = _CodingPathNode.path.getter(v34);
        v23(v15, v24);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, (char *)&v30 - v14, v9);
        swift_retain();
        uint64_t v26 = _CodingPathNode.path.getter(v34);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_183720D90;
        *(_OWORD *)(inited + 56) = v32;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v31((char *)boxed_opaque_existential_1, v20, v9);
        v38[0] = v26;
        specialized Array.append<A>(contentsOf:)(inited);
        uint64_t v25 = v38[0];
        ((void (*)(char *, uint64_t))v12[1])((char *)&v30 - v14, v35);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v9);
      }

      v4(v38, v25);
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(v38, v38[3]);
      uint64_t v29 = dispatch thunk of CodingKey.stringValue.getter();
      outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      return v29;
    }
  }

  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    return dispatch thunk of CodingKey.stringValue.getter();
  }

uint64_t _JSONKeyedEncodingContainer.encodeNil(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[1];
  type metadata accessor for JSONReference();
  uint64_t inited = swift_initStaticObject();
  uint64_t v7 = *v2;
  unint64_t v8 = v2[2];
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  v52[3] = v10;
  v52[4] = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  v10);
  uint64_t v12 = _JSONKeyedEncodingContainer._converted(_:)(v52, v7, v5, v8);
  uint64_t v14 = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  if (*(_BYTE *)(v5 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v15 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0LL;
  *(void *)(v5 + 24) = 0LL;
  *(_BYTE *)(v5 + 32) = 7;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v52[0] = v15;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
  uint64_t v19 = *(void *)(v15 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v10) = v17;
    if (*(void *)(v15 + 24) < v21)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v21,  isUniquelyReferenced_nonNull_native);
      uint64_t v22 = v52[0];
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
      if ((v10 & 1) != (v24 & 1)) {
        goto LABEL_51;
      }
      unint64_t v18 = v23;
      if ((v10 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v25 = *(void *)(v22 + 56);
      swift_release();
      *(void *)(v25 + 8 * v18) = inited;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v45 = *(void *)(v5 + 16);
      uint64_t v46 = *(void *)(v5 + 24);
      *(void *)(v5 + 16) = v22;
      *(void *)(v5 + 24) = 0LL;
      char v47 = *(_BYTE *)(v5 + 32);
      *(_BYTE *)(v5 + 32) = 4;
      outlined consume of JSONReference.Backing(v45, v46, v47);
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v22 = v15;
      if ((v17 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v18, v12, v14, inited, v22);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v26 = static _DictionaryStorage.copy(original:)();
  uint64_t v22 = v26;
  if (!*(void *)(v15 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  uint64_t v27 = (void *)(v26 + 64);
  unint64_t v28 = (unint64_t)((1LL << *(_BYTE *)(v22 + 32)) + 63) >> 6;
  uint64_t v49 = v15 + 64;
  int64_t v29 = 0LL;
  *(void *)(v22 + 16) = *(void *)(v15 + 16);
  uint64_t v30 = 1LL << *(_BYTE *)(v15 + 32);
  uint64_t v31 = -1LL;
  if (v30 < 64) {
    uint64_t v31 = ~(-1LL << v30);
  }
  unint64_t v32 = v31 & *(void *)(v15 + 64);
  int64_t v50 = (unint64_t)(v30 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      unint64_t v33 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      int64_t v51 = v29;
      unint64_t v34 = v33 | (v29 << 6);
      goto LABEL_19;
    }

    int64_t v41 = v29 + 1;
    if (__OFADD__(v29, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v41 >= v50) {
      goto LABEL_45;
    }
    unint64_t v42 = *(void *)(v49 + 8 * v41);
    int64_t v43 = v29 + 1;
    if (!v42)
    {
      int64_t v43 = v29 + 2;
      if (v29 + 2 >= v50) {
        goto LABEL_45;
      }
      unint64_t v42 = *(void *)(v49 + 8 * v43);
      if (!v42)
      {
        int64_t v43 = v29 + 3;
        if (v29 + 3 >= v50) {
          goto LABEL_45;
        }
        unint64_t v42 = *(void *)(v49 + 8 * v43);
        if (!v42)
        {
          int64_t v43 = v29 + 4;
          if (v29 + 4 >= v50) {
            goto LABEL_45;
          }
          unint64_t v42 = *(void *)(v49 + 8 * v43);
          if (!v42)
          {
            int64_t v43 = v29 + 5;
            if (v29 + 5 >= v50) {
              goto LABEL_45;
            }
            unint64_t v42 = *(void *)(v49 + 8 * v43);
            if (!v42)
            {
              int64_t v43 = v29 + 6;
              if (v29 + 6 >= v50) {
                goto LABEL_45;
              }
              unint64_t v42 = *(void *)(v49 + 8 * v43);
              if (!v42)
              {
                int64_t v43 = v29 + 7;
                if (v29 + 7 >= v50) {
                  goto LABEL_45;
                }
                unint64_t v42 = *(void *)(v49 + 8 * v43);
                if (!v42)
                {
                  int64_t v43 = v29 + 8;
                  if (v29 + 8 >= v50) {
                    goto LABEL_45;
                  }
                  unint64_t v42 = *(void *)(v49 + 8 * v43);
                  if (!v42) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3[1];
  type metadata accessor for JSONReference();
  uint64_t inited = swift_initStaticObject();
  uint64_t v8 = *v3;
  unint64_t v9 = v3[2];
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(a3 + 24);
  v53[3] = v11;
  v53[4] = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v53);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))( boxed_opaque_existential_1,  a2,  v11);
  swift_retain();
  uint64_t v13 = _JSONKeyedEncodingContainer._converted(_:)(v53, v8, v6, v9);
  uint64_t v15 = v14;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  if (*(_BYTE *)(v6 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v16 = *(void *)(v6 + 16);
  *(void *)(v6 + 16) = 0LL;
  *(void *)(v6 + 24) = 0LL;
  *(_BYTE *)(v6 + 32) = 7;
  swift_retain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v53[0] = v16;
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15);
  uint64_t v20 = *(void *)(v16 + 16);
  BOOL v21 = (v18 & 1) == 0;
  uint64_t v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v11) = v18;
    if (*(void *)(v16 + 24) < v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v22,  isUniquelyReferenced_nonNull_native);
      uint64_t v23 = v53[0];
      unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15);
      if ((v11 & 1) != (v25 & 1)) {
        goto LABEL_51;
      }
      unint64_t v19 = v24;
      if ((v11 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v26 = *(void *)(v23 + 56);
      swift_release();
      *(void *)(v26 + 8 * v19) = inited;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v46 = *(void *)(v6 + 16);
      uint64_t v47 = *(void *)(v6 + 24);
      *(void *)(v6 + 16) = v23;
      *(void *)(v6 + 24) = 0LL;
      char v48 = *(_BYTE *)(v6 + 32);
      *(_BYTE *)(v6 + 32) = 4;
      outlined consume of JSONReference.Backing(v46, v47, v48);
      swift_release();
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v23 = v16;
      if ((v18 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v19, v13, v15, inited, v23);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v27 = static _DictionaryStorage.copy(original:)();
  uint64_t v23 = v27;
  if (!*(void *)(v16 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  unint64_t v28 = (void *)(v27 + 64);
  unint64_t v29 = (unint64_t)((1LL << *(_BYTE *)(v23 + 32)) + 63) >> 6;
  uint64_t v50 = v16 + 64;
  int64_t v30 = 0LL;
  *(void *)(v23 + 16) = *(void *)(v16 + 16);
  uint64_t v31 = 1LL << *(_BYTE *)(v16 + 32);
  uint64_t v32 = -1LL;
  if (v31 < 64) {
    uint64_t v32 = ~(-1LL << v31);
  }
  unint64_t v33 = v32 & *(void *)(v16 + 64);
  int64_t v51 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    if (v33)
    {
      unint64_t v34 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      int64_t v52 = v30;
      unint64_t v35 = v34 | (v30 << 6);
      goto LABEL_19;
    }

    int64_t v42 = v30 + 1;
    if (__OFADD__(v30, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v42 >= v51) {
      goto LABEL_45;
    }
    unint64_t v43 = *(void *)(v50 + 8 * v42);
    int64_t v44 = v30 + 1;
    if (!v43)
    {
      int64_t v44 = v30 + 2;
      if (v30 + 2 >= v51) {
        goto LABEL_45;
      }
      unint64_t v43 = *(void *)(v50 + 8 * v44);
      if (!v43)
      {
        int64_t v44 = v30 + 3;
        if (v30 + 3 >= v51) {
          goto LABEL_45;
        }
        unint64_t v43 = *(void *)(v50 + 8 * v44);
        if (!v43)
        {
          int64_t v44 = v30 + 4;
          if (v30 + 4 >= v51) {
            goto LABEL_45;
          }
          unint64_t v43 = *(void *)(v50 + 8 * v44);
          if (!v43)
          {
            int64_t v44 = v30 + 5;
            if (v30 + 5 >= v51) {
              goto LABEL_45;
            }
            unint64_t v43 = *(void *)(v50 + 8 * v44);
            if (!v43)
            {
              int64_t v44 = v30 + 6;
              if (v30 + 6 >= v51) {
                goto LABEL_45;
              }
              unint64_t v43 = *(void *)(v50 + 8 * v44);
              if (!v43)
              {
                int64_t v44 = v30 + 7;
                if (v30 + 7 >= v51) {
                  goto LABEL_45;
                }
                unint64_t v43 = *(void *)(v50 + 8 * v44);
                if (!v43)
                {
                  int64_t v44 = v30 + 8;
                  if (v30 + 8 >= v51) {
                    goto LABEL_45;
                  }
                  unint64_t v43 = *(void *)(v50 + 8 * v44);
                  if (!v43) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t result;
  uint64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57[5];
  unint64_t v4 = v3;
  uint64_t v7 = v3[1];
  v57[0] = a1;
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v10 = v9;
  type metadata accessor for JSONReference();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v10;
  *(_BYTE *)(v11 + 32) = 1;
  uint64_t v12 = *v4;
  uint64_t v13 = v4[2];
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 24);
  v57[3] = v15;
  v57[4] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))( boxed_opaque_existential_1,  a2,  v15);
  char v17 = _JSONKeyedEncodingContainer._converted(_:)(v57, v12, v7, v13);
  unint64_t v19 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  if (*(_BYTE *)(v7 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v20 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = 0LL;
  *(void *)(v7 + 24) = 0LL;
  *(_BYTE *)(v7 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57[0] = v20;
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
  unint64_t v24 = *(void *)(v20 + 16);
  char v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v15) = v22;
    if (*(void *)(v20 + 24) < v26)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v26,  isUniquelyReferenced_nonNull_native);
      uint64_t v27 = v57[0];
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v15 & 1) != (v29 & 1)) {
        goto LABEL_51;
      }
      uint64_t v23 = v28;
      if ((v15 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      int64_t v30 = *(void *)(v27 + 56);
      swift_release();
      *(void *)(v30 + 8 * v23) = v11;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v50 = *(void *)(v7 + 16);
      int64_t v51 = *(void *)(v7 + 24);
      *(void *)(v7 + 16) = v27;
      *(void *)(v7 + 24) = 0LL;
      int64_t v52 = *(_BYTE *)(v7 + 32);
      *(_BYTE *)(v7 + 32) = 4;
      outlined consume of JSONReference.Backing(v50, v51, v52);
      swift_release();
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v27 = v20;
      if ((v22 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v23, v17, v19, v11, v27);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v31 = static _DictionaryStorage.copy(original:)();
  uint64_t v27 = v31;
  if (!*(void *)(v20 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  uint64_t v32 = (void *)(v31 + 64);
  unint64_t v33 = (unint64_t)((1LL << *(_BYTE *)(v27 + 32)) + 63) >> 6;
  unint64_t v54 = v20 + 64;
  unint64_t v34 = 0LL;
  *(void *)(v27 + 16) = *(void *)(v20 + 16);
  unint64_t v35 = 1LL << *(_BYTE *)(v20 + 32);
  uint64_t v36 = -1LL;
  if (v35 < 64) {
    uint64_t v36 = ~(-1LL << v35);
  }
  uint64_t v37 = v36 & *(void *)(v20 + 64);
  uint64_t v55 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      uint64_t v38 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      unsigned int v56 = v34;
      uint64_t v39 = v38 | (v34 << 6);
      goto LABEL_19;
    }

    uint64_t v46 = v34 + 1;
    if (__OFADD__(v34, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v46 >= v55) {
      goto LABEL_45;
    }
    uint64_t v47 = *(void *)(v54 + 8 * v46);
    char v48 = v34 + 1;
    if (!v47)
    {
      char v48 = v34 + 2;
      if (v34 + 2 >= v55) {
        goto LABEL_45;
      }
      uint64_t v47 = *(void *)(v54 + 8 * v48);
      if (!v47)
      {
        char v48 = v34 + 3;
        if (v34 + 3 >= v55) {
          goto LABEL_45;
        }
        uint64_t v47 = *(void *)(v54 + 8 * v48);
        if (!v47)
        {
          char v48 = v34 + 4;
          if (v34 + 4 >= v55) {
            goto LABEL_45;
          }
          uint64_t v47 = *(void *)(v54 + 8 * v48);
          if (!v47)
          {
            char v48 = v34 + 5;
            if (v34 + 5 >= v55) {
              goto LABEL_45;
            }
            uint64_t v47 = *(void *)(v54 + 8 * v48);
            if (!v47)
            {
              char v48 = v34 + 6;
              if (v34 + 6 >= v55) {
                goto LABEL_45;
              }
              uint64_t v47 = *(void *)(v54 + 8 * v48);
              if (!v47)
              {
                char v48 = v34 + 7;
                if (v34 + 7 >= v55) {
                  goto LABEL_45;
                }
                uint64_t v47 = *(void *)(v54 + 8 * v48);
                if (!v47)
                {
                  char v48 = v34 + 8;
                  if (v34 + 8 >= v55) {
                    goto LABEL_45;
                  }
                  uint64_t v47 = *(void *)(v54 + 8 * v48);
                  if (!v47) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = v3[1];
  LOBYTE(v57[0]) = a1;
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v10 = v9;
  type metadata accessor for JSONReference();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v10;
  *(_BYTE *)(v11 + 32) = 1;
  uint64_t v12 = *v4;
  unint64_t v13 = v4[2];
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 24);
  v57[3] = v15;
  v57[4] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))( boxed_opaque_existential_1,  a2,  v15);
  uint64_t v17 = _JSONKeyedEncodingContainer._converted(_:)(v57, v12, v7, v13);
  uint64_t v19 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  if (*(_BYTE *)(v7 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v20 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = 0LL;
  *(void *)(v7 + 24) = 0LL;
  *(_BYTE *)(v7 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57[0] = v20;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
  uint64_t v24 = *(void *)(v20 + 16);
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v15) = v22;
    if (*(void *)(v20 + 24) < v26)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v26,  isUniquelyReferenced_nonNull_native);
      uint64_t v27 = v57[0];
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v15 & 1) != (v29 & 1)) {
        goto LABEL_51;
      }
      unint64_t v23 = v28;
      if ((v15 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v30 = *(void *)(v27 + 56);
      swift_release();
      *(void *)(v30 + 8 * v23) = v11;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v50 = *(void *)(v7 + 16);
      uint64_t v51 = *(void *)(v7 + 24);
      *(void *)(v7 + 16) = v27;
      *(void *)(v7 + 24) = 0LL;
      char v52 = *(_BYTE *)(v7 + 32);
      *(_BYTE *)(v7 + 32) = 4;
      outlined consume of JSONReference.Backing(v50, v51, v52);
      swift_release();
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v27 = v20;
      if ((v22 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v23, v17, v19, v11, v27);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v31 = static _DictionaryStorage.copy(original:)();
  uint64_t v27 = v31;
  if (!*(void *)(v20 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  uint64_t v32 = (void *)(v31 + 64);
  unint64_t v33 = (unint64_t)((1LL << *(_BYTE *)(v27 + 32)) + 63) >> 6;
  uint64_t v54 = v20 + 64;
  int64_t v34 = 0LL;
  *(void *)(v27 + 16) = *(void *)(v20 + 16);
  uint64_t v35 = 1LL << *(_BYTE *)(v20 + 32);
  uint64_t v36 = -1LL;
  if (v35 < 64) {
    uint64_t v36 = ~(-1LL << v35);
  }
  unint64_t v37 = v36 & *(void *)(v20 + 64);
  int64_t v55 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      unint64_t v38 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      int64_t v56 = v34;
      unint64_t v39 = v38 | (v34 << 6);
      goto LABEL_19;
    }

    int64_t v46 = v34 + 1;
    if (__OFADD__(v34, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v46 >= v55) {
      goto LABEL_45;
    }
    unint64_t v47 = *(void *)(v54 + 8 * v46);
    int64_t v48 = v34 + 1;
    if (!v47)
    {
      int64_t v48 = v34 + 2;
      if (v34 + 2 >= v55) {
        goto LABEL_45;
      }
      unint64_t v47 = *(void *)(v54 + 8 * v48);
      if (!v47)
      {
        int64_t v48 = v34 + 3;
        if (v34 + 3 >= v55) {
          goto LABEL_45;
        }
        unint64_t v47 = *(void *)(v54 + 8 * v48);
        if (!v47)
        {
          int64_t v48 = v34 + 4;
          if (v34 + 4 >= v55) {
            goto LABEL_45;
          }
          unint64_t v47 = *(void *)(v54 + 8 * v48);
          if (!v47)
          {
            int64_t v48 = v34 + 5;
            if (v34 + 5 >= v55) {
              goto LABEL_45;
            }
            unint64_t v47 = *(void *)(v54 + 8 * v48);
            if (!v47)
            {
              int64_t v48 = v34 + 6;
              if (v34 + 6 >= v55) {
                goto LABEL_45;
              }
              unint64_t v47 = *(void *)(v54 + 8 * v48);
              if (!v47)
              {
                int64_t v48 = v34 + 7;
                if (v34 + 7 >= v55) {
                  goto LABEL_45;
                }
                unint64_t v47 = *(void *)(v54 + 8 * v48);
                if (!v47)
                {
                  int64_t v48 = v34 + 8;
                  if (v34 + 8 >= v55) {
                    goto LABEL_45;
                  }
                  unint64_t v47 = *(void *)(v54 + 8 * v48);
                  if (!v47) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = v3[1];
  LOWORD(v57[0]) = a1;
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v10 = v9;
  type metadata accessor for JSONReference();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v10;
  *(_BYTE *)(v11 + 32) = 1;
  uint64_t v12 = *v4;
  unint64_t v13 = v4[2];
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 24);
  v57[3] = v15;
  v57[4] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))( boxed_opaque_existential_1,  a2,  v15);
  uint64_t v17 = _JSONKeyedEncodingContainer._converted(_:)(v57, v12, v7, v13);
  uint64_t v19 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  if (*(_BYTE *)(v7 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v20 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = 0LL;
  *(void *)(v7 + 24) = 0LL;
  *(_BYTE *)(v7 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57[0] = v20;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
  uint64_t v24 = *(void *)(v20 + 16);
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v15) = v22;
    if (*(void *)(v20 + 24) < v26)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v26,  isUniquelyReferenced_nonNull_native);
      uint64_t v27 = v57[0];
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v15 & 1) != (v29 & 1)) {
        goto LABEL_51;
      }
      unint64_t v23 = v28;
      if ((v15 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v30 = *(void *)(v27 + 56);
      swift_release();
      *(void *)(v30 + 8 * v23) = v11;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v50 = *(void *)(v7 + 16);
      uint64_t v51 = *(void *)(v7 + 24);
      *(void *)(v7 + 16) = v27;
      *(void *)(v7 + 24) = 0LL;
      char v52 = *(_BYTE *)(v7 + 32);
      *(_BYTE *)(v7 + 32) = 4;
      outlined consume of JSONReference.Backing(v50, v51, v52);
      swift_release();
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v27 = v20;
      if ((v22 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v23, v17, v19, v11, v27);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v31 = static _DictionaryStorage.copy(original:)();
  uint64_t v27 = v31;
  if (!*(void *)(v20 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  uint64_t v32 = (void *)(v31 + 64);
  unint64_t v33 = (unint64_t)((1LL << *(_BYTE *)(v27 + 32)) + 63) >> 6;
  uint64_t v54 = v20 + 64;
  int64_t v34 = 0LL;
  *(void *)(v27 + 16) = *(void *)(v20 + 16);
  uint64_t v35 = 1LL << *(_BYTE *)(v20 + 32);
  uint64_t v36 = -1LL;
  if (v35 < 64) {
    uint64_t v36 = ~(-1LL << v35);
  }
  unint64_t v37 = v36 & *(void *)(v20 + 64);
  int64_t v55 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      unint64_t v38 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      int64_t v56 = v34;
      unint64_t v39 = v38 | (v34 << 6);
      goto LABEL_19;
    }

    int64_t v46 = v34 + 1;
    if (__OFADD__(v34, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v46 >= v55) {
      goto LABEL_45;
    }
    unint64_t v47 = *(void *)(v54 + 8 * v46);
    int64_t v48 = v34 + 1;
    if (!v47)
    {
      int64_t v48 = v34 + 2;
      if (v34 + 2 >= v55) {
        goto LABEL_45;
      }
      unint64_t v47 = *(void *)(v54 + 8 * v48);
      if (!v47)
      {
        int64_t v48 = v34 + 3;
        if (v34 + 3 >= v55) {
          goto LABEL_45;
        }
        unint64_t v47 = *(void *)(v54 + 8 * v48);
        if (!v47)
        {
          int64_t v48 = v34 + 4;
          if (v34 + 4 >= v55) {
            goto LABEL_45;
          }
          unint64_t v47 = *(void *)(v54 + 8 * v48);
          if (!v47)
          {
            int64_t v48 = v34 + 5;
            if (v34 + 5 >= v55) {
              goto LABEL_45;
            }
            unint64_t v47 = *(void *)(v54 + 8 * v48);
            if (!v47)
            {
              int64_t v48 = v34 + 6;
              if (v34 + 6 >= v55) {
                goto LABEL_45;
              }
              unint64_t v47 = *(void *)(v54 + 8 * v48);
              if (!v47)
              {
                int64_t v48 = v34 + 7;
                if (v34 + 7 >= v55) {
                  goto LABEL_45;
                }
                unint64_t v47 = *(void *)(v54 + 8 * v48);
                if (!v47)
                {
                  int64_t v48 = v34 + 8;
                  if (v34 + 8 >= v55) {
                    goto LABEL_45;
                  }
                  unint64_t v47 = *(void *)(v54 + 8 * v48);
                  if (!v47) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(int a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = v3[1];
  LODWORD(v57[0]) = a1;
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v10 = v9;
  type metadata accessor for JSONReference();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v10;
  *(_BYTE *)(v11 + 32) = 1;
  uint64_t v12 = *v4;
  unint64_t v13 = v4[2];
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 24);
  v57[3] = v15;
  v57[4] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))( boxed_opaque_existential_1,  a2,  v15);
  uint64_t v17 = _JSONKeyedEncodingContainer._converted(_:)(v57, v12, v7, v13);
  uint64_t v19 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  if (*(_BYTE *)(v7 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v20 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = 0LL;
  *(void *)(v7 + 24) = 0LL;
  *(_BYTE *)(v7 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57[0] = v20;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
  uint64_t v24 = *(void *)(v20 + 16);
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v15) = v22;
    if (*(void *)(v20 + 24) < v26)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v26,  isUniquelyReferenced_nonNull_native);
      uint64_t v27 = v57[0];
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v15 & 1) != (v29 & 1)) {
        goto LABEL_51;
      }
      unint64_t v23 = v28;
      if ((v15 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v30 = *(void *)(v27 + 56);
      swift_release();
      *(void *)(v30 + 8 * v23) = v11;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v50 = *(void *)(v7 + 16);
      uint64_t v51 = *(void *)(v7 + 24);
      *(void *)(v7 + 16) = v27;
      *(void *)(v7 + 24) = 0LL;
      char v52 = *(_BYTE *)(v7 + 32);
      *(_BYTE *)(v7 + 32) = 4;
      outlined consume of JSONReference.Backing(v50, v51, v52);
      swift_release();
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v27 = v20;
      if ((v22 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v23, v17, v19, v11, v27);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v31 = static _DictionaryStorage.copy(original:)();
  uint64_t v27 = v31;
  if (!*(void *)(v20 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  uint64_t v32 = (void *)(v31 + 64);
  unint64_t v33 = (unint64_t)((1LL << *(_BYTE *)(v27 + 32)) + 63) >> 6;
  uint64_t v54 = v20 + 64;
  int64_t v34 = 0LL;
  *(void *)(v27 + 16) = *(void *)(v20 + 16);
  uint64_t v35 = 1LL << *(_BYTE *)(v20 + 32);
  uint64_t v36 = -1LL;
  if (v35 < 64) {
    uint64_t v36 = ~(-1LL << v35);
  }
  unint64_t v37 = v36 & *(void *)(v20 + 64);
  int64_t v55 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      unint64_t v38 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      int64_t v56 = v34;
      unint64_t v39 = v38 | (v34 << 6);
      goto LABEL_19;
    }

    int64_t v46 = v34 + 1;
    if (__OFADD__(v34, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v46 >= v55) {
      goto LABEL_45;
    }
    unint64_t v47 = *(void *)(v54 + 8 * v46);
    int64_t v48 = v34 + 1;
    if (!v47)
    {
      int64_t v48 = v34 + 2;
      if (v34 + 2 >= v55) {
        goto LABEL_45;
      }
      unint64_t v47 = *(void *)(v54 + 8 * v48);
      if (!v47)
      {
        int64_t v48 = v34 + 3;
        if (v34 + 3 >= v55) {
          goto LABEL_45;
        }
        unint64_t v47 = *(void *)(v54 + 8 * v48);
        if (!v47)
        {
          int64_t v48 = v34 + 4;
          if (v34 + 4 >= v55) {
            goto LABEL_45;
          }
          unint64_t v47 = *(void *)(v54 + 8 * v48);
          if (!v47)
          {
            int64_t v48 = v34 + 5;
            if (v34 + 5 >= v55) {
              goto LABEL_45;
            }
            unint64_t v47 = *(void *)(v54 + 8 * v48);
            if (!v47)
            {
              int64_t v48 = v34 + 6;
              if (v34 + 6 >= v55) {
                goto LABEL_45;
              }
              unint64_t v47 = *(void *)(v54 + 8 * v48);
              if (!v47)
              {
                int64_t v48 = v34 + 7;
                if (v34 + 7 >= v55) {
                  goto LABEL_45;
                }
                unint64_t v47 = *(void *)(v54 + 8 * v48);
                if (!v47)
                {
                  int64_t v48 = v34 + 8;
                  if (v34 + 8 >= v55) {
                    goto LABEL_45;
                  }
                  unint64_t v47 = *(void *)(v54 + 8 * v48);
                  if (!v47) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = v4[1];
  v58[0] = a1;
  v58[1] = a2;
  uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v11 = v10;
  type metadata accessor for JSONReference();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v9;
  *(void *)(v12 + 24) = v11;
  *(_BYTE *)(v12 + 32) = 1;
  uint64_t v13 = *v5;
  unint64_t v14 = v5[2];
  uint64_t v16 = *(void *)(a4 + 16);
  uint64_t v15 = *(void *)(a4 + 24);
  v58[3] = v16;
  v58[4] = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))( boxed_opaque_existential_1,  a3,  v16);
  uint64_t v18 = _JSONKeyedEncodingContainer._converted(_:)(v58, v13, v8, v14);
  uint64_t v20 = v19;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  if (*(_BYTE *)(v8 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v21 = *(void *)(v8 + 16);
  *(void *)(v8 + 16) = 0LL;
  *(void *)(v8 + 24) = 0LL;
  *(_BYTE *)(v8 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v58[0] = v21;
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20);
  uint64_t v25 = *(void *)(v21 + 16);
  BOOL v26 = (v23 & 1) == 0;
  uint64_t v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v16) = v23;
    if (*(void *)(v21 + 24) < v27)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v27,  isUniquelyReferenced_nonNull_native);
      uint64_t v28 = v58[0];
      unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20);
      if ((v16 & 1) != (v30 & 1)) {
        goto LABEL_51;
      }
      unint64_t v24 = v29;
      if ((v16 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v31 = *(void *)(v28 + 56);
      swift_release();
      *(void *)(v31 + 8 * v24) = v12;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v51 = *(void *)(v8 + 16);
      uint64_t v52 = *(void *)(v8 + 24);
      *(void *)(v8 + 16) = v28;
      *(void *)(v8 + 24) = 0LL;
      char v53 = *(_BYTE *)(v8 + 32);
      *(_BYTE *)(v8 + 32) = 4;
      outlined consume of JSONReference.Backing(v51, v52, v53);
      swift_release();
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v28 = v21;
      if ((v23 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v24, v18, v20, v12, v28);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v32 = static _DictionaryStorage.copy(original:)();
  uint64_t v28 = v32;
  if (!*(void *)(v21 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  unint64_t v33 = (void *)(v32 + 64);
  unint64_t v34 = (unint64_t)((1LL << *(_BYTE *)(v28 + 32)) + 63) >> 6;
  uint64_t v55 = v21 + 64;
  int64_t v35 = 0LL;
  *(void *)(v28 + 16) = *(void *)(v21 + 16);
  uint64_t v36 = 1LL << *(_BYTE *)(v21 + 32);
  uint64_t v37 = -1LL;
  if (v36 < 64) {
    uint64_t v37 = ~(-1LL << v36);
  }
  unint64_t v38 = v37 & *(void *)(v21 + 64);
  int64_t v56 = (unint64_t)(v36 + 63) >> 6;
  while (1)
  {
    if (v38)
    {
      unint64_t v39 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      int64_t v57 = v35;
      unint64_t v40 = v39 | (v35 << 6);
      goto LABEL_19;
    }

    int64_t v47 = v35 + 1;
    if (__OFADD__(v35, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v47 >= v56) {
      goto LABEL_45;
    }
    unint64_t v48 = *(void *)(v55 + 8 * v47);
    int64_t v49 = v35 + 1;
    if (!v48)
    {
      int64_t v49 = v35 + 2;
      if (v35 + 2 >= v56) {
        goto LABEL_45;
      }
      unint64_t v48 = *(void *)(v55 + 8 * v49);
      if (!v48)
      {
        int64_t v49 = v35 + 3;
        if (v35 + 3 >= v56) {
          goto LABEL_45;
        }
        unint64_t v48 = *(void *)(v55 + 8 * v49);
        if (!v48)
        {
          int64_t v49 = v35 + 4;
          if (v35 + 4 >= v56) {
            goto LABEL_45;
          }
          unint64_t v48 = *(void *)(v55 + 8 * v49);
          if (!v48)
          {
            int64_t v49 = v35 + 5;
            if (v35 + 5 >= v56) {
              goto LABEL_45;
            }
            unint64_t v48 = *(void *)(v55 + 8 * v49);
            if (!v48)
            {
              int64_t v49 = v35 + 6;
              if (v35 + 6 >= v56) {
                goto LABEL_45;
              }
              unint64_t v48 = *(void *)(v55 + 8 * v49);
              if (!v48)
              {
                int64_t v49 = v35 + 7;
                if (v35 + 7 >= v56) {
                  goto LABEL_45;
                }
                unint64_t v48 = *(void *)(v55 + 8 * v49);
                if (!v48)
                {
                  int64_t v49 = v35 + 8;
                  if (v35 + 8 >= v56) {
                    goto LABEL_45;
                  }
                  unint64_t v48 = *(void *)(v55 + 8 * v49);
                  if (!v48) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t result;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56[5];
  uint64_t v9 = v4[1];
  type metadata accessor for JSONReference();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(_BYTE *)(v10 + 32) = 0;
  uint64_t v11 = *v4;
  uint64_t v12 = v4[2];
  unint64_t v14 = *(void *)(a4 + 16);
  uint64_t v13 = *(void *)(a4 + 24);
  v56[3] = v14;
  v56[4] = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v56);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))( boxed_opaque_existential_1,  a3,  v14);
  swift_bridgeObjectRetain();
  uint64_t v16 = _JSONKeyedEncodingContainer._converted(_:)(v56, v11, v9, v12);
  uint64_t v18 = v17;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  if (*(_BYTE *)(v9 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v19 = *(void *)(v9 + 16);
  *(void *)(v9 + 16) = 0LL;
  *(void *)(v9 + 24) = 0LL;
  *(_BYTE *)(v9 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v56[0] = v19;
  char v22 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
  char v23 = *(void *)(v19 + 16);
  unint64_t v24 = (v21 & 1) == 0;
  uint64_t v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v11) = v21;
    if (*(void *)(v19 + 24) < v25)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v25,  isUniquelyReferenced_nonNull_native);
      BOOL v26 = v56[0];
      uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
      if ((v11 & 1) != (v28 & 1)) {
        goto LABEL_51;
      }
      char v22 = v27;
      if ((v11 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      unint64_t v29 = *(void *)(v26 + 56);
      swift_release();
      *(void *)(v29 + 8 * v22) = v10;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v49 = *(void *)(v9 + 16);
      uint64_t v50 = *(void *)(v9 + 24);
      *(void *)(v9 + 16) = v26;
      *(void *)(v9 + 24) = 0LL;
      uint64_t v51 = *(_BYTE *)(v9 + 32);
      *(_BYTE *)(v9 + 32) = 4;
      outlined consume of JSONReference.Backing(v49, v50, v51);
      swift_release();
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      BOOL v26 = v19;
      if ((v21 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v22, v16, v18, v10, v26);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  char v30 = static _DictionaryStorage.copy(original:)();
  BOOL v26 = v30;
  if (!*(void *)(v19 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  uint64_t v31 = (void *)(v30 + 64);
  uint64_t v32 = (unint64_t)((1LL << *(_BYTE *)(v26 + 32)) + 63) >> 6;
  char v53 = v19 + 64;
  unint64_t v33 = 0LL;
  *(void *)(v26 + 16) = *(void *)(v19 + 16);
  unint64_t v34 = 1LL << *(_BYTE *)(v19 + 32);
  int64_t v35 = -1LL;
  if (v34 < 64) {
    int64_t v35 = ~(-1LL << v34);
  }
  uint64_t v36 = v35 & *(void *)(v19 + 64);
  uint64_t v54 = (unint64_t)(v34 + 63) >> 6;
  while (1)
  {
    if (v36)
    {
      uint64_t v37 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      uint64_t v55 = v33;
      unint64_t v38 = v37 | (v33 << 6);
      goto LABEL_19;
    }

    uint64_t v45 = v33 + 1;
    if (__OFADD__(v33, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v45 >= v54) {
      goto LABEL_45;
    }
    int64_t v46 = *(void *)(v53 + 8 * v45);
    int64_t v47 = v33 + 1;
    if (!v46)
    {
      int64_t v47 = v33 + 2;
      if (v33 + 2 >= v54) {
        goto LABEL_45;
      }
      int64_t v46 = *(void *)(v53 + 8 * v47);
      if (!v46)
      {
        int64_t v47 = v33 + 3;
        if (v33 + 3 >= v54) {
          goto LABEL_45;
        }
        int64_t v46 = *(void *)(v53 + 8 * v47);
        if (!v46)
        {
          int64_t v47 = v33 + 4;
          if (v33 + 4 >= v54) {
            goto LABEL_45;
          }
          int64_t v46 = *(void *)(v53 + 8 * v47);
          if (!v46)
          {
            int64_t v47 = v33 + 5;
            if (v33 + 5 >= v54) {
              goto LABEL_45;
            }
            int64_t v46 = *(void *)(v53 + 8 * v47);
            if (!v46)
            {
              int64_t v47 = v33 + 6;
              if (v33 + 6 >= v54) {
                goto LABEL_45;
              }
              int64_t v46 = *(void *)(v53 + 8 * v47);
              if (!v46)
              {
                int64_t v47 = v33 + 7;
                if (v33 + 7 >= v54) {
                  goto LABEL_45;
                }
                int64_t v46 = *(void *)(v53 + 8 * v47);
                if (!v46)
                {
                  int64_t v47 = v33 + 8;
                  if (v33 + 8 >= v54) {
                    goto LABEL_45;
                  }
                  int64_t v46 = *(void *)(v53 + 8 * v47);
                  if (!v46) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

void *_JSONKeyedEncodingContainer.encode(_:forKey:)(int64_t a1, uint64_t a2, float a3)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v65 = (void *)type metadata accessor for Optional();
  uint64_t v8 = *(v65 - 1);
  MEMORY[0x1895F8858](v65);
  uint64_t v10 = (uint64_t)&v62 - v9;
  Swift::String v63 = v3;
  int64_t v64 = a1;
  uint64_t v11 = *v3;
  unint64_t v12 = *(void *)(*v3 + 144);
  uint64_t v13 = *(void *)(v7 - 8);
  unint64_t v14 = *(void (**)(char *, int64_t, uint64_t))(v13 + 16);
  v14((char *)&v62 - v9, a1, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v7);
  outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((__int128 *)(v11 + 72), v68);
  swift_retain();
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v68,  (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = v66;
  uint64_t v17 = specialized static JSONReference.number<A, B>(from:with:for:_:)(v68, v12, v10, v7, v15, a3);
  if (v16)
  {
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v68,  (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
    (*(void (**)(uint64_t, void *))(v8 + 8))(v10, v65);
    return (void *)swift_release();
  }

  uint64_t v66 = v17;
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v68,  (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  (*(void (**)(uint64_t, void *))(v8 + 8))(v10, v65);
  swift_release();
  uint64_t v19 = *v63;
  uint64_t v18 = v63[1];
  uint64_t v20 = (void (*)(uint64_t *, int64_t, uint64_t))v14;
  unint64_t v21 = v63[2];
  v67[3] = v7;
  v67[4] = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v67);
  v20(boxed_opaque_existential_1, v64, v7);
  uint64_t v23 = _JSONKeyedEncodingContainer._converted(_:)(v67, v19, v18, v21);
  uint64_t v25 = v24;
  uint64_t result = (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
  if (*(_BYTE *)(v18 + 32) != 4)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  uint64_t v27 = *(void *)(v18 + 16);
  *(void *)(v18 + 16) = 0LL;
  *(void *)(v18 + 24) = 0LL;
  *(_BYTE *)(v18 + 32) = 7;
  swift_bridgeObjectRetain();
  uint64_t v28 = v66;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v67[0] = v27;
  unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v25);
  uint64_t v32 = *(void *)(v27 + 16);
  BOOL v33 = (v31 & 1) == 0;
  BOOL v34 = __OFADD__(v32, v33);
  uint64_t v35 = v32 + v33;
  if (v34)
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v10) = v31;
    if (*(void *)(v27 + 24) < v35)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v35,  isUniquelyReferenced_nonNull_native);
      uint64_t v36 = v67[0];
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v25);
      if ((v10 & 1) == (v37 & 1)) {
        goto LABEL_10;
      }
      unint64_t v30 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v36 = v27;
LABEL_10:
      if ((v10 & 1) != 0)
      {
LABEL_11:
        uint64_t v38 = *(void *)(v36 + 56);
        uint64_t v39 = 8 * v30;
        swift_release();
        *(void *)(v38 + v39) = v66;
LABEL_49:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v59 = *(void *)(v18 + 16);
        uint64_t v60 = *(void *)(v18 + 24);
        *(void *)(v18 + 16) = v36;
        *(void *)(v18 + 24) = 0LL;
        char v61 = *(_BYTE *)(v18 + 32);
        *(_BYTE *)(v18 + 32) = 4;
        outlined consume of JSONReference.Backing(v59, v60, v61);
        swift_bridgeObjectRelease();
        return (void *)swift_release();
      }

void *_JSONKeyedEncodingContainer.encode(_:forKey:)(int64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v65 = (void *)type metadata accessor for Optional();
  uint64_t v8 = *(v65 - 1);
  MEMORY[0x1895F8858](v65);
  uint64_t v10 = (uint64_t)&v62 - v9;
  Swift::String v63 = v3;
  int64_t v64 = a1;
  uint64_t v11 = *v3;
  unint64_t v12 = *(void *)(*v3 + 144);
  uint64_t v13 = *(void *)(v7 - 8);
  unint64_t v14 = *(void (**)(char *, int64_t, uint64_t))(v13 + 16);
  v14((char *)&v62 - v9, a1, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v7);
  outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((__int128 *)(v11 + 72), v68);
  swift_retain();
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v68,  (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = v66;
  uint64_t v17 = specialized static JSONReference.number<A, B>(from:with:for:_:)(v68, v12, v10, v7, v15, a3);
  if (v16)
  {
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v68,  (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
    (*(void (**)(uint64_t, void *))(v8 + 8))(v10, v65);
    return (void *)swift_release();
  }

  uint64_t v66 = v17;
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v68,  (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  (*(void (**)(uint64_t, void *))(v8 + 8))(v10, v65);
  swift_release();
  uint64_t v19 = *v63;
  uint64_t v18 = v63[1];
  uint64_t v20 = (void (*)(uint64_t *, int64_t, uint64_t))v14;
  unint64_t v21 = v63[2];
  v67[3] = v7;
  v67[4] = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v67);
  v20(boxed_opaque_existential_1, v64, v7);
  uint64_t v23 = _JSONKeyedEncodingContainer._converted(_:)(v67, v19, v18, v21);
  uint64_t v25 = v24;
  uint64_t result = (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
  if (*(_BYTE *)(v18 + 32) != 4)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  uint64_t v27 = *(void *)(v18 + 16);
  *(void *)(v18 + 16) = 0LL;
  *(void *)(v18 + 24) = 0LL;
  *(_BYTE *)(v18 + 32) = 7;
  swift_bridgeObjectRetain();
  uint64_t v28 = v66;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v67[0] = v27;
  unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v25);
  uint64_t v32 = *(void *)(v27 + 16);
  BOOL v33 = (v31 & 1) == 0;
  BOOL v34 = __OFADD__(v32, v33);
  uint64_t v35 = v32 + v33;
  if (v34)
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v10) = v31;
    if (*(void *)(v27 + 24) < v35)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v35,  isUniquelyReferenced_nonNull_native);
      uint64_t v36 = v67[0];
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v25);
      if ((v10 & 1) == (v37 & 1)) {
        goto LABEL_10;
      }
      unint64_t v30 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v36 = v27;
LABEL_10:
      if ((v10 & 1) != 0)
      {
LABEL_11:
        uint64_t v38 = *(void *)(v36 + 56);
        uint64_t v39 = 8 * v30;
        swift_release();
        *(void *)(v38 + v39) = v66;
LABEL_49:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v59 = *(void *)(v18 + 16);
        uint64_t v60 = *(void *)(v18 + 24);
        *(void *)(v18 + 16) = v36;
        *(void *)(v18 + 24) = 0LL;
        char v61 = *(_BYTE *)(v18 + 32);
        *(_BYTE *)(v18 + 32) = 4;
        outlined consume of JSONReference.Backing(v59, v60, v61);
        swift_bridgeObjectRelease();
        return (void *)swift_release();
      }

void *_JSONKeyedEncodingContainer.encode<A>(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v70 = a4;
  uint64_t v71 = a5;
  uint64_t v69 = a1;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v68 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v68 - 8);
  MEMORY[0x1895F8858](v68);
  uint64_t v11 = (char *)&v65 - v10;
  uint64_t v66 = a2;
  uint64_t v67 = v5;
  unint64_t v12 = *(void *)(*v5 + 144);
  uint64_t v13 = *(void *)(v8 - 8);
  unint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v14((char *)&v65 - v10, a2, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0LL, 1LL, v8);
  uint64_t v15 = *(__int128 **)(a3 + 24);
  swift_retain();
  uint64_t v16 = v73;
  uint64_t v17 = __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(v69, v12, (uint64_t)v11, v70, v8, v71, v15);
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v68);
    return (void *)swift_release();
  }

  uint64_t v70 = 0LL;
  uint64_t v71 = (void *)v9;
  uint64_t v20 = v67;
  uint64_t v19 = v68;
  uint64_t v21 = v66;
  if (v17)
  {
    uint64_t v73 = v17;
  }

  else
  {
    type metadata accessor for JSONReference();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = MEMORY[0x18961AFF0];
    *(void *)(v22 + 24) = 0LL;
    uint64_t v73 = v22;
    *(_BYTE *)(v22 + 32) = 4;
  }

  ((void (*)(char *, uint64_t))v71[1])(v11, v19);
  swift_release();
  uint64_t v23 = v20;
  uint64_t v24 = v20[1];
  uint64_t v25 = *v23;
  unint64_t v26 = v23[2];
  v72[3] = v8;
  v72[4] = (uint64_t)v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v72);
  v14((char *)boxed_opaque_existential_1, v21, v8);
  uint64_t v28 = _JSONKeyedEncodingContainer._converted(_:)(v72, v25, v24, v26);
  uint64_t v30 = v29;
  uint64_t result = (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
  if (*(_BYTE *)(v24 + 32) != 4)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }

  uint64_t v31 = *(void *)(v24 + 16);
  *(void *)(v24 + 16) = 0LL;
  *(void *)(v24 + 24) = 0LL;
  *(_BYTE *)(v24 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v72[0] = v31;
  unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v30);
  uint64_t v35 = *(void *)(v31 + 16);
  BOOL v36 = (v34 & 1) == 0;
  BOOL v37 = __OFADD__(v35, v36);
  uint64_t v38 = v35 + v36;
  if (v37)
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v21) = v34;
    if (*(void *)(v31 + 24) < v38)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v38,  isUniquelyReferenced_nonNull_native);
      uint64_t v39 = v72[0];
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v30);
      if ((v21 & 1) == (v40 & 1)) {
        goto LABEL_13;
      }
      unint64_t v33 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v39 = v31;
LABEL_13:
      if ((v21 & 1) != 0)
      {
LABEL_14:
        uint64_t v41 = *(void *)(v39 + 56);
        uint64_t v42 = 8 * v33;
        swift_release();
        *(void *)(v41 + v42) = v73;
LABEL_52:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v62 = *(void *)(v24 + 16);
        uint64_t v63 = *(void *)(v24 + 24);
        *(void *)(v24 + 16) = v39;
        *(void *)(v24 + 24) = 0LL;
        char v64 = *(_BYTE *)(v24 + 32);
        *(_BYTE *)(v24 + 32) = 4;
        outlined consume of JSONReference.Backing(v62, v63, v64);
        swift_bridgeObjectRelease();
        return (void *)swift_release();
      }

uint64_t _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v96 = a5;
  uint64_t v97 = a6;
  uint64_t v98 = a4;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v95 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v102 = *(void *)(v13 - 8);
  uint64_t v103 = v13;
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  __int16 v101 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v87 - v16;
  uint64_t v18 = *v7;
  uint64_t v19 = v7[1];
  unint64_t v20 = v7[2];
  uint64_t v21 = *(void *)(a3 + 24);
  v105[3] = v10;
  v105[4] = v21;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v105);
  int v99 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v100 = a2;
  v99(boxed_opaque_existential_1, a2, v10);
  uint64_t v94 = v21;
  uint64_t v104 = _JSONKeyedEncodingContainer._converted(_:)(v105, v18, v19, v20);
  uint64_t v24 = v23;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
  uint64_t v25 = v7[1];
  if (*(_BYTE *)(v25 + 32) != 4)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }

  uint64_t v26 = *(void *)(v25 + 16);
  if (*(void *)(v26 + 16))
  {
    uint64_t v27 = *(void *)(v25 + 24);
    outlined copy of JSONReference.Backing(*(void *)(v25 + 16), v27, 4);
    swift_bridgeObjectRetain();
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v104, v24);
    if ((v29 & 1) != 0)
    {
      uint64_t v30 = *(void *)(*(void *)(v26 + 56) + 8 * v28);
      swift_retain();
      outlined consume of JSONReference.Backing(v26, v27, 4);
      swift_bridgeObjectRelease_n();
      if (*(_BYTE *)(v30 + 32) == 4)
      {
LABEL_54:
        uint64_t v67 = *v7;
        unint64_t v68 = v7[2];
        v99((uint64_t *)v17, v100, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0LL, 1LL, v10);
        uint64_t v70 = v101;
        uint64_t v69 = v102;
        uint64_t v71 = v103;
        (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v101, v17, v103);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v70, 1LL, v10) == 1)
        {
          unint64_t v72 = *(void (**)(char *, uint64_t))(v69 + 8);
          swift_retain();
          v72(v17, v71);
          v72(v70, v71);
          swift_retain();
LABEL_62:
          v105[0] = v67;
          v105[1] = v30;
          _OWORD v105[2] = v68;
          uint64_t v85 = type metadata accessor for _JSONKeyedEncodingContainer(0LL, v98, v96, v73);
          MEMORY[0x186E20D4C](&protocol conformance descriptor for _JSONKeyedEncodingContainer<A>, v85);
          return KeyedEncodingContainer.init<A>(_:)();
        }

        uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        int v75 = v70;
        uint64_t v76 = v95;
        v74(v95, v75, v10);
        uint64_t v77 = v69;
        uint64_t v78 = (uint64_t *)swift_allocObject();
        uint64_t v79 = v94;
        v78[5] = v10;
        v78[6] = v79;
        uint64_t v80 = __swift_allocate_boxed_opaque_existential_1(v78 + 2);
        v74((char *)v80, v76, v10);
        uint64_t v81 = *(void (**)(char *, uint64_t))(v77 + 8);
        swift_retain();
        v81(v17, v71);
        v78[7] = v68;
        if (v68 >> 62)
        {
          if (v68 >> 62 != 1)
          {
            uint64_t v84 = 1LL;
            goto LABEL_61;
          }

          uint64_t v82 = (uint64_t *)((v68 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        }

        else
        {
          uint64_t v82 = (uint64_t *)(v68 + 64);
        }

        uint64_t v83 = *v82;
        swift_retain();
        uint64_t v84 = v83 + 1;
        if (!__OFADD__(v83, 1LL))
        {
LABEL_61:
          v78[8] = v84;
          unint64_t v68 = (unint64_t)v78;
          goto LABEL_62;
        }

        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }

      __break(1u);
    }

    outlined consume of JSONReference.Backing(v26, v27, 4);
    swift_bridgeObjectRelease();
  }

  type metadata accessor for JSONReference();
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = MEMORY[0x18961AFF0];
  *(void *)(v31 + 24) = 0LL;
  *(_BYTE *)(v31 + 32) = 4;
  if (*(_BYTE *)(v25 + 32) != 4)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }

  uint64_t v30 = v31;
  uint64_t v32 = *(void *)(v25 + 16);
  *(void *)(v25 + 16) = 0LL;
  *(void *)(v25 + 24) = 0LL;
  *(_BYTE *)(v25 + 32) = 7;
  swift_retain_n();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v105[0] = v32;
  unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v104, v24);
  uint64_t v36 = *(void *)(v32 + 16);
  BOOL v37 = (v34 & 1) == 0;
  uint64_t v38 = v36 + v37;
  if (__OFADD__(v36, v37))
  {
    __break(1u);
  }

  else
  {
    if (*(void *)(v32 + 24) < v38)
    {
      char v39 = v34;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v38,  isUniquelyReferenced_nonNull_native);
      uint64_t v40 = v105[0];
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v104, v24);
      if ((v39 & 1) != (v42 & 1)) {
        goto LABEL_69;
      }
      unint64_t v35 = v41;
      if ((v39 & 1) == 0) {
        goto LABEL_52;
      }
LABEL_15:
      uint64_t v43 = *(void *)(v40 + 56);
      uint64_t v44 = 8 * v35;
      swift_release();
      *(void *)(v43 + v44) = v30;
LABEL_53:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v64 = *(void *)(v25 + 16);
      uint64_t v65 = *(void *)(v25 + 24);
      *(void *)(v25 + 16) = v40;
      *(void *)(v25 + 24) = 0LL;
      char v66 = *(_BYTE *)(v25 + 32);
      *(_BYTE *)(v25 + 32) = 4;
      outlined consume of JSONReference.Backing(v64, v65, v66);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_54;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v40 = v32;
      if ((v34 & 1) != 0) {
        goto LABEL_15;
      }
LABEL_52:
      specialized _NativeDictionary._insert(at:key:value:)(v35, v104, v24, v30, v40);
      swift_bridgeObjectRetain();
      goto LABEL_53;
    }
  }

  unint64_t v88 = v35;
  int v89 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v45 = static _DictionaryStorage.copy(original:)();
  uint64_t v40 = v45;
  uint64_t v46 = *(void *)(v32 + 16);
  if (!v46)
  {
LABEL_51:
    swift_bridgeObjectRelease();
    unint64_t v35 = v88;
    if ((v89 & 1) != 0) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }

  uint64_t v47 = (void *)(v45 + 64);
  unint64_t v48 = (unint64_t)((1LL << *(_BYTE *)(v40 + 32)) + 63) >> 6;
  if (v40 != v32 || (unint64_t)v47 >= v32 + 64 + 8 * v48)
  {
    memmove(v47, (const void *)(v32 + 64), 8 * v48);
    uint64_t v46 = *(void *)(v32 + 16);
  }

  int64_t v49 = 0LL;
  *(void *)(v40 + 16) = v46;
  uint64_t v50 = 1LL << *(_BYTE *)(v32 + 32);
  uint64_t v51 = -1LL;
  if (v50 < 64) {
    uint64_t v51 = ~(-1LL << v50);
  }
  unint64_t v52 = v51 & *(void *)(v32 + 64);
  uint64_t v90 = v32 + 64;
  int64_t v91 = (unint64_t)(v50 + 63) >> 6;
  while (1)
  {
    if (v52)
    {
      uint64_t v92 = (v52 - 1) & v52;
      int64_t v93 = v49;
      unint64_t v53 = __clz(__rbit64(v52)) | (v49 << 6);
      goto LABEL_25;
    }

    int64_t v60 = v49 + 1;
    if (__OFADD__(v49, 1LL)) {
      goto LABEL_65;
    }
    if (v60 >= v91) {
      goto LABEL_51;
    }
    unint64_t v61 = *(void *)(v90 + 8 * v60);
    int64_t v62 = v49 + 1;
    if (!v61)
    {
      int64_t v62 = v49 + 2;
      if (v49 + 2 >= v91) {
        goto LABEL_51;
      }
      unint64_t v61 = *(void *)(v90 + 8 * v62);
      if (!v61)
      {
        int64_t v62 = v49 + 3;
        if (v49 + 3 >= v91) {
          goto LABEL_51;
        }
        unint64_t v61 = *(void *)(v90 + 8 * v62);
        if (!v61)
        {
          int64_t v62 = v49 + 4;
          if (v49 + 4 >= v91) {
            goto LABEL_51;
          }
          unint64_t v61 = *(void *)(v90 + 8 * v62);
          if (!v61)
          {
            int64_t v62 = v49 + 5;
            if (v49 + 5 >= v91) {
              goto LABEL_51;
            }
            unint64_t v61 = *(void *)(v90 + 8 * v62);
            if (!v61)
            {
              int64_t v62 = v49 + 6;
              if (v49 + 6 >= v91) {
                goto LABEL_51;
              }
              unint64_t v61 = *(void *)(v90 + 8 * v62);
              if (!v61)
              {
                int64_t v62 = v49 + 7;
                if (v49 + 7 >= v91) {
                  goto LABEL_51;
                }
                unint64_t v61 = *(void *)(v90 + 8 * v62);
                if (!v61)
                {
                  int64_t v62 = v49 + 8;
                  if (v49 + 8 >= v91) {
                    goto LABEL_51;
                  }
                  unint64_t v61 = *(void *)(v90 + 8 * v62);
                  if (!v61) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

unint64_t _JSONKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = v3;
  int v89 = a3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v88 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v92 = *(void *)(v10 - 8);
  uint64_t v93 = v10;
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v94 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v80 - v13;
  uint64_t v15 = *v4;
  uint64_t v16 = v4[1];
  unint64_t v17 = v4[2];
  uint64_t v18 = *(void *)(a2 + 24);
  v96[3] = v7;
  v96[4] = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v96);
  uint64_t v90 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v91 = a1;
  v90(boxed_opaque_existential_1, a1, v7);
  uint64_t v87 = v18;
  uint64_t v95 = _JSONKeyedEncodingContainer._converted(_:)(v96, v15, v16, v17);
  uint64_t v21 = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
  uint64_t v22 = v4[1];
  if (*(_BYTE *)(v22 + 32) != 4)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }

  uint64_t v23 = *(void *)(v22 + 16);
  if (*(void *)(v23 + 16))
  {
    uint64_t v24 = *(void *)(v22 + 24);
    outlined copy of JSONReference.Backing(*(void *)(v22 + 16), v24, 4);
    swift_bridgeObjectRetain();
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v21);
    if ((v26 & 1) != 0)
    {
      uint64_t v27 = *(void *)(*(void *)(v23 + 56) + 8 * v25);
      swift_retain();
      outlined consume of JSONReference.Backing(v23, v24, 4);
      swift_bridgeObjectRelease_n();
      uint64_t v24 = (uint64_t)v94;
      if (*(_BYTE *)(v27 + 32) == 3)
      {
LABEL_54:
        uint64_t v64 = *v4;
        unint64_t v65 = v4[2];
        v90((uint64_t *)v14, v91, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v14, 0LL, 1LL, v7);
        uint64_t v67 = v92;
        uint64_t v66 = v93;
        (*(void (**)(uint64_t, char *, uint64_t))(v92 + 16))(v24, v14, v93);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v24, 1LL, v7) == 1)
        {
          unint64_t v68 = *(void (**)(char *, uint64_t))(v67 + 8);
          swift_retain();
          v68(v14, v66);
          v68((char *)v24, v66);
          swift_retain();
LABEL_62:
          uint64_t v78 = v89;
          v89[3] = (uint64_t)&unk_189C763D8;
          unint64_t result = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
          v78[4] = result;
          uint64_t *v78 = v64;
          v78[1] = v27;
          _OWORD v78[2] = v65;
          return result;
        }

        uint64_t v69 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
        uint64_t v70 = v88;
        v69(v88, v24, v7);
        uint64_t v71 = (uint64_t *)swift_allocObject();
        uint64_t v72 = v87;
        v71[5] = v7;
        v71[6] = v72;
        uint64_t v73 = __swift_allocate_boxed_opaque_existential_1(v71 + 2);
        v69((char *)v73, (uint64_t)v70, v7);
        uint64_t v74 = *(void (**)(char *, uint64_t))(v67 + 8);
        swift_retain();
        v74(v14, v66);
        v71[7] = v65;
        if (v65 >> 62)
        {
          if (v65 >> 62 != 1)
          {
            uint64_t v77 = 1LL;
            goto LABEL_61;
          }

          int v75 = (uint64_t *)((v65 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        }

        else
        {
          int v75 = (uint64_t *)(v65 + 64);
        }

        uint64_t v76 = *v75;
        swift_retain();
        uint64_t v77 = v76 + 1;
        if (!__OFADD__(v76, 1LL))
        {
LABEL_61:
          v71[8] = v77;
          unint64_t v65 = (unint64_t)v71;
          goto LABEL_62;
        }

        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }

      __break(1u);
    }

    outlined consume of JSONReference.Backing(v23, v24, 4);
    swift_bridgeObjectRelease();
  }

  type metadata accessor for JSONReference();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = MEMORY[0x18961AFE8];
  *(void *)(v28 + 24) = 0LL;
  *(_BYTE *)(v28 + 32) = 3;
  if (*(_BYTE *)(v22 + 32) != 4)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }

  uint64_t v27 = v28;
  uint64_t v29 = *(void *)(v22 + 16);
  *(void *)(v22 + 16) = 0LL;
  *(void *)(v22 + 24) = 0LL;
  *(_BYTE *)(v22 + 32) = 7;
  swift_retain_n();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v96[0] = v29;
  unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v21);
  uint64_t v33 = *(void *)(v29 + 16);
  BOOL v34 = (v31 & 1) == 0;
  uint64_t v35 = v33 + v34;
  if (__OFADD__(v33, v34))
  {
    __break(1u);
  }

  else
  {
    if (*(void *)(v29 + 24) < v35)
    {
      char v36 = v31;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v35,  isUniquelyReferenced_nonNull_native);
      uint64_t v37 = v96[0];
      unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v21);
      if ((v36 & 1) != (v39 & 1)) {
        goto LABEL_69;
      }
      unint64_t v32 = v38;
      if ((v36 & 1) == 0) {
        goto LABEL_52;
      }
LABEL_15:
      uint64_t v40 = *(void *)(v37 + 56);
      uint64_t v41 = 8 * v32;
      swift_release();
      *(void *)(v40 + v41) = v27;
LABEL_53:
      uint64_t v24 = (uint64_t)v94;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v61 = *(void *)(v22 + 16);
      uint64_t v62 = *(void *)(v22 + 24);
      *(void *)(v22 + 16) = v37;
      *(void *)(v22 + 24) = 0LL;
      char v63 = *(_BYTE *)(v22 + 32);
      *(_BYTE *)(v22 + 32) = 4;
      outlined consume of JSONReference.Backing(v61, v62, v63);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_54;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v37 = v29;
      if ((v31 & 1) != 0) {
        goto LABEL_15;
      }
LABEL_52:
      specialized _NativeDictionary._insert(at:key:value:)(v32, v95, v21, v27, v37);
      swift_bridgeObjectRetain();
      goto LABEL_53;
    }
  }

  unint64_t v81 = v32;
  int v82 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v42 = static _DictionaryStorage.copy(original:)();
  uint64_t v37 = v42;
  uint64_t v43 = *(void *)(v29 + 16);
  if (!v43)
  {
LABEL_51:
    swift_bridgeObjectRelease();
    unint64_t v32 = v81;
    if ((v82 & 1) != 0) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }

  uint64_t v44 = (void *)(v42 + 64);
  unint64_t v45 = (unint64_t)((1LL << *(_BYTE *)(v37 + 32)) + 63) >> 6;
  if (v37 != v29 || (unint64_t)v44 >= v29 + 64 + 8 * v45)
  {
    memmove(v44, (const void *)(v29 + 64), 8 * v45);
    uint64_t v43 = *(void *)(v29 + 16);
  }

  int64_t v46 = 0LL;
  *(void *)(v37 + 16) = v43;
  uint64_t v47 = 1LL << *(_BYTE *)(v29 + 32);
  uint64_t v48 = -1LL;
  if (v47 < 64) {
    uint64_t v48 = ~(-1LL << v47);
  }
  unint64_t v49 = v48 & *(void *)(v29 + 64);
  uint64_t v83 = v29 + 64;
  int64_t v84 = (unint64_t)(v47 + 63) >> 6;
  while (1)
  {
    if (v49)
    {
      uint64_t v85 = (v49 - 1) & v49;
      int64_t v86 = v46;
      unint64_t v50 = __clz(__rbit64(v49)) | (v46 << 6);
      goto LABEL_25;
    }

    int64_t v57 = v46 + 1;
    if (__OFADD__(v46, 1LL)) {
      goto LABEL_65;
    }
    if (v57 >= v84) {
      goto LABEL_51;
    }
    unint64_t v58 = *(void *)(v83 + 8 * v57);
    int64_t v59 = v46 + 1;
    if (!v58)
    {
      int64_t v59 = v46 + 2;
      if (v46 + 2 >= v84) {
        goto LABEL_51;
      }
      unint64_t v58 = *(void *)(v83 + 8 * v59);
      if (!v58)
      {
        int64_t v59 = v46 + 3;
        if (v46 + 3 >= v84) {
          goto LABEL_51;
        }
        unint64_t v58 = *(void *)(v83 + 8 * v59);
        if (!v58)
        {
          int64_t v59 = v46 + 4;
          if (v46 + 4 >= v84) {
            goto LABEL_51;
          }
          unint64_t v58 = *(void *)(v83 + 8 * v59);
          if (!v58)
          {
            int64_t v59 = v46 + 5;
            if (v46 + 5 >= v84) {
              goto LABEL_51;
            }
            unint64_t v58 = *(void *)(v83 + 8 * v59);
            if (!v58)
            {
              int64_t v59 = v46 + 6;
              if (v46 + 6 >= v84) {
                goto LABEL_51;
              }
              unint64_t v58 = *(void *)(v83 + 8 * v59);
              if (!v58)
              {
                int64_t v59 = v46 + 7;
                if (v46 + 7 >= v84) {
                  goto LABEL_51;
                }
                unint64_t v58 = *(void *)(v83 + 8 * v59);
                if (!v58)
                {
                  int64_t v59 = v46 + 8;
                  if (v46 + 8 >= v84) {
                    goto LABEL_51;
                  }
                  unint64_t v58 = *(void *)(v83 + 8 * v59);
                  if (!v58) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t _JSONKeyedEncodingContainer.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  unint64_t v5 = v1[2];
  v17[3] = &type metadata for _CodingKey;
  void v17[4] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v6 = swift_allocObject();
  v17[0] = v6;
  *(_OWORD *)(v6 + 16) = xmmword_18372EE40;
  *(void *)(v6 + 32) = 0LL;
  *(_BYTE *)(v6 + 40) = 0;
  swift_retain();
  uint64_t v7 = _JSONKeyedEncodingContainer._converted(_:)(v17, v3, v4, v5);
  uint64_t v9 = v8;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  uint64_t v10 = *v1;
  uint64_t v11 = v1[1];
  uint64_t v12 = *(void *)(v10 + 144);
  uint64_t v13 = type metadata accessor for __JSONReferencingEncoder();
  uint64_t v14 = swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v15 = specialized __JSONReferencingEncoder.init(referencing:key:convertedKey:codingPathNode:wrapping:)( v3,  0x7265707573LL,  0xE500000000000000LL,  0LL,  0,  v7,  v9,  v12,  v11,  v14);
  a1[3] = v13;
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type __JSONReferencingEncoder and conformance __JSONEncoder,  (uint64_t (*)(uint64_t))type metadata accessor for __JSONReferencingEncoder,  (uint64_t)&protocol conformance descriptor for __JSONEncoder);
  a1[4] = result;
  *a1 = v15;
  return result;
}

uint64_t _JSONKeyedEncodingContainer.superEncoder(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](a1);
  int v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = *v3;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v13((char *)&v29 - v9, a1, v6);
  uint64_t v14 = v3[1];
  unint64_t v15 = v3[2];
  uint64_t v16 = *(void *)(a2 + 24);
  void v34[3] = v6;
  v34[4] = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
  v13((char *)boxed_opaque_existential_1, a1, v6);
  swift_retain();
  uint64_t v18 = _JSONKeyedEncodingContainer._converted(_:)(v34, v11, v14, v15);
  uint64_t v29 = v19;
  uint64_t v30 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  uint64_t v20 = *v3;
  uint64_t v21 = v3[1];
  unint64_t v22 = *(void *)(v20 + 144);
  uint64_t v23 = type metadata accessor for __JSONReferencingEncoder();
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = (uint64_t)v31;
  v13(v31, (uint64_t)v10, v6);
  swift_retain();
  swift_retain();
  uint64_t v26 = specialized __JSONReferencingEncoder.init(referencing:key:convertedKey:codingPathNode:wrapping:)( v11,  v25,  v30,  v29,  v22,  v21,  v24,  v6,  v16);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v6);
  uint64_t v27 = v33;
  v33[3] = v23;
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type __JSONReferencingEncoder and conformance __JSONEncoder,  (uint64_t (*)(uint64_t))type metadata accessor for __JSONReferencingEncoder,  (uint64_t)&protocol conformance descriptor for __JSONEncoder);
  v27[4] = result;
  *uint64_t v27 = v26;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.codingPath.getter in conformance _JSONKeyedEncodingContainer<A>()
{
  return _JSONKeyedEncodingContainer.codingPath.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance _JSONKeyedEncodingContainer<A>( uint64_t a1, uint64_t a2)
{
  return _JSONKeyedEncodingContainer.encodeNil(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

void *protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( int64_t a1, uint64_t a2, double a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

void *protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( int64_t a1, uint64_t a2, float a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( char a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( __int16 a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( int a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

void *protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  return _JSONKeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( a1,  a2,  a3,  a4,  MEMORY[0x18961A238]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( a1,  a2,  a3,  a4,  MEMORY[0x18961A268]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( a1,  a2,  a3,  a4,  MEMORY[0x18961A290]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( __int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( a1,  a2,  a3,  a4,  MEMORY[0x18961A258]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( a1,  a2,  a3,  a4,  MEMORY[0x18961A278]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( a1,  a2,  a3,  a4,  MEMORY[0x18961A260]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( a1,  a2,  a3,  a4,  MEMORY[0x18961A288]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( __int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FF);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _JSONKeyedEncodingContainer<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4, a6);
}

uint64_t _JSONUnkeyedEncodingContainer.encodeNil()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  type metadata accessor for JSONReference();
  uint64_t result = swift_initStaticObject();
  if (*(_BYTE *)(v1 + 32) == 3)
  {
    uint64_t v6 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0LL;
    *(void *)(v1 + 24) = 0LL;
    *(_BYTE *)(v1 + 32) = 7;
    MEMORY[0x186E1BAC0]();
    if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v3 = *(void *)(v1 + 16);
    uint64_t v4 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v6;
    *(void *)(v1 + 24) = 0LL;
    char v5 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 32) = 3;
    return outlined consume of JSONReference.Backing(v3, v4, v5);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t _JSONUnkeyedEncodingContainer.encode(_:)()
{
  uint64_t v1 = *(void *)(v0 + 8);
  type metadata accessor for JSONReference();
  uint64_t result = swift_initStaticObject();
  if (*(_BYTE *)(v1 + 32) == 3)
  {
    uint64_t v7 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0LL;
    *(void *)(v1 + 24) = 0LL;
    *(_BYTE *)(v1 + 32) = 7;
    uint64_t v3 = swift_retain_n();
    MEMORY[0x186E1BAC0](v3);
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v4 = *(void *)(v1 + 16);
    uint64_t v5 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v7;
    *(void *)(v1 + 24) = 0LL;
    char v6 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v4, v5, v6);
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *(_BYTE *)(result + 32) = 1;
  if (*(_BYTE *)(v1 + 32) == 3)
  {
    uint64_t v10 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0LL;
    *(void *)(v1 + 24) = 0LL;
    *(_BYTE *)(v1 + 32) = 7;
    char v6 = swift_retain();
    MEMORY[0x186E1BAC0](v6);
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v8 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v10;
    *(void *)(v1 + 24) = 0LL;
    uint64_t v9 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *(_BYTE *)(result + 32) = 1;
  if (*(_BYTE *)(v1 + 32) == 3)
  {
    uint64_t v10 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0LL;
    *(void *)(v1 + 24) = 0LL;
    *(_BYTE *)(v1 + 32) = 7;
    char v6 = swift_retain();
    MEMORY[0x186E1BAC0](v6);
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v8 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v10;
    *(void *)(v1 + 24) = 0LL;
    uint64_t v9 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *(_BYTE *)(result + 32) = 1;
  if (*(_BYTE *)(v1 + 32) == 3)
  {
    uint64_t v10 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0LL;
    *(void *)(v1 + 24) = 0LL;
    *(_BYTE *)(v1 + 32) = 7;
    char v6 = swift_retain();
    MEMORY[0x186E1BAC0](v6);
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v8 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v10;
    *(void *)(v1 + 24) = 0LL;
    uint64_t v9 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *(_BYTE *)(result + 32) = 1;
  if (*(_BYTE *)(v1 + 32) == 3)
  {
    uint64_t v10 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0LL;
    *(void *)(v1 + 24) = 0LL;
    *(_BYTE *)(v1 + 32) = 7;
    char v6 = swift_retain();
    MEMORY[0x186E1BAC0](v6);
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v8 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v10;
    *(void *)(v1 + 24) = 0LL;
    uint64_t v9 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *(_BYTE *)(result + 32) = 1;
  if (*(_BYTE *)(v1 + 32) == 3)
  {
    uint64_t v10 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0LL;
    *(void *)(v1 + 24) = 0LL;
    *(_BYTE *)(v1 + 32) = 7;
    char v6 = swift_retain();
    MEMORY[0x186E1BAC0](v6);
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v8 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v10;
    *(void *)(v1 + 24) = 0LL;
    uint64_t v9 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t _JSONUnkeyedEncodingContainer.encode(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 8);
  type metadata accessor for JSONReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = 0;
  if (*(_BYTE *)(v5 + 32) == 3)
  {
    uint64_t v11 = *(void *)(v5 + 16);
    *(void *)(v5 + 16) = 0LL;
    *(void *)(v5 + 24) = 0LL;
    *(_BYTE *)(v5 + 32) = 7;
    swift_bridgeObjectRetain();
    uint64_t v7 = swift_retain();
    MEMORY[0x186E1BAC0](v7);
    if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v8 = *(void *)(v5 + 16);
    uint64_t v9 = *(void *)(v5 + 24);
    *(void *)(v5 + 16) = v11;
    *(void *)(v5 + 24) = 0LL;
    char v10 = *(_BYTE *)(v5 + 32);
    *(_BYTE *)(v5 + 32) = 3;
    outlined consume of JSONReference.Backing(v8, v9, v10);
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *_JSONUnkeyedEncodingContainer.encode(_:)(float a1)
{
  char v6 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = v6[1];
  uint64_t result = outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((__int128 *)(v4 + 72), v17);
  unint64_t v8 = *(void *)(v4 + 144);
  unint64_t v9 = *(void *)(v5 + 16);
  int v10 = *(unsigned __int8 *)(v5 + 32);
  if (v10 == 4)
  {
    uint64_t v11 = *(void *)(v9 + 16);
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v17,  (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
    goto LABEL_6;
  }

  if (v10 != 3)
  {
    __break(1u);
    goto LABEL_15;
  }

  if (!(v9 >> 62))
  {
    uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v17,  (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }

  uint64_t v16 = *(void *)(v5 + 24);
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v17,  (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  swift_retain();
  outlined copy of JSONReference.Backing(v9, v16, 3);
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  outlined consume of JSONReference.Backing(v9, v16, 3);
LABEL_7:
  specialized static JSONReference.number<A, B>(from:with:for:_:)(v17, v8, v11, 0LL, 0LL, 2, a1);
  swift_release();
  uint64_t result = outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v17,  (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  if (v2) {
    return result;
  }
  if (*(_BYTE *)(v5 + 32) != 3)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t v18 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0LL;
  *(void *)(v5 + 24) = 0LL;
  *(_BYTE *)(v5 + 32) = 7;
  uint64_t v12 = swift_retain();
  MEMORY[0x186E1BAC0](v12);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v13 = *(void *)(v5 + 16);
  uint64_t v14 = *(void *)(v5 + 24);
  *(void *)(v5 + 16) = v18;
  *(void *)(v5 + 24) = 0LL;
  char v15 = *(_BYTE *)(v5 + 32);
  *(_BYTE *)(v5 + 32) = 3;
  outlined consume of JSONReference.Backing(v13, v14, v15);
  return (void *)swift_release();
}

void *_JSONUnkeyedEncodingContainer.encode(_:)(double a1)
{
  char v6 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = v6[1];
  uint64_t result = outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((__int128 *)(v4 + 72), v17);
  unint64_t v8 = *(void *)(v4 + 144);
  unint64_t v9 = *(void *)(v5 + 16);
  int v10 = *(unsigned __int8 *)(v5 + 32);
  if (v10 == 4)
  {
    uint64_t v11 = *(void *)(v9 + 16);
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v17,  (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
    goto LABEL_6;
  }

  if (v10 != 3)
  {
    __break(1u);
    goto LABEL_15;
  }

  if (!(v9 >> 62))
  {
    uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v17,  (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }

  uint64_t v16 = *(void *)(v5 + 24);
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v17,  (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  swift_retain();
  outlined copy of JSONReference.Backing(v9, v16, 3);
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  outlined consume of JSONReference.Backing(v9, v16, 3);
LABEL_7:
  specialized static JSONReference.number<A, B>(from:with:for:_:)(v17, v8, v11, 0LL, 0LL, 2, a1);
  swift_release();
  uint64_t result = outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v17,  (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  if (v2) {
    return result;
  }
  if (*(_BYTE *)(v5 + 32) != 3)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t v18 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0LL;
  *(void *)(v5 + 24) = 0LL;
  *(_BYTE *)(v5 + 32) = 7;
  uint64_t v12 = swift_retain();
  MEMORY[0x186E1BAC0](v12);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v13 = *(void *)(v5 + 16);
  uint64_t v14 = *(void *)(v5 + 24);
  *(void *)(v5 + 16) = v18;
  *(void *)(v5 + 24) = 0LL;
  char v15 = *(_BYTE *)(v5 + 32);
  *(_BYTE *)(v5 + 32) = 3;
  outlined consume of JSONReference.Backing(v13, v14, v15);
  return (void *)swift_release();
}

uint64_t _JSONUnkeyedEncodingContainer.encode<A>(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v4;
  char v6 = v3;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v3;
  uint64_t result = (*(uint64_t (**)(char *))(v9 + 16))(v11);
  unint64_t v14 = *(void *)(v12 + 144);
  uint64_t v15 = v6[1];
  uint64_t v16 = *(void *)(v15 + 16);
  int v17 = *(unsigned __int8 *)(v15 + 32);
  if (v17 == 4)
  {
    uint64_t v18 = *(void *)(v16 + 16);
    goto LABEL_6;
  }

  if (v17 != 3)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  if (!((unint64_t)v16 >> 62))
  {
    uint64_t v18 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }

  uint64_t v26 = *(void *)(v15 + 24);
  if (v16 >= 0) {
    uint64_t v27 = v16 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v27 = *(void *)(v15 + 16);
  }
  uint64_t v30 = v26;
  uint64_t v31 = v27;
  uint64_t v29 = v16;
  swift_retain();
  outlined copy of JSONReference.Backing(v16, v26, 3);
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  outlined consume of JSONReference.Backing(v29, v30, 3);
LABEL_7:
  uint64_t v19 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)((uint64_t)v11, v14, v18, 0LL, 0LL, 2, a2, a3);
  if (v5)
  {
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a2);
  }

  if (!v19)
  {
    type metadata accessor for JSONReference();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = MEMORY[0x18961AFF0];
    *(void *)(v20 + 24) = 0LL;
    *(_BYTE *)(v20 + 32) = 4;
  }

  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a2);
  uint64_t v21 = v6[1];
  if (*(_BYTE *)(v21 + 32) != 3) {
    goto LABEL_20;
  }
  uint64_t v32 = *(void *)(v21 + 16);
  *(void *)(v21 + 16) = 0LL;
  *(void *)(v21 + 24) = 0LL;
  *(_BYTE *)(v21 + 32) = 7;
  uint64_t v22 = swift_retain();
  MEMORY[0x186E1BAC0](v22);
  if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v32 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v23 = *(void *)(v21 + 16);
  uint64_t v24 = *(void *)(v21 + 24);
  *(void *)(v21 + 16) = v32;
  *(void *)(v21 + 24) = 0LL;
  char v25 = *(_BYTE *)(v21 + 32);
  *(_BYTE *)(v21 + 32) = 3;
  outlined consume of JSONReference.Backing(v23, v24, v25);
  return swift_release();
}

void _JSONUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = v3[1];
  unint64_t v9 = v7 + 16;
  unint64_t v8 = *(void *)(v7 + 16);
  int v10 = *(unsigned __int8 *)(v7 + 32);
  if (v10 == 4)
  {
    uint64_t v11 = *(void *)(v8 + 16);
    goto LABEL_6;
  }

  if (v10 != 3) {
    goto LABEL_19;
  }
  if (v8 >> 62) {
    goto LABEL_17;
  }
  uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_6:
  while (1)
  {
    type metadata accessor for JSONReference();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = MEMORY[0x18961AFF0];
    *(void *)(v12 + 24) = 0LL;
    *(_BYTE *)(v12 + 32) = 4;
    if (*(_BYTE *)(v7 + 32) != 3) {
      break;
    }
    uint64_t v23 = *(void *)(v7 + 16);
    *(void *)unint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v7 + 32) = 7;
    uint64_t v13 = swift_retain();
    MEMORY[0x186E1BAC0](v13);
    if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v14 = *(void *)(v7 + 16);
    uint64_t v15 = *(void *)(v7 + 24);
    *(void *)(v7 + 16) = v23;
    *(void *)(v7 + 24) = 0LL;
    char v16 = *(_BYTE *)(v7 + 32);
    *(_BYTE *)(v7 + 32) = 3;
    outlined consume of JSONReference.Backing(v14, v15, v16);
    unint64_t v8 = *v4;
    unint64_t v9 = v4[2];
    uint64_t v4 = (unint64_t *)swift_allocObject();
    v4[5] = (unint64_t)&type metadata for _CodingKey;
    v4[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v17 = swift_allocObject();
    _OWORD v4[2] = v17;
    *(void *)(v17 + 24) = 0LL;
    *(void *)(v17 + 32) = 0LL;
    *(void *)(v17 + 16) = v11;
    *(_BYTE *)(v17 + 40) = 2;
    v4[7] = v9;
    if (v9 >> 62)
    {
      uint64_t v19 = 0LL;
      if (v9 >> 62 != 1) {
        goto LABEL_14;
      }
      uint64_t v20 = (uint64_t *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v20 = (uint64_t *)(v9 + 64);
    }

    uint64_t v19 = *v20;
    swift_retain();
LABEL_14:
    if (!__OFADD__(v19, 1LL))
    {
      v4[8] = v19 + 1;
      uint64_t v21 = type metadata accessor for _JSONKeyedEncodingContainer(0LL, a2, a3, v18);
      swift_retain();
      MEMORY[0x186E20D4C](&protocol conformance descriptor for _JSONKeyedEncodingContainer<A>, v21);
      KeyedEncodingContainer.init<A>(_:)();
      return;
    }

    __break(1u);
LABEL_17:
    uint64_t v22 = *(void *)(v7 + 24);
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    outlined consume of JSONReference.Backing(v8, v22, 3);
  }

  __break(1u);
LABEL_19:
  __break(1u);
}

void _JSONUnkeyedEncodingContainer.nestedUnkeyedContainer()(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  unint64_t v4 = v1[1];
  unint64_t v6 = v4 + 16;
  unint64_t v5 = *(void *)(v4 + 16);
  int v7 = *(unsigned __int8 *)(v4 + 32);
  if (v7 == 4)
  {
    uint64_t v8 = *(void *)(v5 + 16);
    goto LABEL_6;
  }

  if (v7 != 3) {
    goto LABEL_19;
  }
  if (v5 >> 62) {
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_6:
  while (1)
  {
    type metadata accessor for JSONReference();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = MEMORY[0x18961AFE8];
    *(void *)(v9 + 24) = 0LL;
    *(_BYTE *)(v9 + 32) = 3;
    if (*(_BYTE *)(v4 + 32) != 3) {
      break;
    }
    uint64_t v10 = v9;
    uint64_t v19 = *(void *)(v4 + 16);
    *(void *)unint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v4 + 32) = 7;
    uint64_t v11 = swift_retain();
    MEMORY[0x186E1BAC0](v11);
    if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v12 = *(void *)(v4 + 16);
    uint64_t v13 = *(void *)(v4 + 24);
    *(void *)(v4 + 16) = v19;
    *(void *)(v4 + 24) = 0LL;
    char v14 = *(_BYTE *)(v4 + 32);
    *(_BYTE *)(v4 + 32) = 3;
    outlined consume of JSONReference.Backing(v12, v13, v14);
    unint64_t v5 = *v2;
    unint64_t v6 = v2[2];
    uint64_t v2 = (unint64_t *)swift_allocObject();
    v2[5] = (unint64_t)&type metadata for _CodingKey;
    v2[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v15 = swift_allocObject();
    v2[2] = v15;
    *(void *)(v15 + 24) = 0LL;
    *(void *)(v15 + 32) = 0LL;
    *(void *)(v15 + 16) = v8;
    *(_BYTE *)(v15 + 40) = 2;
    v2[7] = v6;
    if (v6 >> 62)
    {
      uint64_t v16 = 0LL;
      if (v6 >> 62 != 1) {
        goto LABEL_14;
      }
      uint64_t v17 = (uint64_t *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v17 = (uint64_t *)(v6 + 64);
    }

    uint64_t v16 = *v17;
    swift_retain();
LABEL_14:
    if (!__OFADD__(v16, 1LL))
    {
      v2[8] = v16 + 1;
      a1[3] = (unint64_t)&unk_189C763D8;
      a1[4] = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
      *a1 = v5;
      a1[1] = v10;
      a1[2] = (unint64_t)v2;
      swift_retain();
      return;
    }

    __break(1u);
LABEL_17:
    uint64_t v18 = *(void *)(v4 + 24);
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    outlined consume of JSONReference.Backing(v5, v18, 3);
  }

  __break(1u);
LABEL_19:
  __break(1u);
}

void _JSONUnkeyedEncodingContainer.superEncoder()(uint64_t *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  unint64_t v5 = *(void *)(v3 + 16);
  int v6 = *(unsigned __int8 *)(v3 + 32);
  if (v6 == 4)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    goto LABEL_6;
  }

  if (v6 == 3)
  {
    if (v5 >> 62)
    {
      uint64_t v11 = *(void *)(v3 + 24);
      swift_retain();
      outlined copy of JSONReference.Backing(v5, v11, 3);
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of JSONReference.Backing(v5, v11, 3);
      goto LABEL_7;
    }

    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
LABEL_6:
    swift_retain();
LABEL_7:
    unint64_t v8 = *(void *)(v4 + 144);
    uint64_t v9 = type metadata accessor for __JSONReferencingEncoder();
    swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v10 = __JSONReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(v4, v7, v8, v3);
    a1[3] = v9;
    a1[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type __JSONReferencingEncoder and conformance __JSONEncoder,  (uint64_t (*)(uint64_t))type metadata accessor for __JSONReferencingEncoder,  (uint64_t)&protocol conformance descriptor for __JSONEncoder);
    *a1 = v10;
    return;
  }

  __break(1u);
}

uint64_t protocol witness for UnkeyedEncodingContainer.codingPath.getter in conformance _JSONUnkeyedEncodingContainer()
{
  return _CodingPathNode.path.getter(*(void *)(v0 + 16));
}

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance _JSONUnkeyedEncodingContainer()
{
  return specialized _JSONUnkeyedEncodingContainer.count.getter(*(void *)(v0 + 8));
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance _JSONUnkeyedEncodingContainer()
{
  return _JSONUnkeyedEncodingContainer.encodeNil()();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer()
{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer( uint64_t a1, uint64_t a2)
{
  return _JSONUnkeyedEncodingContainer.encode(_:)(a1, a2);
}

void *protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer( double a1)
{
  return _JSONUnkeyedEncodingContainer.encode(_:)(a1);
}

void *protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer( float a1)
{
  return _JSONUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _JSONUnkeyedEncodingContainer( uint64_t a1, uint64_t a2, void *a3)
{
  return _JSONUnkeyedEncodingContainer.encode<A>(_:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeConditional<A>(_:) in conformance _JSONUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance _JSONUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t __JSONEncoder.encodeNil()()
{
  if (((*(uint64_t (**)(void))(*v0 + 208LL))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  type metadata accessor for JSONReference();
  swift_initStaticObject();
  MEMORY[0x186E1BAC0]();
  if (*(void *)((v0[2] & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v0[2] & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
LABEL_5:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t __JSONEncoder.encode(_:)()
{
  if (((*(uint64_t (**)(void))(*v0 + 208LL))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  type metadata accessor for JSONReference();
  swift_initStaticObject();
  uint64_t v1 = swift_retain_n();
  MEMORY[0x186E1BAC0](v1);
  if (*(void *)((v0[2] & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v0[2] & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
LABEL_5:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = v0;
  if (((*(uint64_t (**)(void))(*(void *)v0 + 208LL))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  unint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v4;
  *(_BYTE *)(v5 + 32) = 1;
  int v6 = swift_retain();
  MEMORY[0x186E1BAC0](v6);
  if (*(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = v0;
  if (((*(uint64_t (**)(void))(*(void *)v0 + 208LL))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  unint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v4;
  *(_BYTE *)(v5 + 32) = 1;
  int v6 = swift_retain();
  MEMORY[0x186E1BAC0](v6);
  if (*(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = v0;
  if (((*(uint64_t (**)(void))(*(void *)v0 + 208LL))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  unint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v4;
  *(_BYTE *)(v5 + 32) = 1;
  int v6 = swift_retain();
  MEMORY[0x186E1BAC0](v6);
  if (*(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = v0;
  if (((*(uint64_t (**)(void))(*(void *)v0 + 208LL))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  unint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v4;
  *(_BYTE *)(v5 + 32) = 1;
  int v6 = swift_retain();
  MEMORY[0x186E1BAC0](v6);
  if (*(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = v0;
  if (((*(uint64_t (**)(void))(*(void *)v0 + 208LL))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  type metadata accessor for JSONReference();
  unint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v4;
  *(_BYTE *)(v5 + 32) = 1;
  int v6 = swift_retain();
  MEMORY[0x186E1BAC0](v6);
  if (*(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

uint64_t __JSONEncoder.encode(_:)(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(void))(*v2 + 208LL))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  type metadata accessor for JSONReference();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  *(_BYTE *)(v5 + 32) = 0;
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_retain();
  MEMORY[0x186E1BAC0](v6);
  if (*(void *)((v2[2] & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v2[2] & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
LABEL_5:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

uint64_t __JSONEncoder.encode(_:)(float a1)
{
  uint64_t v3 = v1;
  if (((*(uint64_t (**)(void))(*v1 + 208LL))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_4;
  }

  unint64_t v5 = v1[18];
  outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((__int128 *)(v3 + 9), v8);
  swift_retain();
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v8,  (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  specialized static JSONReference.number<A, B>(from:with:for:_:)(v8, v5, 0LL, 0LL, 0LL, 255, a1);
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v8,  (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  uint64_t v7 = swift_retain();
  MEMORY[0x186E1BAC0](v7);
  if (*(void *)((v3[2] & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v3[2] & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
    goto LABEL_7;
  }
LABEL_4:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

uint64_t __JSONEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  if (((*(uint64_t (**)(void))(*v3 + 208LL))() & 1) == 0)
  {
    __break(1u);
LABEL_9:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_6:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    return swift_release();
  }

  unint64_t v10 = v3[18];
  swift_retain();
  uint64_t v11 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(a1, v10, 0LL, 0LL, 0LL, 255, a2, a3);
  if (!v5)
  {
    if (!v11)
    {
      type metadata accessor for JSONReference();
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = MEMORY[0x18961AFF0];
      *(void *)(v12 + 24) = 0LL;
      *(_BYTE *)(v12 + 32) = 4;
    }

    swift_release();
    uint64_t v13 = swift_retain();
    MEMORY[0x186E1BAC0](v13);
    if (*(void *)((v6[2] & 0xFFFFFFFFFFFFFF8LL) + 0x10) < *(void *)((v6[2] & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }

  return swift_release();
}

uint64_t protocol witness for Encoder.codingPath.getter in conformance __JSONEncoder()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 144LL);
  swift_retain();
  uint64_t v2 = _CodingPathNode.path.getter(v1);
  swift_release();
  return v2;
}

uint64_t protocol witness for SingleValueEncodingContainer.encodeNil() in conformance __JSONEncoder()
{
  return __JSONEncoder.encodeNil()();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __JSONEncoder()
{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __JSONEncoder( uint64_t a1, uint64_t a2)
{
  return __JSONEncoder.encode(_:)(a1, a2);
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __JSONEncoder(double a1)
{
  uint64_t v4 = *v1;
  if (((*(uint64_t (**)(void))(*(void *)*v1 + 208LL))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_4;
  }

  unint64_t v5 = *(void *)(v4 + 144);
  outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((__int128 *)(v4 + 72), v7);
  swift_retain();
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v7,  (void (*)(void, void, void, void, void, void))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  specialized static JSONReference.number<A, B>(from:with:for:_:)(v7, v5, 0LL, 0LL, 0LL, 255, a1);
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( v7,  (void (*)(void, void, void, void, void, void))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  MEMORY[0x186E1BAC0](result);
  if (*(void *)((*(void *)(v4 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*(void *)(v4 + 16) & 0xFFFFFFFFFFFFFF8LL)
                                                                                     + 0x18) >> 1)
    goto LABEL_7;
LABEL_4:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __JSONEncoder(float a1)
{
  return __JSONEncoder.encode(_:)(a1);
}

uint64_t protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance __JSONEncoder( uint64_t a1, uint64_t a2, void *a3)
{
  return __JSONEncoder.encode<A>(_:)(a1, a2, a3);
}

unint64_t specialized __JSONEncoder.wrap<A>(_:for:_:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, double a6)
{
  unint64_t v8 = (void *)v6;
  unint64_t v10 = *(void **)(v6 + 32);
  uint64_t v11 = *(void *)(v6 + 40);
  int v12 = *(unsigned __int8 *)(v6 + 48);
  if (*(_BYTE *)(v6 + 48))
  {
    if (v12 != 1) {
      __asm { BR              X10 }
    }

    unint64_t v17 = v8[2];
    uint64_t v42 = v8 + 2;
    if (v17 >> 62)
    {
      outlined copy of JSONEncoder.DateEncodingStrategy(v10, v11, 1);
      swift_bridgeObjectRetain();
      uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v43 = *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_retain();
    }

    uint64_t v44 = v7;
    uint64_t v46 = v11;
    if (a5 == -1)
    {
      uint64_t v31 = v8[18];
      uint64_t v30 = v8[19];
      v8[18] = a1;
      if (a1 >> 62)
      {
        if (a1 >> 62 != 1)
        {
          uint64_t v32 = 0LL;
          uint64_t v35 = v43;
LABEL_19:
          v8[19] = v32;
          double v47 = a6;
          v48[3] = type metadata accessor for __JSONEncoder();
          v48[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder,  (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder,  (uint64_t)&protocol conformance descriptor for __JSONEncoder);
          v48[0] = v8;
          swift_retain();
          ((void (*)(double *, void *))v10)(&v47, v48);
          if (v44)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
            v8[18] = v31;
            swift_retain();
            swift_release();
            v8[19] = v30;
            swift_release();
            swift_release();
            unint64_t v29 = v8[2];
            if (v29 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }

            else
            {
              uint64_t v36 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            }

            if (v35 >= v36) {
              goto LABEL_26;
            }
            if (*v42 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v40) {
                goto LABEL_25;
              }
            }

            else if (*(void *)((*v42 & 0xFFFFFFFFFFFFF8LL) + 0x10))
            {
LABEL_25:
              unint64_t v29 = (unint64_t)v42;
              specialized RangeReplaceableCollection<>.popLast()();
              swift_release();
LABEL_26:
              swift_willThrow();
              outlined consume of JSONEncoder.DateEncodingStrategy(v10, v46, 1);
              return v29;
            }

            __break(1u);
            JUMPOUT(0x183009EC8LL);
          }

          __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
          v8[18] = v31;
          swift_retain();
          swift_release();
          v8[19] = v30;
          swift_release();
          swift_release();
          unint64_t v38 = v8[2];
          if (v38 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v39 = *(void *)((v38 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          }

          uint64_t v18 = (void *)v46;
          if (v35 < v39)
          {
            if (*v42 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v41) {
                goto LABEL_33;
              }
            }

            else if (*(void *)((*v42 & 0xFFFFFFFFFFFFF8LL) + 0x10))
            {
LABEL_33:
              unint64_t v29 = specialized RangeReplaceableCollection<>.popLast()();
              outlined consume of JSONEncoder.DateEncodingStrategy(v10, v46, 1);
              return v29;
            }

            __break(1u);
            JUMPOUT(0x183009EFCLL);
          }

unint64_t __JSONEncoder.wrap<A>(_:for:_:)( double *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v65 = a5;
  uint64_t v67 = a3;
  unint64_t v68 = a2;
  uint64_t v66 = *(void *)(a4 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  uint64_t v64 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  char v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  unint64_t v17 = (char *)&v61 - v16;
  uint64_t v18 = MEMORY[0x1895F8858](v15);
  MEMORY[0x1895F8858](v18);
  double v19 = *a1;
  uint64_t v20 = *(void *)(v5 + 40);
  id v69 = *(id *)(v5 + 32);
  if (*(_BYTE *)(v5 + 48))
  {
    if (*(_BYTE *)(v5 + 48) != 1) {
      __asm { BR              X10 }
    }

    uint64_t v21 = (void *)v5;
    unint64_t v22 = *(void *)(v5 + 16);
    uint64_t v62 = (unint64_t *)(v5 + 16);
    uint64_t v63 = v20;
    if (v22 >> 62)
    {
      outlined copy of JSONEncoder.DateEncodingStrategy(v69, v20, 1);
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_retain();
    }

    uint64_t v24 = v70;
    id v25 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v25(v17, v67, v10);
    v25(v14, (uint64_t)v17, v10);
    uint64_t v26 = v66;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t v27 = *(void (**)(char *, uint64_t))(v11 + 8);
      v27(v17, v10);
      v27(v14, v10);
      uint64_t v28 = v21[18];
      uint64_t v29 = v21[19];
      unint64_t v30 = v68;
      unint64_t v31 = v68 >> 62;
      v21[18] = v68;
      if (v30 >> 62)
      {
        uint64_t v32 = (void (*)(double *, void *))v69;
        uint64_t v33 = v23;
        if ((_DWORD)v31 != 1)
        {
          uint64_t v52 = 0LL;
          goto LABEL_20;
        }

        uint64_t v52 = *(void *)(v30 + 32);
        swift_retain();
      }

      else
      {
        uint64_t v52 = *(void *)(v30 + 64);
        swift_retain();
        uint64_t v32 = (void (*)(double *, void *))v69;
        uint64_t v33 = v23;
      }

unint64_t specialized __JSONEncoder.wrap<A>(_:for:_:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7)
{
  uint64_t v9 = v7;
  uint64_t v71 = *MEMORY[0x1895F89C0];
  uint64_t v15 = (unint64_t *)v9[7];
  if (v15)
  {
    if (v15 == (unint64_t *)1) {
      __asm { BR              X10 }
    }

    uint64_t v60 = a6;
    unint64_t v21 = v9[2];
    uint64_t v57 = v9 + 2;
    if (v21 >> 62)
    {
      swift_bridgeObjectRetain();
      outlined copy of JSONEncoder.KeyEncodingStrategy((unint64_t)v15);
      uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v59 = *(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_retain();
    }

    uint64_t v65 = a1;
    uint64_t v67 = v8;
    if (a7 == -1)
    {
      unint64_t v28 = v9[18];
      unint64_t v56 = v9[19];
      v9[18] = a3;
      if (a3 >> 62)
      {
        uint64_t v29 = a2;
        if (a3 >> 62 != 1)
        {
          uint64_t v30 = 0LL;
LABEL_58:
          v9[19] = v30;
          id v69 = (void *)type metadata accessor for __JSONEncoder();
          unint64_t v70 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder,  (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder,  (uint64_t)&protocol conformance descriptor for __JSONEncoder);
          v68[0] = v9;
          swift_retain();
          ((void (*)(uint64_t, uint64_t, void *))v15)(v65, v29, v68);
          if (v67)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
            v9[18] = v28;
            swift_retain();
            swift_release();
            v9[19] = v56;
            swift_release();
            swift_release();
            a5 = v9[2];
            if (!(a5 >> 62))
            {
              uint64_t v46 = *(void *)((a5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
              goto LABEL_61;
            }

LABEL_83:
            swift_bridgeObjectRetain();
            uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
LABEL_61:
            if (v59 >= v46)
            {
LABEL_65:
              swift_willThrow();
              outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v15);
              return a5;
            }

            a5 = *v57;
            if (!(*v57 >> 62))
            {
              if (*(void *)((a5 & 0xFFFFFFFFFFFFF8LL) + 0x10))
              {
LABEL_64:
                specialized RangeReplaceableCollection<>.popLast()();
                swift_release();
                goto LABEL_65;
              }

              goto LABEL_95;
            }

                    __break(1u);
LABEL_84:
                    __break(1u);
LABEL_85:
                    __break(1u);
LABEL_86:
                    __break(1u);
                    goto LABEL_87;
                  }

                  uint64_t v32 = v41;
                }
              }
            }

    if (v43 > v44[2]) {
      goto LABEL_137;
    }
    *(double *)&v44[v43 + 3] = ((double)(uint64_t)v137 * 1.0e-18 + (double)v135) / v4 + *(double *)&v44[v43 + 3];
    unint64_t v43 = v35[2];
  }

    swift_bridgeObjectRelease();
    uint64_t v15 = v184;
    if ((v58 & 1) != 0) {
      goto LABEL_96;
    }
    goto LABEL_94;
  }

  if ((v46 & 1) == 0 && !HIDWORD(v44)) {
    goto LABEL_83;
  }
  if ((v40 & 0x1000000000000000LL) != 0) {
    goto LABEL_229;
  }
  if ((v40 & 0x2000000000000000LL) != 0)
  {
    *(double *)&v189.f_bsize = v39;
    v189.uint64_t f_blocks = v40 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v60 = getpwnam((const char *)&v189);
    if (v60) {
      pw_uid = v60->pw_uid;
    }
    else {
      pw_uid = 0;
    }
    uint64_t v15 = v184;
    LODWORD(v198) = pw_uid;
    BYTE4(v198) = v60 == 0LL;
    goto LABEL_90;
  }

  if ((*(void *)&v39 & 0x1000000000000000LL) == 0)
  {
LABEL_229:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
    _StringGuts._slowWithCString<A>(_:)();
    uint64_t v15 = v184;
  }

  else
  {
    uint64_t v59 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s6UInt32VSg_Tg507_sSRys4f5VGxs5e30_pIgyrzo_ACxsAD_pIegyrzr_lTRs6h77VSg_TG5038_ss11_StringGutsV11withCStringyxxSPys4a23VGKXEKlFxSRyAEGKXEfU_s6c75Q114_TG5062_s10Foundation16_FileManagerImplV24_userAccountNameToNumberys6f14O29SSFZAGSPys4E7VGXEfU_Tf3nnpf_nTf3nnnpf_nTf1cn_nTm( (v40 & 0xFFFFFFFFFFFFFFFLL) + 32,  *(void *)&v39 & 0xFFFFFFFFFFFFLL,  (uint64_t (*)(void))MEMORY[0x1895FB660]);
    uint64_t v15 = v184;
    LODWORD(v198) = v59;
    BYTE4(v198) = BYTE4(v59) & 1;
  }

          uint64_t v45 = swift_release();
          uint64_t v7 = (uint64_t)v215;
          unint64_t v233 = v215;
          if ((v55 & 1) != 0)
          {
LABEL_42:
            uint64_t v45 = swift_bridgeObjectRelease();
            uint64_t v46 = (void *)(*(void *)(v7 + 56) + 16 * v52);
            *uint64_t v46 = v43;
            v46[1] = v44;
            goto LABEL_43;
          }
        }
      }

      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, a2 & 1);
        uint64_t v7 = (uint64_t)v233;
        uint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
        if ((v55 & 1) != (v56 & 1)) {
          goto LABEL_272;
        }
        uint64_t v52 = v45;
        if ((v55 & 1) != 0) {
          goto LABEL_42;
        }
      }

      *(void *)(v7 + 8 * (v52 >> 6) + 64) |= 1LL << v52;
      uint64_t v57 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v52);
      *uint64_t v57 = v41;
      v57[1] = v42;
      uint64_t v58 = (void *)(*(void *)(v7 + 56) + 16 * v52);
      *uint64_t v58 = v43;
      v58[1] = v44;
      uint64_t v59 = *(void *)(v7 + 16);
      uint64_t v60 = __OFADD__(v59, 1LL);
      unint64_t v61 = v59 + 1;
      if (v60) {
        goto LABEL_255;
      }
      *(void *)(v7 + 16) = v61;
LABEL_43:
      uint64_t v41 = specialized LazyMapSequence.Iterator.next()(v45);
      unint64_t v42 = v47;
      unint64_t v43 = v48;
      uint64_t v44 = v49;
      a2 = 1LL;
      unint64_t v50 = v7;
      if (!v47) {
        goto LABEL_109;
      }
    }
  }

  unint64_t v50 = v7;
LABEL_109:
  uint64_t v216 = v50;
  uint64_t v209 = a1;
  swift_bridgeObjectRelease();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  a1 = v225;
  a2 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v233 = (void *)v225;
  uint64_t v98 = -1LL << *(_BYTE *)(v218 + 32);
  int v99 = ~v98;
  uint64_t v100 = *(void *)(v218 + 64);
  __int16 v101 = -v98;
  if (v101 < 64) {
    uint64_t v102 = ~(-1LL << v101);
  }
  else {
    uint64_t v102 = -1LL;
  }
  *(void *)&uint64_t v227 = v218;
  *((void *)&v227 + 1) = v218 + 64;
  Swift::Int v228 = v99;
  unint64_t v229 = 0LL;
  uint64_t v230 = v102 & v100;
  uint64_t v231 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B);
  id v232 = 0LL;
  uint64_t v103 = swift_bridgeObjectRetain();
  uint64_t v104 = specialized LazyMapSequence.Iterator.next()(v103);
  if (!v105)
  {
    uint64_t v121 = v225;
LABEL_158:
    swift_bridgeObjectRelease();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v209;
    a2 = v211;
    uint64_t v4 = &unk_18C5D1000;
    goto LABEL_159;
  }

  uint64_t v108 = v104;
  uint64_t v109 = v105;
  unint64_t v110 = v106;
  uint64_t v111 = v107;
  while (2)
  {
    unint64_t v118 = specialized __RawDictionaryStorage.find<A>(_:)(v108, v109);
    uint64_t v119 = *(void *)(a1 + 16);
    uint64_t v120 = (v117 & 1) == 0;
    uint64_t v112 = v119 + v120;
    if (__OFADD__(v119, v120)) {
      goto LABEL_254;
    }
    uint64_t v121 = a1;
    unint64_t v122 = v117;
    if (*(void *)(a1 + 24) < v112)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v112, a2 & 1);
      uint64_t v121 = (Swift::UInt)v233;
      uint64_t v112 = specialized __RawDictionaryStorage.find<A>(_:)(v108, v109);
      if ((v122 & 1) != (v123 & 1)) {
        goto LABEL_272;
      }
      unint64_t v118 = v112;
      if ((v122 & 1) == 0)
      {
LABEL_123:
        *(void *)(v121 + 8 * (v118 >> 6) + 64) |= 1LL << v118;
        uint64_t v124 = (uint64_t *)(*(void *)(v121 + 48) + 16 * v118);
        *uint64_t v124 = v108;
        v124[1] = v109;
        uint64_t v125 = (void *)(*(void *)(v121 + 56) + 16 * v118);
        *uint64_t v125 = v110;
        v125[1] = v111;
        uint64_t v126 = *(void *)(v121 + 16);
        uint64_t v60 = __OFADD__(v126, 1LL);
        Swift::Int v127 = v126 + 1;
        if (v60) {
          goto LABEL_256;
        }
        *(void *)(v121 + 16) = v127;
        goto LABEL_115;
      }

        uint64_t v34 = (v43 - 1) & v43;
        uint64_t v97 = v44;
        uint64_t v41 = __clz(__rbit64(v43)) + (v44 << 6);
      }

      uint64_t v46 = 16 * v41;
      unint64_t v47 = *(void *)(v2 + 56);
      uint64_t v48 = (uint64_t *)(*(void *)(v2 + 48) + v46);
      unint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      uint64_t v51 = (uint64_t *)(v47 + v46);
      uint64_t v52 = *v51;
      uint64_t v19 = (unint64_t *)v51[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t v53 = Hasher._finalize()();
      uint64_t v54 = -1LL << *(_BYTE *)(v32 + 32);
      uint64_t v55 = v53 & ~v54;
      unint64_t v56 = v55 >> 6;
      if (((-1LL << v55) & ~*(void *)(v35 + 8 * (v55 >> 6))) != 0)
      {
        uint64_t v36 = __clz(__rbit64((-1LL << v55) & ~*(void *)(v35 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0LL;
        goto LABEL_63;
      }

      uint64_t v57 = 0;
      uint64_t v58 = (unint64_t)(63 - v54) >> 6;
      do
      {
        if (++v56 == v58 && (v57 & 1) != 0)
        {
          __break(1u);
          goto LABEL_130;
        }

        uint64_t v59 = v56 == v58;
        if (v56 == v58) {
          unint64_t v56 = 0LL;
        }
        v57 |= v59;
        uint64_t v60 = *(void *)(v35 + 8 * v56);
      }

      while (v60 == -1);
      uint64_t v36 = __clz(__rbit64(~v60)) + (v56 << 6);
LABEL_63:
      *(void *)(v35 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v36;
      uint64_t v37 = 16 * v36;
      unint64_t v38 = (void *)(*(void *)(v32 + 48) + v37);
      *unint64_t v38 = v50;
      v38[1] = v49;
      uint64_t v39 = (void *)(*(void *)(v32 + 56) + v37);
      *uint64_t v39 = v52;
      v39[1] = v19;
      ++*(void *)(v32 + 16);
      --v6;
      uint64_t v2 = v96;
      uint64_t v33 = v97;
      if (!v6) {
        return v32;
      }
    }
  }

  swift_retain();
  return v2;
}

  __break(1u);
LABEL_84:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_84:
  type metadata accessor for NSFileAttributeKey(0LL);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_84:
  type metadata accessor for NSAttributedStringKey(0LL);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_84:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_84:
  type metadata accessor for NSURLResourceKey(0LL);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_84:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

    uint64_t v45 = (unint64_t)&v19[v43];
    goto LABEL_84;
  }

  if (v18 < 1) {
    goto LABEL_255;
  }
  unint64_t v22 = *(unsigned __int8 *)v17;
  if (v22 == 45 || (uint64_t v8 = v17, v22 == 43)) {
    uint64_t v8 = v17 + 1;
  }
  char v14 = v8 - v17;
  if (v8 - v17 < 0) {
    goto LABEL_257;
  }
  else {
    uint64_t v23 = v21 - (void)v8;
  }
  if (!_stringshims_strncasecmp_l(v8, "0x", v23, 0LL))
  {
    uint64_t v52 = (unsigned __int8 *)(v8 + 2);
    unint64_t v43 = v21 - (void)(v8 + 2);
    if (v43 >= 1 && (unint64_t)v52 < v21)
    {
      unint64_t v43 = v52 - v19;
      if (((v52 - v19) & 0x8000000000000000LL) == 0)
      {
        a3 = (uint64_t)&v8[-a4 + 2];
        unint64_t v43 = &v19[v20] - (unsigned __int8 *)v8 - 3;
        uint64_t v53 = v14 + 3;
        do
        {
          uint64_t v54 = v53;
          uint64_t v20 = *v52;
          if ((v20 - 58) <= 0xF5u
            && (*v52 - 65 > 0x25 || ((1LL << (v20 - 65)) & 0x3F0000003FLL) == 0))
          {
            uint64_t v66 = a4 + a5;
            if (v66 <= a4)
            {
              uint64_t v73 = 0LL;
              char v14 = 0xED00007265626D75LL;
              unint64_t v21 = 0x6E20786568206E69LL;
              a5 = 1LL;
              goto LABEL_174;
            }

            uint64_t v67 = -(uint64_t)a4;
            unint64_t v68 = a5 + a4;
            a5 = 1LL;
            while (1)
            {
              id v69 = 0LL;
              unint64_t v70 = 0LL;
              uint64_t v71 = v68 - a4;
              while (1)
              {
                uint64_t v72 = *(unsigned __int8 *)(a4 + v70);
                if (v72 == 10) {
                  break;
                }
                if (v72 == 13)
                {
                  int v75 = a4 + v70;
                  if ((unint64_t)v52 >= a4 + v70 + 1)
                  {
                    if (*(_BYTE *)(v75 + 1) == 10) {
                      int v75 = a4 + v70 + 1;
                    }
                  }

                  uint64_t v74 = __OFADD__(a5++, 1LL);
                  if (v74) {
                    goto LABEL_268;
                  }
                  a4 = v75 + 1;
                  goto LABEL_140;
                }

                uint64_t v73 = v70 + 1;
                if (__OFADD__(v70, 1LL)) {
                  goto LABEL_247;
                }
                ++v70;
                --v69;
                if (a4 + v70 >= v66)
                {
                  char v14 = 0xED00007265626D75LL;
                  unint64_t v21 = 0x6E20786568206E69LL;
LABEL_174:
                  a4 = v20;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)unint64_t v40 = v21;
                  *(void *)(v40 + 8) = v14;
                  *(void *)(v40 + 16) = v20;
                  *(void *)(v40 + 24) = a5;
                  *(void *)(v40 + 32) = v73;
                  *(void *)(v40 + 40) = a3;
                  uint64_t v41 = 1;
                  goto LABEL_45;
                }
              }

              uint64_t v74 = __OFADD__(a5++, 1LL);
              if (v74) {
                goto LABEL_267;
              }
              a4 += v70 + 1;
LABEL_140:
              char v14 = 0xED00007265626D75LL;
              unint64_t v21 = 0x6E20786568206E69LL;
              if (a4 >= v66)
              {
                uint64_t v73 = 0LL;
                goto LABEL_174;
              }
            }
          }

          uint64_t v31 = v43-- < 1;
          if (v31) {
            break;
          }
          ++a3;
          ++v53;
        }

        while ((v54 & 0x8000000000000000LL) == 0);
      }
    }

    __break(1u);
    goto LABEL_83;
  }

  uint64_t v24 = 0;
  id v25 = 0;
  unint64_t v26 = (const char *)&v19[v20];
  unint64_t v27 = 1;
LABEL_24:
  uint64_t v29 = 0LL;
  uint64_t v30 = v26 - v8;
  while (v8 - (const char *)v19 + v29 >= 0)
  {
    uint64_t v31 = v30-- < 1;
    if (v31) {
      break;
    }
    LODWORD(v20) = v8[v29];
    if ((v20 - 58) <= 0xF5u)
    {
      switch(v8[v29])
      {
        case '+':
        case '-':
          if (v29 != 0 || (v24 & 1) == 0) {
            goto LABEL_143;
          }
          uint64_t v24 = 0;
          unint64_t v27 = 0;
          v8 += v29 + 1;
          id v25 = 3;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_143;
        case '.':
          if ((v27 & 1) == 0)
          {
            uint64_t v102 = (unint64_t)&v8[v29];
            uint64_t v103 = a4 + a5;
            if (a4 + a5 < v102) {
              goto LABEL_274;
            }
            if (v103 > a4)
            {
              uint64_t v104 = a5 + a4;
              a5 = 1LL;
              Swift::String v105 = a4;
              while (1)
              {
                int v106 = 0LL;
                uint64_t v107 = 0LL;
                uint64_t v108 = v104 - v105;
                while (1)
                {
                  if ((uint64_t)(v105 - a4 + v107) < 0 || (uint64_t)(v108 + v106) < 1)
                  {
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
LABEL_280:
                    __break(1u);
                  }

                  uint64_t v109 = *(unsigned __int8 *)(v105 + v107);
                  if (v109 == 10)
                  {
                    uint64_t v74 = __OFADD__(a5++, 1LL);
                    if (!v74)
                    {
                      v105 += v107 + 1;
                      goto LABEL_236;
                    }

                    goto LABEL_278;
                  }

                  if (v109 == 13) {
                    break;
                  }
                  uint64_t v73 = v107 + 1;
                  if (__OFADD__(v107, 1LL)) {
                    goto LABEL_262;
                  }
                  ++v107;
                  --v106;
                  if (v105 + v107 >= v103) {
                    goto LABEL_242;
                  }
                }

                unint64_t v110 = v105 + v107;
                if (v102 >= v105 + v107 + 1)
                {
                  if (((v105 - a4 + v107 + 1) & 0x8000000000000000LL) != 0 || (uint64_t)(~v107 + v108) < 1)
                  {
                    __break(1u);
LABEL_282:
                    v115[0] = 0LL;
                    v115[1] = (char *)0xE000000000000000LL;
                    _StringGuts.grow(_:)(30LL);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v115, "Invalid index ");
                    HIBYTE(v115[1]) = -18;
                    v111._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
                    v112._unint64_t object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v112);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x183431168LL);
                  }

                  if (*(_BYTE *)(v110 + 1) == 10) {
                    unint64_t v110 = v105 + v107 + 1;
                  }
                }

                uint64_t v74 = __OFADD__(a5++, 1LL);
                if (v74) {
                  goto LABEL_279;
                }
                Swift::String v105 = v110 + 1;
LABEL_236:
                if (v105 >= v103)
                {
                  uint64_t v73 = 0LL;
                  goto LABEL_242;
                }
              }
            }

            uint64_t v73 = 0LL;
            a5 = 1LL;
LABEL_242:
            a3 = (uint64_t)&v8[v29 - a4];
            LOBYTE(v20) = 46;
LABEL_144:
            char v14 = 0xE900000000000072LL;
            unint64_t v21 = 0x65626D756E206E69LL;
            goto LABEL_174;
          }

          uint64_t v24 = 0;
          unint64_t v27 = 0;
          v8 += v29 + 1;
          id v25 = 1;
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v20 != 101) {
            goto LABEL_143;
          }
LABEL_36:
          if (v25 != 1 && (v25 || v29 < 1))
          {
LABEL_143:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)&v8[v29],  a4,  a5);
            uint64_t v73 = v78;
            a3 = v79;
            goto LABEL_144;
          }

          unint64_t v27 = 0;
          v8 += v29 + 1;
          id v25 = 2;
          uint64_t v24 = 1;
          goto LABEL_24;
      }

    uint64_t v45 = (unint64_t)&v19[v43];
    goto LABEL_84;
  }

  if (v18 < 1) {
    goto LABEL_255;
  }
  unint64_t v22 = *(unsigned __int8 *)v17;
  if (v22 == 45 || (uint64_t v8 = v17, v22 == 43)) {
    uint64_t v8 = v17 + 1;
  }
  char v14 = v8 - v17;
  if (v8 - v17 < 0) {
    goto LABEL_257;
  }
  else {
    uint64_t v23 = v21 - (void)v8;
  }
  if (!_stringshims_strncasecmp_l(v8, "0x", v23, 0LL))
  {
    uint64_t v52 = (unsigned __int8 *)(v8 + 2);
    unint64_t v43 = v21 - (void)(v8 + 2);
    if (v43 >= 1 && (unint64_t)v52 < v21)
    {
      unint64_t v43 = v52 - v19;
      if (((v52 - v19) & 0x8000000000000000LL) == 0)
      {
        a3 = (uint64_t)&v8[-a4 + 2];
        unint64_t v43 = &v19[v20] - (unsigned __int8 *)v8 - 3;
        uint64_t v53 = v14 + 3;
        do
        {
          uint64_t v54 = v53;
          uint64_t v20 = *v52;
          if ((v20 - 58) <= 0xF5u
            && (*v52 - 65 > 0x25 || ((1LL << (v20 - 65)) & 0x3F0000003FLL) == 0))
          {
            uint64_t v66 = a4 + a5;
            if (v66 <= a4)
            {
              uint64_t v73 = 0LL;
              char v14 = 0xED00007265626D75LL;
              unint64_t v21 = 0x6E20786568206E69LL;
              a5 = 1LL;
              goto LABEL_174;
            }

            uint64_t v67 = -(uint64_t)a4;
            unint64_t v68 = a5 + a4;
            a5 = 1LL;
            while (1)
            {
              id v69 = 0LL;
              unint64_t v70 = 0LL;
              uint64_t v71 = v68 - a4;
              while (1)
              {
                uint64_t v72 = *(unsigned __int8 *)(a4 + v70);
                if (v72 == 10) {
                  break;
                }
                if (v72 == 13)
                {
                  int v75 = a4 + v70;
                  if ((unint64_t)v52 >= a4 + v70 + 1)
                  {
                    if (*(_BYTE *)(v75 + 1) == 10) {
                      int v75 = a4 + v70 + 1;
                    }
                  }

                  uint64_t v74 = __OFADD__(a5++, 1LL);
                  if (v74) {
                    goto LABEL_268;
                  }
                  a4 = v75 + 1;
                  goto LABEL_140;
                }

                uint64_t v73 = v70 + 1;
                if (__OFADD__(v70, 1LL)) {
                  goto LABEL_247;
                }
                ++v70;
                --v69;
                if (a4 + v70 >= v66)
                {
                  char v14 = 0xED00007265626D75LL;
                  unint64_t v21 = 0x6E20786568206E69LL;
LABEL_174:
                  a4 = v20;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)unint64_t v40 = v21;
                  *(void *)(v40 + 8) = v14;
                  *(void *)(v40 + 16) = v20;
                  *(void *)(v40 + 24) = a5;
                  *(void *)(v40 + 32) = v73;
                  *(void *)(v40 + 40) = a3;
                  uint64_t v41 = 1;
                  goto LABEL_45;
                }
              }

              uint64_t v74 = __OFADD__(a5++, 1LL);
              if (v74) {
                goto LABEL_267;
              }
              a4 += v70 + 1;
LABEL_140:
              char v14 = 0xED00007265626D75LL;
              unint64_t v21 = 0x6E20786568206E69LL;
              if (a4 >= v66)
              {
                uint64_t v73 = 0LL;
                goto LABEL_174;
              }
            }
          }

          uint64_t v31 = v43-- < 1;
          if (v31) {
            break;
          }
          ++a3;
          ++v53;
        }

        while ((v54 & 0x8000000000000000LL) == 0);
      }
    }

    __break(1u);
    goto LABEL_83;
  }

  uint64_t v24 = 0;
  id v25 = 0;
  unint64_t v26 = (const char *)&v19[v20];
  unint64_t v27 = 1;
LABEL_24:
  uint64_t v29 = 0LL;
  uint64_t v30 = v26 - v8;
  while (v8 - (const char *)v19 + v29 >= 0)
  {
    uint64_t v31 = v30-- < 1;
    if (v31) {
      break;
    }
    LODWORD(v20) = v8[v29];
    if ((v20 - 58) <= 0xF5u)
    {
      switch(v8[v29])
      {
        case '+':
        case '-':
          if (v29 != 0 || (v24 & 1) == 0) {
            goto LABEL_143;
          }
          uint64_t v24 = 0;
          unint64_t v27 = 0;
          v8 += v29 + 1;
          id v25 = 3;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_143;
        case '.':
          if ((v27 & 1) == 0)
          {
            uint64_t v102 = (unint64_t)&v8[v29];
            uint64_t v103 = a4 + a5;
            if (a4 + a5 < v102) {
              goto LABEL_274;
            }
            if (v103 > a4)
            {
              uint64_t v104 = a5 + a4;
              a5 = 1LL;
              Swift::String v105 = a4;
              while (1)
              {
                int v106 = 0LL;
                uint64_t v107 = 0LL;
                uint64_t v108 = v104 - v105;
                while (1)
                {
                  if ((uint64_t)(v105 - a4 + v107) < 0 || (uint64_t)(v108 + v106) < 1)
                  {
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
LABEL_280:
                    __break(1u);
                  }

                  uint64_t v109 = *(unsigned __int8 *)(v105 + v107);
                  if (v109 == 10)
                  {
                    uint64_t v74 = __OFADD__(a5++, 1LL);
                    if (!v74)
                    {
                      v105 += v107 + 1;
                      goto LABEL_236;
                    }

                    goto LABEL_278;
                  }

                  if (v109 == 13) {
                    break;
                  }
                  uint64_t v73 = v107 + 1;
                  if (__OFADD__(v107, 1LL)) {
                    goto LABEL_262;
                  }
                  ++v107;
                  --v106;
                  if (v105 + v107 >= v103) {
                    goto LABEL_242;
                  }
                }

                unint64_t v110 = v105 + v107;
                if (v102 >= v105 + v107 + 1)
                {
                  if (((v105 - a4 + v107 + 1) & 0x8000000000000000LL) != 0 || (uint64_t)(~v107 + v108) < 1)
                  {
                    __break(1u);
LABEL_282:
                    v115[0] = 0LL;
                    v115[1] = (char *)0xE000000000000000LL;
                    _StringGuts.grow(_:)(30LL);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v115, "Invalid index ");
                    HIBYTE(v115[1]) = -18;
                    v111._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
                    v112._unint64_t object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v112);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x183432120LL);
                  }

                  if (*(_BYTE *)(v110 + 1) == 10) {
                    unint64_t v110 = v105 + v107 + 1;
                  }
                }

                uint64_t v74 = __OFADD__(a5++, 1LL);
                if (v74) {
                  goto LABEL_279;
                }
                Swift::String v105 = v110 + 1;
LABEL_236:
                if (v105 >= v103)
                {
                  uint64_t v73 = 0LL;
                  goto LABEL_242;
                }
              }
            }

            uint64_t v73 = 0LL;
            a5 = 1LL;
LABEL_242:
            a3 = (uint64_t)&v8[v29 - a4];
            LOBYTE(v20) = 46;
LABEL_144:
            char v14 = 0xE900000000000072LL;
            unint64_t v21 = 0x65626D756E206E69LL;
            goto LABEL_174;
          }

          uint64_t v24 = 0;
          unint64_t v27 = 0;
          v8 += v29 + 1;
          id v25 = 1;
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v20 != 101) {
            goto LABEL_143;
          }
LABEL_36:
          if (v25 != 1 && (v25 || v29 < 1))
          {
LABEL_143:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)&v8[v29],  a4,  a5);
            uint64_t v73 = v78;
            a3 = v79;
            goto LABEL_144;
          }

          unint64_t v27 = 0;
          v8 += v29 + 1;
          id v25 = 2;
          uint64_t v24 = 1;
          goto LABEL_24;
      }

    uint64_t v45 = (unint64_t)&v19[v43];
    goto LABEL_84;
  }

  if (v18 < 1) {
    goto LABEL_255;
  }
  unint64_t v22 = *(unsigned __int8 *)v17;
  if (v22 == 45 || (uint64_t v8 = v17, v22 == 43)) {
    uint64_t v8 = v17 + 1;
  }
  char v14 = v8 - v17;
  if (v8 - v17 < 0) {
    goto LABEL_257;
  }
  else {
    uint64_t v23 = v21 - (void)v8;
  }
  if (!_stringshims_strncasecmp_l(v8, "0x", v23, 0LL))
  {
    uint64_t v52 = (unsigned __int8 *)(v8 + 2);
    unint64_t v43 = v21 - (void)(v8 + 2);
    if (v43 >= 1 && (unint64_t)v52 < v21)
    {
      unint64_t v43 = v52 - v19;
      if (((v52 - v19) & 0x8000000000000000LL) == 0)
      {
        a3 = (uint64_t)&v8[-a4 + 2];
        unint64_t v43 = &v19[v20] - (unsigned __int8 *)v8 - 3;
        uint64_t v53 = v14 + 3;
        do
        {
          uint64_t v54 = v53;
          uint64_t v20 = *v52;
          if ((v20 - 58) <= 0xF5u
            && (*v52 - 65 > 0x25 || ((1LL << (v20 - 65)) & 0x3F0000003FLL) == 0))
          {
            uint64_t v66 = a4 + a5;
            if (v66 <= a4)
            {
              uint64_t v73 = 0LL;
              char v14 = 0xED00007265626D75LL;
              unint64_t v21 = 0x6E20786568206E69LL;
              a5 = 1LL;
              goto LABEL_174;
            }

            uint64_t v67 = -(uint64_t)a4;
            unint64_t v68 = a5 + a4;
            a5 = 1LL;
            while (1)
            {
              id v69 = 0LL;
              unint64_t v70 = 0LL;
              uint64_t v71 = v68 - a4;
              while (1)
              {
                uint64_t v72 = *(unsigned __int8 *)(a4 + v70);
                if (v72 == 10) {
                  break;
                }
                if (v72 == 13)
                {
                  int v75 = a4 + v70;
                  if ((unint64_t)v52 >= a4 + v70 + 1)
                  {
                    if (*(_BYTE *)(v75 + 1) == 10) {
                      int v75 = a4 + v70 + 1;
                    }
                  }

                  uint64_t v74 = __OFADD__(a5++, 1LL);
                  if (v74) {
                    goto LABEL_268;
                  }
                  a4 = v75 + 1;
                  goto LABEL_140;
                }

                uint64_t v73 = v70 + 1;
                if (__OFADD__(v70, 1LL)) {
                  goto LABEL_247;
                }
                ++v70;
                --v69;
                if (a4 + v70 >= v66)
                {
                  char v14 = 0xED00007265626D75LL;
                  unint64_t v21 = 0x6E20786568206E69LL;
LABEL_174:
                  a4 = v20;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)unint64_t v40 = v21;
                  *(void *)(v40 + 8) = v14;
                  *(void *)(v40 + 16) = v20;
                  *(void *)(v40 + 24) = a5;
                  *(void *)(v40 + 32) = v73;
                  *(void *)(v40 + 40) = a3;
                  uint64_t v41 = 1;
                  goto LABEL_45;
                }
              }

              uint64_t v74 = __OFADD__(a5++, 1LL);
              if (v74) {
                goto LABEL_267;
              }
              a4 += v70 + 1;
LABEL_140:
              char v14 = 0xED00007265626D75LL;
              unint64_t v21 = 0x6E20786568206E69LL;
              if (a4 >= v66)
              {
                uint64_t v73 = 0LL;
                goto LABEL_174;
              }
            }
          }

          uint64_t v31 = v43-- < 1;
          if (v31) {
            break;
          }
          ++a3;
          ++v53;
        }

        while ((v54 & 0x8000000000000000LL) == 0);
      }
    }

    __break(1u);
    goto LABEL_83;
  }

  uint64_t v24 = 0;
  id v25 = 0;
  unint64_t v26 = (const char *)&v19[v20];
  unint64_t v27 = 1;
LABEL_24:
  uint64_t v29 = 0LL;
  uint64_t v30 = v26 - v8;
  while (v8 - (const char *)v19 + v29 >= 0)
  {
    uint64_t v31 = v30-- < 1;
    if (v31) {
      break;
    }
    LODWORD(v20) = v8[v29];
    if ((v20 - 58) <= 0xF5u)
    {
      switch(v8[v29])
      {
        case '+':
        case '-':
          if (v29 != 0 || (v24 & 1) == 0) {
            goto LABEL_143;
          }
          uint64_t v24 = 0;
          unint64_t v27 = 0;
          v8 += v29 + 1;
          id v25 = 3;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_143;
        case '.':
          if ((v27 & 1) == 0)
          {
            uint64_t v102 = (unint64_t)&v8[v29];
            uint64_t v103 = a4 + a5;
            if (a4 + a5 < v102) {
              goto LABEL_274;
            }
            if (v103 > a4)
            {
              uint64_t v104 = a5 + a4;
              a5 = 1LL;
              Swift::String v105 = a4;
              while (1)
              {
                int v106 = 0LL;
                uint64_t v107 = 0LL;
                uint64_t v108 = v104 - v105;
                while (1)
                {
                  if ((uint64_t)(v105 - a4 + v107) < 0 || (uint64_t)(v108 + v106) < 1)
                  {
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
LABEL_280:
                    __break(1u);
                  }

                  uint64_t v109 = *(unsigned __int8 *)(v105 + v107);
                  if (v109 == 10)
                  {
                    uint64_t v74 = __OFADD__(a5++, 1LL);
                    if (!v74)
                    {
                      v105 += v107 + 1;
                      goto LABEL_236;
                    }

                    goto LABEL_278;
                  }

                  if (v109 == 13) {
                    break;
                  }
                  uint64_t v73 = v107 + 1;
                  if (__OFADD__(v107, 1LL)) {
                    goto LABEL_262;
                  }
                  ++v107;
                  --v106;
                  if (v105 + v107 >= v103) {
                    goto LABEL_242;
                  }
                }

                unint64_t v110 = v105 + v107;
                if (v102 >= v105 + v107 + 1)
                {
                  if (((v105 - a4 + v107 + 1) & 0x8000000000000000LL) != 0 || (uint64_t)(~v107 + v108) < 1)
                  {
                    __break(1u);
LABEL_282:
                    v115[0] = 0LL;
                    v115[1] = (char *)0xE000000000000000LL;
                    _StringGuts.grow(_:)(30LL);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v115, "Invalid index ");
                    HIBYTE(v115[1]) = -18;
                    v111._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
                    v112._unint64_t object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v112);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x18343BD68LL);
                  }

                  if (*(_BYTE *)(v110 + 1) == 10) {
                    unint64_t v110 = v105 + v107 + 1;
                  }
                }

                uint64_t v74 = __OFADD__(a5++, 1LL);
                if (v74) {
                  goto LABEL_279;
                }
                Swift::String v105 = v110 + 1;
LABEL_236:
                if (v105 >= v103)
                {
                  uint64_t v73 = 0LL;
                  goto LABEL_242;
                }
              }
            }

            uint64_t v73 = 0LL;
            a5 = 1LL;
LABEL_242:
            a3 = (uint64_t)&v8[v29 - a4];
            LOBYTE(v20) = 46;
LABEL_144:
            char v14 = 0xE900000000000072LL;
            unint64_t v21 = 0x65626D756E206E69LL;
            goto LABEL_174;
          }

          uint64_t v24 = 0;
          unint64_t v27 = 0;
          v8 += v29 + 1;
          id v25 = 1;
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v20 != 101) {
            goto LABEL_143;
          }
LABEL_36:
          if (v25 != 1 && (v25 || v29 < 1))
          {
LABEL_143:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)&v8[v29],  a4,  a5);
            uint64_t v73 = v78;
            a3 = v79;
            goto LABEL_144;
          }

          unint64_t v27 = 0;
          v8 += v29 + 1;
          id v25 = 2;
          uint64_t v24 = 1;
          goto LABEL_24;
      }

    uint64_t v45 = (unint64_t)&v19[v43];
    goto LABEL_84;
  }

  if (v18 < 1) {
    goto LABEL_255;
  }
  unint64_t v22 = *(unsigned __int8 *)v17;
  if (v22 == 45 || (uint64_t v8 = v17, v22 == 43)) {
    uint64_t v8 = v17 + 1;
  }
  char v14 = v8 - v17;
  if (v8 - v17 < 0) {
    goto LABEL_257;
  }
  else {
    uint64_t v23 = v21 - (void)v8;
  }
  if (!_stringshims_strncasecmp_l(v8, "0x", v23, 0LL))
  {
    uint64_t v52 = (unsigned __int8 *)(v8 + 2);
    unint64_t v43 = v21 - (void)(v8 + 2);
    if (v43 >= 1 && (unint64_t)v52 < v21)
    {
      unint64_t v43 = v52 - v19;
      if (((v52 - v19) & 0x8000000000000000LL) == 0)
      {
        a3 = (uint64_t)&v8[-a4 + 2];
        unint64_t v43 = &v19[v20] - (unsigned __int8 *)v8 - 3;
        uint64_t v53 = v14 + 3;
        do
        {
          uint64_t v54 = v53;
          uint64_t v20 = *v52;
          if ((v20 - 58) <= 0xF5u
            && (*v52 - 65 > 0x25 || ((1LL << (v20 - 65)) & 0x3F0000003FLL) == 0))
          {
            uint64_t v66 = a4 + a5;
            if (v66 <= a4)
            {
              uint64_t v73 = 0LL;
              char v14 = 0xED00007265626D75LL;
              unint64_t v21 = 0x6E20786568206E69LL;
              a5 = 1LL;
              goto LABEL_174;
            }

            uint64_t v67 = -(uint64_t)a4;
            unint64_t v68 = a5 + a4;
            a5 = 1LL;
            while (1)
            {
              id v69 = 0LL;
              unint64_t v70 = 0LL;
              uint64_t v71 = v68 - a4;
              while (1)
              {
                uint64_t v72 = *(unsigned __int8 *)(a4 + v70);
                if (v72 == 10) {
                  break;
                }
                if (v72 == 13)
                {
                  int v75 = a4 + v70;
                  if ((unint64_t)v52 >= a4 + v70 + 1)
                  {
                    if (*(_BYTE *)(v75 + 1) == 10) {
                      int v75 = a4 + v70 + 1;
                    }
                  }

                  uint64_t v74 = __OFADD__(a5++, 1LL);
                  if (v74) {
                    goto LABEL_268;
                  }
                  a4 = v75 + 1;
                  goto LABEL_140;
                }

                uint64_t v73 = v70 + 1;
                if (__OFADD__(v70, 1LL)) {
                  goto LABEL_247;
                }
                ++v70;
                --v69;
                if (a4 + v70 >= v66)
                {
                  char v14 = 0xED00007265626D75LL;
                  unint64_t v21 = 0x6E20786568206E69LL;
LABEL_174:
                  a4 = v20;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)unint64_t v40 = v21;
                  *(void *)(v40 + 8) = v14;
                  *(void *)(v40 + 16) = v20;
                  *(void *)(v40 + 24) = a5;
                  *(void *)(v40 + 32) = v73;
                  *(void *)(v40 + 40) = a3;
                  uint64_t v41 = 1;
                  goto LABEL_45;
                }
              }

              uint64_t v74 = __OFADD__(a5++, 1LL);
              if (v74) {
                goto LABEL_267;
              }
              a4 += v70 + 1;
LABEL_140:
              char v14 = 0xED00007265626D75LL;
              unint64_t v21 = 0x6E20786568206E69LL;
              if (a4 >= v66)
              {
                uint64_t v73 = 0LL;
                goto LABEL_174;
              }
            }
          }

          uint64_t v31 = v43-- < 1;
          if (v31) {
            break;
          }
          ++a3;
          ++v53;
        }

        while ((v54 & 0x8000000000000000LL) == 0);
      }
    }

    __break(1u);
    goto LABEL_83;
  }

  uint64_t v24 = 0;
  id v25 = 0;
  unint64_t v26 = (const char *)&v19[v20];
  unint64_t v27 = 1;
LABEL_24:
  uint64_t v29 = 0LL;
  uint64_t v30 = v26 - v8;
  while (v8 - (const char *)v19 + v29 >= 0)
  {
    uint64_t v31 = v30-- < 1;
    if (v31) {
      break;
    }
    LODWORD(v20) = v8[v29];
    if ((v20 - 58) <= 0xF5u)
    {
      switch(v8[v29])
      {
        case '+':
        case '-':
          if (v29 != 0 || (v24 & 1) == 0) {
            goto LABEL_143;
          }
          uint64_t v24 = 0;
          unint64_t v27 = 0;
          v8 += v29 + 1;
          id v25 = 3;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_143;
        case '.':
          if ((v27 & 1) == 0)
          {
            uint64_t v102 = (unint64_t)&v8[v29];
            uint64_t v103 = a4 + a5;
            if (a4 + a5 < v102) {
              goto LABEL_274;
            }
            if (v103 > a4)
            {
              uint64_t v104 = a5 + a4;
              a5 = 1LL;
              Swift::String v105 = a4;
              while (1)
              {
                int v106 = 0LL;
                uint64_t v107 = 0LL;
                uint64_t v108 = v104 - v105;
                while (1)
                {
                  if ((uint64_t)(v105 - a4 + v107) < 0 || (uint64_t)(v108 + v106) < 1)
                  {
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
LABEL_280:
                    __break(1u);
                  }

                  uint64_t v109 = *(unsigned __int8 *)(v105 + v107);
                  if (v109 == 10)
                  {
                    uint64_t v74 = __OFADD__(a5++, 1LL);
                    if (!v74)
                    {
                      v105 += v107 + 1;
                      goto LABEL_236;
                    }

                    goto LABEL_278;
                  }

                  if (v109 == 13) {
                    break;
                  }
                  uint64_t v73 = v107 + 1;
                  if (__OFADD__(v107, 1LL)) {
                    goto LABEL_262;
                  }
                  ++v107;
                  --v106;
                  if (v105 + v107 >= v103) {
                    goto LABEL_242;
                  }
                }

                unint64_t v110 = v105 + v107;
                if (v102 >= v105 + v107 + 1)
                {
                  if (((v105 - a4 + v107 + 1) & 0x8000000000000000LL) != 0 || (uint64_t)(~v107 + v108) < 1)
                  {
                    __break(1u);
LABEL_282:
                    v116[0] = 0LL;
                    v116[1] = (char *)0xE000000000000000LL;
                    _StringGuts.grow(_:)(30LL);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v116, "Invalid index ");
                    HIBYTE(v116[1]) = -18;
                    v111._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
                    v112._unint64_t object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v112);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x18343E14CLL);
                  }

                  if (*(_BYTE *)(v110 + 1) == 10) {
                    unint64_t v110 = v105 + v107 + 1;
                  }
                }

                uint64_t v74 = __OFADD__(a5++, 1LL);
                if (v74) {
                  goto LABEL_279;
                }
                Swift::String v105 = v110 + 1;
LABEL_236:
                if (v105 >= v103)
                {
                  uint64_t v73 = 0LL;
                  goto LABEL_242;
                }
              }
            }

            uint64_t v73 = 0LL;
            a5 = 1LL;
LABEL_242:
            a3 = (uint64_t)&v8[v29 - a4];
            LOBYTE(v20) = 46;
LABEL_144:
            char v14 = 0xE900000000000072LL;
            unint64_t v21 = 0x65626D756E206E69LL;
            goto LABEL_174;
          }

          uint64_t v24 = 0;
          unint64_t v27 = 0;
          v8 += v29 + 1;
          id v25 = 1;
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v20 != 101) {
            goto LABEL_143;
          }
LABEL_36:
          if (v25 != 1 && (v25 || v29 < 1))
          {
LABEL_143:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)&v8[v29],  a4,  a5);
            uint64_t v73 = v78;
            a3 = v79;
            goto LABEL_144;
          }

          unint64_t v27 = 0;
          v8 += v29 + 1;
          id v25 = 2;
          uint64_t v24 = 1;
          goto LABEL_24;
      }

          uint64_t v35 = swift_release();
          uint64_t v6 = (uint64_t)v195;
          uint64_t v206 = v195;
          if ((v45 & 1) != 0)
          {
LABEL_42:
            uint64_t v35 = swift_bridgeObjectRelease();
            uint64_t v36 = (void *)(*(void *)(v6 + 56) + 16 * v42);
            *uint64_t v36 = v33;
            v36[1] = v34;
            goto LABEL_43;
          }
        }
      }

      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, v25 & 1);
        uint64_t v6 = (uint64_t)v206;
        uint64_t v10 = (uint64_t)v206;
        uint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
        if ((v45 & 1) != (v46 & 1)) {
          goto LABEL_271;
        }
        unint64_t v42 = v35;
        if ((v45 & 1) != 0) {
          goto LABEL_42;
        }
      }

      *(void *)(v6 + 8 * (v42 >> 6) + 64) |= 1LL << v42;
      unint64_t v47 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v42);
      *unint64_t v47 = v31;
      v47[1] = v32;
      uint64_t v48 = (void *)(*(void *)(v6 + 56) + 16 * v42);
      *uint64_t v48 = v33;
      v48[1] = v34;
      uint64_t v49 = *(void *)(v6 + 16);
      unint64_t v50 = __OFADD__(v49, 1LL);
      uint64_t v51 = v49 + 1;
      if (v50) {
        goto LABEL_254;
      }
      *(void *)(v6 + 16) = v51;
LABEL_43:
      uint64_t v31 = specialized LazyMapSequence.Iterator.next()(v35);
      uint64_t v32 = v37;
      uint64_t v33 = v38;
      uint64_t v34 = v39;
      id v25 = 1;
      unint64_t v40 = v6;
      if (!v37) {
        goto LABEL_109;
      }
    }
  }

  unint64_t v40 = v6;
LABEL_109:
  unint64_t v196 = v40;
  id v192 = v4;
  swift_bridgeObjectRelease();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  int v89 = v204;
  uint64_t v90 = swift_isUniquelyReferenced_nonNull_native();
  id v207 = v204;
  uint64_t v91 = swift_bridgeObjectRetain();
  uint64_t v92 = specialized LazyMapSequence.Iterator.next()(v91);
  if (!v93)
  {
LABEL_154:
    swift_bridgeObjectRelease();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v0 = &unk_18C5D1000;
    uint64_t v4 = v192;
    goto LABEL_155;
  }

  uint64_t v96 = v92;
  uint64_t v97 = v93;
  uint64_t v98 = v94;
  int v99 = v95;
  uint64_t v100 = v204;
  while (1)
  {
    uint64_t v107 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v97);
    uint64_t v108 = *(void *)(v100 + 16);
    uint64_t v109 = (v106 & 1) == 0;
    __int16 v101 = v108 + v109;
    if (__OFADD__(v108, v109)) {
      goto LABEL_253;
    }
    int v89 = v100;
    unint64_t v110 = v106;
    if (*(void *)(v100 + 24) >= v101) {
      break;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v101, v90 & 1);
    int v89 = v207;
    uint64_t v10 = v207;
    __int16 v101 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v97);
    if ((v110 & 1) != (v111 & 1)) {
      goto LABEL_271;
    }
    uint64_t v107 = v101;
    if ((v110 & 1) != 0)
    {
LABEL_111:
      __int16 v101 = swift_bridgeObjectRelease();
      uint64_t v102 = (void *)(*(void *)(v89 + 56) + 16 * v107);
      void *v102 = v98;
      v102[1] = v99;
      goto LABEL_112;
    }

  char v198 = *(void *)(v194 + 56);
  id v199 = 8 * v177;
  swift_release();
  *(void *)(v198 + v199) = v222;
LABEL_128:
  *((void *)v88 + 2) = v194;
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v93);
  swift_release_n();
  swift_bridgeObjectRelease();
LABEL_46:
  outlined destroy of ICUNumberFormatter.Signature(v95, type metadata accessor for ICULegacyNumberFormatter.Signature);
  swift_release();
  outlined release of ByteCountFormatStyle.Attributed((uint64_t)&v244);
  outlined destroy of ICUNumberFormatter.Signature( v94,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  swift_retain();
  specialized _withResizingUCharBuffer(initialSize:_:)(32);
  uint64_t v97 = v96;
  swift_release();
  uint64_t v98 = v219;
  int v99 = v220;
  if (v97)
  {
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v320, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v246);
    uint64_t v100 = *(void *)v246;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      __int16 v101 = *(_OWORD *)(v100 + 32);
      v349[0] = *(_OWORD *)(v100 + 16);
      v349[1] = v101;
      v349[2] = *(_OWORD *)(v100 + 48);
      uint64_t v102 = *(void *)(v100 + 64);
      uint64_t v103 = *(void *)(v100 + 72);
      uint64_t v104 = *(void *)(v100 + 80);
      Swift::String v105 = *(void *)(v100 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v349);
      swift_unknownObjectRetain();
      int v106 = AttributedString.Guts.init(string:runs:)(v349, v102, v103, v104, v105);
      swift_release();
      uint64_t v100 = v106;
    }

    uint64_t v107 = *(_OWORD *)(v100 + 32);
    uint64_t v346 = *(_OWORD *)(v100 + 16);
    id v347 = v107;
    Swift::String v348 = *(_OWORD *)(v100 + 48);
    uint64_t v108 = BigString.startIndex.getter();
    unint64_t v110 = v109;
    uint64_t v112 = v111;
    uint64_t v114 = v113;
    Swift::String v115 = BigString.endIndex.getter();
    uint64_t v338 = v108;
    uint64_t v339 = v110;
    Swift::String v340 = v112;
    uint64_t v341 = v114;
    char v342 = v115;
    id v343 = v116;
    char v344 = v117;
    char v345 = v118;
    char v218 = (_OWORD *)v100;
    specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(10);
    uint64_t v119 = v99[2];
    id v335 = v99[1];
    v336 = v119;
    uint64_t v337 = v99[3];
    uint64_t v120 = BigString.startIndex.getter();
    unint64_t v122 = v121;
    uint64_t v124 = v123;
    uint64_t v126 = v125;
    Swift::Int v127 = BigString.endIndex.getter();
    if (v127 >> 10 < v120 >> 10)
    {
      __break(1u);
      JUMPOUT(0x183509D80LL);
    }

    uint64_t v321 = v120;
    uint64_t v322 = v122;
    char v323 = v124;
    uint64_t v324 = v126;
    id v325 = v127;
    uint64_t v326 = v128;
    id v327 = v129;
    id v328 = v130;
    AttributedString.Runs.init(_:in:)((uint64_t)v99, v290);
    id v303 = *(_OWORD *)&v290[9];
    uint64_t v304 = *(_OWORD *)&v290[11];
    id v305 = *(_OWORD *)&v290[13];
    uint64_t v306 = *(_OWORD *)&v290[15];
    char v299 = *(_OWORD *)&v290[1];
    char v300 = *(_OWORD *)&v290[3];
    uint64_t v131 = v294;
    id v234 = v295;
    uint64_t v226 = (char *)&v270 + 8;
    uint64_t v227 = (_BYTE *)(v295 >> 10);
    char v301 = *(_OWORD *)&v290[5];
    id v302 = *(_OWORD *)&v290[7];
    uint64_t v224 = v269;
    uint64_t v225 = &v246[8];
    uint64_t v132 = v291;
    uint64_t v133 = v292;
    uint64_t v223 = 0x80000001839C8100LL;
    uint64_t v230 = v296;
    uint64_t v231 = (_OWORD *)v290[0];
    id v232 = v291;
    unint64_t v233 = v294;
    Swift::Int v228 = v292;
    unint64_t v229 = v293;
    uint64_t v242 = v298;
    uint64_t v243 = v297;
    uint64_t v134 = (unint64_t)v293;
    while (1)
    {
      __int128 v135 = v134;
      char v136 = v133;
      char v137 = v132;
      unint64_t v138 = v132 >> 10;
      if ((_BYTE *)(v132 >> 10) == v227) {
        break;
      }
      uint64_t v139 = v303;
      uint64_t v140 = v304;
      uint64_t v141 = v304;
      uint64_t v142 = v224;
      *((_OWORD *)v224 + 4) = v303;
      v142[5] = v140;
      uint64_t v143 = v305;
      uint64_t v144 = v306;
      uint64_t v145 = v306;
      v142[6] = v305;
      v142[7] = v144;
      unint64_t v146 = v299;
      uint64_t v147 = v300;
      uint64_t v148 = v300;
      *uint64_t v142 = v299;
      v142[1] = v147;
      int64_t v149 = v301;
      uint64_t v150 = v302;
      uint64_t v151 = v302;
      v142[2] = v301;
      v142[3] = v150;
      uint64_t v152 = v226;
      *((_OWORD *)v226 + 4) = v139;
      v152[5] = v141;
      v152[6] = v143;
      v152[7] = v145;
      *uint64_t v152 = v146;
      v152[1] = v148;
      v152[2] = v149;
      v152[3] = v151;
      uint64_t v153 = (uint64_t)v231;
      uint64_t v154 = v232;
      *(void *)&int v270 = v231;
      uint64_t v273 = v232;
      uint64_t v156 = v228;
      unint64_t v155 = v229;
      id v274 = v228;
      uint64_t v275 = v229;
      uint64_t v158 = v233;
      uint64_t v157 = v234;
      id v276 = v233;
      id v277 = v234;
      unint64_t v159 = v230;
      id v278 = v230;
      uint64_t v279 = v243;
      uint64_t v280 = v242;
      v316[0] = v137;
      v316[1] = (unint64_t)v136;
      v316[2] = v135;
      v316[3] = v131;
      id v241 = v135;
      id v239 = v136;
      id v238 = v137;
      uint64_t v240 = v138;
      AttributedString.Runs.subscript.getter(v316, &v307);
      int v237 = v308;
      unint64_t v235 = v307;
      uint64_t v236 = v311;
      int64_t v160 = v304;
      unint64_t v161 = v225;
      *((_OWORD *)v225 + 4) = v303;
      v161[5] = v160;
      unint64_t v162 = v306;
      v161[6] = v305;
      v161[7] = v162;
      uint64_t v163 = v300;
      *unint64_t v161 = v299;
      v161[1] = v163;
      id v164 = v302;
      v161[2] = v301;
      v161[3] = v164;
      *(void *)Swift::String v246 = v153;
      id v254 = v154;
      id v255 = v156;
      uint64_t v256 = v155;
      uint64_t v257 = v158;
      uint64_t v258 = v157;
      char v259 = v159;
      char v260 = v243;
      uint64_t v261 = v242;
      uint64_t v165 = v131;
      uint64_t v262 = &outlined read-only object #0 of ByteCountFormatStyle.Attributed._format(_:doubleValue:);
      uint64_t v166 = MEMORY[0x18961AFE8];
      id v263 = MEMORY[0x18961AFE8];
      uint64_t v268 = v153;
      _BYTE v269[16] = v154;
      v269[17] = v156;
      v269[18] = v155;
      v269[19] = v158;
      v269[20] = v157;
      v269[21] = v159;
      v269[22] = v243;
      v269[23] = v242;
      uint64_t v167 = v238;
      uint64_t v307 = v238;
      unint64_t v88 = v239;
      Swift::String v308 = (unint64_t)v239;
      Swift::String v309 = v241;
      uint64_t v168 = v165;
      Swift::String v310 = v165;
      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v246);
      swift_retain();
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)( &v307,  (uint64_t)&outlined read-only object #0 of ByteCountFormatStyle.Attributed._format(_:doubleValue:),  v166,  (uint64_t *)&v270);
      swift_release();
      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v246);
      uint64_t v132 = v270;
      if (v240 > (unint64_t)v270 >> 10)
      {
        __break(1u);
        JUMPOUT(0x183509CB4LL);
      }

      uint64_t v133 = (char *)*((void *)&v270 + 1);
      uint64_t v134 = v271;
      uint64_t v131 = v272;
      uint64_t v169 = v235;
      if (*(void *)(v235 + 16)
        && (__int128 v170 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001DLL, v223), (v171 & 1) != 0))
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v169 + 56) + 72 * v170, (uint64_t)&v270);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v270,  (uint64_t)&v268);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        swift_dynamicCast();
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v270);
      }

      else
      {
        uint64_t v281 = 12;
      }

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v168 == 2)
      {
        __int128 v135 = v134;
        break;
      }

      if (v281 == 9LL)
      {
        int v237 = v131;
        uint64_t v240 = v134;
        swift_retain();
        int64_t v172 = (uint64_t)v220;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v236 = v133;
          unint64_t v173 = *(_OWORD *)(v172 + 32);
          uint64_t v332 = *(_OWORD *)(v172 + 16);
          uint64_t v333 = v173;
          id v334 = *(_OWORD *)(v172 + 48);
          uint64_t v93 = *(os_unfair_lock_s **)(v172 + 64);
          int64_t v174 = *(void *)(v172 + 72);
          uint64_t v175 = *(void *)(v172 + 80);
          unint64_t v235 = *(void *)(v172 + 88);
          type metadata accessor for AttributedString.Guts();
          int64_t v172 = swift_allocObject();
          id v176 = BigString.isEmpty.getter();
          if (v93)
          {
            swift_unknownObjectRetain_n();
            outlined retain of Locale((uint64_t)&v332);
            swift_unknownObjectRelease_n();
            if ((((v175 == 0) ^ v176) & 1) != 0) {
              goto LABEL_91;
            }
          }

          else
          {
            outlined retain of Locale((uint64_t)&v332);
            if ((v176 & 1) == 0) {
              goto LABEL_91;
            }
          }

          Swift::String v178 = v333;
          *(_OWORD *)(v172 + 16) = v332;
          *(_OWORD *)(v172 + 32) = v178;
          *(_OWORD *)(v172 + 48) = v334;
          *(void *)(v172 + 64) = v93;
          *(void *)(v172 + 72) = v174;
          id v179 = v235;
          *(void *)(v172 + 80) = v175;
          *(void *)(v172 + 88) = v179;
          swift_release();
          uint64_t v133 = v236;
        }

        Swift::String v180 = *(_OWORD *)(v172 + 32);
        uint64_t v329 = *(_OWORD *)(v172 + 16);
        uint64_t v330 = v180;
        uint64_t v331 = *(_OWORD *)(v172 + 48);
        BigString.startIndex.getter();
        BigString.endIndex.getter();
        v319[0] = v167;
        v319[1] = v88;
        v319[2] = v241;
        v319[3] = v168;
        v319[4] = v132;
        v319[5] = v133;
        v319[6] = v240;
        uint64_t v131 = v237;
        _OWORD v319[7] = v237;
        id v220 = (_OWORD *)v172;
        uint64_t v134 = v240;
        specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(v319, v218);
        swift_release();
      }
    }

    swift_release();
    swift_release();
    v250 = v303;
    uint64_t v251 = v304;
    id v252 = v305;
    uint64_t v253 = v306;
    *(_OWORD *)&v246[8] = v299;
    v247 = v300;
    id v248 = v301;
    *(void *)Swift::String v246 = v231;
    v249 = v302;
    id v254 = v232;
    id v255 = v228;
    uint64_t v256 = v229;
    uint64_t v257 = v233;
    uint64_t v258 = v234;
    char v259 = v230;
    char v260 = v243;
    uint64_t v261 = v242;
    uint64_t v262 = &outlined read-only object #0 of ByteCountFormatStyle.Attributed._format(_:doubleValue:);
    id v263 = MEMORY[0x18961AFE8];
    id v264 = v132;
    char v265 = v133;
    unint64_t v266 = v135;
    unint64_t v267 = v131;
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v246);
    uint64_t result = swift_release();
    *id v219 = (uint64_t)v220;
  }

  else
  {
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    *uint64_t v98 = (uint64_t)v99;
  }

  return result;
}

  switch(v47)
  {
    case 0uLL:
      uint64_t v54 = [v27 v30];
      goto LABEL_125;
    case 1uLL:
      uint64_t v54 = objc_msgSend(v27, v30, *v86);
      goto LABEL_125;
    case 2uLL:
      uint64_t v54 = objc_msgSend(v27, v30, *v86, v86[1]);
      goto LABEL_125;
    case 3uLL:
      uint64_t v54 = objc_msgSend(v27, v30, *v86, v86[1], v86[2]);
      goto LABEL_125;
    case 4uLL:
      uint64_t v54 = objc_msgSend(v27, v30, *v86, v86[1], v86[2], v86[3]);
      goto LABEL_125;
    case 5uLL:
      uint64_t v54 = objc_msgSend(v27, v30, *v86, v86[1], v86[2], v86[3], v86[4]);
      goto LABEL_125;
    case 6uLL:
      uint64_t v54 = objc_msgSend(v27, v30, *v86, v86[1], v86[2], v86[3], v86[4], v86[5]);
      goto LABEL_125;
    case 7uLL:
      uint64_t v54 = objc_msgSend(v27, v30, *v86, v86[1], v86[2], v86[3], v86[4], v86[5], v86[6]);
      goto LABEL_125;
    case 8uLL:
      uint64_t v54 = objc_msgSend(v27, v30, *v86, v86[1], v86[2], v86[3], v86[4], v86[5], v86[6], v86[7]);
      goto LABEL_125;
    case 9uLL:
      uint64_t v54 = objc_msgSend(v27, v30, *v86, v86[1], v86[2], v86[3], v86[4], v86[5], v86[6], v86[7], v86[8]);
LABEL_125:
      *(void *)&v88[1] = v54;
      if (v54) {
        goto LABEL_126;
      }
      goto LABEL_135;
    default:
      objc_opt_self();
      if ((_CFPredicatePolicyData_getFlags() & 8) != 0)
      {
        objc_opt_self();
        uint64_t v55 = (os_log_s *)_NSOSLog();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_FAULT))
        {
          LOWORD(v90) = 0;
          _os_log_fault_impl( &dword_182EB1000,  v55,  OS_LOG_TYPE_FAULT,  "NSPredicate: NSFunctionExpression no longer allows arbitrarily long parameter lists",  (uint8_t *)&v90,  2u);
        }

        +[_NSPredicateUtilities _predicateSecurityAction]();
      }

      unint64_t v56 = (void *)[v27 methodSignatureForSelector:v30];
      if (!v56)
      {
        uint64_t v77 = (void *)MEMORY[0x189603F70];
        if (v30) {
          uint64_t v78 = NSStringFromSelector(v84);
        }
        else {
          uint64_t v78 = (NSString *)@"<unknown>";
        }
        uint64_t v79 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"NSPredicateFunctionMissingSignature: can't find selector (%@) on %@",  v78,  (void)v85);
        objc_exception_throw((id)[v77 exceptionWithName:*MEMORY[0x189603A58] reason:v79 userInfo:0]);
        goto LABEL_151;
      }

      uint64_t v57 = (void *)[MEMORY[0x189603F88] invocationWithMethodSignature:v56];
      uint64_t v58 = v57;
      if (!v57)
      {
        objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:@"NSPredicateFunctionBadInvocation: can't make invocation" userInfo:0]);
        goto LABEL_151;
      }

      [v57 setSelector:v30];
      [v58 setTarget:v27];
      uint64_t v59 = [v56 numberOfArguments];
      if (v59 != v87)
      {
        objc_opt_self();
        if ((_CFPredicatePolicyData_getFlags() & 8) != 0)
        {
          objc_opt_self();
          unint64_t v61 = (os_log_s *)_NSOSLog();
          if (os_log_type_enabled(v61, OS_LOG_TYPE_FAULT))
          {
            if (v30) {
              uint64_t v74 = NSStringFromSelector(v30);
            }
            else {
              uint64_t v74 = (NSString *)@"<unknown>";
            }
            uint64_t v90 = 138412290;
            uint64_t v91 = v74;
            _os_log_fault_impl( &dword_182EB1000,  v61,  OS_LOG_TYPE_FAULT,  "NSPredicate: Using NSFunctionExpression with selector '%@' passed the incorrect number of arguments",  (uint8_t *)&v90,  0xCu);
          }

          +[_NSPredicateUtilities _predicateSecurityAction]();
        }
      }

      uint64_t v62 = 0LL;
      *(void *)&uint64_t v60 = 138412546LL;
      uint64_t v85 = v60;
      do
      {
        int v89 = (id)v86[v62];
        uint64_t v63 = (const char *)[v56 getArgumentTypeAtIndex:v62 + 2];
        uint64_t v64 = (id *)v63;
        if (v63)
        {
          if (strlen(v63) >= 2)
          {
            uint64_t v65 = *(unsigned __int8 *)v64;
            if (v65 == 94 || v65 == 64 && *((_BYTE *)v64 + 1) == 63)
            {
              objc_opt_self();
              if ((_CFPredicatePolicyData_getFlags() & 8) != 0)
              {
                objc_opt_self();
                uint64_t v66 = (os_log_s *)_NSOSLog();
                if (os_log_type_enabled(v66, OS_LOG_TYPE_FAULT))
                {
                  id v69 = (NSString *)@"<unknown>";
                  if (v84) {
                    id v69 = NSStringFromSelector(v84);
                  }
                  uint64_t v90 = v85;
                  uint64_t v91 = v69;
                  uint64_t v92 = 2080;
                  uint64_t v93 = v64;
                  _os_log_fault_impl( &dword_182EB1000,  v66,  OS_LOG_TYPE_FAULT,  "NSPredicate: Using NSFunctionExpression with selector '%@' and parameter encoding '%s' is forbidden",  (uint8_t *)&v90,  0x16u);
                }

                +[_NSPredicateUtilities _predicateSecurityAction]();
              }

              if (([v89 isNSData] & 1) != 0 || objc_msgSend(v89, "isNSString"))
              {
                objc_opt_self();
                uint64_t v67 = (os_log_s *)_NSOSLog();
                if (os_log_type_enabled(v67, OS_LOG_TYPE_FAULT))
                {
                  unint64_t v68 = (NSString *)@"<unknown>";
                  if (v84) {
                    unint64_t v68 = NSStringFromSelector(v84);
                  }
                  uint64_t v90 = v85;
                  uint64_t v91 = v68;
                  uint64_t v92 = 2080;
                  uint64_t v93 = v64;
                  _os_log_fault_impl( &dword_182EB1000,  v67,  OS_LOG_TYPE_FAULT,  "NSPredicate: Invalid argument passed to NSFunctionExpression with selector '%@' and parameter encodi ng '%s' expecting pointer",  (uint8_t *)&v90,  0x16u);
                }

                +[_NSPredicateUtilities _predicateSecurityAction]();
              }
            }
          }
        }

        [v58 setArgument:&v89 atIndex:v62 + 2];
        ++v62;
      }

      while (v87 != v62);
      [v58 invoke];
      if ([v56 methodReturnLength]) {
        [v58 getReturnValue:&v88[1]];
      }
      if (*(void *)&v88[1])
      {
LABEL_126:
        objc_opt_self();
        if ((_CFPredicatePolicyData_getFlags() & 8) != 0 && !object_isClass(*(id *)&v88[1]))
        {
          unint64_t v70 = object_getClass(*(id *)&v88[1]);
          if (!object_isClass(v70))
          {
            objc_opt_self();
            uint64_t v71 = (os_log_s *)_NSOSLog();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_FAULT))
            {
              LOWORD(v90) = 0;
              _os_log_fault_impl( &dword_182EB1000,  v71,  OS_LOG_TYPE_FAULT,  "NSPredicate: NSFunctionExpression must return an object",  (uint8_t *)&v90,  2u);
            }

            +[_NSPredicateUtilities _predicateSecurityAction]();
          }
        }
      }

unint64_t __JSONEncoder.wrap<A>(_:for:_:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v93 = a6;
  uint64_t v94 = a4;
  unint64_t v96 = a3;
  uint64_t v97 = a2;
  uint64_t v98 = a1;
  uint64_t v104 = *MEMORY[0x1895F89C0];
  uint64_t v95 = *(void *)(a5 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = (uint64_t *)((char *)&v87 - v11);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x1895F8858](v15);
  uint64_t v20 = (char *)&v87 - v19;
  uint64_t v21 = MEMORY[0x1895F8858](v18);
  uint64_t v23 = (char *)&v87 - v22;
  MEMORY[0x1895F8858](v21);
  id v25 = (char *)&v87 - v24;
  int v99 = v6;
  unint64_t v26 = v6[7];
  if (v26)
  {
    if (v26 == 1) {
      __asm { BR              X10 }
    }

    uint64_t v32 = v99;
    uint64_t v39 = v99[8];
    unint64_t v40 = v99[2];
    unint64_t v88 = v99 + 2;
    uint64_t v90 = v39;
    uint64_t v91 = v14;
    if (v40 >> 62)
    {
      outlined copy of JSONEncoder.KeyEncodingStrategy(v26);
      swift_bridgeObjectRetain();
      uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v14 = v91;
    }

    else
    {
      uint64_t v89 = *(void *)((v40 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_retain();
    }

    uint64_t v92 = (void (*)(uint64_t, uint64_t, void *))v26;
    uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v41(v20, v94, v13);
    v41(v17, (uint64_t)v20, v13);
    uint64_t v42 = v95;
    int v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v95 + 48))(v17, 1LL, a5);
    unint64_t v44 = v96;
    unint64_t v45 = v96 >> 62;
    if (v43 == 1)
    {
      uint64_t v46 = *(void (**)(char *, uint64_t))(v91 + 8);
      v46(v20, v13);
      v46(v17, v13);
      uint64_t v47 = v32[18];
      uint64_t v48 = v32[19];
      v32[18] = v44;
      if ((_DWORD)v45)
      {
        uint64_t v49 = v100;
        uint64_t v50 = v98;
        if ((_DWORD)v45 != 1)
        {
          uint64_t v51 = 0LL;
          goto LABEL_60;
        }

        uint64_t v51 = *(void *)(v44 + 32);
        swift_retain();
      }

      else
      {
        uint64_t v51 = *(void *)(v44 + 64);
        swift_retain();
        uint64_t v49 = v100;
        uint64_t v50 = v98;
      }

uint64_t specialized __JSONEncoder.wrap<A>(_:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  unint64_t v8 = v7;
  LOBYTE(v9) = a6;
  unint64_t v13 = *(void *)(v6 + 16);
  unint64_t v88 = (unint64_t *)(v6 + 16);
  if (v13 >> 62) {
    goto LABEL_110;
  }
  uint64_t v87 = *(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    type metadata accessor for JSONReference();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = MEMORY[0x18961AFF0];
    uint64_t v92 = (void *)(v14 + 16);
    *(void *)(v14 + 24) = 0LL;
    *(_BYTE *)(v14 + 32) = 4;
    uint64_t v15 = swift_retain();
    MEMORY[0x186E1BAC0](v15);
    if (*(void *)((*v88 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*v88 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    uint64_t v93 = v14;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if ((_BYTE)v9 == 0xFF)
    {
      swift_retain();
      goto LABEL_13;
    }

    uint64_t v16 = (void *)swift_allocObject();
    v16[5] = &type metadata for _CodingKey;
    void v16[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v17 = swift_allocObject();
    v16[2] = v17;
    *(void *)(v17 + 16) = a3;
    *(void *)(v17 + 24) = a4;
    *(void *)(v17 + 32) = a5;
    *(_BYTE *)(v17 + 40) = v9;
    v16[7] = a2;
    if (a2 >> 62) {
      break;
    }
    uint64_t v18 = (uint64_t *)(a2 + 64);
LABEL_11:
    uint64_t v19 = *v18;
    swift_retain();
    uint64_t v20 = v19 + 1;
    if (!__OFADD__(v19, 1LL)) {
      goto LABEL_12;
    }
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    swift_bridgeObjectRetain();
    uint64_t v87 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  if (a2 >> 62 == 1)
  {
    uint64_t v18 = (uint64_t *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_11;
  }

  uint64_t v20 = 1LL;
LABEL_12:
  v16[8] = v20;
  a2 = (unint64_t)v16;
LABEL_13:
  uint64_t v89 = a1 + 64;
  uint64_t v21 = 1LL << *(_BYTE *)(a1 + 32);
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  else {
    uint64_t v22 = -1LL;
  }
  unint64_t v23 = v22 & *(void *)(a1 + 64);
  outlined copy of _CodingKey?(a3, a4, a5, v9);
  int64_t v90 = (unint64_t)(v21 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v24 = 0LL;
  a3 = v93;
  while (2)
  {
    if (v23)
    {
      unint64_t v29 = __clz(__rbit64(v23));
      uint64_t v30 = (v23 - 1) & v23;
      unint64_t v31 = v29 | (v24 << 6);
      goto LABEL_21;
    }

    int64_t v35 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      goto LABEL_109;
    }
    if (v35 >= v90) {
      goto LABEL_30;
    }
    unint64_t v36 = *(void *)(v89 + 8 * v35);
    if (v36) {
      goto LABEL_25;
    }
    v24 += 2LL;
    if (v35 + 1 >= v90)
    {
      int64_t v24 = v35;
      goto LABEL_30;
    }

    unint64_t v36 = *(void *)(v89 + 8 * v24);
    if (v36)
    {
      ++v35;
      goto LABEL_25;
    }

    int64_t v55 = v35 + 2;
    if (v35 + 2 >= v90) {
      goto LABEL_30;
    }
    unint64_t v36 = *(void *)(v89 + 8 * v55);
    if (v36)
    {
      v35 += 2LL;
LABEL_25:
      uint64_t v30 = (v36 - 1) & v36;
      unint64_t v31 = __clz(__rbit64(v36)) + (v35 << 6);
      int64_t v24 = v35;
LABEL_21:
      uint64_t v32 = *(void *)(a1 + 56);
      uint64_t v33 = (void *)(*(void *)(a1 + 48) + 16 * v31);
      uint64_t v34 = v33[1];
      unint64_t v95 = v30;
      *(void *)&__int128 v96 = *v33;
      *((void *)&v96 + 1) = v34;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( v32 + 40 * v31,  (uint64_t)&v97);
      swift_bridgeObjectRetain();
      goto LABEL_31;
    }

    while (2)
    {
      int64_t v35 = v55 + 1;
      if (__OFADD__(v55, 1LL))
      {
        __break(1u);
        goto LABEL_112;
      }

      if (v35 < v90)
      {
        unint64_t v36 = *(void *)(v89 + 8 * v35);
        ++v55;
        if (v36) {
          goto LABEL_25;
        }
        continue;
      }

      break;
    }

    int64_t v24 = v90 - 1;
LABEL_30:
    unint64_t v95 = 0LL;
    uint64_t v99 = 0LL;
    __int128 v97 = 0u;
    __int128 v98 = 0u;
    __int128 v96 = 0u;
LABEL_31:
    outlined init with take of (key: String, value: Encodable)?((uint64_t)&v96, (uint64_t)&v100);
    uint64_t v37 = v101;
    if (!v101)
    {
      swift_release();
      uint64_t v76 = v88;
      if (!(*v88 >> 62))
      {
        uint64_t v77 = *(void *)((*v88 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        goto LABEL_92;
      }

LABEL_116:
      swift_bridgeObjectRetain();
      uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v83) {
        goto LABEL_101;
      }
      goto LABEL_117;
    }

    uint64_t v9 = v41;
    if (!v41)
    {
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = MEMORY[0x18961AFF0];
      *(void *)(v9 + 24) = 0LL;
      *(_BYTE *)(v9 + 32) = 4;
    }

    swift_bridgeObjectRelease();
    if (*(_BYTE *)(a3 + 32) != 4) {
      goto LABEL_119;
    }
    uint64_t v42 = a3;
    a3 = *(void *)(a3 + 16);
    *uint64_t v92 = 0LL;
    v92[1] = 0LL;
    *(_BYTE *)(v42 + 32) = 7;
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v103 = a3;
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a4, v37);
    uint64_t v45 = *(void *)(a3 + 16);
    BOOL v46 = (v44 & 1) == 0;
    uint64_t v47 = v45 + v46;
    if (__OFADD__(v45, v46)) {
      goto LABEL_107;
    }
    a5 = v44;
    if (*(void *)(a3 + 24) < v47)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v47,  isUniquelyReferenced_nonNull_native);
      uint64_t v48 = v103;
      unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(a4, v37);
      if ((a5 & 1) != (v50 & 1)) {
        goto LABEL_121;
      }
      unint64_t v8 = v49;
      a3 = v93;
      if ((a5 & 1) != 0) {
        goto LABEL_17;
      }
LABEL_43:
      *(void *)(v48 + 8 * (v8 >> 6) + 64) |= 1LL << v8;
      uint64_t v51 = (uint64_t *)(*(void *)(v48 + 48) + 16 * v8);
      uint64_t *v51 = a4;
      v51[1] = v37;
      *(void *)(*(void *)(v48 + 56) + 8 * v8) = v9;
      uint64_t v52 = *(void *)(v48 + 16);
      BOOL v53 = __OFADD__(v52, 1LL);
      uint64_t v54 = v52 + 1;
      if (v53) {
        goto LABEL_108;
      }
      *(void *)(v48 + 16) = v54;
      swift_bridgeObjectRetain();
LABEL_18:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(a3 + 16);
      uint64_t v27 = *(void *)(a3 + 24);
      *(void *)(a3 + 16) = v48;
      *(void *)(a3 + 24) = 0LL;
      char v28 = *(_BYTE *)(a3 + 32);
      *(_BYTE *)(a3 + 32) = 4;
      outlined consume of JSONReference.Backing(v26, v27, v28);
      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v96);
      unint64_t v8 = 0LL;
      unint64_t v23 = v95;
      continue;
    }

    break;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    uint64_t v48 = a3;
    a3 = v93;
    if ((v44 & 1) == 0) {
      goto LABEL_43;
    }
LABEL_17:
    uint64_t v25 = *(void *)(v48 + 56);
    a5 = 8 * v8;
    swift_release();
    *(void *)(v25 + 8 * v8) = v9;
    goto LABEL_18;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v56 = static _DictionaryStorage.copy(original:)();
  uint64_t v48 = v56;
  uint64_t v57 = *(void *)(a3 + 16);
  if (!v57)
  {
LABEL_88:
    swift_bridgeObjectRelease();
    a3 = v93;
    if ((a5 & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_17;
  }

  uint64_t v58 = (void *)(v56 + 64);
  unint64_t v59 = (unint64_t)((1LL << *(_BYTE *)(v48 + 32)) + 63) >> 6;
  if (v48 != a3 || (unint64_t)v58 >= a3 + 64 + 8 * v59)
  {
    memmove(v58, (const void *)(a3 + 64), 8 * v59);
    uint64_t v57 = *(void *)(a3 + 16);
  }

  uint64_t v84 = a3 + 64;
  int64_t v60 = 0LL;
  *(void *)(v48 + 16) = v57;
  uint64_t v61 = 1LL << *(_BYTE *)(a3 + 32);
  if (v61 < 64) {
    uint64_t v62 = ~(-1LL << v61);
  }
  else {
    uint64_t v62 = -1LL;
  }
  unint64_t v63 = v62 & *(void *)(a3 + 64);
  int64_t v85 = (unint64_t)(v61 + 63) >> 6;
  while (2)
  {
    if (v63)
    {
      unint64_t v64 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      int64_t v86 = v60;
      unint64_t v65 = v64 | (v60 << 6);
LABEL_62:
      uint64_t v66 = 16 * v65;
      uint64_t v67 = (void *)(*(void *)(a3 + 48) + 16 * v65);
      uint64_t v68 = v67[1];
      uint64_t v69 = 8 * v65;
      uint64_t v70 = *(void *)(*(void *)(a3 + 56) + v69);
      uint64_t v71 = (void *)(*(void *)(v48 + 48) + v66);
      *uint64_t v71 = *v67;
      v71[1] = v68;
      *(void *)(*(void *)(v48 + 56) + v69) = v70;
      swift_bridgeObjectRetain();
      swift_retain();
      int64_t v60 = v86;
      continue;
    }

    break;
  }

  int64_t v72 = v60 + 1;
  if (__OFADD__(v60, 1LL)) {
    goto LABEL_118;
  }
  if (v72 >= v85) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v84 + 8 * v72);
  int64_t v74 = v60 + 1;
  if (v73) {
    goto LABEL_87;
  }
  int64_t v74 = v60 + 2;
  if (v60 + 2 >= v85) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v84 + 8 * v74);
  if (v73) {
    goto LABEL_87;
  }
  int64_t v74 = v60 + 3;
  if (v60 + 3 >= v85) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v84 + 8 * v74);
  if (v73) {
    goto LABEL_87;
  }
  int64_t v74 = v60 + 4;
  if (v60 + 4 >= v85) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v84 + 8 * v74);
  if (v73) {
    goto LABEL_87;
  }
  int64_t v74 = v60 + 5;
  if (v60 + 5 >= v85) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v84 + 8 * v74);
  if (v73) {
    goto LABEL_87;
  }
  int64_t v74 = v60 + 6;
  if (v60 + 6 >= v85) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v84 + 8 * v74);
  if (v73) {
    goto LABEL_87;
  }
  int64_t v74 = v60 + 7;
  if (v60 + 7 >= v85) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v84 + 8 * v74);
  if (v73) {
    goto LABEL_87;
  }
  int64_t v74 = v60 + 8;
  if (v60 + 8 >= v85) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v84 + 8 * v74);
  if (v73)
  {
LABEL_87:
    unint64_t v63 = (v73 - 1) & v73;
    int64_t v86 = v74;
    unint64_t v65 = __clz(__rbit64(v73)) + (v74 << 6);
    goto LABEL_62;
  }

  uint64_t v75 = v60 + 9;
  if (v60 + 9 >= v85) {
    goto LABEL_88;
  }
  unint64_t v73 = *(void *)(v84 + 8 * v75);
  if (v73)
  {
    int64_t v74 = v60 + 9;
    goto LABEL_87;
  }

  while (1)
  {
    int64_t v74 = v75 + 1;
    if (__OFADD__(v75, 1LL)) {
      break;
    }
    if (v74 >= v85) {
      goto LABEL_88;
    }
    unint64_t v73 = *(void *)(v84 + 8 * v74);
    ++v75;
    if (v73) {
      goto LABEL_87;
    }
  }

              __int128 v97 = (4 * *(_BYTE *)(v43 + 18) + 8) & 0x3C;
              uint64_t v16 = ((-15LL << v97) - 1) & v16 | (v56 << v97);
              uint64_t v5 = *(void *)(v43 + 24 + 24 * v56);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              int v43 = v5;
              if (!*(_BYTE *)(v5 + 18)) {
                goto LABEL_141;
              }
            }
          }

          uint64_t result = swift_unknownObjectRetain_n();
          uint64_t v5 = v42;
LABEL_141:
          uint64_t v114 = *(unsigned __int16 *)(v5 + 16);
          if (!*(_WORD *)(v5 + 16)) {
            goto LABEL_429;
          }
          Swift::String v115 = *(void *)(v5 + 24);
          uint64_t v48 = __OFSUB__(v3, v115);
          Swift::String v116 = v3 - v115;
          if (v48) {
            goto LABEL_413;
          }
          unint64_t v95 = v327;
          if (v116 <= 0)
          {
            uint64_t v119 = 0LL;
          }

          else
          {
            if ((_DWORD)v114 == 1) {
              goto LABEL_431;
            }
            Swift::String v117 = *(void *)(v5 + 48);
            uint64_t v3 = v116 - v117;
            if (__OFSUB__(v116, v117)) {
              goto LABEL_415;
            }
            if (v3 >= 1)
            {
              if ((_DWORD)v114 == 2) {
                goto LABEL_431;
              }
              unint64_t v118 = (void *)(v5 + 72);
              uint64_t v119 = 2LL;
              while (v114 != v119)
              {
                uint64_t v120 = v3 - *v118;
                if (__OFSUB__(v3, *v118)) {
                  goto LABEL_379;
                }
                if (v120 < 1) {
                  goto LABEL_156;
                }
                ++v119;
                v118 += 3;
                uint64_t v3 = v120;
                if (v114 == v119) {
                  goto LABEL_431;
                }
              }

              goto LABEL_378;
            }

            uint64_t v3 = v116;
            uint64_t v119 = 1LL;
          }

  swift_release_n();
  uint64_t result = swift_willThrow();
  __break(1u);
  return result;
}

              int64_t v72 = (v85 - 1) & v85;
              uint64_t v75 = __clz(__rbit64(v85)) + (v69 << 6);
            }

            uint64_t v76 = 16 * v75;
            uint64_t v77 = (uint64_t *)(*(void *)(v5 + 48) + v76);
            uint64_t v79 = *v77;
            unint64_t v78 = v77[1];
            uint64_t v80 = *(void *)(v5 + 56) + v76;
            uint64_t v81 = *(void *)v80;
            LOBYTE(v80) = *(_BYTE *)(v80 + 8);
            uint64_t v82 = (void *)(*(void *)(v61 + 48) + v76);
            *uint64_t v82 = v79;
            v82[1] = v78;
            uint64_t v83 = *(void *)(v61 + 56) + v76;
            *(void *)uint64_t v83 = v81;
            *(_BYTE *)(v83 + 8) = v80;
            swift_bridgeObjectRetain();
          }
        }

            uint64_t v141 = 256LL;
          }

          *(_OWORD *)(a3 + 16) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)a3 = 0u;
          *(_BYTE *)(a3 + 48) = 1;
          goto LABEL_119;
        }

            uint64_t v71 = 512LL;
LABEL_162:
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
              goto LABEL_303;
            }
            uint64_t v15 = (uint64_t)@"NSPOSIXErrorDomain";
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            unint64_t v196 = (int)POSIXErrorCode.rawValue.getter();
            id v197 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
            char v198 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            a6 = objc_msgSend(v197, sel_initWithDomain_code_userInfo_, v198, v196, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v199 = objc_msgSend(a6, sel_domain);
            uint64_t v200 = static String._unconditionallyBridgeFromObjectiveC(_:)(v199);
            Swift::String v202 = v201;

            if (v200 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v202 == v203)
            {
              goto LABEL_173;
            }

            uint64_t v204 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v73 = v332;
            if ((v204 & 1) != 0) {
              goto LABEL_175;
            }
            __break(1u);
LABEL_167:
            uint64_t v71 = 516LL;
            break;
        }

        goto LABEL_170;
      }

      unint64_t v59 = v333;
      int64_t v60 = 4LL;
      uint64_t v61 = v331;
      switch(v58)
      {
        case 1:
        case 13:
          int64_t v60 = 513LL;
          goto LABEL_134;
        case 2:
          goto LABEL_134;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_115;
        case 17:
          int64_t v60 = 516LL;
          goto LABEL_134;
        case 28:
        case 69:
          int64_t v60 = 640LL;
          goto LABEL_134;
        case 30:
          int64_t v60 = 642LL;
          goto LABEL_134;
        case 63:
          int64_t v60 = 514LL;
          goto LABEL_134;
        default:
          uint64_t v61 = v331;
          unint64_t v63 = v332;
          if (v58 == 102)
          {
            swift_retain_n();
            uint64_t v148 = v59;
            swift_retain_n();
            int64_t v149 = v148;
            uint64_t v150 = 0LL;
            id v327 = 512LL;
          }

          else
          {
LABEL_115:
            int64_t v60 = 512LL;
LABEL_134:
            id v327 = v60;
            swift_retain_n();
            uint64_t v158 = v59;
            swift_retain_n();
            unint64_t v159 = v158;
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
              goto LABEL_303;
            }
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            int64_t v160 = (int)POSIXErrorCode.rawValue.getter();
            unint64_t v161 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
            unint64_t v162 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            uint64_t v150 = objc_msgSend(v161, sel_initWithDomain_code_userInfo_, v162, v160, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t v163 = objc_msgSend(v150, sel_domain);
            id v164 = static String._unconditionallyBridgeFromObjectiveC(_:)(v163);
            uint64_t v166 = v165;

            if (v164 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v166 == v167)
            {
              swift_bridgeObjectRelease_n();
              unint64_t v63 = v332;
              unint64_t v59 = v333;
            }

            else
            {
              uint64_t v168 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v63 = v332;
              if ((v168 & 1) == 0) {
                goto LABEL_295;
              }
              unint64_t v59 = v333;
            }
          }

          swift_bridgeObjectRetain();
          outlined copy of PathOrURL(v59, (uint64_t)v61, v63, 1);
          if (_foundation_swift_url_feature_enabled())
          {
            uint64_t v326 = v150;
            v340._uint64_t countAndFlagsBits = (uint64_t)v59;
            v340._unint64_t object = v61;
            uint64_t v341 = v63;
            swift_retain();
            uint64_t v169 = v59;
            swift_retain();
            __int128 v170 = URL.path(percentEncoded:)(1);
            Swift::String v340 = v170;
            swift_bridgeObjectRetain();
            if (String.count.getter() > 1
              && (specialized BidirectionalCollection.last.getter( v170._countAndFlagsBits,  (unint64_t)v170._object) & 0x1FF) == 0x2F)
            {
              specialized RangeReplaceableCollection<>.popLast()();
              swift_bridgeObjectRelease();
            }

            v337._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
            __int128 v171 = specialized Set._Variant.insert(_:)(&v336, 0x2FuLL);
            int64_t v172 = v337._countAndFlagsBits;
            unint64_t v173 = v340._countAndFlagsBits;
            int64_t v174 = v340._object;
            uint64_t v175 = ((unint64_t)v340._object >> 56) & 0xF;
            if (v175)
            {
              uint64_t v337 = v340;
              MEMORY[0x1895F8858](v171);
              uint64_t v322 = (uint64_t)&v337;
              char v323 = v172;
              swift_bridgeObjectRetain();
              specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v321,  v173,  (unint64_t)v174);
              if (v176 == 1)
              {
                Swift::String v178 = (unint64_t)v337._object;
                Swift::String v177 = v337._countAndFlagsBits;
                swift_bridgeObjectRetain();
                specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v177, v178, v172);
                swift_bridgeObjectRelease();
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v61 = v331;
              unint64_t v59 = v333;
              uint64_t v150 = v326;
            }

            else
            {
              swift_bridgeObjectRelease();
              unint64_t v59 = v333;
              uint64_t v150 = v326;
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of PathOrURL(v59, (uint64_t)v61, v63, 1);
            id v194 = v59;
            unint64_t v195 = (uint64_t)v61;
          }

          else
          {
            id v179 = objc_msgSend(v59, sel__parameterString);
            if (v179)
            {
              Swift::String v180 = v179;
              uint64_t v181 = static String._unconditionallyBridgeFromObjectiveC(_:)(v179);
              Swift::String v183 = v182;

              if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                && (uint64_t v184 = objc_msgSend(v59, sel_path)) != 0)
              {
                uint64_t v185 = v184;
                unint64_t v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(v184);
                unint64_t v188 = v187;

                v340._uint64_t countAndFlagsBits = (uint64_t)v186;
                v340._unint64_t object = v188;
                swift_bridgeObjectRetain();
                v189._uint64_t countAndFlagsBits = 59LL;
                v189._unint64_t object = (void *)0xE100000000000000LL;
                String.append(_:)(v189);
                unint64_t v63 = v332;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v190._uint64_t countAndFlagsBits = (uint64_t)v181;
                v190._unint64_t object = v183;
                String.append(_:)(v190);
                swift_bridgeObjectRelease();
                unint64_t v59 = v333;
              }

              else
              {
                v340._uint64_t countAndFlagsBits = 59LL;
                v340._unint64_t object = (void *)0xE100000000000000LL;
                v191._uint64_t countAndFlagsBits = (uint64_t)v181;
                v191._unint64_t object = v183;
                String.append(_:)(v191);
              }

              swift_bridgeObjectRelease();
              outlined consume of PathOrURL(v59, (uint64_t)v61, v63, 1);
LABEL_196:
              Swift::String v245 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              uint64_t v152 = v59;
              outlined consume of PathOrURL(v59, (uint64_t)v61, v63, 1);
              if (v150)
              {
                v340._uint64_t countAndFlagsBits = (uint64_t)v150;
                lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
                uint64_t v153 = v150;
                Swift::String v246 = v150;
                if (_getErrorEmbeddedNSError<A>(_:)())
                {
                }

                else
                {
                  swift_allocError();
                  void *v247 = v246;
                }

                uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
                unint64_t v63 = v332;
                if (v330) {
                  goto LABEL_203;
                }
              }

              else
              {
                uint64_t v153 = 0LL;
                uint64_t v15 = 0LL;
                if (v330)
                {
LABEL_203:
                  unint64_t v155 = (void *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  goto LABEL_204;
                }
              }

              unint64_t v155 = 0LL;
LABEL_204:
              uint64_t v157 = objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v327,  v245,  v152,  v15,  v155,  0,  0);
              goto LABEL_205;
            }

            id v192 = objc_msgSend(v59, sel_path);
            if (v192)
            {
              uint64_t v193 = v192;
              static String._unconditionallyBridgeFromObjectiveC(_:)(v192);
            }

            id v194 = v59;
            unint64_t v195 = (uint64_t)v61;
            unint64_t v63 = v332;
          }

          outlined consume of PathOrURL(v194, v195, v63, 1);
          goto LABEL_196;
      }
    }

    if (!mktemp(a4)) {
      goto LABEL_41;
    }
    uint64_t v38 = _NSOpenFileDescriptor_Protected(a4, 2562, (int)a6, 438LL);
    if ((v38 & 0x80000000) == 0)
    {
      uint64_t v15 = v38;
      String.init(cString:)();
      goto LABEL_62;
    }

    if (!--v33) {
      goto LABEL_32;
    }
  }

  uint64_t v62 = MEMORY[0x186E1B0E8]();
  LODWORD(a6) = v62;
  if ((v17 & 1) == 0)
  {
    unint64_t v73 = v332;
    uint64_t v70 = v333;
    uint64_t v71 = 4LL;
    switch(v62)
    {
      case 1:
      case 13:
        uint64_t v71 = 513LL;
        break;
      case 2:
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_117;
      case 17:
        goto LABEL_167;
      case 28:
      case 69:
        uint64_t v71 = 640LL;
        break;
      case 30:
        uint64_t v71 = 642LL;
        break;
      case 63:
        uint64_t v71 = 514LL;
        break;
      default:
        if (v62 == 102)
        {
          a6 = 0LL;
          uint64_t v71 = 512LL;
          int64_t v72 = (uint64_t)v331;
          goto LABEL_176;
        }

            if ((_DWORD)v667) {
              int64_t v149 = 0x10000;
            }
            else {
              int64_t v149 = 0;
            }
            uint64_t v150 = v137 | v149;
            swift_bridgeObjectRetain();
            uint64_t v151 = v644;
            uint64_t v152 = specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)( v744,  (uint64_t)v664,  (unint64_t)v111,  v150,  v122,  v121,  (int)v671,  0LL);
            char v28 = (unint64_t)v151;
            if (v151)
            {

              swift_bridgeObjectRelease();
              char v28 = 0LL;
              uint64_t v153 = 0;
              Swift::String v117 = 0LL;
              if ((v139 & 1) == 0) {
                goto LABEL_124;
              }
            }

            else
            {
              uint64_t v153 = v152;
              swift_bridgeObjectRelease();
              Swift::String v117 = *(_OWORD **)&v744[0];
              if ((v139 & 1) == 0) {
                goto LABEL_124;
              }
            }

            goto LABEL_121;
          }
        }

        else
        {
          memset(v744, 0, 32);
          uint64_t v139 = (char)v670;
        }

        outlined destroy of Any?((uint64_t)v744, &demangling cache variable for type metadata for Any?);
        goto LABEL_116;
      }

      uint64_t v140 = objc_msgSend(v648, sel_preferredLocalizations);
      if (v140)
      {
        uint64_t v141 = v140;
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v142 = swift_dynamicCastClass();
        if (v142)
        {
          uint64_t v143 = (void *)v142;

          if (!v143[2]) {
            goto LABEL_276;
          }
LABEL_273:
          unint64_t v122 = (NSError *)v143[4];
          uint64_t v121 = (NSError *)v143[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_93;
        }

        swift_unknownObjectRelease();
        objc_msgSend(v141, sel_copy);
        v561 = _bridgeCocoaArray<A>(_:)();
        swift_unknownObjectRelease();
        uint64_t v143 = (void *)specialized _arrayForceCast<A, B>(_:)(v561);

        swift_bridgeObjectRelease();
        if (v143[2]) {
          goto LABEL_273;
        }
      }

      else
      {
        uint64_t v143 = (void *)MEMORY[0x18961AFE8];
        if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
          goto LABEL_273;
        }
      }

  specialized BidirectionalCollection._range<A>(of:anchored:backwards:)(v141, v144, 0, 0, v139, v140);
  uint64_t v156 = v155;
  uint64_t v158 = v157;
  swift_bridgeObjectRelease();
  if ((v158 & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v159 = specialized Collection.suffix(from:)(v156, v139, v140);
    unint64_t v161 = v160;
    uint64_t v163 = v162;
    uint64_t v165 = v164;
    swift_bridgeObjectRelease();
    uint64_t v166 = MEMORY[0x186E1B610](v159, v161, v163, v165);
    uint64_t v168 = v167;
    swift_bridgeObjectRelease();
    uint64_t v169 = TimeZoneCache.State.fixed(_:)(v166, v168);
    __int128 v171 = v170;
    swift_bridgeObjectRelease();
    if (v169)
    {
      *(void *)a1 = v169;
      *(void *)(a1 + 8) = v171;
      return MEMORY[0x186E20E60](v17, -1LL, -1LL);
    }
  }

              Swift::String v105 = (4 * *(_BYTE *)(v104 + 18) + 8) & 0x3C;
              uint64_t v11 = ((-15LL << v105) - 1) & v11 | (v56 << v105);
              a3 = *(void *)(v104 + 24 + 24 * v56);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v104 = a3;
              if (!*(_BYTE *)(a3 + 18)) {
                goto LABEL_141;
              }
            }

      uint64_t v67 = v71;
      if (v71 >= v53)
      {
LABEL_139:
        __break(1u);
        goto LABEL_140;
      }

      *(_BYTE *)(v60 + v71) = 58;
      uint64_t v71 = v67 + 1;
      goto LABEL_118;
    }

          __break(1u);
          goto LABEL_117;
        }

                  uint64_t v54 = (int32_t (__cdecl **)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))_StringObject.sharedUTF8.getter();
                  uint64_t v48 = v86;
                  goto LABEL_86;
                }

                goto LABEL_106;
              }

              uint64_t v6 = specialized Collection.first.getter(v13, v15);
              if ((v6 & 0x100) == 0)
              {
                if (v6 == 91)
                {
                  if ((v15 & 0x1000000000000000LL) == 0)
                  {
                    char v50 = (v49 << 16) - 65532;
                    LOBYTE(v51) = 1;
LABEL_73:
                    if ((v50 & 0xC) == 4LL << v51) {
                      char v50 = _StringGuts._slowEnsureMatchingEncoding(_:)(v50, v13, v15);
                    }
                    unint64_t v8 = v50 >> 16;
                    if (v50 >> 16 >= v49)
                    {
                      __break(1u);
                    }

                    else
                    {
                      if ((v15 & 0x1000000000000000LL) != 0)
                      {
                        BOOL v53 = String.UTF8View._foreignSubscript(position:)();
                      }

                      else
                      {
                        if ((v15 & 0x2000000000000000LL) == 0)
                        {
                          if ((v13 & 0x1000000000000000LL) != 0)
                          {
                            uint64_t v52 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
                            goto LABEL_80;
                          }

                          goto LABEL_118;
                        }

                        uint64_t v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v13;
                        uint64_t v93 = v15 & 0xFFFFFFFFFFFFFFLL;
                        BOOL v53 = *((_BYTE *)&v92 + v8);
                      }

                      while (v53 == 93)
                      {
                        uint64_t v56 = specialized Collection<>.firstIndex(of:)(0x25u, v13, v15);
                        if ((v57 & 1) != 0)
                        {
                          swift_bridgeObjectRetain();
                          if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v13, v15) & 1) != 0)
                          {
                            uint64_t v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v13;
                            uint64_t v93 = v15;
                            unint64_t v8 = String.init<A>(_:)();
                            uint64_t v9 = v58;
                            goto LABEL_110;
                          }

                          swift_bridgeObjectRelease_n();
                          goto LABEL_24;
                        }

                        unint64_t v8 = v56;
                        if ((v15 & 0x1000000000000000LL) != 0)
                        {
                          unint64_t v59 = String.UTF8View._foreignCount()();
                          if (__OFSUB__(v59, 1LL))
                          {
                            __break(1u);
LABEL_120:
                            uint64_t v41 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
                            goto LABEL_53;
                          }

                          uint64_t v9 = MEMORY[0x186E1B838](15LL, v59 - 1, v13, v15);
                        }

                        else
                        {
                          uint64_t v9 = (v49 << 16) - 65532;
                        }

                        if (v9 >> 14 >= v8 >> 14)
                        {
                          swift_bridgeObjectRetain_n();
                          int64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.subscript.getter();
                          uint64_t v62 = v61;
                          uint64_t v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v60;
                          uint64_t v93 = v63;
                          uint64_t v94 = v64;
                          unint64_t v95 = v61;
                          MEMORY[0x1895F8858](v60);
                          int64_t v90 = &v92;
                          uint64_t v91 = 8;
                          uint64_t v68 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t)&v89,  v66,  v67,  v65,  v62);
                          if (v69)
                          {
                            uint64_t v70 = (uint64_t)v68;
                            uint64_t v71 = v69;
                          }

                          else
                          {
                            int64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v92;
                            unint64_t v73 = v93;
                            int64_t v74 = v94;
                            uint64_t v75 = v95;
                            swift_bridgeObjectRetain();
                            uint64_t v70 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( (unint64_t)v72,  v73,  v74,  v75,  8u);
                            uint64_t v71 = v76;
                            swift_bridgeObjectRelease();
                          }

                          uint64_t v77 = String.subscript.getter();
                          unint64_t v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x186E1B610](v77);
                          uint64_t v80 = v79;
                          swift_bridgeObjectRelease();
                          uint64_t v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v78;
                          uint64_t v93 = v80;
                          v81._uint64_t countAndFlagsBits = v70;
                          v81._unint64_t object = v71;
                          String.append(_:)(v81);
                          swift_bridgeObjectRelease();
                          v82._uint64_t countAndFlagsBits = 93LL;
                          v82._unint64_t object = (void *)0xE100000000000000LL;
                          String.append(_:)(v82);
                          swift_bridgeObjectRelease_n();
                          swift_bridgeObjectRelease();
                          unint64_t v8 = (unint64_t)v92;
                          uint64_t v9 = v93;
                          goto LABEL_110;
                        }

                        __break(1u);
LABEL_118:
                        uint64_t v52 = _StringObject.sharedUTF8.getter();
LABEL_80:
                        BOOL v53 = *(_BYTE *)(v52 + v8);
                      }
                    }

                    __break(1u);
                    goto LABEL_116;
                  }

                  uint64_t v6 = String.UTF8View._foreignCount()();
                  unint64_t v7 = v6 - 1;
                  if (!__OFSUB__(v6, 1LL))
                  {
                    uint64_t v51 = (v13 >> 59) & 1;
                    char v50 = MEMORY[0x186E1B838](15LL, v7, v13, v15);
                    goto LABEL_73;
                  }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v39 = v37 & 0xFFFFFFFFFFFFF0FFLL | (v47 << 8);
      goto LABEL_117;
    }

    goto LABEL_284;
  }

  if (unitsStyle >= 6) {
    abort();
  }
  unint64_t v65 = uatmufmt_getListPattern();
  uint64_t v34 = 0LL;
  if (v65 >= 1)
  {
    if (v105) {
      -[NSMutableString replaceOccurrencesOfString:withString:options:range:]( v105,  "replaceOccurrencesOfString:withString:options:range:",  @"{0}",  +[NSString stringWithCharacters:length:](&OBJC_CLASS___NSString, "stringWithCharacters:length:", &v117, v65),  0LL,  0LL,  -[NSString length](v105, "length"));
    }
    else {
      Swift::String v105 =  -[NSString initWithCharacters:length:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithCharacters:length:",  &v117,  v65);
    }
    unint64_t v123 = 0u;
    uint64_t v124 = 0u;
    uint64_t v121 = 0u;
    unint64_t v122 = 0u;
    uint64_t v119 = 0u;
    uint64_t v120 = 0u;
    Swift::String v117 = 0u;
    unint64_t v118 = 0u;
    os_unfair_lock_lock(&v24->_lock);
    if (-[NSDateComponentsFormatter _updateFormatterCacheIfNeeded_locked:unitsStyle:]( v24,  "_updateFormatterCacheIfNeeded_locked:unitsStyle:",  v99,  unitsStyle))
    {
      icuUnitFromNSUnit(*((void *)v135 + v29 - 1));
      uint64_t v68 = uatmufmt_format();
      os_unfair_lock_unlock(&v24->_lock);
      uint64_t v71 = -[NSString rangeOfString:](v105, "rangeOfString:", @"{1}");
      -[NSMutableString replaceCharactersInRange:withCharacters:length:]( v105,  "replaceCharactersInRange:withCharacters:length:",  v71,  v72,  &v117,  v68);
    }

    else
    {
      os_unfair_lock_unlock(&v24->_lock);
      Swift::String v105 = 0LL;
      uint64_t v61 = v29 - 1;
    }

    unint64_t v123 = 0u;
    uint64_t v124 = 0u;
    uint64_t v121 = 0u;
    unint64_t v122 = 0u;
    uint64_t v119 = 0u;
    uint64_t v120 = 0u;
    Swift::String v117 = 0u;
    unint64_t v118 = 0u;
    os_unfair_lock_lock(&v24->_lock);
    if (-[NSDateComponentsFormatter _updateFormatterCacheIfNeeded_locked:unitsStyle:]( v24,  "_updateFormatterCacheIfNeeded_locked:unitsStyle:",  v99,  unitsStyle))
    {
      icuUnitFromNSUnit(*((void *)v135 + v61));
      unint64_t v73 = uatmufmt_format();
      os_unfair_lock_unlock(&v24->_lock);
      --v61;
      int64_t v74 = -[NSString rangeOfString:](v105, "rangeOfString:", @"{0}");
      -[NSMutableString replaceCharactersInRange:withCharacters:length:]( v105,  "replaceCharactersInRange:withCharacters:length:",  v74,  v75,  &v117,  v73);
    }

    else
    {
      os_unfair_lock_unlock(&v24->_lock);
      Swift::String v105 = 0LL;
    }

    unint64_t v123 = 0u;
    uint64_t v124 = 0u;
    uint64_t v121 = 0u;
    unint64_t v122 = 0u;
    uint64_t v119 = 0u;
    uint64_t v120 = 0u;
    Swift::String v117 = 0u;
    unint64_t v118 = 0u;
    if ((v61 & 0x80000000) != 0)
    {
LABEL_150:
      uint64_t v34 = v105;
      goto LABEL_151;
    }

    uint64_t v76 = v61 + 1;
    do
    {
      --v76;
      uint64_t v77 = uatmufmt_getListPattern();
      uint64_t v34 = 0LL;
      if (v77 < 1) {
        break;
      }
      unint64_t v78 = (void *)-[NSMutableString copy](v105, "copy");
      -[NSMutableString replaceCharactersInRange:withCharacters:length:]( v105,  "replaceCharactersInRange:withCharacters:length:",  0LL,  -[NSString length](v105, "length"),  &v117,  v77);
      -[NSMutableString replaceOccurrencesOfString:withString:options:range:]( v105,  "replaceOccurrencesOfString:withString:options:range:",  @"{1}",  v78,  0LL,  0LL,  -[NSString length](v105, "length"));

      unint64_t v123 = 0u;
      uint64_t v124 = 0u;
      uint64_t v121 = 0u;
      unint64_t v122 = 0u;
      uint64_t v119 = 0u;
      uint64_t v120 = 0u;
      Swift::String v117 = 0u;
      unint64_t v118 = 0u;
      os_unfair_lock_lock(&v24->_lock);
      if (-[NSDateComponentsFormatter _updateFormatterCacheIfNeeded_locked:unitsStyle:]( v24,  "_updateFormatterCacheIfNeeded_locked:unitsStyle:",  v99,  unitsStyle))
      {
        icuUnitFromNSUnit(*((void *)v135 + v61));
        uint64_t v79 = uatmufmt_format();
        os_unfair_lock_unlock(&v24->_lock);
        --v61;
        uint64_t v80 = -[NSString rangeOfString:](v105, "rangeOfString:", @"{0}");
        -[NSMutableString replaceCharactersInRange:withCharacters:length:]( v105,  "replaceCharactersInRange:withCharacters:length:",  v80,  v81,  &v117,  v79);
      }

      else
      {
        os_unfair_lock_unlock(&v24->_lock);
        Swift::String v105 = 0LL;
      }

      uint64_t v34 = v105;
    }

    while (v76 > 0);
  }

LABEL_120:
  __break(1u);
LABEL_121:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

      swift_bridgeObjectRetain();
      uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v94) {
        goto LABEL_105;
      }
      goto LABEL_121;
    }

    uint64_t v6 = v51;
    uint64_t v111 = v35;
    if (!v51)
    {
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = MEMORY[0x18961AFF0];
      *(void *)(v6 + 24) = 0LL;
      *(_BYTE *)(v6 + 32) = 4;
    }

    swift_bridgeObjectRelease();
    uint64_t v112 = 0LL;
    if (*(_BYTE *)(v10 + 32) != 4) {
      goto LABEL_124;
    }
    uint64_t v52 = v41;
    unint64_t v7 = *(void *)(v10 + 16);
    BOOL v53 = v106;
    *int v106 = 0LL;
    v53[1] = 0LL;
    *(_BYTE *)(v10 + 32) = 7;
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v120 = v7;
    uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15, (uint64_t)v13);
    uint64_t v56 = *(void *)(v7 + 16);
    uint64_t v57 = (v55 & 1) == 0;
    uint64_t v58 = v56 + v57;
    if (__OFADD__(v56, v57)) {
      goto LABEL_112;
    }
    uint64_t v9 = v55;
    if (*(void *)(v7 + 24) < v58)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v58,  isUniquelyReferenced_nonNull_native);
      unint64_t v59 = v120;
      int64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15, (uint64_t)v13);
      if ((v9 & 1) != (v61 & 1)) {
        goto LABEL_126;
      }
      uint64_t v10 = v60;
      unint64_t v7 = v52;
      if ((v9 & 1) == 0)
      {
LABEL_43:
        *(void *)(v59 + 8 * (v10 >> 6) + 64) |= 1LL << v10;
        uint64_t v62 = (char **)(*(void *)(v59 + 48) + 16 * v10);
        *uint64_t v62 = v15;
        v62[1] = v13;
        *(void *)(*(void *)(v59 + 56) + 8 * v10) = v6;
        unint64_t v63 = *(void *)(v59 + 16);
        unint64_t v64 = __OFADD__(v63, 1LL);
        unint64_t v65 = v63 + 1;
        if (v64) {
          goto LABEL_113;
        }
        *(void *)(v59 + 16) = v65;
        swift_bridgeObjectRetain();
        goto LABEL_18;
      }

  int64_t v172 = v2[6];
  if (*(void *)(v172 + 16))
  {
    unint64_t v173 = specialized __RawDictionaryStorage.find<A>(_:)(0LL);
    if ((v174 & 1) != 0)
    {
      *(_OWORD *)__srcb = *(_OWORD *)(*(void *)(v172 + 56) + 16 * v173);
      swift_unknownObjectRetain();
      uint64_t v175 = *(_OWORD *)__srcb;
LABEL_134:
      *(_OWORD *)a1 = v175;
      return MEMORY[0x186E20E60](v17, -1LL, -1LL);
    }
  }

  type metadata accessor for _TimeZoneGMTICU();
  uint64_t v6 = (void *)swift_allocObject();
  id v176 = specialized static TimeZone.nameForSecondsFromGMT(_:)(0LL);
  if (!v177)
  {
LABEL_183:
    swift_deallocPartialClassInstance();
    __break(1u);
    goto LABEL_184;
  }

  uint64_t v16 = v176;
  Swift::String v178 = v177;
  uint64_t v15 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU,  (uint64_t)&protocol conformance descriptor for _TimeZoneGMTICU);
  uint64_t v6[3] = v16;
  void v6[4] = v178;
  _OWORD v6[2] = 0LL;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v213[0] = v2[6];
  uint64_t v22 = *(void *)&v213[0];
  v2[6] = 0x8000000000000000LL;
  int64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(0LL);
  uint64_t v181 = *(void *)(v22 + 16);
  id v182 = (v180 & 1) == 0;
  uint64_t v26 = __OFADD__(v181, v182);
  Swift::String v183 = v181 + v182;
  if (v26)
  {
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
  }

  else
  {
    LOBYTE(v16) = v180;
    if (*(void *)(v22 + 24) < v183)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v183,  isUniquelyReferenced_nonNull_native);
      uint64_t v184 = *(void *)&v213[0];
      int64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(0LL);
      if ((v16 & 1) != (v185 & 1)) {
        goto LABEL_185;
      }
      if ((v16 & 1) == 0) {
        goto LABEL_131;
      }
      goto LABEL_128;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v184 = v22;
      if ((v180 & 1) == 0)
      {
LABEL_131:
        while (1)
        {
          *(void *)(v184 + 8 * (v24 >> 6) + 64) |= 1LL << v24;
          *(void *)(*(void *)(v184 + 48) + 8 * v24) = 0LL;
          Swift::Int v187 = (void *)(*(void *)(v184 + 56) + 16 * v24);
          *Swift::Int v187 = v6;
          v187[1] = v15;
          unint64_t v188 = *(void *)(v184 + 16);
          uint64_t v26 = __OFADD__(v188, 1LL);
          uint64_t v189 = v188 + 1;
          if (!v26) {
            break;
          }
          __break(1u);
LABEL_176:
          swift_bridgeObjectRelease();
          int64_t v24 = v208;
          a1 = v209;
          if ((v16 & 1) != 0) {
            goto LABEL_128;
          }
        }

        *(void *)(v184 + 16) = v189;
        goto LABEL_133;
      }

      __break(1u);
      goto LABEL_121;
    }

    if (!__OFSUB__(a2, 3LL))
    {
      if (a2 - 3 >= 1)
      {
        uint64_t v19 = a3[2];
        uint64_t v20 = *a3;
        if (v19 <= a3[1]) {
          uint64_t v21 = a3[1];
        }
        else {
          uint64_t v21 = a3[2];
        }
        uint64_t v22 = v21 - v19;
        unint64_t v23 = v22 + 1;
        if (v23 >= 0x21)
        {
          uint64_t v56 = v23 & 0x1F;
          if ((v23 & 0x1F) == 0) {
            uint64_t v56 = 32LL;
          }
          int64_t v24 = v23 - v56;
          uint64_t v25 = v19 + v24;
          uint64_t v57 = vdupq_n_s8(a4);
          uint64_t v58 = (int8x16_t *)(v19 + v20 + 16);
          unint64_t v59 = v24;
          do
          {
            v58[-1] = v57;
            *uint64_t v58 = v57;
            v58 += 2;
            v59 -= 32LL;
          }

          while (v59);
        }

        else
        {
          int64_t v24 = 0LL;
          uint64_t v25 = a3[2];
        }

        int64_t v60 = v24 + v19 - v21;
        uint64_t v61 = a2 - v24 - 3;
        do
        {
          if (!v60) {
            goto LABEL_102;
          }
          *(_BYTE *)(v20 + v25++) = a4;
          ++v60;
          --v61;
        }

        while (v61);
        a3[2] = v25;
      }

      uint64_t v62 = a4 + (char)(result / 0x64);
      if (v62 == (char)(a4 + result / 0x64))
      {
        unint64_t v64 = a3[1];
        unint64_t v63 = a3[2];
        if (v63 < v64)
        {
          unint64_t v65 = result % 0x64;
          uint64_t v66 = *a3;
          *(_BYTE *)(*a3 + v63) = v62;
          uint64_t v67 = v63 + 1;
          a3[2] = v63 + 1;
          uint64_t v68 = v65 / 0xAu + a4;
          if (v68 == (char)(v65 / 0xAu + a4))
          {
            if (v67 < v64)
            {
              *(_BYTE *)(v66 + v67) = v68;
              uint64_t v69 = v63 + 2;
              a3[2] = v63 + 2;
              uint64_t v70 = a4 + v65 % 0xAu;
              if (v70 == (char)v70)
              {
                if (v69 < v64)
                {
                  *(_BYTE *)(v66 + v69) = v70;
                  uint64_t v34 = v63 + 3;
                  goto LABEL_99;
                }

                goto LABEL_119;
              }

    *(void *)(v89 + 8 * (v107 >> 6) + 64) |= 1LL << v107;
    uint64_t v112 = (uint64_t *)(*(void *)(v89 + 48) + 16 * v107);
    *uint64_t v112 = v96;
    v112[1] = v97;
    uint64_t v113 = (void *)(*(void *)(v89 + 56) + 16 * v107);
    *uint64_t v113 = v98;
    v113[1] = v99;
    uint64_t v114 = *(void *)(v89 + 16);
    char v50 = __OFADD__(v114, 1LL);
    Swift::String v115 = v114 + 1;
    if (v50) {
      goto LABEL_255;
    }
    *(void *)(v89 + 16) = v115;
LABEL_112:
    __int128 v96 = specialized LazyMapSequence.Iterator.next()(v101);
    __int128 v97 = v103;
    __int128 v98 = v104;
    uint64_t v99 = v105;
    int64_t v90 = 1;
    uint64_t v100 = v89;
    if (!v103) {
      goto LABEL_154;
    }
  }

  if ((v90 & 1) != 0)
  {
    if ((v106 & 1) != 0) {
      goto LABEL_111;
    }
    goto LABEL_120;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
  Swift::String v116 = static _DictionaryStorage.copy(original:)();
  uint64_t v89 = v116;
  if (!*(void *)(v100 + 16))
  {
LABEL_152:
    uint64_t v101 = swift_release();
    id v207 = v89;
    if ((v110 & 1) != 0) {
      goto LABEL_111;
    }
    goto LABEL_120;
  }

  Swift::String v117 = (void *)(v116 + 64);
  unint64_t v118 = (unint64_t)((1LL << *(_BYTE *)(v89 + 32)) + 63) >> 6;
  uint64_t v190 = v100 + 64;
  uint64_t v10 = 0LL;
  *(void *)(v89 + 16) = *(void *)(v100 + 16);
  uint64_t v119 = 1LL << *(_BYTE *)(v100 + 32);
  if (v119 < 64) {
    uint64_t v120 = ~(-1LL << v119);
  }
  else {
    uint64_t v120 = -1LL;
  }
  uint64_t v121 = v120 & *(void *)(v100 + 64);
  char v205 = (unint64_t)(v119 + 63) >> 6;
  while (2)
  {
    if (v121)
    {
      unint64_t v122 = __clz(__rbit64(v121));
      v121 &= v121 - 1;
      unint64_t v123 = v122 | (v10 << 6);
LABEL_131:
      uint64_t v124 = 16 * v123;
      uint64_t v125 = (uint64_t *)(*(void *)(v100 + 48) + v124);
      Swift::Int v127 = *v125;
      uint64_t v126 = v125[1];
      unint64_t v128 = *(_OWORD *)(*(void *)(v100 + 56) + v124);
      unint64_t v129 = (void *)(*(void *)(v89 + 48) + v124);
      *unint64_t v129 = v127;
      v129[1] = v126;
      *(_OWORD *)(*(void *)(v89 + 56) + v124) = v128;
      swift_bridgeObjectRetain();
      continue;
    }

    break;
  }

  char v50 = __OFADD__(v10++, 1LL);
  if (v50) {
    goto LABEL_264;
  }
  if (v10 >= v205) {
    goto LABEL_152;
  }
  uint64_t v130 = *(void *)(v190 + 8 * v10);
  if (v130)
  {
LABEL_147:
    uint64_t v121 = (v130 - 1) & v130;
    unint64_t v123 = __clz(__rbit64(v130)) + (v10 << 6);
    goto LABEL_131;
  }

  uint64_t v131 = v10 + 1;
  if (v10 + 1 >= v205) {
    goto LABEL_152;
  }
  uint64_t v130 = *(void *)(v190 + 8 * v131);
  if (v130) {
    goto LABEL_146;
  }
  uint64_t v131 = v10 + 2;
  if (v10 + 2 >= v205) {
    goto LABEL_152;
  }
  uint64_t v130 = *(void *)(v190 + 8 * v131);
  if (v130) {
    goto LABEL_146;
  }
  uint64_t v131 = v10 + 3;
  if (v10 + 3 >= v205) {
    goto LABEL_152;
  }
  uint64_t v130 = *(void *)(v190 + 8 * v131);
  if (v130) {
    goto LABEL_146;
  }
  uint64_t v131 = v10 + 4;
  if (v10 + 4 >= v205) {
    goto LABEL_152;
  }
  uint64_t v130 = *(void *)(v190 + 8 * v131);
  if (v130) {
    goto LABEL_146;
  }
  uint64_t v131 = v10 + 5;
  if (v10 + 5 >= v205) {
    goto LABEL_152;
  }
  uint64_t v130 = *(void *)(v190 + 8 * v131);
  if (v130)
  {
LABEL_146:
    uint64_t v10 = v131;
    goto LABEL_147;
  }

  while (1)
  {
    uint64_t v10 = v131 + 1;
    if (__OFADD__(v131, 1LL)) {
      break;
    }
    if (v10 >= v205) {
      goto LABEL_152;
    }
    uint64_t v130 = *(void *)(v190 + 8 * v10);
    ++v131;
    if (v130) {
      goto LABEL_147;
    }
  }

  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
  return result;
}

      uint64_t v124 = (v128 - 1) & v128;
      Swift::Int v127 = __clz(__rbit64(v128)) + (v125 << 6);
      if (*(void *)(v84 + 16))
      {
LABEL_121:
        uint64_t v130 = (uint64_t *)(*(void *)(v83 + 48) + 16 * v127);
        uint64_t v131 = *v130;
        uint64_t v132 = v130[1];
        swift_bridgeObjectRetain();
        uint64_t v133 = specialized __RawDictionaryStorage.find<A>(_:)(v131, v132);
        if ((v134 & 1) != 0)
        {
          __int128 v135 = *(void *)(*(void *)(v84 + 56) + 16 * v133);
          char v136 = swift_conformsToProtocol2();
          if (v136) {
            char v137 = v135;
          }
          else {
            char v137 = 0LL;
          }
          if (v136) {
            unint64_t v138 = v136;
          }
          else {
            unint64_t v138 = 0LL;
          }
          if (v137)
          {
            *(void *)&uint64_t v204 = v131;
            *((void *)&v204 + 1) = v132;
            *(void *)&char v205 = 0LL;
            BYTE8(v205) = 1;
            KeyedEncodingContainer.superEncoder(forKey:)();
            swift_bridgeObjectRelease();
            uint64_t v139 = *(void *)(v138 + 8);
            uint64_t v140 = swift_getAssociatedTypeWitness();
            id v199 = &v182;
            char v198 = *(void *)(v140 - 8);
            uint64_t v141 = MEMORY[0x1895F8858](v140);
            uint64_t v143 = (char *)&v182 - v142;
            uint64_t v144 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v139 + 24))(v137, v139, v141);
            unint64_t v146 = v248;
            if (*(void *)(v248 + 16)
              && (uint64_t v147 = specialized __RawDictionaryStorage.find<A>(_:)(v144, v145), (v148 & 1) != 0))
            {
              outlined init with copy of AttributedString._AttributeValue( *(void *)(v146 + 56) + 72 * v147,  (uint64_t)&v204);
            }

            else
            {
              id v208 = 0LL;
              uint64_t v206 = 0u;
              id v207 = 0u;
              uint64_t v204 = 0u;
              char v205 = 0u;
            }

            swift_bridgeObjectRelease();
            if (!*((void *)&v205 + 1)) {
              goto LABEL_212;
            }
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v204,  (uint64_t)&v202);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            swift_dynamicCast();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v204);
            int64_t v149 = v201;
            (*(void (**)(char *, _BYTE *, uint64_t, uint64_t))(v138 + 16))(v143, v203, v137, v138);
            uint64_t v201 = v149;
            if (v149)
            {
              (*(void (**)(char *, uint64_t))(v198 + 8))(v143, v140);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v203);
              swift_release();
              (*(void (**)(char *, uint64_t))(v189 + 8))(v193, v197);
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v209);
              swift_unknownObjectRelease();
              outlined destroy of Any?( (uint64_t)v220,  &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
              goto LABEL_197;
            }

            (*(void (**)(char *, uint64_t))(v198 + 8))(v143, v140);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v203);
            uint64_t v84 = v196;
          }

          else
          {
            swift_bridgeObjectRelease();
          }

          uint64_t v83 = v248;
          uint64_t v121 = v195;
        }

        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }

uint64_t __JSONEncoder.wrap<A>(_:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  int64_t v111 = a3;
  uint64_t v107 = a5;
  uint64_t v6 = a4;
  uint64_t v110 = a2;
  uint64_t v105 = a1;
  unint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v104 = (__int128 *)((char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = type metadata accessor for Optional();
  unint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  unint64_t v13 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v95 - v14;
  uint64_t v108 = v5;
  unint64_t v16 = *(void *)(v5 + 16);
  uint64_t v100 = (void *)(v5 + 16);
  if (v16 >> 62) {
    goto LABEL_115;
  }
  uint64_t v99 = *(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t v102 = type metadata accessor for JSONReference();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = MEMORY[0x18961AFF0];
    int v106 = (void *)(v17 + 16);
    *(void *)(v17 + 24) = 0LL;
    *(_BYTE *)(v17 + 32) = 4;
    uint64_t v18 = swift_retain();
    uint64_t v19 = v100;
    MEMORY[0x186E1BAC0](v18);
    if (*(void *)((*v19 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*v19 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    unint64_t v109 = v17;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v20 = *(void (**)(char *, int64_t, uint64_t))(v10 + 16);
    v20(v15, v111, v9);
    v20(v13, (int64_t)v15, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1LL, v6) == 1)
    {
      uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
      v21(v15, v9);
      v21(v13, v9);
      swift_retain();
      uint64_t v6 = v112;
      unint64_t v10 = v109;
      goto LABEL_13;
    }

    uint64_t v22 = *(void (**)(__int128 *, char *, uint64_t))(v7 + 32);
    uint64_t v23 = (uint64_t)v104;
    v22(v104, v13, v6);
    int64_t v24 = (uint64_t *)swift_allocObject();
    uint64_t v25 = v107;
    v24[5] = v6;
    v24[6] = (uint64_t)v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v24 + 2);
    v22((__int128 *)boxed_opaque_existential_1, (char *)v23, v6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    unint64_t v27 = v110;
    void v24[7] = v110;
    unint64_t v28 = v27 >> 62;
    if ((_DWORD)v28) {
      break;
    }
    unint64_t v10 = v109;
    unint64_t v29 = (uint64_t *)(v110 + 64);
    uint64_t v6 = v112;
LABEL_11:
    uint64_t v30 = *v29;
    swift_retain();
    uint64_t v31 = v30 + 1;
    if (!__OFADD__(v30, 1LL)) {
      goto LABEL_12;
    }
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    swift_bridgeObjectRetain();
    uint64_t v99 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  uint64_t v6 = v112;
  unint64_t v10 = v109;
  if ((_DWORD)v28 == 1)
  {
    unint64_t v29 = (uint64_t *)((v110 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_11;
  }

  uint64_t v31 = 1LL;
LABEL_12:
  v24[8] = v31;
  uint64_t v110 = (uint64_t)v24;
LABEL_13:
  uint64_t v32 = *(void *)(v105 + 64);
  uint64_t v101 = v105 + 64;
  uint64_t v33 = 1LL << *(_BYTE *)(v105 + 32);
  if (v33 < 64) {
    uint64_t v34 = ~(-1LL << v33);
  }
  else {
    uint64_t v34 = -1LL;
  }
  unint64_t v7 = v34 & v32;
  uint64_t v104 = &v114;
  uint64_t v107 = (__int128 *)&v119;
  int64_t v103 = (unint64_t)(v33 + 63) >> 6;
  int64_t v98 = v103 - 1;
  swift_bridgeObjectRetain();
  int64_t v35 = 0LL;
  while (2)
  {
    if (v7)
    {
      unint64_t v40 = __clz(__rbit64(v7));
      uint64_t v41 = (v7 - 1) & v7;
      unint64_t v42 = v40 | (v35 << 6);
      goto LABEL_21;
    }

    int64_t v46 = v35 + 1;
    if (__OFADD__(v35, 1LL)) {
      goto LABEL_114;
    }
    if (v46 >= v103)
    {
LABEL_30:
      uint64_t v41 = 0LL;
      uint64_t v116 = 0LL;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
      __int128 v113 = 0u;
      goto LABEL_31;
    }

    unint64_t v47 = *(void *)(v101 + 8 * v46);
    if (!v47)
    {
      v35 += 2LL;
      if (v46 + 1 >= v103)
      {
        int64_t v35 = v46;
      }

      else
      {
        unint64_t v47 = *(void *)(v101 + 8 * v35);
        if (v47)
        {
          ++v46;
          goto LABEL_25;
        }

        if (v46 + 2 < v103)
        {
          unint64_t v47 = *(void *)(v101 + 8 * (v46 + 2));
          if (v47)
          {
            v46 += 2LL;
            goto LABEL_25;
          }

          int64_t v66 = v46 + 3;
          if (v46 + 3 >= v103)
          {
            int64_t v35 = v46 + 2;
          }

          else
          {
            unint64_t v47 = *(void *)(v101 + 8 * v66);
            if (v47)
            {
              v46 += 3LL;
              goto LABEL_25;
            }

            while (1)
            {
              int64_t v46 = v66 + 1;
              if (__OFADD__(v66, 1LL)) {
                goto LABEL_122;
              }
              if (v46 >= v103) {
                break;
              }
              unint64_t v47 = *(void *)(v101 + 8 * v46);
              ++v66;
              if (v47) {
                goto LABEL_25;
              }
            }

            int64_t v35 = v98;
          }
        }
      }

      goto LABEL_30;
    }

uint64_t specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  v3[3] = type metadata accessor for __JSONEncoder();
  v3[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder,  (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder,  (uint64_t)&protocol conformance descriptor for __JSONEncoder);
  v3[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  v3[3] = type metadata accessor for __JSONEncoder();
  v3[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder,  (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder,  (uint64_t)&protocol conformance descriptor for __JSONEncoder);
  v3[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t specialized __JSONEncoder._wrapGeneric<A>(_:for:_:)( void (*a1)(void), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v9 = v7;
  uint64_t v11 = a6;
  uint64_t v12 = a5;
  uint64_t v15 = a1;
  unint64_t v16 = v7 + 2;
  unint64_t v17 = v7[2];
  if (v17 >> 62)
  {
    uint64_t v36 = a5;
    swift_bridgeObjectRetain();
    uint64_t v18 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v15 = a1;
    uint64_t v11 = a6;
    uint64_t v12 = v36;
  }

  else
  {
    uint64_t v18 = *(void **)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  unint64_t v19 = a3 >> 62;
  uint64_t v37 = v16;
  if (a7 != -1)
  {
    int64_t v35 = v15;
    uint64_t v33 = v18;
    uint64_t v34 = v8;
    uint64_t v18 = (void *)swift_allocObject();
    v18[5] = &type metadata for _CodingKey;
    void v18[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v20 = swift_allocObject();
    v18[2] = v20;
    *(void *)(v20 + 16) = a4;
    *(void *)(v20 + 24) = v12;
    *(void *)(v20 + 32) = v11;
    *(_BYTE *)(v20 + 40) = a7;
    v18[7] = a3;
    if ((_DWORD)v19)
    {
      if ((_DWORD)v19 != 1)
      {
        uint64_t v23 = 1LL;
        goto LABEL_12;
      }

      uint64_t v21 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v21 = (uint64_t *)(a3 + 64);
    }

    uint64_t v8 = *v21;
    swift_retain();
    uint64_t v23 = v8 + 1;
    if (!__OFADD__(v8, 1LL))
    {
LABEL_12:
      v18[8] = v23;
      unint64_t v16 = (void *)v9[18];
      uint64_t v36 = v9[19];
      v9[18] = v18;
      uint64_t v18 = v33;
LABEL_13:
      outlined copy of _CodingKey?(a4, v12, v11, a7);
      uint64_t v8 = v34;
      goto LABEL_14;
    }

    __break(1u);
LABEL_32:
    int64_t v35 = v15;
    uint64_t v34 = v8;
    uint64_t v23 = *(void *)(a3 + 64);
    swift_retain();
    goto LABEL_13;
  }

  unint64_t v16 = (void *)v9[18];
  uint64_t v22 = v9[19];
  v9[18] = a3;
  uint64_t v36 = v22;
  if (!(_DWORD)v19) {
    goto LABEL_32;
  }
  if ((_DWORD)v19 == 1)
  {
    int64_t v35 = v15;
    uint64_t v23 = *(void *)(a3 + 32);
    swift_retain();
LABEL_14:
    swift_retain();
    uint64_t v15 = v35;
    goto LABEL_15;
  }

  uint64_t v23 = 0LL;
LABEL_15:
  v9[19] = v23;
  v15(v9);
  if (v8)
  {
    v9[18] = v16;
    swift_retain();
    swift_release();
    v9[19] = v36;
    swift_release();
    swift_release();
    unint64_t v24 = v9[2];
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    if (*v37 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v31) {
        goto LABEL_21;
      }
    }

    else if (*(void *)((*v37 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_21:
      specialized RangeReplaceableCollection<>.popLast()();
      swift_release();
LABEL_22:
      swift_willThrow();
      return 0LL;
    }

    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v32) {
      goto LABEL_40;
    }
    return specialized RangeReplaceableCollection<>.popLast()();
  }

  v9[18] = v16;
  swift_retain();
  swift_release();
  v9[19] = v36;
  swift_release();
  uint64_t result = swift_release();
  unint64_t v27 = v9[2];
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (*v37 >> 62) {
    goto LABEL_39;
  }
  if (*(void *)((*v37 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    return specialized RangeReplaceableCollection<>.popLast()();
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t __JSONEncoder._wrapGeneric<A>(_:for:_:)( void (*a1)(void *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v44 = a1;
  unint64_t v7 = v6;
  uint64_t v42 = a6;
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  unint64_t v48 = a3;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (uint64_t)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v41 - v17;
  unint64_t v19 = v7[2];
  uint64_t v43 = v7 + 2;
  if (v19 >> 62) {
    goto LABEL_35;
  }
  uint64_t v46 = *(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v20(v18, v49, v12);
    v20((char *)v16, (uint64_t)v18, v12);
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 32);
    v28(v11, v16, a5);
    uint64_t v9 = swift_allocObject();
    uint64_t v29 = v42;
    *(void *)(v9 + 40) = a5;
    *(void *)(v9 + 48) = v29;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 16));
    v28((char *)boxed_opaque_existential_1, (uint64_t)v11, a5);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    unint64_t v31 = v48;
    *(void *)(v9 + 56) = v48;
    if (v31 >> 62)
    {
      if (v31 >> 62 != 1)
      {
        uint64_t v16 = 1LL;
LABEL_14:
        *(void *)(v9 + 64) = v16;
        uint64_t v23 = v7[18];
        uint64_t v22 = v7[19];
        v7[18] = v9;
LABEL_15:
        uint64_t v26 = v44;
        uint64_t v27 = v45;
        goto LABEL_16;
      }

      uint64_t v32 = (uint64_t *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v32 = (uint64_t *)(v31 + 64);
    }

    uint64_t v33 = *v32;
    swift_retain();
    uint64_t v16 = v33 + 1;
    if (!__OFADD__(v33, 1LL)) {
      goto LABEL_14;
    }
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  uint64_t v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v18, v12);
  v21((char *)v16, v12);
  uint64_t v23 = v7[18];
  uint64_t v22 = v7[19];
  unint64_t v24 = v48;
  unint64_t v25 = v48 >> 62;
  v7[18] = v48;
  if (!(v24 >> 62))
  {
    uint64_t v16 = *(void *)(v24 + 64);
    swift_retain();
    goto LABEL_15;
  }

  uint64_t v26 = v44;
  uint64_t v27 = v45;
  if ((_DWORD)v25 != 1)
  {
    uint64_t v16 = 0LL;
    goto LABEL_17;
  }

  uint64_t v16 = *(void *)(v24 + 32);
  swift_retain();
LABEL_16:
  swift_retain();
LABEL_17:
  v7[19] = v16;
  v26(v7);
  if (v27)
  {
    v7[18] = v23;
    swift_retain();
    swift_release();
    v7[19] = v22;
    swift_release();
    swift_release();
    unint64_t v34 = v7[2];
    if (v34 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    if (v46 >= v35) {
      return swift_willThrow();
    }
    if (*v43 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v39) {
        goto LABEL_23;
      }
    }

    else if (*(void *)((*v43 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_23:
      specialized RangeReplaceableCollection<>.popLast()();
      swift_release();
      return swift_willThrow();
    }

    __break(1u);
    goto LABEL_40;
  }

  v7[18] = v23;
  swift_retain();
  swift_release();
  v7[19] = v22;
  swift_release();
  unint64_t result = swift_release();
  unint64_t v37 = v7[2];
  if (v37 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v46 < v38)
  {
    if (!(*v43 >> 62))
    {
      if (!*(void *)((*v43 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
LABEL_41:
        __break(1u);
        return result;
      }

      return specialized RangeReplaceableCollection<>.popLast()();
    }

uint64_t specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:configuration:for:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11[3] = type metadata accessor for __JSONEncoder();
  void v11[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder,  (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder,  (uint64_t)&protocol conformance descriptor for __JSONEncoder);
  v11[0] = a1;
  uint64_t v9 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a5 + 16);
  swift_retain();
  v9(v11, a3, a4, a5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t __JSONReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 160) = a1;
  *(void *)(v4 + 168) = a4;
  *(void *)(v4 + 176) = a2;
  *(void *)(v4 + 184) = 0LL;
  unint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  char v9 = *(_BYTE *)(a1 + 48);
  unint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v42 = *(void *)(a1 + 72);
  uint64_t v40 = *(void *)(a1 + 24);
  uint64_t v41 = *(void *)(a1 + 80);
  uint64_t v37 = *(void *)(a1 + 96);
  uint64_t v38 = *(void *)(a1 + 88);
  uint64_t v35 = *(void *)(a1 + 112);
  uint64_t v36 = *(void *)(a1 + 104);
  uint64_t v33 = *(void *)(a1 + 128);
  unint64_t v34 = *(void *)(a1 + 120);
  uint64_t v39 = *(void *)(a1 + 136);
  uint64_t v12 = (void *)swift_allocObject();
  v12[5] = &type metadata for _CodingKey;
  v12[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  _DWORD v12[2] = result;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = a2;
  *(_BYTE *)(result + 40) = 2;
  unint64_t v14 = a3 >> 62;
  v12[7] = a3;
  if (a3 >> 62)
  {
    uint64_t v15 = 0LL;
    if ((_DWORD)v14 != 1) {
      goto LABEL_6;
    }
    uint64_t v16 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    uint64_t v16 = (uint64_t *)(a3 + 64);
  }

  uint64_t v15 = *v16;
  uint64_t result = swift_retain();
LABEL_6:
  if (__OFADD__(v15, 1LL))
  {
    __break(1u);
  }

  else
  {
    void v12[8] = v15 + 1;
    uint64_t v31 = v8;
    uint64_t v32 = v7;
    char v30 = v9;
    uint64_t v28 = v11;
    unint64_t v29 = v10;
    if ((_DWORD)v14)
    {
      uint64_t v17 = v40;
      if ((_DWORD)v14 == 1)
      {
        uint64_t v26 = *(void *)(a3 + 32);
        outlined copy of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v10);
        uint64_t v19 = v37;
        uint64_t v18 = v38;
        uint64_t v21 = v35;
        uint64_t v20 = v36;
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v42, v41);
        uint64_t v23 = v33;
        unint64_t v22 = v34;
        outlined copy of JSONEncoder.KeyEncodingStrategy(v34);
        uint64_t v24 = v39;
        swift_bridgeObjectRetain();
        swift_release();
        uint64_t v25 = v26;
      }

      else
      {
        outlined copy of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v10);
        uint64_t v19 = v37;
        uint64_t v18 = v38;
        uint64_t v21 = v35;
        uint64_t v20 = v36;
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v42, v41);
        uint64_t v23 = v33;
        unint64_t v22 = v34;
        outlined copy of JSONEncoder.KeyEncodingStrategy(v34);
        uint64_t v24 = v39;
        swift_bridgeObjectRetain();
        uint64_t v25 = 0LL;
      }
    }

    else
    {
      uint64_t v27 = *(void *)(a3 + 64);
      outlined copy of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
      outlined copy of JSONEncoder.KeyEncodingStrategy(v10);
      uint64_t v19 = v37;
      uint64_t v18 = v38;
      uint64_t v21 = v35;
      uint64_t v20 = v36;
      outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v42, v41);
      uint64_t v23 = v33;
      unint64_t v22 = v34;
      outlined copy of JSONEncoder.KeyEncodingStrategy(v34);
      swift_bridgeObjectRetain();
      uint64_t v24 = v39;
      swift_release();
      uint64_t v25 = v27;
      uint64_t v17 = v40;
    }

    *(void *)(v4 + 32) = v32;
    *(void *)(v4 + 40) = v31;
    *(_BYTE *)(v4 + 48) = v30;
    *(void *)(v4 + 56) = v29;
    *(void *)(v4 + 64) = v28;
    *(void *)(v4 + 72) = v42;
    *(void *)(v4 + 80) = v41;
    *(void *)(v4 + 88) = v18;
    *(void *)(v4 + 96) = v19;
    *(void *)(v4 + 104) = v20;
    *(void *)(v4 + 112) = v21;
    *(void *)(v4 + 120) = v22;
    *(void *)(v4 + 128) = v23;
    *(void *)(v4 + 16) = MEMORY[0x18961AFE8];
    *(void *)(v4 + 24) = v17;
    *(void *)(v4 + 136) = v24;
    *(void *)(v4 + 144) = v12;
    *(void *)(v4 + 152) = v25;
    return v4;
  }

  return result;
}

BOOL __JSONReferencingEncoder.canEncodeNewValue.getter()
{
  unint64_t v1 = v0[2];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  unint64_t v3 = v0[18];
  swift_retain();
  uint64_t v4 = _CodingPathNode.path.getter(v3);
  swift_release();
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  unint64_t v6 = *(void *)(v0[20] + 144LL);
  swift_retain();
  uint64_t v7 = _CodingPathNode.path.getter(v6);
  swift_release();
  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRelease();
  return v2 == v5 + ~v8;
}

uint64_t __JSONReferencingEncoder.__ivar_destroyer()
{
  return outlined consume of __JSONReferencingEncoder.Reference(*(void *)(v0 + 168));
}

uint64_t __JSONReferencingEncoder.deinit(unint64_t a1)
{
  uint64_t v6 = v1;
  unint64_t v9 = *(void *)(v1 + 16);
  uint64_t v7 = (uint64_t *)(v1 + 16);
  unint64_t v8 = v9;
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v10 == 1) {
      goto LABEL_3;
    }
LABEL_7:
    if (v10) {
      goto LABEL_72;
    }
    type metadata accessor for JSONReference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = MEMORY[0x18961AFF0];
    *(void *)(v11 + 24) = 0LL;
    *(_BYTE *)(v11 + 32) = 4;
    goto LABEL_9;
  }

  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  a1 = swift_bridgeObjectRelease();
  if (v10 != 1) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v11 = *v7;
  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v12)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  while (1)
  {
    uint64_t v11 = specialized RangeReplaceableCollection<>.popLast()();
LABEL_9:
    uint64_t v4 = *(void *)(v6 + 168);
    uint64_t v2 = *(void *)(v6 + 176);
    uint64_t v12 = *(void *)(v6 + 184);
    if (v4 < 0) {
      break;
    }
    unint64_t v13 = *(void *)(v4 + 16);
    if (*(_BYTE *)(v4 + 32) != 3)
    {
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }

    uint64_t v3 = *(void *)(v4 + 24);
    uint64_t v57 = *(void *)(v4 + 16);
    *(void *)(v4 + 16) = 0LL;
    *(void *)(v4 + 24) = 0LL;
    *(_BYTE *)(v4 + 32) = 7;
    if (v13 >> 62)
    {
      outlined copy of __JSONReferencingEncoder.Reference(v4);
      swift_retain();
      outlined copy of JSONReference.Backing(v13, v3, 3);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of JSONReference.Backing(v13, v3, 3);
      if (v5 < v2)
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }

    else
    {
      uint64_t v5 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      outlined copy of __JSONReferencingEncoder.Reference(v4);
      swift_retain();
      if (v5 < v2) {
        goto LABEL_25;
      }
    }

    if ((v2 & 0x8000000000000000LL) == 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(v2, v2, v11);
      uint64_t v14 = *(void *)(v4 + 16);
      uint64_t v15 = *(void *)(v4 + 24);
      *(void *)(v4 + 16) = v57;
      *(void *)(v4 + 24) = 0LL;
      char v16 = *(_BYTE *)(v4 + 32);
      *(_BYTE *)(v4 + 32) = 3;
      outlined consume of JSONReference.Backing(v14, v15, v16);
      swift_release();
      outlined consume of __JSONReferencingEncoder.Reference(v4);
LABEL_67:
      swift_bridgeObjectRelease();
      unint64_t v48 = *(void *)(v6 + 56);
      uint64_t v49 = *(void *)(v6 + 72);
      uint64_t v50 = *(void *)(v6 + 80);
      __srca = *(void **)(v6 + 120);
      outlined consume of JSONEncoder.DateEncodingStrategy( *(void **)(v6 + 32),  *(void *)(v6 + 40),  *(_BYTE *)(v6 + 48));
      outlined consume of JSONEncoder.KeyEncodingStrategy(v48);
      outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v49, v50);
      outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)__srca);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      outlined consume of __JSONReferencingEncoder.Reference(*(void *)(v6 + 168));
      return v6;
    }

uint64_t __JSONReferencingEncoder.__deallocating_deinit(unint64_t a1)
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int8()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int16()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int32()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int64()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int128()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt8()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt16()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt32()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt64()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt128()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance String( void *a1)
{
  return String.serializedForJSON(withoutEscapingSlashes:)((*a1 & 8LL) != 0)._countAndFlagsBits;
}

uint64_t Array<A>.nonPrettyJSONRepresentation(options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a4;
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  unint64_t v9 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)v8;
  uint64_t v37 = *(void **)(v8 + 8);
  uint64_t v38 = v10;
  uint64_t v36 = *(void *)(v8 + 16);
  int v35 = *(unsigned __int8 *)(v8 + 24);
  uint64_t v34 = *(void *)(v8 + 32);
  uint64_t v33 = *(void *)(v8 + 40);
  uint64_t v32 = *(void *)(v8 + 48);
  uint64_t v31 = *(void *)(v8 + 56);
  uint64_t v30 = *(void *)(v8 + 64);
  uint64_t v29 = *(void *)(v8 + 72);
  uint64_t v28 = *(void *)(v8 + 80);
  uint64_t v27 = *(void *)(v8 + 88);
  uint64_t v26 = *(void *)(v8 + 96);
  uint64_t v11 = *(void *)(v8 + 112);
  uint64_t v25 = *(void *)(v8 + 104);
  uint64_t v54 = 91LL;
  unint64_t v55 = 0xE100000000000000LL;
  uint64_t result = MEMORY[0x186E1BB20](v12, v13);
  if (result + 0x4000000000000000LL < 0)
  {
    __break(1u);
  }

  else
  {
    MEMORY[0x186E1B64C]((2 * result) | 1);
    uint64_t v15 = swift_bridgeObjectRetain();
    uint64_t result = MEMORY[0x186E1BB2C](v15, a3);
    if (!result)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      v21._uint64_t countAndFlagsBits = 93LL;
      v21._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v21);
      return v54;
    }

    uint64_t v16 = result;
    if (result >= 1)
    {
      uint64_t v23 = v7;
      uint64_t v17 = 0LL;
      char v18 = *(uint64_t (**)(Swift::String *, uint64_t, uint64_t))(v39 + 16);
      unint64_t v24 = a2 & 0xC000000000000001LL;
      do
      {
        if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && v24)
        {
          uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
          if (v23 != 8) {
            goto LABEL_15;
          }
          v40._uint64_t countAndFlagsBits = result;
          (*(void (**)(char *, Swift::String *, uint64_t))(v6 + 16))(v9, &v40, a3);
          swift_unknownObjectRelease();
        }

        else
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))( v9,  a2 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
          + *(void *)(v6 + 72) * v17,
            a3);
        }

        ++v17;
        v40._uint64_t countAndFlagsBits = v38;
        v40._unint64_t object = v37;
        uint64_t v41 = v36;
        char v42 = v35;
        uint64_t v43 = v34;
        uint64_t v44 = v33;
        uint64_t v45 = v32;
        uint64_t v46 = v31;
        uint64_t v47 = v30;
        uint64_t v48 = v29;
        uint64_t v49 = v28;
        uint64_t v50 = v27;
        uint64_t v51 = v26;
        uint64_t v52 = v25;
        uint64_t v53 = v11;
        v40._uint64_t countAndFlagsBits = v18(&v40, a3, v39);
        v40._unint64_t object = v19;
        swift_bridgeObjectRetain();
        v20._uint64_t countAndFlagsBits = 44LL;
        v20._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        String.append(_:)(v40);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a3);
      }

      while (v16 != v17);
      swift_bridgeObjectRelease();
      specialized RangeReplaceableCollection<>.popLast()();
      goto LABEL_12;
    }
  }

  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t Array<A>.individualElementRepresentation(options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = a4;
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  unint64_t v9 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)v8;
  uint64_t v42 = *(void *)(v8 + 8);
  uint64_t v43 = v10;
  uint64_t v41 = *(void *)(v8 + 16);
  int v40 = *(unsigned __int8 *)(v8 + 24);
  uint64_t v39 = *(void *)(v8 + 32);
  uint64_t v38 = *(void *)(v8 + 40);
  uint64_t v37 = *(void *)(v8 + 48);
  uint64_t v36 = *(void *)(v8 + 56);
  uint64_t v35 = *(void *)(v8 + 64);
  uint64_t v34 = *(void *)(v8 + 72);
  uint64_t v33 = *(void *)(v8 + 80);
  uint64_t v32 = *(void *)(v8 + 88);
  uint64_t v31 = *(void *)(v8 + 96);
  uint64_t v30 = *(void *)(v8 + 104);
  uint64_t v29 = *(void *)(v8 + 112);
  uint64_t v13 = MEMORY[0x186E1BB20](v11, v12);
  uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v13 & ~(v13 >> 63),  0,  MEMORY[0x18961AFE8]);
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t result = MEMORY[0x186E1BB2C](v15, a3);
  if (!result)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t)v14;
  }

  if (result >= 1)
  {
    uint64_t v25 = v7;
    uint64_t v17 = 0LL;
    uint64_t v27 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v44 + 16);
    unint64_t v26 = a2 & 0xC000000000000001LL;
    uint64_t v28 = result;
    do
    {
      if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && v26)
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v25 != 8) {
          goto LABEL_15;
        }
        uint64_t v18 = a2;
        v45[0] = result;
        (*(void (**)(char *, void *, uint64_t))(v6 + 16))(v9, v45, a3);
        swift_unknownObjectRelease();
      }

      else
      {
        uint64_t v18 = a2;
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))( v9,  a2 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
        + *(void *)(v6 + 72) * v17,
          a3);
      }

      v45[0] = v43;
      v45[1] = v42;
      v45[2] = v41;
      char v46 = v40;
      uint64_t v47 = v39;
      uint64_t v48 = v38;
      uint64_t v49 = v37;
      uint64_t v50 = v36;
      uint64_t v51 = v35;
      uint64_t v52 = v34;
      uint64_t v53 = v33;
      uint64_t v54 = v32;
      uint64_t v55 = v31;
      uint64_t v56 = v30;
      uint64_t v57 = v29;
      uint64_t v19 = v27(v45, a3, v44);
      uint64_t v21 = v20;
      unint64_t v23 = v14[2];
      unint64_t v22 = v14[3];
      if (v23 >= v22 >> 1) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v22 > 1),  v23 + 1,  1,  v14);
      }
      ++v17;
      v14[2] = v23 + 1;
      unint64_t v24 = &v14[2 * v23];
      v24[4] = v19;
      v24[5] = v21;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a3);
      a2 = v18;
    }

    while (v28 != v17);
    goto LABEL_13;
  }

  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t protocol witness for _JSONDirectArrayEncodable.nonPrettyJSONRepresentation(options:) in conformance <A> [A]( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.nonPrettyJSONRepresentation(options:)(a1, *v3, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t protocol witness for _JSONDirectArrayEncodable.individualElementRepresentation(options:) in conformance <A> [A]( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.individualElementRepresentation(options:)(a1, *v3, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

id outlined copy of JSONEncoder.DateEncodingStrategy(id result, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return (id)swift_retain();
  }
  if (!a3) {
    return result;
  }
  return result;
}

void outlined consume of JSONEncoder.DateEncodingStrategy(void *a1, uint64_t a2, char a3)
{
  if (a3 == 1)
  {
    swift_release();
  }

  else if (!a3)
  {
  }

uint64_t outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }

  return result;
}

uint64_t outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

unint64_t outlined copy of JSONEncoder.KeyEncodingStrategy(unint64_t result)
{
  if (result >= 2) {
    return swift_retain();
  }
  return result;
}

unint64_t outlined consume of JSONEncoder.KeyEncodingStrategy(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for __JSONEncoder()
{
  return objc_opt_self();
}

uint64_t outlined init with take of JSONError(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined release of JSONError(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of JSONError( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  unsigned int v7 = (((a7 - 1) >> 1) | ((a7 - 1) << 7));
  BOOL v8 = v7 > 5;
  int v9 = (1 << v7) & 0x27;
  if (!v8 && v9 != 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:configuration:for:_:)( uint64_t a1)
{
  return specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:configuration:for:_:)( a1,  v1[4],  v1[5],  v1[2],  v1[3]);
}

unint64_t lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting()
{
  unint64_t result = lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for JSONEncoder.OutputFormatting,  &type metadata for JSONEncoder.OutputFormatting);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for JSONEncoder.OutputFormatting,  &type metadata for JSONEncoder.OutputFormatting);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for JSONEncoder.OutputFormatting,  &type metadata for JSONEncoder.OutputFormatting);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for JSONEncoder.OutputFormatting,  &type metadata for JSONEncoder.OutputFormatting);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting);
  }

  return result;
}

void *sub_18300FDD4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 96LL))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_18300FE14(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v4 = *a1;
  return (*(uint64_t (**)(uint64_t *))(*(void *)v2 + 104LL))(&v4);
}

double sub_18300FE50@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(__int128 *__return_ptr))(**(void **)a1 + 120LL))(&v5);
  char v3 = v6;
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_18300FE98(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *a2;
  char v4 = *(_BYTE *)(a1 + 16);
  v7[0] = *(id *)a1;
  v7[1] = v2;
  char v8 = v4;
  __int128 v5 = *(uint64_t (**)(id *))(*(void *)v3 + 128LL);
  outlined copy of JSONEncoder.DateEncodingStrategy(v7[0], (uint64_t)v2, v4);
  return v5(v7);
}

double sub_18300FEE8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(__int128 *__return_ptr))(**(void **)a1 + 144LL))(&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_18300FF28(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a2;
  v6[0] = *a1;
  v6[1] = v2;
  __int128 v4 = *(uint64_t (**)(unint64_t *))(*(void *)v3 + 152LL);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v6[0]);
  return v4(v6);
}

double sub_18300FF70@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)a1 + 168LL))(v5);
  __int128 v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  double result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

double sub_18300FFBC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(__int128 *__return_ptr))(**(void **)a1 + 192LL))(&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_18300FFFC(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a2;
  v6[0] = *a1;
  v6[1] = v2;
  __int128 v4 = *(uint64_t (**)(unint64_t *))(*(void *)v3 + 200LL);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v6[0]);
  return v4(v6);
}

uint64_t sub_183010044@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 216LL))();
  *a2 = result;
  return result;
}

uint64_t sub_183010074(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 224LL);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for JSONEncoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for JSONEncoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of JSONEncoder.outputFormatting.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96LL))();
}

uint64_t dispatch thunk of JSONEncoder.outputFormatting.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of JSONEncoder.outputFormatting.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of JSONEncoder.dateEncodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of JSONEncoder.dateEncodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of JSONEncoder.dateEncodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of JSONEncoder.dataEncodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of JSONEncoder.dataEncodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of JSONEncoder.dataEncodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t dispatch thunk of JSONEncoder.nonConformingFloatEncodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t dispatch thunk of JSONEncoder.nonConformingFloatEncodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t dispatch thunk of JSONEncoder.nonConformingFloatEncodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184LL))();
}

uint64_t dispatch thunk of JSONEncoder.keyEncodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

uint64_t dispatch thunk of JSONEncoder.keyEncodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t dispatch thunk of JSONEncoder.keyEncodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t dispatch thunk of JSONEncoder.userInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t dispatch thunk of JSONEncoder.userInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

uint64_t dispatch thunk of JSONEncoder.userInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232LL))();
}

uint64_t dispatch thunk of JSONEncoder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272LL))();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280LL))();
}

uint64_t dispatch thunk of JSONEncoder.encode<A, B>(_:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288LL))();
}

ValueMetadata *type metadata accessor for JSONEncoder.OutputFormatting()
{
  return &type metadata for JSONEncoder.OutputFormatting;
}

uint64_t initializeBufferWithCopyOfBuffer for JSONEncoder.DateEncodingStrategy( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for JSONEncoder.DateEncodingStrategy( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of JSONEncoder.DateEncodingStrategy);
}

void destroy for JSONEncoder.DateEncodingStrategy(uint64_t a1)
{
}

uint64_t *assignWithCopy for JSONEncoder.DateEncodingStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for JSONEncoder.DateEncodingStrategy( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of JSONEncoder.DateEncodingStrategy,  (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of JSONEncoder.DateEncodingStrategy);
}

uint64_t *assignWithTake for JSONEncoder.DateEncodingStrategy(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for JSONEncoder.DateEncodingStrategy( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of JSONEncoder.DateEncodingStrategy);
}

uint64_t getEnumTagSinglePayload for JSONEncoder.DateEncodingStrategy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONEncoder.DateEncodingStrategy( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for JSONEncoder.DateEncodingStrategy(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for JSONEncoder.DateEncodingStrategy(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for JSONEncoder.DateEncodingStrategy()
{
  return &type metadata for JSONEncoder.DateEncodingStrategy;
}

ValueMetadata *type metadata accessor for JSONEncoder.DataEncodingStrategy()
{
  return &type metadata for JSONEncoder.DataEncodingStrategy;
}

unint64_t destroy for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t initializeWithCopy for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v4;
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return a1;
}

void *assignWithCopy for JSONEncoder.NonConformingFloatEncodingStrategy(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }

uint64_t assignWithTake for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    __int128 v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONEncoder.NonConformingFloatEncodingStrategy( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for JSONEncoder.NonConformingFloatEncodingStrategy( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

uint64_t getEnumTag for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, v1) = -1;
  }
  return (v1 + 1);
}

double destructiveInjectEnumTag for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 40) = 0LL;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }

  else if (a2)
  {
    *(void *)(a1 + 8) = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for JSONEncoder.NonConformingFloatEncodingStrategy()
{
  return &type metadata for JSONEncoder.NonConformingFloatEncodingStrategy;
}

void *destroy for JSONEncoder.KeyEncodingStrategy(void *result)
{
  if (*result >= 0xFFFFFFFFuLL) {
    return (void *)swift_release();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for JSONEncoder.DataEncodingStrategy(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain();
  }

  return a1;
}

unint64_t *assignWithCopy for JSONEncoder.DataEncodingStrategy( unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }

unint64_t *assignWithTake for JSONEncoder.DataEncodingStrategy( unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }

uint64_t getEnumTagSinglePayload for JSONEncoder.DataEncodingStrategy(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for JSONEncoder.DataEncodingStrategy( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)double result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)double result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)double result = a2 + 1;
    }
  }

  return result;
}

uint64_t getEnumTag for JSONEncoder.KeyEncodingStrategy(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *destructiveInjectEnumTag for JSONEncoder.KeyEncodingStrategy(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }

  *double result = v2;
  return result;
}

ValueMetadata *type metadata accessor for JSONEncoder.KeyEncodingStrategy()
{
  return &type metadata for JSONEncoder.KeyEncodingStrategy;
}

uint64_t type metadata accessor for JSONReference()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for __JSONReferencingEncoder()
{
  return objc_opt_self();
}

uint64_t outlined copy of __JSONReferencingEncoder.Reference(uint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    return swift_retain();
  }
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t destroy for __JSONReferencingEncoder.Reference(uint64_t *a1)
{
  return outlined consume of __JSONReferencingEncoder.Reference(*a1);
}

uint64_t outlined consume of __JSONReferencingEncoder.Reference(uint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    return swift_release();
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t *initializeBufferWithCopyOfBuffer for __JSONReferencingEncoder.Reference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  outlined copy of __JSONReferencingEncoder.Reference(*a2);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for __JSONReferencingEncoder.Reference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  outlined copy of __JSONReferencingEncoder.Reference(*a2);
  uint64_t v6 = *a1;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  outlined consume of __JSONReferencingEncoder.Reference(v6);
  return a1;
}

uint64_t *assignWithTake for __JSONReferencingEncoder.Reference(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  outlined consume of __JSONReferencingEncoder.Reference(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for __JSONReferencingEncoder.Reference(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for __JSONReferencingEncoder.Reference( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)double result = a2 - 127;
    if (a3 >= 0x7F) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7F) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)(result + 8) = 0LL;
      *(void *)(result + 16) = 0LL;
      *(void *)double result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t getEnumTag for __JSONReferencingEncoder.Reference(void *a1)
{
  return *a1 >> 63;
}

void *destructiveProjectEnumData for __JSONReferencingEncoder.Reference(void *result)
{
  *result &= ~0x8000000000000000LL;
  return result;
}

uint64_t *destructiveInjectEnumTag for __JSONReferencingEncoder.Reference(uint64_t *result, uint64_t a2)
{
  *double result = *result & 0xFFFFFFFFFFFFFF8LL | (a2 << 63);
  return result;
}

void *type metadata accessor for __JSONReferencingEncoder.Reference()
{
  return &unk_189C76170;
}

uint64_t initializeBufferWithCopyOfBuffer for JSONReference.Backing(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for JSONEncoder.DateEncodingStrategy( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of JSONReference.Backing);
}

uint64_t destroy for JSONReference.Backing(uint64_t a1)
{
  return outlined consume of JSONReference.Backing(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for JSONEncoder.DateEncodingStrategy( uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for JSONReference.Backing(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for JSONEncoder.DateEncodingStrategy( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of JSONReference.Backing,  (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of JSONReference.Backing);
}

uint64_t *assignWithCopy for JSONEncoder.DateEncodingStrategy( uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for JSONReference.Backing(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for JSONEncoder.DateEncodingStrategy( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of JSONReference.Backing);
}

uint64_t *assignWithTake for JSONEncoder.DateEncodingStrategy( uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONReference.Backing(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 7) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONReference.Backing( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)double result = a2 - 249;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xF9) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xF9) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for JSONReference.Backing(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 7);
  }
}

uint64_t destructiveInjectEnumTag for JSONReference.Backing(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(void *)double result = a2 - 7;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 7;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for JSONReference.Backing()
{
  return &type metadata for JSONReference.Backing;
}

void *type metadata accessor for _JSONEncodingStorage()
{
  return &unk_189C76220;
}

uint64_t destroy for JSONEncoder._Options(uint64_t a1)
{
  if (*(void *)(a1 + 32) >= 2uLL) {
    swift_release();
  }
  if (*(void *)(a1 + 56))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (*(void *)(a1 + 96) >= 2uLL) {
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for JSONEncoder._Options(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v6);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  unint64_t v7 = *(void *)(a2 + 32);
  if (v7 >= 2)
  {
    uint64_t v11 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v11;
    swift_retain();
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8) {
      goto LABEL_3;
    }
  }

  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
LABEL_3:
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v8;
      uint64_t v9 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v9;
      uint64_t v10 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }

  __int128 v12 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_6:
  unint64_t v13 = *(void *)(a2 + 96);
  if (v13 >= 2)
  {
    uint64_t v14 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v13;
    *(void *)(a1 + 104) = v14;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }

  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JSONEncoder._Options(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v6);
  unint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v9 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
  unint64_t v10 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) < 2uLL)
  {
    if (v10 >= 2)
    {
      uint64_t v11 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      swift_retain();
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v10 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }

  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v12;
  swift_retain();
  swift_release();
LABEL_8:
  unint64_t v13 = (_OWORD *)(a1 + 48);
  uint64_t v14 = (_OWORD *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v15)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)(a1 + 48);
      __int128 v17 = *(_OWORD *)(a2 + 64);
      __int128 v16 = *(_OWORD *)(a2 + 80);
      *unint64_t v13 = *v14;
      *(_OWORD *)(a1 + 64) = v17;
      *(_OWORD *)(a1 + 80) = v16;
    }
  }

  else if (v15)
  {
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v18 = *v14;
    __int128 v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v19;
    *unint64_t v13 = v18;
  }

  unint64_t v20 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) >= 2uLL)
  {
    if (v20 >= 2)
    {
      uint64_t v22 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v20;
      *(void *)(a1 + 104) = v22;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }

    swift_release();
    goto LABEL_20;
  }

  if (v20 < 2)
  {
LABEL_20:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_22;
  }

  uint64_t v21 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v20;
  *(void *)(a1 + 104) = v21;
  swift_retain();
LABEL_22:
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (positiveInfinity: String, negativeInfinity: String, nan: String));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for JSONEncoder._Options(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(_BYTE *)(a2 + 24);
  __int128 v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  char v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v8);
  unint64_t v9 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) < 2uLL)
  {
    if (v9 >= 2)
    {
      uint64_t v10 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v9;
      *(void *)(a1 + 40) = v10;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v9 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }

  uint64_t v11 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v11;
  swift_release();
LABEL_8:
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = *(void *)(a2 + 56);
    if (v12)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v12;
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v13;
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v14;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }

    outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)(a1 + 48);
  }

  __int128 v15 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_13:
  unint64_t v16 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) >= 2uLL)
  {
    if (v16 >= 2)
    {
      uint64_t v18 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v16;
      *(void *)(a1 + 104) = v18;
      swift_release();
      goto LABEL_20;
    }

    swift_release();
    goto LABEL_18;
  }

  if (v16 < 2)
  {
LABEL_18:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_20;
  }

  uint64_t v17 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
LABEL_20:
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONEncoder._Options(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONEncoder._Options(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 120) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 112) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void *type metadata accessor for JSONEncoder._Options()
{
  return &unk_189C762A0;
}

_OWORD *outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

void *outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy( void *a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined copy of _CodingKey(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 3 || a4 == 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey;
  if (!lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _CodingKey, &type metadata for _CodingKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey;
  if (!lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _CodingKey, &type metadata for _CodingKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey;
  if (!lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _CodingKey, &type metadata for _CodingKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey);
  }

  return result;
}

uint64_t sub_1830114B8()
{
  return swift_deallocObject();
}

uint64_t outlined consume of _CodingKey(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 3 || a4 == 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer;
  if (!lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _JSONUnkeyedEncodingContainer, &unk_189C763D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer);
  }

  return result;
}

uint64_t type metadata accessor for _JSONKeyedEncodingContainer( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _JSONKeyedEncodingContainer);
}

uint64_t specialized __JSONReferencingEncoder.init(referencing:key:convertedKey:codingPathNode:wrapping:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v70 = a8;
  v83[3] = &type metadata for _CodingKey;
  unint64_t v64 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v83[4] = v64;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  *(void *)(v17 + 32) = a4;
  *(_BYTE *)(v17 + 40) = a5;
  uint64_t v71 = a9;
  *(void *)(a10 + 160) = a1;
  *(void *)(a10 + 168) = a9 | 0x8000000000000000LL;
  *(void *)(a10 + 176) = a6;
  *(void *)(a10 + 184) = a7;
  uint64_t v65 = *(void *)(a1 + 24);
  uint64_t v18 = *(void **)(a1 + 32);
  uint64_t v82 = *(void *)(a1 + 40);
  v83[0] = v17;
  int v81 = *(unsigned __int8 *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  uint64_t v79 = *(void *)(a1 + 64);
  unint64_t v80 = v19;
  uint64_t v20 = *(void *)(a1 + 72);
  uint64_t v77 = *(void *)(a1 + 80);
  uint64_t v78 = v20;
  uint64_t v21 = *(void *)(a1 + 88);
  uint64_t v75 = *(void *)(a1 + 96);
  uint64_t v76 = v21;
  uint64_t v74 = *(void *)(a1 + 104);
  uint64_t v22 = *(void *)(a1 + 112);
  id v72 = v18;
  uint64_t v73 = v22;
  uint64_t v23 = *(void *)(a1 + 128);
  unint64_t v68 = *(void *)(a1 + 120);
  uint64_t v69 = v23;
  uint64_t v67 = *(void *)(a1 + 136);
  unint64_t v24 = __swift_project_boxed_opaque_existential_1(v83, (uint64_t)&type metadata for _CodingKey);
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(void *)(v26 + 64);
  MEMORY[0x1895F8858](v25);
  uint64_t v28 = (char *)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  initializeWithCopy for _CodingKey((uint64_t)v28, (uint64_t)v24);
  uint64_t v29 = storeEnumTagSinglePayload for _CodingKey((uint64_t)v28, 0, 1u);
  uint64_t v30 = MEMORY[0x1895F8858](v29);
  uint64_t v32 = (char *)&v63 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v30);
  uint64_t v33 = v25;
  uint64_t v66 = v26;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v28, v28, v25);
  if (getEnumTagSinglePayload for _CodingKey((uint64_t)v28, 1u) == 1)
  {
    swift_retain();
    swift_retain();
    outlined copy of JSONEncoder.DateEncodingStrategy(v72, v82, v81);
    outlined copy of JSONEncoder.KeyEncodingStrategy(v80);
    outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v78, v77);
    unint64_t v34 = v68;
    uint64_t v35 = v69;
    outlined copy of JSONEncoder.KeyEncodingStrategy(v68);
    uint64_t v36 = *(void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v37 = v67;
    swift_bridgeObjectRetain();
    v36(v28, v33);
    v36(v28, v33);
    unint64_t v38 = v70;
    swift_retain();
    swift_release();
    swift_release();
    unint64_t v39 = v38 >> 62;
    int v40 = (uint64_t *)v38;
    id v41 = v72;
    if (v38 >> 62)
    {
LABEL_3:
      if ((_DWORD)v39 != 1)
      {
        uint64_t v47 = 0LL;
LABEL_14:
        uint64_t v51 = v65;
        uint64_t v52 = v82;
        char v53 = v81;
        uint64_t v55 = v79;
        unint64_t v54 = v80;
        uint64_t v57 = v77;
        uint64_t v56 = v78;
        uint64_t v59 = v75;
        uint64_t v58 = v76;
        uint64_t v60 = v73;
        uint64_t v61 = v74;
        *(void *)(a10 + 32) = v41;
        *(void *)(a10 + 40) = v52;
        *(_BYTE *)(a10 + 48) = v53;
        *(void *)(a10 + 56) = v54;
        *(void *)(a10 + 64) = v55;
        *(void *)(a10 + 72) = v56;
        *(void *)(a10 + 80) = v57;
        *(void *)(a10 + 88) = v58;
        *(void *)(a10 + 96) = v59;
        *(void *)(a10 + 104) = v61;
        *(void *)(a10 + 112) = v60;
        uint64_t v62 = MEMORY[0x18961AFE8];
        *(void *)(a10 + 120) = v34;
        *(void *)(a10 + 128) = v35;
        *(void *)(a10 + 16) = v62;
        *(void *)(a10 + 24) = v51;
        *(void *)(a10 + 136) = v37;
        *(void *)(a10 + 144) = v40;
        *(void *)(a10 + 152) = v47;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
        return a10;
      }

      uint64_t v42 = (uint64_t *)((v38 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      uint64_t v47 = *v42;
      swift_release();
      goto LABEL_14;
    }

uint64_t specialized __JSONReferencingEncoder.init(referencing:key:convertedKey:codingPathNode:wrapping:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v80 = a5;
  *(void *)&__int128 v92 = a8;
  *((void *)&v92 + 1) = a9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v91);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32LL))(boxed_opaque_existential_1, a2, a8);
  uint64_t v79 = a6;
  *(void *)(a7 + 160) = a1;
  *(void *)(a7 + 168) = a6 | 0x8000000000000000LL;
  *(void *)(a7 + 176) = a3;
  *(void *)(a7 + 184) = a4;
  uint64_t v72 = *(void *)(a1 + 24);
  uint64_t v17 = *(void **)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  int v90 = *(unsigned __int8 *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  uint64_t v88 = *(void *)(a1 + 64);
  unint64_t v89 = v19;
  uint64_t v20 = *(void *)(a1 + 72);
  uint64_t v86 = *(void *)(a1 + 80);
  uint64_t v87 = v20;
  uint64_t v21 = *(void *)(a1 + 88);
  uint64_t v84 = *(void *)(a1 + 96);
  uint64_t v85 = v21;
  uint64_t v83 = *(void *)(a1 + 104);
  uint64_t v22 = *(void *)(a1 + 112);
  id v81 = v17;
  uint64_t v82 = v22;
  unint64_t v77 = *(void *)(a1 + 120);
  uint64_t v78 = v18;
  uint64_t v76 = *(void *)(a1 + 128);
  __int128 v71 = v92;
  uint64_t v23 = v92;
  uint64_t v75 = *(void *)(a1 + 136);
  unint64_t v24 = __swift_project_boxed_opaque_existential_1(v91, v92);
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(void *)(v26 + 64);
  MEMORY[0x1895F8858](v25);
  uint64_t v28 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = *(void *)(v23 - 8);
  (*(void (**)(char *, void *, uint64_t))(v29 + 16))(v28, v24, v23);
  uint64_t v30 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v28, 0LL, 1LL, v23);
  uint64_t v31 = MEMORY[0x1895F8858](v30);
  uint64_t v70 = (char *)&v69 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v31);
  uint64_t v33 = v28;
  uint64_t v73 = v26;
  unint64_t v34 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  uint64_t v74 = v25;
  v34(v28, v28, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v28, 1LL, v23) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v35 = v78;
    outlined copy of JSONEncoder.DateEncodingStrategy(v81, v78, v90);
    outlined copy of JSONEncoder.KeyEncodingStrategy(v89);
    outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v87, v86);
    uint64_t v37 = v76;
    unint64_t v36 = v77;
    outlined copy of JSONEncoder.KeyEncodingStrategy(v77);
    unint64_t v38 = *(void (**)(char *, uint64_t))(v73 + 8);
    uint64_t v39 = v75;
    swift_bridgeObjectRetain();
    int v40 = v28;
    uint64_t v41 = v74;
    v38(v40, v74);
    v38(v33, v41);
    unint64_t v42 = v80;
    swift_retain();
    swift_release();
    swift_release();
    unint64_t v43 = v42 >> 62;
    uint64_t v44 = v42;
    id v45 = v81;
    unint64_t v46 = v42;
    if (v42 >> 62)
    {
LABEL_3:
      if ((_DWORD)v43 != 1)
      {
        uint64_t v54 = 0LL;
LABEL_14:
        uint64_t v58 = v72;
        char v59 = v90;
        uint64_t v61 = v88;
        unint64_t v60 = v89;
        uint64_t v63 = v86;
        uint64_t v62 = v87;
        uint64_t v65 = v84;
        uint64_t v64 = v85;
        uint64_t v67 = v82;
        uint64_t v66 = v83;
        *(void *)(a7 + 32) = v45;
        *(void *)(a7 + 40) = v35;
        *(_BYTE *)(a7 + 48) = v59;
        *(void *)(a7 + 56) = v60;
        *(void *)(a7 + 64) = v61;
        *(void *)(a7 + 72) = v62;
        *(void *)(a7 + 80) = v63;
        *(void *)(a7 + 88) = v64;
        *(void *)(a7 + 96) = v65;
        *(void *)(a7 + 104) = v66;
        *(void *)(a7 + 112) = v67;
        uint64_t v68 = MEMORY[0x18961AFE8];
        *(void *)(a7 + 120) = v36;
        *(void *)(a7 + 128) = v37;
        *(void *)(a7 + 16) = v68;
        *(void *)(a7 + 24) = v58;
        *(void *)(a7 + 136) = v39;
        *(void *)(a7 + 144) = v44;
        *(void *)(a7 + 152) = v54;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
        return a7;
      }

      uint64_t v47 = (uint64_t *)((v46 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      uint64_t v54 = *v47;
      swift_release();
      goto LABEL_14;
    }

uint64_t outlined copy of _CodingKey?(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1) {
    return outlined copy of _CodingKey(a1, a2, a3, a4);
  }
  return a1;
}

uint64_t sub_183011E64()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(a1);
}

uint64_t outlined init with take of (key: String, value: Encodable)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(a1);
}

uint64_t destroy for _JSONKeyedEncodingContainer()
{
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for _JSONKeyedEncodingContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for _JSONKeyedEncodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _JSONKeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

void *type metadata accessor for _JSONUnkeyedEncodingContainer()
{
  return &unk_189C763D8;
}

uint64_t associated type witness table accessor for KeyedEncodingContainerProtocol.Key : CodingKey in _JSONKeyedEncodingContainer<A>( uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg50122_s10Foundation11JSONEncoderC19KeyEncodingStrategyO19_convertToSnakeCase33_12768CA107A31EF2DCE034FD75B541C9LLyS2SFZSSSnySS5D7VGXEfU_SSTf1cn_nTf4ng_n( uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = a1 + 40;
    do
    {
      String.subscript.getter();
      Swift::String v5 = Substring.lowercased()();
      swift_bridgeObjectRelease();
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      v4 += 16LL;
      *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7 + 1;
      *(Swift::String *)(v9 + 16 * v7 + 32) = v5;
      --v1;
    }

    while (v1);
  }

  return v2;
}

unint64_t specialized static JSONEncoder.KeyEncodingStrategy._convertToSnakeCase(_:)( uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  uint64_t v4 = a1;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    unint64_t v6 = String.index(after:)();
    uint64_t v7 = 7LL;
    if (((v3 >> 60) & ((v4 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v7 = 11LL;
    }
    unint64_t v57 = 4 * v5;
    if (4 * v5 < v6 >> 14) {
      goto LABEL_93;
    }
    unint64_t v58 = 15LL;
    char v59 = (void *)MEMORY[0x18961AFE8];
    uint64_t v56 = v7 | (v5 << 16);
    while (1)
    {
      unint64_t v8 = String.subscript.getter();
      unint64_t v11 = v10;
      unint64_t v12 = v8 >> 14;
      unint64_t v14 = v13 >> 14;
      if (v8 >> 14 == v13 >> 14) {
        break;
      }
      unint64_t v3 = v8;
      unint64_t v15 = v9;
      swift_bridgeObjectRetain();
      uint64_t v16 = Substring.UnicodeScalarView.index(before:)();
      uint64_t v17 = (v15 >> 59) & 1;
      if ((v11 & 0x1000000000000000LL) == 0) {
        LOBYTE(v17) = 1;
      }
      uint64_t v18 = 4LL << v17;
      for (unint64_t i = v3; ; unint64_t i = Substring.UnicodeScalarView.index(_:offsetBy:)())
      {
        if ((i & 0xC) == v18 || (i & 1) == 0)
        {
          unint64_t v20 = i;
          if ((i & 0xC) == v18) {
            unint64_t v20 = _StringGuts._slowEnsureMatchingEncoding(_:)(i, v15, v11);
          }
          if (v20 >> 14 < v12 || v20 >> 14 >= v14)
          {
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
            goto LABEL_95;
          }

          if ((v20 & 1) == 0) {
            _StringGuts.scalarAlignSlow(_:)(v20, v15, v11);
          }
        }

        else if (i >> 14 < v12 || i >> 14 >= v14)
        {
          goto LABEL_90;
        }

        if ((v11 & 0x1000000000000000LL) != 0)
        {
          uint64_t v21 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v11 & 0x2000000000000000LL) == 0 && (v15 & 0x1000000000000000LL) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          uint64_t v21 = _decodeScalar(_:startingAt:)();
        }

        unsigned __int16 v22 = v21;
        uint64_t v23 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v21), 1);
        if (BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v22, v23, 0x700030001LL)) {
          break;
        }
        if ((i ^ v16) < 0x4000)
        {
          unint64_t v3 = v58;
LABEL_79:
          swift_bridgeObjectRelease();
          goto LABEL_80;
        }
      }

      unint64_t v24 = Substring.UnicodeScalarView.index(after:)();
      unint64_t result = swift_bridgeObjectRelease_n();
      unint64_t v26 = i >> 14;
      if (i >> 14 < v58 >> 14 || v24 >> 14 < v26)
      {
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
        return result;
      }

      uint64_t v27 = v59;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v59[2] + 1LL,  1,  v59);
        uint64_t v27 = (void *)result;
      }

      unint64_t v29 = v27[2];
      unint64_t v28 = v27[3];
      if (v29 >= v28 >> 1)
      {
        unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v28 > 1),  v29 + 1,  1,  v27);
        uint64_t v27 = (void *)result;
      }

      _OWORD v27[2] = v29 + 1;
      uint64_t v30 = &v27[2 * v29];
      v30[4] = v58;
      v30[5] = i;
      if (v57 < v26) {
        goto LABEL_97;
      }
      char v59 = v27;
      unint64_t v31 = String.subscript.getter();
      unint64_t v34 = v33;
      unint64_t v36 = v35 >> 14;
      unint64_t v61 = v31 >> 14;
      if (v31 >> 14 == v35 >> 14)
      {
        unint64_t v3 = i;
LABEL_80:
        unint64_t i = (unint64_t)v59;
        goto LABEL_81;
      }

      unint64_t v3 = v31;
      unint64_t v37 = v32;
      swift_bridgeObjectRetain();
      uint64_t v38 = Substring.UnicodeScalarView.index(before:)();
      uint64_t v39 = (v37 >> 59) & 1;
      if ((v34 & 0x1000000000000000LL) == 0) {
        LOBYTE(v39) = 1;
      }
      uint64_t v40 = 4LL << v39;
      uint64_t v60 = v38;
      for (unint64_t j = v3; ; unint64_t j = Substring.UnicodeScalarView.index(_:offsetBy:)())
      {
        if ((j & 0xC) == v40 || (j & 1) == 0)
        {
          unint64_t v43 = j;
          if ((j & 0xC) == v40) {
            unint64_t v43 = _StringGuts._slowEnsureMatchingEncoding(_:)(j, v37, v34);
          }
          if (v43 >> 14 < v61 || v43 >> 14 >= v36) {
            goto LABEL_91;
          }
          if ((v43 & 1) == 0) {
            _StringGuts.scalarAlignSlow(_:)(v43, v37, v34);
          }
        }

        else if (j >> 14 < v61 || j >> 14 >= v36)
        {
          goto LABEL_92;
        }

        if ((v34 & 0x1000000000000000LL) != 0)
        {
          uint64_t v44 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v34 & 0x2000000000000000LL) == 0 && (v37 & 0x1000000000000000LL) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          uint64_t v44 = _decodeScalar(_:startingAt:)();
        }

        unsigned __int16 v45 = v44;
        uint64_t v46 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v44), 0);
        if (BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v45, v46, 0x700030000LL)) {
          break;
        }
        if ((j ^ v60) < 0x4000)
        {
          unint64_t v3 = i;
          goto LABEL_79;
        }
      }

      unint64_t v47 = Substring.UnicodeScalarView.index(after:)();
      unint64_t result = swift_bridgeObjectRelease_n();
      if (v47 >> 14 < j >> 14) {
        goto LABEL_98;
      }
      unint64_t result = String.index(after:)();
      if (j >> 14 != result >> 14)
      {
        unint64_t result = String.index(before:)();
        if (i >> 14 > result >> 14) {
          goto LABEL_100;
        }
        unint64_t v48 = result;
        unint64_t v50 = v59[2];
        unint64_t v49 = v59[3];
        if (v50 >= v49 >> 1)
        {
          unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v49 > 1),  v50 + 1,  1,  v59);
          char v59 = (void *)result;
        }

        v59[2] = v50 + 1;
        uint64_t v51 = &v59[2 * v50];
        v51[4] = i;
        v51[5] = v48;
        unint64_t i = v48;
      }

      unint64_t v58 = i;
      if (v57 < v47 >> 14) {
        goto LABEL_99;
      }
    }

    unint64_t v3 = v58;
    unint64_t i = (unint64_t)v59;
LABEL_81:
    swift_bridgeObjectRelease();
    if (v57 < v3 >> 14) {
      goto LABEL_94;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_95:
    }
      unint64_t i = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(i + 16) + 1LL,  1,  (void *)i);
    unint64_t v53 = *(void *)(i + 16);
    unint64_t v52 = *(void *)(i + 24);
    if (v53 >= v52 >> 1) {
      unint64_t i = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v52 > 1),  v53 + 1,  1,  (void *)i);
    }
    *(void *)(i + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v53 + 1;
    unint64_t v54 = i + 16 * v53;
    *(void *)(v54 + 32) = v3;
    *(void *)(v54 + 40) = v56;
    swift_bridgeObjectRetain();
    uint64_t v55 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg50122_s10Foundation11JSONEncoderC19KeyEncodingStrategyO19_convertToSnakeCase33_12768CA107A31EF2DCE034FD75B541C9LLyS2SFZSSSnySS5D7VGXEfU_SSTf1cn_nTf4ng_n(v55);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    uint64_t v4 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  return v4;
}

uint64_t specialized _JSONUnkeyedEncodingContainer.count.getter(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  int v2 = *(unsigned __int8 *)(result + 32);
  if (v2 == 4) {
    return *(void *)(v1 + 16);
  }
  if (v2 == 3)
  {
    if (v1 >> 62)
    {
      uint64_t v3 = *(void *)(result + 24);
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of JSONReference.Backing(v1, v3, 3);
      return v4;
    }

    else
    {
      return *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (!a1) {
    return MEMORY[0x18961AFF0];
  }
  swift_unknownObjectRetain();
  uint64_t v2 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2) {
    return v2;
  }
  id v3 = objc_msgSend(a1, sel_count);
  if (!v3) {
    return MEMORY[0x18961AFF0];
  }
  uint64_t v4 = (uint64_t)v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = *(char **)(v2 + 48);
  uint64_t v6 = *(void *)(v2 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v5, v6, a1, v4);
  if ((result & 0x8000000000000000LL) == 0 && v4 >= result)
  {
    *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
    if (result)
    {
      uint64_t v8 = result - 1;
      uint64_t v9 = v2 + 64;
      while (1)
      {
        outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v8, (uint64_t)v39);
        Swift::Int v19 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t result = outlined destroy of AnyHashable((uint64_t)v39);
        uint64_t v20 = -1LL << *(_BYTE *)(v2 + 32);
        unint64_t v21 = v19 & ~v20;
        unint64_t v22 = v21 >> 6;
        if (((-1LL << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) != 0)
        {
          unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v24 = 0;
          unint64_t v25 = (unint64_t)(63 - v20) >> 6;
          do
          {
            if (++v22 == v25 && (v24 & 1) != 0)
            {
              __break(1u);
              goto LABEL_27;
            }

            BOOL v26 = v22 == v25;
            if (v22 == v25) {
              unint64_t v22 = 0LL;
            }
            v24 |= v26;
            uint64_t v27 = *(void *)(v9 + 8 * v22);
          }

          while (v27 == -1);
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
        }

        *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
        if (v8 < (uint64_t)v23)
        {
          uint64_t v10 = *(void *)(v2 + 48);
          uint64_t v11 = v10 + 40 * v23;
          unint64_t v12 = (__int128 *)(v10 + 40 * v8);
          __int128 v13 = *v12;
          __int128 v14 = v12[1];
          *(void *)(v11 + 32) = *((void *)v12 + 4);
          *(_OWORD *)uint64_t v11 = v13;
          *(_OWORD *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v14;
          uint64_t v15 = *(void *)(v2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v23);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v8);
          __int128 v18 = v17[1];
          *uint64_t v16 = *v17;
          v16[1] = v18;
LABEL_9:
          if (--v8 < 0) {
            break;
          }
        }

        else
        {
          if (v23 == v8) {
            goto LABEL_9;
          }
          uint64_t v28 = *(void *)(v2 + 48);
          unint64_t v29 = (__int128 *)(v28 + 40 * v23);
          uint64_t v30 = (__int128 *)(v28 + 40 * v8);
          __int128 v31 = *v29;
          __int128 v32 = v29[1];
          uint64_t v33 = *((void *)v29 + 4);
          uint64_t v34 = *((void *)v30 + 4);
          __int128 v35 = v30[1];
          *unint64_t v29 = *v30;
          v29[1] = v35;
          *((void *)v29 + 4) = v34;
          *((void *)v30 + 4) = v33;
          *uint64_t v30 = v31;
          v30[1] = v32;
          uint64_t v36 = *(void *)(v2 + 56);
          unint64_t v37 = (_OWORD *)(v36 + 32 * v23);
          uint64_t v38 = (_OWORD *)(v36 + 32 * v8);
          outlined init with take of Any(v37, v39);
          outlined init with take of Any(v38, v37);
          outlined init with take of Any(v39, v38);
          if (v8 < 0) {
            break;
          }
        }
      }
    }

    swift_release();
    return v2;
  }

{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;
  void *v15;
  id v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 v39;
  _OWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  _OWORD v59[4];
  if (!a1) {
    return MEMORY[0x18961AFF0];
  }
  type metadata accessor for NSURLResourceKey(0LL);
  if (v2 == MEMORY[0x189617FA8])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    id v3 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v3) {
      return v3;
    }
    __int128 v31 = objc_msgSend(a1, sel_count);
    if (!v31) {
      return MEMORY[0x18961AFF0];
    }
    __int128 v32 = (uint64_t)v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    id v3 = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v33 = *(void **)(v3 + 48);
    uint64_t v34 = *(void *)(v3 + 56);
    swift_retain();
    uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v33,  v34,  a1,  v32);
    if (result < 0 || v32 < result) {
      goto LABEL_46;
    }
    *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
    if (!result)
    {
LABEL_42:
      swift_release();
      return v3;
    }

    __int128 v35 = result - 1;
    uint64_t v36 = v3 + 64;
    while (1)
    {
      while (1)
      {
        uint64_t v41 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v35);
        unint64_t v42 = *v41;
        unint64_t v43 = v41[1];
        swift_bridgeObjectRetain();
        uint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
        uint64_t v46 = v45;
        swift_bridgeObjectRelease();
        if ((v46 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        unint64_t v47 = *(void *)(v3 + 16);
        unint64_t v48 = __OFSUB__(v47, 1LL);
        unint64_t v49 = v47 - 1;
        if (v48)
        {
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }

        *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v49;
LABEL_34:
        if (--v35 < 0) {
          goto LABEL_42;
        }
      }

      *(void *)(v36 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v44;
      if (v35 < (uint64_t)v44)
      {
        *(_OWORD *)(*(void *)(v3 + 48) + 16 * v44) = *(_OWORD *)(*(void *)(v3 + 48) + 16 * v35);
        unint64_t v37 = *(void *)(v3 + 56);
        uint64_t v38 = (_OWORD *)(v37 + 32 * v35);
        uint64_t v39 = v38[1];
        uint64_t v40 = (_OWORD *)(v37 + 32 * v44);
        *uint64_t v40 = *v38;
        v40[1] = v39;
        goto LABEL_34;
      }

      if (v44 == v35) {
        goto LABEL_34;
      }
      unint64_t v50 = *(void *)(v3 + 48);
      uint64_t v51 = (uint64_t *)(v50 + 16 * v44);
      unint64_t v52 = (uint64_t *)(v50 + 16 * v35);
      unint64_t v53 = *v51;
      unint64_t v54 = v51[1];
      uint64_t v55 = v52[1];
      void *v51 = *v52;
      v51[1] = v55;
      *unint64_t v52 = v53;
      v52[1] = v54;
      uint64_t v56 = *(void *)(v3 + 56);
      unint64_t v57 = (_OWORD *)(v56 + 32 * v44);
      unint64_t v58 = (_OWORD *)(v56 + 32 * v35);
      outlined init with take of Any(v57, v59);
      outlined init with take of Any(v58, v57);
      outlined init with take of Any(v59, v58);
      if (v35 < 0) {
        goto LABEL_42;
      }
    }
  }

  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey,  (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  swift_unknownObjectRetain();
  id v3 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v3) {
    return v3;
  }
  uint64_t v4 = objc_msgSend(a1, sel_count);
  if (!v4) {
    return MEMORY[0x18961AFF0];
  }
  uint64_t v5 = (uint64_t)v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSURLResourceKey, Any>);
  id v3 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v6 = *(char **)(v3 + 48);
  uint64_t v7 = *(void *)(v3 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v6, v7, a1, v5);
  if ((result & 0x8000000000000000LL) == 0 && v5 >= result)
  {
    *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
    if (result)
    {
      uint64_t v9 = result - 1;
      uint64_t v10 = v3 + 64;
      while (1)
      {
        uint64_t v15 = *(void **)(*(void *)(v3 + 48) + 8 * v9);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        Hasher.init(_seed:)();
        uint64_t v16 = v15;
        String.hash(into:)();
        uint64_t v17 = Hasher._finalize()();

        uint64_t result = swift_bridgeObjectRelease();
        __int128 v18 = -1LL << *(_BYTE *)(v3 + 32);
        Swift::Int v19 = v17 & ~v18;
        uint64_t v20 = v19 >> 6;
        if (((-1LL << v19) & ~*(void *)(v10 + 8 * (v19 >> 6))) != 0)
        {
          unint64_t v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v10 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          unint64_t v22 = 0;
          unint64_t v23 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v23 && (v22 & 1) != 0)
            {
              __break(1u);
              goto LABEL_44;
            }

            char v24 = v20 == v23;
            if (v20 == v23) {
              uint64_t v20 = 0LL;
            }
            v22 |= v24;
            unint64_t v25 = *(void *)(v10 + 8 * v20);
          }

          while (v25 == -1);
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
        }

        *(void *)(v10 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
        if (v9 < (uint64_t)v21)
        {
          *(void *)(*(void *)(v3 + 48) + 8 * v21) = *(void *)(*(void *)(v3 + 48) + 8 * v9);
          uint64_t v11 = *(void *)(v3 + 56);
          unint64_t v12 = (_OWORD *)(v11 + 32 * v9);
          __int128 v13 = v12[1];
          __int128 v14 = (_OWORD *)(v11 + 32 * v21);
          *__int128 v14 = *v12;
          v14[1] = v13;
LABEL_10:
          if (--v9 < 0) {
            goto LABEL_42;
          }
        }

        else
        {
          if (v21 == v9) {
            goto LABEL_10;
          }
          BOOL v26 = *(void *)(v3 + 48);
          uint64_t v27 = *(void *)(v26 + 8 * v21);
          *(void *)(v26 + 8 * v21) = *(void *)(v26 + 8 * v9);
          *(void *)(v26 + 8 * v9) = v27;
          uint64_t v28 = *(void *)(v3 + 56);
          unint64_t v29 = (_OWORD *)(v28 + 32 * v21);
          uint64_t v30 = (_OWORD *)(v28 + 32 * v9);
          outlined init with take of Any(v29, v59);
          outlined init with take of Any(v30, v29);
          outlined init with take of Any(v59, v30);
          if (v9 < 0) {
            goto LABEL_42;
          }
        }
      }
    }

    goto LABEL_42;
  }

{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;
  void *v15;
  id v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 v39;
  _OWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  _OWORD v59[4];
  if (!a1) {
    return MEMORY[0x18961AFF0];
  }
  type metadata accessor for NSFileAttributeKey(0LL);
  if (v2 == MEMORY[0x189617FA8])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    id v3 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v3) {
      return v3;
    }
    __int128 v31 = objc_msgSend(a1, sel_count);
    if (!v31) {
      return MEMORY[0x18961AFF0];
    }
    __int128 v32 = (uint64_t)v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    id v3 = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v33 = *(void **)(v3 + 48);
    uint64_t v34 = *(void *)(v3 + 56);
    swift_retain();
    uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v33,  v34,  a1,  v32);
    if (result < 0 || v32 < result) {
      goto LABEL_46;
    }
    *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
    if (!result)
    {
LABEL_42:
      swift_release();
      return v3;
    }

    __int128 v35 = result - 1;
    uint64_t v36 = v3 + 64;
    while (1)
    {
      while (1)
      {
        uint64_t v41 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v35);
        unint64_t v42 = *v41;
        unint64_t v43 = v41[1];
        swift_bridgeObjectRetain();
        uint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
        uint64_t v46 = v45;
        swift_bridgeObjectRelease();
        if ((v46 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        unint64_t v47 = *(void *)(v3 + 16);
        unint64_t v48 = __OFSUB__(v47, 1LL);
        unint64_t v49 = v47 - 1;
        if (v48)
        {
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }

        *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v49;
LABEL_34:
        if (--v35 < 0) {
          goto LABEL_42;
        }
      }

      *(void *)(v36 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v44;
      if (v35 < (uint64_t)v44)
      {
        *(_OWORD *)(*(void *)(v3 + 48) + 16 * v44) = *(_OWORD *)(*(void *)(v3 + 48) + 16 * v35);
        unint64_t v37 = *(void *)(v3 + 56);
        uint64_t v38 = (_OWORD *)(v37 + 32 * v35);
        uint64_t v39 = v38[1];
        uint64_t v40 = (_OWORD *)(v37 + 32 * v44);
        *uint64_t v40 = *v38;
        v40[1] = v39;
        goto LABEL_34;
      }

      if (v44 == v35) {
        goto LABEL_34;
      }
      unint64_t v50 = *(void *)(v3 + 48);
      uint64_t v51 = (uint64_t *)(v50 + 16 * v44);
      unint64_t v52 = (uint64_t *)(v50 + 16 * v35);
      unint64_t v53 = *v51;
      unint64_t v54 = v51[1];
      uint64_t v55 = v52[1];
      void *v51 = *v52;
      v51[1] = v55;
      *unint64_t v52 = v53;
      v52[1] = v54;
      uint64_t v56 = *(void *)(v3 + 56);
      unint64_t v57 = (_OWORD *)(v56 + 32 * v44);
      unint64_t v58 = (_OWORD *)(v56 + 32 * v35);
      outlined init with take of Any(v57, v59);
      outlined init with take of Any(v58, v57);
      outlined init with take of Any(v59, v58);
      if (v35 < 0) {
        goto LABEL_42;
      }
    }
  }

  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSFileAttributeKey,  (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
  swift_unknownObjectRetain();
  id v3 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v3) {
    return v3;
  }
  uint64_t v4 = objc_msgSend(a1, sel_count);
  if (!v4) {
    return MEMORY[0x18961AFF0];
  }
  uint64_t v5 = (uint64_t)v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
  id v3 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v6 = *(char **)(v3 + 48);
  uint64_t v7 = *(void *)(v3 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v6, v7, a1, v5);
  if ((result & 0x8000000000000000LL) == 0 && v5 >= result)
  {
    *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
    if (result)
    {
      uint64_t v9 = result - 1;
      uint64_t v10 = v3 + 64;
      while (1)
      {
        uint64_t v15 = *(void **)(*(void *)(v3 + 48) + 8 * v9);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        Hasher.init(_seed:)();
        uint64_t v16 = v15;
        String.hash(into:)();
        uint64_t v17 = Hasher._finalize()();

        uint64_t result = swift_bridgeObjectRelease();
        __int128 v18 = -1LL << *(_BYTE *)(v3 + 32);
        Swift::Int v19 = v17 & ~v18;
        uint64_t v20 = v19 >> 6;
        if (((-1LL << v19) & ~*(void *)(v10 + 8 * (v19 >> 6))) != 0)
        {
          unint64_t v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v10 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          unint64_t v22 = 0;
          unint64_t v23 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v23 && (v22 & 1) != 0)
            {
              __break(1u);
              goto LABEL_44;
            }

            char v24 = v20 == v23;
            if (v20 == v23) {
              uint64_t v20 = 0LL;
            }
            v22 |= v24;
            unint64_t v25 = *(void *)(v10 + 8 * v20);
          }

          while (v25 == -1);
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
        }

        *(void *)(v10 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
        if (v9 < (uint64_t)v21)
        {
          *(void *)(*(void *)(v3 + 48) + 8 * v21) = *(void *)(*(void *)(v3 + 48) + 8 * v9);
          uint64_t v11 = *(void *)(v3 + 56);
          unint64_t v12 = (_OWORD *)(v11 + 32 * v9);
          __int128 v13 = v12[1];
          __int128 v14 = (_OWORD *)(v11 + 32 * v21);
          *__int128 v14 = *v12;
          v14[1] = v13;
LABEL_10:
          if (--v9 < 0) {
            goto LABEL_42;
          }
        }

        else
        {
          if (v21 == v9) {
            goto LABEL_10;
          }
          BOOL v26 = *(void *)(v3 + 48);
          uint64_t v27 = *(void *)(v26 + 8 * v21);
          *(void *)(v26 + 8 * v21) = *(void *)(v26 + 8 * v9);
          *(void *)(v26 + 8 * v9) = v27;
          uint64_t v28 = *(void *)(v3 + 56);
          unint64_t v29 = (_OWORD *)(v28 + 32 * v21);
          uint64_t v30 = (_OWORD *)(v28 + 32 * v9);
          outlined init with take of Any(v29, v59);
          outlined init with take of Any(v30, v29);
          outlined init with take of Any(v59, v30);
          if (v9 < 0) {
            goto LABEL_42;
          }
        }
      }
    }

    goto LABEL_42;
  }

{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  _OWORD v33[2];
  if (!a1) {
    return MEMORY[0x18961AFF0];
  }
  swift_unknownObjectRetain();
  uint64_t v2 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2) {
    return v2;
  }
  uint64_t v4 = objc_msgSend(a1, sel_count);
  if (!v4) {
    return MEMORY[0x18961AFF0];
  }
  uint64_t v5 = (uint64_t)v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  id v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v6 = (void *)v3[6];
  uint64_t v7 = v3[7];
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v6, v7, a1, v5);
  if ((result & 0x8000000000000000LL) == 0 && v5 >= result)
  {
    v3[2] = result;
    if (!result)
    {
LABEL_19:
      swift_release();
      return (uint64_t)v3;
    }

    uint64_t v9 = result - 1;
    uint64_t v10 = v3 + 8;
    while (1)
    {
      while (1)
      {
        uint64_t v15 = (uint64_t *)(v3[6] + 16 * v9);
        uint64_t v16 = *v15;
        uint64_t v17 = v15[1];
        swift_bridgeObjectRetain();
        __int128 v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
        uint64_t v20 = v19;
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        unint64_t v21 = v3[2];
        unint64_t v22 = __OFSUB__(v21, 1LL);
        unint64_t v23 = v21 - 1;
        if (v22)
        {
          __break(1u);
          goto LABEL_22;
        }

        v3[2] = v23;
LABEL_11:
        if (--v9 < 0) {
          goto LABEL_19;
        }
      }

      *(void *)((char *)v10 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      if (v9 < (uint64_t)v18)
      {
        *(_OWORD *)(v3[6] + 16 * v18) = *(_OWORD *)(v3[6] + 16 * v9);
        uint64_t v11 = v3[7];
        unint64_t v12 = (_OWORD *)(v11 + 32 * v9);
        __int128 v13 = v12[1];
        __int128 v14 = (_OWORD *)(v11 + 32 * v18);
        *__int128 v14 = *v12;
        v14[1] = v13;
        goto LABEL_11;
      }

      if (v18 == v9) {
        goto LABEL_11;
      }
      char v24 = v3[6];
      unint64_t v25 = (uint64_t *)(v24 + 16 * v18);
      BOOL v26 = (uint64_t *)(v24 + 16 * v9);
      uint64_t v27 = *v25;
      uint64_t v28 = v25[1];
      unint64_t v29 = v26[1];
      *unint64_t v25 = *v26;
      v25[1] = v29;
      *BOOL v26 = v27;
      v26[1] = v28;
      uint64_t v30 = v3[7];
      __int128 v31 = (_OWORD *)(v30 + 32 * v18);
      __int128 v32 = (_OWORD *)(v30 + 32 * v9);
      outlined init with take of Any(v31, v33);
      outlined init with take of Any(v32, v31);
      outlined init with take of Any(v33, v32);
      if (v9 < 0) {
        goto LABEL_19;
      }
    }
  }

{
  uint64_t v2;
  id v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  if (!a1) {
    return MEMORY[0x18961AFF0];
  }
  swift_unknownObjectRetain();
  uint64_t v2 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2) {
    return v2;
  }
  id v3 = objc_msgSend(a1, sel_count);
  if (!v3) {
    return MEMORY[0x18961AFF0];
  }
  uint64_t v4 = (uint64_t)v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = *(char **)(v2 + 48);
  uint64_t v6 = *(void *)(v2 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v5, v6, a1, v4);
  if ((result & 0x8000000000000000LL) == 0 && v4 >= result)
  {
    *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
    if (result)
    {
      uint64_t v8 = result - 1;
      uint64_t v9 = v2 + 64;
      while (1)
      {
        uint64_t result = static Hasher._hash(seed:_:)();
        uint64_t v10 = -1LL << *(_BYTE *)(v2 + 32);
        uint64_t v11 = result & ~v10;
        unint64_t v12 = v11 >> 6;
        if (((-1LL << v11) & ~*(void *)(v9 + 8 * (v11 >> 6))) != 0)
        {
          __int128 v13 = __clz(__rbit64((-1LL << v11) & ~*(void *)(v9 + 8 * (v11 >> 6)))) | v11 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          __int128 v14 = 0;
          uint64_t v15 = (unint64_t)(63 - v10) >> 6;
          do
          {
            if (++v12 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              goto LABEL_27;
            }

            uint64_t v16 = v12 == v15;
            if (v12 == v15) {
              unint64_t v12 = 0LL;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v9 + 8 * v12);
          }

          while (v17 == -1);
          __int128 v13 = __clz(__rbit64(~v17)) + (v12 << 6);
        }

        *(void *)(v9 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
        if (v8 < (uint64_t)v13)
        {
          *(void *)(*(void *)(v2 + 48) + 8 * v13) = *(void *)(*(void *)(v2 + 48) + 8 * v8);
          *(_OWORD *)(*(void *)(v2 + 56) + 16 * v13) = *(_OWORD *)(*(void *)(v2 + 56) + 16 * v8);
LABEL_9:
          if (--v8 < 0) {
            break;
          }
        }

        else
        {
          if (v13 == v8) {
            goto LABEL_9;
          }
          __int128 v18 = *(void *)(v2 + 48);
          Swift::Int v19 = *(void *)(v18 + 8 * v13);
          *(void *)(v18 + 8 * v13) = *(void *)(v18 + 8 * v8);
          *(void *)(v18 + 8 * v8) = v19;
          uint64_t v20 = *(void *)(v2 + 56);
          unint64_t v21 = (uint64_t *)(v20 + 16 * v13);
          unint64_t v22 = (uint64_t *)(v20 + 16 * v8);
          unint64_t v23 = *v21;
          char v24 = v21[1];
          unint64_t v25 = v22[1];
          *unint64_t v21 = *v22;
          v21[1] = v25;
          *unint64_t v22 = v23;
          v22[1] = v24;
          if (v8 < 0) {
            break;
          }
        }
      }
    }

    swift_release();
    return v2;
  }

{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[2];
  if (!a1) {
    return MEMORY[0x18961AFF0];
  }
  if (MEMORY[0x18961AFC0] + 8LL != MEMORY[0x189617FA8])
  {
    swift_unknownObjectRetain();
    uint64_t v2 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v2) {
      return (uint64_t)v2;
    }
    uint64_t v10 = objc_msgSend(a1, sel_count);
    if (!v10) {
      return MEMORY[0x18961AFF0];
    }
    uint64_t v11 = (uint64_t)v10;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
    unint64_t v12 = (char *)v2[6];
    __int128 v13 = v2[7];
    swift_retain();
    uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v12,  v13,  a1,  v11);
    if (result < 0 || v11 < result) {
      goto LABEL_40;
    }
    v2[2] = result;
    if (!result) {
      goto LABEL_35;
    }
    __int128 v14 = result - 1;
    uint64_t v15 = v2 + 8;
    while (1)
    {
      uint64_t v39 = (uint64_t *)(v2[6] + 16 * v14);
      uint64_t v40 = *v39;
      uint64_t v41 = v39[1];
      swift_bridgeObjectRetain();
      unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
      uint64_t v44 = v43;
      swift_bridgeObjectRelease();
      if ((v44 & 1) != 0)
      {
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        unsigned __int16 v45 = v2[2];
        uint64_t v27 = __OFSUB__(v45, 1LL);
        uint64_t v46 = v45 - 1;
        if (v27) {
          goto LABEL_38;
        }
        v2[2] = v46;
        goto LABEL_27;
      }

      *(void *)((char *)v15 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v42;
      if (v14 < (uint64_t)v42)
      {
        uint64_t v38 = 16 * v42;
        *(_OWORD *)(v2[6] + v38) = *(_OWORD *)(v2[6] + 16 * v14);
        *(_OWORD *)(v2[7] + v38) = *(_OWORD *)(v2[7] + 16 * v14);
LABEL_27:
        if (--v14 < 0) {
          goto LABEL_35;
        }
      }

      else
      {
        if (v42 == v14) {
          goto LABEL_27;
        }
        unint64_t v47 = v2[6];
        unint64_t v48 = (uint64_t *)(v47 + 16 * v42);
        unint64_t v49 = (uint64_t *)(v47 + 16 * v14);
        unint64_t v50 = *v48;
        uint64_t v51 = v48[1];
        unint64_t v52 = v49[1];
        *unint64_t v48 = *v49;
        v48[1] = v52;
        *unint64_t v49 = v50;
        v49[1] = v51;
        unint64_t v53 = v2[7];
        unint64_t v54 = (uint64_t *)(v53 + 16 * v42);
        uint64_t v55 = (uint64_t *)(v53 + 16 * v14);
        uint64_t v56 = *v54;
        unint64_t v57 = v54[1];
        unint64_t v58 = v55[1];
        void *v54 = *v55;
        v54[1] = v58;
        *uint64_t v55 = v56;
        v55[1] = v57;
        if (v14 < 0) {
          goto LABEL_35;
        }
      }
    }
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  uint64_t v2 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2) {
    return (uint64_t)v2;
  }
  id v3 = objc_msgSend(a1, sel_count);
  if (!v3) {
    return MEMORY[0x18961AFF0];
  }
  uint64_t v4 = (uint64_t)v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = (void *)v2[6];
  uint64_t v6 = v2[7];
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v5, v6, a1, v4);
  if (result < 0 || v4 < result) {
    goto LABEL_39;
  }
  v2[2] = result;
  if (!result)
  {
LABEL_35:
    swift_release();
    return (uint64_t)v2;
  }

  uint64_t v8 = result - 1;
  uint64_t v9 = v2 + 8;
  while (1)
  {
    uint64_t v20 = (uint64_t *)(v2[6] + 16 * v8);
    unint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    swift_bridgeObjectRetain();
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22);
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0) {
      break;
    }
    *(void *)((char *)v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    if (v8 < (uint64_t)v23)
    {
      *(_OWORD *)(v2[6] + 16 * v23) = *(_OWORD *)(v2[6] + 16 * v8);
      uint64_t v16 = v2[7];
      uint64_t v17 = (_OWORD *)(v16 + 32 * v8);
      __int128 v18 = v17[1];
      Swift::Int v19 = (_OWORD *)(v16 + 32 * v23);
      *Swift::Int v19 = *v17;
      v19[1] = v18;
LABEL_17:
      if (--v8 < 0) {
        goto LABEL_35;
      }
    }

    else
    {
      if (v23 == v8) {
        goto LABEL_17;
      }
      unint64_t v29 = v2[6];
      uint64_t v30 = (uint64_t *)(v29 + 16 * v23);
      __int128 v31 = (uint64_t *)(v29 + 16 * v8);
      __int128 v32 = *v30;
      uint64_t v33 = v30[1];
      uint64_t v34 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v34;
      char *v31 = v32;
      v31[1] = v33;
      __int128 v35 = v2[7];
      uint64_t v36 = (_OWORD *)(v35 + 32 * v23);
      unint64_t v37 = (_OWORD *)(v35 + 32 * v8);
      outlined init with take of Any(v36, v59);
      outlined init with take of Any(v37, v36);
      outlined init with take of Any(v59, v37);
      if (v8 < 0) {
        goto LABEL_35;
      }
    }
  }

  swift_arrayDestroy();
  uint64_t result = swift_arrayDestroy();
  BOOL v26 = v2[2];
  uint64_t v27 = __OFSUB__(v26, 1LL);
  uint64_t v28 = v26 - 1;
  if (!v27)
  {
    v2[2] = v28;
    goto LABEL_17;
  }

  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

void specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (!a1) {
    return;
  }
  if (type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString) == MEMORY[0x189617FA8])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    if (static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()) {
      return;
    }
    id v30 = objc_msgSend(a1, sel_count);
    if (!v30) {
      return;
    }
    uint64_t v31 = (uint64_t)v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    __int128 v32 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v33 = (void *)v32[6];
    uint64_t v34 = v32[7];
    swift_retain();
    uint64_t v35 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v33, v34, a1, v31);
    if (v35 < 0 || v31 < v35) {
      goto LABEL_46;
    }
    v32[2] = v35;
    if (!v35)
    {
LABEL_42:
      swift_release();
      return;
    }

    int64_t v36 = v35 - 1;
    unint64_t v37 = v32 + 8;
    while (1)
    {
      while (1)
      {
        unint64_t v42 = (uint64_t *)(v32[6] + 16 * v36);
        uint64_t v43 = *v42;
        uint64_t v44 = v42[1];
        swift_bridgeObjectRetain();
        unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44);
        char v47 = v46;
        swift_bridgeObjectRelease();
        if ((v47 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v48 = v32[2];
        BOOL v49 = __OFSUB__(v48, 1LL);
        uint64_t v50 = v48 - 1;
        if (v49)
        {
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }

        v32[2] = v50;
LABEL_34:
        if (--v36 < 0) {
          goto LABEL_42;
        }
      }

      *(void *)((char *)v37 + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v45;
      if (v36 < (uint64_t)v45)
      {
        *(_OWORD *)(v32[6] + 16 * v45) = *(_OWORD *)(v32[6] + 16 * v36);
        uint64_t v38 = v32[7];
        uint64_t v39 = (_OWORD *)(v38 + 32 * v36);
        __int128 v40 = v39[1];
        uint64_t v41 = (_OWORD *)(v38 + 32 * v45);
        *uint64_t v41 = *v39;
        v41[1] = v40;
        goto LABEL_34;
      }

      if (v45 == v36) {
        goto LABEL_34;
      }
      uint64_t v51 = v32[6];
      unint64_t v52 = (uint64_t *)(v51 + 16 * v45);
      unint64_t v53 = (uint64_t *)(v51 + 16 * v36);
      uint64_t v54 = *v52;
      uint64_t v55 = v52[1];
      uint64_t v56 = v53[1];
      *unint64_t v52 = *v53;
      v52[1] = v56;
      *unint64_t v53 = v54;
      v53[1] = v55;
      uint64_t v57 = v32[7];
      unint64_t v58 = (_OWORD *)(v57 + 32 * v45);
      char v59 = (_OWORD *)(v57 + 32 * v36);
      outlined init with take of Any(v58, v60);
      outlined init with take of Any(v59, v58);
      outlined init with take of Any(v60, v59);
      if (v36 < 0) {
        goto LABEL_42;
      }
    }
  }

  lazy protocol witness table accessor for type NSString and conformance NSObject();
  swift_unknownObjectRetain();
  if (!static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)())
  {
    id v2 = objc_msgSend(a1, sel_count);
    if (v2)
    {
      uint64_t v3 = (uint64_t)v2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSString, Any>);
      uint64_t v4 = static _DictionaryStorage.allocate(capacity:)();
      uint64_t v5 = *(void **)(v4 + 48);
      uint64_t v6 = *(void *)(v4 + 56);
      swift_retain();
      uint64_t v7 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v5, v6, a1, v3);
      if ((v7 & 0x8000000000000000LL) == 0 && v3 >= v7)
      {
        *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
        if (v7)
        {
          int64_t v8 = v7 - 1;
          uint64_t v9 = v4 + 64;
          while (1)
          {
            Swift::Int v14 = *(void *)(v4 + 40);
            id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
            Swift::Int v16 = NSObject._rawHashValue(seed:)(v14);

            uint64_t v17 = -1LL << *(_BYTE *)(v4 + 32);
            unint64_t v18 = v16 & ~v17;
            unint64_t v19 = v18 >> 6;
            if (((-1LL << v18) & ~*(void *)(v9 + 8 * (v18 >> 6))) != 0)
            {
              unint64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v9 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
            }

            else
            {
              char v21 = 0;
              unint64_t v22 = (unint64_t)(63 - v17) >> 6;
              do
              {
                if (++v19 == v22 && (v21 & 1) != 0)
                {
                  __break(1u);
                  goto LABEL_44;
                }

                BOOL v23 = v19 == v22;
                if (v19 == v22) {
                  unint64_t v19 = 0LL;
                }
                v21 |= v23;
                uint64_t v24 = *(void *)(v9 + 8 * v19);
              }

              while (v24 == -1);
              unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
            }

            *(void *)(v9 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
            if (v8 < (uint64_t)v20)
            {
              *(void *)(*(void *)(v4 + 48) + 8 * v20) = *(void *)(*(void *)(v4 + 48) + 8 * v8);
              uint64_t v10 = *(void *)(v4 + 56);
              uint64_t v11 = (_OWORD *)(v10 + 32 * v8);
              __int128 v12 = v11[1];
              __int128 v13 = (_OWORD *)(v10 + 32 * v20);
              *__int128 v13 = *v11;
              v13[1] = v12;
LABEL_10:
              if (--v8 < 0) {
                goto LABEL_42;
              }
            }

            else
            {
              if (v20 == v8) {
                goto LABEL_10;
              }
              uint64_t v25 = *(void *)(v4 + 48);
              uint64_t v26 = *(void *)(v25 + 8 * v20);
              *(void *)(v25 + 8 * v20) = *(void *)(v25 + 8 * v8);
              *(void *)(v25 + 8 * v8) = v26;
              uint64_t v27 = *(void *)(v4 + 56);
              uint64_t v28 = (_OWORD *)(v27 + 32 * v20);
              unint64_t v29 = (_OWORD *)(v27 + 32 * v8);
              outlined init with take of Any(v28, v60);
              outlined init with take of Any(v29, v28);
              outlined init with take of Any(v60, v29);
              if (v8 < 0) {
                goto LABEL_42;
              }
            }
          }
        }

        goto LABEL_42;
      }

{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;
  void *v15;
  id v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  void *v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 v41;
  _OWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  _OWORD v61[4];
  if (!a1) {
    return;
  }
  type metadata accessor for NSAttributedStringKey(0LL);
  if (v2 == MEMORY[0x189617FA8])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    if (static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()) {
      return;
    }
    uint64_t v31 = objc_msgSend(a1, sel_count);
    if (!v31) {
      return;
    }
    __int128 v32 = (uint64_t)v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v33 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v34 = (void *)v33[6];
    uint64_t v35 = v33[7];
    swift_retain();
    int64_t v36 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v34, v35, a1, v32);
    if (v36 < 0 || v32 < v36) {
      goto LABEL_46;
    }
    void v33[2] = v36;
    if (!v36)
    {
LABEL_42:
      swift_release();
      return;
    }

    unint64_t v37 = v36 - 1;
    uint64_t v38 = v33 + 8;
    while (1)
    {
      while (1)
      {
        uint64_t v43 = (uint64_t *)(v33[6] + 16 * v37);
        uint64_t v44 = *v43;
        unint64_t v45 = v43[1];
        swift_bridgeObjectRetain();
        char v46 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45);
        uint64_t v48 = v47;
        swift_bridgeObjectRelease();
        if ((v48 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        swift_arrayDestroy();
        BOOL v49 = v33[2];
        uint64_t v50 = __OFSUB__(v49, 1LL);
        uint64_t v51 = v49 - 1;
        if (v50)
        {
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }

        void v33[2] = v51;
LABEL_34:
        if (--v37 < 0) {
          goto LABEL_42;
        }
      }

      *(void *)((char *)v38 + ((v46 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v46;
      if (v37 < (uint64_t)v46)
      {
        *(_OWORD *)(v33[6] + 16 * v46) = *(_OWORD *)(v33[6] + 16 * v37);
        uint64_t v39 = v33[7];
        __int128 v40 = (_OWORD *)(v39 + 32 * v37);
        uint64_t v41 = v40[1];
        unint64_t v42 = (_OWORD *)(v39 + 32 * v46);
        *unint64_t v42 = *v40;
        v42[1] = v41;
        goto LABEL_34;
      }

      if (v46 == v37) {
        goto LABEL_34;
      }
      unint64_t v52 = v33[6];
      unint64_t v53 = (uint64_t *)(v52 + 16 * v46);
      uint64_t v54 = (uint64_t *)(v52 + 16 * v37);
      uint64_t v55 = *v53;
      uint64_t v56 = v53[1];
      uint64_t v57 = v54[1];
      *unint64_t v53 = *v54;
      v53[1] = v57;
      void *v54 = v55;
      v54[1] = v56;
      unint64_t v58 = v33[7];
      char v59 = (_OWORD *)(v58 + 32 * v46);
      uint64_t v60 = (_OWORD *)(v58 + 32 * v37);
      outlined init with take of Any(v59, v61);
      outlined init with take of Any(v60, v59);
      outlined init with take of Any(v61, v60);
      if (v37 < 0) {
        goto LABEL_42;
      }
    }
  }

  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey,  (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  swift_unknownObjectRetain();
  if (!static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)())
  {
    uint64_t v3 = objc_msgSend(a1, sel_count);
    if (v3)
    {
      uint64_t v4 = (uint64_t)v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
      uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
      uint64_t v6 = *(void *)(v5 + 48);
      uint64_t v7 = *(void *)(v5 + 56);
      swift_retain();
      specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v6, v7, a1, v4);
      if ((v8 & 0x8000000000000000LL) == 0 && v4 >= v8)
      {
        *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v8;
        if (v8)
        {
          uint64_t v9 = v8 - 1;
          uint64_t v10 = v5 + 64;
          while (1)
          {
            id v15 = *(void **)(*(void *)(v5 + 48) + 8 * v9);
            static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
            Hasher.init(_seed:)();
            Swift::Int v16 = v15;
            String.hash(into:)();
            uint64_t v17 = Hasher._finalize()();

            swift_bridgeObjectRelease();
            unint64_t v18 = -1LL << *(_BYTE *)(v5 + 32);
            unint64_t v19 = v17 & ~v18;
            unint64_t v20 = v19 >> 6;
            if (((-1LL << v19) & ~*(void *)(v10 + 8 * (v19 >> 6))) != 0)
            {
              char v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v10 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
            }

            else
            {
              unint64_t v22 = 0;
              BOOL v23 = (unint64_t)(63 - v18) >> 6;
              do
              {
                if (++v20 == v23 && (v22 & 1) != 0)
                {
                  __break(1u);
                  goto LABEL_44;
                }

                uint64_t v24 = v20 == v23;
                if (v20 == v23) {
                  unint64_t v20 = 0LL;
                }
                v22 |= v24;
                uint64_t v25 = *(void *)(v10 + 8 * v20);
              }

              while (v25 == -1);
              char v21 = __clz(__rbit64(~v25)) + (v20 << 6);
            }

            *(void *)(v10 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
            if (v9 < (uint64_t)v21)
            {
              *(void *)(*(void *)(v5 + 48) + 8 * v21) = *(void *)(*(void *)(v5 + 48) + 8 * v9);
              uint64_t v11 = *(void *)(v5 + 56);
              __int128 v12 = (_OWORD *)(v11 + 32 * v9);
              __int128 v13 = v12[1];
              Swift::Int v14 = (_OWORD *)(v11 + 32 * v21);
              *Swift::Int v14 = *v12;
              v14[1] = v13;
LABEL_10:
              if (--v9 < 0) {
                goto LABEL_42;
              }
            }

            else
            {
              if (v21 == v9) {
                goto LABEL_10;
              }
              uint64_t v26 = *(void *)(v5 + 48);
              uint64_t v27 = *(void *)(v26 + 8 * v21);
              *(void *)(v26 + 8 * v21) = *(void *)(v26 + 8 * v9);
              *(void *)(v26 + 8 * v9) = v27;
              uint64_t v28 = *(void *)(v5 + 56);
              unint64_t v29 = (_OWORD *)(v28 + 32 * v21);
              id v30 = (_OWORD *)(v28 + 32 * v9);
              outlined init with take of Any(v29, v61);
              outlined init with take of Any(v30, v29);
              outlined init with take of Any(v61, v30);
              if (v9 < 0) {
                goto LABEL_42;
              }
            }
          }
        }

        goto LABEL_42;
      }

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
  uint64_t v2 = String._bridgeToObjectiveCImpl()();
  id v3 = (id)__NSCoderDecodeObjectOfClassForKey(v0, ObjCClassFromMetadata, v2, 0LL);
  swift_unknownObjectRelease();
  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v6 = 0u;
    __int128 v7 = 0u;
  }

  outlined init with take of Any?((uint64_t)&v6, (uint64_t)v8);
  outlined init with take of Any?((uint64_t)v8, (uint64_t)&v6);
  if (*((void *)&v7 + 1))
  {
    else {
      return 0LL;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v6, &demangling cache variable for type metadata for Any?);
    return 0LL;
  }

uint64_t NSCoder.decodeObject(of:forKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = a1;
  if (a1)
  {
    if (a1[2] == 1LL)
    {
      ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
      uint64_t v6 = String._bridgeToObjectiveCImpl()();
      id v7 = (id)__NSCoderDecodeObjectOfClassForKey(v2, ObjCClassFromMetadata, v6, 0LL);
      goto LABEL_6;
    }

    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
    id v3 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }

  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  id v7 = (id)__NSCoderDecodeObjectOfClassesForKey(v2, (uint64_t)v3, v8, 0LL);

LABEL_6:
  swift_unknownObjectRelease();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v10, 0, sizeof(v10));
  }

  return outlined init with take of Any?((uint64_t)v10, a2);
}

void NSCoder.decodeTopLevelObject()(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v12 = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v9 = 0LL;
  id v4 = (id)__NSCoderDecodeObject(v2, (const char *)&v9);
  uint64_t v5 = (void *)v9;
  if (v4)
  {
    id v6 = (id)v9;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    id v7 = v5;
  }

  outlined init with take of Any?((uint64_t)&v9, (uint64_t)v11);
  if (v5)
  {
    id v8 = v5;
    if (objc_msgSend(v8, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Any?);

      return;
    }
  }

  outlined init with copy of Any?((uint64_t)v11, (uint64_t)&v9);
  if (*((void *)&v10 + 1))
  {
    outlined init with take of Any(&v9, a1);
  }

  else
  {
    *a1 = 0u;
    a1[1] = 0u;
  }

  outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Any?);
}

id NSCoder.decodeTopLevelObject(forKey:)()
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  unint64_t v1 = (const char *)String._bridgeToObjectiveCImpl()();
  *(void *)&__int128 v13 = 0LL;
  id v2 = (id)__NSCoderDecodeObjectForKey(v0, v1, (uint64_t)&v13);
  swift_unknownObjectRelease();
  id v3 = (void *)v13;
  if (v2)
  {
    id v4 = (id)v13;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v5 = v3;
  }

  outlined init with take of Any?((uint64_t)&v13, (uint64_t)v15);
  if (v3)
  {
    id v6 = v3;
    if (objc_msgSend(v6, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for Any?);

      return v2;
    }
  }

  outlined init with copy of Any?((uint64_t)v15, (uint64_t)&v13);
  uint64_t v7 = *((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    id v8 = __swift_project_boxed_opaque_existential_1(&v13, *((uint64_t *)&v14 + 1));
    uint64_t v9 = *(void *)(v7 - 8);
    MEMORY[0x1895F8858](v8);
    uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v9 + 16))(v11);
    id v2 = (id)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for Any?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }

  else
  {
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for Any?);
    id v2 = 0LL;
  }

  return v2;
}

void NSCoder.decodeTopLevelObject(forKey:)(uint64_t a1@<X8>)
{
  id v2 = v1;
  uint64_t v12 = *MEMORY[0x1895F89C0];
  id v4 = (const char *)String._bridgeToObjectiveCImpl()();
  *(void *)&v10[0] = 0LL;
  id v5 = (id)__NSCoderDecodeObjectForKey(v2, v4, (uint64_t)v10);
  swift_unknownObjectRelease();
  id v6 = *(void **)&v10[0];
  if (v5)
  {
    id v7 = *(id *)&v10[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v10, 0, sizeof(v10));
    id v8 = v6;
  }

  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
  if (!v6) {
    goto LABEL_7;
  }
  id v9 = v6;
  if (objc_msgSend(v9, sel_code) == (id)4865)
  {

LABEL_7:
    outlined init with take of Any?((uint64_t)v11, a1);

    return;
  }

  swift_willThrow();
  outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Any?);
}

uint64_t NSCoder.decodeTopLevelObject<A>(of:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = v4;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  *(void *)&__int128 v16 = 0LL;
  id v9 = (id)__NSCoderDecodeObjectOfClassForKey( v5,  ObjCClassFromMetadata,  v8,  (uint64_t)&v16);
  swift_unknownObjectRelease();
  uint64_t v10 = (void *)v16;
  if (v9)
  {
    id v11 = (id)v16;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v12 = v10;
  }

  outlined init with take of Any?((uint64_t)&v16, (uint64_t)v18);
  if (v10)
  {
    id v13 = v10;
    if (objc_msgSend(v13, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for Any?);

      return a4;
    }
  }

  outlined init with take of Any?((uint64_t)v18, (uint64_t)&v16);
  if (*((void *)&v17 + 1))
  {
    else {
      a4 = 0LL;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v16, &demangling cache variable for type metadata for Any?);
    a4 = 0LL;
  }

  return a4;
}

void NSCoder.decodeTopLevelObject(of:forKey:)(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v3 = v2;
  id v4 = a1;
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1[2] == 1LL)
    {
      ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
      uint64_t v7 = String._bridgeToObjectiveCImpl()();
      *(void *)&__int128 v14 = 0LL;
      id v8 = (id)__NSCoderDecodeObjectOfClassForKey( v3,  ObjCClassFromMetadata,  v7,  (uint64_t)&v14);
      goto LABEL_6;
    }

    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
    id v4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }

  uint64_t v9 = String._bridgeToObjectiveCImpl()();
  *(void *)&__int128 v14 = 0LL;
  id v8 = (id)__NSCoderDecodeObjectOfClassesForKey(v3, (uint64_t)v4, v9, (uint64_t)&v14);

LABEL_6:
  swift_unknownObjectRelease();
  uint64_t v10 = (void *)v14;
  if (v8)
  {
    id v11 = (id)v14;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v12 = v10;
  }

  outlined init with take of Any?((uint64_t)&v14, (uint64_t)v16);
  if (v10)
  {
    id v13 = v10;
    if (objc_msgSend(v13, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Any?);

      return;
    }
  }

  outlined init with copy of Any?((uint64_t)v16, (uint64_t)&v14);
  if (*((void *)&v15 + 1))
  {
    outlined init with take of Any(&v14, a2);
  }

  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }

  outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Any?);
}

uint64_t NSCoder.decodeArrayOfObjects<A>(ofClass:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(v7 + 32) = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t v8 = _ContiguousArrayBuffer._asCocoaArray()();
  uint64_t v9 = String._bridgeToObjectiveCImpl()();
  id v10 = (id)__NSCoderDecodeArrayOfObjectsOfClassesForKey(v4, v8, v9);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v10)
  {
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v11 = swift_dynamicCastClass();
    if (v11)
    {
      uint64_t v12 = v11;
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_unknownObjectRelease();
      objc_msgSend(v10, sel_copy);
      uint64_t v14 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      uint64_t v12 = specialized _arrayForceCast<A, B>(_:)(v14);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }

    uint64_t v15 = specialized _arrayConditionalCast<A, B>(_:)(v12, a4);
    swift_bridgeObjectRelease();
    return v15;
  }

  else
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

Swift::OpaquePointer_optional __swiftcall NSCoder.decodeArrayOfObjects(ofClasses:forKey:)( Swift::OpaquePointer ofClasses, Swift::String forKey)
{
  uint64_t v3 = _ContiguousArrayBuffer._asCocoaArray()();
  uint64_t v4 = String._bridgeToObjectiveCImpl()();
  id v5 = (id)__NSCoderDecodeArrayOfObjectsOfClassesForKey(v2, v3, v4);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v5)
  {
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = v7;
    }

    else
    {
      swift_unknownObjectRelease();
      objc_msgSend(v5, sel_copy);
      uint64_t v9 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      uint64_t v8 = specialized _arrayForceCast<A, B>(_:)(v9);

      swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  id v10 = (void *)v8;
  result.value._rawValue = v10;
  result.is_nil = v6;
  return result;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v14 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  uint64_t v4 = v14;
  if (!v2)
  {
    unint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v2) {
      return v4;
    }
LABEL_7:
    for (uint64_t i = 4LL; ; ++i)
    {
      uint64_t v6 = i - 4;
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        MEMORY[0x186E1C36C](i - 4, a1);
        uint64_t v7 = i - 3;
        if (__OFADD__(v6, 1LL)) {
          goto LABEL_22;
        }
      }

      else
      {
        swift_unknownObjectRetain();
        uint64_t v7 = i - 3;
        if (__OFADD__(v6, 1LL))
        {
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
      }

      if (!swift_dynamicCast())
      {
        swift_release();
        swift_bridgeObjectRelease();
        return 0LL;
      }

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v4 + 16) + 1LL,  1);
        uint64_t v4 = v14;
      }

      unint64_t v9 = *(void *)(v4 + 16);
      unint64_t v8 = *(void *)(v4 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        uint64_t v4 = v14;
      }

      *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v9 + 1;
      uint64_t v10 = v4 + 16 * v9;
      *(void *)(v10 + 32) = v12;
      *(void *)(v10 + 40) = v13;
      if (v7 == v2) {
        return v4;
      }
    }
  }

  swift_bridgeObjectRetain();
  unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v2) {
    goto LABEL_7;
  }
  return v4;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  id v30 = (char *)&v24 - v7;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v6);
  uint64_t v31 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  unint64_t v29 = (char *)&v24 - v11;
  uint64_t v12 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_22;
  }
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t v33 = MEMORY[0x18961AFE8];
    uint64_t v26 = type metadata accessor for ContiguousArray();
    ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13 & ~(v13 >> 63), 0);
    uint64_t v14 = v33;
    if (v12) {
      break;
    }
    uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v15) {
      return v14;
    }
LABEL_7:
    uint64_t v24 = v5;
    uint64_t v25 = v4;
    unint64_t v28 = a1 & 0xC000000000000001LL;
    uint64_t v5 = 4LL;
    uint64_t v27 = MEMORY[0x18961AFB8] + 8LL;
    while (1)
    {
      uint64_t v16 = v28 ? MEMORY[0x186E1C36C](v5 - 4, a1) : swift_unknownObjectRetain();
      uint64_t v4 = (uint64_t)v30;
      uint64_t v12 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      uint64_t v32 = v16;
      int v17 = swift_dynamicCast();
      unint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      if (!v17)
      {
        v18(v4, 1LL, 1LL, a2);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v4, v25);
        return 0LL;
      }

      v18(v4, 0LL, 1LL, a2);
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
      unint64_t v20 = v29;
      v19(v29, v4, a2);
      v19(v31, (uint64_t)v20, a2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v14 + 16) + 1LL,  1);
        uint64_t v14 = v33;
      }

      unint64_t v22 = *(void *)(v14 + 16);
      unint64_t v21 = *(void *)(v14 + 24);
      if (v22 >= v21 >> 1)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        uint64_t v14 = v33;
      }

      *(void *)(v14 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v22 + 1;
      v19( (char *)(v14 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
               + *(void *)(v8 + 72) * v22),
        (uint64_t)v31,
        a2);
      ++v5;
      if (v12 == v15) {
        return v14;
      }
    }

    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v15) {
    goto LABEL_7;
  }
  return v14;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v23 - v6;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v5);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v23 - v12;
  Swift::Int v14 = *(void *)(a1 + 16);
  uint64_t v29 = MEMORY[0x18961AFE8];
  uint64_t v25 = type metadata accessor for ContiguousArray();
  ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
  uint64_t v15 = v29;
  if (v14)
  {
    uint64_t v16 = a1 + 32;
    uint64_t v26 = v11;
    uint64_t v27 = MEMORY[0x18961AFC0] + 8LL;
    while (1)
    {
      outlined init with copy of Any(v16, (uint64_t)v28);
      int v17 = swift_dynamicCast();
      unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      if (!v17) {
        break;
      }
      v18(v7, 0LL, 1LL, a2);
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v19(v13, v7, a2);
      v19(v11, v13, a2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v15 + 16) + 1LL,  1);
        uint64_t v15 = v29;
      }

      unint64_t v21 = *(void *)(v15 + 16);
      unint64_t v20 = *(void *)(v15 + 24);
      if (v21 >= v20 >> 1)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        uint64_t v15 = v29;
      }

      *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21 + 1;
      uint64_t v11 = v26;
      v19( (char *)(v15 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
               + *(void *)(v8 + 72) * v21),
        v26,
        a2);
      v16 += 32LL;
      if (!--v14) {
        return v15;
      }
    }

    v18(v7, 1LL, 1LL, a2);
    swift_release();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v24);
    return 0LL;
  }

  return v15;
}

unint64_t NSCoder.decodeDictionary<A, B>(withKeyClass:objectClass:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(v12 + 32) = a1;
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t v14 = _ContiguousArrayBuffer._asCocoaArray()();
  specialized _arrayForceCast<A, B>(_:)(inited);
  uint64_t v15 = _ContiguousArrayBuffer._asCocoaArray()();
  uint64_t v16 = String._bridgeToObjectiveCImpl()();
  id v17 = (id)__NSCoderDecodeDictionaryWithKeysOfClassesObjectsOfClassesForKey( v7,  v14,  v15,  v16);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v17)
  {
    uint64_t v18 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v17);

    swift_setDeallocating();
    swift_bridgeObjectRelease();
    uint64_t v19 = MEMORY[0x186E20D4C](MEMORY[0x18961BB08], a5);
    unint64_t v20 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v18, a5, a6, v19);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v20;
}

Swift::OpaquePointer_optional __swiftcall NSCoder.decodeDictionary(withKeysOfClasses:objectsOfClasses:forKey:)( Swift::OpaquePointer withKeysOfClasses, Swift::OpaquePointer objectsOfClasses, Swift::String forKey)
{
  uint64_t v5 = _ContiguousArrayBuffer._asCocoaArray()();
  specialized _arrayForceCast<A, B>(_:)((uint64_t)objectsOfClasses._rawValue);
  uint64_t v6 = _ContiguousArrayBuffer._asCocoaArray()();
  uint64_t v7 = String._bridgeToObjectiveCImpl()();
  id v8 = (id)__NSCoderDecodeDictionaryWithKeysOfClassesObjectsOfClassesForKey( v3,  v5,  v6,  v7);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v8)
  {
    uint64_t v10 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  uint64_t v11 = (void *)v10;
  result.value._rawValue = v11;
  result.is_nil = v9;
  return result;
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v189 = a4;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  Swift::String v183 = (char *)&v166 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  unint64_t v186 = (char *)&v166 - v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v166 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  id v192 = (char *)&v166 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v181 = (char *)&v166 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  uint64_t i = (char *)&v166 - v20;
  uint64_t v187 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](v187);
  Swift::String v180 = (char *)&v166 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v22);
  id v176 = (char *)&v166 - v23;
  uint64_t v197 = a3;
  unint64_t v195 = *(void **)(a3 - 8);
  MEMORY[0x1895F8858](v24);
  id v194 = (char *)&v166 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v26);
  id v179 = (char *)&v166 - v27;
  MEMORY[0x1895F8858](v28);
  Swift::String v178 = (char *)&v166 - v29;
  MEMORY[0x1895F8858](v30);
  uint64_t v175 = (char *)&v166 - v31;
  MEMORY[0x1895F8858](v32);
  int64_t v174 = (char *)&v166 - v33;
  MEMORY[0x1895F8858](v34);
  unint64_t v173 = (char *)&v166 - v35;
  uint64_t v196 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v36);
  uint64_t v193 = (char *)&v166 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v38);
  uint64_t v185 = (char *)&v166 - v39;
  MEMORY[0x1895F8858](v40);
  Swift::String v177 = (char *)&v166 - v41;
  MEMORY[0x1895F8858](v42);
  int64_t v172 = (char *)&v166 - v43;
  MEMORY[0x1895F8858](v44);
  char v191 = (char *)&v166 - v45;
  MEMORY[0x1895F8858](v46);
  __int128 v171 = (char *)&v166 - v47;
  unint64_t v48 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v49 = __CocoaSet.count.getter();
    uint64_t v184 = (uint64_t)v15;
    if (v49)
    {
LABEL_3:
      type metadata accessor for _DictionaryStorage();
      uint64_t v50 = static _DictionaryStorage.allocate(capacity:)();
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v51 = *(void *)(a1 + 16);
    uint64_t v184 = (uint64_t)v15;
    if (v51) {
      goto LABEL_3;
    }
  }

  uint64_t v50 = MEMORY[0x18961AFF0];
LABEL_6:
  uint64_t v168 = v7;
  uint64_t v167 = v8;
  uint64_t v170 = v12;
  uint64_t v169 = v13;
  uint64_t v190 = (void *)v50;
  if (a2 == MEMORY[0x189617FA8])
  {
    if (v48)
    {
      uint64_t v56 = __CocoaDictionary.makeIterator()();
      uint64_t v181 = 0LL;
      uint64_t v57 = 0LL;
      unint64_t v58 = 0LL;
      unint64_t v59 = v56 | 0x8000000000000000LL;
    }

    else
    {
      uint64_t v111 = -1LL << *(_BYTE *)(a1 + 32);
      uint64_t v57 = ~v111;
      uint64_t v112 = *(void *)(a1 + 64);
      uint64_t v181 = (char *)(a1 + 64);
      uint64_t v113 = -v111;
      if (v113 < 64) {
        uint64_t v114 = ~(-1LL << v113);
      }
      else {
        uint64_t v114 = -1LL;
      }
      unint64_t v58 = v114 & v112;
      unint64_t v59 = a1;
    }

    Swift::String v178 = (char *)(v59 & 0x7FFFFFFFFFFFFFFFLL);
    Swift::String v177 = (char *)v57;
    id v179 = (char *)((unint64_t)(v57 + 64) >> 6);
    Swift::String v180 = (char *)(v50 + 64);
    unint64_t result = swift_bridgeObjectRetain();
    __int128 v115 = 0LL;
    Swift::String v183 = (char *)v59;
    uint64_t v184 = MEMORY[0x18961AFB8] + 8LL;
    unint64_t v116 = 0x189616338uLL;
    unint64_t v118 = v191;
    Swift::String v117 = v192;
    uint64_t v185 = 0LL;
    if ((v59 & 0x8000000000000000LL) == 0) {
      goto LABEL_63;
    }
LABEL_59:
    uint64_t v119 = __CocoaDictionary.Iterator.next()();
    if (v119)
    {
      uint64_t v121 = v120;
      uint64_t v198 = v119;
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
      swift_dynamicCast();
      uint64_t v200 = v121;
      unint64_t v122 = v115;
      unint64_t v123 = v199;
      uint64_t v193 = (char *)v58;
      id v194 = v122;
      while (1)
      {
        uint64_t v198 = (uint64_t)v123;
        unint64_t v131 = v116;
        type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
        id v132 = v123;
        uint64_t v133 = MEMORY[0x189617FA8];
        int v134 = swift_dynamicCast();
        uint64_t v135 = v196;
        char v136 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v196 + 56);
        if (!v134) {
          break;
        }
        v136(v117, 0LL, 1LL, v133);
        char v137 = *(void (**)(char *, char *, uint64_t))(v135 + 32);
        v137(v118, v117, v133);
        uint64_t v198 = v121;

        unint64_t v138 = v186;
        uint64_t v139 = v197;
        char v140 = swift_dynamicCast();
        uint64_t v141 = v195;
        uint64_t v142 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v195[7];
        if ((v140 & 1) == 0)
        {
          v142(v138, 1LL, 1LL, v139);
          (*(void (**)(char *, void))(v196 + 8))(v118, MEMORY[0x189617FA8]);
          (*(void (**)(char *, uint64_t))(v167 + 8))(v138, v168);
          goto LABEL_90;
        }

        v142(v138, 0LL, 1LL, v139);
        uint64_t v143 = (void (*)(char *, char *, uint64_t))v141[4];
        uint64_t v144 = v174;
        v143(v174, v138, v139);
        uint64_t v145 = i;
        unint64_t v146 = &i[*(int *)(TupleTypeMetadata2 + 48)];
        v137(i, v118, v133);
        v143(v146, v144, v139);
        uint64_t v147 = v187;
        uint64_t v148 = v176;
        int64_t v149 = &v176[*(int *)(v187 + 48)];
        uint64_t v150 = v145;
        uint64_t v151 = v175;
        v137(v176, v150, v133);
        v143(v149, v146, v197);
        uint64_t v152 = &v148[*(int *)(v147 + 48)];
        uint64_t v153 = v171;
        v137(v171, v148, v133);
        uint64_t v154 = v173;
        v143(v173, v152, v197);
        uint64_t v155 = (uint64_t)v172;
        uint64_t v156 = v153;
        uint64_t v157 = v197;
        v137(v172, v156, v133);
        v143(v151, v154, v157);
        uint64_t v158 = v190;
        unint64_t result = __RawDictionaryStorage.find<A>(_:)(v155, v133, v189);
        unint64_t v159 = result;
        uint64_t v160 = v133;
        if ((v161 & 1) != 0)
        {
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v196 + 40))( v158[6] + *(void *)(v196 + 72) * result,  v155,  v133);
          unint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v141[5])( v158[7] + v141[9] * v159,  v151,  v157);
          unint64_t v58 = (unint64_t)v193;
          __int128 v115 = v194;
          unint64_t v118 = v191;
          Swift::String v117 = v192;
          unint64_t v59 = (unint64_t)v183;
          uint64_t v50 = (uint64_t)v158;
        }

        else
        {
          uint64_t v162 = v196;
          if (v158[2] >= v158[3])
          {
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
            goto LABEL_100;
          }

          uint64_t v50 = (uint64_t)v158;
          *(void *)&v180[(result >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << result;
          v137((char *)(v158[6] + *(void *)(v162 + 72) * result), (char *)v155, v160);
          unint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v143)( v158[7] + v195[9] * v159,  v151,  v157);
          uint64_t v163 = v158[2];
          BOOL v164 = __OFADD__(v163, 1LL);
          uint64_t v165 = v163 + 1;
          if (v164) {
            goto LABEL_97;
          }
          v158[2] = v165;
          unint64_t v58 = (unint64_t)v193;
          __int128 v115 = v194;
          unint64_t v118 = v191;
          Swift::String v117 = v192;
          unint64_t v59 = (unint64_t)v183;
        }

        unint64_t v116 = v131;
        uint64_t v185 = v115;
        if ((v59 & 0x8000000000000000LL) != 0) {
          goto LABEL_59;
        }
LABEL_63:
        if (v58)
        {
          uint64_t v193 = (char *)((v58 - 1) & v58);
          id v194 = v115;
          unint64_t v124 = __clz(__rbit64(v58)) | ((void)v115 << 6);
        }

        else
        {
          uint64_t v125 = (uint64_t)(v115 + 1);
          if (__OFADD__(v115, 1LL)) {
            goto LABEL_99;
          }
          unint64_t v126 = *(void *)&v181[8 * v125];
          uint64_t v127 = (uint64_t)(v115 + 1);
          if (!v126)
          {
            uint64_t v127 = (uint64_t)(v115 + 2);
            unint64_t v126 = *(void *)&v181[8 * v127];
            if (!v126)
            {
              uint64_t v127 = (uint64_t)(v115 + 3);
              unint64_t v126 = *(void *)&v181[8 * v127];
              if (!v126)
              {
                uint64_t v127 = (uint64_t)(v115 + 4);
                unint64_t v126 = *(void *)&v181[8 * v127];
                if (!v126)
                {
                  unint64_t v128 = v115 + 5;
                  unint64_t v126 = *(void *)&v181[8 * (void)v128];
                  if (!v126)
                  {
                    while (1)
                    {
                      uint64_t v127 = (uint64_t)(v128 + 1);
                      if (__OFADD__(v128, 1LL)) {
                        goto LABEL_101;
                      }
                      unint64_t v126 = *(void *)&v181[8 * v127];
                      ++v128;
                      if (v126) {
                        goto LABEL_80;
                      }
                    }
                  }

                  uint64_t v127 = (uint64_t)(v115 + 5);
                }
              }
            }
          }

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v139 = type metadata accessor for Optional();
  uint64_t v138 = *(void *)(v139 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v139);
  uint64_t v155 = (char *)&v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v137 - v10;
  uint64_t v141 = type metadata accessor for Optional();
  uint64_t v140 = *(void *)(v141 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v141);
  uint64_t v156 = (uint64_t)&v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v162 = (char *)&v137 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v153 = (char *)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v154 = (char *)&v137 - v17;
  uint64_t v159 = swift_getTupleTypeMetadata2();
  uint64_t v18 = MEMORY[0x1895F8858](v159);
  uint64_t v152 = (char *)&v137 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  uint64_t v148 = (char *)&v137 - v21;
  uint64_t v22 = *(void *)(a3 - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v20);
  uint64_t v166 = (char *)&v137 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  uint64_t v151 = (char *)&v137 - v26;
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  uint64_t v150 = (char *)&v137 - v28;
  uint64_t v29 = MEMORY[0x1895F8858](v27);
  uint64_t v31 = (char *)&v137 - v30;
  uint64_t v32 = MEMORY[0x1895F8858](v29);
  uint64_t v147 = (char *)&v137 - v33;
  uint64_t v34 = MEMORY[0x1895F8858](v32);
  unint64_t v146 = (char *)&v137 - v35;
  uint64_t v36 = *(void **)(a2 - 8);
  uint64_t v37 = MEMORY[0x1895F8858](v34);
  uint64_t v165 = (char *)&v137 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = MEMORY[0x1895F8858](v37);
  uint64_t v157 = (uint64_t)&v137 - v40;
  uint64_t v41 = MEMORY[0x1895F8858](v39);
  int64_t v149 = (char *)&v137 - v42;
  uint64_t v43 = MEMORY[0x1895F8858](v41);
  uint64_t v145 = (char *)&v137 - v44;
  uint64_t v45 = MEMORY[0x1895F8858](v43);
  BOOL v164 = (char *)&v137 - v46;
  MEMORY[0x1895F8858](v45);
  uint64_t v144 = (char *)&v137 - v47;
  uint64_t v48 = *(void *)(a1 + 16);
  uint64_t v161 = a4;
  if (v48)
  {
    type metadata accessor for _DictionaryStorage();
    uint64_t v169 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }

  else
  {
    uint64_t v169 = (void *)MEMORY[0x18961AFF0];
  }

  uint64_t v49 = *(void *)(a1 + 64);
  uint64_t v158 = a1 + 64;
  uint64_t v50 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v142 = ~v50;
  if (-v50 < 64) {
    uint64_t v51 = ~(-1LL << -(char)v50);
  }
  else {
    uint64_t v51 = -1LL;
  }
  unint64_t v52 = v51 & v49;
  uint64_t v163 = a1;
  uint64_t v168 = v22;
  uint64_t v167 = v36;
  uint64_t v53 = v157;
  if (a2 == MEMORY[0x189617FA8])
  {
    uint64_t v153 = v31;
    uint64_t v152 = (char *)((unint64_t)(63 - v50) >> 6);
    uint64_t v157 = (uint64_t)&v178 + 8;
    uint64_t v156 = (uint64_t)&v173 + 8;
    uint64_t v151 = (char *)(v169 + 8);
    unint64_t result = swift_bridgeObjectRetain();
    uint64_t v98 = 0LL;
    uint64_t v99 = MEMORY[0x189617FA8];
    uint64_t v155 = (char *)(MEMORY[0x18961AFC0] + 8LL);
    for (i = v11; ; uint64_t v11 = i)
    {
      uint64_t v101 = v164;
      if (v52)
      {
        uint64_t v166 = (char *)((v52 - 1) & v52);
        unint64_t v102 = __clz(__rbit64(v52)) | (v98 << 6);
        uint64_t v103 = v98;
      }

      else
      {
        uint64_t v104 = v98 + 1;
        if (__OFADD__(v98, 1LL)) {
          goto LABEL_79;
        }
        unint64_t v105 = *(void *)(v158 + 8 * v104);
        uint64_t v103 = v98 + 1;
        if (!v105)
        {
          uint64_t v103 = v98 + 2;
          unint64_t v105 = *(void *)(v158 + 8 * v103);
          if (!v105)
          {
            uint64_t v103 = v98 + 3;
            unint64_t v105 = *(void *)(v158 + 8 * v103);
            if (!v105)
            {
              uint64_t v103 = v98 + 4;
              unint64_t v105 = *(void *)(v158 + 8 * v103);
              if (!v105)
              {
                unint64_t v106 = (char *)(v98 + 5);
                unint64_t v105 = *(void *)(v158 + 8LL * (void)v106);
                if (!v105)
                {
                  while (1)
                  {
                    uint64_t v103 = (uint64_t)(v106 + 1);
                    if (__OFADD__(v106, 1LL)) {
                      goto LABEL_81;
                    }
                    unint64_t v105 = *(void *)(v158 + 8 * v103);
                    ++v106;
                    if (v105) {
                      goto LABEL_60;
                    }
                  }

uint64_t NSKeyedArchiver.encodeEncodable<A>(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  type metadata accessor for __PlistDictionaryEncoder();
  uint64_t result = static __PlistDictionaryEncoder.encodeToTopLevelContainer<A>(_:)(a1, a4, a5, v13);
  if (!v6)
  {
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    objc_msgSend(v7, sel_encodeObject_forKey_, v12, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }

  return result;
}

id static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)(const char *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSKeyedUnarchiver.Type);
  unint64_t v2 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  *(void *)&__int128 v14 = 0LL;
  id v3 = (id)__NSKeyedUnarchiverUnarchiveObject(v2, a1, (uint64_t)&v14);
  swift_unknownObjectRelease();
  uint64_t v4 = (void *)v14;
  if (v3)
  {
    id v5 = (id)v14;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v6 = v4;
  }

  outlined init with take of Any?((uint64_t)&v14, (uint64_t)v16);
  if (v4)
  {
    id v7 = v4;
    if (objc_msgSend(v7, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Any?);

      return v3;
    }
  }

  outlined init with copy of Any?((uint64_t)v16, (uint64_t)&v14);
  uint64_t v8 = *((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    uint64_t v9 = __swift_project_boxed_opaque_existential_1(&v14, *((uint64_t *)&v15 + 1));
    uint64_t v10 = *(void *)(v8 - 8);
    MEMORY[0x1895F8858](v9);
    uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v10 + 16))(v12);
    id v3 = (id)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
    outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Any?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }

  else
  {
    outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Any?);
    id v3 = 0LL;
  }

  return v3;
}

void static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_1830182E0()
{
  v10[0] = v2;
  LOWORD(v10[1]) = v3;
  BYTE2(v10[1]) = BYTE2(v3);
  BYTE3(v10[1]) = BYTE3(v3);
  BYTE4(v10[1]) = BYTE4(v3);
  BYTE5(v10[1]) = BYTE5(v3);
  uint64_t v4 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, v10, BYTE6(v3));
  v10[0] = 0LL;
  id v5 = (id)__NSKeyedUnarchiverUnarchiveObject(v1, v4, (uint64_t)v10);
  swift_unknownObjectRelease();

  id v6 = v10[0];
  if (v5)
  {
    id v7 = v10[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v10, 0, 32);
    id v8 = v6;
  }

  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
  if (!v6) {
    goto LABEL_7;
  }
  id v9 = v6;
  if (objc_msgSend(v9, sel_code) == (id)4865)
  {

LABEL_7:
    outlined init with take of Any?((uint64_t)v11, v0);

    return;
  }

  swift_willThrow();
  outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Any?);
}

void static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

void sub_183018588()
{
  *(void *)&__int128 v9 = v0;
  WORD4(v9) = v1;
  BYTE10(v9) = BYTE2(v1);
  BYTE11(v9) = BYTE3(v1);
  BYTE12(v9) = BYTE4(v1);
  BYTE13(v9) = BYTE5(v1);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, &v9, BYTE6(v1));
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)&__int128 v9 = 0LL;
  id v4 = __NSKeyedUnarchiverSecureUnarchiveObjectOfClass(ObjCClassFromMetadata, (uint64_t)v2, (uint64_t)&v9);

  id v5 = (void *)v9;
  if (v4)
  {
    id v6 = (id)v9;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    id v7 = v5;
  }

  outlined init with take of Any?((uint64_t)&v9, (uint64_t)v11);
  if (v5)
  {
    id v8 = v5;
    swift_willThrow();
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Any?);
  }

  else
  {
    outlined init with take of Any?((uint64_t)v11, (uint64_t)&v9);
    if (*((void *)&v10 + 1)) {
      swift_dynamicCast();
    }
    else {
      outlined destroy of Any?((uint64_t)&v9, &demangling cache variable for type metadata for Any?);
    }
  }

void static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

void sub_183018868()
{
  v10[0] = v2;
  LOWORD(v10[1]) = v3;
  BYTE2(v10[1]) = BYTE2(v3);
  BYTE3(v10[1]) = BYTE3(v3);
  BYTE4(v10[1]) = BYTE4(v3);
  BYTE5(v10[1]) = BYTE5(v3);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, v10, BYTE6(v3));
  v10[0] = 0LL;
  id v5 = __NSKeyedUnarchiverSecureUnarchiveObjectOfClasses(v1, (uint64_t)v4, (uint64_t)v10);
  swift_unknownObjectRelease();

  id v6 = v10[0];
  if (v5)
  {
    id v7 = v10[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v10, 0, 32);
    id v8 = v6;
  }

  outlined init with take of Any?((uint64_t)v10, v0);
  if (v6)
  {
    id v9 = v6;
    swift_willThrow();
    outlined destroy of Any?(v0, &demangling cache variable for type metadata for Any?);
  }

uint64_t one-time initialization function for __plistClasses()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183729DE0;
  *(void *)(v0 + 32) = type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSArray);
  *(void *)(v0 + 40) = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSData);
  *(void *)(v0 + 48) = type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSDate);
  *(void *)(v0 + 56) = type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSDictionary);
  *(void *)(v0 + 64) = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t result = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(void *)(v0 + 72) = result;
  static NSKeyedUnarchiver.__plistClasses = (_UNKNOWN *)v0;
  return result;
}

uint64_t NSKeyedUnarchiver.decodeDecodable<A>(_:forKey:)@<X0>(ValueMetadata *a1@<X3>, uint64_t a2@<X8>)
{
  if (one-time initialization token for __plistClasses != -1) {
    swift_once();
  }
  if (*((void *)static NSKeyedUnarchiver.__plistClasses + 2) == 1LL)
  {
    uint64_t ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
    uint64_t v6 = String._bridgeToObjectiveCImpl()();
    id v7 = (id)__NSCoderDecodeObjectOfClassForKey(v2, ObjCClassFromMetadata, v6, 0LL);
  }

  else
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
    uint64_t v8 = _ContiguousArrayBuffer._asCocoaArray()();
    uint64_t v9 = String._bridgeToObjectiveCImpl()();
    id v7 = (id)__NSCoderDecodeObjectOfClassesForKey(v2, v8, v9, 0LL);
    swift_unknownObjectRelease();
  }

  swift_unknownObjectRelease();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v13, 0, sizeof(v13));
  }

  outlined init with take of Any?((uint64_t)v13, (uint64_t)&v14);
  if (v15)
  {
    outlined init with take of Any(&v14, v16);
    type metadata accessor for PropertyListDecoder();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFF0];
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<()>._Buffer);
    uint64_t v11 = swift_allocObject();
    *(_DWORD *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    *(void *)(inited + 24) = v11;
    PropertyListDecoder.decode<A>(_:fromTopLevel:)(a1, v16, (uint64_t)a1, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_release();
    return (*((uint64_t (**)(uint64_t, void, uint64_t, ValueMetadata *))a1[-1].Description + 7))( a2,  0LL,  1LL,  a1);
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v14, &demangling cache variable for type metadata for Any?);
    return (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *))a1[-1].Description + 7))( a2,  1LL,  1LL,  a1);
  }

void NSKeyedUnarchiver.decodeTopLevelDecodable<A>(_:forKey:)(ValueMetadata *a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (one-time initialization token for __plistClasses != -1) {
    swift_once();
  }
  if (*((void *)static NSKeyedUnarchiver.__plistClasses + 2) == 1LL)
  {
    uint64_t ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
    uint64_t v7 = String._bridgeToObjectiveCImpl()();
    *(void *)&__int128 v18 = 0LL;
    id v8 = (id)__NSCoderDecodeObjectOfClassForKey( v2,  ObjCClassFromMetadata,  v7,  (uint64_t)&v18);
  }

  else
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
    uint64_t v9 = _ContiguousArrayBuffer._asCocoaArray()();
    uint64_t v10 = String._bridgeToObjectiveCImpl()();
    *(void *)&__int128 v18 = 0LL;
    id v8 = (id)__NSCoderDecodeObjectOfClassesForKey(v2, v9, v10, (uint64_t)&v18);
    swift_unknownObjectRelease();
  }

  swift_unknownObjectRelease();
  uint64_t v11 = (void *)v18;
  if (v8)
  {
    id v12 = (id)v18;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v13 = v11;
  }

  outlined init with take of Any?((uint64_t)&v18, (uint64_t)v20);
  if (v11)
  {
    id v14 = v11;
    if (objc_msgSend(v14, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for Any?);

      return;
    }
  }

  outlined init with copy of Any?((uint64_t)v20, (uint64_t)&v18);
  if (*((void *)&v19 + 1))
  {
    outlined init with take of Any(&v18, &v21);
  }

  else
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
  }

  outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for Any?);

  if (*((void *)&v22 + 1))
  {
    outlined init with take of Any(&v21, v23);
    type metadata accessor for PropertyListDecoder();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFF0];
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<()>._Buffer);
    uint64_t v16 = swift_allocObject();
    *(_DWORD *)(v16 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    *(void *)(inited + 24) = v16;
    PropertyListDecoder.decode<A>(_:fromTopLevel:)(a1, v23, (uint64_t)a1, a2);
    if (v3)
    {
      id v17 = v3;
      objc_msgSend(v2, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
      swift_unknownObjectRelease();
      swift_willThrow();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    }

    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      swift_setDeallocating();
      swift_bridgeObjectRelease();
      swift_release();
      (*((void (**)(uint64_t, void, uint64_t, ValueMetadata *))a1[-1].Description + 7))(a2, 0LL, 1LL, a1);
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
    (*((void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *))a1[-1].Description + 7))(a2, 1LL, 1LL, a1);
  }

void static NSKeyedUnarchiver.unarchivedArrayOfObjects<A>(ofClass:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(v5 + 32) = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  _ContiguousArrayBuffer._asCocoaArray()();
  __asm { BR              X10 }

NSArray *sub_183019200()
{
  id v13 = v2;
  __int16 v14 = v3;
  char v15 = BYTE2(v3);
  char v16 = BYTE3(v3);
  char v17 = BYTE4(v3);
  char v18 = BYTE5(v3);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, &v13, BYTE6(v3));
  id v13 = 0LL;
  uint64_t v5 = __NSKeyedUnarchiverSecureUnarchivedArrayOfObjectsOfClasses(v1, (uint64_t)v4, (uint64_t)&v13);
  swift_unknownObjectRelease();

  id v6 = v13;
  if (!v5)
  {
    id v10 = v13;
    if (!v6)
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }

void static NSKeyedUnarchiver.unarchivedArrayOfObjects(ofClasses:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_18301953C()
{
  id v13 = v1;
  __int16 v14 = v2;
  char v15 = BYTE2(v2);
  char v16 = BYTE3(v2);
  char v17 = BYTE4(v2);
  char v18 = BYTE5(v2);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, &v13, BYTE6(v2));
  id v13 = 0LL;
  id v4 = __NSKeyedUnarchiverSecureUnarchivedArrayOfObjectsOfClasses(v0, (uint64_t)v3, (uint64_t)&v13);
  swift_unknownObjectRelease();

  id v5 = v13;
  if (!v4)
  {
    id v8 = v13;
    uint64_t v7 = 0LL;
    if (!v5) {
      return v7;
    }
    goto LABEL_10;
  }

  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v6 = swift_dynamicCastClass();
  if (v6)
  {
    uint64_t v7 = v6;
  }

  else
  {
    swift_unknownObjectRelease();
    -[NSArray copy](v4, sel_copy);
    uint64_t v9 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v7 = specialized _arrayForceCast<A, B>(_:)(v9);
    swift_bridgeObjectRelease();
  }

  id v10 = v5;

  if (v5)
  {
LABEL_10:
    id v11 = v5;
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  return v7;
}

void static NSKeyedUnarchiver.unarchivedDictionary<A, B>(ofKeyClass:objectClass:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(v7 + 32) = a1;
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(v8 + 32) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  _ContiguousArrayBuffer._asCocoaArray()();
  swift_bridgeObjectRetain();
  _ContiguousArrayBuffer._asCocoaArray()();
  __asm { BR              X10 }

NSDictionary *sub_1830198B8()
{
  id v15 = v3;
  __int16 v16 = v0;
  char v17 = BYTE2(v0);
  char v18 = BYTE3(v0);
  char v19 = BYTE4(v0);
  char v20 = BYTE5(v0);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, &v15, BYTE6(v0));
  id v15 = 0LL;
  id v5 =  __NSKeyedUnarchiverSecureUnarchivedDictionaryOfKeysOfClassesObjectsOfClasses( v1,  v2,  (uint64_t)v4,  (uint64_t)&v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  id v6 = v15;
  if (v5)
  {
    uint64_t v7 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5);
    id v8 = v6;

    if (v6)
    {
LABEL_3:
      id v9 = v6;
      swift_bridgeObjectRelease();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return v5;
    }
  }

  else
  {
    id v10 = v15;
    uint64_t v7 = 0LL;
    if (v6) {
      goto LABEL_3;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v7) {
    return 0LL;
  }
  uint64_t v11 = MEMORY[0x186E20D4C](MEMORY[0x18961BB08]);
  id v5 = (NSDictionary *)specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v7, v13, v14, v11);
  swift_bridgeObjectRelease();
  return v5;
}

void static NSKeyedUnarchiver.unarchivedDictionary(keysOfClasses:objectsOfClasses:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_183019BB0()
{
  id v12 = v2;
  __int16 v13 = v3;
  char v14 = BYTE2(v3);
  char v15 = BYTE3(v3);
  char v16 = BYTE4(v3);
  char v17 = BYTE5(v3);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, &v12, BYTE6(v3));
  id v12 = 0LL;
  id v5 =  __NSKeyedUnarchiverSecureUnarchivedDictionaryOfKeysOfClassesObjectsOfClasses( v0,  v1,  (uint64_t)v4,  (uint64_t)&v12);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  id v6 = v12;
  if (!v5)
  {
    id v11 = v12;
    uint64_t v7 = 0LL;
    if (!v6) {
      return v7;
    }
    goto LABEL_3;
  }

  uint64_t v7 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5);
  id v8 = v6;

  if (v6)
  {
LABEL_3:
    id v9 = v6;
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  return v7;
}

unint64_t __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6, a2, a3);
}

unint64_t __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  v18[0] = a1;
  v18[1] = a4;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  id v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v12 = v11 & ~v10;
  if (((*(void *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    uint64_t v13 = ~v10;
    uint64_t v14 = *(void *)(v7 + 72);
    char v15 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v15(v9, *(void *)(v5 + 48) + v14 * v12, a3);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v13;
    }

    while (((*(void *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0);
  }

  return v12;
}

Swift::Void __swiftcall ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( Swift::Bool bufferIsUnique, Swift::Int minimumCapacity, Swift::Bool growForAppend)
{
  *uint64_t v4 = _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( bufferIsUnique,  minimumCapacity,  growForAppend,  (void *)*v4,  *(void *)(v3 + 16));
}

uint64_t _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, void *a4, uint64_t a5)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v8 = a4[3];
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v9 = a2;
  }

  uint64_t v10 = a4[2];
  if (v9 <= v10) {
    uint64_t v11 = a4[2];
  }
  else {
    uint64_t v11 = v9;
  }
  if (!v11)
  {
    char v15 = (void *)MEMORY[0x18961AFE8];
    goto LABEL_19;
  }

  getContiguousArrayStorageType<A>(for:)(a5, a5);
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  char v15 = (void *)swift_allocObject();
  size_t v16 = _swift_stdlib_malloc_size(v15);
  if (!v13)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  int64_t v17 = v16 - ((v14 + 32) & ~v14);
  if (v17 == 0x8000000000000000LL && v13 == -1) {
    goto LABEL_34;
  }
  uint64_t v19 = v17 / v13;
  swift_retain();
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  v15[2] = v10;
  v15[3] = isClassOrObjCExistentialType & 1 | (unint64_t)(2 * v19);
  swift_release();
LABEL_19:
  uint64_t v21 = *(void *)(a5 - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = (char *)v15 + v22;
  uint64_t v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v23 >= &v24[*(void *)(v21 + 72) * v10])
    {
      swift_arrayInitWithTakeFrontToBack();
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v25 = *(void *)(v21 + 72) * v10;
  uint64_t v26 = &v23[v25];
  unint64_t v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v15;
  }

uint64_t String._deletingLastPathComponent()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0LL;
  }
  unint64_t v3 = String.index(before:)();
  if (String.subscript.getter() != 47 || v4 != 0xE100000000000000LL)
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      goto LABEL_18;
    }
    if (v3 < 0x4000) {
      return 0LL;
    }
    while (1)
    {
      unint64_t v3 = String.index(before:)();
      if (String.subscript.getter() == 47 && v7 == 0xE100000000000000LL) {
        break;
      }
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v9 & 1) != 0) {
        goto LABEL_18;
      }
      uint64_t v10 = 0LL;
      if (v3 < 0x4000) {
        return v10;
      }
    }
  }

  swift_bridgeObjectRelease();
LABEL_18:
  if (v3 >= 0x4000)
  {
    unint64_t v11 = String.index(before:)() ^ v3;
    unint64_t v12 = String.subscript.getter();
    if (v11 >> 14)
    {
      uint64_t v10 = MEMORY[0x186E1B610](v12, v13, v14, v15);
    }

    else
    {
      unint64_t v16 = v12 >> 14;
      if (v12 >> 14 == v13 >> 14)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        return 0LL;
      }

      unint64_t v17 = Substring.index(before:)();
      if (Substring.subscript.getter() == 47 && v18 == 0xE100000000000000LL)
      {
LABEL_27:
        swift_bridgeObjectRelease();
      }

      else
      {
        while (1)
        {
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v19 & 1) != 0) {
            break;
          }
          if (v16 == v17 >> 14) {
            goto LABEL_22;
          }
          unint64_t v17 = Substring.index(before:)();
          if (Substring.subscript.getter() == 47 && v20 == 0xE100000000000000LL) {
            goto LABEL_27;
          }
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v22 = String.subscript.getter();
      uint64_t v10 = MEMORY[0x186E1B610](v22);
    }

    swift_bridgeObjectRelease();
    return v10;
  }

  return 47LL;
}

uint64_t String._appendingPathComponent(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    if ((a4 & 0x2000000000000000LL) != 0) {
      uint64_t v9 = HIBYTE(a4) & 0xF;
    }
    else {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain();
    if (!v9) {
      goto LABEL_24;
    }
    if (String.count.getter() == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = specialized Collection.first.getter(a3, a4);
      uint64_t v12 = v11;
      uint64_t result = swift_bridgeObjectRelease();
      if (!v12)
      {
        __break(1u);
        return result;
      }

      if (v10 == 47 && v12 == 0xE100000000000000LL) {
        goto LABEL_12;
      }
    }

    else
    {
      if (String.count.getter() != 2) {
        goto LABEL_23;
      }
      if (String.subscript.getter() == 92 && v14 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0) {
          goto LABEL_23;
        }
      }

      String.index(after:)();
      if (String.subscript.getter() == 92 && v16 == 0xE100000000000000LL)
      {
LABEL_12:
        swift_bridgeObjectRelease();
LABEL_24:
        swift_bridgeObjectRetain();
        v19._uint64_t countAndFlagsBits = a1;
        v19._unint64_t object = (void *)a2;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }

    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0) {
      goto LABEL_24;
    }
LABEL_23:
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = 47LL;
    v18._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }

  swift_bridgeObjectRetain();
LABEL_25:
  swift_bridgeObjectRetain_n();
  Swift::String_optional v20 = String.Iterator.next()();
  if (v20.value._object)
  {
    uint64_t countAndFlagsBits = v20.value._countAndFlagsBits;
    unint64_t object = v20.value._object;
    do
    {
      if (countAndFlagsBits == 47 && object == (void *)0xE100000000000000LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v23 = 47LL;
        unint64_t v24 = 0xE100000000000000LL;
      }

      else
      {
        uint64_t v23 = countAndFlagsBits;
        unint64_t v24 = (unint64_t)object;
      }

      String.append(_:)(*(Swift::String *)&v23);
      swift_bridgeObjectRelease();
      Swift::String_optional v25 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v25.value._countAndFlagsBits;
      unint64_t object = v25.value._object;
    }

    while (v25.value._object);
  }

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0LL;
}

unint64_t String._lastPathComponent.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    goto LABEL_17;
  }
  unint64_t v4 = String.index(before:)();
  if (String.subscript.getter() != 47 || v5 != 0xE100000000000000LL)
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0) {
      goto LABEL_19;
    }
    while (v4 >= 0x4000)
    {
      unint64_t v4 = String.index(before:)();
      if (String.subscript.getter() == 47 && v8 == 0xE100000000000000LL) {
        goto LABEL_18;
      }
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0) {
        goto LABEL_19;
      }
    }

uint64_t closure #1 in String._lastPathComponent.getter(void *a1)
{
  if (*a1 == 47LL && a1[1] == 0xE100000000000000LL) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t one-time initialization function for invalidExtensionScalars()
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  specialized Set._Variant.insert(_:)(&v1, 0x20uLL);
  specialized Set._Variant.insert(_:)(&v1, 0x2FuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x61CuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x200EuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x200FuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x202AuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x202BuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x202CuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x202DuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x202EuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x2066uLL);
  specialized Set._Variant.insert(_:)(&v1, 0x2067uLL);
  specialized Set._Variant.insert(_:)(&v1, 0x2068uLL);
  uint64_t result = specialized Set._Variant.insert(_:)(&v1, 0x2069uLL);
  static String.invalidExtensionScalars = v2;
  return result;
}

uint64_t String.pathExtension.getter(uint64_t a1, unint64_t a2)
{
  unint64_t Path = String._lastPathComponent.getter(a1, a2);
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if ((specialized BidirectionalCollection.last.getter(Path, v6) & 0x1FF) == 0x2E
    || (unint64_t v7 = specialized Sequence<>.starts<A>(with:)( (unint64_t)&outlined read-only object #0 of String.pathExtension.getter,  Path,  v6),  (v7 & 1) != 0)
    || (char v29 = 46,
        MEMORY[0x1895F8858](v7),
        v28[2] = &v29,
        unint64_t v10 = specialized BidirectionalCollection.lastIndex(where:)( (unint64_t)closure #1 in BidirectionalCollection<>.lastIndex(of:)specialized partial apply,  (uint64_t)v28,  Path,  v6),  (v11 & 1) != 0)
    || (unint64_t v12 = v10, v10 < 0x4000))
  {
LABEL_3:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  swift_bridgeObjectRetain();
  unint64_t v13 = String._lastPathComponent.getter(a1, a2);
  unint64_t v15 = v14;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v16 = (Path >> 59) & 1;
  if ((v6 & 0x1000000000000000LL) == 0) {
    LOBYTE(v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
  }
  if ((v12 & 0xC) == 4LL << v16)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, Path, v6);
    unint64_t v12 = result;
    if ((v6 & 0x1000000000000000LL) == 0) {
      goto LABEL_11;
    }
  }

  else if ((v6 & 0x1000000000000000LL) == 0)
  {
LABEL_11:
    unint64_t v17 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
    goto LABEL_12;
  }

  unint64_t v27 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000LL) == 0) {
    unint64_t v27 = Path & 0xFFFFFFFFFFFFLL;
  }
  if (v27 > v12 >> 16)
  {
    unint64_t v17 = String.UTF8View._foreignIndex(after:)();
LABEL_12:
    unint64_t v18 = specialized Collection.suffix(from:)(v17, v13, v15);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    unint64_t v8 = MEMORY[0x186E1B610](v18, v20, v22, v24);
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    LOBYTE(v20) = specialized String.validatePathExtension(_:)(v8, v26);
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0) {
      return v8;
    }
    goto LABEL_3;
  }

  __break(1u);
  return result;
}

uint64_t String._removingDotSegments.getter(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    uint64_t v5 = (a1 >> 59) & 1;
    if ((a2 & 0x1000000000000000LL) == 0) {
      LOBYTE(v5) = 1;
    }
    uint64_t v6 = 4LL << v5;
    swift_bridgeObjectRetain();
    unint64_t v7 = 15LL;
    unint64_t v8 = 15LL;
    if (v6 == 12) {
      unint64_t v8 = _StringGuts._slowEnsureMatchingEncoding(_:)(0xFuLL, a1, a2);
    }
    if (v8 >> 16 >= v2)
    {
      __break(1u);
      goto LABEL_25;
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
      String.UTF8View._foreignSubscript(position:)();
      if (v6 == 12) {
        goto LABEL_15;
      }
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      if (v6 == 12) {
        goto LABEL_15;
      }
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      if (v6 == 12)
      {
LABEL_15:
        unint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(0xFuLL, a1, a2);
        if ((a2 & 0x1000000000000000LL) == 0) {
          goto LABEL_20;
        }
LABEL_16:
        if (v2 > v7 >> 16)
        {
          String.UTF8View._foreignIndex(after:)();
          goto LABEL_20;
        }

unint64_t static String.homeDirectoryPath(forUser:)(uint64_t a1, uint64_t a2)
{
  if (issetugid() || !getenv("CFFIXED_USER_HOME"))
  {
    if (a2)
    {
      uint64_t v3 = String.utf8CString.getter();
      unint64_t v4 = getpwnam((const char *)(v3 + 32));
      swift_release();
      if (!v4) {
        goto LABEL_16;
      }
    }

    else
    {
      uid_t v10 = specialized static Platform.getUGIDs(allowEffectiveRootUID:)(0);
      unint64_t v4 = getpwuid(v10);
      if (!v4) {
        goto LABEL_16;
      }
    }

    if (v4->pw_dir)
    {
      uint64_t v5 = String.init(cString:)();
      unint64_t v7 = v11;
      swift_bridgeObjectRetain();
      uint64_t v12 = specialized Collection.first.getter(v5, v7);
      if (!v13) {
        goto LABEL_45;
      }
      if (v12 == 126 && v13 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0) {
          goto LABEL_45;
        }
      }

      unint64_t v19 = specialized Collection<>.firstIndex(of:)(47LL, 0xE100000000000000LL, v5, v7);
      if ((v20 & 1) != 0)
      {
        uint64_t v25 = HIBYTE(v7) & 0xF;
        if ((v7 & 0x2000000000000000LL) == 0) {
          uint64_t v25 = v5;
        }
        uint64_t v26 = v25 << 16;
        if ((v7 & 0x1000000000000000LL) == 0 || (v5 & 0x800000000000000LL) != 0) {
          unint64_t v21 = v26 | 7;
        }
        else {
          unint64_t v21 = v26 | 0xB;
        }
      }

      else
      {
        unint64_t v21 = v19;
      }

      unint64_t v29 = String.index(after:)();
      if (v21 >> 14 == v29 >> 14) {
        goto LABEL_57;
      }
      if (v21 >> 14 >= v29 >> 14) {
        goto LABEL_60;
      }
      __break(1u);
      goto LABEL_42;
    }

uint64_t static String.temporaryDirectoryPath.getter()
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t isStackAllocationSafe = confstr(65537, 0LL, 0LL);
  if (isStackAllocationSafe >= 1)
  {
    size_t v1 = isStackAllocationSafe;
    if ((unint64_t)isStackAllocationSafe <= 0x400
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x1895F8858](isStackAllocationSafe);
      confstr(65537, (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL), v1);
    }

    else
    {
      unint64_t v2 = (char *)swift_slowAlloc();
      confstr(65537, v2, v1);
      MEMORY[0x186E20E60](v2, -1LL, -1LL);
    }
  }

  uint64_t v3 = 0x2F706D742FLL;
  if (!issetugid())
  {
    if (getenv("TMPDIR"))
    {
      uint64_t v3 = String.init(cString:)();
      unint64_t v6 = v5;
      if ((specialized BidirectionalCollection.last.getter(v3, v5) & 0x1FF) != 0x2F)
      {
        uint64_t v9 = v3;
        unint64_t v10 = v6;
        swift_bridgeObjectRetain();
        v7._uint64_t countAndFlagsBits = 47LL;
        v7._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v7);
        swift_bridgeObjectRelease();
        return v9;
      }
    }
  }

  return v3;
}

unint64_t closure #1 in String._transmutingCompressingSlashes()( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000LL) != 0) {
    unint64_t v4 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if (!v4) {
    return 0LL;
  }
  BOOL v8 = 0;
  uint64_t v9 = 0LL;
  uint64_t v10 = 4 * v4;
  uint64_t v11 = 4LL << v5;
  uint64_t v29 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v26 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v12 = 15LL;
LABEL_9:
  unint64_t v13 = v12 & 0xC;
  unint64_t result = v12;
  if (v13 == v11)
  {
    BOOL v17 = v8;
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
    BOOL v8 = v17;
  }

  unint64_t v15 = result >> 16;
  if (result >> 16 >= v4)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if ((a4 & 0x1000000000000000LL) != 0)
  {
    BOOL v18 = v8;
    unint64_t result = String.UTF8View._foreignSubscript(position:)();
    BOOL v8 = v18;
    char v16 = result;
    if (v13 == v11) {
      goto LABEL_23;
    }
LABEL_19:
    if ((a4 & 0x1000000000000000LL) == 0) {
      goto LABEL_20;
    }
LABEL_24:
    if (v4 <= v12 >> 16) {
      goto LABEL_52;
    }
    BOOL v20 = v8;
    unint64_t result = String.UTF8View._foreignIndex(after:)();
    unint64_t v12 = result;
    if (!v20) {
      goto LABEL_26;
    }
    while (1)
    {
      while (1)
      {
LABEL_29:
        if (v16 != 47)
        {
          *(_BYTE *)(a1 + v9) = v16;
          BOOL v21 = __OFADD__(v9++, 1LL);
          if (v21) {
            goto LABEL_54;
          }
          BOOL v8 = 0;
LABEL_8:
          if (v10 == v12 >> 14) {
            return v9;
          }
          goto LABEL_9;
        }

        if (v10 == v12 >> 14) {
          return v9;
        }
        unint64_t v22 = v12 & 0xC;
        unint64_t result = v12;
        if (v22 == v11) {
          unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
        }
        unint64_t v23 = result >> 16;
        if (result >> 16 >= v4) {
          goto LABEL_51;
        }
        if ((a4 & 0x1000000000000000LL) == 0) {
          break;
        }
        unint64_t result = String.UTF8View._foreignSubscript(position:)();
        char v16 = result;
        if (v22 == v11) {
          goto LABEL_45;
        }
LABEL_41:
        if ((a4 & 0x1000000000000000LL) != 0) {
          goto LABEL_42;
        }
LABEL_28:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      }

      if ((a4 & 0x2000000000000000LL) != 0)
      {
        unint64_t v27 = a3;
        uint64_t v28 = v29;
        char v16 = *((_BYTE *)&v27 + v23);
        if (v22 == v11) {
          goto LABEL_45;
        }
        goto LABEL_41;
      }

      unint64_t result = v26;
      if ((a3 & 0x1000000000000000LL) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      char v16 = *(_BYTE *)(result + v23);
      if (v22 != v11) {
        goto LABEL_41;
      }
LABEL_45:
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
      unint64_t v12 = result;
      if ((a4 & 0x1000000000000000LL) == 0) {
        goto LABEL_28;
      }
LABEL_42:
      if (v4 <= v12 >> 16) {
        goto LABEL_52;
      }
      unint64_t result = String.UTF8View._foreignIndex(after:)();
      unint64_t v12 = result;
    }
  }

  if ((a4 & 0x2000000000000000LL) != 0)
  {
    unint64_t v27 = a3;
    uint64_t v28 = v29;
    char v16 = *((_BYTE *)&v27 + v15);
    if (v13 == v11) {
      goto LABEL_23;
    }
    goto LABEL_19;
  }

  unint64_t result = v26;
  if ((a3 & 0x1000000000000000LL) == 0)
  {
    BOOL v24 = v8;
    unint64_t result = _StringObject.sharedUTF8.getter();
    BOOL v8 = v24;
  }

  char v16 = *(_BYTE *)(result + v15);
  if (v13 != v11) {
    goto LABEL_19;
  }
LABEL_23:
  BOOL v19 = v8;
  unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
  BOOL v8 = v19;
  unint64_t v12 = result;
  if ((a4 & 0x1000000000000000LL) != 0) {
    goto LABEL_24;
  }
LABEL_20:
  unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
  if (v8) {
    goto LABEL_29;
  }
LABEL_26:
  *(_BYTE *)(a1 + v9) = v16;
  BOOL v21 = __OFADD__(v9++, 1LL);
  if (!v21)
  {
    BOOL v8 = v16 == 47;
    goto LABEL_8;
  }

uint64_t String._droppingTrailingSlashes.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    unint64_t v4 = String.index(before:)();
    if (String.subscript.getter() == 47 && v5 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
      {
LABEL_21:
        swift_bridgeObjectRetain();
        String.index(after:)();
        uint64_t v12 = String.subscript.getter();
        uint64_t v14 = v13;
        uint64_t v16 = v15;
        uint64_t v18 = v17;
        swift_bridgeObjectRelease();
        uint64_t v2 = MEMORY[0x186E1B610](v12, v14, v16, v18);
        swift_bridgeObjectRelease();
        return v2;
      }
    }

    if (v4 >= 0x4000)
    {
      do
      {
        unint64_t v8 = String.index(before:)();
        if (String.subscript.getter() == 47 && v9 == 0xE100000000000000LL)
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v11 & 1) == 0) {
            goto LABEL_21;
          }
        }
      }

      while (v8 >= 0x4000);
      return 47LL;
    }

    else
    {
      return 47LL;
    }
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  return v2;
}

uint64_t String._standardizingPath.getter(Swift::Int a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = a1;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    if (String.UTF8View._foreignCount()() > 1)
    {
      a1 = String.UTF8View._foreignCount()();
LABEL_5:
      MEMORY[0x1895F8858](a1);
      swift_bridgeObjectRetain();
      uint64_t v3 = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
      unint64_t v6 = v5;
      swift_bridgeObjectRelease();
      unint64_t v2 = v6;
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v4 = HIBYTE(a2) & 0xE;
    if ((a2 & 0x2000000000000000LL) == 0) {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFELL;
    }
    if (v4) {
      goto LABEL_5;
    }
  }

  swift_bridgeObjectRetain();
LABEL_9:
  uint64_t v7 = String._droppingTrailingSlashes.getter(v3, v2);
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  char v10 = specialized Sequence<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v11 = specialized Collection<>.firstIndex(of:)(47LL, 0xE100000000000000LL, v7, v9);
    char v13 = v12;
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
    {
      uint64_t v14 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000LL) == 0) {
        uint64_t v14 = v7;
      }
      uint64_t v15 = v14 << 16;
      if ((v9 & 0x1000000000000000LL) == 0 || (v7 & 0x800000000000000LL) != 0) {
        unint64_t v11 = v15 | 7;
      }
      else {
        unint64_t v11 = v15 | 0xB;
      }
    }
  }

  else
  {
    unint64_t v11 = 15LL;
  }

  swift_bridgeObjectRetain();
  unint64_t v16 = specialized Collection.suffix(from:)(v11, v7, v9);
  unint64_t v18 = v17;
  unint64_t v20 = v19;
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  LOBYTE(v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = specialized StringProtocol._hasDotDotComponent()(v16, v18, v20, v22);
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v23 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v23 = v7 & 0xFFFFFFFFFFFFLL;
  }
  if (v23)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = specialized String.withFileSystemRepresentation<A>(_:)(v7, v9, v7, v9);
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    if (v26)
    {
      swift_bridgeObjectRelease();
      uint64_t v7 = v24;
      unint64_t v9 = v26;
    }
  }

  else
  {
LABEL_24:
    swift_bridgeObjectRelease();
  }

  uint64_t v27 = String._removingDotSegments.getter(v7, v9);
  unint64_t v29 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = 47LL;
  v30._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v30);
  char v31 = specialized Sequence<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v31 & 1) != 0) {
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v32._uint64_t countAndFlagsBits = 47LL;
  v32._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v32);
  char v33 = specialized Sequence<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v33 & 1) != 0) {
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v34._uint64_t countAndFlagsBits = 47LL;
  v34._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v34);
  char v35 = specialized Sequence<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v35 & 1) != 0)
  {
LABEL_28:
    unint64_t v36 = String.count.getter();
    swift_bridgeObjectRelease();
    unint64_t v37 = specialized Collection.dropFirst(_:)(v36, v27, v29);
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();
    uint64_t v44 = MEMORY[0x186E1B610](v37, v39, v41, v43);
    uint64_t v46 = v45;
    swift_bridgeObjectRelease();
    uint64_t v47 = 0LL;
    while (v44 != *(void *)((char *)&outlined read-only object #0 of String._standardizingPath.getter + v47 + 32)
         || v46 != *(void *)((char *)&outlined read-only object #0 of String._standardizingPath.getter + v47 + 40))
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      swift_bridgeObjectRetain_n();
      v49._uint64_t countAndFlagsBits = 47LL;
      v49._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v49);
      char v50 = specialized Sequence<>.starts<A>(with:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v50 & 1) != 0) {
        break;
      }
      v47 += 16LL;
      if (v47 == 192)
      {
        id v51 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
        unsigned int v52 = objc_msgSend(v51, sel_fileExistsAtPath_, String._bridgeToObjectiveCImpl()());

        swift_unknownObjectRelease();
        if (v52) {
          uint64_t v27 = v44;
        }
        break;
      }
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    swift_arrayDestroy();
  }

  swift_bridgeObjectRelease();
  return v27;
}

uint64_t specialized StringProtocol._hasDotDotComponent()( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((uint64_t)specialized Collection.count.getter(a1, a2, a3, a4) >= 2 && a2 >> 14 != a1 >> 14)
  {
    uint64_t v9 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000LL) == 0) {
      LOBYTE(v9) = 1;
    }
    uint64_t v10 = 4LL << v9;
    uint64_t v11 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v13 = v11;
    swift_bridgeObjectRetain();
    unint64_t v12 = a1;
    Substring.UTF8View.subscript.getter();
    if ((a1 & 0xC) == v10)
    {
      unint64_t v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
      if ((a4 & 0x1000000000000000LL) == 0) {
        goto LABEL_14;
      }
    }

    else if ((a4 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_14;
    }

    if (v13 <= v12 >> 16)
    {
      __break(1u);
      JUMPOUT(0x18301CDA4LL);
    }

    String.UTF8View._foreignIndex(after:)();
LABEL_14:
    __asm { BR              X9 }
  }

  return 0LL;
}

uint64_t static String._resolvingSymlinksInPathUsingFullPathAttribute(_:)(const char *a1)
{
  uint64_t v6[3] = *MEMORY[0x1895F89C0];
  v6[1] = 0LL;
  unint64_t v6[2] = 0LL;
  v6[0] = 0x800000000000005LL;
  bzero(v4, 0x40CuLL);
  int v2 = getattrlist(a1, v6, v4, 0x40CuLL, 0);
  uint64_t result = 0LL;
  if (!v2)
  {
    if (v5) {
      return String.init(cString:)();
    }
  }

  return result;
}

uint64_t closure #1 in String._resolvingSymlinksInPath()@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, size_t *a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!result)
  {
    *a4 = 0LL;
    a4[1] = 0LL;
    return result;
  }

  unint64_t v8 = (char *)result;
  if ((specialized Collection.first.getter(a2, a3) & 0x1FF) == 0x2F
    || (specialized Collection.first.getter(a2, a3) & 0x1FF) == 0x7E)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = static String._resolvingSymlinksInPathUsingFullPathAttribute(_:)(v8);
    if (v10)
    {
      size_t v11 = v9;
      size_t v12 = v10;
      uint64_t result = swift_bridgeObjectRelease();
      *a4 = v11;
      a4[1] = v12;
      return result;
    }
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    uint64_t v14 = (char *)&v16;
    MEMORY[0x1895F8858](isStackAllocationSafe);
    closure #1 in closure #1 in String._resolvingSymlinksInPath()(&v15, v8, 0x402uLL, (size_t *)&v16);
    if (!v4)
    {
      uint64_t result = swift_bridgeObjectRelease();
      *(_OWORD *)a4 = v16;
      return result;
    }

    swift_willThrow();

    __break(1u);
  }

  else
  {
    uint64_t v14 = (char *)swift_slowAlloc();
    closure #1 in closure #1 in String._resolvingSymlinksInPath()(v14, v8, 0x402uLL, a4);
    if (!v4)
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x186E20E60](v14, -1LL, -1LL);
    }
  }

  uint64_t result = MEMORY[0x186E20E60](v14, -1LL, -1LL);
  __break(1u);
  return result;
}

size_t closure #1 in closure #1 in String._resolvingSymlinksInPath()@<X0>( char *__dst@<X0>, char *__source@<X2>, size_t a3@<X1>, size_t *a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!__dst) {
LABEL_14:
  }
    __break(1u);
  if ((a3 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (a3) {
    bzero(__dst, a3);
  }
  size_t v9 = strlcpy(__dst, __source, 0x402uLL);
  if (__OFADD__(v9, 1LL)) {
    goto LABEL_13;
  }
  size_t v15 = v9 + 1;
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    size_t v11 = (char *)&v14;
    MEMORY[0x1895F8858](isStackAllocationSafe);
    size_t result = closure #1 in closure #1 in closure #1 in String._resolvingSymlinksInPath()( &v13,  __dst,  0x402uLL,  a3,  &v15,  v16);
    if (!v4)
    {
      *(_OWORD *)a4 = *(_OWORD *)v16;
      return result;
    }

    swift_willThrow();

    __break(1u);
    goto LABEL_16;
  }

  size_t v11 = (char *)swift_slowAlloc();
  closure #1 in closure #1 in closure #1 in String._resolvingSymlinksInPath()(v11, __dst, 0x402uLL, a3, &v15, a4);
  a4 = (size_t *)v4;
  if (v4)
  {
LABEL_16:

    size_t result = MEMORY[0x186E20E60](v11, -1LL, -1LL);
    __break(1u);
    return result;
  }

  return MEMORY[0x186E20E60](v11, -1LL, -1LL);
}

size_t closure #1 in closure #1 in closure #1 in String._resolvingSymlinksInPath()@<X0>( char *a1@<X0>, char *a2@<X2>, size_t a3@<X1>, uint64_t a4@<X3>, void *a5@<X4>, size_t *a6@<X8>)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if ((a3 & 0x8000000000000000LL) != 0) {
      goto LABEL_64;
    }
    if (a3) {
      bzero(a1, a3);
    }
  }

  unint64_t v37 = a6;
  if (!a2) {
LABEL_66:
  }
    __break(1u);
  uint64_t v10 = 0LL;
  size_t v11 = a2;
  size_t v12 = a2;
  uint64_t v38 = a5;
  while (1)
  {
    while (1)
    {
      int v13 = *v11;
      if (v13 == 47)
      {
        size_t v12 = v11;
        do
        {
          int v14 = *++v12;
          int v13 = v14;
        }

        while (v14 == 47);
      }

      if (v13)
      {
        do
        {
          int v16 = *++v12;
          int v15 = v16;
        }

        while (v16 != 47 && v15 != 0);
      }

      else
      {
        int v15 = 0;
      }

      *size_t v12 = 0;
      memset(&v41, 0, 28);
      memset(&v41.st_atimespec, 0, 112);
      size_t result = lstat(a2, &v41);
      if ((result & 0x80000000) != 0)
      {
LABEL_53:
        *unint64_t v37 = 0LL;
        v37[1] = 0LL;
        return result;
      }

      unint64_t v19 = a2;
      int st_mode = v41.st_mode;
      int v21 = S_IFMT.getter() & st_mode;
      size_t result = S_IFLNK.getter();
      *size_t v12 = v15;
      a2 = v19;
      if (!v15) {
        goto LABEL_54;
      }
LABEL_34:
      size_t v11 = v12;
    }

    if (v10 >= 33) {
      goto LABEL_53;
    }
    uint64_t v40 = v11;
    if (!a1) {
      goto LABEL_65;
    }
    uint64_t v22 = v10;
    a2 = v19;
    size_t result = readlink(v19, a1, 0x401uLL);
    if ((result & 0x8000000000000000LL) != 0) {
      goto LABEL_53;
    }
    size_t v23 = result;
    uint64_t v24 = &a1[result];
    a1[result] = 0;
    *size_t v12 = v15;
    if (!result) {
      break;
    }
    if (*a1 == 47)
    {
      uint64_t v25 = 0LL;
    }

    else
    {
      uint64_t v25 = v40 - v19 + 1;
      if (__OFADD__(v40 - v19, 1LL)) {
        goto LABEL_63;
      }
    }

    int64_t v26 = v12 - v19;
    int64_t v27 = *a5;
    int64_t v28 = *a5 - (v12 - v19);
    if (__OFSUB__(*a5, v12 - v19))
    {
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }

    uint64_t v29 = v25 + result;
    if (__OFADD__(v25, result)) {
      goto LABEL_56;
    }
    if (__OFADD__(v29, v28)) {
      goto LABEL_57;
    }
    if (v29 + v28 >= 1027) {
      goto LABEL_53;
    }
    BOOL v30 = __OFADD__(v26, v28);
    uint64_t v31 = v26 + v28;
    if (v30) {
      goto LABEL_58;
    }
    if (v27 < v26) {
      goto LABEL_59;
    }
    if (a4 < v29) {
      goto LABEL_59;
    }
    uint64_t v32 = v31 - v26;
    if (v31 < v26) {
      goto LABEL_59;
    }
    if (a4 - v29 < v32) {
      goto LABEL_60;
    }
    if (v29 != v26 || v29 >= v31)
    {
      char v33 = &a1[result];
      memmove(&v19[v29], &v19[v26], v31 - v26);
      uint64_t v24 = v33;
    }

    BOOL v30 = __OFADD__(v29, v32);
    uint64_t v34 = v29 + v32;
    if (v30) {
      goto LABEL_61;
    }
    if (v29 < v25) {
      goto LABEL_62;
    }
    char v35 = &v19[v25];
    if (&v19[v25] != a1 || v35 >= v24) {
      memmove(v35, a1, v23);
    }
    uint64_t v10 = v22 + 1;
    a5 = v38;
    *uint64_t v38 = v34;
    a2 = v19;
    if (*a1 == 47) {
      size_t v12 = v19;
    }
    else {
      size_t v12 = v40;
    }
    size_t v11 = v12;
  }

  uint64_t v10 = v22;
  if (v15) {
    goto LABEL_34;
  }
LABEL_54:
  size_t result = String.init(cString:)();
  *unint64_t v37 = result;
  v37[1] = v36;
  return result;
}

unint64_t specialized Collection.count.getter( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    size_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    size_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }

  __break(1u);
  return result;
}

unint64_t specialized Collection.dropFirst(_:)( unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v4 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v4 = 11LL;
    }
    unint64_t v5 = v4 | (v3 << 16);
    size_t result = String.index(_:offsetBy:limitedBy:)();
    if ((v6 & 1) != 0) {
      size_t result = v5;
    }
    if (4 * v3 >= result >> 14) {
      return String.subscript.getter();
    }
  }

  __break(1u);
  return result;
}

unint64_t partial apply for closure #1 in String._transmutingCompressingSlashes()( uint64_t a1, uint64_t a2)
{
  return closure #1 in String._transmutingCompressingSlashes()(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t specialized String.validatePathExtension(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t v4 = specialized BidirectionalCollection.last.getter(a1, a2);
  if ((v4 & 0x1FF) == 0x2E) {
    return 0LL;
  }
  LOBYTE(v64) = 46;
  MEMORY[0x1895F8858](v4);
  _OWORD v60[2] = &v64;
  swift_bridgeObjectRetain();
  specialized BidirectionalCollection.lastIndex(where:)( (unint64_t)partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:),  (uint64_t)v60,  a1,  a2);
  char v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    if ((a2 & 0x2000000000000000LL) != 0) {
      uint64_t v33 = HIBYTE(a2) & 0xF;
    }
    else {
      uint64_t v33 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (!v33) {
      return 1LL;
    }
    uint64_t v62 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v63 = a2 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0LL; i < v33; i += v38)
    {
      if ((a2 & 0x1000000000000000LL) != 0)
      {
        Swift::UInt32 v36 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        uint64_t v38 = v37;
      }

      else
      {
        if ((a2 & 0x2000000000000000LL) != 0)
        {
          unint64_t v64 = a1;
          uint64_t v65 = v63;
          Swift::UInt32 v36 = *((unsigned __int8 *)&v64 + i);
          if (*((char *)&v64 + i) < 0) {
            __asm { BR              X9 }
          }
        }

        else
        {
          uint64_t v35 = v62;
          if ((a1 & 0x1000000000000000LL) == 0) {
            uint64_t v35 = _StringObject.sharedUTF8.getter();
          }
          Swift::UInt32 v36 = *(unsigned __int8 *)(v35 + i);
          if (*(char *)(v35 + i) < 0) {
            __asm { BR              X9 }
          }
        }

        uint64_t v38 = 1LL;
      }

      if (one-time initialization token for invalidExtensionScalars != -1) {
        swift_once();
      }
      uint64_t v39 = static String.invalidExtensionScalars;
      if (*(void *)(static String.invalidExtensionScalars + 16))
      {
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v36);
        Swift::Int v40 = Hasher._finalize()();
        uint64_t v41 = -1LL << *(_BYTE *)(v39 + 32);
        unint64_t v42 = v40 & ~v41;
        uint64_t v43 = v39 + 56;
        if (((*(void *)(v39 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v42) & 1) != 0)
        {
          uint64_t v44 = *(void *)(v39 + 48);
          if (*(_DWORD *)(v44 + 4 * v42) == v36) {
            goto LABEL_48;
          }
          uint64_t v45 = ~v41;
          unint64_t v46 = (v42 + 1) & v45;
          if (((*(void *)(v43 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v46) & 1) != 0)
          {
            if (*(_DWORD *)(v44 + 4 * v46) == v36)
            {
LABEL_48:
              uint64_t v5 = 0LL;
              goto LABEL_51;
            }

            while (1)
            {
              unint64_t v46 = (v46 + 1) & v45;
              if (((*(void *)(v43 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v46) & 1) == 0) {
                break;
              }
              if (*(_DWORD *)(v44 + 4 * v46) == v36) {
                goto LABEL_48;
              }
            }
          }
        }
      }
    }

    uint64_t v5 = 1LL;
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = String.subscript.getter();
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    unint64_t v64 = v8;
    uint64_t v65 = v10;
    uint64_t v66 = v12;
    uint64_t v67 = v14;
    lazy protocol witness table accessor for type Substring and conformance Substring();
    uint64_t v15 = String.init<A>(_:)();
    unint64_t v17 = v16;
    unint64_t v18 = String.index(after:)();
    swift_bridgeObjectRetain();
    unint64_t v19 = specialized Collection.suffix(from:)(v18, a1, a2);
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    unint64_t v64 = v19;
    uint64_t v65 = v21;
    uint64_t v66 = v23;
    uint64_t v67 = v25;
    uint64_t v63 = String.init<A>(_:)();
    unint64_t v27 = v26;
    if ((v17 & 0x2000000000000000LL) != 0) {
      uint64_t v28 = HIBYTE(v17) & 0xF;
    }
    else {
      uint64_t v28 = v15 & 0xFFFFFFFFFFFFLL;
    }
    if (v28)
    {
      uint64_t v29 = 0LL;
      while (1)
      {
        if ((v17 & 0x1000000000000000LL) != 0)
        {
          int v31 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v17 & 0x2000000000000000LL) != 0)
          {
            unint64_t v64 = v15;
            uint64_t v65 = v17 & 0xFFFFFFFFFFFFFFLL;
            int v31 = *((unsigned __int8 *)&v64 + v29);
            if (*((char *)&v64 + v29) < 0) {
              __asm { BR              X9 }
            }
          }

          else
          {
            uint64_t v30 = (v17 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v15 & 0x1000000000000000LL) == 0) {
              uint64_t v30 = _StringObject.sharedUTF8.getter();
            }
            int v31 = *(unsigned __int8 *)(v30 + v29);
            if (*(char *)(v30 + v29) < 0) {
              __asm { BR              X10 }
            }
          }

          uint64_t v32 = 1LL;
        }

        if (v31 == 47) {
          break;
        }
        v29 += v32;
        if (v29 >= v28) {
          goto LABEL_53;
        }
      }

      uint64_t v5 = 0LL;
    }

    else
    {
LABEL_53:
      if ((v27 & 0x2000000000000000LL) != 0) {
        uint64_t v48 = HIBYTE(v27) & 0xF;
      }
      else {
        uint64_t v48 = v63 & 0xFFFFFFFFFFFFLL;
      }
      if (v48)
      {
        uint64_t v61 = (v27 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v62 = v27 & 0xFFFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain();
        for (uint64_t j = 0LL; j < v48; j += v53)
        {
          if ((v27 & 0x1000000000000000LL) != 0)
          {
            Swift::UInt32 v51 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            uint64_t v53 = v52;
          }

          else
          {
            if ((v27 & 0x2000000000000000LL) != 0)
            {
              unint64_t v64 = v63;
              uint64_t v65 = v62;
              Swift::UInt32 v51 = *((unsigned __int8 *)&v64 + j);
              if (*((char *)&v64 + j) < 0) {
                __asm { BR              X9 }
              }
            }

            else
            {
              uint64_t v50 = v61;
              if ((v63 & 0x1000000000000000LL) == 0) {
                uint64_t v50 = _StringObject.sharedUTF8.getter();
              }
              Swift::UInt32 v51 = *(unsigned __int8 *)(v50 + j);
              if (*(char *)(v50 + j) < 0) {
                __asm { BR              X9 }
              }
            }

            uint64_t v53 = 1LL;
          }

          if (one-time initialization token for invalidExtensionScalars != -1) {
            swift_once();
          }
          uint64_t v54 = static String.invalidExtensionScalars;
          if (*(void *)(static String.invalidExtensionScalars + 16))
          {
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v51);
            Swift::Int v55 = Hasher._finalize()();
            uint64_t v56 = -1LL << *(_BYTE *)(v54 + 32);
            unint64_t v57 = v55 & ~v56;
            if (((*(void *)(v54 + 56 + ((v57 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v57) & 1) != 0)
            {
              uint64_t v58 = *(void *)(v54 + 48);
              if (*(_DWORD *)(v58 + 4 * v57) == v51)
              {
LABEL_78:
                uint64_t v5 = 0LL;
                goto LABEL_79;
              }

              uint64_t v59 = ~v56;
              while (1)
              {
                unint64_t v57 = (v57 + 1) & v59;
                if (((*(void *)(v54 + 56 + ((v57 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v57) & 1) == 0) {
                  break;
                }
                if (*(_DWORD *)(v58 + 4 * v57) == v51) {
                  goto LABEL_78;
                }
              }
            }
          }
        }

        uint64_t v5 = 1LL;
LABEL_79:
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v5 = 1LL;
      }
    }

    swift_bridgeObjectRelease();
  }

BOOL partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)( unsigned __int8 *a1)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PredicateExpressionCodingKeys( a1,  *(unsigned __int8 **)(v1 + 16));
}

BOOL closure #1 in BidirectionalCollection<>.lastIndex(of:)specialized partial apply(unsigned __int8 *a1)
{
  return partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(a1);
}

uint64_t BPlistMap.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 40));
  uint64_t result = *(void *)(v1 + 32);
  if (!result) {
    goto LABEL_4;
  }
  if (result == *(void *)(v1 + 16))
  {
    MEMORY[0x186E20E60]();
LABEL_4:
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 40));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_deallocClassInstance();
  }

  __break(1u);
  return result;
}

uint64_t type metadata accessor for BPlistMap()
{
  return objc_opt_self();
}

uint64_t BPlistMap.loadValue(at:)(uint64_t a1)
{
  uint64_t v4 = v1[8];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 40));
  uint64_t v5 = v1[7];
  if (specialized Array._getCount()(v5) <= a1)
  {
    lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
    swift_allocError();
    __int128 v12 = xmmword_18372F7B0;
LABEL_9:
    *uint64_t v11 = v12;
    goto LABEL_10;
  }

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a1, 1LL, v5);
  uint64_t v6 = *(void *)(v5 + 8 * a1 + 32);
  if (v6 < 0)
  {
    lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
    swift_allocError();
    __int128 v12 = xmmword_18372F7D0;
    goto LABEL_9;
  }

  if (*(void *)(v4 + 24) - v6 < 1)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v7 = v1[5];
  uint64_t v8 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, *(void *)(v4 + 16) + v6);
  if (v7 < 0)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x18301F230LL);
  }

  char v9 = specialized BPlistTypeMarker.init(_:)(v8);
  if (v9 != 13) {
    __asm { BR              X10 }
  }

  lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
  swift_allocError();
  *uint64_t v10 = 0LL;
  v10[1] = 0LL;
LABEL_10:
  swift_willThrow();
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 40));
  swift_release();
  return v2;
}

_UNKNOWN **associated type witness table accessor for PlistDecodingMap.ArrayIterator : PlistArrayIterator in BPlistMap()
{
  return &protocol witness table for BPlistMap.ArrayIterator;
}

_UNKNOWN **associated type witness table accessor for PlistDecodingMap.DictionaryIterator : PlistDictionaryIterator in BPlistMap()
{
  return &protocol witness table for BPlistMap.DictionaryIterator;
}

void protocol witness for PlistArrayIterator.next() in conformance BPlistMap.ArrayIterator(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16LL);
  if (v2 == v3)
  {
    uint64_t v4 = 0LL;
LABEL_5:
    *(void *)a1 = v4;
    *(_BYTE *)(a1 + 8) = v2 == v3;
    return;
  }

  if (v2 < v3)
  {
    uint64_t v4 = *(void *)(*v1 + 8 * v2 + 32);
    v1[1] = v2 + 1;
    goto LABEL_5;
  }

  __break(1u);
}

void protocol witness for static PlistDecodingMap.nullValue.getter in conformance BPlistMap(void *a1@<X8>)
{
  *a1 = 0x9000000000000008LL;
}

uint64_t protocol witness for PlistDecodingMap.topObject.getter in conformance BPlistMap@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = BPlistMap.loadValue(at:)(*(void *)(v1 + 48));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for PlistDecodingMap.value(from:) in conformance BPlistMap@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = BPlistMap.loadValue(at:)(*a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t BPlistMap.Value.dataValue<A>(in:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v36 = a6;
  unint64_t v38 = a2;
  v39[11] = *MEMORY[0x1895F89C0];
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v19 = MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v35 - v17;
  if (v18 >> 60 == 4)
  {
    uint64_t v22 = *(void *)(v18 + 16);
    uint64_t v21 = *(void *)(v18 + 24);
    uint64_t v23 = *(void *)(a1 + 64);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v23 + 40));
    uint64_t v24 = *(void *)(v23 + 24);
    BOOL v25 = v24 < v21 + v22 || v24 < v21;
    if (v25 || (v21 | v22) < 0 || v24 <= v22) {
      __break(1u);
    }
    uint64_t v26 = v37;
    closure #1 in BPlistMap.Value.dataValue<A>(in:for:_:)((_BYTE *)(*(void *)(v23 + 16) + v22), v21, v39);
    os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 40));
    if (v26)
    {
      uint64_t result = swift_release();
      __break(1u);
    }

    else
    {
      swift_release();
      return v39[0];
    }
  }

  else
  {
    unint64_t v37 = v18;
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
    v28((char *)&v35 - v17, a3, v12, v19);
    ((void (*)(char *, char *, uint64_t))v28)(v15, v20, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1LL, a5) == 1)
    {
      uint64_t v29 = *(void (**)(char *, uint64_t))(v13 + 8);
      v29(v15, v12);
      _CodingPathNode.path.getter(v38);
      v29(v20, v12);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, a5);
      uint64_t v30 = _CodingPathNode.path.getter(v38);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v32 = v36;
      *(void *)(inited + 56) = a5;
      *(void *)(inited + 64) = v32;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v11, a5);
      v39[0] = v30;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a5);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)( (uint64_t)&type metadata for Data,  v37,  v34);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  return result;
}

uint64_t closure #1 in BPlistMap.Value.dataValue<A>(in:for:_:)@<X0>( _BYTE *__src@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a2)
  {
    if (a2 <= 14)
    {
      uint64_t result = specialized Data.InlineData.init(_:)(__src, &__src[a2]);
      unint64_t v8 = v9 & 0xFFFFFFFFFFFFFFLL;
    }

    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      unint64_t v6 = (unint64_t)__DataStorage.init(bytes:length:)((unint64_t)__src, a2);
      if ((unint64_t)a2 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
        *(void *)(result + 24) = a2;
        unint64_t v8 = v6 | 0x8000000000000000LL;
      }

      else
      {
        uint64_t result = a2 << 32;
        unint64_t v8 = v6 | 0x4000000000000000LL;
      }
    }
  }

  else
  {
    uint64_t result = 0LL;
    unint64_t v8 = 0xC000000000000000LL;
  }

  *a3 = result;
  a3[1] = v8;
  return result;
}

void BPlistMap.Value.dateValue<A>(in:for:_:)( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  uint64_t v30 = a5;
  unint64_t v32 = a2;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  int v31 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v18 = MEMORY[0x1895F8858](v15);
  __n128 v19 = (char *)&v28 - v16;
  if (v17 >> 60 == 5)
  {
    *a6 = *(void *)(v17 + 16);
  }

  else
  {
    unint64_t v29 = v17;
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16);
    v20((char *)&v28 - v16, a3, v11, v18);
    ((void (*)(char *, char *, uint64_t))v20)(v14, v19, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t v21 = *(void (**)(char *, uint64_t))(v12 + 8);
      v21(v14, v11);
      _CodingPathNode.path.getter(v32);
      v21(v19, v11);
    }

    else
    {
      uint64_t v22 = v31;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v31, v14, a4);
      uint64_t v23 = _CodingPathNode.path.getter(v32);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v25 = v30;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v25;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v22, a4);
      uint64_t v33 = v23;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v22, a4);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)( (uint64_t)&type metadata for Date,  v29,  v27);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

uint64_t BPlistMap.Value.debugDataTypeDescription.getter(unint64_t a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_183020A70 + 4 * byte_18372F840[a1 >> 60]))( 0x676E697274732061LL,  0xE800000000000000LL);
}

uint64_t sub_183020A70()
{
  return 0x7961727261206E61LL;
}

uint64_t sub_183020A84()
{
  return 0x7465732061LL;
}

uint64_t sub_183020A98()
{
  return 0x6F69746369642061LL;
}

uint64_t sub_183020AB8()
{
  return 0x7620617461642061LL;
}

uint64_t sub_183020AD8()
{
  return 0x657461642061LL;
}

uint64_t sub_183020AEC()
{
  return 0x61656C6F6F622061LL;
}

uint64_t sub_183020B08()
{
  return 0x6E206C6165722061LL;
}

uint64_t sub_183020B2C()
{
  return 0x6765746E69206E61LL;
}

uint64_t sub_183020B48@<X0>(uint64_t a1@<X8>)
{
  if (a1 == 0x9000000000000008LL) {
    unint64_t v1 = 0x76206C6C756E2061LL;
  }
  else {
    unint64_t v1 = 0xD000000000000012LL;
  }
  if (a1 == 0x9000000000000000LL) {
    return 0x6469752061LL;
  }
  else {
    return v1;
  }
}

unint64_t BufferReader.getSizedInt(at:endIndex:size:)(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = a3;
  switch(a3)
  {
    case 0LL:
      return v4;
    case 1LL:
      unint64_t v12 = v3[2];
      unint64_t v13 = v3[4];
      if (v13 < v12) {
        goto LABEL_48;
      }
      return *(unsigned __int8 *)a1;
    case 2LL:
      unint64_t v14 = v3[2];
      unint64_t v15 = v3[4];
      if (v15 < v14) {
        goto LABEL_52;
      }
      return __rev16(*(unsigned __int16 *)a1);
    case 3LL:
    case 5LL:
    case 6LL:
    case 7LL:
      unint64_t v5 = v3[2];
      unint64_t v6 = v3[4];
      if (v6 < v5)
      {
        __break(1u);
        goto LABEL_40;
      }

      if ((uint64_t)(v5 - *v3) < 0)
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }

      if ((uint64_t)(v6 - v5) < 0)
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }

      if ((uint64_t)(*v3 + v3[1] - v6) < 0)
      {
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        JUMPOUT(0x183020DECLL);
      }

      unint64_t v4 = 0LL;
      uint64_t v7 = a3;
      do
      {
        unsigned int v8 = *(unsigned __int8 *)a1;
        a1 = (unsigned int *)((char *)a1 + 1);
        unint64_t v4 = v8 | (v4 << 8);
        --v7;
      }

      while (v7);
      return v4;
    case 4LL:
      unint64_t v16 = v3[2];
      unint64_t v17 = v3[4];
      if (v17 < v16) {
        goto LABEL_56;
      }
      return bswap32(*a1);
    case 8LL:
      unint64_t v18 = v3[2];
      unint64_t v19 = v3[4];
      if (v19 < v18) {
        goto LABEL_60;
      }
      unint64_t v11 = *(void *)a1;
      return bswap64(v11);
    default:
      if (__OFSUB__(a2 - (void)a1, a3)) {
        goto LABEL_43;
      }
      unint64_t v9 = v3[2];
      unint64_t v10 = v3[4];
      if (v10 < v9) {
        goto LABEL_44;
      }
      unint64_t v11 = *(void *)((char *)a1 + a3);
      return bswap64(v11);
  }

uint64_t BPlistError.debugDescription.getter(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0x2064696C61766E49LL;
  }
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = a1;
  v5._unint64_t object = a2;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = 0x65756C617620LL;
  v6._unint64_t object = (void *)0xE600000000000000LL;
  String.append(_:)(v6);
  return 0x2074707572726F43LL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BPlistError( void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  if (!v3) {
    return !v4;
  }
  if (v3 == 1) {
    return v4 == 1;
  }
  if (v4 < 2) {
    return 0LL;
  }
  if (*a1 != *a2 || v3 != v4) {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return 1LL;
}

uint64_t specialized BPlistTypeMarker.init(_:)(uint64_t a1)
{
  int v1 = (a1 >> 4) ^ 8;
  uint64_t result = 3LL;
  switch(v1)
  {
    case 0:
      uint64_t result = 9LL;
      break;
    case 2:
      uint64_t result = 10LL;
      break;
    case 4:
      uint64_t result = 11LL;
      break;
    case 5:
      uint64_t result = 12LL;
      break;
    case 8:
      if ((_BYTE)a1)
      {
        if (a1 == 9)
        {
          uint64_t result = 2LL;
        }

        else
        {
          uint64_t result = 1LL;
        }
      }

      else
      {
        uint64_t result = a1;
      }

      break;
    case 9:
      return result;
    case 10:
      uint64_t result = 4LL;
      break;
    case 11:
      uint64_t result = 5LL;
      break;
    case 12:
      uint64_t result = 6LL;
      break;
    case 13:
      uint64_t result = 7LL;
      break;
    case 14:
      uint64_t result = 8LL;
      break;
    default:
LABEL_14:
      uint64_t result = 13LL;
      break;
  }

  return result;
}

_DWORD *specialized static BPlistScanner.parseTopLevelInfo(from:)@<X0>( _DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 < 41 || (*result == 1768714338 ? (BOOL v4 = *(_DWORD *)((char *)result + 3) == 812938089) : (BOOL v4 = 0), !v4))
  {
LABEL_6:
    unint64_t v5 = 0LL;
    unint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
    char v9 = 1;
    goto LABEL_7;
  }

  unint64_t v5 = 0LL;
  uint64_t v10 = (uint64_t)result + a2;
  unint64_t v11 = *(void *)((char *)result + a2 - 24);
  char v9 = 1;
  if (!v11) {
    goto LABEL_34;
  }
  unint64_t v12 = bswap64(v11);
  if ((v12 & 0x8000000000000000LL) != 0) {
    goto LABEL_34;
  }
  unint64_t v13 = bswap64(*(void *)(v10 - 8));
  if ((v13 & 0x8000000000000000LL) != 0) {
    goto LABEL_34;
  }
  unint64_t v14 = bswap64(*(void *)(v10 - 16));
  if (v14 >= v12) {
    goto LABEL_34;
  }
  unint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  unint64_t v8 = 0LL;
  if (v13 < 9) {
    goto LABEL_7;
  }
  unint64_t v5 = 0LL;
  if (v13 >= a2 - 32) {
    goto LABEL_34;
  }
  unint64_t v15 = *(unsigned __int8 *)(v10 - 26);
  if (!*(_BYTE *)(v10 - 26)) {
    goto LABEL_34;
  }
  uint64_t v16 = *(unsigned __int8 *)(v10 - 25);
  unint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  unint64_t v8 = 0LL;
  if (!*(_BYTE *)(v10 - 25)) {
    goto LABEL_7;
  }
  unint64_t v5 = 0LL;
  if (!is_mul_ok(v12, v15)) {
    goto LABEL_34;
  }
  unint64_t v17 = v12 * v15;
  unint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  unint64_t v8 = 0LL;
  if (!(v12 * v15)) {
    goto LABEL_7;
  }
  unint64_t v18 = v13 + v17;
  if (__CFADD__(v13, v17)) {
    goto LABEL_20;
  }
  unint64_t v5 = 0LL;
  unint64_t v19 = v18 + 32;
  if (v18 >= 0xFFFFFFFFFFFFFFE0LL) {
    goto LABEL_34;
  }
  unint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  unint64_t v8 = 0LL;
  if (v19 != a2) {
    goto LABEL_7;
  }
  if ((uint64_t v20 = *(unsigned int *)(v10 - 32),
        uint64_t v21 = *(unsigned __int8 *)(v10 - 28),
        uint64_t v22 = *(unsigned __int8 *)(v10 - 27),
        v16 <= 7)
    && v12 >> (8 * (v16 & 7u))
    || v15 <= 7 && v13 >> (8 * (v15 & 7u))
    || (unint64_t v23 = v14 * v15,
        ((uint64_t)v14 * (unsigned __int128)*(unsigned __int8 *)(v10 - 26)) >> 64 != (uint64_t)(v14 * v15) >> 63))
  {
LABEL_20:
    unint64_t v5 = 0LL;
    unint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
    goto LABEL_7;
  }

  unint64_t v5 = 0LL;
  uint64_t v24 = v13 + v23;
  if (__OFADD__(v13, v23)) {
    goto LABEL_34;
  }
  unint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  unint64_t v8 = 0LL;
  if (v24 >= a2) {
    goto LABEL_7;
  }
  uint64_t result = (_DWORD *)BufferReader.getSizedInt(at:endIndex:size:)((_DWORD *)((char *)result + v24), v10, v15);
  if ((v25 & 1) != 0) {
    goto LABEL_6;
  }
  unint64_t v5 = 0LL;
  char v9 = 1;
  if ((unint64_t)result < 8)
  {
LABEL_34:
    unint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
    goto LABEL_7;
  }

  unint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  unint64_t v8 = 0LL;
  if ((unint64_t)result < v13)
  {
    char v9 = 0;
    unint64_t v5 = v20 | (v21 << 32) | (v22 << 40) | (v15 << 48) | (v16 << 56);
    unint64_t v6 = v12;
    unint64_t v7 = v14;
    unint64_t v8 = v13;
  }

uint64_t specialized static BPlistScanner.scanBinaryPropertyList(from:)(_DWORD *a1, uint64_t a2)
{
  if ((v48 & 1) == 0)
  {
    int v49 = v41;
    __int16 v50 = v42;
    uint64_t v4 = v45;
    if (v45 < 0) {
      goto LABEL_41;
    }
    int64_t v5 = v43;
    char v6 = v44;
    uint64_t v7 = v46;
    uint64_t v2 = v47;
    uint64_t v8 = 0x40000LL;
    if (v45 < 0x40000) {
      uint64_t v8 = v45;
    }
    if (*(void *)(MEMORY[0x18961AFE8] + 16LL) <= v8) {
      int64_t v9 = v8;
    }
    else {
      int64_t v9 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
    }
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9,  0,  MEMORY[0x18961AFE8]);
    if (v2 < 0)
    {
LABEL_42:
      __break(1u);
    }

    else
    {
      unint64_t v12 = v2 - 1;
      if (v2)
      {
        unint64_t v13 = v10;
        char v35 = v6;
        uint64_t v37 = v7;
        unint64_t v38 = a1;
        uint64_t v36 = v2;
        if (v4)
        {
          uint64_t v14 = 0LL;
          uint64_t v15 = a2;
          uint64_t v16 = (char *)a1 + a2;
          unint64_t v17 = (_DWORD *)((char *)a1 + v2);
          int64_t v18 = v5 - 8;
          uint64_t v19 = v5;
          while (v16 - (char *)v17 >= v5)
          {
            unint64_t v20 = v5;
            switch((int)v5)
            {
              case 0:
                goto LABEL_30;
              case 1:
                if (v15 < 0) {
                  goto LABEL_45;
                }
                unint64_t v20 = *(unsigned __int8 *)v17;
                goto LABEL_29;
              case 2:
                if (v15 < 0) {
                  goto LABEL_46;
                }
                unint64_t v20 = __rev16(*(unsigned __int16 *)v17);
                goto LABEL_29;
              case 3:
              case 5:
              case 6:
              case 7:
                if (v15 < 0)
                {
                  __break(1u);
LABEL_41:
                  __break(1u);
                  goto LABEL_42;
                }

                unint64_t v20 = 0LL;
                uint64_t v21 = 0LL;
                do
                  unint64_t v20 = *((unsigned __int8 *)v17 + v21++) | (v20 << 8);
                while (v5 != v21);
LABEL_29:
                if (v12 < v20) {
                  goto LABEL_34;
                }
LABEL_30:
                unint64_t v24 = v13[2];
                unint64_t v23 = v13[3];
                uint64_t v2 = v24 + 1;
                if (v24 >= v23 >> 1)
                {
                  char v25 = v13;
                  unint64_t v32 = v12;
                  uint64_t v33 = v19;
                  int64_t v34 = v18;
                  uint64_t v26 = v11;
                  unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v23 > 1),  v24 + 1,  1,  v25);
                  uint64_t v11 = v26;
                  uint64_t v19 = v33;
                  int64_t v18 = v34;
                  unint64_t v12 = v32;
                  uint64_t v15 = a2;
                  unint64_t v13 = v27;
                }

                ++v14;
                _OWORD v13[2] = v2;
                v13[v24 + 4] = v20;
                unint64_t v17 = (unsigned int *)((char *)v17 + v5);
                if (v14 == v4) {
                  goto LABEL_37;
                }
                break;
              case 4:
                if (v15 < 0) {
                  goto LABEL_47;
                }
                unint64_t v20 = bswap32(*v17);
                goto LABEL_29;
              case 8:
                if (v15 < 0) {
                  goto LABEL_48;
                }
                unint64_t v22 = *(void *)v17;
                goto LABEL_28;
              default:
                if (v15 < 0) {
                  goto LABEL_44;
                }
                unint64_t v22 = *(void *)((char *)v17 + v18);
LABEL_28:
                unint64_t v20 = bswap64(v22);
                goto LABEL_29;
            }
          }

uint64_t outlined init with take of BPlistTrailer?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BPlistTrailer?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type BPlistError and conformance BPlistError()
{
  unint64_t result = lazy protocol witness table cache variable for type BPlistError and conformance BPlistError;
  if (!lazy protocol witness table cache variable for type BPlistError and conformance BPlistError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for BPlistError, &type metadata for BPlistError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type BPlistError and conformance BPlistError);
  }

  return result;
}

uint64_t sub_183021620()
{
  return swift_deallocObject();
}

uint64_t sub_183021644()
{
  return swift_deallocObject();
}

uint64_t sub_183021654()
{
  return swift_deallocObject();
}

uint64_t sub_183021664()
{
  return swift_deallocObject();
}

uint64_t sub_183021674()
{
  return swift_deallocObject();
}

unint64_t destroy for BPlistError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for BPlistError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }

  return a1;
}

void *assignWithCopy for BPlistError(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }

uint64_t assignWithTake for BPlistError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BPlistError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for BPlistError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }

  return result;
}

void *destructiveInjectEnumTag for BPlistError(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for BPlistError()
{
  return &type metadata for BPlistError;
}

void *initializeBufferWithCopyOfBuffer for BPlistMap.ArrayIterator(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for BPlistMap.ArrayIterator()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for BPlistMap.ArrayIterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for BPlistMap.ArrayIterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for BPlistMap.ArrayIterator()
{
  return &type metadata for BPlistMap.ArrayIterator;
}

uint64_t destroy for BPlistMap.DictionaryIterator()
{
  return outlined consume of Set<A1>.Iterator._Variant<A><A1>();
}

void *initializeWithCopy for BPlistMap.DictionaryIterator(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  outlined copy of [A : B].Iterator._Variant<A, B>();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

void *assignWithCopy for BPlistMap.DictionaryIterator(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  outlined copy of [A : B].Iterator._Variant<A, B>();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for BPlistMap.DictionaryIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(void *)(a1 + 32) = v3;
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  return a1;
}

uint64_t getEnumTagSinglePayload for BPlistMap.DictionaryIterator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BPlistMap.DictionaryIterator( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 127;
    if (a3 >= 0x7F) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7F) {
      *(_BYTE *)(result + 40) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BPlistMap.DictionaryIterator()
{
  return &type metadata for BPlistMap.DictionaryIterator;
}

unint64_t *initializeBufferWithCopyOfBuffer for BPlistMap.Value( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of BPlistMap.Value(*a2);
  *a1 = v3;
  return a1;
}

unint64_t outlined copy of BPlistMap.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      __n128 result = swift_retain();
      break;
    default:
      return result;
  }

  return result;
}

unint64_t destroy for BPlistMap.Value(unint64_t *a1)
{
  return outlined consume of BPlistMap.Value(*a1);
}

unint64_t outlined consume of BPlistMap.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      __n128 result = swift_release();
      break;
    default:
      return result;
  }

  return result;
}

unint64_t *assignWithCopy for BPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of BPlistMap.Value(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of BPlistMap.Value(v4);
  return a1;
}

unint64_t *assignWithTake for BPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of BPlistMap.Value(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BPlistMap.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x77 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 119);
  }
  unsigned int v3 = ((*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x76) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BPlistMap.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x76)
  {
    *(void *)__n128 result = a2 - 119;
    if (a3 >= 0x77) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x77) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t getEnumTag for BPlistMap.Value(void *a1)
{
  uint64_t v1 = *a1 >> 60;
  else {
    return (*a1 >> 3) + 9;
  }
}

unint64_t *destructiveInjectEnumTag for BPlistMap.Value(unint64_t *result, uint64_t a2)
{
  if (a2 < 9)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v3 = a2 << 60;
  }

  else
  {
    uint64_t v2 = 8LL * (a2 - 9);
    unint64_t v3 = 0x9000000000000000LL;
  }

  *__n128 result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for BPlistMap.Value()
{
  return &type metadata for BPlistMap.Value;
}

ValueMetadata *type metadata accessor for BPlistMap.Region()
{
  return &type metadata for BPlistMap.Region;
}

uint64_t PredicateExpressions.OptionalFlatMap.transform.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 68));
}

uint64_t PredicateExpressions.OptionalFlatMap.variable.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 72));
  return result;
}

void PredicateExpressions.OptionalFlatMap.init<>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

{
  PredicateExpressions.OptionalFlatMap.init<>(_:_:)(a1, a2);
}

{
  uint64_t v4;
  unint64_t v5;
  MEMORY[0x1895F8858](a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  if (one-time initialization token for nextID != -1) {
    swift_once();
  }
  do
    uint64_t v5 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v5 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  type metadata accessor for PredicateExpressions.OptionalFlatMap();
}

uint64_t PredicateExpressions.OptionalFlatMap.evaluate(_:)@<X0>( void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v74 = a3;
  uint64_t v6 = a2[4];
  uint64_t v71 = a2[7];
  uint64_t v67 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  char v70 = (char *)&v61 - v8;
  uint64_t v77 = *(void *)(a2[3] - 8LL);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v72 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v73 = (char *)&v61 - v11;
  uint64_t v78 = v12;
  uint64_t v79 = type metadata accessor for Optional();
  uint64_t v75 = *(void *)(v79 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v79);
  unint64_t v69 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  unint64_t v17 = (char *)&v61 - v16;
  uint64_t v18 = MEMORY[0x1895F8858](v15);
  uint64_t v76 = (char *)&v61 - v19;
  MEMORY[0x1895F8858](v18);
  uint64_t v21 = (char *)&v61 - v20;
  unint64_t v22 = (void *)*a1;
  uint64_t v86 = v22;
  *(void *)&__int128 v83 = v22;
  uint64_t v23 = a2[6];
  unint64_t v24 = *(void (**)(__int128 *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v25 = a2[2];
  swift_bridgeObjectRetain();
  uint64_t v26 = v80;
  v24(&v83, v25, v23);
  if (v26) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v80 = v17;
  uint64_t v65 = v3;
  uint64_t v66 = a2;
  uint64_t v27 = v75;
  uint64_t v28 = v76;
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
  uint64_t v30 = v79;
  v29(v76, v21, v79);
  uint64_t v31 = v77;
  unint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
  uint64_t v33 = v28;
  uint64_t v34 = v78;
  if (v32(v33, 1LL, v78) == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66[5] - 8LL) + 56LL))(v74, 1LL, 1LL);
    char v35 = *(void (**)(void))(v27 + 8);
LABEL_28:
    ((void (*)(char *, uint64_t))v35)(v21, v30);
    return swift_bridgeObjectRelease();
  }

  uint64_t v63 = (uint64_t (*)(char *, uint64_t, uint64_t))v32;
  unint64_t v64 = v29;
  uint64_t v36 = v73;
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
  v61(v73, v76, v34);
  uint64_t v37 = *(void *)(v65 + *((int *)v66 + 18));
  unint64_t v38 = v80;
  uint64_t v76 = *(char **)(v31 + 16);
  ((void (*)(char *, char *, uint64_t))v76)(v80, v36, v34);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v38, 0LL, 1LL, v34);
  uint64_t v39 = v22[2];
  if (v39)
  {
    uint64_t v40 = (uint64_t)(v22 + 4);
    swift_bridgeObjectRetain();
    unint64_t v41 = 0LL;
    while (1)
    {
      outlined init with copy of (id: PredicateExpressions.VariableID, value: Any)(v40, (uint64_t)&v83);
      uint64_t v42 = v83;
      outlined destroy of (id: PredicateExpressions.VariableID, value: Any)((uint64_t)&v83);
      if (v42 == v37) {
        break;
      }
      ++v41;
      v40 += 40LL;
      if (v39 == v41)
      {
        swift_bridgeObjectRelease();
        unint64_t v41 = 0LL;
        char v43 = 1;
        goto LABEL_11;
      }
    }

    swift_bridgeObjectRelease();
    char v43 = 0;
LABEL_11:
    uint64_t v30 = v79;
  }

  else
  {
    char v43 = 1;
    unint64_t v41 = 0LL;
  }

  char v44 = v69;
  v64(v69, v80, v30);
  uint64_t v45 = v78;
  int v46 = v63(v44, 1LL, v78);
  uint64_t v47 = v72;
  uint64_t v62 = v21;
  if (v46 == 1)
  {
    char v35 = *(void (**)(void))(v75 + 8);
    ((void (*)(char *, uint64_t))v35)(v44, v30);
    if ((v43 & 1) != 0)
    {
      ((void (*)(char *, uint64_t))v35)(v80, v30);
    }

    else
    {
      specialized Array.remove(at:)(v41, (uint64_t)&v83);
      ((void (*)(char *, uint64_t))v35)(v80, v30);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83 + 8);
    }

    uint64_t v48 = v71;
    uint64_t v49 = v78;
    goto LABEL_27;
  }

  v61(v72, v44, v45);
  uint64_t v49 = v45;
  if ((v43 & 1) != 0)
  {
    uint64_t v82 = v45;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v81);
    ((void (*)(uint64_t *, char *, uint64_t))v76)(boxed_opaque_existential_1, v47, v45);
    *(void *)&__int128 v83 = v37;
    outlined init with take of Any(&v81, (__int128 *)((char *)&v83 + 8));
    Swift::UInt32 v51 = v86;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::UInt32 v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v51[2] + 1LL,  1,  v51);
    }
    uint64_t v48 = v71;
    unint64_t v53 = v51[2];
    unint64_t v52 = v51[3];
    if (v53 >= v52 >> 1) {
      Swift::UInt32 v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v52 > 1),  v53 + 1,  1,  v51);
    }
    v51[2] = v53 + 1;
    uint64_t v54 = &v51[5 * v53];
    __int128 v55 = v83;
    __int128 v56 = v84;
    v54[8] = v85;
    *((_OWORD *)v54 + 2) = v55;
    *((_OWORD *)v54 + 3) = v56;
    uint64_t v86 = v51;
    char v35 = *(void (**)(void))(v75 + 8);
    v35();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v72, v49);
    goto LABEL_27;
  }

  *((void *)&v84 + 1) = v45;
  unint64_t v57 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v83);
  ((void (*)(uint64_t *, char *, uint64_t))v76)(v57, v47, v45);
  uint64_t v58 = v86;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v58);
    uint64_t v58 = (void *)result;
    uint64_t v86 = (void *)result;
  }

  uint64_t v48 = v71;
  if (v41 < v58[2])
  {
    uint64_t v60 = &v58[5 * v41 + 5];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    outlined init with take of Any(&v83, v60);
    char v35 = *(void (**)(void))(v75 + 8);
    ((void (*)(char *, uint64_t))v35)(v80, v30);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v72, v45);
LABEL_27:
    *(void *)&__int128 v83 = v86;
    (*(void (**)(__int128 *, uint64_t, uint64_t))(v48 + 16))(&v83, v67, v48);
    type metadata accessor for Optional();
    swift_dynamicCast();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v73, v49);
    uint64_t v30 = v79;
    uint64_t v21 = v62;
    goto LABEL_28;
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.OptionalFlatMap<A, B, C, D>@<X0>( void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.OptionalFlatMap.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_flatMap<A, B, C, D>(_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
}

{
  static PredicateExpressions.build_flatMap<A, B, C, D>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *);
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v23 = a8;
  unint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v15 = MEMORY[0x1895F8858](a1);
  unint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void (**)(char *))(v17 + 16);
  v20(v19);
  ((void (*)(uint64_t, char *, uint64_t))v20)(a9, v19, a4);
  if (one-time initialization token for nextID != -1) {
    swift_once();
  }
  do
    uint64_t v21 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v21 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  uint64_t v26 = a4;
  uint64_t v27 = a6;
  uint64_t v28 = a5;
  uint64_t v29 = a7;
  uint64_t v30 = v23;
  uint64_t v31 = a10;
  type metadata accessor for PredicateExpressions.OptionalFlatMap();
}

uint64_t PredicateExpressions.NilCoalesce.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.NilCoalesce.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 52));
}

void PredicateExpressions.NilCoalesce.init(lhs:rhs:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_183022864(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 52),  v2,  v1);
}

uint64_t PredicateExpressions.NilCoalesce.evaluate(_:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v23 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v24 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(void *)(v7 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = *a1;
  uint64_t v27 = v15;
  uint64_t v16 = v26;
  uint64_t result = (*(uint64_t (**)(uint64_t *, void))(*(void *)(a2 + 32) + 16LL))(&v27, *(void *)(a2 + 16));
  if (!v16)
  {
    uint64_t v26 = 0LL;
    uint64_t v21 = v12;
    uint64_t v22 = v11;
    uint64_t v19 = v23;
    uint64_t v18 = v24;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v24, v3, a2);
    uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v14, 1LL, AssociatedTypeWitness) == 1)
    {
      uint64_t v27 = v15;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(&v27, v9, v8);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v18, a2);
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v14, v22);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v18, a2);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v25, v14, AssociatedTypeWitness);
    }
  }

  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.NilCoalesce<A, B>@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.NilCoalesce.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_NilCoalesce<A, B>(lhs:rhs:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_183022AC8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v3 + *(int *)(a1 + 52),  v2,  v1);
}

uint64_t PredicateExpressions.ForcedUnwrap.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t PredicateExpressions.ForcedUnwrap.evaluate(_:)@<X0>( unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a2[3];
  uint64_t v26 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v26 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v26);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v24 - v12;
  unint64_t v24 = *a1;
  uint64_t result = (*(uint64_t (**)(unint64_t *, void))(a2[4] + 16LL))(&v24, a2[2]);
  if (!v3)
  {
    uint64_t v15 = v26;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v26);
    uint64_t v16 = *(void *)(v7 - 8);
    int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v11, 1LL, v7);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v8 + 8);
    if (v17 == 1)
    {
      v18(v11, v15);
      unint64_t v24 = 0LL;
      unint64_t v25 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(44LL);
      swift_bridgeObjectRelease();
      unint64_t v24 = 0xD000000000000029LL;
      unint64_t v25 = 0x80000001839CB310LL;
      v19._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._uint64_t countAndFlagsBits = 39LL;
      v20._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v20);
      unint64_t v21 = v24;
      unint64_t v22 = v25;
      lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
      swift_allocError();
      *(void *)uint64_t v23 = v21;
      *(void *)(v23 + 8) = v22;
      *(_BYTE *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
      swift_willThrow();
      return ((uint64_t (*)(char *, uint64_t))v18)(v13, v15);
    }

    else
    {
      v18(v13, v15);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a3, v11, v7);
    }
  }

  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ForcedUnwrap<A, B>@<X0>( unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.ForcedUnwrap.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_ForcedUnwrap<A, B>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, a1);
}

uint64_t PredicateExpressions.OptionalFlatMap.description.getter()
{
  v0._unint64_t object = (void *)0x80000001839CB340LL;
  v0._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x626169726176202CLL;
  v1._unint64_t object = (void *)0xEC000000203A656CLL;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 41LL;
  v3._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = 0x656C626169726156LL;
  v4._unint64_t object = (void *)0xE900000000000028LL;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x66736E617274202CLL;
  v5._unint64_t object = (void *)0xED0000203A6D726FLL;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._uint64_t countAndFlagsBits = 41LL;
  v6._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return 0LL;
}

uint64_t PredicateExpressions.NilCoalesce.description.getter()
{
  v0._unint64_t object = (void *)0x80000001839CB360LL;
  v0._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x203A736872202CLL;
  v1._unint64_t object = (void *)0xE700000000000000LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41LL;
  v2._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

uint64_t PredicateExpressions.ForcedUnwrap.description.getter()
{
  v0._unint64_t object = (void *)0x80000001839CB380LL;
  v0._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 41LL;
  v1._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return 0LL;
}

uint64_t PredicateExpressions.OptionalFlatMap<>.encode(to:)(void *a1, uint64_t a2)
{
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    uint64_t v6 = type metadata accessor for PredicateExpressions.Variable(0LL, *(void *)(a2 + 24), v4, v5);
    MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v6);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

void PredicateExpressions.OptionalFlatMap<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  v14[8] = a3;
  v14[2] = a4;
  v14[6] = *(void *)(a2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](a1);
  v14[4] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[5] = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v4);
  v14[7] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[10] = v8;
  v14[11] = v9;
  _OWORD v14[3] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  v14[15] = v13;
  type metadata accessor for PredicateExpressions.OptionalFlatMap();
}

uint64_t sub_183023260(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v23 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 136);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 208) = v6;
  *(void *)(v4 - 200) = v8;
  *(void *)(v4 - 136) = v3;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(void *)(v4 - 104));
  uint64_t v10 = *(void *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 168) + 32LL);
  uint64_t v12 = *(void *)(v4 - 200);
  *(void *)(v4 - 144) = v1;
  v11(v12, v10, v1);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(void *)(v4 - 104));
  uint64_t v13 = *(void *)(v4 - 176);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v14 = a1;
  uint64_t v15 = *(int *)(a1 + 68);
  uint64_t v16 = *(void *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 160) + 32LL))(v16 + v15, v13, v2);
  uint64_t v19 = type metadata accessor for PredicateExpressions.Variable(0LL, *(void *)(v4 - 184), v17, v18);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(void *)(v4 - 104));
  MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v19);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v20 = *(void *)(v4 - 136);
  *(void *)(v16 + *(int *)(v14 + 72)) = *(void *)(v4 - 72);
  __swift_destroy_boxed_opaque_existential_1(v4 - 128);
  uint64_t v21 = *(void *)(v4 - 208);
  (*(void (**)(void, uint64_t, uint64_t))(v21 + 16))(*(void *)(v4 - 192), v16, v14);
  __swift_destroy_boxed_opaque_existential_1(v20);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v16, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( void *a1, uint64_t a2)
{
  return PredicateExpressions.OptionalFlatMap<>.encode(to:)(a1, a2);
}

uint64_t PredicateExpressions.NilCoalesce<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.NilCoalesce<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  v12[5] = a5;
  v12[6] = a4;
  void v12[9] = a3;
  v12[4] = *(void *)(a2 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  v12[7] = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  void v12[8] = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v12[10] = v8;
  v12[11] = v8;
  v12[12] = v9;
  v12[13] = v10;
  v12[14] = v11;
  type metadata accessor for PredicateExpressions.NilCoalesce();
}

uint64_t sub_1830236BC(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 200) = v6;
  *(void *)(v4 - 192) = a1;
  *(void *)(v4 - 72) = v3;
  *(void *)(v4 - 184) = v8;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  uint64_t v10 = *(void *)(v4 - 144);
  uint64_t v11 = *(void *)(v4 - 128);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v12 = *(void *)(v4 - 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v12, v10, v11);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  uint64_t v13 = *(void *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v14 = *(void *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 176) + 32LL))(v12 + *(int *)(v14 + 52), v13, v2);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  uint64_t v15 = *(void *)(v4 - 200);
  (*(void (**)(void, uint64_t, uint64_t))(v15 + 16))(*(void *)(v4 - 168), v12, v14);
  __swift_destroy_boxed_opaque_existential_1(*(void *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.NilCoalesce<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.NilCoalesce<A, B>( void *a1)
{
  return PredicateExpressions.NilCoalesce<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.ForcedUnwrap<>.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t PredicateExpressions.ForcedUnwrap<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v24 = *(void *)(a2 - 8);
  uint64_t v25 = a3;
  MEMORY[0x1895F8858](a1);
  uint64_t v27 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for PredicateExpressions.ForcedUnwrap(0LL, v8, v9, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v19 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    uint64_t v20 = v14;
    uint64_t v21 = v12;
    uint64_t v22 = v11;
    uint64_t v15 = v24;
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    uint64_t v16 = v27;
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v17 = v20;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v16, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v23, v17, v22);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.ForcedUnwrap<A, B>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ForcedUnwrap<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ForcedUnwrap<A, B>( void *a1)
{
  return PredicateExpressions.ForcedUnwrap<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.NilLiteral.evaluate(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 56LL))( a2,  1LL,  1LL);
}

uint64_t PredicateExpressions.NilLiteral.encode(to:)(void *a1)
{
  return specialized PredicateExpressions.NilLiteral.encode(to:)(a1);
}

uint64_t PredicateExpressions.NilLiteral.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.NilLiteral<A>( uint64_t a1)
{
  return PredicateExpressions.NilLiteral.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.NilLiteral<A>( void *a1)
{
  return specialized PredicateExpressions.NilLiteral.encode(to:)(a1);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.NilLiteral<A>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return PredicateExpressions.NilLiteral.evaluate(_:)(a1, a2);
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  unint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000LL) != 0
    || (v3 & 0x4000000000000000LL) != 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }

  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)((*v1 & 0xFFFFFFFFFFFFF8LL) + 0x10) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = &v5[5 * a1];
    __int128 v9 = *((_OWORD *)v8 + 3);
    *(_OWORD *)a2 = *((_OWORD *)v8 + 2);
    *(_OWORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v9;
    *(void *)(a2 + 32) = v8[8];
    if ((uint64_t)(v7 - a1) >= 0)
    {
      uint64_t result = (uint64_t)memmove(v8 + 4, v8 + 9, 40 * (v7 - a1));
      _OWORD v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}