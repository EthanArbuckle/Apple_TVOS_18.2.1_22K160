LABEL_231:
                    free(v42);
                    return;
                  }

                  if ((HIWORD(v194) & 0xFC00) != 0xDC00)
                  {
                    a1[3] = v5;
                    if (v191)
                    {
                      v168 = a1[6];
                      v31 = v5 >= v168;
                      v169 = v5 - v168;
                      if (v31) {
                        v170 = v169;
                      }
                      else {
                        v170 = 0LL;
                      }
                      v171 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Invalid surrogate pair in unicode escape sequence",  a1[5],  v170);
                      v172 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
                      v200 = @"NSDebugDescription";
                      v201 = @"NSJSONSerializationErrorIndex";
                      v195 = v171;
                      v196 = v172;
                      *v191 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
                    }

                    goto LABEL_231;
                  }

                  v188 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  &v194,  4LL,  2483028224LL,  0LL);
                  v56 = -[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:]( v188,  "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",  &v42[v44],  6LL,  v199,  4LL,  0LL,  0LL,  -[NSString length](v188, "length"),  0LL);

                  if (!v56)
                  {
                    a1[3] = v5;
                    if (v191)
                    {
                      v173 = a1[6];
                      v31 = v5 >= v173;
                      v174 = v5 - v173;
                      if (v31) {
                        v175 = v174;
                      }
                      else {
                        v175 = 0LL;
                      }
                      v176 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unable to convert hex escape sequence (with high character) to UTF8-encoded character",  a1[5],  v175);
                      v177 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
                      v200 = @"NSDebugDescription";
                      v201 = @"NSJSONSerializationErrorIndex";
                      v195 = v176;
                      v196 = v177;
                      *v191 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
                    }

                    goto LABEL_231;
                  }

                  v57 = v199[0];
                  v5 += 10LL;
                }

                else
                {
                  v189 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  &v194,  2LL,  2483028224LL,  0LL);
                  v63 = -[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:]( v189,  "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",  &v42[v44],  6LL,  v199,  4LL,  0LL,  0LL,  -[NSString length](v189, "length"),  0LL);

                  if (!v63)
                  {
                    a1[3] = v5;
                    if (v191)
                    {
                      v158 = a1[6];
                      v31 = v5 >= v158;
                      v159 = v5 - v158;
                      if (v31) {
                        v160 = v159;
                      }
                      else {
                        v160 = 0LL;
                      }
                      v161 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unable to convert hex escape sequence (no high character) to UTF8-encoded character.",  a1[5],  v160);
                      v162 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
                      v200 = @"NSDebugDescription";
                      v201 = @"NSJSONSerializationErrorIndex";
                      v195 = v161;
                      v196 = v162;
                      *v191 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
                    }

                    goto LABEL_231;
                  }

                  v57 = v199[0];
                  v5 += 4LL;
                }

                v44 = v44 + v57 - 1;
                break;
              default:
                if (v48 == 98)
                {
                  v50 = 8;
                }

                else
                {
                  if (v48 != 102) {
                    goto LABEL_104;
                  }
                  v50 = 12;
                }

                goto LABEL_152;
            }

            goto LABEL_153;
          }

          if (v48 == 34)
          {
            v42[v44] = 34;
          }

          else
          {
            if (v48 == 47)
            {
              v50 = 47;
            }

            else if (v48 == 92)
            {
              v50 = 92;
            }

            else
            {
LABEL_104:
              v51 = a1[1];
              v52 = v51 & 8;
              if (v48 == 120 && v52 != 0)
              {
                v58 = v46[v49];
                v59 = v46[v5 + 3];
                v60 = v58 - 48;
                if ((v58 - 48) >= 0xAu
                  && (v58 - 65 <= 0x25 ? (v61 = ((1LL << (v58 - 65)) & 0x3F0000003FLL) == 0) : (v61 = 1),
                      v61)
                  || (v62 = v59 - 48, (v59 - 48) >= 0xAu)
                  && (v59 - 65 > 0x25 || ((1LL << (v59 - 65)) & 0x3F0000003FLL) == 0))
                {
                  a1[3] = v5;
                  if (v191)
                  {
                    v183 = a1[6];
                    v31 = v5 >= v183;
                    v184 = v5 - v183;
                    if (v31) {
                      v185 = v184;
                    }
                    else {
                      v185 = 0LL;
                    }
                    v186 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unable to convert hex ('x') escape sequence character",  a1[5],  v185);
                    v187 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
                    v200 = @"NSDebugDescription";
                    v201 = @"NSJSONSerializationErrorIndex";
                    v195 = v186;
                    v196 = v187;
                    *v191 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
                  }

                  goto LABEL_231;
                }

                if ((v58 - 48) >= 0xAu)
                {
                  if ((v58 - 65) > 5u)
                  {
                    v60 = v58 - 87;
                  }

                  else
                  {
                    v60 = v58 - 55;
                  }
                }

                if ((v59 - 48) >= 0xAu)
                {
                  if ((v59 - 65) > 5u)
                  {
                    if ((v59 - 97) > 5u)
                    {
LABEL_305:
                      __break(1u);
                      return;
                    }

                    v62 = v59 - 87;
                  }

                  else
                  {
                    v62 = v59 - 55;
                  }
                }

                if (!(v62 | (16 * v60)))
                {
                  a1[3] = v5;
                  if (v191)
                  {
                    v148 = a1[6];
                    v31 = v5 >= v148;
                    v149 = v5 - v148;
                    if (v31) {
                      v150 = v149;
                    }
                    else {
                      v150 = 0LL;
                    }
                    v151 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unsupported escaped (hex) null",  a1[5],  v150);
                    v152 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
                    v200 = @"NSDebugDescription";
                    v201 = @"NSJSONSerializationErrorIndex";
                    v195 = v151;
                    v196 = v152;
                    *v191 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
                  }

                  goto LABEL_231;
                }

                v42[v44] = v62 | (16 * v60);
                v5 += 2LL;
                goto LABEL_153;
              }

              if (v48 != 39 || v52 == 0)
              {
                if (v48 == 48 && (v51 & 8) != 0)
                {
                  a1[3] = v5;
                  if (v191)
                  {
                    v163 = a1[6];
                    v31 = v5 >= v163;
                    v164 = v5 - v163;
                    if (v31) {
                      v165 = v164;
                    }
                    else {
                      v165 = 0LL;
                    }
                    v166 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unsupported escaped null",  a1[5],  v165);
                    v167 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
                    v200 = @"NSDebugDescription";
                    v201 = @"NSJSONSerializationErrorIndex";
                    v195 = v166;
                    v196 = v167;
                    *v191 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
                  }

                  goto LABEL_231;
                }

                if (v48 != 10 || (v51 & 8) == 0)
                {
                  if (v48 != 13 || (v51 & 8) == 0)
                  {
                    a1[3] = v5;
                    if (v191)
                    {
                      v178 = a1[6];
                      v31 = v5 >= v178;
                      v179 = v5 - v178;
                      if (v31) {
                        v180 = v179;
                      }
                      else {
                        v180 = 0LL;
                      }
                      v181 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Invalid escape sequence",  a1[5],  v180);
                      v182 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
                      v200 = @"NSDebugDescription";
                      v201 = @"NSJSONSerializationErrorIndex";
                      v195 = v181;
                      v196 = v182;
                      *v191 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
                    }

                    goto LABEL_231;
                  }

                  if (v49 < v39 && v46[v49] == 10) {
                    ++v5;
                  }
                }

    swift_bridgeObjectRelease();
    v199 = 0;
    i = 918LL;
    goto LABEL_235;
  }

  if ((*(_BYTE *)(v6 + 168) & 1) != 0) {
    v102 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
  }
  else {
    v102 = String.subscript.getter();
  }
  v104 = MEMORY[0x186E1B610](v102);
  v106 = v105;
  swift_bridgeObjectRelease();
  v107 = specialized Collection.first.getter(v104, v106);
  swift_bridgeObjectRelease();
  if ((v107 & 0x1FF) == 0x2F)
  {
    if ((*(_BYTE *)(v6 + 168) & 1) != 0) {
      v108 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      v108 = String.subscript.getter();
    }
    v120 = MEMORY[0x186E1B610](v108);
    v122 = v121;
    swift_bridgeObjectRelease();
    v2 = String._removingDotSegments.getter(v120, v122);
    v1 = v123;
    swift_bridgeObjectRelease();
    BYTE8(v208) = 0;
    BYTE14(v208) = 0;
    if ((v1 & 0x1000000000000000LL) != 0)
    {
      *(void *)&v211 = v2;
      *((void *)&v211 + 1) = v1;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v171 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v172 = (unsigned __int16 *)objc_msgSend(v171, sel__fastCharacterContents);
      v173 = v171;
      if (v172)
      {
        *(void *)&v211 = v2;
        *((void *)&v211 + 1) = v1;
        StringProtocol._ephemeralString.getter();
        v174 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v175 = objc_msgSend(v174, sel_length);
        swift_unknownObjectRelease();
        v176 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v172,  (uint64_t)v175,  0x10u,  1);
      }

      else
      {
        v176 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v2, v1, 0x10u, 1);
      }

      v188 = v176;
      swift_bridgeObjectRelease_n();
      v5 = &v211;
      v4 = (unint64_t)&v208;
      v3 = &v203;
      if ((v188 & 1) != 0) {
        goto LABEL_162;
      }
    }

    else
    {
      v3 = &v203;
      if ((v1 & 0x2000000000000000LL) != 0)
      {
        v125 = HIBYTE(v1) & 0xF;
        *(void *)&v211 = v2;
        *((void *)&v211 + 1) = v1 & 0xFFFFFFFFFFFFFFLL;
        v124 = (char *)&v211;
      }

      else
      {
        if ((v2 & 0x1000000000000000LL) != 0)
        {
          v124 = (char *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v125 = v2 & 0xFFFFFFFFFFFFLL;
          goto LABEL_161;
        }

LABEL_98:
                v50 = 10;
              }

              else
              {
                v50 = 39;
              }
            }

    Hasher._combine(_:)(0);
    v87 = 0LL;
LABEL_99:

    v92 = *((void *)&v144 + 1);
    if (v92)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v132, v92);
      swift_bridgeObjectRelease();
    }

    else
    {
      Hasher._combine(_:)(0);
    }

    v93 = v145;
    if ((void)v145)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v132, v93);
      swift_bridgeObjectRelease();
      if (!*(void *)&v146[0]) {
        goto LABEL_106;
      }
    }

    else
    {
      Hasher._combine(_:)(0);
      if (!*(void *)&v146[0])
      {
LABEL_106:
        Hasher._combine(_:)(0);
        goto LABEL_107;
      }
    }

    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
LABEL_107:
    if (BYTE8(v146[0]) == 2)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      v94 = BYTE8(v146[0]) & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v94);
    }

    if (BYTE9(v146[0]) == 2)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      v95 = BYTE9(v146[0]) & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v95);
    }

    if (BYTE10(v146[0]) == 2)
    {
      v96 = 0;
    }

    else
    {
      v96 = BYTE10(v146[0]) & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v96);
    if (BYTE11(v146[0]) == 2)
    {
      v97 = 0;
    }

    else
    {
      v98 = BYTE11(v146[0]) & 1;
      Hasher._combine(_:)(1u);
      v97 = v98;
    }

    Hasher._combine(_:)(v97);
    outlined retain of LocalePreferences?( (uint64_t)v147,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    v7 = v110;
    v5 = v111;
LABEL_120:
    v99 = Hasher._finalize()();
    v100 = -1LL << *(_BYTE *)(v7 + 32);
    v101 = v99 & ~v100;
    v102 = v101 >> 6;
    if (((-1LL << v101) & ~*(void *)(v11 + 8 * (v101 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1LL << v101) & ~*(void *)(v11 + 8 * (v101 >> 6)))) | v101 & 0x7FFFFFFFFFFFFFC0LL;
      v14 = v118;
    }

    else
    {
      v103 = 0;
      v104 = (unint64_t)(63 - v100) >> 6;
      v14 = v118;
      do
      {
        if (++v102 == v104 && (v103 & 1) != 0)
        {
          __break(1u);
          goto LABEL_135;
        }

        v105 = v102 == v104;
        if (v102 == v104) {
          v102 = 0LL;
        }
        v103 |= v105;
        v106 = *(void *)(v11 + 8 * v102);
      }

      while (v106 == -1);
      v13 = __clz(__rbit64(~v106)) + (v102 << 6);
    }

    *(void *)&v138 = v14;
    *((void *)&v138 + 1) = v114;
    outlined init with take of LocalePreferences?( (uint64_t)v147,  (uint64_t)&v139,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    v15 = (_OWORD *)(*(void *)(v7 + 48) + 160 * v13);
    v16 = v139;
    *v15 = v138;
    v15[1] = v16;
    v17 = v143;
    v19 = v140;
    v18 = v141;
    v15[4] = v142;
    v15[5] = v17;
    v15[2] = v19;
    v15[3] = v18;
    v20 = v144;
    v21 = v145;
    v22 = v146[0];
    *(_OWORD *)((char *)v15 + 140) = *(_OWORD *)((char *)v146 + 12);
    v15[7] = v21;
    v15[8] = v22;
    v15[6] = v20;
    *(void *)(*(void *)(v7 + 56) + 8 * v13) = v115;
    ++*(void *)(v7 + 16);
    v10 = v116;
    v12 = v117;
  }

  outlined retain of LocalePreferences?( (uint64_t)v147,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v42 = v40 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v42 += 16LL;
    --v41;
  }

  while (v41);
  swift_bridgeObjectRelease();
  if (!*((void *)&v139 + 1)) {
    goto LABEL_35;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*((void *)&v140 + 1)) {
    goto LABEL_36;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v43 = v141;
  if (!(void)v141) {
    goto LABEL_37;
  }
LABEL_44:
  Hasher._combine(_:)(1u);
  v46 = 0LL;
  v47 = 0LL;
  v48 = v43 + 64;
  v49 = 1LL << *(_BYTE *)(v43 + 32);
  if (v49 < 64) {
    v50 = ~(-1LL << v49);
  }
  else {
    v50 = -1LL;
  }
  v51 = v50 & *(void *)(v43 + 64);
  v52 = (unint64_t)(v49 + 63) >> 6;
  v123 = v133;
  v125 = v132;
  v119 = v135;
  v121 = v134;
  v53 = v136;
  while (2)
  {
    if (v51)
    {
      v54 = __clz(__rbit64(v51));
      v51 &= v51 - 1;
      v55 = v54 | (v47 << 6);
LABEL_49:
      v56 = *(unsigned __int8 *)(*(void *)(v43 + 48) + v55);
      v57 = *(void *)(*(void *)(v43 + 56) + 8 * v55);
      v127 = v125;
      v128 = v123;
      v129 = v121;
      v130 = v119;
      v131 = v53;
      Hasher._combine(_:)(v56);
      Hasher._combine(_:)(v57);
      v46 ^= Hasher._finalize()();
      continue;
    }

    break;
  }

  v58 = v47 + 1;
  if (__OFADD__(v47, 1LL))
  {
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }

  if (v58 >= v52) {
    goto LABEL_65;
  }
  v59 = *(void *)(v48 + 8 * v58);
  ++v47;
  if (v59) {
    goto LABEL_64;
  }
  v47 = v58 + 1;
  if (v58 + 1 >= v52) {
    goto LABEL_65;
  }
  v59 = *(void *)(v48 + 8 * v47);
  if (v59) {
    goto LABEL_64;
  }
  v47 = v58 + 2;
  if (v58 + 2 >= v52) {
    goto LABEL_65;
  }
  v59 = *(void *)(v48 + 8 * v47);
  if (v59)
  {
LABEL_64:
    v51 = (v59 - 1) & v59;
    v55 = __clz(__rbit64(v59)) + (v47 << 6);
    goto LABEL_49;
  }

  v60 = v58 + 3;
  if (v60 < v52)
  {
    v59 = *(void *)(v48 + 8 * v60);
    if (!v59)
    {
      while (1)
      {
        v47 = v60 + 1;
        if (__OFADD__(v60, 1LL)) {
          break;
        }
        if (v47 >= v52) {
          goto LABEL_65;
        }
        v59 = *(void *)(v48 + 8 * v47);
        ++v60;
        if (v59) {
          goto LABEL_64;
        }
      }

  __break(1u);
  return result;
}

  v116 = URL.ParseStrategy.defaultValues.getter();
  if (*(void *)(v116 + 16) && (v117 = specialized __RawDictionaryStorage.find<A>(_:)(8LL), (v118 & 1) != 0))
  {
    v119 = (unint64_t *)(*(void *)(v116 + 56) + 16 * v117);
    v120 = *v119;
    v121 = v119[1];
    swift_bridgeObjectRetain();
  }

  else
  {
    v120 = 0LL;
    v121 = 0LL;
  }

  swift_bridgeObjectRelease();
  URLComponents._URLComponents.host.setter(v120, v121);
LABEL_103:
  *(void *)&v293 = v3;
  v122 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
  v123 = *((_BYTE *)a1 + 8);
  v301 = *((_BYTE *)a1 + 9);
  v300 = *((_BYTE *)a1 + 10);
  v299 = *((_BYTE *)a1 + 11);
  v298 = *((_BYTE *)a1 + 12);
  v124 = *((_BYTE *)a1 + 13);
  v125 = *((unsigned __int8 *)a1 + 14);
  v126 = *((unsigned __int8 *)a1 + 15);
  v127 = *((unsigned __int8 *)a1 + 16);
  *(_DWORD *)v325 = *(_DWORD *)((char *)a1 + 17);
  *(_DWORD *)&v325[3] = *((_DWORD *)a1 + 5);
  v129 = *((void *)a1 + 3);
  v128 = *((void *)a1 + 4);
  v130 = *((void *)a1 + 5);
  v131 = *((void *)a1 + 6);
  v132 = *((void *)a1 + 7);
  v133 = *((void *)a1 + 8);
  v134 = *((void *)a1 + 9);
  v135 = *((void *)a1 + 10);
  v136 = *((void *)a1 + 11);
  v137 = *((_BYTE *)a1 + 96);
  *(_DWORD *)v336 = *(_DWORD *)((char *)a1 + 97);
  *(_DWORD *)&v336[3] = *((_DWORD *)a1 + 25);
  v139 = *((void *)a1 + 13);
  v138 = *((void *)a1 + 14);
  v140 = *((void *)a1 + 15);
  v141 = *((void *)a1 + 16);
  BYTE1(v323) = v301;
  BYTE2(v323) = v300;
  v143 = *((void *)a1 + 17);
  v142 = *((void *)a1 + 18);
  BYTE3(v323) = v299;
  v144 = *((unsigned __int8 *)a1 + 152);
  BYTE4(v323) = v298;
  v145 = *((unsigned __int8 *)a1 + 153);
  LOBYTE(v323) = v123;
  v272 = v123 & 1;
  BYTE5(v323) = v124;
  v146 = v124 & 1;
  v335 = v137;
  v147 = v137 & 1;
  v291 = v129;
  v292 = v122;
  v322 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v122;
  v278 = v126;
  v279 = v125;
  BYTE6(v323) = v125;
  HIBYTE(v323) = v126;
  v277 = v127;
  v324 = v127;
  v326 = v129;
  v289 = v130;
  v290 = v128;
  v327 = v128;
  v328 = v130;
  v287 = v132;
  v288 = v131;
  v329 = v131;
  v330 = v132;
  v285 = v134;
  v286 = v133;
  v331 = v133;
  v332 = v134;
  v283 = v139;
  v284 = v135;
  v333 = v135;
  v148 = v136;
  v334 = v136;
  v337 = v139;
  v281 = v140;
  v282 = v138;
  v338 = v138;
  v339 = v140;
  v280 = v141;
  v340 = v141;
  v276 = v143;
  v341 = v143;
  v273 = v142;
  v342 = v142;
  v274 = v144;
  v275 = v145;
  v343 = v144;
  v344 = v145;
  URLComponents.port.getter();
  if ((v149 & 1) == 0)
  {
    v150 = v146;
    v151 = v272;
    goto LABEL_109;
  }

  v152 = URL.ParseStrategy.defaultValues.getter();
  v153 = specialized Dictionary.subscript.getter(16LL, v152);
  v155 = v154;
  swift_bridgeObjectRelease();
  v150 = v146;
  v151 = v272;
  if (v155)
  {
    v156 = specialized FixedWidthInteger.init(_:)(v153, v155);
    v148 = v156;
    v147 = v157;
    *((_BYTE *)a1 + 8) = 0;
    *((_BYTE *)a1 + 13) = 0;
    if ((v157 & 1) != 0 || (v156 & 0x8000000000000000LL) == 0)
    {
      v150 = 0;
      v151 = 0;
      *((void *)a1 + 11) = v156;
      *((_BYTE *)a1 + 96) = v157 & 1;
      goto LABEL_109;
    }

    LODWORD(v271) = 0;
    v270 = 764LL;
LABEL_201:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

    *v93 = v0;
    v93[1] = v94;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }

  v3 = *(void *)(v0 + 16);
  if (*(void *)(*(void *)(v3 + 24) + 16LL))
  {
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v5;
    swift_bridgeObjectRelease();
    v7 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(void *)(v3 + 24);
    if ((v7 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v8 + 16));
    }

    else
    {
      if (*(void *)(v8 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v36 = (void *)swift_allocObject();
        v57 = _swift_stdlib_malloc_size(v36);
        v36[2] = 0LL;
        v36[3] = 2 * v57 - 64;
      }

      else
      {
        v36 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v36;
      swift_bridgeObjectRelease();
    }

    goto LABEL_58;
  }

  v28 = swift_isUniquelyReferenced_nonNull_native();
  v29 = *(char **)(v3 + 24);
  if ((v28 & 1) == 0)
  {
    if (*((void *)v29 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v43 = (void *)swift_allocObject();
      v59 = _swift_stdlib_malloc_size(v43);
      v43[2] = 0LL;
      v43[3] = 2 * v59 - 64;
    }

    else
    {
      v43 = (void *)MEMORY[0x18961AFE8];
    }

    *(void *)(*(void *)(v0 + 16) + 24LL) = v43;
    swift_bridgeObjectRelease();
    v4 = 0LL;
    v6 = 0LL;
    goto LABEL_58;
  }

  v30 = *(void *)(v0 + 16);
  v31 = *((void *)v29 + 2);
  v32 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v30 + 24) = v29;
  if ((v32 & 1) == 0)
  {
    v33 = *(void *)(v0 + 16);
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v31, 1, v29);
    *(void *)(v33 + 24) = v29;
  }

  if (!v31)
  {
LABEL_29:
    v4 = 0LL;
    v6 = 0LL;
    *(void *)(*(void *)(v0 + 16) + 24LL) = v29;
LABEL_58:
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = v6;
    v60 = *(void *)(v0 + 16);
    v61 = *(unsigned __int8 **)(v60 + 8);
    if (v61 != *(unsigned __int8 **)(v60 + 16))
    {
      v63 = *v61;
      v62 = *v61;
      *(void *)(v60 + 8) = v61 + 1;
      if (v63 != 10)
      {
        v64 = *(void *)(v0 + 16);
        *(_BYTE *)(v64 + 32) = v62;
        *(_BYTE *)(v64 + 33) = 0;
      }

      v10 = *(void *)(v0 + 48);
      if (v10)
      {
        v11 = *(void *)(v0 + 40);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
      }

      return swift_task_switch();
    }

    v93 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v93;
    v94 = specialized AsyncLineSequence.AsyncIterator.next();
    goto LABEL_98;
  }

  v34 = *((void *)v29 + 2);
  v35 = v34 - v31;
  if (v34 - v31 >= 0)
  {
    memmove(v29 + 32, &v29[v31 + 32], v34 - v31);
    *((void *)v29 + 2) = v35;
    goto LABEL_29;
  }

  return _fatalErrorMessage(_:_:file:line:flags:)();
}

    *v93 = v0;
    v93[1] = v94;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }

  v3 = *(void *)(v0 + 16);
  if (*(void *)(*(void *)(v3 + 24) + 16LL))
  {
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v5;
    swift_bridgeObjectRelease();
    v7 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(void *)(v3 + 24);
    if ((v7 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v8 + 16));
    }

    else
    {
      if (*(void *)(v8 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v36 = (void *)swift_allocObject();
        v57 = _swift_stdlib_malloc_size(v36);
        v36[2] = 0LL;
        v36[3] = 2 * v57 - 64;
      }

      else
      {
        v36 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v36;
      swift_bridgeObjectRelease();
    }

    goto LABEL_58;
  }

  v28 = swift_isUniquelyReferenced_nonNull_native();
  v29 = *(char **)(v3 + 24);
  if ((v28 & 1) == 0)
  {
    if (*((void *)v29 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v43 = (void *)swift_allocObject();
      v59 = _swift_stdlib_malloc_size(v43);
      v43[2] = 0LL;
      v43[3] = 2 * v59 - 64;
    }

    else
    {
      v43 = (void *)MEMORY[0x18961AFE8];
    }

    *(void *)(*(void *)(v0 + 16) + 24LL) = v43;
    swift_bridgeObjectRelease();
    v4 = 0LL;
    v6 = 0LL;
    goto LABEL_58;
  }

  v30 = *(void *)(v0 + 16);
  v31 = *((void *)v29 + 2);
  v32 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v30 + 24) = v29;
  if ((v32 & 1) == 0)
  {
    v33 = *(void *)(v0 + 16);
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v31, 1, v29);
    *(void *)(v33 + 24) = v29;
  }

  if (!v31)
  {
LABEL_29:
    v4 = 0LL;
    v6 = 0LL;
    *(void *)(*(void *)(v0 + 16) + 24LL) = v29;
LABEL_58:
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = v6;
    v60 = *(void *)(v0 + 16);
    v61 = *(unsigned __int8 **)(v60 + 8);
    if (v61 != *(unsigned __int8 **)(v60 + 16))
    {
      v63 = *v61;
      v62 = *v61;
      *(void *)(v60 + 8) = v61 + 1;
      if (v63 != 10)
      {
        v64 = *(void *)(v0 + 16);
        *(_BYTE *)(v64 + 32) = v62;
        *(_BYTE *)(v64 + 33) = 0;
      }

      v10 = *(void *)(v0 + 48);
      if (v10)
      {
        v11 = *(void *)(v0 + 40);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
      }

      return swift_task_switch();
    }

    v93 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v93;
    v94 = specialized AsyncLineSequence.AsyncIterator.next();
    goto LABEL_98;
  }

  v34 = *((void *)v29 + 2);
  v35 = v34 - v31;
  if (v34 - v31 >= 0)
  {
    memmove(v29 + 32, &v29[v31 + 32], v34 - v31);
    *((void *)v29 + 2) = v35;
    goto LABEL_29;
  }

  return _fatalErrorMessage(_:_:file:line:flags:)();
}

    *v93 = v0;
    v93[1] = v94;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }

  v3 = *(void *)(v0 + 16);
  if (*(void *)(*(void *)(v3 + 24) + 16LL))
  {
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v5;
    swift_bridgeObjectRelease();
    v7 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(void *)(v3 + 24);
    if ((v7 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v8 + 16));
    }

    else
    {
      if (*(void *)(v8 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v36 = (void *)swift_allocObject();
        v57 = _swift_stdlib_malloc_size(v36);
        v36[2] = 0LL;
        v36[3] = 2 * v57 - 64;
      }

      else
      {
        v36 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v36;
      swift_bridgeObjectRelease();
    }

    goto LABEL_58;
  }

  v28 = swift_isUniquelyReferenced_nonNull_native();
  v29 = *(char **)(v3 + 24);
  if ((v28 & 1) == 0)
  {
    if (*((void *)v29 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v43 = (void *)swift_allocObject();
      v59 = _swift_stdlib_malloc_size(v43);
      v43[2] = 0LL;
      v43[3] = 2 * v59 - 64;
    }

    else
    {
      v43 = (void *)MEMORY[0x18961AFE8];
    }

    *(void *)(*(void *)(v0 + 16) + 24LL) = v43;
    swift_bridgeObjectRelease();
    v4 = 0LL;
    v6 = 0LL;
    goto LABEL_58;
  }

  v30 = *(void *)(v0 + 16);
  v31 = *((void *)v29 + 2);
  v32 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v30 + 24) = v29;
  if ((v32 & 1) == 0)
  {
    v33 = *(void *)(v0 + 16);
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v31, 1, v29);
    *(void *)(v33 + 24) = v29;
  }

  if (!v31)
  {
LABEL_29:
    v4 = 0LL;
    v6 = 0LL;
    *(void *)(*(void *)(v0 + 16) + 24LL) = v29;
LABEL_58:
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = v6;
    v60 = *(void *)(v0 + 16);
    v61 = *(unsigned __int8 **)(v60 + 8);
    if (v61 != *(unsigned __int8 **)(v60 + 16))
    {
      v63 = *v61;
      v62 = *v61;
      *(void *)(v60 + 8) = v61 + 1;
      if (v63 != 10)
      {
        v64 = *(void *)(v0 + 16);
        *(_BYTE *)(v64 + 32) = v62;
        *(_BYTE *)(v64 + 33) = 0;
      }

      v10 = *(void *)(v0 + 48);
      if (v10)
      {
        v11 = *(void *)(v0 + 40);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
      }

      return swift_task_switch();
    }

    v93 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v93;
    v94 = specialized AsyncLineSequence.AsyncIterator.next();
    goto LABEL_98;
  }

  v34 = *((void *)v29 + 2);
  v35 = v34 - v31;
  if (v34 - v31 >= 0)
  {
    memmove(v29 + 32, &v29[v31 + 32], v34 - v31);
    *((void *)v29 + 2) = v35;
    goto LABEL_29;
  }

  return _fatalErrorMessage(_:_:file:line:flags:)();
}

                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              NSDecimal.asVariableLengthInteger()(v250, v249, v248);
                              v34 = v114;
                              NSDecimal.asVariableLengthInteger()(v247, v246, v245);
                              v40 = v115;
                              v116 = static Array._allocateBufferUninitialized(minimumCapacity:)();
                              v84 = v116;
                              *(void *)(v116 + 32) = 0LL;
                              v90 = v116 + 32;
                              *(void *)(v116 + 16) = 8LL;
                              *(void *)(v116 + 40) = 0LL;
                              v93 = *(void *)(v34 + 16);
                              v89 = *(void *)(v40 + 16);
                              if (v89 >= v93) {
                                v117 = *(void *)(v34 + 16);
                              }
                              else {
                                v117 = *(void *)(v40 + 16);
                              }
                              if (v117)
                              {
                                v94 = v34 + 32;
                                v118 = (*(unsigned __int16 *)(v34 + 32) | 0x10000) - *(unsigned __int16 *)(v40 + 32);
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)v90 = *(_WORD *)(v34 + 32) - *(_WORD *)(v40 + 32);
                                v91 = v117 - 1;
                                v15 = v243;
                                LOWORD(v83) = v244;
                                if (!v91)
                                {
                                  v119 = 1LL;
                                  goto LABEL_276;
                                }

                                v118 = v92 + *(unsigned __int16 *)(v34 + 34) - *(unsigned __int16 *)(v40 + 34) + 0xFFFF;
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)(v116 + 34) = v118;
                                if (v91 == 1)
                                {
                                  v119 = 2LL;
                                  goto LABEL_276;
                                }

                                v86 = *(unsigned __int16 *)(v40 + 36);
                                v118 = v92 + *(unsigned __int16 *)(v34 + 36) - v86 + 0xFFFF;
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)(v116 + 36) = v118;
                                if (v91 == 2)
                                {
                                  v119 = 3LL;
                                  goto LABEL_276;
                                }

                                v118 = v92 + *(unsigned __int16 *)(v34 + 38) - *(unsigned __int16 *)(v40 + 38) + 0xFFFF;
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)(v116 + 38) = v118;
                                if (v91 == 3)
                                {
                                  v119 = 4LL;
                                  goto LABEL_276;
                                }

                                v86 = *(unsigned __int16 *)(v40 + 40);
                                v118 = v92 + *(unsigned __int16 *)(v34 + 40) - v86 + 0xFFFF;
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)(v116 + 40) = v118;
                                if (v91 == 4)
                                {
                                  v119 = 5LL;
                                  goto LABEL_276;
                                }

                                goto LABEL_262;
                              }

                              v15 = v243;
                              LOWORD(v83) = v244;
                              if (v93)
                              {
                                v119 = 0LL;
                                goto LABEL_281;
                              }

                              if (v89)
                              {
                                v119 = 0LL;
                                LODWORD(v92) = 1;
                                goto LABEL_289;
                              }

                              v230 = 8LL;
LABEL_298:
                              if (!*(_WORD *)(v90 + 2 * v230 - 2))
                              {
                                do
                                {
                                  *(void *)(v84 + 16) = v230 - 1;
                                  if (v230 == 1) {
                                    break;
                                  }
                                }

                                while (!*(unsigned __int16 *)(v84 + 28 + 2 * v230--));
                              }

        if (v74) {
          goto LABEL_138;
        }
        goto LABEL_104;
      }

          if (!(_DWORD)v60) {
            goto LABEL_105;
          }
          v86 = *(void *)(v50 + 16);
          if (v86)
          {
LABEL_100:
            if (!v53[v86 - 1])
            {
              do
              {
                *(void *)(v50 + 16) = v86 - 1;
                if (v86 == 1) {
                  break;
                }
              }

              while (!*(unsigned __int16 *)(v50 + 28 + 2 * v86--));
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v91 = v54[2];
          if (!HIDWORD(v91))
          {
            _So9NSDecimala__length_setter(v91, &v137);
            LODWORD(v135) = v8;
            WORD2(v135) = v5;
            WORD3(v135) = v62;
            WORD4(v135) = v11;
            WORD5(v135) = v6;
            WORD6(v135) = v9;
            HIWORD(v135) = v10;
            LOWORD(v136) = v105;
            HIWORD(v136) = v14;
            v92 = _So9NSDecimala__isNegative_getter(&v135);
            _So9NSDecimala__isNegative_setter(v92, &v137);
            v93._rawValue = v54;
            goto LABEL_146;
          }

              __break(1u);
LABEL_99:
              __break(1u);
              goto LABEL_100;
            }
          }

          else if (v11)
          {
            goto LABEL_71;
          }

          __break(1u);
          goto LABEL_81;
        }

          Hasher._combine(_:)(0);
          if (v79) {
            goto LABEL_94;
          }
          goto LABEL_99;
        }

          Hasher._combine(_:)(0);
          if (v79) {
            goto LABEL_94;
          }
          goto LABEL_99;
        }

          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_141;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          v127 = (int)POSIXErrorCode.rawValue.getter();
          v128 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          v129 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v126 = objc_msgSend(v128, sel_initWithDomain_code_userInfo_, v129, v127, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v130 = objc_msgSend(v126, sel_domain);
          v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
          v133 = v132;

          if (v131 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v133 == v134)
          {
            goto LABEL_105;
          }

          v136 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v136 & 1) == 0)
          {
            __break(1u);
LABEL_105:
            swift_bridgeObjectRelease_n();
          }

          v5 = v158;
          goto LABEL_107;
      }
    }

    if (!*(void *)(v21 + 48)) {
      goto LABEL_137;
    }
    v33 = String.init(cString:)();
    v35 = v34;
    outlined consume of _FTSSequence.Element?(v21, v22, v23, v24);
    if (!v25)
    {
      v21 = _FTSSequence.Iterator.next()();
      v22 = v68;
      v23 = v69;
      v24 = v70;
      v25 = v35;
      v26 = v33;
      if (v70 == 0xFF)
      {
        v5 = (const char *)v27;
        goto LABEL_82;
      }

      goto LABEL_12;
    }

    v163 = v33;
    v164 = v35;
    v161 = v26;
    v162 = v25;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    Collection<>.trimmingPrefix<A>(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 = v165;
    v37 = v166;
    v38 = v168;
    v39 = v166 >> 14;
    if (v166 >> 14 == v165 >> 14)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }

    v40 = v167;
    swift_bridgeObjectRetain();
    v155 = v40;
    v41 = Substring.subscript.getter();
    v43 = v42;
    swift_bridgeObjectRelease();
    if (v41 == 47 && v43 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
LABEL_27:
      v45 = Substring.index(_:offsetBy:limitedBy:)();
      if ((v46 & 1) != 0) {
        v45 = v37;
      }
      if (v39 < v45 >> 14) {
        goto LABEL_135;
      }
      v47 = Substring.subscript.getter();
      v49 = v48;
      v51 = v50;
      v53 = v52;
      swift_bridgeObjectRelease();
      v54 = MEMORY[0x186E1B610](v47, v49, v51, v53);
      v56 = v55;
      swift_bridgeObjectRelease();
      v57 = v159;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v57[2] + 1LL,  1,  v57);
      }
      v59 = v57[2];
      v58 = v57[3];
      if (v59 >= v58 >> 1) {
        v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v58 > 1),  v59 + 1,  1,  v57);
      }
      v57[2] = v59 + 1;
      v159 = v57;
      v60 = &v57[2 * v59];
      v60[4] = v54;
      v61 = v60 + 4;
      goto LABEL_40;
    }

    v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v44 & 1) != 0) {
      goto LABEL_27;
    }
    v62 = MEMORY[0x186E1B610](v36, v37, v155, v38);
    v56 = v63;
    swift_bridgeObjectRelease();
    v64 = v159;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v64[2] + 1LL,  1,  v64);
    }
    v66 = v64[2];
    v65 = v64[3];
    if (v66 >= v65 >> 1) {
      v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v65 > 1),  v66 + 1,  1,  v64);
    }
    v64[2] = v66 + 1;
    v159 = v64;
    v67 = &v64[2 * v66];
    v67[4] = v62;
    v61 = v67 + 4;
LABEL_40:
    v61[1] = v56;
LABEL_15:
    v21 = _FTSSequence.Iterator.next()();
    v22 = v28;
    v23 = v29;
    v24 = v30;
  }

  while (v30 != 0xFF);
  v5 = (const char *)v159;
LABEL_82:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

  swift_bridgeObjectRelease();
  v35 = v95;
  if ((v21 & 1) != 0)
  {
LABEL_27:
    v21 = *(void *)(v41 + 56) + 16 * v35;
    swift_unknownObjectRelease();
    *(void *)v21 = v28;
    *(void *)(v21 + 8) = v3;
    goto LABEL_100;
  }

  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v13);
  v78 = *(void *)(v13 + 16);
  if (v78) {
    goto LABEL_66;
  }
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  v19 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v19);
  v80 = *(void *)(v19 + 16);
  if (!v80)
  {
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
  }

            if (v62 < 1 || (v58 & 1) == 0) {
              goto LABEL_148;
            }
            v57 = 0LL;
            v58 = 0;
            v59 = 0;
            v45 += v60 + 1;
            v56 = 1;
            if (v45 >= v21) {
              goto LABEL_245;
            }
            continue;
        }

        goto LABEL_104;
      }
    }

    v43 = 0LL;
    v44 = v18;
    while (1)
    {
      if (v43 < 0 || (v31 = v44 < 1, --v44, v31))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
        goto LABEL_252;
      }

      v45 = (unint64_t)&v17[++v43];
    }

            if (v62 < 1 || (v58 & 1) == 0) {
              goto LABEL_148;
            }
            v57 = 0LL;
            v58 = 0;
            v59 = 0;
            v45 += v60 + 1;
            v56 = 1;
            if (v45 >= v21) {
              goto LABEL_245;
            }
            continue;
        }

        goto LABEL_104;
      }
    }

    v43 = 0LL;
    v44 = v18;
    while (1)
    {
      if (v43 < 0 || (v31 = v44 < 1, --v44, v31))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
        goto LABEL_252;
      }

      v45 = (unint64_t)&v17[++v43];
    }

            if (v62 < 1 || (v58 & 1) == 0) {
              goto LABEL_148;
            }
            v57 = 0LL;
            v58 = 0;
            v59 = 0;
            v45 += v60 + 1;
            v56 = 1;
            if (v45 >= v21) {
              goto LABEL_245;
            }
            continue;
        }

        goto LABEL_104;
      }
    }

    v43 = 0LL;
    v44 = v18;
    while (1)
    {
      if (v43 < 0 || (v31 = v44 < 1, --v44, v31))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
        goto LABEL_252;
      }

      v45 = (unint64_t)&v17[++v43];
    }

            if (v62 < 1 || (v58 & 1) == 0) {
              goto LABEL_148;
            }
            v57 = 0LL;
            v58 = 0;
            v59 = 0;
            v45 += v60 + 1;
            v56 = 1;
            if (v45 >= v21) {
              goto LABEL_245;
            }
            continue;
        }

        goto LABEL_104;
      }
    }

    v43 = 0LL;
    v44 = v18;
    while (1)
    {
      if (v43 < 0 || (v31 = v44 < 1, --v44, v31))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
        goto LABEL_252;
      }

      v45 = (unint64_t)&v17[++v43];
    }

                    result = swift_release();
                    *v5 = v12;
LABEL_116:
                    *(void *)(v12 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
                    v86 = (unint64_t *)(*(void *)(v12 + 48) + 16 * a3);
                    *v86 = v8;
                    v86[1] = a2;
                    v87 = *(void *)(v12 + 16);
                    v88 = __OFADD__(v87, 1LL);
                    v89 = v87 + 1;
                    if (!v88)
                    {
                      *(void *)(v12 + 16) = v89;
                      return result;
                    }

LABEL_152:
            v42[v44] = v50;
          }

    v12 = (uint64_t)v61;
LABEL_42:
    LOBYTE(v86[0]) = v64;
    v86[1] = v77;
    v86[2] = v80;
    v86[3] = v82;
    v86[4] = v78;
    v86[5] = v81;
    v86[6] = v79;
    v86[7] = v76;
    v86[8] = v75;
    v86[9] = v74;
    v86[10] = v73;
    v86[11] = v72;
    v86[12] = v71;
    v86[13] = v70;
    v86[14] = v69;
    v86[15] = v67;
    v86[16] = v68;
    v87 = v66;
    v88 = v65;
    v89 = v63;
    v90 = v62;
    outlined release of LocalePreferences(v86);
    outlined retain of LocalePreferences?( (uint64_t)v122,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    if ((v35 & 1) != 0)
    {
LABEL_154:
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v9,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      return v11;
    }

                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    v35 = v39 | (v69 << 8);
                    v34 = v6;
                    if (!v1) {
                      goto LABEL_153;
                    }
                    goto LABEL_114;
                  }

                  v40 = v79[9];
                  swift_unknownObjectRetain_n();
                  v36 = v1;
                  while (1)
                  {
                    v50 = *(unsigned __int16 *)(v36 + 16);
                    if (!*(_WORD *)(v36 + 16)) {
                      goto LABEL_78;
                    }
                    v51 = *(void *)(v36 + 40);
                    v52 = v37 - v51;
                    if (__OFSUB__(v37, v51)) {
                      goto LABEL_175;
                    }
                    if (__OFADD__(v52, 1LL)) {
                      goto LABEL_176;
                    }
                    if (v52 + 1 <= 0)
                    {
                      v50 = 0LL;
                    }

                    else
                    {
                      if ((_DWORD)v50 == 1)
                      {
                        v37 -= v51;
LABEL_78:
                        if (v37) {
                          goto LABEL_172;
                        }
                        goto LABEL_79;
                      }

                      v53 = *(void *)(v36 + 64);
                      v32 = __OFSUB__(v52, v53);
                      v54 = v52 - v53;
                      if (v32) {
                        goto LABEL_178;
                      }
                      if (__OFADD__(v54, 1LL)) {
                        goto LABEL_179;
                      }
                      if (v54 + 1 >= 1)
                      {
                        if ((_DWORD)v50 != 2)
                        {
                          v55 = (void *)(v36 + 88);
                          v56 = 2LL;
                          while (v50 != v56)
                          {
                            v37 = v54 - *v55;
                            if (__OFSUB__(v54, *v55)) {
                              goto LABEL_161;
                            }
                            if (__OFADD__(v37, 1LL)) {
                              goto LABEL_162;
                            }
                            if (v37 + 1 < 1)
                            {
                              v50 = v56;
                              v37 = v54;
                              goto LABEL_79;
                            }

                            ++v56;
                            v55 += 3;
                            v54 = v37;
                            if (v50 == v56) {
                              goto LABEL_78;
                            }
                          }

    __break(1u);
    goto LABEL_153;
  }

  v97 = v27;
  v98 = v108 | (v27 << 32) | (v104 << 48);
  v103 = v120 | (v118 << 16) | (v116 << 32) | (v114 << 48);
  v102 = v112 | (v110 << 16);
  NSDecimal.asVariableLengthInteger()(v98, v103, v102);
  v52 = v51;
  v100 = v21 | (v22 << 16) | (v23 << 32) | (v24 << 48);
  v101 = v122 | (v106 << 32) | (v20 << 48);
  v99 = v25 | (v26 << 16);
  NSDecimal.asVariableLengthInteger()(v101, v100, v99);
  v39 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v52, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v39 == -1)
  {
    NSDecimal.asVariableLengthInteger()(v101, v100, v99);
    v56 = v55;
    NSDecimal.asVariableLengthInteger()(v98, v103, v102);
    v39 = v57;
    v58 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v58 + 32) = 0LL;
    v60 = (_WORD *)(v58 + 32);
    *(void *)(v58 + 16) = 8LL;
    v61._rawValue = (void *)v58;
    *(void *)(v58 + 40) = 0LL;
    v62 = *(void *)(v56 + 16);
    v63 = *(void *)(v39 + 16);
    if (v63 >= v62) {
      v64 = *(void *)(v56 + 16);
    }
    else {
      v64 = *(void *)(v39 + 16);
    }
    if (v64)
    {
      v65 = (*(unsigned __int16 *)(v56 + 32) | 0x10000) - *(unsigned __int16 *)(v39 + 32);
      v66 = HIWORD(v65);
      *v60 = *(_WORD *)(v56 + 32) - *(_WORD *)(v39 + 32);
      v67 = v64 - 1;
      if (v67)
      {
        v65 = v66 + *(unsigned __int16 *)(v56 + 34) - *(unsigned __int16 *)(v39 + 34) + 0xFFFF;
        v66 = HIWORD(v65);
        *(_WORD *)(v58 + 34) = v65;
        if (v67 == 1)
        {
          v68 = 2LL;
        }

        else
        {
          v59 = *(unsigned __int16 *)(v39 + 36);
          v65 = v66 + *(unsigned __int16 *)(v56 + 36) - v59 + 0xFFFF;
          v66 = HIWORD(v65);
          *(_WORD *)(v58 + 36) = v65;
          if (v67 == 2)
          {
            v68 = 3LL;
          }

          else
          {
            v65 = v66 + *(unsigned __int16 *)(v56 + 38) - *(unsigned __int16 *)(v39 + 38) + 0xFFFF;
            v66 = HIWORD(v65);
            *(_WORD *)(v58 + 38) = v65;
            if (v67 == 3)
            {
              v68 = 4LL;
            }

            else
            {
              v59 = *(unsigned __int16 *)(v39 + 40);
              v65 = v66 + *(unsigned __int16 *)(v56 + 40) - v59 + 0xFFFF;
              v66 = HIWORD(v65);
              *(_WORD *)(v58 + 40) = v65;
              if (v67 == 4)
              {
                v68 = 5LL;
              }

              else
              {
                v65 = v66 + *(unsigned __int16 *)(v56 + 42) - *(unsigned __int16 *)(v39 + 42) + 0xFFFF;
                v66 = HIWORD(v65);
                *(_WORD *)(v58 + 42) = v65;
                if (v67 == 5)
                {
                  v68 = 6LL;
                }

                else
                {
                  v59 = *(unsigned __int16 *)(v39 + 44);
                  v65 = v66 + *(unsigned __int16 *)(v56 + 44) - v59 + 0xFFFF;
                  v66 = HIWORD(v65);
                  *(_WORD *)(v58 + 44) = v65;
                  if (v67 == 6)
                  {
                    v68 = 7LL;
                  }

                  else
                  {
                    v82 = v66 + *(unsigned __int16 *)(v56 + 46) - *(unsigned __int16 *)(v39 + 46);
                    v65 = v82 + 0xFFFF;
                    *(_WORD *)(v58 + 46) = v82 - 1;
                    if (v67 != 7)
                    {
LABEL_158:
                      __break(1u);
                      goto LABEL_159;
                    }

                    v59 = v56;
                    v66 = HIWORD(v65);
                    v68 = 8LL;
                  }
                }
              }
            }
          }
        }
      }

      else
      {
        v68 = 1LL;
      }

      if (v68 >= v62) {
        goto LABEL_95;
      }
      if (!HIWORD(v65))
      {
        while (v68 < *(void *)(v58 + 16))
        {
          v83 = *(unsigned __int16 *)(v56 + 32 + 2 * v68);
          v59 = v83 + 0xFFFF;
          v60[v68] = v83 - 1;
          if (v62 - 1 == v68) {
            goto LABEL_102;
          }
          ++v68;
          if (v83) {
            goto LABEL_88;
          }
        }

        goto LABEL_150;
      }
    }

    else
    {
      if (!v62)
      {
        if (v63)
        {
          v68 = 0LL;
          v66 = 1;
          goto LABEL_96;
        }

        v80 = 8LL;
LABEL_105:
        if (!v60[v80 - 1])
        {
          do
          {
            *(void *)(v58 + 16) = v80 - 1;
            if (v80 == 1) {
              break;
            }
          }

          while (!*(unsigned __int16 *)(v58 + 28 + 2 * v80--));
        }

  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

              __break(1u);
LABEL_153:
              __break(1u);
              while (1)
              {
                v183 = v11;
                v184 = (void *)v16;
                v185 = 0;
                v192 = v10 & 1;
                if (v34 == v9) {
                  break;
                }
                LODWORD(v58) = *((unsigned __int8 *)&v193 + v16);
                v11 = (unint64_t *)v16;
LABEL_100:
                v3 = &v169;
                v59 = (uint64_t *)&v189;
                v60 = &v190;
                if ((_DWORD)v58 == 35)
                {
                  v58 = (char *)v11 + 1;
                  if (v4 >= (uint64_t)v11 + 1)
                  {
LABEL_122:
                    v188 = (unint64_t)v58;
                    goto LABEL_127;
                  }

                  goto LABEL_147;
                }

                if ((_DWORD)v58 != 63) {
                  goto LABEL_128;
                }
                a2 = (unint64_t)v11 + 1;
                if (v4 < (uint64_t)v11 + 1)
                {
                  __break(1u);
LABEL_147:
                  __break(1u);
                  goto LABEL_148;
                }

                v61 = specialized Collection<>.firstIndex(of:)(0x23u, (uint64_t)v11 + 1, v4, (uint64_t)&v193);
                if ((v62 & 1) != 0) {
                  goto LABEL_126;
                }
                *(void *)&v186 = a2;
                *((void *)&v186 + 1) = v61;
                v187 = 0;
                v58 = (char *)(v61 + 1);
                if (v4 >= v61 + 1) {
                  goto LABEL_122;
                }
                __break(1u);
LABEL_107:
                LOBYTE(v10) = 0;
                v34 = v4 - 1;
                v16 = (uint64_t)v11;
                while (1)
                {
                  v9 = v16;
                  LOBYTE(v10) = ((_DWORD)v58 == 37) | v10;
                  if (v34 == v16) {
                    break;
                  }
                  LODWORD(v58) = *((unsigned __int8 *)&v193 + ++v16);
                  if ((_DWORD)v58 == 35 || (_DWORD)v58 == 63) {
                    goto LABEL_124;
                  }
                }

                v16 = v4;
LABEL_124:
                if (v16 < (uint64_t)v11)
                {
                  __break(1u);
LABEL_126:
                  v59 = (uint64_t *)(v3 + 19);
                  v60 = (char *)(v3 + 20);
                  *(void *)&v186 = a2;
LABEL_127:
                  *v59 = v4;
                  *v60 = 0;
LABEL_128:
                  v22 = v169;
                  v23 = v170;
                  v30 = v171;
                  v136 = *(_OWORD *)(v2 + 24);
                  v29 = v174;
                  v28 = v176;
                  v130 = *(_OWORD *)(v2 + 72);
                  v132 = v175;
                  v27 = v179;
                  v20 = v180;
                  v24 = v181;
                  v18 = v182;
                  v19 = (int64_t)v183;
                  v4 = (uint64_t)v184;
                  v21 = v185;
                  v129 = v186;
                  v26 = v187;
                  v135 = v188;
                  v134 = v189;
                  v139 = v191 & 1;
                  v138 = HIBYTE(v191) & 1;
                  v128 = v192 & 1;
                  v14 = v190;
                  goto LABEL_129;
                }
              }

              v19 = (int64_t)v11;
              v57 = (char)v10;
              v4 = v16;
              goto LABEL_94;
            }

    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v20 = static _DictionaryStorage.allocate(capacity:)();
LABEL_156:
    v181 = v123 + 64;
    v147 = -1LL << *(_BYTE *)(v123 + 32);
    if (-v147 < 64) {
      v148 = ~(-1LL << -(char)v147);
    }
    else {
      v148 = -1LL;
    }
    v149 = v148 & *(void *)(v123 + 64);
    v178 = (unint64_t)(63 - v147) >> 6;
    v6 = v185;
    v150 = v20 + 64;
    swift_bridgeObjectRetain();
    swift_retain();
    v151 = 0LL;
    while (v149)
    {
      v154 = __clz(__rbit64(v149));
      v149 &= v149 - 1;
      v155 = v154 | (v151 << 6);
LABEL_180:
      v160 = (uint64_t *)(*(void *)(v123 + 48) + 16 * v155);
      v162 = *v160;
      v161 = v160[1];
      outlined init with copy of Any(*(void *)(v123 + 56) + 32 * v155, (uint64_t)&v195);
      *(void *)&v194 = v162;
      *((void *)&v194 + 1) = v161;
      v191 = v194;
      v192 = v195;
      v193 = v196;
      *(void *)&v190[0] = v162;
      *((void *)&v190[0] + 1) = v161;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      outlined init with take of Any(&v192, v185);
      v186 = *(_OWORD *)v182;
      v187 = v183;
      v188 = v184;
      outlined init with take of Any(v185, v189);
      *(_OWORD *)v182 = v186;
      v183 = v187;
      v184 = v188;
      outlined init with take of Any(v189, v190);
      outlined init with take of Any(v190, &v186);
      v21 = (unint64_t)v182;
      v163 = AnyHashable._rawHashValue(seed:)(*(void *)(v20 + 40));
      v164 = -1LL << *(_BYTE *)(v20 + 32);
      v165 = v163 & ~v164;
      v166 = v165 >> 6;
      if (((-1LL << v165) & ~*(void *)(v150 + 8 * (v165 >> 6))) != 0)
      {
        v152 = __clz(__rbit64((-1LL << v165) & ~*(void *)(v150 + 8 * (v165 >> 6)))) | v165 & 0x7FFFFFFFFFFFFFC0LL;
        goto LABEL_161;
      }

      v167 = 0;
      v168 = (unint64_t)(63 - v164) >> 6;
      do
      {
        if (++v166 == v168 && (v167 & 1) != 0)
        {
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
          goto LABEL_203;
        }

        v169 = v166 == v168;
        if (v166 == v168) {
          v166 = 0LL;
        }
        v167 |= v169;
        v170 = *(void *)(v150 + 8 * v166);
      }

      while (v170 == -1);
      v152 = __clz(__rbit64(~v170)) + (v166 << 6);
LABEL_161:
      *(void *)(v150 + ((v152 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v152;
      v153 = *(void *)(v20 + 48) + 40 * v152;
      *(_OWORD *)v153 = *(_OWORD *)v182;
      *(_OWORD *)(v153 + 16) = v183;
      *(void *)(v153 + 32) = v184;
      outlined init with take of Any(&v186, (_OWORD *)(*(void *)(v20 + 56) + 32 * v152));
      ++*(void *)(v20 + 16);
    }

    v156 = v151 + 1;
    if (__OFADD__(v151, 1LL)) {
      goto LABEL_201;
    }
    if (v156 < v178)
    {
      v157 = *(void *)(v181 + 8 * v156);
      v158 = v151 + 1;
      if (!v157)
      {
        v158 = v151 + 2;
        if (v151 + 2 >= v178) {
          break;
        }
        v157 = *(void *)(v181 + 8 * v158);
        if (!v157)
        {
          v158 = v151 + 3;
          if (v151 + 3 >= v178) {
            break;
          }
          v157 = *(void *)(v181 + 8 * v158);
          if (!v157)
          {
            v158 = v151 + 4;
            if (v151 + 4 >= v178) {
              break;
            }
            v157 = *(void *)(v181 + 8 * v158);
            if (!v157)
            {
              v159 = v151 + 5;
              if (v151 + 5 >= v178) {
                break;
              }
              v157 = *(void *)(v181 + 8 * v159);
              if (!v157)
              {
                while (1)
                {
                  v158 = v159 + 1;
                  if (__OFADD__(v159, 1LL)) {
                    break;
                  }
                  if (v158 >= v178) {
                    goto LABEL_189;
                  }
                  v157 = *(void *)(v181 + 8 * v158);
                  ++v159;
                  if (v157) {
                    goto LABEL_179;
                  }
                }

  __break(1u);
  return result;
}

      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }

    if (!v9) {
      break;
    }
LABEL_65:
    switch(v17)
    {
      case '0':
        v12 = 0;
        if (v9 == 1) {
          goto LABEL_130;
        }
        if (v9 != 2) {
          goto LABEL_7;
        }
        goto LABEL_8;
      case '1':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            v12 = 16;
            goto LABEL_8;
          }

    return 0LL;
  }

  return v4;
}

LABEL_153:
          ++v5;
          goto LABEL_154;
        }

        v44 = 0LL;
LABEL_187:
        v78 = off_189C61DB8;
        if ((a1[1] & 2LL) != 0) {
          v78 = off_189C61AC8;
        }
        v79 = (void *)[objc_alloc(*v78) initWithBytesNoCopy:v42 length:v44 encoding:4 freeWhenDone:1];
        if (!v79)
        {
          if (v191)
          {
            v92 = a1 + 3;
            v91 = a1[3];
            v93 = a1[6];
            v31 = v91 >= v93;
            v94 = v91 - v93;
            if (v31) {
              v95 = v94;
            }
            else {
              v95 = 0LL;
            }
            v96 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unable to convert data to string",  a1[5],  v95);
            v97 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  *v92);
            v200 = @"NSDebugDescription";
            v201 = @"NSJSONSerializationErrorIndex";
            v195 = v96;
            v196 = v97;
            *v191 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
          }

          goto LABEL_231;
        }

        a1[3] = v39 + v13;
        _setInCache(v192, v79, v17, (uint64_t)__s2, v190);
      }

      else
      {
        v76 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  *a1 + v5,  v18 - v5,  4LL);
        if (v76)
        {
          a1[3] = v39 + v13;
          _setInCache(v192, v76, v17, (uint64_t)__s2, v40);
        }

        else if (a3)
        {
          v85 = a1[3];
          v86 = a1[6];
          v31 = v85 >= v86;
          v87 = v85 - v86;
          if (v31) {
            v88 = v87;
          }
          else {
            v88 = 0LL;
          }
          v89 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unable to convert data to string",  a1[5],  v88);
          v90 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
          v200 = @"NSDebugDescription";
          v201 = @"NSJSONSerializationErrorIndex";
          v195 = v89;
          v196 = v90;
          *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
        }
      }
    }

    else
    {
      v77 = v8 ^ 1;
      if (v19 != 13) {
        v77 = 1;
      }
      if ((v77 & 1) == 0)
      {
        v37 = v18;
        if (v14 > v18 + 1)
        {
          if (v16[v18 + 1] == 10) {
            v37 = v18 + 1;
          }
          else {
            v37 = v18;
          }
        }

        goto LABEL_73;
      }

      a1[3] = v18;
      if (a3)
      {
        v80 = a1[6];
        v31 = v18 >= v80;
        v81 = v18 - v80;
        if (v31) {
          v82 = v81;
        }
        else {
          v82 = 0LL;
        }
        v83 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unescaped control character",  a1[5],  v82);
        v84 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
        v200 = @"NSDebugDescription";
        v201 = @"NSJSONSerializationErrorIndex";
        v195 = v83;
        v196 = v84;
        *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
      }
    }
  }

      v254 = v495;
      swift_retain();
      v255 = v254;
      v256 = v500;
      swift_retain();
      if (!_foundation_swift_url_feature_enabled())
      {
        v273 = objc_msgSend(v255, sel__parameterString);
        if (v273)
        {
          v274 = v273;
          v275 = static String._unconditionallyBridgeFromObjectiveC(_:)(v273);
          v277 = v276;

          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
            && (v278 = objc_msgSend(v255, sel_path)) != 0)
          {
            v279 = v278;
            v280 = static String._unconditionallyBridgeFromObjectiveC(_:)(v278);
            v282 = v281;

            v508._countAndFlagsBits = (uint64_t)v280;
            v508._object = v282;
            swift_bridgeObjectRetain();
            v283._countAndFlagsBits = 59LL;
            v283._object = (void *)0xE100000000000000LL;
            String.append(_:)(v283);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v284._countAndFlagsBits = (uint64_t)v275;
            v284._object = v277;
            String.append(_:)(v284);
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
          }

          else
          {
            v508._countAndFlagsBits = 59LL;
            v508._object = (void *)0xE100000000000000LL;
            v285._countAndFlagsBits = (uint64_t)v275;
            v285._object = v277;
            String.append(_:)(v285);
            swift_release();
            swift_release();
          }

          swift_bridgeObjectRelease();
          v270 = v508._countAndFlagsBits;
          v272 = v508._object;
        }

        else
        {
          v287 = objc_msgSend(v255, sel_path);
          if (v287)
          {
            v288 = v287;
            v270 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v287);
            v272 = v289;
            swift_release();
            swift_release();
          }

          else
          {
            swift_release();
            swift_release();

            v270 = 0LL;
            v272 = (void *)0xE000000000000000LL;
          }
        }

        v286 = v498;
LABEL_216:
        v366 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( v286,  (uint64_t)Path,  (unint64_t)v161,  v270,  (unint64_t)v272,  (SEL *)&selRef_fileManager_shouldProceedAfterError_movingItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldProceedAfterError_movingItemAtPath_toPath_);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v366 & 1) != 0)
        {

          return;
        }

        goto LABEL_218;
      }

      v499 = v161;
      v508._countAndFlagsBits = (uint64_t)v255;
      v508._object = v256;
      v509 = a4;
      v257 = v255;
      swift_retain();
      swift_retain();
      v258 = URL.path(percentEncoded:)(1);
      v508 = v258;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v258._countAndFlagsBits, (unint64_t)v258._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }

      v510._countAndFlagsBits = Set.init(minimumCapacity:)();
      v259 = specialized Set._Variant.insert(_:)(&v505, 0x2FuLL);
      v260 = v510._countAndFlagsBits;
      v261 = v508._countAndFlagsBits;
      v262 = v508._object;
      v263 = ((unint64_t)v508._object >> 56) & 0xF;
      if (v263)
      {
        v510 = v508;
        MEMORY[0x1895F8858](v259);
        v478 = &v510;
        v479 = (Swift::String *)v260;
        swift_bridgeObjectRetain();
        v264 = v261;
        v265 = v494;
        v266 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v477,  v264,  (unint64_t)v262);
        v494 = v265;
        if (v267 == (void *)1)
        {
          v269 = (unint64_t)v510._object;
          v268 = v510._countAndFlagsBits;
          swift_bridgeObjectRetain();
          v270 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v268,  v269,  v260);
          v272 = v271;
          swift_bridgeObjectRelease();
        }

        else
        {
          v270 = (uint64_t)v266;
          v272 = v267;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v286 = v498;
        if (!v272)
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v270 = 0LL;
          v272 = (void *)0xE000000000000000LL;
          goto LABEL_208;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        v270 = 0LL;
        v272 = (void *)0xE000000000000000LL;
        v286 = v498;
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_208:
      swift_release();
      swift_release();

      v161 = v499;
      goto LABEL_216;
    }

    v508._countAndFlagsBits = (uint64_t)v145;
    v508._object = v143;
    v509 = v21;
    v147 = (char *)v145;
    swift_retain();
    swift_retain();
    v148 = URL.path(percentEncoded:)(1);
    v508 = v148;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v148._countAndFlagsBits, (unint64_t)v148._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v510._countAndFlagsBits = Set.init(minimumCapacity:)();
    v149 = specialized Set._Variant.insert(_:)(&v505, 0x2FuLL);
    v150 = v510._countAndFlagsBits;
    v152 = v508._countAndFlagsBits;
    v151 = v508._object;
    v153 = ((unint64_t)v508._object >> 56) & 0xF;
    if (v153)
    {
      v496 = v147;
      v510 = v508;
      MEMORY[0x1895F8858](v149);
      v478 = &v510;
      v479 = (Swift::String *)v150;
      swift_bridgeObjectRetain();
      v154 = v152;
      v155 = v494;
      v156 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v477,  v154,  (unint64_t)v151);
      v494 = v155;
      if (v157 == (void *)1)
      {
        v159 = (unint64_t)v510._object;
        v158 = v510._countAndFlagsBits;
        swift_bridgeObjectRetain();
        Path = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v158, v159, v150);
        v161 = v160;
        swift_bridgeObjectRelease();
      }

      else
      {
        v161 = v157;
        Path = v156;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v147 = (char *)v496;
      a4 = v497;
      if (!v161)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Path = 0LL;
        v161 = (void *)0xE000000000000000LL;
        goto LABEL_152;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      Path = 0LL;
      v161 = (void *)0xE000000000000000LL;
      a4 = v497;
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_152:
    swift_release();
    swift_release();

    goto LABEL_153;
  }

  swift_retain();
  v126 = v492;
  v127 = v499;
  swift_retain();
  v128 = _foundation_swift_url_feature_enabled();
  v489 = v21;
  v493 = v126;
  LODWORD(v491) = v23;
  if (v128)
  {
    v129 = v125;
    v508._countAndFlagsBits = (uint64_t)v126;
    v508._object = v127;
    v509 = v21;
    v496 = (const char *)v126;
    swift_retain();
    swift_retain();
    v130 = URL.path(percentEncoded:)(1);
    v508 = v130;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v130._countAndFlagsBits, (unint64_t)v130._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v510._countAndFlagsBits = Set.init(minimumCapacity:)();
    v131 = specialized Set._Variant.insert(_:)(&v505, 0x2FuLL);
    v132 = v510._countAndFlagsBits;
    v134 = v508._countAndFlagsBits;
    v133 = v508._object;
    v135 = ((unint64_t)v508._object >> 56) & 0xF;
    if (!v135)
    {
      swift_bridgeObjectRelease();
      v498 = 0LL;
      Path = (id)0xE000000000000000LL;
      v206 = (char *)v496;
      a4 = v497;
      goto LABEL_123;
    }

    v510 = v508;
    MEMORY[0x1895F8858](v131);
    v478 = &v510;
    v479 = (Swift::String *)v132;
    swift_bridgeObjectRetain();
    v136 = (char *)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v477,  v134,  (unint64_t)v133);
    if (v137 == (void *)1)
    {
      v139 = (unint64_t)v510._object;
      v138 = v510._countAndFlagsBits;
      swift_bridgeObjectRetain();
      v498 = (char *)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v138, v139, v132);
      v141 = v140;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v125 = v129;
    }

    else
    {
      v141 = v137;
      v498 = v136;
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    v21 = v489;
    v206 = (char *)v496;
    a4 = v497;
    Path = v141;
    if (v141)
    {
LABEL_123:
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v498 = 0LL;
      Path = (id)0xE000000000000000LL;
    }

    swift_release();
    swift_release();
  }

  else
  {
    v173 = objc_msgSend(v126, sel__parameterString);
    if (v173)
    {
      v174 = v173;
      v175 = static String._unconditionallyBridgeFromObjectiveC(_:)(v173);
      v177 = v176;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (v178 = objc_msgSend(v126, sel_path)) != 0)
      {
        v179 = v178;
        v180 = static String._unconditionallyBridgeFromObjectiveC(_:)(v178);
        v181 = v126;
        v494 = v125;
        v182 = a4;
        v183 = (uint64_t)v180;
        v185 = v184;

        v508._countAndFlagsBits = v183;
        v508._object = v185;
        swift_bridgeObjectRetain();
        v186._countAndFlagsBits = 59LL;
        v186._object = (void *)0xE100000000000000LL;
        String.append(_:)(v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v187._countAndFlagsBits = (uint64_t)v175;
        v187._object = v177;
        String.append(_:)(v187);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        a4 = v182;
        v125 = v494;
      }

      else
      {
        v508._countAndFlagsBits = 59LL;
        v508._object = (void *)0xE100000000000000LL;
        v204._countAndFlagsBits = (uint64_t)v175;
        v204._object = v177;
        String.append(_:)(v204);
        swift_release();
        swift_release();
      }

      swift_bridgeObjectRelease();
      v498 = (char *)v508._countAndFlagsBits;
      Path = v508._object;
    }

    else
    {
      v207 = objc_msgSend(v126, sel_path);
      if (v207)
      {
        v208 = v207;
        v498 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v207);
        Path = v209;
        swift_release();
        swift_release();
      }

      else
      {
        swift_release();
        swift_release();

        v498 = 0LL;
        Path = (id)0xE000000000000000LL;
      }
    }
  }

  v216 = v495;
  swift_retain();
  v217 = v216;
  v218 = v500;
  swift_retain();
  v219 = _foundation_swift_url_feature_enabled();
  v496 = v217;
  if ((v219 & 1) != 0)
  {
    v494 = v125;
    v508._countAndFlagsBits = (uint64_t)v217;
    v508._object = v218;
    v509 = a4;
    v220 = v217;
    swift_retain();
    swift_retain();
    v221 = URL.path(percentEncoded:)(1);
    v508 = v221;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v221._countAndFlagsBits, (unint64_t)v221._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v510._countAndFlagsBits = Set.init(minimumCapacity:)();
    v222 = specialized Set._Variant.insert(_:)(&v505, 0x2FuLL);
    v223 = v510._countAndFlagsBits;
    v224 = v508._countAndFlagsBits;
    v225 = v508._object;
    v226 = ((unint64_t)v508._object >> 56) & 0xF;
    if (!v226)
    {
      swift_bridgeObjectRelease();
      v233 = 0LL;
      v235 = (void *)0xE000000000000000LL;
      goto LABEL_150;
    }

    v495 = v220;
    v510 = v508;
    MEMORY[0x1895F8858](v222);
    v478 = &v510;
    v479 = (Swift::String *)v223;
    swift_bridgeObjectRetain();
    v227 = v224;
    v228 = v494;
    v229 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v477,  v227,  (unint64_t)v225);
    v494 = v228;
    if (v230 == (void *)1)
    {
      v232 = (unint64_t)v510._object;
      v231 = v510._countAndFlagsBits;
      swift_bridgeObjectRetain();
      v233 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v231, v232, v223);
      v235 = v234;
      swift_bridgeObjectRelease();
    }

    else
    {
      v233 = (uint64_t)v229;
      v235 = v230;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v235)
    {
      v220 = v495;
LABEL_150:
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_release();
      swift_release();
      v220 = v495;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v233 = 0LL;
      v235 = (void *)0xE000000000000000LL;
    }

    swift_release();
    swift_release();

    v125 = v494;
    v21 = v489;
  }

  else
  {
    v236 = objc_msgSend(v217, sel__parameterString);
    if (v236)
    {
      v237 = v236;
      v238 = static String._unconditionallyBridgeFromObjectiveC(_:)(v236);
      v240 = v239;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (v241 = objc_msgSend(v217, sel_path)) != 0)
      {
        v242 = v241;
        v243 = static String._unconditionallyBridgeFromObjectiveC(_:)(v241);
        v494 = v125;
        v244 = (uint64_t)v243;
        v246 = v245;

        v508._countAndFlagsBits = v244;
        v508._object = v246;
        swift_bridgeObjectRetain();
        v247._countAndFlagsBits = 59LL;
        v247._object = (void *)0xE100000000000000LL;
        String.append(_:)(v247);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v248._countAndFlagsBits = (uint64_t)v238;
        v248._object = v240;
        String.append(_:)(v248);
        v125 = v494;
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }

      else
      {
        v508._countAndFlagsBits = 59LL;
        v508._object = (void *)0xE100000000000000LL;
        v249._countAndFlagsBits = (uint64_t)v238;
        v249._object = v240;
        String.append(_:)(v249);
        swift_release();
        swift_release();
      }

      v250 = swift_bridgeObjectRelease();
      v233 = v508._countAndFlagsBits;
      v235 = v508._object;
    }

    else
    {
      v251 = objc_msgSend(v217, sel_path);
      if (v251)
      {
        v252 = v251;
        v233 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v251);
        v235 = v253;
        swift_release();
        swift_release();
      }

      else
      {
        swift_release();
        swift_release();

        v233 = 0LL;
        v235 = (void *)0xE000000000000000LL;
      }
    }
  }

  LOBYTE(v508._countAndFlagsBits) = 1;
  HIDWORD(v508._countAndFlagsBits) = 0;
  v508._object = v490;
  MEMORY[0x1895F8858](v250);
  v290 = (uint64_t)v498;
  v476[2] = v498;
  v476[3] = Path;
  v477[0] = v233;
  v477[1] = v235;
  v291 = (unint64_t)Path;
  v478 = v292;
  v479 = &v508;
  v293 = v292;
  specialized String.withFileSystemRepresentation<A>(_:)( (uint64_t (*)(char *))partial apply for specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:),  (uint64_t)v476,  v290,  v291);
  if (v125)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v505 = v125;
    v294 = v125;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v295 = swift_dynamicCast();
    v296 = v497;
    if ((v295 & 1) != 0)
    {

      v297 = (void *)v503._countAndFlagsBits;
      if ((v491 & 1) == 0)
      {
        v508._countAndFlagsBits = (uint64_t)v496;
        v508._object = v500;
        v509 = v296;
        v330 = URL.path.getter();
        v332 = v331;
        swift_bridgeObjectRetain();
        specialized String.withFileSystemRepresentation<A>(_:)(v330, v332, v330, v332, 0LL);
        swift_bridgeObjectRelease();
      }

      v333 = (char *)objc_msgSend(v297, sel_code);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      v334 = swift_allocObject();
      *(_OWORD *)(v334 + 16) = xmmword_183729E20;
      *(void *)(v334 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFilePath");
      *(void *)(v334 + 40) = v335;
      v336 = _foundation_swift_url_feature_enabled();
      Path = v297;
      v498 = v333;
      if (v336)
      {
        v508._countAndFlagsBits = (uint64_t)v493;
        v508._object = v499;
        v509 = v21;
        v495 = (char *)v493;
        swift_retain();
        swift_retain();
        v337 = URL.path(percentEncoded:)(1);
        v508 = v337;
        swift_bridgeObjectRetain();
        if (String.count.getter() > 1
          && (specialized BidirectionalCollection.last.getter(v337._countAndFlagsBits, (unint64_t)v337._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }

        v510._countAndFlagsBits = Set.init(minimumCapacity:)();
        v338 = specialized Set._Variant.insert(_:)(&v502, 0x2FuLL);
        v339 = v510._countAndFlagsBits;
        v341 = v508._countAndFlagsBits;
        v340 = v508._object;
        v342 = ((unint64_t)v508._object >> 56) & 0xF;
        if (!v342)
        {
          swift_bridgeObjectRelease();
          v347 = 0LL;
          v349 = (void *)0xE000000000000000LL;
          v357 = v500;
          goto LABEL_232;
        }

        v510 = v508;
        MEMORY[0x1895F8858](v338);
        v478 = &v510;
        v479 = (Swift::String *)v339;
        swift_bridgeObjectRetain();
        v343 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v477,  v341,  (unint64_t)v340);
        if (v344 == (void *)1)
        {
          v346 = (unint64_t)v510._object;
          v345 = v510._countAndFlagsBits;
          swift_bridgeObjectRetain();
          v347 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v345,  v346,  v339);
          v349 = v348;
          swift_bridgeObjectRelease();
        }

        else
        {
          v347 = (uint64_t)v343;
          v349 = v344;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v296 = v497;
        v357 = v500;
        if (v349)
        {
LABEL_232:
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        else
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v347 = 0LL;
          v349 = (void *)0xE000000000000000LL;
        }
      }

      else
      {
        v350 = v493;
        v351 = objc_msgSend(v493, sel__parameterString);
        if (v351)
        {
          v352 = v351;
          v353 = static String._unconditionallyBridgeFromObjectiveC(_:)(v351);
          v355 = v354;

          Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
          v357 = v500;
          if (Enum && (v358 = objc_msgSend(v350, sel_path)) != 0)
          {
            v359 = v358;
            v360 = static String._unconditionallyBridgeFromObjectiveC(_:)(v358);
            v362 = v361;

            v508._countAndFlagsBits = (uint64_t)v360;
            v508._object = v362;
            swift_bridgeObjectRetain();
            v363._countAndFlagsBits = 59LL;
            v363._object = (void *)0xE100000000000000LL;
            String.append(_:)(v363);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v364._countAndFlagsBits = (uint64_t)v353;
            v364._object = v355;
            String.append(_:)(v364);
            swift_bridgeObjectRelease();
          }

          else
          {
            v508._countAndFlagsBits = 59LL;
            v508._object = (void *)0xE100000000000000LL;
            v372._countAndFlagsBits = (uint64_t)v353;
            v372._object = v355;
            String.append(_:)(v372);
          }

          swift_bridgeObjectRelease();
          v347 = v508._countAndFlagsBits;
          v349 = v508._object;
        }

        else
        {
          v373 = objc_msgSend(v350, sel_path);
          v357 = v500;
          if (v373)
          {
            v374 = v373;
            v347 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v373);
            v349 = v375;
          }

          else
          {
            v347 = 0LL;
            v349 = (void *)0xE000000000000000LL;
          }
        }
      }

      v395 = MEMORY[0x189617FA8];
      *(void *)(v334 + 72) = MEMORY[0x189617FA8];
      *(void *)(v334 + 48) = v347;
      *(void *)(v334 + 56) = v349;
      *(void *)(v334 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDestinationFilePath");
      *(void *)(v334 + 88) = v396;
      v508._countAndFlagsBits = (uint64_t)v496;
      v508._object = v357;
      v509 = v296;
      v397 = URL.path.getter();
      *(void *)(v334 + 120) = v395;
      *(void *)(v334 + 96) = v397;
      *(void *)(v334 + 104) = v398;
      *(void *)(v334 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSUserStringVariant");
      *(void *)(v334 + 136) = v399;
      *(void *)(v334 + 168) = v395;
      *(void *)(v334 + 144) = 1702260557LL;
      *(void *)(v334 + 152) = 0xE400000000000000LL;
      *(void *)(v334 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSUnderlyingError");
      *(void *)(v334 + 184) = v400;
      *(void *)(v334 + 216) = &type metadata for CocoaError;
      v401 = Path;
      *(void *)(v334 + 192) = Path;
      v402 = destructiveProjectEnumData for PredicateCodableError(v334, v400);
      v403 = v401;
      specialized Dictionary.init(dictionaryLiteral:)(v402);
      specialized _BridgedStoredNSError.init(_:userInfo:)((uint64_t)v498, &v508);
      swift_willThrow();
    }

    v394 = v505;
LABEL_243:

    return;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v298 = v493;
  v299 = v499;
  swift_retain();
  swift_retain();
  v300 = _foundation_swift_url_feature_enabled();
  Path = v298;
  if (v300)
  {
    v494 = 0LL;
    v508._countAndFlagsBits = (uint64_t)v298;
    v508._object = v299;
    v509 = v21;
    v498 = (char *)v298;
    swift_retain();
    swift_retain();
    v301 = URL.path(percentEncoded:)(1);
    v508 = v301;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v301._countAndFlagsBits, (unint64_t)v301._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v510._countAndFlagsBits = Set.init(minimumCapacity:)();
    v302 = specialized Set._Variant.insert(_:)(&v505, 0x2FuLL);
    v303 = v510._countAndFlagsBits;
    v304 = v508._countAndFlagsBits;
    v305 = v508._object;
    v306 = ((unint64_t)v508._object >> 56) & 0xF;
    if (!v306)
    {
      swift_bridgeObjectRelease();
      v314 = 0LL;
      v316 = (void *)0xE000000000000000LL;
      v318 = v496;
      v367 = v498;
      goto LABEL_226;
    }

    v307 = v21;
    v510 = v508;
    MEMORY[0x1895F8858](v302);
    v478 = &v510;
    v479 = (Swift::String *)v303;
    swift_bridgeObjectRetain();
    v308 = v304;
    v309 = v494;
    v310 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v477,  v308,  (unint64_t)v305);
    v494 = v309;
    if (v311 == (void *)1)
    {
      v313 = (unint64_t)v510._object;
      v312 = v510._countAndFlagsBits;
      swift_bridgeObjectRetain();
      v314 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v312, v313, v303);
      v316 = v315;
      swift_bridgeObjectRelease();
    }

    else
    {
      v314 = (uint64_t)v310;
      v316 = v311;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = v307;
    v318 = v496;
    v367 = v498;
    if (v316)
    {
LABEL_226:
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v314 = 0LL;
      v316 = (void *)0xE000000000000000LL;
    }

    swift_release();
    swift_release();

    v125 = v494;
  }

  else
  {
    v317 = objc_msgSend(v298, sel__parameterString);
    v318 = v496;
    if (v317)
    {
      v319 = v317;
      v320 = static String._unconditionallyBridgeFromObjectiveC(_:)(v317);
      v322 = v321;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (v323 = objc_msgSend(v298, sel_path)) != 0)
      {
        v324 = v323;
        v325 = static String._unconditionallyBridgeFromObjectiveC(_:)(v323);
        v327 = v326;

        v508._countAndFlagsBits = (uint64_t)v325;
        v508._object = v327;
        swift_bridgeObjectRetain();
        v328._countAndFlagsBits = 59LL;
        v328._object = (void *)0xE100000000000000LL;
        String.append(_:)(v328);
        v125 = 0LL;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v329._countAndFlagsBits = (uint64_t)v320;
        v329._object = v322;
        String.append(_:)(v329);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }

      else
      {
        v508._countAndFlagsBits = 59LL;
        v508._object = (void *)0xE100000000000000LL;
        v365._countAndFlagsBits = (uint64_t)v320;
        v365._object = v322;
        String.append(_:)(v365);
        swift_release();
        swift_release();
      }

      swift_bridgeObjectRelease();
      v314 = v508._countAndFlagsBits;
      v316 = v508._object;
    }

    else
    {
      v368 = objc_msgSend(v298, sel_path);
      if (v368)
      {
        v369 = v368;
        v370 = v298;
        v314 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v368);
        v316 = v371;
        swift_release();
        swift_release();
      }

      else
      {
        swift_release();
        swift_release();

        v314 = 0LL;
        v316 = (void *)0xE000000000000000LL;
      }
    }
  }

  swift_bridgeObjectRetain();
  specialized String.withFileSystemRepresentation<A>(_:)( v314,  (unint64_t)v316,  v314,  (unint64_t)v316,  0LL);
  if (v125)
  {
    swift_bridgeObjectRelease();
    v510._countAndFlagsBits = (uint64_t)v125;
    v376 = v125;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) != 0)
    {

      v377 = v505;
      specialized _BridgedStoredNSError.code.getter(v377, &v503);

      v498 = (char *)v503._countAndFlagsBits;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      v378 = swift_allocObject();
      v379 = specialized static Array._adoptStorage(_:count:)(v378, 4LL);
      v380 = (uint64_t)v318;
      v382 = v381;
      *v381 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFilePath");
      v382[1] = v383;
      v508._countAndFlagsBits = (uint64_t)Path;
      v508._object = v499;
      v509 = v21;
      v384 = URL.path.getter();
      v385 = (void *)MEMORY[0x189617FA8];
      v382[5] = (id)MEMORY[0x189617FA8];
      v382[2] = (id)v384;
      v382[3] = v386;
      v382[6] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDestinationFilePath");
      v382[7] = v387;
      v508._countAndFlagsBits = v380;
      v508._object = v500;
      v509 = v497;
      v388 = URL.path.getter();
      v382[11] = v385;
      v382[8] = (id)v388;
      v382[9] = v389;
      v382[12] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSUserStringVariant");
      v382[13] = v390;
      v382[17] = v385;
      v382[14] = (id)1702260557;
      v382[15] = (id)0xE400000000000000LL;
      v382[18] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSUnderlyingError");
      v382[19] = v391;
      v382[23] = &type metadata for CocoaError;
      v382[20] = v377;
      v392 = destructiveProjectEnumData for PredicateCodableError(v379, v391);
      v393 = v377;
      specialized Dictionary.init(dictionaryLiteral:)(v392);
      specialized _BridgedStoredNSError.init(_:userInfo:)((uint64_t)v498, &v508);
      swift_willThrow();
    }

    v394 = (id)v510._countAndFlagsBits;
    goto LABEL_243;
  }

  swift_bridgeObjectRelease();
}

      __break(1u);
      goto LABEL_154;
    }

    __break(1u);
    goto LABEL_154;
  }

  v99 = v28;
  v100 = v110 | (v28 << 32) | (v106 << 48);
  v105 = v122 | (v120 << 16) | (v118 << 32) | (v116 << 48);
  v104 = v114 | (v112 << 16);
  NSDecimal.asVariableLengthInteger()(v100, v105, v104);
  v54 = v53;
  v102 = v22 | (v23 << 16) | (v24 << 32) | (v25 << 48);
  v103 = v124 | (v108 << 32) | (v21 << 48);
  v101 = v26 | (v27 << 16);
  NSDecimal.asVariableLengthInteger()(v103, v102, v101);
  v40 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v54, v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v40 == -1)
  {
    NSDecimal.asVariableLengthInteger()(v103, v102, v101);
    v58 = v57;
    NSDecimal.asVariableLengthInteger()(v100, v105, v104);
    v40 = v59;
    v60 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v60 + 32) = 0LL;
    v62 = (_WORD *)(v60 + 32);
    *(void *)(v60 + 16) = 8LL;
    v63._rawValue = (void *)v60;
    *(void *)(v60 + 40) = 0LL;
    v64 = *(void *)(v58 + 16);
    v65 = *(void *)(v40 + 16);
    if (v65 >= v64) {
      v66 = *(void *)(v58 + 16);
    }
    else {
      v66 = *(void *)(v40 + 16);
    }
    if (v66)
    {
      v67 = (*(unsigned __int16 *)(v58 + 32) | 0x10000) - *(unsigned __int16 *)(v40 + 32);
      v68 = HIWORD(v67);
      *v62 = *(_WORD *)(v58 + 32) - *(_WORD *)(v40 + 32);
      v69 = v66 - 1;
      if (v69)
      {
        v67 = v68 + *(unsigned __int16 *)(v58 + 34) - *(unsigned __int16 *)(v40 + 34) + 0xFFFF;
        v68 = HIWORD(v67);
        *(_WORD *)(v60 + 34) = v67;
        if (v69 == 1)
        {
          v70 = 2LL;
        }

        else
        {
          v61 = *(unsigned __int16 *)(v40 + 36);
          v67 = v68 + *(unsigned __int16 *)(v58 + 36) - v61 + 0xFFFF;
          v68 = HIWORD(v67);
          *(_WORD *)(v60 + 36) = v67;
          if (v69 == 2)
          {
            v70 = 3LL;
          }

          else
          {
            v67 = v68 + *(unsigned __int16 *)(v58 + 38) - *(unsigned __int16 *)(v40 + 38) + 0xFFFF;
            v68 = HIWORD(v67);
            *(_WORD *)(v60 + 38) = v67;
            if (v69 == 3)
            {
              v70 = 4LL;
            }

            else
            {
              v61 = *(unsigned __int16 *)(v40 + 40);
              v67 = v68 + *(unsigned __int16 *)(v58 + 40) - v61 + 0xFFFF;
              v68 = HIWORD(v67);
              *(_WORD *)(v60 + 40) = v67;
              if (v69 == 4)
              {
                v70 = 5LL;
              }

              else
              {
                v67 = v68 + *(unsigned __int16 *)(v58 + 42) - *(unsigned __int16 *)(v40 + 42) + 0xFFFF;
                v68 = HIWORD(v67);
                *(_WORD *)(v60 + 42) = v67;
                if (v69 == 5)
                {
                  v70 = 6LL;
                }

                else
                {
                  v61 = *(unsigned __int16 *)(v40 + 44);
                  v67 = v68 + *(unsigned __int16 *)(v58 + 44) - v61 + 0xFFFF;
                  v68 = HIWORD(v67);
                  *(_WORD *)(v60 + 44) = v67;
                  if (v69 == 6)
                  {
                    v70 = 7LL;
                  }

                  else
                  {
                    v84 = v68 + *(unsigned __int16 *)(v58 + 46) - *(unsigned __int16 *)(v40 + 46);
                    v67 = v84 + 0xFFFF;
                    *(_WORD *)(v60 + 46) = v84 - 1;
                    if (v69 != 7)
                    {
LABEL_159:
                      __break(1u);
                      goto LABEL_160;
                    }

                    v61 = v58;
                    v68 = HIWORD(v67);
                    v70 = 8LL;
                  }
                }
              }
            }
          }
        }
      }

      else
      {
        v70 = 1LL;
      }

      if (v70 >= v64) {
        goto LABEL_96;
      }
      if (!HIWORD(v67))
      {
        while (v70 < *(void *)(v60 + 16))
        {
          v85 = *(unsigned __int16 *)(v58 + 32 + 2 * v70);
          v61 = v85 + 0xFFFF;
          v62[v70] = v85 - 1;
          if (v64 - 1 == v70) {
            goto LABEL_103;
          }
          ++v70;
          if (v85) {
            goto LABEL_89;
          }
        }

        goto LABEL_151;
      }
    }

    else
    {
      if (!v64)
      {
        if (v65)
        {
          v70 = 0LL;
          v68 = 1;
          goto LABEL_97;
        }

        v82 = 8LL;
LABEL_106:
        if (!v62[v82 - 1])
        {
          do
          {
            *(void *)(v60 + 16) = v82 - 1;
            if (v82 == 1) {
              break;
            }
          }

          while (!*(unsigned __int16 *)(v60 + 28 + 2 * v82--));
        }

        v22 = v150;
        if (v139 > v150 >> 14)
        {
          v23 = v149;
          if (v135 > v149 >> 14) {
            continue;
          }
        }

        goto LABEL_168;
      }

      if ((v140 & 1) != 0 && v129 < v150 >> 14)
      {
        v45 = v146 & 0xFFFFFFFFFFFFLL;
        if ((v147 & 0x2000000000000000LL) != 0) {
          v45 = HIBYTE(v147) & 0xF;
        }
        if (v45)
        {
          v46 = 0;
        }

        else
        {
          v47 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v25), 5);
          v46 = BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v25, v47, 0x700030005LL);
          if (v46) {
            v25 = v28;
          }
          else {
            v25 = v25;
          }
        }

        v48 = v143 & 0xFFFFFFFFFFFFLL;
        if ((v144 & 0x2000000000000000LL) != 0) {
          v48 = HIBYTE(v144) & 0xF;
        }
        if (!v48)
        {
          v49 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v28), 5);
          if (BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v28, v49, 0x700030005LL))
          {
            if (!v46) {
              Substring.UnicodeScalarView.formIndex(before:)();
            }
            goto LABEL_117;
          }
        }

        if (v46) {
          Substring.UnicodeScalarView.formIndex(before:)();
        }
      }

      if ((_DWORD)v25 == (_DWORD)v28)
      {
LABEL_117:
        v88 = v146;
        v87 = v147;
        v89 = HIBYTE(v147) & 0xF;
        if ((v147 & 0x2000000000000000LL) == 0) {
          v89 = v146 & 0xFFFFFFFFFFFFLL;
        }
        if (v89 && v148 >> 14 == 4 * v89)
        {
          swift_bridgeObjectRelease();
          v88 = 0LL;
          v87 = 0xE000000000000000LL;
          v146 = 0LL;
          v147 = 0xE000000000000000LL;
          v148 = 15LL;
        }

        v91 = v143;
        v90 = v144;
        v92 = HIBYTE(v144) & 0xF;
        if ((v144 & 0x2000000000000000LL) == 0) {
          v92 = v143 & 0xFFFFFFFFFFFFLL;
        }
        if (v92)
        {
          v18 = v131;
          v17 = v132;
          if (v145 >> 14 == 4 * v92)
          {
            swift_bridgeObjectRelease();
            v91 = 0LL;
            v90 = 0xE000000000000000LL;
            v143 = 0LL;
            v144 = 0xE000000000000000LL;
            v145 = 15LL;
          }
        }

        else
        {
          v18 = v131;
          v17 = v132;
        }

        v93 = HIBYTE(v87) & 0xF;
        if ((v87 & 0x2000000000000000LL) == 0) {
          v93 = v88 & 0xFFFFFFFFFFFFLL;
        }
        a3 = v133;
        if (!v93)
        {
          v94 = _StringGuts.validateScalarIndex(_:)(v150, v18, v17);
          if ((v17 & 0x1000000000000000LL) != 0)
          {
            v100 = String.UnicodeScalarView._foreignIndex(after:)();
          }

          else
          {
            v95 = v94 >> 16;
            if ((v17 & 0x2000000000000000LL) != 0)
            {
              v141 = v18;
              v142 = v123;
              v97 = *((unsigned __int8 *)&v141 + v95);
            }

            else
            {
              v96 = v122;
              if ((v18 & 0x1000000000000000LL) == 0) {
                v96 = _StringObject.sharedUTF8.getter();
              }
              v97 = *(unsigned __int8 *)(v96 + v95);
            }

            v98 = (char)v97;
            v99 = __clz(v97 ^ 0xFF) - 24;
            if (v98 >= 0) {
              LOBYTE(v99) = 1;
            }
            v100 = ((v95 + v99) << 16) | 5;
          }

          v150 = v100;
        }

        v101 = HIBYTE(v90) & 0xF;
        if ((v90 & 0x2000000000000000LL) == 0) {
          v101 = v91 & 0xFFFFFFFFFFFFLL;
        }
        if (!v101)
        {
          v102 = _StringGuts.validateScalarIndex(_:)(v149, a3, a4);
          if ((a4 & 0x1000000000000000LL) != 0)
          {
            v149 = String.UnicodeScalarView._foreignIndex(after:)();
          }

          else
          {
            v103 = v102 >> 16;
            if ((a4 & 0x2000000000000000LL) != 0)
            {
              v141 = a3;
              v142 = v121;
              v105 = *((unsigned __int8 *)&v141 + v103);
            }

            else
            {
              v104 = v120;
              if ((a3 & 0x1000000000000000LL) == 0) {
                v104 = _StringObject.sharedUTF8.getter();
              }
              v105 = *(unsigned __int8 *)(v104 + v103);
            }

            v106 = (char)v105;
            v107 = __clz(v105 ^ 0xFF) - 24;
            if (v106 >= 0) {
              LOBYTE(v107) = 1;
            }
            v149 = ((v103 + v107) << 16) | 5;
          }
        }

        goto LABEL_153;
      }

      if ((v125 & 1) == 0)
      {
        else {
          v111 = v28 < v25;
        }
LABEL_182:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v111;
      }

      if ((v126 & 1) != 0 && !v138)
      {
        else {
          v50 = -1LL;
        }
        v138 = v50;
      }

      v52 = v146;
      v51 = v147;
      v53 = v147 & 0x2000000000000000LL;
      v54 = HIBYTE(v147) & 0xF;
      v55 = v146 & 0xFFFFFFFFFFFFLL;
      if ((v147 & 0x2000000000000000LL) != 0) {
        v56 = HIBYTE(v147) & 0xF;
      }
      else {
        v56 = v146 & 0xFFFFFFFFFFFFLL;
      }
      if (v56)
      {
        v57 = v147;
      }

      else
      {
        v58 = Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)(v127 & 1, v140 & 1, v128 & 1, v25);
        v57 = v59;
        v60 = specialized Collection.first.getter(v58, v59);
        if ((v60 & 0x100000000LL) != 0)
        {
          swift_bridgeObjectRelease();
          v57 = v51;
        }

        else
        {
          v61 = v60;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v146 = v58;
          v147 = v57;
          v148 = 15LL;
          specialized _StringCompareOptionsIterableBuffer.advance()();
          swift_bridgeObjectRelease();
          v53 = v57 & 0x2000000000000000LL;
          v54 = HIBYTE(v57) & 0xF;
          v55 = v58 & 0xFFFFFFFFFFFFLL;
          LODWORD(v25) = v61;
          v52 = v58;
        }

        a2 = v115;
      }

      if (!v53) {
        v54 = v55;
      }
      v63 = v143;
      v62 = v144;
      v64 = v144 & 0x2000000000000000LL;
      v65 = HIBYTE(v144) & 0xF;
      v66 = v143 & 0xFFFFFFFFFFFFLL;
      if (!v54)
      {
        if (v64 ? HIBYTE(v144) & 0xF : v143 & 0xFFFFFFFFFFFFLL)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          else {
            return -1LL;
          }
        }
      }

      if (v64) {
        v68 = HIBYTE(v144) & 0xF;
      }
      else {
        v68 = v143 & 0xFFFFFFFFFFFFLL;
      }
      if (v68)
      {
        if (v54) {
          goto LABEL_93;
        }
      }

      else
      {
        if (v54 && (_DWORD)v25 == (_DWORD)v28) {
          goto LABEL_96;
        }
        v81 = Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)(v127 & 1, v140 & 1, v128 & 1, v28);
        v83 = v82;
        v84 = specialized Collection.first.getter(v81, v82);
        if ((v84 & 0x100000000LL) == 0)
        {
          v85 = v84;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v143 = v81;
          v144 = v83;
          v145 = 15LL;
          specialized _StringCompareOptionsIterableBuffer.advance()();
          LODWORD(v28) = v85;
        }

        v63 = v143;
        v62 = v144;
        swift_bridgeObjectRelease();
        v86 = HIBYTE(v62) & 0xF;
        if ((v62 & 0x2000000000000000LL) == 0) {
          v86 = v63 & 0xFFFFFFFFFFFFLL;
        }
        if (!v86 || (_DWORD)v25 != (_DWORD)v28)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          else {
            return -1LL;
          }
        }

        a2 = v115;
        if (v54)
        {
LABEL_93:
          v64 = v62 & 0x2000000000000000LL;
          v65 = HIBYTE(v62) & 0xF;
          v66 = v63 & 0xFFFFFFFFFFFFLL;
LABEL_96:
          if (v64) {
            v69 = v65;
          }
          else {
            v69 = v66;
          }
          if (v69)
          {
            v70 = 4 * v54;
            v71 = v148;
            if (4 * v54 != v148 >> 14)
            {
              a4 = v124;
              while (1)
              {
                v73 = v143;
                v72 = v144;
                v74 = v145;
                v75 = v144 & 0x2000000000000000LL;
                v76 = HIBYTE(v144) & 0xF;
                v77 = v143 & 0xFFFFFFFFFFFFLL;
                v78 = (v144 & 0x2000000000000000LL) != 0 ? HIBYTE(v144) & 0xF : v143 & 0xFFFFFFFFFFFFLL;
                v79 = v145 >> 14;
                if (v145 >> 14 == 4 * v78) {
                  break;
                }
                v80 = specialized _StringCompareOptionsIterableBuffer.current.getter(v52, v57, v71);
                if (v80 != specialized _StringCompareOptionsIterableBuffer.current.getter(v73, v72, v74))
                {
                  v73 = v143;
                  v72 = v144;
                  v74 = v145;
                  v75 = v144 & 0x2000000000000000LL;
                  v76 = HIBYTE(v144) & 0xF;
                  v77 = v143 & 0xFFFFFFFFFFFFLL;
                  v79 = v145 >> 14;
                  break;
                }

                specialized _StringCompareOptionsIterableBuffer.advance()();
                specialized _StringCompareOptionsIterableBuffer.advance()();
                v71 = v148;
                if (v70 == v148 >> 14) {
                  goto LABEL_117;
                }
              }

              if (v75) {
                v108 = v76;
              }
              else {
                v108 = v77;
              }
              if (v79 != 4 * v108)
              {
                v112 = specialized _StringCompareOptionsIterableBuffer.current.getter(v52, v57, v71);
                v113 = specialized _StringCompareOptionsIterableBuffer.current.getter(v73, v72, v74);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v112 < v113) {
                  return -1LL;
                }
                else {
                  return v113 < v112;
                }
              }

              goto LABEL_117;
            }
          }
        }
      }

      a4 = v124;
      goto LABEL_117;
    }

    v138 = 0LL;
    v22 = v134;
  }

              v154 = (4 * *(_BYTE *)(v153 + 18) + 8) & 0x3C;
              v151 = ((-15LL << v154) - 1) & v151 | (v156 << v154);
              v155 = *(void *)(v153 + 24 + 24 * v156);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v153 = v155;
              if (!*(_BYTE *)(v155 + 18)) {
                goto LABEL_171;
              }
            }
          }

          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs((uint64_t)v434);
          result = swift_unknownObjectRetain();
          v152 = v358;
          v155 = v147;
LABEL_171:
          v165 = *(unsigned __int16 *)(v155 + 16);
          if (*(_WORD *)(v155 + 16))
          {
            v166 = *(void *)(v155 + 24);
            v34 = __OFSUB__(v152, v166);
            v167 = (__int128 *)((char *)v152 - v166);
            v21 = v349;
            v148 = v360;
            if (v34)
            {
LABEL_416:
              __break(1u);
LABEL_417:
              __break(1u);
LABEL_418:
              __break(1u);
              goto LABEL_419;
            }

            if (__OFADD__(v167, 1LL)) {
              goto LABEL_417;
            }
            if ((uint64_t)v167 + 1 < 1)
            {
              v165 = 0LL;
            }

            else
            {
              if ((_DWORD)v165 == 1)
              {
                v152 = v167;
                goto LABEL_207;
              }

              v183 = (uint64_t *)(v155 + 48);
              v184 = 1LL;
              while (1)
              {
                v185 = *v183;
                v183 += 3;
                v152 = (__int128 *)((char *)v167 - v185);
                if (__OFSUB__(v167, v185)) {
                  goto LABEL_399;
                }
                if (__OFADD__(v152, 1LL)) {
                  goto LABEL_400;
                }
                ++v184;
                v167 = v152;
                if (v165 == v184) {
                  goto LABEL_207;
                }
              }

              v165 = v184;
              v152 = v167;
            }

  outlined release of AttributedString.Runs.NSAttributesSlice.Iterator(v99);
  return v12;
}

                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
              }
            }
          }

  if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
    v77 = 0LL;
  }
  else {
    v77 = v6;
  }
  *(void *)&__src[16] = v77;
  BYTE8(__src[16]) = v6 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v12 & 0x1000) != 0) {
    goto LABEL_157;
  }
LABEL_64:
  if ((v12 & 0x2000) != 0)
  {
LABEL_65:
    v43 = (uint64_t)v17;
    *(void *)&__src[10] = v43;
    BYTE8(__src[10]) = (uint64_t)v17 == 0x7FFFFFFFFFFFFFFFLL;
  }

          v88 = (4 * *((_BYTE *)v6 + 18) + 8) & 0x3C;
          v22 = ((-15LL << v88) - 1) & v22 | (v33 << v88);
          v18 = (void *)v6[3 * v33 + 3];
          swift_unknownObjectRetain();
          result = (void *)swift_unknownObjectRelease();
          v6 = v18;
          if (!*((_BYTE *)v18 + 18)) {
            goto LABEL_211;
          }
        }
      }

      result = (void *)swift_unknownObjectRetain_n();
      v9 = v21;
      v18 = (void *)v11;
LABEL_211:
      v128 = *((unsigned __int16 *)v18 + 8);
      if (!*((_WORD *)v18 + 8)) {
        goto LABEL_228;
      }
      v129 = v18[3];
      v20 = __OFSUB__(v9, v129);
      v130 = v9 - v129;
      if (v20) {
        goto LABEL_386;
      }
      if (__OFADD__(v130, 1LL)) {
        goto LABEL_387;
      }
      if (v130 + 1 <= 0)
      {
        v128 = 0LL;
      }

      else
      {
        if ((_DWORD)v128 == 1)
        {
          v9 = v130;
LABEL_228:
          if (v9) {
            goto LABEL_381;
          }
          goto LABEL_229;
        }

        v134 = v18 + 6;
        v135 = 1LL;
        while (1)
        {
          v136 = *v134;
          v134 += 3;
          v9 = v130 - v136;
          if (__OFSUB__(v130, v136)) {
            goto LABEL_364;
          }
          if (__OFADD__(v9, 1LL)) {
            goto LABEL_365;
          }
          if (v9 + 1 < 1) {
            break;
          }
          ++v135;
          v130 = v9;
          if (v128 == v135) {
            goto LABEL_228;
          }
        }

        v128 = v135;
        v9 = v130;
      }

                v88 = (4 * *((_BYTE *)v87 + 18) + 8) & 0x3C;
                v86 = ((-15LL << v88) - 1) & v86 | (v29 << v88);
                v10 = (void *)v87[3 * v29 + 3];
                swift_unknownObjectRetain();
                result = (void *)swift_unknownObjectRelease();
                v87 = v10;
                if (!*((_BYTE *)v10 + 18)) {
                  goto LABEL_209;
                }
              }
            }

            result = (void *)swift_unknownObjectRetain_n();
            v8 = v181;
            v10 = (void *)v17;
LABEL_209:
            v124 = *((unsigned __int16 *)v10 + 8);
            if (*((_WORD *)v10 + 8))
            {
              v125 = v10[3];
              v22 = __OFSUB__(v8, v125);
              v126 = v8 - v125;
              if (v22) {
                goto LABEL_385;
              }
              if (__OFADD__(v126, 1LL)) {
                goto LABEL_386;
              }
              if (v126 + 1 <= 0)
              {
                v124 = 0LL;
              }

              else
              {
                if ((_DWORD)v124 == 1)
                {
                  v8 = v126;
                  goto LABEL_226;
                }

                v130 = v10 + 6;
                v131 = 1LL;
                while (1)
                {
                  v132 = *v130;
                  v130 += 3;
                  v8 = v126 - v132;
                  if (__OFSUB__(v126, v132)) {
                    goto LABEL_363;
                  }
                  if (__OFADD__(v8, 1LL)) {
                    goto LABEL_364;
                  }
                  if (v8 + 1 < 1) {
                    break;
                  }
                  ++v131;
                  v126 = v8;
                  if (v124 == v131) {
                    goto LABEL_226;
                  }
                }

                v124 = v131;
                v8 = v126;
              }
            }

            else
            {
LABEL_226:
              if (v8) {
                goto LABEL_380;
              }
            }

            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v14 = v86 & 0xFFFFFFFFFFFFF0FFLL | (v124 << 8);
            v81 = v180;
LABEL_168:
            swift_unknownObjectRetain();
            v177 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v179, v14, (uint64_t)v10, v17, v11);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = (void *)swift_unknownObjectRelease_n();
          }

          else
          {
            v93 = swift_unknownObjectRetain_n();
            v14 = specialized Rope._endPath.getter(v93);
            swift_unknownObjectRelease();
            v10 = 0LL;
            v8 = 0LL;
            if (v17) {
              goto LABEL_168;
            }
            swift_bridgeObjectRelease();
            result = (void *)swift_bridgeObjectRelease();
            v177 = 0LL;
          }

          v9 = a3;
          v33 = v176;
          v77 = v181 - v8;
          if (__OFSUB__(v181, v8)) {
            goto LABEL_360;
          }
          v8 = a2;
          goto LABEL_231;
        }

        if (v178 != v180[11]) {
          goto LABEL_356;
        }
        if (!*v176) {
          goto LABEL_411;
        }
        specialized Rope._Node._prepareModify(at:)(v14, (uint64_t)&v193);
        v204[0] = v194;
        v187 = v193;
        v188 = v194;
        v189 = v195;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v204);
        result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v204 + 8);
        v188 = MEMORY[0x18961AFF0];
        v180[11] = v178 + 1;
        if (!v180[8]) {
          goto LABEL_412;
        }
        specialized Rope._Node._finalizeModify(_:)(&v184, &v187);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*a4 != -1LL) {
          swift_once();
        }
        v65 = *a5;
        v66 = *a6;
        v191 = 0LL;
        v189 = 0u;
        v190 = 0u;
        v187 = 0u;
        v188 = 0u;
        swift_bridgeObjectRetain();
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v187, v65, v66);
        result = (void *)swift_bridgeObjectRelease();
        if (v178 + 1 != v180[11]) {
          goto LABEL_358;
        }
        if (!*v176) {
          goto LABEL_413;
        }
        specialized Rope._Node._prepareModify(at:)(v14, (uint64_t)&v196);
        v202 = v197;
        v203 = v198;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v202);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v203);
        v187 = v196;
        v189 = v199;
        v67 = *((void *)&v192 + 1);
        result = (void *)v192;
        v188 = v192;
        v68 = v178 + 2;
        v180[11] = v178 + 2;
        if (!v180[8]) {
          goto LABEL_414;
        }
        v174 = (uint64_t)result;
        swift_bridgeObjectRetain_n();
        v171 = v67;
        swift_bridgeObjectRetain_n();
        v10 = specialized Rope._Node._finalizeModify(_:)(v183, &v187);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v70 = v180[8];
        v69 = v180[9];
        v71 = v180[10];
        v72 = v180[11];
        v179 = v178 + 2;
        *(void *)&v187 = v68;
        *((void *)&v187 + 1) = v14;
        *(void *)&v188 = v10;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(after:)(&v187, v70, v69, v71, v72);
        swift_unknownObjectRelease();
        v73 = v187;
        v74 = v188;
        v75 = swift_unknownObjectRetain();
        v76 = specialized Rope._endPath.getter(v75);
        result = (void *)swift_unknownObjectRelease();
        if (*((void *)&v73 + 1) >= v76)
        {
          v9 = a3;
          v8 = a2;
          v33 = v176;
LABEL_170:
          v77 = v181;
          goto LABEL_183;
        }

        v77 = v181;
        if ((void)v73 != v180[11]) {
          goto LABEL_370;
        }
        if (v74)
        {
          v78 = v74 + 24 * ((*((void *)&v73 + 1) >> ((4 * *(_BYTE *)(v74 + 18) + 8) & 0x3C)) & 0xFLL);
          v79 = *(void *)(v78 + 32);
          v80 = *(void *)(v78 + 40);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          v94 = v180[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(*((unint64_t *)&v73 + 1), v94);
          v79 = v95;
          v80 = v96;
          swift_unknownObjectRelease();
        }

        v9 = a3;
        v8 = a2;
        v33 = v176;
        if ((specialized static Dictionary<>.== infix(_:_:)(v79, v174) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          result = (void *)swift_bridgeObjectRelease();
          goto LABEL_183;
        }

        v97 = specialized static Set.== infix(_:_:)(v80, v171);
        swift_bridgeObjectRelease();
        result = (void *)swift_bridgeObjectRelease();
        if ((v97 & 1) != 0)
        {
          v14 = specialized Rope._remove(at:)((uint64_t)&v187, v179, v14);
          v98 = v180[8];
          v99 = v180[11];
          if (v14 < specialized Rope._endPath.getter(v98) && *(_BYTE *)(v98 + 18))
          {
            v100 = (v14 >> ((4 * *(_BYTE *)(v98 + 18) + 8) & 0x3C)) & 0xF;
            swift_unknownObjectRetain();
            specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v98 + 24, v100, v14);
            swift_unknownObjectRelease();
          }

          v101 = v187;
          swift_bridgeObjectRelease();
          result = (void *)swift_bridgeObjectRelease();
          if (v99 != v180[11]) {
            goto LABEL_392;
          }
          if (!*v176) {
            goto LABEL_415;
          }
          result = (void *)specialized Rope._Node._prepareModify(at:)(v14, (uint64_t)v200);
          v187 = v200[0];
          v188 = v200[1];
          v189 = v200[2];
          if (__OFADD__(*((void *)&v200[0] + 1), v101)) {
            goto LABEL_393;
          }
          *((void *)&v187 + 1) = *((void *)&v200[0] + 1) + v101;
          v179 = v99 + 1;
          v180[11] = v99 + 1;
          if (!v180[8]) {
            goto LABEL_416;
          }
          v10 = specialized Rope._Node._finalizeModify(_:)(v183, &v187);
          swift_bridgeObjectRelease();
          result = (void *)swift_bridgeObjectRelease();
          goto LABEL_170;
        }

          v87 = (4 * *((_BYTE *)v6 + 18) + 8) & 0x3C;
          v22 = ((-15LL << v87) - 1) & v22 | (v33 << v87);
          v18 = (void *)v6[3 * v33 + 3];
          swift_unknownObjectRetain();
          result = (void *)swift_unknownObjectRelease();
          v6 = v18;
          if (!*((_BYTE *)v18 + 18)) {
            goto LABEL_211;
          }
        }
      }

      result = (void *)swift_unknownObjectRetain_n();
      v9 = v21;
      v18 = (void *)v11;
LABEL_211:
      v127 = *((unsigned __int16 *)v18 + 8);
      if (!*((_WORD *)v18 + 8)) {
        goto LABEL_228;
      }
      v128 = v18[3];
      v20 = __OFSUB__(v9, v128);
      v129 = v9 - v128;
      if (v20) {
        goto LABEL_386;
      }
      if (__OFADD__(v129, 1LL)) {
        goto LABEL_387;
      }
      if (v129 + 1 <= 0)
      {
        v127 = 0LL;
      }

      else
      {
        if ((_DWORD)v127 == 1)
        {
          v9 = v129;
LABEL_228:
          if (v9) {
            goto LABEL_381;
          }
          goto LABEL_229;
        }

        v133 = v18 + 6;
        v134 = 1LL;
        while (1)
        {
          v135 = *v133;
          v133 += 3;
          v9 = v129 - v135;
          if (__OFSUB__(v129, v135)) {
            goto LABEL_364;
          }
          if (__OFADD__(v9, 1LL)) {
            goto LABEL_365;
          }
          if (v9 + 1 < 1) {
            break;
          }
          ++v134;
          v129 = v9;
          if (v127 == v134) {
            goto LABEL_228;
          }
        }

        v127 = v134;
        v9 = v129;
      }
    }

    v123 = MEMORY[0x18961AFF0];
    if (!*(void *)(MEMORY[0x18961AFF0] + 16LL))
    {
LABEL_155:
      v20 = MEMORY[0x18961AFF0];
      goto LABEL_156;
    }

  swift_bridgeObjectRelease();
  return v3;
}

      __break(1u);
      goto LABEL_154;
    }

    v5 = v63;
    goto LABEL_60;
  }

void sub_182ECDDFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

id _setInCache(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1 + 32LL * a3;
  v10 = *(void **)(v9 + 16);
  if (v10) {

  }
  id result = a2;
  *(void *)(v9 + 16) = result;
  *(_DWORD *)(v9 + 24) = a3;
  *(void *)uint64_t v9 = a4;
  *(void *)(v9 + _Block_object_dispose(va, 8) = a5;
  return result;
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  if ((v0 & 0xC000000000000001LL) != 0)
  {
    if (v0 < 0) {
      uint64_t v1 = v0;
    }
    else {
      uint64_t v1 = v0 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    return (NSDictionary)v1;
  }

  else
  {
    swift_bridgeObjectRetain();
    return (NSDictionary)_NativeDictionary.bridged()();
  }

uint64_t _convertErrorToNSError(_:)(void *a1)
{
  id v1 = a1;
  return _swift_stdlib_bridgeErrorToNSError();
}

NSString *newJSONNumber(uint64_t a1, void *a2)
{
  v3 = (void *)a1;
  uint64_t v104 = *MEMORY[0x1895F89C0];
  unint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)a1;
  v6 = (unsigned __int8 *)(*(void *)a1 + v4);
  int v7 = *v6;
  int v8 = v7;
  unint64_t v9 = v4;
  if (v7 == 45)
  {
    unint64_t v9 = v4 + 1;
    if (*(void *)(a1 + 16) <= v4 + 1)
    {
      if (a2)
      {
        unint64_t v14 = *(void *)(a1 + 48);
        BOOL v12 = v4 >= v14;
        unint64_t v13 = v4 - v14;
        goto LABEL_9;
      }

      return 0LL;
    }

    *(void *)(a1 + 24) = v9;
    int v8 = *(unsigned __int8 *)(v5 + v9);
    unsigned int v10 = v8 - 48;
    if ((*(_BYTE *)(a1 + 8) & 8) != 0)
    {
      if (v8 != 46 && v10 >= 0xA)
      {
LABEL_5:
        if (a2)
        {
          unint64_t v11 = *(void *)(a1 + 48);
          BOOL v12 = v9 >= v11;
          unint64_t v13 = v9 - v11;
LABEL_9:
          if (v12) {
            unint64_t v15 = v13;
          }
          else {
            unint64_t v15 = 0LL;
          }
          v16 = objc_alloc(&OBJC_CLASS___NSString);
          uint64_t v17 = v3[5];
          uint64_t v97 = v15;
          v18 = @"Number with minus sign but no digits";
LABEL_13:
          v19 = -[NSString initWithFormat:]( v16,  "initWithFormat:",  @"%@ around line %lu, column %lu.",  v18,  v17,  v97);
          v20 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  v3[3]);
          v102 = @"NSDebugDescription";
          v103 = @"NSJSONSerializationErrorIndex";
          v98 = v19;
          v99 = v20;
          *a2 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v98 forKeys:&v102 count:2]);

          return 0LL;
        }

        return 0LL;
      }
    }

    else if (v10 >= 0xA)
    {
      goto LABEL_5;
    }
  }

  if (v8 == 48)
  {
    ++v9;
    unint64_t v23 = *(void *)(a1 + 16);
    *(void *)(a1 + 24) = v9;
    if (v23 <= v9)
    {
      v29 = objc_alloc(&OBJC_CLASS___NSNumber);
      uint64_t v30 = 0LL;
      goto LABEL_33;
    }

    if (*(unsigned __int8 *)(v5 + v9) - 48 <= 9)
    {
      if (!a2) {
        return 0LL;
      }
      unint64_t v24 = *(void *)(a1 + 48);
      BOOL v12 = v9 >= v24;
      unint64_t v25 = v9 - v24;
      if (v12) {
        unint64_t v26 = v25;
      }
      else {
        unint64_t v26 = 0LL;
      }
      v16 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v17 = v3[5];
      uint64_t v97 = v26;
      v18 = @"Number with leading zero";
      goto LABEL_13;
    }
  }

  else if ((v8 - 48) > 9)
  {
    if (v8 != 46 || (*(void *)(a1 + 8) & 8LL) == 0)
    {
      if (!a2) {
        return 0LL;
      }
      unint64_t v33 = *(void *)(a1 + 48);
      BOOL v12 = v9 >= v33;
      unint64_t v34 = v9 - v33;
      if (v12) {
        unint64_t v35 = v34;
      }
      else {
        unint64_t v35 = 0LL;
      }
      v16 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v17 = v3[5];
      uint64_t v97 = v35;
      v18 = @"Malformed number";
      goto LABEL_13;
    }

    unint64_t v23 = *(void *)(a1 + 16);
    if (v23 <= v9 + 1)
    {
      if (!a2) {
        return 0LL;
      }
      unint64_t v57 = *(void *)(a1 + 48);
      BOOL v12 = v9 >= v57;
      unint64_t v58 = v9 - v57;
      if (v12) {
        unint64_t v59 = v58;
      }
      else {
        unint64_t v59 = 0LL;
      }
      v16 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v17 = v3[5];
      uint64_t v97 = v59;
      v18 = @"Decimal point before EoF";
      goto LABEL_13;
    }

    if (*(unsigned __int8 *)(v5 + v9 + 1) - 48 >= 0xA)
    {
      if (!a2) {
        return 0LL;
      }
      unint64_t v70 = *(void *)(a1 + 48);
      BOOL v12 = v9 >= v70;
      unint64_t v71 = v9 - v70;
      if (v12) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = 0LL;
      }
      v16 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v17 = v3[5];
      uint64_t v97 = v72;
      v18 = @"Decimal point with no digits";
      goto LABEL_13;
    }
  }

  else
  {
    unint64_t v23 = *(void *)(a1 + 16);
    unint64_t v27 = v9 + 1;
    do
    {
      unint64_t v9 = v27;
      *(void *)(a1 + 24) = v27;
      if (v23 <= v27) {
        break;
      }
      unsigned int v28 = *(unsigned __int8 *)(v5 + v27++) - 48;
    }

    while (v28 < 0xA);
  }

  if (v23 > v9 && *(_BYTE *)(v5 + v9) == 46)
  {
    unint64_t v36 = v9 + 1;
    if ((*(_BYTE *)(a1 + 8) & 8) == 0)
    {
      if (v23 <= v36)
      {
        unint64_t v36 = v9;
      }

      else
      {
        *(void *)(a1 + 24) = v36;
        if (*(unsigned __int8 *)(v5 + v36) - 48 <= 9)
        {
          unint64_t v37 = v9 + 2;
          while (v23 != v37)
          {
            *(void *)(a1 + 24) = v37;
            unsigned int v38 = *(unsigned __int8 *)(v5 + v37++) - 48;
            if (v38 >= 0xA) {
              goto LABEL_123;
            }
          }

LABEL_178:
          uint64_t v40 = 0LL;
          int v41 = 0;
          *(void *)(a1 + 24) = v23;
          char v39 = 1;
          unint64_t v9 = v23;
          goto LABEL_57;
        }
      }

      if (!a2) {
        return 0LL;
      }
      unint64_t v77 = *(void *)(a1 + 48);
      BOOL v12 = v36 >= v77;
      unint64_t v78 = v36 - v77;
      if (v12) {
        unint64_t v79 = v78;
      }
      else {
        unint64_t v79 = 0LL;
      }
      v16 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v17 = v3[5];
      uint64_t v97 = v79;
      v18 = @"Number with decimal point but no additional digits";
      goto LABEL_13;
    }

    *(void *)(a1 + 24) = v36;
    if (v23 <= v36)
    {
      char v39 = 0;
      uint64_t v40 = 0LL;
      int v41 = 1;
    }

    else
    {
      if (*(unsigned __int8 *)(v5 + v36) - 48 <= 9)
      {
        unint64_t v37 = v9 + 2;
        while (v23 != v37)
        {
          *(void *)(a1 + 24) = v37;
          unsigned int v69 = *(unsigned __int8 *)(v5 + v37++) - 48;
          if (v69 >= 0xA)
          {
LABEL_123:
            uint64_t v40 = 0LL;
            int v41 = 0;
            unint64_t v9 = v37 - 1;
            char v39 = 1;
            goto LABEL_57;
          }
        }

        goto LABEL_178;
      }

      char v39 = 0;
      int v41 = 1;
      uint64_t v40 = -1LL;
    }

    ++v9;
    goto LABEL_57;
  }

  char v39 = 0;
  uint64_t v40 = 0LL;
  int v41 = 1;
LABEL_57:
  if (v23 <= v9 || (*(unsigned __int8 *)(v5 + v9) | 0x20) != 0x65)
  {
    if (!v41) {
      goto LABEL_98;
    }
    unint64_t v46 = 0LL;
    v47 = (unsigned __int8 *)(v5 + v9 + v40 - 1);
    if (v7 == 45) {
      v48 = v6 + 1;
    }
    else {
      v48 = v6;
    }
    unint64_t v49 = 1LL;
    while (v47 >= v48)
    {
      BOOL v50 = 0;
      unint64_t v51 = 0LL;
      if (v49)
      {
        uint64_t v52 = *v47 - 48LL;
        if (*v47 != 48LL)
        {
          unint64_t v51 = v52 * v49;
          BOOL v50 = __CFADD__(v46, v52 * v49) || ((unint64_t)v52 * (unsigned __int128)v49) >> 64 != 0;
        }
      }

      --v47;
      int v54 = v49 > 0x1999999999999999LL || v50;
      a1 = 10 * v49;
      if (v47 >= v48)
      {
        BOOL v55 = v49 == 0;
      }

      else
      {
        a1 = v49;
        BOOL v55 = 1;
      }

      v46 += v51;
      if (v55) {
        int v56 = v50;
      }
      else {
        int v56 = v54;
      }
      unint64_t v49 = a1;
      if (v56) {
        goto LABEL_98;
      }
    }

    if (v7 != 45)
    {
      v31 = -[NSNumber initWithUnsignedLongLong:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedLongLong:", v46);
      return newJSONNumberCreateRoundTripping((uint64_t)v3, v4, v31);
    }

    if (v46 > 0x8000000000000000LL)
    {
LABEL_98:
      uint64_t v45 = 0LL;
      goto LABEL_99;
    }

    v29 = objc_alloc(&OBJC_CLASS___NSNumber);
    uint64_t v30 = -(uint64_t)v46;
LABEL_33:
    v31 = -[NSNumber initWithLongLong:](v29, "initWithLongLong:", v30);
    return newJSONNumberCreateRoundTripping((uint64_t)v3, v4, v31);
  }

  unint64_t v42 = v9 + 1;
  if (v23 <= v9 + 1)
  {
    if (!a2) {
      return 0LL;
    }
    unint64_t v66 = *(void *)(a1 + 48);
    BOOL v12 = v9 >= v66;
    unint64_t v67 = v9 - v66;
    if (v12) {
      unint64_t v68 = v67;
    }
    else {
      unint64_t v68 = 0LL;
    }
    v16 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v17 = v3[5];
    uint64_t v97 = v68;
    v18 = @"Number with exponent followed by EoF";
    goto LABEL_13;
  }

  *(void *)(a1 + 24) = v42;
  int v43 = *(unsigned __int8 *)(v5 + v42);
  if (v43 != 45 && v43 != 43)
  {
    if ((v43 - 48) >= 0xA)
    {
      if (!a2) {
        return 0LL;
      }
      unint64_t v93 = *(void *)(a1 + 48);
      if (v9 >= v93) {
        unint64_t v94 = v42 - v93;
      }
      else {
        unint64_t v94 = 0LL;
      }
      v16 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v17 = v3[5];
      uint64_t v97 = v94;
      v18 = @"Number with 'e' but no additional digits";
      goto LABEL_13;
    }

    uint64_t v45 = 2LL;
    unint64_t v44 = v9 + 1;
    goto LABEL_169;
  }

  unint64_t v44 = v9 + 2;
  if (v23 <= v44)
  {
LABEL_182:
    if (!a2) {
      return 0LL;
    }
    unint64_t v90 = *(void *)(a1 + 48);
    BOOL v12 = v42 >= v90;
    unint64_t v91 = v42 - v90;
    if (v12) {
      unint64_t v92 = v91;
    }
    else {
      unint64_t v92 = 0LL;
    }
    v16 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v17 = v3[5];
    uint64_t v97 = v92;
    v18 = @"Number with '+' or '-' but no additional digits";
    goto LABEL_13;
  }

  *(void *)(a1 + 24) = v44;
  if (*(unsigned __int8 *)(v5 + v44) - 48 > 9)
  {
    unint64_t v42 = v44;
    goto LABEL_182;
  }

  uint64_t v45 = 3LL;
LABEL_169:
  unint64_t v9 = v44 + 1;
  while (1)
  {
    *(void *)(a1 + 24) = v9;
    ++v45;
    ++v9;
    if (v45 == 6)
    {
      *(void *)(a1 + 24) = v4;
      if (!a2) {
        return 0LL;
      }
      unint64_t v87 = *(void *)(a1 + 48);
      BOOL v12 = v4 >= v87;
      unint64_t v88 = v4 - v87;
      if (v12) {
        unint64_t v89 = v88;
      }
      else {
        unint64_t v89 = 0LL;
      }
      v16 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v17 = v3[5];
      uint64_t v97 = v89;
      v18 = @"Number wound up as NaN";
      goto LABEL_13;
    }
  }

              unint64_t v83 = v99;
LABEL_184:
              if (v83) {
                goto LABEL_326;
              }
            }
          }
        }

    uint64_t v45 = v106;
LABEL_179:
    swift_bridgeObjectRelease();
    if ((v44 & 1) != 0) {
      goto LABEL_36;
    }
LABEL_39:
    *(void *)(v45 + 8 * (v40 >> 6) + 64) |= 1LL << v40;
    unint64_t v49 = (uint64_t *)(*(void *)(v45 + 48) + 16 * v40);
    *unint64_t v49 = v10;
    v49[1] = v9;
    BOOL v50 = (uint64_t *)(*(void *)(v45 + 56) + 16 * v40);
    *BOOL v50 = v21;
    v50[1] = v22;
    unint64_t v51 = *(void *)(v45 + 16);
    uint64_t v52 = __OFADD__(v51, 1LL);
    v53 = v51 + 1;
    if (v52) {
      goto LABEL_185;
    }
    *(void *)(v45 + 16) = v53;
    swift_bridgeObjectRetain();
LABEL_41:
    v165 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = v158;
LABEL_42:
    a1 = v159;
LABEL_56:
    swift_bridgeObjectRelease();
    uint64_t v5 = v7;
    if (v7 == v162)
    {
      swift_bridgeObjectRelease();
      return v165;
    }
  }

  if ((v10 & 0x1000000000000000LL) == 0)
  {
LABEL_69:
    swift_bridgeObjectRetain();
    v86 = v155;
    _StringGuts._slowWithCString<A>(_:)();
    v155 = v86;
    goto LABEL_56;
  }

  unint64_t v11 = swift_bridgeObjectRetain();
  MEMORY[0x1895F8858](v11);
  BOOL v12 = fgetxattr(a1, (const char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32), v146, 0x3E8uLL, 0, 0);
  if (v12 == -1)
  {
    uint64_t v30 = fgetxattr(a1, (const char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32), 0LL, 0LL, 0, 0);
    v31 = malloc(v30);
    if (!v31) {
      goto LABEL_192;
    }
    v32 = (unint64_t)v31;
    if (fgetxattr(a1, (const char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32), v31, v30, 0, 0) == v30)
    {
      *(_OWORD *)name = v156;
      swift_bridgeObjectRetain();
      unint64_t v33 = specialized Data.init(bytesNoCopy:count:deallocator:)(v32, v30, (unint64_t *)name);
      specialized Dictionary.subscript.setter(v33, v34, v10, v9);
      goto LABEL_56;
    }

    unint64_t v67 = (void *)v32;
    goto LABEL_55;
  }

  v163 = &v151;
  if (v12)
  {
    unint64_t v13 = &v146[v12];
    if (v12 <= 14)
    {
      v160 = (_DWORD *)specialized Data.InlineData.init(_:)(v146, v13);
      unint64_t v15 = v36 & 0xFFFFFFFFFFFFFFLL;
    }

    else if ((unint64_t)v12 >= 0x7FFFFFFF)
    {
      v160 = (_DWORD *)specialized Data.LargeSlice.init(_:)((unint64_t)v146, (uint64_t)v13);
      unint64_t v15 = v54 | 0x8000000000000000LL;
    }

    else
    {
      v160 = specialized Data.InlineSlice.init(_:)((unint64_t)v146, (uint64_t)v13);
      unint64_t v15 = v14 | 0x4000000000000000LL;
    }
  }

  else
  {
    v160 = 0LL;
    unint64_t v15 = 0xC000000000000000LL;
  }

  swift_bridgeObjectRetain();
  BOOL v55 = swift_isUniquelyReferenced_nonNull_native();
  int v56 = v165;
  v165 = 0x8000000000000000LL;
  *(void *)name = v56;
  unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
  unint64_t v59 = *(void *)(v56 + 16);
  size_t v60 = (v57 & 1) == 0;
  unint64_t v61 = v59 + v60;
  if (__OFADD__(v59, v60))
  {
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
    goto LABEL_186;
  }

  unint64_t v62 = v57;
  if (*(void *)(v56 + 24) < v61)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v61, v55);
    unint64_t v63 = *(void *)name;
    uint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
    if ((v62 & 1) != (v65 & 1)) {
      goto LABEL_197;
    }
    unint64_t v58 = v64;
    v2 = v158;
    if ((v62 & 1) != 0)
    {
LABEL_48:
      unint64_t v66 = *(void *)(v63 + 56) + 16 * v58;
      outlined consume of Data._Representation(*(void *)v66, *(void *)(v66 + 8));
      *(void *)unint64_t v66 = v160;
      *(void *)(v66 + _Block_object_dispose(va, 8) = v15;
LABEL_52:
      v165 = v63;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v159;
      goto LABEL_56;
    }

            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
            goto LABEL_182;
          }
        }

        unint64_t v23 = v198;
LABEL_173:
        v172 = v202;
        *v202 = v53;
        v172[1] = v54;
        v172[2] = v55;
        v172[3] = v47;
        v173 = v203;
        v174 = v212;
        *v203 = v23;
        v173[1] = v174;
        v175 = v200;
        v173[2] = v201;
        v173[3] = v175;
        v173[4] = v207;
        return result;
      }

      v216 = &v228;
      v214 = (__int128 *)&v247;
      v178 = (uint64_t *)(v204 + 40);
      v185 = v207;
      v186 = v28;
      uint64_t v64 = v212;
      int v65 = v26;
      v199 = v59;
LABEL_64:
      unint64_t v66 = *(void *)(v56 + 64);
      unint64_t v68 = *(void *)(v56 + 80);
      unint64_t v67 = *(void *)(v56 + 88);
      v224 = v23;
      v225 = v64;
      v226 = v65;
      if (v23 != v67) {
        goto LABEL_192;
      }
      v217 = v68;
      unsigned int v69 = v56;
      if (v66)
      {
        unint64_t v70 = *(unsigned __int8 *)(v66 + 18);
        unint64_t v71 = v64;
        unint64_t v72 = v65;
        id result = swift_unknownObjectRetain();
        int v65 = v72;
        uint64_t v64 = v71;
        if (v71 <= v70) {
          goto LABEL_193;
        }
      }

      else if (!v64)
      {
LABEL_193:
        __break(1u);
        goto LABEL_194;
      }

      if (v65)
      {
        v73 = (4 * *(_BYTE *)(v65 + 18) + 8) & 0x3C;
        if (((v64 >> v73) & 0xF) != 0)
        {
          int v74 = ((((v64 >> v73) & 0xF) - 1) << v73) | ((-15LL << v73) - 1) & v64;
          v225 = v74;
          int v56 = v69;
LABEL_76:
          unint64_t v79 = (4 * *(_BYTE *)(v65 + 18) + 8) & 0x3C;
          v181 = v74;
          v179 = v65;
          v80 = *(void *)(v65 + 24 * ((v74 >> v79) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v81 = 0;
LABEL_80:
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          id result = swift_bridgeObjectRelease();
          if (__OFSUB__(v185, v80))
          {
LABEL_195:
            __break(1u);
            goto LABEL_196;
          }

          if (v23 != *(void *)(v56 + 88))
          {
LABEL_196:
            __break(1u);
            goto LABEL_197;
          }

          v177 = v185 - v80;
          if ((v81 & 1) != 0)
          {
            unint64_t v82 = *(void *)(v56 + 64);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v181, v82);
            v180 = v83;
            v85 = v84;
            swift_unknownObjectRelease();
          }

          else
          {
            v86 = v179 + 24 * ((v181 >> ((4 * *(_BYTE *)(v179 + 18) + 8) & 0x3C)) & 0xF);
            v85 = *(void *)(v86 + 32);
            unint64_t v87 = *(void *)(v86 + 40);
            swift_bridgeObjectRetain();
            v180 = v87;
            swift_bridgeObjectRetain();
          }

          unint64_t v88 = v199;
          --v186;
          id result = swift_bridgeObjectRetain();
          unint64_t v89 = 0LL;
          unint64_t v90 = v178;
          v217 = v85;
          while (1)
          {
            unint64_t v92 = v89 + 1;
            if (__OFADD__(v89, 1LL)) {
              goto LABEL_177;
            }
            unint64_t v93 = *(v90 - 1);
            unint64_t v94 = *v90;
            if (*(void *)(v88 + 16))
            {
              swift_bridgeObjectRetain_n();
              uint64_t v95 = specialized __RawDictionaryStorage.find<A>(_:)(v93, v94);
              if ((v96 & 1) != 0)
              {
                outlined init with copy of AttributedString._AttributeValue( *(void *)(v88 + 56) + 72 * v95,  (uint64_t)&v235);
              }

              else
              {
                v239 = 0LL;
                v237 = 0u;
                v238 = 0u;
                v235 = 0u;
                v236 = 0u;
              }

              swift_bridgeObjectRelease();
              v85 = v217;
              if (!*(void *)(v217 + 16))
              {
LABEL_95:
                v234 = 0LL;
                v232 = 0u;
                v233 = 0u;
                v230 = 0u;
                v231 = 0u;
                goto LABEL_102;
              }
            }

            else
            {
              v239 = 0LL;
              v237 = 0u;
              v238 = 0u;
              v235 = 0u;
              v236 = 0u;
              swift_bridgeObjectRetain();
              if (!*(void *)(v85 + 16)) {
                goto LABEL_95;
              }
            }

            swift_bridgeObjectRetain();
            uint64_t v97 = specialized __RawDictionaryStorage.find<A>(_:)(v93, v94);
            if ((v98 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue( *(void *)(v85 + 56) + 72 * v97,  (uint64_t)&v230);
            }

            else
            {
              v234 = 0LL;
              v232 = 0u;
              v233 = 0u;
              v230 = 0u;
              v231 = 0u;
            }

            swift_bridgeObjectRelease();
LABEL_102:
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v235,  (uint64_t)&v224,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v230,  (uint64_t)v216,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v227)
            {
              if (v229) {
                goto LABEL_119;
              }
              outlined destroy of Any?( (uint64_t)&v224,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v230,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              id result = outlined destroy of Any?( (uint64_t)&v235,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_89;
            }

            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v224,  (uint64_t)v223,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v229)
            {
              outlined destroy of AttributedString._AttributeValue((uint64_t)v223);
LABEL_119:
              outlined destroy of Any?( (uint64_t)&v224,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?( (uint64_t)&v230,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v235,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_120:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v112 = v185;
              goto LABEL_121;
            }

            v99 = *((_OWORD *)v216 + 3);
            v220 = *((_OWORD *)v216 + 2);
            v221 = v99;
            v222 = v216[8];
            int v100 = *((_OWORD *)v216 + 1);
            v218 = *(_OWORD *)v216;
            v219 = v100;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v223,  (uint64_t)v253);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v218,  (uint64_t)v252);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)v253,  (uint64_t)&v245,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)v252,  (uint64_t)v214,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v246)
            {
              if (!v248)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v245);
LABEL_87:
                unint64_t v91 = 0;
                goto LABEL_88;
              }

              outlined init with take of any PredicateExpression<Self.Output == B1>(&v245, (uint64_t)v249);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v214, (uint64_t)v244);
              v101 = v250;
              v197 = v251;
              v196 = __swift_project_boxed_opaque_existential_1(v249, v250);
              v206 = &v176;
              v102 = *(void *)(v101 - 8);
              MEMORY[0x1895F8858](v196);
              uint64_t v104 = (char *)&v176 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0LL);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v244,  (uint64_t)v243);
              v105 = type metadata accessor for Optional();
              v205 = &v176;
              v106 = *(void *)(v105 - 8);
              MEMORY[0x1895F8858](v105);
              v108 = (char *)&v176 - v107;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              v109 = swift_dynamicCast();
              v110 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v102 + 56);
              if (v109)
              {
                v110(v108, 0LL, 1LL, v101);
                (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v104, v108, v101);
                unint64_t v91 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v102 + 8))(v104, v101);
              }

              else
              {
                v110(v108, 1LL, 1LL, v101);
                (*(void (**)(char *, uint64_t))(v106 + 8))(v108, v105);
                unint64_t v91 = 0;
              }

              int v56 = v213;
              unint64_t v63 = v211;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v244);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v249);
              unint64_t v88 = v199;
            }

            else
            {
              if (v248)
              {
                outlined destroy of Any?( (uint64_t)v214,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_87;
              }

              unint64_t v91 = 1;
            }

                    __break(1u);
LABEL_179:
                    __break(1u);
LABEL_180:
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
                    v132 = static _SetStorage.copy(original:)();
                    v21 = v132;
                    if (*(void *)(v5 + 16))
                    {
                      v133 = (void *)(v132 + 56);
                      v134 = v5 + 56;
                      v135 = (unint64_t)((1LL << *(_BYTE *)(v21 + 32)) + 63) >> 6;
                      v136 = 0LL;
                      *(void *)(v21 + 16) = *(void *)(v5 + 16);
                      v137 = 1LL << *(_BYTE *)(v5 + 32);
                      v138 = -1LL;
                      if (v137 < 64) {
                        v138 = ~(-1LL << v137);
                      }
                      v139 = v138 & *(void *)(v5 + 56);
                      v140 = (unint64_t)(v137 + 63) >> 6;
                      while (1)
                      {
                        if (v139)
                        {
                          v141 = __clz(__rbit64(v139));
                          v139 &= v139 - 1;
                          v142 = v141 | (v136 << 6);
                        }

                        else
                        {
                          v147 = v136 + 1;
                          if (__OFADD__(v136, 1LL)) {
                            goto LABEL_212;
                          }
                          if (v147 >= v140) {
                            break;
                          }
                          v148 = *(void *)(v134 + 8 * v147);
                          ++v136;
                          if (!v148)
                          {
                            v136 = v147 + 1;
                            if (v147 + 1 >= v140) {
                              break;
                            }
                            v148 = *(void *)(v134 + 8 * v136);
                            if (!v148)
                            {
                              v136 = v147 + 2;
                              if (v147 + 2 >= v140) {
                                break;
                              }
                              v148 = *(void *)(v134 + 8 * v136);
                              if (!v148)
                              {
                                v136 = v147 + 3;
                                if (v147 + 3 >= v140) {
                                  break;
                                }
                                v148 = *(void *)(v134 + 8 * v136);
                                if (!v148)
                                {
                                  v136 = v147 + 4;
                                  if (v147 + 4 >= v140) {
                                    break;
                                  }
                                  v148 = *(void *)(v134 + 8 * v136);
                                  if (!v148)
                                  {
                                    v136 = v147 + 5;
                                    if (v147 + 5 >= v140) {
                                      break;
                                    }
                                    v148 = *(void *)(v134 + 8 * v136);
                                    if (!v148)
                                    {
                                      v149 = v147 + 6;
                                      if (v149 >= v140) {
                                        break;
                                      }
                                      v148 = *(void *)(v134 + 8 * v149);
                                      if (!v148)
                                      {
                                        while (1)
                                        {
                                          v136 = v149 + 1;
                                          if (__OFADD__(v149, 1LL)) {
                                            break;
                                          }
                                          if (v136 >= v140) {
                                            goto LABEL_210;
                                          }
                                          v148 = *(void *)(v134 + 8 * v136);
                                          ++v149;
                                          if (v148) {
                                            goto LABEL_209;
                                          }
                                        }

      if (!isNegative_getter) {
        goto LABEL_185;
      }
      if (i <= 0x7F) {
        return -(int)i;
      }
LABEL_186:
      unint64_t v92 = static String._fromUTF8Repairing(_:)();
      i = v93;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)unint64_t v90 = v92;
      *(void *)(v90 + _Block_object_dispose(va, 8) = i;
      *(_OWORD *)(v90 + 16) = 0u;
      *(_OWORD *)(v90 + 32) = 0u;
      unint64_t v91 = 11;
      goto LABEL_187;
    }

      if (!isNegative_getter) {
        goto LABEL_185;
      }
      if (!(i >> 15)) {
        return -(int)i;
      }
LABEL_186:
      unint64_t v92 = static String._fromUTF8Repairing(_:)();
      i = v93;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)unint64_t v90 = v92;
      *(void *)(v90 + _Block_object_dispose(va, 8) = i;
      *(_OWORD *)(v90 + 16) = 0u;
      *(_OWORD *)(v90 + 32) = 0u;
      unint64_t v91 = 11;
      goto LABEL_187;
    }

      if (!isNegative_getter) {
        goto LABEL_185;
      }
      if (!(i >> 31)) {
        return -(int)i;
      }
LABEL_186:
      unint64_t v92 = static String._fromUTF8Repairing(_:)();
      i = v93;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)unint64_t v90 = v92;
      *(void *)(v90 + _Block_object_dispose(va, 8) = i;
      *(_OWORD *)(v90 + 16) = 0u;
      *(_OWORD *)(v90 + 32) = 0u;
      unint64_t v91 = 11;
      goto LABEL_187;
    }

      if (!isNegative_getter) {
        goto LABEL_185;
      }
      if ((i & 0x8000000000000000LL) == 0) {
        return (char *)-(uint64_t)i;
      }
LABEL_186:
      unint64_t v94 = static String._fromUTF8Repairing(_:)();
      i = v95;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)unint64_t v92 = v94;
      *(void *)(v92 + _Block_object_dispose(va, 8) = i;
      *(_OWORD *)(v92 + 16) = 0u;
      *(_OWORD *)(v92 + 32) = 0u;
      unint64_t v93 = 11;
      goto LABEL_187;
    }

                            swift_bridgeObjectRelease();
                            unint64_t v4 = v189;
                            int v8 = v193;
                            uint64_t v0 = &unk_18C5D1000;
                            int v7 = v147;
                            v73 = v198;
                            if ((v196 & 1) != 0) {
                              goto LABEL_73;
                            }
LABEL_76:
                            *(void *)(v7 + 8 * (v69 >> 6) + 64) |= 1LL << v69;
                            unint64_t v77 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v69);
                            *unint64_t v77 = v73;
                            v77[1] = v65;
                            unint64_t v78 = (uint64_t *)(*(void *)(v7 + 56) + 16 * v69);
                            *unint64_t v78 = v14;
                            v78[1] = v13;
                            unint64_t v79 = *(void *)(v7 + 16);
                            unint64_t v44 = __OFADD__(v79, 1LL);
                            v80 = v79 + 1;
                            if (v44) {
                              goto LABEL_227;
                            }
                            *(void *)(v7 + 16) = v80;
                            swift_bridgeObjectRetain();
LABEL_78:
                            v6 = v8 + 1;
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            unint64_t v81 = swift_conformsToProtocol2();
                            if (v81) {
                              unint64_t v82 = v81;
                            }
                            else {
                              unint64_t v82 = 0LL;
                            }
                            if (!v81) {
                              unint64_t v14 = 0LL;
                            }
                            if (!v14) {
                              goto LABEL_4;
                            }
                            v129 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 24))(v14, v82);
                            v131 = v130;
                            char v39 = v200;
                            v132 = swift_isUniquelyReferenced_nonNull_native();
                            v199 = v129;
                            v134 = specialized __RawDictionaryStorage.find<A>(_:)(v129, v131);
                            v135 = *(void *)(v200 + 16);
                            v136 = (v133 & 1) == 0;
                            v137 = v135 + v136;
                            if (__OFADD__(v135, v136)) {
                              goto LABEL_230;
                            }
                            v192 = v7;
                            if (*(void *)(v200 + 24) < v137)
                            {
                              v195 = v133;
                              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v137, v132);
                              unint64_t v83 = (void *)v200;
                              v138 = v199;
                              char v39 = v200;
                              v139 = specialized __RawDictionaryStorage.find<A>(_:)(v199, v131);
                              if ((v195 & 1) != (v140 & 1)) {
                                goto LABEL_236;
                              }
                              v134 = v139;
                              if ((v195 & 1) == 0) {
                                goto LABEL_139;
                              }
                              goto LABEL_136;
                            }

                            if ((v132 & 1) != 0)
                            {
                              unint64_t v83 = (void *)v200;
                              v138 = v199;
                              if ((v133 & 1) == 0) {
                                goto LABEL_139;
                              }
                              goto LABEL_136;
                            }

                            v197 = v133;
                            v190 = v4;
                            char v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
                            v165 = static _DictionaryStorage.copy(original:)();
                            unint64_t v83 = (void *)v165;
                            if (!*(void *)(v200 + 16)) {
                              goto LABEL_216;
                            }
                            v166 = (void *)(v165 + 64);
                            v167 = v200 + 64;
                            v168 = (unint64_t)((1LL << *((_BYTE *)v83 + 32)) + 63) >> 6;
                            v169 = 0LL;
                            v83[2] = *(void *)(v200 + 16);
                            v170 = 1LL << *(_BYTE *)(v200 + 32);
                            if (v170 < 64) {
                              v171 = ~(-1LL << v170);
                            }
                            else {
                              v171 = -1LL;
                            }
                            v172 = v171 & *(void *)(v200 + 64);
                            char v39 = (unint64_t)(v170 + 63) >> 6;
                            while (2)
                            {
                              if (v172)
                              {
                                v173 = __clz(__rbit64(v172));
                                v172 &= v172 - 1;
                                v174 = v173 | (v169 << 6);
LABEL_189:
                                v175 = 16 * v174;
                                v176 = (uint64_t *)(*(void *)(v200 + 48) + v175);
                                v178 = *v176;
                                v177 = v176[1];
                                v179 = *(_OWORD *)(*(void *)(v200 + 56) + v175);
                                v180 = (void *)(v83[6] + v175);
                                *v180 = v178;
                                v180[1] = v177;
                                *(_OWORD *)(v83[7] + v175) = v179;
                                swift_bridgeObjectRetain();
                                continue;
                              }

                              break;
                            }

                            unint64_t v44 = __OFADD__(v169++, 1LL);
                            if (v44) {
                              goto LABEL_235;
                            }
                            if (v169 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v169);
                            if (v181)
                            {
LABEL_211:
                              v172 = (v181 - 1) & v181;
                              v174 = __clz(__rbit64(v181)) + (v169 << 6);
                              goto LABEL_189;
                            }

                            v182 = v169 + 1;
                            if (v169 + 1 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181) {
                              goto LABEL_210;
                            }
                            v182 = v169 + 2;
                            if (v169 + 2 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181) {
                              goto LABEL_210;
                            }
                            v182 = v169 + 3;
                            if (v169 + 3 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181) {
                              goto LABEL_210;
                            }
                            v182 = v169 + 4;
                            if (v169 + 4 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181) {
                              goto LABEL_210;
                            }
                            v182 = v169 + 5;
                            if (v169 + 5 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181) {
                              goto LABEL_210;
                            }
                            v182 = v169 + 6;
                            if (v169 + 6 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181) {
                              goto LABEL_210;
                            }
                            v182 = v169 + 7;
                            if (v169 + 7 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181) {
                              goto LABEL_210;
                            }
                            v182 = v169 + 8;
                            if (v169 + 8 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181)
                            {
LABEL_210:
                              v169 = v182;
                              goto LABEL_211;
                            }

                            while (1)
                            {
                              v169 = v182 + 1;
                              if (__OFADD__(v182, 1LL)) {
                                goto LABEL_238;
                              }
                              if (v169 >= v39) {
                                break;
                              }
                              v181 = *(void *)(v167 + 8 * v169);
                              ++v182;
                              if (v181) {
                                goto LABEL_211;
                              }
                            }

                            swift_bridgeObjectRelease();
                            unint64_t v4 = v189;
                            int v8 = v193;
                            uint64_t v0 = &unk_18C5D1000;
                            int v7 = v147;
                            v73 = v198;
                            if ((v196 & 1) != 0) {
                              goto LABEL_73;
                            }
LABEL_76:
                            *(void *)(v7 + 8 * (v69 >> 6) + 64) |= 1LL << v69;
                            unint64_t v77 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v69);
                            *unint64_t v77 = v73;
                            v77[1] = v65;
                            unint64_t v78 = (uint64_t *)(*(void *)(v7 + 56) + 16 * v69);
                            *unint64_t v78 = v14;
                            v78[1] = v13;
                            unint64_t v79 = *(void *)(v7 + 16);
                            unint64_t v44 = __OFADD__(v79, 1LL);
                            v80 = v79 + 1;
                            if (v44) {
                              goto LABEL_227;
                            }
                            *(void *)(v7 + 16) = v80;
                            swift_bridgeObjectRetain();
LABEL_78:
                            v6 = v8 + 1;
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            unint64_t v81 = swift_conformsToProtocol2();
                            if (v81) {
                              unint64_t v82 = v81;
                            }
                            else {
                              unint64_t v82 = 0LL;
                            }
                            if (!v81) {
                              unint64_t v14 = 0LL;
                            }
                            if (!v14) {
                              goto LABEL_4;
                            }
                            v129 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 24))(v14, v82);
                            v131 = v130;
                            char v39 = v200;
                            v132 = swift_isUniquelyReferenced_nonNull_native();
                            v199 = v129;
                            v134 = specialized __RawDictionaryStorage.find<A>(_:)(v129, v131);
                            v135 = *(void *)(v200 + 16);
                            v136 = (v133 & 1) == 0;
                            v137 = v135 + v136;
                            if (__OFADD__(v135, v136)) {
                              goto LABEL_230;
                            }
                            v192 = v7;
                            if (*(void *)(v200 + 24) < v137)
                            {
                              v195 = v133;
                              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v137, v132);
                              unint64_t v83 = (void *)v200;
                              v138 = v199;
                              char v39 = v200;
                              v139 = specialized __RawDictionaryStorage.find<A>(_:)(v199, v131);
                              if ((v195 & 1) != (v140 & 1)) {
                                goto LABEL_236;
                              }
                              v134 = v139;
                              if ((v195 & 1) == 0) {
                                goto LABEL_139;
                              }
                              goto LABEL_136;
                            }

                            if ((v132 & 1) != 0)
                            {
                              unint64_t v83 = (void *)v200;
                              v138 = v199;
                              if ((v133 & 1) == 0) {
                                goto LABEL_139;
                              }
                              goto LABEL_136;
                            }

                            v197 = v133;
                            v190 = v4;
                            char v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
                            v165 = static _DictionaryStorage.copy(original:)();
                            unint64_t v83 = (void *)v165;
                            if (!*(void *)(v200 + 16)) {
                              goto LABEL_216;
                            }
                            v166 = (void *)(v165 + 64);
                            v167 = v200 + 64;
                            v168 = (unint64_t)((1LL << *((_BYTE *)v83 + 32)) + 63) >> 6;
                            v169 = 0LL;
                            v83[2] = *(void *)(v200 + 16);
                            v170 = 1LL << *(_BYTE *)(v200 + 32);
                            if (v170 < 64) {
                              v171 = ~(-1LL << v170);
                            }
                            else {
                              v171 = -1LL;
                            }
                            v172 = v171 & *(void *)(v200 + 64);
                            char v39 = (unint64_t)(v170 + 63) >> 6;
                            while (2)
                            {
                              if (v172)
                              {
                                v173 = __clz(__rbit64(v172));
                                v172 &= v172 - 1;
                                v174 = v173 | (v169 << 6);
LABEL_189:
                                v175 = 16 * v174;
                                v176 = (uint64_t *)(*(void *)(v200 + 48) + v175);
                                v178 = *v176;
                                v177 = v176[1];
                                v179 = *(_OWORD *)(*(void *)(v200 + 56) + v175);
                                v180 = (void *)(v83[6] + v175);
                                *v180 = v178;
                                v180[1] = v177;
                                *(_OWORD *)(v83[7] + v175) = v179;
                                swift_bridgeObjectRetain();
                                continue;
                              }

                              break;
                            }

                            unint64_t v44 = __OFADD__(v169++, 1LL);
                            if (v44) {
                              goto LABEL_235;
                            }
                            if (v169 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v169);
                            if (v181)
                            {
LABEL_211:
                              v172 = (v181 - 1) & v181;
                              v174 = __clz(__rbit64(v181)) + (v169 << 6);
                              goto LABEL_189;
                            }

                            v182 = v169 + 1;
                            if (v169 + 1 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181) {
                              goto LABEL_210;
                            }
                            v182 = v169 + 2;
                            if (v169 + 2 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181) {
                              goto LABEL_210;
                            }
                            v182 = v169 + 3;
                            if (v169 + 3 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181) {
                              goto LABEL_210;
                            }
                            v182 = v169 + 4;
                            if (v169 + 4 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181) {
                              goto LABEL_210;
                            }
                            v182 = v169 + 5;
                            if (v169 + 5 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181) {
                              goto LABEL_210;
                            }
                            v182 = v169 + 6;
                            if (v169 + 6 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181) {
                              goto LABEL_210;
                            }
                            v182 = v169 + 7;
                            if (v169 + 7 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181) {
                              goto LABEL_210;
                            }
                            v182 = v169 + 8;
                            if (v169 + 8 >= v39) {
                              goto LABEL_216;
                            }
                            v181 = *(void *)(v167 + 8 * v182);
                            if (v181)
                            {
LABEL_210:
                              v169 = v182;
                              goto LABEL_211;
                            }

                            while (1)
                            {
                              v169 = v182 + 1;
                              if (__OFADD__(v182, 1LL)) {
                                goto LABEL_238;
                              }
                              if (v169 >= v39) {
                                break;
                              }
                              v181 = *(void *)(v167 + 8 * v169);
                              ++v182;
                              if (v181) {
                                goto LABEL_211;
                              }
                            }

                v136 = qword_18C5D2C08;
                v137 = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
                swift_bridgeObjectRetain();
                v138 = specialized __RawDictionaryStorage.find<A>(_:)(v137, v136);
                if ((v139 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue( *(void *)(v29 + 56) + 72 * v138,  (uint64_t)&v216);
                }

                else
                {
                  v220 = 0LL;
                  v218 = 0u;
                  v219 = 0u;
                  v216 = 0u;
                  v217 = 0u;
                }

                swift_bridgeObjectRelease();
                if (*((void *)&v217 + 1))
                {
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v216,  (uint64_t)&v210);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  swift_dynamicCast();
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v216);
LABEL_236:
                  swift_bridgeObjectRelease();
                  id result = swift_bridgeObjectRelease();
                  if (v9 >> 10 >= (unint64_t)v162 >> 10)
                  {
                    v154 = v163;
                    *v163 = v162;
                    v154[1] = v160;
                    v155 = v199;
                    *((void *)v154 + 4) = v9;
                    *((void *)v154 + 5) = v155;
                    *((void *)v154 + 6) = v7;
                    *((void *)v154 + 7) = v8;
                    return result;
                  }

                  __break(1u);
LABEL_239:
                  __break(1u);
LABEL_240:
                  __break(1u);
LABEL_241:
                  __break(1u);
                  goto LABEL_242;
                }

                v137 = qword_18C5D2BD8;
                v138 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
                swift_bridgeObjectRetain();
                v139 = specialized __RawDictionaryStorage.find<A>(_:)(v138, v137);
                if ((v140 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue( *(void *)(v29 + 56) + 72 * v139,  (uint64_t)&v218);
                }

                else
                {
                  v222 = 0LL;
                  v220 = 0u;
                  v221 = 0u;
                  v218 = 0u;
                  v219 = 0u;
                }

                swift_bridgeObjectRelease();
                if (*((void *)&v219 + 1))
                {
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v218,  (uint64_t)&v212);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  swift_dynamicCast();
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v218);
LABEL_236:
                  swift_bridgeObjectRelease();
                  id result = swift_bridgeObjectRelease();
                  if (v9 >> 10 >= (unint64_t)v164 >> 10)
                  {
                    v156 = v165;
                    *v165 = v164;
                    v156[1] = v162;
                    v157 = v201;
                    *((void *)v156 + 4) = v9;
                    *((void *)v156 + 5) = v157;
                    *((void *)v156 + 6) = v7;
                    *((void *)v156 + 7) = v8;
                    return result;
                  }

                  __break(1u);
LABEL_239:
                  __break(1u);
LABEL_240:
                  __break(1u);
LABEL_241:
                  __break(1u);
                  goto LABEL_242;
                }

                v133 = qword_18C5D2BF8;
                v134 = static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name;
                swift_bridgeObjectRetain();
                v135 = specialized __RawDictionaryStorage.find<A>(_:)(v134, v133);
                if ((v136 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue( *(void *)(v29 + 56) + 72 * v135,  (uint64_t)&v213);
                }

                else
                {
                  v217 = 0LL;
                  v215 = 0u;
                  v216 = 0u;
                  v213 = 0u;
                  v214 = 0u;
                }

                a1 = v174;
                swift_bridgeObjectRelease();
                if (*((void *)&v214 + 1))
                {
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v213,  (uint64_t)&v207);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  swift_dynamicCast();
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v213);
                  v137 = 0;
LABEL_236:
                  *(_BYTE *)a1 = v137;
                  swift_bridgeObjectRelease();
                  id result = swift_bridgeObjectRelease();
                  if (v9 >> 10 >= (unint64_t)v158 >> 10)
                  {
                    v151 = v159;
                    *v159 = v158;
                    v151[1] = v157;
                    v152 = v196;
                    *((void *)v151 + 4) = v9;
                    *((void *)v151 + 5) = v152;
                    *((void *)v151 + 6) = v7;
                    *((void *)v151 + 7) = v8;
                    return result;
                  }

                  __break(1u);
LABEL_239:
                  __break(1u);
LABEL_240:
                  __break(1u);
LABEL_241:
                  __break(1u);
                  goto LABEL_242;
                }

LABEL_99:
  size_t v60 = v9 - v4;
  if (v9 == v4)
  {
    if (!a2) {
      return 0LL;
    }
    unint64_t v61 = v3[6];
    BOOL v12 = v4 >= v61;
    unint64_t v62 = v4 - v61;
    if (v12) {
      unint64_t v63 = v62;
    }
    else {
      unint64_t v63 = 0LL;
    }
    v16 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v17 = v3[5];
    uint64_t v97 = v63;
    v18 = @"Invalid number";
    goto LABEL_13;
  }

  uint64_t v64 = 24LL;
  if (v7 == 45) {
    uint64_t v64 = 25LL;
  }
  if ((v39 & 1) != 0)
  {
    if (v7 == 45 && v60 >= 4)
    {
      if (v6[1] != 48)
      {
LABEL_135:
        --v64;
        goto LABEL_136;
      }

      int v65 = v6[2];
    }

    else
    {
      if (v7 == 45 || v60 < 3 || *v6 != 48) {
        goto LABEL_135;
      }
      int v65 = v6[1];
    }

    if (v65 != 46) {
      goto LABEL_135;
    }
  }

  else
  {
    v64 -= 2LL;
  }

  if (*(void *)&v96[16])
  {
    uint64_t v64 = *(void *)&v96[8];
    int v65 = *(void **)&v96[16];
LABEL_101:
    v76._countAndFlagsBits = 35LL;
    v76._object = (void *)0xE100000000000000LL;
    swift_bridgeObjectRetain();
    v66._countAndFlagsBits = v64;
    v66._object = v65;
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    goto LABEL_105;
  }

  if (v89 == 1 && (void)v88 && (*(_BYTE *)(v88 + 216) & 1) == 0)
  {
    int v74 = String.subscript.getter();
    uint64_t v64 = MEMORY[0x186E1B610](v74);
    int v65 = v75;
    swift_bridgeObjectRelease();
    goto LABEL_101;
  }

        if ((v67 & 1) != 0) {
          goto LABEL_139;
        }
        double v75 = &v42[16 * v44];
        unint64_t v77 = *(void *)v75;
        v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        unint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }

        v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        v85 = v11;
        v86 = &v42[16 * v83];
        unint64_t v87 = *(void *)v86;
        unint64_t v88 = v42;
        unint64_t v89 = v44;
        unint64_t v90 = &v42[16 * v44];
        unint64_t v91 = *((void *)v90 + 1);
        unint64_t v92 = v84;
        specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v84 + 16LL * *(void *)v86),  (char *)(v84 + 16LL * *(void *)v90),  v84 + 16 * v91,  __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        unint64_t v11 = v85;
        BOOL v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        unint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        unsigned int v10 = v92;
        unint64_t v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }

    BOOL v12 = 1LL;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      int v8 = v104;
      goto LABEL_118;
    }
  }

  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    v32 = v3;
  }
  else {
    v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      unint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        unint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        unint64_t v35 = *v34;
        unint64_t v36 = v34[1];
        unint64_t v37 = v13;
        unsigned int v38 = v33;
        do
        {
          char v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          unint64_t v35 = *v38;
          unint64_t v36 = v38[1];
          *(_OWORD *)unsigned int v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }

        while (v9 != v37);
        ++v9;
        v33 += 2;
      }

      while (v9 != v32);
      unint64_t v9 = v32;
    }

    goto LABEL_67;
  }

    *unint64_t v91 = v0;
    v91[1] = v92;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }

  unint64_t v4 = *(void *)(v0 + 16);
  if (*(void *)(*(void *)(v4 + 24) + 16LL))
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = static String._fromUTF8Repairing(_:)();
    int v7 = v6;
    swift_bridgeObjectRelease();
    int v8 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v9 = *(void *)(v4 + 24);
    if ((v8 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v9 + 16));
    }

    else
    {
      if (*(void *)(v9 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        unint64_t v34 = (void *)swift_allocObject();
        BOOL v55 = _swift_stdlib_malloc_size(v34);
        v34[2] = 0LL;
        v34[3] = 2 * v55 - 64;
      }

      else
      {
        unint64_t v34 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v34;
      swift_bridgeObjectRelease();
    }

    goto LABEL_58;
  }

  unint64_t v26 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v27 = *(char **)(v4 + 24);
  if ((v26 & 1) == 0)
  {
    if (*((void *)v27 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      int v41 = (void *)swift_allocObject();
      unint64_t v57 = _swift_stdlib_malloc_size(v41);
      v41[2] = 0LL;
      v41[3] = 2 * v57 - 64;
    }

    else
    {
      int v41 = (void *)MEMORY[0x18961AFE8];
    }

    *(void *)(*(void *)(v0 + 16) + 24LL) = v41;
    swift_bridgeObjectRelease();
    uint64_t v5 = 0LL;
    int v7 = 0LL;
    goto LABEL_58;
  }

  unsigned int v28 = *(void *)(v0 + 16);
  v29 = *((void *)v27 + 2);
  uint64_t v30 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v28 + 24) = v27;
  if ((v30 & 1) == 0)
  {
    v31 = *(void *)(v0 + 16);
    unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v29, 1, v27);
    *(void *)(v31 + 24) = v27;
  }

  if (!v29)
  {
LABEL_28:
    uint64_t v5 = 0LL;
    int v7 = 0LL;
    *(void *)(*(void *)(v0 + 16) + 24LL) = v27;
LABEL_58:
    *(void *)(v0 + 40) = v5;
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = v7;
    unint64_t v58 = *(void *)(v0 + 16);
    unint64_t v59 = *(unsigned __int8 **)(v58 + 8);
    if (v59 != *(unsigned __int8 **)(v58 + 16))
    {
      unint64_t v61 = *v59;
      size_t v60 = *v59;
      *(void *)(v58 + _Block_object_dispose(va, 8) = v59 + 1;
      if (v61 != 10)
      {
        unint64_t v62 = *(void *)(v0 + 16);
        *(_BYTE *)(v62 + 32) = v60;
        *(_BYTE *)(v62 + 33) = 0;
      }

      unint64_t v13 = *(void *)(v0 + 48);
      if (v13)
      {
        unint64_t v11 = *(void *)(v0 + 40);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
      }

      return swift_task_switch();
    }

    unint64_t v91 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v91;
    unint64_t v92 = specialized AsyncLineSequence.AsyncIterator.next();
    goto LABEL_99;
  }

  v32 = *((void *)v27 + 2);
  unint64_t v33 = v32 - v29;
  if (v32 - v29 >= 0)
  {
    memmove(v27 + 32, &v27[v29 + 32], v32 - v29);
    *((void *)v27 + 2) = v33;
    goto LABEL_28;
  }

  return _fatalErrorMessage(_:_:file:line:flags:)();
}

    *unint64_t v91 = v0;
    v91[1] = v92;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }

  unint64_t v4 = *(void *)(v0 + 16);
  if (*(void *)(*(void *)(v4 + 24) + 16LL))
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = static String._fromUTF8Repairing(_:)();
    int v7 = v6;
    swift_bridgeObjectRelease();
    int v8 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v9 = *(void *)(v4 + 24);
    if ((v8 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v9 + 16));
    }

    else
    {
      if (*(void *)(v9 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        unint64_t v34 = (void *)swift_allocObject();
        BOOL v55 = _swift_stdlib_malloc_size(v34);
        v34[2] = 0LL;
        v34[3] = 2 * v55 - 64;
      }

      else
      {
        unint64_t v34 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v34;
      swift_bridgeObjectRelease();
    }

    goto LABEL_58;
  }

  unint64_t v26 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v27 = *(char **)(v4 + 24);
  if ((v26 & 1) == 0)
  {
    if (*((void *)v27 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      int v41 = (void *)swift_allocObject();
      unint64_t v57 = _swift_stdlib_malloc_size(v41);
      v41[2] = 0LL;
      v41[3] = 2 * v57 - 64;
    }

    else
    {
      int v41 = (void *)MEMORY[0x18961AFE8];
    }

    *(void *)(*(void *)(v0 + 16) + 24LL) = v41;
    swift_bridgeObjectRelease();
    uint64_t v5 = 0LL;
    int v7 = 0LL;
    goto LABEL_58;
  }

  unsigned int v28 = *(void *)(v0 + 16);
  v29 = *((void *)v27 + 2);
  uint64_t v30 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v28 + 24) = v27;
  if ((v30 & 1) == 0)
  {
    v31 = *(void *)(v0 + 16);
    unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v29, 1, v27);
    *(void *)(v31 + 24) = v27;
  }

  if (!v29)
  {
LABEL_28:
    uint64_t v5 = 0LL;
    int v7 = 0LL;
    *(void *)(*(void *)(v0 + 16) + 24LL) = v27;
LABEL_58:
    *(void *)(v0 + 40) = v5;
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = v7;
    unint64_t v58 = *(void *)(v0 + 16);
    unint64_t v59 = *(unsigned __int8 **)(v58 + 8);
    if (v59 != *(unsigned __int8 **)(v58 + 16))
    {
      unint64_t v61 = *v59;
      size_t v60 = *v59;
      *(void *)(v58 + _Block_object_dispose(va, 8) = v59 + 1;
      if (v61 != 10)
      {
        unint64_t v62 = *(void *)(v0 + 16);
        *(_BYTE *)(v62 + 32) = v60;
        *(_BYTE *)(v62 + 33) = 0;
      }

      unint64_t v13 = *(void *)(v0 + 48);
      if (v13)
      {
        unint64_t v11 = *(void *)(v0 + 40);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
      }

      return swift_task_switch();
    }

    unint64_t v91 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v91;
    unint64_t v92 = specialized AsyncLineSequence.AsyncIterator.next();
    goto LABEL_99;
  }

  v32 = *((void *)v27 + 2);
  unint64_t v33 = v32 - v29;
  if (v32 - v29 >= 0)
  {
    memmove(v27 + 32, &v27[v29 + 32], v32 - v29);
    *((void *)v27 + 2) = v33;
    goto LABEL_28;
  }

  return _fatalErrorMessage(_:_:file:line:flags:)();
}

    *unint64_t v91 = v0;
    v91[1] = v92;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }

  unint64_t v4 = *(void *)(v0 + 16);
  if (*(void *)(*(void *)(v4 + 24) + 16LL))
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = static String._fromUTF8Repairing(_:)();
    int v7 = v6;
    swift_bridgeObjectRelease();
    int v8 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v9 = *(void *)(v4 + 24);
    if ((v8 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v9 + 16));
    }

    else
    {
      if (*(void *)(v9 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        unint64_t v34 = (void *)swift_allocObject();
        BOOL v55 = _swift_stdlib_malloc_size(v34);
        v34[2] = 0LL;
        v34[3] = 2 * v55 - 64;
      }

      else
      {
        unint64_t v34 = (void *)MEMORY[0x18961AFE8];
      }

      *(void *)(*(void *)(v0 + 16) + 24LL) = v34;
      swift_bridgeObjectRelease();
    }

    goto LABEL_58;
  }

  unint64_t v26 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v27 = *(char **)(v4 + 24);
  if ((v26 & 1) == 0)
  {
    if (*((void *)v27 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      int v41 = (void *)swift_allocObject();
      unint64_t v57 = _swift_stdlib_malloc_size(v41);
      v41[2] = 0LL;
      v41[3] = 2 * v57 - 64;
    }

    else
    {
      int v41 = (void *)MEMORY[0x18961AFE8];
    }

    *(void *)(*(void *)(v0 + 16) + 24LL) = v41;
    swift_bridgeObjectRelease();
    uint64_t v5 = 0LL;
    int v7 = 0LL;
    goto LABEL_58;
  }

  unsigned int v28 = *(void *)(v0 + 16);
  v29 = *((void *)v27 + 2);
  uint64_t v30 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v28 + 24) = v27;
  if ((v30 & 1) == 0)
  {
    v31 = *(void *)(v0 + 16);
    unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v29, 1, v27);
    *(void *)(v31 + 24) = v27;
  }

  if (!v29)
  {
LABEL_28:
    uint64_t v5 = 0LL;
    int v7 = 0LL;
    *(void *)(*(void *)(v0 + 16) + 24LL) = v27;
LABEL_58:
    *(void *)(v0 + 40) = v5;
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = v7;
    unint64_t v58 = *(void *)(v0 + 16);
    unint64_t v59 = *(unsigned __int8 **)(v58 + 8);
    if (v59 != *(unsigned __int8 **)(v58 + 16))
    {
      unint64_t v61 = *v59;
      size_t v60 = *v59;
      *(void *)(v58 + _Block_object_dispose(va, 8) = v59 + 1;
      if (v61 != 10)
      {
        unint64_t v62 = *(void *)(v0 + 16);
        *(_BYTE *)(v62 + 32) = v60;
        *(_BYTE *)(v62 + 33) = 0;
      }

      unint64_t v13 = *(void *)(v0 + 48);
      if (v13)
      {
        unint64_t v11 = *(void *)(v0 + 40);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
      }

      return swift_task_switch();
    }

    unint64_t v91 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v91;
    unint64_t v92 = specialized AsyncLineSequence.AsyncIterator.next();
    goto LABEL_99;
  }

  v32 = *((void *)v27 + 2);
  unint64_t v33 = v32 - v29;
  if (v32 - v29 >= 0)
  {
    memmove(v27 + 32, &v27[v29 + 32], v32 - v29);
    *((void *)v27 + 2) = v33;
    goto LABEL_28;
  }

  return _fatalErrorMessage(_:_:file:line:flags:)();
}

              _So9NSDecimala__exponent_setter(v66, (_BYTE *)v35);
              _So9NSDecimala__isCompact_setter_0(0LL, (_DWORD *)v35);
              goto LABEL_193;
            }

            Hasher._combine(_:)(0);
            unint64_t v88 = 0LL;
LABEL_100:

            unint64_t v93 = v113;
            if (v93)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v93);
              swift_bridgeObjectRelease();
            }

            else
            {
              Hasher._combine(_:)(0);
            }

            unint64_t v94 = v114;
            if (v114)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v94);
              swift_bridgeObjectRelease();
              if (v115)
              {
LABEL_105:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                String.hash(into:)();
                swift_bridgeObjectRelease();
LABEL_108:
                if (v116 == 2)
                {
                  Hasher._combine(_:)(0);
                }

                else
                {
                  uint64_t v95 = v116 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v95);
                }

                if (v117 == 2)
                {
                  Hasher._combine(_:)(0);
                }

                else
                {
                  uint64_t v96 = v117 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v96);
                }

                if (v118 == 2)
                {
                  uint64_t v97 = 0;
                }

                else
                {
                  uint64_t v97 = v118 & 1;
                  Hasher._combine(_:)(1u);
                }

                Hasher._combine(_:)(v97);
                if (v119 == 2)
                {
                  v98 = 0;
                }

                else
                {
                  v99 = v119 & 1;
                  Hasher._combine(_:)(1u);
                  v98 = v99;
                }

                Hasher._combine(_:)(v98);
                outlined retain of LocalePreferences?( (uint64_t)v121,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?( (uint64_t)v121,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                swift_unknownObjectRelease_n();
                goto LABEL_17;
              }
            }

            else
            {
              Hasher._combine(_:)(0);
              if (v115) {
                goto LABEL_105;
              }
            }

            Hasher._combine(_:)(0);
            goto LABEL_108;
          }

            Hasher._combine(_:)(0);
            unint64_t v88 = 0LL;
LABEL_100:

            unint64_t v93 = v120;
            if (v93)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v93);
              swift_bridgeObjectRelease();
            }

            else
            {
              Hasher._combine(_:)(0);
            }

            unint64_t v94 = v121;
            if (v121)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v94);
              swift_bridgeObjectRelease();
              if (v122)
              {
LABEL_105:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                String.hash(into:)();
                swift_bridgeObjectRelease();
LABEL_108:
                if (v123 == 2)
                {
                  Hasher._combine(_:)(0);
                }

                else
                {
                  uint64_t v95 = v123 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v95);
                }

                if (v124 == 2)
                {
                  Hasher._combine(_:)(0);
                }

                else
                {
                  uint64_t v96 = v124 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v96);
                }

                if (v125 == 2)
                {
                  uint64_t v97 = 0;
                }

                else
                {
                  uint64_t v97 = v125 & 1;
                  Hasher._combine(_:)(1u);
                }

                Hasher._combine(_:)(v97);
                if (v126 == 2)
                {
                  v98 = 0;
                }

                else
                {
                  v99 = v126 & 1;
                  Hasher._combine(_:)(1u);
                  v98 = v99;
                }

                Hasher._combine(_:)(v98);
                outlined retain of LocalePreferences?( (uint64_t)v128,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?( (uint64_t)v128,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                swift_unknownObjectRelease_n();
                goto LABEL_17;
              }
            }

            else
            {
              Hasher._combine(_:)(0);
              if (v122) {
                goto LABEL_105;
              }
            }

            Hasher._combine(_:)(0);
            goto LABEL_108;
          }

            __break(1u);
LABEL_100:
            __break(1u);
            goto LABEL_101;
          }

          goto LABEL_97;
        }

            uint64_t v64 = (v73 - 1) & v73;
            unint64_t v67 = __clz(__rbit64(v73)) + (v61 << 6);
          }

          unint64_t v68 = (uint64_t *)(*(void *)(v81 + 56) + 16 * v67);
          unint64_t v70 = *v68;
          unsigned int v69 = v68[1];
          *(_BYTE *)(*(void *)(v35 + 48) + v67) = *(_BYTE *)(*(void *)(v81 + 48) + v67);
          unint64_t v71 = (void *)(*(void *)(v35 + 56) + 16 * v67);
          *unint64_t v71 = v70;
          v71[1] = v69;
          swift_bridgeObjectRetain();
        }
      }

      goto LABEL_32;
    }

    swift_bridgeObjectRetain();
    unint64_t v15 = specialized _withFixedCharBuffer(size:_:)(257LL);
  }

  else
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = specialized _withFixedCharBuffer(size:_:)(157LL, v14, v13);
  }

  uint64_t v17 = v15;
  v18 = v16;
  swift_bridgeObjectRelease();
  if (!v18) {
    goto LABEL_20;
  }
LABEL_15:
  swift_bridgeObjectRetain();
  v20 = swift_isUniquelyReferenced_nonNull_native();
  v80 = *(void *)(a1 + 464);
  isUniquelyReferenced_nonNull_native = v80;
  *(void *)(a1 + 464) = 0x8000000000000000LL;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  unint64_t v23 = *(void *)(v80 + 16);
  unint64_t v24 = (v22 & 1) == 0;
  unint64_t v25 = v23 + v24;
  if (!__OFADD__(v23, v24))
  {
    LOBYTE(v13) = v22;
    if (*(void *)(v80 + 24) < v25)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v20);
      unint64_t v26 = v80;
      unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v13 & 1) != (v28 & 1)) {
        goto LABEL_108;
      }
      unint64_t v14 = v27;
      if ((v13 & 1) == 0) {
        goto LABEL_66;
      }
LABEL_27:
      char v39 = (uint64_t *)(*(void *)(v26 + 56) + 16 * v14);
      swift_bridgeObjectRelease();
      *char v39 = v17;
      v39[1] = v18;
LABEL_67:
      *(void *)(a1 + 464) = v26;
      id result = swift_bridgeObjectRelease();
      *unint64_t v83 = v17;
      v83[1] = v18;
      return result;
    }

    if ((v20 & 1) != 0)
    {
      unint64_t v26 = v80;
      if ((v22 & 1) != 0) {
        goto LABEL_27;
      }
LABEL_66:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a2, v17, v18, (void *)v26);
      goto LABEL_67;
    }

    goto LABEL_33;
  }

  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.IdentifierType, String>);
  int v41 = static _DictionaryStorage.copy(original:)();
  unint64_t v26 = v41;
  if (!*(void *)(isUniquelyReferenced_nonNull_native + 16))
  {
LABEL_65:
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0) {
      goto LABEL_27;
    }
    goto LABEL_66;
  }

  unint64_t v42 = (char *)(v41 + 64);
  __src = (char *)(isUniquelyReferenced_nonNull_native + 64);
  int v43 = (unint64_t)((1LL << *(_BYTE *)(v26 + 32)) + 63) >> 6;
  if (v26 != isUniquelyReferenced_nonNull_native || v42 >= &__src[8 * v43]) {
    memmove(v42, __src, 8 * v43);
  }
  unint64_t v44 = 0LL;
  *(void *)(v26 + 16) = *(void *)(isUniquelyReferenced_nonNull_native + 16);
  uint64_t v45 = 1LL << *(_BYTE *)(isUniquelyReferenced_nonNull_native + 32);
  unint64_t v46 = -1LL;
  if (v45 < 64) {
    unint64_t v46 = ~(-1LL << v45);
  }
  v47 = v46 & *(void *)(isUniquelyReferenced_nonNull_native + 64);
  double v75 = (unint64_t)(v45 + 63) >> 6;
  while (1)
  {
    if (v47)
    {
      v48 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      unint64_t v49 = v48 | (v44 << 6);
      goto LABEL_41;
    }

    int v54 = v44 + 1;
    if (__OFADD__(v44, 1LL))
    {
      __break(1u);
      goto LABEL_105;
    }

    if (v54 >= v75) {
      goto LABEL_65;
    }
    BOOL v55 = *(void *)&__src[8 * v54];
    ++v44;
    if (!v55)
    {
      unint64_t v44 = v54 + 1;
      if (v54 + 1 >= v75) {
        goto LABEL_65;
      }
      BOOL v55 = *(void *)&__src[8 * v44];
      if (!v55)
      {
        unint64_t v44 = v54 + 2;
        if (v54 + 2 >= v75) {
          goto LABEL_65;
        }
        BOOL v55 = *(void *)&__src[8 * v44];
        if (!v55)
        {
          unint64_t v44 = v54 + 3;
          if (v54 + 3 >= v75) {
            goto LABEL_65;
          }
          BOOL v55 = *(void *)&__src[8 * v44];
          if (!v55)
          {
            unint64_t v44 = v54 + 4;
            if (v54 + 4 >= v75) {
              goto LABEL_65;
            }
            BOOL v55 = *(void *)&__src[8 * v44];
            if (!v55)
            {
              unint64_t v44 = v54 + 5;
              if (v54 + 5 >= v75) {
                goto LABEL_65;
              }
              BOOL v55 = *(void *)&__src[8 * v44];
              if (!v55)
              {
                unint64_t v44 = v54 + 6;
                if (v54 + 6 >= v75) {
                  goto LABEL_65;
                }
                BOOL v55 = *(void *)&__src[8 * v44];
                if (!v55) {
                  break;
                }
              }
            }
          }
        }
      }
    }

          unint64_t v62 = v101;
LABEL_100:
          if (v62) {
            goto LABEL_182;
          }
        }
      }
    }

  swift_bridgeObjectRelease();
LABEL_100:
  uint64_t v17 = (void *)swift_slowAlloc();
  bzero(v17, 0x401uLL);
  v136 = readlink("/var/db/timezone/localtime", (char *)v17, 0x400uLL);
  if (v136 < 0) {
    goto LABEL_120;
  }
  *((_BYTE *)v17 + v136) = 0;
  v137 = MEMORY[0x186E1B634](v17);
  if (!v138) {
    goto LABEL_120;
  }
  v139 = v137;
  v140 = v138;
  v141 = 0xD000000000000019LL;
  v142 = specialized BidirectionalCollection.last.getter(0xD000000000000019LL, 0x80000001839D0B00LL);
  if (!v143) {
    goto LABEL_115;
  }
  if (v142 == 47 && v143 == 0xE100000000000000LL)
  {
    swift_bridgeObjectRelease();
    v144 = 0x80000001839D0B00LL;
    goto LABEL_116;
  }

  v154 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v154 & 1) != 0)
  {
    v144 = 0x80000001839D0B00LL;
  }

  else
  {
LABEL_115:
    v141 = 0xD00000000000001ALL;
    v144 = 0x80000001839CEC80LL;
  }

  specialized _NativeDictionary._insert(at:key:value:)(v35, a1, (uint64_t)v28, (void *)v41);
LABEL_100:
  *(void *)(v5 + 4_Block_object_dispose(va, 8) = v41;
  swift_bridgeObjectRelease();
  v3 = (uint64_t)v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v105 = *(void *)(v5 + 112);
  unint64_t v4 = v105;
  *(void *)(v5 + 112) = 0x8000000000000000LL;
  v73 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  double v75 = *(void *)(v4 + 16);
  v76 = (v74 & 1) == 0;
  char v39 = __OFADD__(v75, v76);
  unint64_t v77 = v75 + v76;
  if (v39)
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v21) = v74;
    if (*(void *)(v4 + 24) < v77)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v77,  isUniquelyReferenced_nonNull_native);
      unint64_t v78 = v105;
      v73 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v21 & 1) != (v79 & 1)) {
        goto LABEL_103;
      }
LABEL_106:
      if ((v21 & 1) != 0)
      {
LABEL_107:
        v80 = *(void *)(v78 + 56);
        unint64_t v81 = 8 * v73;

        *(void *)(v80 + v81) = v3;
        goto LABEL_143;
      }

      LOBYTE(__dst[0]) = 6;
      LOBYTE(from._time) = 5;
      *(double *)v336 = v12;
      unint64_t v62 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      if (v7) {
        goto LABEL_422;
      }
      int v8 = v62;
      int v7 = 0LL;
      if ((v63 & 1) != 0) {
        return v8;
      }
      uint64_t v64 = (v12 - floor(v12) + (double)v62 + -1.0) * 1000000000.0;
      if ((~*(void *)&v64 & 0x7FF0000000000000LL) == 0) {
        goto LABEL_485;
      }
      if (v64 <= -9.22337204e18)
      {
LABEL_486:
        __break(1u);
        goto LABEL_487;
      }

      if (v64 >= 9.22337204e18)
      {
LABEL_487:
        __break(1u);
LABEL_488:
        __break(1u);
LABEL_489:
        __break(1u);
LABEL_490:
        __break(1u);
LABEL_491:
        __break(1u);
        goto LABEL_492;
      }

      int v8 = (uint64_t)v64 + 1;
      __break(1u);
LABEL_107:
      LOBYTE(__dst[0]) = 3;
      LOBYTE(from._time) = 11;
      *(double *)v336 = v12;
      int v65 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      if (v7) {
        goto LABEL_422;
      }
      int v8 = v65;
      int v7 = 0LL;
      if ((v66 & 1) != 0) {
        return v8;
      }
      LOBYTE(v336[0]) = 4;
      *(double *)__src = v12;
      unint64_t v68 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v67);
      unsigned int v69 = v8 - 1;
      if (__OFSUB__(v8, 1LL)) {
        goto LABEL_488;
      }
      unint64_t v70 = (unsigned __int128)(v69 * (__int128)24LL) >> 64;
      unint64_t v71 = 24 * v69;
      if (v70 != v71 >> 63)
      {
LABEL_492:
        __break(1u);
        goto LABEL_493;
      }

      unint64_t v72 = __OFADD__(v71, v68);
      v73 = v71 + v68;
      if (v72)
      {
LABEL_496:
        __break(1u);
        goto LABEL_497;
      }

      int v8 = v73 + 1;
      if (!__OFADD__(v73, 1LL)) {
        return v8;
      }
      __break(1u);
LABEL_115:
      LOBYTE(__dst[0]) = 6;
      LOBYTE(from._time) = 11;
      *(double *)v336 = v12;
      int v74 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      if (v7) {
        goto LABEL_422;
      }
      int v8 = v74;
      int v7 = 0LL;
      if ((v75 & 1) != 0) {
        return v8;
      }
      v76 = (v12 - floor(v12) + (double)v74 + -1.0) * 1000000000.0;
      if ((~*(void *)&v76 & 0x7FF0000000000000LL) == 0) {
        goto LABEL_489;
      }
      if (v76 <= -9.22337204e18)
      {
LABEL_493:
        __break(1u);
        goto LABEL_494;
      }

      if (v76 >= 9.22337204e18)
      {
LABEL_497:
        __break(1u);
        goto LABEL_498;
      }

      int v8 = (uint64_t)v76 + 1;
      __break(1u);
LABEL_123:
      LOBYTE(__dst[0]) = 4;
      LOBYTE(from._time) = 11;
      *(double *)v336 = v12;
      unint64_t v77 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      if (v7) {
        goto LABEL_422;
      }
      int v8 = v77;
      int v7 = 0LL;
      if ((v78 & 1) != 0) {
        return v8;
      }
      LOBYTE(v336[0]) = 5;
      *(double *)__src = v12;
      v80 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v79);
      unint64_t v81 = v8 - 1;
      if (__OFSUB__(v8, 1LL)) {
        goto LABEL_490;
      }
      unint64_t v82 = 60 * v81;
      if ((unsigned __int128)(v81 * (__int128)60LL) >> 64 != (60 * v81) >> 63)
      {
LABEL_494:
        __break(1u);
        goto LABEL_495;
      }

      unint64_t v83 = v82 + v80;
      if (__OFADD__(v82, v80))
      {
LABEL_498:
        __break(1u);
        goto LABEL_499;
      }

      int v8 = v83 + 1;
      if (!__OFADD__(v83, 1LL)) {
        return v8;
      }
      __break(1u);
LABEL_131:
      LOBYTE(__dst[0]) = 5;
      LOBYTE(from._time) = 11;
      *(double *)v336 = v12;
      v84 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      if (v7) {
        goto LABEL_422;
      }
      int v8 = v84;
      int v7 = 0LL;
      if ((v85 & 1) != 0) {
        return v8;
      }
      LOBYTE(v336[0]) = 6;
      *(double *)__src = v12;
      unint64_t v87 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v86);
      unint64_t v88 = v8 - 1;
      if (__OFSUB__(v8, 1LL)) {
        goto LABEL_491;
      }
      unint64_t v89 = 60 * v88;
      if ((unsigned __int128)(v88 * (__int128)60LL) >> 64 != (60 * v88) >> 63)
      {
LABEL_495:
        __break(1u);
        goto LABEL_496;
      }

      unint64_t v90 = v89 + v87;
      if (__OFADD__(v89, v87))
      {
LABEL_499:
        __break(1u);
LABEL_500:
        __break(1u);
LABEL_501:
        __break(1u);
        goto LABEL_502;
      }

      int v8 = v90 + 1;
      if (!__OFADD__(v90, 1LL)) {
        return v8;
      }
      __break(1u);
LABEL_139:
      LOBYTE(__dst[0]) = 6;
      LOBYTE(from._time) = 4;
      *(double *)v336 = v12;
      unint64_t v91 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      if (v7) {
        goto LABEL_422;
      }
      int v8 = v91;
      int v7 = 0LL;
      if ((v92 & 1) != 0) {
        return v8;
      }
      unint64_t v93 = (v12 - floor(v12) + (double)v91 + -1.0) * 1000000000.0;
      if ((~*(void *)&v93 & 0x7FF0000000000000LL) == 0) {
        goto LABEL_500;
      }
      if (v93 <= -9.22337204e18)
      {
LABEL_502:
        __break(1u);
        goto LABEL_503;
      }

      if (v93 >= 9.22337204e18)
      {
LABEL_504:
        __break(1u);
LABEL_505:
        __break(1u);
LABEL_506:
        __break(1u);
LABEL_507:
        __break(1u);
LABEL_508:
        __break(1u);
LABEL_509:
        __break(1u);
LABEL_510:
        __break(1u);
LABEL_511:
        __break(1u);
LABEL_512:
        __break(1u);
LABEL_513:
        __break(1u);
LABEL_514:
        __break(1u);
LABEL_515:
        __break(1u);
LABEL_516:
        __break(1u);
LABEL_517:
        __break(1u);
LABEL_518:
        __break(1u);
        goto LABEL_519;
      }

      int v8 = (uint64_t)v93 + 1;
      __break(1u);
LABEL_147:
      LOBYTE(__dst[0]) = 5;
      LOBYTE(from._time) = 4;
      *(double *)v336 = v12;
      unint64_t v94 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      if (v7) {
        goto LABEL_422;
      }
      int v8 = v94;
      int v7 = 0LL;
      if ((v95 & 1) != 0) {
        return v8;
      }
      LOBYTE(v336[0]) = 6;
      *(double *)__src = v12;
      uint64_t v97 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v96);
      v98 = v8 - 1;
      if (__OFSUB__(v8, 1LL)) {
        goto LABEL_501;
      }
      v99 = 60 * v98;
      if ((unsigned __int128)(v98 * (__int128)60LL) >> 64 != (60 * v98) >> 63)
      {
LABEL_503:
        __break(1u);
        goto LABEL_504;
      }

      int v100 = v99 + v97;
      if (__OFADD__(v99, v97)) {
        goto LABEL_505;
      }
      int v8 = v100 + 1;
      if (!__OFADD__(v100, 1LL)) {
        return v8;
      }
      __break(1u);
LABEL_155:
      int v8 = 12LL;
      LOBYTE(__dst[0]) = 12;
      *(double *)v336 = v12;
      _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
      if ((BYTE8(__src[0]) & 1) != 0) {
        return 0LL;
      }
      v101 = *(void *)&__src[0];
      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 12;
      *(double *)v336 = v12;
      v102 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      if (v7) {
        goto LABEL_422;
      }
      int v8 = v102;
      if ((v103 & 1) != 0) {
        return v8;
      }
      LOBYTE(v336[0]) = 7;
      *(void *)&__src[0] = v101;
      v105 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v104);
      *(void *)&__dst[0] = v101;
      _s10Foundation18_CalendarGregorianC26dateAfterDateWithTargetDoWyAA0F0V_Si9daysAddedtAF_SitAA0cB5ErrorOYKF( (double *)v336,  (double *)__dst,  v105,  (uint64_t)__src);
      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 12;
      v106 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      int v7 = 0LL;
      if ((v107 & 1) != 0) {
        return v106;
      }
      v108 = v8 - v106;
      if (__OFSUB__(v8, v106))
      {
LABEL_599:
        __break(1u);
        goto LABEL_600;
      }

      int v8 = v108 + 1;
      if (!__OFADD__(v108, 1LL)) {
        return v8;
      }
      __break(1u);
LABEL_163:
      LOBYTE(__dst[0]) = 9;
      *(double *)v336 = v12;
      v109 = (unint64_t)_CalendarGregorian.start(of:at:)( (Foundation::Calendar::Component)__dst,  *(Foundation::Date *)&a5);
      if ((BYTE8(__src[0]) & 1) != 0) {
        return 0LL;
      }
      v110 = *(void *)&__src[0];
      LOBYTE(v336[0]) = 7;
      *(double *)__src = v12;
      v111 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, (Foundation::Date)v109);
      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 1;
      *(double *)v336 = v12;
      v112 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      if (v7) {
        goto LABEL_422;
      }
      int v8 = v112;
      if ((v113 & 1) != 0) {
        return v8;
      }
      *(void *)&__dst[0] = v110;
      _s10Foundation18_CalendarGregorianC26dateAfterDateWithTargetDoWyAA0F0V_Si9daysAddedtAF_SitAA0cB5ErrorOYKF( (double *)v336,  (double *)__dst,  v111,  (uint64_t)__src);
      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 1;
      v106 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      int v7 = 0LL;
      if ((v114 & 1) != 0) {
        return v106;
      }
      v115 = v8 - v106;
      if (__OFSUB__(v8, v106))
      {
LABEL_600:
        __break(1u);
        goto LABEL_601;
      }

      int v8 = v115 + 1;
      if (!__OFADD__(v115, 1LL)) {
        return v8;
      }
      __break(1u);
LABEL_171:
      int v8 = 1LL;
      LOBYTE(__dst[0]) = 1;
      *(double *)v336 = v12;
      _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
      if ((BYTE8(__src[0]) & 1) != 0) {
        return 0LL;
      }
      v116 = *(void *)&__src[0];
      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 1;
      *(double *)v336 = v12;
      v117 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      if (v7) {
        goto LABEL_422;
      }
      int v8 = v117;
      if ((v118 & 1) != 0) {
        return v8;
      }
      LOBYTE(v336[0]) = 7;
      *(double *)__src = v12;
      v120 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v119);
      *(void *)&__dst[0] = v116;
      _s10Foundation18_CalendarGregorianC26dateAfterDateWithTargetDoWyAA0F0V_Si9daysAddedtAF_SitAA0cB5ErrorOYKF( (double *)v336,  (double *)__dst,  v120,  (uint64_t)__src);
      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 1;
      v106 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      int v7 = 0LL;
      if ((v121 & 1) != 0) {
        return v106;
      }
      v122 = v8 - v106;
      if (__OFSUB__(v8, v106))
      {
LABEL_601:
        __break(1u);
LABEL_602:
        __break(1u);
LABEL_603:
        __break(1u);
LABEL_604:
        __break(1u);
LABEL_605:
        __break(1u);
LABEL_606:
        __break(1u);
LABEL_607:
        __break(1u);
LABEL_608:
        __break(1u);
LABEL_609:
        __break(1u);
        JUMPOUT(0x183334984LL);
      }

      int v8 = v122 + 1;
      if (!__OFADD__(v122, 1LL)) {
        return v8;
      }
      __break(1u);
LABEL_179:
      LOBYTE(__dst[0]) = 9;
      *(double *)v336 = v12;
      _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
      if ((BYTE8(__src[0]) & 1) != 0) {
        return 0LL;
      }
      *(void *)&__dst[0] = *(void *)&__src[0];
      v123 = _CalendarGregorian.firstWeekday.getter();
      v124 = _s10Foundation18_CalendarGregorianC26dateAfterDateWithTargetDoWyAA0F0V_Si9daysAddedtAF_SitAA0cB5ErrorOYKF( (double *)v336,  (double *)__dst,  v123,  (uint64_t)__src);
      if (v7) {
        goto LABEL_422;
      }
      v125 = v124;
      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 1;
      int v8 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      if ((v126 & 1) != 0) {
        return v8;
      }
      if (v125 >= _CalendarGregorian.minimumDaysInFirstWeek.getter())
      {
        unint64_t v72 = __OFSUB__(v8--, 1LL);
        if (v72)
        {
LABEL_596:
          __break(1u);
LABEL_597:
          __break(1u);
LABEL_598:
          __break(1u);
          goto LABEL_599;
        }
      }

      LOBYTE(__dst[0]) = 11;
      LOBYTE(from._time) = 1;
      *(double *)v336 = v12;
      v106 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
      int v7 = 0LL;
      if ((v127 & 1) != 0) {
        return v106;
      }
      v128 = v106 - v8;
      if (__OFSUB__(v106, v8)) {
        goto LABEL_602;
      }
      int v8 = v128 + 1;
      if (!__OFADD__(v128, 1LL)) {
        return v8;
      }
      __break(1u);
LABEL_189:
      LOBYTE(__dst[0]) = 0;
      *(double *)v336 = v12;
      _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
      if ((BYTE8(__src[0]) & 1) != 0) {
        return 0LL;
      }
      v129 = *(double *)__src;
      *(void *)&__dst[0] = *(void *)&__src[0];
      v130 = _CalendarGregorian.firstWeekday.getter();
      v131 = _s10Foundation18_CalendarGregorianC26dateAfterDateWithTargetDoWyAA0F0V_Si9daysAddedtAF_SitAA0cB5ErrorOYKF( (double *)v336,  (double *)__dst,  v130,  (uint64_t)__src);
      if (v7)
      {
LABEL_422:
        unint64_t v35 = __src[2];
        unint64_t v36 = __src[0];
        unint64_t v37 = __src[1];
LABEL_423:
        *(_OWORD *)a4 = v36;
        *(_OWORD *)(a4 + 16) = v37;
        goto LABEL_424;
      }

      v132 = v129 + (double)v131 * 86400.0;
      if (v131 >= _CalendarGregorian.minimumDaysInFirstWeek.getter()) {
        v133 = v132 + -604800.0;
      }
      else {
        v133 = v132;
      }
      v134 = floor((v12 - v133) / 86400.0 / 7.0);
      if ((~*(void *)&v134 & 0x7FF0000000000000LL) == 0)
      {
LABEL_519:
        __break(1u);
LABEL_520:
        __break(1u);
LABEL_521:
        __break(1u);
LABEL_522:
        __break(1u);
        goto LABEL_523;
      }

      if (v134 <= -9.22337204e18) {
        goto LABEL_521;
      }
      if (v134 >= 9.22337204e18)
      {
LABEL_523:
        __break(1u);
LABEL_524:
        __break(1u);
LABEL_525:
        __break(1u);
LABEL_526:
        __break(1u);
LABEL_527:
        __break(1u);
LABEL_528:
        __break(1u);
LABEL_529:
        __break(1u);
LABEL_530:
        __break(1u);
LABEL_531:
        __break(1u);
LABEL_532:
        __break(1u);
LABEL_533:
        __break(1u);
LABEL_534:
        __break(1u);
LABEL_535:
        __break(1u);
LABEL_536:
        __break(1u);
LABEL_537:
        __break(1u);
LABEL_538:
        __break(1u);
LABEL_539:
        __break(1u);
LABEL_540:
        __break(1u);
LABEL_541:
        __break(1u);
LABEL_542:
        __break(1u);
LABEL_543:
        __break(1u);
LABEL_544:
        __break(1u);
LABEL_545:
        __break(1u);
LABEL_546:
        __break(1u);
LABEL_547:
        __break(1u);
LABEL_548:
        __break(1u);
LABEL_549:
        __break(1u);
LABEL_550:
        __break(1u);
LABEL_551:
        __break(1u);
LABEL_552:
        __break(1u);
LABEL_553:
        __break(1u);
LABEL_554:
        __break(1u);
LABEL_555:
        __break(1u);
LABEL_556:
        __break(1u);
LABEL_557:
        __break(1u);
LABEL_558:
        __break(1u);
LABEL_559:
        __break(1u);
LABEL_560:
        __break(1u);
LABEL_561:
        __break(1u);
LABEL_562:
        __break(1u);
LABEL_563:
        __break(1u);
LABEL_564:
        __break(1u);
LABEL_565:
        __break(1u);
LABEL_566:
        __break(1u);
LABEL_567:
        __break(1u);
LABEL_568:
        __break(1u);
LABEL_569:
        __break(1u);
LABEL_570:
        __break(1u);
LABEL_571:
        __break(1u);
LABEL_572:
        __break(1u);
LABEL_573:
        __break(1u);
LABEL_574:
        __break(1u);
LABEL_575:
        __break(1u);
LABEL_576:
        __break(1u);
LABEL_577:
        __break(1u);
LABEL_578:
        __break(1u);
LABEL_579:
        __break(1u);
LABEL_580:
        __break(1u);
LABEL_581:
        __break(1u);
LABEL_582:
        __break(1u);
LABEL_583:
        __break(1u);
LABEL_584:
        __break(1u);
LABEL_585:
        __break(1u);
LABEL_586:
        __break(1u);
LABEL_587:
        __break(1u);
LABEL_588:
        __break(1u);
LABEL_589:
        __break(1u);
LABEL_590:
        __break(1u);
LABEL_591:
        __break(1u);
LABEL_592:
        __break(1u);
LABEL_593:
        __break(1u);
LABEL_594:
        __break(1u);
LABEL_595:
        __break(1u);
        goto LABEL_596;
      }

      else {
        v135 = (uint64_t)v134 - 109;
      }
      v136 = v133;
      while (1)
      {
        int v8 = v135 + 1;
        if (__OFADD__(v135, 1LL)) {
          goto LABEL_466;
        }
        v332 = 11;
        from._time = v133;
        v336[0] = *(_OWORD *)(v5 + 104);
        swift_unknownObjectRetain();
        _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( &v332,  &from._time,  v135 + 1,  (double *)__dst);
        swift_unknownObjectRelease();
        ++v135;
        v136 = *(double *)__dst;
      }

      *(void *)&v342 = *(void *)&__dst[0];
      *((double *)&v342 + 1) = v136;
      v344 = 0LL;
      v343 = 0LL;
      v345 = 0x80;
      outlined init with take of PredicateCodableError(&v342, a4);
      specialized swift_willThrowTyped(&v342);
      return v8;
    case 5:
      goto LABEL_56;
    case 6:
      goto LABEL_61;
    case 9:
      int v8 = 0LL;
      switch(*a1)
      {
        case 2:
LABEL_326:
          LOBYTE(v336[0]) = 2;
          *(double *)__src = v12;
          v244 = _CalendarGregorian.dateComponent(_:from:)( (Foundation::Calendar::Component)v336,  *(Foundation::Date *)&a5);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          v245 = swift_allocObject();
          v246 = specialized static Array._adoptStorage(_:count:)(v245, 13LL);
          *(_OWORD *)v247 = xmmword_183720D90;
          *(_OWORD *)(v247 + 16) = xmmword_1838237B0;
          *(_OWORD *)(v247 + 32) = xmmword_1838237C0;
          *(_OWORD *)(v247 + 4_Block_object_dispose(va, 8) = xmmword_183720D90;
          *(_OWORD *)(v247 + 64) = xmmword_1838237B0;
          *(_OWORD *)(v247 + 80) = xmmword_1838237C0;
          *(void *)(v247 + 96) = 4LL;
          v248 = destructiveProjectEnumData for PredicateCodableError(v246, v247);
          unint64_t v72 = __OFSUB__(v244, 1LL);
          v249 = v244 - 1;
          if (v72) {
            goto LABEL_482;
          }
          v250 = v248;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v249, 1LL, v248);
          int v8 = *(void *)(v250 + 8 * v249 + 32);
LABEL_328:
          swift_bridgeObjectRelease();
          return v8;
        case 3:
        case 0x11:
          LOBYTE(__dst[0]) = 9;
          *(double *)v336 = v12;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
          if ((BYTE8(__src[0]) & 1) != 0) {
            return 0LL;
          }
          unint64_t v44 = floor((v12 - *(double *)__src) / 86400.0);
          if ((~*(void *)&v44 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_479;
          }
          if (v44 <= -9.22337204e18) {
            goto LABEL_483;
          }
          if (v44 >= 9.22337204e18) {
            goto LABEL_484;
          }
          int v8 = (uint64_t)v44 + 1;
          __break(1u);
LABEL_75:
          LOBYTE(__dst[0]) = 4;
          LOBYTE(from._time) = 3;
          *(double *)v336 = v12;
          uint64_t v45 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v6) {
            goto LABEL_422;
          }
          int v8 = v45;
          int v7 = 0LL;
          if ((v46 & 1) != 0) {
            return v8;
          }
          LOBYTE(v336[0]) = 5;
          *(double *)__src = v12;
          v48 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v47);
          unint64_t v49 = v8 - 1;
          if (__OFSUB__(v8, 1LL)) {
            goto LABEL_467;
          }
          BOOL v50 = 60 * v49;
          unint64_t v51 = v50 + v48;
          if (__OFADD__(v50, v48)) {
            goto LABEL_473;
          }
          int v8 = v51 + 1;
          if (!__OFADD__(v51, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_83:
          LOBYTE(__dst[0]) = 5;
          LOBYTE(from._time) = 3;
          *(double *)v336 = v12;
          uint64_t v52 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v7) {
            goto LABEL_422;
          }
          int v8 = v52;
          int v7 = 0LL;
          if ((v53 & 1) != 0) {
            return v8;
          }
          LOBYTE(v336[0]) = 6;
          *(double *)__src = v12;
          BOOL v55 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v54);
          int v56 = v8 - 1;
          if (__OFSUB__(v8, 1LL)) {
            goto LABEL_468;
          }
          unint64_t v57 = 60 * v56;
          unint64_t v58 = v57 + v55;
          if (__OFADD__(v57, v55)) {
            goto LABEL_474;
          }
          int v8 = v58 + 1;
          if (!__OFADD__(v58, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_91:
          LOBYTE(__dst[0]) = 6;
          LOBYTE(from._time) = 3;
          *(double *)v336 = v12;
          unint64_t v59 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v7) {
            goto LABEL_422;
          }
          int v8 = v59;
          int v7 = 0LL;
          if ((v60 & 1) != 0) {
            return v8;
          }
          unint64_t v61 = (v12 - floor(v12) + (double)v59 + -1.0) * 1000000000.0;
          if ((~*(void *)&v61 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_469;
          }
          if (v61 <= -9.22337204e18) {
            goto LABEL_472;
          }
          if (v61 >= 9.22337204e18) {
            goto LABEL_475;
          }
          int v8 = (uint64_t)v61 + 1;
          __break(1u);
          goto LABEL_99;
        case 4:
          LOBYTE(__dst[0]) = 3;
          LOBYTE(from._time) = 9;
          *(double *)v336 = v12;
          v251 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v6) {
            goto LABEL_422;
          }
          int v8 = v251;
          int v7 = 0LL;
          if ((v252 & 1) != 0) {
            return v8;
          }
          LOBYTE(v336[0]) = 4;
          *(double *)__src = v12;
          v254 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v253);
          v255 = v8 - 1;
          if (__OFSUB__(v8, 1LL)) {
            goto LABEL_556;
          }
          v256 = (unsigned __int128)(v255 * (__int128)24LL) >> 64;
          v257 = 24 * v255;
          if (v256 != v257 >> 63) {
            goto LABEL_564;
          }
          unint64_t v72 = __OFADD__(v257, v254);
          v258 = v257 + v254;
          if (v72) {
            goto LABEL_572;
          }
          int v8 = v258 + 1;
          if (!__OFADD__(v258, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_337:
          LOBYTE(__dst[0]) = 4;
          LOBYTE(from._time) = 9;
          *(double *)v336 = v12;
          v259 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v7) {
            goto LABEL_422;
          }
          int v8 = v259;
          int v7 = 0LL;
          if ((v260 & 1) != 0) {
            return v8;
          }
          LOBYTE(v336[0]) = 5;
          *(double *)__src = v12;
          v262 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v261);
          v263 = v8 - 1;
          if (__OFSUB__(v8, 1LL)) {
            goto LABEL_557;
          }
          v264 = 60 * v263;
          v265 = v264 + v262;
          if (__OFADD__(v264, v262)) {
            goto LABEL_573;
          }
          int v8 = v265 + 1;
          if (!__OFADD__(v265, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_345:
          LOBYTE(__dst[0]) = 5;
          LOBYTE(from._time) = 9;
          *(double *)v336 = v12;
          v266 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v7) {
            goto LABEL_422;
          }
          int v8 = v266;
          int v7 = 0LL;
          if ((v267 & 1) != 0) {
            return v8;
          }
          LOBYTE(v336[0]) = 6;
          *(double *)__src = v12;
          v269 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v336, v268);
          v270 = v8 - 1;
          if (__OFSUB__(v8, 1LL)) {
            goto LABEL_558;
          }
          v271 = 60 * v270;
          v272 = v271 + v269;
          if (__OFADD__(v271, v269)) {
            goto LABEL_574;
          }
          int v8 = v272 + 1;
          if (!__OFADD__(v272, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_353:
          LOBYTE(__dst[0]) = 6;
          LOBYTE(from._time) = 9;
          *(double *)v336 = v12;
          v273 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v7) {
            goto LABEL_422;
          }
          int v8 = v273;
          if ((v274 & 1) != 0) {
            return v8;
          }
          a5 = (v12 - floor(v12) + (double)v273 + -1.0) * 1000000000.0;
          if ((~*(void *)&a5 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_559;
          }
          if (a5 <= -9.22337204e18) {
            goto LABEL_567;
          }
          if (a5 >= 9.22337204e18) {
            goto LABEL_575;
          }
          int v8 = (uint64_t)a5 + 1;
          __break(1u);
LABEL_361:
          v137 = 1;
          break;
        case 5:
          goto LABEL_337;
        case 6:
          goto LABEL_345;
        case 7:
        case 8:
          goto LABEL_163;
        case 0xA:
        case 0xB:
          goto LABEL_179;
        case 0xD:
          goto LABEL_353;
        default:
          return v8;
      }

      goto LABEL_414;
    case 0xA:
    case 0xB:
      break;
    case 0xC:
      int v8 = 0LL;
      switch(*a1)
      {
        case 3:
        case 0x11:
          LOBYTE(__dst[0]) = 12;
          *(double *)v336 = v12;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, *(Foundation::Date *)&a5);
          if ((BYTE8(__src[0]) & 1) != 0) {
            return 0LL;
          }
          a5 = floor((v12 - *(double *)__src) / 86400.0);
          if ((~*(void *)&a5 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_476;
          }
          if (a5 <= -9.22337204e18) {
            goto LABEL_477;
          }
          if (a5 >= 9.22337204e18) {
            goto LABEL_478;
          }
          unint64_t v11 = (uint64_t)a5;
          int v8 = (uint64_t)a5 + 1;
          __break(1u);
          goto LABEL_50;
        case 4:
LABEL_239:
          LOBYTE(__dst[0]) = 3;
          LOBYTE(from._time) = 12;
          *(double *)v336 = v12;
          v163 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v7) {
            goto LABEL_422;
          }
          int v7 = 0LL;
          if ((v164 & 1) != 0) {
            return 0LL;
          }
          v166 = v163;
          LOBYTE(__dst[0]) = 12;
          *(double *)v336 = v12;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, v165);
          if ((BYTE8(__src[0]) & 1) != 0) {
            return 0LL;
          }
          LOBYTE(v336[0]) = 4;
          v167 = _CalendarGregorian.dateComponent(_:from:)( (Foundation::Calendar::Component)v336,  *(Foundation::Date *)&__src[0]);
          v168 = v166 - 1;
          if (__OFSUB__(v166, 1LL)) {
            goto LABEL_581;
          }
          v169 = (unsigned __int128)(v168 * (__int128)24LL) >> 64;
          v170 = 24 * v168;
          if (v169 != v170 >> 63) {
            goto LABEL_584;
          }
          unint64_t v72 = __OFADD__(v170, v167);
          v171 = v170 + v167;
          if (v72) {
            goto LABEL_587;
          }
          int v8 = v171 + 1;
          if (!__OFADD__(v171, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_248:
          LOBYTE(__dst[0]) = 4;
          LOBYTE(from._time) = 12;
          *(double *)v336 = v12;
          v172 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v7) {
            goto LABEL_422;
          }
          int v7 = 0LL;
          if ((v173 & 1) != 0) {
            return 0LL;
          }
          v175 = v172;
          LOBYTE(__dst[0]) = 12;
          *(double *)v336 = v12;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, v174);
          if ((BYTE8(__src[0]) & 1) != 0) {
            return 0LL;
          }
          LOBYTE(v336[0]) = 5;
          v176 = _CalendarGregorian.dateComponent(_:from:)( (Foundation::Calendar::Component)v336,  *(Foundation::Date *)&__src[0]);
          v177 = v175 - 1;
          if (__OFSUB__(v175, 1LL)) {
            goto LABEL_582;
          }
          v178 = 60 * v177;
          v179 = v178 + v176;
          if (__OFADD__(v178, v176)) {
            goto LABEL_588;
          }
          int v8 = v179 + 1;
          if (!__OFADD__(v179, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_257:
          LOBYTE(__dst[0]) = 5;
          LOBYTE(from._time) = 12;
          *(double *)v336 = v12;
          v180 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v7) {
            goto LABEL_422;
          }
          if ((v181 & 1) != 0) {
            return 0LL;
          }
          v183 = v180;
          LOBYTE(__dst[0]) = 12;
          *(double *)v336 = v12;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, v182);
          if ((BYTE8(__src[0]) & 1) != 0) {
            return 0LL;
          }
          LOBYTE(v336[0]) = 6;
          v184 = _CalendarGregorian.dateComponent(_:from:)( (Foundation::Calendar::Component)v336,  *(Foundation::Date *)&__src[0]);
          v185 = v183 - 1;
          if (__OFSUB__(v183, 1LL)) {
            goto LABEL_583;
          }
          v186 = 60 * v185;
          v187 = v186 + v184;
          if (__OFADD__(v186, v184)) {
            goto LABEL_589;
          }
          int v8 = v187 + 1;
          if (!__OFADD__(v187, 1LL)) {
            return v8;
          }
          __break(1u);
LABEL_266:
          v137 = 11;
          break;
        case 5:
          goto LABEL_248;
        case 6:
          goto LABEL_257;
        case 7:
        case 8:
          goto LABEL_155;
        case 0xB:
          goto LABEL_266;
        case 0xD:
          LOBYTE(__dst[0]) = 6;
          LOBYTE(from._time) = 12;
          *(double *)v336 = v12;
          v188 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF( __dst,  &from,  v336,  __src);
          if (v6) {
            goto LABEL_422;
          }
          int v8 = v188;
          if ((v189 & 1) != 0) {
            return v8;
          }
          a5 = (v12 - floor(v12) + (double)v188 + -1.0) * 1000000000.0;
          if ((~*(void *)&a5 & 0x7FF0000000000000LL) == 0) {
            goto LABEL_549;
          }
          if (a5 <= -9.22337204e18) {
            goto LABEL_550;
          }
          if (a5 >= 9.22337204e18) {
            goto LABEL_551;
          }
          int v8 = (uint64_t)a5 + 1;
          __break(1u);
LABEL_275:
          v137 = 2;
          break;
        default:
          return v8;
      }

    unint64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_377;
    }
    if (v14 < v58)
    {
      unint64_t v61 = *(void *)(v55 + 8 * v14);
      ++v4;
      if (v61) {
        goto LABEL_114;
      }
      unint64_t v4 = v14 + 1;
      if (v14 + 1 < v58)
      {
        unint64_t v61 = *(void *)(v55 + 8 * v4);
        if (v61) {
          goto LABEL_114;
        }
        unint64_t v4 = v14 + 2;
        if (v14 + 2 < v58)
        {
          unint64_t v61 = *(void *)(v55 + 8 * v4);
          if (v61) {
            goto LABEL_114;
          }
          unint64_t v4 = v14 + 3;
          if (v14 + 3 < v58)
          {
            unint64_t v61 = *(void *)(v55 + 8 * v4);
            if (v61) {
              goto LABEL_114;
            }
            unint64_t v62 = v14 + 4;
            if (v62 < v58)
            {
              unint64_t v61 = *(void *)(v55 + 8 * v62);
              if (v61)
              {
                unint64_t v4 = v62;
LABEL_114:
                unint64_t v13 = (v61 - 1) & v61;
                size_t v60 = __clz(__rbit64(v61)) + (v4 << 6);
                goto LABEL_115;
              }

              while (1)
              {
                unint64_t v4 = v62 + 1;
                if (__OFADD__(v62, 1LL)) {
                  goto LABEL_409;
                }
                if (v4 >= v58) {
                  break;
                }
                unint64_t v61 = *(void *)(v55 + 8 * v4);
                ++v62;
                if (v61) {
                  goto LABEL_114;
                }
              }
            }
          }
        }
      }
    }

    swift_release();
    if ((i & 1) == 0)
    {
      v20 = a3;
      v19 = v196;
      id result = (void *)v206;
      if (v203 != v196[11]) {
        goto LABEL_430;
      }
      if (!*v201) {
        goto LABEL_476;
      }
      specialized Rope._Node._prepareModify(at:)(v206, (uint64_t)&v228);
      v233 = v229;
      v213 = v228;
      v214 = v229;
      v215 = v230;
      int v100 = v218;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v233);
      id result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v233 + 8);
      v214 = v100;
      v207 += 2LL;
      v196[11] = v207;
      i = a2;
      if (!v196[8]) {
        goto LABEL_477;
      }
      v202 = specialized Rope._Node._finalizeModify(_:)(&v210, &v213);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id result = (void *)swift_bridgeObjectRelease();
      goto LABEL_253;
    }

    id result = (void *)v206;
    if (v203 != v196[11]) {
      goto LABEL_429;
    }
    if (!*v201) {
      goto LABEL_474;
    }
    specialized Rope._Node._prepareModify(at:)(v206, (uint64_t)&v222);
    v231 = v223;
    v232 = v224;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v231);
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v232);
    v213 = v222;
    v215 = v225;
    v80 = *((void *)&v218 + 1);
    id result = (void *)v218;
    v214 = v218;
    unint64_t v81 = v207 + 2;
    v196[11] = v207 + 2;
    if (!v196[8]) {
      goto LABEL_475;
    }
    v199 = (uint64_t)result;
    swift_bridgeObjectRetain_n();
    v193 = v80;
    swift_bridgeObjectRetain_n();
    unint64_t v82 = specialized Rope._Node._finalizeModify(_:)(v209, &v213);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v83 = v196[8];
    v84 = v196[9];
    v85 = v196[10];
    v86 = v196[11];
    v207 += 2LL;
    *(void *)&v213 = v81;
    *((void *)&v213 + 1) = v206;
    v202 = v82;
    *(void *)&v214 = v82;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v213, v83, v84, v85, v86);
    swift_unknownObjectRelease();
    unint64_t v87 = v213;
    unint64_t v88 = v214;
    unint64_t v89 = swift_unknownObjectRetain();
    unint64_t v90 = specialized Rope._endPath.getter(v89);
    id result = (void *)swift_unknownObjectRelease();
    if (*((void *)&v87 + 1) >= v90)
    {
      i = a2;
    }

    else
    {
      if ((void)v87 != v196[11]) {
        goto LABEL_437;
      }
      if (v88)
      {
        unint64_t v91 = v88 + 24 * ((*((void *)&v87 + 1) >> ((4 * *(_BYTE *)(v88 + 18) + 8) & 0x3C)) & 0xFLL);
        unint64_t v92 = *(void *)(v91 + 32);
        unint64_t v93 = *(void *)(v91 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        i = a2;
        unint64_t v94 = v196;
      }

      else
      {
        unint64_t v94 = v196;
        v102 = v196[8];
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(*((unint64_t *)&v87 + 1), v102);
        unint64_t v92 = v103;
        unint64_t v93 = v104;
        swift_unknownObjectRelease();
        i = a2;
      }

      if ((specialized static Dictionary<>.== infix(_:_:)(v92, v199) & 1) != 0)
      {
        v105 = specialized static Set.== infix(_:_:)(v93, v193);
        swift_bridgeObjectRelease();
        id result = (void *)swift_bridgeObjectRelease();
        if ((v105 & 1) != 0)
        {
          v106 = specialized Rope._remove(at:)((uint64_t)&v213, v207, v206);
          v107 = v94[8];
          v108 = v94[11];
          v109 = v106;
          if (v106 < specialized Rope._endPath.getter(v107) && *(_BYTE *)(v107 + 18))
          {
            v110 = (v106 >> ((4 * *(_BYTE *)(v107 + 18) + 8) & 0x3C)) & 0xF;
            swift_unknownObjectRetain();
            specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v107 + 24, v110, v109);
            swift_unknownObjectRelease();
          }

          v111 = v213;
          swift_bridgeObjectRelease();
          id result = (void *)swift_bridgeObjectRelease();
          if (v108 != v94[11]) {
            goto LABEL_458;
          }
          if (!*v201) {
            goto LABEL_478;
          }
          id result = (void *)specialized Rope._Node._prepareModify(at:)(v109, (uint64_t)v226);
          v213 = v226[0];
          v214 = v226[1];
          v215 = v226[2];
          if (__OFADD__(*((void *)&v226[0] + 1), v111)) {
            goto LABEL_459;
          }
          *((void *)&v213 + 1) = *((void *)&v226[0] + 1) + v111;
          v207 = v108 + 1;
          v94[11] = v108 + 1;
          if (!v94[8]) {
            goto LABEL_479;
          }
          v202 = specialized Rope._Node._finalizeModify(_:)(v209, &v213);
          swift_bridgeObjectRelease();
          id result = (void *)swift_bridgeObjectRelease();
          goto LABEL_203;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        id result = (void *)swift_bridgeObjectRelease();
      }
    }

    v109 = v206;
LABEL_203:
    v112 = *v201;
    if (*v201) {
      v112 = *(unsigned __int8 *)(v112 + 18);
    }
    v19 = v196;
    v113 = v199;
    v114 = v202;
    v206 = v109;
    if (v109 <= v112)
    {
      swift_bridgeObjectRelease_n();
      id result = (void *)swift_bridgeObjectRelease_n();
      v20 = a3;
      goto LABEL_253;
    }

    v115 = v196[8];
    v116 = v196[11];
    *(void *)&v213 = v207;
    *((void *)&v213 + 1) = v109;
    *(void *)&v214 = v202;
    if (v207 != v116) {
      goto LABEL_438;
    }
    if (v115)
    {
      v117 = *(unsigned __int8 *)(v115 + 18);
      id result = (void *)swift_unknownObjectRetain();
      v114 = v202;
      if (v109 <= v117) {
        goto LABEL_439;
      }
    }

    else if (!v109)
    {
      goto LABEL_439;
    }

    v118 = (4 * *((_BYTE *)v114 + 18) + 8) & 0x3C;
    if (((v109 >> v118) & 0xF) != 0)
    {
      v119 = v114;
      v120 = ((((v109 >> v118) & 0xF) - 1) << v118) | ((-15LL << v118) - 1) & v109;
      id result = (void *)swift_unknownObjectRelease();
      v121 = v119;
      v122 = v207;
    }

    else
    {
      swift_unknownObjectRetain();
      v123 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v213, v115);
      id result = (void *)swift_unknownObjectRelease_n();
      if ((v123 & 1) == 0) {
        goto LABEL_453;
      }
      v120 = *((void *)&v213 + 1);
      v122 = v213;
      v121 = (void *)v214;
    }

    if (v122 != v196[11]) {
      goto LABEL_440;
    }
    v20 = a3;
    if (v121)
    {
      v124 = &v121[3 * ((v120 >> ((4 * *((_BYTE *)v121 + 18) + 8) & 0x3C)) & 0xF)];
      v125 = v124[4];
      v126 = v124[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      v127 = v196[8];
      swift_unknownObjectRetain();
      v113 = v199;
      specialized Rope._Node.subscript.getter(v120, v127);
      v125 = v128;
      v126 = v129;
      swift_unknownObjectRelease();
    }

    if ((specialized static Dictionary<>.== infix(_:_:)(v125, v113) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_226:
      swift_bridgeObjectRelease();
      id result = (void *)swift_bridgeObjectRelease();
      goto LABEL_253;
    }

    v130 = specialized static Set.== infix(_:_:)(v126, v193);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v130 & 1) == 0) {
      goto LABEL_226;
    }
    v131 = specialized Rope._remove(at:)((uint64_t)&v213, v207, v109);
    v132 = v196[8];
    v133 = v196[11];
    if (v131 >= specialized Rope._endPath.getter(v132))
    {
      v132 = 0LL;
    }

    else if (*(_BYTE *)(v132 + 18))
    {
      v134 = (v131 >> ((4 * *(_BYTE *)(v132 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      v135 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v132 + 24, v134, v131);
      swift_unknownObjectRelease();
      v132 = v135;
    }

    v210 = v133;
    v211 = v131;
    v212 = v132;
    v139 = v213;
    swift_bridgeObjectRelease();
    id result = (void *)swift_bridgeObjectRelease();
    if (v133 != v196[11]) {
      goto LABEL_460;
    }
    v140 = v196[8];
    if (v140)
    {
      v141 = *(unsigned __int8 *)(v140 + 18);
      id result = (void *)swift_unknownObjectRetain();
      if (v131 <= v141) {
        goto LABEL_461;
      }
    }

    else if (!v131)
    {
      goto LABEL_461;
    }

    if (v132 && (v177 = (4 * *(_BYTE *)(v132 + 18) + 8) & 0x3C, ((v131 >> v177) & 0xF) != 0))
    {
      v211 = ((((v131 >> v177) & 0xF) - 1) << v177) | ((-15LL << v177) - 1) & v131;
      id result = (void *)swift_unknownObjectRelease();
      i = a2;
    }

    else
    {
      swift_unknownObjectRetain();
      v178 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v210, v140);
      id result = (void *)swift_unknownObjectRelease_n();
      i = a2;
      if ((v178 & 1) == 0) {
        goto LABEL_466;
      }
      v133 = v210;
    }

    v20 = a3;
    if (v133 != v196[11]) {
      goto LABEL_462;
    }
    if (!*v201) {
      goto LABEL_480;
    }
    v206 = v211;
    id result = (void *)specialized Rope._Node._prepareModify(at:)(v211, (uint64_t)v227);
    v213 = v227[0];
    v214 = v227[1];
    v215 = v227[2];
    unint64_t v23 = __OFSUB__(v205, *((void *)&v227[0] + 1));
    v205 -= *((void *)&v227[0] + 1);
    if (v23) {
      goto LABEL_463;
    }
    if (__OFADD__(*((void *)&v227[0] + 1), v139)) {
      goto LABEL_464;
    }
    *((void *)&v213 + 1) = *((void *)&v227[0] + 1) + v139;
    v19 = v196;
    v207 = v133 + 1;
    v196[11] = v133 + 1;
    if (!v196[8]) {
      goto LABEL_481;
    }
    v202 = specialized Rope._Node._finalizeModify(_:)(v209, &v213);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id result = (void *)swift_bridgeObjectRelease();
    if (__OFSUB__(v200, 1LL)) {
      goto LABEL_465;
    }
    --v200;
LABEL_253:
    v145 = v19[8];
    v146 = v19[11];
    *(void *)&v213 = v207;
    *((void *)&v213 + 1) = v206;
    *(void *)&v214 = v202;
    unint64_t v23 = __OFADD__(v200++, 1LL);
    if (v23) {
      goto LABEL_404;
    }
    if (v207 != v146) {
      goto LABEL_405;
    }
    if (v202)
    {
      v147 = v202[3 * ((v206 >> ((4 * *((_BYTE *)v202 + 18) + 8) & 0x3C)) & 0xF) + 3];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      v147 = specialized Rope._Node.subscript.getter(v206, v145);
    }

    swift_bridgeObjectRelease();
    id result = (void *)swift_bridgeObjectRelease();
    v18 = v205 + v147;
    if (__OFADD__(v205, v147)) {
      goto LABEL_406;
    }
    if (v145)
    {
      v148 = ((-15LL << ((4 * *(_BYTE *)(v145 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v145 + 18) | ((unint64_t)*(unsigned __int16 *)(v145 + 16) << ((4 * *(_BYTE *)(v145 + 18) + 8) & 0x3C));
      id result = (void *)swift_unknownObjectRetain();
    }

    else
    {
      v148 = 0LL;
    }

    if (v206 >= v148) {
      goto LABEL_407;
    }
    if (v202
      && (v149 = (4 * *((_BYTE *)v202 + 18) + 8) & 0x3C,
          v150 = ((v206 >> v149) & 0xF) + 1,
          v150 < *((unsigned __int16 *)v202 + 8)))
    {
      unint64_t v13 = (v150 << v149) | ((-15LL << v149) - 1) & v206;
      id result = (void *)swift_unknownObjectRelease_n();
    }

    else
    {
      v151 = *(unsigned __int8 *)(v145 + 18);
      v152 = (4 * v151 + 8) & 0x3C;
      v210 = (v206 >> v152) & 0xF;
      if (v151)
      {
        swift_unknownObjectRetain();
        v153 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v145 + 24, &v210, (uint64_t)&v213, v145, v151);
        id result = (void *)swift_unknownObjectRelease();
        if ((v153 & 1) == 0) {
          goto LABEL_271;
        }
        id result = (void *)swift_unknownObjectRelease_n();
        unint64_t v13 = *((void *)&v213 + 1);
      }

      else
      {
        v154 = ((v206 >> v152) & 0xF) + 1;
        if (v154 >= *(unsigned __int16 *)(v145 + 16))
        {
LABEL_271:
          if (v145)
          {
            v155 = *(unsigned __int8 *)(v145 + 18);
            v156 = v18;
            v157 = *(unsigned __int16 *)(v145 + 16);
            id result = (void *)swift_unknownObjectRelease_n();
            v158 = (4 * v155 + 8) & 0x3C;
            v159 = ((-15LL << v158) - 1) & v155;
            v160 = v157 << v158;
            v18 = v156;
            unint64_t v13 = v159 | v160;
          }

          else
          {
            unint64_t v13 = 0LL;
          }

          *(void *)&v213 = v207;
          *((void *)&v213 + 1) = v13;
          *(void *)&v214 = 0LL;
          goto LABEL_275;
        }

        unint64_t v13 = (v154 << v152) | ((-15LL << v152) - 1) & v206;
        *((void *)&v213 + 1) = v13;
        id result = (void *)swift_unknownObjectRelease_n();
        *(void *)&v214 = v145;
      }
    }

      v136 = v7;
      v134 = (v140 - 1) & v140;
      v194 = v141;
      v138 = __clz(__rbit64(v140)) + (v141 << 6);
    }

    v143 = 16 * v138;
    v144 = v74;
    v145 = *(Swift::String *)(*(void *)(v74 + 48) + v143);
    v146 = (uint64_t *)(*(void *)(v74 + 56) + v143);
    v147 = *v146;
    v148 = v146[1];
    *(void *)&v195[0] = 0x6E65646E65706564LL;
    *((void *)&v195[0] + 1) = 0xEB000000003D7963LL;
    String.append(_:)(v145);
    v149 = v195[0];
    swift_bridgeObjectRetain();
    int v7 = v136;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v195[0] = v7;
    v152 = specialized __RawDictionaryStorage.find<A>(_:)(v149, *((uint64_t *)&v149 + 1));
    v153 = *(void *)(v7 + 16);
    v154 = (v151 & 1) == 0;
    v155 = v153 + v154;
    if (__OFADD__(v153, v154))
    {
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }

    v156 = v151;
    if (*(void *)(v7 + 24) >= v155) {
      break;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v155,  isUniquelyReferenced_nonNull_native);
    int v7 = *(void *)&v195[0];
    v157 = specialized __RawDictionaryStorage.find<A>(_:)(v149, *((uint64_t *)&v149 + 1));
    if ((v156 & 1) != (v158 & 1)) {
      goto LABEL_160;
    }
    v152 = v157;
    if ((v156 & 1) != 0)
    {
LABEL_82:
      v135 = (void *)(*(void *)(v7 + 56) + 16 * v152);
      swift_bridgeObjectRelease();
      *v135 = v147;
      v135[1] = v148;
      goto LABEL_83;
    }

      swift_release();
      return v48 & 1;
    }

                          __break(1u);
LABEL_100:
                          ;
                        }

                        goto LABEL_61;
                      }

                      int v7 = String.UTF8View._foreignIndex(after:)();
                      if (v4 == v7 >> 14) {
                        goto LABEL_61;
                      }
LABEL_70:
                      unint64_t v33 = v7;
                      if ((v7 & 0xC) != v8) {
                        goto LABEL_71;
                      }
                      goto LABEL_97;
                    }

            *(_BYTE *)(v6 + v10) = v9;
            v16 = __OFADD__(v10++, 1LL);
            if (v16) {
              goto LABEL_107;
            }
            LOBYTE(v9) = 0;
            goto LABEL_8;
          }

  v75((uint64_t)&v73);
LABEL_100:
  __NSOQSchedule((uint64_t)v62);
  if (v63 >= 0x48) {

  }
LABEL_102:
}

LABEL_136:
  if (v45 + v64 - 5 >= v60)
  {
    MEMORY[0x1895F8858](a1);
    v73 = &v95;
    if (v60 >= 0x1A)
    {
      v73 = (uint64_t *)malloc(v60 + 1);
      if (!v73)
      {
        qword_18C5D6210 = (uint64_t)"Unable to allocate space to decode JSON number.";
        __break(1u);
        JUMPOUT(0x182ECEAD8LL);
      }
    }

    memcpy(v73, v6, v60);
    *((_BYTE *)v73 + v60) = 0;
    int v74 = *__error();
    *__error() = 0;
    v98 = 0LL;
    double v75 = strtod_l((const char *)v73, &v98, 0LL);
    if (v75 == 0.0 && *v98 || v75 == INFINITY && *__error() == 34) {
      v76 = 0LL;
    }
    else {
      v76 = -[NSNumber initWithDouble:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithDouble:", v75);
    }
    *__error() = v74;
    if (v73 != &v95) {
      free(v73);
    }
    if (v76) {
      return newJSONNumberCreateRoundTripping((uint64_t)v3, v4, v76);
    }
  }

  if (a2) {
    *a2 = 0LL;
  }
  v80 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  *v3 + v4,  v60,  1LL,  0LL);
  v76 = -[NSDecimalNumber initWithString:](objc_alloc(&OBJC_CLASS___NSDecimalNumber), "initWithString:", v80);

  if (!v76)
  {
    v98 = 0LL;
    v99 = 0LL;
    int v100 = 0;
    goto LABEL_161;
  }

  -[NSDecimalNumber decimalValue](v76, "decimalValue");
  if (((unsigned __int16)v98 & 0x1F00) == 0x1000)
  {
LABEL_161:
    v3[3] = v4;
    if (a2)
    {
      unint64_t v81 = v3[6];
      BOOL v12 = v4 >= v81;
      unint64_t v82 = v4 - v81;
      if (v12) {
        unint64_t v83 = v82;
      }
      else {
        unint64_t v83 = 0LL;
      }
      v84 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v96 = v3[5];
      v85 = -[NSString initWithFormat:]( v84,  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Number wound up as NaN",  v96,  v83);
      v86 = -[NSNumber initWithUnsignedInteger:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInteger:", v3[3]);
      v101[0] = @"NSDebugDescription";
      v101[1] = @"NSJSONSerializationErrorIndex";
      v102 = (const __CFString *)v85;
      v103 = (const __CFString *)v86;
      *a2 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v102 forKeys:v101 count:2]);
    }

    return 0LL;
  }

  return newJSONNumberCreateRoundTripping((uint64_t)v3, v4, v76);
}

                    unint64_t v62 = v67;
LABEL_137:
                    if (v62) {
                      goto LABEL_275;
                    }
                    goto LABEL_138;
                  }

                  int v65 = 2LL;
                }
              }

    if ((v29 & 0x1000000000000000LL) != 0)
    {
      *(void *)&v258 = v28;
      *((void *)&v258 + 1) = v29;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v220 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unint64_t v23 = (unint64_t)objc_msgSend(v220, sel__fastCharacterContents);
      v221 = v220;
      if (v23)
      {
        *(void *)&v258 = v28;
        *((void *)&v258 + 1) = v29;
        StringProtocol._ephemeralString.getter();
        v222 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v223 = objc_msgSend(v222, sel_length);
        swift_unknownObjectRelease();
        v224 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( (unsigned __int16 *)v23,  (uint64_t)v223,  4u,  1);
      }

      else
      {
        v224 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v28, v29, 4u, 1);
      }

      v226 = v224;
      swift_bridgeObjectRelease_n();
      uint64_t v30 = v255;
      if ((v226 & 1) != 0)
      {
LABEL_142:
        swift_bridgeObjectRetain();
        v113 = swift_bridgeObjectRelease();
        LOBYTE(v25_Block_object_dispose(va, 8) = 37;
        MEMORY[0x1895F8858](v113);
        v243 = (uint64_t)&v258;
        v114 = specialized Sequence.contains(where:)( (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t)v242,  v28,  v29);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v269 = v114 & 1;
        goto LABEL_59;
      }
    }

    else
    {
      if ((v29 & 0x2000000000000000LL) != 0)
      {
        v111 = HIBYTE(v29) & 0xF;
        *(void *)&v258 = v28;
        *((void *)&v258 + 1) = v29 & 0xFFFFFFFFFFFFFFLL;
        v110 = (char *)&v258;
      }

      else if ((v28 & 0x1000000000000000LL) != 0)
      {
        v110 = (char *)((v29 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v111 = v28 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        v110 = (char *)_StringObject.sharedUTF8.getter();
      }

      v112 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v110, v111, 4u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v112) {
        goto LABEL_142;
      }
    }

  if ((_DWORD)v77)
  {
    unint64_t v83 = *((void *)v63._rawValue + 2);
    if (v83) {
      goto LABEL_138;
    }
    goto LABEL_141;
  }

  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  BOOL v50 = (void *)swift_allocError();
  char *v98 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_21:
  v139 = 0LL;
  v140 = 0LL;
  _So9NSDecimala__exponent_setter(0LL, &v138);
  _So9NSDecimala__length_setter(0LL, &v138);
  _So9NSDecimala__isNegative_setter(1LL, &v138);
  _So9NSDecimala__isCompact_setter_0(0LL, &v138);
  _So9NSDecimala__reserved_setter(&v138);

  v19 = v138;
  v20 = v139;
  v21 = WORD1(v139);
  return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
}

          swift_bridgeObjectRelease();
          goto LABEL_105;
        }
      }

      else
      {
        uint64_t v96 = specialized URL.UnicodeLookalikeTable.allCharactersAllowedByTLDRules(in:)(v66, v68);
        if ((v190 & 1) == 0)
        {
          LODWORD(v210) = v96 ^ 1;
          unint64_t v23 = v211;
          if ((v93 & 1) == 0) {
            goto LABEL_102;
          }
          goto LABEL_136;
        }

        if ((v96 & 1) == 0)
        {
          if ((v93 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            LODWORD(v210) = 1;
            unint64_t v23 = v211;
            goto LABEL_105;
          }

          LODWORD(v210) = 1;
          v120 = v68;
          goto LABEL_152;
        }
      }

      v106 = v16;
      v209 = v25;
      v107 = v94 | v95;
      *(void *)&v230 = 46LL;
      *((void *)&v230 + 1) = 0xE100000000000000LL;
      MEMORY[0x1895F8858](v96);
      v183 = (uint64_t)&v230;
      swift_bridgeObjectRetain_n();
      v108 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)( 0x7FFFFFFFFFFFFFFFLL,  1,  partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:),  (uint64_t)v182,  v66,  v68);
      swift_bridgeObjectRelease();
      *(void *)&v221 = v108;
      v208 = v2;
      if (v186 && !((*(void *)(v108 + 16) < 4uLL) | v107 & 1))
      {
        URL.FormatStyle.formatMultiLevelSubdomains(from:forHost:)((uint64_t)&v221);
        v2 = 1LL;
        if (!v187) {
          goto LABEL_146;
        }
      }

      else
      {
        v2 = 0LL;
        if (!v187) {
          goto LABEL_146;
        }
      }

      v121 = v221;
      if (*(void *)(v221 + 16) >= 3uLL)
      {
        v122 = v93;
        if ((v107 & 1) != 0)
        {
LABEL_147:
          swift_bridgeObjectRetain();
          v129 = v66;
          v120 = v68;
          v16 = v106;
LABEL_150:
          swift_bridgeObjectRelease();
          if ((v122 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            unint64_t v23 = v211;
            if ((v2 & 1) != 0) {
              URLComponents._URLComponents.host.setter(v66, v68);
            }
            else {
              swift_bridgeObjectRelease();
            }
            LODWORD(v210) = 0;
            unint64_t v25 = v209;
            goto LABEL_105;
          }

          swift_bridgeObjectRelease();
          LODWORD(v210) = 0;
          unint64_t v66 = v129;
          unint64_t v25 = v209;
LABEL_152:
          unint64_t v23 = v211;
          URLComponents._URLComponents.host.setter(v66, v120);
          goto LABEL_105;
        }

        v123 = *(void *)(v221 + 40);
        v210 = *(void *)(v221 + 32);
        v125 = *(void *)(v221 + 48);
        v124 = *(void *)(v221 + 56);
        swift_bridgeObjectRetain();
        v126 = MEMORY[0x186E1B610](v210, v123, v125, v124);
        v128 = v127;
        swift_bridgeObjectRelease();
        LOBYTE(v124) = specialized Set.contains(_:)(v126, v128, v187);
        swift_bridgeObjectRelease();
        v16 = v106;
        if ((v124 & 1) == 0)
        {
LABEL_149:
          *(void *)&v230 = v221;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Substring]);
          lazy protocol witness table accessor for type [Substring] and conformance [A]();
          lazy protocol witness table accessor for type Substring and conformance Substring();
          v129 = Sequence<>.joined(separator:)();
          v120 = v130;
          swift_bridgeObjectRelease();
          goto LABEL_150;
        }

        if (*(void *)(v121 + 16))
        {
          LOBYTE(v2) = 1;
          specialized Array.replaceSubrange<A>(_:with:)(0LL, 1LL);
          goto LABEL_149;
        }

        __break(1u);
        goto LABEL_208;
      }

  if ((_DWORD)v94)
  {
    uint64_t v104 = *((void *)v46._rawValue + 2);
    if (v104) {
      goto LABEL_138;
    }
    goto LABEL_141;
  }

  if ((_DWORD)v94)
  {
    uint64_t v104 = *((void *)v46._rawValue + 2);
    if (v104) {
      goto LABEL_138;
    }
    goto LABEL_141;
  }

          a1 = v73;
          uint64_t v17 = v74;
          if (a6 < v73)
          {
            __break(1u);
            goto LABEL_138;
          }

NSString *newJSONNumberCreateRoundTripping(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3 || (*(_BYTE *)(a1 + 9) & 0x10) == 0) {
    return (NSString *)a3;
  }
  id result = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  *(void *)a1 + a2,  *(void *)(a1 + 24) - a2,  4LL);
  if (result)
  {
    uint64_t v5 = result;
    v6 = -[_NSJSONRoundTrippingNumber initWithNumber:representation:]( objc_alloc(&OBJC_CLASS____NSJSONRoundTrippingNumber),  "initWithNumber:representation:",  a3,  result);

    return (NSString *)v6;
  }

  else
  {
    qword_18C5D6210 = (uint64_t)"Unable to allocate string from UTF-8 JSON data.";
    __break(1u);
  }

  return result;
}

id NSKVOClass(void *a1, const char *a2)
{
  Class = object_getClass(a1);
  if (Class != _NSKVONotifyingOriginalClassForIsa(Class)) {
    return (id)objc_opt_class();
  }
  InstanceMethod = class_getInstanceMethod(Class, a2);
  return method_invoke(a1, InstanceMethod);
}

objc_class *_NSKVONotifyingOriginalClassForIsa(objc_class *a1)
{
  id v1 = a1;
  return v1;
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)(void *a1, uint64_t a2)
{
  if (!a1) {
    return MEMORY[0x18961AFE8];
  }
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  type metadata accessor for _ContiguousArrayStorage();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    objc_msgSend(a1, sel_copy);
    if ((isClassOrObjCExistentialType & 1) != 0)
    {
      uint64_t v6 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
    }

    else
    {
      unint64_t v7 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      specialized _arrayForceCast<A, B>(_:)(v7, a2);
      uint64_t v6 = v8;
      swift_bridgeObjectRelease();
    }

    return v6;
  }

  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance String( void *a1, id *a2)
{
  *a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2[1] = v4;
  return 1LL;
}

uint64_t _KeyValueCodingAndObserving.willChangeValue<A>(for:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v6 = (void *)v9[1];
  _bridgeKeyPathToString(_:)();
  uint64_t v7 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, *a3, v7);

  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t _KeyValueCodingAndObserving.willChangeValue<A>(for:)(uint64_t a1, uint64_t a2)
{
  return _KeyValueCodingAndObserving.willChangeValue<A>(for:)(a1, a2, (SEL *)&selRef_willChangeValueForKey_);
}

uint64_t _bridgeKeyPathToString(_:)()
{
  uint64_t result = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v1)
  {
    _StringGuts.grow(_:)(42LL);
    v2._object = (void *)0x80000001839C9430LL;
    v2._countAndFlagsBits = 0xD000000000000028LL;
    String.append(_:)(v2);
    type metadata accessor for AnyKeyPath();
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t _KeyValueCodingAndObserving.didChangeValue<A>(for:)(uint64_t a1, uint64_t a2)
{
  return _KeyValueCodingAndObserving.willChangeValue<A>(for:)(a1, a2, (SEL *)&selRef_didChangeValueForKey_);
}

double static Date.timeIntervalSinceReferenceDate.getter()
{
  uint64_t v2 = *MEMORY[0x1895F89C0];
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  return (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
}

id protocol witness for CustomStringConvertible.description.getter in conformance NSObject( uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance NSObject( a1,  a2,  (SEL *)&selRef_description);
}

id protocol witness for CustomStringConvertible.description.getter in conformance NSObject( uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [*v3 *a3];
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v5;
}

uint64_t closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)partial apply( uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)(a1, a2);
}

uint64_t closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)( uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  _CFNonObjCStringGetBytes();

  return 0LL;
}

void _NSKeyValueObservationInfoGetObservances(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v6 = -[NSIndexSet initWithIndexesInRange:]( objc_alloc(&OBJC_CLASS___NSMutableIndexSet),  "initWithIndexesInRange:",  0LL,  a3);
  uint64_t v7 = v6;
  unint64_t v8 = 8 * a3;
  if ((unint64_t)(8 * a3) < 0x81)
  {
    if (a3)
    {
      MEMORY[0x1895F8858](v6);
      unint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    }

    else
    {
      unint64_t v9 = 0LL;
    }
  }

  else
  {
    unint64_t v9 = (char *)malloc(8 * a3);
  }

  objc_msgSend(*(id *)(a1 + 8), "getObjects:range:", v9, 0, a3);
  uint64_t v14 = 0LL;
  unint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000LL;
  uint64_t v17 = 0LL;
  if (a3)
  {
    uint64_t v10 = 0LL;
    do
    {
      uint64_t v11 = *(void *)&v9[8 * v10];
      if ((*(_BYTE *)(v11 + 40) & 0x20) == 0)
      {
        BOOL v12 = v15;
        *(void *)(a2 + 8 * v15[3]) = v11;
        ++v12[3];
        -[NSMutableIndexSet removeIndex:](v7, "removeIndex:", v10);
      }

      ++v10;
    }

    while (a3 != v10);
  }

  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 3221225472LL;
  v13[2] = ___NSKeyValueObservationInfoGetObservances_block_invoke;
  v13[3] = &unk_189C9E200;
  v13[4] = &v14;
  v13[5] = a2;
  v13[6] = v9;
  -[NSIndexSet enumerateIndexesUsingBlock:](v7, "enumerateIndexesUsingBlock:", v13);
  if (v8 >= 0x81) {
    free(v9);
  }

  _Block_object_dispose(&v14, 8);
}

void sub_182ECF764(_Unwind_Exception *exception_object)
{
}

objc_class *__NSIndexSetParameterCheckIterate( objc_class *result, const char *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (!a3)
  {
    uint64_t v6 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: block is nil",  _NSMethodExceptionProem(result, a2));
    uint64_t v7 = (void *)MEMORY[0x189603F70];
    unint64_t v8 = (void *)MEMORY[0x189603A60];
    goto LABEL_13;
  }

  if ((a4 & 0x800000000000000LL) != 0 && a6)
  {
    if (a5 > 0x7FFFFFFFFFFFFFFELL || a6 == 0x7FFFFFFFFFFFFFFFLL || a6 < 0)
    {
      unint64_t v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: a range field {%ld, %ld} is NSNotFound or beyond bounds (%ld)",  _NSMethodExceptionProem(result, a2),  a5,  a6,  0x7FFFFFFFFFFFFFFFLL);
    }

    else
    {
      unint64_t v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: last range index (%ld) beyond bounds (%ld)",  _NSMethodExceptionProem(result, a2),  a5 + a6 - 1,  0x7FFFFFFFFFFFFFFELL,  v10);
    }

    uint64_t v6 = v9;
    uint64_t v7 = (void *)MEMORY[0x189603F70];
    unint64_t v8 = (void *)MEMORY[0x189603B40];
LABEL_13:
    objc_exception_throw((id)[v7 exceptionWithName:*v8 reason:v6 userInfo:0]);
    return (objc_class *)__NSIndexSetEnumerate();
  }

  return result;
}

uint64_t __NSIndexSetEnumerate(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v72 = *MEMORY[0x1895F89C0];
  if (!a4) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v8 = a2;
  if (a1 < 0)
  {
    uint64_t v10 = *MEMORY[0x189616658];
    if ((~a1 & 0xC000000000000007LL) == 0) {
      uint64_t v10 = 0LL;
    }
    unint64_t v11 = v10 ^ a1;
    uint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    if ((~(_BYTE)v11 & 7) == 0) {
      uint64_t v12 = 0xFFFFFFFFFFFFFLL;
    }
    unint64_t v13 = v12 & (v11 >> 3);
    return __NSIndexSetEnumerateBitfield(v13, a2, a3, a4, a5);
  }

  if ((*(_BYTE *)(a1 + 8) & 2) == 0)
  {
    if ((a2 & 1) != 0)
    {
      uint64_t v19 = MEMORY[0xFFFFFC034];
      if (MEMORY[0xFFFFFC034] < 2u) {
        unint64_t v8 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      if ((v8 & 1) != 0)
      {
        unint64_t v16 = a3 + a4;
        if ((v8 & 0x4000000000000000LL) != 0)
        {
          uint64_t v17 = objc_msgSend((id)a1, "_indexOfRangeAfterOrContainingIndex:");
          uint64_t v18 = [(id)a1 _indexOfRangeBeforeOrContainingIndex:v16 - 1];
        }

        else
        {
          uint64_t v17 = objc_msgSend((id)a1, "indexGreaterThanOrEqualToIndex:");
          uint64_t v18 = [(id)a1 indexLessThanIndex:a3 + a4];
        }

        unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        if (v17 != 0x7FFFFFFFFFFFFFFFLL && v18 != 0x7FFFFFFFFFFFFFFFLL)
        {
          unint64_t v23 = v18 - v17 + 1;
          uint64_t v24 = 32LL;
          uint64_t v25 = 16LL;
          uint64_t v26 = 4LL;
          if (v23 < 4 * v19) {
            uint64_t v26 = 1LL;
          }
          if (v23 < 16 * v19) {
            uint64_t v25 = v26;
          }
          if (v23 < 32 * v19) {
            uint64_t v24 = v25;
          }
          if (48 * v19 > v23) {
            uint64_t v27 = v24;
          }
          else {
            uint64_t v27 = 48LL;
          }
          if (v23 < v19 << 6) {
            unint64_t v28 = v27;
          }
          else {
            unint64_t v28 = 64LL;
          }
          uint64_t v68 = 0LL;
          unsigned int v69 = &v68;
          uint64_t v70 = 0x2020000000LL;
          uint64_t v71 = 0x7FFFFFFFFFFFFFFFLL;
          v66[0] = 0LL;
          v66[1] = v66;
          v66[2] = 0x2020000000LL;
          char v67 = 0;
          block[0] = MEMORY[0x1895F87A8];
          block[1] = 3221225472LL;
          block[2] = ____NSIndexSetEnumerate_block_invoke;
          block[3] = &unk_189C9DC70;
          block[8] = v17;
          block[9] = v28;
          block[10] = v18;
          block[11] = v8;
          block[12] = a3;
          block[13] = a4;
          block[4] = a1;
          block[5] = a5;
          block[6] = v66;
          block[7] = &v68;
          dispatch_apply((v28 + v18 - v17) / v28, 0LL, block);
          if ((*(_BYTE *)(a1 + 8) & 1) == 0)
          {
            pthread_t v29 = pthread_self();
            uint64_t v30 = (unint64_t *)(*(void *)(a1 + 16) + 56LL);
            while (1)
            {
              unint64_t v31 = __ldaxr(v30);
              if ((pthread_t)v31 != v29) {
                break;
              }
              if (!__stlxr(0LL, v30)) {
                goto LABEL_125;
              }
            }

            __clrex();
          }

LABEL_125:
          unint64_t v14 = atomic_load((unint64_t *)v69 + 3);
          _Block_object_dispose(v66, 8);
          _Block_object_dispose(&v68, 8);
        }

        return v14;
      }
    }

    _CFAutoreleasePoolPush();
    int v20 = *(_DWORD *)(a1 + 8);
    if ((v20 & 2) != 0)
    {
      v21 = (void *)(a1 + 16);
      BOOL v22 = (*(_DWORD *)(a1 + 8) & 1) == 0;
    }

    else
    {
      if ((v20 & 1) != 0)
      {
        unint64_t v33 = *(void *)(a1 + 24) != 0LL;
        goto LABEL_52;
      }

      v21 = (void *)(*(void *)(a1 + 16) + 8LL);
      BOOL v22 = 1;
    }

    if (*v21)
    {
      if (v22)
      {
        uint64_t v32 = *(void *)(a1 + 16);
        unint64_t v33 = *(void *)(v32 + 8);
LABEL_49:
        uint64_t v34 = v32 + 16LL * *(void *)(v32 + 24) + 64;
LABEL_53:
        uint64_t v64 = v34;
        if ((v8 & 2) == 0)
        {
          LOBYTE(v6_Block_object_dispose(va, 8) = 0;
          unint64_t v35 = [(id)a1 _indexOfRangeAfterOrContainingIndex:a3];
          unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
          if (v35 == 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_117;
          }
          unint64_t v36 = v35;
          if (v35 >= v33) {
            goto LABEL_117;
          }
          unint64_t v37 = a3 + a4;
          while (1)
          {
            unsigned int v38 = (unint64_t *)(v64 + 16 * v36);
            unint64_t v40 = *v38;
            unint64_t v39 = v38[1];
            unint64_t v41 = v39 + v40;
            if (v39 + v40 >= v37) {
              unint64_t v42 = v37;
            }
            else {
              unint64_t v42 = v39 + v40;
            }
            if (a3 > v40 || v40 >= v37)
            {
              if (v40 > a3 || a3 >= v41) {
                goto LABEL_117;
              }
              unint64_t v45 = v42 - a3;
              unint64_t v40 = a3;
              if (v42 == a3) {
                goto LABEL_117;
              }
            }

            else
            {
              unint64_t v45 = v42 - v40;
              if (v42 == v40) {
                goto LABEL_117;
              }
            }

            if ((v8 & 0x4000000000000000LL) != 0)
            {
              __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
            }

            else if (v40 < v40 + v45)
            {
              while (1)
              {
                if ((v8 & 0x2000000000000000LL) != 0)
                {
                  int v46 = __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
                }

                else
                {
                  __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
                  int v46 = 0;
                }

                if (v46) {
                  break;
                }
                ++v40;
                if (!--v45) {
                  goto LABEL_84;
                }
              }

              unint64_t v14 = v40;
              goto LABEL_117;
            }

  __break(1u);
LABEL_126:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

          if (v119) {
            goto LABEL_229;
          }
LABEL_126:
          v121 = (4 * *(_BYTE *)(v120 + 18) + 8) & 0x3C;
          v118 = ((-15LL << v121) - 1) & v118 | (v122 << v121);
          unint64_t v44 = *(void *)(v120 + 24 + 24 * v122);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          v120 = v44;
          if (!*(_BYTE *)(v44 + 18)) {
            goto LABEL_153;
          }
        }
      }

      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs(v2);
      uint64_t result = swift_unknownObjectRetain();
      v118 = 0LL;
      v119 = v42;
      unint64_t v44 = v114;
LABEL_153:
      v132 = *(unsigned __int16 *)(v44 + 16);
      if (*(_WORD *)(v44 + 16))
      {
        v133 = v119 - 1;
        if (__OFSUB__(v119, 1LL)) {
          goto LABEL_259;
        }
        if (__OFADD__(v133, 1LL)) {
          goto LABEL_260;
        }
        if (v119 <= 0)
        {
          v132 = 0LL;
          goto LABEL_178;
        }

        if ((_DWORD)v132 != 1)
        {
          int v74 = __OFSUB__(v133, 1LL);
          v133 = v119 - 2;
          if (v74) {
            goto LABEL_266;
          }
          if (__OFADD__(v133, 1LL)) {
            goto LABEL_267;
          }
          if (v119 - 1 >= 1)
          {
            if ((_DWORD)v132 != 2)
            {
              v134 = 0LL;
              v135 = v132 - 2;
              if (v133 >= v132 - 3) {
                v136 = v132 - 3;
              }
              else {
                v136 = v119 - 2;
              }
              if (v136 >= v119 + 0x7FFFFFFFFFFFFFFELL) {
                v136 = v119 + 0x7FFFFFFFFFFFFFFELL;
              }
              while (v135 > v136)
              {
                if (v119 + 0x7FFFFFFFFFFFFFFELL == v134) {
                  goto LABEL_257;
                }
                if (v133 == v134)
                {
                  v132 = v119;
                  goto LABEL_178;
                }

                if (v135 == ++v134)
                {
                  v133 -= v134;
                  goto LABEL_173;
                }
              }

        __break(1u);
LABEL_126:
        __break(1u);
        goto LABEL_127;
      }

      if (v5 == 1) {
        goto LABEL_72;
      }
LABEL_68:
      unint64_t v40 = 9LL;
      while (1)
      {
        unint64_t v41 = v40 - 7;
        if (__OFADD__(v40 - 8, 1LL)) {
          break;
        }
        ++v40;
        if (v41 == v5) {
          goto LABEL_72;
        }
      }

      __break(1u);
LABEL_122:
      swift_once();
      goto LABEL_3;
    }

                __break(1u);
                goto LABEL_126;
              }

          v243 = (v213 - 1) & v213;
          v209 = __clz(__rbit64(v213)) + (v242 << 6);
        }

        v210 = *(void *)(v167 + 48);
        v241 = *((void *)v226 + 9) * v209;
        outlined init with copy of ICUNumberFormatter.Signature( v210 + v241,  v207,  type metadata accessor for ICULegacyNumberFormatter.Signature);
        v211 = 8 * v209;
        v240 = *(void *)(*(void *)(v167 + 56) + v211);
        outlined init with take of ICULegacyNumberFormatter.Signature(v207, *(void *)(v194 + 48) + v241);
        *(void *)(*(void *)(v194 + 56) + v211) = v240;
        swift_retain();
      }
    }

  if (v129[3])
  {
    unint64_t v66 = 3LL;
  }

  else if (v129[4])
  {
    unint64_t v66 = 4LL;
  }

  else if (v129[5])
  {
    unint64_t v66 = 5LL;
  }

  else if (v129[6])
  {
    unint64_t v66 = 6LL;
  }

  else if (v129[7])
  {
    unint64_t v66 = 7LL;
  }

  else if (v129[8])
  {
    unint64_t v66 = 8LL;
  }

  else if (v129[9])
  {
    unint64_t v66 = 9LL;
  }

  else if (v129[10])
  {
    unint64_t v66 = 10LL;
  }

  else if (v129[11])
  {
    unint64_t v66 = 11LL;
  }

  else if (v129[12])
  {
    unint64_t v66 = 12LL;
  }

  else
  {
    unint64_t v66 = 0LL;
  }

LABEL_84:
            if (++v36 == v33) {
              goto LABEL_117;
            }
          }
        }

        LOBYTE(v6_Block_object_dispose(va, 8) = 0;
        unint64_t v47 = a3 + a4;
        unint64_t v48 = [(id)a1 _indexOfRangeBeforeOrContainingIndex:a3 + a4 - 1];
        if (v48 > 0x7FFFFFFFFFFFFFFELL)
        {
          unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }

        else
        {
          int64_t v49 = v48;
          unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
          do
          {
            BOOL v50 = (unint64_t *)(v64 + 16 * v49);
            unint64_t v52 = *v50;
            unint64_t v51 = v50[1];
            unint64_t v53 = v51 + v52;
            if (v51 + v52 >= v47) {
              unint64_t v54 = v47;
            }
            else {
              unint64_t v54 = v51 + v52;
            }
            if (a3 > v52 || v52 >= v47)
            {
              if (v52 > a3 || a3 >= v53)
              {
                unint64_t v52 = 0LL;
                unint64_t v57 = 0LL;
              }

              else
              {
                unint64_t v57 = v54 - a3;
                unint64_t v52 = a3;
              }
            }

            else
            {
              unint64_t v57 = v54 - v52;
            }

            if (!v57) {
              break;
            }
            if ((v8 & 0x4000000000000000LL) != 0)
            {
              __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
            }

            else
            {
              unint64_t v58 = v52 + v57;
              while (v52 < v58)
              {
                --v58;
                if ((v8 & 0x2000000000000000LL) != 0)
                {
                  int v59 = __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
                }

                else
                {
                  __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
                  int v59 = 0;
                }

                if (v59)
                {
                  unint64_t v14 = v58;
                  goto LABEL_117;
                }
              }
            }
          }

          while (v49-- > 0);
        }

    outlined retain of LocalePreferences?( (uint64_t)v134,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    unint64_t v44 = v134;
    unint64_t v45 = outlined copy of LocalePreferences?;
LABEL_85:
    outlined retain of LocalePreferences?( (uint64_t)v44,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))v45);
    goto LABEL_37;
  }

  if (!v104)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v134,  (uint64_t)v96,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v134,  (uint64_t)v98,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences(v98);
    outlined retain of LocalePreferences(v96);
    goto LABEL_38;
  }

  uint64_t v25 = *(void *)(*((void *)&v124 + 1) + 16LL);
  if (v25 != v104[2])
  {
    outlined init with take of LocalePreferences?( (uint64_t)v134,  (uint64_t)v98,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v134,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    unint64_t v33 = v98;
LABEL_36:
    outlined retain of LocalePreferences(v33);
LABEL_37:
    LOBYTE(v24) = 0;
    goto LABEL_38;
  }

  uint64_t v70 = v5;
  uint64_t v71 = v12;
  if (!v25 || *((void **)&v124 + 1) == v104) {
    goto LABEL_55;
  }
  if (*(void *)(*((void *)&v124 + 1) + 32LL) != v104[4] || *(void *)(*((void *)&v124 + 1) + 40LL) != v104[5])
  {
    uint64_t v26 = v25;
    uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v25 = v26;
    unint64_t v23 = v87;
    if ((v27 & 1) == 0) {
      goto LABEL_74;
    }
  }

  if (v25 == 1) {
    goto LABEL_55;
  }
  uint64_t result = v23[6];
  if (result != *(void *)(v24 + 48) || v23[7] != *(void *)(v24 + 56))
  {
    pthread_t v29 = v25;
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v25 = v29;
    unint64_t v23 = v87;
    if ((result & 1) == 0)
    {
LABEL_74:
      outlined init with take of LocalePreferences?( (uint64_t)v134,  (uint64_t)v98,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v134,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      uint64_t v34 = v98;
      goto LABEL_42;
    }
  }

  uint64_t v30 = v25 - 2;
  if (v25 == 2) {
    goto LABEL_55;
  }
  unint64_t v31 = (void *)(v24 + 72);
  uint64_t v32 = v23 + 9;
  while (v30)
  {
    uint64_t result = *(v32 - 1);
    if (result != *(v31 - 1) || *v32 != *v31)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        outlined retain of LocalePreferences?( (uint64_t)v134,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        unint64_t v36 = v134;
        unint64_t v37 = outlined copy of LocalePreferences?;
        goto LABEL_54;
      }
    }

    v31 += 2;
    v32 += 2;
    if (!--v30) {
      goto LABEL_55;
    }
  }

  __break(1u);
  return result;
}

          unint64_t v53 = (v56 - 1) & v56;
          BOOL v55 = __clz(__rbit64(v56)) + (v49 << 6);
        }

        unint64_t v58 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v55);
        unint64_t v9 = v58[1];
        unint64_t v94 = *v58;
        uint64_t v95 = v9;
        swift_bridgeObjectRetain();
        int v59 = v92(&v94, a2, v88, v89, v90, v91);
        if (v7)
        {
          swift_release();
          swift_bridgeObjectRelease();
          MEMORY[0x186E20E60](v85, -1LL, -1LL);
          return v9;
        }

        size_t v60 = v59;
        swift_bridgeObjectRelease();
        if ((v60 & 1) != 0)
        {
          *(unint64_t *)((char *)v85 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v55;
          int v20 = __OFADD__(v48++, 1LL);
          if (v20) {
            goto LABEL_147;
          }
        }
      }
    }
  }

  v84 = (uint64_t)&v84;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  unint64_t v87 = (unint64_t *)((char *)&v84 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL));
  bzero(v87, v11);
  v85 = 0LL;
  uint64_t v12 = 0LL;
  unint64_t v13 = v9 + 56;
  unint64_t v14 = 1LL << *(_BYTE *)(v9 + 32);
  unint64_t v15 = -1LL;
  if (v14 < 64) {
    unint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v9 + 56);
  uint64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (v16)
  {
    uint64_t v18 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    uint64_t v19 = v18 | (v12 << 6);
LABEL_21:
    unint64_t v23 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v19);
    unint64_t v9 = v23[1];
    unint64_t v94 = *v23;
    uint64_t v95 = v9;
    swift_bridgeObjectRetain();
    uint64_t v24 = v92(&v94, a2, v88, v89, v90, v91);
    if (v7)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_willThrow();
      return v9;
    }

    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    unint64_t v9 = v93;
    if ((v25 & 1) != 0)
    {
      *(unint64_t *)((char *)v87 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      int v20 = __OFADD__(v85, 1LL);
      v85 = (unint64_t *)((char *)v85 + 1);
      if (v20) {
        goto LABEL_144;
      }
    }
  }

  int v20 = __OFADD__(v12++, 1LL);
  if (v20) {
    goto LABEL_139;
  }
  if (v12 >= v17) {
    goto LABEL_31;
  }
  v21 = *(void *)(v13 + 8 * v12);
  if (v21)
  {
LABEL_20:
    unint64_t v16 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v12 << 6);
    goto LABEL_21;
  }

  BOOL v22 = v12 + 1;
  if (v12 + 1 >= v17) {
    goto LABEL_31;
  }
  v21 = *(void *)(v13 + 8 * v22);
  if (v21) {
    goto LABEL_19;
  }
  BOOL v22 = v12 + 2;
  if (v12 + 2 >= v17) {
    goto LABEL_31;
  }
  v21 = *(void *)(v13 + 8 * v22);
  if (v21) {
    goto LABEL_19;
  }
  BOOL v22 = v12 + 3;
  if (v12 + 3 >= v17) {
    goto LABEL_31;
  }
  v21 = *(void *)(v13 + 8 * v22);
  if (v21) {
    goto LABEL_19;
  }
  BOOL v22 = v12 + 4;
  if (v12 + 4 >= v17) {
    goto LABEL_31;
  }
  v21 = *(void *)(v13 + 8 * v22);
  if (v21)
  {
LABEL_19:
    uint64_t v12 = v22;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      goto LABEL_143;
    }
    if (v12 >= v17) {
      break;
    }
    v21 = *(void *)(v13 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }

      unint64_t v23 = 1;
LABEL_85:
      int v59 = Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)(a5 & 1, v129 & 1, a7 & 1, v39);
      pthread_t v61 = v60;
      unint64_t v62 = specialized Collection.first.getter(v59, v60);
      v140 = (v62 & 0x100000000LL) == 0;
      if ((v62 & 0x100000000LL) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        unint64_t v63 = _StringGuts.validateScalarIndex(_:)(0xFuLL, v59, v61);
        if ((v61 & 0x1000000000000000LL) != 0)
        {
          uint64_t v27 = String.UnicodeScalarView._foreignIndex(after:)();
        }

        else
        {
          uint64_t v64 = v63 >> 16;
          if ((v61 & 0x2000000000000000LL) != 0)
          {
            v141 = v59;
            v142 = v61 & 0xFFFFFFFFFFFFFFLL;
            unint64_t v66 = *((unsigned __int8 *)&v141 + v64);
          }

          else
          {
            if ((v59 & 0x1000000000000000LL) != 0) {
              int v65 = (v61 & 0xFFFFFFFFFFFFFFFLL) + 32;
            }
            else {
              int v65 = _StringObject.sharedUTF8.getter();
            }
            unint64_t v66 = *(unsigned __int8 *)(v65 + v64);
          }

          char v67 = (char)v66;
          uint64_t v68 = __clz(v66 ^ 0xFF) - 24;
          if (v67 >= 0) {
            LOBYTE(v6_Block_object_dispose(va, 8) = 1;
          }
          uint64_t v27 = ((v64 + v68) << 16) | 5;
        }

        uint64_t v26 = v61;
        uint64_t v24 = v59;
      }

      unsigned int v69 = specialized Collection.first.getter(v59, v61);
      swift_bridgeObjectRelease();
      if ((v69 & 0x100000000LL) != 0)
      {
        uint64_t v17 = a12;
        unint64_t v16 = a13;
LABEL_211:
        if (v137 != v139)
        {
          uint64_t v19 = a10;
          uint64_t v18 = a11;
          int v20 = v124;
          goto LABEL_202;
        }

        uint64_t v19 = a10;
        uint64_t v18 = a11;
        int v20 = v124;
        if (!v23) {
          goto LABEL_240;
        }
        goto LABEL_213;
      }

      uint64_t v17 = a12;
      unint64_t v16 = a13;
      if ((_DWORD)v31 != (_DWORD)v69) {
        goto LABEL_211;
      }
LABEL_98:
      if ((v23 & 1) == 0)
      {
        if (v140) {
          goto LABEL_154;
        }
        goto LABEL_161;
      }

      if (v140) {
        goto LABEL_100;
      }
      unint64_t v47 = 0;
      if ((v28 & 0x2000000000000000LL) != 0)
      {
LABEL_151:
        unint64_t v93 = HIBYTE(v28) & 0xF;
        goto LABEL_152;
      }

    uint64_t v10 = v60;
    goto LABEL_85;
  }

  unint64_t v36 = __OFSUB__(v56, *(void *)&v43);
  unint64_t v44 = v56 - *(void *)&v43;
  if (v36)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }

  if (v44 == 1)
  {
    unint64_t v58 = v15;
    int v59 = v14;
    v73 = 4;
    unint64_t v57 = v10;
    *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)( (Foundation::Calendar::Component)&v73,  1LL,  v42,  (Swift::Bool)&v57);
    if ((v61 & 1) != 0) {
      goto LABEL_117;
    }
    goto LABEL_84;
  }

  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
  return result;
}

    v306 = 2LL;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    v151 = v285;
    v152 = v299;
    static Duration./ infix<A>(_:_:)();
    v306 = 2LL;
    v153 = static Duration.* infix<A>(_:_:)();
    MEMORY[0x186E1D11C](v151, v152, v153, v154);
    static Duration.zero.getter();
    static Duration.== infix(_:_:)();
    static Duration.== infix(_:_:)();
    a2 = v293;
    v150(v304, v292);
LABEL_85:
    unint64_t v45 = v294;
    v155 = v303;
    if ((_DWORD)v303 == (_DWORD)v294) {
      goto LABEL_90;
    }
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v156 = static Duration.zero.getter();
      MEMORY[0x186E1D11C](v156);
    }

    uint64_t result = static Duration.< infix(_:_:)();
    if ((result & 1) != 0) {
      goto LABEL_89;
    }
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v173 = static Duration.zero.getter();
      MEMORY[0x186E1D11C](v173);
    }

    if ((static Duration.== infix(_:_:)() & 1) != 0)
    {
      static Duration.zero.getter();
      uint64_t result = static Duration.< infix(_:_:)();
      if (((result ^ v275) & 1) == 0)
      {
LABEL_89:
        if (v301 == 1)
        {
LABEL_90:
          uint64_t result = *(void *)(v305 + 8);
          v157 = *(_BYTE *)(v290 + 8);
          if (v155 < 5)
          {
            static Duration.interval(fractionalSecondsLength:)(result);
            v306 = qword_1837C3E98[(void)v155];
            lazy protocol witness table accessor for type Int64 and conformance Int64();
            v160 = static Duration.* infix<A>(_:_:)();
            v162 = v163;
            if ((v157 & 1) == 0) {
              goto LABEL_99;
            }
          }

          else
          {
            v158 = 3LL * ((_BYTE)v155 - 5) + 3;
            v159 = v158 ^ 0x7FFFFFFFFFFFFFFFLL;
            if ((v158 ^ 0x7FFFFFFFFFFFFFFFLL) >= result) {
              v159 = *(void *)(v305 + 8);
            }
            uint64_t result = v158 + v159;
            if (__OFADD__(v158, v159)) {
              goto LABEL_198;
            }
            uint64_t result = static Duration.interval(fractionalSecondsLength:)(result);
            v160 = result;
            v162 = v161;
            if ((v157 & 1) == 0)
            {
LABEL_99:
              v164 = static Duration.* infix(_:_:)();
              v166 = v165;
              if ((static Duration.< infix(_:_:)() & 1) == 0)
              {
                v160 = v164;
                v162 = v166;
              }
            }
          }
        }

        else
        {
          if (v155 < 5)
          {
            static Duration.interval(fractionalSecondsLength:)(0LL);
            v306 = qword_1837C3E98[(void)v155];
            lazy protocol witness table accessor for type Int64 and conformance Int64();
            v174 = static Duration.* infix<A>(_:_:)();
          }

          else
          {
            v174 = static Duration.interval(fractionalSecondsLength:)(3LL * ((_BYTE)v155 - 5) + 3);
          }

          v160 = v174;
          v162 = v175;
        }

        if ((v277 & 1) != 0
          && (static Duration.zero.getter(), ((static Duration.< infix(_:_:)() ^ v275) & 1) == 0))
        {
          static Duration.zero.getter();
          if ((static Duration.< infix(_:_:)() & 1) != 0)
          {
            v178 = static Duration.zero.getter();
            MEMORY[0x186E1D11C](v178);
          }

          v179 = (_DWORD)v303 != v45;
          v306 = 2LL;
          lazy protocol witness table accessor for type Int and conformance Int();
          v180 = static Duration./ infix<A>(_:_:)();
          MEMORY[0x186E1D110](v296, v295, v180, v181);
          v182 = v179 & ~static Duration.< infix(_:_:)();
          if (v301 != 1) {
            v182 = 0;
          }
          v280 = v182;
        }

        else
        {
          v280 = 0;
        }

        static Duration.zero.getter();
        v183 = (_BYTE *)v160;
        v184 = v162;
        if ((static Duration.< infix(_:_:)() & 1) != 0)
        {
          v185 = static Duration.zero.getter();
          v183 = (_BYTE *)MEMORY[0x186E1D11C](v185);
          v184 = v186;
        }

        static Duration.zero.getter();
        v187 = v75;
        v188 = v127;
        if ((static Duration.< infix(_:_:)() & 1) != 0)
        {
          v189 = static Duration.zero.getter();
          v187 = MEMORY[0x186E1D11C](v189);
          v188 = v190;
        }

        v281 = v162;
        v282 = v160;
        v191 = Duration.components.getter();
        static Duration.zero.getter();
        if ((static Duration.< infix(_:_:)() & 1) != 0)
        {
          v192 = static Duration.zero.getter();
          MEMORY[0x186E1D11C](v192);
        }

        v304 = v184;
        uint64_t result = Duration.components.getter();
        v194 = v193;
        if (result)
        {
          if (v193)
          {
            if ((static Duration.< infix(_:_:)() & 1) != 0)
            {
              v195 = static Duration.zero.getter();
              v197 = v196;
              v198 = static Duration.zero.getter();
              goto LABEL_150;
            }

            uint64_t result = static Duration./ infix(_:_:)();
            if ((~*(void *)&v241 & 0x7FF0000000000000LL) == 0) {
              goto LABEL_207;
            }
            if (v241 <= -1.0) {
              goto LABEL_208;
            }
            if (v241 >= 1.84467441e19) {
              goto LABEL_209;
            }
            v303 = v183;
            v242 = (unint64_t)v241;
            v306 = (unint64_t)v241;
            lazy protocol witness table accessor for type UInt64 and conformance UInt64();
            v243 = static Duration.* infix<A>(_:_:)();
            MEMORY[0x186E1D11C](v187, v188, v243, v244);
            uint64_t result = static Duration./ infix(_:_:)();
            if ((~*(void *)&v245 & 0x7FF0000000000000LL) == 0) {
              goto LABEL_210;
            }
            if (v245 <= -9.22337204e18) {
              goto LABEL_211;
            }
            if (v245 >= 9.22337204e18) {
              goto LABEL_212;
            }
            v246 = (uint64_t)v245;
            v299 = (uint64_t)v245;
            Duration.init(secondsComponent:attosecondsComponent:)();
            v306 = v242;
            v296 = static Duration.* infix<A>(_:_:)();
            v248 = v247;
            Duration.init(secondsComponent:attosecondsComponent:)();
            v306 = v246;
            lazy protocol witness table accessor for type Int64 and conformance Int64();
            v249 = static Duration.* infix<A>(_:_:)();
            v251 = MEMORY[0x186E1D110](v296, v248, v249, v250);
            v197 = v252;
            v306 = v242;
            v253 = static Duration.* infix<A>(_:_:)();
            v255 = v254;
            v306 = v299;
            v256 = static Duration.* infix<A>(_:_:)();
            v258 = v257;
            v259 = v255;
            v195 = v251;
            v204 = MEMORY[0x186E1D110](v253, v259, v256, v258);
            v205 = v260;
            v183 = v303;
LABEL_151:
            static Duration.zero.getter();
            v206 = static Duration.< infix(_:_:)() & 1;
            static Duration.zero.getter();
            if (v206 == (static Duration.< infix(_:_:)() & 1))
            {
              v210 = v195;
            }

            else
            {
              v207 = static Duration.zero.getter();
              v204 = MEMORY[0x186E1D11C](v207);
              v205 = v208;
              v209 = static Duration.zero.getter();
              v210 = MEMORY[0x186E1D11C](v209);
              v197 = v211;
            }

            static Duration.zero.getter();
            v212 = static Duration.< infix(_:_:)();
            v213 = v204;
            v214 = v205;
            v215 = v304;
            if ((v212 & 1) != 0)
            {
              v216 = static Duration.zero.getter();
              v213 = MEMORY[0x186E1D11C](v216);
              v214 = v217;
            }

            static Duration.zero.getter();
            v218 = static Duration.< infix(_:_:)();
            v219 = v75;
            v220 = v127;
            if ((v218 & 1) != 0)
            {
              v221 = static Duration.zero.getter();
              v219 = MEMORY[0x186E1D11C](v221);
              v220 = v222;
            }

            MEMORY[0x186E1D11C](v213, v214, v219, v220);
            static Duration.zero.getter();
            if ((static Duration.< infix(_:_:)() & 1) != 0)
            {
              v223 = static Duration.zero.getter();
              MEMORY[0x186E1D11C](v223);
            }

            static Duration.zero.getter();
            if ((static Duration.== infix(_:_:)() & 1) != 0)
            {
              v306 = 2LL;
              lazy protocol witness table accessor for type Int64 and conformance Int64();
              static Duration./ infix<A>(_:_:)();
              v306 = 2LL;
              v224 = static Duration.* infix<A>(_:_:)();
              MEMORY[0x186E1D11C](v210, v197, v224, v225);
              static Duration.zero.getter();
              static Duration.== infix(_:_:)();
              v204 = v75;
              v205 = v127;
            }

            else
            {
              static Duration.zero.getter();
              if ((static Duration.< infix(_:_:)() & 1) != 0)
              {
                v226 = static Duration.zero.getter();
                v183 = (_BYTE *)MEMORY[0x186E1D11C](v226);
                v215 = v227;
              }

              v228 = MEMORY[0x186E1D110](v204, v205, v183, v215);
              v230 = v229;
              static Duration.zero.getter();
              if ((static Duration.< infix(_:_:)() & 1) != 0)
              {
                v231 = static Duration.zero.getter();
                v228 = MEMORY[0x186E1D11C](v231);
                v230 = v232;
              }

              static Duration.zero.getter();
              if ((static Duration.< infix(_:_:)() & 1) != 0)
              {
                v233 = static Duration.zero.getter();
                double v75 = MEMORY[0x186E1D11C](v233);
                v127 = v234;
              }

              MEMORY[0x186E1D11C](v228, v230, v75, v127);
              static Duration.zero.getter();
              if ((static Duration.< infix(_:_:)() & 1) != 0)
              {
                v235 = static Duration.zero.getter();
                MEMORY[0x186E1D11C](v235);
              }

              v306 = 2LL;
              lazy protocol witness table accessor for type Int64 and conformance Int64();
              static Duration./ infix<A>(_:_:)();
              v306 = 2LL;
              v236 = static Duration.* infix<A>(_:_:)();
              MEMORY[0x186E1D11C](v210, v197, v236, v237);
              static Duration.zero.getter();
              static Duration.== infix(_:_:)();
              static Duration.== infix(_:_:)();
            }

            a1 = v302;
            v238 = (uint64_t)v278;
            unint64_t v40 = v289;
            MEMORY[0x186E1D134](v307, v204, v205);
            static Duration.zero.getter();
            v239 = static Duration.== infix(_:_:)();
            outlined init with copy of ICUNumberFormatter.Signature( v284,  v238,  type metadata accessor for Duration.UnitsFormatStyle);
            a2 = v293;
            unint64_t v45 = v294;
            if ((v239 & 1) != 0)
            {
              v240 = *(void *)(v238 + 48);
              outlined destroy of ICUNumberFormatter.Signature( v238,  type metadata accessor for Duration.UnitsFormatStyle);
              int v46 = v297;
              if (v240 < 1)
              {
                v279 = 0LL;
LABEL_176:
                uint64_t result = v288;
                unint64_t v47 = v298;
                goto LABEL_16;
              }
            }

            else
            {
              outlined destroy of ICUNumberFormatter.Signature( v238,  type metadata accessor for Duration.UnitsFormatStyle);
              int v46 = v297;
            }

            v279 = 0LL;
            v301 = v291;
            goto LABEL_176;
          }

          v201 = result;
          if (v191 == 0x8000000000000000LL && result == -1) {
            goto LABEL_214;
          }
          v202 = v191 / result;
          v195 = Duration.init(secondsComponent:attosecondsComponent:)();
          uint64_t result = v201 * v202;
          v197 = v203;
          v198 = Duration.init(secondsComponent:attosecondsComponent:)();
        }

        else
        {
          v306 = v193;
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          v195 = static Duration./ infix<A>(_:_:)();
          v197 = v200;
          v306 = v194;
          v198 = static Duration.* infix<A>(_:_:)();
        }

  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
}

        __break(1u);
        goto LABEL_85;
      }

      uint64_t v19 = *(void *)(v106 + 8 * v20);
      if (!v19)
      {
        while (1)
        {
          unint64_t v14 = v20 + 1;
          if (__OFADD__(v20, 1LL)) {
            goto LABEL_83;
          }
          uint64_t v19 = *(void *)(v106 + 8 * v14);
          ++v20;
          if (v19) {
            goto LABEL_26;
          }
        }
      }

      unint64_t v14 = v20;
LABEL_26:
      unint64_t v13 = (v19 - 1) & v19;
      uint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
      v21 = 16 * v17;
      BOOL v22 = (uint64_t *)(*(void *)(v10 + 48) + v21);
      unint64_t v23 = *v22;
      uint64_t v24 = v22[1];
      uint64_t v25 = *(void *)(v10 + 56) + v21;
      id v5 = *(void *)v25;
      uint64_t v26 = *(_BYTE *)(v25 + 8);
      uint64_t v27 = *v22 == a2 && v24 == (void)v8;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if ((v26 & 1) != 0) {
          goto LABEL_124;
        }
        if (v5 != a1)
        {
          _StringGuts.grow(_:)(57LL);
          v94._countAndFlagsBits = 0xD000000000000014LL;
          v94._object = (void *)0x80000001839CF3A0LL;
          String.append(_:)(v94);
          v95._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v95);
          swift_bridgeObjectRelease();
          v96._countAndFlagsBits = 0x2720646E612027LL;
          v96._object = (void *)0xE700000000000000LL;
          String.append(_:)(v96);
          v97._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v97);
          swift_bridgeObjectRelease();
          v98._object = (void *)0x80000001839CF3C0LL;
          v98._countAndFlagsBits = 0xD000000000000017LL;
          String.append(_:)(v98);
          v99._countAndFlagsBits = a2;
          v99._object = v8;
          String.append(_:)(v99);
          v100._countAndFlagsBits = 39LL;
          v100._object = (void *)0xE100000000000000LL;
          String.append(_:)(v100);
          goto LABEL_126;
        }

  __break(1u);
  return result;
}

              int64_t v49 = v118;
              if (v118 == 0x7FFFFFFFFFFFFFFFLL) {
                int64_t v49 = 0LL;
              }
              *(void *)&__src[4] = v49;
              BYTE8(__src[4]) = v118 == 0x7FFFFFFFFFFFFFFFLL;
              if ((v12 & 8) == 0)
              {
LABEL_54:
                if ((v12 & 0x40000) == 0) {
                  goto LABEL_55;
                }
                goto LABEL_90;
              }

  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v74, v72);
  unint64_t v83 = v87;
  v84 = v88;
  swift_unknownObjectRelease();
LABEL_85:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Dictionary<>.== infix(_:_:)(v83, v76) & 1) != 0)
  {
    unint64_t v89 = specialized static Set.== infix(_:_:)(v84, v78);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v89 & 1) != 0)
    {
      specialized Rope.update<A>(at:by:)(&v101, v96, v77);
      unint64_t v90 = *v96;
      unint64_t v91 = v96[1];
      unint64_t v92 = v96[2];
      unint64_t v93 = v96[3];
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v101, v90, v91, v92, v93);
      swift_unknownObjectRelease();
      specialized Rope._remove(at:)((uint64_t)v100, v101, *((unint64_t *)&v101 + 1));
    }

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease_n();
  }

          unint64_t v44 = (v49 - 1) & v49;
          unint64_t v47 = __clz(__rbit64(v49)) + (v7 << 6);
        }

        unint64_t v51 = (void *)(*(void *)(v41 + 48) + 16 * v47);
        unint64_t v52 = v51[1];
        if (v52) {
          break;
        }
        swift_bridgeObjectRelease();
      }

      unint64_t v53 = *v51 == a1 && v52 == a2;
    }

    while (!v53 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v185 = 0LL;
    v183 = 0u;
    v184 = 0u;
    v181 = 0u;
    v182 = 0u;
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v181,  (uint64_t)&v176,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (*((void *)&v177 + 1)) {
      break;
    }
    outlined destroy of Any?( (uint64_t)&v176,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v7 = (uint64_t)v164;
    swift_bridgeObjectRetain();
    uint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v5);
    unint64_t v66 = v65;
    swift_bridgeObjectRelease();
    if ((v66 & 1) == 0)
    {
      v180 = 0LL;
      v178 = 0u;
      v179 = 0u;
      v176 = 0u;
      v177 = 0u;
      pthread_t v29 = a1;
      unint64_t v8 = v163;
      goto LABEL_108;
    }

    char v67 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v68 = *v164;
    *v164 = 0x8000000000000000LL;
    if ((v67 & 1) != 0)
    {
      unsigned int v69 = v68;
      goto LABEL_99;
    }

    v152 = v64;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
    v112 = static _DictionaryStorage.copy(original:)();
    unsigned int v69 = v112;
    if (!*(void *)(v68 + 16)) {
      goto LABEL_172;
    }
    v113 = (char *)(v112 + 64);
    v156 = (char *)(v68 + 64);
    v114 = (unint64_t)((1LL << *(_BYTE *)(v69 + 32)) + 63) >> 6;
    if (v69 != v68 || v113 >= &v156[8 * v114]) {
      memmove(v113, v156, 8 * v114);
    }
    v158 = 0LL;
    *(void *)(v69 + 16) = *(void *)(v68 + 16);
    v115 = 1LL << *(_BYTE *)(v68 + 32);
    if (v115 < 64) {
      v116 = ~(-1LL << v115);
    }
    else {
      v116 = -1LL;
    }
    v162 = v116 & *(void *)(v68 + 64);
    __srca = (void *)((unint64_t)(v115 + 63) >> 6);
    while (1)
    {
      if (v162)
      {
        v117 = __clz(__rbit64(v162));
        v162 &= v162 - 1;
        v118 = v117 | (v158 << 6);
        goto LABEL_150;
      }

      v128 = v158 + 1;
      if (__OFADD__(v158, 1LL)) {
        goto LABEL_214;
      }
      v129 = *(void *)&v156[8 * v128];
      v130 = v158 + 1;
      if (!v129)
      {
        v130 = v158 + 2;
        v129 = *(void *)&v156[8 * v130];
        if (!v129)
        {
          v130 = v158 + 3;
          v129 = *(void *)&v156[8 * v130];
          if (!v129)
          {
            v130 = v158 + 4;
            v129 = *(void *)&v156[8 * v130];
            if (!v129)
            {
              v130 = v158 + 5;
              v129 = *(void *)&v156[8 * v130];
              if (!v129)
              {
                v130 = v158 + 6;
                v129 = *(void *)&v156[8 * v130];
                if (!v129) {
                  break;
                }
              }
            }
          }
        }
      }

      __break(1u);
    }

    uint64_t v26 = (void *)swift_allocObject();
    v26[5] = &type metadata for _CodingKey;
    v26[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v27 = swift_allocObject();
    v26[2] = v27;
    pthread_t v29 = a7;
    unint64_t v28 = a8;
    *(void *)(v27 + 16) = a6;
    *(void *)(v27 + 24) = a7;
    *(void *)(v27 + 32) = a8;
    *(_BYTE *)(v27 + 40) = a9;
    v26[7] = a5;
    if (a5 >> 62)
    {
      if (a5 >> 62 != 1)
      {
        unint64_t v40 = 1LL;
LABEL_25:
        v26[8] = v40;
        a5 = (unint64_t)v26;
        goto LABEL_26;
      }

      uint64_t v30 = (uint64_t *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v30 = (uint64_t *)(a5 + 64);
    }

    unint64_t v39 = *v30;
    swift_retain();
    unint64_t v40 = v39 + 1;
    if (__OFADD__(v39, 1LL))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }

    goto LABEL_25;
  }

  if (a2 | a1 || a3 != 160)
  {
    if (dynamic_cast_existential_2_conditional(a4))
    {
LABEL_16:
      type metadata accessor for DecodingError();
      swift_allocError();
      NSNumber *v31 = v105;
      if (a9 == -1)
      {
        _CodingPathNode.path.getter(a5);
      }

      else
      {
        outlined copy of _CodingKey(a6, a7, a8, a9);
        uint64_t v32 = _CodingPathNode.path.getter(a5);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v34 = swift_allocObject();
        *(void *)(inited + 32) = v34;
        *(void *)(v34 + 16) = a6;
        *(void *)(v34 + 24) = a7;
        *(void *)(v34 + 32) = a8;
        *(_BYTE *)(v34 + 40) = a9;
        v121 = v32;
        specialized Array.append<A>(contentsOf:)(inited);
      }

      _StringGuts.grow(_:)(43LL);
      swift_bridgeObjectRelease();
      v121 = 0xD000000000000035LL;
      v122 = 0x80000001839D2CE0LL;
      __asm { BR              X9 }
    }

    __break(1u);
    goto LABEL_85;
  }

  v177 = type metadata accessor for DecodingError();
  v180 = swift_allocError();
  unint64_t v37 = v36;
  unsigned int v38 = v171;
  *unint64_t v36 = v172;
  unint64_t v39 = v169;
  unint64_t v40 = *(void (**)(char *, int64_t, uint64_t))(v169 + 16);
  v40(v35, v168, v38);
  v40(v32, (int64_t)v35, v38);
  unint64_t v41 = v170;
  unint64_t v42 = v175;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v32, 1LL, v175) == 1)
  {
    int v43 = *(void (**)(char *, uint64_t))(v39 + 8);
    v43(v32, v38);
    _CodingPathNode.path.getter(v178);
    v43(v35, v38);
  }

  else
  {
    v73 = *(void (**)(Swift::Int, char *, uint64_t))(v41 + 32);
    v176 = v37;
    int v74 = v179;
    v73(v179, v32, v42);
    double v75 = _CodingPathNode.path.getter(v178);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    v76 = v41;
    unint64_t v77 = swift_initStackObject();
    *(_OWORD *)(v77 + 16) = xmmword_183720D90;
    unint64_t v78 = v165;
    *(void *)(v77 + 56) = v42;
    *(void *)(v77 + 64) = v78;
    unint64_t v79 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v77 + 32));
    (*(void (**)(uint64_t *, Swift::Int, uint64_t))(v76 + 16))(v79, v74, v42);
    v189 = v75;
    specialized Array.append<A>(contentsOf:)(v77);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v35, v38);
    v80 = v74;
    unint64_t v37 = v176;
    (*(void (**)(Swift::Int, uint64_t))(v76 + 8))(v80, v42);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  v189 = 0LL;
  v190 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(55LL);
  v81._countAndFlagsBits = 0xD000000000000019LL;
  v81._object = (void *)0x80000001839D2D40LL;
  String.append(_:)(v81);
  v82._object = (void *)0x80000001839D2E40LL;
  v82._countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v82);
  v83._countAndFlagsBits = 0xD00000000000001CLL;
  v83._object = (void *)0x80000001839D2D60LL;
  String.append(_:)(v83);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void))(*(void *)(v177 - 8) + 104LL))(v37, *MEMORY[0x189619368]);
  return swift_willThrow();
}

          unint64_t v57 = v15 < growingTo && clear || v14;
          if (v15 >= growingTo || !clear || v14) {
            goto LABEL_93;
          }
          goto LABEL_91;
        }

        if (v15)
        {
          if (growingTo == 0x8000000000000000LL && v15 == -1) {
            goto LABEL_101;
          }
          unint64_t v16 = growingTo / v15 > 3;
          if (growingTo / v15 <= 3 || !clear || v13 <= 0x20000) {
            goto LABEL_56;
          }
        }

        else if (!clear || v13 <= 0x20000)
        {
          unint64_t v16 = 1;
LABEL_56:
          unint64_t v37 = (void (**)(uint64_t, uint64_t))(object + 6);
          if (object[6])
          {
            LODWORD(v62) = 0;
            _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
            unsigned int v38 = (char *)malloc_type_calloc(1uLL, v13, (unint64_t)v62 << 32);
            if (v38)
            {
              unint64_t v39 = object[2];
              if (!v39)
              {
LABEL_106:
                __break(1u);
                goto LABEL_107;
              }

              uint64_t v27 = v38;
              specialized static __DataStorage.move(_:_:_:)((vm_address_t)v38, v39, v15);
              unint64_t v40 = object[2];
              if (v40)
              {
                unint64_t v41 = *v37;
                if (*v37)
                {
                  pthread_t v61 = object[3];
                  swift_retain();
                  v41(v40, v61);
                  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v41);
                }

                else
                {
                  free((void *)object[2]);
                }
              }

              unint64_t v58 = object[6];
              *unint64_t v37 = 0LL;
              object[7] = 0LL;
              outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v58);
              goto LABEL_89;
            }
          }

          else
          {
            unint64_t v42 = (void *)object[2];
            if (!v42)
            {
LABEL_107:
              __break(1u);
              goto LABEL_108;
            }

            LODWORD(v62) = 0;
            _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
            uint64_t v27 = (char *)malloc_type_realloc(v42, v13, (unint64_t)v62 << 32);
            if (v27)
            {
LABEL_89:
              unint64_t v57 = 0;
              if (v15 >= growingTo || !clear) {
                goto LABEL_93;
              }
LABEL_91:
              if (!__OFSUB__(growingTo, v15))
              {
                bzero(&v27[v15], growingTo - v15);
                unint64_t v57 = 0;
LABEL_93:
                object[2] = v27;
                object[4] = v13;
                unint64_t v52 = (v57 & 1) == 0;
                goto LABEL_94;
              }

              goto LABEL_100;
            }
          }

          int v43 = malloc_good_size(growingTo);
          unint64_t v13 = v43;
          if (clear && v43 > 0x20000 && v16)
          {
            LODWORD(v62) = 0;
            _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
            unint64_t v44 = (char *)malloc_type_calloc(1uLL, v13, (unint64_t)v62 << 32);
            if (v44)
            {
              unint64_t v45 = object[2];
              if (v45)
              {
                uint64_t v27 = v44;
                specialized static __DataStorage.move(_:_:_:)((vm_address_t)v44, v45, v15);
                int v46 = object[2];
                if (v46)
                {
                  unint64_t v47 = *v37;
                  if (*v37)
                  {
                    unint64_t v48 = object[3];
                    swift_retain();
                    v47(v46, v48);
                    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v47);
                  }

                  else
                  {
                    free((void *)object[2]);
                  }
                }

                int v59 = object[6];
                *unint64_t v37 = 0LL;
                object[7] = 0LL;
                outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v59);
                unint64_t v57 = 1;
                goto LABEL_93;
              }

    swift_bridgeObjectRelease();
    v199 = 0;
    i = 876LL;
    goto LABEL_235;
  }

  swift_bridgeObjectRetain();
  unint64_t v58 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v50, v23);
  swift_bridgeObjectRelease();
  if ((v58 & 1) == 0) {
    goto LABEL_84;
  }
LABEL_91:
  swift_bridgeObjectRetain();
  pthread_t v61 = swift_bridgeObjectRelease();
  *(void *)&v209[56] = v50;
  *(void *)&v209[64] = v23;
  LOBYTE(v211) = 37;
  MEMORY[0x1895F8858](v61);
  i = (uint64_t)&v211;
  swift_bridgeObjectRetain();
  unint64_t v62 = specialized Sequence.contains(where:)( (uint64_t (*)(void *))_sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0,  (uint64_t)v197,  v50,  v23);
  swift_bridgeObjectRelease_n();
  v210[56] = v62 & 1;
  id v4 = (unint64_t)&v208;
LABEL_92:
  if ((v8[144] & 1) != 0) {
    goto LABEL_100;
  }
  unint64_t v63 = String.subscript.getter();
  char v67 = v66;
  if ((v63 ^ v64) >> 14)
  {
    uint64_t v68 = v63;
    unsigned int v69 = v64;
    uint64_t v70 = v65;
    v202 = (__int128 *)_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v63,  v64,  v65,  v66,  10LL);
    if ((v71 & 0x100) != 0)
    {
      v73 = specialized _parseInteger<A, B>(ascii:radix:)(v68, v69, v70, v67, 10LL);
      double v75 = v74;
      swift_bridgeObjectRelease();
      id v5 = &v211;
      id v4 = (unint64_t)&v208;
      if ((v75 & 1) == 0)
      {
LABEL_98:
        BYTE8(v20_Block_object_dispose(va, 8) = 0;
        BYTE13(v20_Block_object_dispose(va, 8) = 0;
        if (v73 < 0) {
          goto LABEL_236;
        }
        *(void *)&v209[72] = v73;
        v210[0] = 0;
      }
    }

    else
    {
      uint64_t v72 = v71;
      swift_bridgeObjectRelease();
      id v5 = &v211;
      id v4 = (unint64_t)&v208;
      if ((v72 & 1) == 0)
      {
        v73 = (uint64_t)v202;
        goto LABEL_98;
      }
    }

LABEL_117:
        if ((*(_BYTE *)(a1 + 8) & 1) == 0)
        {
          pthread_t v61 = pthread_self();
          unint64_t v62 = (unint64_t *)(*(void *)(a1 + 16) + 56LL);
          while (1)
          {
            unint64_t v63 = __ldaxr(v62);
            if ((pthread_t)v63 != v61) {
              break;
            }
            if (!__stlxr(0LL, v62)) {
              goto LABEL_123;
            }
          }

          __clrex();
        }

                          unint64_t v63 = (v70 - 1) & v70;
                          unsigned int v69 = __clz(__rbit64(v70)) + (v65 << 6);
                        }

                        uint64_t v72 = (uint64_t *)(*(void *)(v93 + 48) + 16 * v69);
                        v73 = *v72;
                        int v74 = v72[1];
                        Hasher.init(_seed:)();
                        swift_bridgeObjectRetain();
                        String.hash(into:)();
                        double v75 = Hasher._finalize()();
                        v76 = -1LL << *(_BYTE *)(v62 + 32);
                        unint64_t v77 = v75 & ~v76;
                        unint64_t v78 = v77 >> 6;
                        if (((-1LL << v77) & ~*(void *)(v64 + 8 * (v77 >> 6))) != 0)
                        {
                          unint64_t v66 = __clz(__rbit64((-1LL << v77) & ~*(void *)(v64 + 8 * (v77 >> 6)))) | v77 & 0x7FFFFFFFFFFFFFC0LL;
                        }

                        else
                        {
                          unint64_t v79 = 0;
                          v80 = (unint64_t)(63 - v76) >> 6;
                          do
                          {
                            if (++v78 == v80 && (v79 & 1) != 0) {
                              goto LABEL_140;
                            }
                            unint64_t v81 = v78 == v80;
                            if (v78 == v80) {
                              unint64_t v78 = 0LL;
                            }
                            v79 |= v81;
                            unint64_t v82 = *(void *)(v64 + 8 * v78);
                          }

                          while (v82 == -1);
                          unint64_t v66 = __clz(__rbit64(~v82)) + (v78 << 6);
                        }

                        *(void *)(v64 + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v66;
                        char v67 = (void *)(*(void *)(v62 + 48) + 16 * v66);
                        *char v67 = v73;
                        v67[1] = v74;
                        ++*(void *)(v62 + 16);
                        if (!--v61) {
                          goto LABEL_135;
                        }
                      }
                    }

                    MEMORY[0x186E20E60](v85, -1LL, -1LL);
                    return v9;
                  }
                }
              }
            }

            int64_t v49 = v57;
          }

  os_unfair_lock_unlock((os_unfair_lock_t)v20);
  __break(1u);
  os_unfair_lock_unlock(a5);
  __break(1u);
}

        swift_bridgeObjectRelease_n();
        goto LABEL_118;
      }

      int v20 = (unint64_t)v126;
      unint64_t v16 = v21;
    }

    if (v16 < 0)
    {
      uint64_t v24 = 0LL;
    }

    else
    {
      unint64_t v23 = (unint64_t)v19 >= 0x7FFFFFFF ? 0x7FFFFFFFLL : v19;
      uint64_t v24 = v19 < (unint64_t)v125 ? v23 : v124;
    }

    while (1)
    {
      if (!v20) {
        goto LABEL_23;
      }
      BOOL v22 = (id)v20;
      if (objc_msgSend(v22, sel_isCancelled))
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        unint64_t v31 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v32 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v17 = objc_msgSend(v31, sel_initWithDomain_code_userInfo_, v32, 3072, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v33 = objc_msgSend(v17, sel_domain);
        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        unint64_t v36 = v35;

        if (v34 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v36 != v37)
        {
          unint64_t v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v39 & 1) == 0)
          {
            __break(1u);
LABEL_55:
            unint64_t v40 = 263LL;
            switch((int)v17)
            {
              case 1:
              case 13:
                unint64_t v40 = 257LL;
                goto LABEL_95;
              case 2:
                unint64_t v40 = 260LL;
                goto LABEL_95;
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 14:
              case 15:
              case 16:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 25:
              case 26:
                goto LABEL_64;
              case 27:
                goto LABEL_95;
              default:
                if ((_DWORD)v17 == 63)
                {
                  unint64_t v40 = 258LL;
                }

                else
                {
                  if ((_DWORD)v17 == 102)
                  {
                    unint64_t v44 = 0LL;
                    unint64_t v40 = 256LL;
                    goto LABEL_99;
                  }

        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
        goto LABEL_120;
      }

        unint64_t v48 = v317;
        BOOL v50 = (uint64_t)v310;
        v129 = v309;
        v130 = (uint64_t)v308;
        unint64_t v63 = v307;
LABEL_118:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v63,  v130,  v129,  v122,  1802398028LL,  0xE400000000000000LL,  v48,  (uint64_t)v16,  (void *(*)(void *__return_ptr, void *, uint64_t))&v323,  v50,  v52);
        v152 = v323;
        v153 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( v152,  v48,  (unint64_t)v16,  v50,  v52,  (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

        if ((v153 & 1) == 0) {
          goto LABEL_321;
        }
        goto LABEL_221;
      case 4u:
      case 7u:
      case 0xAu:
        LODWORD(v33) = v16->fts_errno;
        uint64_t v34 = String.init(cString:)();
        unint64_t v16 = v35;
        unint64_t v36 = String.init(cString:)();
        unsigned int v38 = v37;
        swift_bridgeObjectRetain();
        if ((_DWORD)v33 == 63)
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          unint64_t v39 = String._lastPathComponent.getter(v36, v38);
          unint64_t v41 = v40;
          swift_bridgeObjectRelease();
          if ((v41 & 0x1000000000000000LL) != 0)
          {
            unint64_t v42 = String.UTF8View._foreignCount()();
          }

          else if ((v41 & 0x2000000000000000LL) != 0)
          {
            unint64_t v42 = HIBYTE(v41) & 0xF;
          }

          else
          {
            unint64_t v42 = v39 & 0xFFFFFFFFFFFFLL;
          }

          v103 = 3 * v42;
          v317 = v38;
          if (v103 < -1) {
            goto LABEL_328;
          }
          uint64_t v104 = v36;
          v310 = (FTSENT *)v34;
          v105 = v103 + 1;
          if (v103 < 1024 || (unint64_t v42 = swift_stdlib_isStackAllocationSafe(), (v42 & 1) != 0))
          {
            LODWORD(v309) = 63;
            v308 = &v301;
            MEMORY[0x1895F8858](v42);
            unint64_t v33 = (unint64_t)&v301 - v106;
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, v33, v105, 1, v39, v41);
            v108 = v107;
            swift_bridgeObjectRelease();
            if ((v108 & 1) != 0)
            {
              if (v25) {
                goto LABEL_351;
              }
              unint64_t v36 = v104;
              v110 = 0LL;
            }

            else
            {
              v109 = strnlen((const char *)v33, 0x100uLL);
              if (v25) {
                goto LABEL_351;
              }
              v110 = v109;
              unint64_t v36 = v104;
            }

            v115 = v317;
            LODWORD(v33) = v309;
          }

          else
          {
            uint64_t v25 = (const char *)swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v25, v105, 1, v39, v41);
            v117 = v116;
            swift_bridgeObjectRelease();
            unint64_t v36 = v104;
            if ((v117 & 1) != 0)
            {
              v115 = v317;
              if (v7) {
                goto LABEL_352;
              }
              v110 = 0LL;
            }

            else
            {
              if (v25) {
                v110 = strnlen(v25, 0x100uLL);
              }
              else {
                v110 = 0LL;
              }
              v115 = v317;
              if (v7) {
                goto LABEL_352;
              }
            }

            MEMORY[0x186E20E60](v25, -1LL, -1LL);
          }

          swift_bridgeObjectRelease();
          if ((v115 & 0x1000000000000000LL) != 0)
          {
            v157 = String.UTF8View._foreignCount()();
          }

          else if ((v115 & 0x2000000000000000LL) != 0)
          {
            v157 = HIBYTE(v115) & 0xF;
          }

          else
          {
            v157 = v36 & 0xFFFFFFFFFFFFLL;
          }

          v158 = 3 * v157;
          if (v158 < -1) {
            goto LABEL_329;
          }
          v309 = v110;
          v159 = v158 + 1;
          if (v158 < 1024 || (v157 = swift_stdlib_isStackAllocationSafe(), (v157 & 1) != 0))
          {
            MEMORY[0x1895F8858](v157);
            v161 = (char *)&v301 - v160;
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v161, v159, 1, v36, v115);
            v163 = v162;
            swift_bridgeObjectRelease();
            if ((v163 & 1) != 0) {
              v164 = 0LL;
            }
            else {
              v164 = strnlen(v161, 0x401uLL);
            }
            uint64_t v34 = (uint64_t)v310;
          }

          else
          {
            v165 = (const char *)swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v165, v159, 1, v36, v115);
            v167 = v166;
            swift_bridgeObjectRelease();
            if ((v167 & 1) != 0)
            {
              uint64_t v34 = (uint64_t)v310;
              v164 = 0LL;
            }

            else
            {
              if (v165) {
                v164 = strnlen(v165, 0x401uLL);
              }
              else {
                v164 = 0LL;
              }
              uint64_t v34 = (uint64_t)v310;
            }

            MEMORY[0x186E20E60](v165, -1LL, -1LL);
          }

          v307 = (void *)v7;
          swift_bridgeObjectRelease();
          v169 = v309 > 255 || v164 > 1024;
          v170 = !v169;
          if (v169) {
            v171 = v36;
          }
          else {
            v171 = v34;
          }
          v308 = (uint64_t *)v171;
          v310 = v16;
          if (v170) {
            v172 = (uint64_t)v16;
          }
          else {
            v172 = v115;
          }
          v309 = v172;
          swift_bridgeObjectRelease();
          CocoaError.Code.init(fileErrno:reading:)(63, 0);
          v73 = (uint64_t (*)(void))v325;
        }

        else
        {
          CocoaError.Code.init(fileErrno:reading:)(v33, 0);
          v73 = (uint64_t (*)(void))v325;
          if ((_DWORD)v33 == 102)
          {
            int v74 = 0LL;
            double v75 = (unint64_t)v16;
            v76 = v34;
            goto LABEL_171;
          }

          v307 = (void *)v7;
          v317 = v38;
          v310 = v16;
          v309 = (uint64_t)v16;
          v308 = (uint64_t *)v34;
        }

        v173 = v73;
        unint64_t v16 = (FTSENT *)v34;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
          goto LABEL_356;
        }
        v174 = v312;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
        v175 = (int)POSIXErrorCode.rawValue.getter();
        v176 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        v177 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        int v74 = objc_msgSend(v176, sel_initWithDomain_code_userInfo_, v177, v175, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v178 = objc_msgSend(v74, sel_domain);
        v179 = static String._unconditionallyBridgeFromObjectiveC(_:)(v178);
        v181 = v180;

        if (v179 == static String._unconditionallyBridgeFromObjectiveC(_:)(v174) && v181 == v182)
        {
          swift_bridgeObjectRelease_n();
          unint64_t v9 = v315;
          uint64_t v34 = (uint64_t)v16;
        }

        else
        {
          v183 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v9 = v315;
          uint64_t v34 = (uint64_t)v16;
          if ((v183 & 1) == 0) {
            goto LABEL_327;
          }
        }

        unint64_t v16 = v310;
        unsigned int v38 = v317;
        double v75 = v309;
        v76 = (uint64_t)v308;
        v73 = v173;
        uint64_t v7 = (const char *)v307;
LABEL_171:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( v73,  v76,  v75,  v74,  1802398028LL,  0xE400000000000000LL,  v34,  (uint64_t)v16,  (void *(*)(void *__return_ptr, void *, uint64_t))&v323,  v36,  v38);
        v184 = v323;
        v185 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( v184,  v34,  (unint64_t)v16,  v36,  v38,  (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

        if ((v185 & 1) == 0) {
          goto LABEL_321;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 0xCu:
      case 0xDu:
        if (!copyfile(fts_path, v315, 0LL, v311)) {
          goto LABEL_9;
        }
        LODWORD(v33) = MEMORY[0x186E1B0E8]();
        uint64_t v64 = String.init(cString:)();
        unint64_t v66 = v65;
        char v67 = String.init(cString:)();
        unsigned int v69 = v68;
        swift_bridgeObjectRetain();
        v317 = v67;
        if ((_DWORD)v33 == 63)
        {
          LODWORD(v305) = 63;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t v70 = String._lastPathComponent.getter(v67, v69);
          unint64_t v33 = v71;
          swift_bridgeObjectRelease();
          if ((v33 & 0x1000000000000000LL) != 0)
          {
            uint64_t v72 = String.UTF8View._foreignCount()();
          }

          else if ((v33 & 0x2000000000000000LL) != 0)
          {
            uint64_t v72 = HIBYTE(v33) & 0xF;
          }

          else
          {
            uint64_t v72 = v70 & 0xFFFFFFFFFFFFLL;
          }

          v310 = (FTSENT *)v66;
          v134 = 3 * v72;
          if (v134 < -1) {
            goto LABEL_334;
          }
          unint64_t v16 = (FTSENT *)v64;
          v135 = v134 + 1;
          if (v134 < 1024 || (uint64_t v72 = swift_stdlib_isStackAllocationSafe(), (v72 & 1) != 0))
          {
            MEMORY[0x1895F8858](v72);
            v137 = (char *)&v301 - v136;
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v137, v135, 1, v70, v33);
            v139 = v138;
            swift_bridgeObjectRelease();
            if ((v139 & 1) != 0)
            {
              char v67 = v317;
              if (v25)
              {
LABEL_351:
                swift_willThrow();
                __break(1u);
LABEL_352:
                v299 = v25;
LABEL_354:
                MEMORY[0x186E20E60](v299, -1LL, -1LL);
                __break(1u);
LABEL_355:
                swift_willThrow();
                __break(1u);
LABEL_356:
                v323 = 0LL;
                v324 = 0xE000000000000000LL;
                _StringGuts.grow(_:)(22LL);
                swift_bridgeObjectRelease();
                v323 = (id)0xD000000000000014LL;
                v324 = 0x80000001839C9190LL;
                v322 = v33;
                goto LABEL_357;
              }

              uint64_t v64 = (uint64_t)v16;
              v141 = 0LL;
              unint64_t v16 = v310;
            }

            else
            {
              v140 = strnlen(v137, 0x100uLL);
              if (v25) {
                goto LABEL_351;
              }
              uint64_t v64 = (uint64_t)v16;
              unint64_t v16 = v310;
              char v67 = v317;
              v141 = v140;
            }
          }

          else
          {
            v154 = (const char *)swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v154, v135, 1, v70, v33);
            v156 = v155;
            swift_bridgeObjectRelease();
            uint64_t v64 = (uint64_t)v16;
            if ((v156 & 1) != 0)
            {
              unint64_t v16 = v310;
              if (v25) {
                goto LABEL_353;
              }
              v141 = 0LL;
            }

            else
            {
              if (v154) {
                v141 = strnlen(v154, 0x100uLL);
              }
              else {
                v141 = 0LL;
              }
              unint64_t v16 = v310;
              if (v7)
              {
LABEL_353:
                v299 = v154;
                goto LABEL_354;
              }
            }

            MEMORY[0x186E20E60](v154, -1LL, -1LL);
          }

          swift_bridgeObjectRelease();
          if ((v69 & 0x1000000000000000LL) != 0)
          {
            v202 = String.UTF8View._foreignCount()();
          }

          else if ((v69 & 0x2000000000000000LL) != 0)
          {
            v202 = HIBYTE(v69) & 0xF;
          }

          else
          {
            v202 = v67 & 0xFFFFFFFFFFFFLL;
          }

          v203 = 3 * v202;
          if (v203 < -1) {
            goto LABEL_336;
          }
          v204 = v203 + 1;
          if (v203 < 1024 || (v202 = swift_stdlib_isStackAllocationSafe(), (v202 & 1) != 0))
          {
            MEMORY[0x1895F8858](v202);
            v206 = (char *)&v301 - v205;
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v206, v204, 1, v67, v69);
            v208 = v207;
            swift_bridgeObjectRelease();
            if ((v208 & 1) != 0) {
              v209 = 0LL;
            }
            else {
              v209 = strnlen(v206, 0x401uLL);
            }
            v210 = v317;
          }

          else
          {
            v211 = (const char *)swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v211, v204, 1, v67, v69);
            v213 = v212;
            swift_bridgeObjectRelease();
            if ((v213 & 1) != 0)
            {
              v210 = v317;
              v209 = 0LL;
            }

            else
            {
              if (v211) {
                v209 = strnlen(v211, 0x401uLL);
              }
              else {
                v209 = 0LL;
              }
              v210 = v317;
            }

            MEMORY[0x186E20E60](v211, -1LL, -1LL);
          }

          swift_bridgeObjectRelease();
          v215 = v141 > 255 || v209 > 1024;
          v216 = !v215;
          if (v215) {
            v217 = v210;
          }
          else {
            v217 = v64;
          }
          v308 = (uint64_t *)v217;
          v307 = (void *)v69;
          if (v216) {
            v218 = (uint64_t)v16;
          }
          else {
            v218 = v69;
          }
          v309 = v218;
          swift_bridgeObjectRelease();
          CocoaError.Code.init(fileErrno:reading:)(63, 0);
          v111 = (uint64_t (*)(void))v325;
          LODWORD(v33) = (_DWORD)v305;
        }

        else
        {
          CocoaError.Code.init(fileErrno:reading:)(v33, 0);
          v111 = (uint64_t (*)(void))v325;
          if ((_DWORD)v33 == 102)
          {
            v112 = 0LL;
            v113 = v66;
            v114 = v64;
LABEL_220:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( v111,  v114,  v113,  v112,  1802398028LL,  0xE400000000000000LL,  v64,  v66,  (void *(*)(void *__return_ptr, void *, uint64_t))&v323,  v67,  v69);
            v152 = v323;
            v230 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( v152,  v64,  v66,  v67,  v69,  (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

            if ((v230 & 1) == 0)
            {
LABEL_321:
              swift_willThrow();
              swift_release();
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }

                              swift_bridgeObjectRelease();
                              uint64_t v64 = a1;
                              if ((v10 & 1) == 0)
                              {
LABEL_118:
                                specialized _NativeDictionary._insert(at:key:value:)( v13,  a2,  (uint64_t)v8,  v64,  0,  (void *)v61);
                                swift_bridgeObjectRetain();
                                goto LABEL_119;
                              }

        uint64_t v71 = 512LL;
        break;
    }

        v73 = 512LL;
LABEL_153:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
          goto LABEL_223;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        v140 = (int)POSIXErrorCode.rawValue.getter();
        v141 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        v142 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v117 = objc_msgSend(v141, sel_initWithDomain_code_userInfo_, v142, v140, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v143 = objc_msgSend(v117, sel_domain);
        v144 = static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
        v146 = v145;

        if (v144 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v146 == v147)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_158;
        }

        v148 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v148 & 1) != 0) {
          goto LABEL_158;
        }
        break;
    }

    goto LABEL_215;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  unint64_t v39 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  unint64_t v40 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  unint64_t v41 = objc_msgSend(v39, sel_initWithDomain_code_userInfo_, v40, 514, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v42 = objc_msgSend(v41, sel_domain);
  int v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  unint64_t v45 = v44;

  if (v43 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v45 != v46)
  {
    unsigned int v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v69 & 1) != 0) {
      goto LABEL_58;
    }
    __break(1u);
    goto LABEL_213;
  }

  swift_bridgeObjectRelease_n();
LABEL_58:
  swift_willThrow();
  swift_willThrow();
LABEL_202:
  swift_bridgeObjectRelease_n();
  objc_autoreleasePoolPop(v187);
}

                  unint64_t v57 = 1LL;
                  goto LABEL_149;
                }

                if (v4 < 0xB5) {
                  goto LABEL_121;
                }
                goto LABEL_142;
              }

                        unint64_t v62 = (v73 - 1) & v73;
                        uint64_t v70 = v74;
                        uint64_t v71 = __clz(__rbit64(v73)) + (v74 << 6);
                      }

                      v76 = 16 * v71;
                      unint64_t v77 = *(void *)(v2 + 56);
                      unint64_t v78 = (uint64_t *)(*(void *)(v2 + 48) + v76);
                      v80 = *v78;
                      unint64_t v79 = v78[1];
                      unint64_t v81 = (uint64_t *)(v77 + v76);
                      unint64_t v82 = *v81;
                      uint64_t v97 = v81[1];
                      Hasher.init(_seed:)();
                      swift_bridgeObjectRetain();
                      String.hash(into:)();
                      unint64_t v83 = Hasher._finalize()();
                      v84 = -1LL << *(_BYTE *)(v32 + 32);
                      v85 = v83 & ~v84;
                      v86 = v85 >> 6;
                      if (((-1LL << v85) & ~*(void *)(v63 + 8 * (v85 >> 6))) != 0)
                      {
                        uint64_t v64 = __clz(__rbit64((-1LL << v85) & ~*(void *)(v63 + 8 * (v85 >> 6)))) | v85 & 0x7FFFFFFFFFFFFFC0LL;
                      }

                      else
                      {
                        unint64_t v87 = 0;
                        unint64_t v88 = (unint64_t)(63 - v84) >> 6;
                        do
                        {
                          if (++v86 == v88 && (v87 & 1) != 0) {
                            goto LABEL_132;
                          }
                          unint64_t v89 = v86 == v88;
                          if (v86 == v88) {
                            v86 = 0LL;
                          }
                          v87 |= v89;
                          unint64_t v90 = *(void *)(v63 + 8 * v86);
                        }

                        while (v90 == -1);
                        uint64_t v64 = __clz(__rbit64(~v90)) + (v86 << 6);
                      }

                      *(void *)(v63 + ((v64 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v64;
                      int v65 = 16 * v64;
                      unint64_t v66 = (void *)(*(void *)(v32 + 48) + v65);
                      *unint64_t v66 = v80;
                      v66[1] = v79;
                      char v67 = (void *)(*(void *)(v32 + 56) + v65);
                      uint64_t v2 = v96;
                      uint64_t v68 = v97;
                      *char v67 = v82;
                      v67[1] = v68;
                      ++*(void *)(v32 + 16);
                      --v20;
                      pthread_t v61 = v70;
                      if (!v20)
                      {
LABEL_127:
                        uint64_t v2 = v32;
                        uint64_t v19 = v94;
                        goto LABEL_128;
                      }
                    }
                  }

                  v21 = v31;
                }
              }
            }
          }

              v99 = (4 * *(_BYTE *)(v98 + 18) + 8) & 0x3C;
              unint64_t v15 = ((-15LL << v99) - 1) & v15 | (v54 << v99);
              int v100 = *(void *)(v98 + 24 + 24 * v54);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              v98 = v100;
              if (!*(_BYTE *)(v100 + 18)) {
                goto LABEL_142;
              }
            }

            __break(1u);
            goto LABEL_118;
          }

                        if (v41)
                        {
                          v76 = v116;
                          if (!v116) {
                            v76 = langid_create();
                          }
                          v116 = v76;
                          v114 = langid_consume_string();
                          unint64_t v41 = 0LL;
                          unint64_t v77 = v73 + v72;
                          unint64_t v42 = v73 + v72;
                        }

                        else
                        {
                          unint64_t v77 = v73 + v72;
                        }

                        goto LABEL_133;
                      }

                      if (v78) {
                        goto LABEL_117;
                      }
                    }

      if (v59 || v61) {
        off_18C497090(internal, 0LL);
      }
      unint64_t v48 = v66 & 1;
      if ((v9 & 2) == 0) {
        goto LABEL_129;
      }
LABEL_121:
      if (!v78 && !*((_BYTE *)v75 + 24))
      {
        int64_t v49 = v48 == 0;
        BOOL v50 = 2LL;
        if (!v49) {
          BOOL v50 = 6LL;
        }
        if (v18) {
          unint64_t v51 = v50 | 0x10;
        }
        else {
          unint64_t v51 = v50;
        }
        v58[2](v58, 0LL, v51, &v78);
      }

      goto LABEL_129;
    }

    uint64_t v17 = 1;
  }

  while (__stlxr(1u, (unsigned int *)p_checkout));
LABEL_109:
  uint64_t v18 = 0;
  unint64_t v48 = 0;
  if ((v9 & 2) != 0) {
    goto LABEL_121;
  }
LABEL_129:
  if (internal)
  {
    if (v17)
    {
      off_18C4970D0(internal);
      do
        __ldaxr((unsigned int *)p_checkout);
      while (__stlxr(0, (unsigned int *)p_checkout));
    }

    else
    {
      CFRelease(internal);
    }
  }

  _Block_object_dispose(&v70, 8);
  _Block_object_dispose(&v74, 8);
}

LABEL_123:
        _CFAutoreleasePoolPop();
        return v14;
      }

      unint64_t v33 = 1LL;
    }

    else
    {
      unint64_t v33 = 0LL;
      if (v22)
      {
        uint64_t v32 = *(void *)(a1 + 16);
        goto LABEL_49;
      }
    }

          v154[0] = v67;
          lazy protocol witness table accessor for type Int and conformance Int();
          v85 = String.init<A>(_:radix:uppercase:)();
          unint64_t v87 = v135;
          goto LABEL_124;
        }

  swift_bridgeObjectRelease();
  id v5 = v20;
  uint64_t v2 = v107;
LABEL_11:
  swift_bridgeObjectRelease();
  specialized _NativeDictionary._delete(at:)(v17, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_12:
  if (!*(void *)(v2 + 16))
  {
LABEL_31:
    uint64_t v2 = v5;
    goto LABEL_32;
  }

  v21 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017LL, 0x80000001839CADD0LL);
  if ((v22 & 1) != 0)
  {
    unint64_t v23 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v21);
    uint64_t v1 = *v23;
    uint64_t v24 = (void *)v23[1];
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v1 = 0LL;
    uint64_t v24 = 0LL;
  }

  if (*(void *)(v2 + 16)
    && (uint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017LL, 0x80000001839CADF0LL), (v26 & 1) != 0))
  {
    uint64_t v27 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v25);
    unint64_t v28 = *v27;
    pthread_t v29 = (void *)v27[1];
    swift_bridgeObjectRetain();
    if (!v24)
    {
LABEL_19:
      if (v29)
      {
        v30._countAndFlagsBits = 95LL;
        v30._object = (void *)0xE100000000000000LL;
        String.append(_:)(v30);
        goto LABEL_27;
      }

      goto LABEL_31;
    }
  }

  else
  {
    unint64_t v28 = 0LL;
    pthread_t v29 = 0LL;
    if (!v24) {
      goto LABEL_19;
    }
  }

  v31._countAndFlagsBits = 95LL;
  v31._object = (void *)0xE100000000000000LL;
  String.append(_:)(v31);
  v32._countAndFlagsBits = v1;
  v32._object = v24;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017LL, 0x80000001839CADD0LL);
  unint64_t v35 = v34;
  swift_bridgeObjectRelease();
  if ((v35 & 1) == 0) {
    goto LABEL_26;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    unint64_t v36 = v5;
    goto LABEL_25;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v131 = static _DictionaryStorage.copy(original:)();
  unint64_t v36 = v131;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_184;
  }
  v132 = (char *)(v131 + 64);
  __srcb = (char *)(v5 + 64);
  v133 = (unint64_t)((1LL << *(_BYTE *)(v36 + 32)) + 63) >> 6;
  if (v36 != v5 || v132 >= &__srcb[8 * v133]) {
    memmove(v132, __srcb, 8 * v133);
  }
  v134 = 0LL;
  *(void *)(v36 + 16) = *(void *)(v5 + 16);
  v135 = 1LL << *(_BYTE *)(v5 + 32);
  v136 = -1LL;
  if (v135 < 64) {
    v136 = ~(-1LL << v135);
  }
  v137 = v136 & *(void *)(v5 + 64);
  v138 = (unint64_t)(v135 + 63) >> 6;
  while (2)
  {
    if (v137)
    {
      v139 = __clz(__rbit64(v137));
      v137 &= v137 - 1;
      v140 = v139 | (v134 << 6);
LABEL_132:
      v141 = 16 * v140;
      v142 = (uint64_t *)(*(void *)(v5 + 48) + v141);
      v144 = *v142;
      v143 = v142[1];
      v145 = (uint64_t *)(*(void *)(v5 + 56) + v141);
      v146 = *v145;
      uint64_t v1 = v145[1];
      v147 = (void *)(*(void *)(v36 + 48) + v141);
      *v147 = v144;
      v147[1] = v143;
      v148 = (void *)(*(void *)(v36 + 56) + v141);
      *v148 = v146;
      v148[1] = v1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }

    break;
  }

  v149 = v134 + 1;
  if (__OFADD__(v134, 1LL)) {
    goto LABEL_188;
  }
  if (v149 >= v138) {
    goto LABEL_184;
  }
  v150 = *(void *)&__srcb[8 * v149];
  ++v134;
  if (v150) {
    goto LABEL_153;
  }
  v134 = v149 + 1;
  if (v149 + 1 >= v138) {
    goto LABEL_184;
  }
  v150 = *(void *)&__srcb[8 * v134];
  if (v150) {
    goto LABEL_153;
  }
  v134 = v149 + 2;
  if (v149 + 2 >= v138) {
    goto LABEL_184;
  }
  v150 = *(void *)&__srcb[8 * v134];
  if (v150) {
    goto LABEL_153;
  }
  v134 = v149 + 3;
  if (v149 + 3 >= v138) {
    goto LABEL_184;
  }
  v150 = *(void *)&__srcb[8 * v134];
  if (v150) {
    goto LABEL_153;
  }
  v134 = v149 + 4;
  if (v149 + 4 >= v138) {
    goto LABEL_184;
  }
  v150 = *(void *)&__srcb[8 * v134];
  if (v150) {
    goto LABEL_153;
  }
  v134 = v149 + 5;
  if (v149 + 5 >= v138) {
    goto LABEL_184;
  }
  v150 = *(void *)&__srcb[8 * v134];
  if (v150)
  {
LABEL_153:
    v137 = (v150 - 1) & v150;
    v140 = __clz(__rbit64(v150)) + (v134 << 6);
    goto LABEL_132;
  }

  v151 = v149 + 6;
  if (v151 >= v138) {
    goto LABEL_184;
  }
  v150 = *(void *)&__srcb[8 * v151];
  if (v150)
  {
    v134 = v151;
    goto LABEL_153;
  }

  while (1)
  {
    v134 = v151 + 1;
    if (__OFADD__(v151, 1LL)) {
      goto LABEL_194;
    }
    if (v134 >= v138) {
      break;
    }
    v150 = *(void *)&__srcb[8 * v134];
    ++v151;
    if (v150) {
      goto LABEL_153;
    }
  }

      if (v83 == ++v94)
      {
        if ((_DWORD)v92)
        {
          unint64_t v88 = __OFADD__(v83, v91);
          v136 = v83 + v91;
          if (v88) {
            goto LABEL_334;
          }
          if (v136 >= v84)
          {
LABEL_146:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            v102 = (void *)swift_allocError();
            *v139 = 0;
            unint64_t v41 = v102;
            swift_willThrow();
            swift_bridgeObjectRelease();
LABEL_147:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            NSDecimal.asVariableLengthInteger()(v265, v264, v261);
            v141 = *(void *)(v140 + 16);
            swift_bridgeObjectRelease();
            v142 = floor((double)(8 - v141) * 4.81647993);
            if ((~*(void *)&v142 & 0x7FF0000000000000LL) != 0)
            {
              v143 = v273;
              if (v142 > -9.22337204e18)
              {
                if (v142 < 9.22337204e18)
                {
                  int v20 = (uint64_t)v142;
                  NSDecimal.asVariableLengthInteger()(*(void *)v73, *((void *)v73 + 1), *((_DWORD *)v73 + 4));
                  unint64_t v83 = v20 - v40;
                  if (!__OFSUB__(v20, v40))
                  {
                    if (!v83) {
                      goto LABEL_172;
                    }
                    unint64_t v77 = v20 - v40;
                    if (v83 < 0)
                    {
                      unint64_t v77 = v40 - v20;
                      if (__OFSUB__(0LL, v83)) {
                        goto LABEL_333;
                      }
                    }

                    v265 = v20;
                    uint64_t v34 = (unint64_t)powerOfTen._rawValue;
                    v145 = *((void *)powerOfTen._rawValue + 2);
                    v146 = swift_bridgeObjectRetain();
                    if (v145 <= v77)
                    {
                      unint64_t v41 = 0LL;
                      unint64_t v40 = v145 - 1;
                      unint64_t v90 = 1LL;
                      v84 = 1 - v145;
                      unint64_t v15 = v146;
                      do
                      {
                        unint64_t v79 = v77 - v40;
                        if (__OFSUB__(v77, v40)) {
                          goto LABEL_273;
                        }
                        v148 = powerOfTen._rawValue;
                        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v145 - 1, 1LL, powerOfTen._rawValue);
                        uint64_t v34 = v148[v40 + 4];
                        swift_bridgeObjectRetain();
                        if (v83 < 0) {
                          v147 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)( v15,  v34,  8LL);
                        }
                        else {
                          v147 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v15, v34, 8LL);
                        }
                        int v20 = v147;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v77 += v84;
                        unint64_t v15 = v20;
                      }

                      while (v145 <= v79);
                      uint64_t v34 = (unint64_t)powerOfTen._rawValue;
                      unint64_t v77 = v79;
                    }

                    else
                    {
                      int v20 = v146;
                    }

                    v73 = (__int128 *)v275;
                    if ((v77 & 0x8000000000000000LL) == 0)
                    {
                      if ((unint64_t)v77 < *(void *)(v34 + 16))
                      {
                        v151 = *(void *)(v34 + 8 * v77 + 32);
                        swift_bridgeObjectRetain();
                        if (v83 < 0) {
                          v152 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)( v20,  v151,  8LL);
                        }
                        else {
                          v152 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v20, v151, 8LL);
                        }
                        unint64_t v15 = v152;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v144._rawValue = (void *)v15;
                        v143 = v273;
                        int v20 = v265;
LABEL_172:
                        v153 = v144._rawValue;
                        NSDecimal.copyVariableLengthInteger(_:)(v144);
                        uint64_t v18 = v41;
                        if (v41)
                        {
LABEL_173:
                          swift_bridgeObjectRelease();
                          goto LABEL_31;
                        }

                        uint64_t v34 = v153[2];
                        swift_bridgeObjectRelease();
                        if (v34 >> 31) {
                          goto LABEL_337;
                        }
                        _So9NSDecimala__length_setter(v34, v73);
                        if (v83 < (uint64_t)0xFFFFFFFF80000000LL)
                        {
LABEL_338:
                          __break(1u);
                        }

                        else if (v83 <= 0x7FFFFFFF)
                        {
                          *(_DWORD *)v279 = *(_DWORD *)v73;
                          *(_OWORD *)&v279[4] = *(__int128 *)((char *)v73 + 4);
                          v154 = _So9NSDecimala__exponent_getter(v279);
                          unint64_t v88 = __OFSUB__(v154, (_DWORD)v83);
                          v155 = (v154 - v83);
                          if (!v88)
                          {
                            _So9NSDecimala__exponent_setter(v155, v73);
                            _So9NSDecimala__isCompact_setter_0(0LL, v73);
                            *(_DWORD *)v279 = *(_DWORD *)v73;
                            *(_OWORD *)&v279[4] = *(__int128 *)((char *)v73 + 4);
                            v156 = _So9NSDecimala__length_getter(v279);
                            v157 = *((unsigned __int16 *)v143 + 2);
                            v158 = *((unsigned __int16 *)v143 + 3);
                            if (v156)
                            {
                              NSDecimal.asVariableLengthInteger()( *v143 | (unint64_t)(v157 << 32) | (v158 << 48),  *((void *)v143 + 1),  v143[4]);
                              if (!v20) {
                                goto LABEL_249;
                              }
                              v160 = v20;
                              v161 = specialized abs<A>(_:)(v20);
                              v162 = specialized Array._getCount()((uint64_t)powerOfTen._rawValue);
                              v163 = v162 - 1;
                              if (!__OFSUB__(v162, 1LL))
                              {
                                uint64_t v34 = v162;
                                v164 = swift_bridgeObjectRetain();
                                if (v163 >= v161)
                                {
                                  unint64_t v40 = v164;
                                }

                                else
                                {
                                  v165 = 1 - v34;
                                  unint64_t v15 = v164;
                                  do
                                  {
                                    v166 = v161 - v163;
                                    if (__OFSUB__(v161, v163)) {
                                      goto LABEL_323;
                                    }
                                    v167 = powerOfTen._rawValue;
                                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)( v163,  1LL,  powerOfTen._rawValue);
                                    uint64_t v34 = v167[v163 + 4];
                                    swift_bridgeObjectRetain();
                                    unint64_t v41 = 0LL;
                                    if (v160 < 0) {
                                      v168 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)( v15,  v34,  8LL);
                                    }
                                    else {
                                      v168 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)( v15,  v34,  8LL);
                                    }
                                    unint64_t v40 = v168;
                                    swift_bridgeObjectRelease();
                                    swift_bridgeObjectRelease();
                                    v161 += v165;
                                    unint64_t v15 = v40;
                                  }

                                  while (v163 < v166);
                                  v161 = v166;
                                }

                                v188 = powerOfTen._rawValue;
                                specialized Array._checkSubscript(_:wasNativeTypeChecked:)( v161,  1LL,  powerOfTen._rawValue);
                                v189 = v188[v161 + 4];
                                swift_bridgeObjectRetain();
                                int v20 = v160;
                                if (v160 < 0) {
                                  v190 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)( v40,  v189,  8LL);
                                }
                                else {
                                  v190 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)( v40,  v189,  8LL);
                                }
                                v143 = v273;
                                v224 = (void *)v190;
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                v159._rawValue = v224;
LABEL_249:
                                v225 = v159._rawValue;
                                NSDecimal.copyVariableLengthInteger(_:)(v159);
                                uint64_t v18 = v226;
                                if (v226) {
                                  goto LABEL_173;
                                }
                                v227 = specialized Array._getCount()(v225);
                                swift_bridgeObjectRelease();
                                if ((v227 & 0x8000000000000000LL) != 0 || HIDWORD(v227)) {
                                  goto LABEL_354;
                                }
                                _So9NSDecimala__length_setter(v227, v143);
                                if (v20 < (uint64_t)0xFFFFFFFF80000000LL)
                                {
                                  __break(1u);
                                }

                                else if (v20 <= 0x7FFFFFFF)
                                {
                                  *(_DWORD *)v279 = *v143;
                                  *(_OWORD *)&v279[4] = *(_OWORD *)(v143 + 1);
                                  v228 = _So9NSDecimala__exponent_getter(v279);
                                  unint64_t v88 = __OFSUB__(v228, (_DWORD)v20);
                                  v229 = (v228 - v20);
                                  if (!v88)
                                  {
                                    _So9NSDecimala__exponent_setter(v229, v143);
                                    v123 = v143;
                                    goto LABEL_110;
                                  }

            __break(1u);
            goto LABEL_124;
          }

                  __break(1u);
                  goto LABEL_124;
                }

                __break(1u);
LABEL_106:
                unint64_t v92 = 0LL;
                unint64_t v93 = 0LL;
LABEL_107:
                unint64_t v8 = (unint64_t)v92;
                unint64_t v9 = v93;
                if (v93)
                {
                  swift_bridgeObjectRelease_n();
                }

                else
                {
                  unint64_t v83 = v96;
                  v84 = v97;
                  swift_bridgeObjectRetain();
                  unint64_t v8 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v83, v84, 4u);
                  unint64_t v9 = v85;
                  swift_bridgeObjectRelease_n();
LABEL_110:
                  swift_bridgeObjectRelease();
                }

                goto LABEL_111;
              }

                    __break(1u);
                    goto LABEL_124;
                  }

                  unint64_t v40 = v53;
                }
              }
            }
          }

  swift_release_n();
LABEL_106:
  *id v4 = v10;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  Hasher.init(_seed:)();
  String.hash(into:)();
  v73 = Hasher._finalize()();
  uint64_t result = swift_bridgeObjectRelease();
  int v74 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v73 & ~v74;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
    goto LABEL_120;
  }
  double v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v10 + 48) + 8 * a2));
  unint64_t v77 = v76;
  if (v75 == static String._unconditionallyBridgeFromObjectiveC(_:)(v6) && v77 == v78) {
    goto LABEL_132;
  }
  v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v80 & 1) == 0)
  {
    unint64_t v81 = ~v74;
    do
    {
      a2 = (a2 + 1) & v81;
      if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
        goto LABEL_120;
      }
      unint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v10 + 48) + 8 * a2));
      v84 = v83;
      if (v82 == static String._unconditionallyBridgeFromObjectiveC(_:)(v6) && v84 == v85) {
        goto LABEL_132;
      }
      unint64_t v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }

    while ((v87 & 1) == 0);
  }

                    swift_release_n();
                    a4 = v97;
LABEL_106:
                    NSString *v6 = v13;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    swift_bridgeObjectRelease();
                    v85 = Hasher._finalize()();
                    v86 = -1LL << *(_BYTE *)(v13 + 32);
                    a5 = v85 & ~v86;
                    if (((*(void *)(v13 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a5) & 1) != 0)
                    {
                      unint64_t v87 = *(void *)(v13 + 48);
                      unint64_t v88 = v87 + 32 * a5;
                      unint64_t v89 = *(void *)(v88 + 16) == v9 && *(void *)(v88 + 24) == a4;
                      if (v89 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
LABEL_119:
                        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }

                      else
                      {
                        unint64_t v90 = ~v86;
                        while (1)
                        {
                          a5 = (a5 + 1) & v90;
                          if (((*(void *)(v13 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a5) & 1) == 0) {
                            break;
                          }
                          unint64_t v91 = v87 + 32 * a5;
                          unint64_t v92 = *(void *)(v91 + 16) == v9 && *(void *)(v91 + 24) == a4;
                          if (v92 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                            goto LABEL_119;
                          }
                        }
                      }
                    }

                    goto LABEL_120;
                  }

                  int v65 = v72;
                }
              }
            }
          }

  __break(1u);
LABEL_124:
  __break(1u);
  return result;
}

      uint64_t v12 = String.UTF8View._foreignCount()();
LABEL_14:
      swift_bridgeObjectRetain();
      specialized Data.init(capacity:initializingWith:)(v12);
      unint64_t v9 = v13;
      swift_bridgeObjectRelease();
      return v9;
    }

    if ((a4 & 0x1000000000000000LL) != 0)
    {
      unint64_t v54 = String.UTF8View._foreignCount()();
LABEL_130:
      unint64_t v62 = specialized Data.init(count:)(v54);
      unint64_t v63 = v55;
      swift_bridgeObjectRetain();
      specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)&v62);
      unint64_t v9 = v62;
      if ((v56 & 1) != 0) {
        return v9;
      }
      outlined consume of Data._Representation(v62, v63);
      return 0LL;
    }

    if ((a4 & 0x2000000000000000LL) != 0)
    {
      BOOL v22 = HIBYTE(a4) & 0xF;
      unint64_t v62 = a3;
      unint64_t v63 = a4 & 0xFFFFFFFFFFFFFFLL;
      if (v22)
      {
        if (v22 >= 8)
        {
          if ((a3 & 0x8080808080808080LL) != 0) {
            return 0LL;
          }
          if (v22 <= 8) {
            goto LABEL_127;
          }
          unint64_t v23 = 8LL;
          if ((a4 & 0x80) != 0) {
            return 0LL;
          }
        }

        else
        {
          unint64_t v23 = 0LL;
          if ((a3 & 0x80) != 0) {
            return 0LL;
          }
        }

        uint64_t v24 = v23 + 1;
        while (v24 < v22)
        {
          uint64_t v25 = *((char *)&v62 + v24++);
          if (v25 < 0) {
            return 0LL;
          }
        }
      }

  if (v34) {
    CFRelease(v34);
  }
  return v17;
}

void sub_182ED0058( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t __NSIndexSetEnumerateBitfield( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3 + a4;
  if (a3 + a4 >= 0x40) {
    uint64_t v5 = 64LL;
  }
  unint64_t v6 = v5 - a3;
  if (a3 <= 0x3F) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = 0LL;
  }
  if (a3 > 0x3F) {
    unint64_t v6 = 0LL;
  }
  if (v6)
  {
    unsigned __int8 v45 = 0;
    unint64_t v44 = v7;
    if ((a2 & 2) == 0)
    {
      uint64_t v11 = 0LL;
      unint64_t v12 = 0LL;
      unint64_t v42 = v7 + v6;
      while (2)
      {
        if (v12) {
          uint64_t v13 = v11;
        }
        else {
          uint64_t v13 = 0LL;
        }
        uint64_t v14 = v13 - 1;
        while (1)
        {
          if (((-1LL << v12) & a1) == 0) {
            return 0x7FFFFFFFFFFFFFFFLL;
          }
          unint64_t v15 = __clz(__rbit64((-1LL << v12) & a1));
          unint64_t v16 = (-1LL << v15) & ~a1;
          unint64_t v12 = __clz(__rbit64(v16));
          if (v11 == ++v14) {
            break;
          }
          uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          if (!v16 || v12 > 0x3F) {
            return v17;
          }
        }

        unint64_t v18 = v42;
        unint64_t v19 = v44;
        if (v42 >= v12) {
          unint64_t v18 = v12;
        }
        if (v15 > v44 || v44 >= v12)
        {
          if (v44 > v15) {
            goto LABEL_45;
          }
          unint64_t v21 = v18 - v15;
          unint64_t v19 = v15 < v42 ? v15 : 0LL;
          unint64_t v20 = v15 < v42 ? v21 : 0LL;
          if (!v20) {
            goto LABEL_45;
          }
        }

        else
        {
          unint64_t v20 = v18 - v44;
          if (v18 == v44) {
            goto LABEL_45;
          }
        }

        if ((a2 & 0x4000000000000000LL) != 0)
        {
          __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
          uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          if (v12 > 0x3F) {
            return v17;
          }
          goto LABEL_48;
        }

        if (v19 <= v19 + v20) {
          unint64_t v22 = v19 + v20;
        }
        else {
          unint64_t v22 = v19;
        }
        while (v22 != v19)
        {
          if ((a2 & 0x2000000000000000LL) != 0)
          {
            if ((__NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5) & 1) != 0) {
              return v19;
            }
          }

          else
          {
            __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
          }

          ++v19;
        }

LABEL_96:
          if (!v24) {
            return v17;
          }
        }
      }
    }
  }

  return 0x7FFFFFFFFFFFFFFFLL;
}

    Hasher._combine(_:)(0);
    if (*((void *)&v77 + 1))
    {
LABEL_92:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v86 = *((id *)&v77 + 1);
      _CFObject.hash(into:)();

      if (v78) {
        goto LABEL_93;
      }
      goto LABEL_98;
    }

                    pthread_t v61 = v48;
                    if (!v48)
                    {
                      unint64_t v62 = MEMORY[0x18961AFF8];
                      goto LABEL_136;
                    }

                    if (v48 != *(void *)(v93 + 16))
                    {
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
                      unint64_t v62 = static _SetStorage.allocate(capacity:)();
                      unint64_t v63 = *v85;
                      uint64_t v64 = v62 + 56;
                      swift_retain();
                      int v65 = 0LL;
                      while (1)
                      {
                        if (v63)
                        {
                          uint64_t v68 = __clz(__rbit64(v63));
                          v63 &= v63 - 1;
                          unsigned int v69 = v68 | (v65 << 6);
                        }

                        else
                        {
                          unint64_t v20 = __OFADD__(v65++, 1LL);
                          if (v20) {
                            goto LABEL_145;
                          }
                          if (v65 >= v86) {
                            goto LABEL_135;
                          }
                          uint64_t v70 = v85[v65];
                          if (!v70)
                          {
                            uint64_t v71 = v65 + 1;
                            if (v65 + 1 >= v86) {
                              goto LABEL_135;
                            }
                            uint64_t v70 = v85[v71];
                            if (!v70)
                            {
                              uint64_t v71 = v65 + 2;
                              if (v65 + 2 >= v86) {
                                goto LABEL_135;
                              }
                              uint64_t v70 = v85[v71];
                              if (!v70)
                              {
                                uint64_t v71 = v65 + 3;
                                if (v65 + 3 >= v86) {
                                  goto LABEL_135;
                                }
                                uint64_t v70 = v85[v71];
                                if (!v70)
                                {
                                  uint64_t v71 = v65 + 4;
                                  if (v65 + 4 >= v86) {
                                    goto LABEL_135;
                                  }
                                  uint64_t v70 = v85[v71];
                                  if (!v70)
                                  {
                                    uint64_t v71 = v65 + 5;
                                    if (v65 + 5 >= v86) {
                                      goto LABEL_135;
                                    }
                                    uint64_t v70 = v85[v71];
                                    if (!v70)
                                    {
                                      while (1)
                                      {
                                        int v65 = v71 + 1;
                                        if (__OFADD__(v71, 1LL)) {
                                          goto LABEL_149;
                                        }
                                        if (v65 >= v86) {
                                          break;
                                        }
                                        uint64_t v70 = v85[v65];
                                        ++v71;
                                        if (v70) {
                                          goto LABEL_117;
                                        }
                                      }

    v149 = (v119 - 1) & v119;
    v146 = v120;
    v114 = __clz(__rbit64(v119)) + (v120 << 6);
LABEL_73:
    v115 = *(void *)(v147 + 72) * v114;
    outlined init with copy of ICUNumberFormatter.Signature( *(void *)(v69 + 48) + v115,  v112,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    v116 = 8 * v114;
    v117 = *(void *)(*(void *)(v69 + 56) + 8 * v114);
    outlined init with take of ICUNumberFormatter.Signature( v112,  *(void *)(v75 + 48) + v115,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(void *)(*(void *)(v75 + 56) + v116) = v117;
    swift_retain();
  }

  v121 = v146 + 8;
  if (v146 + 8 >= v142) {
    goto LABEL_97;
  }
  v119 = *(void *)&v143[8 * v121];
  if (v119)
  {
    v120 = v146 + 8;
    goto LABEL_96;
  }

  while (1)
  {
    v120 = v121 + 1;
    if (__OFADD__(v121, 1LL)) {
      break;
    }
    if (v120 >= v142) {
      goto LABEL_97;
    }
    v119 = *(void *)&v143[8 * v120];
    ++v121;
    if (v119) {
      goto LABEL_96;
    }
  }

          double v75 = (v84 - 1) & v84;
          unint64_t v92 = v85;
          unint64_t v77 = __clz(__rbit64(v84)) + (v85 << 6);
        }

        unint64_t v78 = 16 * v77;
        unint64_t v79 = (uint64_t *)(*(void *)(v36 + 48) + v78);
        unint64_t v81 = *v79;
        v80 = v79[1];
        unint64_t v94 = *(_OWORD *)(*(void *)(v36 + 56) + v78);
        unint64_t v82 = (void *)(*(void *)(v25 + 48) + v78);
        *unint64_t v82 = v81;
        v82[1] = v80;
        *(_OWORD *)(*(void *)(v25 + 56) + v7_Block_object_dispose((const void *)(v17 - 128), 8) = v94;
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v94, *((unint64_t *)&v94 + 1));
      }
    }

  swift_bridgeObjectRetain();
  unint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v54) {
    goto LABEL_97;
  }
LABEL_48:
  specialized RangeReplaceableCollection<>.popLast()();
  swift_release();
LABEL_49:
  swift_willThrow();
  return a5;
}

    uint64_t v29 = 0;
    uint64_t v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }

  if (result >= 1)
  {
    if (result != 1)
    {
      unint64_t v21 = a6 + 87;
      if (a6 > 10)
      {
        unint64_t v22 = a6 + 55;
      }

      else
      {
        unint64_t v21 = 97;
        unint64_t v22 = 65;
      }

      if (a6 <= 10) {
        unint64_t v23 = a6 + 48;
      }
      else {
        unint64_t v23 = 58;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        unint64_t v25 = v19 + 1;
        unint64_t v26 = result - 1;
        while (1)
        {
          unint64_t v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              uint64_t v30 = 1;
              if (v27 < 0x61 || v27 >= v21) {
                return v29 | ((unint64_t)v30 << 32);
              }
              unint64_t v28 = -87;
            }

            else
            {
              unint64_t v28 = -55;
            }
          }

          else
          {
            unint64_t v28 = -48;
          }

          unint64_t v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_96;
          }
          unint64_t v32 = v27 + v28;
          uint64_t v24 = v31 - v32;
          ++v25;
          if (!--v26) {
            goto LABEL_94;
          }
        }
      }

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v32 = v20 & 0xFFFFFFFFFFFFF0FFLL | (v68 << 8);
  unint64_t v18 = v19;
  unint64_t v31 = v223;
LABEL_31:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v18, v32, v23, v9, v31);
  swift_unknownObjectRelease_n();
  unint64_t v33 = v11;
LABEL_32:
  unint64_t v34 = *(_OWORD *)(v8 + 32);
  v298[9] = *(_OWORD *)(v8 + 16);
  v298[10] = v34;
  v298[11] = *(_OWORD *)(v8 + 48);
  uint64_t result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v33))
  {
LABEL_253:
    __break(1u);
    goto LABEL_254;
  }

  unint64_t v35 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t result = outlined release of Locale((uint64_t)&v286);
  if (v18 != *(void *)(v8 + 88))
  {
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
    goto LABEL_257;
  }

  if (v23)
  {
    unint64_t v36 = (void *)(v23 + 24 * ((v32 >> ((4 * *(_BYTE *)(v23 + 18) + 8) & 0x3C)) & 0xF));
    uint64_t v38 = v36[3];
    unint64_t v37 = v36[4];
    int v39 = v36[5];
    swift_retain();
    v198 = v37;
    swift_bridgeObjectRetain();
    v197 = v39;
    uint64_t result = swift_bridgeObjectRetain();
  }

  else
  {
    unint64_t v40 = *(void *)(v8 + 64);
    swift_retain();
    swift_unknownObjectRetain();
    uint64_t v38 = specialized Rope._Node.subscript.getter(v32, v40);
    v197 = v42;
    v198 = v41;
    uint64_t result = swift_unknownObjectRelease();
  }

  if (v228 >= v35 >> 10) {
    unint64_t v43 = v235;
  }
  else {
    unint64_t v43 = v35;
  }
  if (__OFADD__(v38, v35 >> 11)) {
    goto LABEL_255;
  }
  unint64_t v44 = (_OWORD *)(v8 + 16);
  else {
    unsigned __int8 v45 = v224 >> 11;
  }
  int v46 = *(_OWORD *)(v8 + 32);
  v298[6] = *v44;
  v298[7] = v46;
  v298[8] = *(_OWORD *)(v8 + 48);
  uint64_t result = BigString.utf8.getter();
  if (__OFSUB__(v45, v43 >> 11)) {
    goto LABEL_256;
  }
  unint64_t v47 = BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v287);
  uint64_t result = swift_release();
  if (v47 >> 10 < v43 >> 10)
  {
LABEL_257:
    __break(1u);
    goto LABEL_258;
  }

  int64_t v49 = v210[25];
  unint64_t v48 = v210[26];
  v264 = v282;
  v265 = v283;
  v266 = v284;
  v267 = v285;
  v268 = v231;
  v269 = v227;
  v270 = v226;
  v271 = v225;
  v263 = v8;
  v272 = v235;
  v273 = (uint64_t)v234;
  v274 = v233;
  v275 = v232;
  v276 = v224;
  v277 = v213;
  v278 = v212;
  v279 = v211;
  v280 = v49;
  v281 = v48;
  v223 = v49;
  BOOL v50 = *(void *)(v49 + 16);
  if (!v50)
  {
LABEL_258:
    __break(1u);
    goto LABEL_259;
  }

  unint64_t v51 = *(void *)(v8 + 64);
  unint64_t v52 = *(void *)(v8 + 72);
  unint64_t v53 = *(void *)(v8 + 80);
  *(void *)&v225 = *(void *)(v8 + 88);
  v208 = (_OWORD *)(v8 + 16);
  v196 = v48;
  *(void *)&v226 = v50;
  v235 = v52;
  if (v51)
  {
    unint64_t v54 = v230;
    if (v53 < (uint64_t)v230)
    {
LABEL_272:
      __break(1u);
      goto LABEL_273;
    }

    if (*(_WORD *)(v51 + 16) && (uint64_t)v230 < v53)
    {
      BOOL v55 = *(unsigned __int8 *)(v51 + 18);
      if (*(_BYTE *)(v51 + 18))
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        uint64_t result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v263);
        int v56 = v230;
        unint64_t v57 = v51;
        while (1)
        {
          size_t v60 = *(unsigned __int16 *)(v57 + 16);
          if (!*(_WORD *)(v57 + 16)) {
            goto LABEL_54;
          }
          pthread_t v61 = *(void *)(v57 + 40);
          unint64_t v26 = __OFSUB__(v56, v61);
          unint64_t v62 = v56 - v61;
          if (v26) {
            goto LABEL_245;
          }
          if (__OFADD__(v62, 1LL)) {
            goto LABEL_246;
          }
          if (v62 + 1 < 1)
          {
            size_t v60 = 0LL;
          }

          else
          {
            if ((_DWORD)v60 == 1)
            {
              int v56 = v62;
LABEL_54:
              if (v56) {
                goto LABEL_242;
              }
              goto LABEL_55;
            }

            unint64_t v63 = (uint64_t *)(v57 + 64);
            uint64_t v64 = 1LL;
            while (1)
            {
              int v65 = *v63;
              v63 += 3;
              int v56 = v62 - v65;
              if (__OFSUB__(v62, v65)) {
                goto LABEL_239;
              }
              if (__OFADD__(v56, 1LL)) {
                goto LABEL_240;
              }
              if (v56 + 1 < 1) {
                break;
              }
              ++v64;
              unint64_t v62 = v56;
              if (v60 == v64) {
                goto LABEL_54;
              }
            }

            size_t v60 = v64;
            int v56 = v62;
          }

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v37 = v24 & 0xFFFFFFFFFFFFF0FFLL | (v73 << 8);
LABEL_31:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v260, v37, v28, v11, v36);
  swift_unknownObjectRelease_n();
  uint64_t v38 = v25;
LABEL_32:
  int v39 = (uint64_t)v258;
  unint64_t v40 = *((_OWORD *)v258 + 2);
  v328[9] = *((_OWORD *)v258 + 1);
  v328[10] = v40;
  v328[11] = *((_OWORD *)v258 + 3);
  uint64_t result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v38))
  {
LABEL_276:
    __break(1u);
    goto LABEL_277;
  }

  unint64_t v41 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t result = outlined release of Locale((uint64_t)&v315);
  if (v260 != (uint64_t *)v258[11])
  {
LABEL_277:
    __break(1u);
LABEL_278:
    __break(1u);
LABEL_279:
    __break(1u);
    goto LABEL_280;
  }

  if (v28)
  {
    unint64_t v42 = (void *)(v28 + 24 * ((v37 >> ((4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C)) & 0xF));
    unint64_t v44 = v42[3];
    unint64_t v43 = v42[4];
    unsigned __int8 v45 = v42[5];
    swift_retain();
    v249 = v43;
    swift_bridgeObjectRetain();
    v225 = v45;
    uint64_t result = swift_bridgeObjectRetain();
  }

  else
  {
    int v46 = v258[8];
    swift_retain();
    swift_unknownObjectRetain();
    int v39 = (uint64_t)v258;
    unint64_t v44 = specialized Rope._Node.subscript.getter(v37, v46);
    v249 = v47;
    v225 = v48;
    uint64_t result = swift_unknownObjectRelease();
  }

  else {
    int64_t v49 = v41;
  }
  if (__OFADD__(v44, v41 >> 11)) {
    goto LABEL_278;
  }
  else {
    BOOL v50 = v251 >> 11;
  }
  unint64_t v51 = *(_OWORD *)(v39 + 32);
  v328[6] = *(_OWORD *)(v39 + 16);
  v328[7] = v51;
  v233 = (__int128 *)(v39 + 16);
  v328[8] = *(_OWORD *)(v39 + 48);
  uint64_t result = BigString.utf8.getter();
  if (__OFSUB__(v50, v49 >> 11)) {
    goto LABEL_279;
  }
  unint64_t v52 = BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v316);
  uint64_t result = swift_release();
  if (v52 >> 10 < v49 >> 10)
  {
LABEL_280:
    __break(1u);
    goto LABEL_281;
  }

  v293 = v311;
  v294 = v312;
  v295 = v313;
  unint64_t v54 = v234[25];
  unint64_t v53 = v234[26];
  v296 = v314;
  v297 = v261;
  v298 = v255;
  v299 = v254;
  v300 = v253;
  v292 = v39;
  v301 = v10;
  v302 = v257;
  v303 = v263;
  v304 = v262;
  v305 = v251;
  v306 = v237;
  v307 = v236;
  v308 = v235;
  v309 = v54;
  v310 = v53;
  v250 = v54;
  BOOL v55 = *(void *)(v54 + 16);
  if (!v55)
  {
LABEL_281:
    __break(1u);
    goto LABEL_282;
  }

  int v56 = *(void *)(v39 + 64);
  unint64_t v57 = *(__int128 **)(v39 + 72);
  unint64_t v58 = *(void *)(v39 + 80);
  *(void *)&v254 = *(void *)(v39 + 88);
  v240 = v53;
  if (v56)
  {
    if (v58 < v264)
    {
LABEL_295:
      __break(1u);
      goto LABEL_296;
    }

    if (*(_WORD *)(v56 + 16) && v264 < v58)
    {
      v263 = v57;
      int v59 = *(unsigned __int8 *)(v56 + 18);
      if (*(_BYTE *)(v56 + 18))
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        uint64_t result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v292);
        size_t v60 = v264;
        pthread_t v61 = v56;
        while (1)
        {
          uint64_t v64 = *(unsigned __int16 *)(v61 + 16);
          if (!*(_WORD *)(v61 + 16)) {
            goto LABEL_54;
          }
          int v65 = *(void *)(v61 + 40);
          unint64_t v31 = __OFSUB__(v60, v65);
          unint64_t v66 = v60 - v65;
          if (v31) {
            goto LABEL_268;
          }
          if (__OFADD__(v66, 1LL)) {
            goto LABEL_269;
          }
          if (v66 + 1 < 1)
          {
            uint64_t v64 = 0LL;
          }

          else
          {
            if ((_DWORD)v64 == 1)
            {
              size_t v60 = v66;
LABEL_54:
              if (v60) {
                goto LABEL_265;
              }
              goto LABEL_55;
            }

            char v67 = (uint64_t *)(v61 + 64);
            uint64_t v68 = 1LL;
            while (1)
            {
              unsigned int v69 = *v67;
              v67 += 3;
              size_t v60 = v66 - v69;
              if (__OFSUB__(v66, v69)) {
                goto LABEL_262;
              }
              if (__OFADD__(v60, 1LL)) {
                goto LABEL_263;
              }
              if (v60 + 1 < 1) {
                break;
              }
              ++v68;
              unint64_t v66 = v60;
              if (v64 == v68) {
                goto LABEL_54;
              }
            }

            uint64_t v64 = v68;
            size_t v60 = v66;
          }

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v34 = v23 & 0xFFFFFFFFFFFFF0FFLL | (v73 << 8);
LABEL_31:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v274, v34, v26, v11, v22);
  swift_unknownObjectRelease_n();
  unint64_t v35 = v13;
LABEL_32:
  unint64_t v36 = *(_OWORD *)(v7 + 32);
  v341[9] = *(_OWORD *)(v7 + 16);
  v341[10] = v36;
  v341[11] = *(_OWORD *)(v7 + 48);
  uint64_t result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v35))
  {
LABEL_279:
    __break(1u);
    goto LABEL_280;
  }

  unint64_t v37 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t result = outlined release of Locale((uint64_t)&v328);
  if (v274 != *(void **)(v7 + 88))
  {
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
LABEL_282:
    __break(1u);
    goto LABEL_283;
  }

  if (v26)
  {
    uint64_t v38 = (void *)(v26 + 24 * ((v34 >> ((4 * *(_BYTE *)(v26 + 18) + 8) & 0x3C)) & 0xF));
    unint64_t v40 = v38[3];
    int v39 = v38[4];
    unint64_t v41 = v38[5];
    swift_retain();
    v248 = v39;
    swift_bridgeObjectRetain();
    v238 = v41;
    uint64_t result = swift_bridgeObjectRetain();
  }

  else
  {
    unint64_t v42 = *(void *)(v7 + 64);
    swift_retain();
    swift_unknownObjectRetain();
    unint64_t v40 = specialized Rope._Node.subscript.getter(v34, v42);
    v248 = v43;
    v238 = v44;
    uint64_t result = swift_unknownObjectRelease();
  }

  else {
    unsigned __int8 v45 = v37;
  }
  if (__OFADD__(v40, v37 >> 11)) {
    goto LABEL_281;
  }
  else {
    int v46 = v265 >> 11;
  }
  unint64_t v47 = *(_OWORD *)(v7 + 32);
  v341[6] = *(_OWORD *)(v7 + 16);
  v341[7] = v47;
  v249 = (__int128 *)(v7 + 16);
  v341[8] = *(_OWORD *)(v7 + 48);
  uint64_t result = BigString.utf8.getter();
  if (__OFSUB__(v46, v45 >> 11)) {
    goto LABEL_282;
  }
  unint64_t v48 = BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v329);
  uint64_t result = swift_release();
  if (v48 >> 10 < v45 >> 10)
  {
LABEL_283:
    __break(1u);
    goto LABEL_284;
  }

  v306 = v324;
  v307 = v325;
  v308 = v326;
  BOOL v50 = v251[25];
  int64_t v49 = v251[26];
  v309 = v327;
  v310 = v275;
  v311 = v268;
  v312 = v267;
  v313 = v264;
  v305 = v7;
  v314 = v271;
  v315 = v270;
  v316 = v277;
  v317 = (uint64_t)v276;
  v318 = v265;
  v319 = v254;
  v320 = v253;
  v321 = v252;
  v322 = v50;
  v323 = v49;
  *(void *)&v264 = v50;
  unint64_t v51 = *(void *)(v50 + 16);
  if (!v51)
  {
LABEL_284:
    __break(1u);
    goto LABEL_285;
  }

  v258 = v49;
  unint64_t v52 = *(void *)(v7 + 64);
  unint64_t v53 = *(void *)(v7 + 72);
  BOOL v55 = *(void *)(v7 + 80);
  unint64_t v54 = *(void *)(v7 + 88);
  *(void *)&v267 = v51;
  v277 = v55;
  if (v52)
  {
    int v56 = v273;
    if (v55 < (uint64_t)v273)
    {
LABEL_298:
      __break(1u);
      goto LABEL_299;
    }

    if (*(_WORD *)(v52 + 16) && (uint64_t)v273 < v55)
    {
      v246 = v54;
      unint64_t v57 = *(unsigned __int8 *)(v52 + 18);
      if (*(_BYTE *)(v52 + 18))
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        uint64_t result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v305);
        unint64_t v58 = v273;
        int v59 = v52;
        while (1)
        {
          unint64_t v62 = *(unsigned __int16 *)(v59 + 16);
          if (!*(_WORD *)(v59 + 16)) {
            goto LABEL_54;
          }
          unint64_t v63 = *(void *)(v59 + 40);
          uint64_t v29 = __OFSUB__(v58, v63);
          uint64_t v64 = &v58[-v63];
          if (v29) {
            goto LABEL_271;
          }
          if (__OFADD__(v64, 1LL)) {
            goto LABEL_272;
          }
          if ((uint64_t)(v64 + 1) < 1)
          {
            unint64_t v62 = 0LL;
          }

          else
          {
            if ((_DWORD)v62 == 1)
            {
              unint64_t v58 = v64;
LABEL_54:
              if (v58) {
                goto LABEL_268;
              }
              goto LABEL_55;
            }

            int v65 = (uint64_t *)(v59 + 64);
            unint64_t v66 = 1LL;
            while (1)
            {
              char v67 = *v65;
              v65 += 3;
              unint64_t v58 = &v64[-v67];
              if (__OFSUB__(v64, v67)) {
                goto LABEL_265;
              }
              if (__OFADD__(v58, 1LL)) {
                goto LABEL_266;
              }
              ++v66;
              uint64_t v64 = v58;
              if (v62 == v66) {
                goto LABEL_54;
              }
            }

            unint64_t v62 = v66;
            unint64_t v58 = v64;
          }

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v37 = v25 & 0xFFFFFFFFFFFFF0FFLL | (v74 << 8);
  unint64_t v19 = v24;
  unint64_t v36 = v288;
LABEL_31:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v293, v37, v28, v12, v36);
  swift_unknownObjectRelease_n();
  uint64_t v38 = v14;
LABEL_32:
  int v39 = *(_OWORD *)(v8 + 32);
  v360[9] = *(_OWORD *)(v8 + 16);
  v360[10] = v39;
  v360[11] = *(_OWORD *)(v8 + 48);
  uint64_t result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v38))
  {
LABEL_291:
    __break(1u);
    goto LABEL_292;
  }

  v282 = v19;
  unint64_t v40 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t result = outlined release of Locale((uint64_t)&v347);
  if (v293 != *(void *)(v8 + 88))
  {
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
    goto LABEL_295;
  }

  if (v28)
  {
    unint64_t v41 = (void *)(v28 + 24 * ((v37 >> ((4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C)) & 0xF));
    unint64_t v43 = v41[3];
    unint64_t v42 = v41[4];
    unint64_t v44 = v41[5];
    swift_retain();
    v288 = v42;
    swift_bridgeObjectRetain();
    v257 = v44;
    uint64_t result = swift_bridgeObjectRetain();
  }

  else
  {
    unsigned __int8 v45 = *(void *)(v8 + 64);
    swift_retain();
    swift_unknownObjectRetain();
    unint64_t v43 = specialized Rope._Node.subscript.getter(v37, v45);
    v288 = v46;
    v257 = v47;
    uint64_t result = swift_unknownObjectRelease();
  }

  if (v287 >= v40 >> 10) {
    unint64_t v48 = (unint64_t)v291;
  }
  else {
    unint64_t v48 = v40;
  }
  if (__OFADD__(v43, v40 >> 11)) {
    goto LABEL_293;
  }
  else {
    int64_t v49 = v283 >> 11;
  }
  BOOL v50 = *(_OWORD *)(v8 + 32);
  v360[6] = *(_OWORD *)(v8 + 16);
  v360[7] = v50;
  v266 = (__int128 *)(v8 + 16);
  v360[8] = *(_OWORD *)(v8 + 48);
  uint64_t result = BigString.utf8.getter();
  if (__OFSUB__(v49, v48 >> 11)) {
    goto LABEL_294;
  }
  unint64_t v51 = BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v348);
  uint64_t result = swift_release();
  if (v51 >> 10 < v48 >> 10)
  {
LABEL_295:
    __break(1u);
    goto LABEL_296;
  }

  v325 = v343;
  v326 = v344;
  v327 = v345;
  unint64_t v53 = v268[25];
  unint64_t v52 = v268[26];
  v328 = v346;
  v329 = v294;
  v330 = v286;
  v331 = v285;
  v332 = v284;
  v324 = v8;
  v333 = v291;
  v334 = v282;
  v335 = (uint64_t)v296;
  v336 = v295;
  v337 = v283;
  v338 = v271;
  v339 = v270;
  v340 = v269;
  v341 = v53;
  v342 = v52;
  v282 = v53;
  unint64_t v54 = *(void *)(v53 + 16);
  if (!v54)
  {
LABEL_296:
    __break(1u);
    goto LABEL_297;
  }

  v274 = v52;
  BOOL v55 = *(void *)(v8 + 64);
  int v56 = *(void *)(v8 + 72);
  unint64_t v58 = *(void *)(v8 + 80);
  unint64_t v57 = *(void *)(v8 + 88);
  *(void *)&v285 = v54;
  v281 = v57;
  if (v55)
  {
    int v59 = v292;
    if (v58 < (uint64_t)v292)
    {
LABEL_310:
      __break(1u);
      goto LABEL_311;
    }

    if (*(_WORD *)(v55 + 16) && (uint64_t)v292 < v58)
    {
      v296 = (uint64_t *)v56;
      size_t v60 = *(unsigned __int8 *)(v55 + 18);
      if (*(_BYTE *)(v55 + 18))
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        uint64_t result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v324);
        pthread_t v61 = v55;
        while (1)
        {
          uint64_t v64 = *(unsigned __int16 *)(v61 + 16);
          if (!*(_WORD *)(v61 + 16)) {
            goto LABEL_54;
          }
          int v65 = *(void *)(v61 + 40);
          unint64_t v31 = __OFSUB__(v59, v65);
          unint64_t v66 = &v59[-v65];
          if (v31) {
            goto LABEL_283;
          }
          if (__OFADD__(v66, 1LL)) {
            goto LABEL_284;
          }
          if ((uint64_t)(v66 + 1) < 1)
          {
            uint64_t v64 = 0LL;
          }

          else
          {
            if ((_DWORD)v64 == 1)
            {
              int v59 = v66;
LABEL_54:
              if (v59) {
                goto LABEL_280;
              }
              goto LABEL_55;
            }

            char v67 = (uint64_t *)(v61 + 64);
            uint64_t v68 = 1LL;
            while (1)
            {
              unsigned int v69 = *v67;
              v67 += 3;
              int v59 = &v66[-v69];
              if (__OFSUB__(v66, v69)) {
                goto LABEL_277;
              }
              if (__OFADD__(v59, 1LL)) {
                goto LABEL_278;
              }
              ++v68;
              unint64_t v66 = v59;
              if (v64 == v68) {
                goto LABEL_54;
              }
            }

            uint64_t v64 = v68;
            int v59 = v66;
          }

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v30 = v19 & 0xFFFFFFFFFFFFF0FFLL | (v67 << 8);
  unint64_t v31 = v180;
LABEL_31:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v193, v30, v22, v7, v31);
  swift_unknownObjectRelease_n();
  unint64_t v32 = v9;
LABEL_32:
  unint64_t v33 = v184;
  unint64_t v34 = *((_OWORD *)v184 + 2);
  v264 = *((_OWORD *)v184 + 1);
  v265 = v34;
  v266 = *((_OWORD *)v184 + 3);
  BigString.utf8.getter();
  if (__OFSUB__(0LL, v32))
  {
LABEL_211:
    __break(1u);
    goto LABEL_212;
  }

  unint64_t v35 = BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v243);
  if (v193 != v184[11])
  {
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
    goto LABEL_215;
  }

  if (v22)
  {
    unint64_t v36 = (void *)(v22 + 24 * ((v30 >> ((4 * *(_BYTE *)(v22 + 18) + 8) & 0x3C)) & 0xF));
    unint64_t v37 = v36[3];
    uint64_t v38 = v36[4];
    int v39 = v36[5];
    swift_retain();
    v162 = v38;
    swift_bridgeObjectRetain();
    v163 = v39;
    swift_bridgeObjectRetain();
  }

  else
  {
    unint64_t v40 = v184[8];
    swift_retain();
    swift_unknownObjectRetain();
    unint64_t v33 = v184;
    unint64_t v37 = specialized Rope._Node.subscript.getter(v30, v40);
    v162 = v41;
    v163 = v42;
    swift_unknownObjectRelease();
  }

  if (v187 >= v35 >> 10) {
    unint64_t v43 = v196;
  }
  else {
    unint64_t v43 = v35;
  }
  if (__OFADD__(v37, v35 >> 11)) {
    goto LABEL_213;
  }
  else {
    unint64_t v44 = v185 >> 11;
  }
  unsigned __int8 v45 = *((_OWORD *)v33 + 2);
  v261 = *((_OWORD *)v33 + 1);
  v262 = v45;
  v175 = (__int128 *)(v33 + 2);
  v263 = *((_OWORD *)v33 + 3);
  BigString.utf8.getter();
  if (__OFSUB__(v44, v43 >> 11)) {
    goto LABEL_214;
  }
  int v46 = BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v244);
  swift_release();
  if (v46 >> 10 < v43 >> 10)
  {
LABEL_215:
    __break(1u);
    goto LABEL_216;
  }

  v187 = v2;
  v222 = v239;
  v223 = v240;
  v224 = v241;
  unint64_t v47 = *((void *)v176 + 25);
  v225 = v242;
  v226 = v190;
  v227 = v183;
  v228 = v182;
  v229 = v181;
  v221 = v33;
  v230 = v196;
  v231 = v189;
  v232 = v195;
  v233 = v194;
  v234 = v185;
  v235 = v179;
  v236 = v178;
  v237 = v177;
  v238 = v47;
  *(void *)&v183 = v47;
  v193 = *(void *)(v47 + 16);
  if (!v193)
  {
LABEL_216:
    __break(1u);
    goto LABEL_217;
  }

  unint64_t v48 = v33[8];
  int64_t v49 = v33[9];
  unint64_t v51 = v33[10];
  BOOL v50 = v33[11];
  if (!v48)
  {
    unint64_t v52 = v188;
    if (v187 >= 0x800)
    {
LABEL_231:
      __break(1u);
      goto LABEL_232;
    }

    goto LABEL_70;
  }

  unint64_t v52 = v188;
  if (v51 < v188)
  {
LABEL_230:
    __break(1u);
    goto LABEL_231;
  }

  if (!*(_WORD *)(v48 + 16) || v188 >= v51)
  {
LABEL_70:
    swift_unknownObjectRetain_n();
    swift_retain();
    outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)&v221);
    v189 = specialized Rope._endPath.getter(v48);
    swift_unknownObjectRelease();
    uint64_t v64 = 0LL;
    unint64_t v54 = 0LL;
    if (!v48)
    {
      int v65 = v50;
      unint64_t v66 = 0LL;
LABEL_105:
      *(void *)&v182 = v52 - v54;
      if (__OFSUB__(v52, v54))
      {
LABEL_217:
        __break(1u);
        goto LABEL_218;
      }

      unint64_t v79 = v175[1];
      v258 = *v175;
      v259 = v79;
      v260 = v175[2];
      BigString.utf8.getter();
      if (__OFSUB__(0LL, v54))
      {
LABEL_218:
        __break(1u);
        goto LABEL_219;
      }

      v161 = BigString.UTF8View.index(_:offsetBy:)();
      unint64_t v81 = v80;
      v159[1] = v83;
      v159[2] = v82;
      outlined release of Locale((uint64_t)&v245);
      v172 = v190;
      if (v66 >= (uint64_t)v190)
      {
LABEL_219:
        __break(1u);
        goto LABEL_220;
      }

      if (v65 != v33[11])
      {
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }

      v159[0] = v81;
      v84 = v33[8];
      if (v64)
      {
        v85 = v189;
        v86 = v64 + 24 * ((v189 >> ((4 * *(_BYTE *)(v64 + 18) + 8) & 0x3C)) & 0xF);
        unint64_t v87 = *(void *)(v86 + 40);
        *(void *)&v195 = *(void *)(v86 + 32);
        swift_bridgeObjectRetain();
        v160 = v87;
        swift_bridgeObjectRetain();
        unint64_t v88 = v65;
      }

      else
      {
        swift_unknownObjectRetain();
        v85 = v189;
        specialized Rope._Node.subscript.getter(v189, v84);
        *(void *)&v195 = v89;
        v160 = v90;
        swift_unknownObjectRelease();
        v84 = v33[8];
        unint64_t v88 = v33[11];
      }

      *(void *)&v181 = v66 + 1;
      v196 = (unint64_t)v250 + 8;
      *(void *)&v246 = v65;
      *((void *)&v246 + 1) = v85;
      v194 = (__int128 *)((char *)&v204 + 8);
      *(void *)&v247 = v64;
      v171 = (uint64_t *)(v183 + 40);
LABEL_113:
      if (v65 != v88) {
        goto LABEL_205;
      }
      v180 = v88;
      if (v64)
      {
        unint64_t v91 = *(void *)(v64 + 24 * ((v85 >> ((4 * *(_BYTE *)(v64 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else
      {
        swift_unknownObjectRetain();
        unint64_t v91 = specialized Rope._Node.subscript.getter(v85, v84);
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFADD__((void)v182, v91)) {
        goto LABEL_206;
      }
      v170 = v182 + v91;
      if (!v84) {
        goto LABEL_207;
      }
      unint64_t v92 = ((-15LL << ((4 * *(_BYTE *)(v84 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v84 + 18) | ((unint64_t)*(unsigned __int16 *)(v84 + 16) << ((4 * *(_BYTE *)(v84 + 18) + 8) & 0x3C));
      swift_unknownObjectRetain();
      if (v85 >= v92) {
        goto LABEL_207;
      }
      if (v64)
      {
        unint64_t v93 = (4 * *(_BYTE *)(v64 + 18) + 8) & 0x3C;
        unint64_t v94 = ((v85 >> v93) & 0xF) + 1;
        if (v94 < *(unsigned __int16 *)(v64 + 16))
        {
          uint64_t v95 = (v94 << v93) | ((-15LL << v93) - 1) & v85;
          swift_unknownObjectRelease_n();
LABEL_128:
          int v100 = v247;
LABEL_129:
          v101 = v195;
LABEL_133:
          if ((void)v181 == v172)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_174:
            if (v180 == v33[11])
            {
              if (v64)
              {
                v133 = *(void *)(v64 + 24 * ((v85 >> ((4 * *(_BYTE *)(v64 + 18) + 8) & 0x3C)) & 0xF) + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }

              else
              {
                v134 = v33[8];
                swift_unknownObjectRetain();
                v133 = specialized Rope._Node.subscript.getter(v85, v134);
                swift_unknownObjectRelease();
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v135 = v182 + v133;
              if (!__OFADD__((void)v182, v133))
              {
                v136 = v175[1];
                v202 = *v175;
                v137 = v175[2];
                v203 = v136;
                v204 = v137;
                BigString.utf8.getter();
                if (!__OFSUB__(v135, v161 >> 11))
                {
                  v138 = BigString.UTF8View.index(_:offsetBy:)();
                  v140 = v139;
                  v142 = v141;
                  v144 = v143;
                  outlined release of Locale((uint64_t)&v216);
                  swift_release();
                  outlined release of AttributedString.Runs.NSAttributesSlice.Iterator((uint64_t)&v221);
                  if (v166 >= v138 >> 10) {
                    v145 = v138;
                  }
                  else {
                    v145 = v185;
                  }
                  if (v166 >= v138 >> 10) {
                    v146 = v140;
                  }
                  else {
                    v146 = v179;
                  }
                  if (v166 < v138 >> 10)
                  {
                    v142 = v178;
                    v144 = v177;
                  }

                  if (v145 >> 10 >= v167)
                  {
                    v147 = v176;
                    v148 = *((void *)v176 + 26);
                    if (v145 >> 10 >= v148 >> 10)
                    {
                      v196 = *((void *)v176 + 29);
                      v195 = *(__int128 *)((char *)v176 + 216);
                      *((void *)v176 + 26) = v145;
                      *((void *)v147 + 27) = v146;
                      *((void *)v147 + 2_Block_object_dispose((const void *)(v17 - 128), 8) = v142;
                      *((void *)v147 + 29) = v144;
                      v149 = v147[11];
                      v255 = v147[10];
                      v256 = v149;
                      v257 = v147[12];
                      v150 = v147[7];
                      v251 = v147[6];
                      v252 = v150;
                      v151 = v147[9];
                      v253 = v147[8];
                      v254 = v151;
                      v152 = v147[3];
                      v248 = v147[2];
                      v249 = v152;
                      v153 = v147[5];
                      v250[0] = v147[4];
                      v250[1] = v153;
                      v154 = v147[1];
                      v246 = *v147;
                      v247 = v154;
                      outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)&v246);
                      outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)&v246);
                      v155 = swift_bridgeObjectRetain();
                      v156 = specialized _NativeDictionary.filter(_:)(v155, (uint64_t)&v246);
                      swift_release();
                      swift_bridgeObjectRelease_n();
                      outlined release of AttributedString.Runs.NSAttributesSlice.Iterator((uint64_t)&v246);
                      v157 = v165;
                      v158 = v163;
                      *v165 = v156;
                      v157[1] = v158;
                      v157[2] = v148;
                      *(_OWORD *)(v157 + 3) = v195;
                      v157[5] = v196;
                      v157[6] = v145;
                      v157[7] = v146;
                      v157[8] = v142;
                      v157[9] = v144;
                      return;
                    }

                    goto LABEL_225;
                  }

      __break(1u);
      goto LABEL_97;
    }
  }

  if (v7) {
    uint64_t v13 = v6[9];
  }
  else {
    uint64_t v13 = 0LL;
  }
  if (v4 < 0 || v13 < v4) {
    goto LABEL_101;
  }
  if (!v7 || (v4 < v8 ? (uint64_t v14 = *(unsigned __int16 *)(v7 + 16) == 0) : (uint64_t v14 = 1), v14))
  {
    unint64_t v15 = swift_unknownObjectRetain_n();
    uint64_t v11 = specialized Rope._endPath.getter(v15);
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    uint64_t v5 = 0LL;
    if (!v7)
    {
      unint64_t v12 = 0LL;
      goto LABEL_66;
    }

        __break(1u);
        goto LABEL_97;
      }

  if (!v52)
  {
LABEL_106:
    LODWORD(v56) = -1;
    goto LABEL_108;
  }

  if ((v52 & 0x1000000000000000LL) != 0)
  {
LABEL_230:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
    _StringGuts._slowWithCString<A>(_:)();
    goto LABEL_105;
  }

  if ((v52 & 0x2000000000000000LL) == 0)
  {
    if ((*(void *)v179 & 0x1000000000000000LL) != 0)
    {
      unint64_t v62 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s6UInt32VSg_Tg507_sSRys4f5VGxs5e30_pIgyrzo_ACxsAD_pIegyrzr_lTRs6h77VSg_TG5038_ss11_StringGutsV11withCStringyxxSPys4a23VGKXEKlFxSRyAEGKXEfU_s6c75Q114_TG5062_s10Foundation16_FileManagerImplV24_userAccountNameToNumberys6f14O29SSFZAGSPys4E7VGXEfU_Tf3nnpf_nTf3nnnpf_nTf1cn_nTm( (v52 & 0xFFFFFFFFFFFFFFFLL) + 32,  *(void *)v179 & 0xFFFFFFFFFFFFLL,  (uint64_t (*)(void))MEMORY[0x1895FB568]);
      LODWORD(v19_Block_object_dispose((const void *)(v17 - 128), 8) = v62;
      BYTE4(v19_Block_object_dispose((const void *)(v17 - 128), 8) = BYTE4(v62) & 1;
      goto LABEL_105;
    }

    goto LABEL_230;
  }

  *(void *)&v189.f_bsize = *(void *)v179;
  v189.f_blocks = v52 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v63 = getgrnam((const char *)&v189);
  if (v63) {
    gr_gid = v63->gr_gid;
  }
  else {
    gr_gid = 0;
  }
  LODWORD(v19_Block_object_dispose((const void *)(v17 - 128), 8) = gr_gid;
  BYTE4(v19_Block_object_dispose((const void *)(v17 - 128), 8) = v63 == 0LL;
LABEL_105:
  swift_bridgeObjectRelease();
  if ((BYTE4(v198) & 1) != 0) {
    goto LABEL_106;
  }
  LODWORD(v56) = LODWORD(v198);
LABEL_108:
  if (!chown(v13, v44, v56)) {
    goto LABEL_111;
  }
  int v65 = MEMORY[0x186E1B0E8]();
  LODWORD(v23) = v65;
  unint64_t v66 = 4LL;
  char v67 = v182;
  uint64_t v13 = v183;
  switch(v65)
  {
    case 1:
    case 13:
      unint64_t v66 = 513LL;
      goto LABEL_128;
    case 2:
      goto LABEL_128;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      goto LABEL_123;
    case 17:
      unint64_t v66 = 516LL;
      goto LABEL_128;
    case 28:
    case 69:
      unint64_t v66 = 640LL;
      goto LABEL_128;
    case 30:
      unint64_t v66 = 642LL;
      goto LABEL_128;
    case 63:
      unint64_t v66 = 514LL;
      goto LABEL_128;
    default:
      char v67 = v182;
      uint64_t v13 = v183;
      if (v65 == 102)
      {
        uint64_t v72 = 0LL;
        unint64_t v66 = 512LL;
      }

      else
      {
LABEL_123:
        unint64_t v66 = 512LL;
LABEL_128:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
          goto LABEL_282;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        v73 = (int)POSIXErrorCode.rawValue.getter();
        int v74 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        double v75 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v72 = objc_msgSend(v74, sel_initWithDomain_code_userInfo_, v75, v73, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v76 = objc_msgSend(v72, sel_domain);
        unint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
        unint64_t v15 = v78;

        unint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        LODWORD(v23) = v80;
        if (v77 == v79 && v15 == v80)
        {
          swift_bridgeObjectRelease_n();
        }

        else
        {
          unint64_t v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v81 & 1) == 0)
          {
            __break(1u);
            goto LABEL_237;
          }
        }
      }

      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v66,  a2,  v187,  v72,  0LL,  0LL,  0LL,  0LL,  &v189,  0LL,  0LL);
      swift_willThrow();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v180);
      uint64_t v68 = (uint64_t)v67;
      break;
  }

        if ((v70 & 1) != 0) {
          goto LABEL_136;
        }
        unint64_t v78 = &v45[16 * v47];
        v80 = *(void *)v78;
        unint64_t v79 = *((void *)v78 + 1);
        unint64_t v58 = __OFSUB__(v79, v80);
        unint64_t v81 = v79 - v80;
        if (v58) {
          goto LABEL_139;
        }
        if (v81 < v69) {
          goto LABEL_15;
        }
LABEL_104:
        v86 = v47 - 1;
        if (v47 - 1 >= v11)
        {
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }

        unint64_t v87 = *v10;
        if (!*v10) {
          goto LABEL_154;
        }
        unint64_t v88 = v9;
        unint64_t v89 = &v45[16 * v86];
        unint64_t v90 = *(void *)v89;
        unint64_t v91 = &v45[16 * v47];
        unint64_t v92 = *((void *)v91 + 1);
        unint64_t v93 = v112;
        specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v87 + 56LL * *(void *)v89),  (char *)(v87 + 56LL * *(void *)v91),  v87 + 56 * v92,  __dst);
        v112 = v93;
        if (v93) {
          goto LABEL_112;
        }
        if (v92 < v90) {
          goto LABEL_129;
        }
        if (v47 > *((void *)v88 + 2)) {
          goto LABEL_130;
        }
        *(void *)unint64_t v89 = v90;
        *(void *)&v45[16 * v86 + 8] = v92;
        unint64_t v94 = *((void *)v88 + 2);
        if (v47 >= v94) {
          goto LABEL_131;
        }
        unint64_t v9 = v88;
        uint64_t v11 = v94 - 1;
        memmove(&v45[16 * v47], v91 + 16, 16 * (v94 - 1 - v47));
        *((void *)v88 + 2) = v94 - 1;
        double v75 = v94 > 2;
        uint64_t v10 = a1;
        if (!v75) {
          goto LABEL_15;
        }
      }
    }

    uint64_t v11 = 1LL;
    uint64_t v10 = a1;
LABEL_15:
    uint64_t v2 = v10[1];
    if (v8 >= v2)
    {
      unint64_t v7 = v104;
      goto LABEL_115;
    }
  }

        __break(1u);
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }

          __break(1u);
          goto LABEL_97;
        }

        uint64_t v24 = *(void *)(v143 + 8 * v26);
        if (!v24)
        {
          while (1)
          {
            unint64_t v25 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_95;
            }
            uint64_t v24 = *(void *)(v143 + 8 * v25);
            ++v26;
            if (v24) {
              goto LABEL_20;
            }
          }
        }

        unint64_t v25 = v149 + 4;
LABEL_20:
        unint64_t v18 = (v24 - 1) & v24;
        v149 = v25;
        unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_21:
        unint64_t v27 = (uint64_t *)(*(void *)(v147 + 48) + 16 * v22);
        unint64_t v28 = *v27;
        unint64_t v9 = (uint64_t *)v27[1];
        uint64_t v29 = *(void *)(v147 + 56) + 48 * v22;
        a3 = *(void *)v29;
        unint64_t v8 = *(void *)(v29 + 8);
        uint64_t v30 = *(void *)(v29 + 16);
        uint64_t v11 = *(void *)(v29 + 24);
        uint64_t v10 = *(void **)(v29 + 32);
        unint64_t v31 = *(unsigned __int8 *)(v29 + 40);
        if (*v27 != countAndFlagsBits || v9 != object)
        {
          unint64_t v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          object = (uint64_t *)v151._object;
          countAndFlagsBits = v151._countAndFlagsBits;
          if ((v33 & 1) == 0) {
            continue;
          }
        }

        if ((v31 & 1) == 0)
        {
          outlined copy of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 0);
          swift_retain();
          _StringGuts.grow(_:)(57LL);
          v114._object = (void *)0x80000001839CF3A0LL;
          v114._countAndFlagsBits = 0xD000000000000014LL;
          String.append(_:)(v114);
          v115._countAndFlagsBits = AnyKeyPath.debugDescription.getter();
          String.append(_:)(v115);
          swift_bridgeObjectRelease();
          v116._countAndFlagsBits = 0x2720646E612027LL;
          v116._object = (void *)0xE700000000000000LL;
          String.append(_:)(v116);
          swift_getKeyPath();
          dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          swift_getAtKeyPath();
          swift_release();
          v117._countAndFlagsBits = String.init(cString:)();
          String.append(_:)(v117);
          swift_bridgeObjectRelease();
          v118._countAndFlagsBits = 46LL;
          v118._object = (void *)0xE100000000000000LL;
          String.append(_:)(v118);
          v119._countAndFlagsBits = v12;
          v119._object = v140;
          String.append(_:)(v119);
          v120._countAndFlagsBits = 92LL;
          v120._object = (void *)0xE100000000000000LL;
          String.append(_:)(v120);
          swift_bridgeObjectRelease();
          v121._countAndFlagsBits = 0xD000000000000017LL;
          v121._object = (void *)0x80000001839CF3C0LL;
          String.append(_:)(v121);
          String.append(_:)(v151);
          v122._countAndFlagsBits = 39LL;
          v122._object = (void *)0xE100000000000000LL;
          String.append(_:)(v122);
          goto LABEL_138;
        }

        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
        if (a3 != a1) {
          goto LABEL_136;
        }
        if (v11 == v12 && v10 == v140)
        {
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v12, (uint64_t)v140, 1);
        }

        else
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_136;
          }
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
        }

        swift_bridgeObjectRelease();
        return swift_release();
      }

      while (!v31);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
      swift_bridgeObjectRetain();
      swift_release();
      if (a3 != a1)
      {
        outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }

      if (v11 == v12 && v10 == v140) {
        break;
      }
      unint64_t v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v35 & 1) != 0) {
        goto LABEL_37;
      }
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
LABEL_29:
      swift_bridgeObjectRelease();
      object = (uint64_t *)v151._object;
      countAndFlagsBits = v151._countAndFlagsBits;
    }

    swift_bridgeObjectRelease();
LABEL_37:
    unint64_t v12 = (uint64_t)v139;
    swift_bridgeObjectRetain();
    v137 = specialized __RawDictionaryStorage.find<A>(_:)(v28, (uint64_t)v9);
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((v37 & 1) != 0) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_42:
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
    object = (uint64_t *)v151._object;
    countAndFlagsBits = v151._countAndFlagsBits;
  }

  uint64_t v38 = swift_isUniquelyReferenced_nonNull_native();
  int v39 = *v139;
  *v139 = 0x8000000000000000LL;
  if ((v38 & 1) != 0)
  {
    unint64_t v40 = v39;
LABEL_40:
    swift_bridgeObjectRelease();
    unint64_t v41 = *(void *)(v40 + 56) + 48 * v137;
    unint64_t v42 = *(void *)v41;
    v133 = *(void *)(v41 + 16);
    v135 = *(void *)(v41 + 8);
    v129 = *(void *)(v41 + 32);
    v131 = *(void *)(v41 + 24);
    v127 = *(_BYTE *)(v41 + 40);
    specialized _NativeDictionary._delete(at:)(v137, v40);
    *v139 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v42, v135, v133, v131, v129, v127);
    goto LABEL_42;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
  unint64_t v43 = static _DictionaryStorage.copy(original:)();
  v126 = v43;
  if (!*(void *)(v39 + 16))
  {
LABEL_75:
    swift_bridgeObjectRelease();
    unint64_t v40 = v126;
    goto LABEL_40;
  }

  unint64_t v44 = v43;
  unsigned __int8 v45 = (char *)(v43 + 64);
  int v46 = (char *)(v39 + 64);
  unint64_t v47 = (unint64_t)((1LL << *(_BYTE *)(v44 + 32)) + 63) >> 6;
  v123 = v39 + 64;
  if (v44 != v39 || v45 >= &v46[8 * v47])
  {
    memmove(v45, v46, 8 * v47);
    unint64_t v44 = v126;
  }

  unint64_t v48 = 0LL;
  *(void *)(v44 + 16) = *(void *)(v39 + 16);
  int64_t v49 = 1LL << *(_BYTE *)(v39 + 32);
  if (v49 < 64) {
    BOOL v50 = ~(-1LL << v49);
  }
  else {
    BOOL v50 = -1LL;
  }
  unint64_t v51 = v50 & *(void *)(v39 + 64);
  v124 = (unint64_t)(v49 + 63) >> 6;
  v125 = v39;
  while (2)
  {
    if (v51)
    {
      v134 = v48;
      v136 = (v51 - 1) & v51;
      unint64_t v52 = __clz(__rbit64(v51)) | (v48 << 6);
      unint64_t v54 = v125;
      unint64_t v53 = v126;
LABEL_52:
      BOOL v55 = 16 * v52;
      int v56 = (uint64_t *)(*(void *)(v54 + 48) + 16 * v52);
      unint64_t v58 = *v56;
      unint64_t v57 = v56[1];
      int v59 = 48 * v52;
      size_t v60 = *(void *)(v54 + 56) + v59;
      unint64_t v12 = *(void *)v60;
      pthread_t v61 = *(void *)(v60 + 8);
      unint64_t v62 = *(void *)(v60 + 16);
      v130 = *(void *)(v60 + 32);
      v132 = *(void *)(v60 + 24);
      unint64_t v63 = *(_BYTE *)(v60 + 40);
      v128 = v63;
      uint64_t v64 = (void *)(*(void *)(v53 + 48) + v55);
      *uint64_t v64 = v58;
      v64[1] = v57;
      int v65 = *(void *)(v53 + 56) + v59;
      *(void *)int v65 = v12;
      *(void *)(v65 + _Block_object_dispose((const void *)(v17 - 128), 8) = v61;
      *(void *)(v65 + 16) = v62;
      *(void *)(v65 + 24) = v132;
      *(void *)(v65 + 32) = v130;
      *(_BYTE *)(v65 + 40) = v63;
      swift_bridgeObjectRetain();
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v12, v61, v62, v132, v130, v128);
      unint64_t v48 = v134;
      unint64_t v51 = v136;
      continue;
    }

    break;
  }

  unint64_t v66 = v48 + 1;
  unint64_t v54 = v125;
  unint64_t v53 = v126;
  if (__OFADD__(v48, 1LL))
  {
    __break(1u);
    goto LABEL_133;
  }

  if (v66 >= v124) {
    goto LABEL_75;
  }
  char v67 = *(void *)(v123 + 8 * v66);
  uint64_t v68 = v48 + 1;
  if (v67) {
    goto LABEL_74;
  }
  uint64_t v68 = v48 + 2;
  if (v48 + 2 >= v124) {
    goto LABEL_75;
  }
  char v67 = *(void *)(v123 + 8 * v68);
  if (v67) {
    goto LABEL_74;
  }
  uint64_t v68 = v48 + 3;
  if (v48 + 3 >= v124) {
    goto LABEL_75;
  }
  char v67 = *(void *)(v123 + 8 * v68);
  if (v67) {
    goto LABEL_74;
  }
  uint64_t v68 = v48 + 4;
  if (v48 + 4 >= v124) {
    goto LABEL_75;
  }
  char v67 = *(void *)(v123 + 8 * v68);
  if (v67) {
    goto LABEL_74;
  }
  uint64_t v68 = v48 + 5;
  if (v48 + 5 >= v124) {
    goto LABEL_75;
  }
  char v67 = *(void *)(v123 + 8 * v68);
  if (v67) {
    goto LABEL_74;
  }
  uint64_t v68 = v48 + 6;
  if (v48 + 6 >= v124) {
    goto LABEL_75;
  }
  char v67 = *(void *)(v123 + 8 * v68);
  if (v67)
  {
LABEL_74:
    v134 = v68;
    v136 = (v67 - 1) & v67;
    unint64_t v52 = __clz(__rbit64(v67)) + (v68 << 6);
    goto LABEL_52;
  }

  unsigned int v69 = v48 + 7;
  if (v48 + 7 >= v124) {
    goto LABEL_75;
  }
  char v67 = *(void *)(v123 + 8 * v69);
  if (v67)
  {
    uint64_t v68 = v48 + 7;
    unint64_t v54 = v125;
    unint64_t v53 = v126;
    goto LABEL_74;
  }

  unint64_t v54 = v125;
  unint64_t v53 = v126;
  while (1)
  {
    uint64_t v68 = v69 + 1;
    if (__OFADD__(v69, 1LL)) {
      break;
    }
    if (v68 >= v124) {
      goto LABEL_75;
    }
    char v67 = *(void *)(v123 + 8 * v68);
    ++v69;
    if (v67) {
      goto LABEL_74;
    }
  }

                    unint64_t v33 = 512LL;
LABEL_100:
                    v176 = v33;
                    swift_retain_n();
                    pthread_t v61 = v34;
                    swift_retain_n();
                    unint64_t v62 = v61;
                    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
                      goto LABEL_212;
                    }
                    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                    unint64_t v63 = (int)POSIXErrorCode.rawValue.getter();
                    uint64_t v64 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
                    int v65 = String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    unint64_t v66 = (char *)objc_msgSend( v64,  sel_initWithDomain_code_userInfo_,  v65,  v63,  _NativeDictionary.bridged()());
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    size_t v60 = v66;
                    char v67 = objc_msgSend(v66, sel_domain);
                    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
                    uint64_t v13 = v69;

                    if (v68 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                      && v13 == v70)
                    {
                      swift_bridgeObjectRelease_n();
LABEL_105:
                      uint64_t v11 = v171;
                      goto LABEL_106;
                    }

                    uint64_t v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v71 & 1) != 0) {
                      goto LABEL_105;
                    }
                    break;
                }

          swift_release();
LABEL_97:
          v108 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, a4);
          v109 = objc_msgSend(v108, sel_description);

          v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
          v112 = v111;

          v184[0] = v110;
          v184[1] = v112;
          v113._countAndFlagsBits = 2108704LL;
          v113._object = (void *)0xE300000000000000LL;
          String.append(_:)(v113);
          v114 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, a5);
          v115 = objc_msgSend(v114, sel_description);

          v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
          v118 = v117;

          v119._countAndFlagsBits = (uint64_t)v116;
          v119._object = v118;
          String.append(_:)(v119);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          v101 = v184[0];
          v103 = v184[1];
LABEL_98:
          v184[0] = v101;
          v184[1] = v103;
          return String.init<A>(_:)();
        }

        v105 = swift_slowAlloc();
        LODWORD(v183[0]) = 0;
        v106 = udtitvfmt_format();
        if (SLODWORD(v183[0]) > 0 || v106 < 1)
        {
          MEMORY[0x186E20E60](v105, -1LL, -1LL);
          goto LABEL_96;
        }

        v101 = specialized String.init(_utf16:)(v105, v106);
        v103 = v107;
        MEMORY[0x186E20E60](v105, -1LL, -1LL);
      }

      else
      {
        v101 = specialized String.init(_utf16:)((uint64_t)v121, isStackAllocationSafe);
        v103 = v104;
      }

        unint64_t v51 = (v59 - 1) & v59;
        unint64_t v57 = __clz(__rbit64(v59)) + (v50 << 6);
      }

      pthread_t v61 = *(void *)(v1 + 56);
      unint64_t v62 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v57);
      uint64_t v64 = *v62;
      unint64_t v63 = v62[1];
      outlined init with copy of AttributedString._AttributeValue(v61 + 72 * v57, (uint64_t)&v121);
      v117 = v123;
      v118 = v124;
      v119 = v125;
      v115 = v121;
      v116 = v122;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      int v65 = Hasher._finalize()();
      unint64_t v66 = -1LL << *(_BYTE *)(v49 + 32);
      char v67 = v65 & ~v66;
      uint64_t v68 = v67 >> 6;
      if (((-1LL << v67) & ~*(void *)(v52 + 8 * (v67 >> 6))) != 0)
      {
        unint64_t v53 = __clz(__rbit64((-1LL << v67) & ~*(void *)(v52 + 8 * (v67 >> 6)))) | v67 & 0x7FFFFFFFFFFFFFC0LL;
        goto LABEL_78;
      }

      unsigned int v69 = 0;
      uint64_t v70 = (unint64_t)(63 - v66) >> 6;
      do
      {
        if (++v68 == v70 && (v69 & 1) != 0)
        {
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
          goto LABEL_150;
        }

        uint64_t v71 = v68 == v70;
        if (v68 == v70) {
          uint64_t v68 = 0LL;
        }
        v69 |= v71;
        uint64_t v72 = *(void *)(v52 + 8 * v68);
      }

      while (v72 == -1);
      unint64_t v53 = __clz(__rbit64(~v72)) + (v68 << 6);
LABEL_78:
      *(void *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v53;
      unint64_t v54 = (void *)(*(void *)(v49 + 48) + 16 * v53);
      *unint64_t v54 = v64;
      v54[1] = v63;
      BOOL v55 = *(void *)(v49 + 56) + 72 * v53;
      *(_OWORD *)(v55 + 16) = v116;
      *(_OWORD *)(v55 + 32) = v117;
      *(_OWORD *)(v55 + 4_Block_object_dispose((const void *)(v17 - 128), 8) = v118;
      *(void *)(v55 + 64) = v119;
      *(_OWORD *)BOOL v55 = v115;
      ++*(void *)(v49 + 16);
      --v27;
      uint64_t v1 = v107;
      if (!v27) {
        return v49;
      }
    }
  }

  swift_retain();
  return v1;
}

                swift_bridgeObjectRelease();
                goto LABEL_97;
              }
            }

            __dst[0] = *(_OWORD *)&v337._nsError._domain;
            __dst[1] = v338;
            *(void *)&__dst[2] = v339;
            __tp.tv_sec = 0LL;
            __tp.tv_nsec = 0LL;
            clock_gettime(_CLOCK_REALTIME, &__tp);
            *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
            v108 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
            *(void *)&__dst[0] = 0LL;
            *((void *)&__dst[0] + 1) = 0xE000000000000000LL;
            _StringGuts.grow(_:)(88LL);
            v109._countAndFlagsBits = 0x7020746F6E6E6143LL;
            v109._object = (void *)0xED00002065737261LL;
            String.append(_:)(v109);
            v110._countAndFlagsBits = a1;
            v110._object = a2;
            String.append(_:)(v110);
            v111._object = (void *)0x80000001839CAB20LL;
            v111._countAndFlagsBits = 0xD000000000000046LL;
            String.append(_:)(v111);
            String.append(_:)(v108);
            v112._countAndFlagsBits = 46LL;
            v112._object = (void *)0xE100000000000000LL;
            String.append(_:)(v112);
            v113 = __dst[0];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
            v114 = swift_allocObject();
            v115 = specialized static Array._adoptStorage(_:count:)(v114, 1LL);
            v117 = v116;
            *v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
            v117[1] = v118;
            v117[5] = (id)MEMORY[0x189617FA8];
            *((_OWORD *)v117 + 1) = v113;
            v119 = destructiveProjectEnumData for PredicateCodableError(v115, v118);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
            v120 = (void *)static _DictionaryStorage.allocate(capacity:)();
            outlined init with copy of (String, Any)(v119 + 32, (uint64_t)__dst);
            v121 = __dst[0];
            swift_retain();
            v122 = specialized __RawDictionaryStorage.find<A>(_:)(v121, *((uint64_t *)&v121 + 1));
            if ((v123 & 1) == 0)
            {
              v120[(v122 >> 6) + 8] |= 1LL << v122;
              *(_OWORD *)(v120[6] + 16 * v122) = v121;
              outlined init with take of Any(&__dst[1], (_OWORD *)(v120[7] + 32 * v122));
              v124 = v120[2];
              unint64_t v40 = __OFADD__(v124, 1LL);
              v125 = v124 + 1;
              if (!v40)
              {
                v120[2] = v125;
                swift_release();
                swift_bridgeObjectRelease();
                static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                v126 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
                v127 = String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v128 = objc_msgSend( v126,  sel_initWithDomain_code_userInfo_,  v127,  2048,  _NativeDictionary.bridged()());
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                v129 = objc_msgSend(v128, sel_domain);
                v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
                v132 = v131;

                v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                a2 = v134;
                if (v130 == v133 && v132 == v134) {
                  goto LABEL_176;
                }
                a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((a1 & 1) != 0) {
                  goto LABEL_216;
                }
                __break(1u);
LABEL_90:
                __dst[0] = *(_OWORD *)&v337._nsError._domain;
                __dst[1] = v338;
                *(void *)&__dst[2] = v339;
                __tp.tv_sec = 0LL;
                __tp.tv_nsec = 0LL;
                clock_gettime(_CLOCK_REALTIME, &__tp);
                *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
                v135 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                *(void *)&__dst[0] = 0LL;
                *((void *)&__dst[0] + 1) = 0xE000000000000000LL;
                _StringGuts.grow(_:)(88LL);
                v136._countAndFlagsBits = 0x7020746F6E6E6143LL;
                v136._object = (void *)0xED00002065737261LL;
                String.append(_:)(v136);
                v137._countAndFlagsBits = a1;
                v137._object = a2;
                String.append(_:)(v137);
                v138._object = (void *)0x80000001839CAB20LL;
                v138._countAndFlagsBits = 0xD000000000000046LL;
                String.append(_:)(v138);
                String.append(_:)(v135);
                v139._countAndFlagsBits = 46LL;
                v139._object = (void *)0xE100000000000000LL;
                String.append(_:)(v139);
                v140 = __dst[0];
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                v141 = swift_allocObject();
                v142 = specialized static Array._adoptStorage(_:count:)(v141, 1LL);
                v144 = v143;
                *v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
                v144[1] = v145;
                v144[5] = (id)MEMORY[0x189617FA8];
                *((_OWORD *)v144 + 1) = v140;
                v146 = destructiveProjectEnumData for PredicateCodableError(v142, v145);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                v147 = (void *)static _DictionaryStorage.allocate(capacity:)();
                outlined init with copy of (String, Any)(v146 + 32, (uint64_t)__dst);
                v148 = __dst[0];
                swift_retain();
                v149 = specialized __RawDictionaryStorage.find<A>(_:)(v148, *((uint64_t *)&v148 + 1));
                if ((v150 & 1) == 0)
                {
                  v147[(v149 >> 6) + 8] |= 1LL << v149;
                  *(_OWORD *)(v147[6] + 16 * v149) = v148;
                  outlined init with take of Any(&__dst[1], (_OWORD *)(v147[7] + 32 * v149));
                  v151 = v147[2];
                  unint64_t v40 = __OFADD__(v151, 1LL);
                  v152 = v151 + 1;
                  if (!v40)
                  {
                    v147[2] = v152;
                    swift_release();
                    swift_bridgeObjectRelease();
                    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                    v153 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
                    v154 = String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    unint64_t v7 = objc_msgSend( v153,  sel_initWithDomain_code_userInfo_,  v154,  2048,  _NativeDictionary.bridged()());
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    a3 = (char *)objc_msgSend(v7, sel_domain);
                    v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                    v157 = v156;

                    v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                    a2 = v159;
                    if (v155 == v158 && v157 == v159) {
                      goto LABEL_176;
                    }
                    a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((a1 & 1) != 0) {
                      goto LABEL_216;
                    }
                    __break(1u);
                    goto LABEL_96;
                  }

              v76 = specialized _ArrayBuffer._consumeAndCreateNew()(v76);
              unint64_t v77 = v76[2];
              if (v77) {
                goto LABEL_62;
              }
              goto LABEL_97;
            }

            if (v63 < 1 || (v59 & 1) == 0) {
              goto LABEL_146;
            }
            unint64_t v58 = 0LL;
            int v59 = 0;
            size_t v60 = 0;
            v47 += v61 + 1;
            unint64_t v57 = 1;
            if (v47 >= v21) {
              goto LABEL_243;
            }
            continue;
        }

        goto LABEL_102;
      }
    }

    unsigned __int8 v45 = 0LL;
    int v46 = v19;
    while (1)
    {
      if (v45 < 0 || (unint64_t v33 = v46 < 1, --v46, v33))
      {
        __break(1u);
LABEL_242:
        __break(1u);
LABEL_243:
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
        goto LABEL_250;
      }

      unint64_t v47 = (unint64_t)&v18[++v45];
    }

    v83[(v100 >> 6) + 8] |= 1LL << v100;
    v106 = (uint64_t *)(v83[6] + 16 * v100);
    *v106 = v90;
    v106[1] = v91;
    v107 = (void *)(v83[7] + 16 * v100);
    *v107 = v96;
    v107[1] = v105;
    v108 = v83[2];
    unint64_t v44 = __OFADD__(v108, 1LL);
    v109 = v108 + 1;
    if (v44) {
      goto LABEL_224;
    }
    v83[2] = v109;
LABEL_89:
    unint64_t v90 = specialized LazyMapSequence.Iterator.next()(v93);
    unint64_t v91 = v95;
    v84 = 1;
    unint64_t v92 = v83;
    if (!v95) {
      goto LABEL_130;
    }
  }

  v112 = (void *)(v110 + 64);
  v113 = (unint64_t)((1LL << *((_BYTE *)v83 + 32)) + 63) >> 6;
  if (v83 != v92 || v112 >= &v92[v113 + 8])
  {
    memmove(v112, v92 + 8, 8 * v113);
    v111 = v92;
  }

  v185 = v92 + 8;
  int v39 = 0LL;
  v83[2] = v111[2];
  v114 = 1LL << *((_BYTE *)v111 + 32);
  if (v114 < 64) {
    v115 = ~(-1LL << v114);
  }
  else {
    v115 = -1LL;
  }
  v116 = v115 & v111[8];
  v187 = (unint64_t)(v114 + 63) >> 6;
  while (2)
  {
    if (v116)
    {
      v117 = __clz(__rbit64(v116));
      v116 &= v116 - 1;
      v118 = v117 | (v39 << 6);
      v119 = v98;
LABEL_107:
      v120 = 16 * v118;
      v121 = v119[7];
      v122 = (uint64_t *)(v119[6] + v120);
      v124 = *v122;
      v123 = v122[1];
      v125 = *(_OWORD *)(v121 + v120);
      v126 = (void *)(v83[6] + v120);
      *v126 = v124;
      v126[1] = v123;
      *(_OWORD *)(v83[7] + v120) = v125;
      swift_bridgeObjectRetain();
      continue;
    }

    break;
  }

  unint64_t v44 = __OFADD__(v39++, 1LL);
  if (v44) {
    goto LABEL_229;
  }
  v119 = v98;
  if (v39 >= v187) {
    goto LABEL_128;
  }
  v127 = v185[v39];
  if (v127)
  {
LABEL_123:
    v116 = (v127 - 1) & v127;
    v118 = __clz(__rbit64(v127)) + (v39 << 6);
    goto LABEL_107;
  }

  v128 = v39 + 1;
  if (v39 + 1 >= v187) {
    goto LABEL_128;
  }
  v127 = v185[v128];
  if (v127) {
    goto LABEL_122;
  }
  v128 = v39 + 2;
  if (v39 + 2 >= v187) {
    goto LABEL_128;
  }
  v127 = v185[v128];
  if (v127) {
    goto LABEL_122;
  }
  v128 = v39 + 3;
  if (v39 + 3 >= v187) {
    goto LABEL_128;
  }
  v127 = v185[v128];
  if (v127) {
    goto LABEL_122;
  }
  v128 = v39 + 4;
  if (v39 + 4 >= v187) {
    goto LABEL_128;
  }
  v127 = v185[v128];
  if (v127) {
    goto LABEL_122;
  }
  v128 = v39 + 5;
  if (v39 + 5 >= v187) {
    goto LABEL_128;
  }
  v127 = v185[v128];
  if (v127)
  {
LABEL_122:
    int v39 = v128;
    goto LABEL_123;
  }

  while (1)
  {
    int v39 = v128 + 1;
    if (__OFADD__(v128, 1LL)) {
      break;
    }
    if (v39 >= v187) {
      goto LABEL_128;
    }
    v127 = v185[v39];
    ++v128;
    if (v127) {
      goto LABEL_123;
    }
  }

    v83[(v100 >> 6) + 8] |= 1LL << v100;
    v106 = (uint64_t *)(v83[6] + 16 * v100);
    *v106 = v90;
    v106[1] = v91;
    v107 = (void *)(v83[7] + 16 * v100);
    *v107 = v96;
    v107[1] = v105;
    v108 = v83[2];
    unint64_t v44 = __OFADD__(v108, 1LL);
    v109 = v108 + 1;
    if (v44) {
      goto LABEL_224;
    }
    v83[2] = v109;
LABEL_89:
    unint64_t v90 = specialized LazyMapSequence.Iterator.next()(v93);
    unint64_t v91 = v95;
    v84 = 1;
    unint64_t v92 = v83;
    if (!v95) {
      goto LABEL_130;
    }
  }

  v112 = (void *)(v110 + 64);
  v113 = (unint64_t)((1LL << *((_BYTE *)v83 + 32)) + 63) >> 6;
  if (v83 != v92 || v112 >= &v92[v113 + 8])
  {
    memmove(v112, v92 + 8, 8 * v113);
    v111 = v92;
  }

  v185 = v92 + 8;
  int v39 = 0LL;
  v83[2] = v111[2];
  v114 = 1LL << *((_BYTE *)v111 + 32);
  if (v114 < 64) {
    v115 = ~(-1LL << v114);
  }
  else {
    v115 = -1LL;
  }
  v116 = v115 & v111[8];
  v187 = (unint64_t)(v114 + 63) >> 6;
  while (2)
  {
    if (v116)
    {
      v117 = __clz(__rbit64(v116));
      v116 &= v116 - 1;
      v118 = v117 | (v39 << 6);
      v119 = v98;
LABEL_107:
      v120 = 16 * v118;
      v121 = v119[7];
      v122 = (uint64_t *)(v119[6] + v120);
      v124 = *v122;
      v123 = v122[1];
      v125 = *(_OWORD *)(v121 + v120);
      v126 = (void *)(v83[6] + v120);
      *v126 = v124;
      v126[1] = v123;
      *(_OWORD *)(v83[7] + v120) = v125;
      swift_bridgeObjectRetain();
      continue;
    }

    break;
  }

  unint64_t v44 = __OFADD__(v39++, 1LL);
  if (v44) {
    goto LABEL_229;
  }
  v119 = v98;
  if (v39 >= v187) {
    goto LABEL_128;
  }
  v127 = v185[v39];
  if (v127)
  {
LABEL_123:
    v116 = (v127 - 1) & v127;
    v118 = __clz(__rbit64(v127)) + (v39 << 6);
    goto LABEL_107;
  }

  v128 = v39 + 1;
  if (v39 + 1 >= v187) {
    goto LABEL_128;
  }
  v127 = v185[v128];
  if (v127) {
    goto LABEL_122;
  }
  v128 = v39 + 2;
  if (v39 + 2 >= v187) {
    goto LABEL_128;
  }
  v127 = v185[v128];
  if (v127) {
    goto LABEL_122;
  }
  v128 = v39 + 3;
  if (v39 + 3 >= v187) {
    goto LABEL_128;
  }
  v127 = v185[v128];
  if (v127) {
    goto LABEL_122;
  }
  v128 = v39 + 4;
  if (v39 + 4 >= v187) {
    goto LABEL_128;
  }
  v127 = v185[v128];
  if (v127) {
    goto LABEL_122;
  }
  v128 = v39 + 5;
  if (v39 + 5 >= v187) {
    goto LABEL_128;
  }
  v127 = v185[v128];
  if (v127)
  {
LABEL_122:
    int v39 = v128;
    goto LABEL_123;
  }

  while (1)
  {
    int v39 = v128 + 1;
    if (__OFADD__(v128, 1LL)) {
      break;
    }
    if (v39 >= v187) {
      goto LABEL_128;
    }
    v127 = v185[v39];
    ++v128;
    if (v127) {
      goto LABEL_123;
    }
  }

      uint64_t v10 = v47;
      unint64_t v36 = _pathHasDotDot(a1, v6, v47);
      if (v6 <= 2) {
        break;
      }
      unint64_t v12 = v48;
      if ((v36 & 1) == 0) {
        goto LABEL_103;
      }
    }

    unint64_t v12 = v48;
  }

              CFRelease(cf);
LABEL_97:
              if (v34)
              {
                if ((v60 & 0x2000) != 0) {
                  unint64_t v47 = 0LL;
                }
                else {
                  unint64_t v47 = v34;
                }
                v58[2](v58, v47, 4 * (v66 & 1u), &v78);
              }

              goto LABEL_102;
            }

            int v56 = 0;
          }

          else
          {
            cf = 0LL;
            int v56 = 1;
          }

          if ((v63 & 0x10) != 0
            && (([@"FullAddress" isEqualToString:v31] & 1) != 0
             || [@"SignatureBlock" isEqualToString:v31]))
          {
            unint64_t v32 = (void *)[MEMORY[0x189603FC8] dictionary];
            addAddressResultsToComponents((uint64_t)ValueAtIndex, v32);
            if ([v32 count])
            {
              unint64_t v33 = objc_alloc(&OBJC_CLASS___NSAddressCheckingResult);
              goto LABEL_52;
            }

            goto LABEL_63;
          }

          if ((v63 & 0x1000) != 0 && [@"FlightInformation" isEqualToString:v31])
          {
            unint64_t v32 = (void *)[MEMORY[0x189603FC8] dictionary];
            addAddressResultsToComponents((uint64_t)ValueAtIndex, v32);
            if ([v32 count])
            {
              unint64_t v33 = objc_alloc(&OBJC_CLASS___NSTransitInformationCheckingResult);
LABEL_52:
              unint64_t v34 = -[NSAddressCheckingResult initWithRange:components:underlyingResult:]( v33,  "initWithRange:components:underlyingResult:",  v26,  v28,  v32,  ValueAtIndex);
              goto LABEL_95;
            }

            goto LABEL_63;
          }

          if ((v63 & 0x800) != 0 && [@"PhoneNumber" isEqualToString:v31])
          {
            v83[0] = 0LL;
            if (off_18C497118 && off_18C497118(ValueAtIndex, v83, 0LL) && v83[0]
              || (unint64_t v35 = (const void *)off_18C4970F0(ValueAtIndex), (v83[0] = v35) != 0LL) && (CFRetain(v35), v83[0]))
            {
              TypeID = CFStringGetTypeID();
              if (TypeID == CFGetTypeID(v83[0]))
              {
                unint64_t v37 = objc_alloc(&OBJC_CLASS___NSPhoneNumberCheckingResult);
                unint64_t v34 = -[NSPhoneNumberCheckingResult initWithRange:phoneNumber:underlyingResult:]( v37,  "initWithRange:phoneNumber:underlyingResult:",  v26,  v28,  v83[0],  ValueAtIndex);
              }

              else
              {
                unint64_t v34 = 0LL;
              }

              unsigned __int8 v45 = v83[0];
              if (v83[0]) {
LABEL_94:
              }
                CFRelease(v45);
LABEL_95:
              if ((v56 & 1) != 0) {
                goto LABEL_97;
              }
              goto LABEL_96;
            }
          }

          else if ((v63 & 8) != 0 {
                 && (([@"Date" isEqualToString:v31] & 1) != 0
          }
                  || ([@"Time" isEqualToString:v31] & 1) != 0
                  || ([@"DateTime" isEqualToString:v31] & 1) != 0
                  || ([@"DateDuration" isEqualToString:v31] & 1) != 0
                  || ([@"TimeDuration" isEqualToString:v31] & 1) != 0
                  || [@"Timestamp" isEqualToString:v31]))
          {
            unint64_t v82 = 0LL;
            v83[0] = 0LL;
            v80 = 0LL;
            unint64_t v81 = 0LL;
            BOOL v55 = [MEMORY[0x189603F50] date];
            uint64_t v38 = [MEMORY[0x189604020] defaultTimeZone];
            unint64_t v79 = 0;
            [v31 rangeOfString:@"Duration"];
            unint64_t v40 = v83[0];
            unint64_t v41 = 0.0;
            if (v83[0] && v82)
            {
              unint64_t v42 = MEMORY[0x186E1D764]();
              unint64_t v41 = v42 - MEMORY[0x186E1D764](v83[0]);
              unint64_t v40 = v83[0];
            }

            if (v40)
            {
              unint64_t v43 = objc_alloc(&OBJC_CLASS___NSDateCheckingResult);
              if (v81) {
                unint64_t v44 = v81;
              }
              else {
                unint64_t v44 = v80;
              }
              LOWORD(v54) = v79 == 0;
              unint64_t v34 = -[NSDateCheckingResult initWithRange:date:timeZone:duration:referenceDate:underlyingResult:timeIsSignificant:timeIsApproximate:]( v43,  "initWithRange:date:timeZone:duration:referenceDate:underlyingResult:timeIsSignificant:timeIsApproximate:",  v26,  v28,  v83[0],  v44,  v55,  ValueAtIndex,  v41,  v54);
              if (v83[0]) {
                CFRelease(v83[0]);
              }
            }

            else
            {
              unint64_t v34 = 0LL;
            }

            if (v81) {
              CFRelease(v81);
            }
            if (v82) {
              CFRelease(v82);
            }
            unsigned __int8 v45 = v80;
            if (v80) {
              goto LABEL_94;
            }
            goto LABEL_95;
          }

uint64_t NSKVOPendingNotificationStackIdentifierHash(uint64_t a1)
{
  v12[3] = *MEMORY[0x1895F89C0];
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 8), "hash", *(void *)a1);
  LODWORD(result) = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  v12[1] = v2;
  v12[2] = v4;
  uint64_t v5 = (unsigned __int8 *)v12 + 3;
  for (unint64_t i = 28LL; i > 7; i -= 4LL)
  {
    unsigned int v7 = *(v5 - 3) + 16 * result;
    unsigned int v8 = *(v5 - 2) + 16 * (v7 ^ (16 * (v7 >> 28)));
    unsigned int v9 = *(v5 - 1) + 16 * (v8 ^ (16 * (v8 >> 28)));
    int v10 = *v5;
    v5 += 4;
    int v11 = v10 + 16 * (v9 ^ (16 * (v9 >> 28)));
    uint64_t result = (v11 ^ ((v11 & 0xF0000000) >> 24)) & ~(v11 & 0xF0000000);
  }

  return result;
}

void NSKeyValueWillChange( uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, void (*a6)(__int128 *__return_ptr, uint64_t, uint64_t, void, void, uint64_t, char *), uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, __int128 *, void, void, uint64_t), uint64_t a9, uint64_t a10)
{
  uint64_t v27 = a7;
  v38[1] = *MEMORY[0x1895F89C0];
  unint64_t v16 = (void *)_NSKeyValueDebugger();
  if (v16) {
    [v16 _object:a1 trackChangeForKeyOrKeys:a2 operation:0];
  }
  v38[0] = 0LL;
  if (!a5)
  {
    unint64_t v26 = 0LL;
    goto LABEL_29;
  }

  do
  {
    uint64_t v17 = *a4;
    if (a10) {
      BOOL v18 = v17 == a10;
    }
    else {
      BOOL v18 = 1;
    }
    int v19 = v18;
    if (v17) {
      BOOL v20 = v19 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20)
    {
      unint64_t v21 = *(void **)(v17 + 16);
      if (a3)
      {
        uint64_t v22 = [v21 keyPathIfAffectedByValueForMemberOfKeys:a2];
        unsigned __int8 v37 = 0;
        if (!v22) {
          goto LABEL_26;
        }
      }

      else
      {
        uint64_t v22 = [v21 keyPathIfAffectedByValueForKey:a2 exactMatch:&v37];
        if (!v22) {
          goto LABEL_26;
        }
      }

      if (objc_msgSend( *(id *)(v17 + 16),  "object:withObservance:willChangeValueForKeyOrKeys:recurse:forwardingValues:",  a1,  v17,  a2,  1,  v36,  v27))
      {
        a6(&v32, a1, v22, v37, *(_BYTE *)(v17 + 40) & 0xF, v27, &v35);
        __int128 v29 = v32;
        __int128 v30 = v33;
        id v31 = v34;
        a8(a1, a2, v17, &v29, v36[0], v36[1], a9);
        if ((*(_BYTE *)(v17 + 40) & 8) != 0)
        {
          if ((*(_BYTE *)(v17 + 40) & 0x20) != 0) {
            uint64_t v23 = *(void *)(v17 + 32);
          }
          else {
            uint64_t v23 = 0LL;
          }
          uint64_t v24 = *(void **)(v17 + 8);
          uint64_t v25 = *(void *)(v17 + 24);
          __int128 v29 = v32;
          __int128 v30 = v33;
          id v31 = v34;
          NSKeyValueNotifyObserver(v24, v22, a1, v25, v23, 1LL, &v29, v38);
        }

        if (v35)
        {
        }
      }
    }

uint64_t _NSKeyValueDebugger()
{
  if (qword_18C496D10 != -1) {
    dispatch_once(&qword_18C496D10, &__block_literal_global_57);
  }
  return qword_18C496D08;
}

uint64_t NSKeyValueWillChangeBySetting@<X0>( void *a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, void *a4@<X4>, _BYTE *a5@<X5>, void *a6@<X8>)
{
  if ((a3 & 2) != 0)
  {
    if (a4)
    {
      uint64_t result = [a4 objectForKey:a2];
      if (result) {
        goto LABEL_6;
      }
    }

    else
    {
      uint64_t result = [a1 valueForKeyPath:a2];
      if (result) {
        goto LABEL_6;
      }
    }

    uint64_t result = [MEMORY[0x189603FE8] null];
    goto LABEL_6;
  }

  uint64_t result = 0LL;
LABEL_6:
  *a6 = 1LL;
  a6[1] = result;
  a6[3] = 0LL;
  a6[4] = 0LL;
  a6[2] = 0LL;
  *a5 = 0;
  return result;
}

void NSKeyValuePushPendingNotificationPerThread( void *a1, void *a2, uint64_t a3, uint64_t *a4, void *a5, void *a6, uint64_t a7)
{
  char v11 = *(_BYTE *)(a7 + 8);
  unint64_t v12 = *(void **)(a7 + 16);
  uint64_t v13 = *a4;
  uint64_t v14 = (void *)a4[1];
  int v19 = (void *)a4[2];
  BOOL v20 = (void *)a4[3];
  unint64_t v21 = (void *)a4[4];
  unint64_t v15 = malloc_default_zone();
  unint64_t v16 = malloc_zone_calloc(v15, 1uLL, 0x60uLL);
  *(_WORD *)unint64_t v16 = 1;
  v16[1] = a1;
  v16[2] = [a2 copy];
  *((_BYTE *)v16 + 2) = v11;
  v16[3] = v12;
  v16[4] = a3;
  v16[5] = v13;
  v16[6] = v14;
  v16[7] = v19;
  v16[8] = v20;
  v16[9] = v21;
  v16[10] = a5;
  v16[11] = a6;
  id v17 = *(id *)(v16[4] + 8LL);
  CFArrayAppendValue(*(CFMutableArrayRef *)a7, v16);
  NSKVOPendingNotificationRelease(v18, v16);
  *(_BYTE *)(a7 + _Block_object_dispose((const void *)(v17 - 128), 8) = 0;
}

unint64_t pointerHash(unint64_t a1)
{
  return a1 >> 3;
}

_WORD *NSKVOPendingNotificationRetain(uint64_t a1, _WORD *a2)
{
  uint64_t result = a2;
  ++*a2;
  return result;
}

void NSKVOPendingNotificationRelease(uint64_t a1, void *a2)
{
  int v2 = (__int16)--*(_WORD *)a2;
  if (v2 <= 0)
  {
    uint64_t v4 = *((void *)a2 + 4);
    if (v4) {

    }
    free(a2);
  }

uint64_t NSKeyValueNotifyObserver( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if ((objc_opt_respondsToSelector() & 1) != 0) {
    return [a1 _observeValueForKeyPath:a2 ofObject:a3 changeKind:*a7 oldValue:a7[1] newValue:a7[2] indexes:a7[3] context:a4];
  }
  id v17 = (void *)*a8;
  if (*a8)
  {
    __int128 v18 = *((_OWORD *)a7 + 1);
    __int128 v23 = *(_OWORD *)a7;
    __int128 v24 = v18;
    uint64_t v25 = a7[4];
    [v17 setDetailsNoCopy:&v23 originalObservable:a5];
    int v19 = (NSKeyValueChangeDictionary *)*a8;
  }

  else
  {
    BOOL v20 = objc_alloc(&OBJC_CLASS___NSKeyValueChangeDictionary);
    __int128 v21 = *((_OWORD *)a7 + 1);
    __int128 v23 = *(_OWORD *)a7;
    __int128 v24 = v21;
    uint64_t v25 = a7[4];
    int v19 = -[NSKeyValueChangeDictionary initWithDetailsNoCopy:originalObservable:isPriorNotification:]( v20,  "initWithDetailsNoCopy:originalObservable:isPriorNotification:",  &v23,  a5,  a6);
    *a8 = (uint64_t)v19;
  }

  uint64_t v22 = -[NSKeyValueChangeDictionary retainCount](v19, "retainCount");
  uint64_t result = NSKVONotify(a1, a2, a3, *a8, a4);
  if (v22 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t result = [(id)*a8 retainCount];
    if (result != v22) {
      return [(id)*a8 retainObjects];
    }
  }

  return result;
}

uint64_t NSKVONotify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (_NSKeyValueObserverRegistrationEnableLockingAssertions) {
    os_unfair_lock_assert_not_owner((os_unfair_lock_t)&_NSKeyValueObserverRegistrationLock);
  }
  return [a1 observeValueForKeyPath:a2 ofObject:a3 change:a4 context:a5];
}

unint64_t lazy protocol witness table accessor for type NSString and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSString and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSString and conformance NSObject)
  {
    uint64_t v1 = type metadata accessor for NSMorphologyPronoun( 255LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961BB08], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSString and conformance NSObject);
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x186E20D34]((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void specialized NSKeyValueObservation.Helper._swizzle_me_observeValue(forKeyPath:of:change:context:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v6 = *(os_unfair_lock_s **)(v3
                            + OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_lock);
  os_unfair_lock_lock(v6);
  outlined init with copy of Any?(a1, (uint64_t)&v33);
  if (*((void *)&v34 + 1))
  {
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    if ((swift_dynamicCast() & 1) != 0)
    {
      id v7 = (id)v37;
      unsigned int v8 = *(void **)(v3
                    + OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject);
      if (v8)
      {
        id v9 = v8;
      }

      else
      {
        id v9 = (id)MEMORY[0x186E20F44]( v3 + OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_weakObject);
        if (!v9) {
          goto LABEL_30;
        }
      }

      if (v7 != v9)
      {

        goto LABEL_31;
      }

      if (a2)
      {
        id v10 = v7;
        os_unfair_lock_unlock(v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"kind");
        uint64_t v11 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(void *)(a2 + 16) && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11), (v13 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v12, (uint64_t)&v37);
        }

        else
        {
          __int128 v37 = 0u;
          __int128 v38 = 0u;
        }

        swift_unknownObjectRelease();
        if (!*((void *)&v38 + 1))
        {
          __break(1u);
          return;
        }

        outlined init with take of Any(&v37, &v33);
        swift_dynamicCast();
        uint64_t v14 = *(void *)&v32[0];
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"new");
        uint64_t v15 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(void *)(a2 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15), (v17 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v16, (uint64_t)&v37);
        }

        else
        {
          __int128 v37 = 0u;
          __int128 v38 = 0u;
        }

        swift_unknownObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"old");
        uint64_t v18 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(void *)(a2 + 16) && (unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v18), (v20 & 1) != 0)) {
          outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v19, (uint64_t)v32);
        }
        else {
          memset(v32, 0, sizeof(v32));
        }
        swift_unknownObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"indexes");
        uint64_t v21 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(void *)(a2 + 16) && (unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v21), (v23 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v22, (uint64_t)&v30);
        }

        else
        {
          __int128 v30 = 0u;
          __int128 v31 = 0u;
        }

        swift_unknownObjectRelease();
        if (*((void *)&v31 + 1))
        {
          outlined init with take of Any(&v30, &v33);
          swift_dynamicCast();
          uint64_t v24 = v29;
        }

        else
        {
          outlined destroy of Any?((uint64_t)&v30, &demangling cache variable for type metadata for Any?);
          uint64_t v24 = 0LL;
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)(@"notificationIsPrior");
        uint64_t v25 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(void *)(a2 + 16) && (unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v25), (v27 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v26, (uint64_t)&v33);
        }

        else
        {
          __int128 v33 = 0u;
          __int128 v34 = 0u;
        }

        swift_unknownObjectRelease();
        if (*((void *)&v34 + 1))
        {
          if (swift_dynamicCast())
          {
            char v28 = v30;
LABEL_43:
            *(void *)&__int128 v33 = v14;
            outlined init with take of Any?((uint64_t)&v37, (uint64_t)&v33 + 8);
            outlined init with take of Any?((uint64_t)v32, (uint64_t)v35);
            v35[4] = v24;
            char v36 = v28;
            (*(void (**)(id, __int128 *))(v3
                                                   + OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_callback))( v10,  &v33);

            outlined destroy of Any?( (uint64_t)&v33,  &demangling cache variable for type metadata for NSKeyValueObservedChange<Any>);
            return;
          }
        }

        else
        {
          outlined destroy of Any?((uint64_t)&v33, &demangling cache variable for type metadata for Any?);
        }

        char v28 = 0;
        goto LABEL_43;
      }

LABEL_30:
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v33, &demangling cache variable for type metadata for Any?);
  }

LABEL_31:
  os_unfair_lock_unlock(v6);
}

  unint64_t v26 = v85;
  if (!v85)
  {
    char v27 = MEMORY[0x18961AFF8];
    goto LABEL_132;
  }

  if (v85 != *(unint64_t **)(v9 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    char v27 = static _SetStorage.allocate(capacity:)();
    char v28 = *v87;
    uint64_t v29 = v27 + 56;
    swift_retain();
    __int128 v30 = 0LL;
    while (1)
    {
      if (v28)
      {
        __int128 v33 = __clz(__rbit64(v28));
        v28 &= v28 - 1;
        __int128 v34 = v33 | (v30 << 6);
      }

      else
      {
        char v20 = __OFADD__(v30++, 1LL);
        if (v20) {
          goto LABEL_142;
        }
        if (v30 >= v86)
        {
LABEL_131:
          swift_release();
LABEL_132:
          swift_release();
          return v27;
        }

        char v35 = v87[v30];
        if (!v35)
        {
          char v36 = v30 + 1;
          if (v30 + 1 >= v86) {
            goto LABEL_131;
          }
          char v35 = v87[v36];
          if (!v35)
          {
            char v36 = v30 + 2;
            if (v30 + 2 >= v86) {
              goto LABEL_131;
            }
            char v35 = v87[v36];
            if (!v35)
            {
              char v36 = v30 + 3;
              if (v30 + 3 >= v86) {
                goto LABEL_131;
              }
              char v35 = v87[v36];
              if (!v35)
              {
                char v36 = v30 + 4;
                if (v30 + 4 >= v86) {
                  goto LABEL_131;
                }
                char v35 = v87[v36];
                if (!v35)
                {
                  char v36 = v30 + 5;
                  if (v30 + 5 >= v86) {
                    goto LABEL_131;
                  }
                  char v35 = v87[v36];
                  if (!v35)
                  {
                    while (1)
                    {
                      __int128 v30 = v36 + 1;
                      if (__OFADD__(v36, 1LL)) {
                        break;
                      }
                      if (v30 >= v86) {
                        goto LABEL_131;
                      }
                      char v35 = v87[v30];
                      ++v36;
                      if (v35) {
                        goto LABEL_52;
                      }
                    }

        if (!v19) {
          goto LABEL_77;
        }
        uint64_t v21 = *v20++;
        uint64_t v18 = v21;
        --v19;
        if (v21 < 0) {
          goto LABEL_45;
        }
      }

      if (v18 == 61) {
        goto LABEL_45;
      }
LABEL_41:
      goto LABEL_31;
    }

    v99 = v6;
    int v100 = v7;
    __int128 v33 = lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v94 = v33;
    StringProtocol._ephemeralString.getter();
    __int128 v34 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    char v35 = (unsigned __int16 *)objc_msgSend(v34, sel__fastCharacterContents);
    char v36 = v34;
    unint64_t v93 = v35;
    if (!v35) {
      break;
    }
    v99 = v6;
    int v100 = v7;
    StringProtocol._ephemeralString.getter();
    __int128 v37 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    __int128 v38 = objc_msgSend(v37, sel_length);
    swift_unknownObjectRelease();
    if (!v38)
    {
LABEL_137:
      swift_bridgeObjectRelease_n();
      goto LABEL_78;
    }

    int v39 = *v93;
    if (v39 < 0x80)
    {
      unint64_t v40 = 2LL * (void)v38 - 2;
      unint64_t v41 = v93 + 1;
      while (1)
      {
        if (v39 - 39 >= 9 && v39 != 33 && v39 != 36)
        {
          if ((v39 - 58) <= 0xF5u)
          {
            if (((1 << (v39 - 58)) & 0x63) == 0) {
              break;
            }
          }
        }

  unint64_t v57 = v47 & 0xFFFFFFFFFFFFLL;
  if ((v49 & 0x2000000000000000LL) != 0) {
    unint64_t v58 = HIBYTE(v49) & 0xF;
  }
  else {
    unint64_t v58 = v47 & 0xFFFFFFFFFFFFLL;
  }
  if (v58)
  {
    if ((v165[24] & 1) != 0)
    {
      v131 = v6;
      *(void *)&v137 = v47;
      *((void *)&v137 + 1) = v49;
      MEMORY[0x1895F8858](v48);
      int v59 = MEMORY[0x18961AFF8];
      *(&v130 - 2) = (uint64_t)&v137;
      *(&v130 - 1) = v59;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      size_t v60 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)(&v130 - 4),  v47,  v49);
      if (v61 == 1)
      {
        unint64_t v63 = *((void *)&v137 + 1);
        unint64_t v62 = v137;
        swift_bridgeObjectRetain();
        uint64_t v64 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v62,  v63,  MEMORY[0x18961AFF8]);
        unint64_t v66 = v65;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v64 = (uint64_t)v60;
        unint64_t v66 = v61;
        swift_bridgeObjectRelease_n();
      }

      outlined release of URLComponents((uint64_t)&v157);
      unint64_t v6 = v131;
      char v67 = v132;
LABEL_67:
      uint64_t v68 = MEMORY[0x189617FA8];
      if (!v66) {
        goto LABEL_73;
      }
      goto LABEL_68;
    }

    if ((v49 & 0x1000000000000000LL) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      if ((v49 & 0x2000000000000000LL) != 0)
      {
        *(void *)&v137 = v47;
        *((void *)&v137 + 1) = v49 & 0xFFFFFFFFFFFFFFLL;
        *(void *)&v146 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v146 + 1) = 0LL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v137,  HIBYTE(v49) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v146,  0,  (unsigned __int8 *)&v137,  HIBYTE(v49) & 0xF,  &v135);
        uint64_t v64 = v135;
        unint64_t v66 = v136;
        swift_release();
      }

      else
      {
        if ((v47 & 0x1000000000000000LL) != 0)
        {
          unsigned int v69 = (unsigned __int8 *)((v49 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }

        else
        {
          unsigned int v69 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          unint64_t v57 = v86;
        }

        *(void *)&v137 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v137 + 1) = 0LL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        uint64_t v64 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v69,  v57,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v137,  0,  v69,  v57);
        unint64_t v66 = v70;
      }

      swift_bridgeObjectRelease();
      if (v66 != 1)
      {
        swift_bridgeObjectRelease_n();
LABEL_66:
        outlined release of URLComponents((uint64_t)&v157);
        char v67 = v132;
        goto LABEL_67;
      }
    }

    v130 = v42;
    v131 = v6;
    *(void *)&v137 = v47;
    *((void *)&v137 + 1) = v49;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    uint64_t v71 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v72 = objc_msgSend(v71, sel__fastCharacterContents);
    v73 = v71;
    if (v72)
    {
      *(void *)&v137 = v47;
      *((void *)&v137 + 1) = v49;
      StringProtocol._ephemeralString.getter();
      int v74 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      double v75 = objc_msgSend(v74, sel_length);
      v76 = swift_unknownObjectRelease();
      MEMORY[0x1895F8858](v76);
      *((_BYTE *)&v130 - 16) = 0;
      MEMORY[0x1895F8858](v77);
      *(&v130 - 2) = (uint64_t)v72;
      *(&v130 - 1) = (uint64_t)v75;
      uint64_t v64 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v72,  (uint64_t)v75,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  v78,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t)(&v130 - 4));
      unint64_t v66 = v79;
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v157);
      unint64_t v6 = v131;
      if (v66)
      {
        char v67 = v132;
        goto LABEL_39;
      }

      char v67 = v132;
LABEL_60:
      uint64_t v68 = MEMORY[0x189617FA8];
      goto LABEL_73;
    }

    *(void *)&v137 = v47;
    *((void *)&v137 + 1) = v49;
    swift_bridgeObjectRetain();
    unint64_t v81 = String.init<A>(_:)();
    unint64_t v82 = v80;
    unint64_t v6 = v131;
    if ((v80 & 0x1000000000000000LL) != 0)
    {
      unint64_t v81 = static String._copying(_:)();
      unint64_t v88 = v87;
      swift_bridgeObjectRelease();
      unint64_t v82 = v88;
      if ((v88 & 0x2000000000000000LL) == 0) {
        goto LABEL_55;
      }
    }

    else if ((v80 & 0x2000000000000000LL) == 0)
    {
LABEL_55:
      if ((v81 & 0x1000000000000000LL) != 0)
      {
        unint64_t v83 = (unsigned __int8 *)((v82 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v84 = v81 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        unint64_t v83 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }

      *(void *)&v137 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((void *)&v137 + 1) = 0LL;
      uint64_t v64 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v83,  v84,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v137,  0,  v83,  v84);
      unint64_t v66 = v85;
      goto LABEL_65;
    }

    *(void *)&v137 = v81;
    *((void *)&v137 + 1) = v82 & 0xFFFFFFFFFFFFFFLL;
    *(void *)&v146 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v146 + 1) = 0LL;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v137,  HIBYTE(v82) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v146,  0,  (unsigned __int8 *)&v137,  HIBYTE(v82) & 0xF,  &v135);
    uint64_t v64 = v135;
    unint64_t v66 = v136;
    swift_release();
LABEL_65:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_66;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v157);
  uint64_t v64 = 0LL;
  unint64_t v66 = 0xE000000000000000LL;
  char v67 = v132;
LABEL_39:
  uint64_t v68 = MEMORY[0x189617FA8];
LABEL_68:
  v147 = v68;
  *(void *)&v146 = v64;
  *((void *)&v146 + 1) = v66;
  v137 = xmmword_183725770;
  outlined init with take of Any(&v146, &v138);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v21[2] + 1LL,  1,  v21);
  }
  unint64_t v90 = v21[2];
  unint64_t v89 = v21[3];
  if (v90 >= v89 >> 1) {
    uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v89 > 1),  v90 + 1,  1,  v21);
  }
  v21[2] = v90 + 1;
  unint64_t v91 = &v21[6 * v90];
  unint64_t v92 = v137;
  unint64_t v93 = v139;
  v91[3] = v138;
  v91[4] = v93;
  v91[2] = v92;
LABEL_73:
  outlined retain of URLComponents((uint64_t)&v157);
  unint64_t v94 = URLComponents._URLComponents.port.getter();
  uint64_t v96 = v95;
  outlined release of URLComponents((uint64_t)&v157);
  if ((v96 & 1) == 0)
  {
    v147 = MEMORY[0x189618740];
    *(void *)&v146 = v94;
    v137 = xmmword_183725780;
    outlined init with take of Any(&v146, &v138);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v21[2] + 1LL,  1,  v21);
    }
    v98 = v21[2];
    uint64_t v97 = v21[3];
    if (v98 >= v97 >> 1) {
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v97 > 1),  v98 + 1,  1,  v21);
    }
    v21[2] = v98 + 1;
    v99 = &v21[6 * v98];
    int v100 = v137;
    v101 = v139;
    v99[3] = v138;
    v99[4] = v101;
    v99[2] = v100;
  }

  outlined retain of URLComponents((uint64_t)&v157);
  v102 = URLComponents._URLComponents.path.getter();
  uint64_t v104 = v103;
  outlined release of URLComponents((uint64_t)&v157);
  v147 = v68;
  *(void *)&v146 = v102;
  *((void *)&v146 + 1) = v104;
  v137 = xmmword_183725790;
  outlined init with take of Any(&v146, &v138);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v21[2] + 1LL,  1,  v21);
  }
  v106 = v21[2];
  v105 = v21[3];
  if (v106 >= v105 >> 1) {
    uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v105 > 1),  v106 + 1,  1,  v21);
  }
  v21[2] = v106 + 1;
  v107 = &v21[6 * v106];
  v108 = v137;
  v109 = v139;
  v107[3] = v138;
  v107[4] = v109;
  v107[2] = v108;
  outlined retain of URLComponents((uint64_t)&v157);
  v110 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(0);
  outlined release of URLComponents((uint64_t)&v157);
  if (v110)
  {
    v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URLQueryItem]);
    *(void *)&v146 = v110;
    v137 = xmmword_1837257A0;
    outlined init with take of Any(&v146, &v138);
    v112 = v21[2];
    v111 = v21[3];
    if (v112 >= v111 >> 1) {
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v111 > 1),  v112 + 1,  1,  v21);
    }
    v21[2] = v112 + 1;
    v113 = &v21[6 * v112];
    v114 = v137;
    v115 = v139;
    v113[3] = v138;
    v113[4] = v115;
    v113[2] = v114;
  }

  v116 = outlined retain of URLComponents((uint64_t)&v157);
  v117 = URLComponents._URLComponents.fragment.getter(v116);
  v119 = v118;
  outlined release of URLComponents((uint64_t)&v157);
  if (v119)
  {
    v147 = v68;
    *(void *)&v146 = v117;
    *((void *)&v146 + 1) = v119;
    v137 = xmmword_1837257B0;
    outlined init with take of Any(&v146, &v138);
    v121 = v21[2];
    v120 = v21[3];
    if (v121 >= v120 >> 1) {
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v120 > 1),  v121 + 1,  1,  v21);
    }
    v21[2] = v121 + 1;
    v122 = &v21[6 * v121];
    v123 = v137;
    v124 = v139;
    v122[3] = v138;
    v122[4] = v124;
    v122[2] = v123;
  }

  v143 = v163;
  v144 = v164;
  v145[0] = *(_OWORD *)v165;
  *(_OWORD *)((char *)v145 + 10) = *(_OWORD *)&v165[10];
  v139 = v159;
  v140 = v160;
  v141 = v161;
  v142 = v162;
  v137 = v157;
  v138 = v158;
  *(void *)&v146 = v21;
  v125 = *MEMORY[0x18961A718];
  v126 = type metadata accessor for Mirror.DisplayStyle();
  v127 = *(void *)(v126 - 8);
  v128 = v134;
  (*(void (**)(char *, uint64_t, uint64_t))(v127 + 104))(v134, v125, v126);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v128, 0LL, 1LL, v126);
  (*(void (**)(char *, void, uint64_t))(v133 + 104))(v6, *MEMORY[0x18961A748], v67);
  outlined retain of URLComponents((uint64_t)&v157);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A],  &demangling cache variable for type metadata for [(label: String?, value: Any)],  MEMORY[0x189618488]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

          (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
          goto LABEL_32;
        }

        *char v23 = *v24;
        unint64_t v48 = type metadata accessor for NSDecimal.FormatStyle(0LL);
      }

      int64_t v49 = *(int *)(v48 + 20);
      char v13 = (char *)v23 + v49;
      uint64_t v14 = (char *)v24 + v49;
      *(void *)char v13 = *(void *)((char *)v24 + v49);
      v13[8] = *((_BYTE *)v24 + v49 + 8);
      BOOL v50 = *(_OWORD *)((char *)v24 + v49 + 32);
      *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v24 + v49 + 16);
      *((_OWORD *)v13 + 2) = v50;
      *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v24 + v49 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v24 + v49 + 57);
      v13[73] = *((_BYTE *)v24 + v49 + 73);
      *((_WORD *)v13 + 37) = *(_WORD *)((char *)v24 + v49 + 74);
      v13[76] = *((_BYTE *)v24 + v49 + 76);
      v13[77] = *((_BYTE *)v24 + v49 + 77);
      unint64_t v42 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      unint64_t v51 = v42[9];
      unint64_t v44 = &v13[v51];
      unsigned __int8 v45 = &v14[v51];
      int v46 = type metadata accessor for FloatingPointRoundingRule();
      unint64_t v47 = *(void *)(v46 - 8);
      goto LABEL_29;
    case 14:
      *(void *)a1 = *(void *)a2;
      __int128 v32 = (_OWORD *)((char *)a1 + v31);
      __int128 v33 = (_OWORD *)((char *)a2 + v31);
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
      __int128 v34 = swift_getEnumCaseMultiPayload();
      if (v34 == 2)
      {
        *__int128 v32 = *v33;
        unint64_t v52 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      }

      else
      {
        if (v34 == 1)
        {
          char v35 = v33[1];
          *__int128 v32 = *v33;
          v32[1] = v35;
          char v13 = (char *)v32 + v36;
          uint64_t v14 = (char *)v33 + v36;
          *(void *)char v13 = *(void *)((char *)v33 + v36);
          v13[8] = *((_BYTE *)v33 + v36 + 8);
          __int128 v37 = *(_OWORD *)((char *)v33 + v36 + 32);
          *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v33 + v36 + 16);
          *((_OWORD *)v13 + 2) = v37;
          *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v33 + v36 + 48);
          *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v33 + v36 + 57);
          v13[73] = *((_BYTE *)v33 + v36 + 73);
          *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)v33 + v36 + 74);
          v13[78] = *((_BYTE *)v33 + v36 + 78);
          unint64_t v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
          __int128 v38 = v16[9];
          uint64_t v18 = &v13[v38];
          unint64_t v19 = &v14[v38];
          char v20 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v21 = *(void *)(v20 - 8);
          goto LABEL_31;
        }

        *__int128 v32 = *v33;
        unint64_t v52 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      }

      unint64_t v53 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v52) + 36);
      char v13 = (char *)v32 + v53;
      uint64_t v14 = (char *)v33 + v53;
      *(void *)char v13 = *(void *)((char *)v33 + v53);
      v13[8] = *((_BYTE *)v33 + v53 + 8);
      unint64_t v54 = *(_OWORD *)((char *)v33 + v53 + 32);
      *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v33 + v53 + 16);
      *((_OWORD *)v13 + 2) = v54;
      *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v33 + v53 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v33 + v53 + 57);
      v13[73] = *((_BYTE *)v33 + v53 + 73);
      v13[76] = *((_BYTE *)v33 + v53 + 76);
      *((_WORD *)v13 + 37) = *(_WORD *)((char *)v33 + v53 + 74);
      v13[77] = *((_BYTE *)v33 + v53 + 77);
      unint64_t v42 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      BOOL v55 = v42[9];
      unint64_t v44 = &v13[v55];
      unsigned __int8 v45 = &v14[v55];
      int v46 = type metadata accessor for FloatingPointRoundingRule();
      unint64_t v47 = *(void *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1LL, v46))
      {
LABEL_28:
        int v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v44, v45, *(void *)(*(void *)(v56 - 8) + 64LL));
LABEL_30:
        unint64_t v57 = v42[10];
        unint64_t v58 = &v13[v57];
        int v59 = &v14[v57];
        *(void *)unint64_t v58 = *(void *)v59;
        v58[8] = v59[8];
        size_t v60 = v42[11];
LABEL_33:
        v13[v60] = v14[v60];
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        return a1;
      }

  Hasher._combine(_:)(0);
  if (!v37)
  {
LABEL_20:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
    if (!v38) {
      goto LABEL_21;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (!v39) {
      goto LABEL_22;
    }
    goto LABEL_34;
  }

  Hasher._combine(_:)(0);
  if (v39) {
    goto LABEL_32;
  }
LABEL_16:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v26);
  if (!v40)
  {
LABEL_17:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v27);
    goto LABEL_34;
  }

  Hasher._combine(_:)(0);
  if (v39) {
    goto LABEL_32;
  }
LABEL_16:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v26);
  if (!v40)
  {
LABEL_17:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v27);
    goto LABEL_34;
  }

  objc_msgSend(v8, sel_setNanosecond_, v26);
  if ((v42 & 1) != 0)
  {
LABEL_14:
    if ((v43 & 1) != 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

    Hasher._combine(_:)(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v4 = v22;
    v5 ^= Hasher._finalize()();
  }

  unint64_t v12 = v6 + 3;
  if (v6 + 3 >= v19)
  {
LABEL_32:
    swift_release();
    Hasher._combine(_:)(v5);
    return;
  }

  id v10 = *(void *)(v20 + 8 * v12);
  if (v10)
  {
    uint64_t v11 = v6 + 3;
    goto LABEL_19;
  }

  while (1)
  {
    uint64_t v11 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v11 >= v19) {
      goto LABEL_32;
    }
    id v10 = *(void *)(v20 + 8 * v11);
    ++v12;
    if (v10) {
      goto LABEL_19;
    }
  }

  __break(1u);
  return result;
}

          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }

    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  unsigned int v8 = a4 - v6;
  if (a4 >= v6 && v7 >= a4)
  {
    if (v8 <= a2)
    {
      uint64_t v14 = 0;
      char v13 = a2;
      goto LABEL_29;
    }

    goto LABEL_32;
  }

  if (a4 > v6 || a5 < v6)
  {
    a2 = 0LL;
    uint64_t result = 0LL;
    char v13 = 0LL;
    unsigned int v8 = 0LL;
    uint64_t v14 = 1;
LABEL_29:
    *(void *)a6 = v8;
    *(void *)(a6 + _Block_object_dispose((const void *)(v17 - 128), 8) = v13;
    *(void *)(a6 + 16) = result;
    *(void *)(a6 + 24) = a2;
    *(_BYTE *)(a6 + 32) = v14;
    return result;
  }

  char v13 = a5 - v6;
  if (v13 >= 0)
  {
    uint64_t v14 = 0;
    unsigned int v8 = 0LL;
    goto LABEL_29;
  }

                                          v283 = 0uLL;
                                          _So9NSDecimala__exponent_setter(0LL, &v282);
                                          _So9NSDecimala__length_setter(0LL, &v282);
                                          _So9NSDecimala__isNegative_setter(1LL, &v282);
                                          _So9NSDecimala__isCompact_setter_0(0LL, &v282);
                                          _So9NSDecimala__reserved_setter(&v282);

                                          LODWORD(a2) = v282;
                                          LOWORD(v14) = v283;
                                          LOWORD(v26) = WORD1(v283);
                                          LOWORD(a3) = WORD2(v283);
                                          LOWORD(v27) = WORD3(v283);
                                          LOWORD(v2_Block_object_dispose((const void *)(v17 - 128), 8) = WORD4(v283);
                                          LOWORD(v29) = WORD5(v283);
                                          __int128 v30 = WORD6(v283);
                                          LOWORD(v31) = HIWORD(v283);
LABEL_306:
                                          *a1 = a2;
                                          *((_WORD *)a1 + 2) = v14;
                                          *((_WORD *)a1 + 3) = v26;
                                          *((_WORD *)a1 + 4) = a3;
                                          *((_WORD *)a1 + 5) = v27;
                                          *((_WORD *)a1 + 6) = v28;
                                          *((_WORD *)a1 + 7) = v29;
                                          *((_WORD *)a1 + _Block_object_dispose((const void *)(v17 - 128), 8) = v30;
                                          *((_WORD *)a1 + 9) = v31;
                                          return;
                                        }

          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_27:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v29 = v19;
            _CFObject.hash(into:)();

            if (v21)
            {
LABEL_28:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              __int128 v30 = v21;
              _CFObject.hash(into:)();

              goto LABEL_34;
            }

  specialized Set._Variant.insert(_:)(&v3, 0xAuLL);
  if ((a1 & 0x2000) == 0)
  {
LABEL_13:
    if ((a1 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

      LOBYTE(v7) = 0;
LABEL_70:
      *(_BYTE *)(v0 + 105) = v7 ^ 1;
      return (char *)v3;
    }
  }

  unsigned int v8 = *(unsigned __int8 *)(v0 + 106);
  id v9 = 88LL;
  if (*(_BYTE *)(v0 + 106)) {
    id v9 = 96LL;
  }
  uint64_t v1 = *(void *)(v0 + v9);
  if (v1 < v3)
  {
    if (!*(_BYTE *)(v0 + 106))
    {
LABEL_62:
      *(_BYTE *)(v0 + 106) = v8 ^ 1;
      return (char *)v1;
    }

    id v7 = *(void *)(v0 + 56);
    uint64_t v3 = *(void *)(v0 + 40);
    if (v7 == v3)
    {
      uint64_t result = 0LL;
      uint64_t v11 = 0LL;
LABEL_61:
      *uint64_t v5 = result;
      os_unfair_lock_s *v6 = v11;
      *uint64_t v4 = v7 == v3;
      goto LABEL_62;
    }

    char v17 = *(void *)(v0 + 48);
    uint64_t v18 = *(_BYTE *)(v17 + 24);
    uint64_t result = (char *)objc_msgSend(*(id *)(v17 + 16), sel_rangeAtIndex_, *(void *)(v0 + 56));
    uint64_t v11 = &result[v19];
    unint64_t v16 = __OFADD__(result, v19);
    if ((v18 & 1) == 0) {
      goto LABEL_56;
    }
    if (v16)
    {
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }

    if ((uint64_t)v11 >= (uint64_t)result)
    {
LABEL_58:
      if ((uint64_t)v11 >= (uint64_t)result)
      {
        if (!__OFADD__(v7, 1LL))
        {
          *(void *)(v0 + 56) = v7 + 1;
          goto LABEL_61;
        }

        goto LABEL_78;
      }

                            *(void *)(v23 + 8 * (v35 >> 6) + 64) |= 1LL << v35;
                            *(_BYTE *)(*(void *)(v23 + 48) + v35) = v26;
                            *(void *)(*(void *)(v23 + 56) + 8 * v35) = v29;
                            unint64_t v51 = *(void *)(v23 + 16);
                            unint64_t v52 = __OFADD__(v51, 1LL);
                            unint64_t v53 = v51 + 1;
                            if (!v52) {
                              goto LABEL_73;
                            }
LABEL_229:
                            __break(1u);
LABEL_230:
                            __break(1u);
LABEL_231:
                            __break(1u);
LABEL_232:
                            swift_bridgeObjectRelease();
                            __break(1u);
LABEL_233:
                            __break(1u);
LABEL_234:
                            __break(1u);
LABEL_235:
                            __break(1u);
                            goto LABEL_236;
                          }

                          unint64_t v77 = v86;
                        }
                      }
                    }
                  }
                }
              }
            }

  specialized Set._Variant.insert(_:)(&v3, 0xAuLL);
  if ((v1 & 0x800) == 0)
  {
LABEL_13:
    if ((v1 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v28 = v62;
  if (v62) {
    goto LABEL_32;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  uint64_t v29 = v63;
  if (!v63)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_34;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v25 = v60;
  if (v60) {
    goto LABEL_32;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  unint64_t v26 = v61;
  if (!v61)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_34;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v29 = v64;
  if (v64) {
    goto LABEL_32;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  __int128 v30 = v65;
  if (!v65)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_34;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v25 = v60;
  if (v60) {
    goto LABEL_32;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  unint64_t v26 = v61;
  if (!v61)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_34;
  }

    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    NSNumber *v99 = 2;
    goto LABEL_32;
  }

  (*(void (**)(char *, void, uint64_t, uint64_t))(v91 + 56))(v97, 0LL, 1LL, v90);
  v102 = v168;
  (*(void (**)(void (**)(char *, id), char *, uint64_t))(v91 + 32))(v168, v97, v90);
  v175 = v90;
  v103 = __swift_allocate_boxed_opaque_existential_1(v174);
  (*(void (**)(uint64_t *, void (**)(char *, id), uint64_t))(v91 + 16))(v103, v102, v90);
  _expressionCompatibleValue(for:)((uint64_t)v174, (uint64_t)&v176);
  unint64_t v41 = v172;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v174);
  if (!*((void *)&v177 + 1))
  {
    (*(void (**)(void, uint64_t))(v91 + 8))(v102, v90);
    outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for Any?);
    if (v191) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }

  outlined init with take of Any(&v176, &v179);
  __swift_project_boxed_opaque_existential_1(&v179, *((uint64_t *)&v180 + 1));
  v107 = _bridgeAnythingToObjectiveC<A>(_:)();
  v169 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v107);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
  (*(void (**)(void, uint64_t))(v91 + 8))(v102, v90);

LABEL_46:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
  v113 = v189;
  v114 = v190;
  __swift_project_boxed_opaque_existential_1(&v188, v189);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v114 + 16))(&v182, v113, v114);
  v115 = *((void *)&v183 + 1);
  v116 = v184;
  v117 = __swift_project_boxed_opaque_existential_1(&v182, *((uint64_t *)&v183 + 1));
  v118 = MEMORY[0x1895F8858](v117);
  v120 = (char *)v153 - ((v119 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v122 = *(void (**)(char *, __n128))(v121 + 16);
  v191 = v123;
  v122(v120, v118);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v176, (uint64_t)&v179);
    v124 = *((void *)&v180 + 1);
    v125 = v181;
    __swift_project_boxed_opaque_existential_1(&v179, *((uint64_t *)&v180 + 1));
    v140 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 16))(v171, v124, v125);
    v142 = v141;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
    if ((v142 & 1) != 0)
    {
      LOBYTE(v179) = 1;
      v143 = v140;
      v144 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      v145 = (void *)objc_opt_self();
      v146 = objc_msgSend(v145, sel_expressionForConstantValue_, v144);
      swift_unknownObjectRelease();
      LOBYTE(v179) = 0;
      v147 = objc_msgSend(v145, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      v140 = objc_msgSend(v145, sel_expressionForConditional_trueExpression_falseExpression_, v143, v146, v147);
    }

    v135 = v172;
    goto LABEL_60;
  }

  v178 = 0LL;
  v176 = 0u;
  v177 = 0u;
  outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for ConvertibleExpression?);
  v173 = 0LL;
  v170 = 0LL;
  v126 = swift_getAssociatedTypeWitness();
  v168 = (void (**)(char *, id))v153;
  v171 = *(void *)(v126 - 8);
  MEMORY[0x1895F8858](v126);
  v128 = (char *)v153 - v127;
  v129 = type metadata accessor for Optional();
  v167 = v153;
  v130 = *(void *)(v129 - 8);
  v131 = MEMORY[0x1895F8858](v129);
  v133 = (char *)v153 - v132;
  *(void *)&v179 = MEMORY[0x18961AFE8];
  v134 = v170;
  (*(void (**)(__int128 *, uint64_t, uint64_t, __n128))(v116 + 16))(&v179, v115, v116, v131);
  if (v134)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v171 + 56))(v133, 1LL, 1LL, v126);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v133, v129);
    v135 = v172;
  }

  else
  {
    v136 = v171;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v171 + 56))(v133, 0LL, 1LL, v126);
    (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v128, v133, v126);
    v175 = v126;
    v137 = __swift_allocate_boxed_opaque_existential_1(v174);
    v138 = *(void (**)(uint64_t *, char *, uint64_t))(v136 + 16);
    v191 = v128;
    v138(v137, v128, v126);
    _expressionCompatibleValue(for:)((uint64_t)v174, (uint64_t)&v176);
    v135 = v172;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v174);
    if (*((void *)&v177 + 1))
    {
      outlined init with take of Any(&v176, &v179);
      __swift_project_boxed_opaque_existential_1(&v179, *((uint64_t *)&v180 + 1));
      v148 = _bridgeAnythingToObjectiveC<A>(_:)();
      v149 = v126;
      v140 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v148);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v191, v149);

LABEL_60:
      v150 = v169;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v151 = swift_allocObject();
      *(_OWORD *)(v151 + 16) = xmmword_1837C08B0;
      *(void *)(v151 + 32) = objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v135,  v150,  0,  3,  0);
      *(void *)(v151 + 40) = objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v135,  v140,  0,  0,  0);
      *(void *)&v182 = v151;
      specialized Array._endMutation()();
      if ((unint64_t)v182 >> 62)
      {
        else {
          v152 = v182 & 0xFFFFFFFFFFFFFF8LL;
        }
      }

      else
      {
        type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSPredicate);
        v152 = _ContiguousArrayBuffer._asCocoaArray()();
      }

      unint64_t v41 = objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v152);

      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
      return v41;
    }

    (*(void (**)(char *, uint64_t))(v136 + 8))(v191, v126);
    outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for Any?);
  }

  unint64_t v41 = v169;
  if (!v173)
  {
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v139 = 2;
  }

  swift_willThrow();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
  return v41;
}

  Hasher._combine(_:)(0);
  unint64_t v22 = 0LL;
LABEL_32:

  char v27 = v45;
  if (v27)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v27);
    swift_bridgeObjectRelease();
    char v28 = v46;
    if (v46) {
      goto LABEL_34;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v47) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    goto LABEL_39;
  }

  Hasher._combine(_:)(0);
  char v28 = v46;
  if (!v46) {
    goto LABEL_37;
  }
LABEL_34:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v28);
  swift_bridgeObjectRelease();
  if (!v47) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_39:
  if (v48 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v29 = v48 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }

  if (v49 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    __int128 v30 = v49 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v30);
  }

  if (v50 == 2)
  {
    __int128 v31 = 0;
  }

  else
  {
    __int128 v31 = v50 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v31);
  if (v51 == 2)
  {
    __int128 v32 = 0;
  }

  else
  {
    __int128 v33 = v51 & 1;
    Hasher._combine(_:)(1u);
    __int128 v32 = v33;
  }

  Hasher._combine(_:)(v32);
  outlined retain of LocalePreferences?( (uint64_t)v52,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

  Hasher._combine(_:)(0);
  char v20 = 0LL;
LABEL_32:

  uint64_t v25 = v44;
  if (v25)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v51, v25);
    swift_bridgeObjectRelease();
    unint64_t v26 = v45;
    if (v45) {
      goto LABEL_34;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v46) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    goto LABEL_39;
  }

  Hasher._combine(_:)(0);
  unint64_t v26 = v45;
  if (!v45) {
    goto LABEL_37;
  }
LABEL_34:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v51, v26);
  swift_bridgeObjectRelease();
  if (!v46) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_39:
  if (v47 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v27 = v47 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v27);
  }

  if (v48 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v28 = v48 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }

  if (v49 == 2)
  {
    uint64_t v29 = 0;
  }

  else
  {
    uint64_t v29 = v49 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v29);
  if (v50 == 2)
  {
    __int128 v30 = 0;
  }

  else
  {
    __int128 v31 = v50 & 1;
    Hasher._combine(_:)(1u);
    __int128 v30 = v31;
  }

  Hasher._combine(_:)(v30);
  outlined retain of LocalePreferences?( (uint64_t)v52,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

          v28(v15, v8);
          goto LABEL_32;
        }
      }

      else if (v32 <= 64)
      {
        unint64_t v44 = dispatch thunk of BinaryInteger._lowWord.getter();
        v28((char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
        uint64_t v15 = v50;
        if (*(void *)&v52[0] >= v44) {
          goto LABEL_19;
        }
        goto LABEL_31;
      }

      MEMORY[0x1895F8858](v32);
      lazy protocol witness table accessor for type UInt and conformance UInt();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      unint64_t v43 = dispatch thunk of static Comparable.< infix(_:_:)();
      v28((char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
      v28((char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
      uint64_t v15 = v50;
      if ((v43 & 1) == 0) {
        goto LABEL_19;
      }
      goto LABEL_31;
    }

    unint64_t v53 = 0LL;
    memset(v52, 0, sizeof(v52));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    unint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for BinaryInteger?;
    id v7 = v52;
LABEL_13:
    outlined destroy of Any?((uint64_t)v7, v6);
    return 0LL;
  }

  BYTE8(v52[0]) = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  return *(id *)&v52[0];
}

    id v9 = (v20 - 1) & v20;
    unsigned int v8 = __clz(__rbit64(v20)) + (v7 << 6);
  }

  uint64_t v11 = *(void *)(result + 48);
  unint64_t v12 = *(_BYTE *)(v11 + v8);
  char v13 = v12;
  while (1)
  {
    if (v9)
    {
      uint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v15 = v14 | (v7 << 6);
      goto LABEL_7;
    }

    char v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_38;
    }

    if (v17 >= v10) {
      goto LABEL_51;
    }
    uint64_t v18 = *(void *)(v2 + 8 * v17);
    ++v7;
    if (!v18)
    {
      id v7 = v17 + 1;
      if (v17 + 1 >= v10) {
        goto LABEL_51;
      }
      uint64_t v18 = *(void *)(v2 + 8 * v7);
      if (!v18)
      {
        id v7 = v17 + 2;
        if (v17 + 2 >= v10) {
          goto LABEL_51;
        }
        uint64_t v18 = *(void *)(v2 + 8 * v7);
        if (!v18)
        {
          id v7 = v17 + 3;
          if (v17 + 3 >= v10) {
            goto LABEL_51;
          }
          uint64_t v18 = *(void *)(v2 + 8 * v7);
          if (!v18) {
            break;
          }
        }
      }
    }

  Hasher._combine(_:)(0);
LABEL_32:
  if (v33 == 2)
  {
    unint64_t v12 = 0;
  }

  else
  {
    unint64_t v12 = v33 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v12);
  if (v52 == 1)
  {
    Hasher._combine(_:)(0);
    char v13 = v42;
    if (v42 == 1) {
      goto LABEL_37;
    }
LABEL_47:
    Hasher._combine(_:)(1u);
    if (v13)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v24, v13);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v18 = v24;
      unint64_t v19 = v13;
    }

    else
    {
      Hasher._combine(_:)(0);
      uint64_t v18 = v24;
      unint64_t v19 = 0LL;
    }

    outlined consume of Locale.Subdivision??(v18, v19);
    if (v9 != 1) {
      goto LABEL_38;
    }
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }

  Hasher._combine(_:)(1u);
  char v13 = v42;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    unint64_t v16 = v23;
    char v17 = v52;
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v16 = v23;
    char v17 = 0LL;
  }

  outlined consume of Locale.Subdivision??(v16, v17);
  if (v42 != 1) {
    goto LABEL_47;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  if (v9 == 1) {
    goto LABEL_51;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  if (v9)
  {
    Hasher._combine(_:)(1u);
    ObjectType = swift_getObjectType();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 112);
    swift_unknownObjectRetain();
    v15(a1, ObjectType, v25);
    outlined consume of TimeZone??(v9);
  }

  else
  {
    Hasher._combine(_:)(0);
    outlined consume of TimeZone??(0LL);
  }

      while (1)
      {
        *(_BYTE *)(a1 + v7) = v18 - 1;
        unint64_t v19 = v7 + 1;
        if (__OFADD__(v7, 1LL)) {
          break;
        }
        ++v7;
        char v20 = v18 >= 0x100;
        v18 >>= 8;
        if (!v20)
        {
          id v7 = v19;
          goto LABEL_4;
        }
      }

      __break(1u);
LABEL_48:
      *a5 = 0LL;
      a5[1] = 0LL;
      return result;
    }

    uint64_t v18 = (v10 + 1);
    if ((_BYTE)v10 != 0xFF) {
      goto LABEL_31;
    }
LABEL_4:
    ;
  }

  uint64_t v11 = v6;
LABEL_16:
  if (v11) {
    goto LABEL_17;
  }
LABEL_45:
  if (v7 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t result = static String._tryFromUTF8(_:)();
    *a5 = result;
    a5[1] = v24;
  }

  return result;
}

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _NSSwiftTimeZone>);
        unint64_t v44 = static _DictionaryStorage.copy(original:)();
        uint64_t v25 = v44;
        if (*(void *)(v4 + 16))
        {
          uint64_t result = (char *)(v44 + 64);
          __src = (char *)(v4 + 64);
          int v46 = (unint64_t)((1LL << *(_BYTE *)(v25 + 32)) + 63) >> 6;
          if (v25 != v4 || result >= &__src[8 * v46]) {
            uint64_t result = (char *)memmove(result, __src, 8 * v46);
          }
          unint64_t v47 = 0LL;
          *(void *)(v25 + 16) = *(void *)(v4 + 16);
          unint64_t v48 = 1LL << *(_BYTE *)(v4 + 32);
          int64_t v49 = -1LL;
          if (v48 < 64) {
            int64_t v49 = ~(-1LL << v48);
          }
          BOOL v50 = v49 & *(void *)(v4 + 64);
          uint64_t v97 = (unint64_t)(v48 + 63) >> 6;
          while (1)
          {
            if (v50)
            {
              unint64_t v51 = __clz(__rbit64(v50));
              v50 &= v50 - 1;
              unint64_t v52 = v51 | (v47 << 6);
            }

            else
            {
              BOOL v55 = v47 + 1;
              if (__OFADD__(v47, 1LL))
              {
                __break(1u);
LABEL_147:
                __break(1u);
LABEL_148:
                __break(1u);
                goto LABEL_149;
              }

              if (v55 >= v97) {
                break;
              }
              int v56 = *(void *)&__src[8 * v55];
              ++v47;
              if (!v56)
              {
                unint64_t v47 = v55 + 1;
                if (v55 + 1 >= v97) {
                  break;
                }
                int v56 = *(void *)&__src[8 * v47];
                if (!v56)
                {
                  unint64_t v47 = v55 + 2;
                  if (v55 + 2 >= v97) {
                    break;
                  }
                  int v56 = *(void *)&__src[8 * v47];
                  if (!v56)
                  {
                    unint64_t v47 = v55 + 3;
                    if (v55 + 3 >= v97) {
                      break;
                    }
                    int v56 = *(void *)&__src[8 * v47];
                    if (!v56)
                    {
                      unint64_t v47 = v55 + 4;
                      if (v55 + 4 >= v97) {
                        break;
                      }
                      int v56 = *(void *)&__src[8 * v47];
                      if (!v56)
                      {
                        unint64_t v47 = v55 + 5;
                        if (v55 + 5 >= v97) {
                          break;
                        }
                        int v56 = *(void *)&__src[8 * v47];
                        if (!v56)
                        {
                          unint64_t v47 = v55 + 6;
                          if (v55 + 6 >= v97) {
                            break;
                          }
                          int v56 = *(void *)&__src[8 * v47];
                          if (!v56)
                          {
                            unint64_t v57 = v55 + 7;
                            if (v57 >= v97) {
                              break;
                            }
                            int v56 = *(void *)&__src[8 * v57];
                            if (!v56)
                            {
                              while (1)
                              {
                                unint64_t v47 = v57 + 1;
                                if (__OFADD__(v57, 1LL)) {
                                  break;
                                }
                                if (v47 >= v97) {
                                  goto LABEL_63;
                                }
                                int v56 = *(void *)&__src[8 * v47];
                                ++v57;
                                if (v56) {
                                  goto LABEL_62;
                                }
                              }

    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t v82 = v228;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    unint64_t v83 = dispatch thunk of static Comparable.< infix(_:_:)();
    v84 = v231;
    (*(void (**)(_BYTE *, uint64_t))(v231 + 8))(v82, v56);
    if ((v83 & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_59;
  }

  v80 = dispatch thunk of static BinaryInteger.isSigned.getter();
  unint64_t v81 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v80 & 1) == 0)
  {
    if (v81 < 64) {
      goto LABEL_35;
    }
    v128 = v231;
    v129 = v210;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v231 + 16))(v210, v232, v56);
    v235 = v61;
    if (v61 <= 0)
    {
      (*(void (**)(_BYTE *, uint64_t))(v128 + 8))(v129, v56);
    }

    else
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      v130 = v228;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v131 = dispatch thunk of static Comparable.< infix(_:_:)();
      v132 = *(void (**)(_BYTE *, uint64_t))(v231 + 8);
      v133 = v130;
      v84 = v231;
      v132(v133, v56);
      v132(v210, v56);
      if ((v131 & 1) != 0) {
        goto LABEL_59;
      }
    }

    goto LABEL_36;
  }

  if (v81 > 64) {
    goto LABEL_31;
  }
  v122 = v209;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v122, AssociatedConformanceWitness);
  v124 = v228;
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  v125 = v232;
  v200 = dispatch thunk of static Comparable.< infix(_:_:)();
  v126 = v124;
  v84 = v231;
  v210 = *(_BYTE **)(v231 + 8);
  ((void (*)(_BYTE *, uint64_t))v210)(v126, v56);
  v127 = v207;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v84 + 16))(v207, v125, v56);
  if ((v200 & 1) != 0)
  {
    ((void (*)(_BYTE *, uint64_t))v210)(v127, v56);
    goto LABEL_59;
  }

  v141 = v236;
  v142 = dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(_BYTE *, uint64_t))v210)(v127, v56);
  v159 = v142 < v141;
  v84 = v231;
  if (!v159)
  {
LABEL_36:
    v86 = Double.exponent.getter();
    v236 = v86;
    unint64_t v87 = dispatch thunk of static BinaryInteger.isSigned.getter();
    unint64_t v88 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v87 & 1) != 0)
    {
      if (v88 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        unint64_t v89 = v228;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        unint64_t v90 = v232;
LABEL_54:
        v137 = dispatch thunk of static Comparable.< infix(_:_:)();
        v138 = *(void (**)(_BYTE *, uint64_t))(v231 + 8);
        v138(v89, v56);
        v138(v90, v56);
        unint64_t v93 = v234;
        if ((v137 & 1) == 0)
        {
LABEL_55:
          v139 = dispatch thunk of BinaryFloatingPoint.significandWidth.getter();
          v140 = Double.significandWidth.getter();
          unint64_t v47 = v201;
          if (v140 < v139) {
            goto LABEL_86;
          }
LABEL_15:
          unint64_t v62 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
          unint64_t v63 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
          if (v62 == 11)
          {
            if (v63 == 52)
            {
              unsigned int v69 = v234;
              v229(v47, (uint64_t)v234, a2);
              uint64_t v70 = swift_dynamicCast();
              _D8 = *(double *)&v236;
              uint64_t v72 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v55 + 32);
              v73 = v218;
              v72(v218, (uint64_t)v69, a2);
              if (v70)
              {
                v59(v73, a2);
              }

              else
              {
                v106 = dispatch thunk of FloatingPoint.sign.getter();
                v107 = v222;
                dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
                v108 = v59;
                v109 = v224;
                swift_getAssociatedConformanceWitness();
                v110 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v223 + 8))(v107, v109);
                v111 = v225;
                dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
                v108(v73, a2);
                v112 = v227;
                swift_getAssociatedConformanceWitness();
                v113 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v226 + 8))(v111, v112);
                *(void *)&_D8 = (v106 << 63) | ((unint64_t)(v110 & 0x7FF) << 52) | v113 & 0xFFFFFFFFFFFFFLL;
              }

              return *(void *)&_D8;
            }
          }

          else if (v62 == 8)
          {
            if (v63 == 23)
            {
              int v74 = v234;
              v229(v216, (uint64_t)v234, a2);
              double v75 = swift_dynamicCast();
              v76 = *(float *)&v236;
              unint64_t v77 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v55 + 32);
              unint64_t v78 = v219;
              v77(v219, (uint64_t)v74, a2);
              if (v75)
              {
                v59(v78, a2);
                _D8 = v76;
              }

              else
              {
                v114 = dispatch thunk of FloatingPoint.sign.getter();
                v115 = v222;
                dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
                v116 = v59;
                v117 = v224;
                swift_getAssociatedConformanceWitness();
                v118 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v223 + 8))(v115, v117);
                v119 = v225;
                dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
                v116(v78, a2);
                v120 = v227;
                swift_getAssociatedConformanceWitness();
                v121 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v226 + 8))(v119, v120);
                _D8 = COERCE_FLOAT((v114 << 31) | (v118 << 23) | v121 & 0x7FFFFF);
              }

              return *(void *)&_D8;
            }
          }

          else if (v62 == 5 && v63 == 10)
          {
            uint64_t v64 = v234;
            v229(v217, (uint64_t)v234, a2);
            int v65 = swift_dynamicCast();
            _H8 = v236;
            char v67 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v55 + 32);
            uint64_t v68 = v220;
            v67(v220, (uint64_t)v64, a2);
            if (v65)
            {
              v59(v68, a2);
            }

            else
            {
              unint64_t v94 = dispatch thunk of FloatingPoint.sign.getter();
              uint64_t v95 = v222;
              dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
              uint64_t v96 = v59;
              uint64_t v97 = v224;
              swift_getAssociatedConformanceWitness();
              v98 = dispatch thunk of BinaryInteger._lowWord.getter();
              (*(void (**)(_BYTE *, uint64_t))(v223 + 8))(v95, v97);
              v99 = v225;
              dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
              v96(v68, a2);
              int v100 = v227;
              swift_getAssociatedConformanceWitness();
              v101 = dispatch thunk of BinaryInteger._lowWord.getter();
              (*(void (**)(_BYTE *, uint64_t))(v226 + 8))(v99, v100);
              _H8 = (v94 << 15) | ((v98 & 0x1F) << 10) | v101 & 0x3FF;
            }

            __asm { FCVT            D8, H8 }

            return *(void *)&_D8;
          }

          lazy protocol witness table accessor for type Double and conformance Double();
          unint64_t v79 = v234;
          static BinaryFloatingPoint._convert<A>(from:)();
          v59(v79, a2);
          _D8 = *(double *)&v236;
          return *(void *)&_D8;
        }

  __src[16] = (int)ucal_get();
  LOBYTE(__src[17]) = 0;
  if ((a2 & 0x40) != 0) {
    goto LABEL_32;
  }
LABEL_17:
  if ((a2 & 0x2000) == 0) {
    goto LABEL_39;
  }
LABEL_33:
  id v9 = (v7 - v8) * 1000000000.0;
  if ((~*(void *)&v9 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_47;
  }

  if (v9 <= -9.22337204e18)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
  }

  if (v9 >= 9.22337204e18) {
    goto LABEL_48;
  }
  id v10 = (uint64_t)v9;
  __src[20] = v10;
  LOBYTE(__src[21]) = (uint64_t)v9 == 0x7FFFFFFFFFFFFFFFLL;
LABEL_39:
  if ((*(void *)&a2 & 0x10004LL) != 0) {
    BYTE1(__src[35]) = ucal_get() != 0;
  }
  if ((a2 & 0x8000) != 0)
  {
    unint64_t v12 = a1[5];
    uint64_t v11 = a1[6];
    __src[2] = v12;
    __src[3] = v11;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    if (__src[0])
    {
      *(void *)&uint64_t v15 = v12;
      *((void *)&v15 + 1) = v11;
      Calendar.timeZone.setter((uint64_t *)&v15);
    }

    else
    {
      swift_unknownObjectRelease();
    }
  }

  return memcpy(a3, __src, 0x11AuLL);
}

  __src[26] = 0LL;
  LOBYTE(__src[27]) = 0;
  if ((a2 & 4) == 0)
  {
LABEL_18:
    if ((a2 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_33;
  }

    if (v15) {
      goto LABEL_73;
    }
    uint64_t result = *(unsigned __int16 *)(v7 + 16);
    char v20 = v13 - v12;
    if (__OFSUB__(v13, v12))
    {
LABEL_53:
      __break(1u);
LABEL_54:
      char v27 = v12;
      char v28 = v13;
      uint64_t v29 = v7;
      goto LABEL_57;
    }

    goto LABEL_33;
  }

    unint64_t v16 = (v20 - 1) & v20;
    char v17 = __clz(__rbit64(v20)) + (v18 << 6);
LABEL_32:
    outlined init with copy of AnyHashable(*(void *)(a2 + 48) + 40 * v17, (uint64_t)&v49);
    outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v17, (uint64_t)v51 + 8);
    v47[0] = v51[0];
    v47[1] = v51[1];
    unint64_t v48 = v52;
    v46[0] = v49;
    v46[1] = v50;
    outlined init with copy of AnyHashable((uint64_t)v46, (uint64_t)v41);
    if (!swift_dynamicCast())
    {
      outlined destroy of Any?( (uint64_t)v46,  &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      swift_bridgeObjectRelease();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_release();
      unsigned int v8 = (void *)MEMORY[0x18961AFF0];
      goto LABEL_39;
    }

    outlined init with copy of Any((uint64_t)v47 + 8, (uint64_t)v41);
    outlined destroy of Any?( (uint64_t)v46,  &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v41, v42);
    unint64_t v43 = v40;
    outlined init with take of Any(v42, v44);
    unint64_t v22 = v43;
    outlined init with take of Any(v44, v45);
    outlined init with take of Any(v45, &v43);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v22, *((uint64_t *)&v22 + 1));
    char v23 = result;
    if ((v24 & 1) != 0)
    {
      uint64_t v14 = (_OWORD *)(v8[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v14 = v22;
      uint64_t v15 = (_OWORD *)(v8[7] + 32 * v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      uint64_t result = (unint64_t)outlined init with take of Any(&v43, v15);
    }

    else
    {
      if (v8[2] >= v8[3])
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        return result;
      }

      *(void *)((char *)v8 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      *(_OWORD *)(v8[6] + 16 * result) = v22;
      uint64_t result = (unint64_t)outlined init with take of Any(&v43, (_OWORD *)(v8[7] + 32 * result));
      uint64_t v25 = v8[2];
      unint64_t v26 = __OFADD__(v25, 1LL);
      char v27 = v25 + 1;
      if (v26) {
        goto LABEL_43;
      }
      v8[2] = v27;
    }

    char v13 = v18;
    uint64_t v11 = v16;
  }

      uint64_t v71 = (v29 - 1) & v29;
      char v27 = __clz(__rbit64(v29)) + (v28 << 6);
    }

    __int128 v31 = 8 * v27;
    __int128 v32 = *(void *)(*(void *)(v17 + 48) + v31);
    uint64_t v72 = *(void *)(*(void *)(v17 + 56) + v31);
    swift_retain();
    __int128 v33 = BPlistMap.loadValue(at:)(v32);
    if (v25)
    {
      v76 = v23;
      swift_release();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_57:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_release_n();
    }

    __int128 v34 = v33;
    swift_release();
    unint64_t v79 = v34;
    if (v34 >> 60 == 9)
    {
      v76 = v23;
      if (((v34 + 0x6FFFFFFFFFFFFFF8LL) & 0xFFFFFFFFFFFFFFF7LL) == 0)
      {
        unint64_t v58 = type metadata accessor for DecodingError();
        swift_allocError();
        size_t v60 = v59;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *size_t v60 = MEMORY[0x189617FA8];
        _CodingPathNode.path.getter(a4);
        *(void *)&v73 = 0LL;
        *((void *)&v73 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(50LL);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        pthread_t v61 = v60;
        unint64_t v57 = v79;
        (*(void (**)(void *, void, uint64_t))(*(void *)(v58 - 8) + 104LL))( v61,  *MEMORY[0x189619368],  v58);
        swift_willThrow();
        goto LABEL_56;
      }

      goto LABEL_53;
    }

    char v35 = v7[3];
    if (v34 >> 60)
    {
      v76 = v23;
LABEL_53:
      swift_retain();
      _CodingPathNode.path.getter(a4);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)( MEMORY[0x189617FA8],  v79,  (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter,  v53);
      swift_bridgeObjectRelease();
LABEL_55:
      swift_willThrow();
      swift_release();
      unint64_t v57 = v79;
LABEL_56:
      outlined consume of BPlistMap.Value(v57);
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      goto LABEL_57;
    }

    unsigned int v69 = v28;
    char v36 = *(void *)(v34 + 24);
    uint64_t v70 = *(void *)(v34 + 16);
    MEMORY[0x1895F8858](v35);
    __int128 v38 = *(void *)(v37 + 64);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v38 + 40));
    specialized closure #1 in BPlistMap.withBuffer<A>(for:perform:)( (void *)(v38 + 16),  (void *(*)(__int128 *__return_ptr, uint64_t, uint64_t))partial apply for closure #1 in static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:),  v70,  v36,  &v73);
    uint64_t v25 = 0LL;
    os_unfair_lock_unlock((os_unfair_lock_t)(v38 + 40));
    swift_release();
    char v20 = *((void *)&v73 + 1);
    if (!*((void *)&v73 + 1))
    {
      v76 = v23;
      unint64_t v54 = type metadata accessor for DecodingError();
      swift_allocError();
      int v56 = v55;
      swift_retain();
      _CodingPathNode.path.getter(a4);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v54 - 8) + 104LL))( v56,  *MEMORY[0x189619360],  v54);
      swift_release();
      goto LABEL_55;
    }

    int v39 = v73;
    swift_release();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v73 = v23;
    unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v20);
    unint64_t v43 = v23[2];
    unint64_t v44 = (v41 & 1) == 0;
    unsigned __int8 v45 = v43 + v44;
    if (__OFADD__(v43, v44)) {
      break;
    }
    int v46 = v41;
    if (v23[3] >= v45)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }

    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v45,  isUniquelyReferenced_nonNull_native);
      unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v20);
      if ((v46 & 1) != (v48 & 1)) {
        goto LABEL_64;
      }
      unint64_t v42 = v47;
    }

    char v23 = (void *)v73;
    if ((v46 & 1) != 0)
    {
      *(void *)(*(void *)(v73 + 56) + 8 * v42) = v72;
    }

    else
    {
      *(void *)(v73 + 8 * (v42 >> 6) + 64) |= 1LL << v42;
      int64_t v49 = (uint64_t *)(v23[6] + 16 * v42);
      *int64_t v49 = v39;
      v49[1] = v20;
      *(void *)(v23[7] + 8 * v42) = v72;
      BOOL v50 = v23[2];
      unint64_t v51 = __OFADD__(v50, 1LL);
      unint64_t v52 = v50 + 1;
      if (v51) {
        goto LABEL_61;
      }
      v23[2] = v52;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of BPlistMap.Value(v79);
    unint64_t v26 = v69;
    char v20 = v71;
    char v17 = v67;
  }

  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  os_unfair_lock_unlock((os_unfair_lock_t)v20);
  swift_release();
  __break(1u);
LABEL_64:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

    uint64_t v97 = 0LL;
    v98 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(37LL);
    swift_bridgeObjectRelease();
    uint64_t v97 = 0xD000000000000023LL;
    v98 = 0x80000001839D2530LL;
    uint64_t v96 = v55;
    v86._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v86);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  int v56 = v95;
  if (HIDWORD(v54))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_31;
  }

  unint64_t v57 = v94;
  if ((~(_DWORD)v54 & 0x7F800000) == 0 && (v54 & 0x7FFFFF) != 0) {
    return dispatch thunk of static FloatingPoint.nan.getter();
  }
  LODWORD(v97) = *(void *)(v24 + 16);
  lazy protocol witness table accessor for type Float and conformance Float();
  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  unint64_t v58 = *(void *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v14, 1LL, v56) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    uint64_t v97 = 0LL;
    v98 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(45LL);
    v59._countAndFlagsBits = 0xD000000000000016LL;
    v59._object = (void *)0x80000001839D2560LL;
    String.append(_:)(v59);
    Float.write<A>(to:)();
    v60._object = (void *)0x80000001839D1400LL;
    v60._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v60);
    v61._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v62._countAndFlagsBits = 46LL;
    v62._object = (void *)0xE100000000000000LL;
    String.append(_:)(v62);
    unint64_t v63 = v97;
    uint64_t v64 = v98;
    type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v48 = v65;
    int64_t v49 = v63;
    BOOL v50 = v64;
    unint64_t v51 = v92;
    unint64_t v52 = v93;
    unint64_t v53 = v57;
    goto LABEL_26;
  }

  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 32))(v90, v14, v56);
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v22);
  swift_bridgeObjectRelease();
LABEL_32:
  uint64_t v24 = v66;
  unint64_t v26 = v67;
  uint64_t v25 = v68;
  char v27 = v69;
  unint64_t v51 = v69;
  unint64_t v52 = v65;
  if (v65)
  {
    char v28 = v65;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v29 = v24;
    __int128 v30 = v26;
    __int128 v31 = v25;
    __int128 v32 = v27;
    __int128 v33 = v28;
    _CFObject.hash(into:)();
    unint64_t v53 = v24;
    unint64_t v54 = v25;
    if (v24)
    {
LABEL_34:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      __int128 v34 = v26;
      char v35 = v24;
      _CFObject.hash(into:)();

      unint64_t v26 = v34;
      goto LABEL_37;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    char v36 = v27;
    __int128 v37 = v24;
    __int128 v38 = v26;
    int v39 = v25;
    unint64_t v53 = v24;
    unint64_t v54 = v25;
    if (v24) {
      goto LABEL_34;
    }
  }

  Hasher._combine(_:)(0);
LABEL_37:
  BOOL v55 = v26;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v40 = v26;
    _CFObject.hash(into:)();

    unint64_t v41 = v54;
    if (v54) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    if (v51) {
      goto LABEL_40;
    }
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  unint64_t v41 = v54;
  if (!v54) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  unint64_t v42 = v41;
  _CFObject.hash(into:)();

  if (v51)
  {
LABEL_40:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v43 = v51;
    _CFObject.hash(into:)();

    goto LABEL_44;
  }

    if (a2 >= 0.0 || (_BYTE)v13) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }

  if (v13 >= -8 && v13 <= 8)
  {
    if (v13 < 0)
    {
      LODWORD(v13) = v4 >> (v12 - v9);
    }

    else
    {
      LODWORD(v13) = v4 << v13;
    }

    goto LABEL_20;
  }

    if (a2 >= 0.0 || (_WORD)v13) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }

  if (v13 >= -16 && v13 <= 16)
  {
    if (v13 < 0)
    {
      LODWORD(v13) = (unsigned __int16)v4 >> (v12 - v9);
    }

    else
    {
      LODWORD(v13) = v4 << v13;
    }

    goto LABEL_20;
  }

    if (a2 >= 0.0 || (_DWORD)v13) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }

  if (v13 >= -32 && v13 <= 32)
  {
    if (v13 < 0)
    {
      LODWORD(v13) = v4 >> (v12 - v9);
    }

    else
    {
      LODWORD(v13) = v4 << v13;
    }

    goto LABEL_20;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  if (v28)
  {
LABEL_26:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v20, v28);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v20, v28);
    if (v29) {
      goto LABEL_27;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v10) {
      goto LABEL_28;
    }
    goto LABEL_34;
  }

      char v20 = 1;
    }

    uint64_t v24 = v11 + 1;
    *(_BYTE *)(a6 + v11) = BYTE2(v13);
    if (v20 && v12 > 1) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }

    if (a3 == -1LL && v11)
    {
      id v10 = reallocf(v10, v11);
    }

    else if (!v11)
    {
      goto LABEL_36;
    }

    return (id)[MEMORY[0x189603F48] dataWithBytesNoCopy:v10 length:v11];
  }

  id v7 = lseek(self->_fd, 0LL, 1);
  if (v7 < 0) {
    goto LABEL_40;
  }
  if (v21.st_size <= v7) {
    return (id)[MEMORY[0x189603F48] data];
  }
  if (v21.st_size - v7 >= a3) {
    unsigned int v8 = a3;
  }
  else {
    unsigned int v8 = v21.st_size - v7;
  }
  id v9 = malloc(v8);
  if (!v9) {
    goto LABEL_40;
  }
  id v10 = v9;
  if (v8 >= 1)
  {
    uint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = _NSReadFromFileDescriptorWithProgress(self->_fd, (char *)v10 + v11, v8, 0LL, 0);
      if (v12 < 0) {
        break;
      }
      if (v12)
      {
        v11 += v12;
        char v13 = v8 <= v12;
        v8 -= v12;
        if (!v13) {
          continue;
        }
      }

      goto LABEL_31;
    }

  unint64_t v19 = (NSKeyValueCollectionGetter *)[a1 _createValuePrimitiveGetterWithContainerClassID:a3 key:a4];
LABEL_32:
  if (v8)
  {
    free(v10);
    free(v15);
  }

  return v19;
}

        unint64_t v16 = 3LL;
        goto LABEL_41;
      case 4LL:
        if ((a4 & 2) != 0)
        {
          uint64_t v21 = (void *)[result valueForKey:a2];
          uint64_t result = (void *)[v21 mutableCopy];
          uint64_t v15 = (uint64_t)result;
          if (*(void *)(a5 + 8)) {
            uint64_t result = (void *)objc_msgSend(result, "minusSet:");
          }
          if ((a4 & 1) == 0)
          {
            char v13 = 0LL;
            goto LABEL_40;
          }

          if (v21)
          {
            char v13 = (void *)[*(id *)(a5 + 8) mutableCopy];
            goto LABEL_39;
          }
        }

        else
        {
          char v13 = 0LL;
          if ((a4 & 1) == 0)
          {
            unint64_t v16 = 4LL;
            uint64_t v15 = 0LL;
            goto LABEL_41;
          }

          uint64_t v15 = 0LL;
        }

        uint64_t v21 = (void *)[v10 valueForKey:a2];
        uint64_t result = (void *)[*(id *)(a5 + 8) mutableCopy];
        char v13 = result;
        if (!v21) {
          goto LABEL_40;
        }
LABEL_39:
        uint64_t result = (void *)[v13 minusSet:v21];
LABEL_40:
        unint64_t v16 = 4LL;
LABEL_41:
        *a7 = v16;
        a7[1] = v15;
        a7[4] = 0LL;
        uint64_t v14 = 1;
        a7[2] = (uint64_t)v13;
        break;
      default:
        char v13 = 0LL;
        uint64_t v15 = 0LL;
        unint64_t v16 = 0LL;
        goto LABEL_41;
    }
  }

  else
  {
    if ((a4 & 2) != 0)
    {
      uint64_t result = (void *)[result valueForKeyPath:a2];
      if (!result) {
        uint64_t result = (void *)[MEMORY[0x189603FE8] null];
      }
    }

    else
    {
      uint64_t result = 0LL;
    }

    uint64_t v14 = 0;
    *a7 = 1LL;
    a7[1] = (uint64_t)result;
    a7[4] = 0LL;
    a7[2] = 0LL;
  }

  a7[3] = 0LL;
  *a6 = v14;
  return result;
}

      uint64_t v11 = 0;
      goto LABEL_194;
    }

    char v28 = (const __CFString *)v15;
    unint64_t v26 = (void *)MEMORY[0x189603F70];
    char v27 = *MEMORY[0x189603A60];
    while (1)
    {
LABEL_32:
      objc_exception_throw((id)[v26 exceptionWithName:v27 reason:v28 userInfo:0]);
LABEL_33:
      unint64_t v26 = (void *)MEMORY[0x189603F70];
      char v27 = *MEMORY[0x189603A60];
      char v28 = @"Cannot subtract measurements of differing unit types!";
    }
  }

  if (-[NSUnit isEqual:](self->_unit, "isEqual:", [a4 unit]))
  {
    doubleValue = self->_doubleValue;
    [a4 doubleValue];
    id v9 = doubleValue - v8;
    id v10 = doubleValue + v8;
    if (a3) {
      id v10 = 0.0;
    }
    if (a3 == 1) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    unit = self->_unit;
    return  -[NSMeasurement initWithDoubleValue:unit:]( objc_alloc(&OBJC_CLASS___NSMeasurement),  "initWithDoubleValue:unit:",  unit,  v11);
  }

  [a4 unit];
  if (!isDimensional() || !isDimensional())
  {
    char v23 = objc_opt_class();
    [a4 unit];
    uint64_t v24 = objc_opt_class();
    if (a3 == 1)
    {
      uint64_t v15 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot subtract differing units that are non-dimensional! lhs: %@ rhs: %@",  v23,  v24);
    }

    else
    {
      if (a3) {
        goto LABEL_23;
      }
      uint64_t v15 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot add differing units that are non-dimensional! lhs: %@ rhs: %@",  v23,  v24);
    }

    goto LABEL_31;
  }

  objc_msgSend((id)objc_msgSend(a4, "unit"), "dimension");
  -[NSUnit dimension](self->_unit, "dimension");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (a3 == 1) {
      goto LABEL_33;
    }
    if (!a3)
    {
      unint64_t v26 = (void *)MEMORY[0x189603F70];
      char v27 = *MEMORY[0x189603A60];
      char v28 = @"Cannot add measurements of differing unit types!";
      goto LABEL_32;
    }

  if (v4->_symbolicLinkIsFirmlink) {
    return v4->_symbolicLinkDestination;
  }
  return v4;
}

    if (a5) {
      uint64_t v24 = 8LL;
    }
    else {
      uint64_t v24 = 16LL;
    }

    *(void *)(a4 + v24) = [v34 copy];
  }

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of (Hashable & Sendable)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }

  return result;
}

uint64_t type metadata accessor for NSMorphologyPronoun(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }

  return result;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void specialized static UInt._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedIntegerValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInteger_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(void *)a2 = v3;
    *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v17 - 128), 8) = 0;
  }

  else
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 544175136LL;
    v7._object = (void *)0xE400000000000000LL;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 1953384789LL;
    v8._object = (void *)0xE400000000000000LL;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

void specialized static Bool._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, char *a2)
{
  if (!*MEMORY[0x189604DE8])
  {
    __break(1u);
    goto LABEL_12;
  }

  if (*MEMORY[0x189604DE8] == a1)
  {
    char v4 = 1;
    goto LABEL_10;
  }

  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  char v4 = 1;
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 1);
  char v6 = static NSObject.== infix(_:_:)();

  if ((v6 & 1) != 0)
  {
LABEL_10:
    *a2 = v4;
    return;
  }

  if (!*MEMORY[0x189604DE0])
  {
LABEL_12:
    __break(1u);
    return;
  }

  if (*MEMORY[0x189604DE0] == a1)
  {
    char v4 = 0;
    goto LABEL_10;
  }

  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0);
  char v8 = static NSObject.== infix(_:_:)();

  char v4 = 0;
  if ((v8 & 1) != 0) {
    goto LABEL_10;
  }
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of LocalePreferences?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)( void *a1, uint64_t *a2)
{
  return closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)( a1,  a2,  *(void (**)(char *, void *))(v2 + 40),  *(void *)(v2 + 48),  *(void *)(v2 + 16),  *(void *)(v2 + 24));
}

uint64_t closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)( void *a1, uint64_t *a2, void (*a3)(char *, void *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a4;
  uint64_t v25 = a3;
  uint64_t v26 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (int *)type metadata accessor for NSKeyValueObservedChange(0LL, v14, v12, v13);
  uint64_t v16 = *((void *)v15 - 1);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (uint64_t *)((char *)&v24 - v17);
  uint64_t v19 = *a2;
  closure #1 in closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)( (uint64_t)(a2 + 1),  a6,  (uint64_t)&v24 + v15[7] - v17);
  closure #1 in closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)( (uint64_t)(a2 + 5),  a6,  (uint64_t)v18 + v15[8]);
  uint64_t v20 = a2[9];
  char v21 = *((_BYTE *)a2 + 80);
  void *v18 = v19;
  *(void *)((char *)v18 + v15[9]) = v20;
  *((_BYTE *)v18 + v15[10]) = v21;
  char v27 = a1;
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_retain();
  id v22 = a1;
  swift_dynamicCast();
  v25(v11, v18);
  (*(void (**)(void *, int *))(v16 + 8))(v18, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v11, a5);
}

uint64_t type metadata accessor for NSKeyValueObservedChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for NSKeyValueObservedChange);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x186E20CA4](a1, v6, a5);
}

uint64_t closure #1 in closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = swift_conformsToProtocol2();
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (v6) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = 0LL;
  }
  if (v8)
  {
    outlined init with copy of Any?(a1, (uint64_t)&v15);
    if (v16)
    {
      outlined init with take of Any(&v15, v17);
      id v9 = *(void (**)(_OWORD *, uint64_t, uint64_t))(v7 + 8);
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      *(void *)&__int128 v15 = swift_allocObject();
      v9(v17, v8, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      outlined init with copy of Any((uint64_t)&v15, (uint64_t)v14);
      outlined init with take of Any?((uint64_t)v14, (uint64_t)&v13);
      int v10 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))(a3, v10 ^ 1u, 1LL, a2);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
    }

    outlined destroy of Any?((uint64_t)&v15, &demangling cache variable for type metadata for Any?);
  }

  outlined init with copy of Any?(a1, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  int v12 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))( a3,  v12 ^ 1u,  1LL,  a2);
}

uint64_t partial apply for closure #1 in NSObject.KVOSubscription.init(_:_:_:_:)()
{
  return closure #1 in NSObject.KVOSubscription.init(_:_:_:_:)();
}

uint64_t closure #1 in NSObject.KVOSubscription.init(_:_:_:_:)()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    NSObject.KVOSubscription.changes()();
    return swift_release();
  }

  return result;
}

uint64_t NSObject.KVOSubscription.changes()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 96LL);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v31 - v7;
  uint64_t v9 = *(void *)(v3 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v6);
  char v35 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(v2 + 88);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v10);
  __int128 v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = MEMORY[0x186E20F44]((char *)v1 + *(void *)(v2 + 152));
  if (result)
  {
    uint64_t v33 = v12;
    uint64_t v34 = v13;
    uint64_t v36 = result;
    id v17 = (id)result;
    swift_getAtKeyPath();
    id v32 = v17;

    uint64_t v18 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 176LL));
    os_unfair_lock_lock(v18);
    uint64_t v19 = v1[3];
    static Subscribers.Demand.unlimited.getter();
    uint64_t result = static Subscribers.Demand.== infix(_:_:)();
    if ((result & 1) == 0)
    {
      if (v19 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      if (!v19)
      {
LABEL_7:
        uint64_t v20 = v34;
        if ((v1[4] & 1) == 0 && (*((_BYTE *)v1 + *(void *)(*v1 + 160LL)) & 4) != 0)
        {
          char v21 = (char *)v1 + *(void *)(*v1 + 136LL);
          uint64_t v22 = v33;
          uint64_t v23 = type metadata accessor for Optional();
          (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8LL))(v21, v23);
          (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v21, v15, v22);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v21, 0LL, 1LL, v22);
          *((_BYTE *)v1 + 32) = 1;
        }

        os_unfair_lock_unlock(v18);

        return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v15, v33);
      }
    }

    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, (char *)v1 + *(void *)(*v1 + 144LL), v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1LL, v3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      goto LABEL_7;
    }

    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v35, v8, v3);
    uint64_t v24 = v1[3];
    static Subscribers.Demand.unlimited.getter();
    char v25 = static Subscribers.Demand.== infix(_:_:)();
    uint64_t v20 = v34;
    if ((v25 & 1) != 0) {
      goto LABEL_18;
    }
    static Subscribers.Demand.unlimited.getter();
    uint64_t result = static Subscribers.Demand.== infix(_:_:)();
    if ((result & 1) != 0)
    {
      uint64_t v26 = static Subscribers.Demand.unlimited.getter();
LABEL_17:
      v1[3] = v26;
LABEL_18:
      os_unfair_lock_unlock(v18);
      os_unfair_recursive_lock_lock_with_options();
      uint64_t v27 = dispatch thunk of Subscriber.receive(_:)();
      os_unfair_recursive_lock_unlock();
      os_unfair_lock_lock(v18);
      uint64_t v28 = v1[3];
      static Subscribers.Demand.unlimited.getter();
      if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
      {
LABEL_28:
        os_unfair_lock_unlock(v18);

        (*(void (**)(char *, uint64_t))(v9 + 8))(v35, v3);
        return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v15, v33);
      }

      static Subscribers.Demand.unlimited.getter();
      char v29 = static Subscribers.Demand.== infix(_:_:)();
      uint64_t v30 = static Subscribers.Demand.unlimited.getter();
      if ((v29 & 1) != 0)
      {
        uint64_t v20 = v34;
LABEL_27:
        v1[3] = v30;
        goto LABEL_28;
      }

      uint64_t result = static Subscribers.Demand.== infix(_:_:)();
      uint64_t v20 = v34;
      if ((result & 1) != 0) {
        goto LABEL_25;
      }
      if (((v28 | v27) & 0x8000000000000000LL) == 0)
      {
        uint64_t v30 = v28 + v27;
        if (!__OFADD__(v28, v27))
        {
          if ((v30 & 0x8000000000000000LL) == 0) {
            goto LABEL_27;
          }
LABEL_35:
          __break(1u);
          return result;
        }

LABEL_25:
        uint64_t v30 = static Subscribers.Demand.unlimited.getter();
        goto LABEL_27;
      }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  *(void *)&char v35 = 0LL;
  *((void *)&v35 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(18LL);
  swift_bridgeObjectRelease();
  *(void *)&char v35 = 0x65727574706163LL;
  *((void *)&v35 + 1) = 0xE700000000000000LL;
  uint64_t v19 = *(void *)(a1 + 24);
  uint64_t v33 = v19;
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 10272LL;
  v21._object = (void *)0xE200000000000000LL;
  String.append(_:)(v21);
  __swift_project_boxed_opaque_existential_1(v38, v39);
  swift_getDynamicType();
  v22._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 2112041LL;
  v23._object = (void *)0xE300000000000000LL;
  String.append(_:)(v23);
  v24._countAndFlagsBits = v9;
  v24._object = v10;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  char v25 = v35;
  uint64_t v26 = *(void **)(a1 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v26[2] + 1LL,  1,  v26);
  }
  uint64_t v28 = v26[2];
  uint64_t v27 = v26[3];
  if (v28 >= v27 >> 1) {
    uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v27 > 1),  v28 + 1,  1,  v26);
  }
  v26[2] = v28 + 1;
  *(_OWORD *)&v26[2 * v28 + 4] = v25;
  *(void *)(a1 + 16) = v26;
  *(void *)&char v35 = 0x65727574706163LL;
  *((void *)&v35 + 1) = 0xE700000000000000LL;
  uint64_t v33 = v19;
  v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  if (__OFADD__(v19, 1LL))
  {
    __break(1u);
    JUMPOUT(0x182EE5DF4LL);
  }

  uint64_t v30 = v35;
  *(void *)(a1 + 24) = v19 + 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  return v30;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = v51;
  if (v51) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  id v17 = v52;
  if (!v52)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }

    LOBYTE(v34[0]) = 0;
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    id v32 = 0LL;
    return (unint64_t)URL.init(filePath:directoryHint:relativeTo:)( v4,  v5,  (unsigned __int8 *)v34,  (uint64_t)&v30,  a3);
  }

  LOBYTE(v34[0]) = 0;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  id v32 = 0LL;
  swift_bridgeObjectRetain();
  return (unint64_t)URL.init(filePath:directoryHint:relativeTo:)( v4,  v5,  (unsigned __int8 *)v34,  (uint64_t)&v30,  a3);
}

    uint64_t v1 = 0LL;
    goto LABEL_26;
  }

  uint64_t v1 = *(void *)(v0 + 72);
LABEL_26:
  swift_bridgeObjectRetain();
  return v1;
}

  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  if (!v31)
  {
LABEL_14:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
    if (!v32) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }

  Hasher._combine(_:)(0);
  if (!v33)
  {
LABEL_10:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
    if (!v34) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  Hasher._combine(_:)(0);
  if (!v33)
  {
LABEL_10:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
    if (!v34) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }

      __break(1u);
      goto LABEL_25;
    }

    __break(1u);
    goto LABEL_26;
  }

  PropertyListEncoder._encodeBPlist<A>(_:)(a1, a2, a3);
  if (!v4) {
    return;
  }
LABEL_13:
  uint64_t v24 = v5;
LABEL_21:
  BOOL v50 = type metadata accessor for EncodingError();
  swift_allocError();
  unint64_t v52 = v51;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
  v52[3] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52);
  (*(void (**)(uint64_t *, unint64_t, unint64_t))(*(void *)(a2 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a2);
  unint64_t v54 = v24;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v50 - 8) + 104LL))( v52,  *MEMORY[0x1896193B8],  v50);
  swift_willThrow();
}

  Hasher._combine(_:)(2uLL);
  Hasher._combine(_:)(v28);
  if (!v18) {
    goto LABEL_26;
  }
LABEL_22:
  if (v18 == 1)
  {
    uint64_t v20 = 1LL;
    goto LABEL_27;
  }

  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v26, v18);
  if (!v8) {
    goto LABEL_31;
  }
LABEL_28:
  if (v8 == 1)
  {
    char v21 = 1LL;
    goto LABEL_32;
  }

  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v6, v8);
  if (!v9) {
    goto LABEL_36;
  }
LABEL_33:
  if (v9 == 1)
  {
    uint64_t v22 = 1LL;
LABEL_37:
    Hasher._combine(_:)(v22);
    return;
  }

  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v7, v9);
}

                          int v46 = *(void *)(v25 + 56) + 16 * v39;
                          outlined consume of Data._Representation(*(void *)v46, *(void *)(v46 + 8));
                          *(void *)int v46 = v45;
                          *(void *)(v46 + _Block_object_dispose((const void *)(v17 - 128), 8) = v33;
                          goto LABEL_62;
                        }

                        v85 = v92 + 8;
                      }
                    }
                  }
                }
              }
            }
          }

    unint64_t v41 = (v47 - 1) & v47;
    unint64_t v42 = __clz(__rbit64(v47)) + (v46 << 6);
    char v35 = v46;
LABEL_21:
    unint64_t v43 = *(void *)(v105 + 56);
    unint64_t v44 = (void *)(*(void *)(v105 + 48) + 16 * v42);
    unsigned __int8 v45 = v44[1];
    *(void *)&v113 = *v44;
    *((void *)&v113 + 1) = v45;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( v43 + 40 * v42,  (uint64_t)v104);
    swift_bridgeObjectRetain();
LABEL_31:
    outlined init with take of (key: String, value: Encodable)?((uint64_t)&v113, (uint64_t)&v117);
    uint64_t v13 = v118;
    if (!v118)
    {
      swift_release();
      unint64_t v87 = v100;
      if (*v100 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }

      else
      {
        unint64_t v88 = *(void *)((*v100 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      if (v99 >= v88)
      {
        unint64_t v89 = 0LL;
        goto LABEL_108;
      }

      unint64_t v89 = *v87;
      if (*v87 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v93) {
          goto LABEL_99;
        }
      }

      else if (*(void *)((v89 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
LABEL_99:
        unint64_t v89 = specialized RangeReplaceableCollection<>.popLast()();
LABEL_108:
        swift_release();
        swift_release();
        return v89;
      }

      __break(1u);
      goto LABEL_120;
    }

    __int128 v15 = v117;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v107, (uint64_t)&v113);
    unint64_t v48 = *((void *)&v114 + 1);
    int64_t v49 = (void *)v115;
    BOOL v50 = __swift_project_boxed_opaque_existential_1(&v113, *((uint64_t *)&v114 + 1));
    swift_bridgeObjectRetain();
    unint64_t v51 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)( (uint64_t)v50,  v110,  (uint64_t)v15,  (uint64_t)v13,  0LL,  0,  v48,  v49);
    uint64_t v9 = v6;
    if (v6)
    {
      swift_bridgeObjectRelease_n();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v113);
      swift_release();
      unint64_t v90 = v100;
      unint64_t v89 = *v100;
      if (*v100 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v91 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }

      else
      {
        unint64_t v91 = *(void *)((v89 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      if (v99 >= v91) {
        goto LABEL_106;
      }
      unint64_t v89 = *v90;
      if (!(*v90 >> 62))
      {
        if (*(void *)((v89 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
LABEL_105:
          specialized RangeReplaceableCollection<>.popLast()();
          swift_release();
LABEL_106:
          swift_willThrow();
          swift_release();
          swift_release();
          return v89;
        }

        __break(1u);
        JUMPOUT(0x18301BB14LL);
      }
    }

    if ((a2 & 0x1000000000000000LL) == 0) {
LABEL_20:
    }
      __asm { BR              X9 }

    goto LABEL_16;
  }

  return 0LL;
}

      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v8,  v5,  v7,  v9,  0x65766F6D6552LL,  0xE600000000000000LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&dst,  0LL,  0LL);
LABEL_26:
      uint64_t v31 = (void *)dst;
      id v32 = *(void **)(a3 + 24);
      if (!v32)
      {
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }

      uint64_t v33 = v32;
      uint64_t v34 = v31;
      char v35 = NSFileManager._shouldProceedAfter(error:removingItemAtPath:)(v34, v5, v7);

      swift_bridgeObjectRelease();
      if ((v35 & 1) == 0)
      {
LABEL_30:
        uint64_t v34 = *(id *)(a3 + 16);
        *(void *)(a3 + 16) = v31;
        swift_release();
        uint64_t v36 = 2LL;
        goto LABEL_31;
      }

      swift_release();
      uint64_t v36 = 0LL;
LABEL_31:

      return v36;
    default:
      if ((_DWORD)dst == 102)
      {
        uint64_t v9 = 0LL;
        uint64_t v8 = 512LL;
        goto LABEL_25;
      }

    v192[4] = v224;
    v192[5] = v225;
    v192[6] = v226;
    v192[7] = v227;
    v192[0] = v220;
    v192[1] = v221;
    v192[2] = v222;
    v192[3] = v223;
    v191 = v139;
    v193 = v38;
    v194 = v144;
    v195 = v143;
    v196 = v142;
    v197 = v47;
    v198 = v141;
    v199 = v140;
    v200 = v156;
    v201 = v155;
    v202 = v154;
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v191);
    uint64_t result = swift_release();
    *v122 = v19;
  }

  return result;
}

            uint64_t v7 = 0LL;
            goto LABEL_37;
          }

          goto LABEL_46;
        }

        goto LABEL_16;
      }

        __break(1u);
LABEL_26:
        __break(1u);
        return result;
      }

  if (v4 != v5) {
    __break(1u);
  }
  __break(1u);
}

  specialized Set._Variant.insert(_:)(&v3, 4uLL);
  if ((a1 & 0x40) == 0)
  {
LABEL_7:
    if ((a1 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v14);
        swift_bridgeObjectRelease();
        __int128 v15 = v49;
        if (!v49) {
          goto LABEL_19;
        }
        goto LABEL_26;
      }

      outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43);
      uint64_t v16 = v43;
    }

    else
    {
      Hasher._combine(_:)(0);
      uint64_t v16 = v44;
    }

    outlined retain of LocalePreferences(v16);
    if (!v46) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }

  Hasher._combine(_:)(0);
LABEL_59:
  Hasher._combine(_:)(v5);
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)((uint64_t)v64, v13);
        swift_bridgeObjectRelease();
        uint64_t v14 = v48;
        if (!v48) {
          goto LABEL_19;
        }
        goto LABEL_26;
      }

      outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v42);
      __int128 v15 = v42;
    }

    else
    {
      Hasher._combine(_:)(0);
      __int128 v15 = v43;
    }

    outlined retain of LocalePreferences(v15);
    if (!v45) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }

  Hasher._combine(_:)(0);
LABEL_59:
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)((uint64_t)v62, v14);
          swift_bridgeObjectRelease();
LABEL_26:
          uint64_t v16 = v47;
          __int128 v15 = v48;
          uint64_t v18 = v49;
          id v17 = v50;
          uint64_t v19 = v51;
          if (v47)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v20 = v15;
            char v21 = v18;
            uint64_t v22 = v17;
            uint64_t v23 = v19;
            uint64_t v24 = v16;
            _CFObject.hash(into:)();
            if (v15) {
              goto LABEL_28;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            char v29 = v19;
            uint64_t v30 = v15;
            uint64_t v31 = v18;
            id v32 = v17;
            if (v15)
            {
LABEL_28:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              char v25 = v15;
              _CFObject.hash(into:)();

              if (v18) {
                goto LABEL_29;
              }
              goto LABEL_34;
            }
          }

          Hasher._combine(_:)(0);
          if (v18)
          {
LABEL_29:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v26 = v18;
            _CFObject.hash(into:)();

            if (v17) {
              goto LABEL_30;
            }
            goto LABEL_35;
          }

      unint64_t v66 = 1LL;
      uint64_t v22 = &result[v19];
      goto LABEL_27;
    }

    goto LABEL_158;
  }

  if (v21)
  {
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }

    __int128 v15 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
LABEL_20:
    id v17 = 0LL;
    if (v9 < v7)
    {
      v10 += v16;
      uint64_t v9 = v14;
      if (v13 == v15) {
        continue;
      }
    }

    goto LABEL_28;
  }

  if (v10 < v8)
  {
    uint64_t v13 = 0;
    uint64_t v14 = v9;
    if ((a2 & 0x1000000000000000LL) == 0) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }

  id v17 = 1LL;
LABEL_28:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17;
}

        size_t v60 = &v59;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          __int128 v37 = (int)POSIXErrorCode.rawValue.getter();
          __int128 v38 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          int v39 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v34 = objc_msgSend(v38, sel_initWithDomain_code_userInfo_, v39, v37, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v40 = objc_msgSend(v34, sel_domain);
          unint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
          unint64_t v43 = v42;

          if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v43 == v44)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_30;
          }

          unsigned __int8 v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v45 & 1) != 0) {
            goto LABEL_30;
          }
          __break(1u);
LABEL_42:
          __break(1u);
        }

        unint64_t v62 = 0LL;
        unint64_t v63 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(22LL);
        swift_bridgeObjectRelease();
        unint64_t v62 = 0xD000000000000014LL;
        unint64_t v63 = 0x80000001839C9190LL;
        pthread_t v61 = v29;
        break;
    }

  specialized Set._Variant.insert(_:)(&v3, 4uLL);
  if ((v1 & 0x20) == 0)
  {
LABEL_7:
    if ((v1 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }

  char v25 = __VaListBuilder.va_list()();
  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v26 = objc_allocWithZone((Class)&OBJC_CLASS___NSString);
  uint64_t v27 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v28 = objc_msgSend(v26, sel_initWithFormat_arguments_, v27, v25);
  swift_unknownObjectRelease();
  char v29 = objc_msgSend(a2, sel_stringByAppendingString_, v28);

  if (!v29) {
    goto LABEL_32;
  }
  swift_release();
}

  Hasher._combine(_:)(0);
  uint64_t v26 = v34;
  uint64_t v27 = v14;
  uint64_t v28 = v16;
  char v29 = v15;
  if (v14)
  {
LABEL_18:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v22 = v14;
    _CFObject.hash(into:)();

    if (v16) {
      goto LABEL_19;
    }
    goto LABEL_27;
  }

    if (v20) {
      goto LABEL_76;
    }
LABEL_26:
    char v21 = (4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C;
    uint64_t v19 = ((-15LL << v21) - 1) & v19 | (v22 << v21);
    uint64_t v6 = *(void *)(v6 + 24 + 24 * v22);
    swift_unknownObjectRetain();
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
  }

  while (*(_BYTE *)(v6 + 18));
  char v29 = v19 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v30 = *(unsigned __int16 *)(v6 + 16);
  if (!*(_WORD *)(v6 + 16)) {
    goto LABEL_53;
  }
LABEL_41:
  uint64_t v31 = v20 - 1;
  if (__OFSUB__(v20, 1LL)) {
    goto LABEL_82;
  }
  if (__OFADD__(v31, 1LL))
  {
LABEL_83:
    __break(1u);
  }

  else
  {
    if (v20 < 1)
    {
      uint64_t v30 = 0LL;
      goto LABEL_65;
    }

    if ((_DWORD)v30 != 1)
    {
      id v32 = v30 - 2;
      if (v31 < v30 - 2) {
        id v32 = v20 - 1;
      }
      if (v32 >= v20 + 0x7FFFFFFFFFFFFFFFLL) {
        id v32 = v20 + 0x7FFFFFFFFFFFFFFFLL;
      }
      uint64_t v33 = v32 + 1;
      if (v33 >= 5)
      {
        char v35 = v33 & 3;
        if ((v33 & 3) == 0) {
          char v35 = 4LL;
        }
        uint64_t v36 = v33 - v35;
        uint64_t v34 = v36 + 1;
        __int128 v37 = 0uLL;
        __int128 v38 = (int64x2_t)(unint64_t)(v20 - 1);
        v39.i64[0] = -1LL;
        v39.i64[1] = -1LL;
        do
        {
          __int128 v38 = vaddq_s64(v38, v39);
          __int128 v37 = vaddq_s64(v37, v39);
          v36 -= 4LL;
        }

        while (v36);
        uint64_t v31 = vaddvq_s64(vaddq_s64(v37, v38));
      }

      else
      {
        uint64_t v34 = 1LL;
      }

      while (v20 + 0x8000000000000000LL != v34)
      {
        if (v20 == v34)
        {
          uint64_t v30 = v20;
          goto LABEL_65;
        }

        ++v34;
        --v31;
        if (v30 == v34) {
          goto LABEL_64;
        }
      }

      if (v17) {
        goto LABEL_91;
      }
LABEL_26:
      uint64_t v19 = (4 * *(_BYTE *)(v18 + 18) + 8) & 0x3C;
      uint64_t v16 = ((-15LL << v19) - 1) & v16 | (v20 << v19);
      uint64_t v5 = *(void *)(v18 + 24 + 24 * v20);
      swift_unknownObjectRetain();
      uint64_t result = (uint64_t *)swift_unknownObjectRelease();
      uint64_t v18 = v5;
      if (!*(_BYTE *)(v5 + 18)) {
        goto LABEL_42;
      }
    }
  }

  uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  id v17 = v4;
  uint64_t v5 = v7;
LABEL_42:
  uint64_t v27 = *(unsigned __int16 *)(v5 + 16);
  if (*(_WORD *)(v5 + 16))
  {
    uint64_t v28 = v17 - 1;
    if (__OFSUB__(v17, 1LL))
    {
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }

    uint64_t v8 = v61;
    if (__OFADD__(v28, 1LL))
    {
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }

    if (v17 < 1)
    {
      uint64_t v27 = 0LL;
LABEL_64:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v11 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v27 << 8);
      uint64_t v9 = v59;
      goto LABEL_20;
    }

    if ((_DWORD)v27 != 1)
    {
      char v29 = v27 - 2;
      if (v28 < v27 - 2) {
        char v29 = v17 - 1;
      }
      if (v29 >= v17 + 0x7FFFFFFFFFFFFFFFLL) {
        char v29 = v17 + 0x7FFFFFFFFFFFFFFFLL;
      }
      uint64_t v30 = v29 + 1;
      if (v30 >= 5)
      {
        id v32 = v30 & 3;
        if ((v30 & 3) == 0) {
          id v32 = 4LL;
        }
        uint64_t v33 = v30 - v32;
        uint64_t v31 = v33 + 1;
        uint64_t v34 = 0uLL;
        char v35 = (int64x2_t)(unint64_t)(v17 - 1);
        v36.i64[0] = -1LL;
        v36.i64[1] = -1LL;
        do
        {
          char v35 = vaddq_s64(v35, v36);
          uint64_t v34 = vaddq_s64(v34, v36);
          v33 -= 4LL;
        }

        while (v33);
        uint64_t v28 = vaddvq_s64(vaddq_s64(v34, v35));
      }

      else
      {
        uint64_t v31 = 1LL;
      }

      while (v17 + 0x8000000000000000LL != v31)
      {
        if (v17 == v31)
        {
          uint64_t v27 = v17;
          goto LABEL_64;
        }

        ++v31;
        --v28;
        if (v27 == v31) {
          goto LABEL_63;
        }
      }

      goto LABEL_103;
    }
  }

  else
  {
    uint64_t v28 = v17;
    uint64_t v8 = v61;
  }

    if (v20) {
      goto LABEL_76;
    }
LABEL_26:
    char v21 = (4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C;
    uint64_t v19 = ((-15LL << v21) - 1) & v19 | (v22 << v21);
    uint64_t v6 = *(void *)(v6 + 24 + 24 * v22);
    swift_unknownObjectRetain();
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
  }

  while (*(_BYTE *)(v6 + 18));
  char v29 = v19 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v30 = *(unsigned __int16 *)(v6 + 16);
  if (!*(_WORD *)(v6 + 16)) {
    goto LABEL_54;
  }
LABEL_43:
  uint64_t v31 = v20 - 1;
  if (__OFSUB__(v20, 1LL)) {
    goto LABEL_85;
  }
  if (__OFADD__(v31, 1LL)) {
    goto LABEL_87;
  }
  if (v20 < 1)
  {
    uint64_t v30 = 0LL;
LABEL_65:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v14 = v29 | (v30 << 8);
    uint64_t v5 = a2;
    uint64_t v9 = v58;
    goto LABEL_20;
  }

  if ((_DWORD)v30 == 1)
  {
LABEL_64:
    if (v31) {
      goto LABEL_86;
    }
    goto LABEL_65;
  }

  id v32 = v30 - 2;
  if (v31 < v30 - 2) {
    id v32 = v20 - 1;
  }
  if (v32 >= v20 + 0x7FFFFFFFFFFFFFFFLL) {
    id v32 = v20 + 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v33 = v32 + 1;
  if (v33 >= 5)
  {
    char v35 = v33 & 3;
    if ((v33 & 3) == 0) {
      char v35 = 4LL;
    }
    uint64_t v36 = v33 - v35;
    uint64_t v34 = v36 + 1;
    __int128 v37 = 0uLL;
    __int128 v38 = (int64x2_t)(unint64_t)(v20 - 1);
    v39.i64[0] = -1LL;
    v39.i64[1] = -1LL;
    do
    {
      __int128 v38 = vaddq_s64(v38, v39);
      __int128 v37 = vaddq_s64(v37, v39);
      v36 -= 4LL;
    }

    while (v36);
    uint64_t v31 = vaddvq_s64(vaddq_s64(v37, v38));
  }

  else
  {
    uint64_t v34 = 1LL;
  }

  while (v20 + 0x8000000000000000LL != v34)
  {
    if (v20 == v34)
    {
      uint64_t v30 = v20;
      goto LABEL_65;
    }

    ++v34;
    --v31;
    if (v30 == v34) {
      goto LABEL_64;
    }
  }

      if (v17) {
        goto LABEL_90;
      }
LABEL_26:
      uint64_t v19 = (4 * *(_BYTE *)(v18 + 18) + 8) & 0x3C;
      uint64_t v16 = ((-15LL << v19) - 1) & v16 | (v20 << v19);
      uint64_t v5 = *(void *)(v18 + 24 + 24 * v20);
      swift_unknownObjectRetain();
      uint64_t result = (uint64_t *)swift_unknownObjectRelease();
      uint64_t v18 = v5;
      if (!*(_BYTE *)(v5 + 18)) {
        goto LABEL_41;
      }
    }
  }

  uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  id v17 = v2;
  uint64_t v5 = v7;
LABEL_41:
  uint64_t v27 = *(unsigned __int16 *)(v5 + 16);
  if (*(_WORD *)(v5 + 16))
  {
    uint64_t v28 = v17 - 1;
    if (__OFSUB__(v17, 1LL))
    {
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }

    if (__OFADD__(v28, 1LL))
    {
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }

    if (v17 <= 0)
    {
      uint64_t v27 = 0LL;
LABEL_63:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v11 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v27 << 8);
      uint64_t v9 = v62;
      uint64_t v8 = v58;
      goto LABEL_20;
    }

    if ((_DWORD)v27 != 1)
    {
      char v29 = v27 - 2;
      if (v28 < v27 - 2) {
        char v29 = v17 - 1;
      }
      if (v29 >= v17 + 0x7FFFFFFFFFFFFFFFLL) {
        char v29 = v17 + 0x7FFFFFFFFFFFFFFFLL;
      }
      uint64_t v30 = v29 + 1;
      if (v30 >= 5)
      {
        id v32 = v30 & 3;
        if ((v30 & 3) == 0) {
          id v32 = 4LL;
        }
        uint64_t v33 = v30 - v32;
        uint64_t v31 = v33 + 1;
        uint64_t v34 = 0uLL;
        char v35 = (int64x2_t)(unint64_t)(v17 - 1);
        v36.i64[0] = -1LL;
        v36.i64[1] = -1LL;
        do
        {
          char v35 = vaddq_s64(v35, v36);
          uint64_t v34 = vaddq_s64(v34, v36);
          v33 -= 4LL;
        }

        while (v33);
        uint64_t v28 = vaddvq_s64(vaddq_s64(v34, v35));
      }

      else
      {
        uint64_t v31 = 1LL;
      }

      while (v17 + 0x8000000000000000LL != v31)
      {
        if (v17 == v31)
        {
          uint64_t v27 = v17;
          goto LABEL_63;
        }

        ++v31;
        --v28;
        if (v27 == v31) {
          goto LABEL_62;
        }
      }

      goto LABEL_102;
    }
  }

  else
  {
    uint64_t v28 = v17;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v17 = v59;
  if (v59) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  uint64_t v18 = v60;
  if (!v60)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  __int128 v15 = v57;
  if (v57) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  uint64_t v16 = v58;
  if (!v58)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v17);
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v19 = v66;
  int v56 = v7;
  if (v66)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v19);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  char v21 = v67;
  uint64_t v20 = v68;
  uint64_t v23 = v69;
  uint64_t v22 = v70;
  uint64_t v24 = v71;
  unint64_t v52 = v69;
  unint64_t v53 = v71;
  if (v67)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v25 = v20;
    uint64_t v26 = v23;
    uint64_t v27 = v22;
    uint64_t v28 = v22;
    char v29 = v24;
    uint64_t v30 = v21;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v31 = v24;
    id v32 = v20;
    uint64_t v33 = v23;
    uint64_t v27 = v22;
    uint64_t v34 = v22;
  }

  unint64_t v54 = v21;
  unint64_t v57 = v20;
  if (v20)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v35 = v20;
    _CFObject.hash(into:)();

    uint64_t v36 = v52;
    if (v52) {
      goto LABEL_34;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v36 = v52;
    if (v52)
    {
LABEL_34:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      __int128 v37 = v36;
      _CFObject.hash(into:)();

      if (v27) {
        goto LABEL_35;
      }
LABEL_39:
      Hasher._combine(_:)(0);
      int v39 = v53;
      if (v53) {
        goto LABEL_36;
      }
      goto LABEL_40;
    }
  }

  Hasher._combine(_:)(0);
  if (!v27) {
    goto LABEL_39;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  __int128 v38 = v27;
  _CFObject.hash(into:)();

  int v39 = v53;
  if (v53)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v40 = v39;
    _CFObject.hash(into:)();

    goto LABEL_41;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v76, v16);
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v18 = v60;
  unint64_t v52 = v6;
  unint64_t v51 = v5;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v76, v18);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v20 = v61;
  uint64_t v19 = v62;
  uint64_t v22 = v63;
  char v21 = v64;
  uint64_t v23 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v24 = v19;
    char v25 = v22;
    uint64_t v26 = v21;
    uint64_t v27 = v23;
    uint64_t v28 = v20;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    char v29 = v23;
    uint64_t v30 = v19;
    uint64_t v31 = v22;
    id v32 = v21;
  }

  int64_t v49 = v20;
  if (v19)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v33 = v19;
    _CFObject.hash(into:)();

    if (v22) {
      goto LABEL_34;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v22)
    {
LABEL_34:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v34 = v22;
      _CFObject.hash(into:)();

      if (v21) {
        goto LABEL_35;
      }
LABEL_39:
      Hasher._combine(_:)(0);
      if (v23) {
        goto LABEL_36;
      }
      goto LABEL_40;
    }
  }

  Hasher._combine(_:)(0);
  if (!v21) {
    goto LABEL_39;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  char v35 = v21;
  _CFObject.hash(into:)();

  if (v23)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v36 = v23;
    _CFObject.hash(into:)();

    goto LABEL_41;
  }

  __break(1u);
  return result;
}

      uint64_t result = specialized Collection<>.firstIndex(of:)(0x3Au, v8, v7, a3);
      if ((v17 & 1) == 0)
      {
        uint64_t v16 = result + 1;
        if (result + 1 == v7)
        {
          uint64_t v7 = result;
          goto LABEL_30;
        }

        if (result + 1 > v7)
        {
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }

  uint64_t result = (char *)__VaListBuilder.va_list()();
  if (*(void *)(a3 + 16) >> 31) {
    goto LABEL_31;
  }
  *a2 = u_vformatMessage();
  swift_bridgeObjectRelease();
  return (char *)swift_release();
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = v53;
  if (v53) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  char v21 = v54;
  if (!v54)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = v51;
  if (v51) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  uint64_t v19 = v52;
  if (!v52)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = v58;
  if (v58) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  char v21 = v59;
  if (!v59)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = v56;
  if (v56) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  uint64_t v19 = v57;
  if (!v57)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }

    uint64_t v16 = (v22 - 1) & v22;
  }

  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  unint64_t v40 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, UnsafeMutablePointer<UnsafeMutableRawPointer?>>);
  unint64_t v41 = static _DictionaryStorage.copy(original:)();
  __int128 v38 = v41;
  if (!*(void *)(a2 + 16))
  {
LABEL_89:
    swift_bridgeObjectRelease();
    uint64_t v18 = v40;
    if ((a4 & 1) == 0) {
      goto LABEL_90;
    }
    goto LABEL_50;
  }

  uint64_t result = (void *)(v41 + 64);
  unint64_t v42 = a2 + 64;
  unint64_t v43 = (unint64_t)((1LL << *(_BYTE *)(v38 + 32)) + 63) >> 6;
  unint64_t v44 = 0LL;
  *(void *)(v38 + 16) = *(void *)(a2 + 16);
  unsigned __int8 v45 = 1LL << *(_BYTE *)(a2 + 32);
  int v46 = -1LL;
  if (v45 < 64) {
    int v46 = ~(-1LL << v45);
  }
  unint64_t v47 = v46 & *(void *)(a2 + 64);
  unint64_t v48 = (unint64_t)(v45 + 63) >> 6;
  while (2)
  {
    if (v47)
    {
      int64_t v49 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      BOOL v50 = v49 | (v44 << 6);
LABEL_65:
      unint64_t v51 = 4 * v50;
      unint64_t v52 = *(_DWORD *)(*(void *)(a2 + 48) + 4 * v50);
      unint64_t v53 = 8 * v50;
      unint64_t v54 = *(void *)(*(void *)(a2 + 56) + v53);
      *(_DWORD *)(*(void *)(v38 + 48) + v51) = v52;
      *(void *)(*(void *)(v38 + 56) + v53) = v54;
      continue;
    }

    break;
  }

  BOOL v55 = v44 + 1;
  if (__OFADD__(v44, 1LL))
  {
    __break(1u);
    goto LABEL_93;
  }

  if (v55 >= v48) {
    goto LABEL_89;
  }
  int v56 = *(void *)(v42 + 8 * v55);
  ++v44;
  if (v56) {
    goto LABEL_88;
  }
  unint64_t v44 = v55 + 1;
  if (v55 + 1 >= v48) {
    goto LABEL_89;
  }
  int v56 = *(void *)(v42 + 8 * v44);
  if (v56) {
    goto LABEL_88;
  }
  unint64_t v44 = v55 + 2;
  if (v55 + 2 >= v48) {
    goto LABEL_89;
  }
  int v56 = *(void *)(v42 + 8 * v44);
  if (v56) {
    goto LABEL_88;
  }
  unint64_t v44 = v55 + 3;
  if (v55 + 3 >= v48) {
    goto LABEL_89;
  }
  int v56 = *(void *)(v42 + 8 * v44);
  if (v56) {
    goto LABEL_88;
  }
  unint64_t v44 = v55 + 4;
  if (v55 + 4 >= v48) {
    goto LABEL_89;
  }
  int v56 = *(void *)(v42 + 8 * v44);
  if (v56) {
    goto LABEL_88;
  }
  unint64_t v44 = v55 + 5;
  if (v55 + 5 >= v48) {
    goto LABEL_89;
  }
  int v56 = *(void *)(v42 + 8 * v44);
  if (v56) {
    goto LABEL_88;
  }
  unint64_t v44 = v55 + 6;
  if (v55 + 6 >= v48) {
    goto LABEL_89;
  }
  int v56 = *(void *)(v42 + 8 * v44);
  if (v56)
  {
LABEL_88:
    unint64_t v47 = (v56 - 1) & v56;
    BOOL v50 = __clz(__rbit64(v56)) + (v44 << 6);
    goto LABEL_65;
  }

  unint64_t v57 = v55 + 7;
  if (v57 >= v48) {
    goto LABEL_89;
  }
  unint64_t v58 = v13;
  int v59 = v42;
  int v56 = *(void *)(v42 + 8 * v57);
  if (v56)
  {
    unint64_t v44 = v57;
    uint64_t v12 = v61;
    goto LABEL_88;
  }

  while (1)
  {
    unint64_t v44 = v57 + 1;
    if (__OFADD__(v57, 1LL)) {
      break;
    }
    uint64_t v12 = v61;
    uint64_t v13 = v58;
    if (v44 >= v48) {
      goto LABEL_89;
    }
    unint64_t v42 = v59;
    int v56 = *(void *)(v59 + 8 * v44);
    ++v57;
    if (v56) {
      goto LABEL_88;
    }
  }

  __break(1u);
}

  String.utf8CString.getter();
  uint64_t v30 = sandbox_extension_consume();
  swift_release();
  if (v30 != -1)
  {
    v130 = v30;
    v131 = 0LL;
    goto LABEL_34;
  }

  if (one-time initialization token for localizedStringLogger != -1) {
    swift_once();
  }
  unint64_t v53 = type metadata accessor for Logger();
  __swift_project_value_buffer(v53, (uint64_t)localizedStringLogger);
  outlined retain of LocalizedStringResource(a1);
  outlined retain of LocalizedStringResource(a1);
  unint64_t v54 = (void *)Logger.logObject.getter();
  BOOL v55 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v54, (os_log_type_t)v55))
  {
    outlined release of LocalizedStringResource(a1);
    outlined release of LocalizedStringResource(a1);

    goto LABEL_33;
  }

  LODWORD(v131) = v55;
  v132._countAndFlagsBits = v4;
  int v56 = swift_slowAlloc();
  unint64_t v57 = swift_slowAlloc();
  *(void *)&v134 = v57;
  *(_DWORD *)int v56 = 136315394;
  outlined retain of URL((void **)&v140);
  unint64_t v58 = _foundation_swift_url_feature_enabled();
  v128 = a3;
  v130 = v57;
  if ((v58 & 1) != 0)
  {
    v127 = v54;
    v129 = a2;
    v143 = v140;
    v144 = v141;
    outlined retain of URL((void **)&v140);
    int v59 = URL.path(percentEncoded:)(1);
    v143 = v59;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v59._countAndFlagsBits, (unint64_t)v59._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v138._countAndFlagsBits = Set.init(minimumCapacity:)();
    size_t v60 = specialized Set._Variant.insert(_:)(&v149, 0x2FuLL);
    pthread_t v61 = v138._countAndFlagsBits;
    unint64_t v62 = v143;
    unint64_t v63 = ((unint64_t)v143._object >> 56) & 0xF;
    if (v63)
    {
      v138 = v143;
      MEMORY[0x1895F8858](v60);
      v122 = &v138;
      v123 = v61;
      swift_bridgeObjectRetain();
      uint64_t v64 = v132._countAndFlagsBits;
      int v65 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v121,  v62._countAndFlagsBits,  (unint64_t)v62._object);
      v132._countAndFlagsBits = v64;
      if (v66 == 1)
      {
        char v67 = v138;
        swift_bridgeObjectRetain();
        uint64_t v68 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v67._countAndFlagsBits,  (unint64_t)v67._object,  v61);
        uint64_t v70 = v69;
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v68 = (uint64_t)v65;
        uint64_t v70 = v66;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a2 = v129;
      if (!v70)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v140);
        uint64_t v68 = 0LL;
        uint64_t v70 = 0xE000000000000000LL;
        goto LABEL_106;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v68 = 0LL;
      uint64_t v70 = 0xE000000000000000LL;
      a2 = v129;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v140);
LABEL_106:
    outlined release of URL((id *)&v140);
    goto LABEL_107;
  }

  int v100 = a2;
  v101 = (void *)v140._countAndFlagsBits;
  v102 = objc_msgSend((id)v140._countAndFlagsBits, sel__parameterString);
  if (!v102)
  {
    v115 = objc_msgSend(v101, sel_path);
    if (v115)
    {
      v116 = v115;
      uint64_t v68 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
      uint64_t v70 = v117;

      outlined release of URL((id *)&v140);
    }

    else
    {
      outlined release of URL((id *)&v140);
      uint64_t v68 = 0LL;
      uint64_t v70 = 0xE000000000000000LL;
    }

    goto LABEL_108;
  }

  v103 = v102;
  v127 = v54;
  uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
  v106 = v105;

  if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
    && (v107 = objc_msgSend(v101, sel_path)) != 0)
  {
    v108 = v107;
    v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    v111 = v110;

    v143._countAndFlagsBits = (uint64_t)v109;
    v143._object = v111;
    swift_bridgeObjectRetain();
    v112._countAndFlagsBits = 59LL;
    v112._object = (void *)0xE100000000000000LL;
    String.append(_:)(v112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v113._countAndFlagsBits = (uint64_t)v104;
    v113._object = v106;
    String.append(_:)(v113);
    swift_bridgeObjectRelease();
  }

  else
  {
    v143._countAndFlagsBits = 59LL;
    v143._object = (void *)0xE100000000000000LL;
    v114._countAndFlagsBits = (uint64_t)v104;
    v114._object = v106;
    String.append(_:)(v114);
  }

  swift_bridgeObjectRelease();
  outlined release of URL((id *)&v140);
  uint64_t v70 = (unint64_t)v143._object;
  uint64_t v68 = v143._countAndFlagsBits;
  a2 = v100;
LABEL_107:
  unint64_t v54 = v127;
LABEL_108:
  v118 = v131;
  v143._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v70, (uint64_t *)&v134);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined release of LocalizedStringResource(a1);
  v119 = outlined release of LocalizedStringResource(a1);
  *(_WORD *)(v56 + 12) = 1026;
  LODWORD(v143._countAndFlagsBits) = MEMORY[0x186E1B0E8](v119);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  _os_log_impl( &dword_182EB1000,  (os_log_t)v54,  v118,  "Unable to consume sandbox extension for path '%s' (errno: %{public}d)",  (uint8_t *)v56,  0x12u);
  v131 = 1LL;
  v120 = v130;
  swift_arrayDestroy();
  MEMORY[0x186E20E60](v120, -1LL, -1LL);
  MEMORY[0x186E20E60](v56, -1LL, -1LL);

  v130 = 0LL;
  uint64_t v4 = v132._countAndFlagsBits;
  a3 = v128;
LABEL_34:
  v138 = *(Swift::String *)(a1 + 72);
  v139 = *(void *)(a1 + 88);
  uint64_t v33 = v138._countAndFlagsBits;
  uint64_t v34 = objc_allocWithZone((Class)&OBJC_CLASS___NSBundle);
  outlined retain of URL((void **)&v138);
  char v35 = objc_msgSend(v34, sel_initWithURL_, v33);
  if (!v35)
  {
    outlined release of URL((id *)&v138);
    unint64_t v40 = 0LL;
    goto LABEL_90;
  }

  uint64_t v36 = v35;
  __int128 v37 = *(void *)(a2 + 32);
  if (v37)
  {
    __int128 v38 = v4;
    int v39 = *(void *)(a2 + 24);
    outlined retain of String.LocalizationOptions(a2);
    goto LABEL_64;
  }

  v132._countAndFlagsBits = v4;
  v129 = a2;
  outlined retain of String.LocalizationOptions(a2);
  unint64_t v41 = objc_msgSend(v36, sel_localizations);
  if (!v41) {
    unint64_t v41 = (id)_ContiguousArrayBuffer._asCocoaArray()();
  }
  unint64_t v42 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  unint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_183720D90;
  v128 = a3;
  v137 = *(_OWORD *)(a3 + 56);
  unint64_t v44 = *((void *)&v137 + 1);
  ObjectType = swift_getObjectType();
  LOBYTE(v143._countAndFlagsBits) = 1;
  int v46 = *(uint64_t (**)(Swift::String *, uint64_t, uint64_t))(v44 + 416);
  outlined retain of Locale((uint64_t)&v137);
  unint64_t v47 = v46(&v143, ObjectType, v44);
  int64_t v49 = v48;
  outlined release of Locale((uint64_t)&v137);
  *(void *)(v43 + 32) = v47;
  *(void *)(v43 + 40) = v49;
  BOOL v50 =  objc_msgSend( v42,  sel_preferredLocalizationsFromArray_forPreferences_,  v41,  _ContiguousArrayBuffer._asCocoaArray()());

  swift_unknownObjectRelease();
  if (!v50)
  {
    unint64_t v52 = (void *)MEMORY[0x18961AFE8];
    __int128 v38 = v132._countAndFlagsBits;
    a3 = v128;
    if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
      goto LABEL_59;
    }
LABEL_62:
    swift_bridgeObjectRelease();
    int v39 = 0LL;
    __int128 v37 = 0LL;
    goto LABEL_63;
  }

  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  unint64_t v51 = swift_dynamicCastClass();
  __int128 v38 = v132._countAndFlagsBits;
  a3 = v128;
  if (!v51)
  {
    swift_unknownObjectRelease();
    objc_msgSend(v50, sel_copy);
    uint64_t v71 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    unint64_t v52 = (void *)specialized _arrayForceCast<A, B>(_:)(v71);

    swift_bridgeObjectRelease();
    if (v52[2]) {
      goto LABEL_59;
    }
    goto LABEL_62;
  }

  unint64_t v52 = (void *)v51;

  if (!v52[2]) {
    goto LABEL_62;
  }
LABEL_59:
  int v39 = v52[4];
  __int128 v37 = v52[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_63:
  a2 = v129;
LABEL_64:
  uint64_t v72 = *(_BYTE *)(a2 + 16);
  v73 = *(unsigned __int8 *)(a2 + 17);
  int v74 = *(void *)(a3 + 8);
  v127 = *(void **)a3;
  v132 = *(Swift::String *)a2;
  v143 = v132;
  LOBYTE(v144) = v72;
  v124 = v73;
  BYTE1(v144) = v73;
  v125 = v39;
  v145 = v39;
  v146 = v37;
  v147 = 1;
  outlined init with take of LocalePreferences?( a3 + 40,  (uint64_t)v136,  &demangling cache variable for type metadata for String?);
  double v75 = *(void *)(a3 + 56);
  v76 = *(void *)(a3 + 64);
  if (v132._countAndFlagsBits) {
    unint64_t v77 = v132._countAndFlagsBits;
  }
  else {
    unint64_t v77 = MEMORY[0x18961AFE8];
  }
  v134 = *(_OWORD *)(a3 + 16);
  v135 = *(void *)(a3 + 32);
  unint64_t v78 = v134;
  v149 = v77;
  v150 = 0LL;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v128 = v74;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v79 = v36;
  swift_bridgeObjectRetain();
  outlined retain of String.LocalizationValue((uint64_t)&v134);
  swift_bridgeObjectRetain();
  v126 = v76;
  v80 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n( v78,  &v149,  v75,  v76);
  v132._countAndFlagsBits = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v81 = v79;
  v129 = v80;
  if (v37)
  {
    swift_bridgeObjectRetain();
    unint64_t v82 = objc_msgSend(v81, sel_localizations);
    if (!v82) {
      unint64_t v82 = (id)_ContiguousArrayBuffer._asCocoaArray()();
    }
    unint64_t v83 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v84 = swift_allocObject();
    *(_OWORD *)(v84 + 16) = xmmword_183720D90;
    *(void *)(v84 + 32) = v125;
    *(void *)(v84 + 40) = v37;
    v85 =  objc_msgSend( v83,  sel_preferredLocalizationsFromArray_forPreferences_,  v82,  _ContiguousArrayBuffer._asCocoaArray()());

    swift_unknownObjectRelease();
    if (v85)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      v86 = swift_dynamicCastClass();
      if (v86)
      {
        unint64_t v87 = (void *)v86;
      }

      else
      {
        swift_unknownObjectRelease();
        objc_msgSend(v85, sel_copy);
        unint64_t v88 = _bridgeCocoaArray<A>(_:)();
        swift_unknownObjectRelease();
        unint64_t v87 = (void *)specialized _arrayForceCast<A, B>(_:)(v88);

        swift_bridgeObjectRelease();
      }
    }

    else
    {
      unint64_t v87 = (void *)MEMORY[0x18961AFE8];
    }
  }

  else
  {
    unint64_t v87 = 0LL;
  }

  unint64_t v89 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  unint64_t v90 = String._bridgeToObjectiveCImpl()();
  outlined init with take of LocalePreferences?( (uint64_t)v136,  (uint64_t)&v149,  &demangling cache variable for type metadata for String?);
  if (v150)
  {
    unint64_t v91 = (void *)String._bridgeToObjectiveCImpl()();
    if (!v87) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }

  unint64_t v91 = 0LL;
  if (v87) {
LABEL_80:
  }
    unint64_t v87 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
LABEL_81:
  unint64_t v92 = objc_msgSend(v81, sel_localizedStringForKey_value_table_localizations_, v89, v90, v91, v87);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  unint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
  unint64_t v94 = v93;

  uint64_t v95 = v129;
  if (!*(void *)(v129 + 16))
  {
    if ((v124 & 1) != 0
      || (String._bridgeToObjectiveCImpl()(),
          v98 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v98))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
      goto LABEL_89;
    }
  }

  swift_unknownObjectRetain();
  uint64_t v96 = v126;
  uint64_t v97 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n( v95,  v75,  v126,  v133);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v40 = specialized withVaList<A>(_:_:)(v97, (uint64_t)v40, v94, v75, v96);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_89:
  outlined release of String.LocalizationValue((uint64_t)&v134);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of URL((id *)&v138);
LABEL_90:
  if ((v131 & 1) == 0) {
    sandbox_extension_release();
  }
  return v40;
}

      closure #2 in String.init<A>(bytes:encoding:)( (uint64_t)a1,  a2,  v9,  (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:),  &v20);
      if (*((void *)&v20 + 1)) {
        return (id)v20;
      }
      uint64_t v7 = specialized String.init<A, B>(_validating:as:)();
      if (v13) {
        return (id)v7;
      }
      return 0LL;
    }

    if (a3 == 2415919360LL)
    {
      uint64_t v9 = 1LL;
    }

    else
    {
      if (a3 != 2483028224LL) {
        goto LABEL_29;
      }
      uint64_t v9 = 0LL;
    }

    char v25 = *((void *)v15 + 2);
    for (unint64_t i = v24; ; i >>= 8)
    {
      while (1)
      {
        uint64_t v27 = *((void *)v15 + 3);
        if (v25 >= v27 >> 1) {
          __int128 v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v27 > 1),  v25 + 1,  1,  v15);
        }
        *((void *)v15 + 2) = v25 + 1;
        v15[v25 + 32] = i - 1;
        ++v25;
        uint64_t v28 = i >= 0x100;
        i >>= 8;
        if (!v28) {
          goto LABEL_33;
        }
      }

      char v29 = 0LL;
      uint64_t v16 = 0LL;
      ++v25;
      if (i < 0x100) {
        break;
      }
    }

                                unint64_t v40 = *(void *)(v28 + 56);
                                unint64_t v41 = 8 * v22;

                                *(void *)(v40 + v41) = v10;
                                goto LABEL_140;
                              }

                              v106 = v118 + 8;
                            }
                          }
                        }
                      }
                    }
                  }
                }

    specialized ContiguousArray.remove(at:)(*(void *)(*(void *)v20 + 16LL) - 1LL, (uint64_t)&v53);
    outlined consume of _XMLPlistEncodingFormat.Reference(v53, *((unint64_t *)&v53 + 1), v54);
    return swift_willThrow();
  }

  v8[5] = v24;
  swift_retain();
  swift_release();
  v8[6] = v25;
  swift_release();
  uint64_t result = swift_release();
  if (v52 >= *(void *)(v8[2] + 16LL))
  {
    unint64_t v44 = v45;
    *unsigned __int8 v45 = 0LL;
    v44[1] = 0LL;
    unint64_t v42 = -1;
  }

  else
  {
    unint64_t v41 = v46;
    uint64_t result = specialized ContiguousArray._customRemoveLast()((uint64_t)&v53);
    unint64_t v42 = v54;
    if (v54 == 255)
    {
      uint64_t result = specialized ContiguousArray.remove(at:)(*(void *)(*(void *)v41 + 16LL) - 1LL, (uint64_t)&v53);
      unint64_t v43 = v53;
      unint64_t v42 = v54;
    }

    else
    {
      unint64_t v43 = v53;
    }

    unint64_t v44 = v45;
    *(_OWORD *)unsigned __int8 v45 = v43;
  }

  *((_BYTE *)v44 + 16) = v42;
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  __src[32] = (int)ucal_get();
  LOBYTE(__src[33]) = 0;
  if ((a2 & 0x400) == 0)
  {
LABEL_11:
    if ((a2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  __break(1u);
  return result;
}

      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

  __break(1u);
  return result;
}

      uint64_t v10 = (v18 - 1) & v18;
      uint64_t v13 = __clz(__rbit64(v18)) + (v6 << 6);
LABEL_6:
      uint64_t v14 = (unint64_t *)(*(void *)(v4 + 48) + 16 * v13);
      __int128 v15 = *v14;
      uint64_t v16 = v14[1];
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((unint64_t *)&v164, v15, v16);
      uint64_t result = swift_bridgeObjectRelease();
    }

    uint64_t v5 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_26:
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v10, (uint64_t)v17);
    v15[2] = v18;
    v15[3] = v19;
    uint64_t v16 = v20;
    v15[0] = v17[0];
    v15[1] = v17[1];
    uint64_t v14 = *((void *)&v18 + 1);
    if ((void)v19 == 1LL)
    {
      outlined consume of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v18 + 1), 1LL);
      outlined consume of AttributedString.AttributeRunBoundaries?(0LL, 0LL);
    }

    else
    {
      if (!(void)v19)
      {
        swift_bridgeObjectRelease_n();
        outlined consume of AttributedString.AttributeRunBoundaries?(v14, 0LL);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
        swift_release();
        swift_bridgeObjectRelease();
        return 1LL;
      }

      swift_bridgeObjectRelease();
    }

    uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
  }

  uint64_t v13 = v11 + 5;
  if (v13 >= v6)
  {
LABEL_29:
    swift_release();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    uint64_t v8 = v13;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_29;
    }
    uint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v6 = 0LL;
    id v32 = 0LL;
    uint64_t v30 = 0u;
    uint64_t v31 = 0u;
    uint64_t v28 = 0u;
    char v29 = 0u;
    uint64_t v27 = 0u;
LABEL_26:
    outlined init with take of LocalePreferences?((uint64_t)&v27, (uint64_t)&v33, v9);
    uint64_t v18 = v34;
    if (!v34) {
      return swift_release();
    }
    uint64_t v19 = v33;
    char v29 = v37;
    uint64_t v30 = v38;
    *(void *)&uint64_t v31 = v39;
    uint64_t v27 = v35;
    uint64_t v28 = v36;
    if ((v3 & 1) != 0)
    {
      uint64_t v20 = v9;
      if (*(void *)(*(void *)v25 + 16LL)
        && (swift_bridgeObjectRetain(),
            specialized __RawDictionaryStorage.find<A>(_:)(v19, v18),
            uint64_t v22 = v21,
            swift_bridgeObjectRelease(),
            (v22 & 1) != 0))
      {
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v27);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v9 = v20;
      }

      else
      {
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v27, (uint64_t)v26);
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v26, v19, v18);
        swift_bridgeObjectRelease();
        uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v27);
        uint64_t v9 = v20;
      }
    }

    else
    {
      outlined init with copy of AttributedString._AttributeValue((uint64_t)&v27, (uint64_t)v26);
      specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v26, v19, v18);
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v27);
    }
  }

  uint64_t v16 = *(void *)(v23 + 8 * v17);
  if (v16)
  {
LABEL_14:
    __int128 v15 = v17;
LABEL_11:
    uint64_t v6 = (v16 - 1) & v16;
    uint64_t v11 = __clz(__rbit64(v16)) + (v15 << 6);
    uint64_t v8 = v15;
    goto LABEL_7;
  }

  while (1)
  {
    __int128 v15 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v15 >= v24)
    {
      uint64_t v8 = v24 - 1;
      goto LABEL_25;
    }

    uint64_t v16 = *(void *)(v23 + 8 * v15);
    ++v17;
    if (v16) {
      goto LABEL_11;
    }
  }

  *(void *)a1 = v5;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v17 - 128), 8) = v7;
  return result;
}

  *a1 = v6;
  a1[1] = v7;
  return result;
}

  *(_WORD *)a1 = v6;
  *(_BYTE *)(a1 + 2) = v7;
  return result;
}

  *(_DWORD *)a1 = v6;
  *(_BYTE *)(a1 + 4) = v7;
  return result;
}

  __break(1u);
  return result;
}

      __break(1u);
      goto LABEL_26;
    }

      __break(1u);
    }

    uint64_t v9 = v15;
    goto LABEL_22;
  }

  __break(1u);
  return result;
}

    uint64_t v11 = String.count.getter();
    goto LABEL_28;
  }

  uint64_t v11 = 0LL;
LABEL_28:
  swift_bridgeObjectRelease();
  return v11;
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v14);
        swift_bridgeObjectRelease();
        __int128 v15 = v48;
        if (!v48) {
          goto LABEL_19;
        }
        goto LABEL_26;
      }

      outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v42);
      uint64_t v16 = v42;
    }

    else
    {
      Hasher._combine(_:)(0);
      uint64_t v16 = v43;
    }

    outlined retain of LocalePreferences(v16);
    if (!v45) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }

  Hasher._combine(_:)(0);
  return swift_unknownObjectRelease();
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = v47;
  if (v47) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  uint64_t v14 = v48;
  if (!v48)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }

  v201[4] = v233;
  v201[5] = v234;
  v201[6] = v235;
  v201[7] = v236;
  v201[0] = v229;
  v201[1] = v230;
  v201[2] = v231;
  v201[3] = v232;
  v200 = v21;
  v202 = v22;
  v203 = v23;
  v204 = v24;
  v205 = v25;
  v206 = v26;
  v207 = v28;
  v208 = v29;
  v209 = v30;
  v210 = &outlined read-only object #0 of AttributedString.inflected();
  v211 = v20;
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v200);
  a1 = (void *)swift_allocObject();
  a1[2] = v4;
  uint64_t v8 = (unint64_t)(a1 + 2);
  uint64_t v95 = v19[1];
  *(_OWORD *)v194 = *v19;
  *(_OWORD *)&v194[2] = v95;
  *(_OWORD *)&v194[4] = v19[2];
  swift_retain();
  outlined retain of Locale((uint64_t)v194);
  MEMORY[0x186E1B6D0](v194);
  uint64_t v96 = objc_allocWithZone((Class)&OBJC_CLASS___NSMutableString);
  uint64_t v97 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v12 = objc_msgSend(v96, sel_initWithString_, v97);
  swift_unknownObjectRelease();
  ObjectType = swift_getObjectType();
  v178 = (id)(*(uint64_t (**)(uint64_t))(v148 + 488))(ObjectType);
  if (!((unint64_t)v14 >> 62))
  {
    type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for _NSAttributedStringReplacement);
    swift_bridgeObjectRetain();
    v177 = _ContiguousArrayBuffer._asCocoaArray()();
    goto LABEL_27;
  }

            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v17);
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v19 = v52;
  unsigned __int8 v45 = v6;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v19);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  char v21 = v53;
  uint64_t v20 = v54;
  uint64_t v23 = v55;
  uint64_t v22 = v56;
  uint64_t v24 = v57;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v25 = v20;
    uint64_t v26 = v23;
    uint64_t v27 = v22;
    uint64_t v28 = v24;
    char v29 = v21;
    _CFObject.hash(into:)();
    if (v20) {
      goto LABEL_31;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v34 = v24;
    char v35 = v20;
    uint64_t v36 = v23;
    __int128 v37 = v22;
    if (v20)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v30 = v20;
      _CFObject.hash(into:)();

      if (v23) {
        goto LABEL_32;
      }
      goto LABEL_37;
    }
  }

  Hasher._combine(_:)(0);
  if (v23)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v31 = v23;
    _CFObject.hash(into:)();

    if (v22) {
      goto LABEL_33;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v24) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = v50;
  if (v50) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  id v17 = v51;
  if (!v51)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }

      ;
    }
  }

  free(v13);
  uint64_t v30 = v9 + v10;
  if (v9 + v10)
  {
    uint64_t v31 = 0LL;
    id v32 = v11;
    do
    {
      if (*(void *)v32) {
        *(void *)&v11[8 * v31++] = *(void *)v32;
      }
      v32 += 8;
      --v30;
    }

    while (v30);
  }

  CFMergeSortArray();
  uint64_t v33 = [MEMORY[0x189603F18] arrayWithObjects:v11 count:v10];
  free(v11);
  return v33;
}

    uint64_t v27 = objc_opt_class();
    __NSCoderInvalidState( (uint64_t)@"wrong type for error code value %@, expecting NSNumber",  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v27);
LABEL_26:
    __NSCoderInvalidState((uint64_t)@"invalid error code: %ld", v18, v19, v20, v21, v22, v23, v24, v17);
LABEL_27:
    char v35 = (objc_class *)objc_opt_class();
    uint64_t v36 = NSStringFromClass(v35);
    unint64_t v44 = __NSCoderInvalidState( (uint64_t)@"expected external to be a kind of NSError, instead it is a '%@'",  v37,  v38,  v39,  v40,  v41,  v42,  v43,  (uint64_t)v36);
    LOBYTE(v6) = __NSCoderDecodeObject(v44, v45);
    return (char)v6;
  }

  if (v9)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (!a4) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }

    goto LABEL_27;
  }

  LOBYTE(v6) = 0;
  return (char)v6;
}
}

    uint64_t v9 = 640LL;
    goto LABEL_31;
  }

  if (a1 == 63)
  {
    uint64_t v9 = 514LL;
    goto LABEL_31;
  }

  if (a1 == 69) {
    goto LABEL_25;
  }
LABEL_30:
  uint64_t v9 = 512LL;
LABEL_31:
  uint64_t v10 = objc_alloc(MEMORY[0x189603FC8]);
  uint64_t v11 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSPOSIXErrorDomain",  a1,  0LL);
  if (a4) {
    uint64_t v12 = [MEMORY[0x189603F18] arrayWithObject:a4];
  }
  else {
    uint64_t v12 = 0LL;
  }
  uint64_t v13 = @"NSUserStringVariant";
  if (!a4) {
    uint64_t v13 = 0LL;
  }
  uint64_t v14 = (void *)objc_msgSend(v10, "initWithObjectsAndKeys:", v11, @"NSUnderlyingError", v12, v13, 0);
  if (a2)
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v16 = &NSURLErrorKey;
    if ((isKindOfClass & 1) == 0) {
      uint64_t v16 = &NSFilePathErrorKey;
    }
    [v14 setObject:a2 forKeyedSubscript:*v16];
  }

  if ([a5 count])
  {
    uint64_t v27 = 0u;
    uint64_t v28 = 0u;
    char v25 = 0u;
    uint64_t v26 = 0u;
    id v17 = [a5 countByEnumeratingWithState:&v25 objects:v24 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)v26;
      do
      {
        for (unint64_t i = 0LL; i != v18; ++i)
        {
          if (*(void *)v26 != v19) {
            objc_enumerationMutation(a5);
          }
          char v21 = *(void *)(*((void *)&v25 + 1) + 8 * i);
          if (![v14 objectForKey:v21]) {
            objc_msgSend(v14, "setObject:forKey:", objc_msgSend(a5, "objectForKey:", v21), v21);
          }
        }

        uint64_t v18 = [a5 countByEnumeratingWithState:&v25 objects:v24 count:16];
      }

      while (v18);
    }
  }

  uint64_t v22 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  v9,  v14);

  return v22;
}

    ++v21;
    if (v13 - 1 == --v22) {
      return 0LL;
    }
  }

  while (1)
  {
    char v35 = atomic_load(a8);
    if (v35 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v36 = v35 < v24;
      if ((a2 & 2) == 0) {
        uint64_t v36 = v24 < v35;
      }
      if (!v36) {
        break;
      }
    }

    while (1)
    {
      __int128 v37 = __ldxr(a8);
      if (v37 != v35) {
        break;
      }
      if (!__stxr(v24, a8)) {
        goto LABEL_55;
      }
    }

    __clrex();
  }

  -[NSRecursiveLock unlock](self->_lock, "unlock");
}

  v37((uint64_t)v36);
LABEL_26:
  if ((a5 & 1) == 0) {
    __NSOQSchedule((uint64_t)a1);
  }
  _Block_object_dispose(&v52, 8);
  _Block_object_dispose(&v56, 8);
  _Block_object_dispose(v60, 8);
  _Block_object_dispose(&v61, 8);
}

    if (a1[1] == 47)
    {
      uint64_t v16 = 0LL;
      while (a1[v16] == 46)
      {
        id v17 = v16 + 2;
        uint64_t v18 = a1[v16 + 3];
        v16 += 2LL;
        if (v18 != 47) {
          goto LABEL_31;
        }
      }

      id v17 = v16;
      if (!v16) {
        goto LABEL_32;
      }
LABEL_31:
      *uint64_t v12 = v6 - v17;
      memmove(a1, &a1[v17], -(v13 + 2 * v17));
      uint64_t v12 = v48;
      uint64_t v14 = 0LL;
      uint64_t v6 = *v48;
    }

    else
    {
LABEL_32:
      uint64_t v14 = 0LL;
    }
  }

    free(v8);
    uint64_t v18 = (void *)MEMORY[0x189603F70];
    uint64_t v19 = *MEMORY[0x189603A60];
    uint64_t v20 = @"NSPointerArray was modified while encoding";
LABEL_26:
    objc_exception_throw((id)[v18 exceptionWithName:v19 reason:v20 userInfo:0]);
LABEL_27:
    dispatch_once(&encodeWithCoder__onceToken, &__block_literal_global_35);
  }

  uint64_t v11 = 0LL;
LABEL_14:
  uint64_t v14 = options & 7;
  __int128 v15 = v14 != 5;
  if (v11 >= count) {
    __int128 v15 = 0;
  }
  if (v11 > count || v15) {
    goto LABEL_25;
  }
  [a3 encodeValueOfObjCType:"i" at:&self->options];
  [a3 encodeValueOfObjCType:"i" at:&v21];
  if (v21)
  {
    for (unint64_t i = 0LL; i < v21; ++i)
    {
      id v17 = v8[i];
      if (v14 == 5) {
        [a3 encodeConditionalObject:v17];
      }
      else {
        [a3 encodeObject:v17];
      }
    }
  }

  [a3 encodeObject:0];
  free(v8);
}

    uint64_t v8 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: bad objCType: %s", _NSMethodExceptionProem((objc_class *)self, a2), -[NSValue objCType](self, "objCType")), 0 reason userInfo];
    objc_exception_throw(v8);
    return -[NSNumber unsignedLongValue](v9, v10);
  }

    uint64_t v8 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: bad objCType: %s", _NSMethodExceptionProem((objc_class *)self, a2), -[NSValue objCType](self, "objCType")), 0 reason userInfo];
    objc_exception_throw(v8);
    -[NSNumber doubleValue](v9, v10);
    return result;
  }

    uint64_t v8 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: bad objCType: %s", _NSMethodExceptionProem((objc_class *)self, a2), -[NSValue objCType](self, "objCType")), 0 reason userInfo];
    objc_exception_throw(v8);
    return -[NSNumber unsignedLongLongValue](v9, v10);
  }

    uint64_t v8 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: bad objCType: %s", _NSMethodExceptionProem((objc_class *)self, a2), -[NSValue objCType](self, "objCType")), 0 reason userInfo];
    objc_exception_throw(v8);
    return -[NSNumber compare:](v9, v10, v11);
  }

    uint64_t v13 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: bad objCType: %s", _NSMethodExceptionProem((objc_class *)self, a2), -[NSValue objCType](self, "objCType")), 0 reason userInfo];
    objc_exception_throw(v13);
    JUMPOUT(0x1836445F8LL);
  }

  switch(v9)
  {
    case 'c':
      goto LABEL_11;
    case 'd':
      -[NSNumber doubleValue](self, "doubleValue");
      uint64_t v10 = snprintf(a3, a4, "%0.16g");
      return v10 < a4;
    case 'e':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'r':
      goto LABEL_25;
    case 'f':
      -[NSNumber floatValue](self, "floatValue");
      uint64_t v10 = snprintf(a3, a4, "%0.7g");
      return v10 < a4;
    case 'i':
      -[NSNumber intValue](self, "intValue");
      uint64_t v11 = a4;
      goto LABEL_19;
    case 'l':
      -[NSNumber longValue](self, "longValue");
      uint64_t v10 = snprintf(a3, a4, "%ld");
      return v10 < a4;
    case 'q':
      -[NSNumber longLongValue](self, "longLongValue");
      uint64_t v10 = snprintf(a3, a4, "%lld");
      return v10 < a4;
    case 's':
      -[NSNumber shortValue](self, "shortValue");
      uint64_t v10 = snprintf(a3, a4, "%hi");
      return v10 < a4;
    default:
      if (v9 == 81)
      {
        -[NSNumber unsignedLongLongValue](self, "unsignedLongLongValue");
        uint64_t v10 = snprintf(a3, a4, "%llu");
        return v10 < a4;
      }

      if (v9 != 83) {
        goto LABEL_25;
      }
      -[NSNumber unsignedShortValue](self, "unsignedShortValue");
      uint64_t v10 = snprintf(a3, a4, "%hu");
      break;
  }

  return v10 < a4;
}

  __break(1u);
  return result;
}

LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    if ((v24 & 0x8000000000000000LL) == 0)
    {
      if (v24)
      {
        uint64_t v26 = v24 - 1;
        goto LABEL_17;
      }

    id v32 = 1;
    if ((v16 & 8) == 0) {
      goto LABEL_35;
    }
LABEL_39:
    if (v32) {
      goto LABEL_47;
    }
    goto LABEL_44;
  }

  uint64_t v6 = *(void *)(a1 + 16);
  *(_WORD *)(a1 + 30) = HIWORD(*(void *)(a1 + 24)) + 1;
  if ((v6 & 0x380) != 0)
  {
    uint64_t v7 = (v6 >> 7) & 7;
    if (v7)
    {
      --*(void *)(*(void *)(a1 + 8 * v7 + 40) + 8 * v37[0]);
      return v5;
    }

          objc_msgSend(v31, sel_setPartOfSpeech_, v24 + 1);
          if ((_DWORD)v26 != 14)
          {
LABEL_35:
            objc_msgSend(v31, sel_setGrammaticalCase_, v26 + 1);
            if (v27 == 2) {
              goto LABEL_22;
            }
LABEL_21:
            objc_msgSend(v31, sel_setDetermination_, (v27 & 1) + 1);
            goto LABEL_22;
          }

            uint64_t v27 = 256LL;
          }

    uint64_t v11 = *(void *)(v5 + 16);
    if ((v11 & 0xC) == v10)
    {
      uint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v2, v3);
      if ((v3 & 0x1000000000000000LL) == 0)
      {
LABEL_10:
        uint64_t v6 = (v11 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_11;
      }
    }

    else if ((v3 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_10;
    }

    if (v4 <= v11 >> 16) {
      goto LABEL_49;
    }
    uint64_t v11 = String.UTF8View._foreignIndex(after:)();
    uint64_t v6 = v11;
LABEL_11:
    *(void *)(v5 + 16) = v6;
    if (4 * v4 == v6 >> 14)
    {
      addItem #1 () in URLComponents._URLComponents.queryItems(percentEncoded:)( v8,  v2,  v3,  v7,  v2,  v3,  v5,  percentEncoded,  v22);
      swift_bridgeObjectRelease_n();
      uint64_t v19 = *(void *)(v22 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_46;
    }
  }

  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  result.value._rawValue = (void *)v11;
  result.is_nil = v12;
  return result;
}

    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    return;
  }

  if ((v96[25] & 1) != 0) {
    goto LABEL_34;
  }
  unint64_t v77 = 0LL;
  *(void *)&unint64_t v78 = 0xE000000000000000LL;
  uint64_t v13 = (void *)v90;
  if ((void)v90)
  {
    uint64_t v14 = *((void *)&v89 + 1);
    outlined retain of URLComponents((uint64_t)&v88);
    __int128 v15 = v13;
LABEL_8:
    v76._countAndFlagsBits = v14;
    v76._object = v15;
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = 58LL;
    v16._object = (void *)0xE100000000000000LL;
    String.append(_:)(v16);
    v17._countAndFlagsBits = v14;
    v17._object = v15;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }

  if (BYTE9(v88) == 1 && (void)v88 && (*(_BYTE *)(v88 + 48) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v88);
    uint64_t v24 = String.subscript.getter();
    uint64_t v14 = MEMORY[0x186E1B610](v24);
    __int128 v15 = v25;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  outlined retain of URLComponents((uint64_t)&v88);
LABEL_13:
  if ((URLComponents._URLComponents.hasAuthority.getter() & 1) != 0)
  {
    if ((void)v95)
    {
      uint64_t v18 = *((void *)&v94 + 1);
      uint64_t v19 = v95;
    }

    else if ((BYTE14(v88) & 1) != 0 && (void)v88)
    {
      if ((*(_BYTE *)(v88 + 168) & 1) != 0) {
        uint64_t v22 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
      }
      else {
        uint64_t v22 = String.subscript.getter();
      }
      uint64_t v18 = MEMORY[0x186E1B610](v22);
      uint64_t v19 = v26;
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v18 = 0LL;
      uint64_t v19 = 0xE000000000000000LL;
    }

    uint64_t v27 = specialized Collection.first.getter(v18, v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 12079LL;
    v28._object = (void *)0xE200000000000000LL;
    String.append(_:)(v28);
    goto LABEL_60;
  }

  if ((void)v95)
  {
    uint64_t v20 = *((void *)&v94 + 1);
    char v21 = v95;
  }

  else if ((BYTE14(v88) & 1) != 0 && (void)v88)
  {
    if ((*(_BYTE *)(v88 + 168) & 1) != 0) {
      uint64_t v23 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      uint64_t v23 = String.subscript.getter();
    }
    uint64_t v20 = MEMORY[0x186E1B610](v23);
    char v21 = v29;
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v20 = 0LL;
    char v21 = 0xE000000000000000LL;
  }

  uint64_t v30 = 65540LL;
  if ((v21 & 0x1000000000000000LL) != 0) {
    uint64_t v31 = (v20 >> 59) & 1;
  }
  else {
    uint64_t v31 = 1LL;
  }
  id v32 = HIBYTE(v21) & 0xF;
  uint64_t v33 = v20 & 0xFFFFFFFFFFFFLL;
  if ((v21 & 0x1000000000000000LL) != 0)
  {
    if ((v21 & 0x2000000000000000LL) != 0) {
      uint64_t v33 = HIBYTE(v21) & 0xF;
    }
    if (!v33)
    {
      __break(1u);
      return;
    }

    uint64_t v34 = String.UTF8View._foreignIndex(after:)();
    uint64_t v33 = v20 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v34 = 65540LL;
  }

  if ((v21 & 0x2000000000000000LL) == 0) {
    id v32 = v33;
  }
  if (v34 >> 14 == 4 * v32
    || (char v35 = specialized Collection.first.getter(v20, v21), (v35 & 0x100) != 0)
    || v35 != 47)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }

  if ((v21 & 0x1000000000000000LL) != 0)
  {
    if (!v32)
    {
LABEL_121:
      __break(1u);
      goto LABEL_122;
    }

    uint64_t v30 = String.UTF8View._foreignIndex(after:)();
  }

  if ((v30 & 0xC) == 4LL << v31) {
    uint64_t v30 = _StringGuts._slowEnsureMatchingEncoding(_:)(v30, v20, v21);
  }
  uint64_t v31 = v30 >> 16;
  if (v30 >> 16 >= v32)
  {
    __break(1u);
    goto LABEL_121;
  }

  if ((v21 & 0x1000000000000000LL) != 0)
  {
    __int128 v37 = String.UTF8View._foreignSubscript(position:)();
  }

  else
  {
    if ((v21 & 0x2000000000000000LL) == 0)
    {
      if ((v20 & 0x1000000000000000LL) != 0)
      {
        uint64_t v36 = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_58:
        __int128 v37 = *(_BYTE *)(v36 + v31);
        goto LABEL_114;
      }

  if (v5 >= a2) {
    goto LABEL_39;
  }
  *(_BYTE *)(a1 + (*(void (**)(char *))(v4 + 16))((char *)v9 - v5) = 0;
  return String.init(cString:)();
}

  if (v5 >= a2) {
    goto LABEL_39;
  }
  *(_BYTE *)(a1 + (*(void (**)(char *))(v4 + 16))((char *)v9 - v5) = 0;
  return String.init(cString:)();
}

  uint64_t v24 = __dst[14] * a1;
  if ((unsigned __int128)(__dst[14] * (__int128)a1) >> 64 != (__dst[14] * a1) >> 63)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }

  if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = __dst[14] * a1;
  }
  int v46 = v24 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[17] & 1) != 0)
  {
LABEL_10:
    if ((__dst[19] & 1) != 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }

  Hasher._combine(_:)(0);
LABEL_35:
  if (v40 == 2)
  {
    uint64_t v12 = 0;
  }

  else
  {
    uint64_t v12 = v40 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v12);
  if (v41)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v27);
  }

  v116 = v26;
  *(void *)&v115 = *(void *)&v118[4];
  v117[0] = xmmword_1837293E0;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
  }
  __int128 v38 = v12[2];
  __int128 v37 = v12[3];
  if (v38 >= v37 >> 1) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v37 > 1),  v38 + 1,  1,  v12);
  }
  v12[2] = v38 + 1;
  int v39 = &v12[6 * v38];
  unint64_t v40 = v117[0];
  unint64_t v41 = v117[2];
  v39[3] = v117[1];
  v39[4] = v41;
  v39[2] = v40;
  if ((BYTE8(v118[5]) & 1) != 0)
  {
LABEL_16:
    if ((BYTE8(v118[7]) & 1) != 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }

  objc_msgSend(v8, sel_setQuarter_, v29);
  if ((v45 & 1) != 0)
  {
LABEL_17:
    if ((v46 & 1) != 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }

  __break(1u);
}

  Hasher._combine(_:)(0);
  uint64_t v24 = 0LL;
LABEL_35:

  char v29 = v48;
  if (v29)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v58, v29);
    swift_bridgeObjectRelease();
    uint64_t v30 = v49;
    if (v49) {
      goto LABEL_37;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v50) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }

  Hasher._combine(_:)(0);
  uint64_t v30 = v49;
  if (!v49) {
    goto LABEL_40;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v30);
  swift_bridgeObjectRelease();
  if (!v50) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v51 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v31 = v51 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v31);
  }

  if (v52 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v32 = v52 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v32);
  }

  if (v53 == 2)
  {
    uint64_t v33 = 0;
  }

  else
  {
    uint64_t v33 = v53 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v33);
  if (v54 == 2)
  {
    uint64_t v34 = 0;
  }

  else
  {
    char v35 = v54 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v34 = v35;
  }

  Hasher._combine(_:)(v34);
  outlined retain of LocalePreferences?( (uint64_t)v56,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v56,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

          swift_bridgeObjectRelease();
          goto LABEL_35;
        }

        __int128 v15 = a2;
LABEL_37:
        char v29 = v15;
        type metadata accessor for BPlistMap();
        uint64_t v2 = swift_allocObject();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<(buffer: BufferView<UInt8>, allocation: UnsafeRawPointer?)>._Buffer);
        uint64_t v30 = swift_allocObject();
        *(_DWORD *)(v30 + 40) = 0;
        *(void *)(v30 + 16) = v38;
        *(void *)(v30 + 24) = v29;
        *(void *)(v30 + 32) = 0LL;
        *(void *)(v2 + 64) = v30;
        *(_DWORD *)(v2 + 16) = v49;
        *(_WORD *)(v2 + 20) = v50;
        *(_BYTE *)(v2 + 22) = v5;
        *(_BYTE *)(v2 + 23) = v35;
        *(void *)(v2 + 24) = v4;
        *(void *)(v2 + 32) = v37;
        *(void *)(v2 + 40) = v36;
        if ((v37 & 0x8000000000000000LL) == 0)
        {
          *(void *)(v2 + 4_Block_object_dispose((const void *)(v17 - 128), 8) = v37;
          *(void *)(v2 + 56) = v13;
          return v2;
        }

    v157._countAndFlagsBits = (uint64_t)v9;
    v157._object = v5;
    v158 = v6;
    int v59 = v9;
    swift_retain();
    swift_retain();
    size_t v60 = URL.path(percentEncoded:)(1);
    v157 = v60;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v60._countAndFlagsBits, (unint64_t)v60._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v155._countAndFlagsBits = Set.init(minimumCapacity:)();
    pthread_t v61 = specialized Set._Variant.insert(_:)(&v156, 0x2FuLL);
    unint64_t v62 = v155._countAndFlagsBits;
    uint64_t v64 = v157._countAndFlagsBits;
    unint64_t v63 = v157._object;
    int v65 = ((unint64_t)v157._object >> 56) & 0xF;
    if (v65)
    {
      v146 = v59;
      unint64_t v66 = object;
      v155 = v157;
      MEMORY[0x1895F8858](v61);
      v143 = (uint64_t)&v155;
      v144 = v62;
      swift_bridgeObjectRetain();
      char v67 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v142,  v64,  (unint64_t)v63);
      if (v68 == (void *)1)
      {
        uint64_t v70 = (unint64_t)v155._object;
        unsigned int v69 = v155._countAndFlagsBits;
        swift_bridgeObjectRetain();
        v150 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v69, v70, v62);
        unint64_t v52 = v71;
        swift_bridgeObjectRelease();
      }

      else
      {
        unint64_t v52 = v68;
        v150 = v67;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = v152;
      object = v66;
      if (!v52)
      {
        swift_release();
        swift_release();
        int v59 = v146;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v150 = 0LL;
        unint64_t v52 = (void *)0xE000000000000000LL;
        uint64_t v72 = v148;
        goto LABEL_48;
      }

      uint64_t v72 = v148;
      int v59 = v146;
    }

    else
    {
      swift_bridgeObjectRelease();
      v150 = 0LL;
      unint64_t v52 = (void *)0xE000000000000000LL;
      uint64_t v8 = v152;
      uint64_t v72 = v148;
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_48:
    swift_release();
    swift_release();

    uint64_t v7 = v153;
    goto LABEL_53;
  }

  v158 = v6;
  uint64_t v11 = v9;
  swift_retain();
  swift_retain();
  uint64_t v12 = URL.path(percentEncoded:)(1);
  uint64_t v13 = v12._countAndFlagsBits;
  v157 = v12;
  swift_bridgeObjectRetain();
  v150 = v11;
  if (String.count.getter() <= 1)
  {
    uint64_t v14 = (unint64_t)v12._object;
  }

  else
  {
    uint64_t v14 = (unint64_t)v12._object;
    if ((specialized BidirectionalCollection.last.getter(v12._countAndFlagsBits, (unint64_t)v12._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
      uint64_t v13 = v157._countAndFlagsBits;
      uint64_t v14 = (unint64_t)v157._object;
    }
  }

  v155._countAndFlagsBits = Set.init(minimumCapacity:)();
  uint64_t v27 = specialized Set._Variant.insert(_:)(&v156, 0x2FuLL);
  uint64_t v28 = v155._countAndFlagsBits;
  char v29 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000LL) == 0) {
    char v29 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (!v29)
  {
    swift_bridgeObjectRelease();
    countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
    uint64_t v7 = v153;
    uint64_t v5 = v154;
LABEL_31:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }

  v155._countAndFlagsBits = v13;
  v155._object = (void *)v14;
  MEMORY[0x1895F8858](v27);
  v143 = (uint64_t)&v155;
  v144 = v28;
  swift_bridgeObjectRetain();
  uint64_t v30 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v142,  v13,  v14);
  if (v31 == (void *)1)
  {
    uint64_t v33 = (unint64_t)v155._object;
    id v32 = v155._countAndFlagsBits;
    swift_bridgeObjectRetain();
    countAndFlagsBits = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v32, v33, v28);
    char v35 = v34;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    object = v35;
  }

  else
  {
    object = v31;
    countAndFlagsBits = v30;
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t v7 = v153;
  uint64_t v5 = v154;
  uint64_t v10 = &selRef_outputStreamToMemory;
  if (object) {
    goto LABEL_31;
  }
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  countAndFlagsBits = 0LL;
  object = (void *)0xE000000000000000LL;
LABEL_33:
  uint64_t v8 = v152;
  if ((_foundation_swift_url_feature_enabled() & 1) != 0) {
    goto LABEL_34;
  }
LABEL_17:
  __int128 v38 = [v9 v10[18]];
  if (v38)
  {
    int v39 = v38;
    unint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    unint64_t v42 = v41;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (unint64_t v43 = objc_msgSend(v9, sel_path)) != 0)
    {
      unint64_t v44 = v43;
      unsigned __int8 v45 = object;
      int v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      unint64_t v48 = v47;

      v157._countAndFlagsBits = (uint64_t)v46;
      v157._object = v48;
      swift_bridgeObjectRetain();
      v49._countAndFlagsBits = 59LL;
      v49._object = (void *)0xE100000000000000LL;
      String.append(_:)(v49);
      uint64_t v7 = v153;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v50._countAndFlagsBits = (uint64_t)v40;
      v50._object = v42;
      String.append(_:)(v50);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      object = v45;
    }

    else
    {
      v157._countAndFlagsBits = 59LL;
      v157._object = (void *)0xE100000000000000LL;
      v51._countAndFlagsBits = (uint64_t)v40;
      v51._object = v42;
      String.append(_:)(v51);
      swift_release();
      swift_release();
    }

    swift_bridgeObjectRelease();
    unint64_t v52 = v157._object;
    v150 = (id)v157._countAndFlagsBits;
  }

  else
  {
    int v56 = objc_msgSend(v9, sel_path);
    if (v56)
    {
      unint64_t v57 = v56;
      v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      unint64_t v52 = v58;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      swift_release();

      v150 = 0LL;
      unint64_t v52 = (void *)0xE000000000000000LL;
    }
  }

  uint64_t v72 = v148;
LABEL_53:
  swift_retain();
  v73 = v72;
  swift_retain();
  int v74 = _foundation_swift_url_feature_enabled();
  v154 = v52;
  if ((v74 & 1) != 0)
  {
    v157._countAndFlagsBits = (uint64_t)v73;
    v157._object = v7;
    v158 = v8;
    double v75 = v73;
    swift_retain();
    swift_retain();
    v76 = URL.path(percentEncoded:)(1);
    v157 = v76;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v76._countAndFlagsBits, (unint64_t)v76._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v155._countAndFlagsBits = Set.init(minimumCapacity:)();
    unint64_t v77 = specialized Set._Variant.insert(_:)(&v156, 0x2FuLL);
    unint64_t v78 = v155._countAndFlagsBits;
    unint64_t v79 = v157._countAndFlagsBits;
    v80 = v157._object;
    unint64_t v81 = ((unint64_t)v157._object >> 56) & 0xF;
    if (v81)
    {
      v155 = v157;
      MEMORY[0x1895F8858](v77);
      v143 = (uint64_t)&v155;
      v144 = v78;
      swift_bridgeObjectRetain();
      unint64_t v82 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v142,  v79,  (unint64_t)v80);
      if (v83 == 1)
      {
        v85 = (unint64_t)v155._object;
        v84 = v155._countAndFlagsBits;
        swift_bridgeObjectRetain();
        v86 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v84, v85, v78);
        unint64_t v88 = v87;
        swift_bridgeObjectRelease();
      }

      else
      {
        v86 = (uint64_t)v82;
        unint64_t v88 = v83;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v88)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v86 = 0LL;
        unint64_t v88 = 0xE000000000000000LL;
        goto LABEL_75;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      v86 = 0LL;
      unint64_t v88 = 0xE000000000000000LL;
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_75:
    swift_release();
    swift_release();

    LODWORD(v90) = v149;
    goto LABEL_76;
  }

  unint64_t v89 = objc_msgSend(v73, sel__parameterString);
  LODWORD(v90) = v149;
  if (v89)
  {
    unint64_t v91 = v89;
    unint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
    unint64_t v94 = v93;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (uint64_t v95 = objc_msgSend(v73, sel_path)) != 0)
    {
      uint64_t v96 = v95;
      uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
      v99 = v98;

      v157._countAndFlagsBits = (uint64_t)v97;
      v157._object = v99;
      swift_bridgeObjectRetain();
      v100._countAndFlagsBits = 59LL;
      v100._object = (void *)0xE100000000000000LL;
      String.append(_:)(v100);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v101._countAndFlagsBits = (uint64_t)v92;
      v101._object = v94;
      String.append(_:)(v101);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }

    else
    {
      v157._countAndFlagsBits = 59LL;
      v157._object = (void *)0xE100000000000000LL;
      v102._countAndFlagsBits = (uint64_t)v92;
      v102._object = v94;
      String.append(_:)(v102);
      swift_release();
      swift_release();
    }

    swift_bridgeObjectRelease();
    v86 = v157._countAndFlagsBits;
    unint64_t v88 = (unint64_t)v157._object;
  }

  else
  {
    v103 = objc_msgSend(v73, sel_path);
    if (v103)
    {
      uint64_t v104 = v103;
      v86 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
      unint64_t v88 = v105;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      swift_release();

      v86 = 0LL;
      unint64_t v88 = 0xE000000000000000LL;
    }
  }

  uint64_t v23 = (char *)(v12 + 2);
  if (v10 - (v12 + 2) < 1 || v23 >= v10 || ((unint64_t)&v23[-v8] & 0x8000000000000000LL) != 0)
  {
LABEL_46:
    __break(1u);
  }

  else
  {
    uint64_t v24 = a2 + v8 - (void)v12 - 3;
    char v25 = v13 + 3;
    while (1)
    {
      uint64_t v26 = v25;
      LOBYTE(v_Block_object_dispose((const void *)(v17 - 128), 8) = *v23;
      if ((*v23 - 58) <= 0xF5u
        && (*v23 - 65 > 0x25
         || ((1LL << (v8 - 65)) & 0x3F0000003FLL) == 0))
      {
        break;
      }

      uint64_t v22 = v24-- < 1;
      if (!v22 && ++v23 < v10)
      {
        ++v25;
        if ((v26 & 0x8000000000000000LL) == 0) {
          continue;
        }
      }

      goto LABEL_46;
    }
  }

  uint64_t v28 = 0xED00007265626D75LL;
  char v29 = 0x6E20786568206E69LL;
LABEL_53:
  uint64_t result = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v23, a3, a4);
  *(void *)a5 = v29;
  *(void *)(a5 + _Block_object_dispose((const void *)(v17 - 128), 8) = v28;
  *(void *)(a5 + 16) = v8;
  *(void *)(a5 + 24) = result;
  *(void *)(a5 + 32) = v31;
  *(void *)(a5 + 40) = v32;
  *(_BYTE *)(a5 + 4_Block_object_dispose((const void *)(v17 - 128), 8) = 1;
  return result;
}

  __break(1u);
  return result;
}

            Hasher._combine(_:)(0);
            uint64_t v30 = 0LL;
LABEL_35:

            char v35 = v54;
            if (v35)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v35);
              swift_bridgeObjectRelease();
              uint64_t v36 = v55;
              if (v55) {
                goto LABEL_37;
              }
            }

            else
            {
              Hasher._combine(_:)(0);
              uint64_t v36 = v55;
              if (v55)
              {
LABEL_37:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v36);
                swift_bridgeObjectRelease();
                if (v56)
                {
LABEL_38:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_42:
                  if (v57 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    __int128 v37 = v57 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }

                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    __int128 v38 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }

                  if (v59 == 2)
                  {
                    int v39 = 0;
                  }

                  else
                  {
                    int v39 = v59 & 1;
                    Hasher._combine(_:)(1u);
                  }

                  Hasher._combine(_:)(v39);
                  if (v60 == 2)
                  {
                    unint64_t v40 = 0;
                  }

                  else
                  {
                    unint64_t v41 = v60 & 1;
                    Hasher._combine(_:)(1u);
                    unint64_t v40 = v41;
                  }

                  Hasher._combine(_:)(v40);
                  outlined retain of LocalePreferences?( (uint64_t)v62,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?( (uint64_t)v62,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }

  Hasher._combine(_:)(0);
  char v29 = 0LL;
LABEL_35:

  uint64_t v34 = v53;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
    swift_bridgeObjectRelease();
    char v35 = v54;
    if (v54) {
      goto LABEL_37;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v55) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }

  Hasher._combine(_:)(0);
  char v35 = v54;
  if (!v54) {
    goto LABEL_40;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v35);
  swift_bridgeObjectRelease();
  if (!v55) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }

  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    __int128 v37 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v58 == 2)
  {
    __int128 v38 = 0;
  }

  else
  {
    __int128 v38 = v58 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v38);
  if (v59 == 2)
  {
    int v39 = 0;
  }

  else
  {
    unint64_t v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    int v39 = v40;
  }

  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

  specialized Set._Variant.insert(_:)(&v3, 0x11uLL);
  if ((a1 & 0x8000) == 0)
  {
LABEL_16:
    if ((a1 & 0x100000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

          Hasher._combine(_:)(0);
          if (v17)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v27 = v17;
            _CFObject.hash(into:)();

            if (v19)
            {
LABEL_31:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              uint64_t v28 = v19;
              _CFObject.hash(into:)();

              goto LABEL_37;
            }

  __break(1u);
  return result;
}

  uint64_t v26 = (double *(*)(double *__return_ptr, double *, void *, uint64_t, void *))v14[20];
  LOBYTE(v76[0]) = 4;
  *(double *)unint64_t v77 = v17;
  v26(v79, v76, v77, ObjectType, v14);
  if ((LOBYTE(v79[2]) & 1) != 0)
  {
    uint64_t v27 = v10;
LABEL_64:
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(void *)__int128 v38 = 4LL;
    *(double *)(v38 + _Block_object_dispose((const void *)(v17 - 128), 8) = v27;
    *(_BYTE *)(v38 + 16) = 0;
    return (double *)swift_willThrow();
  }

  while (1)
  {
    uint64_t v28 = v79[1];
    uint64_t v27 = v79[0];
    char v29 = v79[1] + v79[0];
    unint64_t v78 = 16LL;
    if (v79[1] + v79[0] <= 1.59271755e13) {
      uint64_t v30 = v79[1] + v79[0];
    }
    else {
      uint64_t v30 = 1.59271755e13;
    }
    v76[0] = fmax(v30, -2.11845067e11);
    v19(v79, &v78, v76, ObjectType, v14);
    memcpy(v77, v79, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v77);
    if (LOBYTE(v77[15])) {
      uint64_t v31 = 0LL;
    }
    else {
      uint64_t v31 = v77[14];
    }
    id v32 = v27 + v28 + v28;
    double v75 = 16LL;
    if (v32 <= 1.59271755e13) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 1.59271755e13;
    }
    v64[0] = fmax(v33, -2.11845067e11);
    v19(v76, &v75, (double *)v64, ObjectType, v14);
    memcpy(v74, v76, 0x11AuLL);
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)v74);
    char v35 = v74[14];
    if (LOBYTE(v74[15])) {
      char v35 = 0LL;
    }
    if (__OFSUB__(v31, v20))
    {
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
      goto LABEL_114;
    }

    if (v31 - v20 != 2 && (v20 != 23 || v31 != 1))
    {
      if (((v35 == v31) & a5) != 0) {
        uint64_t v27 = v32;
      }
      else {
        uint64_t v27 = v29;
      }
      if (v27 != v10) {
        goto LABEL_59;
      }
LABEL_58:
      if (v20 == v31)
      {
        lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
        swift_allocError();
        *(double *)int v39 = v27;
        *(double *)(v39 + _Block_object_dispose((const void *)(v17 - 128), 8) = v10;
        *(_BYTE *)(v39 + 16) = 1;
        return (double *)swift_willThrow();
      }

      goto LABEL_59;
    }

    uint64_t v36 = __OFSUB__(v31--, 1LL);
    if (v36) {
      goto LABEL_112;
    }
    if (v27 == v10) {
      goto LABEL_58;
    }
LABEL_59:
    if (v56 == v31) {
      break;
    }
    LOBYTE(v76[0]) = 4;
    if (v27 <= 1.59271755e13) {
      __int128 v37 = v27;
    }
    else {
      __int128 v37 = 1.59271755e13;
    }
    v77[0] = fmax(v37, -2.11845067e11);
    v26(v79, v76, v77, ObjectType, v14);
    uint64_t v10 = v27;
    uint64_t v20 = v31;
    if ((LOBYTE(v79[2]) & 1) != 0) {
      goto LABEL_64;
    }
  }

  unint64_t v40 = v52;
  if (v11 >= v27) {
    unint64_t v40 = 0;
  }
  if (v40 != 1)
  {
LABEL_80:
    uint64_t v10 = v27;
    uint64_t v22 = v26;
    goto LABEL_85;
  }

  *(double *)uint64_t v64 = v15;
  v64[1] = v14;
  LOBYTE(v60) = 3;
  unint64_t v58 = v27;
  *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)( (Foundation::Calendar::Component)&v60,  -1LL,  v34,  (Swift::Bool)&v58);
  if ((LOBYTE(v62[1]) & 1) != 0) {
    goto LABEL_116;
  }
  uint64_t v22 = v26;
  uint64_t v10 = v62[0];
  unint64_t v63 = 16LL;
  if (v62[0] <= 1.59271755e13) {
    unint64_t v41 = v62[0];
  }
  else {
    unint64_t v41 = 1.59271755e13;
  }
  unint64_t v58 = fmax(v41, -2.11845067e11);
  v19((double *)v64, &v63, &v58, ObjectType, v14);
  memcpy(v62, v64, 0x11AuLL);
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)v62);
  unint64_t v43 = v62[14];
  if (LOBYTE(v62[15])) {
    unint64_t v43 = 0.0;
  }
  if (__OFSUB__(*(void *)&v43, v56)) {
    goto LABEL_113;
  }
  if (*(void *)&v43 - v56 == 1)
  {
    unint64_t v58 = v15;
    int v59 = v14;
    v73 = 4;
    unint64_t v57 = v10;
    *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)( (Foundation::Calendar::Component)&v73,  -1LL,  v42,  (Swift::Bool)&v57);
    if ((v61 & 1) != 0)
    {
      __break(1u);
      goto LABEL_80;
    }

    specialized closure #1 in Rope._Node.extract<A>(from:to:in:into:)((uint64_t)result, a2, v15, a4, v9);
    goto LABEL_35;
  }

            Hasher._combine(_:)(0);
            uint64_t v31 = 0LL;
LABEL_35:

            uint64_t v36 = v55;
            if (v36)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v36);
              swift_bridgeObjectRelease();
              __int128 v37 = v56;
              if (v56) {
                goto LABEL_37;
              }
            }

            else
            {
              Hasher._combine(_:)(0);
              __int128 v37 = v56;
              if (v56)
              {
LABEL_37:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v37);
                swift_bridgeObjectRelease();
                if (v57)
                {
LABEL_38:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_42:
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    __int128 v38 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }

                  if (v59 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    int v39 = v59 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v39);
                  }

                  if (v60 == 2)
                  {
                    unint64_t v40 = 0;
                  }

                  else
                  {
                    unint64_t v40 = v60 & 1;
                    Hasher._combine(_:)(1u);
                  }

                  Hasher._combine(_:)(v40);
                  if (v61 == 2)
                  {
                    unint64_t v41 = 0;
                  }

                  else
                  {
                    unint64_t v42 = v61 & 1;
                    Hasher._combine(_:)(1u);
                    unint64_t v41 = v42;
                  }

                  Hasher._combine(_:)(v41);
                  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }

  Hasher._combine(_:)(0);
  char v29 = 0LL;
LABEL_35:

  uint64_t v34 = v53;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
    swift_bridgeObjectRelease();
    char v35 = v54;
    if (v54) {
      goto LABEL_37;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v55) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }

  Hasher._combine(_:)(0);
  char v35 = v54;
  if (!v54) {
    goto LABEL_40;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v35);
  swift_bridgeObjectRelease();
  if (!v55) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }

  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    __int128 v37 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v58 == 2)
  {
    __int128 v38 = 0;
  }

  else
  {
    __int128 v38 = v58 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v38);
  if (v59 == 2)
  {
    int v39 = 0;
  }

  else
  {
    unint64_t v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    int v39 = v40;
  }

  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

  specialized Set._Variant.insert(_:)(&v3, 0xDuLL);
  if ((v1 & 0x4000) == 0)
  {
LABEL_16:
    if ((v1 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

          uint64_t v7 = 0LL;
          uint64_t v9 = 1;
LABEL_35:
          uint64_t v26 = v9;
LABEL_36:
          uint64_t v18 = v26;
          goto LABEL_37;
        }

        goto LABEL_53;
      }

      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(a1) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              uint64_t v11 = (unsigned __int8 *)v25 + 2;
              do
              {
                uint64_t v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                uint64_t v7 = v13 - v12;
                ++v11;
              }

              while (--v10);
            }

  MEMORY[0x1895F8858](v82);
  unint64_t v88 = v107;
  *(&v96 - 10) = a4;
  *(&v96 - 9) = v88;
  *(&v96 - _Block_object_dispose((const void *)(v17 - 128), 8) = v108;
  *(&v96 - 7) = v89;
  pthread_t v61 = v110;
  *(&v96 - 6) = v90;
  *(&v96 - 5) = (uint64_t)v61;
  unint64_t v91 = MetatypeMetadata;
  *(&v96 - 4) = v96;
  *(&v96 - 3) = v91;
  unint64_t v94 = v98;
  uint64_t v95 = v109;
  specialized _withPredicateArchivingState<A>(_:_:)(v100, v112, v104, v92);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  if (v72)
  {
    v80 = v101;
    return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v61, v111);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v61, v111);
}

  MEMORY[0x1895F8858](v82);
  unint64_t v88 = v107;
  *(&v96 - 10) = a6;
  *(&v96 - 9) = v88;
  *(&v96 - _Block_object_dispose((const void *)(v17 - 128), 8) = v108;
  *(&v96 - 7) = v89;
  pthread_t v61 = v110;
  *(&v96 - 6) = v90;
  *(&v96 - 5) = (uint64_t)v61;
  unint64_t v91 = MetatypeMetadata;
  *(&v96 - 4) = v96;
  *(&v96 - 3) = v91;
  unint64_t v94 = v98;
  uint64_t v95 = v109;
  specialized _withPredicateArchivingState<A>(_:_:)(v100, v112, v104, v92);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  if (v72)
  {
    v80 = v101;
    return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v61, v111);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v61, v111);
}

      swift_bridgeObjectRelease();
      *(_DWORD *)v190 = v46;
      *(_WORD *)&v190[4] = v184;
      *(_WORD *)&v190[6] = v47;
      *(_WORD *)&v190[8] = v183;
      *(_WORD *)&v190[10] = v182;
      *(_WORD *)&v190[12] = v180;
      *(_WORD *)&v190[14] = v172;
      *(_WORD *)&v190[16] = v173;
      *(_WORD *)&v190[18] = v171;
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v26);
      v181 = v19;
      if (v19) {
        goto LABEL_114;
      }
      int v56 = *(void *)(v26 + 16);
      swift_bridgeObjectRelease();
      if (HIDWORD(v56))
      {
LABEL_113:
        v169 = 0;
        v168 = 3455LL;
        v167 = 2;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_114:
        swift_bridgeObjectRelease();
        swift_unexpectedError();
        __break(1u);
        goto LABEL_115;
      }

      _So9NSDecimala__length_setter(v56, v190);
      *(_DWORD *)v191 = *(_DWORD *)v190;
      *(_OWORD *)&v191[4] = *(_OWORD *)&v190[4];
      *(void *)v190 = v30 | 0x30;
      v57._countAndFlagsBits = MEMORY[0x186E1B6AC](v190, 1LL);
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      v182 = *(unsigned int *)v191;
      LOWORD(v29) = *(_WORD *)&v191[4];
      LOWORD(v30) = *(_WORD *)&v191[6];
      v184 = *(unsigned __int16 *)&v191[8];
      LOWORD(v31) = *(_WORD *)&v191[10];
      LOWORD(v32) = *(_WORD *)&v191[12];
      char v35 = *(_WORD *)&v191[14];
      LODWORD(v183) = *(unsigned __int16 *)&v191[16];
      unint64_t v58 = *(unsigned __int16 *)&v191[18];
      *(_DWORD *)v190 = *(_DWORD *)v191;
      *(_WORD *)&v190[4] = *(_WORD *)&v191[4];
      *(_WORD *)&v190[6] = *(_WORD *)&v191[6];
      *(_WORD *)&v190[8] = *(_WORD *)&v191[8];
      *(_WORD *)&v190[10] = *(_WORD *)&v191[10];
      *(_WORD *)&v190[12] = *(_WORD *)&v191[12];
      *(_WORD *)&v190[14] = *(_WORD *)&v191[14];
      *(_WORD *)&v190[16] = *(_WORD *)&v191[16];
      *(_WORD *)&v190[18] = *(_WORD *)&v191[18];
      int v59 = _So9NSDecimala__length_getter(v190);
      unint64_t v41 = v182;
      unint64_t v43 = v58;
      unint64_t v42 = v184;
      uint64_t v34 = v183;
      if (!v59) {
        goto LABEL_45;
      }
    }

    v170 = v46;
    uint64_t v26 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v26 + 16) = v50;
    bzero((void *)(v26 + 32), 2 * v50);
    unint64_t v51 = *(unsigned __int16 *)(2 * v50 + v49 + 30);
    unint64_t v52 = v51 / 0xA;
    do
    {
      *(_WORD *)(v26 + 30 + 2 * v50) = v52;
      LODWORD(v30) = v51 % 0xA;
      if (v50 == 1)
      {
        LODWORD(v46) = v170;
        unint64_t v54 = *(void *)(v26 + 16);
        if (!v54) {
          goto LABEL_34;
        }
        goto LABEL_31;
      }

      unint64_t v51 = *(unsigned __int16 *)(v49 + 28 + 2 * v50) | ((_DWORD)v30 << 16);
      unint64_t v52 = v51 / 0xA;
      unint64_t v53 = v50 - 2;
      --v50;
    }

    while (v53 < *(void *)(v26 + 16));
    __break(1u);
LABEL_41:
    unint64_t v62 = v24;
    unint64_t v63 = swift_retain_n();
    v180 = (uint64_t)&v170;
    MEMORY[0x1895F8858](v63);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v170 - 8), (uint64_t *)v191);
    v181 = v19;
    if (!v19)
    {
      size_t v60 = *(void *)v191;
      pthread_t v61 = *(void *)&v191[8];
      swift_release();
      swift_release_n();
      if (!v61)
      {
        uint64_t v27 = v184;
        uint64_t v24 = v62;
        continue;
      }

  Hasher._combine(_:)(0);
  uint64_t v26 = 0LL;
LABEL_35:

  uint64_t v31 = v62;
  if (v31)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v72, v31);
    swift_bridgeObjectRelease();
    id v32 = v63;
    if (v63) {
      goto LABEL_37;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v64) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }

  Hasher._combine(_:)(0);
  id v32 = v63;
  if (!v63) {
    goto LABEL_40;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v72, v32);
  swift_bridgeObjectRelease();
  if (!v64) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v65 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v33 = v65 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v33);
  }

  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v34 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }

  if (v67 == 2)
  {
    char v35 = 0;
  }

  else
  {
    char v35 = v67 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v35);
  if (v68 == 2)
  {
    uint64_t v36 = 0;
  }

  else
  {
    __int128 v37 = v68 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v36 = v37;
  }

  Hasher._combine(_:)(v36);
  outlined retain of LocalePreferences?( (uint64_t)v70,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v70,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  __int128 v38 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v72, v38);
  swift_bridgeObjectRelease();
  int v39 = *(_DWORD *)(v1 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 24));
  Hasher._combine(_:)(v39);
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v40 = *(void *)(v1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }

  Hasher._combine(_:)(*(void *)(v1 + 48));
  unint64_t v41 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  unint64_t v42 = (Swift::UInt *)(v1 + *(int *)(v41 + 36));
  Hasher._combine(_:)(*v42);
  Hasher._combine(_:)(v42[1]);
  unint64_t v43 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  unint64_t v44 = (char *)v42 + *(int *)(v43 + 28);
  if (v44[8] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unsigned __int8 v45 = *(void *)v44;
    Hasher._combine(_:)(1u);
    if ((v45 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      int v46 = v45;
    }
    else {
      int v46 = 0LL;
    }
    Hasher._combine(_:)(v46);
  }

  unint64_t v47 = v1 + *(int *)(v41 + 40);
  if (*(_BYTE *)(v47 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    int64_t v49 = *(void *)v47;
    unint64_t v48 = *(void *)(v47 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
    Hasher._combine(_:)(v48);
  }

  return Hasher._finalize()();
}

    outlined init with copy of ICUNumberFormatter.Signature( v305,  v300,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    unint64_t v62 = *(int *)(v40 + 24);
    static Duration.zero.getter();
    unint64_t v63 = static Duration.< infix(_:_:)();
    v304 = v62;
    if ((v63 & 1) != 0)
    {
      uint64_t v64 = static Duration.zero.getter();
      BOOL v55 = MEMORY[0x186E1D11C](v64);
      unint64_t v57 = v65;
    }

    static Duration.zero.getter();
    unint64_t v66 = a1;
    char v67 = a2;
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      uint64_t v68 = static Duration.zero.getter();
      unint64_t v66 = MEMORY[0x186E1D11C](v68);
      char v67 = v69;
    }

    v303 = v49;
    uint64_t v70 = Duration.components.getter();
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      uint64_t v71 = static Duration.zero.getter();
      MEMORY[0x186E1D11C](v71);
    }

    uint64_t result = Duration.components.getter();
    v73 = v72;
    if (!result)
    {
      v306 = v72;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v76 = static Duration./ infix<A>(_:_:)();
      unint64_t v78 = v81;
      v306 = v73;
      unint64_t v82 = static Duration.* infix<A>(_:_:)();
LABEL_49:
      unint64_t v87 = v82;
      unint64_t v88 = v83;
      double v75 = v302;
      goto LABEL_58;
    }

    if (!v72)
    {
      v84 = result;
      if (v70 == 0x8000000000000000LL && result == -1) {
        goto LABEL_213;
      }
      v85 = v70 / result;
      v76 = Duration.init(secondsComponent:attosecondsComponent:)();
      uint64_t result = v84 * v85;
      unint64_t v78 = v86;
      unint64_t v82 = Duration.init(secondsComponent:attosecondsComponent:)();
      goto LABEL_49;
    }

    int v74 = static Duration.< infix(_:_:)();
    double v75 = v302;
    if ((v74 & 1) != 0)
    {
      v76 = static Duration.zero.getter();
      unint64_t v78 = v77;
      unint64_t v79 = static Duration.zero.getter();
    }

    else
    {
      uint64_t result = static Duration./ infix(_:_:)();
      if ((~*(void *)&v89 & 0x7FF0000000000000LL) == 0) {
        goto LABEL_200;
      }
      if (v89 <= -1.0) {
        goto LABEL_201;
      }
      if (v89 >= 1.84467441e19) {
        goto LABEL_202;
      }
      unint64_t v90 = (unint64_t)v89;
      v306 = (unint64_t)v89;
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      unint64_t v91 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x186E1D11C](v66, v67, v91, v92);
      uint64_t result = static Duration./ infix(_:_:)();
      if ((~*(void *)&v93 & 0x7FF0000000000000LL) == 0) {
        goto LABEL_203;
      }
      if (v93 <= -9.22337204e18) {
        goto LABEL_204;
      }
      if (v93 >= 9.22337204e18) {
        goto LABEL_205;
      }
      unint64_t v94 = (uint64_t)v93;
      v299 = (uint64_t)v93;
      Duration.init(secondsComponent:attosecondsComponent:)();
      v306 = v90;
      uint64_t v95 = static Duration.* infix<A>(_:_:)();
      uint64_t v97 = v96;
      Duration.init(secondsComponent:attosecondsComponent:)();
      v285 = v90;
      v306 = v94;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      double v75 = v302;
      v98 = static Duration.* infix<A>(_:_:)();
      int v100 = MEMORY[0x186E1D110](v95, v97, v98, v99);
      v306 = v285;
      unint64_t v78 = v101;
      v102 = static Duration.* infix<A>(_:_:)();
      uint64_t v104 = v103;
      v306 = v299;
      a2 = v293;
      v105 = static Duration.* infix<A>(_:_:)();
      v107 = v106;
      v108 = v104;
      v76 = v100;
      unint64_t v79 = MEMORY[0x186E1D110](v102, v108, v105, v107);
    }

    unint64_t v87 = v79;
    unint64_t v88 = v80;
LABEL_58:
    static Duration.zero.getter();
    v109 = static Duration.< infix(_:_:)() & 1;
    static Duration.zero.getter();
    if (v109 != (static Duration.< infix(_:_:)() & 1))
    {
      v110 = static Duration.zero.getter();
      unint64_t v87 = MEMORY[0x186E1D11C](v110);
      unint64_t v88 = v111;
      v112 = static Duration.zero.getter();
      v76 = MEMORY[0x186E1D11C](v112);
      unint64_t v78 = v113;
    }

    static Duration.zero.getter();
    v114 = v87;
    v115 = v88;
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v116 = static Duration.zero.getter();
      v114 = MEMORY[0x186E1D11C](v116);
      v115 = v117;
    }

    v299 = v78;
    static Duration.zero.getter();
    v118 = static Duration.< infix(_:_:)();
    v119 = v75;
    v120 = a2;
    if ((v118 & 1) != 0)
    {
      v121 = static Duration.zero.getter();
      v119 = MEMORY[0x186E1D11C](v121);
      v120 = v122;
    }

    MEMORY[0x186E1D11C](v114, v115, v119, v120);
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v123 = static Duration.zero.getter();
      MEMORY[0x186E1D11C](v123);
    }

    v304 += v300;
    static Duration.zero.getter();
    if ((static Duration.== infix(_:_:)() & 1) != 0)
    {
      v306 = 2LL;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v124 = v299;
      static Duration./ infix<A>(_:_:)();
      v306 = 2LL;
      v125 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x186E1D11C](v76, v124, v125, v126);
      static Duration.zero.getter();
      static Duration.== infix(_:_:)();
      v127 = a2;
      v287(v304, v292);
      goto LABEL_85;
    }

    static Duration.zero.getter();
    v128 = static Duration.< infix(_:_:)();
    v285 = v76;
    if ((v128 & 1) != 0)
    {
      v129 = static Duration.zero.getter();
      BOOL v55 = MEMORY[0x186E1D11C](v129);
      unint64_t v57 = v130;
    }

    v131 = MEMORY[0x186E1D110](v87, v88, v55, v57);
    v133 = v132;
    static Duration.zero.getter();
    v134 = v131;
    v135 = v133;
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v136 = static Duration.zero.getter();
      v134 = MEMORY[0x186E1D11C](v136);
      v135 = v137;
    }

    static Duration.zero.getter();
    v138 = static Duration.< infix(_:_:)();
    v139 = v75;
    v140 = a2;
    if ((v138 & 1) != 0)
    {
      v141 = static Duration.zero.getter();
      v139 = MEMORY[0x186E1D11C](v141);
      v140 = v142;
    }

    MEMORY[0x186E1D11C](v134, v135, v139, v140);
    static Duration.zero.getter();
    v143 = static Duration.< infix(_:_:)();
    v283 = v133;
    if ((v143 & 1) != 0)
    {
      v144 = static Duration.zero.getter();
      MEMORY[0x186E1D11C](v144);
    }

    v145 = v292;
    v146 = v276;
    v147 = v274;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v276 + 16))(v274, v304, v292);
    v148 = (*(uint64_t (**)(_BYTE *, uint64_t))(v146 + 88))(v147, v145);
    if (v148 == v270)
    {
      v149 = static Duration.< infix(_:_:)();
      if ((v149 & 1) != 0) {
        double v75 = v87;
      }
      else {
        double v75 = v131;
      }
      if ((v149 & 1) != 0) {
        v127 = v88;
      }
      else {
        v127 = v283;
      }
      v150 = v287;
      goto LABEL_84;
    }

    v150 = v287;
    if (v148 == v268)
    {
      double v75 = v87;
      v127 = v88;
      if ((static Duration.< infix(_:_:)() & 1) == 0)
      {
        v167 = static Duration.== infix(_:_:)();
        double v75 = v131;
        v127 = v283;
        if ((v167 & 1) != 0)
        {
          v306 = 2LL;
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          v168 = v285;
          v169 = v299;
          static Duration./ infix<A>(_:_:)();
          v306 = 2LL;
          v170 = static Duration.* infix<A>(_:_:)();
          MEMORY[0x186E1D11C](v168, v169, v170, v171);
          static Duration.zero.getter();
          v172 = static Duration.== infix(_:_:)();
          if ((v172 & 1) != 0) {
            double v75 = v87;
          }
          else {
            double v75 = v131;
          }
          if ((v172 & 1) != 0) {
            v127 = v88;
          }
          else {
            v127 = v283;
          }
        }
      }

      goto LABEL_84;
    }

    if (v148 == v267)
    {
      v176 = v283;
      v177 = static Duration.< infix(_:_:)();
      if ((v177 & 1) != 0) {
        double v75 = v87;
      }
      else {
        double v75 = v131;
      }
      if ((v177 & 1) != 0) {
        v127 = v88;
      }
      else {
        v127 = v176;
      }
      goto LABEL_84;
    }

    if (v148 == v266)
    {
      v261 = v283;
      v262 = static Duration.< infix(_:_:)();
      if ((v262 & 1) != 0) {
        double v75 = v131;
      }
      else {
        double v75 = v87;
      }
      if ((v262 & 1) != 0) {
        v127 = v261;
      }
      else {
        v127 = v88;
      }
      goto LABEL_84;
    }

    double v75 = v87;
    v127 = v88;
    if (v148 != v265)
    {
      double v75 = v131;
      v127 = v283;
      if (v148 != v264) {
        break;
      }
    }

  Hasher._combine(_:)(0);
LABEL_35:
  if (v37 == 2)
  {
    uint64_t v14 = 0;
  }

  else
  {
    uint64_t v14 = v37 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v14);
  if (v7 == 1)
  {
    Hasher._combine(_:)(0);
    __int128 v15 = v47;
  }

  else
  {
    Hasher._combine(_:)(1u);
    __int128 v15 = v47;
    if (v7)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t v16 = v29;
      id v17 = v7;
    }

    else
    {
      Hasher._combine(_:)(0);
      uint64_t v16 = v29;
      id v17 = 0LL;
    }

    outlined consume of Locale.Subdivision??(v16, v17);
  }

  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    if (v8)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v30, v8);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v18 = v30;
      uint64_t v19 = v8;
      uint64_t v6 = v58;
    }

    else
    {
      Hasher._combine(_:)(0);
      uint64_t v18 = v30;
      uint64_t v19 = 0LL;
    }

    outlined consume of Locale.Subdivision??(v18, v19);
  }

  if (v15 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    if (v15)
    {
      Hasher._combine(_:)(1u);
      uint64_t v20 = v15;
      ObjectType = swift_getObjectType();
      uint64_t v22 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v31 + 112);
      swift_unknownObjectRetain();
      v22(v59, ObjectType, v31);
      uint64_t v23 = v20;
    }

    else
    {
      Hasher._combine(_:)(0);
      uint64_t v23 = 0LL;
    }

    outlined consume of TimeZone??(v23);
  }

  if (v6 != 1)
  {
    Hasher._combine(_:)(1u);
    if (v6)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v32, v6);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v24 = v32;
      char v25 = v6;
    }

    else
    {
      Hasher._combine(_:)(0);
      uint64_t v24 = v32;
      char v25 = 0LL;
    }

    outlined consume of Locale.Subdivision??(v24, v25);
    if (!v5) {
      goto LABEL_58;
    }
LABEL_63:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_64;
  }

  Hasher._combine(_:)(0);
  if (v5) {
    goto LABEL_63;
  }
LABEL_58:
  Hasher._combine(_:)(0);
LABEL_64:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v40);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
LABEL_35:
  if (v36 == 2)
  {
    uint64_t v13 = 0;
  }

  else
  {
    uint64_t v13 = v36 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v13);
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
    uint64_t v14 = v45;
  }

  else
  {
    Hasher._combine(_:)(1u);
    uint64_t v14 = v45;
    if (v8)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      __int128 v15 = v28;
      uint64_t v16 = v8;
    }

    else
    {
      Hasher._combine(_:)(0);
      __int128 v15 = v28;
      uint64_t v16 = 0LL;
    }

    outlined consume of Locale.Subdivision??(v15, v16);
  }

  if (v7 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    if (v7)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v29, v7);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      id v17 = v29;
      uint64_t v18 = v7;
    }

    else
    {
      Hasher._combine(_:)(0);
      id v17 = v29;
      uint64_t v18 = 0LL;
    }

    outlined consume of Locale.Subdivision??(v17, v18);
  }

  if (v14 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    if (v14)
    {
      Hasher._combine(_:)(1u);
      uint64_t v19 = v14;
      ObjectType = swift_getObjectType();
      char v21 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v30 + 112);
      swift_unknownObjectRetain();
      v21(v58, ObjectType, v30);
      uint64_t v22 = v19;
    }

    else
    {
      Hasher._combine(_:)(0);
      uint64_t v22 = 0LL;
    }

    outlined consume of TimeZone??(v22);
  }

  if (v57 != 1)
  {
    Hasher._combine(_:)(1u);
    if (v57)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v31, v57);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v23 = v31;
      uint64_t v24 = v57;
    }

    else
    {
      Hasher._combine(_:)(0);
      uint64_t v23 = v31;
      uint64_t v24 = 0LL;
    }

    outlined consume of Locale.Subdivision??(v23, v24);
    if (!v56) {
      goto LABEL_58;
    }
LABEL_63:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_64;
  }

  Hasher._combine(_:)(0);
  if (v56) {
    goto LABEL_63;
  }
LABEL_58:
  Hasher._combine(_:)(0);
LABEL_64:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v39);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

    unint64_t v77 = *(void *)(v74 + 56);
    swift_release();
    *(void *)(v77 + 8 * v27) = v31;
    goto LABEL_76;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    int v74 = v68;
    if ((v69 & 1) == 0) {
      goto LABEL_75;
    }
    goto LABEL_34;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateIntervalFormatter.Signature, ICUDateIntervalFormatter?>);
  unint64_t v78 = static _DictionaryStorage.copy(original:)();
  int v74 = v78;
  if (!*(void *)(v68 + 16))
  {
LABEL_74:
    swift_bridgeObjectRelease();
    if ((v73 & 1) == 0) {
      goto LABEL_75;
    }
    goto LABEL_34;
  }

  v164 = v31;
  unint64_t v79 = (char *)(v78 + 64);
  v80 = 1LL << *(_BYTE *)(v74 + 32);
  v171 = (char *)(v68 + 64);
  unint64_t v81 = (unint64_t)(v80 + 63) >> 6;
  if (v74 != v68 || v79 >= &v171[8 * v81]) {
    memmove(v79, v171, 8 * v81);
  }
  unint64_t v82 = 0LL;
  *(void *)(v74 + 16) = *(void *)(v68 + 16);
  unint64_t v83 = 1LL << *(_BYTE *)(v68 + 32);
  v84 = -1LL;
  if (v83 < 64) {
    v84 = ~(-1LL << v83);
  }
  v85 = v84 & *(void *)(v68 + 64);
  v170 = (unint64_t)(v83 + 63) >> 6;
  while (2)
  {
    uint64_t v31 = v164;
    int v46 = v165;
    if (v85)
    {
      v172 = (v85 - 1) & v85;
      v175 = v82;
      v86 = __clz(__rbit64(v85)) | (v82 << 6);
LABEL_46:
      unint64_t v87 = 392 * v86;
      unint64_t v88 = (const void *)(*(void *)(v68 + 48) + 392 * v86);
      memcpy(v183, v88, sizeof(v183));
      unint64_t v89 = 8 * v86;
      unint64_t v90 = *(void *)(*(void *)(v68 + 56) + 8 * v86);
      memmove((void *)(*(void *)(v74 + 48) + v87), v88, 0x188uLL);
      *(void *)(*(void *)(v74 + 56) + v89) = v90;
      outlined retain of ICUDateIntervalFormatter.Signature(v183);
      swift_retain();
      unint64_t v82 = v175;
      v85 = v172;
      continue;
    }

    break;
  }

  unint64_t v91 = v82 + 1;
  if (__OFADD__(v82, 1LL))
  {
    __break(1u);
    goto LABEL_103;
  }

  if (v91 >= v170) {
    goto LABEL_74;
  }
  unint64_t v92 = *(void *)&v171[8 * v91];
  unint64_t v93 = v82 + 1;
  if (v92) {
    goto LABEL_73;
  }
  unint64_t v93 = v91 + 1;
  if (v91 + 1 >= v170) {
    goto LABEL_74;
  }
  unint64_t v92 = *(void *)&v171[8 * v93];
  if (v92) {
    goto LABEL_73;
  }
  unint64_t v93 = v91 + 2;
  if (v91 + 2 >= v170) {
    goto LABEL_74;
  }
  unint64_t v92 = *(void *)&v171[8 * v93];
  if (v92) {
    goto LABEL_73;
  }
  unint64_t v93 = v91 + 3;
  if (v91 + 3 >= v170) {
    goto LABEL_74;
  }
  unint64_t v92 = *(void *)&v171[8 * v93];
  if (v92) {
    goto LABEL_73;
  }
  unint64_t v93 = v91 + 4;
  if (v91 + 4 >= v170) {
    goto LABEL_74;
  }
  unint64_t v92 = *(void *)&v171[8 * v93];
  if (v92) {
    goto LABEL_73;
  }
  unint64_t v93 = v91 + 5;
  if (v91 + 5 >= v170) {
    goto LABEL_74;
  }
  unint64_t v92 = *(void *)&v171[8 * v93];
  if (v92) {
    goto LABEL_73;
  }
  unint64_t v93 = v91 + 6;
  if (v91 + 6 >= v170) {
    goto LABEL_74;
  }
  unint64_t v92 = *(void *)&v171[8 * v93];
  if (v92) {
    goto LABEL_73;
  }
  unint64_t v93 = v91 + 7;
  if (v91 + 7 >= v170) {
    goto LABEL_74;
  }
  unint64_t v92 = *(void *)&v171[8 * v93];
  if (v92) {
    goto LABEL_73;
  }
  unint64_t v93 = v91 + 8;
  if (v91 + 8 >= v170) {
    goto LABEL_74;
  }
  unint64_t v92 = *(void *)&v171[8 * v93];
  if (v92)
  {
LABEL_73:
    v172 = (v92 - 1) & v92;
    v175 = v93;
    v86 = __clz(__rbit64(v92)) + (v93 << 6);
    goto LABEL_46;
  }

  unint64_t v94 = v91 + 9;
  if (v94 >= v170) {
    goto LABEL_74;
  }
  unint64_t v92 = *(void *)&v171[8 * v94];
  if (v92)
  {
    unint64_t v93 = v94;
    goto LABEL_73;
  }

  while (1)
  {
    unint64_t v93 = v94 + 1;
    if (__OFADD__(v94, 1LL)) {
      break;
    }
    uint64_t v31 = v164;
    int v46 = v165;
    if (v93 >= v170) {
      goto LABEL_74;
    }
    unint64_t v92 = *(void *)&v171[8 * v93];
    ++v94;
    if (v92) {
      goto LABEL_73;
    }
  }

        uint64_t v10 = 0;
        uint64_t v8 = 1;
        return v10 | ((unint64_t)v8 << 32);
      }

      goto LABEL_60;
    }

    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }

  uint64_t v8 = 1;
  *((_BYTE *)v0 + 17) = 1;
  uint64_t v1 = *v0;
  uint64_t v11 = v0[1];
  uint64_t v12 = *(void *)(*v0 + 16);
  if (v11 == v12)
  {
    uint64_t v10 = 0;
    return v10 | ((unint64_t)v8 << 32);
  }

  if (v11 >= v12) {
    goto LABEL_59;
  }
  uint64_t v13 = v1 + 32;
  uint64_t v14 = *(unsigned __int8 *)(v1 + 32 + v11);
  __int128 v15 = v11 + 1;
  v0[1] = v11 + 1;
  if (!v14 || v14 == 255)
  {
    if (v15 == v12) {
      goto LABEL_34;
    }
    if (v15 >= v12)
    {
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }

    uint64_t v16 = *(unsigned __int8 *)(v13 + v15);
    v0[1] = v11 + 2;
    if (v11 + 2 == v12) {
      goto LABEL_34;
    }
    if (v11 + 2 >= v12)
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }

    id v17 = *(unsigned __int8 *)(v13 + v11 + 2);
    v0[1] = v11 + 3;
    if (v11 + 3 == v12) {
      goto LABEL_34;
    }
    if (v11 + 3 >= v12)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }

    uint64_t v18 = *(unsigned __int8 *)(v13 + v11 + 3);
    uint64_t v2 = v11 + 4;
    v0[1] = v2;
    if (v14 == 255 && v16 == 254 && !v17 && !v18)
    {
      uint64_t v19 = *((unsigned __int8 *)v0 + 16);
      if (v19 != 2)
      {
        uint64_t v8 = 0;
        if ((v19 & 1) != 0) {
          uint64_t v10 = -131072;
        }
        else {
          uint64_t v10 = 65279;
        }
        return v10 | ((unint64_t)v8 << 32);
      }

      *((_BYTE *)v0 + 16) = 0;
      goto LABEL_3;
    }

    if (!v14 && !v16 && v17 == 254 && v18 == 255)
    {
      uint64_t v24 = *((unsigned __int8 *)v0 + 16);
      if (v24 != 2)
      {
        uint64_t v8 = 0;
        if ((v24 & 1) != 0) {
          uint64_t v10 = 65279;
        }
        else {
          uint64_t v10 = -131072;
        }
        return v10 | ((unint64_t)v8 << 32);
      }

      *((_BYTE *)v0 + 16) = 1;
      goto LABEL_3;
    }

    uint64_t v8 = 0;
    uint64_t v23 = v14 | (v16 << 8) | (v17 << 16);
LABEL_48:
    uint64_t v10 = v23 | (v18 << 24);
    goto LABEL_49;
  }

  if (v15 == v12) {
    goto LABEL_34;
  }
  if (v15 >= v12)
  {
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }

  uint64_t v20 = *(unsigned __int8 *)(v13 + v15);
  v0[1] = v11 + 2;
  if (v11 + 2 == v12) {
    goto LABEL_34;
  }
  if (v11 + 2 >= v12)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }

  char v21 = *(unsigned __int8 *)(v13 + v11 + 2);
  v0[1] = v11 + 3;
  if (v11 + 3 == v12) {
    goto LABEL_34;
  }
  if (v11 + 3 < v12)
  {
    uint64_t v8 = 0;
    uint64_t v18 = *(unsigned __int8 *)(v13 + v11 + 3);
    v0[1] = v11 + 4;
    uint64_t v23 = v14 | (v20 << 8) | (v21 << 16);
    goto LABEL_48;
  }

      unint64_t v52 = v21;
      MEMORY[0x1895F8858](v20);
      *(&v66 - 2) = v24;
      MEMORY[0x1895F8858](v53);
      *(&v66 - 2) = (uint64_t)partial apply for makeNSString #1 <A>(bytes:) in String.init<A>(bytes:encoding:);
      *(&v66 - 1) = v54;
      int v56 = v55;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      unint64_t v57 = v67;
      dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
      uint64_t v27 = v69;
      unint64_t v58 = v70;
      int v59 = v66;
      size_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16);
      v60(v56, v57, a3);
      if (v58 == 1)
      {
        v60((uint64_t)v52, v56, a3);
        pthread_t v61 = dispatch thunk of Sequence._copyToContiguousArray()();
        unint64_t v62 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytes_length_encoding_,  v61 + 32,  *(void *)(v61 + 16),  v24);
        if (v62)
        {
          unint64_t v63 = v62;
          uint64_t v27 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
          swift_release();

          (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v56, a3);
          return v27;
        }

        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v56, a3);
      }

      else
      {
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v56, a3);
        if (v58) {
          return v27;
        }
      }

      return 0LL;
    }

    uint64_t v36 = 2;
    goto LABEL_30;
  }

  if (v24 != 1)
  {
    if (v24 == 4)
    {
      char v25 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      uint64_t v26 = v67;
      dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
      uint64_t v27 = v69;
      uint64_t v28 = v70;
      char v29 = v66;
      uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
      v30(v17, v26, a3);
      if (v28 == 1)
      {
        v30(v25, (uint64_t)v17, a3);
        uint64_t v31 = dispatch thunk of Sequence._copyToContiguousArray()();
        id v32 = (unsigned __int8 *)(v31 + 32);
        uint64_t v33 = *(void *)(v31 + 16);
        uint64_t v34 = static String._tryFromUTF8(_:)();
        if (v35)
        {
          uint64_t v27 = v34;
          swift_release();
          (*(void (**)(char *, uint64_t))(v29 + 8))(v17, a3);
          return v27;
        }

        uint64_t v27 = (uint64_t)specialized String.init<A, B>(_validating:as:)(v32, v33);
        uint64_t v28 = v64;
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v29 + 8))(v17, a3);
      if (v28) {
        return v27;
      }
      return 0LL;
    }

    goto LABEL_34;
  }

  unint64_t v40 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  unint64_t v41 = v67;
  dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
  uint64_t v27 = v69;
  unint64_t v42 = v70;
  unint64_t v43 = v66;
  unint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  v44(v23, v41, a3);
  if (v42 == 1)
  {
    v44(v40, (uint64_t)v23, a3);
    unsigned __int8 v45 = dispatch thunk of Sequence._copyToContiguousArray()();
    uint64_t v27 = specialized String.init<A, B>(_validating:as:)((char *)(v45 + 32), *(void *)(v45 + 16));
    unint64_t v42 = v46;
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v43 + 8))(v23, a3);
  if (!v42)
  {
    if (one-time initialization token for compatibility1 != -1) {
      swift_once();
    }
    if (static String.compatibility1 == 1)
    {
      v44(v40, v41, a3);
      unint64_t v47 = dispatch thunk of Sequence._copyToContiguousArray()();
      unint64_t v48 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytes_length_encoding_,  v47 + 32,  *(void *)(v47 + 16),  1);
      if (v48)
      {
        int64_t v49 = v48;
        uint64_t v27 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
        swift_release();

        return v27;
      }

      swift_release();
    }

    return 0LL;
  }

  return v27;
}

    uint64_t v16 = v29;
    if (!v51) {
      goto LABEL_2;
    }
    if ((v50 & 0xF800) == 0xD800) {
      break;
    }
    id v17 = (unsigned __int16)v50;
    lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
    uint64_t v23 = Locale.Language.components.modify();
    specialized RangeReplaceableCollection.remove(at:)(0LL);
    ((void (*)(unsigned __int16 *, void))v23)(&v48, 0LL);
  }

  swift_getAssociatedConformanceWitness();
LABEL_5:
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v49 & 1) != 0) {
      break;
    }
    id v17 = ((-65535 << v51) - 1) & v50 | (v48 << v51);
    BOOL v50 = v17;
    uint64_t v18 = v51 + 16;
    v51 += 16;
    if (v51 >= 0x20u) {
      goto LABEL_10;
    }
  }

  uint64_t v18 = v51;
  if (!v51) {
    goto LABEL_48;
  }
  id v17 = v50;
LABEL_10:
  uint64_t v19 = v17 & 0xFC00FC00;
  if ((v17 & 0xFC00FC00) == 0xDC00D800) {
    uint64_t v20 = 32;
  }
  else {
    uint64_t v20 = 16;
  }
  unint64_t v51 = v18 - v20;
  if (v19 == -603924480) {
    char v21 = 32;
  }
  else {
    char v21 = 16;
  }
  BOOL v50 = (unint64_t)v17 >> v21;
  if (v19 == -603924480)
  {
    uint64_t v22 = 0;
    goto LABEL_23;
  }

  unint64_t v41 = *(void (**)(char *, uint64_t))(v45 + 8);
  v41(v10, AssociatedTypeWitness);
  v41(v44, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, a2);
  swift_bridgeObjectRelease();
  return 0LL;
}

  __src[30] = (int)ucal_getFieldDifference();
  LOBYTE(__src[31]) = 0;
  if ((a2 & 8) == 0)
  {
LABEL_21:
    if ((a2 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_36;
  }

    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  swift_unknownObjectRetain();
  uint64_t result = specialized Rope._Node.split(keeping:)(7LL);
  uint64_t v30 = *v3;
  uint64_t v31 = v3[1];
  id v32 = v3[2];
  id *v3 = result;
  v3[1] = v33;
  v3[2] = v34;
  if (__OFSUB__(v23, v31)) {
    goto LABEL_31;
  }
  char v25 = __OFSUB__(v27, v32);
  char v35 = v27 - v32;
  if (v25)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull();
  int v46 = v23 - v31;
  if ((result & 1) == 0)
  {
    uint64_t v36 = specialized Rope._Node.copy()(v30);
    uint64_t v31 = v37;
    id v32 = v38;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v30 = v36;
  }

  if (__OFADD__(v31, v19)) {
    goto LABEL_33;
  }
  if (!__OFADD__(v32, v21))
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    specialized Rope._UnsafeHandle._insertChild(_:at:)(v17, v19, v21, 0LL, (_WORD *)(v30 + 16), v30 + 24);
    swift_unknownObjectRelease_n();
    swift_unknownObjectRelease();
    *a1 = v46;
    a1[1] = v35;
    return v30;
  }

  uint64_t v23 = v95;
  if (!v95) {
    return MEMORY[0x18961AFF0];
  }
  if (v95 != *(void *)(v1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
    unint64_t v43 = static _DictionaryStorage.allocate(capacity:)();
    unint64_t v44 = 0LL;
    unsigned __int8 v45 = *v94;
    int v46 = v43 + 64;
    while (1)
    {
      if (v45)
      {
        BOOL v50 = __clz(__rbit64(v45));
        v45 &= v45 - 1;
        v98 = v44;
        unint64_t v51 = v50 | (v44 << 6);
      }

      else
      {
        unint64_t v52 = v44 + 1;
        if (__OFADD__(v44, 1LL)) {
          goto LABEL_141;
        }
        if (v52 >= v93) {
          return v43;
        }
        unint64_t v53 = v94[v52];
        unint64_t v54 = v44 + 1;
        if (!v53)
        {
          unint64_t v54 = v44 + 2;
          if (v44 + 2 >= v93) {
            return v43;
          }
          unint64_t v53 = v94[v54];
          if (!v53)
          {
            unint64_t v54 = v44 + 3;
            if (v44 + 3 >= v93) {
              return v43;
            }
            unint64_t v53 = v94[v54];
            if (!v53)
            {
              unint64_t v54 = v44 + 4;
              if (v44 + 4 >= v93) {
                return v43;
              }
              unint64_t v53 = v94[v54];
              if (!v53)
              {
                BOOL v55 = v44 + 5;
                if (v44 + 5 >= v93) {
                  return v43;
                }
                unint64_t v53 = v94[v55];
                if (!v53)
                {
                  while (1)
                  {
                    unint64_t v54 = v55 + 1;
                    if (__OFADD__(v55, 1LL)) {
                      break;
                    }
                    if (v54 >= v93) {
                      return v43;
                    }
                    unint64_t v53 = v94[v54];
                    ++v55;
                    if (v53) {
                      goto LABEL_92;
                    }
                  }

      uint64_t v7 = 0;
      goto LABEL_35;
    }

  __break(1u);
  return result;
}

  __break(1u);
LABEL_35:
  uint64_t v14 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v14 + 16) + 1LL,  1,  (void *)v14);
LABEL_6:
  id v17 = *(void *)(v14 + 16);
  uint64_t v16 = *(void *)(v14 + 24);
  if (v17 >= v16 >> 1) {
    uint64_t v14 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v16 > 1),  v17 + 1,  1,  (void *)v14);
  }
  unint64_t v43 = &type metadata for _CodingKey;
  unint64_t v44 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v18 = swift_allocObject();
  *(void *)&unint64_t v42 = v18;
  *(void *)(v18 + 24) = 0LL;
  *(void *)(v18 + 32) = 0LL;
  *(void *)(v18 + 16) = v15;
  *(_BYTE *)(v18 + 40) = 2;
  *(void *)(v14 + 16) = v17 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v42, v14 + 40 * v17 + 32);
  uint64_t v19 = type metadata accessor for DecodingError();
  swift_allocError();
  char v21 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  char *v21 = v9;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
  return swift_willThrow();
}

  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
}

            Hasher._combine(_:)(0);
            uint64_t v28 = 0LL;
LABEL_35:

            uint64_t v33 = v52;
            if (v33)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v33);
              swift_bridgeObjectRelease();
              uint64_t v34 = v53;
              if (v53) {
                goto LABEL_37;
              }
            }

            else
            {
              Hasher._combine(_:)(0);
              uint64_t v34 = v53;
              if (v53)
              {
LABEL_37:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v34);
                swift_bridgeObjectRelease();
                if (v54)
                {
LABEL_38:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_42:
                  if (v55 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    char v35 = v55 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v35);
                  }

                  if (v56 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    uint64_t v36 = v56 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v36);
                  }

                  if (v57 == 2)
                  {
                    __int128 v37 = 0;
                  }

                  else
                  {
                    __int128 v37 = v57 & 1;
                    Hasher._combine(_:)(1u);
                  }

                  Hasher._combine(_:)(v37);
                  if (v58 == 2)
                  {
                    __int128 v38 = 0;
                  }

                  else
                  {
                    int v39 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    __int128 v38 = v39;
                  }

                  Hasher._combine(_:)(v38);
                  outlined retain of LocalePreferences?( (uint64_t)v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?( (uint64_t)v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }

  Hasher._combine(_:)(0);
  uint64_t v26 = 0LL;
LABEL_35:

  uint64_t v31 = v50;
  if (v31)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v60, v31);
    swift_bridgeObjectRelease();
    id v32 = v51;
    if (v51) {
      goto LABEL_37;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v52) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }

  Hasher._combine(_:)(0);
  id v32 = v51;
  if (!v51) {
    goto LABEL_40;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v60, v32);
  swift_bridgeObjectRelease();
  if (!v52) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v53 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v33 = v53 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v33);
  }

  if (v54 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v34 = v54 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }

  if (v55 == 2)
  {
    char v35 = 0;
  }

  else
  {
    char v35 = v55 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v35);
  if (v56 == 2)
  {
    uint64_t v36 = 0;
  }

  else
  {
    __int128 v37 = v56 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v36 = v37;
  }

  Hasher._combine(_:)(v36);
  outlined retain of LocalePreferences?( (uint64_t)v58,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v58,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

            Hasher._combine(_:)(0);
            uint64_t v31 = 0LL;
LABEL_35:

            uint64_t v36 = v55;
            if (v36)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v36);
              swift_bridgeObjectRelease();
              __int128 v37 = v56;
              if (v56) {
                goto LABEL_37;
              }
            }

            else
            {
              Hasher._combine(_:)(0);
              __int128 v37 = v56;
              if (v56)
              {
LABEL_37:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v37);
                swift_bridgeObjectRelease();
                if (v57)
                {
LABEL_38:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_42:
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    __int128 v38 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }

                  if (v59 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    int v39 = v59 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v39);
                  }

                  if (v60 == 2)
                  {
                    unint64_t v40 = 0;
                  }

                  else
                  {
                    unint64_t v40 = v60 & 1;
                    Hasher._combine(_:)(1u);
                  }

                  Hasher._combine(_:)(v40);
                  if (v61 == 2)
                  {
                    unint64_t v41 = 0;
                  }

                  else
                  {
                    unint64_t v42 = v61 & 1;
                    Hasher._combine(_:)(1u);
                    unint64_t v41 = v42;
                  }

                  Hasher._combine(_:)(v41);
                  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }

  Hasher._combine(_:)(0);
  char v29 = 0LL;
LABEL_35:

  uint64_t v34 = v53;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
    swift_bridgeObjectRelease();
    char v35 = v54;
    if (v54) {
      goto LABEL_37;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v55) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }

  Hasher._combine(_:)(0);
  char v35 = v54;
  if (!v54) {
    goto LABEL_40;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v35);
  swift_bridgeObjectRelease();
  if (!v55) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }

  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    __int128 v37 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v58 == 2)
  {
    __int128 v38 = 0;
  }

  else
  {
    __int128 v38 = v58 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v38);
  if (v59 == 2)
  {
    int v39 = 0;
  }

  else
  {
    unint64_t v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    int v39 = v40;
  }

  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  char v29 = 0LL;
LABEL_35:

  uint64_t v34 = v53;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
    swift_bridgeObjectRelease();
    char v35 = v54;
    if (v54) {
      goto LABEL_37;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v55) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }

  Hasher._combine(_:)(0);
  char v35 = v54;
  if (!v54) {
    goto LABEL_40;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v35);
  swift_bridgeObjectRelease();
  if (!v55) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }

  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    __int128 v37 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v58 == 2)
  {
    __int128 v38 = 0;
  }

  else
  {
    __int128 v38 = v58 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v38);
  if (v59 == 2)
  {
    int v39 = 0;
  }

  else
  {
    unint64_t v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    int v39 = v40;
  }

  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease_n();
  return Hasher._finalize()();
}

  if (a3) {
    *a3 = (id)[(id)qword_18C496548 copy];
  }
  if (a4) {
    *a4 = (id)[(id)qword_18C496550 copy];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_90);
}

    if ((*(_BYTE *)&indexSet->_indexSetFlags & 2) != 0)
    {
      uint64_t v18 = indexSet->_internal._singleRange._range.location;
    }

    else
    {
      uint64_t v24 = -[NSIndexSet lastIndex](indexSet, "lastIndex");
      uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
      if (v24 != 0x7FFFFFFFFFFFFFFFLL && v24 > 0x3F)
      {
        char v25 = 0;
        goto LABEL_40;
      }

      uint64_t v28 = 0LL;
      char v29 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v30 = indexSet->_indexSetFlags;
      p_internal = &indexSet->_internal;
      id v32 = ($BA656A43A73A71AF6C4B982E4240B787 *)(&indexSet->_internal._singleBitfield + 1);
      if ((*(_BYTE *)&v30 & 2) != 0) {
        id v32 = &indexSet->_internal;
      }
      while (1)
      {
        uint64_t v33 = v32;
        if ((*(_BYTE *)&v30 & 3) == 0) {
          uint64_t v33 = ($BA656A43A73A71AF6C4B982E4240B787 *)(p_internal->_singleRange._range.location + 8);
        }
        uint64_t v34 = v33->_singleRange._range.location;
        char v35 = v33->_singleRange._range.location != 0;
        if ((*(_BYTE *)&v30 & 1) == 0 && v34) {
          char v35 = *(void *)(p_internal->_singleRange._range.location + 8);
        }
        if (v29 >= v35) {
          break;
        }
        uint64_t v36 = &indexSet->_internal;
        if ((*(_BYTE *)&v30 & 1) == 0) {
          uint64_t v36 = ($BA656A43A73A71AF6C4B982E4240B787 *)(p_internal->_singleRange._range.location
        }
        __int128 v37 = &v36[v28];
        int v39 = v37->_singleRange._range.location;
        length = v37->_singleRange._range.length;
        unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)length << v39;
        if (length) {
          unint64_t v41 = v40;
        }
        else {
          unint64_t v41 = 0LL;
        }
        v18 |= v41;
        ++v29;
        ++v28;
      }
    }

  if (v7 >= 0x101) {
    free(v12);
  }
  if (v9 >= 0x101) {
    free(v17);
  }
  return v4;
}

      char v21 = v15 - 55;
      goto LABEL_39;
    }

    char v21 = v44 - 48;
    goto LABEL_39;
  }

  uint64_t v16 = v38;
  id v17 = v39;
  if (v39 >= v38)
  {
    uint64_t v22 = v42 + v38;
    if (v41 <= v42 + v38) {
      goto LABEL_76;
    }
    if (v41 - (v42 + v38) >= 0x20) {
      uint64_t v23 = 32LL;
    }
    else {
      uint64_t v23 = v41 - (v42 + v38);
    }
    v42 += v38;
    __int128 v38 = v23;
    objc_msgSend(v40, sel_getUid("getCharacters:range:"), v43, v22, v23);
    uint64_t v20 = v43[0];
    unint64_t v44 = v43[0];
    uint64_t v18 = 1LL;
    int v39 = 1LL;
  }

  else
  {
    uint64_t v18 = ++v39;
    uint64_t v19 = (char *)&v38 + 2 * v17;
    uint64_t v20 = *((unsigned __int16 *)v19 + 20);
    unint64_t v44 = *((_WORD *)v19 + 20);
  }

  char v21 = v20 - 48;
  if ((v20 - 48) <= 9)
  {
LABEL_39:
    uint64_t v24 = 0LL;
    char v25 = v39;
    while (1)
    {
      uint64_t v26 = 16 * v24 + v21;
      if (v24 >> 60) {
        uint64_t v24 = -1LL;
      }
      else {
        uint64_t v24 = v26;
      }
      if (v25 >= v38)
      {
        char v29 = v42;
        uint64_t v30 = v42 + v38;
        if (v41 <= v42 + v38)
        {
          char v25 = v38 + 1;
          int v39 = v38 + 1;
          unint64_t v44 = -1;
          goto LABEL_59;
        }

        if (v41 - (v42 + v38) >= 0x20) {
          uint64_t v31 = 32LL;
        }
        else {
          uint64_t v31 = v41 - (v42 + v38);
        }
        v42 += v38;
        __int128 v38 = v31;
        objc_msgSend(v40, sel_getUid("getCharacters:range:"), v43, v30, v31);
        uint64_t v28 = v43[0];
        unint64_t v44 = v43[0];
        int v39 = 1LL;
        char v25 = 1LL;
      }

      else
      {
        uint64_t v27 = (char *)&v38 + 2 * v25++;
        int v39 = v25;
        uint64_t v28 = *((unsigned __int16 *)v27 + 20);
        unint64_t v44 = v28;
      }

      if ((v28 - 48) >= 0xA)
      {
        if ((v28 - 65) >= 6)
        {
          if ((v28 - 97) > 5)
          {
            char v29 = v42;
LABEL_59:
            -[NSScanner setScanLocation:](self, "setScanLocation:", v25 + v29 - 1);
            uint64_t v33 = result;
            if (result) {
LABEL_60:
            }
              *uint64_t v33 = v24;
            return 1;
          }

          id v32 = -87;
        }

        else
        {
          id v32 = -55;
        }
      }

      else
      {
        id v32 = -48;
      }

      char v21 = v32 + v28;
    }
  }

  if ((v20 - 65) <= 5)
  {
    char v21 = v20 - 55;
    goto LABEL_39;
  }

  if ((v20 - 97) <= 5)
  {
    char v21 = v20 - 87;
    goto LABEL_39;
  }

  uint64_t v22 = v18 + v42 - 1;
  if ((v20 | 0x20) != 0x78) {
    goto LABEL_77;
  }
  uint64_t v16 = v38;
  if (v18 < v38)
  {
    int v39 = v18 + 1;
    __int128 v15 = (unsigned __int16)v43[v18];
    unint64_t v44 = v15;
    goto LABEL_72;
  }

  char v35 = v38 + v42;
  if (v41 > v38 + v42)
  {
    if (v41 - (v38 + v42) >= 0x20) {
      uint64_t v36 = 32LL;
    }
    else {
      uint64_t v36 = v41 - (v38 + v42);
    }
    v42 += v38;
    __int128 v38 = v36;
    objc_msgSend(v40, sel_getUid("getCharacters:range:"), v43, v35, v36);
    __int128 v15 = v43[0];
    unint64_t v44 = v43[0];
    int v39 = 1LL;
LABEL_72:
    char v21 = v15 - 48;
    if ((v15 - 65) > 5)
    {
LABEL_36:
      char v21 = v15 - 87;
      goto LABEL_39;
    }

    goto LABEL_34;
  }

    if (v11 == 48)
    {
      uint64_t v16 = v21;
      do
      {
        if (v16 >= v20)
        {
          uint64_t v18 = v24 + v20;
          if (v23 <= v24 + v20) {
            goto LABEL_45;
          }
          if (v23 - (v24 + v20) >= 0x20) {
            uint64_t v19 = 32LL;
          }
          else {
            uint64_t v19 = v23 - (v24 + v20);
          }
          v24 += v20;
          uint64_t v20 = v19;
          objc_msgSend(v22, sel_getUid("getCharacters:range:"), v25, v18, v19);
          uint64_t v11 = v25[0];
          uint64_t v26 = v25[0];
          char v21 = 1LL;
          uint64_t v16 = 1LL;
        }

        else
        {
          id v17 = (char *)&v20 + 2 * v16++;
          char v21 = v16;
          uint64_t v11 = *((unsigned __int16 *)v17 + 20);
          uint64_t v26 = v11;
        }
      }

      while (v11 == 48);
    }

    return (v11 - 49) < 9;
  }

  if (v26 != 89 && v26 != 116 && v26 != 121) {
    goto LABEL_34;
  }
  return result;
}

  *(void *)(result + 16) = v12;
  *(void *)(result + 24) = v11 & 0xFFFFFFFF000000FFLL | ((v13 & 0xFFFFFF) << 8);
  return result;
}

  if ([v4 count]) {
    return v4;
  }
  else {
    return 0LL;
  }
}

LABEL_33:
      __break(1u);
      goto LABEL_34;
    }

        unint64_t v52 = (v28 - 1) & v28;
        unint64_t v53 = v29;
        uint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
      }

      char v35 = *(void *)(v5 + 56);
      uint64_t v36 = *(void *)(v5 + 48) + 96 * v26;
      __int128 v38 = *(void *)v36;
      __int128 v37 = *(void *)(v36 + 8);
      int v39 = *(void *)(v36 + 16);
      unint64_t v40 = *(void *)(v36 + 24);
      unint64_t v41 = *(unsigned __int8 *)(v36 + 32);
      unint64_t v57 = *(_OWORD *)(v36 + 40);
      unint64_t v42 = *(unsigned __int8 *)(v36 + 56);
      unint64_t v43 = *(void *)(v36 + 72);
      unint64_t v54 = *(void *)(v36 + 64);
      BOOL v55 = *(_BYTE *)(v36 + 80);
      unint64_t v44 = *(void *)(v36 + 88);
      unsigned __int8 v45 = *(void *)(v35 + 8 * v26);
      if ((v51 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v41);
      Hasher._combine(_:)(v57);
      Hasher._combine(_:)(*((Swift::UInt *)&v57 + 1));
      Hasher._combine(_:)(v42);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v55);
      if ((v44 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v12 = v44;
      }
      else {
        uint64_t v12 = 0LL;
      }
      Hasher._combine(_:)(v12);
      uint64_t v13 = Hasher._finalize()();
      uint64_t v14 = -1LL << *(_BYTE *)(v56 + 32);
      __int128 v15 = v13 & ~v14;
      uint64_t v16 = v15 >> 6;
      id v17 = v43;
      uint64_t v18 = v44;
      if (((-1LL << v15) & ~*(void *)(v9 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v19 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v9 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
        char v21 = v42;
        uint64_t v20 = v45;
        uint64_t v22 = v57;
        uint64_t result = v39;
        uint64_t v23 = v41;
        uint64_t v24 = v38;
      }

      else
      {
        uint64_t v31 = 0;
        id v32 = (unint64_t)(63 - v14) >> 6;
        char v21 = v42;
        uint64_t v20 = v45;
        uint64_t v22 = v57;
        uint64_t result = v39;
        uint64_t v23 = v41;
        uint64_t v24 = v38;
        do
        {
          if (++v16 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v33 = v16 == v32;
          if (v16 == v32) {
            uint64_t v16 = 0LL;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v9 + 8 * v16);
        }

        while (v34 == -1);
        uint64_t v19 = __clz(__rbit64(~v34)) + (v16 << 6);
      }

      *(void *)(v9 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      char v25 = *(void *)(v56 + 48) + 96 * v19;
      *(void *)char v25 = v24;
      *(void *)(v25 + _Block_object_dispose((const void *)(v17 - 128), 8) = v37;
      *(void *)(v25 + 16) = result;
      *(void *)(v25 + 24) = v40;
      *(_BYTE *)(v25 + 32) = v23;
      *(_OWORD *)(v25 + 40) = v22;
      *(_BYTE *)(v25 + 56) = v21;
      *(void *)(v25 + 64) = v54;
      *(void *)(v25 + 72) = v17;
      *(_BYTE *)(v25 + 80) = v55;
      *(void *)(v25 + 8_Block_object_dispose((const void *)(v17 - 128), 8) = v18;
      *(void *)(*(void *)(v56 + 56) + 8 * v19) = v20;
      ++*(void *)(v56 + 16);
      uint64_t v5 = v50;
      uint64_t v8 = v52;
      uint64_t v11 = v53;
    }
  }

  uint64_t result = swift_release();
  id *v3 = v56;
  return result;
}

        unint64_t v52 = (v29 - 1) & v29;
        unint64_t v53 = v30;
        uint64_t v27 = __clz(__rbit64(v29)) + (v30 << 6);
      }

      uint64_t v36 = *(void *)(v5 + 56);
      __int128 v37 = *(void *)(v5 + 48) + 96 * v27;
      __int128 v38 = *(void *)v37;
      int v39 = *(void *)(v37 + 8);
      unint64_t v40 = *(void *)(v37 + 16);
      unint64_t v41 = *(void *)(v37 + 24);
      unint64_t v42 = *(unsigned __int8 *)(v37 + 32);
      int v59 = *(_OWORD *)(v37 + 40);
      unint64_t v43 = *(unsigned __int8 *)(v37 + 56);
      unint64_t v44 = *(void *)(v37 + 72);
      int v56 = *(void *)(v37 + 64);
      unint64_t v57 = *(_BYTE *)(v37 + 80);
      unsigned __int8 v45 = *(void *)(v37 + 88);
      int v46 = (uint64_t *)(v36 + 16 * v27);
      unint64_t v54 = *v46;
      BOOL v55 = *((_BYTE *)v46 + 8);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v42);
      Hasher._combine(_:)(v59);
      Hasher._combine(_:)(*((Swift::UInt *)&v59 + 1));
      Hasher._combine(_:)(v43);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v57);
      if ((v45 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v12 = v45;
      }
      else {
        uint64_t v12 = 0LL;
      }
      Hasher._combine(_:)(v12);
      uint64_t v13 = Hasher._finalize()();
      uint64_t v14 = -1LL << *(_BYTE *)(v58 + 32);
      __int128 v15 = v13 & ~v14;
      uint64_t v16 = v15 >> 6;
      id v17 = v45;
      if (((-1LL << v15) & ~*(void *)(v9 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v9 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
        uint64_t v19 = v42;
        uint64_t v20 = v43;
        char v21 = v59;
        uint64_t result = v40;
        uint64_t v22 = v41;
        uint64_t v24 = v38;
        uint64_t v23 = v39;
      }

      else
      {
        id v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v14) >> 6;
        uint64_t v19 = v42;
        uint64_t v20 = v43;
        char v21 = v59;
        uint64_t result = v40;
        uint64_t v22 = v41;
        uint64_t v24 = v38;
        uint64_t v23 = v39;
        do
        {
          if (++v16 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v34 = v16 == v33;
          if (v16 == v33) {
            uint64_t v16 = 0LL;
          }
          v32 |= v34;
          char v35 = *(void *)(v9 + 8 * v16);
        }

        while (v35 == -1);
        uint64_t v18 = __clz(__rbit64(~v35)) + (v16 << 6);
      }

      *(void *)(v9 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      char v25 = *(void *)(v58 + 48) + 96 * v18;
      *(void *)char v25 = v24;
      *(void *)(v25 + _Block_object_dispose((const void *)(v17 - 128), 8) = v23;
      *(void *)(v25 + 16) = result;
      *(void *)(v25 + 24) = v22;
      *(_BYTE *)(v25 + 32) = v19;
      *(_OWORD *)(v25 + 40) = v21;
      *(_BYTE *)(v25 + 56) = v20;
      *(void *)(v25 + 64) = v56;
      *(void *)(v25 + 72) = v44;
      *(_BYTE *)(v25 + 80) = v57;
      *(void *)(v25 + 8_Block_object_dispose((const void *)(v17 - 128), 8) = v17;
      uint64_t v26 = *(void *)(v58 + 56) + 16 * v18;
      *(void *)uint64_t v26 = v54;
      *(_BYTE *)(v26 + _Block_object_dispose((const void *)(v17 - 128), 8) = v55;
      ++*(void *)(v58 + 16);
      uint64_t v5 = v51;
      uint64_t v8 = v52;
      uint64_t v11 = v53;
    }
  }

  uint64_t result = swift_release();
  id *v3 = v58;
  return result;
}

    char v29 = v2[24];
    swift_bridgeObjectRelease();
    *(void *)(v29 + 40) = v3;
    *(void *)(v29 + 4_Block_object_dispose((const void *)(v17 - 128), 8) = v6;
    goto LABEL_34;
  }

  if (v6)
  {
    if ((v6 & 0x1000000000000000LL) != 0)
    {
      v2[22] = v3;
      v2[23] = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      uint64_t v30 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v31 = (unsigned __int16 *)objc_msgSend(v30, sel__fastCharacterContents);
      id v32 = v30;
      if (v31)
      {
        v2[22] = v3;
        v2[23] = v6;
        StringProtocol._ephemeralString.getter();
        uint64_t v33 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v34 = (uint64_t)objc_msgSend(v33, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v34) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v31,  v34,  2u,  0);
        uint64_t v12 = swift_bridgeObjectRelease();
        if ((v34 & 1) != 0) {
          goto LABEL_30;
        }
      }

      else
      {
        unint64_t v40 = specialized Sequence.allSatisfy(_:)(v3, v6, 2);
        uint64_t v12 = swift_bridgeObjectRelease();
        if ((v40 & 1) != 0) {
          goto LABEL_30;
        }
      }

    char v29 = v2[24];
    swift_bridgeObjectRelease();
    *(void *)(v29 + 56) = v3;
    *(void *)(v29 + 64) = v6;
    goto LABEL_34;
  }

  if (v6)
  {
    if ((v6 & 0x1000000000000000LL) != 0)
    {
      v2[22] = v3;
      v2[23] = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      uint64_t v30 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v31 = (unsigned __int16 *)objc_msgSend(v30, sel__fastCharacterContents);
      id v32 = v30;
      if (v31)
      {
        v2[22] = v3;
        v2[23] = v6;
        StringProtocol._ephemeralString.getter();
        uint64_t v33 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v34 = (uint64_t)objc_msgSend(v33, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v34) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v31,  v34,  2u,  0);
        uint64_t v12 = swift_bridgeObjectRelease();
        if ((v34 & 1) != 0) {
          goto LABEL_30;
        }
      }

      else
      {
        unint64_t v40 = specialized Sequence.allSatisfy(_:)(v3, v6, 2);
        uint64_t v12 = swift_bridgeObjectRelease();
        if ((v40 & 1) != 0) {
          goto LABEL_30;
        }
      }

    char v29 = v2[24];
    swift_bridgeObjectRelease();
    *(void *)(v29 + 120) = v3;
    *(void *)(v29 + 12_Block_object_dispose((const void *)(v17 - 128), 8) = v6;
    goto LABEL_34;
  }

  if (v6)
  {
    if ((v6 & 0x1000000000000000LL) != 0)
    {
      v2[22] = v3;
      v2[23] = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      uint64_t v30 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v31 = (unsigned __int16 *)objc_msgSend(v30, sel__fastCharacterContents);
      id v32 = v30;
      if (v31)
      {
        v2[22] = v3;
        v2[23] = v6;
        StringProtocol._ephemeralString.getter();
        uint64_t v33 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v34 = (uint64_t)objc_msgSend(v33, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v34) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v31,  v34,  0x40u,  0);
        uint64_t v12 = swift_bridgeObjectRelease();
        if ((v34 & 1) != 0) {
          goto LABEL_30;
        }
      }

      else
      {
        unint64_t v40 = specialized Sequence.allSatisfy(_:)(v3, v6, 64);
        uint64_t v12 = swift_bridgeObjectRelease();
        if ((v40 & 1) != 0) {
          goto LABEL_30;
        }
      }

    char v29 = v2[24];
    swift_bridgeObjectRelease();
    *(void *)(v29 + 136) = v3;
    *(void *)(v29 + 144) = v6;
    goto LABEL_34;
  }

  if (v6)
  {
    if ((v6 & 0x1000000000000000LL) != 0)
    {
      v2[22] = v3;
      v2[23] = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      uint64_t v30 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v31 = (unsigned __int16 *)objc_msgSend(v30, sel__fastCharacterContents);
      id v32 = v30;
      if (v31)
      {
        v2[22] = v3;
        v2[23] = v6;
        StringProtocol._ephemeralString.getter();
        uint64_t v33 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v34 = (uint64_t)objc_msgSend(v33, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v34) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v31,  v34,  0x40u,  0);
        uint64_t v12 = swift_bridgeObjectRelease();
        if ((v34 & 1) != 0) {
          goto LABEL_30;
        }
      }

      else
      {
        unint64_t v40 = specialized Sequence.allSatisfy(_:)(v3, v6, 64);
        uint64_t v12 = swift_bridgeObjectRelease();
        if ((v40 & 1) != 0) {
          goto LABEL_30;
        }
      }

    swift_bridgeObjectRelease();
    *((void *)&v123[2] + 1) = v30;
    *(void *)&v123[3] = v31;
    v121 = 3;
    unint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    URLComponents._URLComponents.host.setter(v43, v44);
    v121 = 4;
    unsigned __int8 v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v115 = v7;
    BYTE8(v122) = 0;
    BYTE13(v122) = 0;
    if ((v46 & 1) == 0 && v45 < 0)
    {
      while (1)
      {
        v114 = 0;
        v113 = 764LL;
LABEL_96:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }

    *((void *)&v123[4] + 1) = v45;
    LOBYTE(v124[0]) = v46 & 1;
    v121 = 5;
    unint64_t v47 = KeyedDecodingContainer.decode(_:forKey:)();
    BYTE8(v122) = 0;
    BYTE14(v122) = 0;
    int64_t v49 = HIBYTE(v48) & 0xF;
    if ((v48 & 0x2000000000000000LL) == 0) {
      int64_t v49 = v47 & 0xFFFFFFFFFFFFLL;
    }
    if (v49)
    {
      BOOL v50 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v47, v48);
      unint64_t v52 = v51;
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      BOOL v50 = 0LL;
      unint64_t v52 = 0xE000000000000000LL;
    }

    unint64_t v53 = v115;
    swift_bridgeObjectRelease();
    *((void *)&v124[0] + 1) = v50;
    *(void *)&v124[1] = v52;
    v121 = 6;
    unint64_t v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v56 = v54;
    unint64_t v57 = v55;
    BYTE8(v122) = 0;
    HIBYTE(v122) = 0;
    if (v55)
    {
      if ((v55 & 0x1000000000000000LL) != 0)
      {
        v119 = v54;
        v120 = v55;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v101 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v102 = (unsigned __int16 *)objc_msgSend(v101, sel__fastCharacterContents);
        v103 = v101;
        if (v102)
        {
          v119 = v56;
          v120 = v57;
          StringProtocol._ephemeralString.getter();
          uint64_t v104 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v105 = objc_msgSend(v104, sel_length);
          swift_unknownObjectRelease();
          v106 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v102,  (uint64_t)v105,  0x40u,  0);
        }

        else
        {
          v106 = specialized Sequence.allSatisfy(_:)(v56, v57, 64);
        }

        size_t v60 = swift_bridgeObjectRelease();
        unint64_t v53 = v115;
        if ((v106 & 1) != 0) {
          goto LABEL_54;
        }
      }

      else
      {
        if ((v55 & 0x2000000000000000LL) != 0)
        {
          int v59 = HIBYTE(v55) & 0xF;
          v119 = v54;
          v120 = v57 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v58 = (char *)&v119;
        }

        else if ((v54 & 0x1000000000000000LL) != 0)
        {
          unint64_t v58 = (char *)((v55 & 0xFFFFFFFFFFFFFFFLL) + 32);
          int v59 = v56 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          unint64_t v58 = (char *)_StringObject.sharedUTF8.getter();
        }

        size_t v60 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v58, v59, 0x40u, 0);
        if ((v60 & 1) != 0) {
          goto LABEL_54;
        }
      }

      pthread_t v61 = HIBYTE(v57) & 0xF;
      if ((v57 & 0x2000000000000000LL) == 0) {
        pthread_t v61 = v56 & 0xFFFFFFFFFFFFLL;
      }
      if (v61)
      {
        v119 = v56;
        v120 = v57;
        MEMORY[0x1895F8858](v60);
        v113 = (uint64_t)&v119;
        LOBYTE(v114) = 64;
        swift_bridgeObjectRetain();
        unint64_t v62 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)(&v115 - 4),  v56,  v57);
        if (v63)
        {
          int v56 = (uint64_t)v62;
          uint64_t v64 = v63;
          swift_bridgeObjectRelease_n();
          unint64_t v57 = v64;
        }

        else
        {
          int v65 = v119;
          unint64_t v66 = v120;
          swift_bridgeObjectRetain();
          int v56 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v65, v66, 0x40u);
          uint64_t v68 = v67;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          unint64_t v57 = v68;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        int v56 = 0LL;
        unint64_t v57 = 0xE000000000000000LL;
      }
    }

        uint64_t v18 = a7;
LABEL_34:
        if (v18)
        {
LABEL_35:
          if (v10 < a2)
          {
            uint64_t v19 = v10;
            id v17 = 1LL;
            goto LABEL_10;
          }

          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }

  Hasher._combine(_:)(0);
LABEL_34:
  if (v41 == 2)
  {
    uint64_t v12 = 0;
  }

  else
  {
    uint64_t v12 = v41 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v12);
  if (v7)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }

  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
LABEL_34:
  if (v41 == 2)
  {
    uint64_t v12 = 0;
  }

  else
  {
    uint64_t v12 = v41 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v12);
  if (v7)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }

  return Hasher._finalize()();
}

  objc_msgSend(v8, sel_setWeekdayOrdinal_, v28);
  if ((v44 & 1) != 0)
  {
LABEL_16:
    if ((v45 & 1) != 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }

  Hasher._combine(_:)(0);
  if (!v16) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v26 = v16;
  _CFObject.hash(into:)();

  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v27 = v18;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

  Hasher._combine(_:)(0);
  if (!v14) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v24 = v14;
  _CFObject.hash(into:)();

  if (v16)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v25 = v16;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

      unint64_t v48 = v65;
      LODWORD(v161._countAndFlagsBits) = 0;
      LODWORD(v160[0]._countAndFlagsBits) = 0;
      unint64_t v44 = uenum_next();
      int64_t v49 = v153;
      if (SLODWORD(v161._countAndFlagsBits) > 0) {
        goto LABEL_28;
      }
    }
  }

  v119 = 0LL;
  v139 = 0LL;
  v140 = 0LL;
  v141 = 0LL;
  v116 = 0LL;
  v117 = 0LL;
  v136 = 0LL;
  v137 = 0LL;
  v138 = 0LL;
  v133 = 0LL;
  v134 = 0LL;
  v135 = 0LL;
  unsigned __int8 v45 = 0LL;
  v131 = 0LL;
  v132 = 0LL;
  int v46 = 0LL;
  v127 = 0LL;
  v128 = 0LL;
  v129 = 0LL;
  v130 = 0LL;
  unint64_t v47 = 0LL;
  v115 = 0LL;
  v126._countAndFlagsBits = 0LL;
  v126._object = 0LL;
  unint64_t v48 = 0LL;
  int64_t v49 = 0LL;
  BOOL v50 = 4;
  countAndFlagsBits_low = 16;
LABEL_28:
  int v39 = v47;
  v153 = v49;
LABEL_29:
  swift_bridgeObjectRelease();
  swift_release();
  v146 = v48;
  v147 = v46;
  LODWORD(v145) = v50;
  v152 = v45;
  char v35 = v121;
  swift_setDeallocating();
  uenum_close();
  swift_deallocClassInstance();
  unint64_t v41 = v118;
  uint64_t v36 = v119;
  __int128 v38 = v116;
  __int128 v37 = v117;
  uint64_t v31 = v114;
  unint64_t v40 = v115;
  unint64_t v42 = countAndFlagsBits_low;
  uint64_t v33 = v142;
  id v32 = v143;
LABEL_30:
  v118 = v41;
  v119 = v36;
  v116 = v38;
  v117 = v37;
  v115 = v40;
  v144 = v39;
  v160[0]._countAndFlagsBits = v32;
  v160[0]._object = v150;
  unint64_t v52 = v157;
  v160[1]._countAndFlagsBits = countAndFlagsBits;
  v160[1]._object = object;
  v160[2]._countAndFlagsBits = v31;
  v160[2]._object = v33;
  unint64_t v53 = v31;
  v160[3]._countAndFlagsBits = v155;
  v160[3]._object = v148;
  v160[4]._countAndFlagsBits = v157;
  unint64_t v54 = (uint64_t)v151;
  v160[4]._object = v151;
  v160[5]._countAndFlagsBits = v154;
  v160[5]._object = v35;
  LODWORD(v120) = v42;
  LOBYTE(v160[6]._countAndFlagsBits) = v42;
  v160[6]._object = v36;
  v160[7]._countAndFlagsBits = v140;
  v160[7]._object = v139;
  v160[8]._countAndFlagsBits = (uint64_t)v141;
  v160[8]._object = v37;
  v160[9]._countAndFlagsBits = v137;
  v160[9]._object = v136;
  v160[10]._countAndFlagsBits = (uint64_t)v138;
  v160[10]._object = v38;
  v160[11]._countAndFlagsBits = v134;
  v160[11]._object = v133;
  v160[12]._countAndFlagsBits = (uint64_t)v135;
  LOBYTE(v160[12]._object) = v41;
  BYTE1(v160[12]._object) = v145;
  v160[13]._countAndFlagsBits = v152;
  v160[13]._object = v131;
  v160[14]._countAndFlagsBits = v147;
  v160[14]._object = v132;
  v160[15]._countAndFlagsBits = v127;
  v160[15]._object = v129;
  v160[16]._countAndFlagsBits = v128;
  v160[16]._object = v130;
  v160[17]._countAndFlagsBits = v39;
  v160[17]._object = v40;
  v160[18] = v126;
  v160[19]._countAndFlagsBits = v146;
  v160[19]._object = v153;
  v160[20]._countAndFlagsBits = v122;
  v160[20]._object = v125;
  v160[21]._countAndFlagsBits = v124;
  v160[21]._object = v123;
  outlined retain of Locale.Components(&v160[0]._countAndFlagsBits);
  BOOL v55 = v54;
  outlined consume of Locale.LanguageCode?(v52, v54);
  int v56 = v31;
  unint64_t v57 = (uint64_t)v142;
  unint64_t v58 = v155;
  int v59 = v148;
  outlined consume of Locale.LanguageCode?(v56, (uint64_t)v142);
  size_t v60 = v143;
  unint64_t v62 = object;
  pthread_t v61 = v150;
  unint64_t v63 = countAndFlagsBits;
  outlined consume of Locale.LanguageCode?(v143, (uint64_t)v150);
  memcpy(v113, v160, 0x160uLL);
  v161._countAndFlagsBits = v60;
  v161._object = v61;
  v162 = v63;
  v163 = v62;
  v164 = v53;
  v165 = v57;
  v166 = v58;
  v167 = v59;
  v168 = v157;
  v169 = v55;
  v170 = v154;
  v171 = v121;
  v172 = v120;
  v173 = (uint64_t)v119;
  v174 = v140;
  v175 = v139;
  v176 = v141;
  v177 = (uint64_t)v117;
  v178 = v137;
  v179 = v136;
  v180 = v138;
  v181 = (uint64_t)v116;
  v182 = v134;
  v183 = v133;
  v184 = v135;
  v185 = v118;
  v186 = v145;
  v187 = v152;
  v188 = v131;
  v189 = v147;
  v190 = v132;
  v191 = v127;
  v192 = v129;
  v193 = v128;
  v194 = v130;
  v195 = v144;
  v196 = (uint64_t)v115;
  v197 = v126;
  v198 = v146;
  v199 = v153;
  v200 = v122;
  v201 = v125;
  v202 = v124;
  v203 = v123;
  return outlined release of Locale.Components(&v161._countAndFlagsBits);
}

  if (!allowingEOF)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    uint64_t v16 = 1LL;
LABEL_37:
    *(void *)__int128 v15 = v16;
    *(void *)(v15 + 40) = 0LL;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + _Block_object_dispose((const void *)(v17 - 128), 8) = 0u;
    *(_BYTE *)(v15 + 4_Block_object_dispose((const void *)(v17 - 128), 8) = 12;
    return (Swift::UInt8_optional)swift_willThrow();
  }

  return (Swift::UInt8_optional)256;
}

          Hasher._combine(_:)(0);
          if (v21) {
            goto LABEL_29;
          }
          goto LABEL_34;
        }

  Hasher._combine(_:)(0);
  if (!v17) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v27 = v17;
  _CFObject.hash(into:)();

  if (v19)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v28 = v19;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  unint64_t v42 = v66;
  if (!v66) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  unint64_t v43 = v42;
  _CFObject.hash(into:)();

  unint64_t v44 = v61;
  if (v61)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unsigned __int8 v45 = v44;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

  Hasher._combine(_:)(0);
  if (!v20) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v30 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v31 = v22;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

  Hasher._combine(_:)(0);
  if (!v19) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  char v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

            Hasher._combine(_:)(0);
            uint64_t v30 = 0LL;
LABEL_34:

            char v35 = v53;
            if (v35)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v35);
              swift_bridgeObjectRelease();
              uint64_t v36 = v54;
              if (v54) {
                goto LABEL_36;
              }
            }

            else
            {
              Hasher._combine(_:)(0);
              uint64_t v36 = v54;
              if (v54)
              {
LABEL_36:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v36);
                swift_bridgeObjectRelease();
                if (v55)
                {
LABEL_37:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_41:
                  if (v56 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    __int128 v37 = v56 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }

                  if (v57 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    __int128 v38 = v57 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }

                  if (v58 == 2)
                  {
                    int v39 = 0;
                  }

                  else
                  {
                    int v39 = v58 & 1;
                    Hasher._combine(_:)(1u);
                  }

                  Hasher._combine(_:)(v39);
                  if (v59 == 2)
                  {
                    unint64_t v40 = 0;
                  }

                  else
                  {
                    unint64_t v41 = v59 & 1;
                    Hasher._combine(_:)(1u);
                    unint64_t v40 = v41;
                  }

                  Hasher._combine(_:)(v40);
                  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }

  specialized Set._Variant.insert(_:)(&v3, 0xCuLL);
  if ((a1 & 0x10000) == 0)
  {
LABEL_15:
    if ((a1 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  *(void *)(v5 + 8 * v13) = v15 | v14;
  uint64_t v27 = (void *)(*(void *)(v2 + 48) + 16 * v12);
  *uint64_t v27 = v9;
  v27[1] = v8;
  uint64_t v28 = *(void *)(v2 + 16);
  char v29 = __OFADD__(v28, 1LL);
  uint64_t v30 = v28 + 1;
  if (!v29)
  {
    *(void *)(v2 + 16) = v30;
    goto LABEL_3;
  }

  __break(1u);
  return result;
}

  *(void *)(v5 + 8 * v13) = v15 | v14;
  uint64_t v27 = (void *)(*(void *)(v2 + 48) + 16 * v12);
  *uint64_t v27 = v9;
  v27[1] = v8;
  uint64_t v28 = *(void *)(v2 + 16);
  char v29 = __OFADD__(v28, 1LL);
  uint64_t v30 = v28 + 1;
  if (!v29)
  {
    *(void *)(v2 + 16) = v30;
    goto LABEL_3;
  }

  __break(1u);
  return result;
}

          Hasher._combine(_:)(0);
          if (v22) {
            goto LABEL_29;
          }
          goto LABEL_34;
        }

  Hasher._combine(_:)(0);
  if (!v19) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  char v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

  result.value.duration = v12;
  result.value.start._time = v11;
  result.is_nil = v10;
  return result;
}

  specialized Set._Variant.insert(_:)(&v3, 0xCuLL);
  if ((v1 & 0x2000) == 0)
  {
LABEL_15:
    if ((v1 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  __break(1u);
  __break(1u);
  return result;
}

  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    *a3 = v35;
    a3[1] = v7;
    a3[2] = v8;
    a3[3] = v11;
    a3[4] = v34;
  }

  else
  {
LABEL_41:
    __break(1u);
  }

  return result;
}

                  uint64_t v14 = 0LL;
                  uint64_t v16 = 1;
LABEL_34:
                  id v32 = v16;
                  goto LABEL_35;
                }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v29);
  swift_bridgeObjectRelease();
LABEL_34:
  id v32 = v64;
  uint64_t v31 = v65;
  uint64_t v34 = v66;
  uint64_t v33 = v67;
  char v35 = v68;
  if (v64)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v36 = v31;
    __int128 v37 = v34;
    __int128 v38 = v33;
    int v39 = v35;
    unint64_t v40 = v32;
    _CFObject.hash(into:)();
    if (v31) {
      goto LABEL_36;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unsigned __int8 v45 = v35;
    int v46 = v31;
    unint64_t v47 = v34;
    unint64_t v48 = v33;
    if (v31)
    {
LABEL_36:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v41 = v31;
      _CFObject.hash(into:)();

      if (v34) {
        goto LABEL_37;
      }
      goto LABEL_42;
    }
  }

  Hasher._combine(_:)(0);
  if (v34)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v42 = v34;
    _CFObject.hash(into:)();

    if (v33) {
      goto LABEL_38;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v35) {
      goto LABEL_39;
    }
    goto LABEL_44;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v26);
  swift_bridgeObjectRelease();
LABEL_34:
  char v29 = v62;
  uint64_t v28 = v63;
  uint64_t v31 = v64;
  uint64_t v30 = v65;
  id v32 = v66;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v33 = v28;
    uint64_t v34 = v31;
    char v35 = v30;
    uint64_t v36 = v32;
    __int128 v37 = v29;
    _CFObject.hash(into:)();
    if (v28) {
      goto LABEL_36;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v42 = v32;
    unint64_t v43 = v28;
    unint64_t v44 = v31;
    unsigned __int8 v45 = v30;
    if (v28)
    {
LABEL_36:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      __int128 v38 = v28;
      _CFObject.hash(into:)();

      if (v31) {
        goto LABEL_37;
      }
      goto LABEL_42;
    }
  }

  Hasher._combine(_:)(0);
  if (v31)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v39 = v31;
    _CFObject.hash(into:)();

    if (v30) {
      goto LABEL_38;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v32) {
      goto LABEL_39;
    }
    goto LABEL_44;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v30);
  swift_bridgeObjectRelease();
LABEL_34:
  id v32 = v66;
  uint64_t v33 = v67;
  char v35 = v68;
  uint64_t v34 = v69;
  uint64_t v36 = v70;
  if (v66)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    __int128 v37 = v33;
    __int128 v38 = v35;
    int v39 = v34;
    unint64_t v40 = v36;
    unint64_t v41 = v32;
    _CFObject.hash(into:)();
    unint64_t v58 = v32;
    if (v33) {
      goto LABEL_36;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    int v46 = v36;
    unint64_t v47 = v33;
    unint64_t v48 = v35;
    int64_t v49 = v34;
    unint64_t v58 = 0LL;
    if (v33)
    {
LABEL_36:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v42 = v33;
      _CFObject.hash(into:)();

      if (v35) {
        goto LABEL_37;
      }
      goto LABEL_42;
    }
  }

  Hasher._combine(_:)(0);
  if (v35)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v43 = v35;
    _CFObject.hash(into:)();

    if (v34) {
      goto LABEL_38;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v36) {
      goto LABEL_39;
    }
    goto LABEL_44;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v26);
  swift_bridgeObjectRelease();
LABEL_34:
  char v29 = v62;
  uint64_t v28 = v63;
  uint64_t v31 = v64;
  uint64_t v30 = v65;
  id v32 = v66;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v33 = v28;
    uint64_t v34 = v31;
    char v35 = v30;
    uint64_t v36 = v32;
    __int128 v37 = v29;
    _CFObject.hash(into:)();
    if (v28) {
      goto LABEL_36;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v42 = v32;
    unint64_t v43 = v28;
    unint64_t v44 = v31;
    unsigned __int8 v45 = v30;
    if (v28)
    {
LABEL_36:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      __int128 v38 = v28;
      _CFObject.hash(into:)();

      if (v31) {
        goto LABEL_37;
      }
      goto LABEL_42;
    }
  }

  Hasher._combine(_:)(0);
  if (v31)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v39 = v31;
    _CFObject.hash(into:)();

    if (v30) {
      goto LABEL_38;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v32) {
      goto LABEL_39;
    }
    goto LABEL_44;
  }

  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

  Hasher._combine(_:)(0);
  if (!v16) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v26 = v16;
  _CFObject.hash(into:)();

  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v27 = v18;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

  Hasher._combine(_:)(0);
  if (!v16) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v26 = v16;
  _CFObject.hash(into:)();

  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v27 = v18;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

              swift_bridgeObjectRelease();
              id v32 = specialized _copyCollectionToContiguousArray<A>(_:)(v19, v19 + 32, v26, (2 * a4) | 1);
              uint64_t v33 = v36;
              uint64_t v34 = a6;
LABEL_28:
              swift_bridgeObjectRelease();
              Duration.valuesForUnits(_:trailingFractionalLength:smallestUnitRounding:roundingIncrement:)( v32,  a7,  v34,  v33,  a9 & 1,  v35,  a2);
              return v32;
            }

            unint64_t v47 = v49;
LABEL_30:
            int v39 = (v48 - 1) & v48;
            unint64_t v43 = __clz(__rbit64(v48)) + (v47 << 6);
            char v35 = v47;
            goto LABEL_26;
          }
        }
      }
    }

  __break(1u);
  return result;
}

              int v46 = v48;
LABEL_30:
              __int128 v38 = (v47 - 1) & v47;
              unint64_t v42 = __clz(__rbit64(v47)) + (v46 << 6);
              uint64_t v34 = v46;
              goto LABEL_26;
            }
          }
        }
      }
    }

        MEMORY[0x1895F8858](v37);
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        int v59 = dispatch thunk of static Comparable.< infix(_:_:)();
        unint64_t v51 = v32;
        v32((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
        v32(v35, v8);
        unint64_t v52 = v97;
        if ((v59 & 1) == 0) {
          goto LABEL_26;
        }
        goto LABEL_55;
      }

      if (v37 < 64) {
        goto LABEL_48;
      }
      unint64_t v51 = v32;
      v32(v35, v8);
    }

    else
    {
      v32((char *)v89 - v13, v8);
      unint64_t v51 = v32;
    }

    unint64_t v52 = v97;
    goto LABEL_26;
  }

  int v100 = 0LL;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    char v21 = __swift_project_boxed_opaque_existential_1(v102, v103);
    uint64_t v22 = MEMORY[0x1895F8858](v21);
    (*(void (**)(char *, __n128))(v24 + 16))((char *)v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL), v22);
    lazy protocol witness table accessor for type Int and conformance Int();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE8(v98) & 1) == 0)
    {
      uint64_t v4 = (__int128 *)v98;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      return v4;
    }

    char v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    *(void *)&v98 = 0LL;
    *((void *)&v98 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v4 = &v98;
    _StringGuts.grow(_:)(52LL);
    v28._countAndFlagsBits = 0xD00000000000001DLL;
    v28._object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v28);
    _print_unlocked<A, B>(_:_:)();
    v29._object = (void *)0x80000001839D1400LL;
    v29._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 7630409LL;
    v30._object = (void *)0xE300000000000000LL;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 46LL;
    v31._object = (void *)0xE100000000000000LL;
    String.append(_:)(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  *MEMORY[0x189619360],  v25);
LABEL_56:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
    return v4;
  }

  int v100 = 0LL;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v102);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    __int128 v38 = (void *)v98;
    int v39 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v41 = v40;
    v102[0] = 0LL;
    v102[1] = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v42._countAndFlagsBits = 0xD00000000000001DLL;
    v42._object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v42);
    unint64_t v43 = objc_msgSend(v38, sel_description);
    unint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    int v46 = v45;

    uint64_t v4 = (__int128 *)v102;
    v47._countAndFlagsBits = (uint64_t)v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._object = (void *)0x80000001839D1400LL;
    v48._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v48);
    v49._countAndFlagsBits = 7630409LL;
    v49._object = (void *)0xE300000000000000LL;
    String.append(_:)(v49);
    v50._countAndFlagsBits = 46LL;
    v50._object = (void *)0xE100000000000000LL;
    String.append(_:)(v50);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104LL))( v41,  *MEMORY[0x189619360],  v39);
    swift_willThrow();
  }

  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    pthread_t v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x189618740], v4, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  return v4;
}

        MEMORY[0x1895F8858](v38);
        lazy protocol witness table accessor for type Int32 and conformance Int32();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        size_t v60 = dispatch thunk of static Comparable.< infix(_:_:)();
        unint64_t v52 = v33;
        v33((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v9);
        v33(v36, v9);
        unint64_t v53 = v97;
        if ((v60 & 1) == 0) {
          goto LABEL_26;
        }
        goto LABEL_56;
      }

      if (v38 < 32) {
        goto LABEL_49;
      }
      unint64_t v52 = v33;
      v33(v36, v9);
    }

    else
    {
      v33((char *)v89 - v14, v9);
      unint64_t v52 = v33;
    }

    unint64_t v53 = v97;
    goto LABEL_26;
  }

  int v100 = 0LL;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    uint64_t v22 = __swift_project_boxed_opaque_existential_1(v102, v103);
    uint64_t v23 = MEMORY[0x1895F8858](v22);
    (*(void (**)(char *, __n128))(v25 + 16))((char *)v89 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL), v23);
    lazy protocol witness table accessor for type Int32 and conformance Int32();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE4(v98) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      uint64_t v7 = 0;
      goto LABEL_46;
    }

    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v28 = v27;
    *(void *)&v98 = 0LL;
    *((void *)&v98 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v29._countAndFlagsBits = 0xD00000000000001DLL;
    v29._object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v29);
    _print_unlocked<A, B>(_:_:)();
    v30._object = (void *)0x80000001839D1400LL;
    v30._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 0x3233746E49LL;
    v31._object = (void *)0xE500000000000000LL;
    String.append(_:)(v31);
    v32._countAndFlagsBits = 46LL;
    v32._object = (void *)0xE100000000000000LL;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104LL))( v28,  *MEMORY[0x189619360],  v26);
    goto LABEL_57;
  }

  int v100 = 0LL;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    int v39 = (void *)v98;
    unint64_t v40 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v42 = v41;
    v102[0] = 0LL;
    v102[1] = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v43._countAndFlagsBits = 0xD00000000000001DLL;
    v43._object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v43);
    unint64_t v44 = objc_msgSend(v39, sel_description);
    unsigned __int8 v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    unint64_t v47 = v46;

    v48._countAndFlagsBits = (uint64_t)v45;
    v48._object = v47;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._object = (void *)0x80000001839D1400LL;
    v49._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v49);
    v50._countAndFlagsBits = 0x3233746E49LL;
    v50._object = (void *)0xE500000000000000LL;
    String.append(_:)(v50);
    v51._countAndFlagsBits = 46LL;
    v51._object = (void *)0xE100000000000000LL;
    String.append(_:)(v51);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v40 - 8) + 104LL))( v42,  *MEMORY[0x189619360],  v40);
    swift_willThrow();
  }

  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v62 = v61;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x18961A458], a1, v62);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

        MEMORY[0x1895F8858](v37);
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        int v59 = dispatch thunk of static Comparable.< infix(_:_:)();
        unint64_t v51 = v32;
        v32((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
        v32(v35, v8);
        unint64_t v52 = v97;
        if ((v59 & 1) == 0) {
          goto LABEL_26;
        }
        goto LABEL_55;
      }

      if (v37 < 64) {
        goto LABEL_48;
      }
      unint64_t v51 = v32;
      v32(v35, v8);
    }

    else
    {
      v32((char *)v89 - v13, v8);
      unint64_t v51 = v32;
    }

    unint64_t v52 = v97;
    goto LABEL_26;
  }

  int v100 = 0LL;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    char v21 = __swift_project_boxed_opaque_existential_1(v102, v103);
    uint64_t v22 = MEMORY[0x1895F8858](v21);
    (*(void (**)(char *, __n128))(v24 + 16))((char *)v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL), v22);
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE8(v98) & 1) == 0)
    {
      uint64_t v4 = (__int128 *)v98;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      return v4;
    }

    char v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    *(void *)&v98 = 0LL;
    *((void *)&v98 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v4 = &v98;
    _StringGuts.grow(_:)(52LL);
    v28._countAndFlagsBits = 0xD00000000000001DLL;
    v28._object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v28);
    _print_unlocked<A, B>(_:_:)();
    v29._object = (void *)0x80000001839D1400LL;
    v29._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 0x3436746E49LL;
    v30._object = (void *)0xE500000000000000LL;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 46LL;
    v31._object = (void *)0xE100000000000000LL;
    String.append(_:)(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  *MEMORY[0x189619360],  v25);
LABEL_56:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
    return v4;
  }

  int v100 = 0LL;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v102);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    __int128 v38 = (void *)v98;
    int v39 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v41 = v40;
    v102[0] = 0LL;
    v102[1] = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v42._countAndFlagsBits = 0xD00000000000001DLL;
    v42._object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v42);
    unint64_t v43 = objc_msgSend(v38, sel_description);
    unint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    int v46 = v45;

    uint64_t v4 = (__int128 *)v102;
    v47._countAndFlagsBits = (uint64_t)v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._object = (void *)0x80000001839D1400LL;
    v48._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v48);
    v49._countAndFlagsBits = 0x3436746E49LL;
    v49._object = (void *)0xE500000000000000LL;
    String.append(_:)(v49);
    v50._countAndFlagsBits = 46LL;
    v50._object = (void *)0xE100000000000000LL;
    String.append(_:)(v50);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104LL))( v41,  *MEMORY[0x189619360],  v39);
    swift_willThrow();
  }

  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    pthread_t v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x18961A4C0], v4, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  return v4;
}

  __src[32] = (int)ucal_getFieldDifference();
  LOBYTE(__src[33]) = 0;
  if ((a2 & 0x400) == 0)
  {
LABEL_20:
    if ((a2 & 8) == 0) {
      goto LABEL_21;
    }
    goto LABEL_35;
  }

    outlined destroy of Any?((uint64_t)&v45);
    goto LABEL_34;
  }

  uint64_t v13 = (uint64_t)v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v11 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v14 = (void *)v11[6];
  __int128 v15 = v11[7];
  swift_retain();
  uint64_t v16 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v14, v15, v9, v13);
  if ((v16 & 0x8000000000000000LL) == 0 && v13 >= v16)
  {
    v11[2] = v16;
    if (!v16)
    {
LABEL_24:
      swift_release();
LABEL_25:

      if (!v11[2]) {
        goto LABEL_29;
      }
      goto LABEL_26;
    }

    id v17 = v16 - 1;
    uint64_t v18 = v11 + 8;
    while (1)
    {
      while (1)
      {
        uint64_t v23 = (uint64_t *)(v11[6] + 16 * v17);
        uint64_t v24 = *v23;
        char v25 = v23[1];
        swift_bridgeObjectRetain();
        uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
        uint64_t v28 = v27;
        swift_bridgeObjectRelease();
        if ((v28 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        swift_arrayDestroy();
        char v29 = v11[2];
        uint64_t v30 = __OFSUB__(v29, 1LL);
        uint64_t v31 = v29 - 1;
        if (v30)
        {
          __break(1u);
          goto LABEL_37;
        }

        v11[2] = v31;
LABEL_16:
        if (--v17 < 0) {
          goto LABEL_24;
        }
      }

      *(void *)((char *)v18 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
      if (v17 < (uint64_t)v26)
      {
        *(_OWORD *)(v11[6] + 16 * v26) = *(_OWORD *)(v11[6] + 16 * v17);
        uint64_t v19 = v11[7];
        uint64_t v20 = (_OWORD *)(v19 + 32 * v17);
        char v21 = v20[1];
        uint64_t v22 = (_OWORD *)(v19 + 32 * v26);
        *uint64_t v22 = *v20;
        v22[1] = v21;
        goto LABEL_16;
      }

      if (v26 == v17) {
        goto LABEL_16;
      }
      id v32 = v11[6];
      uint64_t v33 = (uint64_t *)(v32 + 16 * v26);
      uint64_t v34 = (uint64_t *)(v32 + 16 * v17);
      char v35 = *v33;
      uint64_t v36 = v33[1];
      __int128 v37 = v34[1];
      *uint64_t v33 = *v34;
      v33[1] = v37;
      *uint64_t v34 = v35;
      v34[1] = v36;
      __int128 v38 = v11[7];
      int v39 = (_OWORD *)(v38 + 32 * v26);
      unint64_t v40 = (_OWORD *)(v38 + 32 * v17);
      outlined init with take of Any(v39, v44);
      outlined init with take of Any(v40, v39);
      outlined init with take of Any(v44, v40);
      if (v17 < 0) {
        goto LABEL_24;
      }
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v11 = i > 0xFF;
    if (i <= 0xFF) {
      uint64_t v10 = i;
    }
    else {
      uint64_t v10 = 0;
    }
  }

  return v10 | (v11 << 8);
}

    uint64_t v11 = i >> 16 != 0;
    uint64_t v10 = (unsigned __int16)i;
    if (i >> 16) {
      uint64_t v10 = 0;
    }
  }

  return v10 | (v11 << 16);
}

    uint64_t v11 = HIDWORD(i) != 0;
    uint64_t v10 = i;
    if (HIDWORD(i)) {
      uint64_t v10 = 0LL;
    }
  }

          if (v6-- < 1)
          {
            uint64_t v6 = 0LL;
          }

          else if ((v5 - 58) <= 0xF5u)
          {
            uint64_t result = 0LL;
            uint64_t v11 = v5 - 65;
            if (v11 > 0x25 || ((1LL << v11) & 0x3F0000003FLL) == 0) {
              return result;
            }
          }

          break;
      }
    }

    if (!v7) {
      return v6 == 0;
    }
    uint64_t result = 0LL;
    uint64_t v12 = *v8++;
    LOWORD((*(void (**)(char *))(v4 + 16))((char *)v9 - v5) = v12;
    v7 -= 2LL;
  }

  while (v12 < 0x80);
  return result;
}

    switch(v18)
    {
      case '0':
        id v17 = 0;
        if (v14 == 1) {
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        goto LABEL_10;
      case '1':
        if (v14 == 1)
        {
          id v17 = 1;
          goto LABEL_97;
        }

        if (v14 == 2)
        {
          LOBYTE(v17) = 16;
          goto LABEL_10;
        }

        goto LABEL_11;
      case '2':
        if (v14 == 1)
        {
          id v17 = 2;
          goto LABEL_97;
        }

        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = 32;
        goto LABEL_10;
      case '3':
        if (v14 == 1)
        {
          id v17 = 3;
          goto LABEL_97;
        }

        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = 48;
        goto LABEL_10;
      case '4':
        if (v14 == 1)
        {
          id v17 = 4;
          goto LABEL_97;
        }

        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = 64;
        goto LABEL_10;
      case '5':
        if (v14 == 1)
        {
          id v17 = 5;
          goto LABEL_97;
        }

        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = 80;
        goto LABEL_10;
      case '6':
        if (v14 == 1)
        {
          id v17 = 6;
          goto LABEL_97;
        }

        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = 96;
        goto LABEL_10;
      case '7':
        if (v14 == 1)
        {
          id v17 = 7;
          goto LABEL_97;
        }

        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = 112;
        goto LABEL_10;
      case '8':
        if (v14 == 1)
        {
          id v17 = 8;
          goto LABEL_97;
        }

        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = 0x80;
        goto LABEL_10;
      case '9':
        if (v14 == 1)
        {
          id v17 = 9;
          goto LABEL_97;
        }

        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = -112;
        goto LABEL_10;
      case 'A':
      case 'a':
        if (v14 == 1)
        {
          id v17 = 10;
          goto LABEL_97;
        }

        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = -96;
        goto LABEL_10;
      case 'B':
      case 'b':
        if (v14 == 1)
        {
          id v17 = 11;
          goto LABEL_97;
        }

        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = -80;
        goto LABEL_10;
      case 'C':
      case 'c':
        if (v14 == 1)
        {
          id v17 = 12;
          goto LABEL_97;
        }

        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = -64;
        goto LABEL_10;
      case 'D':
      case 'd':
        if (v14 == 1)
        {
          id v17 = 13;
          goto LABEL_97;
        }

        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = -48;
        goto LABEL_10;
      case 'E':
      case 'e':
        if (v14 == 1)
        {
          id v17 = 14;
          goto LABEL_97;
        }

        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = -32;
        goto LABEL_10;
      case 'F':
      case 'f':
        if (v14 == 1)
        {
          id v17 = 15;
LABEL_97:
          __int128 v15 = v17 + v15;
          if ((v15 & 0x100) != 0) {
            goto LABEL_116;
          }
          if (specialized Set.contains(_:)(v15, a6))
          {
            if (__OFADD__(v6, 2LL)) {
              goto LABEL_118;
            }
            if (v6 + 2 < v6) {
              goto LABEL_120;
            }
            LOBYTE(v27) = 37;
            HIBYTE(v27) = specialized StringProtocol.hexToAscii(_:)(v15 >> 4);
            uint64_t v28 = v18;
            if (a1)
            {
              uint64_t v20 = a1 + v6;
              if ((unint64_t)&v27 < a1 + v6 + 3 && v20 < (unint64_t)v29)
              {
                _fatalErrorMessage(_:_:file:line:flags:)();
                __break(1u);
                JUMPOUT(0x18349B8C8LL);
              }

              char v21 = v27;
              *(_BYTE *)(v20 + 2) = v28;
              *(_WORD *)uint64_t v20 = v21;
            }

            uint64_t v19 = __OFADD__(v6, 3LL);
            v6 += 3LL;
            if (v19) {
              goto LABEL_121;
            }
          }

          else
          {
            *(_BYTE *)(a1 + v6) = v15;
            uint64_t v19 = __OFADD__(v6++, 1LL);
            if (v19) {
              goto LABEL_119;
            }
            LOBYTE(v15) = 0;
          }
        }

        else if (v14 == 2)
        {
          LOBYTE(v17) = -16;
LABEL_10:
          LOBYTE(v15) = v17;
        }

          Hasher._combine(_:)(0);
          if (v19) {
            goto LABEL_29;
          }
          goto LABEL_34;
        }

  Hasher._combine(_:)(0);
  if (!v16) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v26 = v16;
  _CFObject.hash(into:)();

  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v27 = v18;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

  *(_DWORD *)a1 = v15;
  *(void *)(a1 + _Block_object_dispose((const void *)(v17 - 128), 8) = v14;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v17 - 128), 8) = v9;
  *(_BYTE *)(a1 + 49) = v20;
  return a3;
}

          Hasher._combine(_:)(0);
          if (v22) {
            goto LABEL_29;
          }
          goto LABEL_34;
        }

  Hasher._combine(_:)(0);
  if (!v19) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  char v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

  Hasher._combine(_:)(0);
  if (!v20) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v30 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v31 = v22;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

  Hasher._combine(_:)(0);
  if (!v19) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  char v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }

  if (v6) {
    _CFCharacterSetSetIsInverted();
  }
LABEL_37:

  return (NSCharacterSet *)Predefined;
}

      if (v8 >= location)
      {
        -[NSMutableIndexSet _mergeOverlappingRangesStartingAtIndex:]( self,  "_mergeOverlappingRangesStartingAtIndex:",  v34);
        return;
      }

      char v25 = &self->super._internal;
      if ((*(_BYTE *)&self->super._indexSetFlags & 1) == 0) {
        char v25 = ($BA656A43A73A71AF6C4B982E4240B787 *)(v18->_singleRange._range.location
      }
                                                  + 16LL * *(void *)(v18->_singleRange._range.location + 24)
                                                  + 64);
      uint64_t v26 = &v25[v8];
      uint64_t v27 = v26->_singleRange._range.location;
      length = v26->_singleRange._range.length;
      __int128 v15 = v17 >= v26->_singleRange._range.location;
      char v29 = v17 - v26->_singleRange._range.location;
      if (!v15)
      {
        v27 -= a3;
        goto LABEL_51;
      }

      uint64_t v30 = v27 + length - 1;
      if (v27 >= a4 && v30 <= v17)
      {
LABEL_44:
        -[NSMutableIndexSet _removeRangeInArrayAtIndex:](self, "_removeRangeInArrayAtIndex:", v8, v34);
      }

      else
      {
        if (v27 <= a4 && v17 <= v30)
        {
          id v32 = a3;
LABEL_49:
          length -= v32;
LABEL_51:
          -[NSMutableIndexSet _replaceRangeInArrayAtIndex:withRange:]( self,  "_replaceRangeInArrayAtIndex:withRange:",  v8,  v27,  length,  v34);
          goto LABEL_52;
        }

        if (v17 <= v30)
        {
          uint64_t v31 = v29 + 1;
          length -= v31;
          if (length)
          {
            uint64_t v27 = v27 - a3 + v31;
            goto LABEL_51;
          }

          goto LABEL_44;
        }

        if (v27 <= a4)
        {
          uint64_t v33 = v30 - a4;
          if (v30 >= a4)
          {
            __int128 v15 = __CFADD__(v33, 1LL);
            id v32 = v33 + 1;
            if (!v15) {
              goto LABEL_49;
            }
          }
        }

      uint64_t v11 = (id)objc_msgSend(v11, "__escapeString5991");
      uint64_t v16 = v12;
      id v17 = v15;
LABEL_34:
      uint64_t v24 = -[NSComparisonPredicate options](self, "options");
      char v25 = "c";
      if ((v24 & 1) == 0) {
        char v25 = "";
      }
      uint64_t v26 = "d";
      if ((v24 & 2) == 0) {
        uint64_t v26 = "";
      }
      uint64_t v27 = "w";
      if ((v24 & 0x10) == 0) {
        uint64_t v27 = "";
      }
      uint64_t v20 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"'%s%@%s'%s%s%s",  v17,  v11,  v16,  v25,  v26,  v27);
      uint64_t v4 = v13;
      break;
  }

  __break(1u);
}

  if (v6 >= 3)
  {
    while (v14 < v6 - 2)
    {
      uint64_t v19 = &a1[v14];
      if (*v19 == 47 && v19[1] == 46 && a1[v14 + 2] == 47)
      {
        memmove(v19 + 1, v19 + 3, 2 * (v6 - v14) - 6);
        uint64_t v12 = v48;
        uint64_t v6 = *v48 - 2;
        unsigned __int8 *v48 = v6;
        --v14;
      }

      if (v6 < 3) {
        break;
      }
      ++v14;
    }
  }

  uint64_t v20 = a1 + 1;
  int v46 = a1 + 4;
  char v21 = HasDotDot ^ 1;
  if (v6 < 3) {
    char v21 = 1;
  }
  if ((v21 & 1) == 0)
  {
    unint64_t v47 = v10;
    while (1)
    {
      if (v10)
      {
        uint64_t v22 = 3LL;
        if ((unint64_t)v6 >= 4)
        {
          while (a1[v22] != 47)
          {
            if (v6 == ++v22)
            {
              uint64_t v22 = v6;
              break;
            }
          }
        }

        uint64_t v23 = v6 <= v22 + 1 ? v22 + 1 : v6;
        while (1)
        {
          uint64_t v24 = v22 + 1;
          if (v22 + 1 >= v6) {
            break;
          }
          char v25 = v20[v22++];
          if (v25 == 47) {
            goto LABEL_58;
          }
        }

        uint64_t v24 = v23;
      }

      else
      {
        uint64_t v24 = 0LL;
      }

          [a3 removeObject:v5];
          return 0LL;
        }

        uint64_t v22 = *a3;
LABEL_34:
        *(double *)a4 = v22;
        return;
      case 'f':
        if (*(_BYTE *)(a2 + v7) == 100) {
          *(double *)a4 = *(float *)a3;
        }
        else {
LABEL_37:
        }
          *(_DWORD *)a4 = *(_DWORD *)a3;
        return;
      default:
        if (v8 != 43)
        {
          if (v8 == 123)
          {
            uint64_t v9 = (const char *)(a2 + v7);
            uint64_t v10 = strchr((const char *)(a1 + v7), 61);
            uint64_t v11 = strchr(v9, 61);
            if (v10 && v11)
            {
              uint64_t v12 = 0LL;
              uint64_t v13 = 0LL;
              uint64_t v14 = v10 + 1;
              __int128 v15 = v11 + 1;
              while (*v14 && *v14 != 125)
              {
                alignp = 0LL;
                sizep[0] = 0LL;
                char v29 = 0LL;
                uint64_t v30 = 0LL;
                uint64_t v16 = NSGetSizeAndAlignment(v14, sizep, &alignp);
                id v17 = NSGetSizeAndAlignment(v15, &v30, &v29);
                uint64_t v18 = (alignp + ((unint64_t)a3 + v12) / alignp * alignp - ((void)a3 + v12)) % alignp + v12;
                uint64_t v19 = (v29 + ((unint64_t)a4 + v13) / v29 * v29 - ((void)a4 + v13)) % v29 + v13;
                if (v30 <= sizep[0]) {
                  uint64_t v20 = sizep[0];
                }
                else {
                  uint64_t v20 = v30;
                }
                memmove((char *)a4 + v19, (char *)a3 + v18, v20);
                convertDataByTypeEncodings(v14, v15, (char *)a3 + v18, (char *)a4 + v19);
                uint64_t v12 = sizep[0] + v18;
                uint64_t v13 = v30 + v19;
                __int128 v15 = v17;
                uint64_t v14 = v16;
              }
            }

            else
            {
              uint64_t v28 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to parse structs within encoding: %s",  a1);
              objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:v28 userInfo:0]);
              encodingsAreCompatible();
            }
          }

          return;
        }

uint64_t destroy for NSKeyValueObservedChange(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = a1 + v4 + 8;
  uint64_t v6 = ~v4;
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v7(v5 & ~v4, 1LL, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5 & ~v4, v2);
  }
  if (*(_DWORD *)(v3 + 84)) {
    uint64_t v8 = *(void *)(v3 + 64);
  }
  else {
    uint64_t v8 = *(void *)(v3 + 64) + 1LL;
  }
  if (!v7(((v5 | v4) + v8) & v6, 1LL, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(((v5 | v4) + v8) & v6, v2);
  }
  return swift_release();
}

uint64_t NSKVOPendingNotificationStackIdentifierEqual(uint64_t a1, void *a2)
{
  if (*(void *)a1 != *a2) {
    return 0LL;
  }
  uint64_t result = [*(id *)(a1 + 8) isEqual:a2[1]];
  if ((_DWORD)result) {
    return *(void *)(a1 + 16) == a2[2];
  }
  return result;
}

void NSKVOPendingNotificationStackRemove(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  v9[3] = *MEMORY[0x1895F89C0];
  if ((a4 & 1) == 0)
  {
    uint64_t v8 = (__CFDictionary *)[a1 _pendingChangeNotificationsArrayForKey:a2 create:0];
    if (!v8) {
      return;
    }
    goto LABEL_6;
  }

  uint64_t v7 = (__CFDictionary **)_CFGetTSD();
  if (v7)
  {
    uint64_t v8 = *v7;
    if (*v7)
    {
LABEL_6:
      if (CFDictionaryGetCount(v8) >= 1)
      {
        v9[0] = a1;
        v9[1] = a2;
        void v9[2] = a3;
        CFDictionaryRemoveValue(v8, v9);
      }
    }
  }

void NSKVOPendingNotificationStackIdentifierRelease(uint64_t a1, id *a2)
{
}

void NSKeyValueDidChange( uint64_t a1, uint64_t a2, char a3, void (*a4)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, _OWORD *), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t *, __int128 *, void *, CFTypeRef *, uint64_t), uint64_t a7)
{
  v35[1] = *MEMORY[0x1895F89C0];
  uint64_t v14 = (void *)_NSKeyValueDebugger();
  if (v14) {
    [v14 _object:a1 trackChangeForKeyOrKeys:a2 operation:1];
  }
  v35[0] = 0LL;
  int v15 = a6(a1, a2, &v34, &v31, v30, &cf2, a7);
  uint64_t v16 = 0LL;
  if (v15)
  {
    do
    {
      objc_msgSend( *(id *)(v34 + 16),  "object:withObservance:didChangeValueForKeyOrKeys:recurse:forwardingValues:",  a1,  v34,  cf2,  1,  v30[0],  v30[1]);
      id v17 = (const void *)[*(id *)(v34 + 16) keyPath];
      uint64_t v18 = (uint64_t)v17;
      if ((a3 & 1) != 0) {
        int v19 = 0;
      }
      else {
        int v19 = CFEqual(v17, cf2);
      }
      uint64_t v20 = *(_BYTE *)(v34 + 40) & 0xF;
      v24[0] = v31;
      v24[1] = v32;
      uint64_t v25 = v33;
      a4(&v26, a1, v18, a5, v19 != 0, v20, v24);
      __int128 v31 = v26;
      __int128 v32 = v27;
      uint64_t v33 = v28;
      char v21 = *(void **)(v34 + 8);
      uint64_t v22 = *(void *)(v34 + 24);
      if ((*(_BYTE *)(v34 + 40) & 0x20) != 0) {
        uint64_t v23 = *(void *)(v34 + 32);
      }
      else {
        uint64_t v23 = 0LL;
      }
      __int128 v26 = v31;
      __int128 v27 = v32;
      uint64_t v28 = v33;
      NSKeyValueNotifyObserver(v21, v18, a1, v22, v23, 0LL, &v26, v35);
    }

    while ((a6(a1, a2, &v34, &v31, v30, &cf2, a7) & 1) != 0);
    uint64_t v16 = (void *)v35[0];
  }
}

CFIndex NSKeyValuePopPendingNotificationPerThread( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, _OWORD *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v14 = *(const __CFArray **)a7;
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)a7);
  if (result)
  {
    CFIndex v16 = result;
    __int128 v27 = a6;
    id v17 = *(unsigned __int8 **)(a7 + 8);
    if (!v17) {
      goto LABEL_14;
    }
    int v18 = v17[2];
    CFIndex v16 = result - 1;
    if (v17 != CFArrayGetValueAtIndex(v14, result - 1)) {
      __assert_rtn( "NSKeyValuePopPendingNotificationPerThread",  "NSKeyValueObserving.m",  980,  "moreParameters->mostRecentEntry == CFArrayGetValueAtIndex(stack, stackCount - 1)");
    }
    CFArrayRemoveValueAtIndex(v14, v16);
    if (!v18)
    {
LABEL_14:
      do
      {
        if (v16-- < 1) {
          break;
        }
        ValueAtIndex = (char *)CFArrayGetValueAtIndex(v14, v16);
        if (*((void *)ValueAtIndex + 1) != a1
          || (uint64_t v20 = ValueAtIndex, ![*((id *)ValueAtIndex + 2) isEqual:a2])
          || (uint64_t v21 = *(void *)(a7 + 16)) != 0 && *((void *)v20 + 4) != v21)
        {
          __assert_rtn( "NSKeyValuePopPendingNotificationPerThread",  "NSKeyValueObserving.m",  1001,  "currentEntry->observable==inObservable && [currentEntry->triggerKeyOrKeys isEqual:inTriggerKeyOrKeys] && (!m oreParameters->onlyObservanceToMatchOrNil || (currentEntry->observance==moreParameters->onlyObservanceToMatchOrNil))");
        }

        uint64_t v22 = *((void *)v20 + 3);
        if (!v22
          || _NSKeyValueCheckObservationInfoForPendingNotification( *((void **)v20 + 1),  *((void *)v20 + 4),  v22))
        {
          *a3 = *((void *)v20 + 4);
          __int128 v25 = *(_OWORD *)(v20 + 40);
          __int128 v26 = *(_OWORD *)(v20 + 56);
          *(void *)(a4 + 32) = *((void *)v20 + 9);
          *(_OWORD *)a4 = v25;
          *(_OWORD *)(a4 + 16) = v26;
          *a5 = *((_OWORD *)v20 + 5);
          *__int128 v27 = a2;
          *(void *)(a7 + _Block_object_dispose((const void *)(v17 - 128), 8) = v20;
          return 1LL;
        }

        int v23 = v20[2];
        CFArrayRemoveValueAtIndex(v14, v16);
      }

      while (!v23);
    }

    return 0LL;
  }

  return result;
}

uint64_t _NSKeyValueCheckObservationInfoForPendingNotification(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) + 8LL);
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(void *, char *))(v6 + 16))(a1, sel_observationInfo);
    if (v7) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = 0LL;
    goto LABEL_8;
  }

  uint64_t v7 = [a1 observationInfo];
  if (!v7) {
    goto LABEL_6;
  }
LABEL_3:
  if (v7 == a3) {
    uint64_t v8 = 1LL;
  }
  else {
    uint64_t v8 = [*(id *)(v7 + 8) containsObject:a2];
  }
LABEL_8:
  os_unfair_lock_unlock(&NSKeyValueObservationInfoLock);
  return v8;
}

void *NSKeyValueDidChangeBySetting@<X0>( void *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  if (!a2)
  {
    if (a3) {
      __assert_rtn("NSKeyValueDidChangeBySetting", "NSKeyValueObserving.m", 617, "inObservedKeyPath");
    }
  }

  __int128 v7 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)a6 = *(_OWORD *)a5;
  *(_OWORD *)(a6 + 16) = v7;
  *(void *)(a6 + 32) = *(void *)(a5 + 32);
  if ((a4 & 1) != 0)
  {
    if (a3)
    {
      CFIndex result = (void *)[a3 objectForKeyedSubscript:a2];
      if (result)
      {
LABEL_7:
        *(void *)(a6 + 16) = result;
        return result;
      }
    }

    else
    {
      CFIndex result = (void *)[result valueForKeyPath:a2];
      if (result) {
        goto LABEL_7;
      }
    }

    CFIndex result = (void *)[MEMORY[0x189603FE8] null];
    goto LABEL_7;
  }

  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()( uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(_OWORD *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2, v4);
  swift_retain();
  v2(v4);
  swift_release();
  return outlined destroy of Notification((uint64_t)v4);
}

void static Notification._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_name);
    if (objc_msgSend(v3, sel_object))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }

    else
    {
      __int128 v11 = 0u;
      __int128 v12 = 0u;
    }

    id v6 = objc_msgSend(v3, sel_userInfo);
    if (v6)
    {
      __int128 v7 = v6;
      uint64_t v8 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6);
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    memset(&v10[8], 0, 40);
    *(void *)uint64_t v10 = v4;
    outlined assign with take of Any?((uint64_t)&v11, (uint64_t)&v10[8]);
    swift_bridgeObjectRelease();
    *(void *)&v10[40] = v8;
    __int128 v9 = *(_OWORD *)&v10[16];
    *a2 = *(_OWORD *)v10;
    a2[1] = v9;
    a2[2] = *(_OWORD *)&v10[32];
  }

  else
  {
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    memset(&v10[8], 0, 40);
    *(void *)uint64_t v10 = String._bridgeToObjectiveCImpl()();
    outlined assign with take of Any?((uint64_t)&v11, (uint64_t)&v10[8]);
    swift_bridgeObjectRelease();
    *(void *)&v10[40] = 0LL;
    __int128 v5 = *(_OWORD *)&v10[16];
    *a2 = *(_OWORD *)v10;
    a2[1] = v5;
    a2[2] = *(_OWORD *)&v10[32];
  }

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSString()
{
  uint64_t v1 = *v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  AnyHashable.init<A>(_:)();
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in Notification.Subscription.init(_:_:_:_:)()
{
  return closure #1 in Notification.Subscription.init(_:_:_:_:)();
}

uint64_t closure #1 in Notification.Subscription.init(_:_:_:_:)()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(os_unfair_lock_s **)(result + 16);
    os_unfair_lock_lock(v2);
    if (!*(void *)(v1 + 64)) {
      goto LABEL_29;
    }
    uint64_t v3 = *(void *)(v1 + 32);
    static Subscribers.Demand.unlimited.getter();
    uint64_t result = static Subscribers.Demand.== infix(_:_:)();
    if ((result & 1) != 0) {
      goto LABEL_6;
    }
    if (v3 < 0)
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v3)
    {
LABEL_6:
      uint64_t v4 = *(void *)(v1 + 32);
      static Subscribers.Demand.unlimited.getter();
      if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
      {
        static Subscribers.Demand.unlimited.getter();
        uint64_t result = static Subscribers.Demand.== infix(_:_:)();
        if ((result & 1) != 0)
        {
          uint64_t v5 = static Subscribers.Demand.unlimited.getter();
        }

        else
        {
          if (v4 < 0)
          {
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }

          if (!v4)
          {
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }

          uint64_t v5 = v4 - 1;
        }

        *(void *)(v1 + 32) = v5;
      }
    }

    os_unfair_lock_unlock(v2);
    static Subscribers.Demand.unlimited.getter();
    uint64_t result = static Subscribers.Demand.== infix(_:_:)();
    if ((result & 1) != 0) {
      goto LABEL_17;
    }
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (!v3) {
        return swift_release();
      }
LABEL_17:
      os_unfair_recursive_lock_lock_with_options();
      uint64_t v6 = dispatch thunk of Subscriber.receive(_:)();
      os_unfair_recursive_lock_unlock();
      static Subscribers.Demand.unlimited.getter();
      uint64_t result = static Subscribers.Demand.== infix(_:_:)();
      if ((result & 1) != 0) {
        goto LABEL_20;
      }
      if ((v6 & 0x8000000000000000LL) == 0)
      {
        if (v6)
        {
LABEL_20:
          os_unfair_lock_lock(v2);
          uint64_t v7 = *(void *)(v1 + 32);
          static Subscribers.Demand.unlimited.getter();
          if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
          {
            static Subscribers.Demand.unlimited.getter();
            char v8 = static Subscribers.Demand.== infix(_:_:)();
            uint64_t v9 = static Subscribers.Demand.unlimited.getter();
            if ((v8 & 1) != 0)
            {
LABEL_28:
              *(void *)(v1 + 32) = v9;
              goto LABEL_29;
            }

            uint64_t result = static Subscribers.Demand.== infix(_:_:)();
            if ((result & 1) != 0)
            {
LABEL_26:
              uint64_t v9 = static Subscribers.Demand.unlimited.getter();
              goto LABEL_28;
            }

            if (((v7 | v6) & 0x8000000000000000LL) == 0)
            {
              uint64_t v9 = v7 + v6;
              if (!__OFADD__(v7, v6))
              {
                if ((v9 & 0x8000000000000000LL) == 0) {
                  goto LABEL_28;
                }
                goto LABEL_37;
              }

              goto LABEL_26;
            }

uint64_t outlined destroy of Notification(uint64_t a1)
{
  return a1;
}

uint64_t destroy for NSNotificationCenter.Notifications.NotificationWrapper(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  return swift_bridgeObjectRelease();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

ValueMetadata *type metadata accessor for UUID()
{
  return &type metadata for UUID;
}

uint64_t Notification.object.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Any?(v1 + 8, a1);
}

uint64_t Notification.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t storeEnumTagSinglePayload for iovec(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v17 - 128), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Notification()
{
  return &type metadata for Notification;
}

uint64_t Notification.description.getter()
{
  v7[0] = 0LL;
  v7[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(37LL);
  swift_bridgeObjectRelease();
  uint64_t v8 = 0x203D20656D616ELL;
  unint64_t v9 = 0xE700000000000000LL;
  v1._countAndFlagsBits = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x7463656A626F202CLL;
  v2._object = (void *)0xEB00000000203D20LL;
  String.append(_:)(v2);
  outlined init with copy of Any?(v0 + 8, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v3._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x6E4972657375202CLL;
  v4._object = (void *)0xED0000203D206F66LL;
  String.append(_:)(v4);
  v7[0] = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
  v5._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return v8;
}

id protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSObject( uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance NSObject( a1,  a2,  (SEL *)&selRef_debugDescription);
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  *a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2[1] = v4;
  return 1LL;
}

LABEL_80:
          __clrex();
          return v17;
        }

        goto LABEL_79;
      }

      return v17;
    }

    id v17 = v27;
    if (a3)
    {
      if (v27 <= a2) {
        return v17;
      }
      id v17 = a2;
      if (v26 <= a2) {
        return v17;
      }
      goto LABEL_69;
    }

    if (v27 < a2) {
      return v17;
    }
    if (v26 < a2) {
      return a2 - 1;
    }
    goto LABEL_67;
  }

  uint64_t v13 = a1 + 16;
  if (!*(void *)(*(void *)(a1 + 16) + 8LL)) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v14 = pthread_self();
  int v15 = atomic_load((unint64_t *)(*(void *)v13 + 56LL));
  if (v14 == (pthread_t)v15)
  {
    CFIndex v16 = *(void **)v13;
    if (*(void *)(*(void *)v13 + 32LL) == v6)
    {
      if ((v5 & 1) != 0) {
        return v6;
      }
      unsigned __int8 v45 = *(_DWORD *)(a1 + 8);
      int v46 = a1 + 16;
      if ((v45 & 1) == 0) {
        int v46 = (uint64_t)&v16[2 * v16[3] + 8];
      }
      if (a4)
      {
        unint64_t v47 = v16[5];
        if ((unint64_t)(*(void *)(v46 + 16 * v47 + 8) - 1LL) > v16[6])
        {
          v16[4] = v6 + 1;
          unint64_t v48 = *(void *)v13;
          int64_t v49 = *(void *)(*(void *)v13 + 48LL) + 1LL;
LABEL_88:
          *(void *)(v48 + 4_Block_object_dispose((const void *)(v17 - 128), 8) = v49;
          return *(void *)(*(void *)v13 + 32LL);
        }

        if (!_isEmpty(a1))
        {
          BOOL v50 = (v45 & 1) != 0 ? 1LL : v16[1];
          if (v47 + 1 < v50)
          {
            v16[5] = v47 + 1;
            BOOL v55 = *(void *)(v46 + 16LL * *(void *)(*(void *)v13 + 40LL));
            *(void *)(*(void *)v13 + 48LL) = 0LL;
            unint64_t v54 = *(void *)v13;
            goto LABEL_97;
          }
        }
      }

      else
      {
        if (v16[6])
        {
          v16[4] = v6 - 1;
          unint64_t v48 = *(void *)v13;
          int64_t v49 = *(void *)(*(void *)v13 + 48LL) - 1LL;
          goto LABEL_88;
        }

        unint64_t v51 = v16[5];
        if (v51)
        {
          v16[5] = v51 - 1;
          unint64_t v52 = (uint64_t *)(v46 + 16LL * *(void *)(*(void *)v13 + 40LL));
          unint64_t v53 = *v52;
          *(void *)(*(void *)v13 + 48LL) = v52[1] - 1;
          unint64_t v54 = *(void *)v13;
          BOOL v55 = *(void *)(*(void *)v13 + 48LL) + v53;
LABEL_97:
          *(void *)(v54 + 32) = v55;
          return *(void *)(*(void *)v13 + 32LL);
        }
      }

      atomic_store(0LL, v16 + 7);
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }

  if (a4)
  {
    if ((v5 & 1) != 0) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }

  if ((v5 & 1) == 0)
  {
LABEL_67:
    if (!v6) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
    --v6;
  }

    swift_unknownObjectRetain();
    v73 = v68;
    int v74 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v71, v45, v70, v69, v68, v180);
    uint64_t result = swift_unknownObjectRelease_n();
LABEL_119:
    *(void *)__dst = v71;
    *(void *)&__dst[8] = v45;
    *(void *)&__dst[16] = v70;
    unint64_t v83 = __OFADD__(v35, 1LL);
    v98 = v35 + 1;
    if (v83) {
      goto LABEL_156;
    }
    if (v71 != v175) {
      goto LABEL_157;
    }
    v155 = v98;
    if (v70)
    {
      v99 = *(void *)(v70 + 24 * ((v45 >> ((4 * *(_BYTE *)(v70 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      v99 = specialized Rope._Node.subscript.getter(v45, v69);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v83 = __OFADD__(v74, v99);
    int v100 = v74 + v99;
    if (v83) {
      goto LABEL_158;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(__dst, v69, v73, v180, v175);
    swift_unknownObjectRelease_n();
    v145 = *(void *)&__dst[8];
    v148 = *(void *)__dst;
    v149 = *(void *)&__dst[16];
    if (v163 == 2)
    {
      v101 = v162[1];
      v243[12] = *v162;
      v243[13] = v101;
      v243[14] = v162[2];
      v102 = &v221;
      BigString.utf8.getter();
      BigString.startIndex.getter();
      v103 = BigString.UTF8View.index(_:offsetBy:)();
      v146 = v105;
      v147 = v104;
      v163 = v106;
      v107 = v156;
    }

    else
    {
      v108 = v162[1];
      v243[9] = *v162;
      v243[10] = v108;
      v243[11] = v162[2];
      uint64_t result = BigString.utf8.getter();
      if (__OFSUB__(v100, v72 >> 11)) {
        goto LABEL_167;
      }
      v102 = &v220;
      v103 = BigString.UTF8View.index(_:offsetBy:)();
      v146 = v110;
      v147 = v109;
      v163 = v111;
      v107 = v156;
    }

    v169 = v103;
    outlined release of Locale((uint64_t)v102);
    outlined release of AttributedString.Runs((uint64_t)&v248);
    v174 = v107;
    unint64_t v42 = v172;
    __int128 v37 = v173;
    uint64_t v36 = v91;
    __int128 v38 = v183;
    unint64_t v40 = v176;
    int v39 = v177;
    unint64_t v41 = v179;
    unint64_t v44 = v170;
    unint64_t v43 = v171;
LABEL_130:
    specialized IndexingIterator.next()((uint64_t)&v185);
    v196 = v36;
    v197 = v37;
    v198 = v38;
    v199 = v178;
    v200 = v39;
    v201 = v40;
    v202 = v41;
    v203 = v42;
    v204 = v43;
    v205 = v44;
    v206 = v174;
    v207 = v185;
    v168 = v186;
    v208 = v186;
    v209 = v187;
    v210 = v188;
    v211 = v189;
    v212 = v190;
    v213 = v191;
    v214 = v192;
    v215 = v193;
    v216 = v194;
    v217 = v195;
    if (!v36)
    {
      if (v185)
      {
LABEL_139:
        outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v196);
        goto LABEL_142;
      }

      outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v196);
      memcpy(__dst, __src, sizeof(__dst));
      outlined release of AttributedString.Runs((uint64_t)__dst);
      outlined release of AttributedString.Runs((uint64_t)&v248);
      return 1LL;
    }

    if (!v185) {
      goto LABEL_139;
    }
    v112 = v36;
    v113 = v185;
    v114 = v112;
    outlined copy of AttributedString.Runs.Run?(v112);
    outlined copy of AttributedString.Runs.Run?(v113);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Dictionary<>.== infix(_:_:)(v114, v113) & 1) == 0) {
      break;
    }
    v115 = specialized static Set.== infix(_:_:)(v37, v168);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v115 & 1) == 0) {
      goto LABEL_141;
    }
    v153 = v113;
    v182 = v114;
    v116 = v162[1];
    v243[6] = *v162;
    v243[7] = v116;
    v243[8] = v162[2];
    BigString.utf8.getter();
    v117 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v33 = v118;
    v154 = v119;
    v164 = v120;
    outlined release of Locale((uint64_t)&v222);
    v121 = v144[1];
    v243[3] = *v144;
    v243[4] = v121;
    v243[5] = v144[2];
    BigString.utf8.getter();
    v122 = BigString.UTF8View.index(_:offsetBy:)();
    v150 = v123;
    v151 = v124;
    v152 = v125;
    uint64_t result = outlined release of Locale((uint64_t)&v223);
    v126 = *v162;
    v127 = v162[1];
    v243[2] = v162[2];
    v243[1] = v127;
    v243[0] = v126;
    if (v117 >> 10 < v160 >> 10)
    {
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
      goto LABEL_159;
    }

    v235 = v160;
    v236 = v157;
    v237 = v159;
    v238 = v158;
    v239 = v117;
    v240 = v33;
    int v23 = v154;
    v241 = v154;
    v242 = v164;
    v128 = *v162;
    v129 = v162[1];
    v244[2] = v162[2];
    v244[1] = v129;
    v244[0] = v128;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v244, (uint64_t)v245);
    outlined retain of Locale((uint64_t)v245);
    v130 = v122;
    BigString.subscript.getter();
    uint64_t result = outlined release of Locale((uint64_t)v243);
    v131 = *v144;
    v132 = v144[1];
    v234[2] = v144[2];
    v234[1] = v132;
    v234[0] = v131;
    if (v122 >> 10 < v161 >> 10) {
      goto LABEL_150;
    }
    v226 = v161;
    v227 = v167;
    v228 = v166;
    v229 = v165;
    v230 = v122;
    v231 = v150;
    v232 = v151;
    v233 = v152;
    v133 = *v144;
    v134 = v144[1];
    v246[2] = v144[2];
    v246[1] = v134;
    v246[0] = v133;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v246, (uint64_t)v247);
    outlined retain of Locale((uint64_t)v247);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v234);
    v135 = MEMORY[0x186E1AD58](v224, v225);
    outlined consume of AttributedString.Runs.Run?(v182);
    outlined consume of AttributedString.Runs.Run?(v153);
    outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v196);
    outlined release of Locale((uint64_t)v225);
    uint64_t result = outlined release of Locale((uint64_t)v224);
    if ((v135 & 1) == 0) {
      goto LABEL_142;
    }
    v161 = v130;
    v166 = v151;
    v167 = v150;
    v165 = v152;
    __int128 v32 = v117;
    __int128 v25 = v164;
    char v35 = v155;
    uint64_t v34 = v156;
    int v19 = v143;
    uint64_t v20 = v169;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_141:
  outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v196);
  outlined consume of AttributedString.Runs.Run?(v113);
  outlined consume of AttributedString.Runs.Run?(v114);
LABEL_142:
  memcpy(__dst, __src, sizeof(__dst));
  outlined release of AttributedString.Runs((uint64_t)__dst);
  outlined release of AttributedString.Runs((uint64_t)&v248);
  return 0LL;
}

  free(v2);
}

          v193 = (char *)((v126 - 1) & v126);
          v194 = (char *)v127;
          v124 = __clz(__rbit64(v126)) + (v127 << 6);
        }

        v129 = 8 * v124;
        v123 = *(void **)(*(void *)(v59 + 48) + v129);
        v121 = *(void *)(*(void *)(v59 + 56) + v129);
        v199 = v123;
        v200 = v121;
        v130 = v123;
        swift_unknownObjectRetain();
      }

      v136(v117, 1LL, 1LL, MEMORY[0x189617FA8]);
      swift_unknownObjectRelease();

      (*(void (**)(char *, uint64_t))(v169 + 8))(v117, v170);
LABEL_90:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_91:
      swift_release();
      return 0LL;
    }

  __break(1u);
LABEL_81:
  __break(1u);
  return result;
}

              v107 = (4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C;
              uint64_t v36 = ((-15LL << v107) - 1) & v36 | (v106 << v107);
              __int128 v32 = *(void *)(v29 + 24 + 24 * v106);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              char v29 = v32;
              if (!*(_BYTE *)(v32 + 18)) {
                goto LABEL_107;
              }
            }
          }

          uint64_t result = swift_unknownObjectRetain_n();
          __int128 v31 = v364;
          __int128 v32 = v102;
LABEL_107:
          v122 = *(unsigned __int16 *)(v32 + 16);
          if (!*(_WORD *)(v32 + 16)) {
            goto LABEL_395;
          }
          v123 = *(void *)(v32 + 24);
          unint64_t v42 = __OFSUB__(v31, v123);
          v124 = v31 - v123;
          if (v42) {
            goto LABEL_380;
          }
          v103 = v335;
          if (v124 <= 0)
          {
            v127 = 0LL;
          }

          else
          {
            if ((_DWORD)v122 == 1) {
              goto LABEL_397;
            }
            v125 = *(void *)(v32 + 48);
            __int128 v31 = v124 - v125;
            if (__OFSUB__(v124, v125)) {
              goto LABEL_381;
            }
            if (v31 >= 1)
            {
              if ((_DWORD)v122 == 2) {
                goto LABEL_397;
              }
              v126 = (void *)(v32 + 72);
              v127 = 2LL;
              while (v122 != v127)
              {
                v128 = v31 - *v126;
                if (__OFSUB__(v31, *v126)) {
                  goto LABEL_348;
                }
                if (v128 < 1) {
                  goto LABEL_122;
                }
                ++v127;
                v126 += 3;
                __int128 v31 = v128;
                if (v122 == v127) {
                  goto LABEL_397;
                }
              }

              goto LABEL_347;
            }

            __int128 v31 = v124;
            v127 = 1LL;
          }

          outlined destroy of Any?( (uint64_t)v145,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?( (uint64_t)v146,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v147);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v149);
          outlined destroy of Any?( (uint64_t)&v150,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)&v155,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t result = (unint64_t *)outlined destroy of Any?( (uint64_t)&v160,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if ((v71 & 1) == 0) {
            goto LABEL_112;
          }
LABEL_81:
          v70 += 2;
          ++v69;
          int v65 = v135;
          if (v72 == v48)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            unint64_t v91 = v106;
            v122 = v106;
            int v15 = v111;
            unint64_t v41 = v108;
            if (v105[0] < v128) {
              goto LABEL_56;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v122 = v91;
            a2 = v110;
            goto LABEL_113;
          }
        }
      }
    }

    BOOL v55 = *(unsigned __int8 *)(v49 + 18);
    int v56 = (4 * v55 + 8) & 0x3C;
    unint64_t v57 = (v51 >> v56) & 0xF;
    *(void *)&v141 = v57;
    if (v55)
    {
      swift_unknownObjectRetain();
      unint64_t v58 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v49 + 16,  v49 + 24,  (uint64_t *)&v141,  (uint64_t)&v150,  v55);
      uint64_t result = (unint64_t *)swift_unknownObjectRelease();
      if ((v58 & 1) != 0)
      {
        if ((void)v150 != v124)
        {
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }

        unint64_t v41 = v151;
        unint64_t v54 = *((void *)&v150 + 1);
        if ((void)v151) {
          goto LABEL_68;
        }
        goto LABEL_71;
      }
    }

    else if (v57)
    {
      unint64_t v54 = ((v57 - 1) << v56) | ((-15LL << v56) - 1) & v51;
      *((void *)&v150 + 1) = v54;
      *(void *)&v151 = v49;
      unint64_t v41 = v49;
      if (v49) {
        goto LABEL_68;
      }
LABEL_71:
      swift_unknownObjectRetain();
      v132 = v54;
      size_t v60 = specialized Rope._Node.subscript.getter(v54, v49);
      swift_unknownObjectRelease();
      v108 = 0LL;
      pthread_t v61 = 1;
      goto LABEL_72;
    }

          outlined destroy of Any?( (uint64_t)v143,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?( (uint64_t)v144,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v145);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v147);
          outlined destroy of Any?( (uint64_t)&v148,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)&v153,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t result = (unint64_t *)outlined destroy of Any?( (uint64_t)&v158,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if ((v67 & 1) == 0) {
            goto LABEL_112;
          }
LABEL_81:
          v66 += 2;
          ++v65;
          unint64_t v62 = v133;
          if (v68 == v10)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            v122 = v103;
            __int128 v32 = v120;
            __int128 v11 = v108;
            int v39 = v106;
            if (v102 < v120) {
              goto LABEL_56;
            }
            unint64_t v87 = v103;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v122 = v87;
            goto LABEL_113;
          }
        }
      }
    }

    unint64_t v52 = *(unsigned __int8 *)(v46 + 18);
    unint64_t v53 = (4 * v52 + 8) & 0x3C;
    unint64_t v54 = (v48 >> v53) & 0xF;
    *(void *)&v139 = v54;
    if (v52)
    {
      swift_unknownObjectRetain();
      BOOL v55 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v46 + 16,  v46 + 24,  (uint64_t *)&v139,  (uint64_t)&v148,  v52);
      uint64_t result = (unint64_t *)swift_unknownObjectRelease();
      if ((v55 & 1) != 0)
      {
        if ((void)v148 != v130)
        {
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }

        int v39 = v149;
        unint64_t v51 = *((void *)&v148 + 1);
        uint64_t v10 = v127;
        if ((void)v149) {
          goto LABEL_68;
        }
        goto LABEL_71;
      }
    }

    else if (v54)
    {
      unint64_t v51 = ((v54 - 1) << v53) | ((-15LL << v53) - 1) & v48;
      *((void *)&v148 + 1) = v51;
      *(void *)&v149 = v46;
      int v39 = v46;
      if (v46) {
        goto LABEL_68;
      }
LABEL_71:
      swift_unknownObjectRetain();
      v126 = v51;
      unint64_t v57 = specialized Rope._Node.subscript.getter(v51, v46);
      swift_unknownObjectRelease();
      v106 = 0LL;
      unint64_t v58 = 1;
      goto LABEL_72;
    }

      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
  }

  if (v8) {
    int v15 = v9;
  }
  else {
    int v15 = 0LL;
  }
  if (v4 < 0 || v15 < v4) {
    goto LABEL_82;
  }
  BOOL v55 = v10;
  if (!v8 || (v4 < v9 ? (CFIndex v16 = *(unsigned __int16 *)(v8 + 16) == 0) : (CFIndex v16 = 1), v16))
  {
    id v17 = swift_unknownObjectRetain_n();
    uint64_t v14 = specialized Rope._endPath.getter(v17);
    swift_unknownObjectRelease();
    uint64_t v6 = 0LL;
    if (!v8)
    {
      unint64_t v57 = 0LL;
      int v18 = v11;
      __int128 v12 = v11;
      uint64_t v13 = v55;
      goto LABEL_67;
    }

                unint64_t v40 = v6;
                swift_unknownObjectRetain();
                unint64_t v42 = specialized Rope._Node.subscript.getter(v11, v7);
                swift_unknownObjectRelease_n();
LABEL_81:
                swift_unknownObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
                uint64_t v22 = __OFSUB__(v12, v42);
                unint64_t v43 = v12 - v42;
                if (!v22)
                {
                  unint64_t v44 = (__int128 *)(v8 + 16);
                  if (v40 == 2)
                  {
                    unsigned __int8 v45 = *(_OWORD *)(v8 + 32);
                    uint64_t v64 = *v44;
                    int v65 = v45;
                    unint64_t v66 = *(_OWORD *)(v8 + 48);
                    BigString.utf8.getter();
                    BigString.startIndex.getter();
                    int v46 = BigString.UTF8View.index(_:offsetBy:)();
                    unint64_t v48 = v47;
                    BOOL v50 = v49;
                    unint64_t v52 = v51;
                    unint64_t v53 = v60;
LABEL_86:
                    uint64_t result = (uint64_t *)outlined release of Locale((uint64_t)v63);
                    id *v3 = v53;
                    v3[1] = v62;
                    v3[2] = v11;
                    v3[3] = v5;
                    v3[4] = v46;
                    v3[5] = v48;
                    v3[6] = v50;
                    v3[7] = v52;
                    return result;
                  }

                  unint64_t v54 = *(_OWORD *)(v8 + 32);
                  uint64_t v64 = *v44;
                  int v65 = v54;
                  unint64_t v66 = *(_OWORD *)(v8 + 48);
                  BigString.utf8.getter();
                  uint64_t result = (uint64_t *)v59;
                  unint64_t v53 = v60;
                  if (!__OFSUB__(v43, v59 >> 11))
                  {
                    int v46 = BigString.UTF8View.index(_:offsetBy:)();
                    unint64_t v48 = v55;
                    BOOL v50 = v56;
                    unint64_t v52 = v57;
                    goto LABEL_86;
                  }

                  goto LABEL_101;
                }

                goto LABEL_98;
              }

    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }

  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
LABEL_74:
  char v67 = v69;
  *unsigned int v69 = v25;
  v67[1] = v9;
  v67[2] = v10;
  v67[3] = v4;
  v67[4] = v11;
  return result;
}

            __break(1u);
LABEL_81:
            char v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v47[2] + 1LL,  1,  v47);
            goto LABEL_74;
          }

  __break(1u);
LABEL_81:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

    if (v51 == v4) {
      __int128 v11 = 0LL;
    }
    else {
      __int128 v11 = (unint64_t *)v51;
    }
    uint64_t v34 = (unint64_t)&v193;
    CFIndex v16 = *((unsigned __int8 *)&v193 + (void)v11);
    if ((_DWORD)v16 != 47 || *((_BYTE *)&v193 + (void)v11 + 1) != 47) {
      goto LABEL_92;
    }
    unint64_t v52 = (uint64_t)v11 + 2;
    CFIndex v16 = v4;
    unint64_t v53 = *((unsigned __int8 *)&v193 + v52);
    unint64_t v44 = v53 > 0x3F;
    unint64_t v54 = 1LL << v53;
    uint64_t v34 = 0x8000800800000000LL;
    BOOL v55 = v54 & 0x8000800800000000LL;
    int v56 = v44 || v55 == 0;
    CFIndex v16 = (uint64_t)v11 + 2;
    if (!v56) {
      goto LABEL_91;
    }
    v98 = (char *)v11 + 3;
    unint64_t v9 = 1LL;
    while ((char *)v4 != v98)
    {
      v99 = *((unsigned __int8 *)&v193 + (void)v98++);
      unint64_t v44 = v99 > 0x3F;
      int v100 = (1LL << v99) & 0x8000800800000000LL;
      if (!v44 && v100 != 0)
      {
        v102 = (uint64_t)(v98 - 1);
        goto LABEL_143;
      }
    }

    v102 = v4;
LABEL_143:
    if (v102 >= v52) {
      break;
    }
    __break(1u);
  }

  CFIndex v16 = (uint64_t)v11 + 2;
  if (v52 == v102)
  {
LABEL_91:
    v177 = (char *)v11 + 2;
    v178 = v16;
    __int128 v11 = (unint64_t *)v16;
    v179 = 0;
    goto LABEL_92;
  }

  a2 = v102;
  if ((specialized static RFC3986Parser.parseAuthority(_:into:)(v52, v102, (uint64_t)&v193, v4, (uint64_t)&v169) & 1) != 0)
  {
    if ((v182 & 1) != 0 || (unint64_t v9 = v180, v180 == v181))
    {
LABEL_167:
      __int128 v11 = (unint64_t *)a2;
      goto LABEL_92;
    }

    CFIndex v16 = v170;
    uint64_t v34 = v171;
    if (*((unsigned __int8 *)&v193 + v180) - 58 >= 0xFFFFFFF6)
    {
      if (v180 + 1 == v181) {
        goto LABEL_167;
      }
      unint64_t v9 = ~v180 + v181;
      v107 = (unsigned __int8 *)&v193 + v180 + 1;
      while (1)
      {
        v108 = *v107++;
        if (!--v9) {
          goto LABEL_167;
        }
      }
    }

    v105 = v170 - v169 == 11 ? v171 : 1;
    if ((v105 & 1) == 0
      && (((0x3FFE000000000uLL >> ((v193 - 1) >> 1)) & 0x20) + v193) == 97)
    {
      __int128 v11 = (unint64_t *)a2;
      if ((((0x3FFE000000000uLL >> ((BYTE1(v193) - 1) >> 1)) & 0x20) + BYTE1(v193)) == 100
        && (((0x3FFE000000000uLL >> ((BYTE2(v193) - 1) >> 1)) & 0x20) + BYTE2(v193)) == 100
        && (((0x3FFE000000000uLL >> ((BYTE3(v193) - 1) >> 1)) & 0x20) + BYTE3(v193)) == 114
        && (((0x3FFE000000000uLL >> ((BYTE4(v193) - 1) >> 1)) & 0x20) + BYTE4(v193)) == 101
        && (((0x3FFE000000000uLL >> ((BYTE5(v193) - 1) >> 1)) & 0x20) + BYTE5(v193)) == 115
        && (((0x3FFE000000000uLL >> ((BYTE6(v193) - 1) >> 1)) & 0x20) + BYTE6(v193)) == 115
        && (((0x3FFE000000000uLL >> ((HIBYTE(v193) - 1) >> 1)) & 0x20) + HIBYTE(v193)) == 98
        && (((0x3FFE000000000uLL >> ((v194 - 1) >> 1)) & 0x20) + v194) == 111
        && (((0x3FFE000000000uLL >> ((BYTE1(v194) - 1) >> 1)) & 0x20) + BYTE1(v194)) == 111)
      {
        CFIndex v16 = 0x3FFE000000000LL;
        uint64_t v34 = (0x3FFE000000000uLL >> ((BYTE2(v194) - 1) >> 1)) & 0x20;
        if ((v34 + BYTE2(v194)) == 107)
        {
LABEL_92:
          if (v11 != (unint64_t *)v4)
          {
            LODWORD(v5_Block_object_dispose((const void *)(v17 - 128), 8) = *((unsigned __int8 *)&v193 + (void)v11);
            if ((_DWORD)v58 != 35 && (_DWORD)v58 != 63) {
              goto LABEL_107;
            }
            v183 = v11;
            v184 = v11;
            v185 = 0;
            v192 = 0;
            goto LABEL_100;
          }

          int v19 = (int64_t)v11;
          unint64_t v57 = 0;
          v183 = (void *)v4;
          v184 = (void *)v4;
LABEL_94:
          v128 = v57;
          uint64_t v21 = 0;
          uint64_t v22 = v169;
          int v23 = v170;
          uint64_t v30 = v171;
          v136 = *(_OWORD *)(v2 + 24);
          char v29 = v174;
          uint64_t v28 = v176;
          v130 = *(_OWORD *)(v2 + 72);
          v132 = v175;
          __int128 v27 = v179;
          uint64_t v20 = v180;
          uint64_t v24 = v181;
          int v18 = v182;
          v129 = v186;
          __int128 v26 = v187;
          v134 = v189;
          v135 = v188;
          uint64_t v14 = v190;
          v138 = HIBYTE(v191);
          v139 = v191;
          LOBYTE(v140) = v171;
          v168 = v174;
          v167 = v176;
          v166 = v179;
          v165 = v182;
          v164 = 0;
          v163 = v187;
          v162 = v190;
          goto LABEL_129;
        }
      }
    }
  }

        __break(1u);
        goto LABEL_81;
      }

      int v18 = *(void *)(v104 + 8 * v19);
      if (!v18)
      {
        while (1)
        {
          __int128 v12 = v19 + 1;
          if (__OFADD__(v19, 1LL)) {
            goto LABEL_79;
          }
          int v18 = *(void *)(v104 + 8 * v12);
          ++v19;
          if (v18) {
            goto LABEL_23;
          }
        }
      }

      __int128 v12 = v19;
LABEL_23:
      __int128 v11 = (v18 - 1) & v18;
      CFIndex v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_24:
      uint64_t v20 = 16 * v16;
      uint64_t v21 = (uint64_t *)(*(void *)(v8 + 48) + v20);
      uint64_t v22 = *v21;
      Swift::String v4 = v21[1];
      int v23 = *(void *)(v8 + 56) + v20;
      uint64_t v24 = *(void *)v23;
      __int128 v25 = *(unsigned __int8 *)(v23 + 8);
      __int128 v26 = *v21 == a2 && v4 == (void)a3;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (!v25) {
          goto LABEL_120;
        }
        if (v24 != a1)
        {
          _StringGuts.grow(_:)(83LL);
          v93._countAndFlagsBits = 0xD000000000000021LL;
          v93._object = (void *)0x80000001839CF420LL;
          String.append(_:)(v93);
          swift_getKeyPath();
          dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          swift_getAtKeyPath();
          swift_release();
          v94._countAndFlagsBits = String.init(cString:)();
          String.append(_:)(v94);
          swift_bridgeObjectRelease();
          v95._object = (void *)0x80000001839CF400LL;
          v95._countAndFlagsBits = 0xD000000000000014LL;
          String.append(_:)(v95);
          swift_getKeyPath();
          dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          swift_getAtKeyPath();
          swift_release();
          v96._countAndFlagsBits = String.init(cString:)();
          String.append(_:)(v96);
          swift_bridgeObjectRelease();
          v97._countAndFlagsBits = 0xD000000000000017LL;
          v97._object = (void *)0x80000001839CF3C0LL;
          String.append(_:)(v97);
          v98._countAndFlagsBits = a2;
          v98._object = a3;
          String.append(_:)(v98);
          v99._countAndFlagsBits = 39LL;
          v99._object = (void *)0xE100000000000000LL;
          String.append(_:)(v99);
          goto LABEL_122;
        }

        return swift_release();
      }

      if (v24 == a1) {
        __int128 v27 = v25;
      }
      else {
        __int128 v27 = 0;
      }
    }

    while (v27 != 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v4);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0) {
      break;
    }
LABEL_7:
    swift_bridgeObjectRelease();
  }

  __int128 v31 = swift_isUniquelyReferenced_nonNull_native();
  __int128 v32 = *(void *)(v5 + 8);
  *(void *)(v5 + _Block_object_dispose((const void *)(v17 - 128), 8) = 0x8000000000000000LL;
  if ((v31 & 1) != 0)
  {
    uint64_t v13 = v32;
LABEL_6:
    swift_bridgeObjectRelease();
    specialized _NativeDictionary._delete(at:)(v28, v13);
    uint64_t v14 = *(void *)(v5 + 8);
    *(void *)(v5 + _Block_object_dispose((const void *)(v17 - 128), 8) = v13;
    swift_bridgeObjectRelease();
    Swift::String v4 = v14;
    goto LABEL_7;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  uint64_t v33 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v33;
  if (!*(void *)(v32 + 16))
  {
LABEL_66:
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }

  uint64_t v34 = (char *)(v33 + 64);
  char v35 = (char *)(v32 + 64);
  uint64_t v36 = (unint64_t)((1LL << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  int v100 = v32 + 64;
  if (v13 != v32 || v34 >= &v35[8 * v36]) {
    memmove(v34, v35, 8 * v36);
  }
  __int128 v37 = 0LL;
  *(void *)(v13 + 16) = *(void *)(v32 + 16);
  __int128 v38 = 1LL << *(_BYTE *)(v32 + 32);
  if (v38 < 64) {
    int v39 = ~(-1LL << v38);
  }
  else {
    int v39 = -1LL;
  }
  unint64_t v40 = v39 & *(void *)(v32 + 64);
  v101 = (unint64_t)(v38 + 63) >> 6;
  while (2)
  {
    if (v40)
    {
      v102 = (v40 - 1) & v40;
      v103 = v37;
      unint64_t v41 = __clz(__rbit64(v40)) | (v37 << 6);
LABEL_44:
      unint64_t v42 = 16 * v41;
      unint64_t v43 = (uint64_t *)(*(void *)(v32 + 48) + v42);
      unsigned __int8 v45 = *v43;
      unint64_t v44 = v43[1];
      int v46 = *(void *)(v32 + 56) + v42;
      unint64_t v47 = *(void *)v46;
      LOBYTE(v46) = *(_BYTE *)(v46 + 8);
      unint64_t v48 = (void *)(*(void *)(v13 + 48) + v42);
      unsigned __int8 *v48 = v45;
      v48[1] = v44;
      int64_t v49 = *(void *)(v13 + 56) + v42;
      *(void *)int64_t v49 = v47;
      *(_BYTE *)(v49 + _Block_object_dispose((const void *)(v17 - 128), 8) = v46;
      swift_bridgeObjectRetain();
      unint64_t v40 = v102;
      __int128 v37 = v103;
      continue;
    }

    break;
  }

  BOOL v50 = v37 + 1;
  if (__OFADD__(v37, 1LL))
  {
    __break(1u);
    goto LABEL_117;
  }

  if (v50 >= v101) {
    goto LABEL_66;
  }
  unint64_t v51 = *(void *)(v100 + 8 * v50);
  unint64_t v52 = v37 + 1;
  if (v51) {
    goto LABEL_65;
  }
  unint64_t v52 = v37 + 2;
  if (v37 + 2 >= v101) {
    goto LABEL_66;
  }
  unint64_t v51 = *(void *)(v100 + 8 * v52);
  if (v51) {
    goto LABEL_65;
  }
  unint64_t v52 = v37 + 3;
  if (v37 + 3 >= v101) {
    goto LABEL_66;
  }
  unint64_t v51 = *(void *)(v100 + 8 * v52);
  if (v51) {
    goto LABEL_65;
  }
  unint64_t v52 = v37 + 4;
  if (v37 + 4 >= v101) {
    goto LABEL_66;
  }
  unint64_t v51 = *(void *)(v100 + 8 * v52);
  if (v51) {
    goto LABEL_65;
  }
  unint64_t v52 = v37 + 5;
  if (v37 + 5 >= v101) {
    goto LABEL_66;
  }
  unint64_t v51 = *(void *)(v100 + 8 * v52);
  if (v51) {
    goto LABEL_65;
  }
  unint64_t v52 = v37 + 6;
  if (v37 + 6 >= v101) {
    goto LABEL_66;
  }
  unint64_t v51 = *(void *)(v100 + 8 * v52);
  if (v51)
  {
LABEL_65:
    v102 = (v51 - 1) & v51;
    v103 = v52;
    unint64_t v41 = __clz(__rbit64(v51)) + (v52 << 6);
    goto LABEL_44;
  }

  unint64_t v53 = v37 + 7;
  if (v37 + 7 >= v101) {
    goto LABEL_66;
  }
  unint64_t v51 = *(void *)(v100 + 8 * v53);
  if (v51)
  {
    unint64_t v52 = v37 + 7;
    goto LABEL_65;
  }

  while (1)
  {
    unint64_t v52 = v53 + 1;
    if (__OFADD__(v53, 1LL)) {
      break;
    }
    if (v52 >= v101) {
      goto LABEL_66;
    }
    unint64_t v51 = *(void *)(v100 + 8 * v52);
    ++v53;
    if (v51) {
      goto LABEL_65;
    }
  }

                      int64_t v49 = v115;
                      if (!v115)
                      {
                        Swift::String v3 = MEMORY[0x18961AFF0];
                        goto LABEL_150;
                      }

                      if (v115 == *(void *)(v3 + 16))
                      {
                        swift_retain();
                        goto LABEL_150;
                      }

                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
                      unint64_t v81 = static _DictionaryStorage.allocate(capacity:)();
                      unint64_t v82 = 0LL;
                      unint64_t v83 = *v114;
                      v84 = v81 + 64;
                      while (1)
                      {
                        v115 = v49;
                        if (v83)
                        {
                          unint64_t v89 = __clz(__rbit64(v83));
                          v83 &= v83 - 1;
                          unint64_t v90 = v82;
                          unint64_t v91 = v89 | (v82 << 6);
                        }

                        else
                        {
                          unint64_t v92 = v82 + 1;
                          if (__OFADD__(v82, 1LL)) {
                            goto LABEL_157;
                          }
                          if (v92 >= v113) {
                            goto LABEL_149;
                          }
                          unint64_t v93 = v114[v92];
                          unint64_t v94 = v82 + 1;
                          if (!v93)
                          {
                            unint64_t v94 = v82 + 2;
                            if (v82 + 2 >= v113) {
                              goto LABEL_149;
                            }
                            unint64_t v93 = v114[v94];
                            if (!v93)
                            {
                              unint64_t v94 = v82 + 3;
                              if (v82 + 3 >= v113) {
                                goto LABEL_149;
                              }
                              unint64_t v93 = v114[v94];
                              if (!v93)
                              {
                                unint64_t v94 = v82 + 4;
                                if (v82 + 4 >= v113) {
                                  goto LABEL_149;
                                }
                                unint64_t v93 = v114[v94];
                                if (!v93)
                                {
                                  unint64_t v94 = v82 + 5;
                                  if (v82 + 5 >= v113) {
                                    goto LABEL_149;
                                  }
                                  unint64_t v93 = v114[v94];
                                  if (!v93)
                                  {
                                    uint64_t v95 = v82 + 6;
                                    if (v82 + 6 >= v113) {
                                      goto LABEL_149;
                                    }
                                    unint64_t v93 = v114[v95];
                                    if (!v93)
                                    {
                                      while (1)
                                      {
                                        unint64_t v94 = v95 + 1;
                                        if (__OFADD__(v95, 1LL)) {
                                          goto LABEL_161;
                                        }
                                        if (v94 >= v113) {
                                          break;
                                        }
                                        unint64_t v93 = v114[v94];
                                        ++v95;
                                        if (v93) {
                                          goto LABEL_139;
                                        }
                                      }

              v109 = (4 * *(_BYTE *)(v107 + 18) + 8) & 0x3C;
              char v35 = ((-15LL << v109) - 1) & v35 | (v108 << v109);
              __int128 v31 = *(void *)(v107 + 24 + 24 * v108);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              v107 = v31;
              if (!*(_BYTE *)(v31 + 18)) {
                goto LABEL_107;
              }
            }
          }

          uint64_t result = swift_unknownObjectRetain_n();
          uint64_t v30 = v370;
          __int128 v31 = v103;
LABEL_107:
          v124 = *(unsigned __int16 *)(v31 + 16);
          if (!*(_WORD *)(v31 + 16)) {
            goto LABEL_395;
          }
          v125 = *(void *)(v31 + 24);
          unint64_t v42 = __OFSUB__(v30, v125);
          v126 = v30 - v125;
          if (v42) {
            goto LABEL_380;
          }
          uint64_t v104 = v342;
          if (v126 <= 0)
          {
            v129 = 0LL;
          }

          else
          {
            if ((_DWORD)v124 == 1) {
              goto LABEL_397;
            }
            v127 = *(void *)(v31 + 48);
            uint64_t v30 = v126 - v127;
            if (__OFSUB__(v126, v127)) {
              goto LABEL_381;
            }
            if (v30 >= 1)
            {
              if ((_DWORD)v124 == 2) {
                goto LABEL_397;
              }
              v128 = (void *)(v31 + 72);
              v129 = 2LL;
              while (v124 != v129)
              {
                v130 = v30 - *v128;
                if (__OFSUB__(v30, *v128)) {
                  goto LABEL_348;
                }
                if (v130 < 1) {
                  goto LABEL_122;
                }
                ++v129;
                v128 += 3;
                uint64_t v30 = v130;
                if (v124 == v129) {
                  goto LABEL_397;
                }
              }

              goto LABEL_347;
            }

            uint64_t v30 = v126;
            v129 = 1LL;
          }

        unint64_t v58 = v46;
LABEL_81:
        if (v58) {
          goto LABEL_114;
        }
        int v46 = 0LL;
        goto LABEL_93;
      }

      int v56 = 1LL;
      int v46 = v58;
    }

                        __break(1u);
                        goto LABEL_81;
                      }

                      int64_t v49 = v65;
                    }
                  }
                }
              }
            }

                        __break(1u);
                        goto LABEL_81;
                      }

                      unsigned __int8 v45 = v57;
                    }
                  }
                }
              }
            }

                        __break(1u);
                        goto LABEL_81;
                      }

                      unint64_t v54 = v72;
                    }
                  }
                }
              }
            }

        __int128 v37 = (v47 - 1) & v47;
        int v46 = __clz(__rbit64(v47)) + (v36 << 6);
      }

      int64_t v49 = *(void *)(v3 + 56);
      BOOL v50 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v46);
      unint64_t v52 = *v50;
      unint64_t v51 = v50[1];
      outlined init with copy of AttributedString._AttributeValue(v49 + 72 * v46, (uint64_t)&v98);
      uint64_t v95 = v100;
      uint64_t v96 = v101;
      uint64_t v97 = v102;
      unint64_t v93 = v98;
      unint64_t v94 = v99;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      unint64_t v53 = Hasher._finalize()();
      unint64_t v54 = -1LL << *(_BYTE *)(v35 + 32);
      BOOL v55 = v53 & ~v54;
      int v56 = v55 >> 6;
      if (((-1LL << v55) & ~*(void *)(v38 + 8 * (v55 >> 6))) != 0)
      {
        int v39 = __clz(__rbit64((-1LL << v55) & ~*(void *)(v38 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0LL;
        goto LABEL_65;
      }

      unint64_t v57 = 0;
      unint64_t v58 = (unint64_t)(63 - v54) >> 6;
      do
      {
        if (++v56 == v58 && (v57 & 1) != 0)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }

        int v59 = v56 == v58;
        if (v56 == v58) {
          int v56 = 0LL;
        }
        v57 |= v59;
        size_t v60 = *(void *)(v38 + 8 * v56);
      }

      while (v60 == -1);
      int v39 = __clz(__rbit64(~v60)) + (v56 << 6);
LABEL_65:
      *(void *)(v38 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v39;
      unint64_t v40 = (void *)(*(void *)(v35 + 48) + 16 * v39);
      *unint64_t v40 = v52;
      v40[1] = v51;
      unint64_t v41 = *(void *)(v35 + 56) + 72 * v39;
      unint64_t v42 = v96;
      *(_OWORD *)(v41 + 32) = v95;
      *(_OWORD *)(v41 + 4_Block_object_dispose((const void *)(v17 - 128), 8) = v42;
      *(void *)(v41 + 64) = v97;
      unint64_t v43 = v94;
      *(_OWORD *)unint64_t v41 = v93;
      *(_OWORD *)(v41 + 16) = v43;
      ++*(void *)(v35 + 16);
      unint64_t v44 = v90-- == 1;
      Swift::String v3 = v92;
      if (v44) {
        return v35;
      }
    }
  }

  swift_retain();
  return v3;
}

                        swift_bridgeObjectRelease();
LABEL_10:
                        swift_bridgeObjectRelease();
                        __int128 v25 = *(void *)(v24 + 56) + 72 * v19;
                        unint64_t v93 = *(_OWORD *)v25;
                        __int128 v27 = *(_OWORD *)(v25 + 32);
                        __int128 v26 = *(_OWORD *)(v25 + 48);
                        uint64_t v28 = *(void *)(v25 + 64);
                        unint64_t v94 = *(_OWORD *)(v25 + 16);
                        uint64_t v95 = v27;
                        uint64_t v97 = v28;
                        uint64_t v96 = v26;
                        specialized _NativeDictionary._delete(at:)(v19, v24);
                        *Swift::String v5 = v24;
                        swift_bridgeObjectRelease();
LABEL_49:
                        AttributedString._AttributeStorage._attributeModified(_:old:new:)(a2, a3, (uint64_t)&v93, a1);
                        outlined destroy of Any?( a1,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                        return outlined destroy of Any?( (uint64_t)&v93,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      }

                      double v75 = v83 + 7;
                    }
                  }
                }
              }
            }
          }

          outlined destroy of Any?( (uint64_t)v145,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?( (uint64_t)v146,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v147);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v149);
          outlined destroy of Any?( (uint64_t)&v150,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)&v155,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t result = (unint64_t *)outlined destroy of Any?( (uint64_t)&v160,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if ((v69 & 1) == 0) {
            goto LABEL_112;
          }
LABEL_81:
          v68 += 2;
          ++v67;
          uint64_t v64 = v135;
          if (v70 == v13)
          {
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v165);
            swift_bridgeObjectRelease();
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            v124 = v105;
            uint64_t v34 = v122;
            uint64_t v14 = v110;
            unint64_t v41 = v108;
            if (v104 < v122) {
              goto LABEL_56;
            }
            unint64_t v89 = v105;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v124 = v89;
            goto LABEL_113;
          }
        }
      }
    }

    unint64_t v54 = *(unsigned __int8 *)(v48 + 18);
    BOOL v55 = (4 * v54 + 8) & 0x3C;
    int v56 = (v50 >> v55) & 0xF;
    *(void *)&v141 = v56;
    if (v54)
    {
      swift_unknownObjectRetain();
      unint64_t v57 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v48 + 16,  v48 + 24,  (uint64_t *)&v141,  (uint64_t)&v150,  v54);
      uint64_t result = (unint64_t *)swift_unknownObjectRelease();
      if ((v57 & 1) != 0)
      {
        if ((void)v150 != v132)
        {
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }

        unint64_t v41 = v151;
        unint64_t v53 = *((void *)&v150 + 1);
        uint64_t v13 = v129;
        if ((void)v151) {
          goto LABEL_68;
        }
        goto LABEL_71;
      }
    }

    else if (v56)
    {
      unint64_t v53 = ((v56 - 1) << v55) | ((-15LL << v55) - 1) & v50;
      *((void *)&v150 + 1) = v53;
      *(void *)&v151 = v48;
      unint64_t v41 = v48;
      if (v48) {
        goto LABEL_68;
      }
LABEL_71:
      swift_unknownObjectRetain();
      v128 = v53;
      int v59 = specialized Rope._Node.subscript.getter(v53, v48);
      swift_unknownObjectRelease();
      v108 = 0LL;
      size_t v60 = 1;
      goto LABEL_72;
    }

  if (v28)
  {
    unint64_t v58 = objc_alloc(MEMORY[0x189603F68]);
    int v59 = (void *)[v58 initWithObjects:v78 forKeys:v79 count:v28];
  }

  else
  {
    int v59 = 0LL;
  }

  if ((*(_BYTE *)(a1 + 43) & 0x20) != 0)
  {
    if (qword_18C496CE8 != -1) {
      dispatch_once(&qword_18C496CE8, &__block_literal_global_168);
    }
    if (_MergedGlobals_130)
    {
      if (v59)
      {
        size_t v60 = v59;
        pthread_t v61 = (id)[v59 mutableCopy];
      }

      else
      {
        pthread_t v61 = objc_alloc_init(MEMORY[0x189603FC8]);
      }

      int v59 = v61;
    }

    if ((v20 & 4) != 0)
    {
      if (Value) {
        unint64_t v62 = Value;
      }
      else {
        unint64_t v62 = &stru_189CA6A28;
      }
      if (v70) {
        unint64_t v63 = v70;
      }
      else {
        unint64_t v63 = &stru_189CA6A28;
      }
      if (v72) {
        uint64_t v64 = v72;
      }
      else {
        uint64_t v64 = &stru_189CA6A28;
      }
      int v65 = (uint64_t)v59;
      if (!v59) {
        int v65 = [MEMORY[0x189603F68] dictionary];
      }
      objc_msgSend(v71, "parser:didStartElement:namespaceURI:qualifiedName:attributes:", a1, v62, v63, v64, v65, v70);
    }

    else
    {
      unint64_t v66 = (uint64_t)v59;
      if (!v59) {
        unint64_t v66 = [MEMORY[0x189603F68] dictionary];
      }
      objc_msgSend(v71, "parser:didStartElement:namespaceURI:qualifiedName:attributes:", a1, v72, 0, 0, v66, v70);
    }
  }

  free(v75);
}

  if (a4) {
    *a4 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840LL,  0LL);
  }

  return 0LL;
}

LABEL_69:
  uint64_t v28 = a1 + 16;
  __int128 v37 = a1 + 16;
  if ((*(_BYTE *)(a1 + 8) & 1) == 0) {
    __int128 v37 = *(void *)v28 + 16LL * *(void *)(*(void *)v28 + 24LL) + 64;
  }
  __int128 v38 = [(id)a1 _indexOfRangeBeforeOrContainingIndex:v6];
  id v17 = 0x7FFFFFFFFFFFFFFFLL;
  if (v38 != 0x7FFFFFFFFFFFFFFFLL)
  {
    __int128 v31 = v38;
    int v39 = (unint64_t *)(v37 + 16 * v38);
    __int128 v32 = *v39;
    unint64_t v40 = *v39 + v39[1] - 1;
    if (v6 >= v40) {
      id v17 = v40;
    }
    else {
      id v17 = v6;
    }
    unint64_t v41 = pthread_self();
    unint64_t v42 = atomic_load((unint64_t *)(*(void *)v28 + 56LL));
    if (v41 != (pthread_t)v42)
    {
      unint64_t v43 = (unint64_t *)(*(void *)v28 + 56LL);
      while (!__ldaxr(v43))
      {
      }

      goto LABEL_80;
    }

    __break(1u);
    goto LABEL_70;
  }

  uint64_t result = swift_unknownObjectRetain_n();
  __int128 v12 = v3;
  uint64_t v10 = v2;
  do
  {
    uint64_t v21 = *(unsigned __int16 *)(v10 + 16);
    if (*(_WORD *)(v10 + 16))
    {
      uint64_t v22 = *(void *)(v10 + 40);
      uint64_t v13 = __OFSUB__(v12, v22);
      int v23 = v12 - v22;
      if (v13) {
        goto LABEL_59;
      }
      if (__OFADD__(v23, 1LL)) {
        goto LABEL_60;
      }
      if (v23 + 1 < 1)
      {
        uint64_t v21 = 0LL;
        goto LABEL_25;
      }

      if ((_DWORD)v21 != 1)
      {
        uint64_t v24 = (uint64_t *)(v10 + 64);
        __int128 v25 = 1LL;
        while (1)
        {
          __int128 v26 = *v24;
          v24 += 3;
          __int128 v12 = v23 - v26;
          if (__OFSUB__(v23, v26)) {
            break;
          }
          if (__OFADD__(v12, 1LL)) {
            goto LABEL_57;
          }
          if (v12 + 1 < 1)
          {
            uint64_t v21 = v25;
            __int128 v12 = v23;
            goto LABEL_25;
          }

          ++v25;
          int v23 = v12;
          if (v21 == v25) {
            goto LABEL_24;
          }
        }

        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }

      __int128 v12 = v23;
    }

    if (v13) {
      goto LABEL_92;
    }
LABEL_70:
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    __int128 v25 = v12 & 0xFFFFFFFFFFFFF0FFLL | (v38 << 8);
    __int128 v27 = v13;
    __int128 v26 = v46;
    if (v7)
    {
LABEL_27:
      swift_unknownObjectRetain();
      specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v11, v25, v16, v7, v26);
      uint64_t result = swift_unknownObjectRelease_n();
      __int128 v27 = v13;
    }

                  uint64_t v71 = (v77 - 1) & v77;
                  int v74 = __clz(__rbit64(v77)) + (v43 << 6);
                }

                outlined init with copy of AttributedString._AttributeValue( *(void *)(v64 + 56) + 72 * v74,  (uint64_t)&v199);
                v195 = v201;
                v196 = v202;
                *(void *)&v197 = v203;
                v193 = v199;
                v194 = v200;
                double v75 = v202;
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v193);
              }

              while (v75 < 2);
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease_n();
              v175 = v63;
              unint64_t v79 = v188;
              v184 = v63 >> 10;
              if (v63 >> 10 <= v188 >> 10)
              {
LABEL_172:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                specialized IndexingIterator.next()();
                uint64_t v64 = v144;
                unint64_t v63 = v175;
                if (!v144) {
                  goto LABEL_175;
                }
                continue;
              }

              break;
            }

            uint64_t v33 = (uint64_t)&v194;
LABEL_73:
            v80 = v185[1];
            v215 = *v185;
            v216 = v80;
            v217 = v185[2];
            BigString.unicodeScalars.getter();
            LODWORD(v192) = BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)v210);
            unint64_t v81 = v185[1];
            v212 = *v185;
            v213 = v81;
            v214 = v185[2];
            BigString.unicodeScalars.getter();
            unint64_t v43 = BigString.UnicodeScalarView.index(after:)();
            outlined release of Locale((uint64_t)v211);
            unint64_t v82 = 1LL << *(_BYTE *)(v64 + 32);
            __int128 v38 = (unint64_t)(v82 + 63) >> 6;
            if (v82 < 64) {
              unint64_t v83 = ~(-1LL << v82);
            }
            else {
              unint64_t v83 = -1LL;
            }
            v84 = v83 & *(void *)(v64 + 64);
            v189 = v43;
            v186 = (unint64_t)v43 >> 11;
            v187 = v79 >> 11;
            swift_bridgeObjectRetain();
            v85 = 0LL;
            if (!v84)
            {
LABEL_82:
              unint64_t v91 = v85 + 1;
              if (!__OFADD__(v85, 1LL))
              {
                if (v91 >= v38)
                {
                  unint64_t v93 = v85;
                }

                else
                {
                  unint64_t v92 = *(void *)(v190 + 8 * v91);
                  if (v92)
                  {
LABEL_85:
                    v84 = (v92 - 1) & v92;
                    unint64_t v87 = __clz(__rbit64(v92)) + (v91 << 6);
                    v85 = v91;
                    goto LABEL_81;
                  }

                  unint64_t v93 = v85 + 1;
                  if (v85 + 2 < v38)
                  {
                    unint64_t v92 = *(void *)(v190 + 8 * (v85 + 2));
                    if (v92)
                    {
                      unint64_t v91 = v85 + 2;
                      goto LABEL_85;
                    }

                    unint64_t v93 = v85 + 2;
                    if (v85 + 3 < v38)
                    {
                      unint64_t v92 = *(void *)(v190 + 8 * (v85 + 3));
                      if (v92)
                      {
                        unint64_t v91 = v85 + 3;
                        goto LABEL_85;
                      }

                      unint64_t v91 = v85 + 4;
                      unint64_t v93 = v85 + 3;
                      if (v85 + 4 < v38)
                      {
                        unint64_t v92 = *(void *)(v190 + 8 * v91);
                        if (v92) {
                          goto LABEL_85;
                        }
                        while (v38 - 5 != v85)
                        {
                          unint64_t v92 = *(void *)(v64 + 104 + 8 * v85++);
                          if (v92)
                          {
                            unint64_t v91 = v85 + 4;
                            goto LABEL_85;
                          }
                        }

                        unint64_t v93 = v38 - 1;
                      }
                    }
                  }
                }

                v84 = 0LL;
                v198 = 0LL;
                v196 = 0u;
                v197 = 0u;
                v194 = 0u;
                v195 = 0u;
                v85 = v93;
                v193 = 0u;
                goto LABEL_88;
              }

              __break(1u);
LABEL_206:
              swift_unknownObjectRetain_n();
              swift_retain_n();
              unint64_t v44 = v38;
              unint64_t v48 = (int64_t)v40;
LABEL_207:
              v167 = *(unsigned __int16 *)(v48 + 16);
              if (!*(_WORD *)(v48 + 16))
              {
LABEL_227:
                if (!v44) {
                  goto LABEL_228;
                }
                goto LABEL_257;
              }

              v168 = *(void *)(v48 + 24);
              uint64_t v72 = v44 - v168;
              if (__OFSUB__(v44, v168))
              {
LABEL_258:
                __break(1u);
              }

              else if (!__OFADD__(v72, 1LL))
              {
                if (v72 + 1 <= 0)
                {
                  v167 = 0LL;
                  goto LABEL_228;
                }

                if ((_DWORD)v167 == 1)
                {
                  v44 -= v168;
                  goto LABEL_227;
                }

                v169 = *(void *)(v48 + 48);
                unint64_t v53 = __OFSUB__(v72, v169);
                pthread_t v61 = v72 - v169;
                if (!v53)
                {
                  if (!__OFADD__(v61, 1LL))
                  {
                    if (v61 + 1 >= 1)
                    {
                      if ((_DWORD)v167 == 2)
                      {
                        unint64_t v44 = v61;
                        goto LABEL_227;
                      }

                      v170 = (void *)(v48 + 72);
                      size_t v60 = 2LL;
                      while (1)
                      {
                        if (v167 == v60) {
                          goto LABEL_254;
                        }
                        unint64_t v44 = v61 - *v170;
                        if (__OFSUB__(v61, *v170)) {
                          break;
                        }
                        if (__OFADD__(v44, 1LL)) {
                          goto LABEL_256;
                        }
                        if (v44 + 1 < 1) {
                          goto LABEL_232;
                        }
                        ++v60;
                        v170 += 3;
                        pthread_t v61 = v44;
                        if (v167 == v60) {
                          goto LABEL_227;
                        }
                      }

  __int128 v31 = __dst[32] * a1;
  if ((unsigned __int128)(__dst[32] * (__int128)a1) >> 64 != (__dst[32] * a1) >> 63)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }

  if (v31 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t result = 0LL;
  }
  else {
    uint64_t result = __dst[32] * a1;
  }
  int v39 = v31 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[35] & 1) != 0) {
    goto LABEL_78;
  }
LABEL_74:
  __int128 v32 = __dst[34] * a1;
  if ((unsigned __int128)(__dst[34] * (__int128)a1) >> 64 == (__dst[34] * a1) >> 63)
  {
    uint64_t v14 = v32 == 0x7FFFFFFFFFFFFFFFLL;
    if (v32 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v13 = 0LL;
    }
    else {
      uint64_t v13 = __dst[34] * a1;
    }
    goto LABEL_78;
  }

  v116 = v26;
  *(void *)&v115 = *(void *)&v118[12];
  v117[0] = xmmword_183729450;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __int128 v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
  }
  v73 = v12[2];
  uint64_t v72 = v12[3];
  if (v73 >= v72 >> 1) {
    __int128 v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v72 > 1),  v73 + 1,  1,  v12);
  }
  v12[2] = v73 + 1;
  int v74 = &v12[6 * v73];
  double v75 = v117[0];
  v76 = v117[2];
  v74[3] = v117[1];
  v74[4] = v76;
  v74[2] = v75;
  if ((BYTE8(v118[13]) & 1) == 0)
  {
LABEL_74:
    v116 = v26;
    *(void *)&v115 = *(void *)&v118[13];
    v117[0] = xmmword_183729460;
    outlined init with take of Any(&v115, &v117[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      __int128 v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
    }
    unint64_t v78 = v12[2];
    unint64_t v77 = v12[3];
    if (v78 >= v77 >> 1) {
      __int128 v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v77 > 1),  v78 + 1,  1,  v12);
    }
    v12[2] = v78 + 1;
    unint64_t v79 = &v12[6 * v78];
    v80 = v117[0];
    unint64_t v81 = v117[2];
    v79[3] = v117[1];
    v79[4] = v81;
    v79[2] = v80;
  }

    LODWORD(v115[0]) = v31;
    uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
    specialized Array.replaceSubrange<A>(_:with:)(0LL, 0LL, 0x65766C6F7365722ELL, 0xE800000000000000LL, v68, v69);
    uint64_t v21 = v94;
    __int128 v32 = v94[2];
    if (v32) {
      goto LABEL_31;
    }
LABEL_70:
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v95);
    return 0LL;
  }

  int v19 = 0;
  uint64_t v20 = (unint64_t *)(v84 + 56);
  uint64_t v21 = (void *)MEMORY[0x18961AFE8];
  do
  {
    int v23 = *(v20 - 3);
    uint64_t v24 = *(v20 - 2);
    __int128 v26 = *(v20 - 1);
    __int128 v25 = *v20;
    if ((specialized Sequence<>.elementsEqual<A>(_:)(0x65766C6F7365722EuLL, 0xE800000000000000LL, v23, v24) & 1) != 0)
    {
      if (v25)
      {
        swift_bridgeObjectRetain();
        __int128 v27 = specialized FixedWidthInteger.init(_:)(v26, v25);
        if ((v27 & 0x100000000LL) == 0) {
          v19 |= v27;
        }
      }
    }

    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v21[2] + 1LL,  1,  v21);
      }
      char v29 = v21[2];
      uint64_t v28 = v21[3];
      uint64_t v30 = v21;
      if (v29 >= v28 >> 1) {
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v28 > 1),  v29 + 1,  1,  v21);
      }
      void v30[2] = v29 + 1;
      uint64_t v21 = v30;
      uint64_t v22 = &v30[4 * v29];
      v22[4] = v23;
      v22[5] = v24;
      v22[6] = v26;
      v22[7] = v25;
      unint64_t v94 = v30;
    }

    v20 += 4;
    --v18;
  }

  while (v18);
  swift_bridgeObjectRelease();
  __int128 v31 = v19 | v83;
  id v17 = MEMORY[0x18961AFE8];
  __int128 v32 = v21[2];
  if (!v32) {
    goto LABEL_70;
  }
LABEL_31:
  v114 = 0;
  v107 = 0;
  unint64_t v93 = v17;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0);
  v84 = (unint64_t)v21;
  uint64_t v33 = v21 + 7;
  while (1)
  {
    char v35 = *(v33 - 3);
    uint64_t v34 = *(v33 - 2);
    __int128 v37 = *(v33 - 1);
    uint64_t v36 = *v33;
    if ((v34 & 0x1000000000000000LL) != 0)
    {
      *(void *)&v115[0] = *(v33 - 3);
      *((void *)&v115[0] + 1) = v34;
      unint64_t v83 = lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      unint64_t v48 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      int64_t v49 = (unsigned __int16 *)objc_msgSend(v48, sel__fastCharacterContents);
      BOOL v50 = v48;
      if (v49)
      {
        *(void *)&v115[0] = v35;
        *((void *)&v115[0] + 1) = v34;
        unint64_t v81 = v49;
        StringProtocol._ephemeralString.getter();
        unint64_t v51 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v52 = objc_msgSend(v51, sel_length);
        swift_unknownObjectRelease();
        unint64_t v53 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v81,  (uint64_t)v52,  0x80u,  1);
      }

      else
      {
        unint64_t v53 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v35, v34, 0x80u, 1);
      }

      pthread_t v61 = v53;
      swift_bridgeObjectRelease_n();
      if ((v61 & 1) == 0) {
        goto LABEL_65;
      }
    }

    else
    {
      if ((v34 & 0x2000000000000000LL) != 0)
      {
        int v39 = HIBYTE(v34) & 0xF;
        *(void *)&v115[0] = *(v33 - 3);
        *((void *)&v115[0] + 1) = v34 & 0xFFFFFFFFFFFFFFLL;
        __int128 v38 = (char *)v115;
      }

      else if ((v35 & 0x1000000000000000LL) != 0)
      {
        __int128 v38 = (char *)((v34 & 0xFFFFFFFFFFFFFFFLL) + 32);
        int v39 = v35 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        __int128 v38 = (char *)_StringObject.sharedUTF8.getter();
      }

      unint64_t v40 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v38, v39, 0x80u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v40) {
        goto LABEL_65;
      }
    }

    *(void *)&v115[0] = v35;
    *((void *)&v115[0] + 1) = v34;
    if (v36) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_47:
    uint64_t v36 = v93;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v36 + 16) + 1LL,  1);
      uint64_t v36 = v93;
    }

    int v46 = *(void *)(v36 + 16);
    unsigned __int8 v45 = *(void *)(v36 + 24);
    if (v46 >= v45 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
      uint64_t v36 = v93;
    }

    v33 += 4;
    *(void *)(v36 + 16) = v46 + 1;
    unint64_t v47 = v36 + 16 * v46;
    *(void *)(v47 + 32) = v35;
    *(void *)(v47 + 40) = v34;
    if (!--v32) {
      goto LABEL_66;
    }
  }

  if ((v36 & 0x1000000000000000LL) == 0)
  {
    if ((v36 & 0x2000000000000000LL) != 0)
    {
      unint64_t v42 = HIBYTE(v36) & 0xF;
      v85._countAndFlagsBits = v37;
      v85._object = (void *)(v36 & 0xFFFFFFFFFFFFFFLL);
      unint64_t v41 = (char *)&v85;
    }

    else if ((v37 & 0x1000000000000000LL) != 0)
    {
      unint64_t v41 = (char *)((v36 & 0xFFFFFFFFFFFFFFFLL) + 32);
      unint64_t v42 = v37 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t v41 = (char *)_StringObject.sharedUTF8.getter();
    }

    unint64_t v43 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v41, v42, 0x40u, 1);
    swift_bridgeObjectRetain();
    if (!v43) {
      goto LABEL_64;
    }
    goto LABEL_46;
  }

  v85._countAndFlagsBits = v37;
  v85._object = (void *)v36;
  unint64_t v54 = lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  unint64_t v83 = v54;
  StringProtocol._ephemeralString.getter();
  BOOL v55 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  int v56 = (unsigned __int16 *)objc_msgSend(v55, sel__fastCharacterContents);
  unint64_t v57 = v55;
  if (v56)
  {
    v85._countAndFlagsBits = v37;
    v85._object = (void *)v36;
    StringProtocol._ephemeralString.getter();
    unint64_t v58 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    int v59 = objc_msgSend(v58, sel_length);
    swift_unknownObjectRelease();
    size_t v60 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v56,  (uint64_t)v59,  0x40u,  1);
  }

  else
  {
    size_t v60 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v37, v36, 0x40u, 1);
  }

  unint64_t v62 = v60;
  swift_bridgeObjectRelease_n();
  if ((v62 & 1) != 0)
  {
LABEL_46:
    v85._countAndFlagsBits = 61LL;
    v85._object = (void *)0xE100000000000000LL;
    v44._countAndFlagsBits = v37;
    v44._object = (void *)v36;
    String.append(_:)(v44);
    String.append(_:)(v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v34 = *((void *)&v115[0] + 1);
    char v35 = *(void *)&v115[0];
    goto LABEL_47;
  }

    __int128 v26 = v38;
    *__int128 v38 = v6;
LABEL_41:
    *((_BYTE *)v26 + _Block_object_dispose((const void *)(v17 - 128), 8) = 0;
    return result;
  }

  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(void *)char v29 = 8LL;
  *(double *)(v29 + _Block_object_dispose((const void *)(v17 - 128), 8) = v27;
LABEL_71:
  __int128 v37 = 2;
LABEL_74:
  *(_BYTE *)(v29 + 16) = v37;
  swift_willThrow();
  return (double *)outlined release of DateComponents((uint64_t)v43);
}

                __break(1u);
                goto LABEL_70;
              }

        swift_bridgeObjectRelease();
        uint64_t v24 = v87;
        unint64_t v92 = v7;
        if ((v104 & 1) != 0) {
          goto LABEL_35;
        }
      }
    }

    else
    {
      uint64_t v104 = v23;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v27,  isUniquelyReferenced_nonNull_native);
      LODWORD(v14) = v103[0];
      uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
      if ((v104 & 1) != (v29 & 1)) {
        goto LABEL_118;
      }
      uint64_t v24 = v28;
      uint64_t v7 = (char *)v103[0];
      unint64_t v92 = (char *)v103[0];
      if ((v104 & 1) != 0)
      {
LABEL_35:
        uint64_t v30 = *((void *)v7 + 7) + 16 * v24;
        outlined consume of Data._Representation(*(void *)v30, *(void *)(v30 + 8));
        __int128 v31 = v94;
        *(void *)uint64_t v30 = v19;
        *(void *)(v30 + _Block_object_dispose((const void *)(v17 - 128), 8) = v94;
        Swift::String v4 = v97;
        goto LABEL_72;
      }
    }

    *(void *)&v7[8 * (v24 >> 6) + 64] |= 1LL << v24;
    unint64_t v48 = (uint64_t *)(*((void *)v7 + 6) + 16 * v24);
    unsigned __int8 *v48 = v10;
    v48[1] = v11;
    int64_t v49 = (uint64_t *)(*((void *)v7 + 7) + 16 * v24);
    *int64_t v49 = v19;
    v49[1] = v94;
    BOOL v50 = *((void *)v7 + 2);
    unint64_t v51 = __OFADD__(v50, 1LL);
    unint64_t v52 = v50 + 1;
    if (v51) {
      goto LABEL_111;
    }
    *((void *)v7 + 2) = v52;
    swift_bridgeObjectRetain();
    Swift::String v4 = v97;
    __int128 v31 = v94;
LABEL_72:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v19, v31);
    uint64_t v7 = v92;
    if ((v11 & 0x1000000000000000LL) != 0)
    {
LABEL_32:
      __int128 v12 = String.UTF8View._foreignCount()();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }

  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

      v178[0] = v92;
      lazy protocol witness table accessor for type Int and conformance Int();
      int v74 = String.init<A>(_:radix:uppercase:)();
      v76 = v127;
      goto LABEL_70;
    }

                  unint64_t v42 = v95;
                  if (!v95)
                  {
                    Swift::String v1 = MEMORY[0x18961AFF0];
                    goto LABEL_135;
                  }

                  if (v95 == *(void *)(v1 + 16))
                  {
                    swift_retain();
                    goto LABEL_135;
                  }

                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  char v67 = static _DictionaryStorage.allocate(capacity:)();
                  uint64_t v68 = 0LL;
                  unsigned int v69 = *v94;
                  uint64_t v70 = v67 + 64;
                  while (1)
                  {
                    if (v69)
                    {
                      int v74 = __clz(__rbit64(v69));
                      v69 &= v69 - 1;
                      v98 = v68;
                      double v75 = v74 | (v68 << 6);
                    }

                    else
                    {
                      v76 = v68 + 1;
                      if (__OFADD__(v68, 1LL)) {
                        goto LABEL_143;
                      }
                      if (v76 >= v93) {
                        goto LABEL_134;
                      }
                      unint64_t v77 = v94[v76];
                      unint64_t v78 = v68 + 1;
                      if (!v77)
                      {
                        unint64_t v78 = v68 + 2;
                        if (v68 + 2 >= v93) {
                          goto LABEL_134;
                        }
                        unint64_t v77 = v94[v78];
                        if (!v77)
                        {
                          unint64_t v78 = v68 + 3;
                          if (v68 + 3 >= v93) {
                            goto LABEL_134;
                          }
                          unint64_t v77 = v94[v78];
                          if (!v77)
                          {
                            unint64_t v78 = v68 + 4;
                            if (v68 + 4 >= v93) {
                              goto LABEL_134;
                            }
                            unint64_t v77 = v94[v78];
                            if (!v77)
                            {
                              unint64_t v79 = v68 + 5;
                              if (v68 + 5 >= v93) {
                                goto LABEL_134;
                              }
                              unint64_t v77 = v94[v79];
                              if (!v77)
                              {
                                while (1)
                                {
                                  unint64_t v78 = v79 + 1;
                                  if (__OFADD__(v79, 1LL)) {
                                    goto LABEL_145;
                                  }
                                  if (v78 >= v93) {
                                    break;
                                  }
                                  unint64_t v77 = v94[v78];
                                  ++v79;
                                  if (v77) {
                                    goto LABEL_124;
                                  }
                                }

    if (*a5 == 1)
    {
      uint64_t v34 = v71;
      if ((v10[4] & 1) != 0)
      {
        if (v71 >= v70)
        {
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }

        char v35 = 84;
      }

      else
      {
        if (v71 >= v70)
        {
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }

        char v35 = 32;
      }

      *(_BYTE *)(v69 + v71) = v35;
      uint64_t v71 = v34 + 1;
    }

    outlined init with take of Int?(v21 + 112, (uint64_t)v75);
    uint64_t result = outlined init with take of Int?((uint64_t)v75, (uint64_t)&v94);
    if ((v95 & 1) != 0)
    {
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }

    uint64_t v36 = v21;
    __int128 v37 = v94;
    outlined init with take of Int?(v36 + 128, (uint64_t)v74);
    uint64_t result = outlined init with take of Int?((uint64_t)v74, (uint64_t)&v96);
    if ((v97 & 1) != 0)
    {
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }

    __int128 v38 = v96;
    outlined init with take of Int?(v36 + 144, (uint64_t)v73);
    uint64_t result = outlined init with take of Int?((uint64_t)v73, (uint64_t)&v98);
    if ((v99 & 1) != 0)
    {
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }

    int v39 = v98;
    unint64_t v40 = *v10;
    uint64_t result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( v37,  2LL,  &v69,  48);
    if ((v40 & 1) != 0)
    {
      unint64_t v41 = a7;
      append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( v38,  2LL,  &v69,  48);
    }

    else
    {
      unint64_t v42 = a7;
      unint64_t v43 = a6;
      unint64_t v44 = v10;
      int v46 = v70;
      unsigned __int8 v45 = v71;
      if (v71 >= v70)
      {
LABEL_123:
        __break(1u);
        goto LABEL_124;
      }

      unint64_t v47 = v69;
      *(_BYTE *)(v69 + v71) = 58;
      uint64_t v71 = v45 + 1;
      uint64_t result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( v38,  2LL,  &v69,  48);
      unint64_t v48 = v71;
      if (v71 >= v46)
      {
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
        goto LABEL_126;
      }

      *(_BYTE *)(v47 + v71) = 58;
      uint64_t v71 = v48 + 1;
      uint64_t v10 = v44;
      a6 = v43;
      unint64_t v41 = v42;
    }

    int64_t v49 = v102;
    uint64_t result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( v39,  2LL,  &v69,  48);
    if ((v10[1] & 1) != 0)
    {
      outlined init with take of Int?(v49 + 160, (uint64_t)v72);
      uint64_t result = outlined init with take of Int?((uint64_t)v72, (uint64_t)&v100);
      if ((v101 & 1) != 0)
      {
LABEL_150:
        __break(1u);
        goto LABEL_151;
      }

      BOOL v50 = trunc((double)v100 / 1000000.0);
      if ((~*(void *)&v50 & 0x7FF0000000000000LL) == 0) {
        goto LABEL_125;
      }
      if (v50 <= -9.22337204e18)
      {
LABEL_126:
        __break(1u);
        goto LABEL_127;
      }

      if (v50 >= 9.22337204e18)
      {
LABEL_127:
        __break(1u);
        goto LABEL_128;
      }

      unint64_t v51 = v71;
      if (v71 >= v70)
      {
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }

      *(_BYTE *)(v69 + v71) = 46;
      uint64_t v71 = v51 + 1;
      uint64_t result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( (uint64_t)v50,  3LL,  &v69,  48);
    }

    *a5 = 1;
    a7 = v41;
    if (!v14) {
      goto LABEL_92;
    }
    goto LABEL_36;
  }

        memset(v187, 0, sizeof(v187));
LABEL_70:
        outlined init with copy of (Hashable & Sendable)?( (uint64_t)v187,  (uint64_t)&v185,  &demangling cache variable for type metadata for Any?);
        v153 = v186;
        outlined destroy of Any?((uint64_t)&v185, &demangling cache variable for type metadata for Any?);
        if (!v153)
        {
          outlined destroy of Any?((uint64_t)v187, &demangling cache variable for type metadata for Any?);
          outlined init with copy of Any((uint64_t)v188, (uint64_t)v187);
        }

        outlined init with copy of (Hashable & Sendable)?( (uint64_t)v187,  (uint64_t)&v183,  &demangling cache variable for type metadata for Any?);
        if (v184)
        {
          outlined init with take of Any(&v183, &v185);
          v154 = v181;
          if ((v127 & 1) != 0)
          {
            outlined init with take of Any(&v185, (_OWORD *)(v181[7] + 32 * v123));
          }

          else
          {
            v181[(v123 >> 6) + 8] |= 1LL << v123;
            v155 = (uint64_t *)(v154[6] + 16 * v123);
            *v155 = v128;
            v155[1] = v131;
            outlined init with take of Any(&v185, (_OWORD *)(v154[7] + 32 * v123));
            v156 = v154[2];
            v157 = __OFADD__(v156, 1LL);
            v158 = v156 + 1;
            if (v157) {
              goto LABEL_81;
            }
            v154[2] = v158;
            swift_bridgeObjectRetain();
          }
        }

        else
        {
          outlined destroy of Any?((uint64_t)&v183, &demangling cache variable for type metadata for Any?);
          if ((v127 & 1) != 0)
          {
            v159 = (uint64_t)v181;
            swift_arrayDestroy();
            specialized _NativeDictionary._delete(at:)(v123, v159);
          }
        }

        outlined destroy of Any?((uint64_t)v187, &demangling cache variable for type metadata for Any?);
        swift_bridgeObjectRelease();
        v182 = (unint64_t)v181;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v188);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v189);
        unint64_t v54 = v179;
        v98 = JSONMap.loadValue(at:)(v179);
        v99 = v102;
        int v100 = v103;
        v101 = v180;
        if (v103 > 0xFDu) {
          goto LABEL_27;
        }
      }

      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v126,  isUniquelyReferenced_nonNull_native);
      v129 = (uint64_t)v181;
      v130 = v112;
      v131 = v121;
      v132 = specialized __RawDictionaryStorage.find<A>(_:)(v130, v121);
      if ((v127 & 1) != (v133 & 1)) {
        goto LABEL_87;
      }
      v123 = v132;
LABEL_39:
      if ((v127 & 1) != 0) {
        goto LABEL_40;
      }
      goto LABEL_69;
    }

    v84 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
    v85 = v161;
    v84(v161, v26, v52);
    v86 = (uint64_t *)swift_allocObject();
    unint64_t v87 = v165;
    v86[5] = v52;
    v86[6] = v87;
    unint64_t v88 = __swift_allocate_boxed_opaque_existential_1(v86 + 2);
    v84((char *)v88, v85, v52);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v50);
    unint64_t v89 = v178;
    unint64_t v54 = v179;
    v86[7] = v178;
    BOOL v55 = v180;
    int v56 = v176;
    if (v89 >> 62)
    {
      if (v89 >> 62 != 1)
      {
        unint64_t v93 = 1LL;
LABEL_25:
        v86[8] = v93;
        v178 = (uint64_t)v86;
        goto LABEL_26;
      }

      unint64_t v90 = (uint64_t *)((v89 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      unint64_t v90 = (uint64_t *)(v89 + 64);
    }

    unint64_t v92 = *v90;
    swift_retain();
    unint64_t v93 = v92 + 1;
    if (__OFADD__(v92, 1LL))
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
    }

    goto LABEL_25;
  }

  if (v177 | a1 || a3 != 160)
  {
    if (dynamic_cast_existential_2_conditional(a4))
    {
LABEL_14:
      type metadata accessor for DecodingError();
      v180 = swift_allocError();
      unint64_t v58 = (Swift::Int)v57;
      int v59 = v171;
      *unint64_t v57 = v172;
      size_t v60 = v169;
      pthread_t v61 = *(void (**)(char *, int64_t, uint64_t))(v169 + 16);
      unint64_t v62 = v166;
      v61(v166, v168, v59);
      v61(v21, (int64_t)v62, v59);
      unint64_t v63 = v170;
      uint64_t v64 = v175;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v21, 1LL, v175) == 1)
      {
        int v65 = *(void (**)(char *, uint64_t))(v60 + 8);
        v65(v21, v59);
        _CodingPathNode.path.getter(v178);
        v65(v62, v59);
      }

      else
      {
        unint64_t v66 = v164;
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v164, v21, v64);
        char v67 = _CodingPathNode.path.getter(v178);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        v179 = v58;
        unsigned int v69 = v63;
        uint64_t v70 = inited;
        *(_OWORD *)(inited + 16) = xmmword_183720D90;
        uint64_t v71 = v165;
        *(void *)(inited + 56) = v64;
        *(void *)(inited + 64) = v71;
        uint64_t v72 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v69 + 16))(v72, v66, v64);
        v189 = v67;
        specialized Array.append<A>(contentsOf:)(v70);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v166, v59);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v66, v64);
      }

      v189 = 0LL;
      v190 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(43LL);
      swift_bridgeObjectRelease();
      v189 = 0xD000000000000035LL;
      v190 = 0x80000001839D2CE0LL;
      __asm { BR              X9 }
    }

            if (!v14) {
              return 1LL;
            }
            CFIndex v16 = *v15++;
            uint64_t v13 = v16;
            --v14;
            if (v16 < 0) {
              return 0LL;
            }
            continue;
        }
      }
    }

    return 0LL;
  }

  if (a1 && a2)
  {
    if ((*a1 & 0x80000000) == 0)
    {
      Swift::String v5 = 0LL;
      uint64_t v6 = *a1;
      uint64_t v7 = a2 - 1;
      uint64_t v8 = a1 + 1;
      while (2)
      {
        switch(v6)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_7:
            if ((v4 & 0xF6) == 0) {
              return 0LL;
            }
            goto LABEL_32;
          case '%':
            if (v5) {
              return 0LL;
            }
            Swift::String v5 = 2LL;
            goto LABEL_38;
          case '&':
LABEL_13:
            if ((v4 & 0x76) == 0) {
              return 0LL;
            }
            goto LABEL_32;
          case '+':
            if ((v4 & 0xFFFFFFF7) == 0) {
              return 0LL;
            }
            goto LABEL_32;
          case '-':
          case '.':
            goto LABEL_31;
          case '/':
LABEL_15:
            if (v4 < 0x10) {
              return 0LL;
            }
            goto LABEL_32;
          default:
            break;
        }

        switch(v6)
        {
          case ':':
            if ((v4 & 0xD2) == 0) {
              return 0LL;
            }
            goto LABEL_32;
          case ';':
            goto LABEL_7;
          case '=':
            goto LABEL_13;
          case '?':
            if (v4 < 0x40) {
              return 0LL;
            }
            goto LABEL_32;
          case '@':
            goto LABEL_15;
          default:
            if (v6 == 95)
            {
              if (v4 < 2) {
                return 0LL;
              }
            }

            else if ((v6 - 123) > 0xFFFFFFE5)
            {
LABEL_31:
              if (!v4) {
                return 0LL;
              }
            }

            else
            {
              uint64_t result = 0LL;
              if (v6 != 126 || v4 < 2) {
                return result;
              }
            }

          *a2 = v107;
          a2[1] = v109;
          a2[2] = v110;
          ++v111;
          a2 += 3;
          if (v111 == result) {
            goto LABEL_230;
          }
        }

        if (!*(_BYTE *)(v16 + 18)) {
          break;
        }
        uint64_t result = swift_unknownObjectRetain_n();
        unint64_t v40 = v10;
        uint64_t v6 = v16;
LABEL_89:
        __int128 v31 = *(unsigned __int16 *)(v6 + 16);
        if (!*(_WORD *)(v6 + 16)) {
          goto LABEL_87;
        }
        unint64_t v43 = *(void *)(v6 + 40);
        int v23 = __OFSUB__(v40, v43);
        uint64_t v33 = v40 - v43;
        if (v23) {
          goto LABEL_235;
        }
        if (__OFADD__(v33, 1LL)) {
          goto LABEL_236;
        }
        if (v33 + 1 < 1)
        {
          __int128 v31 = 0LL;
          goto LABEL_88;
        }

        if ((_DWORD)v31 == 1)
        {
          unint64_t v40 = v33;
LABEL_87:
          if (!v40) {
            goto LABEL_88;
          }
          __break(1u);
LABEL_235:
          __break(1u);
LABEL_236:
          __break(1u);
          goto LABEL_237;
        }

        unint64_t v44 = (uint64_t *)(v6 + 64);
        unsigned __int8 v45 = 1LL;
        while (1)
        {
          int v46 = *v44;
          v44 += 3;
          unint64_t v40 = v33 - v46;
          if (__OFSUB__(v33, v46)) {
            break;
          }
          if (__OFADD__(v40, 1LL)) {
            goto LABEL_232;
          }
          if (v40 + 1 < 1)
          {
            __int128 v31 = v45;
            unint64_t v40 = v33;
LABEL_88:
            unint64_t v42 = (4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C;
            __int128 v37 = ((-15LL << v42) - 1) & v37 | (v31 << v42);
            uint64_t v10 = *(void *)(v6 + 24 + 24 * v31);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v6 = v10;
            if (!*(_BYTE *)(v10 + 18)) {
              goto LABEL_103;
            }
            goto LABEL_89;
          }

          ++v45;
          uint64_t v33 = v40;
          if (v31 == v45) {
            goto LABEL_87;
          }
        }

        __break(1u);
LABEL_232:
        __break(1u);
LABEL_233:
        __int128 v27 = v33;
        uint64_t v14 = v31;
      }

      uint64_t result = swift_unknownObjectRetain_n();
      __int128 v37 = 0LL;
      unint64_t v40 = v10;
      uint64_t v10 = v16;
LABEL_103:
      unint64_t v47 = *(unsigned __int16 *)(v10 + 16);
      if (!*(_WORD *)(v10 + 16)) {
        goto LABEL_115;
      }
      unint64_t v48 = *(void *)(v10 + 24);
      int v23 = __OFSUB__(v40, v48);
      int64_t v49 = v40 - v48;
      if (v23) {
        goto LABEL_271;
      }
      if (__OFADD__(v49, 1LL)) {
        goto LABEL_272;
      }
      if (v49 + 1 < 1)
      {
        unint64_t v47 = 0LL;
      }

      else
      {
        if ((_DWORD)v47 == 1)
        {
          unint64_t v40 = v49;
LABEL_115:
          if (v40) {
            goto LABEL_270;
          }
          goto LABEL_116;
        }

        BOOL v50 = (uint64_t *)(v10 + 48);
        unint64_t v51 = 1LL;
        while (1)
        {
          unint64_t v52 = *v50;
          v50 += 3;
          unint64_t v40 = v49 - v52;
          if (__OFSUB__(v49, v52)) {
            goto LABEL_258;
          }
          if (__OFADD__(v40, 1LL)) {
            goto LABEL_259;
          }
          if (v40 + 1 < 1) {
            break;
          }
          ++v51;
          int64_t v49 = v40;
          if (v47 == v51) {
            goto LABEL_115;
          }
        }

        unint64_t v47 = v51;
        unint64_t v40 = v49;
      }

    BYTE4(v89) = 0;
    LODWORD(v89) = 0;
    method_getReturnType(v33, (char *)&v89, 4uLL);
    uint64_t v30 = v84;
    __int128 v27 = (void *)v85;
    unint64_t v47 = v87;
    unint64_t v48 = v89;
    int64_t v49 = (char)v89 - 78;
    if (v49 <= 0x24 && ((1LL << v49) & 0x1300000113LL) != 0) {
      unint64_t v48 = BYTE1(v89);
    }
    if (v48 == 35 || v48 == 64) {
      goto LABEL_83;
    }
    objc_opt_self();
    BOOL v50 = (os_log_s *)_NSOSLog();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_FAULT))
    {
      if (v30) {
        v73 = NSStringFromSelector(v30);
      }
      else {
        v73 = (NSString *)@"<unknown>";
      }
      unint64_t v90 = 138412546;
      unint64_t v91 = v73;
      unint64_t v92 = 2080;
      unint64_t v93 = &v89;
      _os_log_fault_impl( &dword_182EB1000,  v50,  OS_LOG_TYPE_FAULT,  "NSPredicate: Using NSFunctionExpression with selector '%@' and return type '%s' is forbidden",  (uint8_t *)&v90,  0x16u);
    }

    goto LABEL_82;
  }

  objc_opt_self();
  Flags = _CFPredicatePolicyData_getFlags();
  unint64_t v47 = v87;
  if ((Flags & 8) != 0)
  {
    if (v31)
    {
      unint64_t v52 = class_getName(v31);
      if (strcmp(v52, "OCPartialMockObject"))
      {
        if (strcmp(v52, "OCMockObject"))
        {
          objc_opt_self();
          unint64_t v53 = (os_log_s *)_NSOSLog();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
          {
            LOWORD(v90) = 0;
            _os_log_fault_impl( &dword_182EB1000,  v53,  OS_LOG_TYPE_FAULT,  "NSPredicate: NSFunctionExpression unable to find method",  (uint8_t *)&v90,  2u);
          }

  [*(id *)(a1 + 40) unlock];
  return 1LL;
}

              uint64_t v6 = 1LL;
              goto LABEL_9;
            }

LABEL_79:
    *(void *)(*(void *)v28 + 40LL) = v31;
    *(void *)(*(void *)v28 + 48LL) = v17 - v32;
    *(void *)(*(void *)v28 + 32LL) = v17;
  }

  return v17;
}

    swift_bridgeObjectRetain();
    v44._countAndFlagsBits = 61LL;
    v44._object = (void *)0xE100000000000000LL;
    String.append(_:)(v44);
    if ((v8 & 0x1000000000000000LL) != 0)
    {
      v99 = v9;
      int v100 = v8;
      unint64_t v58 = lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      unint64_t v94 = v58;
      StringProtocol._ephemeralString.getter();
      int v59 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      size_t v60 = (unsigned __int16 *)objc_msgSend(v59, sel__fastCharacterContents);
      pthread_t v61 = v59;
      if (v60)
      {
        v99 = v9;
        int v100 = v8;
        StringProtocol._ephemeralString.getter();
        unint64_t v62 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v63 = objc_msgSend(v62, sel_length);
        swift_unknownObjectRelease();
        uint64_t v64 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v60,  (uint64_t)v63,  0x80u,  0);
      }

      else
      {
        uint64_t v64 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v8, 0x80u, 0);
      }

      unsigned int v69 = v64;
      unsigned __int8 v45 = (char *)swift_bridgeObjectRelease_n();
      if ((v69 & 1) == 0) {
        goto LABEL_143;
      }
    }

    else if ((v8 & 0x2000000000000000LL) != 0)
    {
      unint64_t v52 = HIBYTE(v8) & 0xF;
      v99 = v9;
      int v100 = v8 & 0xFFFFFFFFFFFFFFLL;
      if (v52)
      {
        if ((v9 & 0x80) != 0) {
          goto LABEL_143;
        }
        unint64_t v53 = v9;
        unint64_t v54 = v52 - 1;
        BOOL v55 = v96;
        while (2)
        {
          if ((v53 - 39) >= 9 && v53 != 33 && v53 != 36)
          {
            if (v53 == 38) {
              goto LABEL_143;
            }
            unint64_t v57 = v53 - 58;
            if ((v53 - 58) <= 0xFFFFFFF5)
            {
              if (v57 > 6)
              {
LABEL_116:
              }

              else if (((1 << v57) & 0x63) == 0)
              {
                if (v53 == 61) {
                  goto LABEL_143;
                }
                goto LABEL_116;
              }
            }
          }

          if (!v54) {
            break;
          }
          int v56 = *v55++;
          unint64_t v53 = v56;
          --v54;
          if (v56 < 0) {
            goto LABEL_143;
          }
          continue;
        }
      }
    }

    else
    {
      if ((v9 & 0x1000000000000000LL) != 0)
      {
        unsigned __int8 v45 = (char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
        int v46 = v9 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        unsigned __int8 v45 = (char *)_StringObject.sharedUTF8.getter();
        if (!v45) {
          goto LABEL_142;
        }
      }

      if (v46)
      {
        if ((*v45 & 0x80000000) == 0)
        {
          unint64_t v47 = *v45;
          unint64_t v48 = v46 - 1;
          int64_t v49 = v45 + 1;
          while (1)
          {
            if ((v47 - 39) >= 9 && v47 != 33 && v47 != 36)
            {
              if (v47 == 38) {
                goto LABEL_143;
              }
              unint64_t v51 = v47 - 58;
              if ((v47 - 58) <= 0xFFFFFFF5)
              {
                if (v51 > 6) {
                  goto LABEL_97;
                }
                if (((1 << v51) & 0x63) == 0) {
                  break;
                }
              }
            }

    swift_bridgeObjectRelease();
  }

  else if (v4)
  {
    __int128 v37 = *(void *)(v4 + 16);
    if (v37)
    {
      v85 = MEMORY[0x18961AFE8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
      __int128 v38 = (unint64_t *)(v4 + 56);
      while (1)
      {
        unint64_t v40 = *(v38 - 3);
        int v39 = *(v38 - 2);
        unint64_t v41 = *(v38 - 1);
        uint64_t v10 = *v38;
        if ((v39 & 0x1000000000000000LL) != 0)
        {
          v2[20] = v40;
          v2[21] = v39;
          lazy protocol witness table accessor for type String and conformance String();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          StringProtocol._ephemeralString.getter();
          unint64_t v54 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          BOOL v55 = (unsigned __int16 *)objc_msgSend(v54, sel__fastCharacterContents);
          int v56 = v54;
          if (v55)
          {
            v2[20] = v40;
            v2[21] = v39;
            unint64_t v83 = v55;
            StringProtocol._ephemeralString.getter();
            unint64_t v57 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            unint64_t v58 = objc_msgSend(v57, sel_length);
            swift_unknownObjectRelease();
            int v59 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v83,  (uint64_t)v58,  0x80u,  1);
          }

          else
          {
            int v59 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v40,  v39,  0x80u,  1);
          }

          unint64_t v66 = v59;
          swift_bridgeObjectRelease_n();
          if ((v66 & 1) == 0) {
            goto LABEL_74;
          }
        }

        else
        {
          if ((v39 & 0x2000000000000000LL) != 0)
          {
            unint64_t v43 = HIBYTE(v39) & 0xF;
            v2[20] = v40;
            v2[21] = v39 & 0xFFFFFFFFFFFFFFLL;
            unint64_t v42 = (char *)v3;
          }

          else if ((v40 & 0x1000000000000000LL) != 0)
          {
            unint64_t v42 = (char *)((v39 & 0xFFFFFFFFFFFFFFFLL) + 32);
            unint64_t v43 = v40 & 0xFFFFFFFFFFFFLL;
          }

          else
          {
            unint64_t v42 = (char *)_StringObject.sharedUTF8.getter();
          }

          unint64_t v44 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v42,  v43,  0x80u,  1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (!v44) {
            goto LABEL_74;
          }
        }

        unint64_t v87 = v40;
        if (v10)
        {
          if ((v10 & 0x1000000000000000LL) != 0)
          {
            v2[20] = v41;
            v2[21] = v10;
            lazy protocol witness table accessor for type String and conformance String();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            StringProtocol._ephemeralString.getter();
            size_t v60 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            pthread_t v61 = (unsigned __int16 *)objc_msgSend(v60, sel__fastCharacterContents);
            unint64_t v62 = v60;
            if (v61)
            {
              v2[20] = v41;
              v2[21] = v10;
              StringProtocol._ephemeralString.getter();
              unint64_t v63 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              uint64_t v64 = objc_msgSend(v63, sel_length);
              swift_unknownObjectRelease();
              int v65 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v61,  (uint64_t)v64,  0x40u,  1);
            }

            else
            {
              int v65 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v41,  v10,  0x40u,  1);
            }

            char v67 = v65;
            swift_bridgeObjectRelease_n();
            if ((v67 & 1) == 0)
            {
LABEL_73:
              swift_bridgeObjectRelease();
LABEL_74:
              lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
              uint64_t v68 = (void *)swift_allocError();
              *unsigned int v69 = 7;
              Swift::String v2 = v68;
              swift_willThrow();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();

              swift_bridgeObjectRelease();
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
LABEL_75:
              uint64_t v70 = v2[23];
              v2[20] = v10;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
              lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
              uint64_t v71 = BidirectionalCollection<>.joined(separator:)();
              v73 = v72;
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(void *)(v70 + 120) = v71;
              *(void *)(v70 + 12_Block_object_dispose((const void *)(v17 - 128), 8) = v73;
              goto LABEL_79;
            }
          }

          else
          {
            if ((v10 & 0x2000000000000000LL) != 0)
            {
              int v46 = HIBYTE(v10) & 0xF;
              v2[20] = v41;
              v2[21] = v10 & 0xFFFFFFFFFFFFFFLL;
              unsigned __int8 v45 = (char *)v3;
            }

            else if ((v41 & 0x1000000000000000LL) != 0)
            {
              unsigned __int8 v45 = (char *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
              int v46 = v41 & 0xFFFFFFFFFFFFLL;
            }

            else
            {
              unsigned __int8 v45 = (char *)_StringObject.sharedUTF8.getter();
            }

            unint64_t v47 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v45,  v46,  0x40u,  1);
            swift_bridgeObjectRetain();
            if (!v47) {
              goto LABEL_73;
            }
          }

          v48._countAndFlagsBits = v41;
          v48._object = (void *)v10;
          String.append(_:)(v48);
          v49._countAndFlagsBits = 61LL;
          v49._object = (void *)0xE100000000000000LL;
          String.append(_:)(v49);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v40 = v87;
        }

        else
        {
          swift_bridgeObjectRelease();
        }

        BOOL v50 = v85;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v85 + 16) + 1LL,  1);
          BOOL v50 = v85;
        }

        unint64_t v52 = *(void *)(v50 + 16);
        unint64_t v51 = *(void *)(v50 + 24);
        if (v52 >= v51 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v51 > 1,  v52 + 1,  1);
          BOOL v50 = v85;
        }

        v38 += 4;
        *(void *)(v50 + 16) = v52 + 1;
        unint64_t v53 = v50 + 16 * v52;
        *(void *)(v53 + 32) = v40;
        *(void *)(v53 + 40) = v39;
        if (!--v37)
        {
          int v74 = v2[23];
          v2[20] = v50;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
          lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
          double v75 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v77 = v76;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)(v74 + 120) = v75;
          *(void *)(v74 + 12_Block_object_dispose((const void *)(v17 - 128), 8) = v77;
          goto LABEL_80;
        }
      }
    }

    unint64_t v81 = v2[23];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_OWORD *)(v81 + 120) = xmmword_183725730;
  }

  else
  {
    unint64_t v79 = v2[23];
    swift_bridgeObjectRelease();
    *(void *)(v79 + 120) = 0LL;
    *(void *)(v79 + 12_Block_object_dispose((const void *)(v17 - 128), 8) = 0LL;
  }

                    int64_t v49 = (4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C;
                    int v39 = ((-15LL << v49) - 1) & v39 | (v50 << v49);
                    uint64_t v36 = *(void *)(v36 + 24 + 24 * v50);
                    swift_unknownObjectRetain();
                    swift_unknownObjectRelease();
                    if (!*(_BYTE *)(v36 + 18))
                    {
                      v39 &= 0xFFFFFFFFFFFFF0FFLL;
                      unint64_t v9 = v40;
                      goto LABEL_129;
                    }
                  }
                }

                swift_unknownObjectRetain_n();
                char v35 = ((-15LL << ((4 * *(_BYTE *)(v1 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v1 + 18) | ((unint64_t)*(unsigned __int16 *)(v1 + 16) << ((4 * *(_BYTE *)(v1 + 18) + 8) & 0x3C));
              }

              else
              {
                swift_unknownObjectRetain_n();
                char v35 = 0LL;
              }

              swift_unknownObjectRelease();
              uint64_t v36 = 0LL;
              __int128 v37 = 0LL;
              if (!v1)
              {
LABEL_153:
                swift_release();
                unint64_t v9 = 0LL;
LABEL_154:
                uint64_t v33 = v81 - v37;
                if (!__OFSUB__(v81, v37)) {
                  goto LABEL_155;
                }
                goto LABEL_181;
              }

  if ((BYTE8(v118[15]) & 1) != 0)
  {
    if ((BYTE8(v118[16]) & 1) != 0) {
      goto LABEL_81;
    }
  }

  else
  {
    v116 = v26;
    *(void *)&v115 = *(void *)&v118[15];
    v117[0] = xmmword_183729470;
    outlined init with take of Any(&v115, &v117[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      __int128 v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
    }
    unint64_t v83 = v12[2];
    unint64_t v82 = v12[3];
    if (v83 >= v82 >> 1) {
      __int128 v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v82 > 1),  v83 + 1,  1,  v12);
    }
    v12[2] = v83 + 1;
    v84 = &v12[6 * v83];
    v85 = v117[0];
    v86 = v117[2];
    v84[3] = v117[1];
    v84[4] = v86;
    v84[2] = v85;
    if ((BYTE8(v118[16]) & 1) != 0)
    {
LABEL_81:
      if ((BYTE8(v118[6]) & 1) != 0) {
        goto LABEL_82;
      }
      goto LABEL_94;
    }
  }

  v116 = v26;
  *(void *)&v115 = *(void *)&v118[16];
  v117[0] = xmmword_183729480;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __int128 v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
  }
  unint64_t v88 = v12[2];
  unint64_t v87 = v12[3];
  if (v88 >= v87 >> 1) {
    __int128 v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v87 > 1),  v88 + 1,  1,  v12);
  }
  v12[2] = v88 + 1;
  unint64_t v89 = &v12[6 * v88];
  unint64_t v90 = v117[0];
  unint64_t v91 = v117[2];
  v89[3] = v117[1];
  v89[4] = v91;
  v89[2] = v90;
  if ((BYTE8(v118[6]) & 1) != 0)
  {
LABEL_82:
    if ((BYTE8(v118[17]) & 1) != 0) {
      goto LABEL_104;
    }
    goto LABEL_99;
  }

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v80 = v65 & 0xFFFFFFFFFFFFF0FFLL | (v90 << 8);
    uint64_t v64 = v471;
    goto LABEL_62;
  }

  uint64_t result = swift_unknownObjectRetain_n();
  Swift::String v5 = v471;
  unint64_t v66 = v60;
  while (1)
  {
    unsigned int v69 = *(unsigned __int16 *)(v66 + 16);
    if (!*(_WORD *)(v66 + 16)) {
      goto LABEL_602;
    }
    uint64_t v70 = *(void *)(v66 + 40);
    uint64_t v71 = __OFSUB__(v5, v70);
    uint64_t v72 = v5 - v70;
    if (v71) {
      goto LABEL_528;
    }
    if (v72 > 0) {
      break;
    }
    char v67 = 0LL;
LABEL_41:
    uint64_t v68 = (4 * *(_BYTE *)(v66 + 18) + 8) & 0x3C;
    int v65 = ((-15LL << v68) - 1) & v65 | (v67 << v68);
    unint64_t v58 = *(void *)(v66 + 24 + 24 * v67);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
    unint64_t v66 = v58;
    if (!*(_BYTE *)(v58 + 18)) {
      goto LABEL_64;
    }
  }

  if ((_DWORD)v69 == 1) {
    goto LABEL_604;
  }
  v73 = *(void *)(v66 + 64);
  Swift::String v5 = v72 - v73;
  if (__OFSUB__(v72, v73)) {
    goto LABEL_535;
  }
  if (v5 < 1)
  {
    Swift::String v5 = v72;
    char v67 = 1LL;
    goto LABEL_41;
  }

  if ((_DWORD)v69 == 2) {
    goto LABEL_604;
  }
  int v74 = (void *)(v66 + 88);
  char v67 = 2LL;
  while (v69 != v67)
  {
    double v75 = v5 - *v74;
    if (__OFSUB__(v5, *v74)) {
      goto LABEL_341;
    }
    if (v75 < 1) {
      goto LABEL_41;
    }
    ++v67;
    v74 += 3;
    Swift::String v5 = v75;
    if (v69 == v67) {
      goto LABEL_604;
    }
  }

  __break(1u);
LABEL_341:
  __break(1u);
LABEL_342:
  v331 = 0LL;
LABEL_519:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v233 = v65 & 0xFFFFFFFFFFFFF0FFLL | (v331 << 8);
  v221 = v487;
LABEL_229:
  swift_unknownObjectRetain();
  v234 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v62, v233, v58, v5, v221);
  swift_release();
  swift_unknownObjectRelease_n();
  v235 = v66 - v63;
  if (__OFSUB__(v66, v63))
  {
    __break(1u);
LABEL_522:
    __break(1u);
LABEL_523:
    __break(1u);
LABEL_524:
    __break(1u);
LABEL_525:
    __break(1u);
LABEL_526:
    __break(1u);
LABEL_527:
    __break(1u);
LABEL_528:
    __break(1u);
LABEL_529:
    __break(1u);
LABEL_530:
    outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
LABEL_531:
    outlined destroy of Any?( (uint64_t)&v508,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
    outlined destroy of Any?( (uint64_t)v517,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?( (uint64_t)&v518,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_532:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
LABEL_539:
    swift_release();
    unint64_t v66 = (int64_t)v464;
    goto LABEL_540;
  }

    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }

  if (v16)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }

        unint64_t v66 = (v71 - 1) & v71;
        unsigned int v69 = __clz(__rbit64(v71)) + (v61 << 6);
        if (!v54[2]) {
          goto LABEL_90;
        }
      }
    }

    goto LABEL_90;
  }

        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      outlined init with take of Any((_OWORD *)(*(void *)(v23 + 56) + 32 * v18), v71);
      specialized _NativeDictionary._delete(at:)(v18, v23);
      *Swift::String v5 = v23;
      swift_bridgeObjectRelease();
    }

    else
    {
      memset(v71, 0, sizeof(v71));
    }

    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v71, &demangling cache variable for type metadata for Any?);
  }

  outlined init with take of Any((_OWORD *)a1, v71);
  uint64_t v8 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v70 = *v3;
  unint64_t v9 = v70;
  id *v3 = 0x8000000000000000LL;
  __int128 v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  __int128 v12 = *(void *)(v9 + 16);
  uint64_t v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }

  else
  {
    Swift::String v4 = v10;
    if (*(void *)(v9 + 24) < v14)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, v8);
      int v15 = v70;
      CFIndex v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v17 & 1)) {
        goto LABEL_84;
      }
      __int128 v11 = v16;
      if ((v4 & 1) == 0) {
        goto LABEL_48;
      }
LABEL_13:
      uint64_t v24 = (_OWORD *)(*(void *)(v15 + 56) + 32 * v11);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      outlined init with take of Any(v71, v24);
LABEL_49:
      *Swift::String v5 = v15;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    if ((v8 & 1) != 0)
    {
      int v15 = v9;
      if ((v10 & 1) != 0) {
        goto LABEL_13;
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v11, a2, a3, v71, (void *)v15);
      swift_bridgeObjectRetain();
      goto LABEL_49;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  __int128 v26 = static _DictionaryStorage.copy(original:)();
  int v15 = v26;
  if (!*(void *)(v9 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }

  __int128 v27 = (void *)(v26 + 64);
  uint64_t v28 = (unint64_t)((1LL << *(_BYTE *)(v15 + 32)) + 63) >> 6;
  char v29 = 0LL;
  *(void *)(v15 + 16) = *(void *)(v9 + 16);
  uint64_t v30 = 1LL << *(_BYTE *)(v9 + 32);
  __int128 v31 = -1LL;
  if (v30 < 64) {
    __int128 v31 = ~(-1LL << v30);
  }
  __int128 v32 = v31 & *(void *)(v9 + 64);
  pthread_t v61 = v9 + 64;
  unint64_t v62 = (unint64_t)(v30 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      __src = (void *)((v32 - 1) & v32);
      char v67 = v29;
      uint64_t v33 = __clz(__rbit64(v32)) | (v29 << 6);
      goto LABEL_25;
    }

    int v39 = v29 + 1;
    if (__OFADD__(v29, 1LL))
    {
      __break(1u);
      goto LABEL_81;
    }

    if (v39 >= v62) {
      goto LABEL_47;
    }
    unint64_t v40 = *(void *)(v61 + 8 * v39);
    unint64_t v41 = v29 + 1;
    if (!v40)
    {
      unint64_t v41 = v29 + 2;
      if (v29 + 2 >= v62) {
        goto LABEL_47;
      }
      unint64_t v40 = *(void *)(v61 + 8 * v41);
      if (!v40)
      {
        unint64_t v41 = v29 + 3;
        if (v29 + 3 >= v62) {
          goto LABEL_47;
        }
        unint64_t v40 = *(void *)(v61 + 8 * v41);
        if (!v40)
        {
          unint64_t v41 = v29 + 4;
          if (v29 + 4 >= v62) {
            goto LABEL_47;
          }
          unint64_t v40 = *(void *)(v61 + 8 * v41);
          if (!v40)
          {
            unint64_t v41 = v29 + 5;
            if (v29 + 5 >= v62) {
              goto LABEL_47;
            }
            unint64_t v40 = *(void *)(v61 + 8 * v41);
            if (!v40)
            {
              unint64_t v41 = v29 + 6;
              if (v29 + 6 >= v62) {
                goto LABEL_47;
              }
              unint64_t v40 = *(void *)(v61 + 8 * v41);
              if (!v40) {
                break;
              }
            }
          }
        }
      }
    }

        swift_bridgeObjectRelease();
      }

      outlined init with take of Any((_OWORD *)(*(void *)(v21 + 56) + 32 * v16), v65);
      specialized _NativeDictionary._delete(at:)(v16, v21);
      *Swift::String v4 = v21;

      swift_bridgeObjectRelease();
    }

    else
    {
      memset(v65, 0, sizeof(v65));
    }

    return outlined destroy of Any?((uint64_t)v65, &demangling cache variable for type metadata for Any?);
  }

  outlined init with take of Any((_OWORD *)a1, v65);
  uint64_t v6 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = *v2;
  uint64_t v7 = v64;
  *Swift::String v2 = 0x8000000000000000LL;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v10 = *(void *)(v7 + 16);
  __int128 v11 = (v8 & 1) == 0;
  __int128 v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    Swift::String v3 = v8;
    if (*(void *)(v7 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, v6);
      uint64_t v13 = v64;
      uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v15 & 1)) {
        goto LABEL_84;
      }
      unint64_t v9 = v14;
      if ((v3 & 1) == 0) {
        goto LABEL_48;
      }
LABEL_13:
      uint64_t v22 = (_OWORD *)(*(void *)(v13 + 56) + 32 * v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      outlined init with take of Any(v65, v22);
LABEL_49:
      *Swift::String v4 = v13;

      return swift_bridgeObjectRelease();
    }

    if ((v6 & 1) != 0)
    {
      uint64_t v13 = v7;
      if ((v8 & 1) != 0) {
        goto LABEL_13;
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v9, a2, v65, v13);
      unint64_t v41 = a2;
      goto LABEL_49;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
  uint64_t v24 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v24;
  if (!*(void *)(v7 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }

  __int128 v25 = (void *)(v24 + 64);
  __int128 v26 = (unint64_t)((1LL << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  __int128 v27 = 0LL;
  *(void *)(v13 + 16) = *(void *)(v7 + 16);
  uint64_t v28 = 1LL << *(_BYTE *)(v7 + 32);
  char v29 = -1LL;
  if (v28 < 64) {
    char v29 = ~(-1LL << v28);
  }
  uint64_t v30 = v29 & *(void *)(v7 + 64);
  unint64_t v58 = v7 + 64;
  int v59 = (unint64_t)(v28 + 63) >> 6;
  while (1)
  {
    if (v30)
    {
      __int128 v31 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      __src = v27;
      __int128 v32 = v31 | ((void)v27 << 6);
      goto LABEL_25;
    }

    __int128 v37 = (int64_t)(v27 + 1);
    if (__OFADD__(v27, 1LL))
    {
      __break(1u);
      goto LABEL_81;
    }

    if (v37 >= v59) {
      goto LABEL_47;
    }
    __int128 v38 = *(void *)(v58 + 8 * v37);
    int v39 = (int64_t)(v27 + 1);
    if (!v38)
    {
      int v39 = (int64_t)(v27 + 2);
      __int128 v38 = *(void *)(v58 + 8 * v39);
      if (!v38)
      {
        int v39 = (int64_t)(v27 + 3);
        __int128 v38 = *(void *)(v58 + 8 * v39);
        if (!v38)
        {
          int v39 = (int64_t)(v27 + 4);
          __int128 v38 = *(void *)(v58 + 8 * v39);
          if (!v38)
          {
            int v39 = (int64_t)(v27 + 5);
            __int128 v38 = *(void *)(v58 + 8 * v39);
            if (!v38)
            {
              int v39 = (int64_t)(v27 + 6);
              __int128 v38 = *(void *)(v58 + 8 * v39);
              if (!v38) {
                break;
              }
            }
          }
        }
      }
    }

        swift_bridgeObjectRelease();
      }

      outlined init with take of Any((_OWORD *)(*(void *)(v21 + 56) + 32 * v16), v65);
      specialized _NativeDictionary._delete(at:)(v16, v21);
      *Swift::String v4 = v21;

      swift_bridgeObjectRelease();
    }

    else
    {
      memset(v65, 0, sizeof(v65));
    }

    return outlined destroy of Any?((uint64_t)v65, &demangling cache variable for type metadata for Any?);
  }

  outlined init with take of Any((_OWORD *)a1, v65);
  uint64_t v6 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = *v2;
  uint64_t v7 = v64;
  *Swift::String v2 = 0x8000000000000000LL;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v10 = *(void *)(v7 + 16);
  __int128 v11 = (v8 & 1) == 0;
  __int128 v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    Swift::String v3 = v8;
    if (*(void *)(v7 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, v6);
      uint64_t v13 = v64;
      uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v15 & 1)) {
        goto LABEL_84;
      }
      unint64_t v9 = v14;
      if ((v3 & 1) == 0) {
        goto LABEL_48;
      }
LABEL_13:
      uint64_t v22 = (_OWORD *)(*(void *)(v13 + 56) + 32 * v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      outlined init with take of Any(v65, v22);
LABEL_49:
      *Swift::String v4 = v13;

      return swift_bridgeObjectRelease();
    }

    if ((v6 & 1) != 0)
    {
      uint64_t v13 = v7;
      if ((v8 & 1) != 0) {
        goto LABEL_13;
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v9, a2, v65, v13);
      unint64_t v41 = a2;
      goto LABEL_49;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
  uint64_t v24 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v24;
  if (!*(void *)(v7 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }

  __int128 v25 = (void *)(v24 + 64);
  __int128 v26 = (unint64_t)((1LL << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  __int128 v27 = 0LL;
  *(void *)(v13 + 16) = *(void *)(v7 + 16);
  uint64_t v28 = 1LL << *(_BYTE *)(v7 + 32);
  char v29 = -1LL;
  if (v28 < 64) {
    char v29 = ~(-1LL << v28);
  }
  uint64_t v30 = v29 & *(void *)(v7 + 64);
  unint64_t v58 = v7 + 64;
  int v59 = (unint64_t)(v28 + 63) >> 6;
  while (1)
  {
    if (v30)
    {
      __int128 v31 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      __src = v27;
      __int128 v32 = v31 | ((void)v27 << 6);
      goto LABEL_25;
    }

    __int128 v37 = (int64_t)(v27 + 1);
    if (__OFADD__(v27, 1LL))
    {
      __break(1u);
      goto LABEL_81;
    }

    if (v37 >= v59) {
      goto LABEL_47;
    }
    __int128 v38 = *(void *)(v58 + 8 * v37);
    int v39 = (int64_t)(v27 + 1);
    if (!v38)
    {
      int v39 = (int64_t)(v27 + 2);
      __int128 v38 = *(void *)(v58 + 8 * v39);
      if (!v38)
      {
        int v39 = (int64_t)(v27 + 3);
        __int128 v38 = *(void *)(v58 + 8 * v39);
        if (!v38)
        {
          int v39 = (int64_t)(v27 + 4);
          __int128 v38 = *(void *)(v58 + 8 * v39);
          if (!v38)
          {
            int v39 = (int64_t)(v27 + 5);
            __int128 v38 = *(void *)(v58 + 8 * v39);
            if (!v38)
            {
              int v39 = (int64_t)(v27 + 6);
              __int128 v38 = *(void *)(v58 + 8 * v39);
              if (!v38) {
                break;
              }
            }
          }
        }
      }
    }

      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    specialized _NativeDictionary._delete(at:)(v21, v26);
    os_unfair_lock_s *v6 = v26;
    swift_bridgeObjectRelease();
LABEL_49:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  __int128 v11 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v77 = *v4;
  __int128 v12 = *v4;
  *Swift::String v4 = 0x8000000000000000LL;
  uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  int v15 = *(void *)(v12 + 16);
  CFIndex v16 = (v13 & 1) == 0;
  id v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    Swift::String v5 = v13;
    if (*(void *)(v12 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, v11);
      int v18 = v77;
      int v19 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
      if ((v5 & 1) != (v20 & 1)) {
        goto LABEL_84;
      }
      uint64_t v14 = v19;
      if ((v5 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_13:
      __int128 v27 = (uint64_t *)(*(void *)(v18 + 56) + 16 * v14);
      swift_bridgeObjectRelease();
      *__int128 v27 = a1;
      v27[1] = a2;
LABEL_48:
      os_unfair_lock_s *v6 = v18;
      goto LABEL_49;
    }

    if ((v11 & 1) != 0)
    {
      int v18 = v12;
      if ((v13 & 1) != 0) {
        goto LABEL_13;
      }
LABEL_47:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, (void *)v18);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  int v18 = v28;
  if (!*(void *)(v12 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }

  char v29 = (void *)(v28 + 64);
  uint64_t v30 = (unint64_t)((1LL << *(_BYTE *)(v18 + 32)) + 63) >> 6;
  __int128 v31 = 0LL;
  *(void *)(v18 + 16) = *(void *)(v12 + 16);
  __int128 v32 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v33 = -1LL;
  if (v32 < 64) {
    uint64_t v33 = ~(-1LL << v32);
  }
  uint64_t v34 = v33 & *(void *)(v12 + 64);
  v73 = v12 + 64;
  int v74 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      double v75 = (v34 - 1) & v34;
      v76 = v31;
      char v35 = __clz(__rbit64(v34)) | (v31 << 6);
      goto LABEL_24;
    }

    unsigned __int8 v45 = v31 + 1;
    if (__OFADD__(v31, 1LL))
    {
      __break(1u);
      goto LABEL_81;
    }

    if (v45 >= v74) {
      goto LABEL_46;
    }
    int v46 = *(void *)(v73 + 8 * v45);
    unint64_t v47 = v31 + 1;
    if (!v46)
    {
      unint64_t v47 = v31 + 2;
      if (v31 + 2 >= v74) {
        goto LABEL_46;
      }
      int v46 = *(void *)(v73 + 8 * v47);
      if (!v46)
      {
        unint64_t v47 = v31 + 3;
        if (v31 + 3 >= v74) {
          goto LABEL_46;
        }
        int v46 = *(void *)(v73 + 8 * v47);
        if (!v46)
        {
          unint64_t v47 = v31 + 4;
          if (v31 + 4 >= v74) {
            goto LABEL_46;
          }
          int v46 = *(void *)(v73 + 8 * v47);
          if (!v46)
          {
            unint64_t v47 = v31 + 5;
            if (v31 + 5 >= v74) {
              goto LABEL_46;
            }
            int v46 = *(void *)(v73 + 8 * v47);
            if (!v46)
            {
              unint64_t v47 = v31 + 6;
              if (v31 + 6 >= v74) {
                goto LABEL_46;
              }
              int v46 = *(void *)(v73 + 8 * v47);
              if (!v46) {
                break;
              }
            }
          }
        }
      }
    }

        swift_bridgeObjectRelease();
      }

      outlined init with take of Any((_OWORD *)(*(void *)(v21 + 56) + 32 * v16), v65);
      specialized _NativeDictionary._delete(at:)(v16, v21);
      *Swift::String v4 = v21;

      swift_bridgeObjectRelease();
    }

    else
    {
      memset(v65, 0, sizeof(v65));
    }

    return outlined destroy of Any?((uint64_t)v65, &demangling cache variable for type metadata for Any?);
  }

  outlined init with take of Any((_OWORD *)a1, v65);
  uint64_t v6 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = *v2;
  uint64_t v7 = v64;
  *Swift::String v2 = 0x8000000000000000LL;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v10 = *(void *)(v7 + 16);
  __int128 v11 = (v8 & 1) == 0;
  __int128 v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    Swift::String v3 = v8;
    if (*(void *)(v7 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, v6);
      uint64_t v13 = v64;
      uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v15 & 1)) {
        goto LABEL_84;
      }
      unint64_t v9 = v14;
      if ((v3 & 1) == 0) {
        goto LABEL_48;
      }
LABEL_13:
      uint64_t v22 = (_OWORD *)(*(void *)(v13 + 56) + 32 * v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      outlined init with take of Any(v65, v22);
LABEL_49:
      *Swift::String v4 = v13;

      return swift_bridgeObjectRelease();
    }

    if ((v6 & 1) != 0)
    {
      uint64_t v13 = v7;
      if ((v8 & 1) != 0) {
        goto LABEL_13;
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v9, a2, v65, v13);
      unint64_t v41 = a2;
      goto LABEL_49;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSURLResourceKey, Any>);
  uint64_t v24 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v24;
  if (!*(void *)(v7 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }

  __int128 v25 = (void *)(v24 + 64);
  __int128 v26 = (unint64_t)((1LL << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  __int128 v27 = 0LL;
  *(void *)(v13 + 16) = *(void *)(v7 + 16);
  uint64_t v28 = 1LL << *(_BYTE *)(v7 + 32);
  char v29 = -1LL;
  if (v28 < 64) {
    char v29 = ~(-1LL << v28);
  }
  uint64_t v30 = v29 & *(void *)(v7 + 64);
  unint64_t v58 = v7 + 64;
  int v59 = (unint64_t)(v28 + 63) >> 6;
  while (1)
  {
    if (v30)
    {
      __int128 v31 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      __src = v27;
      __int128 v32 = v31 | ((void)v27 << 6);
      goto LABEL_25;
    }

    __int128 v37 = (int64_t)(v27 + 1);
    if (__OFADD__(v27, 1LL))
    {
      __break(1u);
      goto LABEL_81;
    }

    if (v37 >= v59) {
      goto LABEL_47;
    }
    __int128 v38 = *(void *)(v58 + 8 * v37);
    int v39 = (int64_t)(v27 + 1);
    if (!v38)
    {
      int v39 = (int64_t)(v27 + 2);
      __int128 v38 = *(void *)(v58 + 8 * v39);
      if (!v38)
      {
        int v39 = (int64_t)(v27 + 3);
        __int128 v38 = *(void *)(v58 + 8 * v39);
        if (!v38)
        {
          int v39 = (int64_t)(v27 + 4);
          __int128 v38 = *(void *)(v58 + 8 * v39);
          if (!v38)
          {
            int v39 = (int64_t)(v27 + 5);
            __int128 v38 = *(void *)(v58 + 8 * v39);
            if (!v38)
            {
              int v39 = (int64_t)(v27 + 6);
              __int128 v38 = *(void *)(v58 + 8 * v39);
              if (!v38) {
                break;
              }
            }
          }
        }
      }
    }

          unint64_t v87 = (v74 - 1) & v74;
          unint64_t v83 = v75;
          unint64_t v63 = __clz(__rbit64(v74)) + (v75 << 6);
        }

        uint64_t v64 = 16 * v63;
        int v65 = (uint64_t *)(*(void *)(v23 + 48) + 16 * v63);
        unint64_t v66 = v65[1];
        v85 = *v65;
        char v67 = 72 * v63;
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v23 + 56) + 72 * v63, (uint64_t)&v93);
        uint64_t v68 = (void *)(*(void *)(v24 + 48) + v64);
        *uint64_t v68 = v85;
        v68[1] = v66;
        unsigned int v69 = *(void *)(v24 + 56) + v67;
        *(_OWORD *)unsigned int v69 = v93;
        uint64_t v70 = v94;
        uint64_t v71 = v95;
        uint64_t v72 = v96;
        *(void *)(v69 + 64) = v97;
        *(_OWORD *)(v69 + 32) = v71;
        *(_OWORD *)(v69 + 4_Block_object_dispose((const void *)(v17 - 128), 8) = v72;
        *(_OWORD *)(v69 + 16) = v70;
        swift_bridgeObjectRetain();
      }
    }

    uint64_t v97 = 0LL;
    uint64_t v95 = 0u;
    uint64_t v96 = 0u;
    unint64_t v93 = 0u;
    unint64_t v94 = 0u;
    goto LABEL_49;
  }

  v91[2] = v95;
  v91[3] = v96;
  unint64_t v92 = v97;
  v91[0] = v93;
  v91[1] = v94;
  outlined init with copy of AttributedString._AttributeValue((uint64_t)v91, (uint64_t)v89);
  unint64_t v9 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v88 = *v3;
  uint64_t v10 = *v3;
  id *v3 = 0x8000000000000000LL;
  __int128 v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  uint64_t v14 = (v11 & 1) == 0;
  int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    Swift::String v4 = v11;
    if (*(void *)(v10 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, v9);
      CFIndex v16 = v88;
      id v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v18 & 1)) {
        goto LABEL_85;
      }
      __int128 v12 = v17;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_13:
      char v29 = *(void *)(v16 + 56) + 72 * v12;
      unint64_t v93 = *(_OWORD *)v29;
      uint64_t v30 = *(_OWORD *)(v29 + 16);
      __int128 v31 = *(_OWORD *)(v29 + 32);
      __int128 v32 = *(_OWORD *)(v29 + 48);
      uint64_t v97 = *(void *)(v29 + 64);
      uint64_t v95 = v31;
      uint64_t v96 = v32;
      unint64_t v94 = v30;
      uint64_t v33 = v89[1];
      uint64_t v34 = v89[2];
      char v35 = v89[3];
      *(void *)(v29 + 64) = v90;
      *(_OWORD *)(v29 + 32) = v34;
      *(_OWORD *)(v29 + 4_Block_object_dispose((const void *)(v17 - 128), 8) = v35;
      *(_OWORD *)char v29 = v89[0];
      *(_OWORD *)(v29 + 16) = v33;
LABEL_48:
      *Swift::String v5 = v16;
      swift_bridgeObjectRelease();
      outlined destroy of AttributedString._AttributeValue((uint64_t)v91);
      goto LABEL_49;
    }

    if ((v9 & 1) != 0)
    {
      CFIndex v16 = v10;
      if ((v11 & 1) != 0) {
        goto LABEL_13;
      }
LABEL_47:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, (uint64_t)v89, (void *)v16);
      uint64_t v97 = 0LL;
      uint64_t v95 = 0u;
      uint64_t v96 = 0u;
      unint64_t v93 = 0u;
      unint64_t v94 = 0u;
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
  uint64_t v36 = static _DictionaryStorage.copy(original:)();
  CFIndex v16 = v36;
  if (!*(void *)(v10 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }

  __int128 v37 = (void *)(v36 + 64);
  __int128 v38 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  int v39 = 0LL;
  *(void *)(v16 + 16) = *(void *)(v10 + 16);
  unint64_t v40 = 1LL << *(_BYTE *)(v10 + 32);
  unint64_t v41 = -1LL;
  if (v40 < 64) {
    unint64_t v41 = ~(-1LL << v40);
  }
  unint64_t v42 = v41 & *(void *)(v10 + 64);
  unint64_t v77 = v10 + 64;
  unint64_t v78 = (unint64_t)(v40 + 63) >> 6;
  while (1)
  {
    if (v42)
    {
      v84 = (v42 - 1) & v42;
      v86 = v39;
      unint64_t v43 = __clz(__rbit64(v42)) | (v39 << 6);
      goto LABEL_24;
    }

    unint64_t v52 = v39 + 1;
    if (__OFADD__(v39, 1LL))
    {
      __break(1u);
      goto LABEL_82;
    }

    if (v52 >= v78) {
      goto LABEL_46;
    }
    unint64_t v53 = *(void *)(v77 + 8 * v52);
    unint64_t v54 = v39 + 1;
    if (!v53)
    {
      unint64_t v54 = v39 + 2;
      if (v39 + 2 >= v78) {
        goto LABEL_46;
      }
      unint64_t v53 = *(void *)(v77 + 8 * v54);
      if (!v53)
      {
        unint64_t v54 = v39 + 3;
        if (v39 + 3 >= v78) {
          goto LABEL_46;
        }
        unint64_t v53 = *(void *)(v77 + 8 * v54);
        if (!v53)
        {
          unint64_t v54 = v39 + 4;
          if (v39 + 4 >= v78) {
            goto LABEL_46;
          }
          unint64_t v53 = *(void *)(v77 + 8 * v54);
          if (!v53)
          {
            unint64_t v54 = v39 + 5;
            if (v39 + 5 >= v78) {
              goto LABEL_46;
            }
            unint64_t v53 = *(void *)(v77 + 8 * v54);
            if (!v53)
            {
              unint64_t v54 = v39 + 6;
              if (v39 + 6 >= v78) {
                goto LABEL_46;
              }
              unint64_t v53 = *(void *)(v77 + 8 * v54);
              if (!v53) {
                break;
              }
            }
          }
        }
      }
    }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
      swift_release();
      outlined consume of Data._Representation(v94, *((unint64_t *)&v94 + 1));
LABEL_80:
      *((void *)v11 + 20) = v91;
      uint64_t v21 = (unint64_t *)(v91 & 0x3FFFFFFFFFFFFFFFLL);
      swift_retain();
      swift_release();
      v76 = (void *)*((void *)v11 + 2);
      if (v76[2])
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v85 = v76[2];
          if (v85)
          {
LABEL_83:
            v76[2] = v85 - 1;
            *((void *)v11 + 2) = v76;
            swift_release();
            goto LABEL_84;
          }

    unint64_t v53 = static String._fromUTF8Repairing(_:)();
    BOOL v55 = v54;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)int v56 = v53;
    *(void *)(v56 + _Block_object_dispose((const void *)(v17 - 128), 8) = v55;
    *(_OWORD *)(v56 + 16) = 0u;
    *(_OWORD *)(v56 + 32) = 0u;
    unint64_t v57 = 11;
    goto LABEL_80;
  }

  id v17 = (unsigned __int8 *)specialized BufferView.suffix(from:)(a6, (uint64_t)v13, a3);
  int v19 = v17;
  unint64_t i = v18;
  uint64_t v8 = &v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      unint64_t v48 = v17;
      goto LABEL_95;
    }

    int v46 = 0LL;
    unint64_t v47 = v18;
    while (1)
    {
      if (v46 < 0 || (__int128 v32 = v47 < 1, --v47, v32))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
        goto LABEL_250;
      }

      unint64_t v48 = &v17[++v46];
      if (&v17[v46] >= v8) {
        goto LABEL_95;
      }
    }

      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }

    unint64_t v52 = posix_spawn_file_actions_adddup2(&v117, v103, i);
    BOOL v50 = 0xFFFFFFFFLL;
    if ((_DWORD)v52)
    {
LABEL_103:
      for (j = 0LL; j != 12; j += 4LL)
      {
        pthread_t v61 = *(_DWORD *)((char *)&v118 + j);
        if (v61 != -1) {
          close(v61);
        }
      }

      if (v98) {
        [v98 closeFile];
      }
      if (v99) {
        [v99 closeFile];
      }
      if (v46 && v46 != v99) {
        [v46 closeFile];
      }
      posix_spawn_file_actions_destroy(&v117);
      if ((_DWORD)v103 != -1) {
        close(v103);
      }
      if (v97) {
        free(v102);
      }
      if (v107)
      {
        if (v108)
        {
          unint64_t v62 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSPOSIXErrorDomain",  (int)v52,  0LL);
LABEL_121:
          __int128 v11 = 0;
          *v108 = v62;
          goto LABEL_194;
        }

        goto LABEL_193;
      }

      unint64_t v89 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to set posix_spawn_file_actions for fd %d at index %d with errno %d",  v50,  i,  v52);
      objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:v89 userInfo:0]);
      goto LABEL_206;
    }
  }

  posix_spawnattr_init(&v116);
  v115 = 0;
  v114 = -1;
  posix_spawnattr_setsigmask(&v116, &v115);
  posix_spawnattr_setsigdefault(&v116, &v114);
  if (-[objc_class objectForKey:]( (&self->super.super.isa)[v109 / 8],  "objectForKey:",  @"_NSTaskNoNewProcessGroup"))
  {
    unint64_t v53 = 16396;
  }

  else
  {
    unint64_t v53 = 16398;
  }

  unint64_t v54 = posix_spawnattr_setflags(&v116, v53);
  BOOL v55 = v54;
  qos = self->_qos;
  unint64_t v57 = qos == QOS_CLASS_BACKGROUND || qos == QOS_CLASS_UTILITY;
  if (v57 && !(_DWORD)v54) {
    BOOL v55 = posix_spawnattr_set_qos_class_np(&v116, qos);
  }
  if (v94 >= 1 && !(_DWORD)v55) {
    BOOL v55 = posix_spawnattr_setbinpref_np(&v116, v94, v131, &v113);
  }
  if (v48) {
    amfi_launch_constraint_set_spawnattr((uint64_t)&v116, [v48 bytes], objc_msgSend(v48, "length"));
  }
  unint64_t v58 = 0LL;
  int v59 = -1;
  if (v95 && !(_DWORD)v55)
  {
    int v59 = open(".", 0);
    if (__pthread_fchdir() == -1 && v59 != -1)
    {
      close(v59);
      int v59 = -1;
    }

    else {
      unint64_t v58 = 0LL;
    }
  }

  for (k = 0LL; k != 12; k += 4LL)
  {
    uint64_t v64 = *(_DWORD *)((char *)&v118 + k);
    if (v64 != -1) {
      close(v64);
    }
  }

  if (v98) {
    [v98 closeFile];
  }
  if (v99) {
    [v99 closeFile];
  }
  if (v46 && v46 != v99) {
    [v46 closeFile];
  }
  posix_spawnattr_destroy(&v116);
  posix_spawn_file_actions_destroy(&v117);
  if ((_DWORD)v103 != -1) {
    close(v103);
  }
  if (v97) {
    free(v102);
  }
  if (!(_DWORD)v55)
  {
    if ((_DWORD)v58)
    {
      if (!v107)
      {
        unint64_t v92 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to set working directory to %s with error %d",  v95,  v58);
        objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:v92 userInfo:0]);
        goto LABEL_206;
      }

      if (v108)
      {
        unint64_t v62 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSPOSIXErrorDomain",  (int)v58,  0LL);
        goto LABEL_121;
      }

      goto LABEL_193;
    }

uint64_t NSKeyValueGetImplicitObservanceAdditionInfo()
{
  uint64_t v0 = _CFGetTSD();
  if (!v0)
  {
    Swift::String v1 = malloc_default_zone();
    uint64_t v0 = (uint64_t)malloc_zone_calloc(v1, 1uLL, 0x58uLL);
    _CFSetTSD();
  }

  return v0 + 16;
}

void sub_182ED5894( void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  if (a2 == 2)
  {
    if (objc_msgSend( (id)objc_msgSend(objc_begin_catch(exc_buf), "name"),  "isEqualToString:",  *MEMORY[0x189603B40]))
    {
      objc_opt_class();
      *(void *)(v29 - 8_Block_object_dispose((const void *)(v17 - 128), 8) = *(void *)(*(void *)(v29 - 88) + 8LL);
      *(void *)(v29 - 104) = [v26 keyPath];
      objc_opt_class();
      objc_opt_class();
      uint64_t v30 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot update for observer <%@ %p> for the key path %@ from <%@ %p>, most likely because the value for the key %@ has changed without an appropriate KVO notification being sent. Check the KVO-compliance of the %@ class.");
      objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:v30 userInfo:0]);
    }

    else
    {
      objc_exception_rethrow();
    }
  }

  else
  {
    objc_begin_catch(exc_buf);
    *(void *)uint64_t v24 = a18;
    *(void *)(v24 + _Block_object_dispose((const void *)(v17 - 128), 8) = v25;
    *(void *)(v24 + 16) = a19;
    *(void *)(v24 + 24) = v27;
    *(void *)(v24 + 32) = v28;
    *(_BYTE *)(v24 + 40) = a21;
    objc_exception_rethrow();
  }

  __break(1u);
}

void sub_182ED59C4()
{
}

uint64_t NSKeyValueGetImplicitObservanceRemovalInfo()
{
  uint64_t v0 = _CFGetTSD();
  if (!v0)
  {
    Swift::String v1 = malloc_default_zone();
    uint64_t v0 = (uint64_t)malloc_zone_calloc(v1, 1uLL, 0x58uLL);
    _CFSetTSD();
  }

  return v0 + 32;
}

void sub_182ED5AC8(void *a1)
{
}

void sub_182ED5AE0(_Unwind_Exception *a1)
{
}

void *NSKeyValuePropertyForIsaAndKeyPath(objc_class *a1, void *a2)
{
  value[3] = *MEMORY[0x1895F89C0];
  value[0] = 0LL;
  value[1] = _NSKeyValueContainerClassForIsa(a1);
  value[2] = a2;
  if (!NSKeyValueProperties || (Swift::String v4 = (void *)CFSetGetValue((CFSetRef)NSKeyValueProperties, value)) == 0LL)
  {
    __int128 v5 = *(_OWORD *)(MEMORY[0x189605258] + 16LL);
    *(_OWORD *)&v8.version = *MEMORY[0x189605258];
    *(_OWORD *)&v8.release = v5;
    v8.equal = (CFSetEqualCallBack)NSKeyValuePropertyIsEqual;
    v8.hash = (CFSetHashCallBack)NSKeyValuePropertyHash;
    uint64_t v6 = CFSetCreateMutable(0LL, 0LL, &v8);
    Swift::String v4 = NSKeyValuePropertyForIsaAndKeyPathInner(a1, a2, v6);
    CFRelease(v6);
  }

  return v4;
}

void sub_182ED5BE0(_Unwind_Exception *a1)
{
}

uint64_t _NSKeyValueContainerClassForIsa(objc_class *a1)
{
  if ((objc_class *)_MergedGlobals_99 != a1)
  {
    Swift::String v2 = _NSKVONotifyingOriginalClassForIsa(a1);
    if (qword_18C496650)
    {
      Value = (NSKeyValueContainerClass *)CFDictionaryGetValue((CFDictionaryRef)qword_18C496650, v2);
      if (Value)
      {
LABEL_8:
        _MergedGlobals_99 = (uint64_t)a1;
        qword_18C496648 = (uint64_t)Value;
        return (uint64_t)Value;
      }
    }

    else
    {
      qword_18C496650 = (uint64_t)CFDictionaryCreateMutable(0LL, 0LL, 0LL, MEMORY[0x189605250]);
    }

    Value = -[NSKeyValueContainerClass initWithOriginalClass:]( objc_alloc(&OBJC_CLASS___NSKeyValueContainerClass),  "initWithOriginalClass:",  v2);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_18C496650, v2, Value);

    goto LABEL_8;
  }

  return qword_18C496648;
}

uint64_t NSKeyValuePropertyHash(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  return [*(id *)(a1 + 16) hash] ^ v1;
}

uint64_t NSKeyValuePropertyIsEqual(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    return 0LL;
  }
  Swift::String v3 = *(void **)(a1 + 16);
  else {
    return objc_msgSend(v3, "isEqual:");
  }
}

LABEL_24:
    uint64_t v22 = objc_opt_class();
    int v23 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603B40], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"Cannot remove an observer <%@ %p> for the key path %@ from <%@ %p> because it is not registered as an observer.", v22, a3, objc_msgSend(a4, "keyPath"), objc_opt_class(), self), 0 reason userInfo];
    objc_exception_throw(v23);
    __break(1u);
    return;
  }

  if ((objc_opt_respondsToSelector() & 1) == 0) {
    goto LABEL_24;
  }
  int v18 = _CFGetTSD();
  if (v18)
  {
    int v19 = *(void *)(v18 + 8);
    if (v19)
    {
      while (*(NSObject **)v19 != self)
      {
        int v19 = *(void *)(v19 + 16);
        if (!v19) {
          return;
        }
      }

      *(void *)(v19 + _Block_object_dispose((const void *)(v17 - 128), 8) = 0LL;
    }
  }

    __break(1u);
    return result;
  }

  switch(v3)
  {
    case 'c':
      return result;
    case 'd':
      return 13LL;
    case 'e':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'r':
      goto LABEL_24;
    case 'f':
      return 12LL;
    case 'i':
      goto LABEL_15;
    case 'l':
      return 10LL;
    case 'q':
      return 11LL;
    case 's':
      return 8LL;
    default:
      if (v3 == 81)
      {
        uint64_t result = 17LL;
      }

      else
      {
        if (v3 != 83) {
          goto LABEL_24;
        }
LABEL_15:
        uint64_t result = 9LL;
      }

      break;
  }

  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v50)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    CFIndex v16 = v51;
    if (!v51) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v16);
    swift_bridgeObjectRelease();
    id v17 = v52;
    if (!v52) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }

    if (v12) {
      goto LABEL_58;
    }
LABEL_25:
    uint64_t v20 = (4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C;
    int v19 = ((-15LL << v20) - 1) & v19 | (v21 << v20);
    uint64_t v10 = *(void *)(v10 + 24 + 24 * v21);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
  }

  while (*(_BYTE *)(v10 + 18));
  v19 &= 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v27 = *(unsigned __int16 *)(v10 + 16);
  if (*(_WORD *)(v10 + 16)) {
    goto LABEL_42;
  }
LABEL_53:
  if (!v12)
  {
LABEL_54:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v9 = v19 | (v27 << 8);
    uint64_t v6 = v34;
    __int128 v11 = v33;
LABEL_12:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v6, v9, v10, v2, v11);
    uint64_t result = swift_unknownObjectRelease_n();
LABEL_13:
    uint64_t v13 = __OFSUB__(v3, v12);
    uint64_t v14 = v3 - v12;
    if (!v13)
    {
      if (v6 == *(void *)(v1 + 88))
      {
        if (v10)
        {
          int v15 = *(void *)(v10 + 24 * ((v9 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          CFIndex v16 = *(void *)(v1 + 64);
          swift_unknownObjectRetain();
          int v15 = specialized Rope._Node.subscript.getter(v9, v16);
          swift_unknownObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v17 = *(_OWORD *)(v1 + 32);
        uint64_t v36 = *(_OWORD *)(v1 + 16);
        __int128 v37 = v17;
        __int128 v38 = *(_OWORD *)(v1 + 48);
        uint64_t result = BigString.utf8.getter();
        if (!__OFADD__(v14, v15))
        {
          if (!__OFSUB__(v14 + v15, v3))
          {
            int v18 = BigString.UTF8View.index(_:offsetBy:)();
            outlined release of Locale((uint64_t)v35);
            return v18;
          }

      uint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_29:
      switch(v21)
      {
        case '!':
        case '$':
        case '\'':
        case '(':
        case ')':
        case '*':
        case ',':
LABEL_30:
          uint64_t v25 = a5 & 0xF6;
          goto LABEL_44;
        case '&':
LABEL_9:
          if ((a5 & 0x76) != 0) {
            goto LABEL_10;
          }
          goto LABEL_45;
        case '+':
          uint64_t v25 = a5 & 0xF7;
          goto LABEL_44;
        case '-':
        case '.':
          goto LABEL_43;
        case '/':
LABEL_34:
          if (a5 < 0x10u) {
            goto LABEL_45;
          }
          goto LABEL_10;
        default:
          if ((v21 - 58) <= 0xF5u)
          {
            switch(v21)
            {
              case ':':
                uint64_t v25 = a5 & 0xD2;
                goto LABEL_44;
              case ';':
                goto LABEL_30;
              case '=':
                goto LABEL_9;
              case '?':
                if (a5 < 0x40u) {
                  goto LABEL_45;
                }
                goto LABEL_10;
              case '@':
                goto LABEL_34;
              default:
                if (v21 == 95) {
                  goto LABEL_41;
                }
                if (v21 != 126) {
                  goto LABEL_45;
                }
LABEL_41:
                if (a5 < 2u) {
                  goto LABEL_45;
                }
                goto LABEL_10;
            }
          }

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v22);
          swift_bridgeObjectRelease();
LABEL_25:
          uint64_t v24 = v93;
          __int128 v26 = v94;
          uint64_t v25 = v95;
          uint64_t v27 = v96;
          v76 = v96;
          unint64_t v77 = v92;
          if (v92)
          {
            v80 = v2;
            uint64_t v28 = v92;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v29 = v24;
            uint64_t v30 = v26;
            __int128 v31 = v25;
            __int128 v32 = v27;
            uint64_t v33 = v28;
            Swift::String v4 = v80;
            _CFObject.hash(into:)();
          }

          else
          {
            Hasher._combine(_:)(0);
            uint64_t v34 = v27;
            char v35 = v24;
            uint64_t v36 = v26;
            __int128 v37 = v25;
          }

          v80 = v25;
          __int128 v38 = v4;
          if (v24)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            int v39 = v24;
            unint64_t v40 = v24;
            unint64_t v41 = v26;
            unint64_t v42 = v40;
            _CFObject.hash(into:)();

            __int128 v26 = v41;
            unint64_t v78 = v41;
            if (v41)
            {
LABEL_30:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              unint64_t v43 = v26;
              _CFObject.hash(into:)();

              goto LABEL_33;
            }
          }

          else
          {
            int v39 = 0LL;
            Hasher._combine(_:)(0);
            unint64_t v78 = v26;
            if (v26) {
              goto LABEL_30;
            }
          }

          Hasher._combine(_:)(0);
LABEL_33:
          unint64_t v44 = v80;
          unsigned __int8 v45 = v39;
          Swift::String v4 = v38;
          int v46 = v76;
          if (v80)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            unint64_t v47 = v44;
            _CFObject.hash(into:)();

            if (v46)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              unint64_t v48 = v46;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            if (v46) {
              goto LABEL_35;
            }
          }

          Hasher._combine(_:)(0);
          unint64_t v48 = 0LL;
LABEL_38:
          int64_t v49 = v80;
          BOOL v50 = v78;

          unint64_t v51 = v97;
          if (v51)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v51);
            swift_bridgeObjectRelease();
          }

          else
          {
            Hasher._combine(_:)(0);
          }

          a2 = v79;
          unint64_t v52 = v98;
          if (v98)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v52);
            swift_bridgeObjectRelease();
            if (v99)
            {
LABEL_43:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_46:
              CFIndex v16 = v82;
              if (v100 == 2)
              {
                Hasher._combine(_:)(0);
              }

              else
              {
                unint64_t v53 = v100 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v53);
              }

              if (v101 == 2)
              {
                Hasher._combine(_:)(0);
              }

              else
              {
                unint64_t v54 = v101 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v54);
              }

              if (v102 == 2)
              {
                BOOL v55 = 0;
              }

              else
              {
                BOOL v55 = v102 & 1;
                Hasher._combine(_:)(1u);
              }

              Hasher._combine(_:)(v55);
              if (v103 == 2)
              {
                int v56 = 0;
              }

              else
              {
                unint64_t v57 = v103 & 1;
                Hasher._combine(_:)(1u);
                int v56 = v57;
              }

              Hasher._combine(_:)(v56);
              outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_59;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            if (v99) {
              goto LABEL_43;
            }
          }

          Hasher._combine(_:)(0);
          goto LABEL_46;
        }

  uint64_t v22 = v18 * a1;
  if ((unsigned __int128)(v18 * (__int128)a1) >> 64 != (v18 * a1) >> 63)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }

  if (v22 == 0x7FFFFFFFFFFFFFFFLL) {
    int v18 = 0LL;
  }
  else {
    v18 *= a1;
  }
  BOOL v50 = v22 == 0x7FFFFFFFFFFFFFFFLL;
  int v19 = __dst[10];
  if ((__dst[11] & 1) != 0)
  {
LABEL_8:
    if ((__dst[15] & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }

  Hasher._combine(_:)(0);
  if (!v32)
  {
LABEL_9:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
    if (!v33) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  Hasher._combine(_:)(0);
  if (!v32)
  {
LABEL_9:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
    if (!v33) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  __break(1u);
}

  __break(1u);
}

  if ((_DWORD)v5)
  {
LABEL_25:
    if ((_WORD)a3) {
      goto LABEL_26;
    }
    if (v8)
    {
LABEL_29:
      int v19 = HIDWORD(a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      uint64_t v20 = swift_allocObject();
      *(void *)&uint64_t result = 8LL;
      *(_OWORD *)(v20 + 16) = xmmword_183729E00;
      *(_WORD *)(v20 + 32) = v19;
      *(_WORD *)(v20 + 34) = v9;
      *(_WORD *)(v20 + 36) = v6;
      *(_WORD *)(v20 + 3_Block_object_dispose((const void *)(v17 - 128), 8) = v3;
      *(_WORD *)(v20 + 40) = v4;
      *(_WORD *)(v20 + 42) = v5;
      *(_WORD *)(v20 + 44) = v7;
      *(_WORD *)(v20 + 46) = v8;
      return result;
    }

    uint64_t v25 = HIDWORD(a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
    __int128 v26 = swift_allocObject();
    *(void *)&uint64_t result = 6LL;
    *(_OWORD *)(v26 + 16) = xmmword_183729DE0;
    *(_WORD *)(v26 + 32) = v25;
    *(_WORD *)(v26 + 34) = v9;
    *(_WORD *)(v26 + 36) = v6;
    *(_WORD *)(v26 + 3_Block_object_dispose((const void *)(v17 - 128), 8) = v3;
    *(_WORD *)(v26 + 40) = v4;
    *(_WORD *)(v26 + 42) = v5;
    return result;
  }

  if ((unsigned __int16)a3 | v8)
  {
LABEL_21:
    if (!(_WORD)a3)
    {
      if (!v8)
      {
        int v15 = HIDWORD(a1);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
        CFIndex v16 = swift_allocObject();
        *(void *)&uint64_t result = 5LL;
        *(_OWORD *)(v16 + 16) = xmmword_183729E10;
        *(_WORD *)(v16 + 32) = v15;
        *(_WORD *)(v16 + 34) = v9;
        *(_WORD *)(v16 + 36) = v6;
        *(_WORD *)(v16 + 3_Block_object_dispose((const void *)(v17 - 128), 8) = v3;
        *(_WORD *)(v16 + 40) = v4;
        return result;
      }

      goto LABEL_29;
    }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v12);
  swift_bridgeObjectRelease();
LABEL_25:
  int v15 = v46;
  uint64_t v14 = v47;
  id v17 = v48;
  CFIndex v16 = v49;
  int v18 = v50;
  if (v46)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v19 = v14;
    uint64_t v20 = v17;
    uint64_t v21 = v16;
    uint64_t v22 = v18;
    int v23 = v15;
    _CFObject.hash(into:)();
    if (v14) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v28 = v18;
    uint64_t v29 = v14;
    uint64_t v30 = v17;
    __int128 v31 = v16;
    if (v14)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v24 = v14;
      _CFObject.hash(into:)();

      if (v17) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v17)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v25 = v17;
    _CFObject.hash(into:)();

    if (v16) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v18) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v60, v10);
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v13 = v45;
  __int128 v12 = v46;
  int v15 = v47;
  uint64_t v14 = v48;
  CFIndex v16 = v49;
  if (v45)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    id v17 = v12;
    int v18 = v15;
    int v19 = v14;
    uint64_t v20 = v16;
    uint64_t v21 = v13;
    _CFObject.hash(into:)();
    if (v12) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    __int128 v26 = v16;
    uint64_t v27 = v12;
    uint64_t v28 = v15;
    uint64_t v29 = v14;
    if (v12)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v22 = v12;
      _CFObject.hash(into:)();

      if (v15) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v15)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v23 = v15;
    _CFObject.hash(into:)();

    if (v14) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v16) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

  __break(1u);
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v13);
  swift_bridgeObjectRelease();
LABEL_25:
  CFIndex v16 = v48;
  int v15 = v49;
  int v18 = v50;
  id v17 = v51;
  int v19 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v20 = v15;
    uint64_t v21 = v18;
    uint64_t v22 = v17;
    int v23 = v19;
    uint64_t v24 = v16;
    _CFObject.hash(into:)();
    if (v15) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v29 = v19;
    uint64_t v30 = v15;
    __int128 v31 = v18;
    __int128 v32 = v17;
    if (v15)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v25 = v15;
      _CFObject.hash(into:)();

      if (v18) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v18)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    __int128 v26 = v18;
    _CFObject.hash(into:)();

    if (v17) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v19) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

      __break(1u);
      goto LABEL_25;
    }

    return 0LL;
  }

  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v24);
  swift_bridgeObjectRelease();
LABEL_25:
  __int128 v26 = v78;
  uint64_t v27 = v79;
  uint64_t v28 = v80;
  uint64_t v29 = v81;
  unint64_t v63 = v9;
  uint64_t v64 = v77;
  pthread_t v61 = v81;
  unint64_t v62 = v79;
  if (v77)
  {
    uint64_t v30 = v78;
    __int128 v31 = v79;
    __int128 v32 = v77;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    unint64_t v66 = v33;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v34 = v30;
    char v35 = v31;
    __int128 v26 = v30;
    uint64_t v36 = v28;
    __int128 v37 = v29;
    __int128 v38 = v32;
    _CFObject.hash(into:)();
    unint64_t v66 = v28;
    if (v30) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    int v46 = v29;
    unint64_t v47 = v26;
    unint64_t v48 = v27;
    int64_t v49 = v28;
    unint64_t v66 = v28;
    if (v26)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      int v39 = v26;
      _CFObject.hash(into:)();

      unint64_t v40 = v62;
      unint64_t v9 = v63;
      if (v62) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  unint64_t v40 = v62;
  unint64_t v9 = v63;
  if (v62)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v41 = v40;
    _CFObject.hash(into:)();

    unint64_t v42 = v66;
    if (v66) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    unint64_t v44 = v61;
    if (v61) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v89, v24);
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v27 = v74;
  __int128 v26 = v75;
  uint64_t v28 = v76;
  uint64_t v29 = v77;
  uint64_t v30 = v78;
  size_t v60 = v8;
  pthread_t v61 = v78;
  int v59 = v76;
  if (v74)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    __int128 v31 = v26;
    __int128 v32 = v28;
    uint64_t v33 = v29;
    uint64_t v34 = v29;
    char v35 = v30;
    uint64_t v36 = v27;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    __int128 v37 = v30;
    __int128 v38 = v26;
    int v39 = v28;
    uint64_t v33 = v29;
    unint64_t v40 = v29;
  }

  unint64_t v62 = v27;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v41 = v26;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  unint64_t v42 = v33;
  unint64_t v43 = v59;
  CFSetCallBacks v8 = v60;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v44 = v43;
    _CFObject.hash(into:)();

    if (v42) {
      goto LABEL_33;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    int v46 = v61;
    if (v61) {
      goto LABEL_34;
    }
    goto LABEL_37;
  }

  Hasher._combine(_:)(0);
  if (!v42) {
    goto LABEL_36;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  unsigned __int8 v45 = v42;
  _CFObject.hash(into:)();

  int v46 = v61;
  if (v61)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v47 = v46;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v16);
  swift_bridgeObjectRelease();
LABEL_25:
  int v19 = v51;
  int v18 = v52;
  uint64_t v21 = v53;
  uint64_t v20 = v54;
  uint64_t v22 = v55;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    int v23 = v18;
    uint64_t v24 = v21;
    uint64_t v25 = v20;
    __int128 v26 = v22;
    uint64_t v27 = v19;
    _CFObject.hash(into:)();
    if (v18) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    __int128 v32 = v22;
    uint64_t v33 = v18;
    uint64_t v34 = v21;
    char v35 = v20;
    if (v18)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v28 = v18;
      _CFObject.hash(into:)();

      if (v21) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v21)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v29 = v21;
    _CFObject.hash(into:)();

    if (v20) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v22) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v15);
  swift_bridgeObjectRelease();
LABEL_25:
  int v18 = v50;
  id v17 = v51;
  uint64_t v20 = v52;
  int v19 = v53;
  uint64_t v21 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v22 = v17;
    int v23 = v20;
    uint64_t v24 = v19;
    uint64_t v25 = v21;
    __int128 v26 = v18;
    _CFObject.hash(into:)();
    if (v17) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    __int128 v31 = v21;
    __int128 v32 = v17;
    uint64_t v33 = v20;
    uint64_t v34 = v19;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v27 = v17;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v28 = v20;
    _CFObject.hash(into:)();

    if (v19) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v21) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v21);
          swift_bridgeObjectRelease();
LABEL_25:
          int v23 = v87;
          uint64_t v24 = v88;
          double v75 = v89;
          uint64_t v25 = v90;
          uint64_t v72 = v86;
          v73 = v1;
          uint64_t v71 = v90;
          if (v86)
          {
            __int128 v26 = v9;
            uint64_t v27 = v86;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v28 = v23;
            uint64_t v29 = v24;
            uint64_t v30 = v75;
            __int128 v31 = v25;
            __int128 v32 = v27;
            _CFObject.hash(into:)();
            if (v23)
            {
LABEL_27:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              uint64_t v33 = v23;
              uint64_t v34 = v24;
              char v35 = v23;
              _CFObject.hash(into:)();

              uint64_t v24 = v34;
              goto LABEL_30;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            uint64_t v36 = v25;
            __int128 v37 = v23;
            __int128 v38 = v24;
            int v39 = v75;
            __int128 v26 = v9;
            if (v23) {
              goto LABEL_27;
            }
          }

          uint64_t v33 = v23;
          Hasher._combine(_:)(0);
LABEL_30:
          unint64_t v40 = v71;
          int v74 = v24;
          if (v24)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            unint64_t v41 = v24;
            _CFObject.hash(into:)();
          }

          else
          {
            Hasher._combine(_:)(0);
          }

          unint64_t v42 = v33;
          unint64_t v9 = v26;
          Swift::String v2 = v73;
          if (v75)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            unint64_t v43 = v75;
            _CFObject.hash(into:)();

            if (v40)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              unint64_t v44 = v40;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            if (v40) {
              goto LABEL_35;
            }
          }

          Hasher._combine(_:)(0);
          unint64_t v44 = 0LL;
LABEL_38:
          unsigned __int8 v45 = v74;

          int v46 = v91;
          if (v46)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v46);
            swift_bridgeObjectRelease();
            unint64_t v47 = v92;
            if (v92) {
              goto LABEL_40;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            unint64_t v47 = v92;
            if (v92)
            {
LABEL_40:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v47);
              swift_bridgeObjectRelease();
              if (v93)
              {
LABEL_41:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                String.hash(into:)();
                swift_bridgeObjectRelease();
LABEL_45:
                int v15 = v77;
                if (v94 == 2)
                {
                  Hasher._combine(_:)(0);
                }

                else
                {
                  unint64_t v48 = v94 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v48);
                }

                if (v95 == 2)
                {
                  Hasher._combine(_:)(0);
                }

                else
                {
                  int64_t v49 = v95 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v49);
                }

                if (v96 == 2)
                {
                  BOOL v50 = 0;
                }

                else
                {
                  BOOL v50 = v96 & 1;
                  Hasher._combine(_:)(1u);
                }

                Hasher._combine(_:)(v50);
                if (v97 == 2)
                {
                  unint64_t v51 = 0;
                }

                else
                {
                  unint64_t v52 = v97 & 1;
                  Hasher._combine(_:)(1u);
                  unint64_t v51 = v52;
                }

                Hasher._combine(_:)(v51);
                outlined retain of LocalePreferences?( (uint64_t)v99,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?( (uint64_t)v99,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                swift_unknownObjectRelease();
                goto LABEL_58;
              }

  specialized Set._Variant.insert(_:)(&v3, 3uLL);
  if ((a1 & 0x20) == 0)
  {
LABEL_6:
    if ((a1 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }

  uint64_t v27 = *(void *)(v4 + 64);
  uint64_t v28 = *(void *)(v4 + 72);
  uint64_t v29 = *(void *)(v4 + 80);
  uint64_t v30 = *(void *)(v4 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v11, v25, v26, v27, v28, v29, v30);
  Swift::String v3 = v31;
  swift_unknownObjectRelease();
  __int128 v32 = swift_bridgeObjectRetain();
  uint64_t v20 = specialized _NativeDictionary.filter(_:)(v32);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  __int128 v5 = v331;
  uint64_t v7 = a1;
LABEL_25:
  uint64_t v33 = *(void *)v5;
  v328 = *v7;
  uint64_t v34 = *v7 >> 11;
  char v35 = v7[4] >> 11;
  v346 = v34;
  v329 = v35 - v34;
  if (v35 == v34)
  {
    uint64_t v36 = v328 >> 11;
    goto LABEL_198;
  }

  v357 = v328 >> 11;
  __int128 v11 = *(void *)(v33 + 64);
  Swift::String v3 = *(void *)(v33 + 80);
  if (v11) {
    __int128 v37 = *(void *)(v33 + 80);
  }
  else {
    __int128 v37 = 0LL;
  }
  if (v37 < v34)
  {
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
    goto LABEL_403;
  }

  __int128 v38 = *(void *)(v33 + 72);
  CFIndex v16 = *(void *)(v33 + 88);
  v348 = v35;
  v320 = v20;
  if (!v11) {
    goto LABEL_37;
  }
  if (*(_WORD *)(v11 + 16)) {
    int v39 = v34 < v3;
  }
  else {
    int v39 = 0;
  }
  if (!v39)
  {
    swift_unknownObjectRetain();
LABEL_37:
    unint64_t v40 = swift_unknownObjectRetain();
    unint64_t v41 = specialized Rope._endPath.getter(v40);
    swift_unknownObjectRelease();
    __int128 v5 = 0LL;
    goto LABEL_79;
  }

  v341 = *(void *)(v33 + 72);
  unint64_t v43 = *(void *)(v33 + 80);
  unint64_t v53 = *(unsigned __int8 *)(v11 + 18);
  if (*(_BYTE *)(v11 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    Swift::String v3 = -15LL;
    unint64_t v42 = 24LL;
    unint64_t v44 = v11;
    while (1)
    {
      unint64_t v54 = *(unsigned __int16 *)(v44 + 16);
      if (*(_WORD *)(v44 + 16))
      {
        int v56 = 0LL;
        unint64_t v57 = (uint64_t *)(v44 + 40);
        while (1)
        {
          unint64_t v58 = *v57;
          v57 += 3;
          int v59 = v34 - v58;
          if (__OFSUB__(v34, v58))
          {
            __break(1u);
LABEL_357:
            __break(1u);
            goto LABEL_358;
          }

          if (__OFADD__(v59, 1LL)) {
            goto LABEL_357;
          }
          if (v59 + 1 < 1) {
            break;
          }
          ++v56;
          uint64_t v34 = v59;
          if (v54 == v56) {
            goto LABEL_70;
          }
        }

        unint64_t v54 = v56;
      }

      else
      {
        int v59 = v34;
LABEL_70:
        if (v59) {
          goto LABEL_387;
        }
        uint64_t v34 = 0LL;
      }

      BOOL v55 = (4 * *(_BYTE *)(v44 + 18) + 8) & 0x3C;
      unint64_t v53 = ((-15LL << v55) - 1) & v53 | (v54 << v55);
      __int128 v5 = *(void *)(v44 + 24 + 24 * v54);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v44 = v5;
      if (!*(_BYTE *)(v5 + 18)) {
        goto LABEL_77;
      }
    }
  }

  swift_unknownObjectRetain_n();
  __int128 v5 = v11;
LABEL_77:
  uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)( v34,  0,  (_WORD *)(v5 + 16),  (uint64_t *)(v5 + 24));
  if (result < 0) {
    goto LABEL_416;
  }
  pthread_t v61 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v41 = v53 & 0xFFFFFFFFFFFFF0FFLL | (v61 << 8);
  Swift::String v3 = v43;
  __int128 v38 = v341;
LABEL_79:
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v16, v41, v5, v11, v38, v3, v16);
  swift_unknownObjectRelease_n();
  unint64_t v62 = *(void *)(v33 + 64);
  unint64_t v63 = *(void *)(v33 + 72);
  Swift::String v3 = *(void *)(v33 + 80);
  uint64_t v64 = *(void *)(v33 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v16, v41, v5, v62, v63, v3, v64);
  v336 = v65;
  swift_unknownObjectRelease();
  unint64_t v66 = swift_bridgeObjectRetain();
  unint64_t v43 = 0LL;
  __int128 v11 = specialized _NativeDictionary.filter(_:)(v66);
  swift_bridgeObjectRelease_n();
  CFIndex v16 = *(void *)(v11 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v44 = 0LL;
  *(void *)&v369 = result;
  char v67 = 1LL << *(_BYTE *)(v11 + 32);
  int64_t v49 = -1LL;
  if (v67 < 64) {
    int64_t v49 = ~(-1LL << v67);
  }
  unint64_t v42 = v11 + 64;
  __int128 v5 = v49 & *(void *)(v11 + 64);
  uint64_t v68 = (unint64_t)(v67 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      unsigned int v69 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      uint64_t v70 = v69 | (v44 << 6);
      goto LABEL_83;
    }

    int v46 = v44 + 1;
    if (__OFADD__(v44, 1LL))
    {
      __break(1u);
LABEL_367:
      __break(1u);
LABEL_368:
      __break(1u);
LABEL_369:
      __break(1u);
LABEL_370:
      Swift::String v3 = v49;
      v211 = v46;
      goto LABEL_371;
    }

    if (v46 >= v68) {
      goto LABEL_103;
    }
    uint64_t v72 = *(void *)(v42 + 8 * v46);
    ++v44;
    if (!v72)
    {
      unint64_t v44 = v46 + 1;
      if (v46 + 1 >= v68) {
        goto LABEL_103;
      }
      uint64_t v72 = *(void *)(v42 + 8 * v44);
      if (!v72)
      {
        unint64_t v44 = v46 + 2;
        if (v46 + 2 >= v68) {
          goto LABEL_103;
        }
        uint64_t v72 = *(void *)(v42 + 8 * v44);
        if (!v72)
        {
          unint64_t v44 = v46 + 3;
          if (v46 + 3 >= v68) {
            goto LABEL_103;
          }
          uint64_t v72 = *(void *)(v42 + 8 * v44);
          if (!v72)
          {
            unint64_t v44 = v46 + 4;
            if (v46 + 4 >= v68) {
              goto LABEL_103;
            }
            uint64_t v72 = *(void *)(v42 + 8 * v44);
            if (!v72) {
              break;
            }
          }
        }
      }
    }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v14 = v48;
        if (!v48)
        {
LABEL_18:
          Hasher._combine(_:)(0);
          int v15 = v49;
          if (!v49)
          {
LABEL_19:
            Hasher._combine(_:)(0);
            goto LABEL_27;
          }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v13 = v47;
        if (!v47)
        {
LABEL_18:
          Hasher._combine(_:)(0);
          uint64_t v14 = v48;
          if (!v48)
          {
LABEL_19:
            Hasher._combine(_:)(0);
            goto LABEL_27;
          }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)((uint64_t)v62, v13);
        swift_bridgeObjectRelease();
        uint64_t v14 = v46;
        if (!v46) {
          goto LABEL_19;
        }
        goto LABEL_25;
      }
    }

    else
    {
      Hasher._combine(_:)(0);
    }

    outlined retain of LocalePreferences(&v41);
    if (!v43) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }

  Hasher._combine(_:)(0);
LABEL_58:
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

  if (__OFSUB__(v15, 1LL))
  {
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    return result;
  }

  if (v16 >= 0x7FFFFFFFFFFFFFFELL) {
    CFIndex v16 = 0x7FFFFFFFFFFFFFFELL;
  }
  if (v16 <= 1) {
    return 1LL;
  }
  else {
    return v16;
  }
}

  __break(1u);
  return result;
}

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v22);
          swift_bridgeObjectRelease();
LABEL_25:
          uint64_t v24 = v93;
          __int128 v26 = v94;
          uint64_t v25 = v95;
          uint64_t v27 = v96;
          v76 = v96;
          unint64_t v77 = v92;
          if (v92)
          {
            v80 = v2;
            uint64_t v28 = v92;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v29 = v24;
            uint64_t v30 = v26;
            __int128 v31 = v25;
            __int128 v32 = v27;
            uint64_t v33 = v28;
            Swift::String v4 = v80;
            _CFObject.hash(into:)();
          }

          else
          {
            Hasher._combine(_:)(0);
            uint64_t v34 = v27;
            char v35 = v24;
            uint64_t v36 = v26;
            __int128 v37 = v25;
          }

          v80 = v25;
          __int128 v38 = v4;
          if (v24)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            int v39 = v24;
            unint64_t v40 = v24;
            unint64_t v41 = v26;
            unint64_t v42 = v40;
            _CFObject.hash(into:)();

            __int128 v26 = v41;
            unint64_t v78 = v41;
            if (v41)
            {
LABEL_30:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              unint64_t v43 = v26;
              _CFObject.hash(into:)();

              goto LABEL_33;
            }
          }

          else
          {
            int v39 = 0LL;
            Hasher._combine(_:)(0);
            unint64_t v78 = v26;
            if (v26) {
              goto LABEL_30;
            }
          }

          Hasher._combine(_:)(0);
LABEL_33:
          unint64_t v44 = v80;
          unsigned __int8 v45 = v39;
          Swift::String v4 = v38;
          int v46 = v76;
          if (v80)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            unint64_t v47 = v44;
            _CFObject.hash(into:)();

            if (v46)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              unint64_t v48 = v46;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            if (v46) {
              goto LABEL_35;
            }
          }

          Hasher._combine(_:)(0);
          unint64_t v48 = 0LL;
LABEL_38:
          int64_t v49 = v80;
          BOOL v50 = v78;

          unint64_t v51 = v97;
          if (v51)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v51);
            swift_bridgeObjectRelease();
          }

          else
          {
            Hasher._combine(_:)(0);
          }

          a2 = v79;
          unint64_t v52 = v98;
          if (v98)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v52);
            swift_bridgeObjectRelease();
            if (v99)
            {
LABEL_43:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_46:
              CFIndex v16 = v82;
              if (v100 == 2)
              {
                Hasher._combine(_:)(0);
              }

              else
              {
                unint64_t v53 = v100 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v53);
              }

              if (v101 == 2)
              {
                Hasher._combine(_:)(0);
              }

              else
              {
                unint64_t v54 = v101 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v54);
              }

              if (v102 == 2)
              {
                BOOL v55 = 0;
              }

              else
              {
                BOOL v55 = v102 & 1;
                Hasher._combine(_:)(1u);
              }

              Hasher._combine(_:)(v55);
              if (v103 == 2)
              {
                int v56 = 0;
              }

              else
              {
                unint64_t v57 = v103 & 1;
                Hasher._combine(_:)(1u);
                int v56 = v57;
              }

              Hasher._combine(_:)(v56);
              outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_59;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            if (v99) {
              goto LABEL_43;
            }
          }

          Hasher._combine(_:)(0);
          goto LABEL_46;
        }

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v21);
          swift_bridgeObjectRelease();
LABEL_25:
          int v23 = v86;
          uint64_t v24 = v87;
          int v74 = v88;
          uint64_t v25 = v89;
          uint64_t v71 = v85;
          uint64_t v72 = v9;
          uint64_t v70 = v89;
          if (v85)
          {
            __int128 v26 = v85;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v27 = v23;
            uint64_t v28 = v24;
            uint64_t v29 = v74;
            uint64_t v30 = v25;
            __int128 v31 = v26;
            _CFObject.hash(into:)();
            if (v23)
            {
LABEL_27:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              __int128 v32 = v23;
              uint64_t v33 = v24;
              uint64_t v34 = v23;
              _CFObject.hash(into:)();

              uint64_t v24 = v33;
              goto LABEL_30;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            char v35 = v25;
            uint64_t v36 = v23;
            __int128 v37 = v24;
            __int128 v38 = v74;
            if (v23) {
              goto LABEL_27;
            }
          }

          __int128 v32 = v23;
          Hasher._combine(_:)(0);
LABEL_30:
          int v39 = v70;
          v73 = v24;
          if (v24)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            unint64_t v40 = v24;
            _CFObject.hash(into:)();
          }

          else
          {
            Hasher._combine(_:)(0);
          }

          unint64_t v41 = v32;
          unint64_t v9 = v72;
          if (v74)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            unint64_t v42 = v74;
            _CFObject.hash(into:)();

            if (v39)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              unint64_t v43 = v39;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            if (v39) {
              goto LABEL_35;
            }
          }

          Hasher._combine(_:)(0);
          unint64_t v43 = 0LL;
LABEL_38:
          unint64_t v44 = v73;

          unsigned __int8 v45 = v90;
          if (v45)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v45);
            swift_bridgeObjectRelease();
            int v46 = v91;
            if (v91) {
              goto LABEL_40;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            int v46 = v91;
            if (v91)
            {
LABEL_40:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v46);
              swift_bridgeObjectRelease();
              if (v92)
              {
LABEL_41:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                String.hash(into:)();
                swift_bridgeObjectRelease();
LABEL_45:
                int v15 = v76;
                if (v93 == 2)
                {
                  Hasher._combine(_:)(0);
                }

                else
                {
                  unint64_t v47 = v93 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v47);
                }

                if (v94 == 2)
                {
                  Hasher._combine(_:)(0);
                }

                else
                {
                  unint64_t v48 = v94 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v48);
                }

                if (v95 == 2)
                {
                  int64_t v49 = 0;
                }

                else
                {
                  int64_t v49 = v95 & 1;
                  Hasher._combine(_:)(1u);
                }

                Hasher._combine(_:)(v49);
                if (v96 == 2)
                {
                  BOOL v50 = 0;
                }

                else
                {
                  unint64_t v51 = v96 & 1;
                  Hasher._combine(_:)(1u);
                  BOOL v50 = v51;
                }

                Hasher._combine(_:)(v50);
                outlined retain of LocalePreferences?( (uint64_t)v98,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?( (uint64_t)v98,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                swift_unknownObjectRelease();
                goto LABEL_58;
              }

    unint64_t v42 = v36[v30[10]] ^ *(_BYTE *)(v35 + v30[10]) ^ 1;
    return v42 & 1;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v22);
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v24 = v77;
  __int128 v26 = v78;
  uint64_t v25 = v79;
  uint64_t v27 = v80;
  pthread_t v61 = v80;
  unint64_t v62 = v76;
  if (v76)
  {
    int v65 = v9;
    uint64_t v28 = v76;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    size_t v60 = v29;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v30 = v24;
    __int128 v31 = v26;
    __int128 v32 = v25;
    uint64_t v33 = v27;
    uint64_t v34 = v28;
    unint64_t v9 = v65;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    char v35 = v27;
    uint64_t v36 = v24;
    __int128 v37 = v26;
    __int128 v38 = v25;
  }

  int v65 = v25;
  int v39 = v9;
  if (v24)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v40 = v24;
    unint64_t v41 = v24;
    unint64_t v42 = v26;
    unint64_t v43 = v41;
    _CFObject.hash(into:)();

    __int128 v26 = v42;
    unint64_t v63 = v42;
    if (v42)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v44 = v26;
      _CFObject.hash(into:)();

      goto LABEL_33;
    }
  }

  else
  {
    unint64_t v40 = 0LL;
    Hasher._combine(_:)(0);
    unint64_t v63 = v26;
    if (v26) {
      goto LABEL_30;
    }
  }

  Hasher._combine(_:)(0);
LABEL_33:
  unsigned __int8 v45 = v65;
  int v46 = v40;
  unint64_t v9 = v39;
  unint64_t v47 = v61;
  if (v65)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v48 = v45;
    _CFObject.hash(into:)();

    if (v47)
    {
LABEL_35:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      int64_t v49 = v47;
      _CFObject.hash(into:)();

      goto LABEL_38;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v47) {
      goto LABEL_35;
    }
  }

  Hasher._combine(_:)(0);
  int64_t v49 = 0LL;
LABEL_38:
  BOOL v50 = v65;
  unint64_t v51 = v63;

  unint64_t v52 = v81;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v52);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v6 = v64;
  unint64_t v53 = v82;
  if (!v82)
  {
    Hasher._combine(_:)(0);
    if (v83) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v53);
  swift_bridgeObjectRelease();
  if (!v83) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  CFIndex v16 = v66;
  int v15 = v67;
  if (v84 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v54 = v84 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }

  if (v85 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    BOOL v55 = v85 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v55);
  }

  if (v86 == 2)
  {
    int v56 = 0;
  }

  else
  {
    int v56 = v86 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v56);
  if (v87 == 2)
  {
    unint64_t v57 = 0;
  }

  else
  {
    unint64_t v58 = v87 & 1;
    Hasher._combine(_:)(1u);
    unint64_t v57 = v58;
  }

  Hasher._combine(_:)(v57);
  outlined retain of LocalePreferences?( (uint64_t)v89,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v89,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)&v3[v15[8]], (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v9, 1LL, v16) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    outlined init with take of LocalePreferences?( (uint64_t)v9,  (uint64_t)v6,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(1u);
    specialized FloatingPointFormatStyle.hash(into:)(a1);
    outlined destroy of Any?( (uint64_t)v6,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  }

  int v59 = v3[v15[9]];
  if (v59 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Usage.rawValue.getter(v59);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  Hasher._combine(_:)(v3[v15[10]]);
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v88, v20);
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v22 = v74;
  int v23 = v75;
  uint64_t v24 = v76;
  uint64_t v25 = v77;
  size_t v60 = a1;
  pthread_t v61 = v73;
  unint64_t v58 = v77;
  int v59 = v8;
  unint64_t v57 = v75;
  if (v73)
  {
    __int128 v26 = v74;
    uint64_t v27 = v75;
    uint64_t v28 = v73;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v29 = v26;
    uint64_t v30 = v27;
    uint64_t v22 = v26;
    __int128 v31 = v24;
    __int128 v32 = v25;
    uint64_t v33 = v28;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v34 = v25;
    char v35 = v22;
    uint64_t v36 = v23;
    __int128 v37 = v24;
  }

  unint64_t v63 = v24;
  if (v22)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    __int128 v38 = v22;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  int v39 = v57;
  CFSetCallBacks v8 = v59;
  a1 = v60;
  if (v57)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v40 = v39;
    _CFObject.hash(into:)();

    unint64_t v41 = v63;
    if (v63) {
      goto LABEL_33;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    unint64_t v43 = v58;
    if (v58) {
      goto LABEL_34;
    }
    goto LABEL_37;
  }

  Hasher._combine(_:)(0);
  unint64_t v41 = v63;
  if (!v63) {
    goto LABEL_36;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  unint64_t v42 = v41;
  _CFObject.hash(into:)();

  unint64_t v43 = v58;
  if (v58)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v44 = v43;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v15);
  swift_bridgeObjectRelease();
LABEL_25:
  int v18 = v50;
  id v17 = v51;
  uint64_t v20 = v52;
  int v19 = v53;
  uint64_t v21 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v22 = v17;
    int v23 = v20;
    uint64_t v24 = v19;
    uint64_t v25 = v21;
    __int128 v26 = v18;
    _CFObject.hash(into:)();
    if (v17) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    __int128 v31 = v21;
    __int128 v32 = v17;
    uint64_t v33 = v20;
    uint64_t v34 = v19;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v27 = v17;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v28 = v20;
    _CFObject.hash(into:)();

    if (v19) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v21) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

    CFSetCallBacks v8 = (v13 - 1) & v13;
    __int128 v11 = __clz(__rbit64(v13)) + (v3 << 6);
LABEL_5:
    v4 |= qword_1837BE550[*(char *)(*(void *)(result + 48) + v11)];
  }

  uint64_t v14 = v12 + 5;
  if (v14 >= v9)
  {
LABEL_25:
    uint64_t result = swift_release();
    *a2 = v4;
    return result;
  }

  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    Swift::String v3 = v14;
    goto LABEL_24;
  }

  while (1)
  {
    Swift::String v3 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v3 >= v9) {
      goto LABEL_25;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v3);
    ++v14;
    if (v13) {
      goto LABEL_24;
    }
  }

  specialized Set._Variant.insert(_:)(&v3, 3uLL);
  if ((v1 & 0x10) == 0)
  {
LABEL_6:
    if ((v1 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }

  swift_release();
  return MEMORY[0x18961AFF8];
}

  uint64_t result = specialized static Date.daysBeforeMonth(_:year:)(a2, result);
  return result;
}

  Hasher._combine(_:)(0);
  CFIndex v16 = v37;
  int v15 = v38;
  if (v13)
  {
LABEL_17:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v17 = v14;
    int v18 = v16;
    int v19 = v15;
    uint64_t v20 = v34;
    uint64_t v21 = v13;
    _CFObject.hash(into:)();
    if (v14) {
      goto LABEL_18;
    }
    goto LABEL_26;
  }

            *a2 = v6;
            return (id)v7;
          }

          __break(1u);
          goto LABEL_30;
        }
      }

      else
      {
        __int128 v11 = v5;
        swift_unknownObjectRetain();
        _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
        uint64_t result = (id)swift_unknownObjectRelease();
      }

      if (__OFSUB__(v5, v11))
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }

      uint64_t result = (id)swift_arrayDestroy();
      uint64_t v7 = 0LL;
      goto LABEL_21;
    }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    id v17 = v59;
    if (!v59) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v17);
    swift_bridgeObjectRelease();
    int v18 = v60;
    if (!v60) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    int v15 = v57;
    if (!v57) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v15);
    swift_bridgeObjectRelease();
    CFIndex v16 = v58;
    if (!v58) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v15 = v55;
  if (v55) {
    goto LABEL_25;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  CFIndex v16 = v56;
  if (!v56)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v16);
  swift_bridgeObjectRelease();
LABEL_25:
  id v17 = v58;
  BOOL v50 = v5;
  int64_t v49 = v4;
  if (v58)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v17);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  int v19 = v59;
  int v18 = v60;
  uint64_t v20 = v61;
  uint64_t v21 = v62;
  uint64_t v22 = v63;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v23 = v18;
    uint64_t v24 = v20;
    uint64_t v25 = v21;
    __int128 v26 = v22;
    uint64_t v27 = v19;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v28 = v22;
    uint64_t v29 = v18;
    uint64_t v30 = v20;
    __int128 v31 = v21;
  }

  unint64_t v48 = v19;
  if (v18)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    __int128 v32 = v18;
    _CFObject.hash(into:)();

    if (v20) {
      goto LABEL_33;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v20)
    {
LABEL_33:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v33 = v20;
      _CFObject.hash(into:)();

      if (v21) {
        goto LABEL_34;
      }
LABEL_38:
      Hasher._combine(_:)(0);
      if (v22) {
        goto LABEL_35;
      }
      goto LABEL_39;
    }
  }

  Hasher._combine(_:)(0);
  if (!v21) {
    goto LABEL_38;
  }
LABEL_34:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v34 = v21;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_35:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v35 = v22;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v14);
  swift_bridgeObjectRelease();
LABEL_25:
  CFIndex v16 = v61;
  id v17 = v62;
  int v19 = v63;
  int v18 = v64;
  uint64_t v20 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v21 = v17;
    uint64_t v22 = v19;
    int v23 = v18;
    uint64_t v24 = v20;
    uint64_t v25 = v16;
    _CFObject.hash(into:)();
    unint64_t v53 = v16;
    if (v17) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v30 = v20;
    __int128 v31 = v17;
    __int128 v32 = v19;
    uint64_t v33 = v18;
    unint64_t v53 = 0LL;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      __int128 v26 = v17;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v12);
  swift_bridgeObjectRelease();
LABEL_25:
  int v15 = v59;
  uint64_t v14 = v60;
  id v17 = v61;
  CFIndex v16 = v62;
  int v18 = v63;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v19 = v14;
    uint64_t v20 = v17;
    uint64_t v21 = v16;
    uint64_t v22 = v18;
    int v23 = v15;
    _CFObject.hash(into:)();
    if (v14) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v28 = v18;
    uint64_t v29 = v14;
    uint64_t v30 = v17;
    __int128 v31 = v16;
    if (v14)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v24 = v14;
      _CFObject.hash(into:)();

      if (v17) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v17)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v25 = v17;
    _CFObject.hash(into:)();

    if (v16) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v18) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v14);
  swift_bridgeObjectRelease();
LABEL_25:
  CFIndex v16 = v61;
  id v17 = v62;
  int v19 = v63;
  int v18 = v64;
  uint64_t v20 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v21 = v17;
    uint64_t v22 = v19;
    int v23 = v18;
    uint64_t v24 = v20;
    uint64_t v25 = v16;
    _CFObject.hash(into:)();
    unint64_t v53 = v16;
    if (v17) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v30 = v20;
    __int128 v31 = v17;
    __int128 v32 = v19;
    uint64_t v33 = v18;
    unint64_t v53 = 0LL;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      __int128 v26 = v17;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v12);
  swift_bridgeObjectRelease();
LABEL_25:
  int v15 = v59;
  uint64_t v14 = v60;
  id v17 = v61;
  CFIndex v16 = v62;
  int v18 = v63;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v19 = v14;
    uint64_t v20 = v17;
    uint64_t v21 = v16;
    uint64_t v22 = v18;
    int v23 = v15;
    _CFObject.hash(into:)();
    if (v14) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v28 = v18;
    uint64_t v29 = v14;
    uint64_t v30 = v17;
    __int128 v31 = v16;
    if (v14)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v24 = v14;
      _CFObject.hash(into:)();

      if (v17) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v17)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v25 = v17;
    _CFObject.hash(into:)();

    if (v16) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v18) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

      int v23 = (v28 - 1) & v28;
      __int128 v26 = __clz(__rbit64(v28)) + (v18 << 6);
      if (!v9[2]) {
        goto LABEL_35;
      }
    }
  }

  else
  {
LABEL_35:
    __break(1u);
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v22);
          swift_bridgeObjectRelease();
LABEL_25:
          uint64_t v24 = v93;
          __int128 v26 = v94;
          uint64_t v25 = v95;
          uint64_t v27 = v96;
          v76 = v96;
          unint64_t v77 = v92;
          if (v92)
          {
            v80 = v2;
            uint64_t v28 = v92;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v29 = v24;
            uint64_t v30 = v26;
            __int128 v31 = v25;
            __int128 v32 = v27;
            uint64_t v33 = v28;
            Swift::String v3 = v80;
            _CFObject.hash(into:)();
          }

          else
          {
            Hasher._combine(_:)(0);
            uint64_t v34 = v27;
            char v35 = v24;
            uint64_t v36 = v26;
            __int128 v37 = v25;
          }

          v80 = v25;
          __int128 v38 = v3;
          if (v24)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            int v39 = v24;
            unint64_t v40 = v24;
            unint64_t v41 = v26;
            unint64_t v42 = v40;
            _CFObject.hash(into:)();

            __int128 v26 = v41;
            unint64_t v78 = v41;
            if (v41)
            {
LABEL_30:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              unint64_t v43 = v26;
              _CFObject.hash(into:)();

              goto LABEL_33;
            }
          }

          else
          {
            int v39 = 0LL;
            Hasher._combine(_:)(0);
            unint64_t v78 = v26;
            if (v26) {
              goto LABEL_30;
            }
          }

          Hasher._combine(_:)(0);
LABEL_33:
          unint64_t v44 = v80;
          unsigned __int8 v45 = v39;
          Swift::String v3 = v38;
          int v46 = v76;
          if (v80)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            unint64_t v47 = v44;
            _CFObject.hash(into:)();

            if (v46)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              unint64_t v48 = v46;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            if (v46) {
              goto LABEL_35;
            }
          }

          Hasher._combine(_:)(0);
          unint64_t v48 = 0LL;
LABEL_38:
          int64_t v49 = v80;
          BOOL v50 = v78;

          unint64_t v51 = v97;
          if (v51)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v51);
            swift_bridgeObjectRelease();
          }

          else
          {
            Hasher._combine(_:)(0);
          }

          a2 = v79;
          unint64_t v52 = v98;
          if (v98)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v52);
            swift_bridgeObjectRelease();
            if (v99)
            {
LABEL_43:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_46:
              CFIndex v16 = v82;
              if (v100 == 2)
              {
                Hasher._combine(_:)(0);
              }

              else
              {
                unint64_t v53 = v100 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v53);
              }

              if (v101 == 2)
              {
                Hasher._combine(_:)(0);
              }

              else
              {
                unint64_t v54 = v101 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v54);
              }

              if (v102 == 2)
              {
                BOOL v55 = 0;
              }

              else
              {
                BOOL v55 = v102 & 1;
                Hasher._combine(_:)(1u);
              }

              Hasher._combine(_:)(v55);
              if (v103 == 2)
              {
                int v56 = 0;
              }

              else
              {
                unint64_t v57 = v103 & 1;
                Hasher._combine(_:)(1u);
                int v56 = v57;
              }

              Hasher._combine(_:)(v56);
              outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_59;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            if (v99) {
              goto LABEL_43;
            }
          }

          Hasher._combine(_:)(0);
          goto LABEL_46;
        }

  if (v3 > a2) {
    return 0LL;
  }
LABEL_26:
  if ((a2 & 0x8000000000000000LL) == 0) {
    return result;
  }
  unint64_t v9 = 0LL;
  while ((result ^ 0x8000000000000000LL) > ~a2)
  {
    if (--v9 <= a2)
    {
      result += v9;
      return result;
    }
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v52)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    uint64_t v20 = v53;
    if (!v53) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v20);
    swift_bridgeObjectRelease();
    uint64_t v21 = v54;
    if (!v54) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v50)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    int v18 = v51;
    if (!v51) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v18);
    swift_bridgeObjectRelease();
    int v19 = v52;
    if (!v52) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v18 = v49;
  if (v49) {
    goto LABEL_25;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  int v19 = v50;
  if (!v50)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    uint64_t v20 = v58;
    if (!v58) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v20);
    swift_bridgeObjectRelease();
    uint64_t v21 = v59;
    if (!v59) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v55)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    int v18 = v56;
    if (!v56) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v73, v18);
    swift_bridgeObjectRelease();
    int v19 = v57;
    if (!v57) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v18 = v54;
  if (v54) {
    goto LABEL_25;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  int v19 = v55;
  if (!v55)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }

  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = -8LL;
    goto LABEL_20;
  }

  uint64_t v21 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  swift_bridgeObjectRelease_n();
LABEL_19:
  uint64_t v22 = v21 + 32;
LABEL_20:
  int v23 = objc_msgSend( objc_allocWithZone((Class)swift_getObjCClassFromMetadata()),  sel_initWithObjects_forKeys_count_,  v20,  v22,  v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v23;
}

          uint64_t v10 = (v14 - 1) & v14;
          __int128 v12 = __clz(__rbit64(v14)) + (v6 << 6);
        }

        CFIndex v16 = *(void *)(v3 + 56) + 16 * v12;
        id v17 = *(uint64_t **)v16;
        if (*(_BYTE *)(v16 + 8) == 1) {
          break;
        }
        if (v17 != a2) {
          goto LABEL_36;
        }
      }

      int v18 = *a2;
      if ((unint64_t)*a2 >= 0x800)
      {
LABEL_32:
        swift_getKeyPath();
        int v19 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        int v23 = v22;
        swift_release();
        if ((v23 & 1) != 0) {
          goto LABEL_160;
        }
        goto LABEL_35;
      }

      if ((unint64_t)(v18 - 513) < 2)
      {
        swift_getKeyPath();
        int v19 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        uint64_t v25 = v24;
        swift_release();
        if ((v25 & 1) != 0) {
          goto LABEL_162;
        }
      }

      else
      {
        if (!v18) {
          goto LABEL_32;
        }
        if (v18 != 512) {
          break;
        }
        swift_getKeyPath();
        int v19 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        uint64_t v21 = v20;
        swift_release();
        if ((v21 & 1) != 0) {
          goto LABEL_164;
        }
      }

    uint64_t v10 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_25;
  }

    if ((v26 & 0xFC00FC00) != 0xDC00D800)
    {
      uint64_t v30 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError( &lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError,  &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      swift_allocError();
      v73 = 2;
      goto LABEL_67;
    }

    uint64_t v34 = (v27 - 32);
    __int128 v31 = (HIWORD(v26) & 0x3FF | ((v26 & 0x3FF) << 10)) + 0x10000;
    __int128 v26 = 0;
LABEL_26:
    char v35 = v31 != 0;
    if (!v31) {
      uint64_t v24 = v25;
    }
    if (!((v31 == 0) | v29 & 1))
    {
      uint64_t v30 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError( &lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError,  &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      swift_allocError();
      v73 = 1;
LABEL_67:
      *uint64_t v72 = v73;
      goto LABEL_68;
    }

    unint64_t v93 = v34;
    unint64_t v94 = v26;
    if (v31 < 0x80)
    {
      unint64_t v44 = v90;
      unsigned __int8 v45 = v7;
      int v46 = v22;
      specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)( v92,  v90,  (uint64_t)v30,  v22);
      if (v45) {
        goto LABEL_69;
      }
      unint64_t v47 = v30[2];
      __int128 v26 = v94;
      unint64_t v48 = v95;
      uint64_t v27 = v93;
      if (v47 >= v46) {
        goto LABEL_61;
      }
      uint64_t v22 = v46;
      *(_BYTE *)(v44 + v47) = v31;
      void v30[2] = v47 + 1;
      uint64_t v7 = 0LL;
      goto LABEL_9;
    }

    unint64_t v88 = v24;
    uint64_t v36 = v7;
    __int128 v37 = v78;
    Unicode.Scalar.properties.getter();
    __int128 v38 = v81;
    Unicode.Scalar.Properties.canonicalCombiningClass.getter();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v37, v80);
    int v39 = v82;
    static Unicode.CanonicalCombiningClass.notReordered.getter();
    LOBYTE(v37) = static Unicode.CanonicalCombiningClass.== infix(_:_:)();
    unint64_t v40 = *(void (**)(char *, uint64_t))(v83 + 8);
    unint64_t v41 = v39;
    unint64_t v42 = v84;
    v40(v41, v84);
    uint64_t result = (uint64_t *)((uint64_t (*)(char *, uint64_t))v40)(v38, v42);
    if ((v37 & 1) != 0)
    {
      uint64_t v30 = v91;
      uint64_t result = (uint64_t *)specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)( v92,  v90,  (uint64_t)v91,  v87);
      uint64_t v7 = v36;
      if (v36) {
        goto LABEL_69;
      }
    }

    else
    {
      uint64_t v7 = v36;
    }

    LODWORD(v98[0]) = 2;
    int64_t v49 = HIWORD(v31);
    v98[1] = &__CFUniCharDecimalDigitCharacterSetBitmap;
    v99 = 15;
    int v100 = &__CFUniCharLetterCharacterSetBitmap_0;
    v101 = 2;
    v102 = &__CFUniCharLowercaseLetterCharacterSetBitmap_1;
    v103 = 2;
    uint64_t v104 = &__CFUniCharUppercaseLetterCharacterSetBitmap_1;
    v105 = 15;
    v106 = &__CFUniCharNonBaseCharacterSetBitmap_0;
    v107 = 3;
    v108 = &__CFUniCharCanonicalDecomposableCharacterSetBitmap_0;
    v109 = 15;
    v110 = &__CFUniCharAlphanumericCharacterSetBitmap_0;
    v111 = 2;
    v112 = &__CFUniCharPunctuationCharacterSetBitmap_0;
    v113 = 15;
    v114 = &__CFUniCharLegalCharacterSetBitmap_0;
    v115 = 1;
    v116 = &__CFUniCharTitlecaseLetterCharacterSetBitmap_0;
    v117 = 2;
    v118 = &__CFUniCharSymbolAndOperatorCharacterSetBitmap_0;
    v119 = 2;
    v120 = &__CFUniCharCompatibilityDecomposableCharacterSetBitmap_0;
    v121 = 2;
    v122 = &__CFUniCharHfsPlusDecomposableCharacterSetBitmap_0;
    v123 = 2;
    v124 = &__CFUniCharStrongRightToLeftCharacterSetBitmap_0;
    uint64_t v24 = v88;
    int v23 = v86;
    if (v49 >= *v77)
    {
LABEL_44:
      int v56 = *v89;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v85 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        int v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v56 + 2) + 1LL,  1,  v56);
      }
      int v59 = *((void *)v56 + 2);
      unint64_t v58 = *((void *)v56 + 3);
      uint64_t v22 = v87;
      __int128 v26 = v94;
      unint64_t v48 = v95;
      uint64_t v27 = v93;
      if (v59 >= v58 >> 1)
      {
        size_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v58 > 1),  v59 + 1,  1,  v56);
        uint64_t v27 = v93;
        __int128 v26 = v94;
        unint64_t v48 = v95;
        uint64_t v22 = v87;
        int v56 = v60;
      }

      *((void *)v56 + 2) = v59 + 1;
      *(_DWORD *)&v56[4 * v59 + 32] = v31;
      *unint64_t v89 = v56;
      uint64_t v7 = v85;
      uint64_t v30 = v91;
      goto LABEL_9;
    }

    if (!*v76) {
      break;
    }
    BOOL v50 = *(void *)(*v76 + 8 * v49);
    unint64_t v51 = (v31 & 0x3F) << 8;
    if (v31 >= 0x800)
    {
      uint64_t v64 = (v51 | (v31 >> 6) & 0x3F) << 8;
      if ((_DWORD)v49)
      {
        unint64_t v52 = (v31 >> 18) | ((v64 | (v31 >> 12) & 0x3F) << 8);
        unint64_t v53 = -2122219023;
      }

      else
      {
        unint64_t v52 = v64 | (v31 >> 12);
        unint64_t v53 = 8487393;
      }
    }

    else
    {
      unint64_t v52 = v51 | (v31 >> 6);
      unint64_t v53 = 33217;
    }

    v98[0] = ((v52 + v53) + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8
                                                                         * (4 - (__clz(v52 + v53) >> 3))));
    unint64_t v54 = MEMORY[0x186E1B6AC](v98);
    BOOL v55 = (uint64_t)v74;
    MEMORY[0x186E1B718](v54);
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v55);
    uint64_t v30 = v91;
    uint64_t v22 = v87;
    __int128 v26 = v94;
    unint64_t v48 = v95;
    uint64_t v27 = v93;
LABEL_9:
    uint64_t v29 = v35 & v48;
    uint64_t v25 = v30[2];
    if (v25 >= v22) {
      goto LABEL_58;
    }
  }

  __break(1u);
LABEL_79:
  __break(1u);
  return result;
}

  *(_BYTE *)(v6 + 20_Block_object_dispose((const void *)(v17 - 128), 8) = v4;
LABEL_25:
  *a3 = v4;
  return result;
}

    uint64_t v14 = 0;
    Swift::String v3 = 1;
    return v14 | ((unint64_t)v3 << 32);
  }

  Swift::String v3 = 1;
  *(_BYTE *)(v0 + 65) = 1;
  Swift::String v4 = Data.Iterator.next()();
  if ((*(_WORD *)&v4 & 0x100) != 0)
  {
    uint64_t v14 = 0;
    return v14 | ((unint64_t)v3 << 32);
  }

  value = v4.value;
  __int128 v5 = v4.value;
  if (v4.value != 255 && v4.value) {
    goto LABEL_15;
  }
  uint64_t v6 = Data.Iterator.next()();
  if ((*(_WORD *)&v6 & 0x100) != 0) {
    goto LABEL_24;
  }
  uint64_t v7 = v6;
  CFSetCallBacks v8 = Data.Iterator.next()();
  if ((*(_WORD *)&v8 & 0x100) != 0) {
    goto LABEL_24;
  }
  unint64_t v9 = v8.value;
  LOWORD(v10) = Data.Iterator.next()();
  if ((v10 & 0x100) != 0) {
    goto LABEL_24;
  }
  if (v5 == 255 && v7.value == 254 && !(v9 | v10))
  {
    __int128 v11 = *(unsigned __int8 *)(v0 + 64);
    if (v11 != 2)
    {
      Swift::String v3 = 0;
      if ((v11 & 1) != 0) {
        uint64_t v14 = -131072;
      }
      else {
        uint64_t v14 = 65279;
      }
      return v14 | ((unint64_t)v3 << 32);
    }

    *(_BYTE *)(v0 + 64) = 0;
    goto LABEL_2;
  }

  if (!(v5 | v7.value) && v9 == 254 && v10 == 255)
  {
    int v19 = *(unsigned __int8 *)(v0 + 64);
    if (v19 != 2)
    {
      Swift::String v3 = 0;
      if ((v19 & 1) != 0) {
        uint64_t v14 = 65279;
      }
      else {
        uint64_t v14 = -131072;
      }
      return v14 | ((unint64_t)v3 << 32);
    }

    *(_BYTE *)(v0 + 64) = 1;
    goto LABEL_2;
  }

      specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
      if (v23 < 2)
      {
        outlined copy of Data._Representation(a1, a2);
        specialized String.init<A, B>(_validating:as:)(a1, a2);
        if (!v24) {
          return 0LL;
        }
        return v21;
      }

      return v19;
    }

    goto LABEL_21;
  }

  if (a3 != 1)
  {
    if (a3 == 4)
    {
      specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
      if (v7 == 1)
      {
        outlined copy of Data._Representation(a1, a2);
        specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
        unint64_t v9 = (unsigned __int8 *)(v8 + 32);
        uint64_t v10 = *(void *)(v8 + 16);
        __int128 v11 = static String._tryFromUTF8(_:)();
        if (v12)
        {
          uint64_t v13 = v11;
          swift_release();
LABEL_32:
          outlined consume of Data._Representation(a1, a2);
          return v13;
        }

        uint64_t v13 = (uint64_t)specialized String.init<A, B>(_validating:as:)(v9, v10);
        char v35 = v34;
        swift_release();
        outlined consume of Data._Representation(a1, a2);
        if (v35) {
          return v13;
        }
      }

      else
      {
        uint64_t v13 = v6;
        if (v7) {
          return v13;
        }
      }

      return 0LL;
    }

    goto LABEL_28;
  }

  specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
  if (v15 != 1)
  {
    uint64_t v13 = v14;
    if (v15) {
      return v13;
    }
    goto LABEL_36;
  }

  outlined copy of Data._Representation(a1, a2);
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  uint64_t v13 = specialized String.init<A, B>(_validating:as:)((char *)(v16 + 32), *(void *)(v16 + 16));
  int v18 = v17;
  swift_release();
  outlined consume of Data._Representation(a1, a2);
  if (!v18)
  {
LABEL_36:
    if (one-time initialization token for compatibility1 != -1) {
      swift_once();
    }
    if ((static String.compatibility1 & 1) != 0)
    {
      outlined copy of Data._Representation(a1, a2);
      specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
      __int128 v31 = v30;
      outlined consume of Data._Representation(a1, a2);
      __int128 v32 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytes_length_encoding_,  v31 + 32,  *(void *)(v31 + 16),  1);
      if (v32)
      {
        uint64_t v33 = v32;
        uint64_t v13 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
        swift_release();

        return v13;
      }

      swift_release();
    }

    return 0LL;
  }

  return v13;
}

  outlined consume of Data._Representation(v19, v20);
  outlined consume of Data._Representation(v19, v20);
  swift_bridgeObjectRetain();
  int v15 = static String._tryFromUTF8(_:)();
  id v17 = v16;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v1, v0);
  swift_bridgeObjectRelease();
  if (v17) {
    return v15;
  }
  else {
    return 0LL;
  }
}

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v13 = static String._tryFromUTF8(_:)();
  int v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v15) {
    return v13;
  }
  else {
    return 0LL;
  }
}

  swift_bridgeObjectRetain();
  uint64_t v13 = static String._tryFromUTF8(_:)();
  int v15 = v14;
  swift_bridgeObjectRelease_n();
  if (v15) {
    return v13;
  }
  else {
    return 0LL;
  }
}

  swift_bridgeObjectRetain();
  uint64_t v13 = static String._tryFromUTF8(_:)();
  int v15 = v14;
  swift_bridgeObjectRelease_n();
  if (v15) {
    return v13;
  }
  else {
    return 0LL;
  }
}

            uint64_t v6 = v15;
            goto LABEL_25;
          }
        }
      }

  __break(1u);
  return result;
}

        swift_bridgeObjectRelease();
        return 0LL;
      }

    __break(1u);
    goto LABEL_25;
  }

  int v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  v23(v20, v13);
  v23(v16, v13);
  uint64_t v24 = v8[5];
  uint64_t v25 = v8[6];
  __int128 v26 = v55;
  uint64_t v27 = v55 >> 62;
  v8[5] = v55;
  if (v26 >> 62)
  {
    if ((_DWORD)v27 != 1)
    {
      uint64_t v28 = 0LL;
      goto LABEL_14;
    }

    uint64_t v28 = *(void *)(v26 + 32);
    swift_retain();
  }

  else
  {
    uint64_t v28 = *(void *)(v26 + 64);
    swift_retain();
  }

  int v56 = v8;
  unint64_t v57 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v22 = v28;
  if (!*(void *)(v2 + 16))
  {
LABEL_60:
    swift_bridgeObjectRelease();
    __int128 v26 = v64;
    CFSetCallBacks v8 = v56;
    if ((v57 & 1) == 0) {
      goto LABEL_61;
    }
    goto LABEL_20;
  }

  uint64_t v29 = (char *)(v28 + 64);
  __src = (char *)(v2 + 64);
  uint64_t v30 = (unint64_t)((1LL << *(_BYTE *)(v22 + 32)) + 63) >> 6;
  if (v22 != v2 || v29 >= &__src[8 * v30]) {
    memmove(v29, __src, 8 * v30);
  }
  size_t v60 = 0LL;
  *(void *)(v22 + 16) = *(void *)(v2 + 16);
  __int128 v31 = 1LL << *(_BYTE *)(v2 + 32);
  __int128 v32 = -1LL;
  if (v31 < 64) {
    __int128 v32 = ~(-1LL << v31);
  }
  unint64_t v63 = v32 & *(void *)(v2 + 64);
  unint64_t v58 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    if (v63)
    {
      uint64_t v33 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      uint64_t v34 = v33 | (v60 << 6);
      goto LABEL_32;
    }

    unsigned __int8 v45 = v60 + 1;
    if (__OFADD__(v60, 1LL)) {
      goto LABEL_65;
    }
    if (v45 >= v58) {
      goto LABEL_60;
    }
    int v46 = *(void *)&__src[8 * v45];
    unint64_t v47 = v60 + 1;
    if (!v46)
    {
      unint64_t v47 = v60 + 2;
      if (v60 + 2 >= v58) {
        goto LABEL_60;
      }
      int v46 = *(void *)&__src[8 * v47];
      if (!v46)
      {
        unint64_t v47 = v60 + 3;
        if (v60 + 3 >= v58) {
          goto LABEL_60;
        }
        int v46 = *(void *)&__src[8 * v47];
        if (!v46)
        {
          unint64_t v47 = v60 + 4;
          if (v60 + 4 >= v58) {
            goto LABEL_60;
          }
          int v46 = *(void *)&__src[8 * v47];
          if (!v46)
          {
            unint64_t v47 = v60 + 5;
            if (v60 + 5 >= v58) {
              goto LABEL_60;
            }
            int v46 = *(void *)&__src[8 * v47];
            if (!v46)
            {
              unint64_t v47 = v60 + 6;
              if (v60 + 6 >= v58) {
                goto LABEL_60;
              }
              int v46 = *(void *)&__src[8 * v47];
              if (!v46)
              {
                unint64_t v47 = v60 + 7;
                if (v60 + 7 >= v58) {
                  goto LABEL_60;
                }
                int v46 = *(void *)&__src[8 * v47];
                if (!v46)
                {
                  unint64_t v47 = v60 + 8;
                  if (v60 + 8 >= v58) {
                    goto LABEL_60;
                  }
                  int v46 = *(void *)&__src[8 * v47];
                  if (!v46)
                  {
                    unint64_t v47 = v60 + 9;
                    if (v60 + 9 >= v58) {
                      goto LABEL_60;
                    }
                    int v46 = *(void *)&__src[8 * v47];
                    if (!v46) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

  __src[12] = (int)ucal_get();
  LOBYTE(__src[13]) = 0;
  if ((a2 & 0x800) == 0)
  {
LABEL_10:
    if ((a2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

      __int128 v11 = (v16 - 1) & v16;
      uint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
    }

    if (*(void *)(*(void *)(v2 + 56) + 16 * v14))
    {
      *(unint64_t *)((char *)v5 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      int v18 = __OFADD__(v6++, 1LL);
      if (v18) {
        break;
      }
    }
  }

  __break(1u);
LABEL_28:
  if (!v6) {
    return MEMORY[0x18961AFF0];
  }
  if (v6 != *(void *)(v2 + 16))
  {
    unint64_t v92 = (uint64_t)&v92;
    unint64_t v93 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
    __int128 v32 = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v33 = 0LL;
    unint64_t v94 = (unint64_t *)((char *)&v92 - ((v4 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    uint64_t v34 = *v5;
    char v35 = v32 + 64;
    while (1)
    {
      if (v34)
      {
        unint64_t v40 = __clz(__rbit64(v34));
        v34 &= v34 - 1;
        uint64_t v97 = v33;
        unint64_t v41 = v40 | (v33 << 6);
      }

      else
      {
        unint64_t v42 = v33 + 1;
        if (__OFADD__(v33, 1LL)) {
          goto LABEL_134;
        }
        if (v42 >= v95) {
          return v32;
        }
        unint64_t v43 = v94[v42];
        unint64_t v44 = v33 + 1;
        if (!v43)
        {
          unint64_t v44 = v33 + 2;
          if (v33 + 2 >= v95) {
            return v32;
          }
          unint64_t v43 = v94[v44];
          if (!v43)
          {
            unint64_t v44 = v33 + 3;
            if (v33 + 3 >= v95) {
              return v32;
            }
            unint64_t v43 = v94[v44];
            if (!v43)
            {
              unint64_t v44 = v33 + 4;
              if (v33 + 4 >= v95) {
                return v32;
              }
              unint64_t v43 = v94[v44];
              if (!v43)
              {
                unint64_t v44 = v33 + 5;
                if (v33 + 5 >= v95) {
                  return v32;
                }
                unint64_t v43 = v94[v44];
                if (!v43)
                {
                  unsigned __int8 v45 = v33 + 6;
                  if (v33 + 6 >= v95) {
                    return v32;
                  }
                  unint64_t v43 = v94[v45];
                  if (!v43)
                  {
                    while (1)
                    {
                      unint64_t v44 = v45 + 1;
                      if (__OFADD__(v45, 1LL)) {
                        break;
                      }
                      if (v44 >= v95) {
                        return v32;
                      }
                      unint64_t v43 = v94[v44];
                      ++v45;
                      if (v43) {
                        goto LABEL_83;
                      }
                    }

  CFIndex v16 = *(void *)(v4 + 64);
  uint64_t v27 = *(void *)(v4 + 72);
  uint64_t v28 = *(void *)(v4 + 80);
  uint64_t v29 = *(void *)(v4 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v11, v24, v26, v16, v27, v28, v29);
  swift_unknownObjectRelease();
  uint64_t v30 = swift_bridgeObjectRetain();
  a3 = specialized _NativeDictionary.filter(_:)(v30);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  uint64_t v7 = a1;
LABEL_25:
  __int128 v31 = v346;
  __int128 v32 = *v346;
  v340 = *v7;
  uint64_t v33 = *v7 >> 11;
  v355 = v7[4] >> 11;
  v341 = v355 - v33;
  if (v355 == v33)
  {
    v334 = v340 >> 11;
    uint64_t v34 = v340 >> 11;
    goto LABEL_196;
  }

  v363 = v340 >> 11;
  __int128 v11 = *(void *)(v32 + 64);
  char v35 = *(void *)(v32 + 80);
  if (v11) {
    uint64_t v36 = *(void *)(v32 + 80);
  }
  else {
    uint64_t v36 = 0LL;
  }
  if (v36 < v33)
  {
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
    goto LABEL_403;
  }

  __int128 v37 = *(void *)(v32 + 72);
  CFIndex v16 = *(void *)(v32 + 88);
  v333 = a3;
  if (!v11) {
    goto LABEL_37;
  }
  if (*(_WORD *)(v11 + 16)) {
    __int128 v38 = v33 < v35;
  }
  else {
    __int128 v38 = 0;
  }
  if (!v38)
  {
    swift_unknownObjectRetain();
LABEL_37:
    int v39 = swift_unknownObjectRetain();
    unint64_t v40 = specialized Rope._endPath.getter(v39);
    swift_unknownObjectRelease();
    a3 = 0LL;
    goto LABEL_79;
  }

  *(void *)&v354 = *(void *)(v32 + 80);
  unint64_t v51 = *(unsigned __int8 *)(v11 + 18);
  if (*(_BYTE *)(v11 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v42 = -15LL;
    unint64_t v52 = v340 >> 11;
    unint64_t v53 = v11;
    while (1)
    {
      unint64_t v54 = *(unsigned __int16 *)(v53 + 16);
      if (*(_WORD *)(v53 + 16))
      {
        int v56 = 0LL;
        unint64_t v57 = (uint64_t *)(v53 + 40);
        while (1)
        {
          unint64_t v58 = *v57;
          v57 += 3;
          int v59 = v52 - v58;
          if (__OFSUB__(v52, v58))
          {
            __break(1u);
LABEL_353:
            __break(1u);
            goto LABEL_354;
          }

          if (__OFADD__(v59, 1LL)) {
            goto LABEL_353;
          }
          if (v59 + 1 < 1) {
            break;
          }
          ++v56;
          unint64_t v52 = v59;
          if (v54 == v56) {
            goto LABEL_70;
          }
        }

        unint64_t v54 = v56;
      }

      else
      {
        int v59 = v52;
LABEL_70:
        if (v59) {
          goto LABEL_383;
        }
        unint64_t v52 = 0LL;
      }

      BOOL v55 = (4 * *(_BYTE *)(v53 + 18) + 8) & 0x3C;
      unint64_t v51 = ((-15LL << v55) - 1) & v51 | (v54 << v55);
      a3 = *(void *)(v53 + 24 + 24 * v54);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v53 = a3;
      if (!*(_BYTE *)(a3 + 18)) {
        goto LABEL_77;
      }
    }
  }

  swift_unknownObjectRetain_n();
  unint64_t v52 = v340 >> 11;
  a3 = v11;
LABEL_77:
  uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)( v52,  0,  (_WORD *)(a3 + 16),  (uint64_t *)(a3 + 24));
  if (result < 0) {
    goto LABEL_412;
  }
  pthread_t v61 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v40 = v51 & 0xFFFFFFFFFFFFF0FFLL | (v61 << 8);
  char v35 = v354;
LABEL_79:
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v16, v40, a3, v11, v37, v35, v16);
  swift_unknownObjectRelease_n();
  unint64_t v62 = *(void *)(v32 + 64);
  unint64_t v63 = *(void *)(v32 + 72);
  uint64_t v64 = *(void *)(v32 + 80);
  int v65 = *(void *)(v32 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v16, v40, a3, v62, v63, v64, v65);
  CFIndex v16 = v66;
  v344 = v67;
  swift_unknownObjectRelease();
  uint64_t v68 = swift_bridgeObjectRetain();
  unsigned int v69 = specialized _NativeDictionary.filter(_:)(v68);
  swift_bridgeObjectRelease_n();
  __int128 v11 = *(void *)(v69 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v70 = 0LL;
  *(void *)&v375 = result;
  uint64_t v71 = 1LL << *(_BYTE *)(v69 + 32);
  unint64_t v47 = -1LL;
  if (v71 < 64) {
    unint64_t v47 = ~(-1LL << v71);
  }
  unint64_t v42 = v69 + 64;
  a3 = v47 & *(void *)(v69 + 64);
  uint64_t v72 = (unint64_t)(v71 + 63) >> 6;
  while (1)
  {
    if (a3)
    {
      v73 = __clz(__rbit64(a3));
      a3 &= a3 - 1;
      int v74 = v73 | (v70 << 6);
      goto LABEL_83;
    }

    unint64_t v44 = v70 + 1;
    if (__OFADD__(v70, 1LL)) {
      goto LABEL_366;
    }
    if (v44 >= v72) {
      break;
    }
    unint64_t v77 = *(void *)(v42 + 8 * v44);
    ++v70;
    if (!v77)
    {
      uint64_t v70 = v44 + 1;
      if (v44 + 1 >= v72) {
        break;
      }
      unint64_t v77 = *(void *)(v42 + 8 * v70);
      if (!v77)
      {
        uint64_t v70 = v44 + 2;
        if (v44 + 2 >= v72) {
          break;
        }
        unint64_t v77 = *(void *)(v42 + 8 * v70);
        if (!v77)
        {
          uint64_t v70 = v44 + 3;
          if (v44 + 3 >= v72) {
            break;
          }
          unint64_t v77 = *(void *)(v42 + 8 * v70);
          if (!v77)
          {
            uint64_t v70 = v44 + 4;
            if (v44 + 4 >= v72) {
              break;
            }
            unint64_t v77 = *(void *)(v42 + 8 * v70);
            if (!v77)
            {
              unint64_t v78 = v44 + 5;
              if (v78 >= v72) {
                break;
              }
              unint64_t v77 = *(void *)(v42 + 8 * v78);
              if (!v77)
              {
                while (1)
                {
                  uint64_t v70 = v78 + 1;
                  if (__OFADD__(v78, 1LL)) {
                    break;
                  }
                  if (v70 >= v72) {
                    goto LABEL_103;
                  }
                  unint64_t v77 = *(void *)(v42 + 8 * v70);
                  ++v78;
                  if (v77) {
                    goto LABEL_102;
                  }
                }

    __break(1u);
    goto LABEL_25;
  }

    CFSetCallBacks v8 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    uint64_t v14 = *(void *)(v1 + 56);
    int v15 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v10);
    CFIndex v16 = *v15;
    id v17 = v15[1];
    outlined init with copy of AttributedString._AttributeValue(v14 + 72 * v10, (uint64_t)v126);
    *(void *)&v121 = v16;
    *((void *)&v121 + 1) = v17;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v126, (uint64_t)&v122);
    *(void *)&v115 = v16;
    *((void *)&v115 + 1) = v17;
    int v18 = (uint64_t)v105;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v122, (uint64_t)v105);
    int v19 = v120;
    swift_bridgeObjectRetain_n();
    outlined destroy of AttributedString._AttributeValue(v18);
    v112 = v16;
    v113 = v17;
    uint64_t v20 = (uint64_t)v106;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v122, (uint64_t)v106);
    if (v19 != 1)
    {
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
      goto LABEL_8;
    }

    v108 = v16;
    v109 = v17;
    outlined init with copy of AttributedString._AttributeValue(v20, (uint64_t)v104);
    uint64_t v21 = v111;
    if (v111
      && *(void *)(v111 + 16)
      && (Hasher.init(_seed:)(),
          Hasher._combine(_:)(0LL),
          uint64_t v22 = Hasher._finalize()(),
          int v23 = -1LL << *(_BYTE *)(v21 + 32),
          uint64_t v24 = v22 & ~v23,
          ((*(void *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v24) & 1) != 0))
    {
      uint64_t v25 = ~v23;
      while (*(void *)(*(void *)(v21 + 48) + 16 * v24 + 8))
      {
        uint64_t v24 = (v24 + 1) & v25;
        if (((*(void *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v24) & 1) == 0) {
          goto LABEL_32;
        }
      }

      swift_bridgeObjectRelease();
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v104);
LABEL_8:
      outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
      swift_bridgeObjectRelease();
      uint64_t v1 = v107;
    }

    else
    {
LABEL_32:
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v104);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
      swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v100 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
      __int128 v26 = __OFADD__(v101++, 1LL);
      uint64_t v1 = v107;
      if (v26) {
        goto LABEL_142;
      }
    }
  }

  uint64_t v13 = v11 + 3;
  if (v13 >= v103) {
    goto LABEL_36;
  }
  __int128 v12 = *(void *)(v102 + 8 * v13);
  if (v12)
  {
    Swift::String v4 = v13;
    goto LABEL_24;
  }

  while (1)
  {
    Swift::String v4 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_145;
    }
    if (v4 >= v103) {
      break;
    }
    __int128 v12 = *(void *)(v102 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }

        if (v26) {
          goto LABEL_197;
        }
LABEL_25:
        uint64_t v28 = (4 * *(_BYTE *)(v27 + 18) + 8) & 0x3C;
        uint64_t v25 = ((-15LL << v28) - 1) & v25 | (v30 << v28);
        uint64_t v29 = *(void *)(v27 + 24 + 24 * v30);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v27 = v29;
        if (!*(_BYTE *)(v29 + 18)) {
          goto LABEL_49;
        }
      }
    }

    swift_unknownObjectRetain_n();
    uint64_t result = outlined retain of AttributedString.Runs((uint64_t)&v210);
    uint64_t v25 = 0LL;
    __int128 v26 = v23;
    uint64_t v29 = v20;
LABEL_49:
    unsigned __int8 v45 = *(unsigned __int16 *)(v29 + 16);
    v167 = v29;
    if (!(_DWORD)v45) {
      goto LABEL_58;
    }
    int v46 = *(void *)(v29 + 24);
    uint64_t v34 = __OFSUB__(v26, v46);
    unint64_t v47 = v26 - v46;
    if (v34) {
      goto LABEL_219;
    }
    if (__OFADD__(v47, 1LL)) {
      goto LABEL_220;
    }
    if (v47 + 1 <= 0)
    {
      unsigned __int8 v45 = 0LL;
    }

    else
    {
      if ((_DWORD)v45 == 1)
      {
LABEL_59:
        if (v47) {
          goto LABEL_216;
        }
        __int128 v26 = 0LL;
        goto LABEL_71;
      }

      unint64_t v48 = *(void *)(v167 + 48);
      __int128 v26 = v47 - v48;
      if (__OFSUB__(v47, v48)) {
        goto LABEL_222;
      }
      if (__OFADD__(v26, 1LL)) {
        goto LABEL_223;
      }
      if (v26 + 1 >= 1)
      {
        if ((_DWORD)v45 != 2)
        {
          int64_t v49 = (void *)(v167 + 72);
          BOOL v50 = 2LL;
          while (v45 != v50)
          {
            unint64_t v47 = v26 - *v49;
            if (__OFSUB__(v26, *v49)) {
              goto LABEL_214;
            }
            if (__OFADD__(v47, 1LL)) {
              goto LABEL_215;
            }
            if (v47 + 1 < 1)
            {
              unsigned __int8 v45 = v50;
              goto LABEL_71;
            }

            ++v50;
            v49 += 3;
            __int128 v26 = v47;
            if (v45 == v50) {
              goto LABEL_59;
            }
          }

          goto LABEL_213;
        }

      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    __break(1u);
    goto LABEL_24;
  }

          uint64_t v33 = static String._fromUTF8Repairing(_:)();
          char v35 = v34;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v36 = v33;
          *(void *)(v36 + _Block_object_dispose((const void *)(v17 - 128), 8) = v35;
          *(_OWORD *)(v36 + 16) = 0u;
          *(_OWORD *)(v36 + 32) = 0u;
          *(_BYTE *)(v36 + 4_Block_object_dispose((const void *)(v17 - 128), 8) = 11;
          return swift_willThrow();
        }

        __int128 v26 = HIWORD(v44);
        uint64_t v25 = HIDWORD(v44);
        LOWORD(v23) = v45;
        LOWORD(v27) = WORD1(v45);
        LOWORD(v2_Block_object_dispose((const void *)(v17 - 128), 8) = WORD2(v45);
        LOWORD(v29) = HIWORD(v45);
        LOWORD(v24) = v46;
        LOWORD(v30) = WORD1(v46);
      }

      goto LABEL_26;
    }

    if (a2)
    {
      if (*__s1 == 45)
      {
        uint64_t v21 = specialized _parseJSON5Integer<A>(_:isHex:)( __s1,  a2,  1,  (uint64_t (*)(_BYTE *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v22 & 1) != 0) {
          goto LABEL_24;
        }
        uint64_t result = specialized NSDecimal.init<A>(exactly:)(v21);
        if ((v24 & 0x100000000LL) != 0) {
          goto LABEL_24;
        }
      }

      else
      {
        __int128 v31 = specialized _parseJSON5Integer<A>(_:isHex:)( (unsigned __int8 *)__s1,  a2,  1,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
        if ((v32 & 1) != 0) {
          goto LABEL_24;
        }
        uint64_t result = specialized NSDecimal.init<A>(exactly:)(v31);
        if ((v24 & 0x100000000LL) != 0) {
          goto LABEL_24;
        }
      }

      uint64_t v25 = HIDWORD(result);
      __int128 v26 = HIWORD(result);
      uint64_t v27 = v23 >> 16;
      uint64_t v28 = HIDWORD(v23);
      uint64_t v29 = HIWORD(v23);
      uint64_t v30 = v24 >> 16;
      goto LABEL_26;
    }

    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    return result;
  }

  uint64_t result = (unint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)( (unsigned __int8 *)__s1,  a2,  a6 & 1,  a3,  a4);
  if (v7) {
    return result;
  }
  int v19 = (_BYTE *)result;
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)__s1,  a2,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v42);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v42, (uint64_t)&v49);
  uint64_t result = v49;
  if (v53 == 1)
  {
    if (v51 | v52 | v49 | v50) {
      goto LABEL_24;
    }
    uint64_t v20 = &__s1[a2] - v19;
    if ((((v19 - __s1) | v20) & 0x8000000000000000LL) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(v19, v20, a3, a4, (uint64_t)v43);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      int v18 = v43;
      goto LABEL_14;
    }

    goto LABEL_29;
  }

  __int128 v26 = HIWORD(v49);
  uint64_t v25 = HIDWORD(v49);
  LOWORD(v23) = v50;
  LOWORD(v27) = WORD1(v50);
  LOWORD(v2_Block_object_dispose((const void *)(v17 - 128), 8) = WORD2(v50);
  LOWORD(v29) = HIWORD(v50);
  LOWORD(v24) = v51;
  LOWORD(v30) = WORD1(v51);
LABEL_26:
  *(_DWORD *)a7 = result;
  *(_WORD *)(a7 + 4) = v25;
  *(_WORD *)(a7 + 6) = v26;
  *(_WORD *)(a7 + _Block_object_dispose((const void *)(v17 - 128), 8) = v23;
  *(_WORD *)(a7 + 10) = v27;
  *(_WORD *)(a7 + 12) = v28;
  *(_WORD *)(a7 + 14) = v29;
  *(_WORD *)(a7 + 16) = v24;
  *(_WORD *)(a7 + 1_Block_object_dispose((const void *)(v17 - 128), 8) = v30;
  return result;
}

      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    if (v3 >= v28 && v3 < v29)
    {
      CFSetCallBacks v8 = *(void *)(v4 + 16);
      if (v8)
      {
        unint64_t v9 = *(void *)(v4 + 40);
        uint64_t v10 = __OFSUB__(v3, v9);
        __int128 v11 = v3 - v9;
        if (!v10) {
          goto LABEL_16;
        }
        goto LABEL_25;
      }

      __break(1u);
LABEL_29:
      __break(1u);
    }

    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (v3 >= v6) {
    goto LABEL_23;
  }
  *(_BYTE *)(v7 - 102) = v2;
  *(_BYTE *)(v7 - 101) = v27;
  *(_BYTE *)(v7 - 100) = v26;
  *(_BYTE *)(v7 - 99) = v25;
  *(_BYTE *)(v7 - 9_Block_object_dispose((const void *)(v17 - 128), 8) = v24;
  *(_BYTE *)(v7 - 97) = v23;
  *(_BYTE *)(v7 - 96) = v22;
  *(_BYTE *)(v7 - 95) = v21;
  *(_BYTE *)(v7 - 94) = v0;
  *(_BYTE *)(v7 - 93) = v20;
  *(_BYTE *)(v7 - 92) = v19;
  *(_BYTE *)(v7 - 91) = v18;
  *(_BYTE *)(v7 - 90) = v17;
  *(_BYTE *)(v7 - 89) = v16;
  __int128 v12 = *(_BYTE *)(v7 - 102 + v3);
LABEL_17:
  *(_BYTE *)(v7 - 102) = v12;
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(v7 - 112))(v7 - 102);
  if (!v1 && (v14 & 1) == 0) {
    JUMPOUT(0x183444FB4LL);
  }
  return v3;
}

    __break(1u);
    goto LABEL_25;
  }

          URL.init(reference:)(v26, &v96);
          swift_release();
          swift_release();

          goto LABEL_25;
        }
      }

      else
      {
        swift_release();
        swift_release();
      }
    }

    else
    {
      int v23 = objc_msgSend(v5, sel_isFileURL);
      swift_release();
      swift_release();

      if ((v23 & 1) != 0) {
        goto LABEL_21;
      }
    }

    uint64_t v27 = v10;
    *(void *)&uint64_t v96 = countAndFlagsBits;
    *((void *)&v96 + 1) = object;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    uint64_t v28 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    __int128 v26 = objc_msgSend(v5, sel_URLByAppendingPathComponent_isDirectory_, v28, v27);
    swift_unknownObjectRelease();
    if (!v26) {
      goto LABEL_27;
    }
    goto LABEL_24;
  }

  CFSetCallBacks v8 = objc_msgSend(v5, sel_URLByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v8)
  {
    URL.init(reference:)(v8, &v96);

    goto LABEL_6;
  }

  *(void *)&uint64_t v96 = v5;
  *((void *)&v96 + 1) = v6;
  *(void *)uint64_t v97 = v7;
  uint64_t v13 = URL.absoluteString.getter();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v13, v14, 1, (uint64_t)v86);
  outlined init with take of LocalePreferences?( (uint64_t)v86,  (uint64_t)v85,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?( (uint64_t)v86,  (uint64_t)&v87,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v87) != 1)
  {
    v98 = v93;
    *(_OWORD *)v99 = v94;
    *(_OWORD *)&v99[16] = v95[0];
    *(_OWORD *)&v99[26] = *(_OWORD *)((char *)v95 + 10);
    *(_OWORD *)&v97[16] = v89;
    *(_OWORD *)&v97[32] = v90;
    *(_OWORD *)&v97[48] = v91;
    *(_OWORD *)&v97[64] = v92;
    uint64_t v96 = v87;
    *(_OWORD *)uint64_t v97 = v88;
    outlined init with take of LocalePreferences?( (uint64_t)v85,  (uint64_t)v84,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v84);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v86);
    int v15 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    CFIndex v16 = objc_msgSend(v15, sel_stringByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v17 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    int v19 = v18;

    uint64_t v20 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000LL) == 0) {
      uint64_t v20 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (v20)
    {
      uint64_t v21 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v17, v19);
      uint64_t v68 = v22;
      unsigned int v69 = v21;
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v68 = 0xE000000000000000LL;
      unsigned int v69 = 0LL;
    }

    unint64_t v66 = v99[40];
    char v67 = v99[41];
    uint64_t v64 = *(void *)&v99[32];
    int v65 = *(void *)&v99[24];
    unint64_t v62 = *(void *)&v99[16];
    unint64_t v63 = *(void *)&v99[8];
    pthread_t v61 = v98;
    size_t v60 = *(_OWORD *)&v97[64];
    int v59 = *(_OWORD *)&v97[48];
    unint64_t v58 = *(_OWORD *)&v97[32];
    unint64_t v57 = *(void *)&v97[8];
    int v56 = *(_OWORD *)&v97[16];
    unint64_t v54 = HIBYTE(v96);
    BOOL v55 = v97[0];
    unint64_t v40 = BYTE13(v96);
    unint64_t v41 = BYTE12(v96);
    unint64_t v42 = BYTE11(v96);
    unint64_t v43 = BYTE10(v96);
    unint64_t v44 = BYTE9(v96);
    unsigned __int8 v45 = v96;
    outlined init with take of LocalePreferences?( (uint64_t)&v98 + 8,  (uint64_t)v100,  &demangling cache variable for type metadata for String?);
    outlined release of String((uint64_t)v100);
    v73 = v45;
    LOBYTE(v74) = 0;
    BYTE1(v74) = v44;
    BYTE2(v74) = v43;
    BYTE3(v74) = v42;
    BYTE4(v74) = v41;
    *(_WORD *)((char *)&v74 + 5) = v40;
    HIBYTE(v74) = v54;
    double v75 = v55;
    *(void *)v76 = v57;
    *(_OWORD *)&v76[8] = v56;
    *(_OWORD *)&v76[24] = v58;
    *(_OWORD *)&v76[40] = v59;
    *(_OWORD *)&v76[56] = v60;
    unint64_t v77 = v61;
    unint64_t v78 = v69;
    unint64_t v79 = v68;
    *(void *)&v80 = v63;
    *((void *)&v80 + 1) = v62;
    *(void *)&unint64_t v81 = v65;
    *((void *)&v81 + 1) = v64;
    unint64_t v82 = v66;
    unint64_t v83 = v67;
    URLComponents.url.getter(&v70);
    outlined release of URLComponents((uint64_t)&v73);
    int v46 = v70;
    if (v70)
    {
      unint64_t v48 = v71;
      unint64_t v47 = v72;

      swift_release();
      swift_release();
LABEL_43:
      __int128 v5 = (id)v46;
      uint64_t v6 = v48;
      uint64_t v7 = v47;
    }
  }

    swift_release();
    return 0LL;
  }

  swift_setDeallocating();

  return 0LL;
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v14 = v47;
        if (!v47)
        {
LABEL_18:
          Hasher._combine(_:)(0);
          int v15 = v48;
          if (!v48)
          {
LABEL_19:
            Hasher._combine(_:)(0);
            goto LABEL_27;
          }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    uint64_t v13 = v47;
    if (!v47) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v64, v13);
    swift_bridgeObjectRelease();
    uint64_t v14 = v48;
    if (!v48) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = v45;
  if (v45) {
    goto LABEL_25;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  uint64_t v14 = v46;
  if (!v46)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }

        uint64_t v6 = (v13 - 1) & v13;
        __int128 v11 = __clz(__rbit64(v13)) + (v7 << 6);
      }

      int v15 = *(void **)(*(void *)(v3 + 48) + 8 * v11);
      if (v8[308] != -1LL) {
        swift_once();
      }
      CFIndex v16 = v9[307];
      id v17 = *(void *)(v16 + 16);
    }

    while (!v17);
    v98 = v7;
    int v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(v16 + 32));
    uint64_t v20 = v19;
    uint64_t v22 = v18 == static String._unconditionallyBridgeFromObjectiveC(_:)(v15) && v20 == v21;
    if (v22
      || (int v23 = _stringCompareWithSmolCheck(_:_:expecting:)(),
          swift_bridgeObjectRetain_n(),
          swift_bridgeObjectRelease(),
          swift_bridgeObjectRelease(),
          (v23 & 1) != 0))
    {
LABEL_47:
      Swift::String v3 = a2;
      uint64_t v36 = a3;
      goto LABEL_49;
    }

    if (v17 != 1) {
      break;
    }
LABEL_4:
    swift_bridgeObjectRelease_n();
    Swift::String v3 = v97;
    uint64_t v7 = v98;
    CFSetCallBacks v8 = &unk_18C490000;
    unint64_t v9 = &unk_18C490000;
  }

  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(v16 + 40));
  __int128 v26 = v25;
  if (v24 != static String._unconditionallyBridgeFromObjectiveC(_:)(v15) || v26 != v27)
  {
    uint64_t v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0) {
      goto LABEL_47;
    }
    if (v17 != 2)
    {
      uint64_t v29 = 6LL;
      while (1)
      {
        Swift::String v3 = v29 - 3;
        if (__OFADD__(v29 - 4, 1LL)) {
          break;
        }
        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(v16 + 8 * v29));
        __int128 v32 = v31;
        if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(v15) && v32 == v33) {
          goto LABEL_48;
        }
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v35 & 1) != 0) {
          goto LABEL_47;
        }
        ++v29;
        if (v3 == v17) {
          goto LABEL_4;
        }
      }

  v190[4] = v222;
  v190[5] = v223;
  v190[6] = v224;
  v190[7] = v225;
  v190[0] = v218;
  v190[1] = v219;
  v190[2] = v220;
  v190[3] = v221;
  v189 = v28;
  v191 = v29;
  v192 = v30;
  v193 = v31;
  v194 = v32;
  v195 = v33;
  v196 = v35;
  v197 = v36;
  v198 = v38;
  v199 = &outlined read-only object #0 of AttributedString.inflected(locale:userTermOfAddress:inflectionConcepts:);
  v200 = v27;
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v189);
  v184 = v13;
  v156 = v124;
  v167 = v39;
  *(void *)&v168 = v112;
  *((void *)&v168 + 1) = v123;
  *(void *)&v169 = v122;
  *((void *)&v169 + 1) = v121;
  *(void *)&v170 = v120;
  *((void *)&v170 + 1) = v119;
  *(void *)&v171 = v118;
  *((void *)&v171 + 1) = v117;
  v172 = v116;
  v173 = v115;
  v174 = v114;
  v175 = v113;
  AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( (uint64_t)&v156,  (uint64_t *)&v167,  v37,  a3,  0,  a4);
  return swift_bridgeObjectRelease();
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v62, v12);
  swift_bridgeObjectRelease();
LABEL_25:
  int v15 = v47;
  uint64_t v14 = v48;
  id v17 = v49;
  CFIndex v16 = v50;
  int v18 = v51;
  if (v47)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v19 = v14;
    uint64_t v20 = v17;
    uint64_t v21 = v16;
    uint64_t v22 = v18;
    int v23 = v15;
    _CFObject.hash(into:)();
    if (v14) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v28 = v18;
    uint64_t v29 = v14;
    uint64_t v30 = v17;
    __int128 v31 = v16;
    if (v14)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v24 = v14;
      _CFObject.hash(into:)();

      if (v17) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v17)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v25 = v17;
    _CFObject.hash(into:)();

    if (v16) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v18) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

          __break(1u);
          goto LABEL_25;
        }
      }

      __break(1u);
      goto LABEL_22;
    }
  }

  unint64_t v53 = v6[1];
  BOOL v55 = v6[2];
  unint64_t v54 = v6[3];
  v73 = *v6;
  unint64_t v52 = v73;
  int v74 = v53;
  v75[0] = v55;
  v75[1] = v54;
  lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
  swift_bridgeObjectRetain();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  int v56 = v67;
  unint64_t v57 = _StringGuts.validateInclusiveScalarIndex(_:)(v66, v55, v54);
  uint64_t result = specialized BidirectionalCollection<>._alignIndex(roundingUp:)(v56, v52, v53, v55, v54);
  if (result >> 14 < v57 >> 14)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  specialized BidirectionalCollection<>._getBlock(for:in:)(v59, v57, result, v52, v53, v55, v54, (uint64_t)&v73);
  outlined init with take of LocalePreferences?( (uint64_t)&v73,  (uint64_t)v79,  &demangling cache variable for type metadata for String.Index?);
  uint64_t result = outlined init with take of LocalePreferences?( (uint64_t)v79,  (uint64_t)&v80,  &demangling cache variable for type metadata for String.Index?);
  if ((v81 & 1) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  __int128 v38 = (unint64_t)v80;
  outlined init with take of LocalePreferences?( (uint64_t)v75,  (uint64_t)v78,  &demangling cache variable for type metadata for String.Index?);
  uint64_t result = outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)&v82,  &demangling cache variable for type metadata for String.Index?);
  if ((v83 & 1) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v76,  (uint64_t)v77,  &demangling cache variable for type metadata for String.Index?);
  uint64_t result = outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)&v66,  &demangling cache variable for type metadata for String.Index?);
  if ((v67 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_31:
  __break(1u);
  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v15);
  swift_bridgeObjectRelease();
LABEL_25:
  int v18 = v50;
  id v17 = v51;
  uint64_t v20 = v52;
  int v19 = v53;
  uint64_t v21 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v22 = v17;
    int v23 = v20;
    uint64_t v24 = v19;
    uint64_t v25 = v21;
    __int128 v26 = v18;
    _CFObject.hash(into:)();
    if (v17) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    __int128 v31 = v21;
    __int128 v32 = v17;
    uint64_t v33 = v20;
    uint64_t v34 = v19;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v27 = v17;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v28 = v20;
    _CFObject.hash(into:)();

    if (v19) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v21) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v16);
  swift_bridgeObjectRelease();
LABEL_25:
  int v19 = v51;
  int v18 = v52;
  uint64_t v21 = v53;
  uint64_t v20 = v54;
  uint64_t v22 = v55;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v23 = v18;
    uint64_t v24 = v21;
    uint64_t v25 = v20;
    __int128 v26 = v22;
    uint64_t v27 = v19;
    _CFObject.hash(into:)();
    if (v18) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    __int128 v32 = v22;
    uint64_t v33 = v18;
    uint64_t v34 = v21;
    char v35 = v20;
    if (v18)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v28 = v18;
      _CFObject.hash(into:)();

      if (v21) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v21)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v29 = v21;
    _CFObject.hash(into:)();

    if (v20) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v22) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v15);
  swift_bridgeObjectRelease();
LABEL_25:
  int v18 = v50;
  id v17 = v51;
  uint64_t v20 = v52;
  int v19 = v53;
  uint64_t v21 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v22 = v17;
    int v23 = v20;
    uint64_t v24 = v19;
    uint64_t v25 = v21;
    __int128 v26 = v18;
    _CFObject.hash(into:)();
    if (v17) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    __int128 v31 = v21;
    __int128 v32 = v17;
    uint64_t v33 = v20;
    uint64_t v34 = v19;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v27 = v17;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v28 = v20;
    _CFObject.hash(into:)();

    if (v19) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v21) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    CFIndex v16 = v50;
    if (!v50) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v67, v16);
    swift_bridgeObjectRelease();
    id v17 = v51;
    if (!v51) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  CFIndex v16 = v48;
  if (v48) {
    goto LABEL_25;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  id v17 = v49;
  if (!v49)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }

        int v19 = (void *)MEMORY[0x189603F70];
        uint64_t v20 = (const __CFString *)*MEMORY[0x189603B38];
        uint64_t v21 = (NSString *)@"*** memory allocation failed";
        goto LABEL_30;
      }

      uint64_t v21 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** class error for '%@': %@",  v13,  @"class not loaded");
      int v19 = (void *)MEMORY[0x189603F70];
      uint64_t v22 = &NSInconsistentArchiveException;
    }

    uint64_t v20 = (const __CFString *)*v22;
    goto LABEL_30;
  }

  if (!v24[0]) {
    return 0LL;
  }
  if (*(_BYTE *)(v24[0] + 8LL) == 1) {
    return *(void *)v24[0];
  }
  int v19 = (void *)MEMORY[0x189603F70];
  uint64_t v20 = @"NSArchiverArchiveInconsistency";
  uint64_t v21 = (NSString *)@"*** reuse label points to invalid type";
LABEL_30:
  objc_exception_throw((id)[v19 exceptionWithName:v20 reason:v21 userInfo:0]);
  return -[NSArray(NSArray) debugDescription]();
}

        if (a4 && [a4 length])
        {
          uint64_t v25 = -[NSBundle _cfBundle](self, "_cfBundle");
          __int128 v26 = a4;
        }

        else
        {
          uint64_t v25 = -[NSBundle _cfBundle](self, "_cfBundle", 0LL, v34);
          __int128 v26 = a3;
        }

        id v17 = _NSStringCreateByParsingMarkdownAndOptionallyInflecting(v26, v25, 0LL, 0LL, 1);
        __int128 v12 = 0LL;
        goto LABEL_29;
      }
    }

    else
    {
      uint64_t v13 = (void *)objc_msgSend(0, "__baseAttributedString");
      if (!v13) {
        goto LABEL_24;
      }
      __int128 v12 = 0LL;
    }

    CFIndex v16 = (NSMutableAttributedString *)objc_msgSend(v13, "attributedStringByInflectingString", 0, v34);
    goto LABEL_20;
  }

  if (a4)
  {
    id v17 =  _NSStringCreateByParsingMarkdownAndOptionallyInflecting( a4,  -[NSBundle _cfBundle](self, "_cfBundle"),  0LL,  0LL,  1);
    if (v17) {
      return v17;
    }
    int v18 = objc_alloc(&OBJC_CLASS___NSAttributedString);
    int v19 = (const __CFString *)a4;
  }

  else
  {
    int v18 = objc_alloc(&OBJC_CLASS___NSAttributedString);
    int v19 = &stru_189CA6A28;
  }

  return -[NSAttributedString initWithString:](v18, "initWithString:", v19);
}

  CFIndex v16 = CFStringConvertNSStringEncodingToEncoding(encoding);
  if (v16 == -1)
  {
    if (encoding == 134217984)
    {
      if (_CFExecutableLinkedOnOrAfter()) {
        NSLog( (NSString *)@"Incorrect NSStringEncoding value 0x%04lX detected. Assuming NSASCIIStringEncoding. Will stop this compatibility mapping behavior in the near future.",  134217984LL);
      }
      CFIndex v16 = 1536;
    }

    else
    {
      CFIndex v16 = -1;
    }
  }

  IsEncodingAvailable = CFStringIsEncodingAvailable(v16);
  if (IsEncodingAvailable)
  {
    uint64_t v20 = __CFStringDecodeByteStream3();
    *(_BYTE *)a5 = v26 != 0;
    uint64_t v21 = sizea;
    *(void *)(a5 + 24) = sizea;
    unint64_t v9 = v20 != 0;
    if (v20)
    {
      if (v26)
      {
        *(void *)(a5 + 16) = 0LL;
        if (sizea > 0x3F0)
        {
          if (!v6) {
            uint64_t v6 = malloc_default_zone();
          }
          int v23 = malloc_zone_malloc(v6, sizea);
          uint64_t v22 = 1;
          uint64_t v21 = sizea;
        }

        else
        {
          uint64_t v22 = 0;
          int v23 = (void *)(a5 + 32);
        }

        *(void *)(a5 + _Block_object_dispose((const void *)(v17 - 128), 8) = v23;
        *(_BYTE *)(a5 + 1) = v22;
        uint64_t v25 = v21;
      }

      else
      {
        *(void *)(a5 + _Block_object_dispose((const void *)(v17 - 128), 8) = 0LL;
        if (sizea > 0x1F8)
        {
          if (!v6) {
            uint64_t v6 = malloc_default_zone();
          }
          int v23 = malloc_zone_malloc(v6, 2 * sizea);
          uint64_t v24 = 1;
          uint64_t v21 = sizea;
        }

        else
        {
          uint64_t v24 = 0;
          int v23 = (void *)(a5 + 32);
        }

        *(void *)(a5 + 16) = v23;
        *(_BYTE *)(a5 + 1) = v24;
        uint64_t v25 = 2 * v21;
      }

      memmove(v23, 0LL, v25);
      if (v27) {
        CFAllocatorDeallocate(0LL, 0LL);
      }
    }

    else
    {
      *(_BYTE *)(a5 + 1) = 0;
      *(void *)(a5 + 24) = 0LL;
    }
  }

  return (IsEncodingAvailable != 0) & v9;
}

  __int128 v5 = (void *)[v6 objectAtIndex:0];
LABEL_25:

  return v5;
}

  if (a4 && a4 != 63)
  {
    while (1)
    {
      if (v8 | v7)
      {
        uint64_t v21 = *v6;
        if (v4 != *v6) {
          goto LABEL_30;
        }
      }

      else
      {
        uint64_t v21 = *v6;
        if (*v6 != v4)
        {
LABEL_30:
          if (v21 == v5) {
            CFSetRef v6 = a3;
          }
          goto LABEL_32;
        }
      }

      CFSetRef v6 = v10;
LABEL_32:
      ++v6;
      if (!--v9)
      {
        __int128 v12 = *(void *)(result + 16);
        __int128 v11 = *(void *)(result + 24);
        break;
      }
    }
  }

  if (v11 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  }

  else
  {
    if (a5 <= v11 + 1) {
      uint64_t v21 = v11 + 1;
    }
    else {
      uint64_t v21 = a5;
    }
    uint64_t v22 = v21 - 1;
    int v23 = (unsigned __int16 *)(a4 + 16 * v11 + 16);
    while (1)
    {
      uint64_t v24 = v11++;
      if (v11 >= a5) {
        break;
      }
      CFIndex v16 = *v23;
      if (*((unsigned __int8 *)v23 - 14) + *(v23 - 8) == (_DWORD)v16)
      {
        uint64_t v25 = *((unsigned __int8 *)v23 + 3) - 14;
        v23 += 8;
        if (v25 > 0xFFFFFFF4) {
          continue;
        }
      }

      goto LABEL_35;
    }

    uint64_t v24 = v22;
    CFIndex v16 = a3;
LABEL_35:
    if (v16 > a1)
    {
      uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      if (v10 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (a5 <= v10 + 1) {
          __int128 v26 = v10 + 1;
        }
        else {
          __int128 v26 = a5;
        }
        uint64_t v27 = v26 - 1;
        uint64_t v28 = (unsigned __int16 *)(a4 + 16 * v10 + 16);
        while (1)
        {
          uint64_t v20 = v10++;
          if (v10 >= a5) {
            break;
          }
          CFIndex v16 = *v28;
          if (*((unsigned __int8 *)v28 - 14) + *(v28 - 8) == (_DWORD)v16)
          {
            uint64_t v29 = *((unsigned __int8 *)v28 + 3) - 14;
            v28 += 8;
            if (v29 > 0xFFFFFFF4) {
              continue;
            }
          }

          goto LABEL_47;
        }

        CFIndex v16 = a3;
        uint64_t v20 = v27;
      }

      goto LABEL_47;
    }

    uint64_t v20 = v24;
  }

  uint64_t v24 = v9;
LABEL_47:
  if (v20 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = v20 + 1;
  }
  if (v20 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v30 = 0LL;
  }
  else {
    uint64_t v30 = v16;
  }
  uint64_t result = v30 + a2;
  if (v24 == 0x7FFFFFFFFFFFFFFFLL)
  {
    __int128 v31 = a5;
  }

  else
  {
    __int128 v32 = v24 + 1;
    if (a5 <= v24 + 1) {
      uint64_t v33 = v24 + 1;
    }
    else {
      uint64_t v33 = a5;
    }
    uint64_t v34 = (unsigned __int16 *)(a4 + 16 * v24 + 16);
    while (v32 < a5)
    {
      __int128 v31 = v32;
      if (*((unsigned __int8 *)v34 - 14) + *(v34 - 8) == *v34)
      {
        char v35 = *((unsigned __int8 *)v34 + 3) - 14;
        v34 += 8;
        ++v32;
        if (v35 > 0xFFFFFFF4) {
          continue;
        }
      }

      goto LABEL_64;
    }

    __int128 v31 = v33;
  }

    return 0LL;
  }

  if (!outError) {
    return 0LL;
  }
  unint64_t v9 = 0LL;
  *outError = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(12LL, (uint64_t)url, 1, 0LL, 0LL);
  return v9;
}

  [v8 replaceObjectAtIndex:v6 withObject:ifc];
  if (v12)
  {

    v15[1] = [v8 copy];
    *((_BYTE *)v15 + 45) = 1;
  }

  else
  {

    v15[2] = [v8 copy];
    *((_BYTE *)v15 + 44) = 1;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)v10 + 12);
}

    completed = values->_selfFraction.completed;
    total = values->_selfFraction.total;
    goto LABEL_25;
  }

void sub_182ED6008(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x182ED5EE8LL);
  }

  _Unwind_Resume(a1);
}

void sub_182ED6028(_Unwind_Exception *a1)
{
  if ((v1 & 1) != 0) {
    JUMPOUT(0x182ED6030LL);
  }
  _Unwind_Resume(a1);
}

void sub_182ED6038(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x182ED6044LL);
}

_BYTE *_NSKeyValueObservationInfoCreateByRemoving( uint64_t a1, objc_class *a2, NSKeyValueProperty *a3, void *a4, char a5, NSObject *a6, char *a7, NSKeyValueObservance **a8)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  *a7 = 0;
  *a8 = 0LL;
  unint64_t Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  size_t v17 = 8 * Count;
  __int128 v37 = a7;
  unint64_t v38 = 8 * Count;
  if (8 * Count < 0x81)
  {
    if (Count) {
      int v18 = (const void **)((char *)&v36 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL));
    }
    else {
      int v18 = 0LL;
    }
  }

  else
  {
    int v18 = (const void **)malloc(v17);
  }

  v40.location = 0LL;
  v40.length = Count;
  CFArrayGetValues(*(CFArrayRef *)(a1 + 8), v40, v18);
  if ((uint64_t)(Count - 1) < 0)
  {
LABEL_22:
    if (!*a8)
    {
      uint64_t v29 = 0LL;
      goto LABEL_37;
    }

    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v19 = Count - 1;
    while (1)
    {
      uint64_t v20 = (NSKeyValueObservance *)v18[v19];
      if (v20->_property == a3)
      {
        uint64_t v21 = (*((_BYTE *)v20 + 40) & 0x20) != 0 ? 8LL : 32LL;
        if (*(objc_class **)((char *)&v20->super.isa + v21) == a2 && (v20->_context == a4 || (a5 & 1) == 0))
        {
          uint64_t v22 = (*((_BYTE *)v20 + 40) & 0x20) != 0 ? v20->_originalObservableOrUnownedObserver.originalObservable : 0LL;
          if (!a6 || v22 == a6) {
            break;
          }
        }
      }

      if (v19-- <= 0) {
        goto LABEL_22;
      }
    }

    *a8 = v20;
  }

  if (Count >= 2)
  {
    os_unfair_lock_lock_with_options();
    if (!qword_18C496660)
    {
      uint64_t v24 = -[NSPointerFunctions initWithOptions:]( objc_alloc(&OBJC_CLASS___NSPointerFunctions),  "initWithOptions:",  5LL);
      -[NSPointerFunctions setHashFunction:](v24, "setHashFunction:", NSKeyValueShareableObservationInfoNSHTHash);
      -[NSPointerFunctions setIsEqualFunction:]( v24,  "setIsEqualFunction:",  NSKeyValueShareableObservationInfoNSHTIsEqual);
      qword_18C496660 = -[NSHashTable initWithPointerFunctions:capacity:]( objc_alloc(&OBJC_CLASS___NSHashTable),  "initWithPointerFunctions:capacity:",  v24,  0LL);
    }

    if (!qword_18C496668) {
      qword_18C496668 = objc_opt_self();
    }
    uint64_t v25 = (NSKeyValueShareableObservationInfoKey *)qword_18C496688;
    if (!qword_18C496688)
    {
      uint64_t v25 = objc_alloc_init(&OBJC_CLASS___NSKeyValueShareableObservationInfoKey);
      qword_18C496688 = (uint64_t)v25;
    }

    v25->_addingNotRemoving = 0;
    v25->_baseObservationInfo = (NSKeyValueObservationInfo *)a1;
    v25->_removalObservance = *a8;
    v25->_removalObservanceIndex = v19;
    *(void *)(qword_18C496688 + 80) = NSKeyValueShareableObservationInfoNSHTHash((uint64_t)v25);
    __int128 v26 = (_BYTE *)objc_msgSend((id)qword_18C496660, "member:");
    uint64_t v27 = qword_18C496688;
    *(void *)(qword_18C496688 + 64) = 0LL;
    *(void *)(v27 + 16) = 0LL;
    uint64_t v28 = *(void *)(v27 + 80);
    *(void *)(v27 + 80) = 0LL;
    if (v26)
    {
      uint64_t v29 = v26;
      uint64_t v30 = v26;
      char v31 = 1;
    }

    else
    {
      memmove(&v18[v19], &v18[v19 + 1], 8 * Count - (8 * v19 + 8));
      uint64_t v34 = -[NSKeyValueObservationInfo _initWithObservances:count:hashValue:]( objc_alloc(&OBJC_CLASS___NSKeyValueObservationInfo),  "_initWithObservances:count:hashValue:",  v18,  Count - 1,  v28);
      uint64_t v29 = v34;
      if (v34)
      {
        char v31 = v34[24];
        __int128 v32 = v37;
        if (v31)
        {
          char v35 = (void *)MEMORY[0x186E1FF60]();
          [(id)qword_18C496660 addObject:v29];
          objc_autoreleasePoolPop(v35);
          char v31 = 0;
        }

        goto LABEL_34;
      }

      char v31 = 0;
    }

    __int128 v32 = v37;
LABEL_34:
    *__int128 v32 = v31;
    os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_100);
    goto LABEL_37;
  }

  uint64_t v29 = 0LL;
  *__int128 v37 = 1;
LABEL_37:
  if (v38 >= 0x81) {
    free(v18);
  }
  return v29;
}

unint64_t NSKeyValueShareableObservationInfoNSHTHash(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  if (objc_opt_class() != qword_18C496668) {
    return *(void *)(a1 + 16);
  }
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 16);
      LOBYTE(v3) = CFArrayGetCount(*(CFArrayRef *)(v3 + 8)) & 0x3F;
    }

    else
    {
      uint64_t v4 = 0LL;
    }

    LODWORD(v9) = 0;
    __int128 v10 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)char v35 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)&v35[16] = v10;
    __int128 v11 = &v35[3];
    for (unint64_t i = 36LL; i > 7; i -= 4LL)
    {
      unsigned int v13 = *(v11 - 3) + 16 * v9;
      unsigned int v14 = *(v11 - 2) + 16 * (v13 ^ (16 * (v13 >> 28)));
      unsigned int v15 = *(v11 - 1) + 16 * (v14 ^ (16 * (v14 >> 28)));
      int v16 = *v11;
      v11 += 4;
      int v17 = v16 + 16 * (v15 ^ (16 * (v15 >> 28)));
      unint64_t v9 = (v17 ^ ((v17 & 0xF0000000) >> 24)) & ~(v17 & 0xF0000000);
    }

    return ((v9 << v3) | (v9 >> v3)) ^ v4;
  }

  uint64_t v2 = *(void *)(a1 + 80);
  if (!v2)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 16) + 8LL));
    CFIndex v6 = Count;
    unint64_t v7 = 8 * Count;
    if ((unint64_t)(8 * Count) < 0x81)
    {
      if (Count)
      {
        MEMORY[0x1895F8858](Count);
        CFSetCallBacks v8 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      }

      else
      {
        CFSetCallBacks v8 = 0LL;
      }
    }

    else
    {
      CFSetCallBacks v8 = malloc(8 * Count);
    }

    objc_msgSend(*(id *)(*(void *)(a1 + 16) + 8), "getObjects:range:", v8, 0, v6);
    uint64_t v2 = 0LL;
    if (v6)
    {
      uint64_t v19 = 0LL;
      char v20 = 0;
      uint64_t v21 = *(void *)(a1 + 72);
      while (v19 == v21)
      {
LABEL_31:
        if (++v19 == v6)
        {
          if (v7 > 0x80) {
            free(v8);
          }
          return v2;
        }
      }

      uint64_t v22 = *(void *)&v8[8 * v19];
      if (v22)
      {
        if ((*(_BYTE *)(v22 + 40) & 0x20) != 0) {
          uint64_t v23 = 8LL;
        }
        else {
          uint64_t v23 = 32LL;
        }
        uint64_t v24 = *(void *)(v22 + v23);
        if ((*(_BYTE *)(v22 + 40) & 0x20) != 0) {
          goto LABEL_25;
        }
      }

      else
      {
        uint64_t v24 = 0LL;
        if ((MEMORY[0x28] & 0x20) != 0)
        {
LABEL_25:
          uint64_t v25 = *(void *)(v22 + 32);
          goto LABEL_28;
        }
      }

      uint64_t v25 = 0LL;
LABEL_28:
      LODWORD(v26) = 0;
      __int128 v27 = *(_OWORD *)(v22 + 16);
      *(void *)char v35 = v24;
      *(_OWORD *)&v35[8] = v27;
      *(void *)&v35[24] = v25;
      uint64_t v28 = &v35[3];
      for (unint64_t j = 36LL; j > 7; j -= 4LL)
      {
        unsigned int v30 = *(v28 - 3) + 16 * v26;
        unsigned int v31 = *(v28 - 2) + 16 * (v30 ^ (16 * (v30 >> 28)));
        unsigned int v32 = *(v28 - 1) + 16 * (v31 ^ (16 * (v31 >> 28)));
        int v33 = *v28;
        v28 += 4;
        int v34 = v33 + 16 * (v32 ^ (16 * (v32 >> 28)));
        unint64_t v26 = (v34 ^ ((v34 & 0xF0000000) >> 24)) & ~(v34 & 0xF0000000);
      }

      v2 ^= (v26 << (v20 & 0x3F)) | (v26 >> (v20 & 0x3F));
      ++v20;
      goto LABEL_31;
    }
  }

  return v2;
}

void _NSKeyValueReplaceObservationInfoForObject(void *a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    id v7 = a4;
  }
  uint64_t v8 = _CFGetTSD();
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      while (*(void **)v9 != a1)
      {
        uint64_t v9 = *(void *)(v9 + 16);
        if (!v9) {
          goto LABEL_9;
        }
      }

      *(void *)(v9 + _Block_object_dispose((const void *)(v17 - 128), 8) = a4;
    }
  }

double protocol witness for static _OptionalForKVO._castForKVO(_:) in conformance A?@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static Optional._castForKVO(_:)(a1, *(void *)(a2 + 16), a3);
}

double static Optional._castForKVO(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = &v15[-v8];
  outlined init with copy of Any(a1, (uint64_t)v15);
  int v10 = swift_dynamicCast();
  uint64_t v11 = *(void *)(a2 - 8);
  __int128 v12 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v10)
  {
    v12(v9, 0LL, 1LL, a2);
    *(void *)(a3 + 24) = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v9, a2);
  }

  else
  {
    v12(v9, 1LL, 1LL, a2);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  return result;
}

void NSKeyValueShareableObservationInfoNSHTIsEqual(CFArrayRef *a1, CFArrayRef *a2)
{
  v63[3] = *MEMORY[0x1895F89C0];
  if (a1 == a2) {
    return;
  }
  if (object_getClass(a1) == (Class)qword_18C496668 || object_getClass(a2) == (Class)qword_18C496668)
  {
    Class Class = object_getClass(a1);
    if (Class == (Class)qword_18C496668) {
      unsigned int v14 = a2;
    }
    else {
      unsigned int v14 = a1;
    }
    if (Class == (Class)qword_18C496668) {
      unsigned int v15 = a1;
    }
    else {
      unsigned int v15 = a2;
    }
    CFArrayRef v16 = v15[2];
    if (*((_BYTE *)v15 + 8))
    {
      if (v16) {
        unint64_t Count = [*((id *)v16 + 1) count];
      }
      else {
        unint64_t Count = 0LL;
      }
      uint64_t v23 = -[__CFArray count](v14[1], "count");
      if (v23 != Count + 1) {
        return;
      }
      if (Count >> 60) {
        goto LABEL_97;
      }
      unint64_t v2 = v23;
      if (Count <= 1) {
        uint64_t v24 = 1LL;
      }
      else {
        uint64_t v24 = Count;
      }
      MEMORY[0x1895F8858](v24);
      unint64_t v26 = (char *)v63 - v25;
      if (Count >= 0x101)
      {
        unint64_t v26 = (char *)_CFCreateArrayStorage();
        uint64_t v22 = v26;
      }

      else
      {
        uint64_t v22 = 0LL;
      }

      CFArrayRef v31 = v15[2];
      if (v31) {
        objc_msgSend(*((id *)v31 + 1), "getObjects:range:", v26, 0, Count);
      }
      if (v2 >> 60) {
        goto LABEL_98;
      }
      if (v2 <= 1) {
        uint64_t v32 = 1LL;
      }
      else {
        uint64_t v32 = v2;
      }
      MEMORY[0x1895F8858](v32);
      int v34 = (char *)v63 - v33;
      if (v2 >= 0x101) {
        uint64_t v35 = _CFCreateArrayStorage();
      }
      else {
        uint64_t v35 = 0LL;
      }
      if (v2 >= 0x101) {
        int v34 = (char *)v35;
      }
      -[__CFArray getObjects:range:](v14[1], "getObjects:range:", v34, 0LL, v2);
      if (Count)
      {
        unint64_t v36 = Count;
        __int128 v37 = v34;
        do
        {
          if (*(void *)v26 != *(void *)v37) {
            break;
          }
          v37 += 8;
          v26 += 8;
          --v36;
        }

        while (v36);
      }

      int v56 = (void *)v35;
    }

    else
    {
      unint64_t Count = CFArrayGetCount(*((CFArrayRef *)v16 + 1));
      CFIndex v17 = CFArrayGetCount(v14[1]);
      if (v17 != Count - 1) {
        return;
      }
      if (Count >> 60) {
        goto LABEL_97;
      }
      unint64_t v18 = v17;
      if (Count <= 1) {
        uint64_t v19 = 1LL;
      }
      else {
        uint64_t v19 = Count;
      }
      MEMORY[0x1895F8858](v19);
      uint64_t v21 = (char *)v63 - v20;
      if (Count >= 0x101)
      {
        uint64_t v21 = (char *)_CFCreateArrayStorage();
        uint64_t v22 = v21;
      }

      else
      {
        uint64_t v22 = 0LL;
      }

      objc_msgSend(*((id *)v15[2] + 1), "getObjects:range:", v21, 0, Count);
      if (v18 >> 60)
      {
        CFStringRef v61 = CFStringCreateWithFormat( 0LL,  0LL,  @"*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt",  v18);
        unint64_t v62 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A48] reason:v61 userInfo:0];
        CFRelease(v61);
        objc_exception_throw(v62);
        goto LABEL_100;
      }

      if (v18 <= 1) {
        uint64_t v38 = 1LL;
      }
      else {
        uint64_t v38 = v18;
      }
      MEMORY[0x1895F8858](v38);
      CFRange v40 = (char *)v63 - v39;
      if (v18 >= 0x101) {
        uint64_t v41 = _CFCreateArrayStorage();
      }
      else {
        uint64_t v41 = 0LL;
      }
      if (v18 >= 0x101) {
        CFRange v40 = (char *)v41;
      }
      -[__CFArray getObjects:range:](v14[1], "getObjects:range:", v40, 0LL, v18);
      CFArrayRef v42 = v15[9];
      if (v42)
      {
        CFArrayRef v43 = v15[9];
        unint64_t v44 = v21;
        unsigned __int8 v45 = v40;
        while (*(void *)v44 == *(void *)v45)
        {
          v45 += 8;
          v44 += 8;
          CFArrayRef v43 = (CFArrayRef)((char *)v43 - 1);
          if (!v43) {
            goto LABEL_83;
          }
        }
      }

      else
      {
LABEL_83:
        if (Count + ~(unint64_t)v42)
        {
          int v46 = &v21[8 * (void)v42];
          if (*((void *)v46 + 1) == *(void *)&v40[8 * (void)v42])
          {
            uint64_t v50 = 0LL;
            unint64_t v51 = v46 + 16;
            uint64_t v52 = (uint64_t)&v40[8 * (void)v42 + 8];
            uint64_t v53 = Count - (void)v42 - 2;
            do
            {
              if (v53 == v50) {
                break;
              }
              uint64_t v54 = *(void *)&v51[8 * v50];
              uint64_t v55 = *(void *)(v52 + 8 * v50++);
            }

            while (v54 == v55);
          }
        }
      }

      int v56 = (void *)v41;
    }

    free(v56);
    free(v22);
    return;
  }

  unint64_t Count = CFArrayGetCount(a1[1]);
  CFIndex v6 = CFArrayGetCount(a2[1]);
  if (v6 != Count) {
    return;
  }
  if (Count >> 60)
  {
LABEL_97:
    CFStringRef v57 = CFStringCreateWithFormat( 0LL,  0LL,  @"*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt",  Count);
    unint64_t v58 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A48] reason:v57 userInfo:0];
    CFRelease(v57);
    objc_exception_throw(v58);
LABEL_98:
    CFStringRef v59 = CFStringCreateWithFormat( 0LL,  0LL,  @"*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt",  v2);
    size_t v60 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A48] reason:v59 userInfo:0];
    CFRelease(v59);
    objc_exception_throw(v60);
LABEL_100:
    __break(1u);
    return;
  }

  if (Count <= 1) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = Count;
  }
  if (Count >= 0x101) {
    uint64_t v8 = 1LL;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = 8 * v8;
  MEMORY[0x1895F8858](v6);
  uint64_t v11 = (void *)((char *)v63 - v10);
  if (Count >= 0x101)
  {
    uint64_t v11 = (void *)_CFCreateArrayStorage();
    __int128 v12 = v11;
  }

  else
  {
    __int128 v12 = 0LL;
  }

  uint64_t v27 = -[__CFArray getObjects:range:](a1[1], "getObjects:range:", v11, 0LL, Count);
  MEMORY[0x1895F8858](v27);
  uint64_t v28 = (char *)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (Count >= 0x101) {
    uint64_t v29 = (void *)_CFCreateArrayStorage();
  }
  else {
    uint64_t v29 = 0LL;
  }
  if (Count >= 0x101) {
    unsigned int v30 = v29;
  }
  else {
    unsigned int v30 = v28;
  }
  -[__CFArray getObjects:range:](a2[1], "getObjects:range:", v30, 0LL, Count);
  if (Count && *v11 == *v30)
  {
    uint64_t v47 = 1LL;
    do
    {
      if (Count == v47) {
        break;
      }
      uint64_t v48 = v11[v47];
      uint64_t v49 = v30[v47++];
    }

    while (v48 == v49);
  }

  free(v29);
  free(v12);
}

void sub_182ED7448(_Unwind_Exception *a1)
{
}

void sub_182ED74B4()
{
}

ValueMetadata *type metadata accessor for String.Encoding()
{
  return &type metadata for String.Encoding;
}

void sub_182ED8224(_Unwind_Exception *a1)
{
}

NSArray *__cdecl NSAllMapTableValues(NSMapTable *table)
{
  if (!table) {
    NSLog( (NSString *)@"%s: map table argument is NULL",  "NSArray * _Nonnull NSAllMapTableValues(NSMapTable * _Nonnull)");
  }
  return (NSArray *)-[NSMapTable allValues](table, "allValues");
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  uint64_t v1 = v0;
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v1 < 0 || (v1 & 0x4000000000000000LL) != 0)) {
    return (NSArray)swift_unknownObjectRetain();
  }
  _swift_isClassOrObjCExistentialType();
  swift_bridgeObjectRetain();
  return (NSArray)_ContiguousArrayBuffer._asCocoaArray()();
}

BOOL pointerEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void NSMapRemove(NSMapTable *table, const void *key)
{
  if (!table) {
    NSLog( (NSString *)@"%s: map table argument is NULL",  "void NSMapRemove(NSMapTable * _Nonnull, const void * _Nullable)");
  }
  -[NSMapTable removeObjectForKey:](table, "removeObjectForKey:", key);
}

uint64_t CFBasicHashRemoveValue(uint64_t a1, unint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(a1 + 16);
  if ((v3 & 0x3F0000) != 0)
  {
    int v4 = v3 & 3;
    switch(v4)
    {
      case 3:
        ___CFBasicHashFindBucket3(a1, a2, 0, v37);
        break;
      case 2:
        ___CFBasicHashFindBucket2(a1, a2, 0, v37);
        break;
      case 1:
        ___CFBasicHashFindBucket1(a1, a2, 0, v37);
        break;
      default:
        goto LABEL_49;
    }
  }

  else
  {
    v37[0] = -1LL;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
  }

  uint64_t v5 = v39;
  if ((unint64_t)v39 < 2)
  {
    if ((void)v39 != 1LL) {
      return v5;
    }
    unint64_t v8 = v37[0];
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    *(_WORD *)(a1 + 30) = HIWORD(v10) + 1;
    *((void *)&v11 + 1) = v10;
    *(void *)&__int128 v11 = v9;
    unint64_t v12 = ~(unint64_t)(v11 >> 32) | 0xFFFFFFFFFFLL;
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(v13 + 8 * v8);
    *(void *)(v13 + 8 * v_Block_object_dispose((const void *)(v17 - 128), 8) = v12;
    (**(void (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 14LL, v14, 0LL);
    unint64_t v15 = *(void *)(a1 + 16);
    if ((v15 & 4) != 0)
    {
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(v17 + 8 * v8);
      *(void *)(v17 + 8 * v_Block_object_dispose((const void *)(v17 - 128), 8) = v12;
      (**(void (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 15LL, v18, 0LL);
      unint64_t v15 = *(void *)(a1 + 16);
    }

    uint64_t v16 = *(void *)(a1 + 24);
    if ((v15 & 0x18) != 0)
    {
      uint64_t v19 = (v15 >> 3) & 3;
      if (!v19) {
        goto LABEL_49;
      }
      uint64_t v20 = *(void *)(a1 + 8 * v19 + 40);
      uint64_t v21 = *(void *)(v20 + 8 * v8);
      *(void *)(v20 + 8 * v_Block_object_dispose((const void *)(v17 - 128), 8) = v12;
      (**(void (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 16LL, v21, 0LL);
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
    }

    if ((v15 & 0x60) != 0)
    {
      uint64_t v22 = (v15 >> 5) & 3;
      if (!v22) {
        goto LABEL_49;
      }
      uint64_t v23 = *(void *)(a1 + 8 * v22 + 40);
      uint64_t v24 = *(void *)(v23 + 8 * v8);
      *(void *)(v23 + 8 * v_Block_object_dispose((const void *)(v17 - 128), 8) = v12;
      (**(void (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 17LL, v24, 0LL);
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
    }

    if ((v15 & 0x380) != 0)
    {
      uint64_t v25 = (v15 >> 7) & 7;
      if (!v25) {
        goto LABEL_49;
      }
      *(void *)(*(void *)(a1 + 8 * v25 + 40) + 8 * v_Block_object_dispose((const void *)(v17 - 128), 8) = 0LL;
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
    }

    if ((v15 & 0x1C00) != 0)
    {
      uint64_t v26 = (v15 >> 10) & 7;
      if (!v26) {
        goto LABEL_49;
      }
      *(void *)(*(void *)(a1 + 8 * v26 + 40) + 8 * v_Block_object_dispose((const void *)(v17 - 128), 8) = 0LL;
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
    }

    if ((v15 & 0xE000) != 0)
    {
      *(void *)(*(void *)(a1 + 8LL * ((unsigned __int16)v15 >> 13) + 40) + 8 * v_Block_object_dispose((const void *)(v17 - 128), 8) = 0LL;
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
    }

    unint64_t v27 = (v15 & 0xFFFFFFFFFFC00000LL) - 0x400000;
    unint64_t v28 = v27 & 0xFFFFFFFFFFC00000LL | v15 & 0x3FFFFF;
    *(void *)(a1 + 16) = v28;
    *(void *)(a1 + 24) = v16 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)(WORD2(v16) + 1) << 32);
    unint64_t v29 = (unsigned __int16)(WORD2(v16) + 1);
    if (WORD2(v16) != 0xFFFF)
    {
      uint64_t v30 = (v15 >> 16) & 0x3F;
      unint64_t v31 = __CFBasicHashTableSizes[v30];
      if ((unint64_t)(v30 - 7) > 0x37)
      {
        if ((unint64_t)(v30 - 5) > 0x39)
        {
          if ((v16 & 8) == 0)
          {
LABEL_42:
            unsigned int v33 = WORD1(v28) & 0x3F;
            if (v33 < 3) {
              return v5;
            }
            unsigned int v34 = v33 - 2;
            goto LABEL_46;
          }

unint64_t CFBasicHashGetCount(void *a1)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  unint64_t v1 = a1[2];
  if ((v1 & 0x380) == 0) {
    return v1 >> 22;
  }
  uint64_t v5 = 0LL;
  unint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v8 = 0LL;
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 3221225472LL;
  v4[2] = __CFBasicHashGetCount_block_invoke;
  _OWORD v4[3] = &unk_189C9B1B0;
  v4[4] = &v5;
  CFBasicHashApply(a1, (uint64_t)v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_182ED90D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t _NSThreadGet0(int a1)
{
  uint64_t v2 = pthread_self();
  uint64_t v3 = (_opaque_pthread_t *)pthread_main_thread_np();
  int v4 = pthread_equal(v2, v3);
  BOOL v5 = a1 == 1;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a1 == 1;
  }
  if (!v4) {
    BOOL v5 = 0;
  }
  if (a1) {
    int v7 = v5;
  }
  else {
    int v7 = 1;
  }
  if (!v6 || (uint64_t v8 = _CFGetTSD()) == 0)
  {
    if (v7)
    {
      if (_MergedGlobals_7_1 != -1) {
        dispatch_once(&_MergedGlobals_7_1, &__block_literal_global_50);
      }
      uint64_t v8 = qword_18C496408;
    }

    else
    {
      uint64_t v8 = objc_opt_new();
      atomic_store(0xEu, (unsigned __int8 *)(*(void *)(v8 + 8) + 55LL));
      *(void *)(*(void *)(v8 + 8) + 136LL) = pthread_self();
    }

    _CFSetTSD();
    if (v6) {
      _CFSetTSD();
    }
  }

  return v8;
}

void sub_182ED9B0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void _decodeObjectAfterSettingAllowListForKey(uint64_t a1, const __CFString *a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  int v4 = (uint64_t *)(a1 + 24);
  BOOL v5 = *(void **)(a1 + 56 + 8LL * *(unsigned int *)(a1 + 2260));
  if (a2)
  {
    goto LABEL_3;
  }

  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6 + 1;
  if (_NSXPCSerializationCreateObjectInDictionaryForGenericKey(v4, v5, v6, (uint64_t)v7)) {
LABEL_3:
  }
    _decodeObject_0(a1, a2, (uint64_t)v7);
}

void freeWeakStorage(id *location, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    int v4 = location;
    do
    {
      ++v4;
      --v3;
    }

    while (v3);
  }

  free(location);
}

void sub_182EDAAE8(_Unwind_Exception *exception_object)
{
}

uint64_t _writeJSONValue(__objc2_class *a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_8;
  }
  if (!a2)
  {
    __src[0] = 0LL;
    __src[1] = 0LL;
    int v19 = 0;
    goto LABEL_15;
  }

  -[__CFString decimalValue](a2, "decimalValue");
  if ((__src[0] & 0x1F00) != 0x1000)
  {
LABEL_15:
    uint64_t v17 = (void *)-[__CFString stringValue](a2, "stringValue");
    return -[__objc2_class appendString:range:](a1, "appendString:range:", v17, 0, [v17 length]);
  }

  uint64_t v9 = (void *)MEMORY[0x189603F70];
  uint64_t v10 = *MEMORY[0x189603A60];
  __int128 v11 = (NSString *)@"NaN number in JSON write";
  while (1)
  {
    objc_exception_throw((id)[v9 exceptionWithName:v10 reason:v11 userInfo:0]);
LABEL_8:
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      LODWORD(__src[0]) = 1819047278;
      return _appendBytes((char *)__src, 4uLL, (uint64_t)a1, 110);
    }

    a1 = &OBJC_CLASS___NSString;
    __int128 v11 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Invalid type in JSON write (%@)",  objc_opt_class());
    uint64_t v9 = (void *)MEMORY[0x189603F70];
    uint64_t v10 = *MEMORY[0x189603A60];
  }

  CFTypeID v12 = CFGetTypeID(a2);
  if (v12 != CFBooleanGetTypeID()) {
    return _writeJSONNumber((uint64_t)a1, a2);
  }
  if (-[__CFString BOOLValue](a2, "BOOLValue"))
  {
    char v13 = v20;
    uint64_t v14 = (char *)&_writeJSONBoolean_trueData;
    uint64_t v15 = (uint64_t)a1;
    size_t v16 = 4LL;
  }

  else
  {
    char v13 = v20;
    uint64_t v14 = "false";
    uint64_t v15 = (uint64_t)a1;
    size_t v16 = 5LL;
  }

  return _appendBytes(v14, v16, v15, v13);
}

uint64_t _writeJSONObject(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if ((a4 & 1) != 0)
  {
    uint64_t v11 = 2 * a3;
    MEMORY[0x1895F8858](a1);
    uint64_t v10 = (char *)v27 - ((v11 + 17) & 0xFFFFFFFFFFFFFFF0LL);
    memset(v10, 32, v12);
    LOBYTE(__src[0]) = 123;
    if (_appendBytes((char *)__src, 1uLL, a1, 123))
    {
      LOBYTE(__src[0]) = 10;
      if ((_appendBytes((char *)__src, 1uLL, a1, 10) & 1) != 0)
      {
        uint64_t v8 = [a2 count];
        unint64_t v9 = v8;
        if (v8) {
          goto LABEL_8;
        }
        LOBYTE(__src[0]) = 10;
        if (_appendBytes((char *)__src, 1uLL, a1, 10))
        {
          if (!a3 || _appendBytes((char *)v27 - ((v11 + 17) & 0xFFFFFFFFFFFFFFF0LL), 2 * a3, a1, v25))
          {
LABEL_36:
            LOBYTE(__src[0]) = 125;
            return _appendBytes((char *)__src, 1uLL, a1, 125);
          }
        }
      }
    }

    return 0LL;
  }

  LOBYTE(__src[0]) = 123;
  uint64_t v8 = [a2 count];
  unint64_t v9 = v8;
  if (!v8) {
    goto LABEL_36;
  }
  uint64_t v10 = 0LL;
LABEL_8:
  __src[0] = 0LL;
  __src[1] = __src;
  void __src[2] = 0x2020000000LL;
  __src[3] = 1LL;
  uint64_t v39 = 0LL;
  uint64_t v40 = &v39;
  uint64_t v41 = 0x2020000000LL;
  uint64_t v13 = MEMORY[0x1895F87A8];
  char v42 = 1;
  v29[0] = MEMORY[0x1895F87A8];
  v29[1] = 3221225472LL;
  uint64_t v30 = ___writeJSONObject_block_invoke;
  unint64_t v31 = &unk_189CA2160;
  uint64_t v32 = a1;
  unsigned int v33 = &v39;
  unint64_t v36 = v10;
  uint64_t v37 = a3;
  unsigned int v34 = __src;
  uint64_t v35 = a4;
  unint64_t v38 = v9;
  if ((a4 & 2) != 0)
  {
    v27[1] = v27;
    uint64_t v14 = MEMORY[0x1895F8858](v8);
    uint64_t v15 = &v27[-128];
    uint64_t v16 = MEMORY[0x1895F8858](v14);
    uint64_t v17 = &v27[-128];
    MEMORY[0x1895F8858](v16);
    uint64_t v18 = &v27[-128];
    if (v9 >= 0x81)
    {
      uint64_t v15 = malloc(8 * v9);
      uint64_t v17 = malloc(8 * v9);
      uint64_t v18 = malloc(8 * v9);
    }

    [a2 getObjects:v17 andKeys:v15 count:v9];
    uint64_t v19 = 0LL;
    do
    {
      if (([(id)v15[v19] isNSString] & 1) == 0)
      {
        if (v9 >= 0x81)
        {
          free(v15);
          free(v17);
          free(v18);
        }

        objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:@"Invalid (non-string) key in JSON dictionary" userInfo:0]);
        __break(1u);
      }

      ++v19;
    }

    while (v9 != v19);
    uint64_t v20 = 0LL;
    do
    {
      v18[v20] = v20;
      ++v20;
    }

    while (v9 != v20);
    v28[5] = v13;
    v28[6] = 3221225472LL;
    v28[7] = ___writeJSONObject_block_invoke_2;
    v28[8] = &__block_descriptor_40_e11_q24__0q8q16l;
    v28[9] = v15;
    CFSortIndexes();
    uint64_t v21 = 0LL;
    char v44 = 0;
    do
    {
      v30((uint64_t)v29, (CFStringRef)v15[v18[v21]], v17[v18[v21]], &v44);
      if (v44) {
        BOOL v22 = 1;
      }
      else {
        BOOL v22 = v9 - 1 == v21;
      }
      ++v21;
    }

    while (!v22);
    if (v9 >= 0x81)
    {
      free(v15);
      free(v17);
      free(v18);
    }
  }

  else
  {
    v28[0] = MEMORY[0x1895F87A8];
    v28[1] = 3221225472LL;
    v28[2] = ___writeJSONObject_block_invoke_3;
    v28[3] = &unk_189CA21A8;
    v28[4] = v29;
    [a2 enumerateKeysAndObjectsUsingBlock:v28];
  }

  if (*((_BYTE *)v40 + 24)
    && ((a4 & 1) == 0
     || (char v44 = 10, _appendBytes(&v44, 1uLL, a1, 10))
     && (!a3 || _appendBytes(v10, 2 * a3, a1, v24))))
  {
    char v44 = 125;
    uint64_t appended = _appendBytes(&v44, 1uLL, a1, 125);
  }

  else
  {
    uint64_t appended = 0LL;
  }

  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(__src, 8);
  return appended;
}

void sub_182EDB5CC(_Unwind_Exception *a1)
{
}

uint64_t _appendBytes@<X0>(char *__src@<X1>, size_t __n@<X2>, uint64_t a3@<X0>, char a4@<W8>)
{
  size_t v4 = __n;
  int v7 = *(_DWORD *)(a3 + 16);
  if (v7 == 1)
  {
    size_t v12 = *(void *)(a3 + 32);
    uint64_t v11 = *(void *)(a3 + 40);
    if (v11 + __n >= v12)
    {
      if (v11 + __n <= 2 * v12) {
        uint64_t v14 = 2 * v12;
      }
      else {
        uint64_t v14 = v11 + __n;
      }
      uint64_t v13 = __CFSafelyReallocate();
      *(void *)(a3 + 24) = v13;
      *(void *)(a3 + 32) = v14;
      uint64_t v11 = *(void *)(a3 + 40);
    }

    else
    {
      uint64_t v13 = *(void *)(a3 + 24);
    }

    memcpy((void *)(v13 + v11), __src, v4);
    *(void *)(a3 + 40) += v4;
    goto LABEL_18;
  }

  if (v7 != 2) {
    return a4 & 1;
  }
  if (!__n)
  {
LABEL_18:
    a4 = 1;
    return a4 & 1;
  }

  uint64_t v8 = 0LL;
  int v9 = 0;
  while (1)
  {
    uint64_t v10 = [*(id *)(a3 + 8) write:&__src[v8] maxLength:v4];
    if (v10 < 0) {
      break;
    }
    if (v10)
    {
      v8 += v10;
      *(void *)(a3 + 72) += v10;
      a4 = 1;
      v4 -= v10;
      if (!v4) {
        return a4 & 1;
      }
    }

    else
    {
      if (++v9 >= 0xBu)
      {
        uint64_t v15 = MEMORY[0x189604A60];
        uint64_t v16 = 640LL;
        goto LABEL_21;
      }

      pthread_yield_np();
    }
  }

  uint64_t v15 = MEMORY[0x189604A60];
  uint64_t v16 = 512LL;
LABEL_21:
  objc_msgSend( (id)a3,  "setFailure:",  +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  v16,  v15));
  a4 = 0;
  return a4 & 1;
}

uint64_t ___writeJSONObject_block_invoke_3(uint64_t a1)
{
  if ((_NSIsNSString() & 1) != 0) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:@"Invalid (non-string) key in JSON dictionary" userInfo:0]);
  return ___writeJSONObject_block_invoke(v3, v4);
}

uint64_t ___writeJSONObject_block_invoke(uint64_t result, CFStringRef theString, uint64_t a3, _BYTE *a4)
{
  int v7 = (uint64_t *)result;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *(void *)(result + 40);
  if (*(_BYTE *)(*(void *)(v8 + 8) + 24LL))
  {
    if ((*(_BYTE *)(result + 56) & 1) != 0)
    {
      double result = _appendBytes( *(char **)(result + 64),  2LL * *(void *)(result + 72) + 2,  *(void *)(result + 32),  2 * *(_BYTE *)(result + 72));
      uint64_t v8 = v7[5];
      if ((result & 1) == 0)
      {
        *(_BYTE *)(*(void *)(v8 + 8) + 24LL) = 0;
        uint64_t v8 = v7[5];
      }
    }
  }

  if (*(_BYTE *)(*(void *)(v8 + 8) + 24LL))
  {
    double result = _writeJSONString(v7[4], theString, v7[7]);
    uint64_t v8 = v7[5];
    if ((result & 1) == 0)
    {
      *(_BYTE *)(*(void *)(v8 + 8) + 24LL) = 0;
      uint64_t v8 = v7[5];
    }
  }

  if (*(_BYTE *)(*(void *)(v8 + 8) + 24LL))
  {
    if ((v7[7] & 1) != 0)
    {
      uint64_t v9 = v7[4];
      char __src = 32;
      double result = _appendBytes(&__src, 1uLL, v9, 32);
      uint64_t v8 = v7[5];
      if ((result & 1) == 0)
      {
        *(_BYTE *)(*(void *)(v8 + 8) + 24LL) = 0;
        uint64_t v8 = v7[5];
      }
    }
  }

  if (*(_BYTE *)(*(void *)(v8 + 8) + 24LL))
  {
    uint64_t v10 = v7[4];
    char v17 = 58;
    double result = _appendBytes(&v17, 1uLL, v10, 58);
    uint64_t v8 = v7[5];
    if ((result & 1) == 0)
    {
      *(_BYTE *)(*(void *)(v8 + 8) + 24LL) = 0;
      uint64_t v8 = v7[5];
    }
  }

  if (*(_BYTE *)(*(void *)(v8 + 8) + 24LL))
  {
    if ((v7[7] & 1) != 0)
    {
      uint64_t v11 = v7[4];
      char v16 = 32;
      double result = _appendBytes(&v16, 1uLL, v11, 32);
      uint64_t v8 = v7[5];
      if ((result & 1) == 0)
      {
        *(_BYTE *)(*(void *)(v8 + 8) + 24LL) = 0;
        uint64_t v8 = v7[5];
      }
    }
  }

  if (*(_BYTE *)(*(void *)(v8 + 8) + 24LL))
  {
    double result = _writeJSONValue(v7[4], a3, v7[9] + 1, v7[7]);
    uint64_t v8 = v7[5];
    if ((result & 1) == 0)
    {
      *(_BYTE *)(*(void *)(v8 + 8) + 24LL) = 0;
      uint64_t v8 = v7[5];
    }
  }

  if (*(_BYTE *)(*(void *)(v8 + 8) + 24LL) && *(void *)(*(void *)(v7[6] + 8) + 24LL) < (unint64_t)v7[10])
  {
    uint64_t v12 = v7[4];
    char v15 = 44;
    double result = _appendBytes(&v15, 1uLL, v12, 44);
    if ((result & 1) == 0) {
      *(_BYTE *)(*(void *)(v7[5] + 8) + 24LL) = 0;
    }
    uint64_t v8 = v7[5];
    if (*(_BYTE *)(*(void *)(v8 + 8) + 24LL))
    {
      if ((v7[7] & 1) != 0)
      {
        uint64_t v13 = v7[4];
        char v14 = 10;
        double result = _appendBytes(&v14, 1uLL, v13, 10);
        uint64_t v8 = v7[5];
        if ((result & 1) == 0)
        {
          *(_BYTE *)(*(void *)(v8 + 8) + 24LL) = 0;
          uint64_t v8 = v7[5];
        }
      }
    }
  }

  if (*(_BYTE *)(*(void *)(v8 + 8) + 24LL)) {
    ++*(void *)(*(void *)(v7[6] + 8) + 24LL);
  }
  else {
    *a4 = 1;
  }
  return result;
}

uint64_t _writeJSONString(uint64_t a1, CFStringRef theString, char a3)
{
  if (*(_DWORD *)(a1 + 16) == 1) {
    uint64_t v6 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v6 = 0LL;
  }
  if ((_convertJSONString((void *)a1, theString, a3, 1) & 1) != 0
    || (*(void *)(a1 + 40) = v6, (_convertJSONString((void *)a1, theString, a3, 0) & 1) != 0))
  {
    if (*(_DWORD *)(a1 + 16) == 2)
    {
      uint64_t result = _appendBytes(*(char **)(a1 + 24), *(void *)(a1 + 40), a1, 2);
      if (!(_DWORD)result) {
        return result;
      }
      *(void *)(a1 + 40) = 0LL;
    }

    return 1LL;
  }

  else
  {
    uint64_t v8 = (void *)MEMORY[0x189603F68];
    uint64_t v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"The string %p failed to convert to UTF8",  theString);
    objc_msgSend( (id)a1,  "setFailure:",  +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3852,  objc_msgSend(v8, "dictionaryWithObjectsAndKeys:", v9, *MEMORY[0x189604F30], 0)));
    return 0LL;
  }

uint64_t _convertJSONString(void *a1, CFStringRef theString, char a3, int a4)
{
  usedBufLen[1] = *MEMORY[0x1895F89C0];
  CFIndex Length = CFStringGetLength(theString);
  if (a4) {
    CFStringEncoding v9 = 0;
  }
  else {
    CFStringEncoding v9 = 134217984;
  }
  theStringa = theString;
  CFStringEncoding encoding = v9;
  CStringPtr = CFStringGetCStringPtr(theString, v9);
  uint64_t v12 = (UInt8 *)CStringPtr;
  if (!CStringPtr)
  {
    uint64_t v12 = (UInt8 *)a1[7];
  }

  unint64_t v14 = a1[4];
  uint64_t v13 = a1[5];
  unint64_t v15 = v13 + 6 * Length + 3;
  if (v15 >= v14)
  {
    if (v15 <= 2 * v14) {
      uint64_t v17 = 2 * v14;
    }
    else {
      uint64_t v17 = v13 + 6 * Length + 3;
    }
    uint64_t v16 = __CFSafelyReallocate();
    a1[3] = v16;
    a1[4] = v17;
    uint64_t v13 = a1[5];
  }

  else
  {
    uint64_t v16 = a1[3];
  }

  a1[5] = v13 + 1;
  *(_BYTE *)(v16 + v13) = 34;
  if (Length < 1)
  {
LABEL_45:
    uint64_t v47 = a1[3];
    uint64_t v48 = a1[5];
    a1[5] = v48 + 1;
    *(_BYTE *)(v47 + v4_Block_object_dispose((const void *)(v1 - 152), 8) = 34;
    return 1LL;
  }

  CFIndex v18 = 0LL;
  CFIndex v19 = Length;
  while (1)
  {
    if (CStringPtr)
    {
      CFIndex v19 = 0LL;
      usedBufLen[0] = Length;
LABEL_20:
      uint64_t v23 = 0LL;
      while (1)
      {
        unsigned int v24 = v12[v23];
        if (v24 == 92)
        {
          uint64_t v29 = a1[3];
          uint64_t v30 = a1[5];
          a1[5] = v30 + 1;
          *(_BYTE *)(v29 + v30) = 92;
          uint64_t v31 = a1[3];
          uint64_t v32 = a1[5];
          a1[5] = v32 + 1;
          *(_BYTE *)(v31 + v32) = 92;
        }

        else if (v24 == 34)
        {
          uint64_t v25 = a1[3];
          uint64_t v26 = a1[5];
          a1[5] = v26 + 1;
          *(_BYTE *)(v25 + v26) = 92;
          uint64_t v27 = a1[3];
          uint64_t v28 = a1[5];
          a1[5] = v28 + 1;
          *(_BYTE *)(v27 + v2_Block_object_dispose((const void *)(v1 - 152), 8) = 34;
        }

        else
        {
          if ((a3 & 8) == 0 || v24 != 47)
          {
            if (v24 != 47)
            {
              uint64_t v33 = a1[3];
              uint64_t v34 = a1[5];
              a1[5] = v34 + 1;
              if (v24 > 0x1F)
              {
                *(_BYTE *)(v33 + v34) = v24;
              }

              else
              {
                *(_BYTE *)(v33 + v34) = 92;
                switch(v24)
                {
                  case 8u:
                    uint64_t v35 = a1[3];
                    uint64_t v36 = a1[5];
                    a1[5] = v36 + 1;
                    char v37 = 98;
                    goto LABEL_43;
                  case 9u:
                    uint64_t v35 = a1[3];
                    uint64_t v36 = a1[5];
                    a1[5] = v36 + 1;
                    char v37 = 116;
                    goto LABEL_43;
                  case 0xAu:
                    uint64_t v35 = a1[3];
                    uint64_t v36 = a1[5];
                    a1[5] = v36 + 1;
                    char v37 = 110;
                    goto LABEL_43;
                  case 0xCu:
                    uint64_t v35 = a1[3];
                    uint64_t v36 = a1[5];
                    a1[5] = v36 + 1;
                    char v37 = 102;
                    goto LABEL_43;
                  case 0xDu:
                    uint64_t v35 = a1[3];
                    uint64_t v36 = a1[5];
                    a1[5] = v36 + 1;
                    char v37 = 114;
LABEL_43:
                    *(_BYTE *)(v35 + v36) = v37;
                    break;
                  default:
                    uint64_t v42 = a1[3];
                    uint64_t v43 = a1[5];
                    a1[5] = v43 + 1;
                    *(_BYTE *)(v42 + v43) = 117;
                    CFIndex v50 = v18;
                    CFIndex v44 = Length;
                    uint64_t v45 = CStringPtr;
                    uint64_t v46 = v10;
                    snprintf_l((char *)(a1[3] + a1[5]), 5uLL, 0LL, "%04x", v24);
                    uint64_t v10 = v46;
                    CStringPtr = v45;
                    CFIndex Length = v44;
                    CFIndex v18 = v50;
                    a1[5] += 4LL;
                    break;
                }
              }

              goto LABEL_35;
            }

            uint64_t v38 = a1[3];
            uint64_t v39 = a1[5];
            a1[5] = v39 + 1;
            *(_BYTE *)(v38 + v39) = 92;
          }

          uint64_t v40 = a1[3];
          uint64_t v41 = a1[5];
          a1[5] = v41 + 1;
          *(_BYTE *)(v40 + v41) = 47;
        }

LABEL_35:
      }
    }

    CFIndex v20 = v18;
    v54.location = v18;
    v54.length = v19;
    uint64_t v21 = v10;
    CFIndex Bytes = CFStringGetBytes(theStringa, v54, encoding, 0, 0, v12, a1[8], usedBufLen);
    if (!Bytes) {
      return 0LL;
    }
    uint64_t v10 = v21;
    CStringPtr = 0LL;
    v19 -= Bytes;
    CFIndex v18 = Bytes + v20;
    if (usedBufLen[0]) {
      goto LABEL_20;
    }
LABEL_44:
    if (v19 <= 0) {
      goto LABEL_45;
    }
  }

    uint64_t v28 = (v42 - 1) & v42;
    uint64_t v38 = __clz(__rbit64(v42)) + (v43 << 6);
    uint64_t v71 = v43;
    goto LABEL_36;
  }

          (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v36);
          goto LABEL_36;
        }

        *unsigned int v24 = *v25;
        CFStringRef v61 = type metadata accessor for NSDecimal.FormatStyle(0LL);
      }

      unint64_t v62 = *(int *)(v61 + 20);
      uint64_t v29 = (char *)v24 + v62;
      uint64_t v30 = (char *)v25 + v62;
      *(void *)uint64_t v29 = *(void *)((char *)v25 + v62);
      v29[8] = *((_BYTE *)v25 + v62 + 8);
      unint64_t v63 = *(_OWORD *)((char *)v25 + v62 + 32);
      *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v25 + v62 + 16);
      *((_OWORD *)v29 + 2) = v63;
      *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v25 + v62 + 48);
      *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v25 + v62 + 57);
      v29[73] = *((_BYTE *)v25 + v62 + 73);
      *((_WORD *)v29 + 37) = *(_WORD *)((char *)v25 + v62 + 74);
      v29[76] = *((_BYTE *)v25 + v62 + 76);
      v29[77] = *((_BYTE *)v25 + v62 + 77);
      uint64_t v64 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      int v65 = v64[9];
      unint64_t v66 = &v29[v65];
      char v67 = &v30[v65];
      uint64_t v68 = type metadata accessor for FloatingPointRoundingRule();
      unsigned int v69 = *(void *)(v68 - 8);
      goto LABEL_30;
    case 14:
      *(void *)a1 = *(void *)a2;
      uint64_t v40 = (_OWORD *)((char *)a1 + v39);
      uint64_t v41 = (_OWORD *)((char *)a2 + v39);
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
      uint64_t v42 = swift_getEnumCaseMultiPayload();
      if (v42 == 2)
      {
        *uint64_t v40 = *v41;
        uint64_t v71 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      }

      else
      {
        if (v42 == 1)
        {
          uint64_t v43 = v41[1];
          *uint64_t v40 = *v41;
          v40[1] = v43;
          uint64_t v29 = (char *)v40 + v44;
          uint64_t v30 = (char *)v41 + v44;
          *(void *)uint64_t v29 = *(void *)((char *)v41 + v44);
          v29[8] = *((_BYTE *)v41 + v44 + 8);
          uint64_t v45 = *(_OWORD *)((char *)v41 + v44 + 32);
          *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v41 + v44 + 16);
          *((_OWORD *)v29 + 2) = v45;
          *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v41 + v44 + 48);
          *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v41 + v44 + 57);
          v29[73] = *((_BYTE *)v41 + v44 + 73);
          *(_DWORD *)(v29 + 74) = *(_DWORD *)((char *)v41 + v44 + 74);
          v29[78] = *((_BYTE *)v41 + v44 + 78);
          uint64_t v32 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
          uint64_t v46 = v32[9];
          uint64_t v34 = &v29[v46];
          uint64_t v35 = &v30[v46];
          uint64_t v36 = type metadata accessor for FloatingPointRoundingRule();
          char v37 = *(void *)(v36 - 8);
          goto LABEL_35;
        }

        *uint64_t v40 = *v41;
        uint64_t v71 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      }

      uint64_t v72 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v71) + 36);
      uint64_t v29 = (char *)v40 + v72;
      uint64_t v30 = (char *)v41 + v72;
      *(void *)uint64_t v29 = *(void *)((char *)v41 + v72);
      v29[8] = *((_BYTE *)v41 + v72 + 8);
      v73 = *(_OWORD *)((char *)v41 + v72 + 32);
      *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v41 + v72 + 16);
      *((_OWORD *)v29 + 2) = v73;
      *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v41 + v72 + 48);
      *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v41 + v72 + 57);
      v29[73] = *((_BYTE *)v41 + v72 + 73);
      v29[76] = *((_BYTE *)v41 + v72 + 76);
      *((_WORD *)v29 + 37) = *(_WORD *)((char *)v41 + v72 + 74);
      v29[77] = *((_BYTE *)v41 + v72 + 77);
      uint64_t v64 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      int v74 = v64[9];
      unint64_t v66 = &v29[v74];
      char v67 = &v30[v74];
      uint64_t v68 = type metadata accessor for FloatingPointRoundingRule();
      unsigned int v69 = *(void *)(v68 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1LL, v68))
      {
LABEL_25:
        uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
LABEL_31:
        double v75 = v64[10];
        v76 = &v29[v75];
        unint64_t v77 = &v30[v75];
        *(void *)v76 = *(void *)v77;
        v76[8] = v77[8];
        unint64_t v78 = v64[11];
LABEL_37:
        v29[v78] = v30[v78];
        swift_storeEnumTagMultiPayload();
LABEL_42:
        swift_storeEnumTagMultiPayload();
        return a1;
      }

  objc_msgSend(v8, sel_setWeekOfMonth_, v30);
  if ((v46 & 1) != 0)
  {
LABEL_18:
    if ((v47 & 1) != 0) {
      goto LABEL_19;
    }
    goto LABEL_37;
  }

          uint64_t v8 = 0LL;
LABEL_36:
          uint64_t v6 = v24;
          uint64_t result = v25;
          goto LABEL_37;
        }

        v15 += 3LL;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_33:
    *(void *)&uint64_t v16 = 93LL;
    *((void *)&v16 + 1) = 0xE100000000000000LL;
    specialized String.withUTF8<A>(_:)((uint64_t *)&v16);
    swift_bridgeObjectRelease();
  }

  Hasher._combine(_:)(0);
  uint64_t v27 = 0LL;
LABEL_36:

  uint64_t v32 = v51;
  if (v32)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v32);
    swift_bridgeObjectRelease();
    uint64_t v33 = v52;
    if (v52) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v53) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  uint64_t v33 = v52;
  if (!v52) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v33);
  swift_bridgeObjectRelease();
  if (!v53) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v54 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v34 = v54 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }

  if (v55 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v35 = v55 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }

  if (v56 == 2)
  {
    uint64_t v36 = 0;
  }

  else
  {
    uint64_t v36 = v56 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v36);
  if (v57 == 2)
  {
    char v37 = 0;
  }

  else
  {
    uint64_t v38 = v57 & 1;
    Hasher._combine(_:)(1u);
    char v37 = v38;
  }

  Hasher._combine(_:)(v37);
  outlined retain of LocalePreferences?( (uint64_t)v59,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v59,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

  Hasher._combine(_:)(0);
  uint64_t v25 = 0LL;
LABEL_36:

  uint64_t v30 = v50;
  if (v30)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v60, v30);
    swift_bridgeObjectRelease();
    uint64_t v31 = v51;
    if (v51) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v52) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  uint64_t v31 = v51;
  if (!v51) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v60, v31);
  swift_bridgeObjectRelease();
  if (!v52) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v53 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v32 = v53 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v32);
  }

  if (v54 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v33 = v54 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v33);
  }

  if (v55 == 2)
  {
    uint64_t v34 = 0;
  }

  else
  {
    uint64_t v34 = v55 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v34);
  if (v56 == 2)
  {
    uint64_t v35 = 0;
  }

  else
  {
    uint64_t v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v35 = v36;
  }

  Hasher._combine(_:)(v35);
  outlined retain of LocalePreferences?( (uint64_t)v58,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v58,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

    __break(1u);
    JUMPOUT(0x18300A758LL);
  }

  uint64_t v34 = v20;
  uint64_t v35 = objc_allocWithZone(MEMORY[0x189603F50]);
  uint64_t v36 = v69;
  char v37 = v69;
  uint64_t v38 = objc_msgSend(v35, sel_initWithTimeIntervalSinceReferenceDate_, v19);
  uint64_t v39 = objc_msgSend(v37, sel_stringFromDate_, v38);

  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  uint64_t v42 = v41;
  outlined consume of JSONEncoder.DateEncodingStrategy(v36, v34, 0);

  type metadata accessor for JSONReference();
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v40;
  *(void *)(v43 + 24) = v42;
  *(_BYTE *)(v43 + 32) = 0;
  return v43;
}

  lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
  swift_allocError();
  *uint64_t v28 = xmmword_183723F60;
  swift_willThrow();
  return v2;
}

      uint64_t v33 = String.subscript.getter();
      CFIndex v19 = MEMORY[0x186E1B610](v33);
      uint64_t v21 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }

    if ((String.index(before:)() ^ v22) >= 0x4000) {
      goto LABEL_34;
    }
    v99 = v20;
    uint64_t v31 = (unint64_t)String.subscript.getter() >> 14;
    if (v31 == v32 >> 14) {
      goto LABEL_30;
    }
    v102 = Substring.index(before:)();
    if (Substring.subscript.getter() == 47 && v74 == 0xE100000000000000LL)
    {
LABEL_95:
      swift_bridgeObjectRelease();
      goto LABEL_96;
    }

    unint64_t v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v78 & 1) != 0)
    {
LABEL_96:
      while (v31 != v102 >> 14)
      {
        v102 = Substring.index(before:)();
        if (Substring.subscript.getter() == 47 && v75 == 0xE100000000000000LL) {
          goto LABEL_95;
        }
        unint64_t v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v77 & 1) == 0) {
          goto LABEL_106;
        }
      }

      uint64_t v33 = String.subscript.getter();
      CFIndex v19 = MEMORY[0x186E1B610](v33);
      uint64_t v21 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }

    if ((String.index(before:)() ^ v22) >= 0x4000) {
      goto LABEL_34;
    }
    v99 = v20;
    uint64_t v31 = (unint64_t)String.subscript.getter() >> 14;
    if (v31 == v32 >> 14) {
      goto LABEL_30;
    }
    v102 = Substring.index(before:)();
    if (Substring.subscript.getter() == 47 && v74 == 0xE100000000000000LL)
    {
LABEL_95:
      swift_bridgeObjectRelease();
      goto LABEL_96;
    }

    unint64_t v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v78 & 1) != 0)
    {
LABEL_96:
      while (v31 != v102 >> 14)
      {
        v102 = Substring.index(before:)();
        if (Substring.subscript.getter() == 47 && v75 == 0xE100000000000000LL) {
          goto LABEL_95;
        }
        unint64_t v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v77 & 1) == 0) {
          goto LABEL_106;
        }
      }

        if (v25)
        {
          uint64_t v39 = *((void *)v24 + 2);
          uint64_t v40 = v39 - v25;
          if (v39 - v25 < 0) {
            return _fatalErrorMessage(_:_:file:line:flags:)();
          }
          memmove(v24 + 32, &v24[v25 + 32], v39 - v25);
          *((void *)v24 + 2) = v40;
        }

        *(void *)(*(void *)(v0 + 16) + 24LL) = v24;
        return swift_task_switch();
      }

        if (v27)
        {
          uint64_t v41 = *((void *)v26 + 2);
          uint64_t v42 = v41 - v27;
          if (v41 - v27 < 0) {
            return _fatalErrorMessage(_:_:file:line:flags:)();
          }
          memmove(v26 + 32, &v26[v27 + 32], v41 - v27);
          *((void *)v26 + 2) = v42;
        }

        *(void *)(*(void *)(v0 + 16) + 24LL) = v26;
        return swift_task_switch();
      }

        if (v25)
        {
          uint64_t v39 = *((void *)v24 + 2);
          uint64_t v40 = v39 - v25;
          if (v39 - v25 < 0) {
            return _fatalErrorMessage(_:_:file:line:flags:)();
          }
          memmove(v24 + 32, &v24[v25 + 32], v39 - v25);
          *((void *)v24 + 2) = v40;
        }

        *(void *)(*(void *)(v0 + 16) + 24LL) = v24;
        return swift_task_switch();
      }

        if (v27)
        {
          uint64_t v41 = *((void *)v26 + 2);
          uint64_t v42 = v41 - v27;
          if (v41 - v27 < 0) {
            return _fatalErrorMessage(_:_:file:line:flags:)();
          }
          memmove(v26 + 32, &v26[v27 + 32], v41 - v27);
          *((void *)v26 + 2) = v42;
        }

        *(void *)(*(void *)(v0 + 16) + 24LL) = v26;
        return swift_task_switch();
      }

        if (v25)
        {
          uint64_t v39 = *((void *)v24 + 2);
          uint64_t v40 = v39 - v25;
          if (v39 - v25 < 0) {
            return _fatalErrorMessage(_:_:file:line:flags:)();
          }
          memmove(v24 + 32, &v24[v25 + 32], v39 - v25);
          *((void *)v24 + 2) = v40;
        }

        *(void *)(*(void *)(v0 + 16) + 24LL) = v24;
        return swift_task_switch();
      }

        if (v27)
        {
          uint64_t v41 = *((void *)v26 + 2);
          uint64_t v42 = v41 - v27;
          if (v41 - v27 < 0) {
            return _fatalErrorMessage(_:_:file:line:flags:)();
          }
          memmove(v26 + 32, &v26[v27 + 32], v41 - v27);
          *((void *)v26 + 2) = v42;
        }

        *(void *)(*(void *)(v0 + 16) + 24LL) = v26;
        return swift_task_switch();
      }

  Hasher._combine(_:)(0);
  uint64_t v28 = 0LL;
LABEL_36:

  uint64_t v33 = v53;
  if (v33)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v33);
    swift_bridgeObjectRelease();
    uint64_t v34 = v54;
    if (v54) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v55) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  uint64_t v34 = v54;
  if (!v54) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
  swift_bridgeObjectRelease();
  if (!v55) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v35 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }

  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v36 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }

  if (v58 == 2)
  {
    char v37 = 0;
  }

  else
  {
    char v37 = v58 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v37);
  if (v59 == 2)
  {
    uint64_t v38 = 0;
  }

  else
  {
    uint64_t v39 = v59 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v38 = v39;
  }

  Hasher._combine(_:)(v38);
  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

    __break(1u);
    goto LABEL_36;
  }

  if (v9 >= a6 && v11 <= a7)
  {
    if ((v10 & 0x8000000000000000LL) == 0)
    {
      CFIndex v19 = 0;
      CFIndex v18 = 0LL;
      CFIndex v20 = a2;
      uint64_t v21 = result;
      uint64_t result = v10;
      goto LABEL_32;
    }

    goto LABEL_38;
  }

  if (v9 <= a6 && v11 >= a6)
  {
    uint64_t result = specialized RandomAccessCollection<>.distance(from:to:)(v9, a6, a4, a5);
    if ((result & 0x8000000000000000LL) == 0)
    {
      CFIndex v18 = result;
      if (v10 >= result)
      {
        CFIndex v19 = 0;
        CFIndex v20 = a2;
        uint64_t v21 = v17;
        uint64_t result = v10;
        goto LABEL_32;
      }
    }

    goto LABEL_39;
  }

  CFIndex v20 = 0LL;
  CFIndex v19 = 1;
  uint64_t v21 = 0LL;
  uint64_t result = 0LL;
  CFIndex v18 = 0LL;
  if (v9 < a6 || v9 > a7) {
    goto LABEL_32;
  }
  uint64_t result = specialized RandomAccessCollection<>.distance(from:to:)(v9, a7, a4, a5);
  if ((result & 0x8000000000000000LL) == 0 && v10 >= result)
  {
    CFIndex v19 = 0;
    CFIndex v18 = 0LL;
    goto LABEL_17;
  }

  Hasher._combine(_:)(0);
  uint64_t v45 = 0LL;
LABEL_36:
  CFIndex v50 = v66;

  unint64_t v51 = v82;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v51);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  BOOL v5 = v65;
  uint64_t v17 = v69;
  uint64_t v52 = v83;
  if (!v83)
  {
    Hasher._combine(_:)(0);
    if (v84) {
      goto LABEL_41;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_44;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v52);
  swift_bridgeObjectRelease();
  if (!v84) {
    goto LABEL_43;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_44:
  CFIndex v18 = v68;
  if (v85 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v53 = v85 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }

  if (v86 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    CFRange v54 = v86 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }

  if (v87 == 2)
  {
    uint64_t v55 = 0;
  }

  else
  {
    uint64_t v55 = v87 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v55);
  if (v88 == 2)
  {
    int v56 = 0;
  }

  else
  {
    CFStringRef v57 = v88 & 1;
    Hasher._combine(_:)(1u);
    int v56 = v57;
  }

  Hasher._combine(_:)(v56);
  outlined retain of LocalePreferences?( (uint64_t)v90,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v90,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_57:
  unint64_t v58 = (int *)type metadata accessor for Measurement<>.FormatStyle(0LL, *(void *)(v18 + 16), v15, v16);
  outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v3[v58[8]],  (uint64_t)v9,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1LL, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    CFStringRef v59 = v67;
    outlined init with take of LocalePreferences?( (uint64_t)v9,  v67,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(1u);
    specialized FloatingPointFormatStyle.hash(into:)(a1);
    outlined destroy of Any?(v59, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  }

  size_t v60 = v3[v58[9]];
  if (v60 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Usage.rawValue.getter(v60);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  Hasher._combine(_:)(v3[v58[10]]);
}

  Hasher._combine(_:)(0);
  uint64_t v31 = 0LL;
LABEL_36:

  uint64_t v36 = v56;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v36);
    swift_bridgeObjectRelease();
    char v37 = v57;
    if (v57) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v58) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  char v37 = v57;
  if (!v57) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v37);
  swift_bridgeObjectRelease();
  if (!v58) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }

  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v39 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }

  if (v61 == 2)
  {
    uint64_t v40 = 0;
  }

  else
  {
    uint64_t v40 = v61 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v40);
  if (v62 == 2)
  {
    uint64_t v41 = 0;
  }

  else
  {
    uint64_t v42 = v62 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v41 = v42;
  }

  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?( (uint64_t)v64,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v64,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return swift_unknownObjectRelease_n();
}

  Hasher._combine(_:)(0);
  uint64_t v30 = 0LL;
LABEL_36:

  uint64_t v35 = v55;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = v56;
    if (v56) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v57) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  uint64_t v36 = v56;
  if (!v56) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
  swift_bridgeObjectRelease();
  if (!v57) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }

  if (v60 == 2)
  {
    uint64_t v39 = 0;
  }

  else
  {
    uint64_t v39 = v60 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v39);
  if (v61 == 2)
  {
    uint64_t v40 = 0;
  }

  else
  {
    uint64_t v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v40 = v41;
  }

  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

  specialized Set._Variant.insert(_:)(&v3, 0xDuLL);
  if ((a1 & 0x100000) == 0)
  {
LABEL_17:
    if ((a1 & 0x200000) == 0) {
      goto LABEL_18;
    }
LABEL_37:
    specialized Set._Variant.insert(_:)(&v3, 0xFuLL);
    if ((a1 & 0x100) == 0) {
      return v4;
    }
    goto LABEL_19;
  }

          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_31:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v29 = v19;
            _CFObject.hash(into:)();

            if (v21)
            {
LABEL_32:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              uint64_t v30 = v21;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }

          Hasher._combine(_:)(0);
          if (v18)
          {
LABEL_31:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v28 = v18;
            _CFObject.hash(into:)();

            if (v20)
            {
LABEL_32:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              uint64_t v29 = v20;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }

          Hasher._combine(_:)(0);
          if (v19) {
            goto LABEL_31;
          }
          goto LABEL_36;
        }

      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    __break(1u);
    goto LABEL_35;
  }

  return result;
}

  uint64_t v28 = v1;
  uint64_t v29 = (void *)v3;
LABEL_49:
  result._object = v29;
  result._countAndFlagsBits = v28;
  return result;
}

  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(double *)uint64_t v23 = v6;
  *(double *)(v23 + _Block_object_dispose((const void *)(v1 - 152), 8) = v16;
  *(_BYTE *)(v23 + 16) = 1;
  return (double *)swift_willThrow();
}

      uint64_t v35 = swift_bridgeObjectRelease();
      *(void *)(inited + 24) = 0LL;
      *(void *)(inited + 32) = 0xE000000000000000LL;
      *(void *)(inited + 40) = 0LL;
      *(void *)(inited + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
      *(_BYTE *)(inited + 56) = 0;
      uint64_t v36 = MEMORY[0x186E1B0E8](v35);
      LODWORD(v37) = v36;
      uint64_t v38 = 263LL;
      switch(v36)
      {
        case 1:
        case 13:
          uint64_t v38 = 257LL;
          goto LABEL_46;
        case 2:
          uint64_t v38 = 260LL;
          goto LABEL_46;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_40;
        case 27:
          goto LABEL_46;
        default:
          if (v36 == 63)
          {
            uint64_t v38 = 258LL;
          }

          else
          {
            if (v36 == 102)
            {
              uint64_t v39 = 0LL;
              uint64_t v38 = 256LL;
              goto LABEL_51;
            }

  Hasher._combine(_:)(0);
  uint64_t v30 = 0LL;
LABEL_36:

  uint64_t v35 = v55;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = v56;
    if (v56) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v57) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  uint64_t v36 = v56;
  if (!v56) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
  swift_bridgeObjectRelease();
  if (!v57) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }

  if (v60 == 2)
  {
    uint64_t v39 = 0;
  }

  else
  {
    uint64_t v39 = v60 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v39);
  if (v61 == 2)
  {
    uint64_t v40 = 0;
  }

  else
  {
    uint64_t v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v40 = v41;
  }

  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

  specialized Set._Variant.insert(_:)(&v3, 0xEuLL);
  if ((v1 & 0x8000) == 0)
  {
LABEL_17:
    if ((v1 & 0x10000) == 0) {
      goto LABEL_18;
    }
LABEL_37:
    specialized Set._Variant.insert(_:)(&v3, 0x10uLL);
    if ((v1 & 0x40000) == 0) {
      return v4;
    }
    goto LABEL_19;
  }

          LODWORD(v_Block_object_dispose((const void *)(v1 - 152), 8) = 0;
          uint64_t v25 = 1;
          goto LABEL_38;
        }

        goto LABEL_53;
      }

      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            LODWORD(v_Block_object_dispose((const void *)(v1 - 152), 8) = -(BYTE1(a1) - 48);
            if (BYTE1(a1) == 48)
            {
              CFStringEncoding v9 = v3 - 2;
              if (v9)
              {
                uint64_t v10 = (unsigned __int8 *)v24 + 2;
                do
                {
                  uint64_t v11 = *v10 - 48;
                  if (v11 > 9) {
                    goto LABEL_35;
                  }
                  uint64_t v12 = 10LL * v8;
                  if ((v12 & 0xFFFFFFFF00000000LL) != 0) {
                    goto LABEL_35;
                  }
                  LODWORD(v_Block_object_dispose((const void *)(v1 - 152), 8) = v12 - v11;
                  ++v10;
                }

                while (--v9);
              }

    LOWORD(v_Block_object_dispose((const void *)(v1 - 152), 8) = 0;
    LOBYTE(v9) = 1;
LABEL_36:
    uint64_t v23 = v9;
    goto LABEL_37;
  }

    swift_unknownObjectRetain();
    unint64_t v58 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v43, v57, v48, v40, v77);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_53;
  }

  int v74 = v13 >> 11;
  CFIndex v44 = *(unsigned __int8 *)(v40 + 18);
  if (*(_BYTE *)(v40 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v45 = (v13 >> 11) - 1;
    uint64_t v46 = v40;
    while (1)
    {
      uint64_t v49 = *(unsigned __int16 *)(v46 + 16);
      if (!*(_WORD *)(v46 + 16)) {
        goto LABEL_19;
      }
      CFIndex v50 = *(void *)(v46 + 40);
      unint64_t v51 = __OFSUB__(v45, v50);
      uint64_t v52 = v45 - v50;
      if (v51) {
        goto LABEL_70;
      }
      if (__OFADD__(v52, 1LL)) {
        goto LABEL_71;
      }
      if (v52 + 1 >= 1) {
        break;
      }
      uint64_t v49 = 0LL;
LABEL_20:
      uint64_t v47 = (4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C;
      CFIndex v44 = ((-15LL << v47) - 1) & v44 | (v49 << v47);
      uint64_t v48 = *(void *)(v46 + 24 + 24 * v49);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v46 = v48;
      if (!*(_BYTE *)(v48 + 18)) {
        goto LABEL_37;
      }
    }

    if ((_DWORD)v49 != 1)
    {
      uint64_t v53 = (uint64_t *)(v46 + 64);
      CFRange v54 = 1LL;
      while (1)
      {
        uint64_t v55 = *v53;
        v53 += 3;
        uint64_t v45 = v52 - v55;
        if (__OFSUB__(v52, v55)) {
          break;
        }
        if (__OFADD__(v45, 1LL)) {
          goto LABEL_66;
        }
        if (v45 + 1 < 1)
        {
          uint64_t v49 = v54;
          uint64_t v45 = v52;
          goto LABEL_20;
        }

        ++v54;
        uint64_t v52 = v45;
        if (v49 == v54) {
          goto LABEL_19;
        }
      }

      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }

    uint64_t v45 = v52;
LABEL_19:
    if (v45) {
      goto LABEL_69;
    }
    goto LABEL_20;
  }

  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v45 = (v13 >> 11) - 1;
  uint64_t v48 = v40;
LABEL_37:
  CFStringRef v59 = *(unsigned __int16 *)(v48 + 16);
  if (*(_WORD *)(v48 + 16))
  {
    size_t v60 = *(void *)(v48 + 24);
    unint64_t v51 = __OFSUB__(v45, v60);
    CFStringRef v61 = v45 - v60;
    if (v51)
    {
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }

    if (__OFADD__(v61, 1LL))
    {
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }

    if (v61 + 1 < 1)
    {
      CFStringRef v59 = 0LL;
LABEL_51:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      CFStringRef v57 = v44 & 0xFFFFFFFFFFFFF0FFLL | (v59 << 8);
      uint64_t v42 = v74;
      goto LABEL_35;
    }

    if ((_DWORD)v59 != 1)
    {
      unint64_t v62 = (uint64_t *)(v48 + 48);
      unint64_t v63 = 1LL;
      while (1)
      {
        uint64_t v64 = *v62;
        v62 += 3;
        uint64_t v45 = v61 - v64;
        if (__OFSUB__(v61, v64)) {
          goto LABEL_78;
        }
        if (__OFADD__(v45, 1LL)) {
          goto LABEL_79;
        }
        if (v45 + 1 < 1)
        {
          CFStringRef v59 = v63;
          uint64_t v45 = v61;
          goto LABEL_51;
        }

        ++v63;
        CFStringRef v61 = v45;
        if (v59 == v63) {
          goto LABEL_50;
        }
      }
    }

    uint64_t v45 = v61;
  }

    uint64_t v6 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, a2, a3);
    goto LABEL_9;
  }

  uint64_t result = String.UTF8View._foreignCount()();
  if (!__OFSUB__(result, 1LL))
  {
    uint64_t v8 = (a2 >> 59) & 1;
    uint64_t v6 = MEMORY[0x186E1B838](15LL, result - 1, a2, a3);
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  if (!v19) {
    goto LABEL_36;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }

  Hasher._combine(_:)(0);
  uint64_t v29 = 0LL;
LABEL_36:

  uint64_t v34 = v66;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v34);
    swift_bridgeObjectRelease();
    uint64_t v35 = v67;
    if (v67) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v68) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  uint64_t v35 = v67;
  if (!v67) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v35);
  swift_bridgeObjectRelease();
  if (!v68) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v36 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }

  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v37 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v71 == 2)
  {
    uint64_t v38 = 0;
  }

  else
  {
    uint64_t v38 = v71 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v38);
  if (v72 == 2)
  {
    uint64_t v39 = 0;
  }

  else
  {
    uint64_t v40 = v72 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v39 = v40;
  }

  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  uint64_t v41 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v41);
  swift_bridgeObjectRelease();
  uint64_t v42 = *(_DWORD *)(v2 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + 24));
  Hasher._combine(_:)(v42);
  if ((*(_BYTE *)(v2 + 40) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v43 = *(void *)(v2 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }

  Hasher._combine(_:)(*(void *)(v2 + 48));
  CFIndex v44 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v45 = (Swift::UInt *)(v2 + *(int *)(v44 + 36));
  Hasher._combine(_:)(*v45);
  Hasher._combine(_:)(v45[1]);
  uint64_t v46 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v47 = (char *)v45 + *(int *)(v46 + 28);
  if (v47[8] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v48 = *(void *)v47;
    Hasher._combine(_:)(1u);
    if ((v48 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v49 = v48;
    }
    else {
      uint64_t v49 = 0LL;
    }
    Hasher._combine(_:)(v49);
  }

  CFIndex v50 = v2 + *(int *)(v44 + 40);
  if (*(_BYTE *)(v50 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v52 = *(void *)v50;
    unint64_t v51 = *(void *)(v50 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
    Hasher._combine(_:)(v51);
  }

  Hasher._combine(_:)(0);
  uint64_t v27 = 0LL;
LABEL_36:

  uint64_t v32 = v64;
  if (v32)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v32);
    swift_bridgeObjectRelease();
    uint64_t v33 = v65;
    if (v65) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v66) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  uint64_t v33 = v65;
  if (!v65) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v33);
  swift_bridgeObjectRelease();
  if (!v66) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v34 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }

  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v35 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }

  if (v69 == 2)
  {
    uint64_t v36 = 0;
  }

  else
  {
    uint64_t v36 = v69 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v36);
  if (v70 == 2)
  {
    char v37 = 0;
  }

  else
  {
    uint64_t v38 = v70 & 1;
    Hasher._combine(_:)(1u);
    char v37 = v38;
  }

  Hasher._combine(_:)(v37);
  outlined retain of LocalePreferences?( (uint64_t)v72,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v72,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  uint64_t v39 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v74, v39);
  swift_bridgeObjectRelease();
  uint64_t v40 = *(_DWORD *)(v1 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 24));
  Hasher._combine(_:)(v40);
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v41 = *(void *)(v1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }

  Hasher._combine(_:)(*(void *)(v1 + 48));
  uint64_t v42 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v43 = (Swift::UInt *)(v1 + *(int *)(v42 + 36));
  Hasher._combine(_:)(*v43);
  Hasher._combine(_:)(v43[1]);
  CFIndex v44 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v45 = (char *)v43 + *(int *)(v44 + 28);
  if (v45[8] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v46 = *(void *)v45;
    Hasher._combine(_:)(1u);
    if ((v46 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v47 = v46;
    }
    else {
      uint64_t v47 = 0LL;
    }
    Hasher._combine(_:)(v47);
  }

  uint64_t v48 = v1 + *(int *)(v42 + 40);
  if (*(_BYTE *)(v48 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    CFIndex v50 = *(void *)v48;
    uint64_t v49 = *(void *)(v48 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
    Hasher._combine(_:)(v49);
  }

  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  uint64_t v29 = 0LL;
LABEL_36:

  uint64_t v34 = v65;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v34);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  a2 = v53;
  uint64_t v35 = v66;
  if (!v66)
  {
    Hasher._combine(_:)(0);
    if (v67) {
      goto LABEL_41;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_44;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v35);
  swift_bridgeObjectRelease();
  if (!v67) {
    goto LABEL_43;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_44:
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v36 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }

  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v37 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v70 == 2)
  {
    uint64_t v38 = 0;
  }

  else
  {
    uint64_t v38 = v70 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v38);
  if (v71 == 2)
  {
    uint64_t v39 = 0;
  }

  else
  {
    uint64_t v40 = v71 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v39 = v40;
  }

  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?( (uint64_t)v73,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v73,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_57:
  swift_unknownObjectRelease();
  uint64_t v41 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v75, v41);
  swift_bridgeObjectRelease();
  uint64_t v42 = *(_DWORD *)(v4 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v4 + 24));
  Hasher._combine(_:)(v42);
  if (*(_BYTE *)(v4 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v43 = *(void *)(v4 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }

  Hasher._combine(_:)(*(void *)(v4 + 48));
  CFIndex v44 = (Swift::UInt *)(v4 + *(int *)(a2 + 36));
  Hasher._combine(_:)(*v44);
  Hasher._combine(_:)(v44[1]);
  uint64_t v45 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v46 = (char *)v44 + *(int *)(v45 + 28);
  if (v46[8] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v47 = *(void *)v46;
    Hasher._combine(_:)(1u);
    if ((v47 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v48 = v47;
    }
    else {
      uint64_t v48 = 0LL;
    }
    Hasher._combine(_:)(v48);
  }

  uint64_t v49 = v4 + *(int *)(a2 + 40);
  if (*(_BYTE *)(v49 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v51 = *(void *)v49;
    CFIndex v50 = *(void *)(v49 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
    Hasher._combine(_:)(v50);
  }

  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  uint64_t v29 = 0LL;
LABEL_36:

  uint64_t v34 = v66;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v34);
    swift_bridgeObjectRelease();
    uint64_t v35 = v67;
    if (v67) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v68) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  uint64_t v35 = v67;
  if (!v67) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v35);
  swift_bridgeObjectRelease();
  if (!v68) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v36 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }

  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v37 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v71 == 2)
  {
    uint64_t v38 = 0;
  }

  else
  {
    uint64_t v38 = v71 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v38);
  if (v72 == 2)
  {
    uint64_t v39 = 0;
  }

  else
  {
    uint64_t v40 = v72 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v39 = v40;
  }

  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  uint64_t v41 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v41);
  swift_bridgeObjectRelease();
  uint64_t v42 = *(_DWORD *)(v2 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + 24));
  Hasher._combine(_:)(v42);
  if (*(_BYTE *)(v2 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v43 = *(void *)(v2 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }

  Hasher._combine(_:)(*(void *)(v2 + 48));
  CFIndex v44 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v45 = (Swift::UInt *)(v2 + *(int *)(v44 + 36));
  Hasher._combine(_:)(*v45);
  Hasher._combine(_:)(v45[1]);
  uint64_t v46 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v47 = (char *)v45 + *(int *)(v46 + 28);
  if (v47[8] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v48 = *(void *)v47;
    Hasher._combine(_:)(1u);
    if ((v48 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v49 = v48;
    }
    else {
      uint64_t v49 = 0LL;
    }
    Hasher._combine(_:)(v49);
  }

  CFIndex v50 = v2 + *(int *)(v44 + 40);
  if (*(_BYTE *)(v50 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v52 = *(void *)v50;
    unint64_t v51 = *(void *)(v50 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
    Hasher._combine(_:)(v51);
  }

  Hasher._combine(_:)(0);
  uint64_t v27 = 0LL;
LABEL_36:

  uint64_t v32 = v64;
  if (v32)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v32);
    swift_bridgeObjectRelease();
    uint64_t v33 = v65;
    if (v65) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v66) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  uint64_t v33 = v65;
  if (!v65) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v33);
  swift_bridgeObjectRelease();
  if (!v66) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v34 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }

  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v35 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }

  if (v69 == 2)
  {
    uint64_t v36 = 0;
  }

  else
  {
    uint64_t v36 = v69 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v36);
  if (v70 == 2)
  {
    char v37 = 0;
  }

  else
  {
    uint64_t v38 = v70 & 1;
    Hasher._combine(_:)(1u);
    char v37 = v38;
  }

  Hasher._combine(_:)(v37);
  outlined retain of LocalePreferences?( (uint64_t)v72,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v72,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  uint64_t v39 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v74, v39);
  swift_bridgeObjectRelease();
  uint64_t v40 = *(_DWORD *)(v1 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 24));
  Hasher._combine(_:)(v40);
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v41 = *(void *)(v1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }

  Hasher._combine(_:)(*(void *)(v1 + 48));
  uint64_t v42 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v43 = (Swift::UInt *)(v1 + *(int *)(v42 + 36));
  Hasher._combine(_:)(*v43);
  Hasher._combine(_:)(v43[1]);
  CFIndex v44 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v45 = (char *)v43 + *(int *)(v44 + 28);
  if (v45[8] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v46 = *(void *)v45;
    Hasher._combine(_:)(1u);
    if ((v46 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v47 = v46;
    }
    else {
      uint64_t v47 = 0LL;
    }
    Hasher._combine(_:)(v47);
  }

  uint64_t v48 = v1 + *(int *)(v42 + 40);
  if (*(_BYTE *)(v48 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    CFIndex v50 = *(void *)v48;
    uint64_t v49 = *(void *)(v48 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
    Hasher._combine(_:)(v49);
  }

  return Hasher._finalize()();
}

  CFIndex v19 = v73;
  if (v73)
  {
    if (v73 != *(void *)(v1 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Duration.UnitsFormatStyle.Unit>);
      CFIndex v20 = static _SetStorage.allocate(capacity:)();
      uint64_t v35 = 0LL;
      uint64_t v36 = *v75;
      char v37 = v20 + 56;
      while (1)
      {
        if (v36)
        {
          uint64_t v39 = __clz(__rbit64(v36));
          v36 &= v36 - 1;
          uint64_t v40 = v39 | (v35 << 6);
        }

        else
        {
          uint64_t v13 = __OFADD__(v35++, 1LL);
          if (v13) {
            goto LABEL_149;
          }
          if (v35 >= v74)
          {
LABEL_108:
            swift_release();
            return v20;
          }

          uint64_t v41 = v75[v35];
          if (!v41)
          {
            uint64_t v42 = v35 + 1;
            if (v35 + 1 >= v74) {
              goto LABEL_108;
            }
            uint64_t v41 = v75[v42];
            if (v41) {
              goto LABEL_91;
            }
            uint64_t v42 = v35 + 2;
            if (v35 + 2 >= v74) {
              goto LABEL_108;
            }
            uint64_t v41 = v75[v42];
            if (v41) {
              goto LABEL_91;
            }
            uint64_t v42 = v35 + 3;
            if (v35 + 3 >= v74) {
              goto LABEL_108;
            }
            uint64_t v41 = v75[v42];
            if (v41) {
              goto LABEL_91;
            }
            uint64_t v42 = v35 + 4;
            if (v35 + 4 >= v74) {
              goto LABEL_108;
            }
            uint64_t v41 = v75[v42];
            if (v41)
            {
LABEL_91:
              uint64_t v35 = v42;
            }

            else
            {
              uint64_t v52 = v35 + 5;
              if (v35 + 5 >= v74) {
                goto LABEL_108;
              }
              uint64_t v41 = v75[v52];
              v35 += 5LL;
              if (!v41)
              {
                while (1)
                {
                  uint64_t v35 = v52 + 1;
                  if (__OFADD__(v52, 1LL)) {
                    break;
                  }
                  if (v35 >= v74) {
                    goto LABEL_108;
                  }
                  uint64_t v41 = v75[v35];
                  ++v52;
                  if (v41) {
                    goto LABEL_92;
                  }
                }

    uint64_t v47 = 0LL;
    uint64_t v45 = 0u;
    uint64_t v46 = 0u;
    uint64_t v34 = (uint64_t *)&demangling cache variable for type metadata for LocalizedError?;
LABEL_36:
    uint64_t result = outlined destroy of Any?((uint64_t)&v45, v34);
    goto LABEL_37;
  }

  uint64_t v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0) {
    goto LABEL_30;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSHelpAnchor") == a2 && v17 == a3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }

  uint64_t v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
LABEL_33:
    uint64_t v48 = a1;
    uint64_t v31 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v32 = *((void *)&v46 + 1);
      uint64_t v33 = v47;
      __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 40))(v32, v33);
      goto LABEL_22;
    }

    goto LABEL_35;
  }

  if (static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedRecoveryOptions") == a2 && v35 == a3)
  {
    swift_bridgeObjectRelease();
LABEL_43:
    uint64_t v48 = a1;
    char v37 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverableError);
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v38 = *((void *)&v46 + 1);
      uint64_t v39 = v47;
      __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
      uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 16))(v38, v39);
      *(void *)(a4 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      *(void *)a4 = v40;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
    }

    uint64_t v47 = 0LL;
    uint64_t v45 = 0u;
    uint64_t v46 = 0u;
    uint64_t v34 = (uint64_t *)&demangling cache variable for type metadata for RecoverableError?;
    goto LABEL_36;
  }

  uint64_t v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v36 & 1) != 0) {
    goto LABEL_43;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSRecoveryAttempter") == a2 && v41 == a3)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v42 & 1) == 0) {
      goto LABEL_37;
    }
  }

  uint64_t v48 = a1;
  uint64_t v43 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverableError);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
    CFIndex v44 = type metadata accessor for __NSErrorRecoveryAttempter();
    uint64_t result = swift_allocObject();
    *(void *)(a4 + 24) = v44;
    *(void *)a4 = result;
    return result;
  }

      uint64_t v30 = (v35 - 1) & v35;
      uint64_t v33 = __clz(__rbit64(v35)) + (v25 << 6);
      if (!v17[2]) {
        goto LABEL_46;
      }
    }
  }

  else
  {
LABEL_46:
    __break(1u);
  }

  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

      uint64_t v34 = (v39 - 1) & v39;
      char v37 = __clz(__rbit64(v39)) + (v29 << 6);
      if (!v21[2]) {
        goto LABEL_84;
      }
    }

    char v37 = (v42 - 1) & v42;
    uint64_t v40 = __clz(__rbit64(v42)) + (v32 << 6);
    if (!v24[2]) {
      goto LABEL_47;
    }
  }

  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  if (!v22) {
    goto LABEL_36;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v32 = v22;
  _CFObject.hash(into:)();

  if (v24)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v33 = v24;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }

      int v3 = v117;
    }

    while (*(uint64_t **)((char *)a2 + v19) == v17);
LABEL_36:
    *(unint64_t *)((char *)v114 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
    uint64_t v26 = __OFADD__(v115++, 1LL);
  }

  while (!v26);
  __break(1u);
LABEL_39:
  uint64_t v27 = v115;
  if (!v115) {
    return MEMORY[0x18961AFF0];
  }
  if (v115 == *(void *)(v3 + 16))
  {
    swift_retain();
    return v3;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  CFIndex v50 = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v51 = 0LL;
  uint64_t v52 = *v114;
  uint64_t v53 = v50 + 64;
LABEL_86:
  v115 = v27;
  if (v52)
  {
    unint64_t v58 = __clz(__rbit64(v52));
    v52 &= v52 - 1;
    CFStringRef v59 = v51;
    size_t v60 = v58 | (v51 << 6);
    goto LABEL_106;
  }

  CFStringRef v61 = v51 + 1;
  if (__OFADD__(v51, 1LL)) {
    goto LABEL_155;
  }
  if (v61 < v113)
  {
    unint64_t v62 = v114[v61];
    unint64_t v63 = v51 + 1;
    if (!v62)
    {
      unint64_t v63 = v51 + 2;
      if (v51 + 2 >= v113) {
        return v50;
      }
      unint64_t v62 = v114[v63];
      if (!v62)
      {
        unint64_t v63 = v51 + 3;
        if (v51 + 3 >= v113) {
          return v50;
        }
        unint64_t v62 = v114[v63];
        if (!v62)
        {
          unint64_t v63 = v51 + 4;
          if (v51 + 4 >= v113) {
            return v50;
          }
          unint64_t v62 = v114[v63];
          if (!v62)
          {
            unint64_t v63 = v51 + 5;
            if (v51 + 5 >= v113) {
              return v50;
            }
            unint64_t v62 = v114[v63];
            if (!v62)
            {
              uint64_t v64 = v51 + 6;
              if (v51 + 6 >= v113) {
                return v50;
              }
              unint64_t v62 = v114[v64];
              if (!v62)
              {
                while (1)
                {
                  unint64_t v63 = v64 + 1;
                  if (__OFADD__(v64, 1LL)) {
                    break;
                  }
                  if (v63 >= v113) {
                    return v50;
                  }
                  unint64_t v62 = v114[v63];
                  ++v64;
                  if (v62) {
                    goto LABEL_105;
                  }
                }

  swift_bridgeObjectRelease();
LABEL_36:
  v657 = v40;
  if ((v686 & 1) != 0)
  {
    uint64_t v49 = String._bridgeToObjectiveCImpl()();
    CFIndex v50 = String._bridgeToObjectiveCImpl()();
    unint64_t v51 = v40;
    uint64_t v52 = String._bridgeToObjectiveCImpl()();
    if (v51)
    {
      swift_bridgeObjectRetain();
      uint64_t v53 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
    }

    else
    {
      uint64_t v53 = 0LL;
    }

    *(void *)&v756[0] = 0LL;
    *(void *)&v755[0] = 0LL;
    uint64_t v55 =  objc_msgSend( v659,  sel__localizedStringNoCacheNoMarkdownParsingForKey_value_table_localizations_actualTableURL_formatSpecifierConfiguration_,  v49,  v50,  v52,  v53,  v756,  v755);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    CFRange v54 = *(void **)&v755[0];
    int v56 = *(void **)&v756[0];
    if (!v55)
    {
      v98 = *(id *)&v755[0];
      v99 = v56;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v756, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v755);

      swift_bridgeObjectRelease();
      *v649 = *(void *)&v755[0];
      return;
    }

    CFStringRef v57 = *(id *)&v755[0];
    v658 = v56;
    unint64_t v58 = v56;
    swift_bridgeObjectRelease();
    objc_opt_self();
    CFStringRef v59 = (void *)swift_dynamicCastObjCClassUnconditional();
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v689 = v60;

    uint64_t v40 = v657;
  }

  else
  {
    v658 = 0LL;
    CFRange v54 = 0LL;
  }

  v684 = a11;
  v685 = a10;
  CFStringRef v61 = v687[2];
  if (v54) {
    unint64_t v62 = (char)v19;
  }
  else {
    unint64_t v62 = 1;
  }
  v683 = v687[2];
  v681 = v54;
  if (v61 || (v62 & 1) == 0)
  {
    *(void *)&v838[0] = MEMORY[0x18961AFF0];
    if (!v54) {
      goto LABEL_52;
    }
    unint64_t v66 = one-time initialization token for formatSpecifierConfiguration;
    char v67 = v54;
    if (v66 == -1) {
      goto LABEL_51;
    }
    goto LABEL_313;
  }

  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v844, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v756);
  unint64_t v63 = *(_OWORD **)&v756[0];
  uint64_t v64 = v658;
  int v65 = (unint64_t)v682;
  while (1)
  {
    v679 = v63;
    v108 = v63[1];
    v109 = v63[2];
    v1104 = v63[3];
    v1103[1] = v109;
    v1103[0] = v108;
    v110 = v63[1];
    v111 = v63[2];
    v1105[2] = v1104;
    v1105[1] = v111;
    v1105[0] = v110;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1105, (uint64_t)v1106);
    outlined retain of Locale((uint64_t)v1106);
    v676 = (void *)MEMORY[0x186E1B6D0](v1103);
    v678 = v112;
    if (v64)
    {
      v113 = (unint64_t)v64;
      URL.init(reference:)(v64, v756);
      v115 = (id)*((void *)&v756[0] + 1);
      v114 = *(void **)&v756[0];
      v689 = *(void *)&v756[1];
    }

    else
    {
      v113 = 0LL;
      v114 = 0LL;
      v115 = 0LL;
      v689 = 0LL;
    }

    v654 = v681;
    v116._countAndFlagsBits = 0x65686361636F6E2ELL;
    v116._object = (void *)0xE800000000000000LL;
    v117 = String.hasSuffix(_:)(v116);
    swift_bridgeObjectRelease();
    LODWORD(v68_Block_object_dispose((const void *)(v1 - 152), 8) = (v117 || v40 != 0) | v686 ^ 1;
    if (one-time initialization token for attributedStringsCacheLock != -1) {
LABEL_294:
    }
      swift_once();
    v118 = v683 != 0;
    v119 = static String.LocalizationValue.attributedStringsCacheLock + 16;
    v120 = (os_unfair_lock_s *)(static String.LocalizationValue.attributedStringsCacheLock + 24);
    swift_retain();
    os_unfair_lock_lock(v120);
    v121 = v119;
    v122 = v660;
    closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)( v121,  (uint64_t)v676,  (uint64_t)v678,  v65,  v118,  (uint64_t)v756);
    v660 = v122;
    os_unfair_lock_unlock(v120);
    swift_release();
    v123 = *(void *)&v756[0];
    if (!*(void *)&v756[0])
    {
LABEL_80:
      if (one-time initialization token for localizedAttributedString != -1) {
        goto LABEL_288;
      }
      goto LABEL_81;
    }

    v124 = BYTE8(v756[0]);

    outlined consume of URL?(v114);
    v635 = v124 & 1;
LABEL_126:
    v691 = (_OWORD *)v123;
    v690 = MEMORY[0x18961AFE8];
    swift_bridgeObjectRelease();
    if (v683) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_246:
    if ((v648 & 1) == 0) {
      specialized AttributedString.subscript.setter(0LL, 1);
    }
    if ((v653 & v635) != 1)
    {
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v649 = v691;

      goto LABEL_261;
    }

    v552 = v691;
    v553 = v690;
    v417 = swift_allocObject();
    *(void *)(v417 + 16) = v552;
    v447 = v417 + 16;
    v554 = v552[2];
    v756[0] = v552[1];
    v756[1] = v554;
    v756[2] = v552[3];
    v683 = (unint64_t)v552;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v756);
    MEMORY[0x186E1B6D0](v756);
    v555 = objc_allocWithZone((Class)&OBJC_CLASS___NSMutableString);
    v556 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v436 = objc_msgSend(v555, sel_initWithString_, v556);
    swift_unknownObjectRelease();
    v689 = v553;
    v682 = (void *)v417;
    if (v644)
    {
      v557 = *(void *)(v644 + 16);
      v398 = MEMORY[0x18961AFE8];
      if (v557)
      {
        v687 = v436;
        v688 = v417 + 16;
        *(void *)&v723 = MEMORY[0x18961AFE8];
        v558 = v644;
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        v559 = (_BYTE *)(v558 + 48);
        do
        {
          if (*v559 == 1)
          {
            v560 = objc_allocWithZone((Class)&OBJC_CLASS___NSString);
            v561 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRetain();
            objc_msgSend(v560, sel_initWithString_, v561);
            swift_unknownObjectRelease();
            outlined consume of InflectionConcept();
          }

          else
          {
            swift_bridgeObjectRetain();
            _ContiguousArrayBuffer._asCocoaArray()();
          }

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v559 += 24;
          --v557;
        }

        while (v557);
        v398 = v723;
        swift_bridgeObjectRelease();
        v553 = v689;
        v417 = (unint64_t)v682;
        v447 = v688;
        v436 = v687;
      }
    }

    else
    {
      v398 = 0LL;
    }

    v566 = v642;
    ObjectType = swift_getObjectType();
    v568 = (*(uint64_t (**)(uint64_t, uint64_t))(v566 + 488))(ObjectType, v566);
    if ((unint64_t)v553 >> 62)
    {
      if (v553 < 0) {
        v569 = v553;
      }
      else {
        v569 = v553 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
    }

    else
    {
      type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for _NSAttributedStringReplacement);
      swift_bridgeObjectRetain();
      v569 = _ContiguousArrayBuffer._asCocoaArray()();
    }

    v688 = v568;
    v687 = (void *)v569;
    if (v398)
    {
      v448 = (void *)(v398 & 0xFFFFFFFFFFFFFF8LL);
      if ((unint64_t)v398 >> 62)
      {
LABEL_315:
        if (v398 >= 0) {
          v603 = v448;
        }
        else {
          v603 = (void *)v398;
        }
        v686 = v603;
      }

      else
      {
        type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
        v686 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      }
    }

    else
    {
      v686 = 0LL;
    }

    v684 = objc_msgSend((id)objc_opt_self(), sel_currentUser);
    v726 = partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    v727 = v417;
    v570 = MEMORY[0x1895F87A8];
    *(void *)&v723 = MEMORY[0x1895F87A8];
    *((void *)&v723 + 1) = 1107296256LL;
    v724 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    v725 = &block_descriptor_17;
    v685 = _Block_copy(&v723);
    swift_retain();
    swift_release();
    v571 = swift_allocObject();
    *(void *)(v571 + 16) = partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v571 + 24) = v417;
    v726 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v727 = v571;
    *(void *)&v723 = v570;
    *((void *)&v723 + 1) = 1107296256LL;
    v724 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v725 = &block_descriptor_58;
    v681 = _Block_copy(&v723);
    swift_retain();
    v663 = v571;
    swift_retain();
    swift_release();
    v572 = swift_allocObject();
    *(void *)(v572 + 16) = partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v572 + 24) = v417;
    v726 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v727 = v572;
    *(void *)&v723 = v570;
    *((void *)&v723 + 1) = 1107296256LL;
    v724 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v725 = &block_descriptor_64;
    v680 = _Block_copy(&v723);
    swift_retain();
    v664 = v572;
    swift_retain();
    swift_release();
    v573 = swift_allocObject();
    *(void *)(v573 + 16) = v447;
    v574 = swift_allocObject();
    *(void *)(v574 + 16) = partial apply for closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v574 + 24) = v573;
    v662 = v573;
    v726 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v727 = v574;
    *(void *)&v723 = v570;
    *((void *)&v723 + 1) = 1107296256LL;
    v724 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v725 = &block_descriptor_73;
    v678 = _Block_copy(&v723);
    v665 = (__int128 *)v574;
    swift_retain();
    swift_release();
    v575 = swift_allocObject();
    *(void *)(v575 + 16) = v447;
    v576 = swift_allocObject();
    *(void *)(v576 + 16) = partial apply for closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v576 + 24) = v575;
    v661 = v575;
    v726 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
    v727 = v576;
    *(void *)&v723 = v570;
    *((void *)&v723 + 1) = 1107296256LL;
    v724 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
    v725 = &block_descriptor_82;
    v677 = _Block_copy(&v723);
    v666 = (__int128 *)v576;
    swift_retain();
    swift_release();
    v577 = swift_allocObject();
    *(void *)(v577 + 16) = v447;
    v578 = swift_allocObject();
    *(void *)(v578 + 16) = partial apply for closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v578 + 24) = v577;
    v660 = (const void *)v577;
    v726 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool);
    v727 = v578;
    *(void *)&v723 = v570;
    *((void *)&v723 + 1) = 1107296256LL;
    v724 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
    v725 = &block_descriptor_91;
    v676 = _Block_copy(&v723);
    *(void *)&v667 = v578;
    swift_retain();
    swift_release();
    v579 = swift_allocObject();
    *(void *)(v579 + 16) = v447;
    v580 = swift_allocObject();
    *(void *)(v580 + 16) = partial apply for closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v580 + 24) = v579;
    v656 = v579;
    v726 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
    v727 = v580;
    *(void *)&v723 = v570;
    *((void *)&v723 + 1) = 1107296256LL;
    v724 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
    v725 = &block_descriptor_100;
    v675 = (__int128 *)_Block_copy(&v723);
    *((void *)&v667 + 1) = v580;
    swift_retain();
    swift_release();
    v581 = swift_allocObject();
    *(void *)(v581 + 16) = v447;
    v582 = swift_allocObject();
    *(void *)(v582 + 16) = partial apply for closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v582 + 24) = v581;
    v655 = v581;
    v726 = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    v727 = v582;
    *(void *)&v723 = v570;
    *((void *)&v723 + 1) = 1107296256LL;
    v724 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String);
    v725 = &block_descriptor_109;
    CFIndex v19 = _Block_copy(&v723);
    v668 = v582;
    swift_retain();
    swift_release();
    v583 = swift_allocObject();
    *(void *)(v583 + 16) = v436;
    v584 = swift_allocObject();
    *(void *)(v584 + 16) = partial apply for closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v584 + 24) = v583;
    v652 = v583;
    v726 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v727 = v584;
    *(void *)&v723 = v570;
    *((void *)&v723 + 1) = 1107296256LL;
    v724 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v725 = &block_descriptor_118;
    uint64_t v30 = _Block_copy(&v723);
    v585 = v436;
    v669 = v584;
    swift_retain();
    swift_release();
    v586 = swift_allocObject();
    *(void *)(v586 + 16) = v447;
    *(void *)(v586 + 24) = v585;
    v587 = swift_allocObject();
    *(void *)(v587 + 16) = partial apply for closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v587 + 24) = v586;
    v653 = v586;
    v726 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
    v727 = v587;
    *(void *)&v723 = v570;
    *((void *)&v723 + 1) = 1107296256LL;
    v724 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ();
    v725 = &block_descriptor_127;
    v588 = _Block_copy(&v723);
    v672 = v588;
    v674 = v585;
    v670 = (void *)v587;
    swift_retain();
    swift_release();
    v726 = destructiveProjectEnumData for PredicateCodableError;
    v727 = 0LL;
    *(void *)&v723 = v570;
    *((void *)&v723 + 1) = 1107296256LL;
    v724 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ();
    v725 = &block_descriptor_130;
    v589 = _Block_copy(&v723);
    v671 = v589;
    swift_release();
    v590 = swift_allocObject();
    v591 = v689;
    *(void *)(v590 + 16) = v683;
    *(void *)(v590 + 24) = v591;
    v592 = swift_allocObject();
    *(void *)(v592 + 16) = partial apply for closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v592 + 24) = v590;
    v651 = v590;
    v726 = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
    v727 = v592;
    *(void *)&v723 = v570;
    *((void *)&v723 + 1) = 1107296256LL;
    v724 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
    v725 = &block_descriptor_139;
    v593 = (char *)_Block_copy(&v723);
    v673 = v593;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    v606 = (uint64_t)v589;
    v607 = (uint64_t)v593;
    v605 = v588;
    char v67 = (uint64_t)v675;
    v594 = v676;
    v595 = v677;
    uint64_t v29 = v678;
    v596 = v681;
    v597 = v680;
    _NSInflect( v688,  (uint64_t)v687,  (uint64_t)v686,  (uint64_t)v684,  (uint64_t)v685,  0,  (uint64_t)v681,  (uint64_t)v680,  (uint64_t)v678,  (uint64_t)v677,  (uint64_t)v676,  (uint64_t)v675,  (uint64_t)v19,  (uint64_t)v30,  (uint64_t)v605,  v606,  v607);

    _Block_release(v671);
    _Block_release(v672);
    _Block_release(v30);
    _Block_release(v19);
    _Block_release((const void *)v67);
    _Block_release(v594);
    _Block_release(v595);
    _Block_release(v29);
    _Block_release(v597);
    _Block_release(v596);
    _Block_release(v685);

    swift_unknownObjectRelease();
    _Block_release(v673);
    LOBYTE(v596) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v596 & 1) != 0)
    {
      __break(1u);
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
LABEL_305:
      __break(1u);
LABEL_306:
      __break(1u);
LABEL_307:
      __break(1u);
LABEL_308:
      __break(1u);
LABEL_309:
      __break(1u);
LABEL_310:
      __break(1u);
      goto LABEL_311;
    }

    if ((swift_isEscapingClosureAtFileLocation() & 1) != 0) {
      goto LABEL_303;
    }
    char v67 = (uint64_t)v670;
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0) {
      goto LABEL_304;
    }
    char v67 = v669;
    v599 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v599 & 1) != 0) {
      goto LABEL_305;
    }
    char v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0) {
      goto LABEL_306;
    }
    char v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0) {
      goto LABEL_307;
    }
    char v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0) {
      goto LABEL_308;
    }
    char v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0) {
      goto LABEL_309;
    }
    char v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0) {
      goto LABEL_310;
    }
    char v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) == 0)
    {
      char v67 = v663;
      v600 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v600 & 1) == 0)
      {
        v601 = v682[2];
        swift_retain();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release_n();
        *v649 = v601;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();

        return;
      }

      goto LABEL_312;
    }

          if ((v12 & 0xC000) == 0x4000) {
            goto LABEL_89;
          }
          if (HIWORD(v18)) {
            CFIndex v19 = ((v18 + 67043328) >> 10) - 10240;
          }
          else {
            LOWORD(v19) = v18;
          }
          goto LABEL_39;
        }
      }

      uint64_t v31 = v11;
      uint64_t v32 = v10 & 0xFFFFFFFFFFFFFFLL;
      CFIndex v18 = *((unsigned __int8 *)&v31 + v16);
      if (*((char *)&v31 + v16) < 0) {
        __asm { BR              X10 }
      }

      goto LABEL_35;
    }

    goto LABEL_6;
  }

  if ((unsigned __int16)specialized _ParseInfo.currChar.getter(v1, v2, v9) == 42)
  {
    _ParseInfo.advance()();
LABEL_53:
    uint64_t v21 = *a1;
    BOOL v22 = a1[1];
    uint64_t v23 = a1[2];
    while (1)
    {
      if ((v22 & 0x2000000000000000LL) != 0) {
        unsigned int v24 = HIBYTE(v22) & 0xF;
      }
      else {
        unsigned int v24 = v21 & 0xFFFFFFFFFFFFLL;
      }
      if (v23 >> 14 >= 4 * v24) {
        goto LABEL_6;
      }
      uint64_t v25 = (v21 >> 59) & 1;
      if ((v22 & 0x1000000000000000LL) == 0) {
        LOBYTE(v25) = 1;
      }
      if ((v23 & 0xC) == 4LL << v25) {
        uint64_t v23 = _StringGuts._slowEnsureMatchingEncoding(_:)(v23, v21, v22);
      }
      if (v23 >> 16 >= v24) {
        goto LABEL_88;
      }
      if ((v22 & 0x1000000000000000LL) != 0)
      {
        LOWORD(v26) = String.UTF16View._foreignSubscript(position:)();
        goto LABEL_78;
      }

      if ((v23 & 1) != 0)
      {
        if ((v22 & 0x2000000000000000LL) == 0) {
          goto LABEL_66;
        }
      }

      else
      {
        _StringGuts.scalarAlignSlow(_:)(v23, v21, v22);
        if ((v22 & 0x2000000000000000LL) == 0)
        {
LABEL_66:
          if ((v21 & 0x1000000000000000LL) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          goto LABEL_72;
        }
      }

      uint64_t v31 = v21;
      uint64_t v32 = v22 & 0xFFFFFFFFFFFFFFLL;
LABEL_72:
      uint64_t v26 = _decodeScalar(_:startingAt:)();
      if ((v23 & 0xC000) == 0x4000)
      {
        if (v26 < 0x10000) {
          goto LABEL_90;
        }
        LOWORD(v27) = v26 & 0x3FF | 0xDC00;
        goto LABEL_79;
      }

      if (HIWORD(v26))
      {
        uint64_t v27 = (unsigned __int16)((v26 + 67043328) >> 10) + 55296;
        if ((v27 & 0x10000) != 0) {
          goto LABEL_91;
        }
        goto LABEL_79;
      }

  if (!v7) {
    goto LABEL_73;
  }
LABEL_36:
  uint64_t v17 = v6 & 0xFC00FC00;
  if ((v6 & 0xFC00FC00) == 0xDC00D800) {
    CFIndex v18 = 32;
  }
  else {
    CFIndex v18 = 16;
  }
  uint64_t v45 = v7 - v18;
  CFIndex v19 = v17 == -603924480;
  if (v17 == -603924480) {
    CFIndex v20 = 32;
  }
  else {
    CFIndex v20 = 16;
  }
  CFIndex v44 = (unint64_t)v6 >> v20;
  if (v19)
  {
    uint64_t v21 = 0;
    goto LABEL_48;
  }

  outlined consume of Data._Representation(v47, v48);
  outlined consume of Data._Representation(v41, v40);
  outlined consume of Data._Representation(v42, v43);
  swift_bridgeObjectRelease();
  return 0LL;
}

  __src[10] = (int)ucal_getFieldDifference();
  LOBYTE(__src[11]) = 0;
  if ((a2 & 0x40000) == 0)
  {
LABEL_22:
    if ((a2 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_37;
  }

          if (v8)
          {
            __break(1u);
LABEL_247:
            __break(1u);
LABEL_248:
            __break(1u);
            goto LABEL_249;
          }

  __break(1u);
  return result;
}

      CFIndex v19 = (v25 - 1) & v25;
      unsigned int v24 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_36:
      uint64_t v26 = *(void *)(*(void *)(v3 + 48) + 8 * v24);
      Hasher.init(_seed:)();
      uint64_t v8 = *(void *)(v26 + 16);
      uint64_t v6 = *(void **)(v26 + 24);
      int v7 = *(void *)(v26 + 32);
      LODWORD(v9) = *(unsigned __int8 *)(v26 + 40);
      switch(v9 >> 4)
      {
        case 0u:
          Hasher._combine(_:)(v7);
          goto LABEL_51;
        case 1u:
        case 2u:
          Hasher._combine(_:)(*(void *)(v26 + 16));
          goto LABEL_51;
        case 3u:
        case 7u:
          if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            uint64_t v27 = *(void *)(v26 + 16);
          }
          else {
            uint64_t v27 = 0LL;
          }
          Hasher._combine(_:)(v27);
          goto LABEL_51;
        case 4u:
          if ((v8 & 0x7FFFFF) == 0 && (*(void *)(v26 + 16) & 0x7F800000LL) == 0) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = *(void *)(v26 + 16);
          }
          Hasher._combine(_:)(v29);
          goto LABEL_51;
        case 8u:
          Data.hash(into:)((uint64_t)v47, v8, *(void *)(v26 + 24));
LABEL_51:
          uint64_t v6 = v47;
          int v7 = Hasher._finalize()();
          uint64_t v30 = -1LL << *(_BYTE *)(v14 + 32);
          uint64_t v31 = v7 & ~v30;
          uint64_t v32 = v31 >> 6;
          if (((-1LL << v31) & ~*(void *)(v21 + 8 * (v31 >> 6))) != 0)
          {
            BOOL v22 = __clz(__rbit64((-1LL << v31) & ~*(void *)(v21 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0LL;
            goto LABEL_17;
          }

          LOBYTE(v9) = 0;
          uint64_t v33 = (unint64_t)(63 - v30) >> 6;
          break;
        default:
          goto LABEL_76;
      }

      do
      {
        if (++v32 == v33 && (v9 & 1) != 0)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          uint64_t v42 = v7;
          uint64_t v43 = v8;
          CFIndex v44 = v9;
          swift_retain();
          outlined copy of _BPlistEncodingFormat.Reference.Backing(v43, (unint64_t)v6, v42, v44);
          _StringGuts.grow(_:)(79LL);
          v45._object = (void *)0x80000001839CE880LL;
          v45._countAndFlagsBits = 0xD00000000000004DLL;
          String.append(_:)(v45);
          _print_unlocked<A, B>(_:_:)();
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x183493CC4LL);
        }

        uint64_t v34 = v32 == v33;
        if (v32 == v33) {
          uint64_t v32 = 0LL;
        }
        LOBYTE(v9) = v34 | v9;
        uint64_t v35 = *(void *)(v21 + 8 * v32);
      }

      while (v35 == -1);
      BOOL v22 = __clz(__rbit64(~v35)) + (v32 << 6);
LABEL_17:
      *(void *)(v21 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
      *(void *)(*(void *)(v14 + 48) + 8 * v22) = v26;
      ++*(void *)(v14 + 16);
    }

            if (v6-- < 1)
            {
              uint64_t v6 = 0LL;
            }

            else if ((v8 - 58) <= 0xFFFFFFF5)
            {
              uint64_t result = 0LL;
            }

          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_31:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v29 = v19;
            _CFObject.hash(into:)();

            if (v21)
            {
LABEL_32:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              uint64_t v30 = v21;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }

  Hasher._combine(_:)(0);
  if (!v17) {
    goto LABEL_36;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v27 = v17;
  _CFObject.hash(into:)();

  if (v19)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v28 = v19;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }

  Hasher._combine(_:)(0);
  uint64_t v27 = 0LL;
LABEL_36:

  uint64_t v32 = v52;
  if (v32)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v62, v32);
    swift_bridgeObjectRelease();
    uint64_t v33 = v53;
    if (v53) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v54) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  uint64_t v33 = v53;
  if (!v53) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v62, v33);
  swift_bridgeObjectRelease();
  if (!v54) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v55 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v34 = v55 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }

  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v35 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }

  if (v57 == 2)
  {
    uint64_t v36 = 0;
  }

  else
  {
    uint64_t v36 = v57 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v36);
  if (v58 == 2)
  {
    char v37 = 0;
  }

  else
  {
    uint64_t v38 = v58 & 1;
    Hasher._combine(_:)(1u);
    char v37 = v38;
  }

  Hasher._combine(_:)(v37);
  outlined retain of LocalePreferences?( (uint64_t)v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

  uint64_t v41 = swift_bridgeObjectRelease();
  *(void *)(v13 + 24) = 0LL;
  *(void *)(v13 + 32) = 0xE000000000000000LL;
  *(void *)(v13 + 40) = 0LL;
  *(void *)(v13 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(_BYTE *)(v13 + 56) = 0;
  uint64_t v42 = MEMORY[0x186E1B0E8](v41);
  uint64_t v43 = v42;
  CFIndex v44 = 263LL;
  switch(v42)
  {
    case 1:
    case 13:
      CFIndex v44 = 257LL;
      goto LABEL_45;
    case 2:
      CFIndex v44 = 260LL;
      goto LABEL_45;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      goto LABEL_40;
    case 27:
      goto LABEL_45;
    default:
      if (v42 == 63)
      {
        CFIndex v44 = 258LL;
      }

      else
      {
        if (v42 == 102)
        {
          uint64_t v45 = 0LL;
          CFIndex v44 = 256LL;
          goto LABEL_50;
        }

  Hasher._combine(_:)(0);
  uint64_t v30 = 0LL;
LABEL_36:

  uint64_t v35 = v55;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = v56;
    if (v56) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v57) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  uint64_t v36 = v56;
  if (!v56) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
  swift_bridgeObjectRelease();
  if (!v57) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }

  if (v60 == 2)
  {
    uint64_t v39 = 0;
  }

  else
  {
    uint64_t v39 = v60 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v39);
  if (v61 == 2)
  {
    uint64_t v40 = 0;
  }

  else
  {
    uint64_t v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v40 = v41;
  }

  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  uint64_t v31 = 0LL;
LABEL_36:

  uint64_t v36 = v56;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v36);
    swift_bridgeObjectRelease();
    char v37 = v57;
    if (v57) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v58) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  char v37 = v57;
  if (!v57) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v37);
  swift_bridgeObjectRelease();
  if (!v58) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }

  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v39 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }

  if (v61 == 2)
  {
    uint64_t v40 = 0;
  }

  else
  {
    uint64_t v40 = v61 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v40);
  if (v62 == 2)
  {
    uint64_t v41 = 0;
  }

  else
  {
    uint64_t v42 = v62 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v41 = v42;
  }

  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?( (uint64_t)v64,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v64,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return swift_unknownObjectRelease_n();
}

  Hasher._combine(_:)(0);
  uint64_t v30 = 0LL;
LABEL_36:

  uint64_t v35 = v55;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = v56;
    if (v56) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v57) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }

  Hasher._combine(_:)(0);
  uint64_t v36 = v56;
  if (!v56) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
  swift_bridgeObjectRelease();
  if (!v57) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }

  if (v60 == 2)
  {
    uint64_t v39 = 0;
  }

  else
  {
    uint64_t v39 = v60 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v39);
  if (v61 == 2)
  {
    uint64_t v40 = 0;
  }

  else
  {
    uint64_t v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v40 = v41;
  }

  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease_n();
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  if (!v20) {
    goto LABEL_36;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v30 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v31 = v22;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }

    BOOL v22 = 1;
LABEL_36:
    if ((v16 & ~location) != 0) {
      LOBYTE(v3) = 0;
    }
    else {
      LOBYTE(v3) = v22;
    }
    return v3;
  }

  if (((unint64_t)indexSet & 0x8000000000000000LL) != 0)
  {
    uint64_t v17 = *MEMORY[0x189616658];
    CFIndex v18 = v17 ^ (unint64_t)indexSet;
    CFIndex v19 = 0xFFFFFFFFFFFFFFFLL;
    if ((~(_BYTE)v18 & 7) == 0) {
      CFIndex v19 = 0xFFFFFFFFFFFFFLL;
    }
    CFIndex v20 = v19 & (v18 >> 3);
    goto LABEL_61;
  }

  if ((*(_BYTE *)&indexSet->_indexSetFlags & 2) != 0)
  {
    CFIndex v20 = indexSet->_internal._singleRange._range.location;
LABEL_61:
    uint64_t v43 = -[NSIndexSet lastIndex](self, "lastIndex");
    if (v43 == 0x7FFFFFFFFFFFFFFFLL || v43 <= 0x3F)
    {
      CFStringRef v57 = 0LL;
      unint64_t v58 = 0LL;
      uint64_t v46 = 0LL;
      CFStringRef v59 = self->_indexSetFlags;
      size_t v60 = &self->_internal;
      CFStringRef v61 = ($BA656A43A73A71AF6C4B982E4240B787 *)(&self->_internal._singleBitfield + 1);
      if ((*(_BYTE *)&v59 & 2) != 0) {
        CFStringRef v61 = &self->_internal;
      }
      while (1)
      {
        unint64_t v62 = v61;
        if ((*(_BYTE *)&v59 & 3) == 0) {
          unint64_t v62 = ($BA656A43A73A71AF6C4B982E4240B787 *)(v60->_singleRange._range.location + 8);
        }
        unint64_t v63 = v62->_singleRange._range.location;
        uint64_t v64 = v62->_singleRange._range.location != 0;
        if ((*(_BYTE *)&v59 & 1) == 0 && v63) {
          uint64_t v64 = *(void *)(v60->_singleRange._range.location + 8);
        }
        if (v58 >= v64) {
          break;
        }
        int v65 = &self->_internal;
        if ((*(_BYTE *)&v59 & 1) == 0) {
          int v65 = ($BA656A43A73A71AF6C4B982E4240B787 *)(v60->_singleRange._range.location
        }
                                                    + 16LL * *(void *)(v60->_singleRange._range.location + 24)
                                                    + 64);
        unint64_t v66 = &v65[v57];
        uint64_t v68 = v66->_singleRange._range.location;
        char v67 = v66->_singleRange._range.length;
        unsigned int v69 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v67 << v68;
        if (v67) {
          uint64_t v70 = v69;
        }
        else {
          uint64_t v70 = 0LL;
        }
        v46 |= v70;
        ++v58;
        ++v57;
      }
    }

    else
    {
      CFIndex v44 = 0LL;
      uint64_t v45 = 0LL;
      uint64_t v46 = 0LL;
      uint64_t v47 = &self->_internal;
      uint64_t v48 = ($BA656A43A73A71AF6C4B982E4240B787 *)(&self->_internal._singleBitfield + 1);
      uint64_t v49 = self->_indexSetFlags;
      if ((*(_BYTE *)&v49 & 2) != 0) {
        uint64_t v48 = &self->_internal;
      }
      while (1)
      {
        CFIndex v50 = v48;
        if ((*(_BYTE *)&v49 & 3) == 0) {
          CFIndex v50 = ($BA656A43A73A71AF6C4B982E4240B787 *)(v47->_singleRange._range.location + 8);
        }
        unint64_t v51 = v50->_singleRange._range.location;
        uint64_t v52 = v50->_singleRange._range.location != 0;
        if ((*(_BYTE *)&v49 & 1) == 0 && v51) {
          uint64_t v52 = *(void *)(v47->_singleRange._range.location + 8);
        }
        if (v45 >= v52) {
          break;
        }
        uint64_t v53 = &self->_internal;
        if ((*(_BYTE *)&v49 & 1) == 0) {
          uint64_t v53 = ($BA656A43A73A71AF6C4B982E4240B787 *)(v47->_singleRange._range.location
        }
                                                    + 16LL * *(void *)(v47->_singleRange._range.location + 24)
                                                    + 64);
        CFRange v54 = v53[v44]._singleRange._range.location;
        if (v54 > 0x3F)
        {
          LOBYTE(v54) = 0;
          int v56 = 0LL;
        }

        else
        {
          uint64_t v55 = v53[v44]._singleRange._range.length + v54;
          if (v55 >= 0x40) {
            uint64_t v55 = 64LL;
          }
          int v56 = v55 - v54;
        }

        if (!v56) {
          break;
        }
        v46 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v56 << v54;
        ++v45;
        ++v44;
      }
    }

    LOBYTE(v3) = (v20 & ~v46) == 0;
    return v3;
  }

  uint64_t v23 = -[NSIndexSet rangeCount](indexSet, "rangeCount");
  if (v23)
  {
    unsigned int v24 = 0LL;
    uint64_t v25 = v23 - 1;
    do
    {
      uint64_t v26 = -[NSIndexSet rangeAtIndex:](indexSet, "rangeAtIndex:", v24);
      int v3 = -[NSIndexSet containsIndexesInRange:](self, "containsIndexesInRange:", v26, v27);
      if (!v3) {
        break;
      }
    }

    while (v25 != v24++);
  }

  return v3;
}

  if ([v18 count])
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) = v18;
    *a4 = 1;
    if ((v19 & 1) != 0) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }

  if ((v19 & 1) == 0) {
LABEL_37:
  }
    CFRelease(v16);
LABEL_38:
  if ((v17 & 1) == 0) {
    off_18C4968C8(v9);
  }
  if (v6) {
    off_18C4968C8(v6);
  }
}

  if (!(v7 | v4))
  {
    uint64_t v16 = (objc_class *)objc_opt_class();
    CFStringRef v4 = (uint64_t)_NSIPUnavailableCoercionError(v16, *(objc_class **)(a1 + 40), 0LL);
    v28[0] = v4;
  }

  if (v4) {
    goto LABEL_3;
  }
LABEL_6:
  v17[0] = v6;
  v17[1] = 3221225472LL;
  _OWORD v17[2] = __95__NSItemProvider__loadItemOfClass_forTypeIdentifier_options_coerceForCoding_completionHandler___block_invoke_12;
  v17[3] = &unk_189CA05A8;
  v17[4] = *(void *)(a1 + 64);
  objc_copyWeak(&v18, (id *)(a1 + 88));
  uint64_t v8 = *(void *)(a1 + 80);
  v17[5] = *(void *)(a1 + 72);
  v17[6] = v7;
  v17[7] = v28[0];
  v17[8] = v8;
  v17[9] = v5;
  _NSIPDispatchAsyncCallback(v17);
  objc_destroyWeak(&v18);
}

  _CFAutoreleasePoolPush();
  if (v79)
  {
LABEL_36:
    _CFAutoreleasePoolPop();
    BOOL v22 = cf;
    if (cf) {
      goto LABEL_37;
    }
    goto LABEL_38;
  }

  uint64_t v23 = 0LL;
  while (1)
  {
    if (opts > 6u)
    {
      uint64_t v29 = 0LL;
      uint64_t v38 = 0LL;
LABEL_74:
      unint64_t v66 = xmmword_183979640;
      uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_107;
    }

    if (((1 << opts) & 0x64) != 0) {
      break;
    }
    if (((1 << opts) & 3) != 0)
    {
      -[NSString _getBlockStart:end:contentsEnd:forRange:stopAtLineSeparators:]( self,  "_getBlockStart:end:contentsEnd:forRange:stopAtLineSeparators:",  &v66,  &v64,  &v65,  v11,  0LL,  opts == 0LL);
      if ((opts & 0x800) != 0)
      {
        unsigned int v24 = v65;
        uint64_t v25 = v66;
        uint64_t v26 = v64;
      }

      else
      {
        unsigned int v24 = v65;
        uint64_t v25 = v66;
        if ((unint64_t)v66 < location)
        {
          *(void *)&unint64_t v66 = location;
          uint64_t v25 = location;
          if (v65 < location)
          {
            int v65 = location;
            unsigned int v24 = location;
            uint64_t v25 = location;
          }
        }

        uint64_t v26 = v64;
        if (v64 > v10)
        {
          uint64_t v64 = v10;
          if (v24 <= v10)
          {
            uint64_t v26 = v10;
          }

          else
          {
            int v65 = v10;
            uint64_t v26 = v10;
            unsigned int v24 = v10;
          }
        }
      }

      uint64_t v35 = v24 - v25;
      *((void *)&v66 + 1) = v24 - v25;
      uint64_t v29 = v26 - v25;
      if ((opts & 0x200) == 0)
      {
        uint64_t v33 = self;
        uint64_t v34 = v25;
        goto LABEL_105;
      }

      goto LABEL_106;
    }

    if ((opts & 0x100) == 0)
    {
      if ((opts & 0x800) != 0)
      {
        char v37 = v59;
        uint64_t v36 = v60;
      }

      else
      {
        char v37 = v59;
        uint64_t v36 = v60;
        if (v60 <= location) {
          uint64_t v36 = location;
        }
        if (v60 + v59 > v10) {
          char v37 = v10 - v36;
        }
      }

      *(void *)&unint64_t v66 = v36;
      *((void *)&v66 + 1) = v37;
      if (v36 >= v11) {
        uint64_t v25 = v11;
      }
      else {
        uint64_t v25 = v36;
      }
      CFIndex v44 = v56[2](v56, cf);
      uint64_t v46 = CFStringTokenizerGetCurrentTokenRange(cf);
      uint64_t v45 = v46.location;
      CFStringRef v59 = v46.length;
      if (v44)
      {
        uint64_t v47 = v46.location;
        if (v46.location > v10)
        {
LABEL_91:
          uint64_t v47 = *((void *)&v66 + 1) + v66;
          if (*((void *)&v66 + 1) + (void)v66 <= v10) {
            uint64_t v47 = v10;
          }
        }
      }

      else
      {
        uint64_t v47 = v10;
        if ((opts & 0x800) != 0) {
          goto LABEL_91;
        }
      }

      uint64_t v29 = v47 - v25;
      goto LABEL_98;
    }

    if (v58 || v57 == location)
    {
      unint64_t v66 = v78[v58];
      uint64_t v48 = &v77[2 * v58];
      uint64_t v25 = *v48;
      uint64_t v29 = v48[1];
      --v58;
      if (v29 + *v48 > v11)
      {
        uint64_t v29 = v11 + 1 - v25;
        if (*((void *)&v66 + 1) + (void)v66 > v11) {
          *((void *)&v66 + 1) = v11 + 1 - v66;
        }
      }

      uint64_t v45 = v60;
LABEL_98:
      size_t v60 = v45;
      if ((opts & 0x200) == 0)
      {
        uint64_t v35 = *((void *)&v66 + 1);
        uint64_t v34 = v66;
        uint64_t v33 = self;
        goto LABEL_105;
      }

      goto LABEL_106;
    }

    uint64_t v39 = v77[1];
    uint64_t v40 = v39 + 100000;
    if (v39 >> 5 < 0xC35) {
      uint64_t v40 = 100000LL;
    }
    uint64_t v41 = v39 + *v77;
    if (v41 > v40 && v41 - v40 > location) {
      uint64_t v42 = v41 - v40;
    }
    else {
      uint64_t v42 = location;
    }
    CFStringRef v57 = v42;
    uint64_t v43 = ((uint64_t (*)(void *, _OWORD **, void **))v68)(v67, &v78, &v77);
    if (!v43)
    {
      uint64_t v29 = 0LL;
      uint64_t v38 = 0LL;
      unint64_t v58 = 0LL;
      goto LABEL_74;
    }

    unint64_t v58 = v43 - 1;
LABEL_125:
    if (v79) {
      goto LABEL_36;
    }
  }

  RangeOfCharacterClusterAtIndex = CFStringGetRangeOfCharacterClusterAtIndex();
  uint64_t v25 = RangeOfCharacterClusterAtIndex;
  uint64_t v29 = v28;
  if ((opts & 0x800) == 0)
  {
    if (RangeOfCharacterClusterAtIndex <= location) {
      uint64_t v30 = location;
    }
    else {
      uint64_t v30 = RangeOfCharacterClusterAtIndex;
    }
    uint64_t v31 = location - RangeOfCharacterClusterAtIndex;
    if (location < RangeOfCharacterClusterAtIndex) {
      uint64_t v31 = 0LL;
    }
    uint64_t v32 = v28 - v31;
    if (v32 + v30 <= v10) {
      uint64_t v29 = v32;
    }
    else {
      uint64_t v29 = v10 - v30;
    }
    uint64_t v25 = v30;
  }

  *(void *)&unint64_t v66 = v25;
  *((void *)&v66 + 1) = v29;
  if ((opts & 0x200) == 0)
  {
    uint64_t v33 = self;
    uint64_t v34 = v25;
    uint64_t v35 = v29;
LABEL_105:
    uint64_t v38 = -[NSString _newSubstringWithRange:zone:](v33, "_newSubstringWithRange:zone:", v34, v35, 0LL);
    goto LABEL_107;
  }

      goto LABEL_36;
    }

    BOOL v22 = *MEMORY[0x189603D10];
    uint64_t v23 = *MEMORY[0x189603C48];
    unsigned int v24 = (void *)objc_msgSend( MEMORY[0x189604030],  "resourceValuesForKeys:fromBookmarkData:",  objc_msgSend( MEMORY[0x189603F18],  "arrayWithObjects:",  *MEMORY[0x189603D10],  *MEMORY[0x189603C48],  0),  v10);
    uint64_t v25 = [v24 objectForKey:v22];
    if (!v25) {
      goto LABEL_35;
    }
    uint64_t result = (CFURLRef)-[objc_class initFileURLWithPath:isDirectory:]( a1,  "initFileURLWithPath:isDirectory:",  v25,  objc_msgSend((id)objc_msgSend(v24, "objectForKey:", v23), "BOOLValue"));
LABEL_33:
    LODWORD(a1) = 0;
    if (result) {
      return result;
    }
  }

          uint64_t v21 = (_WORD *)v12 + v19;
        }

        while ((unint64_t)v22 < v23);
      }

  CFRelease(v6);
  CFRelease(v8);

  return v18;
}

uint64_t _writeJSONNumber(uint64_t a1, id a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  Class Class = (__objc2_class *)object_getClass(a2);
  if (Class == &OBJC_CLASS____NSJSONRoundTrippingNumber)
  {
    uint64_t v10 = (const char *)objc_msgSend((id)objc_msgSend(a2, "stringValue"), "UTF8String");
    if (v10)
    {
      uint64_t v11 = (char *)v10;
      size_t v12 = strlen(v10);
      return _appendBytes(v11, v12, a1, v27);
    }

    qword_18C5D6210 = (uint64_t)"Unable to allocate UTF-8 representation of JSON number.";
    __break(1u);
    CFIndex v20 = (void *)MEMORY[0x189603F70];
    uint64_t v21 = *MEMORY[0x189603A60];
    BOOL v22 = (NSString *)@"Invalid number value (NaN) in JSON write";
    goto LABEL_50;
  }

  int v6 = *(_DWORD *)(a1 + 16);
  if (v6 == 2)
  {
    MEMORY[0x1895F8858](Class);
    uint64_t v2 = (char *)&v25;
  }

  else if (v6 == 1)
  {
    unint64_t v8 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7 + 33 >= v8)
    {
      if (v7 + 33 <= 2 * v8) {
        uint64_t v14 = 2 * v8;
      }
      else {
        uint64_t v14 = v7 + 33;
      }
      uint64_t v9 = __CFSafelyReallocate();
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v14;
      uint64_t v7 = *(void *)(a1 + 40);
    }

    else
    {
      uint64_t v9 = *(void *)(a1 + 24);
    }

    uint64_t v2 = (char *)(v9 + v7);
  }

  int v15 = *(char *)[a2 objCType];
  if (v15 > 80)
  {
    switch(v15)
    {
      case 'c':
        goto LABEL_25;
      case 'd':
      case 'f':
        [a2 doubleValue];
        if (fabs(v16) != INFINITY)
        {
          [a2 doubleValue];
          unsigned int v17 = snprintf_l(v2, 0x20uLL, 0LL, "%0.*g");
          goto LABEL_37;
        }

        CFIndex v20 = (void *)MEMORY[0x189603F70];
        uint64_t v21 = *MEMORY[0x189603A60];
        BOOL v22 = (NSString *)@"Invalid number value (infinite) in JSON write";
        goto LABEL_50;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_49;
      case 'i':
        uint64_t v26 = [a2 intValue];
        goto LABEL_32;
      case 'l':
        [a2 longValue];
        unsigned int v17 = snprintf_l(v2, 0x20uLL, 0LL, "%ld");
        goto LABEL_37;
      case 'q':
        [a2 longLongValue];
        unsigned int v17 = snprintf_l(v2, 0x20uLL, 0LL, "%lld");
        goto LABEL_37;
      case 's':
        [a2 shortValue];
        unsigned int v17 = snprintf_l(v2, 0x20uLL, 0LL, "%hi");
        goto LABEL_37;
      default:
        if (v15 == 81)
        {
          [a2 unsignedLongLongValue];
          unsigned int v17 = snprintf_l(v2, 0x20uLL, 0LL, "%llu");
        }

        else
        {
          if (v15 != 83) {
            goto LABEL_49;
          }
          [a2 unsignedShortValue];
          unsigned int v17 = snprintf_l(v2, 0x20uLL, 0LL, "%hu");
        }

        break;
    }

    goto LABEL_37;
  }

  if (v15 > 72)
  {
    if (v15 == 73)
    {
      uint64_t v26 = [a2 unsignedIntValue];
      goto LABEL_30;
    }

    if (v15 == 76)
    {
      [a2 unsignedLongValue];
      unsigned int v17 = snprintf_l(v2, 0x20uLL, 0LL, "%lu");
      goto LABEL_37;
    }

    goto LABEL_49;
  }

  if (v15 == 66)
  {
LABEL_25:
    uint64_t v26 = (int)[a2 charValue];
LABEL_32:
    unsigned int v17 = snprintf_l(v2, 0x20uLL, 0LL, "%d");
    goto LABEL_37;
  }

  if (v15 != 67)
  {
LABEL_49:
    uint64_t v26 = *(char *)[a2 objCType];
    BOOL v22 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Invalid number type in JSON write (%c)",  v26);
    CFIndex v20 = (void *)MEMORY[0x189603F70];
    uint64_t v21 = *MEMORY[0x189603A60];
LABEL_50:
    objc_exception_throw((id)[v20 exceptionWithName:v21 reason:v22 userInfo:0]);
    return (uint64_t)-[_NSJSONWriter resizeTemporaryBuffer:](v23, v24);
  }

  uint64_t v26 = [a2 unsignedCharValue];
LABEL_30:
  unsigned int v17 = snprintf_l(v2, 0x20uLL, 0LL, "%u");
LABEL_37:
  if (v17 < 0x20)
  {
    int v19 = *(_DWORD *)(a1 + 16);
    if (v19 == 2)
    {
      return _appendBytes(v2, v17, a1, 2);
    }

    else
    {
      if (v19 == 1) {
        *(void *)(a1 + 40) += v17;
      }
      return 1LL;
    }
  }

  else
  {
    CFIndex v18 = (void *)[a2 stringValue];
    return objc_msgSend((id)a1, "appendString:range:", v18, 0, objc_msgSend(v18, "length"));
  }

uint64_t _writeJSONArray(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if ((a4 & 1) != 0)
  {
    MEMORY[0x1895F8858](a1);
    unint64_t v8 = (char *)&v15[-1] - ((v9 + 17) & 0xFFFFFFFFFFFFFFF0LL);
    memset(v8, 32, v10);
    LOBYTE(__src) = 91;
    if (_appendBytes((char *)&__src, 1uLL, a1, 91))
    {
      LOBYTE(__src) = 10;
    }

    return 0LL;
  }

  LOBYTE(__src) = 91;
  unint64_t v8 = 0LL;
LABEL_6:
  uint64_t __src = 0LL;
  p_src = &__src;
  uint64_t v18 = 0x2020000000LL;
  char v19 = 1;
  v15[0] = MEMORY[0x1895F87A8];
  v15[1] = 3221225472LL;
  v15[2] = ___writeJSONArray_block_invoke;
  v15[3] = &unk_189CA21D0;
  v15[4] = a1;
  v15[5] = &__src;
  v15[6] = a4;
  v15[7] = v8;
  v15[8] = a3;
  [a2 enumerateObjectsUsingBlock:v15];
  if (*((_BYTE *)p_src + 24)
    && ((a4 & 1) == 0
     || (char v20 = 10, _appendBytes(&v20, 1uLL, a1, 10))
     && (!a3 || _appendBytes(v8, 2 * a3, a1, v12))))
  {
    char v20 = 93;
    uint64_t appended = _appendBytes(&v20, 1uLL, a1, 93);
  }

  else
  {
    uint64_t appended = 0LL;
  }

  _Block_object_dispose(&__src, 8);
  return appended;
}

void sub_182EDC5B8(_Unwind_Exception *a1)
{
}

uint64_t ___writeJSONArray_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6 = result;
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (a3)
  {
    uint64_t v7 = *(void *)(result + 32);
    char __src = 44;
    uint64_t result = _appendBytes(&__src, 1uLL, v7, 44);
    if ((result & 1) == 0) {
      *(_BYTE *)(*(void *)(*(void *)(v6 + 40) + 8LL) + 24LL) = 0;
    }
    if (*(_BYTE *)(*(void *)(*(void *)(v6 + 40) + 8LL) + 24LL))
    {
      if ((*(_BYTE *)(v6 + 48) & 1) != 0)
      {
        uint64_t v8 = *(void *)(v6 + 32);
        char v10 = 10;
        uint64_t result = _appendBytes(&v10, 1uLL, v8, 10);
        if ((result & 1) == 0) {
          *(_BYTE *)(*(void *)(*(void *)(v6 + 40) + 8LL) + 24LL) = 0;
        }
      }
    }
  }

  uint64_t v9 = *(void *)(v6 + 40);
  if (*(_BYTE *)(*(void *)(v9 + 8) + 24LL))
  {
    if ((*(_BYTE *)(v6 + 48) & 1) != 0)
    {
      uint64_t result = _appendBytes( *(char **)(v6 + 56),  2LL * *(void *)(v6 + 64) + 2,  *(void *)(v6 + 32),  2 * *(_BYTE *)(v6 + 64));
      uint64_t v9 = *(void *)(v6 + 40);
      if ((result & 1) == 0)
      {
        *(_BYTE *)(*(void *)(v9 + 8) + 24LL) = 0;
        uint64_t v9 = *(void *)(v6 + 40);
      }
    }
  }

  if (*(_BYTE *)(*(void *)(v9 + 8) + 24LL))
  {
    uint64_t result = _writeJSONValue(*(void *)(v6 + 32), a2, *(void *)(v6 + 64) + 1LL, *(void *)(v6 + 48));
    uint64_t v9 = *(void *)(v6 + 40);
    if ((result & 1) == 0)
    {
      *(_BYTE *)(*(void *)(v9 + 8) + 24LL) = 0;
      uint64_t v9 = *(void *)(v6 + 40);
    }
  }

  if (!*(_BYTE *)(*(void *)(v9 + 8) + 24LL)) {
    *a4 = 1;
  }
  return result;
}

void type metadata accessor for NSRunLoopMode(uint64_t a1)
{
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for NSFastEnumerationState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NSFastEnumerationState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 96), 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for NSFastEnumerationState(uint64_t a1)
{
}

void type metadata accessor for UATimeUnitStyle(uint64_t a1)
{
}

void type metadata accessor for NSNotificationName(uint64_t a1)
{
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 12_Block_object_dispose((const void *)(v1 - 96), 8) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DIR(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for DIR(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose((const void *)(v1 - 96), 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 96), 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 136) = v3;
  return result;
}

void type metadata accessor for DIR(uint64_t a1)
{
}

void type metadata accessor for NSStringCompareOptions(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for BPlistTrailer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for BPlistTrailer(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for BPlistTrailer(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for BPlistTrailer(uint64_t a1)
{
}

void type metadata accessor for NSSearchPathDomainMask(uint64_t a1)
{
}

void type metadata accessor for NSSearchPathDirectory(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChange(uint64_t a1)
{
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for os_unfair_recursive_lock_s(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for os_unfair_recursive_lock_s(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + _Block_object_dispose((const void *)(v1 - 96), 8) = v3;
  return result;
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueObservingOptions(uint64_t a1)
{
}

void type metadata accessor for NSInlinePresentationIntent(uint64_t a1)
{
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
}

void type metadata accessor for NSCalendarUnit(uint64_t a1)
{
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
}

void type metadata accessor for NSURLFileProtectionType(uint64_t a1)
{
}

void type metadata accessor for NSURLUbiquitousItemDownloadingStatus(uint64_t a1)
{
}

void type metadata accessor for NSURLFileResourceType(uint64_t a1)
{
}

void type metadata accessor for NSLinguisticTag(uint64_t a1)
{
}

void type metadata accessor for SecTrustRef(uint64_t a1)
{
}

void type metadata accessor for NSURLRequestNetworkServiceType(uint64_t a1)
{
}

void type metadata accessor for NSComparisonResult(uint64_t a1)
{
}

__n128 __swift_memcpy20_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NSDecimal(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NSDecimal(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for NSDecimal(uint64_t a1)
{
}

void type metadata accessor for CFCharacterSetRef(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for iovec(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

void type metadata accessor for iovec(uint64_t a1)
{
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
}

void type metadata accessor for NSPropertyListFormat(uint64_t a1)
{
}

void type metadata accessor for CFDictionaryRef(uint64_t a1)
{
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CGAffineTransform(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for CGAffineTransform(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 96), 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 4_Block_object_dispose((const void *)(v1 - 96), 8) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGVector(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance String._BlockSearchingOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance String._BlockSearchingOptions( void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

BOOL specialized OptionSet<>.insert(_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = v3 & a2;
    if ((v3 & a2) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v4 = (unsigned __int16)a2;
  if (!(_WORD)a2) {
LABEL_3:
  }
    uint64_t v4 = 0xFFFFLL;
LABEL_4:
  if (v4 != a2)
  {
    uint64_t v5 = v3 | a2;
    if (!v5) {
      uint64_t v5 = 0xFFFFLL;
    }
    *uint64_t v2 = v5;
  }

  *a1 = a2;
  return v4 != a2;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance String._BlockSearchingOptions( void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance String._BlockSearchingOptions( void *result)
{
  *v1 &= *result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance String._BlockSearchingOptions(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance String._BlockSearchingOptions( void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

uint64_t specialized SetAlgebra.init<A>(_:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v7 - v2;
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v4 = 0LL;
  if ((v8 & 1) == 0)
  {
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v5 = 0LL;
      }
      v4 |= v5;
      dispatch thunk of IteratorProtocol.next()();
    }

    while (v8 != 1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4;
}

uint64_t specialized SetAlgebra.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(_BYTE *)(v5 + 24) = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_13;
  }

  int v15 = a2;
  for (uint64_t i = 0LL; i != v6; ++i)
  {
    uint64_t v12 = *(void *)(a1 + 8 * i + 32);
    if ((*(_BYTE *)(v5 + 24) & 1) == 0)
    {
      char v8 = *(void **)(v5 + 16);
LABEL_4:
      id v9 = v8;
      objc_msgSend(v9, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMutableIndexSet();
      swift_dynamicCast();
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v16;
      *(_BYTE *)(v10 + 24) = 1;
      id v11 = v16;
      swift_release();
      objc_msgSend(v11, sel_addIndex_, v12);

      uint64_t v5 = v10;
      continue;
    }

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v8 = *(void **)(v5 + 16);
    if ((*(_BYTE *)(v5 + 24) & 1) == 0 || (isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_4;
    }
    objc_msgSend(v8, sel_addIndex_, v12);
  }

  uint64_t result = swift_bridgeObjectRelease();
  a2 = v15;
LABEL_13:
  *a2 = v5;
  return result;
}

uint64_t specialized SetAlgebra.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  id v4 = (char *)&v15 - v3;
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  unsigned int v17 = a1;
  if ((v20 & 1) == 0)
  {
    uint64_t v15 = MEMORY[0x18961AFC0] + 8LL;
    while (1)
    {
      uint64_t v9 = v19;
      if ((*(_BYTE *)(v6 + 24) & 1) == 0) {
        break;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v11 = *(void **)(v6 + 16);
      if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      {
        if (!isUniquelyReferenced_nonNull_native)
        {
          id v12 = v11;
          objc_msgSend(v12, sel_mutableCopy);
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          type metadata accessor for NSMutableIndexSet();
          goto LABEL_13;
        }

        objc_msgSend(v11, sel_addIndex_, v9);
        dispatch thunk of IteratorProtocol.next()();
        if ((v20 & 1) != 0) {
          goto LABEL_2;
        }
      }

      else
      {
LABEL_11:
        id v12 = v11;
        objc_msgSend(v12, sel_mutableCopy, v15);
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        type metadata accessor for NSMutableIndexSet();
LABEL_13:
        swift_dynamicCast();
        uint64_t v13 = v18;
        uint64_t v7 = swift_allocObject();
        *(void *)(v7 + 16) = v13;
        *(_BYTE *)(v7 + 24) = 1;
        id v14 = v13;
        swift_release();
        objc_msgSend(v14, sel_addIndex_, v9);

        dispatch thunk of IteratorProtocol.next()();
        uint64_t v6 = v7;
        if (v20 == 1) {
          goto LABEL_3;
        }
      }
    }

    id v11 = *(void **)(v6 + 16);
    goto LABEL_11;
  }

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  id v5 = (char *)&v8 - v4;
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((v9 & 1) == 0)
  {
    uint64_t v6 = 0xFFFFLL;
    while (1)
    {
      if ((v8 & v6) != 0)
      {
        if ((v8 & v6) != v8) {
          goto LABEL_9;
        }
LABEL_6:
        dispatch thunk of IteratorProtocol.next()();
        if (v9 == 1) {
          goto LABEL_3;
        }
      }

      else
      {
        if (v8 == 0xFFFF) {
          goto LABEL_6;
        }
LABEL_9:
        v6 |= v8;
        dispatch thunk of IteratorProtocol.next()();
        if ((v9 & 1) != 0) {
          goto LABEL_3;
        }
      }
    }
  }

  uint64_t v6 = 0xFFFFLL;
LABEL_3:
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  *a1 = v6;
  return result;
}

LABEL_2:
  uint64_t v7 = v6;
LABEL_3:
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v4, AssociatedTypeWitness);
  *unsigned int v17 = v7;
  return result;
}

    *(double *)a9 = v17;
    *(_BYTE *)(a9 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0;
    return;
  }

  if (v75 != 2 || v66) {
    goto LABEL_46;
  }
  v85 = 4LL;
  if (v17 <= 1.59271755e13) {
    unint64_t v58 = v17;
  }
  else {
    unint64_t v58 = 1.59271755e13;
  }
  CFStringRef v59 = fmax(v58, -2.11845067e11);
  v83[0] = v59;
  size_t v60 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, void))(*(void *)&v32 + 192LL);
  v60((double *)__srca, &v85, v83, ObjectType, *(void *)&v32);
  memcpy(v84, __srca, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v84);
  if ((LOBYTE(v84[9]) & 1) != 0 || *(void *)&v84[8] != 2LL)
  {
    CFRange v54 = v71;
LABEL_46:
    *(double *)__srca = v31;
    *((double *)__srca + 1) = v32;
    v84[0] = v16;
    LOBYTE(v83[0]) = v75;
    LOBYTE(v82[0]) = v54;
    LOBYTE(v79[0]) = v73;
    LOBYTE(v80) = v70;
    Calendar._matchingDate(after:matching:inNextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:)( v84,  __dst,  v83,  (unsigned __int8 *)v82,  (unsigned __int8 *)v79,  (unsigned __int8 *)&v80,  (double *)a9);
    return;
  }

  LOBYTE(v79[0]) = 2;
  v82[0] = v59;
  (*(void (**)(double *__return_ptr, void *, double *, uint64_t, double))(*(void *)&v32 + 160LL))( v83,  v79,  v82,  ObjectType,  COERCE_DOUBLE(*(void *)&v32));
  if ((LOBYTE(v83[2]) & 1) != 0) {
    goto LABEL_2;
  }
  CFStringRef v61 = v83[1] + v83[0];
  if (v73 == 1)
  {
    *(void *)&v82[0] = 112LL;
    if (v15 <= 1.59271755e13) {
      unint64_t v62 = v15;
    }
    else {
      unint64_t v62 = 1.59271755e13;
    }
    v79[0] = fmax(v62, -2.11845067e11);
    v60(v83, (uint64_t *)v82, (double *)v79, ObjectType, *(void *)&v32);
    unint64_t v63 = a12;
    memcpy(v82, v83, 0x11AuLL);
    memcpy(v79, v83, 0x11AuLL);
    if (v61 <= 1.59271755e13) {
      uint64_t v64 = v61;
    }
    else {
      uint64_t v64 = 1.59271755e13;
    }
    unint64_t v78 = fmax(v64, -2.11845067e11);
    (*(void (**)(double *__return_ptr, void *, double *, void, uint64_t, double))(*(void *)&v32 + 200LL))( &v80,  v79,  &v78,  0LL,  ObjectType,  COERCE_DOUBLE(*(void *)&v32));
    outlined release of DateComponents((uint64_t)v82);
    if ((v81 & 1) != 0)
    {
      *(double *)a9 = v80;
      *(_BYTE *)(a9 + _Block_object_dispose((const void *)(v1 - 96), 8) = 1;
      return;
    }

    CFStringRef v61 = v80;
    int v65 = a9;
  }

  else
  {
    int v65 = a9;
    unint64_t v63 = a12;
  }

  *unint64_t v63 = 1;
  unsigned __int8 *v47 = 0;
  *(double *)int v65 = v61;
  *(_BYTE *)(v65 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0;
}

    *(void *)a4 = 0LL;
    *(_BYTE *)(a4 + _Block_object_dispose((const void *)(v1 - 96), 8) = 1;
    return result;
  }

  uint64_t v13 = __dst[30];
  if (v7 == __dst[30]) {
    goto LABEL_2;
  }
LABEL_10:
  id v14 = *(void (**)(double *__return_ptr, _OWORD *, void *, uint64_t, uint64_t))(v8 + 160);
  LOBYTE(v30[0]) = 10;
  *(double *)unint64_t v83 = v10;
  uint64_t v27 = v14;
  v14(v84, v30, v83, ObjectType, v8);
  if ((LOBYTE(v84[2]) & 1) == 0)
  {
    if (v28) {
      uint64_t v16 = -1LL;
    }
    else {
      uint64_t v16 = 1LL;
    }
    do
    {
      unsigned int v17 = v6;
      uint64_t v6 = v84[0];
      if (v28)
      {
        if (v7 != 1 || v13 >= 3)
        {
          uint64_t v18 = v84[0] + -1.0;
          LOBYTE(v30[0]) = 10;
          if (v84[0] + -1.0 > 1.59271755e13) {
            uint64_t v18 = 1.59271755e13;
          }
          v83[0] = fmax(v18, -2.11845067e11);
          v27(v84, v30, v83, ObjectType, v8);
          if ((LOBYTE(v84[2]) & 1) == 0)
          {
            uint64_t v6 = v84[0];
            goto LABEL_41;
          }
        }
      }

      else
      {
        uint64_t v19 = v84[1];
        LOBYTE(v83[0]) = 10;
        LOBYTE(v30[0]) = 2;
        v84[0] = v10;
        uint64_t result = (double *)(*(uint64_t (**)(void *, _OWORD *, double *, uint64_t, uint64_t))(v8 + 144))( v83,  v30,  v84,  ObjectType,  v8);
        if ((v21 & 1) != 0)
        {
          if (v7 != 1) {
            goto LABEL_40;
          }
          uint64_t result = 0LL;
          char v20 = 0x7FFFFFFFFFFFFFFFLL;
        }

        else if (v7 != 1)
        {
          goto LABEL_40;
        }

        if (__OFSUB__(v20, result))
        {
          __break(1u);
          return result;
        }

        if (v13 != v20 - (void)result)
        {
LABEL_40:
          uint64_t v6 = v19 + v6;
          goto LABEL_41;
        }
      }

      while (1)
      {
        unint64_t v82 = 8LL;
        BOOL v22 = v6 <= 1.59271755e13 ? v6 : 1.59271755e13;
        uint64_t v23 = fmax(v22, -2.11845067e11);
        *(double *)uint64_t v30 = v23;
        v12(v84, &v82, (double *)v30, ObjectType, v8);
        memcpy(v83, v84, 0x11AuLL);
        outlined release of DateComponents((uint64_t)v83);
        if ((v83[11] & 1) == 0 && v83[10] == 1LL) {
          break;
        }
        unint64_t v79 = 1;
        unint64_t v78 = 1;
        unint64_t v77 = 1;
        v76 = 0;
        double v75 = 1;
        int v74 = 1;
        v73 = 1;
        uint64_t v72 = 1;
        uint64_t v71 = 1;
        uint64_t v70 = 1;
        unsigned int v69 = 1;
        uint64_t v68 = 1;
        char v67 = 1;
        unint64_t v66 = 1;
        int v65 = 1;
        uint64_t v64 = 1;
        uint64_t v31 = 0LL;
        memset(v30, 0, sizeof(v30));
        uint64_t v32 = 1;
        uint64_t v33 = 0LL;
        uint64_t v34 = 1;
        uint64_t v35 = 0LL;
        uint64_t v36 = 1;
        char v37 = v16;
        uint64_t v38 = 0;
        uint64_t v39 = 0LL;
        uint64_t v40 = 1;
        uint64_t v41 = 0LL;
        uint64_t v42 = 1;
        uint64_t v43 = 0LL;
        CFIndex v44 = 1;
        uint64_t v45 = 0LL;
        uint64_t v46 = 1;
        uint64_t v47 = 0LL;
        uint64_t v48 = 1;
        uint64_t v49 = 0LL;
        CFIndex v50 = 1;
        unint64_t v51 = 0LL;
        uint64_t v52 = 1;
        uint64_t v53 = 0LL;
        CFRange v54 = 1;
        uint64_t v55 = 0LL;
        int v56 = 1;
        CFStringRef v57 = 0LL;
        unint64_t v58 = 1;
        CFStringRef v59 = 0LL;
        size_t v60 = 1;
        CFStringRef v61 = 0LL;
        unint64_t v62 = 1;
        unint64_t v63 = 2;
        uint64_t v29 = v23;
        (*(void (**)(double *__return_ptr, _OWORD *, double *, void, uint64_t, uint64_t))(v8 + 200))( &v80,  v30,  &v29,  0LL,  ObjectType,  v8);
        if ((v81 & 1) != 0) {
          break;
        }
        uint64_t v6 = v80;
      }

  uint64_t v1 = *(id *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

  *(void *)uint64_t v1 = 0LL;
  *(void *)(v1 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
  *(_BYTE *)(v1 + 16) = 1;
LABEL_24:
  LOBYTE(result) = v30.is_nil;
  return result;
}

  id v5 = 1.0;
  if ((a3 & 1) == 0)
  {
LABEL_25:
    uint64_t v19 = 0;
    char v20 = 0;
    uint64_t v21 = 0;
    uint64_t v18 = 0.0;
    goto LABEL_35;
  }

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSNumber *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSNumber *)v3;
}

  id v4 = v3;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v3;
}

void *specialized SetAlgebra.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = CFCharacterSetCreateMutable(0LL);
  if (result)
  {
    id v5 = result;
    char v20 = a2;
    type metadata accessor for __CharacterSetStorage();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    *(_BYTE *)(v6 + 24) = 1;
    uint64_t v7 = *(void *)(a1 + 16);
    if (!v7)
    {
LABEL_14:
      uint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t *v20 = v6;
      return result;
    }

    char v8 = (unsigned int *)(a1 + 32);
    while (1)
    {
      while (1)
      {
        unsigned int v10 = *v8++;
        CFIndex v9 = v10;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v11 = *(_BYTE *)(v6 + 24);
          id v12 = (const __CFCharacterSet *)*(id *)(v6 + 16);
          uint64_t result = CFCharacterSetCreateMutableCopy(0LL, v12);
          uint64_t v13 = result;
          if ((v11 & 1) != 0)
          {
            if (!result) {
              goto LABEL_16;
            }
          }

          else if (!result)
          {
            goto LABEL_17;
          }

          uint64_t v14 = swift_allocObject();
          *(void *)(v14 + 16) = v13;
          *(_BYTE *)(v14 + 24) = 1;
          swift_release();
          uint64_t v6 = v14;
        }

        uint64_t v15 = *(__CFCharacterSet **)(v6 + 16);
        if ((*(_BYTE *)(v6 + 24) & 1) == 0) {
          break;
        }
        v21.location = v9;
        v21.length = 1LL;
        CFCharacterSetAddCharactersInRange(v15, v21);
        if (!--v7) {
          goto LABEL_14;
        }
      }

      uint64_t v16 = v15;
      uint64_t result = CFCharacterSetCreateMutableCopy(0LL, v16);
      if (!result) {
        break;
      }
      unsigned int v17 = result;
      uint64_t v18 = result;
      v22.location = v9;
      v22.length = 1LL;
      CFCharacterSetAddCharactersInRange(v18, v22);

      uint64_t v19 = *(void **)(v6 + 16);
      *(void *)(v6 + 16) = v17;
      *(_BYTE *)(v6 + 24) = 1;

      if (!--v7) {
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }

  __break(1u);
  return result;
}

CFMutableCharacterSetRef specialized SetAlgebra.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v17 - v2;
  CFMutableCharacterSetRef result = CFCharacterSetCreateMutable(0LL);
  if (result)
  {
    CFMutableCharacterSetRef v5 = result;
    type metadata accessor for __CharacterSetStorage();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    *(_BYTE *)(v6 + 24) = 1;
    dispatch thunk of Sequence.makeIterator()();
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      while (1)
      {
        dispatch thunk of IteratorProtocol.next()();
        if ((v21 & 1) != 0)
        {
          CFMutableCharacterSetRef result = (CFMutableCharacterSetRef)(*(uint64_t (**)(char *, uint64_t))(v18 + 8))( v3,  AssociatedTypeWitness);
          uint64_t *v19 = v6;
          return result;
        }

        CFIndex v7 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v8 = *(_BYTE *)(v6 + 24);
          CFIndex v9 = (const __CFCharacterSet *)*(id *)(v6 + 16);
          CFMutableCharacterSetRef result = CFCharacterSetCreateMutableCopy(0LL, v9);
          CFMutableCharacterSetRef v10 = result;
          if ((v8 & 1) != 0)
          {
            if (!result) {
              goto LABEL_16;
            }
          }

          else if (!result)
          {
            goto LABEL_17;
          }

          uint64_t v11 = swift_allocObject();
          *(void *)(v11 + 16) = v10;
          *(_BYTE *)(v11 + 24) = 1;
          swift_release();
          uint64_t v6 = v11;
        }

        id v12 = *(__CFCharacterSet **)(v6 + 16);
        if ((*(_BYTE *)(v6 + 24) & 1) == 0) {
          break;
        }
        v22.location = v7;
        v22.length = 1LL;
        CFCharacterSetAddCharactersInRange(v12, v22);
      }

      uint64_t v13 = v12;
      CFMutableCharacterSetRef result = CFCharacterSetCreateMutableCopy(0LL, v13);
      if (!result) {
        break;
      }
      CFMutableCharacterSetRef v14 = result;
      uint64_t v15 = result;
      v23.location = v7;
      v23.length = 1LL;
      CFCharacterSetAddCharactersInRange(v15, v23);

      uint64_t v16 = *(void **)(v6 + 16);
      *(void *)(v6 + 16) = v14;
      *(_BYTE *)(v6 + 24) = 1;
    }

    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t specialized SetAlgebra.init<A>(_:)@<X0>(void *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  CFMutableCharacterSetRef v5 = (char *)&v9 - v4;
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v6 = 0LL;
  if ((v10 & 1) == 0)
  {
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v7 = v9;
      if ((v9 & ~v6) == 0) {
        uint64_t v7 = 0LL;
      }
      v6 |= v7;
      dispatch thunk of IteratorProtocol.next()();
    }

    while (v10 != 1);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  *a1 = v6;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance String._BlockSearchingOptions( void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance String._BlockSearchingOptions( void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0LL;
    CFMutableCharacterSetRef v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0LL;
      }
      v4 |= v6;
      --v3;
    }

    while (v3);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    uint64_t v5 = 0xFFFFLL;
    while (1)
    {
      uint64_t v7 = *v4++;
      uint64_t v6 = v7;
      uint64_t v8 = v7 & v5;
      if ((v7 & v5) != 0)
      {
        if (v8 == v6) {
          goto LABEL_4;
        }
      }

      else if (v6 == 0xFFFF)
      {
        goto LABEL_4;
      }

      v5 |= v6;
LABEL_4:
      if (!--v3) {
        goto LABEL_11;
      }
    }
  }

  uint64_t v5 = 0xFFFFLL;
LABEL_11:
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

double one-time initialization function for paragraphSeparators()
{
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 1LL;
  *(_OWORD *)(v0 + 16) = xmmword_183720D90;
  *(void *)(v0 + 32) = &outlined read-only object #0 of one-time initialization function for paragraphSeparators;
  static String.paragraphSeparators = v0;
  return result;
}

uint64_t one-time initialization function for lineSeparators()
{
  if (one-time initialization token for paragraphSeparators != -1) {
    swift_once();
  }
  unint64_t v1 = (unint64_t)&off_18C5D6000;
  uint64_t v2 = (void *)static String.paragraphSeparators;
  int64_t v3 = *(void *)(static String.paragraphSeparators + 16);
  int64_t v4 = v3 + 2;
  if (__OFADD__(v3, 2LL))
  {
    __break(1u);
LABEL_14:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v1 > 1),  v0,  1,  v2);
    uint64_t v2 = (void *)result;
    unint64_t v1 = *(void *)(result + 24);
    unint64_t v7 = v1 >> 1;
    goto LABEL_10;
  }

  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = (void *)result;
  if (!(_DWORD)result || (unint64_t v1 = v2[3], v7 = v1 >> 1, (uint64_t)(v1 >> 1) < v4))
  {
    if (v3 <= v4) {
      v3 += 2LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v6, v3, 1, v2);
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v1 = v8[3];
    unint64_t v7 = v1 >> 1;
    uint64_t v2 = v8;
  }

  int64_t v3 = v2[2];
  int64_t v0 = v3 + 1;
  if (v7 <= v3) {
    goto LABEL_14;
  }
LABEL_10:
  v2[2] = v0;
  v2[v3 + 4] = &outlined read-only object #0 of one-time initialization function for lineSeparators;
  int64_t v9 = v3 + 2;
  if ((uint64_t)v7 < v9)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v1 > 1),  v9,  1,  v2);
    uint64_t v2 = (void *)result;
  }

  v2[2] = v9;
  v2[v0 + 4] = &outlined read-only object #1 of one-time initialization function for lineSeparators;
  static String.lineSeparators = (uint64_t)v2;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance NSKeyValueObservingOptions(void *a1@<X8>)
{
  *a1 = 0LL;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance NSCalendarUnit@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance UErrorCode@<X0>( _DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UErrorCode(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UBlockCode(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSFileAttributeKey()
{
  uint64_t v1 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSFileAttributeKey( void *a1, id *a2)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v4 = String._bridgeToObjectiveCImpl()();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = (id)v4;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSFileAttributeKey( void *a1, id *a2)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v4 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  *a2 = (id)v4;
  return 1LL;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSFileAttributeKey@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = String._bridgeToObjectiveCImpl()();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *protocol witness for SetAlgebra.union(_:) in conformance NSCalendarUnit@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSCalendarUnit@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance NSCalendarUnit@<X0>( void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 96), 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance NSCalendarUnit@<X0>( uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 96), 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSCalendarUnit( void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance NSCalendarUnit@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance NSCalendarUnit(void *a1)
{
  return (*v1 & *a1) == 0LL;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance NSCalendarUnit()
{
  return *v0 == 0LL;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance NSCalendarUnit@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized SetAlgebra.init<A>(_:)();
  *a1 = result;
  return result;
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance NSCalendarUnit(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFDictionaryRef(uint64_t a1)
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFDictionaryRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFDictionaryRef( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFDictionaryRef( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFDictionaryRef( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _CFObject.== infix(_:_:)();
}

uint64_t base witness table accessor for Equatable in CFDictionaryRef()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _CFObject.== infix(_:_:)();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance NSCalendarUnit@<X0>( void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSFileProtectionType()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

id protocol witness for RawRepresentable.rawValue.getter in conformance NSLocaleKey@<X0>(void *a1@<X8>)
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSCalendarUnit@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSFileAttributeKey()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSRunLoopMode()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey,  (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = MEMORY[0x186E20D4C](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey,  (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSNotificationName()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSLinguisticTag()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t base witness table accessor for RawRepresentable in NSLinguisticTag()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSLinguisticTag and conformance NSLinguisticTag,  (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTag,  (uint64_t)&protocol conformance descriptor for NSLinguisticTag);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSLinguisticTag()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSLinguisticTag and conformance NSLinguisticTag,  (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTag,  (uint64_t)&protocol conformance descriptor for NSLinguisticTag);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLFileResourceType()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLUbiquitousItemDownloadingStatus()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NSNotificationName@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v2 = String._bridgeToObjectiveCImpl()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLFileProtectionType()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef(uint64_t a1)
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFDictionaryRef( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for CFStringRef);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFDictionaryRef( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSFileAttributeKey()
{
  uint64_t v1 = String.hashValue.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSFileAttributeKey()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSFileAttributeKey()
{
  Swift::Int v1 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t base witness table accessor for Equatable in NSLinguisticTag()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSLinguisticTag and conformance NSLinguisticTag,  (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTag,  (uint64_t)&protocol conformance descriptor for NSLinguisticTag);
}

uint64_t base witness table accessor for RawRepresentable in NSURLFileResourceType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSURLFileResourceType and conformance NSURLFileResourceType,  (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileResourceType,  (uint64_t)&protocol conformance descriptor for NSURLFileResourceType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLFileResourceType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSURLFileResourceType and conformance NSURLFileResourceType,  (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileResourceType,  (uint64_t)&protocol conformance descriptor for NSURLFileResourceType);
}

uint64_t base witness table accessor for Equatable in NSURLFileResourceType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSURLFileResourceType and conformance NSURLFileResourceType,  (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileResourceType,  (uint64_t)&protocol conformance descriptor for NSURLFileResourceType);
}

uint64_t base witness table accessor for RawRepresentable in NSURLUbiquitousItemDownloadingStatus()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSURLUbiquitousItemDownloadingStatus and conformance NSURLUbiquitousItemDownloadingStatus,  (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousItemDownloadingStatus,  (uint64_t)&protocol conformance descriptor for NSURLUbiquitousItemDownloadingStatus);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLUbiquitousItemDownloadingStatus()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSURLUbiquitousItemDownloadingStatus and conformance NSURLUbiquitousItemDownloadingStatus,  (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousItemDownloadingStatus,  (uint64_t)&protocol conformance descriptor for NSURLUbiquitousItemDownloadingStatus);
}

uint64_t base witness table accessor for Equatable in NSURLUbiquitousItemDownloadingStatus()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSURLUbiquitousItemDownloadingStatus and conformance NSURLUbiquitousItemDownloadingStatus,  (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousItemDownloadingStatus,  (uint64_t)&protocol conformance descriptor for NSURLUbiquitousItemDownloadingStatus);
}

uint64_t base witness table accessor for RawRepresentable in NSURLFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSURLFileProtectionType and conformance NSURLFileProtectionType,  (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileProtectionType,  (uint64_t)&protocol conformance descriptor for NSURLFileProtectionType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSURLFileProtectionType and conformance NSURLFileProtectionType,  (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileProtectionType,  (uint64_t)&protocol conformance descriptor for NSURLFileProtectionType);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSCalendarIdentifier( void **a1, void **a2)
{
  uint64_t v2 = *a2;
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t base witness table accessor for Equatable in NSURLFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSURLFileProtectionType and conformance NSURLFileProtectionType,  (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileProtectionType,  (uint64_t)&protocol conformance descriptor for NSURLFileProtectionType);
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey,  (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey,  (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for Equatable in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit,  (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit,  (uint64_t)&protocol conformance descriptor for NSCalendarUnit);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit,  (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit,  (uint64_t)&protocol conformance descriptor for NSCalendarUnit);
}

uint64_t base witness table accessor for RawRepresentable in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit,  (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit,  (uint64_t)&protocol conformance descriptor for NSCalendarUnit);
}

uint64_t base witness table accessor for SetAlgebra in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit,  (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit,  (uint64_t)&protocol conformance descriptor for NSCalendarUnit);
}

uint64_t base witness table accessor for Equatable in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent,  (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent,  (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

{
  return lazy protocol witness table accessor for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent( &lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent,  (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent,  (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent,  (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for RawRepresentable in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent,  (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent,  (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for SetAlgebra in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent,  (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent,  (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for Equatable in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions,  (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueObservingOptions,  (uint64_t)&protocol conformance descriptor for NSKeyValueObservingOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions,  (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueObservingOptions,  (uint64_t)&protocol conformance descriptor for NSKeyValueObservingOptions);
}

uint64_t base witness table accessor for RawRepresentable in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions,  (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueObservingOptions,  (uint64_t)&protocol conformance descriptor for NSKeyValueObservingOptions);
}

uint64_t base witness table accessor for SetAlgebra in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions,  (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueObservingOptions,  (uint64_t)&protocol conformance descriptor for NSKeyValueObservingOptions);
}

uint64_t base witness table accessor for Equatable in NSSearchPathDomainMask()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSSearchPathDomainMask and conformance NSSearchPathDomainMask,  (uint64_t (*)(uint64_t))type metadata accessor for NSSearchPathDomainMask,  (uint64_t)&protocol conformance descriptor for NSSearchPathDomainMask);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSSearchPathDomainMask()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSSearchPathDomainMask and conformance NSSearchPathDomainMask,  (uint64_t (*)(uint64_t))type metadata accessor for NSSearchPathDomainMask,  (uint64_t)&protocol conformance descriptor for NSSearchPathDomainMask);
}

uint64_t base witness table accessor for RawRepresentable in NSSearchPathDomainMask()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSSearchPathDomainMask and conformance NSSearchPathDomainMask,  (uint64_t (*)(uint64_t))type metadata accessor for NSSearchPathDomainMask,  (uint64_t)&protocol conformance descriptor for NSSearchPathDomainMask);
}

uint64_t base witness table accessor for SetAlgebra in NSSearchPathDomainMask()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSSearchPathDomainMask and conformance NSSearchPathDomainMask,  (uint64_t (*)(uint64_t))type metadata accessor for NSSearchPathDomainMask,  (uint64_t)&protocol conformance descriptor for NSSearchPathDomainMask);
}

uint64_t base witness table accessor for Equatable in NSStringCompareOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSStringCompareOptions and conformance NSStringCompareOptions,  (uint64_t (*)(uint64_t))type metadata accessor for NSStringCompareOptions,  (uint64_t)&protocol conformance descriptor for NSStringCompareOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSStringCompareOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSStringCompareOptions and conformance NSStringCompareOptions,  (uint64_t (*)(uint64_t))type metadata accessor for NSStringCompareOptions,  (uint64_t)&protocol conformance descriptor for NSStringCompareOptions);
}

uint64_t base witness table accessor for RawRepresentable in NSStringCompareOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSStringCompareOptions and conformance NSStringCompareOptions,  (uint64_t (*)(uint64_t))type metadata accessor for NSStringCompareOptions,  (uint64_t)&protocol conformance descriptor for NSStringCompareOptions);
}

uint64_t base witness table accessor for SetAlgebra in NSStringCompareOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSStringCompareOptions and conformance NSStringCompareOptions,  (uint64_t (*)(uint64_t))type metadata accessor for NSStringCompareOptions,  (uint64_t)&protocol conformance descriptor for NSStringCompareOptions);
}

uint64_t base witness table accessor for RawRepresentable in NSNotificationName()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName,  (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName,  (uint64_t)&protocol conformance descriptor for NSNotificationName);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSNotificationName()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName,  (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName,  (uint64_t)&protocol conformance descriptor for NSNotificationName);
}

uint64_t base witness table accessor for Equatable in NSNotificationName()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName,  (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName,  (uint64_t)&protocol conformance descriptor for NSNotificationName);
}

uint64_t base witness table accessor for RawRepresentable in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode,  (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode,  (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode,  (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode,  (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
}

uint64_t base witness table accessor for Equatable in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode,  (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode,  (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey,  (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey,  (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for Hashable in CFDictionaryRef()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0LL;
    }
    result |= v5;
    --v1;
  }

  while (v1);
  return result;
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
}

unint64_t type metadata accessor for NSMutableIndexSet()
{
  unint64_t result = lazy cache variable for type metadata for NSMutableIndexSet;
  if (!lazy cache variable for type metadata for NSMutableIndexSet)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
  }

  return result;
}

void type metadata accessor for CFRange(uint64_t a1)
{
}

void type metadata accessor for URelativeDateTimeUnit(uint64_t a1)
{
}

void type metadata accessor for UDateFormatField(uint64_t a1)
{
}

void type metadata accessor for NSFileProtectionType(uint64_t a1)
{
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12_Block_object_dispose((const void *)(v1 - 96), 8) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for stat(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for stat(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 136) = 0LL;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose((const void *)(v1 - 96), 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 96), 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 144) = v3;
  return result;
}

void type metadata accessor for stat(uint64_t a1)
{
}

void type metadata accessor for NSFileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for NSURLSessionResponseDisposition(uint64_t a1)
{
}

void type metadata accessor for NSGrammaticalDefiniteness(uint64_t a1)
{
}

void type metadata accessor for UErrorCode(uint64_t a1)
{
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for _ftsent(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for _ftsent(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 8_Block_object_dispose((const void *)(v1 - 96), 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 96), 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 112) = v3;
  return result;
}

void type metadata accessor for _ftsent(uint64_t a1)
{
}

void type metadata accessor for NSTimeZoneNameStyle(uint64_t a1)
{
}

void type metadata accessor for UCalendarWeekdayType(uint64_t a1)
{
}

void type metadata accessor for NSProcessInfoThermalState(uint64_t a1)
{
}

void type metadata accessor for _opaque_pthread_mutex_t(uint64_t a1)
{
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FTS(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for FTS(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 96), 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 72) = v3;
  return result;
}

void type metadata accessor for FTS(uint64_t a1)
{
}

void type metadata accessor for CFMutableCharacterSetRef(uint64_t a1)
{
}

uint64_t type metadata completion function for CFMutableCharacterSetRef(uint64_t a1)
{
  *(void *)(a1 + 16) = v2;
  return 0LL;
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t base witness table accessor for RawRepresentable in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSFileAttributeKey,  (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSFileAttributeKey,  (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
}

uint64_t base witness table accessor for RawRepresentable in NSFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSFileProtectionType and conformance NSFileProtectionType,  (uint64_t (*)(uint64_t))type metadata accessor for NSFileProtectionType,  (uint64_t)&protocol conformance descriptor for NSFileProtectionType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSFileProtectionType and conformance NSFileProtectionType,  (uint64_t (*)(uint64_t))type metadata accessor for NSFileProtectionType,  (uint64_t)&protocol conformance descriptor for NSFileProtectionType);
}

uint64_t base witness table accessor for Equatable in NSFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSFileProtectionType and conformance NSFileProtectionType,  (uint64_t (*)(uint64_t))type metadata accessor for NSFileProtectionType,  (uint64_t)&protocol conformance descriptor for NSFileProtectionType);
}

uint64_t base witness table accessor for Equatable in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSFileAttributeKey,  (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef,  (uint64_t)&protocol conformance descriptor for CFStringRef);
}

void type metadata accessor for timespec(uint64_t a1)
{
}

void type metadata accessor for UNumberFormatFields(uint64_t a1)
{
}

void type metadata accessor for FTS.__Unnamed_union___Anonymous_field8(uint64_t a1)
{
}

void type metadata accessor for NSRunLoopMode(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

void PredicateCodableError.description.getter()
{
  __asm { BR              X10 }

uint64_t sub_182EDF6F4()
{
  v0._countAndFlagsBits = 0x2720656854LL;
  v0._object = (void *)0xE500000000000000LL;
  String.append(_:)(v0);
  String.append(_:)(v4);
  v1._countAndFlagsBits = 0xD000000000000035LL;
  v1._object = (void *)0x80000001839C8990LL;
  String.append(_:)(v1);
  String.append(_:)(v5);
  v2._countAndFlagsBits = 41LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

void protocol witness for CustomStringConvertible.description.getter in conformance PredicateCodableError()
{
}

void *ExpressionStructure.Argument.init(from:)(void *a1)
{
  __n128 result = specialized ExpressionStructure.Argument.init(from:)(a1);
  if (v1) {
    return (void *)(v3 & 1);
  }
  return result;
}

uint64_t ExpressionStructure.Argument.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ExpressionStructure]);
    lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type [ExpressionStructure] and conformance <A> [A],  &demangling cache variable for type metadata for [ExpressionStructure],  (uint64_t (*)(void))lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure,  MEMORY[0x189618448]);
  }

  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  }

  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

void *protocol witness for Decodable.init(from:) in conformance ExpressionStructure.Argument@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = ExpressionStructure.Argument.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 96), 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExpressionStructure.Argument(void *a1)
{
  return ExpressionStructure.Argument.encode(to:)( a1,  *(void *)v1,  *(void *)(v1 + 8),  *(void *)(v1 + 16),  *(_BYTE *)(v1 + 24));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ExpressionStructure.CodingKeys( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExpressionStructure.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ExpressionStructure.CodingKeys()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExpressionStructure.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ExpressionStructure.CodingKeys()
{
  if (*v0) {
    return 1936159329LL;
  }
  else {
    return 0x696669746E656469LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ExpressionStructure.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized ExpressionStructure.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ExpressionStructure.CodingKeys()
{
  return 0LL;
}

void protocol witness for CodingKey.init(intValue:) in conformance ExpressionStructure.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpressionStructure.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpressionStructure.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t ExpressionStructure.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpressionStructure.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  char v10 = (char *)&v14[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a4 + 16))
  {
    uint64_t v13 = v4;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    lazy protocol witness table accessor for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys();
    dispatch thunk of Encoder.container<A>(keyedBy:)();
    LOBYTE(v14[0]) = 0;
    uint64_t v11 = v13;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v11)
    {
      v14[0] = a4;
      char v15 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ExpressionStructure.Argument]);
      lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type [ExpressionStructure.Argument] and conformance <A> [A],  &demangling cache variable for type metadata for [ExpressionStructure.Argument],  (uint64_t (*)(void))lazy protocol witness table accessor for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument,  MEMORY[0x189618448]);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v14[3]);
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }

uint64_t protocol witness for Decodable.init(from:) in conformance ExpressionStructure@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized ExpressionStructure.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExpressionStructure(void *a1)
{
  return ExpressionStructure.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t PredicateArchivingState.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PredicateArchivingState()
{
  return objc_opt_self();
}

uint64_t destroy for ExpressionStructure()
{
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for ExpressionStructure(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ExpressionStructure(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ExpressionStructure(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpressionStructure(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpressionStructure(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 96), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ExpressionStructure()
{
  return &type metadata for ExpressionStructure;
}

uint64_t outlined copy of PredicateCodableError( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 < 2u)
  {
LABEL_4:
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }

  if (a5 != 2)
  {
    if (a5 != 3) {
      return result;
    }
    goto LABEL_4;
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for PredicateCodableError(uint64_t a1)
{
  return outlined consume of PredicateCodableError( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t outlined consume of PredicateCodableError( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 < 2u)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  if (a5 != 2)
  {
    if (a5 != 3) {
      return result;
    }
    goto LABEL_4;
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PredicateCodableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(_BYTE *)(a2 + 32);
  outlined copy of PredicateCodableError(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for PredicateCodableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(_BYTE *)(a2 + 32);
  outlined copy of PredicateCodableError(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of PredicateCodableError(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PredicateCodableError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of PredicateCodableError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateCodableError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PredicateCodableError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 32) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for PredicateCodableError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for PredicateCodableError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PredicateCodableError()
{
  return &type metadata for PredicateCodableError;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PredicateExpressionCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for PredicateExpressionCodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_182EE0738 + 4 * byte_183722E59[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_182EE076C + 4 * byte_183722E54[v4]))();
}

uint64_t sub_182EE076C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182EE0774(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182EE077CLL);
  }
  return result;
}

uint64_t sub_182EE0788(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182EE0790LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_182EE0794(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182EE079C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for PredicateExpressionCodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for PredicateExpressionCodingKeys(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PredicateExpressionCodingKeys()
{
  return &type metadata for PredicateExpressionCodingKeys;
}

uint64_t one-time initialization function for predicateArchivingState()
{
  v1[1] = *MEMORY[0x1895F89C0];
  v1[0] = 0LL;
  uint64_t result = pthread_key_create(v1, 0LL);
  static _ThreadLocal.Key<A>.predicateArchivingState = v1[0];
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PredicateExpressionCodingKeys( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressionCodingKeys()
{
  uint64_t v1 = 0x6973736572707865LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x7275746375727473LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656C626169726176LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressionCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized PredicateExpressionCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PredicateExpressionCodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressionCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressionCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

unint64_t lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressionCodingKeys,  &type metadata for PredicateExpressionCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressionCodingKeys,  &type metadata for PredicateExpressionCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressionCodingKeys,  &type metadata for PredicateExpressionCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressionCodingKeys,  &type metadata for PredicateExpressionCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys);
  }

  return result;
}

void PredicateCodableConfiguration.allowInputs<each A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(v3 + 16) == 1)
  {
    uint64_t v4 = a2;
    if (a2)
    {
      uint64_t v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
      unsigned int v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
      unint64_t v7 = v6[2];
      do
      {
        unint64_t v8 = v6[3];
        unint64_t v9 = v7 + 1;
        if (v7 >= v8 >> 1) {
          unsigned int v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v7 + 1,  1,  v6);
        }
        uint64_t v10 = *v5++;
        v6[2] = v9;
        v6[v7++ + 4] = v10;
        --v4;
      }

      while (v4);
    }

    else
    {
      unsigned int v6 = (void *)MEMORY[0x18961AFE8];
      unint64_t v9 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (!v9)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }

    uint64_t v11 = 0LL;
    do
    {
      uint64_t v12 = v6[v11 + 4];
      _StringGuts.grow(_:)(29LL);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)( v12,  0xD00000000000001BLL,  (void *)0x80000001839C8A20LL,  1);
      swift_bridgeObjectRelease();
      ++v11;
    }

    while (v9 != v11);
    swift_bridgeObjectRelease();
  }

uint64_t _withPredicateArchivingState<A>(_:_:)(uint64_t *a1, void (*a2)(uint64_t))
{
  v15[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  char v5 = *((_BYTE *)a1 + 16);
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  pthread_key_t v6 = static _ThreadLocal.Key<A>.predicateArchivingState;
  unint64_t v7 = (uint64_t *)pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (v7)
  {
    uint64_t v8 = *v7;
    char v9 = *(_BYTE *)(*v7 + 32);
    *(_BYTE *)(*v7 + 32) = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v10 = swift_bridgeObjectRetain();
    __int128 v14 = *(_OWORD *)(v8 + 16);
    *(void *)(v8 + 16) = v4;
    *(void *)(v8 + 24) = v3;
    a2(v10);
    *(_OWORD *)(v8 + 16) = v14;
    *(_BYTE *)(v8 + 32) = v9;
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  else
  {
    type metadata accessor for PredicateArchivingState();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v4;
    *(void *)(v12 + 24) = v3;
    *(_BYTE *)(v12 + 32) = v5;
    *(void *)(v12 + 40) = MEMORY[0x18961AFF0];
    v15[0] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (pthread_getspecific(v6)) {
      __break(1u);
    }
    uint64_t v13 = pthread_setspecific(v6, v15);
    a2(v13);
    pthread_setspecific(v6, 0LL);
    return swift_release();
  }

uint64_t closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:)()
{
  uint64_t result = KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v0) {
    return KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return result;
}

uint64_t KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)( uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v84 = a2;
  uint64_t v83 = a1;
  uint64_t v91 = a7;
  uint64_t v11 = (uint64_t *)(a7 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v88 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  unint64_t v87 = (char *)v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v89 = a8;
  *(void *)&__int128 v96 = a8;
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  uint64_t v17 = 8 * a6;
  uint64_t v93 = v12;
  if (a6 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255LL, *v11, v15, v16);
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }

  else
  {
    TupleTypeMetadata2 = v80;
    MEMORY[0x1895F8858](ExtendedExistentialTypeMetadata);
    if (a6)
    {
      char v21 = v11;
      CFRange v22 = (void *)((char *)v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v23 = a6;
      do
      {
        uint64_t v24 = *v21++;
        *v22++ = type metadata accessor for PredicateExpressions.Variable(255LL, v24, v19, v20);
        --v23;
      }

      while (v23);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  uint64_t v82 = TupleTypeMetadata;
  TupleTypeMetadata2 = (void *)swift_getTupleTypeMetadata2();
  uint64_t v25 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  v85 = (__int128 *)((char *)v80 - v26);
  if (a6 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }

  else
  {
    unint64_t v81 = v80;
    MEMORY[0x1895F8858](v25);
    if (a6)
    {
      uint64_t v28 = v11;
      uint64_t v29 = (void *)((char *)v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v30 = a6;
      do
      {
        ++v28;
        *v29++ = swift_getMetatypeMetadata();
        --v30;
      }

      while (v30);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }

  MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v31 = *(void *)(a5 + 8);
  char v32 = *(_BYTE *)(a5 + 16);
  uint64_t v98 = *(void *)a5;
  uint64_t v99 = v31;
  char v100 = v32;
  MEMORY[0x1895F8858](v98);
  uint64_t v35 = (char *)v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a6)
  {
    uint64_t v36 = (int *)(v33 + 32);
    char v37 = v35;
    uint64_t v38 = a6;
    do
    {
      if (a6 == 1) {
        int v39 = 0;
      }
      else {
        int v39 = *v36;
      }
      uint64_t v40 = *v11++;
      *(void *)(v34 + v39) = v40;
      *v37++ = v34 + v39;
      v36 += 4;
      --v38;
    }

    while (v38);
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v35, a6, v91);
  LOBYTE(v94[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  uint64_t v41 = v90;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v41)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  v80[2] = v80;
  v80[1] = v80;
  __int128 v43 = v96;
  unint64_t v81 = v97;
  uint64_t v44 = v99;
  char v45 = v100;
  uint64_t v46 = *(void *)(v99 + 16);
  uint64_t v90 = v98;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v46) {
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v43, *((uint64_t *)&v43 + 1));
  if ((v48 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_26:
    *(void *)&__int128 v96 = 47LL;
    *((void *)&v96 + 1) = 0xE100000000000000LL;
    v94[0] = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    v55._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    __int128 v56 = v96;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_OWORD *)uint64_t v57 = v43;
    *(_OWORD *)(v57 + 16) = v56;
    *(_BYTE *)(v57 + 32) = 1;
    swift_willThrow();
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  uint64_t v49 = *(void *)(v44 + 56) + 16 * v47;
  uint64_t v50 = *(void *)v49;
  char v51 = *(_BYTE *)(v49 + 8);
  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v58 = v92;
    goto LABEL_29;
  }

  v80[0] = v50;
  uint64_t v52 = v90;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v53 = v45;
  uint64_t v54 = swift_bridgeObjectRetain();
  uint64_t v64 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n( v54,  v52,  v44,  v45,  MEMORY[0x18961AFE8],  v43,  *((uint64_t *)&v43 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v65 = v80[0];
  uint64_t v66 = PartialType.create2(with:)();
  if (!v66)
  {
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v73 = v65;
    *(void *)(v73 + _Block_object_dispose((const void *)(v1 - 96), 8) = v64;
    *(void *)(v73 + 16) = 0LL;
    *(void *)(v73 + 24) = 0LL;
    *(_BYTE *)(v73 + 32) = 2;
    swift_willThrow();
    goto LABEL_27;
  }

  uint64_t v67 = v66;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v68 = v67;
  uint64_t v58 = v92;
  char v45 = v53;
  uint64_t v50 = v68;
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v94[0] = v50;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  uint64_t v101 = v89;
  swift_getExtendedExistentialTypeMetadata();
  if ((swift_dynamicCast() & 1) != 0)
  {
    __int128 v92 = v96;
    CFStringRef v59 = v97;
    LOBYTE(v94[0]) = 0;
    uint64_t v60 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
    v94[0] = v90;
    v94[1] = v44;
    char v95 = v45;
    MEMORY[0x1895F8858](v60);
    uint64_t v69 = v91;
    v80[-8] = a6;
    v80[-7] = v69;
    v80[-6] = v89;
    v80[-5] = &v96;
    *(_OWORD *)&v80[-4] = v92;
    v80[-2] = v59;
    v80[-1] = v70;
    uint64_t v71 = v85;
    uint64_t v72 = TupleTypeMetadata2;
    _withPredicateArchivingState<A>(_:_:)( v94,  (void (*)(uint64_t))partial apply for closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of any PredicateExpression<Self.Output == B1>(v71, v83);
    int v74 = v84;
    if (a6)
    {
      double v75 = (char *)v71 + *((int *)v72 + 12);
      v76 = (int *)(v82 + 32);
      uint64_t v77 = a6;
      do
      {
        if (a6 == 1) {
          int v78 = 0;
        }
        else {
          int v78 = *v76;
        }
        unint64_t v79 = *v74++;
        *unint64_t v79 = *(void *)&v75[v78];
        v76 += 4;
        --v77;
      }

      while (v77);
    }

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v96);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v96) = 2;
    unint64_t v62 = v87;
    uint64_t v61 = v88;
    uint64_t v63 = v93;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v87, v58, v93);
    type metadata accessor for DecodingError();
    swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>,  &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>,  MEMORY[0x189619B88]);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
    return swift_willThrow();
  }

uint64_t closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v42 = a8;
  uint64_t v45 = a5;
  uint64_t v46 = a3;
  uint64_t v47 = a2;
  uint64_t v48 = a4;
  uint64_t v53 = a1;
  uint64_t v12 = (uint64_t *)(a7 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v50 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  uint64_t v49 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = a6;
  if (a6 == 1)
  {
    uint64_t v18 = type metadata accessor for PredicateExpressions.Variable(0LL, *v12, v15, v16);
    char v51 = &v41;
    uint64_t v52 = v18;
    uint64_t v41 = *(void *)(v18 - 8);
    MEMORY[0x1895F8858](v18);
    uint64_t v54 = (char *)&v41 - v21;
  }

  else
  {
    MEMORY[0x1895F8858](v14);
    unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a6)
    {
      uint64_t v26 = v12;
      uint64_t v27 = (uint64_t *)((char *)&v41 - v25);
      uint64_t v28 = v55;
      do
      {
        uint64_t v29 = *v26++;
        *v27++ = type metadata accessor for PredicateExpressions.Variable(255LL, v29, v22, v23);
        --v28;
      }

      while (v28);
    }

    a6 = v55;
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    char v51 = &v41;
    uint64_t v52 = TupleTypeMetadata;
    uint64_t v41 = *(void *)(TupleTypeMetadata - 8);
    MEMORY[0x1895F8858](TupleTypeMetadata);
    uint64_t v54 = (char *)&v41 - v31;
    if (!a6)
    {
LABEL_11:
      char v37 = v49;
      uint64_t v36 = v50;
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v45, v13);
      char v57 = 1;
      uint64_t v38 = v46;
      a9[3] = v47;
      a9[4] = v38;
      __swift_allocate_boxed_opaque_existential_1(a9);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v13);
        return __swift_deallocate_boxed_opaque_existential_1((uint64_t)a9);
      }

      else
      {
        uint64_t v56 = v42;
        swift_getExtendedExistentialTypeMetadata();
        uint64_t v39 = v52;
        uint64_t v40 = (char *)a9 + *(int *)(swift_getTupleTypeMetadata2() + 48);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v13);
        return (*(uint64_t (**)(char *, char *, uint64_t))(v41 + 16))(v40, v54, v39);
      }
    }
  }

  uint64_t v43 = v13;
  uint64_t v44 = a9;
  uint64_t v32 = 32LL;
  uint64_t v33 = a6;
  while (1)
  {
    uint64_t v34 = type metadata accessor for PredicateExpressions.Variable(0LL, *v12, v19, v20);
    __swift_mutable_project_boxed_opaque_existential_1(v53, *(void *)(v53 + 24));
    MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v34);
    uint64_t result = dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    if (v9) {
      return result;
    }
    v32 += 16LL;
    ++v12;
    if (!--v33)
    {
      uint64_t v13 = v43;
      a9 = v44;
      goto LABEL_11;
    }
  }

uint64_t specialized ExpressionStructure.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpressionStructure.CodingKeys>?);
  MEMORY[0x1895F8858](v3);
  char v5 = (char *)&v13[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpressionStructure.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v13[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1LL, 1LL, v6);
    outlined destroy of KeyedDecodingContainer<ExpressionStructure.CodingKeys>?((uint64_t)v5);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Decoder.singleValueContainer()();
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    uint64_t v11 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }

  else
  {
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0LL, 1LL, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    LOBYTE(v13[0]) = 0;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ExpressionStructure.Argument]);
    char v14 = 1;
    lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type [ExpressionStructure.Argument] and conformance <A> [A],  &demangling cache variable for type metadata for [ExpressionStructure.Argument],  (uint64_t (*)(void))lazy protocol witness table accessor for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument,  MEMORY[0x189618478]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v11;
}

void *specialized ExpressionStructure.Argument.init(from:)(void *a1)
{
  uint64_t v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  else
  {
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v3 = v5;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  return v3;
}

uint64_t specialized ExpressionStructure.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 1936159329 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized PredicateExpressionCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C626169726176LL && a2 == 0xE800000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6973736572707865LL && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x7275746375727473LL && a2 == 0xE900000000000065LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

unint64_t lazy protocol witness table accessor for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for ExpressionStructure.CodingKeys, &unk_189C6DF68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for ExpressionStructure.CodingKeys, &unk_189C6DF68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for ExpressionStructure.CodingKeys, &unk_189C6DF68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for ExpressionStructure.CodingKeys, &unk_189C6DF68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys);
  }

  return result;
}

uint64_t outlined destroy of KeyedDecodingContainer<ExpressionStructure.CodingKeys>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpressionStructure.CodingKeys>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x186E20D40](255LL, (char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ExpressionStructure.Argument,  &type metadata for ExpressionStructure.Argument);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ExpressionStructure.Argument,  &type metadata for ExpressionStructure.Argument);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument);
  }

  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t outlined init with take of PredicateCodableError(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined copy of GenericArgument(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of GenericArgument(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure;
  if (!lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ExpressionStructure,  &type metadata for ExpressionStructure);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure;
  if (!lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ExpressionStructure,  &type metadata for ExpressionStructure);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateCodableError and conformance PredicateCodableError;
  if (!lazy protocol witness table cache variable for type PredicateCodableError and conformance PredicateCodableError)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateCodableError,  &type metadata for PredicateCodableError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateCodableError and conformance PredicateCodableError);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A]( unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x186E20D4C](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t partial apply for closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)@<X0>( uint64_t *a1@<X8>)
{
  return closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)( v1[5],  v1[6],  v1[7],  v1[8],  v1[9],  v1[2],  v1[3],  v1[4],  a1);
}

uint64_t outlined init with take of any PredicateExpression<Self.Output == B1>(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }

  return v1;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8LL) + 80LL) & 0x20000) != 0) {
    JUMPOUT(0x186E20E60LL);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ExpressionStructure.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for ExpressionStructure.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_182EE2598 + 4 * byte_183722E63[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_182EE25CC + 4 * byte_183722E5E[v4]))();
}

uint64_t sub_182EE25CC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182EE25D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x182EE25DCLL);
  }
  return result;
}

uint64_t sub_182EE25E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x182EE25F0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_182EE25F4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182EE25FC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for ExpressionStructure.CodingKeys(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

void *type metadata accessor for ExpressionStructure.CodingKeys()
{
  return &unk_189C6DF68;
}

uint64_t outlined copy of ExpressionStructure.Argument(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for ExpressionStructure.Argument(uint64_t a1)
{
  return outlined consume of ExpressionStructure.Argument( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(_BYTE *)(a1 + 24));
}

uint64_t outlined consume of ExpressionStructure.Argument(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ExpressionStructure.Argument(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of ExpressionStructure.Argument(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for ExpressionStructure.Argument(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of ExpressionStructure.Argument(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(_BYTE *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of ExpressionStructure.Argument(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ExpressionStructure.Argument(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v8 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of ExpressionStructure.Argument(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpressionStructure.Argument(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpressionStructure.Argument( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for ExpressionStructure.Argument(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for ExpressionStructure.Argument(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ExpressionStructure.Argument()
{
  return &type metadata for ExpressionStructure.Argument;
}

uint64_t lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t v9 = a3();
    uint64_t result = MEMORY[0x186E20D4C](a4, v8, &v9);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = v3;
  a3[1] = a1;
  a3[2] = a2;
  id v4 = v3;
  return swift_retain();
}

uint64_t NSObject.KeyValueObservingPublisher.init(object:keyPath:options:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t NSObject.KeyValueObservingPublisher.didChange()(uint64_t a1)
{
  *(_OWORD *)(swift_allocObject() + 16) = *(_OWORD *)(a1 + 16);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>, a1);
  Publisher.map<A>(_:)();
  return swift_release();
}

uint64_t sub_182EE2A84()
{
  return swift_deallocObject();
}

id NSObject.KeyValueObservingPublisher.object.getter()
{
  return *v0;
}

uint64_t NSObject.KeyValueObservingPublisher.keyPath.getter()
{
  return swift_retain();
}

uint64_t NSObject.KeyValueObservingPublisher.options.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t static NSObject.KeyValueObservingPublisher.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  type metadata accessor for AnyKeyPath();
  swift_retain();
  swift_retain();
  unsigned __int8 v7 = MEMORY[0x186E1C1A4](v5, v3);
  swift_release();
  swift_release();
  return v7 & (v6 == v4);
}

void NSObject.KeyValueObservingPublisher.receive<A>(subscriber:)()
{
}

uint64_t sub_182EE2B88(uint64_t a1)
{
  id v6 = v4;
  swift_retain();
  unsigned __int8 v7 = specialized NSObject.KVOSubscription.init(_:_:_:_:)(v6, v3, v1, v2);
  v9[3] = a1;
  void v9[4] = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSObject.KVOSubscription<A, B, C>, a1);
  v9[0] = v7;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

void type metadata accessor for NSObject.KVOSubscription()
{
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance NSObject.KeyValueObservingPublisher<A, B>()
{
}

void NSObject.KVOSubscription.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(v1 + 176));
  os_unfair_lock_lock(v9);
  uint64_t v17 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1837232D0;
  *(void *)(v10 + 32) = 0x746176726573626FLL;
  *(void *)(v10 + 40) = 0xEB000000006E6F69LL;
  uint64_t v11 = (void *)v0[2];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSKeyValueObservation?);
  *(void *)(v10 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = v11;
  *(void *)(v10 + 72) = v12;
  *(void *)(v10 + 80) = 0x646E616D6564LL;
  uint64_t v13 = v0[3];
  *(void *)(v10 + 120) = MEMORY[0x189602260];
  *(void *)(v10 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = 0xE600000000000000LL;
  *(void *)(v10 + 96) = v13;
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v8, 1LL, 1LL, v14);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x18961A748], v2);
  id v15 = v11;
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(v9);
}

void NSObject.KVOSubscription.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x63736275534F564BLL;
  a1[1] = 0xEF6E6F6974706972LL;
}

uint64_t NSObject.KVOSubscription.__deallocating_deinit()
{
  uint64_t v1 = (char *)v0 + *((void *)*v0 + 17);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  uint64_t v3 = (char *)v0 + *((void *)*v0 + 18);
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  swift_unknownObjectWeakDestroy();
  swift_release();
  return swift_deallocClassInstance();
}

void NSObject.KVOSubscription.request(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = *(void *)(*(void *)v1 + 96LL);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)v45 - v8;
  uint64_t v50 = v5;
  uint64_t v52 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v7);
  char v51 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(v4 + 88);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)v45 - v15;
  uint64_t v55 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v53 = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_unfair_lock_t v54 = *(os_unfair_lock_t *)&v2[*(void *)(v4 + 176)];
  os_unfair_lock_lock(v54);
  uint64_t v18 = *((void *)v2 + 3);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
  {
    uint64_t v19 = *((void *)v2 + 3);
    uint64_t v20 = v55;
  }

  else
  {
    uint64_t v47 = v9;
    uint64_t v21 = a1;
    uint64_t v22 = v11;
    static Subscribers.Demand.unlimited.getter();
    char v23 = static Subscribers.Demand.== infix(_:_:)();
    uint64_t v19 = static Subscribers.Demand.unlimited.getter();
    if ((v23 & 1) != 0)
    {
      uint64_t v11 = v22;
    }

    else
    {
      uint64_t v11 = v22;
      if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0) {
        goto LABEL_9;
      }
      if ((v18 | v21) < 0)
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }

      uint64_t v19 = v18 + v21;
      if (__OFADD__(v18, v21))
      {
LABEL_9:
        uint64_t v19 = static Subscribers.Demand.unlimited.getter();
      }

      else if (v19 < 0)
      {
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
    }

    *((void *)v2 + 3) = v19;
    uint64_t v20 = v55;
    uint64_t v9 = v47;
  }

  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    if (v19 < 0)
    {
      __break(1u);
      goto LABEL_47;
    }

    if (!v19)
    {
LABEL_19:
      uint64_t v30 = *((void *)v2 + 3);
      static Subscribers.Demand.unlimited.getter();
      if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
      {
LABEL_29:
        char v37 = &v2[*(void *)(*(void *)v2 + 136LL)];
        (*(void (**)(char *, uint64_t))(v13 + 8))(v37, v12);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v37, 1LL, 1LL, v11);
        uint64_t v38 = v54;
LABEL_45:
        os_unfair_lock_unlock(v38);
        return;
      }

      static Subscribers.Demand.unlimited.getter();
      if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
      {
        uint64_t v31 = static Subscribers.Demand.unlimited.getter();
LABEL_28:
        *((void *)v2 + 3) = v31;
        goto LABEL_29;
      }

      if ((v30 & 0x8000000000000000LL) == 0)
      {
        if (v30)
        {
          uint64_t v31 = v30 - 1;
          goto LABEL_28;
        }

        goto LABEL_48;
      }

LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
  }

  uint64_t v24 = &v2[*(void *)(*(void *)v2 + 136LL)];
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v24, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v16, 1LL, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    goto LABEL_19;
  }

  v45[1] = v4;
  uint64_t v46 = v13;
  uint64_t v47 = (char *)v12;
  unint64_t v25 = v53;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v53, v16, v11);
  uint64_t v26 = v48;
  uint64_t v27 = v49;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v9, &v2[*(void *)(*(void *)v2 + 144LL)], v49);
  uint64_t v28 = v52;
  uint64_t v29 = v50;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v9, 1LL, v50) == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v11);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
    uint64_t v13 = v46;
    uint64_t v12 = (uint64_t)v47;
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v51, v9, v29);
  uint64_t v32 = *((void *)v2 + 3);
  static Subscribers.Demand.unlimited.getter();
  char v33 = static Subscribers.Demand.== infix(_:_:)();
  uint64_t v35 = v46;
  uint64_t v34 = v47;
  if ((v33 & 1) == 0)
  {
    static Subscribers.Demand.unlimited.getter();
    if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    {
      uint64_t v36 = static Subscribers.Demand.unlimited.getter();
    }

    else
    {
      if (v32 < 0)
      {
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }

      if (!v32)
      {
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }

      uint64_t v36 = v32 - 1;
    }

    *((void *)v2 + 3) = v36;
  }

  (*(void (**)(char *, char *))(v35 + 8))(v24, v34);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v24, 1LL, 1LL, v11);
  uint64_t v38 = v54;
  os_unfair_lock_unlock(v54);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v39 = v53;
  uint64_t v40 = dispatch thunk of Subscriber.receive(_:)();
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_lock(v38);
  uint64_t v41 = *((void *)v2 + 3);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
  {
LABEL_44:
    (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v29);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v11);
    goto LABEL_45;
  }

  uint64_t v42 = v11;
  static Subscribers.Demand.unlimited.getter();
  char v43 = static Subscribers.Demand.== infix(_:_:)();
  uint64_t v44 = static Subscribers.Demand.unlimited.getter();
  if ((v43 & 1) != 0)
  {
    uint64_t v11 = v42;
LABEL_43:
    *((void *)v2 + 3) = v44;
    goto LABEL_44;
  }

  uint64_t v11 = v42;
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0) {
    goto LABEL_41;
  }
  if ((v41 | v40) < 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }

  uint64_t v44 = v41 + v40;
  if (__OFADD__(v41, v40))
  {
LABEL_41:
    uint64_t v44 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_43;
  }

  if ((v44 & 0x8000000000000000LL) == 0) {
    goto LABEL_43;
  }
LABEL_54:
  __break(1u);
}

  __break(1u);
  return result;
}

    uint64_t v69 = (v55 - 1) & v55;
    uint64_t v70 = (int *)v56;
    uint64_t v49 = __clz(__rbit64(v55)) + (v56 << 6);
LABEL_24:
    uint64_t v50 = v67;
    char v51 = *(void *)(v66 + 72) * v49;
    outlined init with copy of ICUNumberFormatter.Signature( *(void *)(v30 + 48) + v51,  v67,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    uint64_t v52 = 8 * v49;
    uint64_t v53 = *(void *)(*(void *)(v30 + 56) + 8 * v49);
    outlined init with take of ICUNumberFormatter.Signature( v50,  *(void *)(v36 + 48) + v51,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(void *)(*(void *)(v36 + 56) + v52) = v53;
    swift_retain();
    uint64_t v48 = v69;
    uint64_t v45 = v70;
  }

  char v57 = v54 + 7;
  if (v57 >= v62) {
    goto LABEL_48;
  }
  uint64_t v55 = *(void *)&v63[8 * v57];
  if (v55)
  {
    uint64_t v56 = v57;
    goto LABEL_47;
  }

  while (1)
  {
    uint64_t v56 = v57 + 1;
    if (__OFADD__(v57, 1LL)) {
      break;
    }
    uint64_t v28 = v64;
    uint64_t v14 = v65;
    if (v56 >= v62) {
      goto LABEL_48;
    }
    uint64_t v55 = *(void *)&v63[8 * v56];
    ++v57;
    if (v55) {
      goto LABEL_47;
    }
  }

      if (v15 == v8)
      {
LABEL_48:
        uint64_t v36 = *(void *)(v4 + 16);
        if (v36 && !*(_WORD *)(v4 + 2 * v36 + 30))
        {
          char v37 = v36 + 14;
          do
          {
            *(void *)(v4 + 16) = v37 - 15;
            if (v37 == 15) {
              break;
            }
          }

          while (!*(unsigned __int16 *)(v4 + 2 * v37--));
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v4;
      }

      if (v17)
      {
        a3 = 0LL;
        uint64_t v83 = v6 - v8;
        uint64_t v73 = v8;
        unint64_t v81 = v6 + ~v8;
        unint64_t v79 = v8 + 1;
        v76 = v6;
        uint64_t v77 = v35;
        double v75 = v17;
LABEL_56:
        if (a3 == v35) {
          goto LABEL_124;
        }
        uint64_t v30 = v6 - a3;
        if (v6 == a3) {
          goto LABEL_125;
        }
        uint64_t v39 = v6 - a3 - 1;
        uint64_t v40 = *(void *)(v11 + 16);
        if (v39 >= v40) {
          goto LABEL_126;
        }
        if (v30 - 2 >= v40) {
          goto LABEL_127;
        }
        uint64_t v41 = v11 + 32;
        uint64_t v42 = *(unsigned __int16 *)(v11 + 32 + 2 * (v30 - 2)) | (*(unsigned __int16 *)(v11 + 32 + 2 * v39) << 16);
        char v43 = v42 / v17;
        uint64_t v44 = v42 % v17;
        uint64_t v82 = v43;
        if (v43 != 0x10000)
        {
          uint64_t v45 = v74 * (unint64_t)v43;
          if ((v45 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_130;
          }
          if (v30 - 3 >= v40) {
            goto LABEL_131;
          }
        }

        uint64_t v46 = v82-- != 0;
        if (!v46) {
          goto LABEL_129;
        }
        uint64_t v47 = v44 + v17;
        if (HIWORD(v47))
        {
LABEL_73:
          uint64_t v49 = 0;
          char v23 = 0LL;
          int v78 = a3 + 1;
          uint64_t v50 = 1;
          while (v23 < *((void *)v5 + 2))
          {
            char v51 = *(unsigned __int16 *)&v34[2 * v23] * (unint64_t)v82;
            if ((v51 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_111;
            }
            uint64_t v8 = (unint64_t)v5;
            uint64_t v5 = (char *)(v51 + v49);
            if (__CFADD__((_DWORD)v51, v49)) {
              goto LABEL_112;
            }
            uint64_t v52 = v83 + v23;
            if (__OFADD__(v83, v23)) {
              goto LABEL_113;
            }
            uint64_t v53 = __OFSUB__(v52, a3);
            os_unfair_lock_t v54 = v52 - a3;
            if (v53) {
              goto LABEL_114;
            }
            uint64_t v6 = v54 - 1;
            if (__OFSUB__(v54, 1LL)) {
              goto LABEL_115;
            }
            if ((v81 & 0x8000000000000000LL) != 0) {
              goto LABEL_116;
            }
            if (v6 >= *(void *)(v11 + 16)) {
              goto LABEL_117;
            }
            uint64_t v55 = *(unsigned __int16 *)(v11 + 2 * v6 + 32);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
            }
            ++v23;
            uint64_t v49 = v5 >> 16;
            uint64_t v56 = v50 - (unsigned __int16)v5 + v55 + 0xFFFF;
            uint64_t v50 = HIWORD(v56);
            char v57 = v11 + 32;
            *(_WORD *)(v11 + 32 + 2 * v6) = v56;
            uint64_t v34 = v80;
            uint64_t v5 = (char *)v8;
            if (v79 == v23)
            {
              if (!v50)
              {
                uint64_t v46 = v82-- != 0;
                uint64_t v35 = v77;
                if (!v46) {
                  goto LABEL_132;
                }
                uint64_t v58 = 0;
                CFStringRef v59 = 0LL;
                uint64_t v60 = *(void *)(v8 + 16);
                uint64_t v8 = v73;
                uint64_t v6 = v76;
                uint64_t v17 = v75;
                while (v60 != v59)
                {
                  uint64_t v61 = v83 + v59;
                  if (__OFADD__(v83, v59)) {
                    goto LABEL_119;
                  }
                  uint64_t v53 = __OFSUB__(v61, a3);
                  unint64_t v62 = v61 - a3;
                  if (v53) {
                    goto LABEL_120;
                  }
                  uint64_t v53 = __OFSUB__(v62, 1LL);
                  uint64_t v63 = v62 - 1;
                  if (v53) {
                    goto LABEL_121;
                  }
                  if ((v63 & 0x8000000000000000LL) != 0) {
                    goto LABEL_122;
                  }
                  if (v63 >= *(void *)(v11 + 16)) {
                    goto LABEL_123;
                  }
                  uint64_t v64 = *(unsigned __int16 *)&v80[2 * v59];
                  uint64_t v65 = v59 + 1;
                  uint64_t v66 = 2 * v63;
                  uint64_t v67 = v58 + v64 + *(unsigned __int16 *)(v57 + 2 * v63);
                  uint64_t v58 = HIWORD(v67);
                  *(_WORD *)(v57 + v66) = v67;
                  CFStringRef v59 = v65;
                  if (v73 == v65) {
                    goto LABEL_98;
                  }
                }

                goto LABEL_118;
              }

              uint64_t v6 = v76;
              uint64_t v35 = v77;
              uint64_t v17 = v75;
LABEL_98:
              if (v82 >= 0x10000) {
                goto LABEL_10;
              }
              uint64_t v68 = v35 + ~a3;
              if (v68 >= *(void *)(v4 + 16)) {
                goto LABEL_128;
              }
              *(_WORD *)(v4 + 32 + 2 * v6_Block_object_dispose((const void *)(v1 - 96), 8) = v82;
              --v81;
              ++a3;
              if (v78 != v35) {
                goto LABEL_56;
              }
              goto LABEL_48;
            }
          }

            uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v3[2] + 1LL,  1,  v3);
            goto LABEL_27;
          }

          if ((((v0[1] + v0[2] - (void)v2) | (unint64_t)&v4[-v0[1]]) & 0x8000000000000000LL) == 0)
          {
            if (*v4 == 114)
            {
              if (v1[2] == 117)
              {
                uint64_t v7 = 2LL * (v1[3] != 101);
                goto LABEL_37;
              }

              goto LABEL_36;
            }

            goto LABEL_25;
          }

          goto LABEL_45;
        }

      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }

    __break(1u);
    goto LABEL_47;
  }

  __break(1u);
}

            if (v218 >> 14 == 4 * v28)
            {
              swift_bridgeObjectRelease();
              uint64_t v67 = 0LL;
              uint64_t v66 = 0xE000000000000000LL;
              v218 = 15LL;
              goto LABEL_51;
            }

            uint64_t v66 = v69;
LABEL_50:
            uint64_t v67 = v68;
            goto LABEL_51;
          }
        }

        v220 = v68;
        v214 = v45;
        v143 = v33;
        v144 = v78;
        v145 = v219;
        v146 = Character._transform(toHalfWidth:stripDiacritics:caseFolding:)(v227 & 1, v225 & 1, v226 & 1);
        v147 = specialized Collection.first.getter(v146._countAndFlagsBits, (unint64_t)v146._object);
        if (v148)
        {
          v149 = v148;
          v150 = v147;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v217 = String.index(after:)();
          swift_bridgeObjectRelease();
          v151 = (uint64_t)v146._object & 0x2000000000000000LL;
          v152 = ((unint64_t)v146._object >> 56) & 0xF;
          char v43 = v146._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          v143 = (unint64_t)v146._object;
          v216 = v146._countAndFlagsBits;
          v153 = v150;
          v145 = v149;
        }

        else
        {
          v151 = v206;
          v152 = v201;
          v153 = v144;
        }

        if (v151) {
          v154 = v152;
        }
        else {
          v154 = v43;
        }
        v126 = v81;
        uint64_t v68 = v220;
        if (v154)
        {
          if (v29 != v153 || (v155 = v31, v31 != v145))
          {
            v156 = v153;
            v157 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v153 = v156;
            uint64_t v68 = v220;
            if ((v157 & 1) == 0) {
              goto LABEL_238;
            }
            v155 = v145;
          }

          swift_bridgeObjectRelease();
          v219 = v155;
          char v33 = v143;
          uint64_t v45 = v214;
          uint64_t v19 = v189;
          uint64_t v28 = v221;
          uint64_t v22 = v216;
          if (v221) {
            goto LABEL_150;
          }
          goto LABEL_184;
        }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    uint64_t v30 = v64;
    if (!v64) {
      goto LABEL_42;
    }
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v30);
    swift_bridgeObjectRelease();
    uint64_t v31 = v65;
    if (!v65) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    uint64_t v28 = v63;
    if (!v63) {
      goto LABEL_42;
    }
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v28);
    swift_bridgeObjectRelease();
    uint64_t v29 = v64;
    if (!v64) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    uint64_t v29 = v63;
    if (!v63) {
      goto LABEL_42;
    }
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v29);
    swift_bridgeObjectRelease();
    uint64_t v30 = v64;
    if (!v64) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v64)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    uint64_t v31 = v65;
    if (!v65) {
      goto LABEL_42;
    }
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v31);
    swift_bridgeObjectRelease();
    uint64_t v32 = v66;
    if (!v66) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    uint64_t v30 = v64;
    if (!v64) {
      goto LABEL_42;
    }
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v80, v30);
    swift_bridgeObjectRelease();
    uint64_t v31 = v65;
    if (!v65) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    uint64_t v29 = v63;
    if (!v63) {
      goto LABEL_42;
    }
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v29);
    swift_bridgeObjectRelease();
    uint64_t v30 = v64;
    if (!v64) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v132 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v35 << 8);
      uint64_t v21 = v124;
      uint64_t v19 = (uint64_t)v134;
      goto LABEL_31;
    }

    uint64_t v34 = v26;
    a2 = v110;
    uint64_t v15 = v111;
LABEL_46:
    if (v23)
    {
LABEL_146:
      __break(1u);
      return result;
    }

    goto LABEL_47;
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v165);
  v132 = specialized Rope._endPath.getter(v16);
  uint64_t result = (unint64_t *)swift_unknownObjectRelease();
  uint64_t v34 = 0LL;
  char v23 = 0LL;
  if (v16)
  {
LABEL_31:
    swift_unknownObjectRetain();
    v128 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v21, v132, v34, v16, v135);
    uint64_t result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_49;
  }

  v128 = 0LL;
LABEL_49:
  v122 = v19 - v23;
  if (__OFSUB__(v19, v23))
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }

  if (v21 != *(void *)(v15 + 88))
  {
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }

  if (v34)
  {
    uint64_t v41 = v34;
    uint64_t v42 = v34 + 24 * ((v132 >> ((4 * *(_BYTE *)(v34 + 18) + 8) & 0x3C)) & 0xF);
    char v43 = *(void *)(v42 + 32);
    uint64_t v44 = *(void *)(v42 + 40);
    swift_bridgeObjectRetain();
    uint64_t result = (unint64_t *)swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v45 = *(void *)(v15 + 64);
    swift_unknownObjectRetain();
    uint64_t v41 = 0LL;
    specialized Rope._Node.subscript.getter(v132, v45);
    char v43 = v46;
    uint64_t v44 = v47;
    uint64_t result = (unint64_t *)swift_unknownObjectRelease();
  }

  uint64_t v48 = v129;
  if (*((uint64_t *)&v165[0] + 1) < v128)
  {
    v105[0] = *((void *)&v165[0] + 1);
    v105[1] = v44;
    v110 = a2;
    v111 = v15;
    v133 = (__int128 *)&v143;
    v134 = &v153;
    v107 = (uint64_t *)(v123 + 40);
    v127 = v43;
LABEL_56:
    uint64_t v49 = *(void *)(v15 + 64);
    uint64_t v50 = *(void *)(v15 + 88);
    *(void *)&v150 = v124;
    char v51 = v132;
    *((void *)&v150 + 1) = v132;
    *(void *)&v151 = v41;
    if (v124 != v50)
    {
LABEL_138:
      __break(1u);
      goto LABEL_139;
    }

    if (v49)
    {
      uint64_t v52 = *(unsigned __int8 *)(v49 + 18);
      uint64_t result = (unint64_t *)swift_unknownObjectRetain();
      char v51 = v132;
      if (v132 <= v52) {
        goto LABEL_139;
      }
    }

    else if (!v132)
    {
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }

    if (v41)
    {
      uint64_t v53 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
      if (((v51 >> v53) & 0xF) != 0)
      {
        os_unfair_lock_t v54 = ((((v51 >> v53) & 0xF) - 1) << v53) | ((-15LL << v53) - 1) & v51;
        *((void *)&v150 + 1) = v54;
LABEL_68:
        CFStringRef v59 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
        v132 = v54;
        v108 = v41;
        uint64_t v60 = *(void *)(v41 + 24 * ((v54 >> v59) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v61 = 0;
LABEL_72:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
        if (__OFSUB__(v122, v60))
        {
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }

        if (v124 != *(void *)(v15 + 88))
        {
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }

        v106 = v122 - v60;
        if ((v61 & 1) != 0)
        {
          unint64_t v62 = *(void *)(v15 + 64);
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v132, v62);
          v109 = v63;
          uint64_t v65 = v64;
          swift_unknownObjectRelease();
        }

        else
        {
          uint64_t v66 = v108 + 24 * ((v132 >> ((4 * *(_BYTE *)(v108 + 18) + 8) & 0x3C)) & 0xF);
          uint64_t v65 = *(void *)(v66 + 32);
          uint64_t v67 = *(void *)(v66 + 40);
          swift_bridgeObjectRetain();
          v109 = v67;
          swift_bridgeObjectRetain();
        }

        uint64_t v68 = v127;
        --v128;
        uint64_t result = (unint64_t *)swift_bridgeObjectRetain();
        uint64_t v69 = 0LL;
        uint64_t v70 = v107;
        v135 = v65;
        while (1)
        {
          uint64_t v72 = v69 + 1;
          if (__OFADD__(v69, 1LL)) {
            goto LABEL_125;
          }
          uint64_t v73 = *(v70 - 1);
          int v74 = *v70;
          if (*(void *)(v68 + 16))
          {
            swift_bridgeObjectRetain_n();
            double v75 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74);
            if ((v76 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue( *(void *)(v68 + 56) + 72 * v75,  (uint64_t)&v160);
            }

            else
            {
              v164 = 0LL;
              v162 = 0u;
              v163 = 0u;
              v160 = 0u;
              v161 = 0u;
            }

            swift_bridgeObjectRelease();
            uint64_t v65 = v135;
            if (!*(void *)(v135 + 16))
            {
LABEL_87:
              v159 = 0LL;
              v157 = 0u;
              v158 = 0u;
              v155 = 0u;
              v156 = 0u;
              goto LABEL_94;
            }
          }

          else
          {
            v164 = 0LL;
            v162 = 0u;
            v163 = 0u;
            v160 = 0u;
            v161 = 0u;
            swift_bridgeObjectRetain();
            if (!*(void *)(v65 + 16)) {
              goto LABEL_87;
            }
          }

          swift_bridgeObjectRetain();
          uint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74);
          if ((v78 & 1) != 0)
          {
            outlined init with copy of AttributedString._AttributeValue( *(void *)(v65 + 56) + 72 * v77,  (uint64_t)&v155);
          }

          else
          {
            v159 = 0LL;
            v157 = 0u;
            v158 = 0u;
            v155 = 0u;
            v156 = 0u;
          }

          swift_bridgeObjectRelease();
LABEL_94:
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v160,  (uint64_t)&v150,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v155,  (uint64_t)v134,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!*((void *)&v151 + 1))
          {
            if (v154) {
              goto LABEL_111;
            }
            outlined destroy of Any?( (uint64_t)&v150,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v155,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = (unint64_t *)outlined destroy of Any?( (uint64_t)&v160,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            goto LABEL_81;
          }

          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v150,  (uint64_t)v149,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v154)
          {
            outlined destroy of AttributedString._AttributeValue((uint64_t)v149);
LABEL_111:
            outlined destroy of Any?( (uint64_t)&v150,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?( (uint64_t)&v155,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v160,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_112:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a2 = v110;
            uint64_t v15 = v111;
            goto LABEL_113;
          }

          unint64_t v79 = *((_OWORD *)v134 + 3);
          v147[2] = *((_OWORD *)v134 + 2);
          v147[3] = v79;
          v148 = v134[8];
          v80 = *((_OWORD *)v134 + 1);
          v147[0] = *(_OWORD *)v134;
          v147[1] = v80;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v149,  (uint64_t)v146);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v147,  (uint64_t)v145);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)v146,  (uint64_t)&v141,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)v145,  (uint64_t)v133,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (v142)
          {
            if (!v144)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v141);
LABEL_79:
              uint64_t v71 = 0;
              goto LABEL_80;
            }

            outlined init with take of any PredicateExpression<Self.Output == B1>(&v141, (uint64_t)v138);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v133, (uint64_t)v137);
            unint64_t v81 = v139;
            v126 = v140;
            v125 = __swift_project_boxed_opaque_existential_1(v138, v139);
            v131 = v105;
            uint64_t v82 = *(void *)(v81 - 8);
            MEMORY[0x1895F8858](v125);
            v84 = (char *)v105 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0LL);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v137,  (uint64_t)&v136);
            v85 = type metadata accessor for Optional();
            v130 = v105;
            v86 = *(void *)(v85 - 8);
            MEMORY[0x1895F8858](v85);
            uint64_t v88 = (char *)v105 - v87;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            uint64_t v89 = swift_dynamicCast();
            uint64_t v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56);
            if (v89)
            {
              v90(v88, 0LL, 1LL, v81);
              (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v84, v88, v81);
              uint64_t v71 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
            }

            else
            {
              v90(v88, 1LL, 1LL, v81);
              (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v85);
              uint64_t v71 = 0;
            }

            uint64_t v48 = v129;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
            uint64_t v68 = v127;
          }

          else
          {
            if (v144)
            {
              outlined destroy of Any?( (uint64_t)v133,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
              goto LABEL_79;
            }

            uint64_t v71 = 1;
          }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v30 = v18 & 0xFFFFFFFFFFFFF0FFLL | (v33 << 8);
      uint64_t v15 = (uint64_t)v132;
      goto LABEL_31;
    }

    uint64_t v31 = v22;
    uint64_t v11 = v108;
    uint64_t v10 = v127;
LABEL_46:
    if (v19)
    {
LABEL_146:
      __break(1u);
      return result;
    }

    goto LABEL_47;
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v163);
  uint64_t v30 = specialized Rope._endPath.getter(v12);
  uint64_t result = (unint64_t *)swift_unknownObjectRelease();
  uint64_t v31 = 0LL;
  uint64_t v19 = 0LL;
  if (v12)
  {
LABEL_31:
    swift_unknownObjectRetain();
    uint64_t v32 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v130, v30, v31, v12, v133);
    uint64_t result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_49;
  }

  uint64_t v32 = 0LL;
LABEL_49:
  v122 = v15 - v19;
  if (__OFSUB__(v15, v19))
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }

  if (v130 != *(void *)(v11 + 88))
  {
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }

  uint64_t v39 = v31;
  v126 = v30;
  if (v31)
  {
    uint64_t v40 = v31 + 24 * ((v30 >> ((4 * *(_BYTE *)(v31 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v42 = *(void *)(v40 + 32);
    uint64_t v41 = *(void *)(v40 + 40);
    swift_bridgeObjectRetain();
    uint64_t result = (unint64_t *)swift_bridgeObjectRetain();
  }

  else
  {
    char v43 = *(void *)(v11 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v30, v43);
    uint64_t v42 = v44;
    uint64_t v41 = v45;
    uint64_t result = (unint64_t *)swift_unknownObjectRelease();
  }

  if (*((uint64_t *)&v163[0] + 1) < v32)
  {
    v131 = (__int128 *)&v141;
    v132 = &v151;
    uint64_t v104 = v41;
    v105 = (uint64_t *)(v123 + 40);
    v108 = v11;
    v121 = v42;
    v102 = *((void *)&v163[0] + 1);
LABEL_56:
    v120 = v32;
    uint64_t v46 = *(void *)(v11 + 64);
    uint64_t v47 = *(void *)(v11 + 88);
    *(void *)&v148 = v130;
    uint64_t v48 = v126;
    *((void *)&v148 + 1) = v126;
    *(void *)&v149 = v39;
    if (v130 != v47)
    {
LABEL_138:
      __break(1u);
      goto LABEL_139;
    }

    if (v46)
    {
      uint64_t v49 = *(unsigned __int8 *)(v46 + 18);
      uint64_t result = (unint64_t *)swift_unknownObjectRetain();
      uint64_t v48 = v126;
      if (v126 <= v49) {
        goto LABEL_139;
      }
    }

    else if (!v126)
    {
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }

    if (v39)
    {
      uint64_t v50 = (4 * *(_BYTE *)(v39 + 18) + 8) & 0x3C;
      if (((v48 >> v50) & 0xF) != 0)
      {
        char v51 = ((((v48 >> v50) & 0xF) - 1) << v50) | ((-15LL << v50) - 1) & v48;
        *((void *)&v148 + 1) = v51;
LABEL_68:
        uint64_t v56 = (4 * *(_BYTE *)(v39 + 18) + 8) & 0x3C;
        v126 = v51;
        v106 = v39;
        char v57 = *(void *)(v39 + 24 * ((v51 >> v56) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v58 = 0;
LABEL_72:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
        if (__OFSUB__(v122, v57))
        {
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }

        if (v130 != *(void *)(v11 + 88))
        {
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }

        v103 = v122 - v57;
        if ((v58 & 1) != 0)
        {
          CFStringRef v59 = *(void *)(v11 + 64);
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v126, v59);
          v107 = v60;
          unint64_t v62 = v61;
          swift_unknownObjectRelease();
        }

        else
        {
          uint64_t v63 = v106 + 24 * ((v126 >> ((4 * *(_BYTE *)(v106 + 18) + 8) & 0x3C)) & 0xF);
          unint64_t v62 = *(void *)(v63 + 32);
          uint64_t v64 = *(void *)(v63 + 40);
          swift_bridgeObjectRetain();
          v107 = v64;
          swift_bridgeObjectRetain();
        }

        --v120;
        uint64_t result = (unint64_t *)swift_bridgeObjectRetain();
        uint64_t v65 = 0LL;
        uint64_t v66 = v105;
        v133 = v62;
        while (1)
        {
          uint64_t v68 = v65 + 1;
          if (__OFADD__(v65, 1LL)) {
            goto LABEL_125;
          }
          uint64_t v69 = *(v66 - 1);
          uint64_t v70 = *v66;
          if (*(void *)(v42 + 16))
          {
            swift_bridgeObjectRetain_n();
            uint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v69, v70);
            if ((v72 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue( *(void *)(v42 + 56) + 72 * v71,  (uint64_t)&v158);
            }

            else
            {
              v162 = 0LL;
              v160 = 0u;
              v161 = 0u;
              v158 = 0u;
              v159 = 0u;
            }

            swift_bridgeObjectRelease();
            unint64_t v62 = v133;
            if (!*(void *)(v133 + 16))
            {
LABEL_87:
              v157 = 0LL;
              v155 = 0u;
              v156 = 0u;
              v153 = 0u;
              v154 = 0u;
              goto LABEL_94;
            }
          }

          else
          {
            v162 = 0LL;
            v160 = 0u;
            v161 = 0u;
            v158 = 0u;
            v159 = 0u;
            swift_bridgeObjectRetain();
            if (!*(void *)(v62 + 16)) {
              goto LABEL_87;
            }
          }

          swift_bridgeObjectRetain();
          uint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(v69, v70);
          if ((v74 & 1) != 0)
          {
            outlined init with copy of AttributedString._AttributeValue( *(void *)(v62 + 56) + 72 * v73,  (uint64_t)&v153);
          }

          else
          {
            v157 = 0LL;
            v155 = 0u;
            v156 = 0u;
            v153 = 0u;
            v154 = 0u;
          }

          swift_bridgeObjectRelease();
LABEL_94:
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v158,  (uint64_t)&v148,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v153,  (uint64_t)v132,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!*((void *)&v149 + 1))
          {
            if (v152) {
              goto LABEL_111;
            }
            outlined destroy of Any?( (uint64_t)&v148,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v153,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = (unint64_t *)outlined destroy of Any?( (uint64_t)&v158,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            goto LABEL_81;
          }

          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v148,  (uint64_t)v147,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v152)
          {
            outlined destroy of AttributedString._AttributeValue((uint64_t)v147);
LABEL_111:
            outlined destroy of Any?( (uint64_t)&v148,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?( (uint64_t)&v153,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v158,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_112:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v11 = v108;
            goto LABEL_113;
          }

          double v75 = *((_OWORD *)v132 + 3);
          v145[2] = *((_OWORD *)v132 + 2);
          v145[3] = v75;
          v146 = v132[8];
          v76 = *((_OWORD *)v132 + 1);
          v145[0] = *(_OWORD *)v132;
          v145[1] = v76;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v147,  (uint64_t)v144);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v145,  (uint64_t)v143);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)v144,  (uint64_t)&v139,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)v143,  (uint64_t)v131,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (v140)
          {
            if (!v142)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
LABEL_79:
              uint64_t v67 = 0;
              goto LABEL_80;
            }

            outlined init with take of any PredicateExpression<Self.Output == B1>(&v139, (uint64_t)v136);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v131, (uint64_t)v135);
            uint64_t v77 = v137;
            v125 = v138;
            v124 = __swift_project_boxed_opaque_existential_1(v136, v137);
            v129 = &v102;
            int v78 = *(void *)(v77 - 8);
            MEMORY[0x1895F8858](v124);
            v80 = (char *)&v102 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0LL);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v135,  (uint64_t)&v134);
            unint64_t v81 = type metadata accessor for Optional();
            v128 = &v102;
            uint64_t v82 = *(void *)(v81 - 8);
            MEMORY[0x1895F8858](v81);
            v84 = (char *)&v102 - v83;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            v85 = swift_dynamicCast();
            v86 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56);
            if (v85)
            {
              v86(v84, 0LL, 1LL, v77);
              (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v80, v84, v77);
              uint64_t v67 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v77);
            }

            else
            {
              v86(v84, 1LL, 1LL, v77);
              (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
              uint64_t v67 = 0;
            }

            uint64_t v42 = v121;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v135);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v136);
            uint64_t v10 = v127;
          }

          else
          {
            if (v142)
            {
              outlined destroy of Any?( (uint64_t)v131,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
              goto LABEL_79;
            }

            uint64_t v67 = 1;
          }

      swift_release();
      uint64_t v11 = MEMORY[0x18961AFF8];
      MEMORY[0x186E20E60](v21, -1LL, -1LL);
      return v11;
    }
  }

  v20[1] = v20;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  uint64_t v21 = (char *)v20 - ((v3 + 15) & 0x3FFFFFFFFFFFFFF0LL);
  bzero(v21, v3);
  uint64_t v4 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  uint64_t v6 = v5 & *(void *)(v1 + 56);
  if (v6)
  {
    uint64_t v7 = __clz(__rbit64(v6));
    goto LABEL_19;
  }

  uint64_t v8 = 1LL;
  if ((unint64_t)(v4 + 63) >> 6 > 1)
  {
    uint64_t v9 = *(void *)(v1 + 64);
    if (v9)
    {
LABEL_18:
      uint64_t v7 = __clz(__rbit64(v9)) + (v8 << 6);
LABEL_19:
      __asm { BR              X26 }
    }

    uint64_t v10 = 2LL;
    if ((unint64_t)(v4 + 63) >> 6 > 2)
    {
      uint64_t v9 = *(void *)(v1 + 72);
      if (v9) {
        goto LABEL_17;
      }
      uint64_t v10 = 3LL;
      if ((unint64_t)(v4 + 63) >> 6 > 3)
      {
        uint64_t v9 = *(void *)(v1 + 80);
        if (v9) {
          goto LABEL_17;
        }
        uint64_t v10 = 4LL;
        if ((unint64_t)(v4 + 63) >> 6 > 4)
        {
          uint64_t v9 = *(void *)(v1 + 88);
          if (!v9)
          {
            uint64_t v10 = 5LL;
            if ((unint64_t)(v4 + 63) >> 6 > 5)
            {
              uint64_t v9 = *(void *)(v1 + 96);
              if (v9) {
                goto LABEL_17;
              }
              while (1)
              {
                uint64_t v8 = v10 + 1;
                if (__OFADD__(v10, 1LL)) {
                  break;
                }
                uint64_t v9 = *(void *)(v1 + 56 + 8 * v8);
                ++v10;
                if (v9) {
                  goto LABEL_18;
                }
              }

              __break(1u);
              __break(1u);
LABEL_50:
              __break(1u);
              __break(1u);
              __break(1u);
            }

            goto LABEL_24;
          }

  if (!v8) {
    goto LABEL_48;
  }
LABEL_67:
  __break(1u);
  return result;
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v32);
        swift_bridgeObjectRelease();
        char v33 = v107;
        if (!v107) {
          goto LABEL_31;
        }
        goto LABEL_48;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v121,  (uint64_t)v101,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v34 = v101;
    }

    else
    {
      Hasher._combine(_:)(0);
      uint64_t v34 = v102;
    }

    outlined retain of LocalePreferences(v34);
    if (!v104) {
      goto LABEL_28;
    }
    goto LABEL_45;
  }

  uint64_t v6 = v4[1];
  uint64_t v7 = v4[3];
  uint64_t v8 = v4[4];
  uint64_t v9 = v4[5];
  Hasher._combine(_:)(1uLL);
  uint64_t v10 = swift_getObjectType();
  uint64_t v11 = *(void (**)(void, void, void))(v6 + 112);
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v127,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
  swift_unknownObjectRetain();
  v11(a1, v10, v6);
  swift_unknownObjectRelease();
  uint64_t v12 = swift_getObjectType();
  uint64_t v13 = *(void (**)(void, void, void))(v7 + 120);
  swift_unknownObjectRetain();
  v13(a1, v12, v7);
  swift_unknownObjectRelease();
  if (v8)
  {
    Hasher._combine(_:)(1u);
    uint64_t v14 = swift_getObjectType();
    uint64_t v15 = *(uint64_t (**)(void, void))(v9 + 48);
    swift_unknownObjectRetain_n();
    if ((v15(v14, v9) & 1) != 0)
    {
      uint64_t v16 = 1;
LABEL_16:
      Hasher._combine(_:)(v16);
      swift_unknownObjectRelease_n();
      goto LABEL_17;
    }

    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v9 + 64))(v14, v9);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void (**)(void *__return_ptr, void, void))(v9 + 464);
    swift_unknownObjectRetain();
    v26(v120, v14, v9);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v120,  (uint64_t)v121,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v121,  (uint64_t)v122,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v122) == 1)
    {
      uint64_t v16 = 0;
      goto LABEL_16;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v121,  (uint64_t)v102,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v102[0] == 2)
    {
      uint64_t v28 = 0;
    }

    else
    {
      uint64_t v28 = v102[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v28);
    uint64_t v35 = v103;
    if (v103)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v35 + 16));
      uint64_t v36 = *(void *)(v35 + 16);
      if (v36)
      {
        outlined retain of LocalePreferences?( (uint64_t)v121,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        char v37 = v35 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v37 += 16LL;
          --v36;
        }

        while (v36);
        swift_bridgeObjectRelease();
        if (!v104)
        {
LABEL_39:
          Hasher._combine(_:)(0);
          if (!v105) {
            goto LABEL_40;
          }
          goto LABEL_86;
        }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v28);
        swift_bridgeObjectRelease();
        uint64_t v29 = v114;
        if (!v114) {
          goto LABEL_31;
        }
        goto LABEL_48;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v128,  (uint64_t)v108,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v31 = v108;
    }

    else
    {
      Hasher._combine(_:)(0);
      uint64_t v31 = v109;
    }

    outlined retain of LocalePreferences(v31);
    if (!v111) {
      goto LABEL_28;
    }
    goto LABEL_45;
  }

  uint64_t v3 = (void *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v133);
  uint64_t v4 = v3[1];
  uint64_t v104 = v3[4];
  v106 = v3[3];
  char v100 = v3[5];
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v132, v130);
  _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v130);
  Hasher._combine(_:)(1uLL);
  uint64_t v5 = swift_getObjectType();
  v102 = *(void (**)(void, void, void))(v4 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v132,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
  swift_unknownObjectRetain();
  v102(a1, v5, v4);
  swift_unknownObjectRelease();
  uint64_t v6 = swift_getObjectType();
  uint64_t v7 = *(void (**)(void, void, void))(v106 + 120);
  swift_unknownObjectRetain();
  v7(a1, v6, v106);
  swift_unknownObjectRelease();
  if (v104)
  {
    Hasher._combine(_:)(1u);
    uint64_t v8 = swift_getObjectType();
    uint64_t v9 = *(uint64_t (**)(void, void))(v100 + 48);
    swift_unknownObjectRetain_n();
    if ((v9(v8, v100) & 1) != 0)
    {
      uint64_t v10 = 1;
LABEL_16:
      Hasher._combine(_:)(v10);
      swift_unknownObjectRelease_n();
      goto LABEL_17;
    }

    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v100 + 64))(v8, v100);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void (**)(void *__return_ptr, void, void))(v100 + 464);
    swift_unknownObjectRetain();
    v22(v127, v8, v100);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v127,  (uint64_t)v128,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v128,  (uint64_t)v129,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v129) == 1)
    {
      uint64_t v10 = 0;
      goto LABEL_16;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v128,  (uint64_t)v109,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v109[0] == 2)
    {
      uint64_t v24 = 0;
    }

    else
    {
      uint64_t v24 = v109[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v24);
    uint64_t v32 = v110;
    if (v110)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v32 + 16));
      char v33 = *(void *)(v32 + 16);
      if (v33)
      {
        outlined retain of LocalePreferences?( (uint64_t)v128,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v34 = v32 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v34 += 16LL;
          --v33;
        }

        while (v33);
        swift_bridgeObjectRelease();
        if (!v111)
        {
LABEL_39:
          Hasher._combine(_:)(0);
          if (!v112) {
            goto LABEL_40;
          }
          goto LABEL_86;
        }

      *(void *)(v36 + 8 * v40) = v42 | v41;
      *(_BYTE *)(v43 + v39) = v11;
      uint64_t v45 = *(void *)(v35 + 16);
      uint64_t v29 = __OFADD__(v45, 1LL);
      uint64_t v46 = v45 + 1;
      if (!v29)
      {
        *(void *)(v35 + 16) = v46;
        goto LABEL_49;
      }

          uint64_t v34 = (v44 - 1) & v44;
          uint64_t v36 = __clz(__rbit64(v44)) + (v31 << 6);
        }

        char v37 = 16 * v36;
        uint64_t v38 = (uint64_t *)(*(void *)(v17 + 48) + v37);
        uint64_t v40 = *v38;
        uint64_t v39 = v38[1];
        uint64_t v41 = *(_OWORD *)(*(void *)(v17 + 56) + v37);
        uint64_t v42 = (void *)(*(void *)(v23 + 48) + v37);
        *uint64_t v42 = v40;
        v42[1] = v39;
        *(_OWORD *)(*(void *)(v23 + 56) + v37) = v41;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
      }
    }

    CFStringRef v59 = (v53 - 1) & v53;
    uint64_t v60 = v54;
    uint64_t v41 = __clz(__rbit64(v53)) + (v54 << 6);
LABEL_22:
    uint64_t v42 = (_OWORD *)(*(void *)(v24 + 48) + 160 * v41);
    char v43 = v42[2];
    uint64_t v44 = v42[3];
    uint64_t v45 = v42[5];
    v61[4] = v42[4];
    v61[5] = v45;
    v61[3] = v44;
    uint64_t v46 = v42[6];
    uint64_t v47 = v42[7];
    uint64_t v48 = v42[8];
    *(_OWORD *)&v62[12] = *(_OWORD *)((char *)v42 + 140);
    v61[7] = v47;
    *(_OWORD *)unint64_t v62 = v48;
    v61[6] = v46;
    uint64_t v49 = v42[1];
    v61[0] = *v42;
    v61[1] = v49;
    v61[2] = v43;
    uint64_t v58 = 8 * v41;
    uint64_t v50 = *(void **)(*(void *)(v24 + 56) + 8 * v41);
    memmove((void *)(*(void *)(v30 + 48) + 160 * v41), v42, 0x9CuLL);
    *(void *)(*(void *)(v30 + 56) + v5_Block_object_dispose((const void *)(v1 - 96), 8) = v50;
    outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)v61);
    char v51 = v50;
    uint64_t v40 = v59;
    char v37 = v60;
  }

  uint64_t v55 = v37 + 9;
  if (v37 + 9 >= v57) {
    goto LABEL_48;
  }
  uint64_t v53 = *(void *)(v56 + 8 * v55);
  if (v53)
  {
    os_unfair_lock_t v54 = v37 + 9;
    goto LABEL_47;
  }

  while (1)
  {
    os_unfair_lock_t v54 = v55 + 1;
    if (__OFADD__(v55, 1LL)) {
      break;
    }
    if (v54 >= v57) {
      goto LABEL_48;
    }
    uint64_t v53 = *(void *)(v56 + 8 * v54);
    ++v55;
    if (v53) {
      goto LABEL_47;
    }
  }

          uint64_t v47 = (v37 - 1) & v37;
          uint64_t v48 = v38;
          uint64_t v32 = __clz(__rbit64(v37)) + (v38 << 6);
        }

        uint64_t v49 = v32;
        char v33 = 352 * v32;
        char __src = (void *)(*(void *)(v15 + 48) + 352 * v32);
        memcpy(__dst, __src, 0x160uLL);
        uint64_t v34 = (void *)(*(void *)(v21 + 48) + v33);
        uint64_t v35 = 16 * v49;
        uint64_t v50 = *(_OWORD *)(*(void *)(v15 + 56) + 16 * v49);
        memmove(v34, __src, 0x160uLL);
        *(_OWORD *)(*(void *)(v21 + 56) + v35) = v50;
        outlined retain of Locale.Components(__dst);
        swift_unknownObjectRetain();
        uint64_t v31 = v47;
        uint64_t v28 = v48;
      }
    }

    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
    }
    uint64_t v28 = *((void *)v11 + 2);
    uint64_t v27 = *((void *)v11 + 3);
    uint64_t v12 = v28 + 1;
    uint64_t v10 = v96;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v27 > 1),  v28 + 1,  1,  v11);
      uint64_t v10 = v96;
      uint64_t v11 = v77;
    }

    *((void *)v11 + 2) = v12;
    uint64_t v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        uint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          char v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          uint64_t v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          uint64_t v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          uint64_t v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          char v43 = v12 - 2;
          uint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          uint64_t v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          uint64_t v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            uint64_t v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            CFStringRef v59 = v34 < v69;
            goto LABEL_84;
          }
        }

        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            uint64_t v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            os_unfair_lock_t v54 = v42;
            goto LABEL_78;
          }

          char v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          uint64_t v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          uint64_t v35 = v42;
        }

        if ((v35 & 1) != 0) {
          goto LABEL_122;
        }
        char v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        char v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        uint64_t v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        os_unfair_lock_t v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        char v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        uint64_t v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          CFStringRef v59 = v34 < v58;
LABEL_84:
          if (v59) {
            uint64_t v31 = v43;
          }
          goto LABEL_86;
        }

    if ((a1[168] & 1) != 0) {
      uint64_t v63 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      uint64_t v63 = String.subscript.getter();
    }
    uint64_t v67 = v63;
    uint64_t v68 = v64;
    uint64_t v69 = v65;
    uint64_t v70 = v66;
    uint64_t v71 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v63,  v64,  v65,  v66,  0x10u,  1);
    if (v71 == 2)
    {
      uint64_t v72 = v2;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      uint64_t v73 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      int v74 = (unsigned __int16 *)objc_msgSend(v73, sel__fastCharacterContents);
      double v75 = v73;
      if (v74)
      {
        StringProtocol._ephemeralString.getter();
        v76 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v77 = objc_msgSend(v76, sel_length);
        swift_unknownObjectRelease();
        int v78 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v74,  (uint64_t)v77,  0x10u,  1);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRetain();
        int v78 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v67,  v68,  v69,  v70,  0x10u,  1);
        swift_bridgeObjectRelease_n();
      }

      uint64_t v2 = v72;
      if (v78)
      {
LABEL_55:
        if ((a1[192] & 1) != 0) {
          goto LABEL_61;
        }
        v80 = String.subscript.getter();
        uint64_t v82 = v81;
        v84 = v83;
        v86 = v85;
        unint64_t v87 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v80,  v81,  v83,  v85,  0x40u,  1);
        if (v87 == 2)
        {
          uint64_t v88 = v2;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          StringProtocol._ephemeralString.getter();
          uint64_t v89 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v90 = (unsigned __int16 *)objc_msgSend(v89, sel__fastCharacterContents);
          uint64_t v91 = v89;
          if (v90)
          {
            StringProtocol._ephemeralString.getter();
            __int128 v92 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            uint64_t v93 = objc_msgSend(v92, sel_length);
            swift_unknownObjectRelease();
            unint64_t v94 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v90,  (uint64_t)v93,  0x40u,  1);
            swift_bridgeObjectRelease();
          }

          else
          {
            swift_bridgeObjectRetain();
            unint64_t v94 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v80,  v82,  v84,  v86,  0x40u,  1);
            swift_bridgeObjectRelease_n();
          }

          uint64_t v2 = v88;
          if (v94)
          {
LABEL_61:
            if ((a1[216] & 1) == 0)
            {
              __int128 v96 = String.subscript.getter();
              uint64_t v98 = v97;
              char v100 = v99;
              v102 = v101;
              v103 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v96,  v97,  v99,  v101,  0x40u,  1);
              if (v103 == 2)
              {
                lazy protocol witness table accessor for type Substring and conformance Substring();
                StringProtocol._ephemeralString.getter();
                uint64_t v104 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v105 = (unsigned __int16 *)objc_msgSend(v104, sel__fastCharacterContents);
                v106 = v104;
                if (!v105)
                {
                  swift_bridgeObjectRetain();
                  v111 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v96,  v98,  v100,  v102,  0x40u,  1);
                  swift_bridgeObjectRelease_n();
                  if (v111) {
                    return v2;
                  }
                  return v2 | 0xFFFFFF80;
                }

                StringProtocol._ephemeralString.getter();
                v107 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v108 = objc_msgSend(v107, sel_length);
                swift_unknownObjectRelease();
                v103 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v105,  (uint64_t)v108,  0x40u,  1);
              }

              v109 = v103;
              swift_bridgeObjectRelease();
              if ((v109 & 1) == 0) {
                return v2 | 0xFFFFFF80;
              }
            }

            return v2;
          }
        }

        else
        {
          char v95 = v87;
          swift_bridgeObjectRelease();
          if ((v95 & 1) != 0) {
            goto LABEL_61;
          }
        }

        uint64_t v2 = v2 | 0x40;
        goto LABEL_61;
      }
    }

    else
    {
      unint64_t v79 = v71;
      swift_bridgeObjectRelease();
      if ((v79 & 1) != 0) {
        goto LABEL_55;
      }
    }

    uint64_t v2 = v2 | 0x20;
    goto LABEL_55;
  }

    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
    }
    uint64_t v28 = *((void *)v11 + 2);
    uint64_t v27 = *((void *)v11 + 3);
    uint64_t v12 = v28 + 1;
    uint64_t v10 = v96;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v27 > 1),  v28 + 1,  1,  v11);
      uint64_t v10 = v96;
      uint64_t v11 = v77;
    }

    *((void *)v11 + 2) = v12;
    uint64_t v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        uint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          char v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          uint64_t v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          uint64_t v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          uint64_t v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          char v43 = v12 - 2;
          uint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          uint64_t v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          uint64_t v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            uint64_t v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            CFStringRef v59 = v34 < v69;
            goto LABEL_84;
          }
        }

        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            uint64_t v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            os_unfair_lock_t v54 = v42;
            goto LABEL_78;
          }

          char v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          uint64_t v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          uint64_t v35 = v42;
        }

        if ((v35 & 1) != 0) {
          goto LABEL_122;
        }
        char v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        char v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        uint64_t v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        os_unfair_lock_t v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        char v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        uint64_t v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          CFStringRef v59 = v34 < v58;
LABEL_84:
          if (v59) {
            uint64_t v31 = v43;
          }
          goto LABEL_86;
        }

      __break(1u);
    }

    uint64_t v15 = (char *)(*(void *)(v0 + 56) + *(int *)(v0 + 176));
    if ((v15[1] & 1) != 0) {
      goto LABEL_32;
    }
    uint64_t v16 = *v15;
    *(_WORD *)uint64_t v15 = 256;
    if ((v16 & 0xE0) == 0xC0) {
      goto LABEL_35;
    }
    if ((v16 & 0xF0) == 0xE0)
    {
      uint64_t v9 = 2LL;
      goto LABEL_35;
    }

    if ((v16 & 0xF8) == 0xF0) {
      break;
    }
    if ((v16 & 0x80) == 0)
    {
      *(_BYTE *)(v0 + 184) = v16;
      *(_WORD *)(v0 + 185) = 0;
      *(_BYTE *)(v0 + 187) = 0;
      uint64_t v17 = static String._fromUTF8Repairing(_:)();
      if ((v18 & 0x2000000000000000LL) != 0) {
        uint64_t v19 = HIBYTE(v18) & 0xF;
      }
      else {
        uint64_t v19 = v17 & 0xFFFFFFFFFFFFLL;
      }
      if (!v19)
      {
        swift_bridgeObjectRelease();
LABEL_38:
        unint64_t v25 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36LL));
        uint64_t v27 = *v25;
        uint64_t v26 = v25[1];
        swift_bridgeObjectRetain();
        uint64_t v28 = String.count.getter();
        swift_bridgeObjectRelease();
        if (v28 < 1)
        {
          uint64_t v30 = 0LL;
          uint64_t v31 = 0LL;
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v30, v31);
        }

        uint64_t v29 = HIBYTE(v26) & 0xF;
        if ((v26 & 0x2000000000000000LL) == 0) {
          uint64_t v29 = v27 & 0xFFFFFFFFFFFFLL;
        }
        if (v29)
        {
          uint64_t result = specialized Collection.first.getter(v27, v26);
          if (!v22)
          {
            __break(1u);
            return result;
          }

          goto LABEL_43;
        }

        __break(1u);
        goto LABEL_47;
      }

      if ((v18 & 0x1000000000000000LL) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((v18 & 0x2000000000000000LL) != 0)
        {
          *(void *)(v0 + 16) = v17;
          *(void *)(v0 + 24) = v18 & 0xFFFFFFFFFFFFFFLL;
        }

        else if ((v17 & 0x1000000000000000LL) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }

        _decodeScalar(_:startingAt:)();
      }

      swift_bridgeObjectRelease();
    }
  }

  uint64_t v9 = 3LL;
LABEL_35:
  *(_BYTE *)(v0 + 184) = v16;
  *(_WORD *)(v0 + 185) = 0;
  *(_BYTE *)(v0 + 187) = 0;
  *(void *)(v0 + 80) = v9;
  *(void *)(v0 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v24;
  *uint64_t v24 = v0;
  v24[1] = AsyncCharacterSequence.AsyncIterator.next();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

        swift_release();
        return;
      }

                uint64_t v32 = 2LL;
                goto LABEL_87;
              }

    uint64_t v38 = 0LL;
    memset(v51, 0, sizeof(v51));
    uint64_t v50 = 0u;
  }

  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
}

    uint64_t v39 = (v47 - 1) & v47;
    uint64_t v45 = __clz(__rbit64(v47)) + (v48 << 6);
    uint64_t v41 = v48;
LABEL_48:
    uint64_t v50 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v45);
    uint64_t v52 = *v50;
    char v51 = v50[1];
    outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v45, (uint64_t)v78);
    *(void *)&uint64_t v77 = v52;
    *((void *)&v77 + 1) = v51;
    v75[2] = v77;
    v76[0] = v78[0];
    v76[1] = v78[1];
    *(void *)&v75[0] = v52;
    *((void *)&v75[0] + 1) = v51;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v76, v70);
    uint64_t v71 = v67;
    uint64_t v72 = v68;
    uint64_t v73 = v69;
    outlined init with take of Any(v70, v74);
    uint64_t v67 = v71;
    uint64_t v68 = v72;
    uint64_t v69 = v73;
    outlined init with take of Any(v74, v75);
    outlined init with take of Any(v75, &v71);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v36 + 40));
    uint64_t v53 = -1LL << *(_BYTE *)(v36 + 32);
    os_unfair_lock_t v54 = result & ~v53;
    uint64_t v55 = v54 >> 6;
    if (((-1LL << v54) & ~*(void *)(v40 + 8 * (v54 >> 6))) != 0)
    {
      uint64_t v42 = __clz(__rbit64((-1LL << v54) & ~*(void *)(v40 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v56 = 0;
      char v57 = (unint64_t)(63 - v53) >> 6;
      do
      {
        if (++v55 == v57 && (v56 & 1) != 0)
        {
          __break(1u);
          goto LABEL_66;
        }

        uint64_t v58 = v55 == v57;
        if (v55 == v57) {
          uint64_t v55 = 0LL;
        }
        v56 |= v58;
        CFStringRef v59 = *(void *)(v40 + 8 * v55);
      }

      while (v59 == -1);
      uint64_t v42 = __clz(__rbit64(~v59)) + (v55 << 6);
    }

    *(void *)(v40 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v42;
    char v43 = *(void *)(v36 + 48) + 40 * v42;
    *(_OWORD *)char v43 = v67;
    *(_OWORD *)(v43 + 16) = v68;
    *(void *)(v43 + 32) = v69;
    uint64_t result = (uint64_t)outlined init with take of Any(&v71, (_OWORD *)(*(void *)(v36 + 56) + 32 * v42));
    ++*(void *)(v36 + 16);
  }

  uint64_t v49 = v41 + 5;
  if (v41 + 5 < v66)
  {
    uint64_t v47 = *(void *)(v65 + 8 * v49);
    if (!v47)
    {
      while (1)
      {
        uint64_t v48 = v49 + 1;
        if (__OFADD__(v49, 1LL)) {
          goto LABEL_67;
        }
        if (v48 >= v66) {
          goto LABEL_57;
        }
        uint64_t v47 = *(void *)(v65 + 8 * v48);
        ++v49;
        if (v47) {
          goto LABEL_47;
        }
      }
    }

    uint64_t v48 = v41 + 5;
    goto LABEL_47;
  }

    uint64_t v38 = (v46 - 1) & v46;
    uint64_t v44 = __clz(__rbit64(v46)) + (v47 << 6);
    uint64_t v40 = v47;
LABEL_48:
    uint64_t v49 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v44);
    char v51 = *v49;
    uint64_t v50 = v49[1];
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v44, (uint64_t)v76);
    *(void *)&double v75 = v51;
    *((void *)&v75 + 1) = v50;
    v73[2] = v75;
    v74[0] = v76[0];
    v74[1] = v76[1];
    *(void *)&v73[0] = v51;
    *((void *)&v73[0] + 1) = v50;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v74, v68);
    uint64_t v69 = v65;
    uint64_t v70 = v66;
    uint64_t v71 = v67;
    outlined init with take of Any(v68, v72);
    uint64_t v65 = v69;
    uint64_t v66 = v70;
    uint64_t v67 = v71;
    outlined init with take of Any(v72, v73);
    outlined init with take of Any(v73, &v69);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v35 + 40));
    uint64_t v52 = -1LL << *(_BYTE *)(v35 + 32);
    uint64_t v53 = result & ~v52;
    os_unfair_lock_t v54 = v53 >> 6;
    if (((-1LL << v53) & ~*(void *)(v39 + 8 * (v53 >> 6))) != 0)
    {
      uint64_t v41 = __clz(__rbit64((-1LL << v53) & ~*(void *)(v39 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v55 = 0;
      uint64_t v56 = (unint64_t)(63 - v52) >> 6;
      do
      {
        if (++v54 == v56 && (v55 & 1) != 0)
        {
          __break(1u);
          goto LABEL_67;
        }

        char v57 = v54 == v56;
        if (v54 == v56) {
          os_unfair_lock_t v54 = 0LL;
        }
        v55 |= v57;
        uint64_t v58 = *(void *)(v39 + 8 * v54);
      }

      while (v58 == -1);
      uint64_t v41 = __clz(__rbit64(~v58)) + (v54 << 6);
    }

    *(void *)(v39 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v41;
    uint64_t v42 = *(void *)(v35 + 48) + 40 * v41;
    *(_OWORD *)uint64_t v42 = v65;
    *(_OWORD *)(v42 + 16) = v66;
    *(void *)(v42 + 32) = v67;
    uint64_t result = (uint64_t)outlined init with take of Any(&v69, (_OWORD *)(*(void *)(v35 + 56) + 32 * v41));
    ++*(void *)(v35 + 16);
  }

  uint64_t v48 = v40 + 5;
  if (v40 + 5 < v64)
  {
    uint64_t v46 = *(void *)(v63 + 8 * v48);
    if (!v46)
    {
      while (1)
      {
        uint64_t v47 = v48 + 1;
        if (__OFADD__(v48, 1LL)) {
          goto LABEL_68;
        }
        if (v47 >= v64) {
          goto LABEL_57;
        }
        uint64_t v46 = *(void *)(v63 + 8 * v47);
        ++v48;
        if (v46) {
          goto LABEL_47;
        }
      }
    }

    uint64_t v47 = v40 + 5;
    goto LABEL_47;
  }

    uint64_t v38 = (v46 - 1) & v46;
    uint64_t v44 = __clz(__rbit64(v46)) + (v47 << 6);
    uint64_t v40 = v47;
LABEL_48:
    uint64_t v49 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v44);
    char v51 = *v49;
    uint64_t v50 = v49[1];
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v44, (uint64_t)v76);
    *(void *)&double v75 = v51;
    *((void *)&v75 + 1) = v50;
    v73[2] = v75;
    v74[0] = v76[0];
    v74[1] = v76[1];
    *(void *)&v73[0] = v51;
    *((void *)&v73[0] + 1) = v50;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v74, v68);
    uint64_t v69 = v65;
    uint64_t v70 = v66;
    uint64_t v71 = v67;
    outlined init with take of Any(v68, v72);
    uint64_t v65 = v69;
    uint64_t v66 = v70;
    uint64_t v67 = v71;
    outlined init with take of Any(v72, v73);
    outlined init with take of Any(v73, &v69);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v35 + 40));
    uint64_t v52 = -1LL << *(_BYTE *)(v35 + 32);
    uint64_t v53 = result & ~v52;
    os_unfair_lock_t v54 = v53 >> 6;
    if (((-1LL << v53) & ~*(void *)(v39 + 8 * (v53 >> 6))) != 0)
    {
      uint64_t v41 = __clz(__rbit64((-1LL << v53) & ~*(void *)(v39 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v55 = 0;
      uint64_t v56 = (unint64_t)(63 - v52) >> 6;
      do
      {
        if (++v54 == v56 && (v55 & 1) != 0)
        {
          __break(1u);
          goto LABEL_65;
        }

        char v57 = v54 == v56;
        if (v54 == v56) {
          os_unfair_lock_t v54 = 0LL;
        }
        v55 |= v57;
        uint64_t v58 = *(void *)(v39 + 8 * v54);
      }

      while (v58 == -1);
      uint64_t v41 = __clz(__rbit64(~v58)) + (v54 << 6);
    }

    *(void *)(v39 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v41;
    uint64_t v42 = *(void *)(v35 + 48) + 40 * v41;
    *(_OWORD *)uint64_t v42 = v65;
    *(_OWORD *)(v42 + 16) = v66;
    *(void *)(v42 + 32) = v67;
    uint64_t result = (uint64_t)outlined init with take of Any(&v69, (_OWORD *)(*(void *)(v35 + 56) + 32 * v41));
    ++*(void *)(v35 + 16);
  }

  uint64_t v48 = v40 + 5;
  if (v40 + 5 < v64)
  {
    uint64_t v46 = *(void *)(v63 + 8 * v48);
    if (!v46)
    {
      while (1)
      {
        uint64_t v47 = v48 + 1;
        if (__OFADD__(v48, 1LL)) {
          goto LABEL_66;
        }
        if (v47 >= v64) {
          goto LABEL_57;
        }
        uint64_t v46 = *(void *)(v63 + 8 * v47);
        ++v48;
        if (v46) {
          goto LABEL_47;
        }
      }
    }

    uint64_t v47 = v40 + 5;
    goto LABEL_47;
  }

    uint64_t v40 = (v48 - 1) & v48;
    uint64_t v46 = __clz(__rbit64(v48)) + (v49 << 6);
    uint64_t v42 = v49;
LABEL_48:
    char v51 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v46);
    uint64_t v53 = *v51;
    uint64_t v52 = v51[1];
    outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v46, (uint64_t)v82);
    *(void *)&unint64_t v81 = v53;
    *((void *)&v81 + 1) = v52;
    v79[2] = v81;
    v80[0] = v82[0];
    v80[1] = v82[1];
    *(void *)&v79[0] = v53;
    *((void *)&v79[0] + 1) = v52;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v80, v74);
    double v75 = v70;
    v76 = v72;
    uint64_t v77 = v73;
    outlined init with take of Any(v74, v78);
    uint64_t v70 = v75;
    uint64_t v72 = v76;
    uint64_t v73 = v77;
    outlined init with take of Any(v78, v79);
    outlined init with take of Any(v79, &v75);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v37 + 40));
    os_unfair_lock_t v54 = -1LL << *(_BYTE *)(v37 + 32);
    uint64_t v55 = result & ~v54;
    uint64_t v56 = v55 >> 6;
    if (((-1LL << v55) & ~*(void *)(v41 + 8 * (v55 >> 6))) != 0)
    {
      char v43 = __clz(__rbit64((-1LL << v55) & ~*(void *)(v41 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v57 = 0;
      uint64_t v58 = (unint64_t)(63 - v54) >> 6;
      do
      {
        if (++v56 == v58 && (v57 & 1) != 0)
        {
          __break(1u);
          goto LABEL_70;
        }

        CFStringRef v59 = v56 == v58;
        if (v56 == v58) {
          uint64_t v56 = 0LL;
        }
        v57 |= v59;
        uint64_t v60 = *(void *)(v41 + 8 * v56);
      }

      while (v60 == -1);
      char v43 = __clz(__rbit64(~v60)) + (v56 << 6);
    }

    *(void *)(v41 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v43;
    uint64_t v44 = *(void *)(v37 + 48) + 40 * v43;
    *(_OWORD *)uint64_t v44 = v70;
    *(_OWORD *)(v44 + 16) = v72;
    *(void *)(v44 + 32) = v73;
    uint64_t result = (uint64_t)outlined init with take of Any(&v75, (_OWORD *)(*(void *)(v37 + 56) + 32 * v43));
    ++*(void *)(v37 + 16);
  }

  uint64_t v50 = v42 + 5;
  if (v42 + 5 >= v69)
  {
LABEL_57:
    swift_release();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();

    swift_bridgeObjectRelease();
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
    AnyHashable.init<A>(_:)();
    if (*(void *)(v37 + 16))
    {
      uint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v75);
      if ((v62 & 1) != 0)
      {
        outlined init with copy of Any(*(void *)(v37 + 56) + 32 * v61, (uint64_t)&v83);
      }

      else
      {
        uint64_t v83 = 0u;
        v84 = 0u;
      }
    }

    else
    {
      uint64_t v83 = 0u;
      v84 = 0u;
    }

    swift_release();
    outlined destroy of AnyHashable((uint64_t)&v75);
    if (*((void *)&v84 + 1))
    {
      uint64_t result = swift_dynamicCast();
      if ((result & 1) != 0)
      {
        uint64_t v63 = (char)v71;
        uint64_t v64 = a2;
        goto LABEL_69;
      }
    }

    else
    {
      uint64_t result = outlined destroy of Any?((uint64_t)&v83);
    }

    uint64_t v64 = a2;
    uint64_t v63 = 3;
LABEL_69:
    *uint64_t v64 = v63;
    return result;
  }

  uint64_t v48 = *(void *)(v68 + 8 * v50);
  if (v48)
  {
    uint64_t v49 = v42 + 5;
    goto LABEL_47;
  }

  while (1)
  {
    uint64_t v49 = v50 + 1;
    if (__OFADD__(v50, 1LL)) {
      break;
    }
    if (v49 >= v69) {
      goto LABEL_57;
    }
    uint64_t v48 = *(void *)(v68 + 8 * v49);
    ++v50;
    if (v48) {
      goto LABEL_47;
    }
  }

    uint64_t v39 = (v47 - 1) & v47;
    uint64_t v45 = __clz(__rbit64(v47)) + (v48 << 6);
    uint64_t v41 = v48;
LABEL_48:
    uint64_t v50 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v45);
    uint64_t v52 = *v50;
    char v51 = v50[1];
    outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v45, (uint64_t)v78);
    *(void *)&uint64_t v77 = v52;
    *((void *)&v77 + 1) = v51;
    v75[2] = v77;
    v76[0] = v78[0];
    v76[1] = v78[1];
    *(void *)&v75[0] = v52;
    *((void *)&v75[0] + 1) = v51;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v76, v70);
    uint64_t v71 = v67;
    uint64_t v72 = v68;
    uint64_t v73 = v69;
    outlined init with take of Any(v70, v74);
    uint64_t v67 = v71;
    uint64_t v68 = v72;
    uint64_t v69 = v73;
    outlined init with take of Any(v74, v75);
    outlined init with take of Any(v75, &v71);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v36 + 40));
    uint64_t v53 = -1LL << *(_BYTE *)(v36 + 32);
    os_unfair_lock_t v54 = result & ~v53;
    uint64_t v55 = v54 >> 6;
    if (((-1LL << v54) & ~*(void *)(v40 + 8 * (v54 >> 6))) != 0)
    {
      uint64_t v42 = __clz(__rbit64((-1LL << v54) & ~*(void *)(v40 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v56 = 0;
      char v57 = (unint64_t)(63 - v53) >> 6;
      do
      {
        if (++v55 == v57 && (v56 & 1) != 0)
        {
          __break(1u);
          goto LABEL_66;
        }

        uint64_t v58 = v55 == v57;
        if (v55 == v57) {
          uint64_t v55 = 0LL;
        }
        v56 |= v58;
        CFStringRef v59 = *(void *)(v40 + 8 * v55);
      }

      while (v59 == -1);
      uint64_t v42 = __clz(__rbit64(~v59)) + (v55 << 6);
    }

    *(void *)(v40 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v42;
    char v43 = *(void *)(v36 + 48) + 40 * v42;
    *(_OWORD *)char v43 = v67;
    *(_OWORD *)(v43 + 16) = v68;
    *(void *)(v43 + 32) = v69;
    uint64_t result = (uint64_t)outlined init with take of Any(&v71, (_OWORD *)(*(void *)(v36 + 56) + 32 * v42));
    ++*(void *)(v36 + 16);
  }

  uint64_t v49 = v41 + 5;
  if (v41 + 5 < v66)
  {
    uint64_t v47 = *(void *)(v65 + 8 * v49);
    if (!v47)
    {
      while (1)
      {
        uint64_t v48 = v49 + 1;
        if (__OFADD__(v49, 1LL)) {
          goto LABEL_67;
        }
        if (v48 >= v66) {
          goto LABEL_57;
        }
        uint64_t v47 = *(void *)(v65 + 8 * v48);
        ++v49;
        if (v47) {
          goto LABEL_47;
        }
      }
    }

    uint64_t v48 = v41 + 5;
    goto LABEL_47;
  }

  __break(1u);
LABEL_48:
  __break(1u);
}

  if (v46)
  {
    uint64_t v53 = (4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C;
    if (((v43 >> v53) & 0xF) != 0)
    {
      *((void *)&v64 + 1) = ((((v43 >> v53) & 0xF) - 1) << v53) | ((-15LL << v53) - 1) & v43;
      uint64_t result = swift_unknownObjectRelease();
      goto LABEL_52;
    }
  }

  swift_unknownObjectRetain();
  os_unfair_lock_t v54 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v64, v44);
  uint64_t result = swift_unknownObjectRelease_n();
  if ((v54 & 1) == 0)
  {
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }

  if ((void)v64 != v45)
  {
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }

    while (2)
    {
      swift_unknownObjectRelease();
      uint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v14 = v11 & 0xFFFFFFFFFFFFF0FFLL | (v27 << 8);
      uint64_t v11 = v17;
      if (v6)
      {
LABEL_13:
        swift_unknownObjectRetain();
        v177 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v14, v15, v6, (uint64_t)v10);
        uint64_t result = (void *)swift_unknownObjectRelease_n();
      }

      else
      {
LABEL_48:
        v177 = 0LL;
      }

      char v33 = v176;
      v181 = v8 - v16;
      if (__OFSUB__(v8, v16)) {
        goto LABEL_391;
      }
      uint64_t v34 = v180;
      while (1)
      {
        uint64_t v10 = (void *)*v33;
        v178 = v11;
        if ((void *)v8 != v9)
        {
          if (v10) {
            uint64_t v41 = v34[10];
          }
          else {
            uint64_t v41 = 0LL;
          }
          goto LABEL_104;
        }

        if (!v10)
        {
          if (v8 > 0) {
            goto LABEL_377;
          }
          uint64_t v8 = 0LL;
          goto LABEL_102;
        }

        uint64_t v36 = v34[10];
        if (v36 < v8) {
          goto LABEL_366;
        }
        char v37 = v34[9];
        uint64_t v17 = v34[11];
        uint64_t v38 = *((unsigned __int8 *)v10 + 18);
        uint64_t v39 = !*((_WORD *)v10 + 8) || v36 <= v8;
        v173 = v37;
        if (!v39) {
          break;
        }
        uint64_t v40 = ((-15LL << ((4 * v38 + 8) & 0x3C)) - 1) & v38 | ((unint64_t)*((unsigned __int16 *)v10 + 8) << ((4 * v38 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v8 = 0LL;
        uint64_t v11 = 0LL;
LABEL_101:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v17, v40, v11, (uint64_t)v10, v173);
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        uint64_t v11 = v178;
        uint64_t v34 = v180;
LABEL_102:
        uint64_t v41 = a2 - v8;
        if (__OFSUB__(a2, v8)) {
          goto LABEL_355;
        }
        uint64_t v8 = a2;
LABEL_104:
        if (v181 >= v41) {
          return result;
        }
        if (v11 != v34[11]) {
          goto LABEL_345;
        }
        if (v15)
        {
          uint64_t v53 = (void *)(v15 + 24 * ((v14 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF));
          uint64_t v55 = v53[4];
          os_unfair_lock_t v54 = v53[5];
          uint64_t v56 = v53[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
        }

        else
        {
          char v57 = v34[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v14, v57);
          uint64_t v55 = v58;
          os_unfair_lock_t v54 = v59;
          uint64_t result = (void *)swift_unknownObjectRelease();
          if (v11 != v34[11]) {
            goto LABEL_365;
          }
          uint64_t v60 = v34[8];
          swift_unknownObjectRetain();
          uint64_t v56 = specialized Rope._Node.subscript.getter(v14, v60);
          swift_unknownObjectRelease();
        }

        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        uint64_t v61 = (void *)(v181 + v56);
        if (__OFADD__(v181, v56)) {
          goto LABEL_346;
        }
        *(void *)&v192 = v55;
        *((void *)&v192 + 1) = v54;
        else {
          unint64_t v62 = v181;
        }
        if (v181 >= v8) {
          uint64_t v63 = v62;
        }
        else {
          uint64_t v63 = v8;
        }
        else {
          uint64_t v64 = (void *)(v181 + v56);
        }
        else {
          uint64_t v10 = v9;
        }
        if ((void *)v63 == v10) {
          goto LABEL_347;
        }
        if (v63 != v181 || v10 != v61)
        {
          unint64_t v81 = v180;
          if (*a4 != -1LL) {
            swift_once();
          }
          uint64_t v82 = *a5;
          uint64_t v83 = *a6;
          v191 = 0LL;
          v189 = 0u;
          v190 = 0u;
          v187 = 0u;
          v188 = 0u;
          swift_bridgeObjectRetain();
          specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v187, v82, v83);
          uint64_t result = (void *)swift_bridgeObjectRelease();
          if (__OFSUB__(v10, v63)) {
            goto LABEL_357;
          }
          v84 = *((void *)&v192 + 1);
          uint64_t v6 = v192;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)( v63,  (uint64_t)v10,  (uint64_t)v10 - v63,  v6,  v84);
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          uint64_t v17 = v180[8];
          uint64_t v9 = (void *)v180[10];
          if (v17) {
            v85 = v180[10];
          }
          else {
            v85 = 0LL;
          }
          uint64_t v15 = v181;
          if (v181 < 0 || v85 < v181) {
            goto LABEL_359;
          }
          uint64_t v11 = v180[9];
          v179 = v180[11];
          if (v17 && *(_WORD *)(v17 + 16) && v181 < (uint64_t)v9)
          {
            v86 = *(unsigned __int8 *)(v17 + 18);
            if (*(_BYTE *)(v17 + 18))
            {
              uint64_t result = (void *)swift_unknownObjectRetain_n();
              uint64_t v8 = v181;
              unint64_t v87 = (void *)v17;
              while (1)
              {
                uint64_t v29 = *((unsigned __int16 *)v87 + 8);
                if (!*((_WORD *)v87 + 8)) {
                  goto LABEL_152;
                }
                uint64_t v89 = v87[5];
                uint64_t v22 = __OFSUB__(v8, v89);
                uint64_t v31 = v8 - v89;
                if (v22) {
                  goto LABEL_338;
                }
                if (__OFADD__(v31, 1LL)) {
                  goto LABEL_339;
                }
                if (v31 + 1 <= 0)
                {
                  uint64_t v29 = 0LL;
                }

                else
                {
                  if ((_DWORD)v29 == 1)
                  {
                    uint64_t v8 = v31;
LABEL_152:
                    if (v8) {
                      goto LABEL_335;
                    }
                    goto LABEL_153;
                  }

                  uint64_t v90 = v87 + 8;
                  uint64_t v91 = 1LL;
                  while (1)
                  {
                    __int128 v92 = *v90;
                    v90 += 3;
                    uint64_t v8 = v31 - v92;
                    if (__OFSUB__(v31, v92)) {
                      goto LABEL_331;
                    }
                    if (__OFADD__(v8, 1LL)) {
                      goto LABEL_332;
                    }
                    if (v8 + 1 < 1) {
                      break;
                    }
                    ++v91;
                    uint64_t v31 = v8;
                    if (v29 == v91) {
                      goto LABEL_152;
                    }
                  }

                  uint64_t v29 = v91;
                  uint64_t v8 = v31;
                }

    while (2)
    {
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v14 = v17 & 0xFFFFFFFFFFFFF0FFLL | (v27 << 8);
      if (v5)
      {
LABEL_13:
        swift_unknownObjectRetain();
        v180 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v14, (uint64_t)v15, v5, v10);
        uint64_t result = swift_unknownObjectRelease_n();
      }

      else
      {
LABEL_48:
        v180 = 0LL;
      }

      char v33 = a5;
      uint64_t v10 = a4 - v16;
      if (__OFSUB__(a4, v16)) {
        goto LABEL_391;
      }
      uint64_t v34 = a4;
      uint64_t v35 = v11;
      uint64_t v36 = v14;
      v178 = v33;
      while (1)
      {
        uint64_t v17 = *v179;
        v181 = v36;
        if (v34 != v33)
        {
          if (v17) {
            uint64_t v42 = v9[10];
          }
          else {
            uint64_t v42 = 0LL;
          }
          goto LABEL_104;
        }

        if (!v17)
        {
          if (v34 > 0) {
            goto LABEL_377;
          }
          uint64_t v9 = 0LL;
          goto LABEL_102;
        }

        char v37 = v9[10];
        if (v37 < v34) {
          goto LABEL_363;
        }
        a5 = v9[11];
        uint64_t v38 = v34;
        uint64_t v39 = *(unsigned __int8 *)(v17 + 18);
        uint64_t v40 = !*(_WORD *)(v17 + 16) || v37 <= v38;
        v173 = v9[9];
        if (!v40) {
          break;
        }
        uint64_t v41 = ((-15LL << ((4 * v39 + 8) & 0x3C)) - 1) & v39 | ((unint64_t)*(unsigned __int16 *)(v17 + 16) << ((4 * v39 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v9 = 0LL;
        uint64_t v11 = 0LL;
LABEL_101:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(a5, v41, v11, v17, v173);
        uint64_t result = swift_unknownObjectRelease_n();
        uint64_t v34 = a4;
        uint64_t v36 = v181;
LABEL_102:
        uint64_t v42 = v34 - (void)v9;
        if (__OFSUB__(v34, v9)) {
          goto LABEL_358;
        }
        uint64_t v9 = a3;
LABEL_104:
        if (v10 >= v42) {
          return result;
        }
        if (v35 != v9[11]) {
          goto LABEL_345;
        }
        if (v15)
        {
          os_unfair_lock_t v54 = &v15[3 * ((v36 >> ((4 * *((_BYTE *)v15 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v56 = v54[4];
          uint64_t v55 = v54[5];
          char v57 = v54[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
        }

        else
        {
          uint64_t v58 = v9[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v36, v58);
          uint64_t v56 = v59;
          uint64_t v55 = v60;
          uint64_t result = swift_unknownObjectRelease();
          if (v35 != v9[11]) {
            goto LABEL_362;
          }
          uint64_t v61 = v9[8];
          swift_unknownObjectRetain();
          char v57 = specialized Rope._Node.subscript.getter(v36, v61);
          uint64_t v34 = a4;
          swift_unknownObjectRelease();
        }

        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v22 = __OFADD__(v10, v57);
        unint64_t v62 = v10 + v57;
        if (v22) {
          goto LABEL_346;
        }
        *(void *)&v190 = v56;
        *((void *)&v190 + 1) = v55;
        if (v10 >= v178) {
          uint64_t v63 = v178;
        }
        else {
          uint64_t v63 = v10;
        }
        if (v10 >= v34) {
          uint64_t v64 = v63;
        }
        else {
          uint64_t v64 = v34;
        }
        if (v62 <= v34) {
          uint64_t v65 = v34;
        }
        else {
          uint64_t v65 = v62;
        }
        if (v62 <= v178) {
          uint64_t v66 = v65;
        }
        else {
          uint64_t v66 = v178;
        }
        if (v64 == v66) {
          goto LABEL_347;
        }
        v189 = 1;
        if (v64 != v10 || v66 != v62)
        {
          uint64_t result = v172(&v190, v64, v66, &v189);
          if ((v189 & 1) == 0)
          {
            uint64_t v89 = v35;
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v9 = a3;
            goto LABEL_235;
          }

          if (__OFSUB__(v66, v64)) {
            goto LABEL_366;
          }
          uint64_t v11 = *((void *)&v190 + 1);
          uint64_t v5 = v190;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v64, v66, v66 - v64, v5, v11);
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          v80 = a3[8];
          uint64_t v9 = (void *)a3[10];
          if (v80) {
            unint64_t v81 = a3[10];
          }
          else {
            unint64_t v81 = 0LL;
          }
          if (v10 < 0 || v81 < v10) {
            goto LABEL_368;
          }
          a5 = a3[9];
          v175 = a3[11];
          if (v80 && *(_WORD *)(v80 + 16) && v10 < (uint64_t)v9)
          {
            uint64_t v82 = *(unsigned __int8 *)(v80 + 18);
            if (*(_BYTE *)(v80 + 18))
            {
              uint64_t result = swift_unknownObjectRetain_n();
              uint64_t v17 = v10;
              uint64_t v83 = (void *)v80;
              while (1)
              {
                uint64_t v29 = *((unsigned __int16 *)v83 + 8);
                if (!*((_WORD *)v83 + 8)) {
                  goto LABEL_150;
                }
                v85 = v83[5];
                uint64_t v22 = __OFSUB__(v17, v85);
                uint64_t v31 = v17 - v85;
                if (v22) {
                  goto LABEL_356;
                }
                if (__OFADD__(v31, 1LL)) {
                  goto LABEL_357;
                }
                if (v31 + 1 < 1)
                {
                  uint64_t v29 = 0LL;
                }

                else
                {
                  if ((_DWORD)v29 == 1)
                  {
                    uint64_t v17 = v31;
LABEL_150:
                    if (v17) {
                      goto LABEL_353;
                    }
                    goto LABEL_151;
                  }

                  v86 = v83 + 8;
                  unint64_t v87 = 1LL;
                  while (1)
                  {
                    uint64_t v88 = *v86;
                    v86 += 3;
                    uint64_t v17 = v31 - v88;
                    if (__OFSUB__(v31, v88)) {
                      goto LABEL_334;
                    }
                    if (__OFADD__(v17, 1LL)) {
                      goto LABEL_335;
                    }
                    if (v17 + 1 < 1) {
                      break;
                    }
                    ++v87;
                    uint64_t v31 = v17;
                    if (v29 == v87) {
                      goto LABEL_150;
                    }
                  }

                  uint64_t v29 = v87;
                  uint64_t v17 = v31;
                }

    while (2)
    {
      swift_unknownObjectRelease();
      uint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v14 = v6 & 0xFFFFFFFFFFFFF0FFLL | (v26 << 8);
      uint64_t v6 = (uint64_t)v176;
      if (v5)
      {
LABEL_13:
        swift_unknownObjectRetain();
        v178 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v14, v15, v5, v10);
        uint64_t result = (void *)swift_unknownObjectRelease_n();
      }

      else
      {
LABEL_48:
        v178 = 0LL;
      }

      uint64_t v5 = a2;
      uint64_t v21 = __OFSUB__(a2, v16);
      uint64_t v32 = a2 - v16;
      if (v21) {
        goto LABEL_385;
      }
      v171 = v8 & 1;
      char v33 = v14;
      while (1)
      {
        uint64_t v10 = *(void *)v6;
        v179 = v33;
        if (v5 != v9)
        {
          if (v10)
          {
            uint64_t v39 = v184;
            uint64_t v40 = v184[10];
          }

          else
          {
            uint64_t v40 = 0LL;
            uint64_t v39 = v184;
          }

          goto LABEL_104;
        }

        if (!v10)
        {
          if (v5 > 0) {
            goto LABEL_371;
          }
          uint64_t v9 = 0LL;
          goto LABEL_102;
        }

        uint64_t v8 = v184[10];
        if (v8 < v5) {
          goto LABEL_360;
        }
        uint64_t v36 = *(unsigned __int8 *)(v10 + 18);
        char v37 = !*(_WORD *)(v10 + 16) || v8 <= v5;
        v180 = v184[9];
        v174 = v184[11];
        if (!v37) {
          break;
        }
        uint64_t v38 = ((-15LL << ((4 * v36 + 8) & 0x3C)) - 1) & v36 | ((unint64_t)*(unsigned __int16 *)(v10 + 16) << ((4 * v36 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v9 = 0LL;
        uint64_t v5 = 0LL;
LABEL_101:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v174, v38, v5, v10, v180);
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        uint64_t v5 = a2;
        char v33 = v179;
LABEL_102:
        uint64_t v40 = v5 - v9;
        uint64_t v39 = v184;
        if (__OFSUB__(v5, v9)) {
          goto LABEL_349;
        }
        uint64_t v9 = a3;
LABEL_104:
        if (v32 >= v40) {
          return result;
        }
        if (v11 != v39[11]) {
          goto LABEL_339;
        }
        if (v15)
        {
          uint64_t v53 = (void *)(v15 + 24 * ((v33 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF));
          uint64_t v55 = v53[4];
          os_unfair_lock_t v54 = v53[5];
          uint64_t v56 = v53[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
        }

        else
        {
          char v57 = v39[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v33, v57);
          uint64_t v55 = v58;
          os_unfair_lock_t v54 = v59;
          uint64_t result = (void *)swift_unknownObjectRelease();
          if (v11 != v39[11]) {
            goto LABEL_359;
          }
          uint64_t v60 = v184[8];
          swift_unknownObjectRetain();
          uint64_t v56 = specialized Rope._Node.subscript.getter(v33, v60);
          uint64_t v39 = v184;
          swift_unknownObjectRelease();
        }

        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        uint64_t v61 = v32 + v56;
        if (__OFADD__(v32, v56)) {
          goto LABEL_340;
        }
        *(void *)&v195 = v55;
        *((void *)&v195 + 1) = v54;
        if (v32 >= v9) {
          unint64_t v62 = v9;
        }
        else {
          unint64_t v62 = v32;
        }
        if (v32 >= a2) {
          uint64_t v63 = v62;
        }
        else {
          uint64_t v63 = a2;
        }
        if (v61 <= a2) {
          uint64_t v64 = a2;
        }
        else {
          uint64_t v64 = v61;
        }
        if (v61 <= v9) {
          uint64_t v65 = v64;
        }
        else {
          uint64_t v65 = v9;
        }
        if (v63 == v65) {
          goto LABEL_341;
        }
        v186 = v32;
        if (v63 != v32 || v65 != v61)
        {
          LOBYTE(v192) = v171;
          uint64_t result = (void *)specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(a4, (char *)&v192);
          if (__OFSUB__(v65, v63)) {
            goto LABEL_351;
          }
          unint64_t v81 = v39;
          uint64_t v10 = *((void *)&v195 + 1);
          uint64_t v82 = v195;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v63, v65, v65 - v63, v82, v10);
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          uint64_t v5 = v81[8];
          uint64_t v11 = v81[10];
          if (v5) {
            uint64_t v83 = v11;
          }
          else {
            uint64_t v83 = 0LL;
          }
          if (v32 < 0 || v83 < v32) {
            goto LABEL_353;
          }
          uint64_t v8 = v184[9];
          uint64_t v15 = v184[11];
          if (v5 && *(_WORD *)(v5 + 16) && v32 < v11)
          {
            v84 = *(unsigned __int8 *)(v5 + 18);
            if (*(_BYTE *)(v5 + 18))
            {
              uint64_t result = (void *)swift_unknownObjectRetain_n();
              uint64_t v9 = v32;
              uint64_t v6 = v5;
              while (1)
              {
                uint64_t v28 = *(unsigned __int16 *)(v6 + 16);
                if (!*(_WORD *)(v6 + 16)) {
                  goto LABEL_148;
                }
                v86 = *(void *)(v6 + 40);
                uint64_t v21 = __OFSUB__(v9, v86);
                uint64_t v30 = v9 - v86;
                if (v21) {
                  goto LABEL_332;
                }
                if (__OFADD__(v30, 1LL)) {
                  goto LABEL_333;
                }
                if (v30 + 1 <= 0)
                {
                  uint64_t v28 = 0LL;
                }

                else
                {
                  if ((_DWORD)v28 == 1)
                  {
                    uint64_t v9 = v30;
LABEL_148:
                    if (v9) {
                      goto LABEL_329;
                    }
                    goto LABEL_149;
                  }

                  unint64_t v87 = (uint64_t *)(v6 + 64);
                  uint64_t v88 = 1LL;
                  while (1)
                  {
                    uint64_t v89 = *v87;
                    v87 += 3;
                    uint64_t v9 = v30 - v89;
                    if (__OFSUB__(v30, v89)) {
                      goto LABEL_325;
                    }
                    if (__OFADD__(v9, 1LL)) {
                      goto LABEL_326;
                    }
                    if (v9 + 1 < 1) {
                      break;
                    }
                    ++v88;
                    uint64_t v30 = v9;
                    if (v28 == v88) {
                      goto LABEL_148;
                    }
                  }

                  uint64_t v28 = v88;
                  uint64_t v9 = v30;
                }

    while (2)
    {
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v12 = v15 & 0xFFFFFFFFFFFFF0FFLL | (v25 << 8);
      uint64_t v8 = v180;
      if (v4)
      {
LABEL_13:
        swift_unknownObjectRetain();
        v179 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v181, v12, (uint64_t)v13, v4, v9);
        uint64_t result = swift_unknownObjectRelease_n();
      }

      else
      {
LABEL_48:
        v179 = 0LL;
      }

      uint64_t v9 = a2;
      uint64_t v20 = __OFSUB__(a2, v14);
      uint64_t v31 = a2 - v14;
      if (v20) {
        goto LABEL_393;
      }
      v178 = v12;
      uint64_t v32 = v181;
      while (1)
      {
        uint64_t v35 = *v5;
        v181 = v32;
        if (v9 != v7)
        {
          if (v35) {
            uint64_t v41 = v8[10];
          }
          else {
            uint64_t v41 = 0LL;
          }
          goto LABEL_104;
        }

        if (!v35)
        {
          if (v9 > 0) {
            goto LABEL_379;
          }
          uint64_t v7 = 0LL;
          goto LABEL_102;
        }

        uint64_t v36 = v8[10];
        if (v36 < v9) {
          goto LABEL_365;
        }
        char v37 = v8[9];
        uint64_t v38 = v8[11];
        uint64_t v15 = *(unsigned __int8 *)(v35 + 18);
        uint64_t v39 = !*(_WORD *)(v35 + 16) || v36 <= v9;
        v173 = v37;
        if (!v39) {
          break;
        }
        uint64_t v40 = ((-15LL << ((4 * v15 + 8) & 0x3C)) - 1) & v15 | ((unint64_t)*(unsigned __int16 *)(v35 + 16) << ((4 * v15 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v7 = 0LL;
        uint64_t v9 = 0LL;
LABEL_101:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v38, v40, v9, v35, v173);
        uint64_t result = swift_unknownObjectRelease_n();
        uint64_t v9 = a2;
        uint64_t v8 = v180;
        uint64_t v32 = v181;
LABEL_102:
        uint64_t v41 = v9 - v7;
        if (__OFSUB__(v9, v7)) {
          goto LABEL_360;
        }
        uint64_t v7 = a3;
LABEL_104:
        if (v31 >= v41) {
          return result;
        }
        if (v32 != v8[11]) {
          goto LABEL_347;
        }
        if (v13)
        {
          uint64_t v53 = v178;
          os_unfair_lock_t v54 = &v13[3 * ((v178 >> ((4 * *((_BYTE *)v13 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v56 = v54[4];
          uint64_t v55 = v54[5];
          char v57 = v54[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
        }

        else
        {
          uint64_t v58 = v8[8];
          swift_unknownObjectRetain();
          uint64_t v53 = v178;
          specialized Rope._Node.subscript.getter(v178, v58);
          uint64_t v56 = v59;
          uint64_t v55 = v60;
          uint64_t result = swift_unknownObjectRelease();
          if (v181 != v8[11]) {
            goto LABEL_364;
          }
          uint64_t v61 = v8[8];
          swift_unknownObjectRetain();
          char v57 = specialized Rope._Node.subscript.getter(v178, v61);
          uint64_t v7 = a3;
          swift_unknownObjectRelease();
        }

        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v62 = v31 + v57;
        if (__OFADD__(v31, v57)) {
          goto LABEL_348;
        }
        *(void *)&v189 = v56;
        *((void *)&v189 + 1) = v55;
        if (v31 >= v7) {
          uint64_t v63 = v7;
        }
        else {
          uint64_t v63 = v31;
        }
        uint64_t v9 = a2;
        if (v31 >= a2) {
          uint64_t v64 = v63;
        }
        else {
          uint64_t v64 = a2;
        }
        if (v62 <= a2) {
          uint64_t v65 = a2;
        }
        else {
          uint64_t v65 = v62;
        }
        if (v62 <= v7) {
          uint64_t v66 = v65;
        }
        else {
          uint64_t v66 = v7;
        }
        if (v64 == v66) {
          goto LABEL_349;
        }
        if (v64 != v31 || v66 != v62)
        {
          v186 = 0uLL;
          uint64_t result = specialized AttributedString._AttributeStorage.matchStyle(of:for:)(a4, (uint64_t *)&v186);
          if ((result & 1) != 0)
          {
            if (__OFSUB__(v66, v64)) {
              goto LABEL_368;
            }
            uint64_t v9 = *((void *)&v189 + 1);
            uint64_t v4 = v189;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v64, v66, v66 - v64, v4, v9);
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v83 = v180[8];
            if (v83) {
              v84 = v180[10];
            }
            else {
              v84 = 0LL;
            }
            if (v31 < 0 || v84 < v31) {
              goto LABEL_370;
            }
            v85 = v180[9];
            v181 = v180[11];
            if (v83 && *(_WORD *)(v83 + 16) && v31 < v180[10])
            {
              v86 = *(unsigned __int8 *)(v83 + 18);
              if (*(_BYTE *)(v83 + 18))
              {
                uint64_t result = swift_unknownObjectRetain_n();
                uint64_t v15 = v31;
                uint64_t v5 = (uint64_t *)v83;
                while (1)
                {
                  uint64_t v27 = *((unsigned __int16 *)v5 + 8);
                  if (!*((_WORD *)v5 + 8)) {
                    goto LABEL_150;
                  }
                  uint64_t v88 = v5[5];
                  uint64_t v20 = __OFSUB__(v15, v88);
                  uint64_t v29 = v15 - v88;
                  if (v20) {
                    goto LABEL_358;
                  }
                  if (__OFADD__(v29, 1LL)) {
                    goto LABEL_359;
                  }
                  if (v29 + 1 <= 0)
                  {
                    uint64_t v27 = 0LL;
                  }

                  else
                  {
                    if ((_DWORD)v27 == 1)
                    {
                      uint64_t v15 = v29;
LABEL_150:
                      if (v15) {
                        goto LABEL_355;
                      }
                      goto LABEL_151;
                    }

                    uint64_t v89 = v5 + 8;
                    uint64_t v90 = 1LL;
                    while (1)
                    {
                      uint64_t v91 = *v89;
                      v89 += 3;
                      uint64_t v15 = v29 - v91;
                      if (__OFSUB__(v29, v91)) {
                        goto LABEL_336;
                      }
                      if (__OFADD__(v15, 1LL)) {
                        goto LABEL_337;
                      }
                      if (v15 + 1 < 1) {
                        break;
                      }
                      ++v90;
                      uint64_t v29 = v15;
                      if (v27 == v90) {
                        goto LABEL_150;
                      }
                    }

                    uint64_t v27 = v90;
                    uint64_t v15 = v29;
                  }

          __int128 v96 = (v55 - 1) & v55;
          uint64_t v98 = v56;
          uint64_t v39 = __clz(__rbit64(v55)) + (v56 << 6);
        }

        uint64_t v40 = 16 * v39;
        uint64_t v41 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v39);
        uint64_t v42 = *v41;
        char v43 = v41[1];
        uint64_t v44 = 80 * v39;
        uint64_t v45 = *(void *)(v9 + 56) + v44;
        uint64_t v46 = *(void *)v45;
        uint64_t v47 = *(void *)(v45 + 72);
        uint64_t v48 = (void *)(*(void *)(v17 + 48) + v40);
        uint64_t v49 = *(_OWORD *)(v45 + 8);
        uint64_t v50 = *(_OWORD *)(v45 + 24);
        char v51 = *(_OWORD *)(v45 + 40);
        uint64_t v52 = *(_OWORD *)(v45 + 56);
        unsigned __int8 *v48 = v42;
        v48[1] = v43;
        uint64_t v53 = *(void *)(v17 + 56) + v44;
        *(void *)uint64_t v53 = v46;
        *(_OWORD *)(v53 + _Block_object_dispose((const void *)(v1 - 96), 8) = v49;
        *(_OWORD *)(v53 + 24) = v50;
        *(_OWORD *)(v53 + 40) = v51;
        *(_OWORD *)(v53 + 56) = v52;
        *(void *)(v53 + 72) = v47;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t result = (char *)swift_bridgeObjectRetain();
        uint64_t v38 = v96;
        uint64_t v35 = v98;
      }
    }

    uint64_t v38 = (v46 - 1) & v46;
    uint64_t v44 = __clz(__rbit64(v46)) + (v47 << 6);
    uint64_t v40 = v47;
LABEL_48:
    uint64_t v49 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v44);
    char v51 = *v49;
    uint64_t v50 = v49[1];
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v44, (uint64_t)v76);
    *(void *)&double v75 = v51;
    *((void *)&v75 + 1) = v50;
    v73[2] = v75;
    v74[0] = v76[0];
    v74[1] = v76[1];
    *(void *)&v73[0] = v51;
    *((void *)&v73[0] + 1) = v50;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v74, v68);
    uint64_t v69 = v65;
    uint64_t v70 = v66;
    uint64_t v71 = v67;
    outlined init with take of Any(v68, v72);
    uint64_t v65 = v69;
    uint64_t v66 = v70;
    uint64_t v67 = v71;
    outlined init with take of Any(v72, v73);
    outlined init with take of Any(v73, &v69);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v35 + 40));
    uint64_t v52 = -1LL << *(_BYTE *)(v35 + 32);
    uint64_t v53 = result & ~v52;
    os_unfair_lock_t v54 = v53 >> 6;
    if (((-1LL << v53) & ~*(void *)(v39 + 8 * (v53 >> 6))) != 0)
    {
      uint64_t v41 = __clz(__rbit64((-1LL << v53) & ~*(void *)(v39 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v55 = 0;
      uint64_t v56 = (unint64_t)(63 - v52) >> 6;
      do
      {
        if (++v54 == v56 && (v55 & 1) != 0)
        {
          __break(1u);
          goto LABEL_67;
        }

        char v57 = v54 == v56;
        if (v54 == v56) {
          os_unfair_lock_t v54 = 0LL;
        }
        v55 |= v57;
        uint64_t v58 = *(void *)(v39 + 8 * v54);
      }

      while (v58 == -1);
      uint64_t v41 = __clz(__rbit64(~v58)) + (v54 << 6);
    }

    *(void *)(v39 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v41;
    uint64_t v42 = *(void *)(v35 + 48) + 40 * v41;
    *(_OWORD *)uint64_t v42 = v65;
    *(_OWORD *)(v42 + 16) = v66;
    *(void *)(v42 + 32) = v67;
    uint64_t result = (uint64_t)outlined init with take of Any(&v69, (_OWORD *)(*(void *)(v35 + 56) + 32 * v41));
    ++*(void *)(v35 + 16);
  }

  uint64_t v48 = v40 + 5;
  if (v40 + 5 < v64)
  {
    uint64_t v46 = *(void *)(v63 + 8 * v48);
    if (!v46)
    {
      while (1)
      {
        uint64_t v47 = v48 + 1;
        if (__OFADD__(v48, 1LL)) {
          goto LABEL_68;
        }
        if (v47 >= v64) {
          goto LABEL_57;
        }
        uint64_t v46 = *(void *)(v63 + 8 * v47);
        ++v48;
        if (v46) {
          goto LABEL_47;
        }
      }
    }

    uint64_t v47 = v40 + 5;
    goto LABEL_47;
  }

    uint64_t v39 = (v47 - 1) & v47;
    uint64_t v45 = __clz(__rbit64(v47)) + (v48 << 6);
    uint64_t v41 = v48;
LABEL_48:
    uint64_t v50 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v45);
    uint64_t v52 = *v50;
    char v51 = v50[1];
    outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v45, (uint64_t)v79);
    *(void *)&int v78 = v52;
    *((void *)&v78 + 1) = v51;
    v76[2] = v78;
    v77[0] = v79[0];
    v77[1] = v79[1];
    *(void *)&v76[0] = v52;
    *((void *)&v76[0] + 1) = v51;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v77, v71);
    uint64_t v72 = *(_OWORD *)v68;
    uint64_t v73 = v69;
    int v74 = v70;
    outlined init with take of Any(v71, v75);
    *(_OWORD *)uint64_t v68 = v72;
    uint64_t v69 = v73;
    uint64_t v70 = v74;
    outlined init with take of Any(v75, v76);
    outlined init with take of Any(v76, &v72);
    uint64_t v53 = AnyHashable._rawHashValue(seed:)(*(void *)(v36 + 40));
    os_unfair_lock_t v54 = -1LL << *(_BYTE *)(v36 + 32);
    uint64_t v55 = v53 & ~v54;
    uint64_t v56 = v55 >> 6;
    if (((-1LL << v55) & ~*(void *)(v40 + 8 * (v55 >> 6))) != 0)
    {
      uint64_t v42 = __clz(__rbit64((-1LL << v55) & ~*(void *)(v40 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v57 = 0;
      uint64_t v58 = (unint64_t)(63 - v54) >> 6;
      do
      {
        if (++v56 == v58 && (v57 & 1) != 0)
        {
          __break(1u);
          goto LABEL_66;
        }

        CFStringRef v59 = v56 == v58;
        if (v56 == v58) {
          uint64_t v56 = 0LL;
        }
        v57 |= v59;
        uint64_t v60 = *(void *)(v40 + 8 * v56);
      }

      while (v60 == -1);
      uint64_t v42 = __clz(__rbit64(~v60)) + (v56 << 6);
    }

    *(void *)(v40 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v42;
    char v43 = *(void *)(v36 + 48) + 40 * v42;
    *(_OWORD *)char v43 = *(_OWORD *)v68;
    *(_OWORD *)(v43 + 16) = v69;
    *(void *)(v43 + 32) = v70;
    outlined init with take of Any(&v72, (_OWORD *)(*(void *)(v36 + 56) + 32 * v42));
    ++*(void *)(v36 + 16);
  }

  uint64_t v49 = v41 + 5;
  if (v41 + 5 < v67)
  {
    uint64_t v47 = *(void *)(v66 + 8 * v49);
    if (!v47)
    {
      while (1)
      {
        uint64_t v48 = v49 + 1;
        if (__OFADD__(v49, 1LL)) {
          goto LABEL_67;
        }
        if (v48 >= v67) {
          goto LABEL_57;
        }
        uint64_t v47 = *(void *)(v66 + 8 * v48);
        ++v49;
        if (v47) {
          goto LABEL_47;
        }
      }
    }

    uint64_t v48 = v41 + 5;
    goto LABEL_47;
  }

    uint64_t v38 = (v46 - 1) & v46;
    uint64_t v44 = __clz(__rbit64(v46)) + (v47 << 6);
    uint64_t v40 = v47;
LABEL_48:
    uint64_t v49 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v44);
    char v51 = *v49;
    uint64_t v50 = v49[1];
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v44, (uint64_t)v76);
    *(void *)&double v75 = v51;
    *((void *)&v75 + 1) = v50;
    v73[2] = v75;
    v74[0] = v76[0];
    v74[1] = v76[1];
    *(void *)&v73[0] = v51;
    *((void *)&v73[0] + 1) = v50;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v74, v68);
    uint64_t v69 = v65;
    uint64_t v70 = v66;
    uint64_t v71 = v67;
    outlined init with take of Any(v68, v72);
    uint64_t v65 = v69;
    uint64_t v66 = v70;
    uint64_t v67 = v71;
    outlined init with take of Any(v72, v73);
    outlined init with take of Any(v73, &v69);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v35 + 40));
    uint64_t v52 = -1LL << *(_BYTE *)(v35 + 32);
    uint64_t v53 = result & ~v52;
    os_unfair_lock_t v54 = v53 >> 6;
    if (((-1LL << v53) & ~*(void *)(v39 + 8 * (v53 >> 6))) != 0)
    {
      uint64_t v41 = __clz(__rbit64((-1LL << v53) & ~*(void *)(v39 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v55 = 0;
      uint64_t v56 = (unint64_t)(63 - v52) >> 6;
      do
      {
        if (++v54 == v56 && (v55 & 1) != 0)
        {
          __break(1u);
          goto LABEL_67;
        }

        char v57 = v54 == v56;
        if (v54 == v56) {
          os_unfair_lock_t v54 = 0LL;
        }
        v55 |= v57;
        uint64_t v58 = *(void *)(v39 + 8 * v54);
      }

      while (v58 == -1);
      uint64_t v41 = __clz(__rbit64(~v58)) + (v54 << 6);
    }

    *(void *)(v39 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v41;
    uint64_t v42 = *(void *)(v35 + 48) + 40 * v41;
    *(_OWORD *)uint64_t v42 = v65;
    *(_OWORD *)(v42 + 16) = v66;
    *(void *)(v42 + 32) = v67;
    uint64_t result = (uint64_t)outlined init with take of Any(&v69, (_OWORD *)(*(void *)(v35 + 56) + 32 * v41));
    ++*(void *)(v35 + 16);
  }

  uint64_t v48 = v40 + 5;
  if (v40 + 5 < v64)
  {
    uint64_t v46 = *(void *)(v63 + 8 * v48);
    if (!v46)
    {
      while (1)
      {
        uint64_t v47 = v48 + 1;
        if (__OFADD__(v48, 1LL)) {
          goto LABEL_68;
        }
        if (v47 >= v64) {
          goto LABEL_57;
        }
        uint64_t v46 = *(void *)(v63 + 8 * v47);
        ++v48;
        if (v46) {
          goto LABEL_47;
        }
      }
    }

    uint64_t v47 = v40 + 5;
    goto LABEL_47;
  }

    uint64_t v39 = (v46 - 1) & v46;
    uint64_t v44 = __clz(__rbit64(v46)) + (v47 << 6);
    uint64_t v20 = v47;
    goto LABEL_48;
  }

    uint64_t v39 = (v47 - 1) & v47;
    uint64_t v45 = __clz(__rbit64(v47)) + (v48 << 6);
    uint64_t v41 = v48;
LABEL_48:
    uint64_t v50 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v45);
    uint64_t v52 = *v50;
    char v51 = v50[1];
    outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v45, (uint64_t)v78);
    *(void *)&uint64_t v77 = v52;
    *((void *)&v77 + 1) = v51;
    v75[2] = v77;
    v76[0] = v78[0];
    v76[1] = v78[1];
    *(void *)&v75[0] = v52;
    *((void *)&v75[0] + 1) = v51;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v76, v70);
    uint64_t v71 = v67;
    uint64_t v72 = v68;
    uint64_t v73 = v69;
    outlined init with take of Any(v70, v74);
    uint64_t v67 = v71;
    uint64_t v68 = v72;
    uint64_t v69 = v73;
    outlined init with take of Any(v74, v75);
    outlined init with take of Any(v75, &v71);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v36 + 40));
    uint64_t v53 = -1LL << *(_BYTE *)(v36 + 32);
    os_unfair_lock_t v54 = result & ~v53;
    uint64_t v55 = v54 >> 6;
    if (((-1LL << v54) & ~*(void *)(v40 + 8 * (v54 >> 6))) != 0)
    {
      uint64_t v42 = __clz(__rbit64((-1LL << v54) & ~*(void *)(v40 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v56 = 0;
      char v57 = (unint64_t)(63 - v53) >> 6;
      do
      {
        if (++v55 == v57 && (v56 & 1) != 0)
        {
          __break(1u);
          goto LABEL_66;
        }

        uint64_t v58 = v55 == v57;
        if (v55 == v57) {
          uint64_t v55 = 0LL;
        }
        v56 |= v58;
        CFStringRef v59 = *(void *)(v40 + 8 * v55);
      }

      while (v59 == -1);
      uint64_t v42 = __clz(__rbit64(~v59)) + (v55 << 6);
    }

    *(void *)(v40 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v42;
    char v43 = *(void *)(v36 + 48) + 40 * v42;
    *(_OWORD *)char v43 = v67;
    *(_OWORD *)(v43 + 16) = v68;
    *(void *)(v43 + 32) = v69;
    uint64_t result = (uint64_t)outlined init with take of Any(&v71, (_OWORD *)(*(void *)(v36 + 56) + 32 * v42));
    ++*(void *)(v36 + 16);
  }

  uint64_t v49 = v41 + 5;
  if (v41 + 5 < v66)
  {
    uint64_t v47 = *(void *)(v65 + 8 * v49);
    if (!v47)
    {
      while (1)
      {
        uint64_t v48 = v49 + 1;
        if (__OFADD__(v49, 1LL)) {
          goto LABEL_67;
        }
        if (v48 >= v66) {
          goto LABEL_57;
        }
        uint64_t v47 = *(void *)(v65 + 8 * v48);
        ++v49;
        if (v47) {
          goto LABEL_47;
        }
      }
    }

    uint64_t v48 = v41 + 5;
    goto LABEL_47;
  }

        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
        uint64_t v68 = v27[2];
        if (v68) {
          goto LABEL_41;
        }
LABEL_48:
        __break(1u);
        return;
      }

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v15 = v18 & 0xFFFFFFFFFFFFF0FFLL | (v28 << 8);
        uint64_t v11 = v57;
        uint64_t v8 = v58;
        goto LABEL_48;
      }

      uint64_t v9 = v56;
LABEL_46:
      if (v16)
      {
LABEL_128:
        __break(1u);
        goto LABEL_129;
      }

      goto LABEL_47;
    }
  }

  uint64_t v14 = swift_unknownObjectRetain_n();
  uint64_t v15 = specialized Rope._endPath.getter(v14);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v16 = 0LL;
  if (!v6) {
    goto LABEL_49;
  }
  CFStringRef v59 = v12;
  uint64_t v17 = 0LL;
LABEL_48:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v60, v15, v17, v6, v59);
  uint64_t result = swift_unknownObjectRelease_n();
LABEL_49:
  uint64_t v34 = v8 - v16;
  if (!__OFSUB__(v8, v16))
  {
    uint64_t v6 = a2[8];
    uint64_t v35 = a2[10];
    if (v8 != v9)
    {
      char v43 = swift_unknownObjectRetain();
      uint64_t result = specialized Rope._endPath.getter(v43);
      if (v6) {
        uint64_t result = swift_unknownObjectRelease();
      }
      else {
        uint64_t v35 = 0LL;
      }
      goto LABEL_102;
    }

    CFStringRef v59 = a2[9];
    uint64_t v60 = a2[11];
    if (v6)
    {
      if (v35 < v8)
      {
LABEL_127:
        __break(1u);
        goto LABEL_128;
      }

      if (*(_WORD *)(v6 + 16) && v35 > v8)
      {
        uint64_t v55 = v34;
        char v57 = v11;
        uint64_t v58 = v8;
        uint64_t v8 = *(unsigned __int8 *)(v6 + 18);
        if (*(_BYTE *)(v6 + 18))
        {
          uint64_t v56 = v9;
          uint64_t result = swift_unknownObjectRetain_n();
          uint64_t v15 = v58;
          uint64_t v34 = v6;
          while (1)
          {
            char v37 = *(unsigned __int16 *)(v34 + 16);
            if (!*(_WORD *)(v34 + 16)) {
              goto LABEL_58;
            }
            uint64_t v38 = *(void *)(v34 + 40);
            char v23 = __OFSUB__(v15, v38);
            uint64_t v39 = v15 - v38;
            if (v23) {
              goto LABEL_116;
            }
            if (__OFADD__(v39, 1LL)) {
              goto LABEL_117;
            }
            char v37 = 0LL;
LABEL_59:
            uint64_t v36 = (4 * *(_BYTE *)(v34 + 18) + 8) & 0x3C;
            uint64_t v8 = ((-15LL << v36) - 1) & v8 | (v37 << v36);
            uint64_t v34 = *(void *)(v34 + 24 + 24 * v37);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            if (!*(_BYTE *)(v34 + 18)) {
              goto LABEL_79;
            }
          }

          if ((_DWORD)v37 != 1)
          {
            uint64_t v40 = (uint64_t *)(v34 + 64);
            uint64_t v41 = 1LL;
            while (1)
            {
              uint64_t v42 = *v40;
              v40 += 3;
              uint64_t v15 = v39 - v42;
              if (__OFSUB__(v39, v42)) {
                break;
              }
              if (__OFADD__(v15, 1LL)) {
                goto LABEL_111;
              }
              if ((uint64_t)(v15 + 1) < 1)
              {
                char v37 = v41;
                uint64_t v15 = v39;
                goto LABEL_59;
              }

              ++v41;
              uint64_t v39 = v15;
              if (v37 == v41) {
                goto LABEL_58;
              }
            }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v32 = v20 & 0xFFFFFFFFFFFFF0FFLL | (v35 << 8);
      uint64_t v18 = (uint64_t)v134;
      goto LABEL_31;
    }

    char v33 = v24;
    uint64_t v14 = v110;
    uint64_t v13 = v129;
LABEL_46:
    if (v21)
    {
LABEL_146:
      __break(1u);
      return result;
    }

    goto LABEL_47;
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v166);
  uint64_t v32 = specialized Rope._endPath.getter(v15);
  uint64_t result = (unint64_t *)swift_unknownObjectRelease();
  char v33 = 0LL;
  uint64_t v21 = 0LL;
  if (v15)
  {
LABEL_31:
    swift_unknownObjectRetain();
    uint64_t v34 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v132, v32, v33, v15, v135);
    uint64_t result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_49;
  }

  uint64_t v34 = 0LL;
LABEL_49:
  v124 = v18 - v21;
  if (__OFSUB__(v18, v21))
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }

  if (v132 != *(void *)(v14 + 88))
  {
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }

  uint64_t v41 = v33;
  v128 = v32;
  if (v33)
  {
    uint64_t v42 = v33 + 24 * ((v32 >> ((4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v44 = *(void *)(v42 + 32);
    char v43 = *(void *)(v42 + 40);
    swift_bridgeObjectRetain();
    uint64_t result = (unint64_t *)swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v45 = *(void *)(v14 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v32, v45);
    uint64_t v44 = v46;
    char v43 = v47;
    uint64_t result = (unint64_t *)swift_unknownObjectRelease();
  }

  if (*((uint64_t *)&v166[0] + 1) < v34)
  {
    v133 = (__int128 *)&v143;
    v134 = &v153;
    v106 = v43;
    v107 = (uint64_t *)(v125 + 40);
    v110 = v14;
    v123 = v44;
    uint64_t v104 = *((void *)&v166[0] + 1);
LABEL_56:
    v122 = v34;
    uint64_t v48 = *(void *)(v14 + 64);
    uint64_t v49 = *(void *)(v14 + 88);
    *(void *)&v150 = v132;
    uint64_t v50 = v128;
    *((void *)&v150 + 1) = v128;
    *(void *)&v151 = v41;
    if (v132 != v49)
    {
LABEL_138:
      __break(1u);
      goto LABEL_139;
    }

    if (v48)
    {
      char v51 = *(unsigned __int8 *)(v48 + 18);
      uint64_t result = (unint64_t *)swift_unknownObjectRetain();
      uint64_t v50 = v128;
      if (v128 <= v51) {
        goto LABEL_139;
      }
    }

    else if (!v128)
    {
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }

    if (v41)
    {
      uint64_t v52 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
      if (((v50 >> v52) & 0xF) != 0)
      {
        uint64_t v53 = ((((v50 >> v52) & 0xF) - 1) << v52) | ((-15LL << v52) - 1) & v50;
        *((void *)&v150 + 1) = v53;
LABEL_68:
        uint64_t v58 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
        v128 = v53;
        v108 = v41;
        CFStringRef v59 = *(void *)(v41 + 24 * ((v53 >> v58) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v60 = 0;
LABEL_72:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
        if (__OFSUB__(v124, v59))
        {
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }

        if (v132 != *(void *)(v14 + 88))
        {
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }

        v105 = v124 - v59;
        if ((v60 & 1) != 0)
        {
          uint64_t v61 = *(void *)(v14 + 64);
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v128, v61);
          v109 = v62;
          uint64_t v64 = v63;
          swift_unknownObjectRelease();
        }

        else
        {
          uint64_t v65 = v108 + 24 * ((v128 >> ((4 * *(_BYTE *)(v108 + 18) + 8) & 0x3C)) & 0xF);
          uint64_t v64 = *(void *)(v65 + 32);
          uint64_t v66 = *(void *)(v65 + 40);
          swift_bridgeObjectRetain();
          v109 = v66;
          swift_bridgeObjectRetain();
        }

        --v122;
        uint64_t result = (unint64_t *)swift_bridgeObjectRetain();
        uint64_t v67 = 0LL;
        uint64_t v68 = v107;
        v135 = v64;
        while (1)
        {
          uint64_t v70 = v67 + 1;
          if (__OFADD__(v67, 1LL)) {
            goto LABEL_125;
          }
          uint64_t v71 = *(v68 - 1);
          uint64_t v72 = *v68;
          if (*(void *)(v44 + 16))
          {
            swift_bridgeObjectRetain_n();
            uint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(v71, v72);
            if ((v74 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue( *(void *)(v44 + 56) + 72 * v73,  (uint64_t)&v160);
            }

            else
            {
              v164 = 0LL;
              v162 = 0u;
              v163 = 0u;
              v160 = 0u;
              v161 = 0u;
            }

            swift_bridgeObjectRelease();
            uint64_t v64 = v135;
            if (!*(void *)(v135 + 16))
            {
LABEL_87:
              v159 = 0LL;
              v157 = 0u;
              v158 = 0u;
              v155 = 0u;
              v156 = 0u;
              goto LABEL_94;
            }
          }

          else
          {
            v164 = 0LL;
            v162 = 0u;
            v163 = 0u;
            v160 = 0u;
            v161 = 0u;
            swift_bridgeObjectRetain();
            if (!*(void *)(v64 + 16)) {
              goto LABEL_87;
            }
          }

          swift_bridgeObjectRetain();
          double v75 = specialized __RawDictionaryStorage.find<A>(_:)(v71, v72);
          if ((v76 & 1) != 0)
          {
            outlined init with copy of AttributedString._AttributeValue( *(void *)(v64 + 56) + 72 * v75,  (uint64_t)&v155);
          }

          else
          {
            v159 = 0LL;
            v157 = 0u;
            v158 = 0u;
            v155 = 0u;
            v156 = 0u;
          }

          swift_bridgeObjectRelease();
LABEL_94:
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v160,  (uint64_t)&v150,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v155,  (uint64_t)v134,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!*((void *)&v151 + 1))
          {
            if (v154) {
              goto LABEL_111;
            }
            outlined destroy of Any?( (uint64_t)&v150,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v155,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = (unint64_t *)outlined destroy of Any?( (uint64_t)&v160,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            goto LABEL_81;
          }

          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v150,  (uint64_t)v149,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v154)
          {
            outlined destroy of AttributedString._AttributeValue((uint64_t)v149);
LABEL_111:
            outlined destroy of Any?( (uint64_t)&v150,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?( (uint64_t)&v155,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v160,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_112:
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v165);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v14 = v110;
            goto LABEL_113;
          }

          uint64_t v77 = *((_OWORD *)v134 + 3);
          v147[2] = *((_OWORD *)v134 + 2);
          v147[3] = v77;
          v148 = v134[8];
          int v78 = *((_OWORD *)v134 + 1);
          v147[0] = *(_OWORD *)v134;
          v147[1] = v78;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v149,  (uint64_t)v146);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v147,  (uint64_t)v145);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)v146,  (uint64_t)&v141,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)v145,  (uint64_t)v133,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (v142)
          {
            if (!v144)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v141);
LABEL_79:
              uint64_t v69 = 0;
              goto LABEL_80;
            }

            outlined init with take of any PredicateExpression<Self.Output == B1>(&v141, (uint64_t)v138);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v133, (uint64_t)v137);
            unint64_t v79 = v139;
            v127 = v140;
            v126 = __swift_project_boxed_opaque_existential_1(v138, v139);
            v131 = &v104;
            v80 = *(void *)(v79 - 8);
            MEMORY[0x1895F8858](v126);
            uint64_t v82 = (char *)&v104 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0LL);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v137,  (uint64_t)&v136);
            uint64_t v83 = type metadata accessor for Optional();
            v130 = &v104;
            v84 = *(void *)(v83 - 8);
            MEMORY[0x1895F8858](v83);
            v86 = (char *)&v104 - v85;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            unint64_t v87 = swift_dynamicCast();
            uint64_t v88 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56);
            if (v87)
            {
              v88(v86, 0LL, 1LL, v79);
              (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v82, v86, v79);
              uint64_t v69 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v79);
            }

            else
            {
              v88(v86, 1LL, 1LL, v79);
              (*(void (**)(char *, uint64_t))(v84 + 8))(v86, v83);
              uint64_t v69 = 0;
            }

            uint64_t v44 = v123;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
            uint64_t v13 = v129;
          }

          else
          {
            if (v144)
            {
              outlined destroy of Any?( (uint64_t)v133,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
              goto LABEL_79;
            }

            uint64_t v69 = 1;
          }

        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v3[2] + 1LL,  1,  v3);
        goto LABEL_37;
      }
    }

    else
    {
      uint64_t v61 = v20;
      unint64_t v62 = v19;
      uint64_t v63 = v19 ^ v20;
      uint64_t v3 = (void *)MEMORY[0x18961AFE8];
      uint64_t v60 = v17 >> 14;
      unint64_t v25 = v17 >> 14;
      uint64_t v64 = v11 >> 14;
      while (1)
      {
        if (v23 < v25) {
          goto LABEL_44;
        }
        swift_bridgeObjectRetain();
        uint64_t v11 = a2;
        uint64_t v26 = v24;
        uint64_t v27 = Substring.subscript.getter();
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        char v33 = v32;
        swift_bridgeObjectRelease();
        if ((v27 ^ v29) < 0x4000 || v63 < 0x4000)
        {
          if ((v27 ^ v29) < 0x4000)
          {
            uint64_t v41 = v25;
          }

          else
          {
            uint64_t v3 = (void *)MEMORY[0x18961AFE8];
            uint64_t v41 = v60;
          }

          a2 = v11;
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }

        if ((v66 & 1) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v34 = v67;
          swift_bridgeObjectRetain();
          a2 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v62,  v61,  v65,  v34,  0,  0,  0,  0,  0,  v27,  v29,  v31,  v33);
          uint64_t v36 = v35;
          uint64_t v38 = v37;
          swift_bridgeObjectRelease_n();
        }

        else
        {
          a2 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v62,  v61,  v65,  v67,  0,  0,  0,  0,  0,  v27,  v29,  v31,  v33);
          uint64_t v36 = v39;
          uint64_t v38 = v40;
        }

        swift_bridgeObjectRelease();
        if ((v38 & 1) != 0)
        {
          uint64_t v41 = v25;
          a2 = v11;
LABEL_34:
          char v23 = v64;
LABEL_35:
          if (v23 < v41) {
            goto LABEL_43;
          }
          goto LABEL_36;
        }

        uint64_t v41 = v36 >> 14;
        if (a2 >> 14 == v36 >> 14) {
          break;
        }
        if (a2 >> 14 < v25) {
          goto LABEL_45;
        }
        uint64_t v42 = Substring.subscript.getter();
        char v43 = MEMORY[0x186E1B610](v42);
        uint64_t v45 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v3[2] + 1LL,  1,  v3);
        }
        uint64_t v47 = v3[2];
        uint64_t v46 = v3[3];
        if (v47 >= v46 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v46 > 1),  v47 + 1,  1,  v3);
        }
        v3[2] = v47 + 1;
        uint64_t v48 = &v3[2 * v47];
        v48[4] = v43;
        v48[5] = v45;
        swift_bridgeObjectRelease();
        unint64_t v25 = v36 >> 14;
        char v23 = v64;
        a2 = v11;
        uint64_t v24 = v26;
        if (v41 >= v64) {
          goto LABEL_35;
        }
      }

      a2 = v11;
      if (v64 >= v25) {
        goto LABEL_36;
      }
    }

            [a4 appendByte:v12];
            goto LABEL_48;
          }

          if (v10 + 1 == a3) {
            goto LABEL_55;
          }
        }
      }

      else
      {
        uint64_t v16 = (v12 - 32) >= 0x5Eu || (_DWORD)v12 == 92;
        if (!v16 || (v12 <= 0xD ? (uint64_t v17 = ((1 << v12) & 0x2600) == 0) : (uint64_t v17 = 1), !v17))
        {
LABEL_46:
          uint64_t v11 = 0;
          uint64_t v13 = v10 + 1;
          ++*(void *)(a1 + 104);
          goto LABEL_47;
        }
      }

      [a4 appendPlaceholder];
      char v23 = *(void *)(a1 + 64) + 1LL;
      *(void *)(a1 + 64) = v23;
      if (v23 > v9) {
        goto LABEL_58;
      }
      uint64_t v13 = v10 + 1;
LABEL_48:
      uint64_t v10 = v13;
      if (v13 >= a3) {
        goto LABEL_58;
      }
    }

    uint64_t v11 = 1;
    *(_BYTE *)(a1 + 160) = 1;
LABEL_34:
    uint64_t v12 = 43LL;
    goto LABEL_47;
  }

  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

      uint64_t v26 = v10 == 12;
      return NSOrthographyFlagsForScriptAndOrthographyIndexes(v10, v23, v24, v25, v26, v22);
    }

    __break(1u);
    return;
  }

  char v33 = 0LL;
LABEL_23:
  *(void *)(a1 + 16) = (unsigned __int16)v9;
  *(void *)(a1 + 24) = v10 | ((unint64_t)(HIWORD(v10) + 1) << 48);
  if (*(uint64_t (***)())(a1 + 32) != &CFBasicHashNullCallbacks)
  {
    uint64_t v22 = v40 ? v40 : ptr;
    if (v6 && v6 != 63)
    {
      *((void *)&v23 + 1) = v5;
      *(void *)&char v23 = v4;
      uint64_t v24 = (v23 >> 32) & 0xFFFFFF0000000000LL;
      if (v7 <= 1) {
        unint64_t v25 = 1LL;
      }
      else {
        unint64_t v25 = v7;
      }
      uint64_t v26 = ptr;
      uint64_t v27 = v38;
      uint64_t v28 = v39;
      uint64_t v29 = v40;
      do
      {
        uint64_t v31 = *v22++;
        uint64_t v30 = v31;
        if (v31 != v24 && v30 != ~v24)
        {
          (**(void (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 14LL, *v26, 0LL);
          if (v39) {
            (**(void (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 15LL, *v28, 0LL);
          }
          if (v40) {
            (**(void (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 16LL, *v29, 0LL);
          }
          if (v38) {
            (**(void (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 17LL, *v27, 0LL);
          }
        }

        ++v27;
        ++v29;
        ++v28;
        ++v26;
        --v25;
      }

      while (v25);
    }
  }

  if (v36) {
    (**(void (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 9LL, 0LL, 0LL);
  }
  CFAllocatorDeallocate(v8, ptr);
  CFAllocatorDeallocate(v8, v39);
  CFAllocatorDeallocate(v8, v40);
  CFAllocatorDeallocate(v8, v38);
  CFAllocatorDeallocate(v8, v35);
  CFAllocatorDeallocate(v8, v34);
  CFAllocatorDeallocate(v8, v33);
}

void NSObject.KVOSubscription.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(*v0 + 176LL));
  os_unfair_lock_lock(v2);
  uint64_t v3 = (void *)v0[2];
  if (v3)
  {
    uint64_t v13 = v3;
    os_unfair_lock_unlock(v2);
    uint64_t v4 = (void *)v0[2];
    v0[2] = 0LL;

    uint64_t v5 = (char *)v0 + *(void *)(*v0 + 144LL);
    uint64_t v6 = *(void *)(v1 + 96);
    uint64_t v7 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v5, v7);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
    uint64_t v8 = (char *)v0 + *(void *)(*v0 + 136LL);
    uint64_t v9 = *(void *)(v1 + 88);
    uint64_t v10 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8LL))(v8, v10);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
    uint64_t v11 = MEMORY[0x186E20F44](&v13[OBJC_IVAR____NSKeyValueObservation_helper]);
    if (v11)
    {
      uint64_t v12 = (void *)v11;
      NSKeyValueObservation.Helper.invalidate()();
    }

    swift_unknownObjectWeakAssign();
  }

  else
  {
    os_unfair_lock_unlock(v2);
  }

void protocol witness for Subscription.request(_:) in conformance NSObject.KVOSubscription<A, B, C>( uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSObject.KVOSubscription<A, B, C>()
{
  return 0x63736275534F564BLL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance NSObject.KVOSubscription<A, B, C>()
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance NSObject.KVOSubscription<A, B, C>( void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance NSObject.KVOSubscription<A, B, C>()
{
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance NSObject.KVOSubscription<A, B, C>()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

void *specialized NSObject.KVOSubscription.init(_:_:_:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = (void *)*v4;
  v4[2] = 0LL;
  uint64_t v8 = v7[11];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( (char *)v4 + v7[17],  1LL,  1LL,  v8);
  uint64_t v9 = (char *)v4 + *(void *)(*v4 + 144LL);
  uint64_t v10 = v7[12];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v9, 1LL, 1LL, v10);
  swift_unknownObjectWeakInit();
  uint64_t v13 = *(void *)(*v5 + 176LL);
  uint64_t v14 = (_DWORD *)swift_slowAlloc();
  *uint64_t v14 = 0;
  *(void *)((char *)v5 + v13) = v14;
  uint64_t v15 = *(void *)(*v5 + 184LL);
  uint64_t v16 = (void *)swift_slowAlloc();
  void *v16 = 0LL;
  *(void *)((char *)v5 + v15) = v16;
  v5[3] = 0LL;
  *((_BYTE *)v5 + 32) = 0;
  swift_unknownObjectWeakAssign();
  uint64_t v17 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8LL))(v9, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a4, v10);
  v12(v9, 0LL, 1LL, v10);
  *(void *)((char *)v5 + *(void *)(*v5 + 160LL)) = a3;
  *(void *)((char *)v5 + *(void *)(*v5 + 168LL)) = a2;
  uint64_t v18 = swift_allocObject();
  swift_weakInit();
  uint64_t v19 = (void *)swift_allocObject();
  uint64_t v20 = v7[10];
  v19[2] = v20;
  v19[3] = v8;
  v19[4] = v10;
  v19[5] = v7[13];
  v19[6] = v18;
  char v37 = a1;
  type metadata accessor for NSObject();
  swift_retain();
  id v21 = a1;
  swift_dynamicCast();
  uint64_t v22 = v36;
  char v23 = (void *)swift_allocObject();
  v23[2] = v20;
  v23[3] = v8;
  v23[4] = &protocol witness table for NSObject;
  v23[5] = partial apply for closure #1 in NSObject.KVOSubscription.init(_:_:_:_:);
  v23[6] = v19;
  uint64_t v24 = (objc_class *)type metadata accessor for NSKeyValueObservation();
  id v25 = objc_allocWithZone(v24);
  swift_unknownObjectWeakInit();
  v35.receiver = v25;
  v35.super_class = v24;
  id v26 = objc_msgSendSuper2(&v35, sel_init);
  uint64_t v27 = (void *)MEMORY[0x186E1F27C]();
  objc_allocWithZone((Class)type metadata accessor for NSKeyValueObservation.Helper());
  swift_retain();
  id v28 = v22;
  swift_retain();
  id v29 = NSKeyValueObservation.Helper.init(object:keyPath:options:callback:)( v28,  a2,  a3,  (uint64_t)partial apply for closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:),  (uint64_t)v23);
  swift_unknownObjectWeakAssign();

  objc_autoreleasePoolPop(v27);
  swift_release();
  swift_release();

  uint64_t v30 = (void *)v5[2];
  v5[2] = v26;

  return v5;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in NSObject.KeyValueObservingPublisher<A, B>()
{
  return MEMORY[0x18961A528];
}

uint64_t type metadata instantiation function for NSObject.KeyValueObservingPublisher()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for NSObject.KeyValueObservingPublisher(id *a1)
{
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for NSObject.KeyValueObservingPublisher(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NSObject.KeyValueObservingPublisher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for NSObject.KeyValueObservingPublisher(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSObject.KeyValueObservingPublisher(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSObject.KeyValueObservingPublisher(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for NSObject.KeyValueObservingPublisher( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for NSObject.KeyValueObservingPublisher);
}

uint64_t type metadata completion function for NSObject.KVOSubscription()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }

  return result;
}

void base witness table accessor for Cancellable in NSObject.KVOSubscription<A, B, C>()
{
}

void base witness table accessor for CustomCombineIdentifierConvertible in NSObject.KVOSubscription<A, B, C>()
{
}

uint64_t sub_182EE3BD0()
{
  return swift_deallocObject();
}

uint64_t sub_182EE3BF4()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }

  return result;
}

uint64_t default argument 1 of _typeName(_:qualified:)()
{
  return 1LL;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation20PredicateExpressionsO10VariableIDVG_SSs5NeverOTg50118_s10Foundation17createDescription33_0E6808C72783E37C9BBD8DD29A9ABF15LL8variable10expression8typeName10outputTypeSSAA20ef2O8G70Vy_xGxQp_q0_SSq_mtRvzAA08StandardR10ExpressionR0_r1_lFSSAI0T2IDVXEfU0_AF26DebugStringConversionStateVTf1cn_n( uint64_t a1, uint64_t *a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x18961AFE8];
  if (v2)
  {
    uint64_t v20 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v20;
    id v6 = (Swift::UInt *)(a1 + 32);
    do
    {
      Swift::UInt v8 = *v6++;
      Swift::UInt v7 = v8;
      uint64_t v9 = *a2;
      if (*(void *)(*a2 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
      {
        uint64_t v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
        uint64_t v13 = *v12;
        unint64_t v14 = v12[1];
        swift_bridgeObjectRetain();
      }

      else
      {
        _StringGuts.grow(_:)(17LL);
        swift_bridgeObjectRelease();
        v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v15);
        swift_bridgeObjectRelease();
        uint64_t v13 = 0x566E776F6E6B6E75LL;
        unint64_t v14 = 0xEF656C6261697261LL;
      }

      unint64_t v17 = *(void *)(v20 + 16);
      unint64_t v16 = *(void *)(v20 + 24);
      if (v17 >= v16 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      }
      *(void *)(v20 + 16) = v17 + 1;
      uint64_t v18 = v20 + 16 * v17;
      *(void *)(v18 + 32) = v13;
      *(void *)(v18 + 40) = v14;
      --v2;
    }

    while (v2);
  }

  return v3;
}

uint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

unint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)( void *a1, unint64_t a2, uint64_t a3)
{
  if (!_foundation_swift_url_feature_enabled())
  {
    id v8 = objc_msgSend(a1, sel_description);
    id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    char v11 = v10;

LABEL_35:
    v52._countAndFlagsBits = (uint64_t)v9;
    v52._object = v11;
    String.append(_:)(v52);
    return swift_bridgeObjectRelease();
  }

  uint64_t v53 = a1;
  unint64_t v54 = a2;
  uint64_t v55 = a3;
  URL.scheme.getter();
  if (!v6) {
    goto LABEL_16;
  }
  Swift::String v7 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v7._countAndFlagsBits == 1635017060 && v7._object == (void *)0xE400000000000000LL)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
LABEL_16:
    swift_retain();
    id v18 = a1;
    swift_retain();
    unint64_t result = _foundation_swift_url_feature_enabled();
    if (!(_DWORD)result)
    {
      id v19 = objc_msgSend(v18, sel_relativeString);
      id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      char v11 = v20;
      swift_release();
      swift_release();

      goto LABEL_33;
    }

    if (a2)
    {
      id v9 = *(id *)(a2 + 16);
      char v11 = *(void **)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();

      goto LABEL_33;
    }

    goto LABEL_37;
  }

LABEL_40:
  __break(1u);
  return result;
}

  if (v120)
  {
    if (v120 != *(void *)(v4 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
      uint64_t v64 = static _DictionaryStorage.allocate(capacity:)();
      uint64_t v65 = 0LL;
      uint64_t v66 = *v110;
      uint64_t v67 = v64 + 64;
      while (1)
      {
        if (v66)
        {
          uint64_t v71 = __clz(__rbit64(v66));
          v66 &= v66 - 1;
          uint64_t v72 = v71 | (v65 << 6);
        }

        else
        {
          uint64_t v16 = __OFADD__(v65++, 1LL);
          if (v16) {
            goto LABEL_156;
          }
          if (v65 >= v111)
          {
LABEL_116:
            uint64_t v4 = v64;
            goto LABEL_151;
          }

          uint64_t v73 = v110[v65];
          if (!v73)
          {
            int v74 = v65 + 1;
            if (v65 + 1 >= v111) {
              goto LABEL_116;
            }
            uint64_t v73 = v110[v74];
            if (!v73)
            {
              int v74 = v65 + 2;
              if (v65 + 2 >= v111) {
                goto LABEL_116;
              }
              uint64_t v73 = v110[v74];
              if (!v73)
              {
                int v74 = v65 + 3;
                if (v65 + 3 >= v111) {
                  goto LABEL_116;
                }
                uint64_t v73 = v110[v74];
                if (!v73)
                {
                  int v74 = v65 + 4;
                  if (v65 + 4 >= v111) {
                    goto LABEL_116;
                  }
                  uint64_t v73 = v110[v74];
                  if (!v73)
                  {
                    while (1)
                    {
                      uint64_t v65 = v74 + 1;
                      if (__OFADD__(v74, 1LL)) {
                        break;
                      }
                      if (v65 >= v111) {
                        goto LABEL_116;
                      }
                      uint64_t v73 = v110[v65];
                      ++v74;
                      if (v73) {
                        goto LABEL_102;
                      }
                    }

      if (v58) {
        goto LABEL_110;
      }
LABEL_41:
      uint64_t v60 = (4 * *(_BYTE *)(v59 + 18) + 8) & 0x3C;
      char v57 = ((-15LL << v60) - 1) & v57 | (v61 << v60);
      id v9 = *(void *)(v59 + 24 + 24 * v61);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      CFStringRef v59 = v9;
      if (!*(_BYTE *)(v9 + 18)) {
        goto LABEL_69;
      }
    }
  }

  swift_unknownObjectRetain_n();
  swift_retain();
  uint64_t v58 = v101;
  id v9 = v46;
LABEL_69:
  uint64_t v69 = *(unsigned __int16 *)(v9 + 16);
  if (!*(_WORD *)(v9 + 16))
  {
    uint64_t v70 = v58;
    Swift::String v50 = v103;
    Swift::String v51 = v101;
    goto LABEL_89;
  }

  uint64_t v70 = v58 - 1;
  Swift::String v50 = v103;
  if (__OFSUB__(v58, 1LL))
  {
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }

  Swift::String v51 = v101;
  if (__OFADD__(v70, 1LL))
  {
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }

  if (v58 <= 0) {
    goto LABEL_91;
  }
  if ((_DWORD)v69 == 1)
  {
LABEL_89:
    if (!v70)
    {
LABEL_94:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      Swift::String v52 = v57 & 0xFFFFFFFFFFFFF0FFLL | (v69 << 8);
      uint64_t v48 = v56;
      uint64_t v47 = v105;
      goto LABEL_66;
    }

    __break(1u);
LABEL_91:
    uint64_t v69 = 0LL;
    goto LABEL_94;
  }

  uint64_t v65 = __OFSUB__(v70, 1LL);
  uint64_t v70 = v58 - 2;
  if (v65)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }

  if (!__OFADD__(v70, 1LL))
  {
    if (v58 - 1 < 1)
    {
      uint64_t v69 = 1LL;
      goto LABEL_94;
    }

    if ((_DWORD)v69 != 2)
    {
      uint64_t v71 = 0LL;
      uint64_t v72 = v69 - 2;
      if (v70 >= v69 - 3) {
        uint64_t v73 = v69 - 3;
      }
      else {
        uint64_t v73 = v58 - 2;
      }
      if (v73 >= v58 + 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v73 = v58 + 0x7FFFFFFFFFFFFFFELL;
      }
      while (v72 > v73)
      {
        if (v58 + 0x7FFFFFFFFFFFFFFELL == v71) {
          goto LABEL_126;
        }
        if (v70 == v71)
        {
          uint64_t v69 = v58;
          goto LABEL_94;
        }

        if (v72 == ++v71)
        {
          v70 -= v71;
          goto LABEL_89;
        }
      }

      goto LABEL_125;
    }

    goto LABEL_89;
  }

  if (v3)
  {
LABEL_41:
    id v19 = *(void *)(v9 + 16);
    if (v19 && !*(_WORD *)(v9 + 2 * v19 + 30))
    {
      do
      {
        *(void *)(v9 + 16) = v19 - 1;
        if (v19 == 1) {
          break;
        }
      }

      while (!*(unsigned __int16 *)(v9 + 28 + 2 * v19--));
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    uint64_t *v21 = 0;
    swift_willThrow();
  }

  return v9;
}

    swift_bridgeObjectRetain();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v40) {
      goto LABEL_41;
    }
    return specialized RangeReplaceableCollection<>.popLast()();
  }

  return 0LL;
}

            unint64_t v10 = 1LL;
            goto LABEL_42;
          }

  __break(1u);
  return result;
}

                Hasher._combine(_:)(0);
                goto LABEL_41;
              }
            }

            Hasher._combine(_:)(0);
            if (v55) {
              goto LABEL_37;
            }
            goto LABEL_40;
          }

            uint64_t v39 = 256LL;
          }

    uint64_t v26 = v38;
    *uint64_t v38 = v16;
    goto LABEL_41;
  }

  uint64_t v24 = v46[22];
  uint64_t v25 = v40;
  if (v40 == v46[22]) {
    goto LABEL_40;
  }
  if (v40 >= v46[22])
  {
    Swift::String v30 = v7;
    goto LABEL_52;
  }

          unint64_t v62 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C;
          CFStringRef v59 = ((-15LL << v62) - 1) & v59 | (v63 << v62);
          uint64_t v16 = *(void *)(v61 + 24 + 24 * v63);
          swift_unknownObjectRetain();
          unint64_t result = swift_unknownObjectRelease();
          uint64_t v61 = v16;
          if (!*(_BYTE *)(v16 + 18)) {
            goto LABEL_72;
          }
        }
      }

      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v158);
      unint64_t result = swift_unknownObjectRetain();
      uint64_t v60 = v27;
      uint64_t v16 = v50;
LABEL_72:
      uint64_t v73 = *(unsigned __int16 *)(v16 + 16);
      if (!*(_WORD *)(v16 + 16))
      {
        int v74 = v60;
        goto LABEL_98;
      }

      int v74 = v60 - 1;
      if (__OFSUB__(v60, 1LL)) {
        goto LABEL_139;
      }
      if (!__OFADD__(v74, 1LL))
      {
        if (v60 <= 0)
        {
          uint64_t v73 = 0LL;
          goto LABEL_104;
        }

        if ((_DWORD)v73 != 1)
        {
          uint64_t v65 = __OFSUB__(v74, 1LL);
          int v74 = v60 - 2;
          if (v65) {
            goto LABEL_144;
          }
          if (__OFADD__(v74, 1LL)) {
            goto LABEL_145;
          }
          if (v60 - 1 < 1)
          {
            uint64_t v73 = 1LL;
            goto LABEL_104;
          }

          if ((_DWORD)v73 != 2)
          {
            uint64_t v65 = __OFSUB__(v74, 1LL);
            int v74 = v60 - 3;
            if (v65) {
              goto LABEL_146;
            }
            if (__OFADD__(v74, 1LL)) {
              goto LABEL_147;
            }
            if (v60 - 2 >= 1)
            {
              if ((_DWORD)v73 != 3)
              {
                double v75 = 0LL;
                v76 = 3LL;
                if (v73 > 3) {
                  v76 = *(unsigned __int16 *)(v16 + 16);
                }
                uint64_t v77 = v76 - 3;
                if (v74 >= v73 - 4) {
                  int v78 = v73 - 4;
                }
                else {
                  int v78 = v60 - 3;
                }
                if (v78 >= v60 + 0x7FFFFFFFFFFFFFFDLL) {
                  int v78 = v60 + 0x7FFFFFFFFFFFFFFDLL;
                }
                while (v77 > v78)
                {
                  if (v60 + 0x7FFFFFFFFFFFFFFDLL == v75) {
                    goto LABEL_143;
                  }
                  if (v74 == v75)
                  {
                    uint64_t v73 = v60;
                    goto LABEL_104;
                  }

                  if (v73 - 3 == ++v75)
                  {
                    v74 -= v75;
                    goto LABEL_98;
                  }
                }

            uint64_t v38 = 256LL;
          }

    uint64_t v23 = 0;
    goto LABEL_37;
  }

  if (a1 != 45)
  {
    if (!v3)
    {
LABEL_54:
      LOBYTE(v3) = 1;
      goto LABEL_55;
    }

    id v8 = (a1 - 48);
    if (v8 > 9) {
      goto LABEL_35;
    }
    id v18 = v3 - 1;
    if (v18)
    {
      id v19 = (unsigned __int8 *)v22 + 1;
      while (1)
      {
        uint64_t v20 = *v19 - 48;
        if (v20 > 9) {
          goto LABEL_35;
        }
        id v8 = (unsigned __int16)(10 * v8) + v20;
        if ((v8 & 0x10000) != 0) {
          goto LABEL_35;
        }
        ++v19;
        if (!--v18) {
          goto LABEL_40;
        }
      }
    }

    goto LABEL_40;
  }

  if (!v3)
  {
    __break(1u);
    goto LABEL_53;
  }

  if (v3 != 1)
  {
    if ((BYTE1(a1) - 48) <= 9u)
    {
      id v8 = -(BYTE1(a1) - 48);
      if ((v8 & 0xFFFF0000) == 0)
      {
        unint64_t v10 = v3 - 2;
        if (v10)
        {
          char v11 = (unsigned __int8 *)v22 + 2;
          while (1)
          {
            char v12 = *v11 - 48;
            if (v12 > 9) {
              goto LABEL_35;
            }
            id v8 = (unsigned __int16)(10 * v8) - v12;
            if ((v8 & 0xFFFF0000) != 0) {
              goto LABEL_35;
            }
            ++v11;
            if (!--v10) {
              goto LABEL_40;
            }
          }
        }

        goto LABEL_40;
      }
    }

        unint64_t v10 = v45;
        id v13 = countAndFlagsBits;
        if (v45 >= v9) {
          goto LABEL_41;
        }
      }

      if (v5)
      {
        if (countAndFlagsBits == v17 && v11 == v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_41:
          uint64_t v48 = 1;
          if (countAndFlagsBits == 39) {
            goto LABEL_54;
          }
          goto LABEL_55;
        }

        uint64_t v44 = v10;
        Swift::String v46 = v13;
      }

      else
      {
        uint64_t v44 = v10;
        Swift::String v46 = v13;
      }

      uint64_t v20 = 1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_29:
        id v21 = v47;
        goto LABEL_30;
      }

  Hasher._combine(_:)(0);
  uint64_t v40 = 0LL;
LABEL_41:

  uint64_t v41 = v72;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v41);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::String v7 = v56;
  uint64_t v6 = v55;
  uint64_t v42 = v73;
  if (!v73)
  {
    Hasher._combine(_:)(0);
    if (v74) {
      goto LABEL_46;
    }
LABEL_48:
    Hasher._combine(_:)(0);
    goto LABEL_49;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v42);
  swift_bridgeObjectRelease();
  if (!v74) {
    goto LABEL_48;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_49:
  char v12 = v58;
  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v43 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }

  if (v76 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v44 = v76 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v44);
  }

  if (v77 == 2)
  {
    uint64_t v45 = 0;
  }

  else
  {
    uint64_t v45 = v77 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v45);
  if (v78 == 2)
  {
    Swift::String v46 = 0;
  }

  else
  {
    uint64_t v47 = v78 & 1;
    Hasher._combine(_:)(1u);
    Swift::String v46 = v47;
  }

  Hasher._combine(_:)(v46);
  outlined retain of LocalePreferences?( (uint64_t)v80,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v80,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_62:
  uint64_t v48 = swift_getObjectType();
  unint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 112);
  swift_unknownObjectRetain();
  v49(a1, v48, v59);
  swift_unknownObjectRelease();
  Swift::String v50 = swift_getObjectType();
  Swift::String v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 120);
  swift_unknownObjectRetain();
  v51(a1, v50, v12);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
}

  Hasher._combine(_:)(0);
  unint64_t v36 = 0LL;
LABEL_41:
  id v5 = v51;

  char v37 = v66;
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v76, v37);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v6 = v52;
  uint64_t v4 = v50;
  uint64_t v38 = v67;
  if (!v67)
  {
    Hasher._combine(_:)(0);
    if (v68) {
      goto LABEL_46;
    }
LABEL_48:
    Hasher._combine(_:)(0);
    goto LABEL_49;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v76, v38);
  swift_bridgeObjectRelease();
  if (!v68) {
    goto LABEL_48;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_49:
  char v11 = v53;
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v39 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }

  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v40 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }

  if (v71 == 2)
  {
    uint64_t v41 = 0;
  }

  else
  {
    uint64_t v41 = v71 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v41);
  if (v72 == 2)
  {
    uint64_t v42 = 0;
  }

  else
  {
    uint64_t v43 = v72 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v42 = v43;
  }

  Hasher._combine(_:)(v42);
  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_62:
  uint64_t v44 = swift_getObjectType();
  uint64_t v45 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 112);
  swift_unknownObjectRetain();
  v45(v76, v44, v11);
  swift_unknownObjectRelease();
  Swift::String v46 = swift_getObjectType();
  uint64_t v47 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 120);
  swift_unknownObjectRetain();
  v47(v76, v46, v4);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

    if ((a1[216] & 1) != 0) {
      return 1LL;
    }
    v106 = String.subscript.getter();
    v108 = v107;
    v110 = v109;
    v112 = v111;
    v113 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v106,  v107,  v109,  v111,  0x40u,  1);
    if (v113 == 2)
    {
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      v114 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v115 = (unsigned __int16 *)objc_msgSend(v114, sel__fastCharacterContents);
      v116 = v114;
      if (v115)
      {
        StringProtocol._ephemeralString.getter();
        v117 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v118 = objc_msgSend(v117, sel_length);
        swift_unknownObjectRelease();
        char v95 = 1LL;
        v119 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v115,  (uint64_t)v118,  0x40u,  1);
        swift_bridgeObjectRelease();
        if (v119) {
          return v95;
        }
      }

      else
      {
        swift_bridgeObjectRetain();
        char v95 = 1LL;
        v133 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v106,  v108,  v110,  v112,  0x40u,  1);
        swift_bridgeObjectRelease_n();
        if (v133) {
          return v95;
        }
      }
    }

    else
    {
      v122 = v113;
      swift_bridgeObjectRelease();
      if ((v122 & 1) != 0) {
        return 1LL;
      }
    }

    return 0LL;
  }

  Hasher._combine(_:)(0);
  uint64_t v40 = 0LL;
LABEL_41:

  uint64_t v41 = v63;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v73, v41);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v42 = v64;
  if (!v64)
  {
    Hasher._combine(_:)(0);
    if (v65) {
      goto LABEL_46;
    }
LABEL_48:
    Hasher._combine(_:)(0);
    goto LABEL_49;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v73, v42);
  swift_bridgeObjectRelease();
  if (!v65) {
    goto LABEL_48;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_49:
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v43 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }

  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v44 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v44);
  }

  if (v68 == 2)
  {
    uint64_t v45 = 0;
  }

  else
  {
    uint64_t v45 = v68 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v45);
  if (v69 == 2)
  {
    Swift::String v46 = 0;
  }

  else
  {
    uint64_t v47 = v69 & 1;
    Hasher._combine(_:)(1u);
    Swift::String v46 = v47;
  }

  Hasher._combine(_:)(v46);
  outlined retain of LocalePreferences?( (uint64_t)v71,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v71,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

  Swift::String v30 = v119;
  if (!v119) {
    return MEMORY[0x18961AFF0];
  }
  if (v119 == *(void *)(v3 + 16))
  {
    swift_retain();
    return v3;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  uint64_t v56 = static _DictionaryStorage.allocate(capacity:)();
  char v57 = 0LL;
  uint64_t v58 = *v118;
  CFStringRef v59 = v56 + 64;
LABEL_88:
  v119 = v30;
  if (v58)
  {
    uint64_t v64 = __clz(__rbit64(v58));
    v58 &= v58 - 1;
    uint64_t v65 = v57;
    uint64_t v66 = v64 | (v57 << 6);
    goto LABEL_108;
  }

  uint64_t v67 = v57 + 1;
  if (__OFADD__(v57, 1LL)) {
    goto LABEL_157;
  }
  if (v67 < v117)
  {
    uint64_t v68 = v118[v67];
    uint64_t v69 = v57 + 1;
    if (!v68)
    {
      uint64_t v69 = v57 + 2;
      if (v57 + 2 >= v117) {
        return v56;
      }
      uint64_t v68 = v118[v69];
      if (!v68)
      {
        uint64_t v69 = v57 + 3;
        if (v57 + 3 >= v117) {
          return v56;
        }
        uint64_t v68 = v118[v69];
        if (!v68)
        {
          uint64_t v69 = v57 + 4;
          if (v57 + 4 >= v117) {
            return v56;
          }
          uint64_t v68 = v118[v69];
          if (!v68)
          {
            uint64_t v69 = v57 + 5;
            if (v57 + 5 >= v117) {
              return v56;
            }
            uint64_t v68 = v118[v69];
            if (!v68)
            {
              uint64_t v70 = v57 + 6;
              if (v57 + 6 >= v117) {
                return v56;
              }
              uint64_t v68 = v118[v70];
              if (!v68)
              {
                while (1)
                {
                  uint64_t v69 = v70 + 1;
                  if (__OFADD__(v70, 1LL)) {
                    break;
                  }
                  if (v69 >= v117) {
                    return v56;
                  }
                  uint64_t v68 = v118[v69];
                  ++v70;
                  if (v68) {
                    goto LABEL_107;
                  }
                }

    __break(1u);
    goto LABEL_41;
  }

      id v19 = v12;
      if (v13 == v8)
      {
        unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v5, a2);
        id v19 = result;
      }

      if (v19 >> 16 >= v3) {
        goto LABEL_125;
      }
      if ((a2 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = String.UTF16View._foreignSubscript(position:)();
        goto LABEL_65;
      }

      if ((v19 & 1) != 0)
      {
        if ((a2 & 0x2000000000000000LL) == 0) {
          goto LABEL_46;
        }
      }

      else
      {
        _StringGuts.scalarAlignSlow(_:)(v19, v5, a2);
        if ((a2 & 0x2000000000000000LL) == 0)
        {
LABEL_46:
          if ((v5 & 0x1000000000000000LL) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          goto LABEL_60;
        }
      }

      id v31 = v5;
      unint64_t v32 = v28;
LABEL_60:
      unint64_t result = _decodeScalar(_:startingAt:)();
      if ((v19 & 0xC000) == 0x4000)
      {
        goto LABEL_100;
      }

      if (WORD1(result))
      {
        unint64_t result = (unsigned __int16)((result + 67043328) >> 10) + 55296;
        if ((result & 0x10000) != 0) {
          goto LABEL_133;
        }
      }

  swift_release();
LABEL_41:
  uint64_t v4 = __src;
  id v8 = (void *)MEMORY[0x189617FA8];
LABEL_43:

  if (!v9[2])
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }

  __src[16] = (int)ucal_getFieldDifference();
  LOBYTE(__src[17]) = 0;
  if ((a2 & 0x40) == 0)
  {
LABEL_27:
    if ((a2 & 0x2000) == 0) {
      return memcpy(a3, __src, 0x11AuLL);
    }
LABEL_42:
    ucal_getMillis();
    id v13 = floor((v9 - v12) * 1000000.0);
    if (v13 >= 2147483650.0)
    {
      id v15 = 0;
      unint64_t v14 = 0x7FFFFFFFLL;
    }

    else
    {
      if (v13 > -2147483650.0)
      {
        if ((~*(void *)&v13 & 0x7FF0000000000000LL) != 0)
        {
          if (v13 > -9.22337204e18)
          {
            if (v13 < 9.22337204e18)
            {
              unint64_t v14 = (uint64_t)v13;
              id v15 = (uint64_t)v13 == 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_52;
            }

      if (!v33) {
        goto LABEL_41;
      }
      goto LABEL_180;
    }

    unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    unint64_t v32 = 0LL;
    unint64_t v33 = a5;
    id v9 = v30;
LABEL_68:
    uint64_t v43 = *(unsigned __int16 *)(v9 + 16);
    if (!*(_WORD *)(v9 + 16))
    {
LABEL_77:
      uint64_t v45 = v33;
LABEL_78:
      if (v45) {
        goto LABEL_199;
      }
      unint64_t v33 = 0LL;
      goto LABEL_90;
    }

    uint64_t v44 = *(void *)(v9 + 24);
    id v15 = __OFSUB__(v33, v44);
    uint64_t v45 = v33 - v44;
    if (v15) {
      goto LABEL_200;
    }
    if (__OFADD__(v45, 1LL)) {
      goto LABEL_201;
    }
    if (v45 + 1 <= 0)
    {
      uint64_t v43 = 0LL;
    }

    else
    {
      if ((_DWORD)v43 == 1) {
        goto LABEL_78;
      }
      Swift::String v46 = *(void *)(v9 + 48);
      unint64_t v33 = v45 - v46;
      if (__OFSUB__(v45, v46)) {
        goto LABEL_202;
      }
      if (__OFADD__(v33, 1LL)) {
        goto LABEL_203;
      }
      if (v33 + 1 < 1)
      {
        uint64_t v43 = 1LL;
        unint64_t v33 = v45;
      }

      else
      {
        if ((_DWORD)v43 == 2) {
          goto LABEL_77;
        }
        uint64_t v47 = (void *)(v9 + 72);
        uint64_t v48 = 2LL;
        while (1)
        {
          if (v43 == v48) {
            goto LABEL_195;
          }
          uint64_t v45 = v33 - *v47;
          if (__OFSUB__(v33, *v47)) {
            goto LABEL_196;
          }
          if (__OFADD__(v45, 1LL)) {
            goto LABEL_197;
          }
          if (v45 + 1 < 1) {
            break;
          }
          ++v48;
          v47 += 3;
          unint64_t v33 = v45;
          if (v43 == v48) {
            goto LABEL_78;
          }
        }

        uint64_t v43 = v48;
      }
    }

    uint64_t v43 = (v38 - 1) & v38;
    uint64_t v44 = v39;
    Swift::String v30 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_21:
    id v31 = 16 * v30;
    unint64_t v32 = (void *)(*(void *)(v10 + 48) + 16 * v30);
    unint64_t v33 = v32[1];
    uint64_t v34 = 8 * v30;
    id v35 = *(void *)(*(void *)(v10 + 56) + v34);
    unint64_t v36 = (void *)(*(void *)(v18 + 48) + v31);
    *unint64_t v36 = *v32;
    v36[1] = v33;
    *(void *)(*(void *)(v18 + 56) + v34) = v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Swift::String v29 = v43;
    uint64_t v26 = v44;
  }

  uint64_t v40 = v26 + 6;
  if (v26 + 6 >= v42) {
    goto LABEL_41;
  }
  uint64_t v38 = *(void *)(v41 + 8 * v40);
  if (v38)
  {
    uint64_t v39 = v26 + 6;
    goto LABEL_40;
  }

  while (1)
  {
    uint64_t v39 = v40 + 1;
    if (__OFADD__(v40, 1LL)) {
      break;
    }
    if (v39 >= v42) {
      goto LABEL_41;
    }
    uint64_t v38 = *(void *)(v41 + 8 * v39);
    ++v40;
    if (v38) {
      goto LABEL_40;
    }
  }

    uint64_t v22 = i > 0x7F;
    if (i < 0x80) {
      unint64_t v33 = -(int)i;
    }
    else {
      LOBYTE(v33) = 0;
    }
    if (i <= 0x7F) {
      id v21 = i;
    }
    else {
      id v21 = 0;
    }
    if (v26)
    {
      id v21 = v33;
      uint64_t v22 = i >= 0x80;
    }
  }

  return v21 | (v22 << 8);
}

    uint64_t v22 = (i & 0xFFFFFFFFFFFF8000LL) != 0;
    if (i < 0x8000) {
      unint64_t v33 = -(int)i;
    }
    else {
      LOWORD(v33) = 0;
    }
    if (i >> 15) {
      id v21 = 0;
    }
    else {
      id v21 = i;
    }
    if (v26)
    {
      id v21 = v33;
      uint64_t v22 = i >= 0x8000;
    }
  }

  return v21 | (v22 << 16);
}

    uint64_t v22 = (i & 0xFFFFFFFF80000000LL) != 0;
    if (i >> 31) {
      LODWORD(v21) = 0;
    }
    else {
      id v21 = -(uint64_t)i;
    }
    if (i >> 31) {
      unint64_t v33 = 0;
    }
    else {
      unint64_t v33 = i;
    }
    if (!v26) {
      LODWORD(v21) = v33;
    }
  }

      if (isNegative_getter)
      {
        if ((i & 0x8000000000000000LL) == 0) {
          return -(uint64_t)i;
        }
      }

      else if ((i & 0x8000000000000000LL) == 0)
      {
        return i;
      }
    }
  }

  return 0LL;
}

  unint64_t v10 = dispatch thunk of BinaryInteger._lowWord.getter();
  v61((uint64_t)v35, v0);
  if (v10 < (uint64_t)v1)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }

  Data._Representation.subscript.getter((uint64_t)v1, v10, *(void *)(v8 - 144), *(void *)(v8 - 312));
  uint64_t v73 = v72;
  (*(void (**)(void, uint64_t))(v8 - 224))(*(void *)(v8 - 128), v23);
  v61(*(void *)(v8 - 152), v0);
  v61(*(void *)(v8 - 160), v0);
  return v73;
}

          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }

        unint64_t result = (v12 << 16) - 65532;
        uint64_t v3 = 1LL;
LABEL_8:
        id v8 = 4LL << v3;
        if ((result & 0xC) != 4LL << v3) {
          goto LABEL_9;
        }
        goto LABEL_38;
      }
    }

    else
    {
      __break(1u);
    }

    unint64_t result = String.UTF8View._foreignCount()();
    if (!__OFSUB__(result, 1LL))
    {
      uint64_t v3 = (a1 >> 59) & 1;
      unint64_t result = MEMORY[0x186E1B838](15LL, result - 1, a1, a2);
      goto LABEL_8;
    }
  }

  __break(1u);
  return result;
}

        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }

    id v8 = HIBYTE(v6) & 0xF;
    goto LABEL_12;
  }

  Swift::String v30 = swift_bridgeObjectRelease();
  static URL.currentDirectoryOrNil()(&v56, v30);
  id v17 = (void *)v56;
  Swift::String v52 = v56;
  *(void *)&v53[0] = v57;
  outlined copy of URL?(v56);
  URL.init(string:relativeTo:)(0LL, 0xE000000000000000LL, (id *)&v52, (uint64_t *)&v56);
  outlined consume of URL?(v17);
  uint64_t v27 = (void *)v56;
  if (!(void)v56)
  {
    __break(1u);
    goto LABEL_40;
  }

  uint64_t v28 = *((void *)&v56 + 1);
  Swift::String v29 = v57;
  outlined consume of URL?(v17);
LABEL_35:
  *a1 = v27;
  a1[1] = v28;
  a1[2] = v29;
}

        swift_unknownObjectRetain();
        char v37 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v160, v35, v36, v18, v163);
        unint64_t result = swift_unknownObjectRelease_n();
        goto LABEL_68;
      }

      break;
    }

    uint64_t v23 = *(unsigned __int8 *)(v18 + 18);
    if (*(_BYTE *)(v18 + 18))
    {
      swift_unknownObjectRetain_n();
      unint64_t result = outlined retain of AttributedString.Runs((uint64_t)v206);
      uint64_t v24 = v20;
      uint64_t v25 = v18;
      while (1)
      {
        uint64_t v28 = *(unsigned __int16 *)(v25 + 16);
        if (!*(_WORD *)(v25 + 16)) {
          break;
        }
        Swift::String v29 = *(void *)(v25 + 40);
        Swift::String v30 = v24 - v29;
        if (__OFSUB__(v24, v29)) {
          goto LABEL_195;
        }
        if (__OFADD__(v30, 1LL)) {
          goto LABEL_196;
        }
        if (v30 + 1 <= 0)
        {
          uint64_t v28 = 0LL;
          goto LABEL_18;
        }

        if ((_DWORD)v28 == 1)
        {
          v24 -= v29;
          break;
        }

        id v31 = *(void *)(v25 + 64);
        id v17 = __OFSUB__(v30, v31);
        unint64_t v32 = v30 - v31;
        if (v17) {
          goto LABEL_201;
        }
        if (__OFADD__(v32, 1LL)) {
          goto LABEL_202;
        }
        if (v32 + 1 < 1)
        {
          uint64_t v28 = 1LL;
          uint64_t v24 = v30;
          goto LABEL_18;
        }

        if ((_DWORD)v28 == 2)
        {
          uint64_t v24 = v32;
          break;
        }

        unint64_t v33 = (void *)(v25 + 88);
        uint64_t v34 = 2LL;
        while (1)
        {
          if (v28 == v34)
          {
            __break(1u);
LABEL_192:
            __break(1u);
LABEL_193:
            __break(1u);
            goto LABEL_194;
          }

          uint64_t v24 = v32 - *v33;
          if (__OFSUB__(v32, *v33)) {
            goto LABEL_192;
          }
          if (__OFADD__(v24, 1LL)) {
            goto LABEL_193;
          }
          if (v24 + 1 < 1) {
            break;
          }
          ++v34;
          v33 += 3;
          unint64_t v32 = v24;
          if (v28 == v34) {
            goto LABEL_17;
          }
        }

        uint64_t v28 = v34;
        uint64_t v24 = v32;
LABEL_18:
        uint64_t v26 = (4 * *(_BYTE *)(v25 + 18) + 8) & 0x3C;
        uint64_t v23 = ((-15LL << v26) - 1) & v23 | (v28 << v26);
        uint64_t v27 = *(void *)(v25 + 24 + 24 * v28);
        swift_unknownObjectRetain();
        unint64_t result = swift_unknownObjectRelease();
        uint64_t v25 = v27;
        if (!*(_BYTE *)(v27 + 18)) {
          goto LABEL_42;
        }
      }

        uint64_t v44 = 256LL;
      }

                      if ([v5 definiteness]) {
                        goto LABEL_42;
                      }
                      goto LABEL_41;
                    }

                    goto LABEL_30;
                  }

                  objc_msgSend(v5, "setDetermination:", objc_msgSend(a2, "determination"));
                }

                if (![a2 grammaticalPerson]) {
                  goto LABEL_32;
                }
                if ((a3 & 1) != 0)
                {
LABEL_31:
                  objc_msgSend(v5, "setGrammaticalPerson:", objc_msgSend(a2, "grammaticalPerson"));
                  goto LABEL_32;
                }

    unint64_t v32 = v13 + 1;
    if (v13 + 1 < v24->var4 && (var7 = v24->var7, uint64_t v34 = (id)*((void *)&v24->var5 + 2 * v18), v34 == var7[v32].var1))
    {
      var7[v18 - 1].var0 += var7[v32].var0;

      id v9 = 0LL;
      ++v13;
    }

    else
    {
      id v9 = 0LL;
    }

  a1[12] = a1[8];
  unint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay10Foundation20PredicateExpressionsO10VariableIDVGG_AL_SSts5NeverOTg5018_sSi10Foundation20gh3O10i43IDVAESSIgynro_Si6offset_AE7elementtAE_SSts5k70OIegnrzr_TR053_s10Foundation26DebugStringConversionStateVyACSayAA20bc3O37D24IDVGcfcAG_SStSi_AGtXEfU_Tf3nnnpf_nTf1cn_n( uint64_t a1)
{
  uint64_t v11 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0);
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v3 = 0LL;
    uint64_t v10 = a1 + 32;
    do
    {
      uint64_t v4 = *(void *)(v10 + 8 * v3++);
      v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      unint64_t v7 = *(void *)(v11 + 16);
      unint64_t v6 = *(void *)(v11 + 24);
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      *(void *)(v11 + 16) = v7 + 1;
      id v8 = (void *)(v11 + 24 * v7);
      v8[4] = v4;
      v8[5] = 0x7475706E69LL;
      v8[6] = 0xE500000000000000LL;
    }

    while (v2 != v3);
  }

  swift_bridgeObjectRelease();
  return v11;
}

uint64_t DebugStringConversionState.subscript.getter(Swift::UInt *a1)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16) && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(*a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }

  else
  {
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return 0x566E776F6E6B6E75LL;
  }

  return v5;
}

uint64_t specialized Sequence<>.starts<A>(with:)( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v6 = a3 >> 14;
  if (a3 >> 14 != a2 >> 14)
  {
    uint64_t v11 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000LL) == 0) {
      LOBYTE(v11) = 1;
    }
    uint64_t v19 = *(void *)(a1 + 16);
    uint64_t v20 = 4LL << v11;
    uint64_t v12 = HIBYTE(a5) & 0xF;
    if ((a5 & 0x2000000000000000LL) == 0) {
      uint64_t v12 = a4 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v18 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v7 = 0LL;
    unint64_t v13 = a2;
    while (1)
    {
      uint64_t result = Substring.UTF8View.subscript.getter();
      unsigned __int8 v15 = result;
      if ((v13 & 0xC) == v20)
      {
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a4, a5);
        unint64_t v13 = result;
        if ((a5 & 0x1000000000000000LL) == 0)
        {
LABEL_10:
          unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000LL) + 65540;
          goto LABEL_14;
        }
      }

      else if ((a5 & 0x1000000000000000LL) == 0)
      {
        goto LABEL_10;
      }

      if (v18 <= v13 >> 16)
      {
        __break(1u);
LABEL_25:
        __break(1u);
        return result;
      }

      unint64_t v13 = String.UTF8View._foreignIndex(after:)();
LABEL_14:
      BOOL v16 = v19 == v7;
      if (v19 == v7 || *(unsigned __int8 *)(a1 + v7 + 32) != v15)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v16;
      }

      ++v7;
      if (v6 == v13 >> 14)
      {
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
  }

  swift_bridgeObjectRetain();
  unint64_t v7 = 0LL;
LABEL_18:
  unint64_t v17 = *(void *)(a1 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v7 == v17) {
    return 1LL;
  }
  if (v7 >= v17) {
    goto LABEL_25;
  }
  return 0LL;
}

uint64_t specialized Sequence<>.starts<A>(with:)()
{
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      Swift::String_optional v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1LL;
      }

      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
      }

      Swift::String_optional v4 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }

    while (v4.value._object);
  }

  swift_bridgeObjectRelease();
  unint64_t v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  if (!v6) {
    return 1LL;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return 0LL;
}

uint64_t specialized Sequence<>.starts<A>(with:)( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v6 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v6 = 11LL;
  }
  unint64_t v7 = v6 | (v5 << 16);
  unint64_t v8 = a3 >> 14;
  swift_bridgeObjectRetain();
  unint64_t v24 = v8;
  if (v8 != a4 >> 14)
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = Substring.index(before:)();
    uint64_t v10 = Substring.subscript.getter();
    uint64_t v12 = v11;
    if (!v5)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v22 = 1LL;
      goto LABEL_21;
    }

    uint64_t v13 = v10;
    unint64_t v7 = String.index(before:)();
    if (v13 == String.subscript.getter() && v12 == v14) {
      goto LABEL_13;
    }
LABEL_14:
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = 0LL;
      goto LABEL_21;
    }

    while (v24 != v9 >> 14)
    {
      unint64_t v9 = Substring.index(before:)();
      uint64_t v17 = Substring.subscript.getter();
      uint64_t v19 = v18;
      if (v7 < 0x4000) {
        goto LABEL_22;
      }
      uint64_t v20 = v17;
      unint64_t v7 = String.index(before:)();
      if (v20 != String.subscript.getter() || v19 != v21) {
        goto LABEL_14;
      }
LABEL_13:
      swift_bridgeObjectRelease_n();
    }

    swift_bridgeObjectRelease();
  }

  if (v7 < 0x4000)
  {
    uint64_t v22 = 1LL;
  }

  else
  {
    String.index(before:)();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v22 = 0LL;
  }

unint64_t specialized Sequence<>.starts<A>(with:)( unint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v5 = result;
  unint64_t v6 = 0LL;
  if ((a3 & 0x2000000000000000LL) != 0) {
    unint64_t v7 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v8 = 4 * v7;
  uint64_t v9 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4LL << v9;
  uint64_t v20 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v21 = a3 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v11 = result + 32;
  unint64_t v12 = 15LL;
  while (v8 != v12 >> 14)
  {
    unint64_t v13 = v12 & 0xC;
    uint64_t result = v12;
    if (v13 == v10)
    {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a2, a3);
      uint64_t v8 = 4 * v7;
    }

    unint64_t v14 = result >> 16;
    if (result >> 16 >= v7)
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }

    if ((a3 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      uint64_t v8 = 4 * v7;
      unsigned __int8 v15 = result;
      if (v13 != v10) {
        goto LABEL_18;
      }
    }

    else if ((a3 & 0x2000000000000000LL) != 0)
    {
      v22[0] = a2;
      v22[1] = v21;
      unsigned __int8 v15 = *((_BYTE *)v22 + v14);
      if (v13 != v10) {
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t result = v20;
      if ((a2 & 0x1000000000000000LL) == 0)
      {
        uint64_t result = _StringObject.sharedUTF8.getter();
        uint64_t v8 = 4 * v7;
      }

      unsigned __int8 v15 = *(_BYTE *)(result + v14);
      if (v13 != v10)
      {
LABEL_18:
        if ((a3 & 0x1000000000000000LL) == 0) {
          goto LABEL_19;
        }
        goto LABEL_22;
      }
    }

    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a2, a3);
    uint64_t v8 = 4 * v7;
    unint64_t v12 = result;
    if ((a3 & 0x1000000000000000LL) == 0)
    {
LABEL_19:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_24;
    }

LABEL_22:
    if (v7 <= v12 >> 16) {
      goto LABEL_35;
    }
    uint64_t v16 = String.UTF8View._foreignIndex(after:)();
    uint64_t v8 = 4 * v7;
    unint64_t v12 = v16;
LABEL_24:
    unint64_t v17 = *(void *)(v5 + 16);
    uint64_t result = v6 == v17;
    if (v6 == v17) {
      return result;
    }
    if (v6 >= v17) {
      goto LABEL_34;
    }
    int v18 = *(unsigned __int8 *)(v11 + v6++);
    if (v18 != v15) {
      return result;
    }
  }

  unint64_t v19 = *(void *)(v5 + 16);
  if (v19 == v6) {
    return 1LL;
  }
  if (v6 < v19) {
    return 0LL;
  }
LABEL_36:
  __break(1u);
  return result;
}

        uint64_t v69 = (v49 - 1) & v49;
        uint64_t v70 = v50;
        unint64_t v36 = __clz(__rbit64(v49)) + (v50 << 6);
        if ((v67 & 1) != 0)
        {
LABEL_10:
          char v37 = *(void *)(v5 + 56);
          uint64_t v38 = *(void *)(v5 + 48) + 392 * v36;
          uint64_t v88 = *(void *)(v38 + 8);
          uint64_t v89 = *(void *)v38;
          v86 = *(void *)(v38 + 24);
          unint64_t v87 = *(void *)(v38 + 16);
          uint64_t v39 = *(void *)(v38 + 48);
          v84 = *(void *)(v38 + 40);
          v85 = *(void *)(v38 + 32);
          uint64_t v41 = *(void *)(v38 + 56);
          uint64_t v40 = *(void *)(v38 + 64);
          uint64_t v42 = *(void *)(v38 + 72);
          uint64_t v43 = *(void *)(v38 + 80);
          uint64_t v44 = *(void *)(v38 + 88);
          uint64_t v90 = *(_BYTE *)(v38 + 96);
          uint64_t v93 = *(void *)(v38 + 112);
          unint64_t v94 = *(void *)(v38 + 104);
          uint64_t v91 = *(void *)(v38 + 128);
          __int128 v92 = *(void *)(v38 + 120);
          uint64_t v97 = *(void *)(v38 + 144);
          uint64_t v98 = *(void *)(v38 + 136);
          char v95 = *(void *)(v38 + 160);
          __int128 v96 = *(void *)(v38 + 152);
          uint64_t v101 = *(void *)(v38 + 176);
          v102 = *(void *)(v38 + 168);
          uint64_t v99 = *(void *)(v38 + 192);
          char v100 = *(void *)(v38 + 184);
          v103 = *(_BYTE *)(v38 + 200);
          uint64_t v68 = *(void *)(v37 + 8 * v36);
          uint64_t v104 = *(_BYTE *)(v38 + 201);
          v107 = *(void *)(v38 + 216);
          v108 = *(void *)(v38 + 208);
          v105 = *(void *)(v38 + 232);
          v106 = *(void *)(v38 + 224);
          v111 = *(void *)(v38 + 248);
          v112 = *(void *)(v38 + 240);
          uint64_t v45 = *(void *)(v38 + 272);
          v109 = *(void *)(v38 + 264);
          v110 = *(void *)(v38 + 256);
          v114 = *(void *)(v38 + 288);
          v115 = *(void *)(v38 + 280);
          v113 = *(void *)(v38 + 296);
          v116 = *(void *)(v38 + 312);
          v117 = *(void *)(v38 + 304);
          Swift::String v46 = *(void *)(v38 + 328);
          v118 = *(void *)(v38 + 320);
          uint64_t v77 = *(void *)(v38 + 344);
          int v78 = *(void *)(v38 + 336);
          unint64_t v79 = *(unsigned __int8 *)(v38 + 352);
          uint64_t v47 = *(void *)(v38 + 368);
          v80 = *(void *)(v38 + 360);
          unint64_t v81 = *(void *)(v38 + 376);
          uint64_t v82 = *(void *)(v38 + 384);
          goto LABEL_24;
        }
      }

      memcpy(__dst, (const void *)(*(void *)(v5 + 48) + 392 * v36), 0x188uLL);
      Swift::String v52 = *(void *)(*(void *)(v5 + 56) + 8 * v36);
      unint64_t v81 = __dst[47];
      uint64_t v82 = __dst[48];
      uint64_t v47 = __dst[46];
      unint64_t v79 = LOBYTE(__dst[44]);
      v80 = __dst[45];
      Swift::String v46 = __dst[41];
      uint64_t v77 = __dst[43];
      int v78 = __dst[42];
      v117 = __dst[38];
      v118 = __dst[40];
      uint64_t v45 = __dst[34];
      v115 = __dst[35];
      v116 = __dst[39];
      v113 = __dst[37];
      v114 = __dst[36];
      v111 = __dst[31];
      v112 = __dst[30];
      v109 = __dst[33];
      v110 = __dst[32];
      v107 = __dst[27];
      v108 = __dst[26];
      v105 = __dst[29];
      v106 = __dst[28];
      uint64_t v104 = BYTE1(__dst[25]);
      v103 = __dst[25];
      uint64_t v101 = __dst[22];
      v102 = __dst[21];
      uint64_t v99 = __dst[24];
      char v100 = __dst[23];
      uint64_t v97 = __dst[18];
      uint64_t v98 = __dst[17];
      char v95 = __dst[20];
      __int128 v96 = __dst[19];
      uint64_t v93 = __dst[14];
      unint64_t v94 = __dst[13];
      uint64_t v91 = __dst[16];
      __int128 v92 = __dst[15];
      uint64_t v90 = __dst[12];
      uint64_t v88 = __dst[1];
      uint64_t v89 = __dst[0];
      v86 = __dst[3];
      unint64_t v87 = __dst[2];
      v84 = __dst[5];
      v85 = __dst[4];
      uint64_t v39 = __dst[6];
      uint64_t v41 = __dst[7];
      uint64_t v40 = __dst[8];
      uint64_t v42 = __dst[9];
      uint64_t v43 = __dst[10];
      uint64_t v44 = __dst[11];
      outlined retain of ICUDateIntervalFormatter.Signature(__dst);
      uint64_t v68 = v52;
      swift_retain();
LABEL_24:
      Hasher.init(_seed:)();
      __dst[0] = v89;
      __dst[1] = v88;
      __dst[2] = v87;
      __dst[3] = v86;
      __dst[4] = v85;
      __dst[5] = v84;
      double v75 = v41;
      v76 = v39;
      __dst[6] = v39;
      __dst[7] = v41;
      uint64_t v73 = v42;
      int v74 = v40;
      __dst[8] = v40;
      __dst[9] = v42;
      uint64_t v71 = v44;
      uint64_t v72 = v43;
      __dst[10] = v43;
      __dst[11] = v44;
      LOBYTE(__dst[12]) = v90;
      __dst[13] = v94;
      __dst[14] = v93;
      __dst[15] = v92;
      __dst[16] = v91;
      __dst[17] = v98;
      __dst[18] = v97;
      __dst[19] = v96;
      __dst[20] = v95;
      __dst[21] = v102;
      __dst[22] = v101;
      __dst[23] = v100;
      __dst[24] = v99;
      LOBYTE(__dst[25]) = v103;
      BYTE1(__dst[25]) = v104;
      __dst[26] = v108;
      __dst[27] = v107;
      __dst[28] = v106;
      __dst[29] = v105;
      __dst[30] = v112;
      __dst[31] = v111;
      __dst[32] = v110;
      __dst[33] = v109;
      __dst[34] = v45;
      __dst[35] = v115;
      __dst[36] = v114;
      __dst[37] = v113;
      __dst[38] = v117;
      __dst[39] = v116;
      __dst[40] = v118;
      __dst[41] = v46;
      __dst[42] = v78;
      __dst[43] = v77;
      Locale.Components.hash(into:)((uint64_t)v119);
      Hasher._combine(_:)(v79);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v53 = Hasher._finalize()();
      unint64_t v54 = -1LL << *(_BYTE *)(v83 + 32);
      uint64_t v55 = v53 & ~v54;
      uint64_t v56 = v55 >> 6;
      if (((-1LL << v55) & ~*(void *)(v66 + 8 * (v55 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1LL << v55) & ~*(void *)(v66 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0LL;
        unint64_t v12 = v81;
        unint64_t v13 = v80;
        unint64_t v14 = v79;
        unsigned __int8 v15 = v117;
        uint64_t v16 = v118;
        unint64_t v17 = v46;
        int v18 = v78;
        uint64_t result = v82;
        unint64_t v19 = v47;
        uint64_t v20 = v77;
        uint64_t v22 = v115;
        uint64_t v21 = v116;
        uint64_t v23 = v45;
        uint64_t v25 = v113;
        unint64_t v24 = v114;
        uint64_t v27 = v111;
        uint64_t v26 = v112;
        Swift::String v29 = v109;
        uint64_t v28 = v110;
        id v31 = v107;
        Swift::String v30 = v108;
        unint64_t v33 = v105;
        unint64_t v32 = v106;
        uint64_t v34 = v104;
      }

      else
      {
        char v57 = 0;
        uint64_t v58 = (unint64_t)(63 - v54) >> 6;
        unint64_t v12 = v81;
        unint64_t v13 = v80;
        unint64_t v14 = v79;
        unsigned __int8 v15 = v117;
        uint64_t v16 = v118;
        unint64_t v17 = v46;
        int v18 = v78;
        uint64_t result = v82;
        unint64_t v19 = v47;
        uint64_t v20 = v77;
        uint64_t v22 = v115;
        uint64_t v21 = v116;
        uint64_t v23 = v45;
        uint64_t v25 = v113;
        unint64_t v24 = v114;
        uint64_t v27 = v111;
        uint64_t v26 = v112;
        Swift::String v29 = v109;
        uint64_t v28 = v110;
        id v31 = v107;
        Swift::String v30 = v108;
        unint64_t v33 = v105;
        unint64_t v32 = v106;
        uint64_t v34 = v104;
        do
        {
          if (++v56 == v58 && (v57 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }

          CFStringRef v59 = v56 == v58;
          if (v56 == v58) {
            uint64_t v56 = 0LL;
          }
          v57 |= v59;
          uint64_t v60 = *(void *)(v66 + 8 * v56);
        }

        while (v60 == -1);
        unint64_t v11 = __clz(__rbit64(~v60)) + (v56 << 6);
      }

      *(void *)(v66 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      id v35 = *(void *)(v83 + 48) + 392 * v11;
      *(void *)id v35 = v89;
      *(void *)(v35 + _Block_object_dispose((const void *)(v1 - 96), 8) = v88;
      *(void *)(v35 + 16) = v87;
      *(void *)(v35 + 24) = v86;
      *(void *)(v35 + 32) = v85;
      *(void *)(v35 + 40) = v84;
      *(void *)(v35 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = v76;
      *(void *)(v35 + 56) = v75;
      *(void *)(v35 + 64) = v74;
      *(void *)(v35 + 72) = v73;
      *(void *)(v35 + 80) = v72;
      *(void *)(v35 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = v71;
      *(_BYTE *)(v35 + 96) = v90;
      *(void *)(v35 + 104) = v94;
      *(void *)(v35 + 112) = v93;
      *(void *)(v35 + 120) = v92;
      *(void *)(v35 + 12_Block_object_dispose((const void *)(v1 - 96), 8) = v91;
      *(void *)(v35 + 136) = v98;
      *(void *)(v35 + 144) = v97;
      *(void *)(v35 + 152) = v96;
      *(void *)(v35 + 160) = v95;
      *(void *)(v35 + 16_Block_object_dispose((const void *)(v1 - 96), 8) = v102;
      *(void *)(v35 + 176) = v101;
      *(void *)(v35 + 184) = v100;
      *(void *)(v35 + 192) = v99;
      *(_BYTE *)(v35 + 200) = v103;
      *(_BYTE *)(v35 + 201) = v34;
      *(void *)(v35 + 20_Block_object_dispose((const void *)(v1 - 96), 8) = v30;
      *(void *)(v35 + 216) = v31;
      *(void *)(v35 + 224) = v32;
      *(void *)(v35 + 232) = v33;
      *(void *)(v35 + 240) = v26;
      *(void *)(v35 + 24_Block_object_dispose((const void *)(v1 - 96), 8) = v27;
      *(void *)(v35 + 256) = v28;
      *(void *)(v35 + 264) = v29;
      *(void *)(v35 + 272) = v23;
      *(void *)(v35 + 280) = v22;
      *(void *)(v35 + 28_Block_object_dispose((const void *)(v1 - 96), 8) = v24;
      *(void *)(v35 + 296) = v25;
      *(void *)(v35 + 304) = v15;
      *(void *)(v35 + 312) = v21;
      *(void *)(v35 + 320) = v16;
      *(void *)(v35 + 32_Block_object_dispose((const void *)(v1 - 96), 8) = v17;
      *(void *)(v35 + 336) = v18;
      *(void *)(v35 + 344) = v20;
      *(_BYTE *)(v35 + 352) = v14;
      *(void *)(v35 + 360) = v13;
      *(void *)(v35 + 36_Block_object_dispose((const void *)(v1 - 96), 8) = v19;
      *(void *)(v35 + 376) = v12;
      *(void *)(v35 + 384) = result;
      uint64_t v8 = v69;
      *(void *)(*(void *)(v83 + 56) + 8 * v11) = v68;
      ++*(void *)(v83 + 16);
      unint64_t v5 = v65;
      uint64_t v10 = v70;
    }
  }

  uint64_t result = swift_release();
  void *v3 = v83;
  return result;
}

  __break(1u);
LABEL_23:
  uint64_t v66 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUNumberFormatter.Signature, ICUNumberFormatter?>);
  Swift::String v46 = static _DictionaryStorage.copy(original:)();
  uint64_t v40 = v46;
  if (!*(void *)(v29 + 16))
  {
LABEL_59:
    swift_bridgeObjectRelease();
    uint64_t v43 = v74;
    id v31 = v66;
    if ((v22 & 1) != 0) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }

  uint64_t v47 = (char *)(v46 + 64);
  uint64_t v48 = 1LL << *(_BYTE *)(v40 + 32);
  uint64_t v68 = (char *)(v29 + 64);
  unint64_t v49 = (unint64_t)(v48 + 63) >> 6;
  if (v40 != v29 || v47 >= &v68[8 * v49]) {
    memmove(v47, v68, 8 * v49);
  }
  Swift::String v50 = 0LL;
  *(void *)(v40 + 16) = *(void *)(v29 + 16);
  Swift::String v51 = 1LL << *(_BYTE *)(v29 + 32);
  Swift::String v52 = -1LL;
  if (v51 < 64) {
    Swift::String v52 = ~(-1LL << v51);
  }
  uint64_t v53 = v52 & *(void *)(v29 + 64);
  uint64_t v67 = (unint64_t)(v51 + 63) >> 6;
  while (1)
  {
    unint64_t v19 = (char *)v75;
    unint64_t v32 = (unint64_t)v76;
    if (v53)
    {
      uint64_t v71 = (v53 - 1) & v53;
      uint64_t v72 = v50;
      unint64_t v54 = __clz(__rbit64(v53)) | (v50 << 6);
      goto LABEL_31;
    }

    CFStringRef v59 = v50 + 1;
    if (__OFADD__(v50, 1LL))
    {
      __break(1u);
      goto LABEL_64;
    }

    if (v59 >= v67) {
      goto LABEL_59;
    }
    uint64_t v60 = *(void *)&v68[8 * v59];
    uint64_t v61 = v50 + 1;
    if (!v60)
    {
      uint64_t v61 = v59 + 1;
      if (v59 + 1 >= v67) {
        goto LABEL_59;
      }
      uint64_t v60 = *(void *)&v68[8 * v61];
      if (!v60)
      {
        uint64_t v61 = v59 + 2;
        if (v59 + 2 >= v67) {
          goto LABEL_59;
        }
        uint64_t v60 = *(void *)&v68[8 * v61];
        if (!v60)
        {
          uint64_t v61 = v59 + 3;
          if (v59 + 3 >= v67) {
            goto LABEL_59;
          }
          uint64_t v60 = *(void *)&v68[8 * v61];
          if (!v60)
          {
            uint64_t v61 = v59 + 4;
            if (v59 + 4 >= v67) {
              goto LABEL_59;
            }
            uint64_t v60 = *(void *)&v68[8 * v61];
            if (!v60)
            {
              uint64_t v61 = v59 + 5;
              if (v59 + 5 >= v67) {
                goto LABEL_59;
              }
              uint64_t v60 = *(void *)&v68[8 * v61];
              if (!v60)
              {
                uint64_t v61 = v59 + 6;
                if (v59 + 6 >= v67) {
                  goto LABEL_59;
                }
                uint64_t v60 = *(void *)&v68[8 * v61];
                if (!v60)
                {
                  uint64_t v61 = v59 + 7;
                  if (v59 + 7 >= v67) {
                    goto LABEL_59;
                  }
                  uint64_t v60 = *(void *)&v68[8 * v61];
                  if (!v60)
                  {
                    uint64_t v61 = v59 + 8;
                    if (v59 + 8 >= v67) {
                      goto LABEL_59;
                    }
                    uint64_t v60 = *(void *)&v68[8 * v61];
                    if (!v60) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v21 = v90;
        if (!v90)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v22 = v91;
          if (!v91)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v22);
          swift_bridgeObjectRelease();
LABEL_23:
          unint64_t v24 = v91;
          v76 = v2;
          if (v91)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v24);
            swift_bridgeObjectRelease();
          }

          else
          {
            Hasher._combine(_:)(0);
          }

          uint64_t v25 = v93;
          uint64_t v27 = v94;
          uint64_t v26 = v95;
          uint64_t v28 = v96;
          uint64_t v77 = v96;
          int v78 = v92;
          if (v92)
          {
            unint64_t v81 = v11;
            Swift::String v29 = v92;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            Swift::String v30 = v25;
            id v31 = v27;
            unint64_t v32 = v26;
            unint64_t v33 = v28;
            uint64_t v34 = v29;
            unint64_t v11 = v81;
            _CFObject.hash(into:)();
          }

          else
          {
            Hasher._combine(_:)(0);
            id v35 = v28;
            unint64_t v36 = v25;
            char v37 = v27;
            uint64_t v38 = v26;
          }

          Swift::String_optional v4 = v76;
          unint64_t v81 = v26;
          uint64_t v39 = v11;
          if (v25)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v40 = v25;
            uint64_t v41 = v25;
            uint64_t v42 = v27;
            uint64_t v43 = v41;
            _CFObject.hash(into:)();

            uint64_t v27 = v42;
            unint64_t v79 = v42;
            if (v42)
            {
LABEL_31:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              uint64_t v44 = v27;
              _CFObject.hash(into:)();

              goto LABEL_34;
            }
          }

          else
          {
            uint64_t v40 = 0LL;
            Hasher._combine(_:)(0);
            unint64_t v79 = v27;
            if (v27) {
              goto LABEL_31;
            }
          }

          Hasher._combine(_:)(0);
LABEL_34:
          uint64_t v45 = v81;
          Swift::String v46 = v40;
          unint64_t v11 = v39;
          uint64_t v47 = v77;
          if (v81)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v48 = v45;
            _CFObject.hash(into:)();

            if (v47)
            {
LABEL_36:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              unint64_t v49 = v47;
              _CFObject.hash(into:)();

              goto LABEL_39;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            if (v47) {
              goto LABEL_36;
            }
          }

          Hasher._combine(_:)(0);
          unint64_t v49 = 0LL;
LABEL_39:
          Swift::String v50 = v81;
          Swift::String v51 = v79;

          Swift::String v52 = v97;
          if (v52)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v52);
            swift_bridgeObjectRelease();
          }

          else
          {
            Hasher._combine(_:)(0);
          }

          a2 = v80;
          uint64_t v53 = v98;
          if (v98)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v53);
            swift_bridgeObjectRelease();
            if (v99)
            {
LABEL_44:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_47:
              unint64_t v17 = v83;
              if (v100 == 2)
              {
                Hasher._combine(_:)(0);
              }

              else
              {
                unint64_t v54 = v100 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v54);
              }

              if (v101 == 2)
              {
                Hasher._combine(_:)(0);
              }

              else
              {
                uint64_t v55 = v101 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v55);
              }

              if (v102 == 2)
              {
                uint64_t v56 = 0;
              }

              else
              {
                uint64_t v56 = v102 & 1;
                Hasher._combine(_:)(1u);
              }

              Hasher._combine(_:)(v56);
              if (v103 == 2)
              {
                char v57 = 0;
              }

              else
              {
                uint64_t v58 = v103 & 1;
                Hasher._combine(_:)(1u);
                char v57 = v58;
              }

              Hasher._combine(_:)(v57);
              outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_60;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            if (v99) {
              goto LABEL_44;
            }
          }

          Hasher._combine(_:)(0);
          goto LABEL_47;
        }

  Hasher._combine(_:)(0);
  if (!v30)
  {
LABEL_7:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
    if (!v31) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(0);
  if (!v30)
  {
LABEL_7:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
    if (!v31) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

    if (v12 <= v10) {
      unint64_t v17 = v10;
    }
    else {
      unint64_t v17 = v12;
    }
    while (v17 != v12)
    {
      if (v12 >= *(void *)(v9 + 16)) {
        goto LABEL_49;
      }
      *(_WORD *)(v9 + 32 + 2 * v12) = *(_WORD *)(a1 + 32 + 2 * v12);
      if ((uint64_t)++v12 >= (uint64_t)v10)
      {
        char v3 = 1;
        goto LABEL_29;
      }
    }

    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

    if (v29 == ++v37)
    {
      if (v36)
      {
        uint64_t v27 = __OFADD__(v29, v38);
        uint64_t v42 = v29 + v38;
        if (v27) {
          goto LABEL_183;
        }
        if (v42 >= v31)
        {
LABEL_154:
          lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
          swift_allocError();
          *char v95 = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }

        if (v42 < 0) {
          goto LABEL_184;
        }
        *(_WORD *)(v14 + 2 * v42) = v36;
      }

      if (v34 != v18) {
        goto LABEL_21;
      }
      uint64_t v43 = *(void *)(v32 + 16);
      if (v43)
      {
        int v18 = v15;
        uint64_t v20 = 0x18C5C8000LL;
        if (*(_WORD *)(v14 + 2 * v43 - 2))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v11._rawValue = (void *)v32;
          unsigned __int8 v15 = v138;
          unint64_t v19 = v139;
        }

        else
        {
          uint64_t v44 = v43 + 14;
          unsigned __int8 v15 = v138;
          do
          {
            *(void *)(v32 + 16) = v44 - 15;
            if (v44 == 15) {
              break;
            }
          }

          while (!*(unsigned __int16 *)(v32 + 2 * v44--));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v11._rawValue = (void *)v32;
          unint64_t v19 = v139;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v11._rawValue = (void *)v32;
        unint64_t v19 = v139;
        int v18 = v15;
        unsigned __int8 v15 = v138;
        uint64_t v20 = 0x18C5C8000LL;
      }

    int v18 = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v25 = 0LL;
LABEL_23:
    uint64_t v26 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    uint64_t v27 = v49;
    uint64_t v28 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v27 + 16) + 1LL,  1);
      uint64_t v27 = v49;
    }

    Swift::String v30 = *(void *)(v27 + 16);
    Swift::String v29 = *(void *)(v27 + 24);
    if (v30 >= v29 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
      uint64_t v27 = v49;
    }

    *(void *)(v27 + 16) = v30 + 1;
    id v31 = (void *)(v27 + 96 * v30);
    v31[4] = v28;
    v31[5] = v26;
    unint64_t v32 = v45;
    unint64_t v33 = object;
    v31[6] = countAndFlagsBits;
    v31[7] = v33;
    v31[8] = v23;
    v31[9] = v15;
    uint64_t v34 = v41;
    v31[10] = v42;
    v31[11] = v34;
    v31[12] = v18;
    v31[13] = v19;
    unint64_t v5 = v32 + 32;
    v31[14] = v40;
    v31[15] = v25;
    Swift::String_optional v4 = v46 - 1;
  }

  while (v46 != 1);
  swift_bridgeObjectRelease();
  return v27;
}

    Swift::String_optional v4 = (v24 - 1) & v24;
  }

  uint64_t v25 = v23 + 4;
  if (v25 >= v31)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v29;
  }

  unint64_t v24 = *(void *)(v30 + 8 * v25);
  if (v24)
  {
    unint64_t v6 = v25;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v6 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v6 >= v31) {
      goto LABEL_29;
    }
    unint64_t v24 = *(void *)(v30 + 8 * v6);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }

    if (v4 <= v10 >> 16) {
      goto LABEL_49;
    }
    uint64_t v10 = String.UTF8View._foreignIndex(after:)();
LABEL_24:
    if ((v15 - 91) >= 0xE6u)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v9 + 2) + 1LL,  1,  v9);
      }
      v15 += 32;
    }

    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v9 + 2) + 1LL,  1,  v9);
      }
    }

    unint64_t v17 = *((void *)v9 + 2);
    uint64_t v16 = *((void *)v9 + 3);
    if (v17 >= v16 >> 1) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v16 > 1),  v17 + 1,  1,  v9);
    }
    *((void *)v9 + 2) = v17 + 1;
    v9[v17 + 32] = v15;
  }

  while (4 * v4 != v10 >> 14);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
    goto LABEL_37;
  }
LABEL_50:
  uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v9 + 2) + 1LL,  1,  v9);
LABEL_37:
  unint64_t v19 = *((void *)v9 + 2);
  int v18 = *((void *)v9 + 3);
  if (v19 >= v18 >> 1) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v18 > 1),  v19 + 1,  1,  v9);
  }
  *((void *)v9 + 2) = v19 + 1;
  v9[v19 + 32] = 0;
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = specialized String.init(cString:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v22 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v22 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v22)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }

  uint64_t v23 = specialized Sequence.allSatisfy(_:)(a3, a4);
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    return v21;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v11 = v44;
  if (v44) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unint64_t v12 = v45;
  if (!v45)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = v43;
  if (v43) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v10 = v44;
  if (!v44)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

  __break(1u);
  return result;
}

  unsigned __int8 v15 = *(void *)(v0 + 48);
  unint64_t v17 = *(void *)(v0 + 8);
  uint64_t v16 = *(void *)(v0 + 16);
  type metadata accessor for JSONMap();
  int v18 = swift_allocObject();
  *(void *)(v18 + 16) = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<(buffer: BufferView<UInt8>, allocation: UnsafeRawPointer?)>._Buffer);
  unint64_t v19 = swift_allocObject();
  *(void *)(v19 + 24) = v16;
  *(void *)(v19 + 32) = 0LL;
  *(void *)(v18 + 24) = v19;
  *(_DWORD *)(v19 + 40) = 0;
  unint64_t v1 = (os_unfair_lock_s *)(v19 + 40);
  *(void *)(v19 + 16) = v17;
  uint64_t v20 = v19 + 16;
  swift_bridgeObjectRetain();
  JSONMap.loadValue(at:)(0LL);
  if (v21 > 0xFDu)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if ((v21 & 0xE0) == 0x20)
  {
    os_unfair_lock_lock(v1);
    closure #1 in XMLPlistMap.copyInBuffer()(v20);
    if (v6)
    {
LABEL_30:
      os_unfair_lock_unlock(v1);
      __break(1u);
      return;
    }

    os_unfair_lock_unlock(v1);
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v14);
        swift_bridgeObjectRelease();
        unsigned __int8 v15 = v48;
        if (!v48) {
          goto LABEL_16;
        }
        goto LABEL_23;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v62,  (uint64_t)v42,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v16 = v42;
    }

    else
    {
      Hasher._combine(_:)(0);
      uint64_t v16 = v43;
    }

    outlined retain of LocalePreferences(v16);
    if (!v45) {
      goto LABEL_13;
    }
    goto LABEL_20;
  }

  Hasher._combine(_:)(0);
  return swift_unknownObjectRelease();
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v12 = v46;
  if (v46) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unint64_t v13 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (a2) {
    goto LABEL_22;
  }
LABEL_12:
  unint64_t v5 = __OFSUB__(a2, a3);
  Swift::String_optional v4 = a2 - a3 < 0;
  if (a2 == a3)
  {
    Data._Representation.replaceSubrange(_:with:count:)();
    return;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v23 = v75;
  if (v75) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unint64_t v24 = v76;
  if (!v76)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v23 = v72;
  if (v72) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unint64_t v24 = v73;
  if (!v73)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unsigned __int8 v15 = v49;
  if (v49) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v16 = v50;
  if (!v50)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v14 = v48;
  if (v48) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unsigned __int8 v15 = v49;
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v16);
          swift_bridgeObjectRelease();
LABEL_23:
          int v18 = v48;
          unint64_t v17 = v49;
          uint64_t v20 = v50;
          unint64_t v19 = v51;
          uint64_t v21 = v52;
          if (v48)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v22 = v17;
            uint64_t v23 = v20;
            unint64_t v24 = v19;
            uint64_t v25 = v21;
            uint64_t v26 = v18;
            _CFObject.hash(into:)();
            if (v17) {
              goto LABEL_25;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            id v31 = v21;
            unint64_t v32 = v17;
            unint64_t v33 = v20;
            uint64_t v34 = v19;
            if (v17)
            {
LABEL_25:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              uint64_t v27 = v17;
              _CFObject.hash(into:)();

              if (v20) {
                goto LABEL_26;
              }
              goto LABEL_31;
            }
          }

          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_26:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v28 = v20;
            _CFObject.hash(into:)();

            if (v19) {
              goto LABEL_27;
            }
            goto LABEL_32;
          }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v20 = v84;
        if (!v84)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v21 = v85;
          if (!v85)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v44)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          unint64_t v13 = v45;
          if (!v45) {
            goto LABEL_18;
          }
          goto LABEL_24;
        }

    if (v9) {
      goto LABEL_112;
    }
LABEL_23:
    uint64_t v22 = (4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C;
    uint64_t v21 = ((-15LL << v22) - 1) & v21 | (v23 << v22);
    unsigned __int8 v15 = *(void *)(v15 + 24 + 24 * v23);
    swift_unknownObjectRetain();
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
  }

  while (*(_BYTE *)(v15 + 18));
  char v3 = v21 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v45 = *(unsigned __int16 *)(v15 + 16);
  if (!*(_WORD *)(v15 + 16)) {
    goto LABEL_99;
  }
LABEL_77:
  uint64_t v48 = *(void *)(v15 + 24);
  uint64_t v16 = __OFSUB__(v9, v48);
  Swift::String v46 = v9 - v48;
  if (v16) {
    goto LABEL_125;
  }
  if (!__OFADD__(v46, 1LL))
  {
    if (v46 + 1 >= 1)
    {
      if ((_DWORD)v45 == 1)
      {
        uint64_t v9 = v46;
        goto LABEL_99;
      }

      Swift::String v52 = (uint64_t *)(v15 + 48);
      uint64_t v47 = 1LL;
      while (1)
      {
        uint64_t v53 = *v52;
        v52 += 3;
        uint64_t v9 = v46 - v53;
        if (__OFSUB__(v46, v53)) {
          break;
        }
        if (__OFADD__(v9, 1LL)) {
          goto LABEL_119;
        }
        if (v9 + 1 < 1) {
          goto LABEL_104;
        }
        ++v47;
        Swift::String v46 = v9;
        if (v45 == v47) {
          goto LABEL_99;
        }
      }

    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_5:
    uint64_t v20 = (unint64_t *)(*(void *)(a4 + 48) + 16 * v19);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    Swift::String v29 = 0LL;
    memset(v28, 0, sizeof(v28));
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v28, v21, v22);
    uint64_t result = swift_bridgeObjectRelease();
  }

  uint64_t v25 = v23 + 4;
  if (v25 < v15)
  {
    unint64_t v24 = *(void *)(v11 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        unint64_t v17 = v25 + 1;
        if (__OFADD__(v25, 1LL)) {
          goto LABEL_27;
        }
        if (v17 >= v15) {
          goto LABEL_23;
        }
        unint64_t v24 = *(void *)(v11 + 8 * v17);
        ++v25;
        if (v24) {
          goto LABEL_22;
        }
      }
    }

    unint64_t v17 = v25;
    goto LABEL_22;
  }

  __break(1u);
LABEL_23:
  uint64_t v53 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUNumberFormatter.Signature, ICUNumberFormatter?>);
  unint64_t v33 = static _DictionaryStorage.copy(original:)();
  uint64_t v27 = v33;
  if (!*(void *)(v17 + 16))
  {
LABEL_59:
    swift_bridgeObjectRelease();
    Swift::String v30 = v60;
    unint64_t v19 = v53;
    if ((v10 & 1) != 0) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }

  uint64_t v34 = (char *)(v33 + 64);
  id v35 = 1LL << *(_BYTE *)(v27 + 32);
  uint64_t v55 = (char *)(v17 + 64);
  unint64_t v36 = (unint64_t)(v35 + 63) >> 6;
  if (v27 != v17 || v34 >= &v55[8 * v36]) {
    memmove(v34, v55, 8 * v36);
  }
  char v37 = 0LL;
  *(void *)(v27 + 16) = *(void *)(v17 + 16);
  uint64_t v38 = 1LL << *(_BYTE *)(v17 + 32);
  uint64_t v39 = -1LL;
  if (v38 < 64) {
    uint64_t v39 = ~(-1LL << v38);
  }
  uint64_t v40 = v39 & *(void *)(v17 + 64);
  unint64_t v54 = (unint64_t)(v38 + 63) >> 6;
  uint64_t v41 = (uint64_t)v58;
  while (1)
  {
    uint64_t v16 = (unint64_t)v59;
    if (v40)
    {
      uint64_t v56 = (v40 - 1) & v40;
      uint64_t v61 = v37;
      uint64_t v42 = __clz(__rbit64(v40)) | (v37 << 6);
      goto LABEL_31;
    }

    Swift::String v46 = v37 + 1;
    if (__OFADD__(v37, 1LL))
    {
      __break(1u);
      goto LABEL_64;
    }

    if (v46 >= v54) {
      goto LABEL_59;
    }
    uint64_t v47 = *(void *)&v55[8 * v46];
    uint64_t v48 = v37 + 1;
    if (!v47)
    {
      uint64_t v48 = v46 + 1;
      if (v46 + 1 >= v54) {
        goto LABEL_59;
      }
      uint64_t v47 = *(void *)&v55[8 * v48];
      if (!v47)
      {
        uint64_t v48 = v46 + 2;
        if (v46 + 2 >= v54) {
          goto LABEL_59;
        }
        uint64_t v47 = *(void *)&v55[8 * v48];
        if (!v47)
        {
          uint64_t v48 = v46 + 3;
          if (v46 + 3 >= v54) {
            goto LABEL_59;
          }
          uint64_t v47 = *(void *)&v55[8 * v48];
          if (!v47)
          {
            uint64_t v48 = v46 + 4;
            if (v46 + 4 >= v54) {
              goto LABEL_59;
            }
            uint64_t v47 = *(void *)&v55[8 * v48];
            if (!v47)
            {
              uint64_t v48 = v46 + 5;
              if (v46 + 5 >= v54) {
                goto LABEL_59;
              }
              uint64_t v47 = *(void *)&v55[8 * v48];
              if (!v47)
              {
                uint64_t v48 = v46 + 6;
                if (v46 + 6 >= v54) {
                  goto LABEL_59;
                }
                uint64_t v47 = *(void *)&v55[8 * v48];
                if (!v47)
                {
                  uint64_t v48 = v46 + 7;
                  if (v46 + 7 >= v54) {
                    goto LABEL_59;
                  }
                  uint64_t v47 = *(void *)&v55[8 * v48];
                  if (!v47)
                  {
                    uint64_t v48 = v46 + 8;
                    if (v46 + 8 >= v54) {
                      goto LABEL_59;
                    }
                    uint64_t v47 = *(void *)&v55[8 * v48];
                    if (!v47) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v21 = v90;
        if (!v90)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v22 = v91;
          if (!v91)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v20 = v83;
        if (!v83)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v21 = v84;
          if (!v84)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }

  uint64_t v83 = v21;
  uint64_t v64 = v23;
  uint64_t v66 = v22;
  if ((a1 & 6) != 0)
  {
    uint64_t v25 = v74;
    if (v8 == v74)
    {
      uint64_t v26 = v76;
      uint64_t v28 = v70;
      uint64_t v27 = v72;
      Swift::String v29 = v68;
      if (v74 >= v24)
      {
LABEL_25:
        uint64_t v73 = v27;
        double v75 = v25;
        Swift::String v30 = v20;
        uint64_t v69 = v29;
        uint64_t v71 = v28;
        uint64_t v77 = v26;
LABEL_26:
        uint64_t result = swift_bridgeObjectRelease();
        id v31 = 0LL;
        unint64_t v32 = 0LL;
        unint64_t v33 = 0LL;
        uint64_t v34 = 0LL;
        id v35 = 0LL;
        unint64_t v36 = 0LL;
        char v37 = 2LL;
        uint64_t v38 = 2LL;
LABEL_41:
        if (v75 == v79)
        {
          id v31 = v77;
          unint64_t v32 = v69;
          unint64_t v33 = v71;
          char v37 = v73;
          uint64_t v34 = v77;
          id v35 = v69;
          unint64_t v36 = v71;
          uint64_t v38 = v73;
        }

        goto LABEL_43;
      }
    }

    else
    {
      uint64_t v26 = BigString.UTF8View.index(before:)();
      Swift::String v29 = v39;
      uint64_t v28 = v40;
      uint64_t v27 = v41;
      uint64_t v25 = v26 >> 10;
      if (v26 >> 10 >= v79) {
        goto LABEL_25;
      }
    }

    specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v78, v26, v29, v28, v27, 1, &v85);
    uint64_t v42 = v78;
    char v37 = v88;
    if (v88 == 2)
    {
      while (1)
      {
        specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v42, v26, v29, v28, v27, 0, &v85);
        char v37 = v88;
        if (v88 != 2)
        {
          uint64_t v73 = v27;
          double v75 = v25;
          Swift::String v30 = v20;
          uint64_t v69 = v29;
          uint64_t v71 = v28;
          uint64_t v77 = v26;
          unint64_t v36 = v91;
          uint64_t v38 = v92;
          uint64_t v34 = v89;
          id v35 = v90;
          unint64_t v32 = v86;
          unint64_t v33 = v87;
          id v31 = v85;
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_41;
        }

        uint64_t v43 = BigString.UTF8View.index(after:)();
        uint64_t v26 = v43;
        Swift::String v29 = v44;
        uint64_t v28 = v45;
        uint64_t v27 = v46;
        uint64_t v25 = v43 >> 10;
        if (v43 >> 10 >= v79) {
          break;
        }
        uint64_t v42 = v78;
      }

      uint64_t v73 = v46;
      double v75 = v43 >> 10;
      Swift::String v30 = v20;
      uint64_t v69 = v44;
      uint64_t v71 = v45;
      uint64_t v77 = v43;
      goto LABEL_26;
    }

    Swift::String v30 = v20;
    unint64_t v36 = v91;
    uint64_t v38 = v92;
    uint64_t v34 = v89;
    id v35 = v90;
    unint64_t v32 = v86;
    unint64_t v33 = v87;
    id v31 = v85;
    uint64_t result = swift_bridgeObjectRelease();
  }

  else
  {
    Swift::String v30 = v20;
    uint64_t result = swift_bridgeObjectRelease();
    id v31 = 0LL;
    unint64_t v32 = 0LL;
    unint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    id v35 = 0LL;
    unint64_t v36 = 0LL;
    char v37 = 2LL;
    uint64_t v38 = 2LL;
  }

        uint64_t v9 = (v14 - 1) & v14;
        unint64_t v11 = __clz(__rbit64(v14)) + (v5 << 6);
      }

      uint64_t v16 = (uint64_t *)(v12[6] + 16 * v11);
      int v18 = *v16;
      unint64_t v17 = v16[1];
      outlined init with copy of AttributedString._AttributeValue(v12[7] + 72 * v11, (uint64_t)&v106);
      *(void *)&uint64_t v101 = v18;
      *((void *)&v101 + 1) = v17;
      outlined init with copy of AttributedString._AttributeValue((uint64_t)&v106, (uint64_t)v98);
      unint64_t v19 = *(void **)(v99 + 200);
      uint64_t v20 = (void *)v19[2];
      if (!v20) {
        goto LABEL_6;
      }
      uint64_t v21 = v19[4] == v18 && v19[5] == v17;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      if (v20 != (void *)1)
      {
        uint64_t v22 = v19 + 7;
        uint64_t v23 = 1LL;
        while (1)
        {
          unint64_t v12 = (void *)(v23 + 1);
          if (__OFADD__(v23, 1LL)) {
            break;
          }
          unint64_t v24 = *(v22 - 1) == v18 && *v22 == v17;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_39;
          }
          v22 += 2;
          ++v23;
          if (v12 == v20) {
            goto LABEL_6;
          }
        }

        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
        goto LABEL_160;
      }

  __break(1u);
  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v21 = v74;
  if (v74) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v22 = v75;
  if (!v75)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v19 = v71;
  if (v71) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v20 = v72;
  if (!v72)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v15);
        swift_bridgeObjectRelease();
        uint64_t v16 = v49;
        if (!v49) {
          goto LABEL_16;
        }
        goto LABEL_23;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v63,  (uint64_t)v43,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      unint64_t v17 = v43;
    }

    else
    {
      Hasher._combine(_:)(0);
      unint64_t v17 = v44;
    }

    outlined retain of LocalePreferences(v17);
    if (!v46) {
      goto LABEL_13;
    }
    goto LABEL_20;
  }

  Hasher._combine(_:)(0);
  return swift_unknownObjectRelease();
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v14 = v48;
  if (v48) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unsigned __int8 v15 = v49;
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v15);
  swift_bridgeObjectRelease();
LABEL_23:
  unint64_t v17 = v62;
  unint64_t v54 = v5;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v17);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  unint64_t v19 = v63;
  int v18 = v64;
  uint64_t v20 = v65;
  uint64_t v21 = v66;
  uint64_t v22 = v67;
  Swift::String v50 = v65;
  Swift::String v51 = v67;
  if (v63)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v23 = v18;
    unint64_t v24 = v20;
    uint64_t v25 = v21;
    uint64_t v26 = v21;
    uint64_t v27 = v22;
    uint64_t v28 = v19;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    Swift::String v29 = v22;
    Swift::String v30 = v18;
    id v31 = v20;
    uint64_t v25 = v21;
    unint64_t v32 = v21;
  }

  Swift::String v52 = v19;
  uint64_t v55 = v18;
  if (v18)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v33 = v18;
    _CFObject.hash(into:)();

    uint64_t v34 = v50;
    if (v50) {
      goto LABEL_31;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v34 = v50;
    if (v50)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      id v35 = v34;
      _CFObject.hash(into:)();

      if (v25) {
        goto LABEL_32;
      }
LABEL_36:
      Hasher._combine(_:)(0);
      char v37 = v51;
      if (v51) {
        goto LABEL_33;
      }
      goto LABEL_37;
    }
  }

  Hasher._combine(_:)(0);
  if (!v25) {
    goto LABEL_36;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  unint64_t v36 = v25;
  _CFObject.hash(into:)();

  char v37 = v51;
  if (v51)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v38 = v37;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v13);
  swift_bridgeObjectRelease();
LABEL_23:
  unsigned __int8 v15 = v55;
  uint64_t v47 = v2;
  uint64_t v48 = v3;
  if (v55)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v15);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  unint64_t v17 = v56;
  uint64_t v16 = v57;
  unint64_t v19 = v58;
  int v18 = v59;
  uint64_t v20 = v60;
  if (v56)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v21 = v16;
    uint64_t v22 = v19;
    uint64_t v23 = v18;
    unint64_t v24 = v20;
    uint64_t v25 = v17;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v26 = v20;
    uint64_t v27 = v16;
    uint64_t v28 = v19;
    Swift::String v29 = v18;
  }

  Swift::String v46 = v17;
  if (v16)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    Swift::String v30 = v16;
    _CFObject.hash(into:)();

    if (v19) {
      goto LABEL_31;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v19)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      id v31 = v19;
      _CFObject.hash(into:)();

      if (v18) {
        goto LABEL_32;
      }
LABEL_36:
      Hasher._combine(_:)(0);
      if (v20) {
        goto LABEL_33;
      }
      goto LABEL_37;
    }
  }

  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_36;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  unint64_t v32 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v33 = v20;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }

  *a4 = v19;
  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v16);
  swift_bridgeObjectRelease();
LABEL_23:
  int v18 = v59;
  Swift::String v52 = v6;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v18);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  unint64_t v19 = v60;
  uint64_t v20 = v61;
  uint64_t v21 = v62;
  uint64_t v22 = v63;
  uint64_t v23 = v64;
  Swift::String v50 = v64;
  unint64_t v49 = v62;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v24 = v20;
    uint64_t v25 = v21;
    uint64_t v26 = v22;
    uint64_t v27 = v22;
    uint64_t v28 = v23;
    Swift::String v29 = v19;
    _CFObject.hash(into:)();
    Swift::String v51 = v19;
    if (v20)
    {
LABEL_28:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      Swift::String v30 = v20;
      _CFObject.hash(into:)();

      goto LABEL_31;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    id v31 = v23;
    unint64_t v32 = v20;
    unint64_t v33 = v21;
    uint64_t v26 = v22;
    uint64_t v34 = v22;
    Swift::String v51 = 0LL;
    if (v20) {
      goto LABEL_28;
    }
  }

  Hasher._combine(_:)(0);
LABEL_31:
  if (v49)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    id v35 = v49;
    _CFObject.hash(into:)();

    if (v26) {
      goto LABEL_33;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    char v37 = v50;
    if (v50) {
      goto LABEL_34;
    }
    goto LABEL_37;
  }

  Hasher._combine(_:)(0);
  if (!v26) {
    goto LABEL_36;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  unint64_t v36 = v26;
  _CFObject.hash(into:)();

  char v37 = v50;
  if (v50)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v38 = v37;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v70, v15);
  swift_bridgeObjectRelease();
LABEL_23:
  unint64_t v17 = v54;
  uint64_t v47 = v5;
  if (v54)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v70, v17);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  int v18 = v55;
  unint64_t v19 = v56;
  uint64_t v21 = v57;
  uint64_t v20 = v58;
  uint64_t v22 = v59;
  if (v55)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v23 = v19;
    unint64_t v24 = v21;
    uint64_t v25 = v20;
    uint64_t v26 = v22;
    uint64_t v27 = v18;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v28 = v22;
    Swift::String v29 = v19;
    Swift::String v30 = v21;
    id v31 = v20;
  }

  Swift::String v46 = v18;
  if (v19)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v32 = v19;
    _CFObject.hash(into:)();

    if (v21) {
      goto LABEL_31;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v21)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v33 = v21;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_32;
      }
LABEL_36:
      Hasher._combine(_:)(0);
      if (v22) {
        goto LABEL_33;
      }
      goto LABEL_37;
    }
  }

  Hasher._combine(_:)(0);
  if (!v20) {
    goto LABEL_36;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v34 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    id v35 = v22;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }

    if (!v27) {
      goto LABEL_23;
    }
    goto LABEL_179;
  }

  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v27 = v13;
  unint64_t v32 = v11;
LABEL_38:
  uint64_t v40 = *(unsigned __int16 *)(v32 + 16);
  uint64_t v26 = v32;
  if (!*(_WORD *)(v32 + 16))
  {
    uint64_t v23 = v198;
LABEL_51:
    if (v27)
    {
LABEL_198:
      __break(1u);
      goto LABEL_199;
    }

    goto LABEL_52;
  }

  uint64_t v41 = *(void *)(v32 + 24);
  id v35 = __OFSUB__(v27, v41);
  uint64_t v42 = v27 - v41;
  uint64_t v23 = v198;
  if (v35)
  {
LABEL_199:
    __break(1u);
    goto LABEL_200;
  }

  if (!__OFADD__(v42, 1LL))
  {
    if (v42 + 1 < 1)
    {
      uint64_t v40 = 0LL;
    }

    else
    {
      if ((_DWORD)v40 == 1)
      {
        uint64_t v27 = v42;
        goto LABEL_51;
      }

      uint64_t v43 = (uint64_t *)(v32 + 48);
      uint64_t v44 = 1LL;
      while (1)
      {
        uint64_t v45 = *v43;
        v43 += 3;
        uint64_t v27 = v42 - v45;
        if (__OFSUB__(v42, v45)) {
          goto LABEL_187;
        }
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_188;
        }
        if (v27 + 1 < 1) {
          break;
        }
        ++v44;
        uint64_t v42 = v27;
        if (v40 == v44) {
          goto LABEL_51;
        }
      }

      uint64_t v40 = v44;
      uint64_t v27 = v42;
    }

            __break(1u);
LABEL_23:
            __break(1u);
            return result;
          }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v56) {
    goto LABEL_23;
  }
LABEL_18:
  Hasher._combine(_:)(0);
  uint64_t v16 = v57;
  if (!v57)
  {
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

      unint64_t v19 = v14;
LABEL_23:
      *((void *)v3 + 2) = v19;
    }
  }

  unint64_t v6 = (int64_t)a2;
  unint64_t v7 = result;
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (uint64_t v9 = *((void *)v3 + 3) >> 1, v9 < v5))
  {
    if (v4 <= v5) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v4;
    }
    char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v10,  1,  v3);
    uint64_t v9 = *((void *)v3 + 3) >> 1;
  }

  unint64_t v11 = *((void *)v3 + 2);
  unint64_t v12 = v9 - v11;
  uint64_t result = specialized UnsafeBufferPointer._copyContents(initializing:)(&v3[v11 + 32], v9 - v11, v7, v6);
  if (v13 < v6) {
    goto LABEL_15;
  }
  if (v13 >= 1)
  {
    unsigned __int8 v15 = *((void *)v3 + 2);
    uint64_t v16 = __OFADD__(v15, v13);
    unint64_t v17 = v15 + v13;
    if (v16)
    {
      __break(1u);
      goto LABEL_22;
    }

    *((void *)v3 + 2) = v17;
  }

  if (v13 == v12) {
    goto LABEL_16;
  }
LABEL_13:
  *uint64_t v2 = v3;
  return result;
}

          MEMORY[0x1895F8858](v21);
          lazy protocol witness table accessor for type Int and conformance Int();
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          uint64_t v23 = dispatch thunk of static Comparable.< infix(_:_:)();
          v18((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
          v18(v20, v6);
          if ((v23 & 1) != 0) {
            goto LABEL_50;
          }
          goto LABEL_28;
        }

        if (v21 < 64) {
          goto LABEL_25;
        }
      }

      v18(v20, v6);
      goto LABEL_28;
    }

    uint64_t v53 = 0LL;
    memset(v52, 0, sizeof(v52));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    Swift::String_optional v4 = (uint64_t *)&demangling cache variable for type metadata for BinaryInteger?;
    unint64_t v5 = v52;
LABEL_12:
    outlined destroy of Any?((uint64_t)v5, v4);
    return 2LL;
  }

  uint64_t v2 = LOBYTE(v52[0]);
LABEL_6:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  return v2;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v13 = v59;
  if (v59) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unint64_t v14 = v60;
  if (!v60)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v11 = v57;
  if (v57) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unint64_t v12 = v58;
  if (!v58)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v13 = v59;
  if (v59) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unint64_t v14 = v60;
  if (!v60)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v11 = v57;
  if (v57) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unint64_t v12 = v58;
  if (!v58)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

        uint64_t v44 = (char *)v15 + 56;
        Swift::String_optional v4 = v43;
        if ((unint64_t)v43 < v12)
        {
          unint64_t v6 = (char *)v16;
          if (v16 < a3) {
            continue;
          }
        }

        goto LABEL_51;
      }

      outlined destroy of (key: String, value: Encodable)((uint64_t)&v38);
      outlined destroy of (key: String, value: Encodable)((uint64_t)&v40);
LABEL_18:
      unsigned __int8 v15 = v44;
      uint64_t v20 = v43 + 56;
      if (v44 != v43 || v44 >= v20)
      {
        uint64_t v21 = *(_OWORD *)v43;
        uint64_t v22 = *((_OWORD *)v43 + 1);
        uint64_t v23 = *((_OWORD *)v43 + 2);
        *((void *)v44 + 6) = *((void *)v43 + 6);
        v15[1] = v22;
        void v15[2] = v23;
        *unsigned __int8 v15 = v21;
      }

      uint64_t v43 = v20;
      uint64_t v16 = (unint64_t)v6;
      goto LABEL_22;
    }

    goto LABEL_51;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v21 = v90;
        if (!v90)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v22 = v91;
          if (!v91)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v22);
          swift_bridgeObjectRelease();
LABEL_23:
          unint64_t v24 = v91;
          v76 = v2;
          if (v91)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v24);
            swift_bridgeObjectRelease();
          }

          else
          {
            Hasher._combine(_:)(0);
          }

          uint64_t v25 = v93;
          uint64_t v27 = v94;
          uint64_t v26 = v95;
          uint64_t v28 = v96;
          uint64_t v77 = v96;
          int v78 = v92;
          if (v92)
          {
            unint64_t v81 = v11;
            Swift::String v29 = v92;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            Swift::String v30 = v25;
            id v31 = v27;
            unint64_t v32 = v26;
            unint64_t v33 = v28;
            uint64_t v34 = v29;
            unint64_t v11 = v81;
            _CFObject.hash(into:)();
          }

          else
          {
            Hasher._combine(_:)(0);
            id v35 = v28;
            unint64_t v36 = v25;
            char v37 = v27;
            uint64_t v38 = v26;
          }

          char v3 = v76;
          unint64_t v81 = v26;
          uint64_t v39 = v11;
          if (v25)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v40 = v25;
            uint64_t v41 = v25;
            uint64_t v42 = v27;
            uint64_t v43 = v41;
            _CFObject.hash(into:)();

            uint64_t v27 = v42;
            unint64_t v79 = v42;
            if (v42)
            {
LABEL_31:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              uint64_t v44 = v27;
              _CFObject.hash(into:)();

              goto LABEL_34;
            }
          }

          else
          {
            uint64_t v40 = 0LL;
            Hasher._combine(_:)(0);
            unint64_t v79 = v27;
            if (v27) {
              goto LABEL_31;
            }
          }

          Hasher._combine(_:)(0);
LABEL_34:
          uint64_t v45 = v81;
          Swift::String v46 = v40;
          unint64_t v11 = v39;
          uint64_t v47 = v77;
          if (v81)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v48 = v45;
            _CFObject.hash(into:)();

            if (v47)
            {
LABEL_36:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              unint64_t v49 = v47;
              _CFObject.hash(into:)();

              goto LABEL_39;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            if (v47) {
              goto LABEL_36;
            }
          }

          Hasher._combine(_:)(0);
          unint64_t v49 = 0LL;
LABEL_39:
          Swift::String v50 = v81;
          Swift::String v51 = v79;

          Swift::String v52 = v97;
          if (v52)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v52);
            swift_bridgeObjectRelease();
          }

          else
          {
            Hasher._combine(_:)(0);
          }

          a2 = v80;
          uint64_t v53 = v98;
          if (v98)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v53);
            swift_bridgeObjectRelease();
            if (v99)
            {
LABEL_44:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_47:
              unint64_t v17 = v83;
              if (v100 == 2)
              {
                Hasher._combine(_:)(0);
              }

              else
              {
                unint64_t v54 = v100 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v54);
              }

              if (v101 == 2)
              {
                Hasher._combine(_:)(0);
              }

              else
              {
                uint64_t v55 = v101 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v55);
              }

              if (v102 == 2)
              {
                uint64_t v56 = 0;
              }

              else
              {
                uint64_t v56 = v102 & 1;
                Hasher._combine(_:)(1u);
              }

              Hasher._combine(_:)(v56);
              if (v103 == 2)
              {
                char v57 = 0;
              }

              else
              {
                uint64_t v58 = v103 & 1;
                Hasher._combine(_:)(1u);
                char v57 = v58;
              }

              Hasher._combine(_:)(v57);
              outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_60;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            if (v99) {
              goto LABEL_44;
            }
          }

          Hasher._combine(_:)(0);
          goto LABEL_47;
        }

  __break(1u);
  return result;
}

        _sSo4statVSgWOi0_((uint64_t)&v25);
LABEL_23:
        outlined init with take of stat?((uint64_t)&v25, (uint64_t)v24);
        MEMORY[0x186E20E60](v17, -1LL, -1LL);
        goto LABEL_24;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  uint64_t v8 = swift_stdlib_isStackAllocationSafe();
  if ((v8 & 1) == 0)
  {
    unint64_t v17 = (const char *)swift_slowAlloc();
    int v18 = objc_msgSend( v3,  sel_getFileSystemRepresentation_maxLength_withPath_,  v17,  1026,  String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v18 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

  MEMORY[0x1895F8858](v8);
  uint64_t v9 = v21;
  uint64_t v10 = objc_msgSend( v3,  sel_getFileSystemRepresentation_maxLength_withPath_,  v21,  1026,  String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if ((v10 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_14:
  memset(&v23, 0, 28);
  memset(&v23.st_atimespec, 0, 112);
  if (!lstat(v9, &v23))
  {
    uint64_t v25 = v23;
    _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi_((uint64_t)&v25);
    goto LABEL_16;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v17);
  swift_bridgeObjectRelease();
LABEL_23:
  unint64_t v19 = v61;
  uint64_t v53 = v7;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v19);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v20 = v62;
  uint64_t v21 = v63;
  uint64_t v22 = v64;
  uint64_t v23 = v65;
  unint64_t v24 = v66;
  Swift::String v50 = v64;
  Swift::String v51 = v66;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v25 = v21;
    uint64_t v26 = v22;
    uint64_t v27 = v23;
    uint64_t v28 = v23;
    Swift::String v29 = v24;
    Swift::String v30 = v20;
    _CFObject.hash(into:)();
    Swift::String v52 = v20;
    if (v21)
    {
LABEL_28:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v31 = v21;
      _CFObject.hash(into:)();

      goto LABEL_31;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v32 = v24;
    unint64_t v33 = v21;
    uint64_t v34 = v22;
    uint64_t v27 = v23;
    id v35 = v23;
    Swift::String v52 = 0LL;
    if (v21) {
      goto LABEL_28;
    }
  }

  Hasher._combine(_:)(0);
LABEL_31:
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v36 = v50;
    _CFObject.hash(into:)();

    if (v27) {
      goto LABEL_33;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    uint64_t v38 = v51;
    if (v51) {
      goto LABEL_34;
    }
    goto LABEL_37;
  }

  Hasher._combine(_:)(0);
  if (!v27) {
    goto LABEL_36;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  char v37 = v27;
  _CFObject.hash(into:)();

  uint64_t v38 = v51;
  if (v51)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v39 = v38;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v73, v16);
  swift_bridgeObjectRelease();
LABEL_23:
  int v18 = v57;
  unint64_t v49 = v6;
  if (v57)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v73, v18);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  unint64_t v19 = v58;
  uint64_t v20 = v59;
  uint64_t v22 = v60;
  uint64_t v21 = v61;
  uint64_t v23 = v62;
  if (v58)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v24 = v20;
    uint64_t v25 = v22;
    uint64_t v26 = v21;
    uint64_t v27 = v23;
    uint64_t v28 = v19;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    Swift::String v29 = v23;
    Swift::String v30 = v20;
    id v31 = v22;
    unint64_t v32 = v21;
  }

  uint64_t v48 = v19;
  if (v20)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v33 = v20;
    _CFObject.hash(into:)();

    if (v22) {
      goto LABEL_31;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v22)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v34 = v22;
      _CFObject.hash(into:)();

      if (v21) {
        goto LABEL_32;
      }
LABEL_36:
      Hasher._combine(_:)(0);
      if (v23) {
        goto LABEL_33;
      }
      goto LABEL_37;
    }
  }

  Hasher._combine(_:)(0);
  if (!v21) {
    goto LABEL_36;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  id v35 = v21;
  _CFObject.hash(into:)();

  if (v23)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v36 = v23;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }

  v137 = (v18 - 1) & v18;
  v139 = v19;
  unsigned __int8 v15 = __clz(__rbit64(v18)) + (v19 << 6);
  while (1)
  {
    uint64_t v21 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v15);
    uint64_t v22 = *v21;
    unint64_t v5 = v21[1];
    uint64_t v23 = *(void *)(v10 + 56) + 48 * v15;
    uint64_t v9 = *(void *)v23;
    Swift::String_optional v4 = *(void *)(v23 + 8);
    unint64_t v6 = *(void *)(v23 + 16);
    uint64_t v8 = *(void *)(v23 + 24);
    unint64_t v7 = *(void **)(v23 + 32);
    unint64_t v24 = *(_BYTE *)(v23 + 40);
    uint64_t v25 = *v21 == v136._countAndFlagsBits && v5 == (void)object;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      if ((v24 & 1) != 0) {
        goto LABEL_124;
      }
      *(void *)v142 = v9;
      type metadata accessor for AnyKeyPath();
      swift_retain_n();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        *(void *)v142 = 0LL;
        *(void *)&v142[8] = 0xE000000000000000LL;
        _StringGuts.grow(_:)(57LL);
        v108._object = (void *)0x80000001839CF3A0LL;
        v108._uint64_t countAndFlagsBits = 0xD000000000000014LL;
        String.append(_:)(v108);
        v109._uint64_t countAndFlagsBits = AnyKeyPath.debugDescription.getter();
        String.append(_:)(v109);
        swift_bridgeObjectRelease();
        v110._uint64_t countAndFlagsBits = 0x2720646E612027LL;
        v110._object = (void *)0xE700000000000000LL;
        String.append(_:)(v110);
        v111._uint64_t countAndFlagsBits = AnyKeyPath.debugDescription.getter();
        String.append(_:)(v111);
        swift_bridgeObjectRelease();
        v112._uint64_t countAndFlagsBits = 0xD000000000000017LL;
        v112._object = (void *)0x80000001839CF3C0LL;
        String.append(_:)(v112);
        String.append(_:)(v136);
        v113._uint64_t countAndFlagsBits = 39LL;
        v113._object = (void *)0xE100000000000000LL;
        String.append(_:)(v113);
        goto LABEL_126;
      }

      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      return swift_release();
    }

    if ((v24 & 1) != 0)
    {
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 1);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 1);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }

    type metadata accessor for AnyKeyPath();
    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
    swift_bridgeObjectRetain();
    if ((MEMORY[0x186E1C1A4](v9, a1) & 1) == 0)
    {
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      swift_bridgeObjectRelease();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      goto LABEL_7;
    }

    swift_bridgeObjectRetain();
    uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v5);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      uint64_t v10 = v128;
LABEL_7:
      unint64_t v13 = v137;
      unint64_t v14 = v139;
      if (!v137) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }

    Swift::String v29 = swift_isUniquelyReferenced_nonNull_native();
    Swift::String v30 = *v130;
    *v130 = 0x8000000000000000LL;
    if ((v29 & 1) != 0)
    {
      id v31 = v30;
      goto LABEL_33;
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
    unint64_t v36 = static _DictionaryStorage.copy(original:)();
    v118 = v36;
    if (*(void *)(v30 + 16)) {
      break;
    }
LABEL_69:
    swift_bridgeObjectRelease();
    id v31 = v118;
LABEL_33:
    swift_bridgeObjectRelease();
    unint64_t v32 = *(void *)(v31 + 56) + 48 * v26;
    unint64_t v33 = v26;
    id v35 = *(void *)(v32 + 8);
    uint64_t v34 = *(void *)(v32 + 16);
    v123 = *(void *)(v32 + 24);
    v125 = *(void *)v32;
    v121 = *(void *)(v32 + 32);
    v119 = *(_BYTE *)(v32 + 40);
    specialized _NativeDictionary._delete(at:)(v33, v31);
    *v130 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v125, v35, v34, v123, v121, v119);
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
    unint64_t v13 = v137;
    unint64_t v14 = v139;
    uint64_t v10 = v128;
    if (!v137) {
      goto LABEL_9;
    }
LABEL_8:
    v137 = (v13 - 1) & v13;
    v139 = v14;
    unsigned __int8 v15 = __clz(__rbit64(v13)) | (v14 << 6);
    object = v136._object;
  }

  char v37 = v36;
  uint64_t v38 = (char *)(v36 + 64);
  uint64_t v39 = (char *)(v30 + 64);
  uint64_t v40 = (unint64_t)((1LL << *(_BYTE *)(v37 + 32)) + 63) >> 6;
  v114 = v30 + 64;
  if (v37 != v30 || v38 >= &v39[8 * v40])
  {
    memmove(v38, v39, 8 * v40);
    char v37 = v118;
  }

  uint64_t v41 = 0LL;
  *(void *)(v37 + 16) = *(void *)(v30 + 16);
  uint64_t v42 = 1LL << *(_BYTE *)(v30 + 32);
  v116 = v26;
  v117 = v30;
  if (v42 < 64) {
    uint64_t v43 = ~(-1LL << v42);
  }
  else {
    uint64_t v43 = -1LL;
  }
  uint64_t v44 = v43 & *(void *)(v30 + 64);
  v115 = (unint64_t)(v42 + 63) >> 6;
  while (2)
  {
    if (v44)
    {
      v124 = v41;
      v126 = (v44 - 1) & v44;
      uint64_t v45 = __clz(__rbit64(v44)) | (v41 << 6);
      uint64_t v47 = v117;
      Swift::String v46 = v118;
LABEL_46:
      uint64_t v48 = 16 * v45;
      unint64_t v49 = (uint64_t *)(*(void *)(v47 + 48) + 16 * v45);
      Swift::String v51 = *v49;
      Swift::String v50 = v49[1];
      Swift::String v52 = 48 * v45;
      uint64_t v53 = *(void *)(v47 + 56) + v52;
      unint64_t v54 = *(void *)v53;
      uint64_t v55 = *(void *)(v53 + 8);
      uint64_t v56 = *(void *)(v53 + 16);
      char v57 = *(void *)(v53 + 24);
      v122 = *(void *)(v53 + 32);
      uint64_t v58 = *(_BYTE *)(v53 + 40);
      v120 = v58;
      CFStringRef v59 = (void *)(*(void *)(v46 + 48) + v48);
      *CFStringRef v59 = v51;
      v59[1] = v50;
      uint64_t v60 = *(void *)(v46 + 56) + v52;
      *(void *)uint64_t v60 = v54;
      *(void *)(v60 + _Block_object_dispose((const void *)(v1 - 96), 8) = v55;
      *(void *)(v60 + 16) = v56;
      *(void *)(v60 + 24) = v57;
      *(void *)(v60 + 32) = v122;
      *(_BYTE *)(v60 + 40) = v58;
      swift_bridgeObjectRetain();
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v54, v55, v56, v57, v122, v120);
      uint64_t v26 = v116;
      uint64_t v41 = v124;
      uint64_t v44 = v126;
      continue;
    }

    break;
  }

  uint64_t v61 = v41 + 1;
  uint64_t v47 = v117;
  Swift::String v46 = v118;
  if (__OFADD__(v41, 1LL))
  {
    __break(1u);
    goto LABEL_121;
  }

  if (v61 >= v115) {
    goto LABEL_69;
  }
  unint64_t v62 = *(void *)(v114 + 8 * v61);
  uint64_t v63 = v41 + 1;
  if (v62) {
    goto LABEL_68;
  }
  uint64_t v63 = v41 + 2;
  if (v41 + 2 >= v115) {
    goto LABEL_69;
  }
  unint64_t v62 = *(void *)(v114 + 8 * v63);
  if (v62) {
    goto LABEL_68;
  }
  uint64_t v63 = v41 + 3;
  if (v41 + 3 >= v115) {
    goto LABEL_69;
  }
  unint64_t v62 = *(void *)(v114 + 8 * v63);
  if (v62) {
    goto LABEL_68;
  }
  uint64_t v63 = v41 + 4;
  if (v41 + 4 >= v115) {
    goto LABEL_69;
  }
  unint64_t v62 = *(void *)(v114 + 8 * v63);
  if (v62) {
    goto LABEL_68;
  }
  uint64_t v63 = v41 + 5;
  if (v41 + 5 >= v115) {
    goto LABEL_69;
  }
  unint64_t v62 = *(void *)(v114 + 8 * v63);
  if (v62) {
    goto LABEL_68;
  }
  uint64_t v63 = v41 + 6;
  if (v41 + 6 >= v115) {
    goto LABEL_69;
  }
  unint64_t v62 = *(void *)(v114 + 8 * v63);
  if (v62)
  {
LABEL_68:
    v124 = v63;
    v126 = (v62 - 1) & v62;
    uint64_t v45 = __clz(__rbit64(v62)) + (v63 << 6);
    goto LABEL_46;
  }

  uint64_t v64 = v41 + 7;
  if (v41 + 7 >= v115) {
    goto LABEL_69;
  }
  unint64_t v62 = *(void *)(v114 + 8 * v64);
  if (v62)
  {
    uint64_t v63 = v41 + 7;
    uint64_t v47 = v117;
    Swift::String v46 = v118;
    goto LABEL_68;
  }

  uint64_t v26 = v116;
  uint64_t v47 = v117;
  Swift::String v46 = v118;
  while (1)
  {
    uint64_t v63 = v64 + 1;
    if (__OFADD__(v64, 1LL)) {
      break;
    }
    if (v63 >= v115) {
      goto LABEL_69;
    }
    unint64_t v62 = *(void *)(v114 + 8 * v63);
    ++v64;
    if (v62) {
      goto LABEL_68;
    }
  }

    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v24 = *v23;
    uint64_t v25 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    unint64_t v24 = (-1LL << result) - 1;
  }

  *uint64_t v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  uint64_t v27 = __OFSUB__(v26, 1LL);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    Swift::String_optional v4 = (v8 - 1) & v8;
LABEL_5:
    unum_close();
  }

  uint64_t v9 = v7 + 4;
  if (v9 >= v5)
  {
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)Swift::String_optional v0 = MEMORY[0x18961AFF0];
    return;
  }

  uint64_t v8 = *(void *)(v1 + 8 * v9);
  if (v8)
  {
    unint64_t v6 = v9;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v6 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      break;
    }
    if (v6 >= v5) {
      goto LABEL_23;
    }
    uint64_t v8 = *(void *)(v1 + 8 * v6);
    ++v9;
    if (v8) {
      goto LABEL_22;
    }
  }

          unint64_t v32 = 512LL;
LABEL_27:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_76;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          char v37 = (int)POSIXErrorCode.rawValue.getter();
          uint64_t v38 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v39 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v34 = objc_msgSend(v38, sel_initWithDomain_code_userInfo_, v39, v37, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v40 = objc_msgSend(v34, sel_domain);
          uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
          uint64_t v43 = v42;

          if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v43 == v44)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_32;
          }

          LODWORD(v29) = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v29 & 1) != 0) {
            goto LABEL_32;
          }
          __break(1u);
          break;
      }

      goto LABEL_75;
    }

    unint64_t v33 = 4LL;
    switch((int)v29)
    {
      case 1:
      case 13:
        unint64_t v33 = 513LL;
        goto LABEL_36;
      case 2:
        goto LABEL_36;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_23;
      case 17:
        unint64_t v33 = 516LL;
        goto LABEL_36;
      case 28:
      case 69:
        unint64_t v33 = 640LL;
        goto LABEL_36;
      case 30:
        unint64_t v33 = 642LL;
        goto LABEL_36;
      case 63:
        unint64_t v33 = 514LL;
        goto LABEL_36;
      default:
        if ((_DWORD)v29 == 102)
        {
          swift_retain_n();
          id v35 = (id)a6;
          swift_retain_n();
          unint64_t v36 = v35;
          uint64_t v93 = 0LL;
          unint64_t v94 = 512LL;
        }

        else
        {
LABEL_23:
          unint64_t v33 = 512LL;
LABEL_36:
          unint64_t v94 = v33;
          swift_retain_n();
          uint64_t v45 = (id)a6;
          swift_retain_n();
          Swift::String v46 = v45;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
          {
LABEL_76:
            _StringGuts.grow(_:)(22LL);
            swift_bridgeObjectRelease();
            v99._uint64_t countAndFlagsBits = 0xD000000000000014LL;
            v99._object = (void *)0x80000001839C9190LL;
            LODWORD(v97) = v29;
            v88._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v88);
            swift_bridgeObjectRelease();
            LODWORD(v91) = 0;
            uint64_t v90 = 73LL;
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x1832C4218LL);
          }

          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v47 = (int)POSIXErrorCode.rawValue.getter();
          uint64_t v48 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          unint64_t v49 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          Swift::String v50 = objc_msgSend(v48, sel_initWithDomain_code_userInfo_, v49, v47, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v93 = (uint64_t)v50;
          Swift::String v51 = objc_msgSend(v50, sel_domain);
          Swift::String v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
          unint64_t v54 = v53;

          if (v52 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v54 != v55)
          {
            uint64_t v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            Swift::String v29 = v96;
            if ((v56 & 1) == 0)
            {
LABEL_75:
              __break(1u);
              goto LABEL_76;
            }

        uint64_t v45 = swift_slowAlloc();
        unint64_t v54 = MEMORY[0x18961AFE8];
        LOBYTE(v55) = 0;
        uint64_t v56 = v45;
        char v57 = 0x2000LL;
        uint64_t v58 = 0LL;
        _BPlistEncodingFormat.Writer.serializePlist(_:)(v5);
        unint64_t v1 = v46;
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(0LL, 0xC000000000000000LL);
        swift_release();
        break;
      default:
        goto LABEL_22;
    }
  }

  return v1;
}

  Swift::String v29 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  Swift::String v30 = String._bridgeToObjectiveCImpl()();
  if (a4)
  {
    id v31 = (void *)String._bridgeToObjectiveCImpl()();
    unint64_t v32 = v18;
    if (!v25) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }

  id v31 = 0LL;
  unint64_t v32 = v18;
  if (v25) {
LABEL_24:
  }
    uint64_t v25 = _ContiguousArrayBuffer._asCocoaArray()();
LABEL_26:
  unint64_t v33 = objc_msgSend(v32, sel_localizedStringForKey_value_table_localizations_, v29, v30, v31, v25, v40);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  unint64_t v36 = v35;

  if (!*(void *)(v41 + 16))
  {
    if ((v42 & 1) != 0
      || (String._bridgeToObjectiveCImpl()(),
          uint64_t v38 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v38))
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
  }

  swift_unknownObjectRetain();
  char v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v41);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v34 = specialized withVaList<A>(_:_:)(v37, (uint64_t)v34, v36, v14, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_32:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return v34;
}

    unint64_t v6 = ((-65535 << v7) - 1) & v6 | ((unsigned __int16)v16 << v7);
    v7 += 16;
    if (v7 >= 0x20u) {
      goto LABEL_36;
    }
  }

  uint64_t v8 = Data.Iterator.next()();
  if ((*(_WORD *)&v8 & 0x100) == 0)
  {
    value = v8.value;
    LOWORD(v10) = Data.Iterator.next()();
    if ((v10 & 0x100) == 0) {
      goto LABEL_17;
    }
  }

    *(void *)a7 = 0LL;
    *(void *)(a7 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
    *(_BYTE *)(a7 + 16) = -1;
    return result;
  }

  v9[5] = v21;
  swift_retain();
  swift_release();
  v9[6] = v22;
  swift_release();
  swift_release();
  if (v24 < *(void *)(v9[2] + 16LL))
  {
    specialized ContiguousArray._customRemoveLast()((uint64_t)&v34);
    if (v35 == 255)
    {
      specialized ContiguousArray.remove(at:)(*(void *)(*v16 + 16LL) - 1LL, (uint64_t)&v34);
      outlined consume of _XMLPlistEncodingFormat.Reference(v34, *((unint64_t *)&v34 + 1), v35);
    }

    else
    {
      outlined consume of _XMLPlistEncodingFormat.Reference?(v34, *((unint64_t *)&v34 + 1), v35);
    }
  }

  return swift_willThrow();
}

  __src[8] = (int)ucal_get() + 1LL;
  LOBYTE(__src[9]) = 0;
  if ((a2 & 8) == 0)
  {
LABEL_8:
    if ((a2 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v22);
          swift_bridgeObjectRelease();
LABEL_23:
          unint64_t v24 = v91;
          v76 = v2;
          if (v91)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v24);
            swift_bridgeObjectRelease();
          }

          else
          {
            Hasher._combine(_:)(0);
          }

          uint64_t v25 = v93;
          uint64_t v27 = v94;
          uint64_t v26 = v95;
          uint64_t v28 = v96;
          uint64_t v77 = v96;
          int v78 = v92;
          if (v92)
          {
            unint64_t v81 = v11;
            Swift::String v29 = v92;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            Swift::String v30 = v25;
            id v31 = v27;
            unint64_t v32 = v26;
            unint64_t v33 = v28;
            uint64_t v34 = v29;
            unint64_t v11 = v81;
            _CFObject.hash(into:)();
          }

          else
          {
            Hasher._combine(_:)(0);
            id v35 = v28;
            unint64_t v36 = v25;
            char v37 = v27;
            uint64_t v38 = v26;
          }

          char v3 = v76;
          unint64_t v81 = v26;
          uint64_t v39 = v11;
          if (v25)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v40 = v25;
            uint64_t v41 = v25;
            uint64_t v42 = v27;
            uint64_t v43 = v41;
            _CFObject.hash(into:)();

            uint64_t v27 = v42;
            unint64_t v79 = v42;
            if (v42)
            {
LABEL_31:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              uint64_t v44 = v27;
              _CFObject.hash(into:)();

              goto LABEL_34;
            }
          }

          else
          {
            uint64_t v40 = 0LL;
            Hasher._combine(_:)(0);
            unint64_t v79 = v27;
            if (v27) {
              goto LABEL_31;
            }
          }

          Hasher._combine(_:)(0);
LABEL_34:
          uint64_t v45 = v81;
          Swift::String v46 = v40;
          unint64_t v11 = v39;
          uint64_t v47 = v77;
          if (v81)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v48 = v45;
            _CFObject.hash(into:)();

            if (v47)
            {
LABEL_36:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              unint64_t v49 = v47;
              _CFObject.hash(into:)();

              goto LABEL_39;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            if (v47) {
              goto LABEL_36;
            }
          }

          Hasher._combine(_:)(0);
          unint64_t v49 = 0LL;
LABEL_39:
          Swift::String v50 = v81;
          Swift::String v51 = v79;

          Swift::String v52 = v97;
          if (v52)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v52);
            swift_bridgeObjectRelease();
          }

          else
          {
            Hasher._combine(_:)(0);
          }

          a2 = v80;
          uint64_t v53 = v98;
          if (v98)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v53);
            swift_bridgeObjectRelease();
            if (v99)
            {
LABEL_44:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_47:
              unint64_t v17 = v83;
              if (v100 == 2)
              {
                Hasher._combine(_:)(0);
              }

              else
              {
                unint64_t v54 = v100 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v54);
              }

              if (v101 == 2)
              {
                Hasher._combine(_:)(0);
              }

              else
              {
                uint64_t v55 = v101 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v55);
              }

              if (v102 == 2)
              {
                uint64_t v56 = 0;
              }

              else
              {
                uint64_t v56 = v102 & 1;
                Hasher._combine(_:)(1u);
              }

              Hasher._combine(_:)(v56);
              if (v103 == 2)
              {
                char v57 = 0;
              }

              else
              {
                uint64_t v58 = v103 & 1;
                Hasher._combine(_:)(1u);
                char v57 = v58;
              }

              Hasher._combine(_:)(v57);
              outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_60;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            if (v99) {
              goto LABEL_44;
            }
          }

          Hasher._combine(_:)(0);
          goto LABEL_47;
        }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      __break(1u);
LABEL_23:
      if (v7) {
        goto LABEL_24;
      }
LABEL_3:
      unint64_t v12 = v3[8];
      unint64_t v5 = v3[10];
      if (v12) {
        unint64_t v13 = v3[10];
      }
      else {
        unint64_t v13 = 0LL;
      }
      unint64_t v14 = v39;
      if (v39 < 0 || v13 < v39) {
        goto LABEL_66;
      }
      uint64_t v8 = v3[9];
      char v3 = (void *)v3[11];
      if (!v12 || !*(_WORD *)(v12 + 16))
      {
        Swift::String v29 = swift_unknownObjectRetain_n();
        uint64_t v26 = specialized Rope._endPath.getter(v29);
        uint64_t result = swift_unknownObjectRelease();
        unint64_t v6 = 0LL;
        Swift::String_optional v4 = 0LL;
        if (v12) {
          goto LABEL_36;
        }
        goto LABEL_57;
      }

      uint64_t v40 = (void *)v8;
      unint64_t v7 = *(unsigned __int8 *)(v12 + 18);
      if (!*(_BYTE *)(v12 + 18)) {
        break;
      }
      uint64_t result = swift_unknownObjectRetain_n();
      Swift::String_optional v4 = v39;
      unint64_t v14 = -15LL;
      uint64_t v8 = 24LL;
      unsigned __int8 v15 = v12;
      while (1)
      {
        int v18 = *(unsigned __int16 *)(v15 + 16);
        if (!*(_WORD *)(v15 + 16)) {
          break;
        }
        unint64_t v19 = *(void *)(v15 + 40);
        uint64_t v20 = v4 - v19;
        if (__OFSUB__(v4, v19)) {
          goto LABEL_61;
        }
        if (v20 > 0)
        {
          if ((_DWORD)v18 == 1) {
            goto LABEL_22;
          }
          uint64_t v21 = (uint64_t *)(v15 + 64);
          uint64_t v16 = 1LL;
          Swift::String_optional v4 = v20;
          while (1)
          {
            uint64_t v22 = *v21;
            v21 += 3;
            uint64_t v23 = v4 - v22;
            if (__OFSUB__(v4, v22)) {
              break;
            }
            if (v23 < 1) {
              goto LABEL_13;
            }
            ++v16;
            Swift::String_optional v4 = v23;
            if (v18 == v16) {
              goto LABEL_22;
            }
          }

          __break(1u);
          goto LABEL_60;
        }

        uint64_t v16 = 0LL;
LABEL_13:
        unint64_t v17 = (4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C;
        unint64_t v7 = ((-15LL << v17) - 1) & v7 | (v16 << v17);
        unint64_t v6 = *(void *)(v15 + 24 + 24 * v16);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        unsigned __int8 v15 = v6;
        if (!*(_BYTE *)(v6 + 18))
        {
          uint64_t v8 = v7 & 0xFFFFFFFFFFFFF0FFLL;
          unint64_t v14 = v39;
          goto LABEL_46;
        }
      }
    }

    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v8 = 0LL;
    Swift::String_optional v4 = v39;
    unint64_t v6 = v12;
LABEL_46:
    unint64_t v33 = *(unsigned __int16 *)(v6 + 16);
    if (!*(_WORD *)(v6 + 16))
    {
LABEL_72:
      if (!v4)
      {
        __break(1u);
        return result;
      }

  uint64_t v47 = type metadata accessor for Array();
  MEMORY[0x186E20D4C](MEMORY[0x189618458], v47);
  MEMORY[0x186E20D4C](MEMORY[0x189618490], v47);
  uint64_t v48 = v50;
  RangeReplaceableCollection<>.removeLast()();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v48, v34);
  swift_release();
  return swift_release();
}

    if (v5) {
      goto LABEL_56;
    }
LABEL_23:
    int v18 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
    unint64_t v17 = ((-15LL << v18) - 1) & v17 | (v19 << v18);
    unint64_t v13 = *(void *)(v13 + 24 + 24 * v19);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
  }

  while (*(_BYTE *)(v13 + 18));
  uint64_t v26 = v17 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v27 = *(unsigned __int16 *)(v13 + 16);
  if (*(_WORD *)(v13 + 16)) {
    goto LABEL_40;
  }
LABEL_49:
  if (v5)
  {
    __break(1u);
LABEL_51:
    uint64_t v27 = 0LL;
  }

    if (v4) {
      goto LABEL_56;
    }
LABEL_23:
    unsigned __int8 v15 = (4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C;
    unint64_t v14 = ((-15LL << v15) - 1) & v14 | (v16 << v15);
    uint64_t v10 = *(void *)(v10 + 24 + 24 * v16);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
  }

  while (*(_BYTE *)(v10 + 18));
  uint64_t v23 = v14 & 0xFFFFFFFFFFFFF0FFLL;
  unint64_t v24 = *(unsigned __int16 *)(v10 + 16);
  if (*(_WORD *)(v10 + 16)) {
    goto LABEL_40;
  }
LABEL_49:
  if (v4)
  {
    __break(1u);
LABEL_51:
    unint64_t v24 = 0LL;
  }

        uint64_t v27 = (4 * *(_BYTE *)(v21 + 18) + 8) & 0x3C;
        uint64_t v25 = ((-15LL << v27) - 1) & v25 | (v28 << v27);
        uint64_t v21 = *(void *)(v21 + 24 + 24 * v28);
        swift_unknownObjectRetain();
        uint64_t result = (void *)swift_unknownObjectRelease();
        if (!*(_BYTE *)(v21 + 18))
        {
          v25 &= 0xFFFFFFFFFFFFF0FFLL;
          int v18 = a3;
          char v37 = *(unsigned __int16 *)(v21 + 16);
          if (*(_WORD *)(v21 + 16)) {
            goto LABEL_53;
          }
LABEL_71:
          if (!v26)
          {
LABEL_72:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t v20 = v25 | (v37 << 8);
LABEL_46:
            swift_unknownObjectRetain();
            uint64_t v22 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v19, v20, v21, v23, v22);
            uint64_t result = (void *)swift_unknownObjectRelease_n();
            unint64_t v17 = v18 - v26;
            if (!__OFSUB__(v18, v26)) {
              goto LABEL_74;
            }
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
          }

          __break(1u);
LABEL_93:
          __break(1u);
          goto LABEL_94;
        }
      }
    }

    uint64_t result = (void *)swift_unknownObjectRetain_n();
    uint64_t v26 = a3;
    uint64_t v21 = v23;
    char v37 = *(unsigned __int16 *)(v23 + 16);
    if (!*(_WORD *)(v23 + 16)) {
      goto LABEL_71;
    }
LABEL_53:
    uint64_t v38 = *(void *)(v21 + 24);
    uint64_t v39 = v26 - v38;
    if (__OFSUB__(v26, v38)) {
      goto LABEL_93;
    }
    if (__OFADD__(v39, 1LL))
    {
LABEL_94:
      __break(1u);
    }

    else
    {
      if (v39 + 1 <= 0)
      {
        char v37 = 0LL;
        goto LABEL_72;
      }

      if ((_DWORD)v37 == 1)
      {
        v26 -= v38;
        goto LABEL_71;
      }

      uint64_t v40 = *(void *)(v21 + 48);
      uint64_t v16 = __OFSUB__(v39, v40);
      uint64_t v41 = v39 - v40;
      if (!v16)
      {
        if (!__OFADD__(v41, 1LL))
        {
          if (v41 + 1 < 1)
          {
            char v37 = 1LL;
            uint64_t v26 = v39;
            goto LABEL_72;
          }

          if ((_DWORD)v37 == 2)
          {
            uint64_t v26 = v41;
            goto LABEL_71;
          }

          uint64_t v42 = (void *)(v21 + 72);
          uint64_t v43 = 2LL;
          while (v37 != v43)
          {
            uint64_t v26 = v41 - *v42;
            if (__OFSUB__(v41, *v42)) {
              goto LABEL_90;
            }
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_91;
            }
            if (v26 + 1 < 1)
            {
              char v37 = v43;
              uint64_t v26 = v41;
              goto LABEL_72;
            }

            ++v43;
            v42 += 3;
            uint64_t v41 = v26;
            if (v37 == v43) {
              goto LABEL_71;
            }
          }

          goto LABEL_89;
        }

        goto LABEL_96;
      }
    }

    __break(1u);
LABEL_96:
    __break(1u);
    return result;
  }

  unint64_t v36 = swift_unknownObjectRetain_n();
  uint64_t v20 = specialized Rope._endPath.getter(v36);
  uint64_t result = (void *)swift_unknownObjectRelease();
  uint64_t v21 = 0LL;
  uint64_t v26 = 0LL;
  if (v23) {
    goto LABEL_46;
  }
  uint64_t v22 = 0LL;
  unint64_t v17 = a3;
LABEL_74:
  *a4 = v19;
  a4[1] = v20;
  a4[2] = v21;
  a4[3] = v22;
  a4[4] = v17;
  return result;
}

    unint64_t v5 = (v19 - 1) & v19;
    uint64_t v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_5:
    unint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    unint64_t v13 = *v11;
    unint64_t v12 = (void *)v11[1];
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v10, (uint64_t)v28);
    v27._uint64_t countAndFlagsBits = v13;
    v27._object = v12;
    v25[1] = v28[1];
    v25[2] = v28[2];
    v25[3] = v28[3];
    uint64_t v26 = v29;
    unint64_t v24 = v27;
    v25[0] = v28[0];
    v23._uint64_t countAndFlagsBits = 9LL;
    v23._object = (void *)0xE100000000000000LL;
    unint64_t v14 = v27;
    swift_bridgeObjectRetain();
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = 2112800LL;
    v15._object = (void *)0xE300000000000000LL;
    String.append(_:)(v15);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v25,  (uint64_t)v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v16._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 10LL;
    v17._object = (void *)0xE100000000000000LL;
    String.append(_:)(v17);
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    uint64_t result = outlined destroy of Any?( (uint64_t)&v24,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
  }

  uint64_t v20 = v18 + 4;
  if (v20 >= v6)
  {
LABEL_23:
    swift_release();
    v27._uint64_t countAndFlagsBits = 2683LL;
    v27._object = (void *)0xE200000000000000LL;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 125LL;
    v21._object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
    return v27._countAndFlagsBits;
  }

  unint64_t v19 = *(void *)(v2 + 8 * v20);
  if (v19)
  {
    uint64_t v8 = v20;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v8 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v2 + 8 * v8);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }

  swift_bridgeObjectRelease();
  outlined init with copy of (Hashable & Sendable)?( v8,  (uint64_t)&v186,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined init with copy of (Hashable & Sendable)?( v7,  (uint64_t)&v191,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (*((void *)&v187 + 1))
  {
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v186,  (uint64_t)&v181,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (*((void *)&v192 + 1))
    {
      unint64_t v7 = (uint64_t)v174;
      v178 = v193;
      v179 = v194;
      v180 = v195;
      v176 = v191;
      v177 = v192;
      unint64_t v24 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)&v181, (uint64_t)&v176);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v176);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v181);
      uint64_t result = outlined destroy of Any?( (uint64_t)&v186,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v24 & 1) != 0) {
        return result;
      }
      goto LABEL_30;
    }

    outlined destroy of AttributedString._AttributeValue((uint64_t)&v181);
    unint64_t v7 = (uint64_t)v174;
  }

  else
  {
    unint64_t v7 = (uint64_t)v174;
    if (!*((void *)&v192 + 1)) {
      return outlined destroy of Any?( (uint64_t)&v186,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    }
  }

  outlined destroy of Any?( (uint64_t)&v186,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_30:
  uint64_t v8 = v6[1];
  uint64_t v25 = v8 + 56;
  uint64_t v26 = 1LL << *(_BYTE *)(v8 + 32);
  if (v26 < 64) {
    uint64_t v27 = ~(-1LL << v26);
  }
  else {
    uint64_t v27 = -1LL;
  }
  uint64_t v28 = v27 & *(void *)(v8 + 56);
  v166 = (unint64_t)(v26 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v16 = 0LL;
  Swift::String v29 = a1;
  v163 = v8;
  v165 = v8 + 56;
  while (1)
  {
    if (v28)
    {
      Swift::String v30 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      id v31 = v30 | (v16 << 6);
      goto LABEL_54;
    }

    unint64_t v32 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
LABEL_176:
      __break(1u);
      goto LABEL_177;
    }

    if (v32 >= v166) {
      return swift_release();
    }
    unint64_t v33 = *(void *)(v25 + 8 * v32);
    ++v16;
    if (v33) {
      goto LABEL_53;
    }
    uint64_t v16 = v32 + 1;
    if (v32 + 1 >= v166) {
      return swift_release();
    }
    unint64_t v33 = *(void *)(v25 + 8 * v16);
    if (v33) {
      goto LABEL_53;
    }
    uint64_t v16 = v32 + 2;
    if (v32 + 2 >= v166) {
      return swift_release();
    }
    unint64_t v33 = *(void *)(v25 + 8 * v16);
    if (v33) {
      goto LABEL_53;
    }
    uint64_t v34 = v32 + 3;
    if (v34 >= v166) {
      return swift_release();
    }
    unint64_t v33 = *(void *)(v25 + 8 * v34);
    if (!v33)
    {
      while (1)
      {
        uint64_t v16 = v34 + 1;
        if (__OFADD__(v34, 1LL)) {
          break;
        }
        unint64_t v33 = *(void *)(v25 + 8 * v16);
        ++v34;
        if (v33) {
          goto LABEL_53;
        }
      }

  LOBYTE(v37[0]) = v22;
  return v21 | ((unint64_t)v22 << 32);
}

  __break(1u);
}

    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_5:
    unint64_t v12 = *(void (**)(timespec *))(*(void *)(v2 + 56) + 16 * v11);
    *(double *)&__tp.tv_sec = v3;
    swift_retain();
    v12(&__tp);
    swift_release();
  }

  unsigned __int8 v15 = v13 + 4;
  if (v15 < v8)
  {
    unint64_t v14 = *(void *)(v4 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        uint64_t v9 = v15 + 1;
        if (__OFADD__(v15, 1LL)) {
          break;
        }
        if (v9 >= v8) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v4 + 8 * v9);
        ++v15;
        if (v14) {
          goto LABEL_22;
        }
      }

    uint64_t v8 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    unint64_t v14 = 16 * v10;
    unsigned __int8 v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    int v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    uint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    uint64_t v23 = v22;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
LABEL_34:
      swift_bridgeObjectRelease();
      return 0LL;
    }

    unint64_t v24 = (void *)(*(void *)(a2 + 56) + 16 * v21);
    uint64_t v25 = v24[1];
    if (v25)
    {
      if (!v19) {
        return 0LL;
      }
      if (*v24 == v20 && v25 == v19)
      {
        uint64_t result = swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          return 0LL;
        }
      }
    }

    else if (v19)
    {
      goto LABEL_34;
    }
  }

  unint64_t v13 = v11 + 3;
  if (v13 >= v28) {
    return 1LL;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    Swift::String_optional v4 = v13;
    goto LABEL_22;
  }

  while (1)
  {
    Swift::String_optional v4 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v4 >= v28) {
      return 1LL;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }

    unint64_t v5 = (v19 - 1) & v19;
    uint64_t v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_5:
    unint64_t v11 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v10);
    unint64_t v13 = *v11;
    unint64_t v12 = (void *)v11[1];
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v1 + 56) + 72 * v10, (uint64_t)v28);
    v27._uint64_t countAndFlagsBits = v13;
    v27._object = v12;
    v25[1] = v28[1];
    v25[2] = v28[2];
    v25[3] = v28[3];
    uint64_t v26 = v29;
    unint64_t v24 = v27;
    v25[0] = v28[0];
    v23._uint64_t countAndFlagsBits = 9LL;
    v23._object = (void *)0xE100000000000000LL;
    unint64_t v14 = v27;
    swift_bridgeObjectRetain();
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = 2112800LL;
    v15._object = (void *)0xE300000000000000LL;
    String.append(_:)(v15);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v25,  (uint64_t)v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v16._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 10LL;
    v17._object = (void *)0xE100000000000000LL;
    String.append(_:)(v17);
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    uint64_t result = outlined destroy of Any?( (uint64_t)&v24,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
  }

  uint64_t v20 = v18 + 4;
  if (v20 >= v6)
  {
LABEL_23:
    swift_release();
    v27._uint64_t countAndFlagsBits = 2683LL;
    v27._object = (void *)0xE200000000000000LL;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 125LL;
    v21._object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
    return v27._countAndFlagsBits;
  }

  unint64_t v19 = *(void *)(v2 + 8 * v20);
  if (v19)
  {
    uint64_t v8 = v20;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v8 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v2 + 8 * v8);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }

    if (v7 <= v10 >> 16) {
      goto LABEL_32;
    }
    uint64_t v10 = String.UTF8View._foreignIndex(after:)();
LABEL_24:
    LOBYTE(v17[0]) = v14;
    unsigned __int8 v15 = v18(v17);
    if (v4)
    {
      swift_bridgeObjectRelease();
      return v16 & 1;
    }

    if ((v15 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = 1;
      return v16 & 1;
    }

    if (4 * v7 == v10 >> 14) {
      goto LABEL_27;
    }
  }

  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

    if (v13) {
      goto LABEL_109;
    }
LABEL_23:
    uint64_t v20 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
    unint64_t v19 = ((-15LL << v20) - 1) & v19 | (v21 << v20);
    uint64_t v8 = *(void *)(v8 + 24 + 24 * v21);
    swift_unknownObjectRetain();
    uint64_t result = (void *)swift_unknownObjectRelease();
  }

  while (*(_BYTE *)(v8 + 18));
  uint64_t v9 = v19 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v42 = *(unsigned __int16 *)(v8 + 16);
  if (!*(_WORD *)(v8 + 16)) {
    goto LABEL_96;
  }
LABEL_75:
  uint64_t v45 = *(void *)(v8 + 24);
  uint64_t v23 = __OFSUB__(v13, v45);
  uint64_t v43 = v13 - v45;
  if (v23) {
    goto LABEL_122;
  }
  if (!__OFADD__(v43, 1LL))
  {
    if (v43 + 1 >= 1)
    {
      if ((_DWORD)v42 == 1)
      {
        unint64_t v13 = v43;
        goto LABEL_96;
      }

      unint64_t v49 = (uint64_t *)(v8 + 48);
      uint64_t v44 = 1LL;
      while (1)
      {
        Swift::String v50 = *v49;
        v49 += 3;
        unint64_t v13 = v43 - v50;
        if (__OFSUB__(v43, v50)) {
          break;
        }
        if (__OFADD__(v13, 1LL)) {
          goto LABEL_116;
        }
        if (v13 + 1 < 1) {
          goto LABEL_101;
        }
        ++v44;
        uint64_t v43 = v13;
        if (v42 == v44) {
          goto LABEL_96;
        }
      }

  Swift::String v46 = 0LL;
LABEL_23:
  uint64_t v47 = objc_msgSend(v39, sel_URLForResource_withExtension_subdirectory_localization_, v43, v44, v45, v46);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if (v47)
  {
    URL.init(reference:)(v47, &v56);

    uint64_t v48 = v56;
    unint64_t v49 = v57;
  }

  else
  {
    uint64_t v48 = 0LL;
    unint64_t v49 = 0uLL;
  }

  *(void *)uint64_t v53 = v48;
  *(_OWORD *)(v53 + _Block_object_dispose((const void *)(v1 - 96), 8) = v49;
}

          __break(1u);
          return result;
        }

    swift_release();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    char v37 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v38 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v39 = objc_msgSend(v37, sel_initWithDomain_code_userInfo_, v38, 256, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v40 = objc_msgSend(v39, sel_domain);
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    uint64_t v43 = v42;

    if (v41 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v43 != v44)
    {
      Swift::String v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v46 & 1) != 0)
      {
LABEL_29:
        swift_willThrow();
        return;
      }

      __break(1u);
    }

    swift_bridgeObjectRelease_n();
    goto LABEL_29;
  }

  if (!v22) {
    goto LABEL_22;
  }
  unint64_t v24 = (void **)(v21 + 4);
  uint64_t v25 = v21 + 5;
  uint64_t v26 = v21 + 6;
LABEL_16:
  uint64_t v27 = *v26;
  uint64_t v28 = *v25;
  Swift::String v29 = *v24;
  swift_retain();
  Swift::String v30 = v29;
  swift_retain();
  swift_release();
  if ((a4 & 1) == 0)
  {
LABEL_61:
    a5->_uint64_t countAndFlagsBits = (uint64_t)v30;
    a5->_object = (void *)v28;
    a5[1]._uint64_t countAndFlagsBits = v27;
    return;
  }

  id v31 = MEMORY[0x186E20F44](v8);
  if (!v31) {
    goto LABEL_73;
  }
  unint64_t v32 = (objc_class *)v31;
  swift_retain();
  unint64_t v33 = v30;
  swift_retain();
  uint64_t v99 = v33;
  v100._uint64_t countAndFlagsBits = v28;
  __int128 v96 = v30;
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
  {
    uint64_t v98 = v8;
    char v95 = a5;
    v105 = v27;
    unint64_t v94 = v33;
    swift_retain();
    swift_retain();
    uint64_t v34 = URL.path(percentEncoded:)(1);
    id v35 = v34._countAndFlagsBits;
    uint64_t v104 = v34;
    swift_bridgeObjectRetain();
    uint64_t v97 = v32;
    if (String.count.getter() <= 1)
    {
      object = (unint64_t)v34._object;
    }

    else
    {
      object = (unint64_t)v34._object;
      if ((specialized BidirectionalCollection.last.getter(v34._countAndFlagsBits, (unint64_t)v34._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        object = (unint64_t)v104._object;
        id v35 = v104._countAndFlagsBits;
      }
    }

    uint64_t v101 = Set.init(minimumCapacity:)();
    uint64_t v60 = specialized Set._Variant.insert(_:)(&v103, 0x2FuLL);
    uint64_t v61 = v101;
    unint64_t v62 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000LL) == 0) {
      unint64_t v62 = v35 & 0xFFFFFFFFFFFFLL;
    }
    if (v62)
    {
      uint64_t v101 = v35;
      v102 = object;
      MEMORY[0x1895F8858](v60);
      uint64_t v91 = (uint64_t)&v101;
      __int128 v92 = v61;
      swift_bridgeObjectRetain();
      uint64_t v63 = (NSFileManagerDelegate *)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v90,  v35,  object);
      if (v64 == (NSValue *)1)
      {
        uint64_t v65 = v101;
        uint64_t v66 = v102;
        swift_bridgeObjectRetain();
        uint64_t v67 = (NSFileManagerDelegate *)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v65,  v66,  v61);
        uint64_t v69 = v68;
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v67 = v63;
        uint64_t v69 = v64;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v32 = v97;
      uint64_t v93 = v7;
      if (!v69)
      {
        swift_release();
        swift_release();
        uint64_t v77 = v27;
        int v78 = v94;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v67 = 0LL;
        uint64_t v69 = (NSValue *)0xE000000000000000LL;
        goto LABEL_52;
      }
    }

    else
    {
      uint64_t v93 = v7;
      swift_bridgeObjectRelease();
      uint64_t v67 = 0LL;
      uint64_t v69 = (NSValue *)0xE000000000000000LL;
      unint64_t v32 = v97;
    }

    swift_release();
    swift_release();
    uint64_t v77 = v27;
    int v78 = v94;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_52:
    swift_release();
    swift_release();

    a5 = v95;
    uint64_t v8 = v98;
    uint64_t v27 = v77;
    goto LABEL_53;
  }

  uint64_t v47 = objc_msgSend(v33, sel__parameterString);
  uint64_t v48 = v33;
  if (v47)
  {
    unint64_t v49 = v47;
    uint64_t v98 = v8;
    Swift::String v50 = v48;
    char v95 = (Swift::String *)static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    Swift::String v52 = v51;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (uint64_t v53 = objc_msgSend(v50, sel_path)) != 0)
    {
      unint64_t v54 = v53;
      uint64_t v97 = v32;
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      char v57 = v56;

      v104._uint64_t countAndFlagsBits = (uint64_t)v55;
      v104._object = v57;
      swift_bridgeObjectRetain();
      v58._uint64_t countAndFlagsBits = 59LL;
      v58._object = (void *)0xE100000000000000LL;
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v59._uint64_t countAndFlagsBits = (uint64_t)v95;
      v59._object = v52;
      String.append(_:)(v59);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      unint64_t v32 = v97;
    }

    else
    {
      v104._uint64_t countAndFlagsBits = 59LL;
      v104._object = (void *)0xE100000000000000LL;
      v70._uint64_t countAndFlagsBits = (uint64_t)v95;
      v70._object = v52;
      String.append(_:)(v70);
      swift_release();
      swift_release();
    }

    swift_bridgeObjectRelease();
    uint64_t v69 = (NSValue *)v104._object;
    uint64_t v67 = (NSFileManagerDelegate *)v104._countAndFlagsBits;
    uint64_t v8 = v98;
  }

  else
  {
    uint64_t v97 = v32;
    int v74 = objc_msgSend(v33, sel_path);
    if (v74)
    {
      double v75 = v74;
      uint64_t v67 = (NSFileManagerDelegate *)static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
      uint64_t v69 = v76;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      swift_release();

      uint64_t v67 = 0LL;
      uint64_t v69 = (NSValue *)0xE000000000000000LL;
    }

    unint64_t v32 = v97;
  }

    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  if (v24[0])
  {
    v24[0];
  }

  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    uint64_t v21 = (id)_nilObjCError;
  }

  return swift_willThrow();
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v12);
        swift_bridgeObjectRelease();
        unint64_t v13 = v46;
        if (!v46) {
          goto LABEL_16;
        }
        goto LABEL_23;
      }

      outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v40);
      unint64_t v14 = v40;
    }

    else
    {
      Hasher._combine(_:)(0);
      unint64_t v14 = v41;
    }

    outlined retain of LocalePreferences(v14);
    if (!v43) {
      goto LABEL_13;
    }
    goto LABEL_20;
  }

  Hasher._combine(_:)(0);
  return swift_unknownObjectRelease();
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v11 = v45;
  if (v45) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unint64_t v12 = v46;
  if (!v46)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t result = MEMORY[0x186E1BB2C](v19, v8);
  if (!result)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v21 = type metadata accessor for Array();
  MEMORY[0x186E20D4C](MEMORY[0x189618488], v21);
  Collection.first.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v18, 1LL, v8);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    MEMORY[0x186E20D4C](MEMORY[0x189618490], v21);
    RangeReplaceableCollection.removeFirst(_:)(1LL);
    goto LABEL_8;
  }

    unint64_t v7 = (v20 - 1) & v20;
    unint64_t v11 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_5:
    unint64_t v12 = 16 * v11;
    unint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + v12);
    unint64_t v14 = *v13;
    unsigned __int8 v15 = v13[1];
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 56) + v12);
    unint64_t v17 = *v16;
    int v18 = v16[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LOBYTE(v17) = a2(v14, v15, v17, v18);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      uint64_t v22 = 0LL;
LABEL_25:
      swift_release();
      return v22;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v15);
        swift_bridgeObjectRelease();
        uint64_t v16 = v49;
        if (!v49) {
          goto LABEL_16;
        }
        goto LABEL_23;
      }

      outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43);
      unint64_t v17 = v43;
    }

    else
    {
      Hasher._combine(_:)(0);
      unint64_t v17 = v44;
    }

    outlined retain of LocalePreferences(v17);
    if (!v46) {
      goto LABEL_13;
    }
    goto LABEL_20;
  }

  Hasher._combine(_:)(0);
  return swift_unknownObjectRelease();
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v14 = v48;
  if (v48) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unsigned __int8 v15 = v49;
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unsigned __int8 v15 = v49;
  if (v49) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v16 = v50;
  if (!v50)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v14 = v48;
  if (v48) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unsigned __int8 v15 = v49;
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

    uint64_t v16 = (v25 - 1) & v25;
    uint64_t v20 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_5:
    uint64_t v21 = (unint64_t *)(*(void *)(a4 + 48) + 16 * v20);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    uint64_t v34 = 0LL;
    memset(v33, 0, sizeof(v33));
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v33, v22, v23);
    swift_bridgeObjectRelease();
  }

  uint64_t v26 = v24 + 4;
  if (v26 < v17)
  {
    uint64_t v25 = *(void *)(v13 + 8 * v26);
    if (!v25)
    {
      while (1)
      {
        int v18 = v26 + 1;
        if (__OFADD__(v26, 1LL)) {
          break;
        }
        if (v18 >= v17) {
          goto LABEL_23;
        }
        uint64_t v25 = *(void *)(v13 + 8 * v18);
        ++v26;
        if (v25) {
          goto LABEL_22;
        }
      }

  unint64_t v24 = (unint64_t)self->_bytes + location;
  if (length < 0x80000
    || (uint64_t v25 = (void *)MEMORY[0x1895FD590], ((*MEMORY[0x1895FD590] - 1LL) & (v24 | v12)) != 0)
    || (malloc_default_zone(), malloc_zone_claimed_address()))
  {
    uint64_t v26 = (char *)v12;
LABEL_26:
    memmove((void *)v24, v26, length);
    goto LABEL_27;
  }

  uint64_t v27 = length & -*v25;
  NSCopyMemoryPages((const void *)v12, (void *)v24, v27);
  length -= v27;
  if (length)
  {
    uint64_t v26 = (char *)(v12 + v27);
    v24 += v27;
    goto LABEL_26;
  }

  free(v8);
  if ([v11 count]) {
    return v11;
  }
  else {
    return 0LL;
  }
}

    _NSKeyValueRemoveObservationInfoWatcher((uint64_t)&v20);

    return;
  }

  unsigned __int8 v15 = v12;
  uint64_t v16 = [v21 description];
  if ((v15 & 1) == 0) {
    _NSKeyValueRemoveObservationInfoForObject(v20);
  }
  unint64_t v17 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"An instance %p of class %@ was deallocated while key value observers were still registered with it. Current observation info: %@",  a1,  *IndexedIvars,  v16);
  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:v17 userInfo:0]);
  __break(1u);
}

  *a7 = a3 > v11 + v10;
}

  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"Unable to tokenize : %@", 0), 0 reason userInfo]);
  -[NSDateComponentsFormatter _NSDateComponentsFormatter_commonInit](v14, v15);
  return result;
}

      *(_BYTE *)(result + 16) = 1;
      id v31 = 0.0;
      unint64_t v32 = 0.0;
      if ((v13 & 0x8000000000000000LL) == 0 && (v3 & 0x8000000000000000LL) == 0 && v13 | v3)
      {
        if (!v3)
        {
          unint64_t v32 = 1.0;
          if ((v14 & 0x8000000000000000LL) == 0) {
            goto LABEL_28;
          }
          goto LABEL_36;
        }

        unint64_t v32 = (double)v13 / (double)v3;
      }

      if ((v14 & 0x8000000000000000LL) == 0)
      {
LABEL_28:
        if ((v2 & 0x8000000000000000LL) == 0 && v14 | v2)
        {
          if (v2) {
            id v31 = (double)v14 / (double)v2;
          }
          else {
            id v31 = 1.0;
          }
        }
      }

      *(_BYTE *)(result + 16) = 1;
      id v31 = 0.0;
      unint64_t v32 = 0.0;
      if ((v13 & 0x8000000000000000LL) == 0 && (v3 & 0x8000000000000000LL) == 0 && v13 | v3)
      {
        if (!v3)
        {
          unint64_t v32 = 1.0;
          if ((v14 & 0x8000000000000000LL) == 0) {
            goto LABEL_28;
          }
          goto LABEL_36;
        }

        unint64_t v32 = (double)v13 / (double)v3;
      }

      if ((v14 & 0x8000000000000000LL) == 0)
      {
LABEL_28:
        if ((v2 & 0x8000000000000000LL) == 0 && v14 | v2)
        {
          if (v2) {
            id v31 = (double)v14 / (double)v2;
          }
          else {
            id v31 = 1.0;
          }
        }
      }

        [a3 removeObject:v5];
      }

      return 3LL;
    }

    uint64_t v10 = _NSIsNSDictionary();
    if (v10) {
      uint64_t result = 4LL;
    }
    else {
      uint64_t result = 0LL;
    }
    if (v10 && a2)
    {
      unint64_t v11 = (void *)[v5 keyEnumerator];
      [a3 addObject:v5];
      while (1)
      {
        unint64_t v12 = [v11 nextObject];
        if (!v12) {
          break;
        }
        unint64_t v13 = v12;
        if ((_NSIsNSString() & 1) == 0 || !_NSIsPList([v5 objectForKey:v13], 1, a3)) {
          goto LABEL_33;
        }
      }

      [a3 removeObject:v5];
      return 4LL;
    }
  }

  return result;
}

  qword_18C5D6210 = (uint64_t)"Unable to allocate memory for string buffer";
  __break(1u);
  return result;
}

  objc_sync_exit(obj);
  CFRelease(v9);
  return v19;
}

unint64_t specialized Sequence<>.starts<A>(with:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v35 = v6;
  uint64_t v7 = 4 * v6;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v_Block_object_dispose((const void *)(v1 - 96), 8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  uint64_t v29 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v30 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v10 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v32 = v7;
  unint64_t v33 = v10;
  uint64_t v31 = 4 * v10;
  uint64_t v11 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v11) = 1;
  }
  uint64_t v12 = 4LL << v11;
  uint64_t v27 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v13 = 15LL;
  unint64_t v14 = 15LL;
  while (1)
  {
    if (v32 == v13 >> 14)
    {
      if (v31 != v14 >> 14)
      {
        uint64_t v4 = v14 & 0xC;
        unint64_t result = v14;
        if (v4 == v12) {
          goto LABEL_62;
        }
        goto LABEL_49;
      }

      return 1LL;
    }

    unint64_t v15 = v13 & 0xC;
    unint64_t v16 = v13;
    if (v15 == v9) {
      unint64_t v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a3, v4);
    }
    unint64_t v17 = v16 >> 16;
    if (v16 >> 16 >= v35) {
      break;
    }
    if ((v4 & 0x1000000000000000LL) != 0)
    {
      char v19 = String.UTF8View._foreignSubscript(position:)();
      if (v15 != v9) {
        goto LABEL_23;
      }
    }

    else if ((v4 & 0x2000000000000000LL) != 0)
    {
      unint64_t v37 = a3;
      uint64_t v38 = v30;
      char v19 = *((_BYTE *)&v37 + v17);
      if (v15 != v9) {
        goto LABEL_23;
      }
    }

    else
    {
      uint64_t v18 = v29;
      if ((a3 & 0x1000000000000000LL) == 0) {
        uint64_t v18 = _StringObject.sharedUTF8.getter();
      }
      char v19 = *(_BYTE *)(v18 + v17);
      if (v15 != v9)
      {
LABEL_23:
        if ((v4 & 0x1000000000000000LL) == 0) {
          goto LABEL_24;
        }
        goto LABEL_27;
      }
    }

    unint64_t v13 = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a3, v4);
    if ((v4 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

LABEL_27:
    if (v35 <= v13 >> 16) {
      goto LABEL_60;
    }
    unint64_t v13 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    BOOL v20 = v14 >> 14 == v31;
    if (v14 >> 14 == v31) {
      return v20;
    }
    unint64_t v21 = v14 & 0xC;
    unint64_t v22 = v14;
    if (v21 == v12) {
      unint64_t v22 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
    }
    unint64_t v23 = v22 >> 16;
    if (v22 >> 16 >= v33) {
      goto LABEL_59;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      char v25 = String.UTF8View._foreignSubscript(position:)();
      if (v21 != v12) {
        goto LABEL_40;
      }
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      unint64_t v37 = a1;
      uint64_t v38 = v28;
      char v25 = *((_BYTE *)&v37 + v23);
      if (v21 != v12) {
        goto LABEL_40;
      }
    }

    else
    {
      uint64_t v24 = v27;
      if ((a1 & 0x1000000000000000LL) == 0) {
        uint64_t v24 = _StringObject.sharedUTF8.getter();
      }
      char v25 = *(_BYTE *)(v24 + v23);
      if (v21 != v12)
      {
LABEL_40:
        if ((a2 & 0x1000000000000000LL) == 0) {
          goto LABEL_10;
        }
        goto LABEL_41;
      }
    }

    unint64_t v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
    if ((a2 & 0x1000000000000000LL) == 0)
    {
LABEL_10:
      unint64_t v14 = (v14 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_11;
    }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v17);
  swift_bridgeObjectRelease();
LABEL_28:
  BOOL v20 = v53;
  char v19 = v54;
  unint64_t v22 = v55;
  unint64_t v21 = v56;
  unint64_t v23 = v57;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v24 = v19;
    char v25 = v22;
    uint64_t v26 = v21;
    uint64_t v27 = v23;
    uint64_t v28 = v20;
    _CFObject.hash(into:)();
    if (v19) {
      goto LABEL_30;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v33 = v23;
    uint64_t v34 = v19;
    unint64_t v35 = v22;
    unint64_t v36 = v21;
    if (v19)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v29 = v19;
      _CFObject.hash(into:)();

      if (v22) {
        goto LABEL_31;
      }
      goto LABEL_36;
    }
  }

  Hasher._combine(_:)(0);
  if (v22)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v30 = v22;
    _CFObject.hash(into:)();

    if (v21) {
      goto LABEL_32;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v23) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    uint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  if (!v33)
  {
LABEL_16:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
    if (!v34) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }

  Hasher._combine(_:)(0);
  if (!v35)
  {
LABEL_12:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
    if (!v36) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  Hasher._combine(_:)(0);
  if (!v35)
  {
LABEL_12:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
    if (!v36) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  objc_msgSend(v8, sel_setDay_, v22);
  if ((v38 & 1) != 0)
  {
LABEL_10:
    if ((v39 & 1) != 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }

  __break(1u);
}

  if ((unint64_t)v49 >= rawValue[2])
  {
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
LABEL_347:
    __break(1u);
LABEL_348:
    __break(1u);
LABEL_349:
    __break(1u);
LABEL_350:
    __break(1u);
LABEL_351:
    __break(1u);
LABEL_352:
    __break(1u);
LABEL_353:
    __break(1u);
LABEL_354:
    __break(1u);
LABEL_355:
    __break(1u);
    goto LABEL_356;
  }

  uint64_t v56 = *(void *)(v55 + 16);
  if (!v56 || (char v57 = rawValue[v49 + 4], (v58 = *(void *)(v57 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v48 = MEMORY[0x18961AFE8];
    goto LABEL_79;
  }

  CFStringRef v59 = v56 + v58;
  if (__OFADD__(v56, v58)) {
    goto LABEL_357;
  }
  v203 = v48;
  if (v59 > 7)
  {
    CFStringRef v59 = 8LL;
LABEL_85:
    swift_bridgeObjectRetain();
    uint64_t v48 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v48 + 16) = v59;
    bzero((void *)(v48 + 32), 2 * v59);
    goto LABEL_86;
  }

  if (v59 < 0) {
    goto LABEL_391;
  }
  if (v59) {
    goto LABEL_85;
  }
  swift_bridgeObjectRetain();
  uint64_t v48 = MEMORY[0x18961AFE8];
LABEL_86:
  uint64_t v82 = 0LL;
  uint64_t v83 = v57 + 32;
  v84 = v48 + 32;
  while (1)
  {
    if (v82 == v58) {
      goto LABEL_350;
    }
    v85 = 0;
    v86 = 0LL;
    unint64_t v87 = v82 + 1;
    do
    {
      if (v56 == v86) {
        goto LABEL_292;
      }
      uint64_t v90 = v86 + v82;
      if (__OFADD__(v86, v82))
      {
LABEL_293:
        __break(1u);
        goto LABEL_294;
      }

      if (v90 >= v59)
      {
        if (v85) {
          goto LABEL_113;
        }
        v85 = *(unsigned __int16 *)(v83 + 2 * v82);
        if (*(_WORD *)(v83 + 2 * v82))
        {
          v85 = *(unsigned __int16 *)(v55 + 2 * v86 + 32);
          if (*(_WORD *)(v55 + 2 * v86 + 32)) {
            goto LABEL_113;
          }
        }
      }

      else
      {
        if (v90 < 0) {
          goto LABEL_327;
        }
        if ((unint64_t)v90 >= *(void *)(v48 + 16))
        {
LABEL_328:
          __break(1u);
LABEL_329:
          __break(1u);
LABEL_330:
          __break(1u);
LABEL_279:
          swift_bridgeObjectRelease();
LABEL_175:
          swift_bridgeObjectRelease();
          goto LABEL_178;
        }

        uint64_t v88 = 2 * v90;
        uint64_t v89 = v85
        v85 = HIWORD(v89);
        *(_WORD *)(v84 + v8_Block_object_dispose((const void *)(v1 - 96), 8) = v89;
      }

      ++v86;
    }

    while (v56 != v86);
    if (!v85) {
      goto LABEL_107;
    }
    uint64_t v60 = __OFADD__(v56, v82);
    uint64_t v91 = v56 + v82;
    if (v60) {
      goto LABEL_360;
    }
    if (v91 >= v59) {
      break;
    }
    if (v91 < 0) {
      goto LABEL_361;
    }
    *(_WORD *)(v84 + 2 * v91) = v85;
LABEL_107:
    uint64_t v82 = v87;
    if (v87 == v58)
    {
      __int128 v92 = *(void *)(v48 + 16);
      if (v92 && !*(_WORD *)(v84 + 2 * v92 - 2))
      {
        do
        {
          *(void *)(v48 + 16) = v92 - 1;
          if (v92 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v48 + 28 + 2 * v92--));
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_79:
      unint64_t v37 = v216;
LABEL_80:
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v48);
      if (!v54)
      {
        v80 = *(void *)(v48 + 16);
        swift_bridgeObjectRelease();
        if (!HIDWORD(v80))
        {
          _So9NSDecimala__length_setter(v80, (_DWORD *)v36);
          *(_DWORD *)v219 = *(_DWORD *)v37;
          *(_OWORD *)&v219[4] = *(_OWORD *)((char *)v37 + 4);
          unint64_t v81 = _So9NSDecimala__exponent_getter(v219);
LABEL_83:
          _So9NSDecimala__exponent_setter(v81, (_BYTE *)v36);
          _So9NSDecimala__isCompact_setter_0(0LL, (_DWORD *)v36);
          goto LABEL_180;
        }

        goto LABEL_392;
      }

      goto LABEL_178;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        uint64_t v7 = v8;
        if (v15 < v10) {
          goto LABEL_58;
        }
LABEL_28:
        if ((v18 & 0xC) == v13) {
          uint64_t v18 = _StringGuts._slowEnsureMatchingEncoding(_:)(v18, a4, a5);
        }
        char v19 = v18 >> 16;
        if (v18 >> 16 >= v12) {
          goto LABEL_54;
        }
        if ((a5 & 0x1000000000000000LL) != 0)
        {
          unint64_t v21 = String.UTF8View._foreignSubscript(position:)();
        }

        else if ((a5 & 0x2000000000000000LL) != 0)
        {
          uint64_t v34 = a4;
          unint64_t v35 = a5 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v21 = *((_BYTE *)&v34 + v19);
        }

        else
        {
          BOOL v20 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000LL) == 0) {
            BOOL v20 = _StringObject.sharedUTF8.getter();
          }
          unint64_t v21 = *(_BYTE *)(v20 + v19);
        }

        if ((v7 & 0xC) == v30) {
          uint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, v31, a3);
        }
        unint64_t v22 = v7 >> 16;
        if (v7 >> 16 >= v15) {
          goto LABEL_55;
        }
        if ((a3 & 0x1000000000000000LL) != 0)
        {
          uint64_t v7 = v31;
          uint64_t v24 = String.UTF8View._foreignSubscript(position:)();
        }

        else if ((a3 & 0x2000000000000000LL) != 0)
        {
          uint64_t v7 = v31;
          uint64_t v34 = v31;
          unint64_t v35 = a3 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v24 = *((_BYTE *)&v34 + v22);
        }

        else
        {
          unint64_t v23 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v7 = v31;
          if ((v31 & 0x1000000000000000LL) == 0) {
            unint64_t v23 = _StringObject.sharedUTF8.getter();
          }
          uint64_t v24 = *(_BYTE *)(v23 + v22);
        }

        char v25 = v21 == v24;
        unint64_t result = v25;
        if (v25)
        {
          v8 += 0x10000LL;
          uint64_t v9 = v29;
          char v25 = v28 == v10++;
          if (!v25) {
            continue;
          }
        }

        return result;
      }

      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      uint64_t v27 = String.UTF8View._foreignCount()();
      if (v27 < 0) {
        __break(1u);
      }
      uint64_t v9 = v27;
    }

    while (v27);
  }

  return 1LL;
}

        objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
        swift_unknownObjectRelease();

LABEL_28:
        swift_release();
        type metadata accessor for _NSSwiftCalendar();
        swift_deallocPartialClassInstance();
        return 0LL;
      }

      goto LABEL_58;
    }

  specialized Set._Variant.insert(_:)(&v3, 6uLL);
  if ((a1 & 0x200) == 0)
  {
LABEL_9:
    if ((a1 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  __break(1u);
  return result;
}

  swift_release();
  uint64_t v38 = v599;
  *(void *)&v525 = v599;
  if (specialized Range.isEmpty.getter(0LL, v471))
  {
    uint64_t v39 = (void *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v39, 0LL, (unint64_t *)&v541);
    uint64_t v40 = v541;
    uint64_t v41 = v542;
    uint64_t v42 = v543;
  }

  else
  {
    uint64_t v43 = *(void *)(v6 + 64);
    uint64_t v44 = *(void *)(v6 + 72);
    uint64_t v45 = *(void *)(v6 + 80);
    Swift::String v46 = *(void *)(v6 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v43, v44, v45, v46, &v541);
    v478 = v541;
    v465 = v542;
    uint64_t v42 = v543;
    swift_unknownObjectRelease();
    uint64_t v41 = v465;
    uint64_t v40 = v478;
  }

  v599 = v40;
  v600 = v41;
  uint64_t v47 = *(void *)(v6 + 64);
  uint64_t v48 = *(void *)(v6 + 72);
  unint64_t v49 = *(void *)(v6 + 80);
  Swift::String v50 = *(void *)(v6 + 88);
  Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  v466 = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0LL, Enum & 1, v47, v48, v49, v50, (uint64_t *)&v508);
  Swift::String v52 = v510;
  swift_unknownObjectRelease();
  if (v52 >= v42 || !*(void *)(v38 + 16))
  {
LABEL_84:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&v525 = v487;
    uint64_t v97 = *(void *)(v6 + 64);
    uint64_t v98 = *(void *)(v6 + 72);
    uint64_t v99 = *(void *)(v6 + 80);
    char v100 = *(void *)(v6 + 88);
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v487 - 1,  v466 & 1,  v97,  v98,  v99,  v100,  (uint64_t *)&v508);
    v493 = v508;
    v480 = v509;
    uint64_t v101 = v510;
    swift_unknownObjectRelease();
    v612[0] = v493;
    v612[1] = v480;
    v613 = v101;
    v102 = *(void *)(v6 + 64);
    v103 = *(void *)(v6 + 72);
    uint64_t v104 = *(void *)(v6 + 80);
    v105 = *(void *)(v6 + 88);
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.subscript.getter((unint64_t)v612, v102, v103, v104, v105);
    v107 = v106;
    swift_unknownObjectRelease();
    v108 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)( (uint64_t (*)(uint64_t, uint64_t, __int128 *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:),  0LL,  v107);
    v481 = v109;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v110 = *(void *)(v108 + 16);
    swift_bridgeObjectRetain();
    unint64_t result = Set.init(minimumCapacity:)();
    v111 = 0LL;
    *(void *)&v599 = result;
    v112 = 1LL << *(_BYTE *)(v108 + 32);
    v113 = -1LL;
    if (v112 < 64) {
      v113 = ~(-1LL << v112);
    }
    unint64_t v5 = v108 + 64;
    v114 = v113 & *(void *)(v108 + 64);
    v115 = (unint64_t)(v112 + 63) >> 6;
    while (1)
    {
      if (v114)
      {
        v116 = __clz(__rbit64(v114));
        v114 &= v114 - 1;
        v117 = v116 | (v111 << 6);
        goto LABEL_88;
      }

      v120 = v111 + 1;
      if (__OFADD__(v111, 1LL))
      {
        __break(1u);
LABEL_514:
        __break(1u);
LABEL_515:
        __break(1u);
LABEL_516:
        __break(1u);
LABEL_517:
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v306 = 0LL;
        v344 = 0LL;
        v346 = 0LL;
        v347 = 0;
        goto LABEL_331;
      }

      if (v120 >= v115) {
        break;
      }
      v121 = *(void *)(v5 + 8 * v120);
      ++v111;
      if (!v121)
      {
        v111 = v120 + 1;
        if (v120 + 1 >= v115) {
          break;
        }
        v121 = *(void *)(v5 + 8 * v111);
        if (!v121)
        {
          v111 = v120 + 2;
          if (v120 + 2 >= v115) {
            break;
          }
          v121 = *(void *)(v5 + 8 * v111);
          if (!v121)
          {
            v111 = v120 + 3;
            if (v120 + 3 >= v115) {
              break;
            }
            v121 = *(void *)(v5 + 8 * v111);
            if (!v121)
            {
              v111 = v120 + 4;
              if (v120 + 4 >= v115) {
                break;
              }
              v121 = *(void *)(v5 + 8 * v111);
              if (!v121)
              {
                v122 = v120 + 5;
                if (v122 >= v115) {
                  break;
                }
                v121 = *(void *)(v5 + 8 * v122);
                if (!v121)
                {
                  while (1)
                  {
                    v111 = v122 + 1;
                    if (__OFADD__(v122, 1LL)) {
                      break;
                    }
                    if (v111 >= v115) {
                      goto LABEL_108;
                    }
                    v121 = *(void *)(v5 + 8 * v111);
                    ++v122;
                    if (v121) {
                      goto LABEL_107;
                    }
                  }

  unint64_t v36 = *((void *)&v59 + 1);
  uint64_t v61 = *((double *)&v59 + 1);
  unint64_t v37 = *(void *)(*((void *)&v59 + 1) + 16LL);
  uint64_t v38 = MEMORY[0x18961AFE8];
  if (v37)
  {
    unint64_t v49 = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
    uint64_t v38 = v49;
    uint64_t v39 = (uint64_t *)(v36 + 32);
    while (1)
    {
      uint64_t v41 = *v39++;
      uint64_t v40 = v41;
      uint64_t v42 = v41 - 1;
      if (v41 < 1)
      {
        uint64_t v44 = v40 + 1;
        uint64_t v43 = v19 + v44;
        if (__OFADD__(v19, v44)) {
          goto LABEL_40;
        }
      }

      else
      {
        uint64_t v43 = v42 + v17;
        if (__OFADD__(v42, v17))
        {
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
      }

      Swift::String v46 = *(void *)(v49 + 16);
      uint64_t v45 = *(void *)(v49 + 24);
      if (v46 >= v45 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
      }
      *(void *)(v49 + 16) = v46 + 1;
      *(void *)(v49 + 8 * v46 + 32) = v43;
      if (!--v37)
      {
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v61);
        break;
      }
    }
  }

  outlined retain of Calendar.RecurrenceRule((uint64_t)v58);
  swift_bridgeObjectRetain();
  uint64_t v47 = swift_bridgeObjectRetain();
  uint64_t v48 = (void *)specialized Sequence.flatMap<A>(_:)(v47, v58, v38);
  swift_bridgeObjectRelease();
  outlined release of Calendar.RecurrenceRule((uint64_t)v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  dates->_rawValue = v48;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  specialized Set._Variant.insert(_:)(&v3, 6uLL);
  if ((v1 & 0x80) == 0)
  {
LABEL_9:
    if ((v1 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  Hasher._combine(_:)(0);
  if (!v15) {
    goto LABEL_28;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v24 = v15;
  _CFObject.hash(into:)();

  if (v34)
  {
LABEL_21:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    char v25 = v34;
    _CFObject.hash(into:)();

    goto LABEL_30;
  }

      *a2 = v6;
      return (id)v7;
    }

    __break(1u);
    __break(1u);
    __break(1u);
    goto LABEL_32;
  }

  __break(1u);
  return result;
}

          if ((v48 & 1) == 0) {
            goto LABEL_53;
          }
LABEL_28:
          uint64_t v44 = v10;
          Swift::String v46 = v13;
          BOOL v20 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
            goto LABEL_29;
          }
          goto LABEL_36;
        }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v18);
  swift_bridgeObjectRelease();
LABEL_28:
  unint64_t v21 = v61;
  BOOL v20 = v62;
  unint64_t v23 = v63;
  unint64_t v22 = v64;
  uint64_t v24 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v25 = v20;
    uint64_t v26 = v23;
    uint64_t v27 = v22;
    uint64_t v28 = v24;
    uint64_t v29 = v21;
    _CFObject.hash(into:)();
    if (v20) {
      goto LABEL_30;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v34 = v24;
    unint64_t v35 = v20;
    unint64_t v36 = v23;
    unint64_t v37 = v22;
    if (v20)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v30 = v20;
      _CFObject.hash(into:)();

      if (v23) {
        goto LABEL_31;
      }
      goto LABEL_36;
    }
  }

  Hasher._combine(_:)(0);
  if (v23)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v31 = v23;
    _CFObject.hash(into:)();

    if (v22) {
      goto LABEL_32;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v24) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v16);
  swift_bridgeObjectRelease();
LABEL_28:
  char v19 = v59;
  uint64_t v18 = v60;
  unint64_t v21 = v61;
  BOOL v20 = v62;
  unint64_t v22 = v63;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v23 = v18;
    uint64_t v24 = v21;
    char v25 = v20;
    uint64_t v26 = v22;
    uint64_t v27 = v19;
    _CFObject.hash(into:)();
    if (v18) {
      goto LABEL_30;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v32 = v22;
    unint64_t v33 = v18;
    uint64_t v34 = v21;
    unint64_t v35 = v20;
    if (v18)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v28 = v18;
      _CFObject.hash(into:)();

      if (v21) {
        goto LABEL_31;
      }
      goto LABEL_36;
    }
  }

  Hasher._combine(_:)(0);
  if (v21)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v29 = v21;
    _CFObject.hash(into:)();

    if (v20) {
      goto LABEL_32;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v22) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }

  Hasher._combine(_:)(0);
  if (v20 == 9)
  {
    Hasher._combine(_:)(0);
    if (v18 != 14) {
      goto LABEL_29;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v20);
    if (v18 != 14)
    {
LABEL_29:
      Hasher._combine(_:)(1u);
      Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v18);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
  }

  Hasher._combine(_:)(0);
LABEL_32:
  if (v22 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if (v23 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if (v24 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v16, v24 & 1);
  }

  if (v25 == 12)
  {
    Hasher._combine(_:)(0);
    if (!v21)
    {
LABEL_43:
      Hasher._combine(_:)(0);
      return;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v25);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (!v21) {
      goto LABEL_43;
    }
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
}

    uint64_t v9 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_7:
    unint64_t v16 = *(unsigned __int8 *)(v11 + v15);
    if (v13 < v16) {
      uint64_t v12 = v16;
    }
    if (v13 <= v16) {
      unint64_t v13 = v16;
    }
  }

  char v19 = v17 + 4;
  if (v19 >= v10) {
    goto LABEL_51;
  }
  uint64_t v18 = *(void *)(v2 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v10) {
      goto LABEL_51;
    }
    uint64_t v18 = *(void *)(v2 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }

  __break(1u);
LABEL_44:
  unint64_t v21 = 0LL;
  unint64_t v22 = 6LL;
  if (v10 > 6) {
    unint64_t v22 = v10;
  }
  unint64_t v23 = v22 - 6;
  while (v23 != v21)
  {
    BOOL v20 = *(void *)(result + 104 + 8 * v21++);
    if (v20)
    {
      uint64_t v7 = v21 + 5;
      goto LABEL_31;
    }
  }

    __break(1u);
    return result;
  }

  unint64_t v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v19, v12);
  v22(v15, v12);
  uint64_t v24 = v7[5];
  unint64_t v23 = v7[6];
  char v25 = v50;
  uint64_t v26 = v50 >> 62;
  v7[5] = v50;
  if (v25 >> 62)
  {
    if ((_DWORD)v26 != 1)
    {
      uint64_t v27 = 0LL;
      goto LABEL_14;
    }

    uint64_t v27 = *(void *)(v25 + 32);
    swift_retain();
  }

  else
  {
    uint64_t v27 = *(void *)(v25 + 64);
    swift_retain();
  }

    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  if (v6 >> 4 == 5)
  {
    uint64_t v7 = *a2;
    *(void *)(result + 4_Block_object_dispose((const void *)(v1 - 96), 8) = *a2;
    uint64_t v8 = __OFADD__(v7, 1LL);
    uint64_t v9 = v7 + 1;
    if (v8)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    *a2 = v9;
    uint64_t v10 = *(void *)(v3 + 16);
    if (v10)
    {
      unint64_t result = swift_retain();
      uint64_t v11 = 0LL;
      while (v11 < *(void *)(v3 + 16))
      {
        ++v11;
        uint64_t v12 = swift_retain();
        _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(v12, a2);
        unint64_t result = swift_release();
        if (v10 == v11) {
          return outlined consume of _BPlistEncodingFormat.Reference.Backing(v3, v4, v5, v6);
        }
      }

      __break(1u);
      goto LABEL_27;
    }
  }

  else if (*(void *)(result + 48) == -1LL)
  {
    char v19 = *a2;
    *(void *)(result + 4_Block_object_dispose((const void *)(v1 - 96), 8) = *a2;
    uint64_t v8 = __OFADD__(v19, 1LL);
    BOOL v20 = v19 + 1;
    if (v8)
    {
LABEL_31:
      __break(1u);
      return result;
    }

    *a2 = v20;
  }

  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v21);
  swift_bridgeObjectRelease();
LABEL_28:
  unint64_t v23 = v55;
  uint64_t v24 = v56;
  uint64_t v26 = v57;
  char v25 = v58;
  uint64_t v27 = v59;
  if (v55)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v28 = v24;
    uint64_t v29 = v26;
    uint64_t v30 = v25;
    uint64_t v31 = v27;
    uint64_t v32 = v23;
    _CFObject.hash(into:)();
    if (v24) {
      goto LABEL_30;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v37 = v27;
    uint64_t v38 = v24;
    uint64_t v39 = v26;
    uint64_t v40 = v25;
    if (v24)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      unint64_t v33 = v24;
      _CFObject.hash(into:)();

      if (v26) {
        goto LABEL_31;
      }
      goto LABEL_36;
    }
  }

  Hasher._combine(_:)(0);
  if (v26)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v34 = v26;
    _CFObject.hash(into:)();

    if (v25) {
      goto LABEL_32;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v27) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v19);
  swift_bridgeObjectRelease();
LABEL_28:
  unint64_t v21 = v53;
  unint64_t v22 = v54;
  uint64_t v24 = v55;
  unint64_t v23 = v56;
  char v25 = v57;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v26 = v22;
    uint64_t v27 = v24;
    uint64_t v28 = v23;
    uint64_t v29 = v25;
    uint64_t v30 = v21;
    _CFObject.hash(into:)();
    if (v22) {
      goto LABEL_30;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v35 = v25;
    unint64_t v36 = v22;
    unint64_t v37 = v24;
    uint64_t v38 = v23;
    if (v22)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v31 = v22;
      _CFObject.hash(into:)();

      if (v24) {
        goto LABEL_31;
      }
      goto LABEL_36;
    }
  }

  Hasher._combine(_:)(0);
  if (v24)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v32 = v24;
    _CFObject.hash(into:)();

    if (v23) {
      goto LABEL_32;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v25) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v21);
  swift_bridgeObjectRelease();
LABEL_28:
  unint64_t v23 = v60;
  uint64_t v24 = v61;
  uint64_t v26 = v62;
  char v25 = v63;
  uint64_t v27 = v64;
  Swift::String v50 = v62;
  Swift::String v51 = v64;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v28 = v24;
    uint64_t v29 = v26;
    uint64_t v30 = v25;
    uint64_t v31 = v25;
    uint64_t v32 = v27;
    unint64_t v33 = v23;
    _CFObject.hash(into:)();
    Swift::String v52 = v23;
    if (v24)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v34 = v24;
      _CFObject.hash(into:)();

      goto LABEL_33;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v35 = v27;
    unint64_t v36 = v24;
    unint64_t v37 = v26;
    uint64_t v30 = v25;
    uint64_t v38 = v25;
    Swift::String v52 = 0LL;
    if (v24) {
      goto LABEL_30;
    }
  }

  Hasher._combine(_:)(0);
LABEL_33:
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v39 = v50;
    _CFObject.hash(into:)();

    if (v30) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    uint64_t v41 = v51;
    if (v51) {
      goto LABEL_36;
    }
    goto LABEL_39;
  }

  Hasher._combine(_:)(0);
  if (!v30) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v40 = v30;
  _CFObject.hash(into:)();

  uint64_t v41 = v51;
  if (v51)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v42 = v41;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v73, v19);
  swift_bridgeObjectRelease();
LABEL_28:
  unint64_t v21 = v58;
  unint64_t v22 = v59;
  unint64_t v23 = v60;
  uint64_t v24 = v61;
  char v25 = v62;
  uint64_t v48 = v60;
  unint64_t v49 = v62;
  if (v58)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v26 = v22;
    uint64_t v27 = v23;
    uint64_t v28 = v24;
    uint64_t v29 = v24;
    uint64_t v30 = v25;
    uint64_t v31 = v21;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v32 = v25;
    unint64_t v33 = v22;
    uint64_t v34 = v23;
    uint64_t v28 = v24;
    unint64_t v35 = v24;
  }

  Swift::String v50 = v21;
  if (v22)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v36 = v22;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v37 = v48;
    _CFObject.hash(into:)();

    if (v28) {
      goto LABEL_36;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    uint64_t v39 = v49;
    if (v49) {
      goto LABEL_37;
    }
    goto LABEL_40;
  }

  Hasher._combine(_:)(0);
  if (!v28) {
    goto LABEL_39;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v38 = v28;
  _CFObject.hash(into:)();

  uint64_t v39 = v49;
  if (v49)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v40 = v39;
    _CFObject.hash(into:)();

    goto LABEL_41;
  }

  unint64_t v16 = *result;
  unint64_t result = (uint64_t *)TypeMetadata.descriptor.getter();
  uint64_t v18 = 0LL;
  char v19 = 1LL << *(_BYTE *)(v3 + 32);
  BOOL v20 = -1LL;
  if (v19 < 64) {
    BOOL v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & *(void *)(v3 + 64);
  unint64_t v22 = (unint64_t)(v19 + 63) >> 6;
  while (2)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      uint64_t v10 = v23 | (v18 << 6);
      goto LABEL_37;
    }

    uint64_t v26 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      goto LABEL_64;
    }
    if (v26 >= v22) {
      return 0LL;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v18;
    if (v27) {
      goto LABEL_59;
    }
    uint64_t v18 = v26 + 1;
    if (v26 + 1 >= v22) {
      return 0LL;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v18);
    if (v27) {
      goto LABEL_59;
    }
    uint64_t v18 = v26 + 2;
    if (v26 + 2 >= v22) {
      return 0LL;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v18);
    if (v27) {
      goto LABEL_59;
    }
    uint64_t v18 = v26 + 3;
    if (v26 + 3 >= v22) {
      return 0LL;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v18);
    if (v27) {
      goto LABEL_59;
    }
    uint64_t v18 = v26 + 4;
    if (v26 + 4 >= v22) {
      return 0LL;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v18);
    if (v27)
    {
LABEL_59:
      uint64_t v29 = __clz(__rbit64(v27));
      unint64_t v21 = (v27 - 1) & v27;
      uint64_t v10 = v29 + (v18 << 6);
LABEL_37:
      uint64_t v24 = *(void *)(v3 + 56) + 16 * v10;
      continue;
    }

    break;
  }

  uint64_t v28 = v26 + 5;
  if (v28 >= v22) {
    return 0LL;
  }
  uint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    uint64_t v18 = v28;
    goto LABEL_59;
  }

  while (1)
  {
    uint64_t v18 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v18 >= v22) {
      return 0LL;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v18);
    ++v28;
    if (v27) {
      goto LABEL_59;
    }
  }

    unint64_t v17 = v7 & 0xFC00FC00;
    if ((v7 & 0xFC00FC00) == 0xDC00D800) {
      uint64_t v18 = 32;
    }
    else {
      uint64_t v18 = 16;
    }
    unint64_t v35 = v8 - v18;
    if (v17 == -603924480) {
      char v19 = 32;
    }
    else {
      char v19 = 16;
    }
    uint64_t v34 = (unint64_t)v7 >> v19;
    if (v17 != -603924480) {
      goto LABEL_58;
    }
    unint64_t v16 = 0;
LABEL_35:
    BOOL v20 = (v7 + 1);
    if ((_BYTE)v7 != 0xFF) {
      goto LABEL_37;
    }
LABEL_5:
    uint64_t v8 = v35;
    uint64_t v7 = v34;
  }

  unint64_t v23 = (v7 & 0x3F) << 8;
  if ((unsigned __int16)v7 < 0x800u)
  {
    BOOL v20 = (v23 | ((unsigned __int16)v7 >> 6)) + 33217;
    goto LABEL_37;
  }

  if ((v7 & 0xF800) != 0xD800)
  {
    uint64_t v26 = ((v23 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8) | ((unsigned __int16)v7 >> 12);
    goto LABEL_46;
  }

  if ((v16 & 1) == 0)
  {
    uint64_t v28 = ((v7 & 0x3FF) << 10) | HIWORD(v7) & 0x3FF;
    uint64_t v26 = ((v28 + 0x10000) >> 4) & 0x3F00 | ((v28 + 0x10000) >> 18) | (((v28 >> 6) & 0x3F | (((v28 + 0x10000) & 0x3F) << 8)) << 16);
    uint64_t v27 = -2122219023;
    goto LABEL_47;
  }

  if ((unsigned __int16)v7 <= 0x7Fu)
  {
    BOOL v20 = (unsigned __int16)v7 + 1;
    goto LABEL_37;
  }

  uint64_t v29 = (v7 & 0x3F) << 8;
  if ((unsigned __int16)v7 >= 0x800u)
  {
    uint64_t v26 = ((unsigned __int16)v7 >> 12) | ((v29 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8);
LABEL_46:
    uint64_t v27 = 8487393;
LABEL_47:
    BOOL v20 = v26 + v27;
    goto LABEL_37;
  }

  BOOL v20 = (v29 | ((unsigned __int16)v7 >> 6)) + 33217;
LABEL_37:
  while (1)
  {
    v5[v9] = v20 - 1;
    unint64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      break;
    }
    ++v9;
    unint64_t v22 = v20 >= 0x100;
    v20 >>= 8;
    if (!v22)
    {
      uint64_t v9 = v21;
      goto LABEL_5;
    }
  }

  __break(1u);
LABEL_58:
  *a4 = 0LL;
  a4[1] = 0LL;
  return result;
}

  if (!*(void *)(v18 + 16))
  {
    outlined init with take of LocalePreferences?( (uint64_t)&v43 + 8,  (uint64_t)v45,  &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    outlined init with take of LocalePreferences?( (uint64_t)v45,  (uint64_t)&v49,  &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    if ((v50 & 1) != 0
      || (outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber(&v49, (uint64_t)v51),
          String._bridgeToObjectiveCImpl()(),
          uint64_t v39 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v39))
    {
      swift_bridgeObjectRelease();
      return a1;
    }
  }

  swift_unknownObjectRetain();
  uint64_t v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTm( v18,  v13,  v14,  (uint64_t)v42,  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n);
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of String.LocalizationOptions((uint64_t)&v43);
  a1 = specialized withVaList<A>(_:_:)(v38, (uint64_t)a1, v15, v13, v14);
  outlined release of String.LocalizationOptions((uint64_t)&v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  return a1;
}

        v3 += v9 << 16;
        uint64_t v10 = 5;
        goto LABEL_28;
      }
    }

    else
    {
      uint64_t v11 = _StringGuts.scalarAlignSlow(_:)(v3, v2, v1);
      char v3 = v11 & 0xFFFFFFFFFFFFFFF2LL | 1;
      uint64_t v6 = v11 >> 16;
      if ((v1 & 0x2000000000000000LL) == 0) {
        goto LABEL_15;
      }
    }

    v14[0] = v2;
    v14[1] = v1 & 0xFFFFFFFFFFFFFFLL;
    LODWORD(v9) = *((unsigned __int8 *)v14 + v6);
    if ((v9 & 0x80) == 0) {
      goto LABEL_26;
    }
    goto LABEL_17;
  }

  unint64_t result = (v3 & 0xFFFFFFFFFFFF0000LL) + 65549;
LABEL_29:
  v0[2] = result;
  return result;
}

      BOOL v20 = *((void *)v4 + 2);
      for (uint64_t i = v19; ; i >>= 8)
      {
        while (1)
        {
          unint64_t v22 = *((void *)v4 + 3);
          if (v20 >= v22 >> 1) {
            uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v22 > 1),  v20 + 1,  1,  v4);
          }
          *((void *)v4 + 2) = v20 + 1;
          v4[v20 + 32] = i - 1;
          ++v20;
          unint64_t v23 = i >= 0x100;
          i >>= 8;
          if (!v23) {
            goto LABEL_35;
          }
        }

        uint64_t v24 = 0LL;
        unint64_t v5 = 0LL;
        ++v20;
        if (i < 0x100) {
          break;
        }
      }

      unint64_t v22 = *((void *)v6 + 2);
      for (uint64_t i = v21; ; i >>= 8)
      {
        while (1)
        {
          uint64_t v24 = *((void *)v6 + 3);
          if (v22 >= v24 >> 1) {
            uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v24 > 1),  v22 + 1,  1,  v6);
          }
          *((void *)v6 + 2) = v22 + 1;
          v6[v22 + 32] = i - 1;
          ++v22;
          char v25 = i >= 0x100;
          i >>= 8;
          if (!v25) {
            goto LABEL_35;
          }
        }

        uint64_t v26 = 0LL;
        uint64_t v7 = 0LL;
        ++v22;
        if (i < 0x100) {
          break;
        }
      }

    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  return 30LL;
}

  __src[34] = (int)ucal_get();
  LOBYTE(__src[35]) = 0;
  if ((a2 & 0x80) == 0)
  {
LABEL_13:
    if ((a2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }

    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  uint64_t v30 = *v4;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    uint64_t v30 = specialized Rope._Node.copy()(*v4);
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    swift_unknownObjectRelease();
    *uint64_t v4 = v30;
    v4[1] = v32;
    v4[2] = v34;
  }

  swift_unknownObjectRetain();
  unint64_t v35 = specialized Rope._UnsafeHandle._removeChild(at:)(v16, (_WORD *)(v30 + 16), v30 + 24);
  unint64_t v37 = v36;
  uint64_t v39 = v38;
  unint64_t result = swift_unknownObjectRelease();
  uint64_t v40 = v4[1];
  BOOL v20 = __OFSUB__(v40, 1LL);
  uint64_t v41 = v40 - 1;
  if (v20) {
    goto LABEL_29;
  }
  v4[1] = v41;
  uint64_t v42 = v4[2];
  BOOL v20 = __OFSUB__(v42, v35);
  uint64_t v43 = v42 - v35;
  if (v20)
  {
LABEL_30:
    __break(1u);
    return result;
  }

  v4[2] = v43;
  *a1 = v35;
  a1[1] = v37;
  a1[2] = v39;
  *a2 = 1LL;
  a2[1] = v35;
  uint64_t v44 = *(unsigned __int16 *)(*v4 + 16);
  uint64_t v28 = v16 == v44;
LABEL_22:
  uint64_t v48 = v44 < 8;
  if (v28) {
    unint64_t v49 = 256;
  }
  else {
    unint64_t v49 = 0;
  }
  return v49 | v48;
}

      __break(1u);
      goto LABEL_28;
    }
  }

  if ((_DWORD)v17 != 15)
  {
    specialized Rope._Node._insertNode(_:at:)(v9, v8, v7, v5);
    swift_unknownObjectRelease();
    unint64_t v21 = 0LL;
LABEL_24:
    swift_unknownObjectRelease();
    return v21;
  }

  unint64_t v21 = specialized Rope._Node.split(keeping:)(7LL);
  unint64_t v23 = v22;
  char v25 = v24;
  if (v5 < 8)
  {
    specialized Rope._Node._insertNode(_:at:)(v9, v8, v7, v5);
LABEL_23:
    swift_unknownObjectRelease();
    goto LABEL_24;
  }

  uint64_t v30 = *(unsigned __int16 *)(*v4 + 16LL);
  swift_unknownObjectRetain();
  unint64_t result = swift_isUniquelyReferenced_nonNull();
  if ((result & 1) == 0)
  {
    uint64_t v31 = specialized Rope._Node.copy()(v21);
    unint64_t v23 = v32;
    char v25 = v33;
    unint64_t result = swift_unknownObjectRelease();
    unint64_t v21 = v31;
  }

  if (__OFADD__(v23, v8)) {
    goto LABEL_29;
  }
  if (!__OFADD__(v25, v7))
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    specialized Rope._UnsafeHandle._insertChild(_:at:)(v9, v8, v7, v5 - v30, (_WORD *)(v21 + 16), v21 + 24);
    swift_unknownObjectRelease_n();
    goto LABEL_23;
  }

  __break(1u);
  return result;
}

    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    char v19 = *v17;
    uint64_t v18 = v17[1];
    BOOL v20 = 8 * v15;
    unint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }

  char v25 = v23 + 3;
  if (v25 >= v13) {
    goto LABEL_28;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    uint64_t v9 = v25;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    char v19 = 8 * v15;
    BOOL v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    uint64_t *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    outlined copy of XMLPlistMap.Value(v20);
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }

  uint64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v64) {
    goto LABEL_28;
  }
LABEL_22:
  Hasher._combine(_:)(0);
  unint64_t v21 = v65;
  if (!v65)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    goto LABEL_30;
  }

          __break(1u);
          JUMPOUT(0x183445164LL);
        }

        goto LABEL_29;
      }

          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }

        __break(1u);
        goto LABEL_28;
      }

  uint64_t v58 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v16(v56, (uint64_t)v35, v0);
  if (v58 < 65)
  {
    uint64_t v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v67 = v56;
    uint64_t v61 = v33;
    v33((uint64_t)v67, v0);
    if (v66 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_40;
    }
  }

  else
  {
    v33((uint64_t)v56, v0);
  }

  v16(*(char **)(v8 - 192), (uint64_t)v35, v0);
  *(void *)(v8 - 96) = 0x7FFFFFFFFFFFFFFFLL;
  CFStringRef v59 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v60 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v59 & 1) == 0)
  {
    uint64_t v61 = v33;
    if (v60 > 63) {
      goto LABEL_38;
    }
LABEL_36:
    uint64_t v68 = *(void *)(v8 - 192);
    uint64_t v69 = dispatch thunk of BinaryInteger._lowWord.getter();
    v61(v68, v0);
    unint64_t v35 = *(char **)(v8 - 184);
    if (*(void *)(v8 - 96) < v69) {
      goto LABEL_37;
    }
    goto LABEL_40;
  }

  uint64_t v61 = v33;
  if (v60 <= 64) {
    goto LABEL_36;
  }
  unint64_t v62 = *(void *)(v8 - 320);
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v63 = *(void *)(v8 - 192);
  uint64_t v64 = dispatch thunk of static Comparable.< infix(_:_:)();
  v33(v62, v0);
  for (uint64_t i = v63; ; uint64_t i = v70)
  {
    v61(i, v0);
    unint64_t v35 = *(char **)(v8 - 184);
    if ((v64 & 1) == 0) {
      break;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    *(void *)(v8 - 120) = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v70 = *(void *)(v8 - 320);
    (*(void (**)(uint64_t, void, uint64_t))(v8 - 272))(v70, *(void *)(v8 - 192), v0);
    uint64_t v71 = *(void *)(v8 - 344);
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v64 = dispatch thunk of static Comparable.< infix(_:_:)();
    v61(v71, v0);
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    unint64_t v16 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_28:
    uint64_t v27 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v23);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    Hasher.init(_seed:)();
    String.hash(into:)();
    unint64_t result = Hasher._finalize()();
    uint64_t v30 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v31 = result & ~v30;
    uint64_t v32 = v31 >> 6;
    if (((-1LL << v31) & ~*(void *)(v18 + 8 * (v31 >> 6))) != 0)
    {
      BOOL v20 = __clz(__rbit64((-1LL << v31) & ~*(void *)(v18 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v33 = 0;
      uint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_119;
        }

        unint64_t v35 = v32 == v34;
        if (v32 == v34) {
          uint64_t v32 = 0LL;
        }
        v33 |= v35;
        unint64_t v36 = *(void *)(v18 + 8 * v32);
      }

      while (v36 == -1);
      BOOL v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }

    *(void *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    unint64_t v21 = (void *)(*(void *)(v12 + 48) + 16 * v20);
    uint64_t *v21 = v28;
    v21[1] = v29;
    ++*(void *)(v12 + 16);
  }

  uint64_t v26 = v24 + 3;
  if (v26 >= v17) {
    goto LABEL_64;
  }
  char v25 = v94[v26];
  if (v25)
  {
    char v19 = v26;
    goto LABEL_27;
  }

  while (1)
  {
    char v19 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v19 >= v17) {
      goto LABEL_64;
    }
    char v25 = v94[v19];
    ++v26;
    if (v25) {
      goto LABEL_27;
    }
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v64, v14);
  swift_bridgeObjectRelease();
LABEL_28:
  unint64_t v17 = v49;
  unint64_t v16 = v50;
  char v19 = v51;
  uint64_t v18 = v52;
  BOOL v20 = v53;
  if (v49)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v21 = v16;
    unint64_t v22 = v19;
    unint64_t v23 = v18;
    uint64_t v24 = v20;
    char v25 = v17;
    _CFObject.hash(into:)();
    if (v16) {
      goto LABEL_30;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v30 = v20;
    uint64_t v31 = v16;
    uint64_t v32 = v19;
    unint64_t v33 = v18;
    if (v16)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v26 = v16;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_31;
      }
      goto LABEL_36;
    }
  }

  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_32;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }

          unint64_t v15 = 512LL;
LABEL_31:
          uint64_t v27 = a2;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
          {
            _StringGuts.grow(_:)(22LL);
            swift_bridgeObjectRelease();
            v227 = 0xD000000000000014LL;
            v228 = 0x80000001839C9190LL;
            LODWORD(v225) = v14;
            goto LABEL_247;
          }

          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v28 = (int)POSIXErrorCode.rawValue.getter();
          uint64_t v29 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v30 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v26 = objc_msgSend(v29, sel_initWithDomain_code_userInfo_, v30, v28, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v31 = objc_msgSend(v26, sel_domain);
          uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
          uint64_t v34 = v33;

          if (v32 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v34 != v35)
          {
            unint64_t v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a2 = v27;
            if ((v37 & 1) != 0) {
              goto LABEL_39;
            }
            __break(1u);
          }

          swift_bridgeObjectRelease_n();
          a2 = v27;
          goto LABEL_39;
      }
    }

    if (!a5) {
      return;
    }
    unint64_t v16 = MEMORY[0x186E20F44](a6);
    if (!v16) {
      goto LABEL_248;
    }
    unint64_t v17 = (void *)v16;
    type metadata accessor for NSFileAttributeKey(0LL);
    lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
    swift_bridgeObjectRetain();
    uint64_t v18 = _NativeDictionary.bridged()();
    v227 = 0LL;
    char v19 = objc_msgSend( v17,  sel_setAttributes_ofItemAtPath_error_,  v18,  String._bridgeToObjectiveCImpl()(),  &v227);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if ((v19 & 1) != 0)
    {
      BOOL v20 = (id)v227;
      return;
    }

    if (v227)
    {
      char v25 = (id)v227;
      swift_willThrow();

      return;
    }

    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
LABEL_40:
    swift_willThrow();
    return;
  }

  v229 = 0LL;
  S_IRWXU.getter();
  S_IRWXG.getter();
  S_IRWXO.getter();
  uint64_t v11 = _mkpath_np();
  if (v11 == 20)
  {
    swift_bridgeObjectRetain();
    if (String.count.getter() >= 2)
    {
      unint64_t v21 = (void *)MEMORY[0x186E20F44](a6);
      if (!v21) {
        goto LABEL_248;
      }
      unint64_t v22 = v21;
      unint64_t v23 = objc_msgSend(v21, sel_fileExistsAtPath_, String._bridgeToObjectiveCImpl()());

      swift_unknownObjectRelease();
      if (v23)
      {
        uint64_t v24 = 516LL;
LABEL_91:
        __int128 v92 = a2;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v93 = (int)POSIXErrorCode.rawValue.getter();
          unint64_t v94 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          char v95 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v53 = objc_msgSend(v94, sel_initWithDomain_code_userInfo_, v95, v93, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          __int128 v96 = objc_msgSend(v53, sel_domain);
          uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
          uint64_t v99 = v98;

          if (v97 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v99 != v100)
          {
            v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a2 = v92;
            if ((v102 & 1) != 0)
            {
LABEL_99:
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v24,  a2,  a3,  v53,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v225,  0LL,  0LL);
              swift_willThrow();
              goto LABEL_100;
            }

            __break(1u);
          }

          swift_bridgeObjectRelease_n();
          a2 = v92;
          goto LABEL_99;
        }

        _StringGuts.grow(_:)(22LL);
        swift_bridgeObjectRelease();
        v227 = 0xD000000000000014LL;
        v228 = 0x80000001839C9190LL;
LABEL_247:
        v203._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v203);
        swift_bridgeObjectRelease();
        goto LABEL_248;
      }

      swift_bridgeObjectRetain();
      Path = String._deletingLastPathComponent()(a2, a3);
      uint64_t v40 = v39;
      swift_bridgeObjectRelease_n();
      if (String.count.getter() >= 2)
      {
        while (1)
        {
          uint64_t v41 = (void *)MEMORY[0x186E20F44](a6);
          if (!v41) {
            goto LABEL_248;
          }
          uint64_t v42 = v41;
          uint64_t v43 = objc_msgSend(v41, sel_fileExistsAtPath_, String._bridgeToObjectiveCImpl()());

          swift_unknownObjectRelease();
          if (v43) {
            break;
          }
          swift_bridgeObjectRetain();
          Path = String._deletingLastPathComponent()(Path, v40);
          uint64_t v45 = v44;
          swift_bridgeObjectRelease_n();
          uint64_t v40 = v45;
          if (String.count.getter() <= 1) {
            goto LABEL_56;
          }
        }

        a3 = v40;
        a2 = Path;
LABEL_90:
        uint64_t v24 = 512LL;
        goto LABEL_91;
      }
    }

  unint64_t result = 0.0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  return result;
}

    __break(1u);
    return result;
  }

  unint64_t v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v19, v12);
  v22(v15, v12);
  uint64_t v24 = v7[5];
  unint64_t v23 = v7[6];
  char v25 = v51;
  uint64_t v26 = v51 >> 62;
  v7[5] = v51;
  if (v25 >> 62)
  {
    if ((_DWORD)v26 != 1)
    {
      uint64_t v27 = 0LL;
      goto LABEL_14;
    }

    uint64_t v27 = *(void *)(v25 + 32);
    swift_retain();
  }

  else
  {
    uint64_t v27 = *(void *)(v25 + 64);
    swift_retain();
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v67, v17);
  swift_bridgeObjectRelease();
LABEL_28:
  BOOL v20 = v52;
  char v19 = v53;
  unint64_t v22 = v54;
  unint64_t v21 = v55;
  unint64_t v23 = v56;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v24 = v19;
    char v25 = v22;
    uint64_t v26 = v21;
    uint64_t v27 = v23;
    uint64_t v28 = v20;
    _CFObject.hash(into:)();
    if (v19) {
      goto LABEL_30;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v33 = v23;
    uint64_t v34 = v19;
    unint64_t v35 = v22;
    unint64_t v36 = v21;
    if (v19)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v29 = v19;
      _CFObject.hash(into:)();

      if (v22) {
        goto LABEL_31;
      }
      goto LABEL_36;
    }
  }

  Hasher._combine(_:)(0);
  if (v22)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v30 = v22;
    _CFObject.hash(into:)();

    if (v21) {
      goto LABEL_32;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v23) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
}

    free(v10);
LABEL_28:

    return 0LL;
  }

  Implementation = _NSGetBoolValueWithMethod;
  switch(*v10)
  {
    case '@':
      break;
    case 'A':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
      goto LABEL_27;
    case 'B':
      goto LABEL_38;
    case 'C':
      Implementation = _NSGetUnsignedCharValueWithMethod;
      goto LABEL_38;
    case 'I':
      Implementation = _NSGetUnsignedIntValueWithMethod;
      goto LABEL_38;
    default:
      if (v12 != 35) {
        goto LABEL_27;
      }
      break;
  }

  Implementation = method_getImplementation(v5);
  free(v11);
  if (!Implementation) {
    goto LABEL_28;
  }
  unint64_t v5 = 0LL;
  unint64_t v14 = 0LL;
LABEL_39:
  v17[1] = 0LL;
  _OWORD v17[2] = 0LL;
  v16.receiver = self;
  v16.super_class = (Class)&OBJC_CLASS___NSKeyValueMethodGetter;
  v17[0] = v5;
  return -[NSKeyValueAccessor initWithContainerClassID:key:implementation:selector:extraArguments:count:]( &v16,  sel_initWithContainerClassID_key_implementation_selector_extraArguments_count_,  a3,  a4,  Implementation,  Name,  v17,  v14);
}

  unint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

  a1[12] = a1[8];
  unint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  if (!v11) {
    return 0LL;
  }
  unint64_t v17 = v11;
  uint64_t v18 = (void *)[MEMORY[0x189603FC8] dictionary];
  [v18 setObject:a3 forKey:@"list"];
  [v18 setObject:a4 forKey:@"index"];
  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:v17 userInfo:v18]);
  return +[_NSPredicateUtilities now](v19, v20);
}

LABEL_41:
    if (v33 <= v14 >> 16) {
      goto LABEL_61;
    }
    unint64_t v14 = String.UTF8View._foreignIndex(after:)();
LABEL_11:
    if (v19 != v25) {
      return v20;
    }
  }

  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
LABEL_49:
  if (v33 <= result >> 16)
  {
    __break(1u);
LABEL_64:
    unint64_t result = String.UTF8View._foreignSubscript(position:)();
    if (v4 == v12) {
      goto LABEL_67;
    }
LABEL_53:
    if ((a2 & 0x1000000000000000LL) == 0) {
      return 0LL;
    }
    goto LABEL_54;
  }

  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_64;
  }
  if (!(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    unint64_t result = _StringObject.sharedUTF8.getter();
    if (v4 == v12) {
      goto LABEL_67;
    }
    goto LABEL_53;
  }

  if (v4 != v12) {
    goto LABEL_53;
  }
LABEL_67:
  unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
  unint64_t v14 = result;
  if ((a2 & 0x1000000000000000LL) == 0) {
    return 0LL;
  }
LABEL_54:
  if (v33 > v14 >> 16)
  {
    String.UTF8View._foreignIndex(after:)();
    return 0LL;
  }

  __break(1u);
  return result;
}

          uint64_t v31 = (v42 - 1) & v42;
          v76 = v43;
          unint64_t v33 = __clz(__rbit64(v42)) + (v43 << 6);
        }

        uint64_t v34 = 8 * v33;
        unint64_t v35 = *(void *)(*(void *)(v16 + 48) + 8 * v33);
        unint64_t v36 = 16 * v33;
        unint64_t v37 = (uint64_t *)(*(void *)(v16 + 56) + v36);
        uint64_t v39 = *v37;
        uint64_t v38 = v37[1];
        *(void *)(*(void *)(v22 + 48) + v34) = v35;
        uint64_t v40 = (void *)(*(void *)(v22 + 56) + v36);
        *uint64_t v40 = v39;
        v40[1] = v38;
        swift_bridgeObjectRetain();
        uint64_t v28 = v76;
      }
    }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    swift_release();
    swift_release();
    if (v87)
    {
LABEL_59:
      v103 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      uint64_t v104 = (uint64_t)v16;
LABEL_125:
      outlined destroy of Any?(v104, v103);
      v136 = v85;
      v137 = v87;
      goto LABEL_135;
    }

        (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v89, v90, v91);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0LL, 1LL, v91);
        goto LABEL_42;
      }

      *(_OWORD *)Swift::String v52 = *(_OWORD *)v53;
      uint64_t v55 = *((void *)v53 + 3);
      *((void *)v52 + 2) = *((void *)v53 + 2);
      *((void *)v52 + 3) = v55;
      uint64_t v56 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
      char v57 = &v52[v56];
      uint64_t v58 = &v53[v56];
      *(void *)char v57 = *(void *)&v53[v56];
      v57[8] = v53[v56 + 8];
      CFStringRef v59 = *(_OWORD *)&v53[v56 + 32];
      *((_OWORD *)v57 + 1) = *(_OWORD *)&v53[v56 + 16];
      *((_OWORD *)v57 + 2) = v59;
      *((_OWORD *)v57 + 3) = *(_OWORD *)&v53[v56 + 48];
      *(_OWORD *)(v57 + 57) = *(_OWORD *)&v53[v56 + 57];
      v57[73] = v53[v56 + 73];
      *(_DWORD *)(v57 + 74) = *(_DWORD *)&v53[v56 + 74];
      v57[78] = v53[v56 + 78];
      uint64_t v60 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v61 = v60[9];
      __dst = &v57[v61];
      unint64_t v62 = &v58[v61];
      uint64_t v63 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v64 = *(void *)(v63 - 8);
      uint64_t v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v65(v62, 1LL, v63))
      {
        uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v62, *(void *)(*(void *)(v66 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 16))(__dst, v62, v63);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(__dst, 0LL, 1LL, v63);
      }

      v109 = v60[10];
      v110 = &v57[v109];
      v111 = &v58[v109];
      *(void *)v110 = *(void *)v111;
      v110[8] = v111[8];
      v57[v60[11]] = v58[v60[11]];
      v112 = v60[12];
      v103 = &v57[v112];
      uint64_t v104 = &v58[v112];
LABEL_43:
      CFStringRef v103 = *v104;
      swift_storeEnumTagMultiPayload();
LABEL_44:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x10u:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      a1[9] = a2[9];
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_44;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      return a1;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      JSON5Scanner.DocumentReader.skipNumber()();
      JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)( 1u,  v0[3] - (void)v2,  (uint64_t)&v2[-v0[1]],  (void *)v0[1],  v0[2],  v0[3]);
      break;
  }

                Hasher._combine(_:)(0);
                goto LABEL_42;
              }
            }

            Hasher._combine(_:)(0);
            if (v56) {
              goto LABEL_38;
            }
            goto LABEL_41;
          }

    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  if (v13 >= a5 && v13 <= a6)
  {
    unint64_t result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    BOOL v20 = a3 + result;
    if (!__OFADD__(a3, result))
    {
      if (v20 >= a3 && v22 >= v20)
      {
        *(void *)(a7 + 16) = a1;
        *(void *)(a7 + 24) = a2;
        *(void *)(a7 + 32) = a3;
        *(void *)a7 = a3;
        *(void *)(a7 + _Block_object_dispose((const void *)(v1 - 96), 8) = v20;
        *(_BYTE *)(a7 + 40) = 0;
        return result;
      }

      goto LABEL_44;
    }

  unint64_t v16 = v6 | (v5 << 32);
  if (HIDWORD(v14) == 2)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (BYTE4(v16) != 2) {
      return 0LL;
    }
  }

  else
  {
    unint64_t v17 = v14;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (BYTE4(v16) == 2 || ((v17 ^ v16) & 0x100000000LL) != 0) {
      return 0LL;
    }
  }

  return 1LL;
}

  v345 = v12;
  uint64_t v40 = *(unsigned __int8 *)(v15 + 18);
  if (*(_BYTE *)(v15 + 18))
  {
    unint64_t result = swift_unknownObjectRetain_n();
    char v19 = -15LL;
    uint64_t v2 = 24LL;
    uint64_t v41 = v15;
    while (1)
    {
      uint64_t v43 = *(unsigned __int16 *)(v41 + 16);
      if (!*(_WORD *)(v41 + 16)) {
        goto LABEL_44;
      }
      uint64_t v44 = *(void *)(v41 + 40);
      uint64_t v45 = __OFSUB__(v13, v44);
      Swift::String v46 = v13 - v44;
      if (v45) {
        goto LABEL_386;
      }
      if (__OFADD__(v46, 1LL))
      {
LABEL_387:
        __break(1u);
LABEL_388:
        __break(1u);
LABEL_389:
        __break(1u);
LABEL_390:
        __break(1u);
LABEL_391:
        __break(1u);
LABEL_392:
        __break(1u);
LABEL_393:
        __break(1u);
LABEL_394:
        __break(1u);
LABEL_395:
        __break(1u);
LABEL_396:
        __break(1u);
LABEL_397:
        __break(1u);
LABEL_398:
        __break(1u);
LABEL_399:
        __break(1u);
LABEL_400:
        __break(1u);
LABEL_401:
        __break(1u);
LABEL_402:
        __break(1u);
LABEL_403:
        __break(1u);
LABEL_404:
        __break(1u);
LABEL_405:
        __break(1u);
LABEL_406:
        __break(1u);
LABEL_407:
        __break(1u);
LABEL_408:
        __break(1u);
LABEL_409:
        __break(1u);
LABEL_410:
        __break(1u);
        goto LABEL_411;
      }

      if (v46 + 1 >= 1) {
        break;
      }
      uint64_t v43 = 0LL;
LABEL_45:
      uint64_t v42 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
      uint64_t v40 = ((-15LL << v42) - 1) & v40 | (v43 << v42);
      unint64_t v5 = *(void *)(v41 + 24 + 24 * v43);
      swift_unknownObjectRetain();
      unint64_t result = swift_unknownObjectRelease();
      uint64_t v41 = v5;
      if (!*(_BYTE *)(v5 + 18)) {
        goto LABEL_74;
      }
    }

    if ((_DWORD)v43 != 1)
    {
      uint64_t v47 = (uint64_t *)(v41 + 64);
      uint64_t v48 = 1LL;
      while (1)
      {
        unint64_t v49 = *v47;
        v47 += 3;
        unint64_t v13 = v46 - v49;
        if (__OFSUB__(v46, v49)) {
          goto LABEL_368;
        }
        if (__OFADD__(v13, 1LL)) {
          goto LABEL_369;
        }
        if (v13 + 1 < 1) {
          break;
        }
        ++v48;
        Swift::String v46 = v13;
        if (v43 == v48) {
          goto LABEL_44;
        }
      }

      uint64_t v43 = v48;
      unint64_t v13 = v46;
      goto LABEL_45;
    }

    unint64_t v13 = v46;
LABEL_44:
    if (v13) {
      goto LABEL_385;
    }
    goto LABEL_45;
  }

  swift_unknownObjectRetain_n();
  unint64_t v5 = v15;
LABEL_74:
  unint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)( v13,  0,  (_WORD *)(v5 + 16),  (uint64_t *)(v5 + 24));
  if (result < 0) {
    goto LABEL_415;
  }
  char v57 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  char v19 = 0LL;
  uint64_t v24 = v40 & 0xFFFFFFFFFFFFF0FFLL | (v57 << 8);
  char v25 = v5;
  uint64_t v12 = v345;
  if (v15) {
    goto LABEL_24;
  }
LABEL_25:
  uint64_t v26 = *(void *)(v4 + 64);
  uint64_t v27 = *(void *)(v4 + 72);
  uint64_t v28 = *(void *)(v4 + 80);
  uint64_t v29 = *(void *)(v4 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v10, v24, v25, v26, v27, v28, v29);
  swift_unknownObjectRelease();
  uint64_t v30 = swift_bridgeObjectRetain();
  v317 = specialized _NativeDictionary.filter(_:)(v30);
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease_n();
  unint64_t v5 = v328;
  uint64_t v6 = a1;
LABEL_26:
  char v3 = *(void *)v5;
  v324 = *v6;
  uint64_t v31 = *v6 >> 11;
  uint64_t v32 = v6[4] >> 11;
  v327 = v32 - v31;
  if (v32 == v31)
  {
    v316 = v324 >> 11;
    unint64_t v33 = v324 >> 11;
LABEL_198:
    v159 = *(_OWORD *)(v3 + 32);
    v440 = *(_OWORD *)(v3 + 16);
    v441 = v159;
    v442 = *(_OWORD *)(v3 + 48);
    BigString.utf8.getter();
    v160 = BigString.UTF8View.count.getter();
    outlined release of Locale((uint64_t)v381);
    v161 = *(_OWORD **)v5;
    v162 = *(_OWORD *)(*(void *)v5 + 32LL);
    v365 = *(_OWORD *)(*(void *)v5 + 16LL);
    v366 = v162;
    v163 = *(_OWORD *)(v5 + 8);
    v367 = v161[3];
    v368 = v163;
    v164 = *(_OWORD *)(v5 + 40);
    v369 = *(_OWORD *)(v5 + 24);
    v370 = v164;
    v371 = *(_OWORD *)(v5 + 56);
    swift_unknownObjectRetain();
    BigString.init()();
    v165 = v383;
    v161[1] = v382;
    v161[2] = v165;
    v161[3] = v384;
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<Unicode.Scalar>);
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type EmptyCollection<Unicode.Scalar> and conformance EmptyCollection<A>,  &demangling cache variable for type metadata for EmptyCollection<Unicode.Scalar>,  MEMORY[0x1896195C0]);
    BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)();
    uint64_t v2 = *(void *)v5;
    v437 = v369;
    v438 = v370;
    v439 = v371;
    v433 = v365;
    v434 = v366;
    v436 = v368;
    v435 = v367;
    v457 = v371;
    v456 = v370;
    v454 = v368;
    v455 = v369;
    BigSubstring.UnicodeScalarView.base.getter();
    v166 = v395;
    *(_OWORD *)(v2 + 16) = v394;
    *(_OWORD *)(v2 + 32) = v166;
    *(_OWORD *)(v2 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = v396;
    swift_unknownObjectRelease();
    v167 = v455;
    *(_OWORD *)(v5 + _Block_object_dispose((const void *)(v1 - 96), 8) = v454;
    *(_OWORD *)(v5 + 24) = v167;
    v168 = v457;
    *(_OWORD *)(v5 + 40) = v456;
    *(_OWORD *)(v5 + 56) = v168;
    v169 = *(void *)v5;
    v170 = *(_OWORD *)(*(void *)v5 + 32LL);
    v430 = *(_OWORD *)(*(void *)v5 + 16LL);
    v431 = v170;
    v432 = *(_OWORD *)(v169 + 48);
    BigString.utf8.getter();
    v171 = BigString.UTF8View.count.getter();
    unint64_t result = outlined release of Locale((uint64_t)v385);
    v172 = v171 - v160;
    if (__OFSUB__(v171, v160)) {
      goto LABEL_393;
    }
    v173 = v327 + v172;
    if (__OFADD__(v327, v172)) {
      goto LABEL_394;
    }
    swift_bridgeObjectRetain();
    uint64_t v2 = MEMORY[0x18961AFF8];
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v31, v32, v173, v317, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v174 = *(void *)v5;
    v175 = *(_OWORD *)(*(void *)v5 + 32LL);
    v427 = *(_OWORD *)(*(void *)v5 + 16LL);
    v428 = v175;
    v429 = *(_OWORD *)(v174 + 48);
    BigString.utf8.getter();
    v176 = BigString.UTF8View.count.getter();
    unint64_t result = outlined release of Locale((uint64_t)v386);
    v177 = v176 - v160;
    if (__OFSUB__(v176, v160)) {
      goto LABEL_395;
    }
    uint64_t v45 = __OFADD__(v33, v177);
    v178 = v33 + v177;
    if (v45) {
      goto LABEL_396;
    }
    if (v178 < v316) {
      goto LABEL_397;
    }
    v179 = *(void *)(v174 + 80);
    if (!*(void *)(v174 + 64))
    {
      v217 = swift_unknownObjectRetain();
      specialized Rope._endPath.getter(v217);
      swift_unknownObjectRelease();
      goto LABEL_240;
    }

    v315 = v178;
    v180 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v180);
    swift_unknownObjectRelease_n();
    if (!v179) {
      goto LABEL_240;
    }
    v322 = (void *)v174;
    v181 = (__int128 *)(v174 + 16);
    v182 = *(_OWORD *)(v174 + 32);
    v424 = *(_OWORD *)(v174 + 16);
    v425 = v182;
    v426 = *(_OWORD *)(v174 + 48);
    BigString.utf8.getter();
    BigString.startIndex.getter();
    v183 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v2 = v184;
    v186 = v185;
    v188 = v187;
    outlined release of Locale((uint64_t)v387);
    v189 = *(_OWORD *)(v174 + 32);
    v421 = *(_OWORD *)(v174 + 16);
    v422 = v189;
    v423 = *(_OWORD *)(v174 + 48);
    unint64_t result = BigString.utf8.getter();
    if (__OFSUB__(v315, v316)) {
      goto LABEL_408;
    }
    v190 = BigString.UTF8View.index(_:offsetBy:)();
    v192 = v191;
    v194 = v193;
    v196 = v195;
    outlined release of Locale((uint64_t)v388);
    specialized Range.init(uncheckedBounds:)(v183, v2, v186, v188, v190, v192, v194, v196, v414);
    *(void *)&v413[0] = MEMORY[0x18961AFF0];
    v197 = v181[1];
    v418 = *v181;
    v419 = v197;
    v420 = v181[2];
    BigString.unicodeScalars.getter();
    v314 = v414[0];
    v198 = BigString.UnicodeScalarView.index(roundingDown:)();
    v200 = v199;
    uint64_t v2 = v201;
    v203 = v202;
    outlined release of Locale((uint64_t)v389);
    v204 = v181[1];
    v415 = *v181;
    v416 = v204;
    v323 = v181;
    v417 = v181[2];
    BigString.unicodeScalars.getter();
    v313 = v414[4];
    v205 = BigString.UnicodeScalarView.index(roundingUp:)();
    unint64_t result = outlined release of Locale((uint64_t)v390);
    *(void *)&v458 = v198;
    *((void *)&v458 + 1) = v200;
    *(void *)&v459 = v2;
    *((void *)&v459 + 1) = v203;
    unint64_t v13 = v198 >> 11;
    char v3 = v205 >> 11;
    if (v205 >> 11 < v198 >> 11) {
      goto LABEL_409;
    }
    unint64_t v5 = (uint64_t)v322;
    unint64_t v15 = v322[8];
    uint64_t v89 = v322[10];
    if (v15) {
      v206 = v322[10];
    }
    else {
      v206 = 0LL;
    }
    if (v206 < v13) {
      goto LABEL_410;
    }
    v207 = v322[9];
    uint64_t v10 = v322[11];
    if (!v15 || v13 >= v89 || !*(_WORD *)(v15 + 16))
    {
      swift_retain_n();
      v218 = swift_unknownObjectRetain_n();
      uint64_t v2 = specialized Rope._endPath.getter(v218);
      swift_unknownObjectRelease();
      char v19 = 0LL;
      v208 = 0LL;
      if (!v15) {
        goto LABEL_373;
      }
      goto LABEL_242;
    }

    v341 = (void *)v322[9];
    uint64_t v40 = *(unsigned __int8 *)(v15 + 18);
    if (!*(_BYTE *)(v15 + 18))
    {
      swift_unknownObjectRetain_n();
      unint64_t result = swift_retain_n();
      v208 = v13;
      char v19 = v15;
LABEL_327:
      uint64_t v2 = *(unsigned __int16 *)(v19 + 16);
      if (!*(_WORD *)(v19 + 16))
      {
        unint64_t v5 = (uint64_t)v322;
        goto LABEL_334;
      }

      v295 = *(void *)(v19 + 24);
      uint64_t v53 = v208 - v295;
      unint64_t v5 = (uint64_t)v322;
      if (__OFSUB__(v208, v295)) {
        goto LABEL_421;
      }
      if (__OFADD__(v53, 1LL)) {
        goto LABEL_422;
      }
      if (v53 + 1 <= 0)
      {
        uint64_t v2 = 0LL;
      }

      else
      {
        if ((_DWORD)v2 != 1) {
          goto LABEL_352;
        }
        v208 -= v295;
LABEL_334:
        if (v208)
        {
          __break(1u);
LABEL_336:
          if (v19 < v315) {
            goto LABEL_337;
          }
LABEL_339:
          LOBYTE(v89) = 0;
          goto LABEL_340;
        }
      }

      goto LABEL_372;
    }

    swift_unknownObjectRetain_n();
    unint64_t result = swift_retain_n();
    v208 = v13;
    uint64_t v2 = v15;
    while (1)
    {
      v210 = *(unsigned __int16 *)(v2 + 16);
      if (!*(_WORD *)(v2 + 16)) {
        goto LABEL_217;
      }
      v211 = *(void *)(v2 + 40);
      v212 = v208 - v211;
      if (__OFSUB__(v208, v211)) {
        goto LABEL_390;
      }
      if (__OFADD__(v212, 1LL)) {
        goto LABEL_391;
      }
      if (v212 + 1 <= 0)
      {
        v210 = 0LL;
      }

      else
      {
        if ((_DWORD)v210 == 1)
        {
          v208 -= v211;
          goto LABEL_217;
        }

        v213 = *(void *)(v2 + 64);
        uint64_t v45 = __OFSUB__(v212, v213);
        v214 = v212 - v213;
        if (v45) {
          goto LABEL_406;
        }
        if (__OFADD__(v214, 1LL)) {
          goto LABEL_407;
        }
        if (v214 + 1 < 1)
        {
          v210 = 1LL;
          v208 = v212;
        }

        else
        {
          if ((_DWORD)v210 == 2)
          {
            v208 = v214;
LABEL_217:
            if (v208) {
              goto LABEL_389;
            }
            goto LABEL_218;
          }

          v215 = (void *)(v2 + 88);
          v216 = 2LL;
          while (1)
          {
            if (v210 == v216) {
              goto LABEL_382;
            }
            v208 = v214 - *v215;
            if (__OFSUB__(v214, *v215)) {
              goto LABEL_383;
            }
            if (__OFADD__(v208, 1LL)) {
              goto LABEL_384;
            }
            if (v208 + 1 < 1) {
              break;
            }
            ++v216;
            v215 += 3;
            v214 = v208;
            if (v210 == v216) {
              goto LABEL_217;
            }
          }

          v210 = v216;
          v208 = v214;
        }
      }

  if ((uint64_t)v11 < (uint64_t)result)
  {
    __break(1u);
    goto LABEL_73;
  }

  if (__OFADD__(v7, 1LL))
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  *(void *)(v0 + 24) = v7 + 1;
LABEL_44:
  *(void *)(v0 + 64) = result;
  *(void *)(v0 + 72) = v11;
  *(_BYTE *)(v0 + 80) = v7 == v8;
  if (v3 != v1)
  {
    LOBYTE(v7) = 1;
    goto LABEL_70;
  }

  uint64_t v7 = 1LL;
  uint64_t v12 = 1;
  if ((*(_BYTE *)(v0 + 106) & 1) == 0) {
    goto LABEL_69;
  }
LABEL_46:
  unint64_t v1 = *(void *)(v0 + 56);
  uint64_t v8 = *(void *)(v0 + 40);
  if (v1 == v8)
  {
    unint64_t result = 0LL;
    uint64_t v11 = 0LL;
LABEL_68:
    uint64_t v12 = 0;
    *unint64_t v5 = result;
    void *v6 = v11;
    *uint64_t v4 = v1 == v8;
    goto LABEL_69;
  }

  BOOL v20 = *(void *)(v0 + 48);
  unint64_t v21 = *(_BYTE *)(v20 + 24);
  unint64_t result = (char *)objc_msgSend(*(id *)(v20 + 16), sel_rangeAtIndex_, *(void *)(v0 + 56));
  uint64_t v11 = &result[v22];
  unint64_t v16 = __OFADD__(result, v22);
  if ((v21 & 1) != 0)
  {
    if (v16)
    {
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }

    if ((uint64_t)v11 < (uint64_t)result)
    {
      __break(1u);
LABEL_56:
      if (v16)
      {
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }

      if ((uint64_t)v11 < (uint64_t)result)
      {
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }

      goto LABEL_58;
    }

          __break(1u);
          goto LABEL_42;
        }
      }

      __break(1u);
      goto LABEL_41;
    }

    if (v11 == v4) {
      goto LABEL_30;
    }
LABEL_20:
    unint64_t v16 = *(void **)(v1 + 72);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v1 + 72) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
      *(void *)(v1 + 72) = v16;
    }

    char v19 = v16[2];
    uint64_t v18 = v16[3];
    BOOL v20 = v19 + 1;
    if (v19 >= v18 >> 1)
    {
      uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v18 > 1),  v19 + 1,  1,  v16);
      BOOL v20 = v19 + 1;
      unint64_t v16 = v29;
    }

    v16[2] = v20;
    v16[v19 + 4] = v3;
    *(void *)(v1 + 72) = v16;
    uint64_t v12 = *(char **)(v1 + 64);
    unint64_t v21 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v1 + 64) = v12;
    if ((v21 & 1) == 0)
    {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v12 + 2) + 1LL,  1,  v12);
      *(void *)(v1 + 64) = v12;
    }

    unint64_t v23 = *((void *)v12 + 2);
    unint64_t v22 = *((void *)v12 + 3);
    uint64_t v24 = v23 + 1;
    if (v23 >= v22 >> 1)
    {
      uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v22 > 1),  v23 + 1,  1,  v12);
      uint64_t v24 = v23 + 1;
      uint64_t v12 = v30;
    }

    *((void *)v12 + 2) = v24;
    *(_DWORD *)&v12[4 * v23 + 32] = v4;
    goto LABEL_29;
  }

  if (v5 == 1) {
    goto LABEL_20;
  }
  if (v5 == 6)
  {
    uint64_t v4 = 0;
    goto LABEL_11;
  }

  if (*(_DWORD *)(v1 + 56))
  {
    uint64_t v4 = 0;
LABEL_31:
    bzero(&v31, 0x878uLL);
    char v25 = statfs(v2, &v31);
    *(_BYTE *)(v1 + 80) = (v25 | v31.f_flags & 0x8000) == 0;
    *(_DWORD *)(v1 + 56) = v4;
  }

      *(void *)&v30[0] = 1024LL;
      if (v6 <= 1.59271755e13) {
        uint64_t v24 = v6;
      }
      else {
        uint64_t v24 = 1.59271755e13;
      }
      uint64_t v10 = fmax(v24, -2.11845067e11);
      v80 = v10;
      v12(v84, (uint64_t *)v30, &v80, ObjectType, v8);
      memcpy(v83, v84, 0x11AuLL);
      unint64_t result = (double *)outlined release of DateComponents((uint64_t)v83);
      if (LOBYTE(v83[31]) == 1)
      {
        if ((v28 & 1) != 0)
        {
          if (v6 >= v17) {
            goto LABEL_53;
          }
        }

        else if (v17 >= v6)
        {
          goto LABEL_53;
        }

        if (!v7) {
          goto LABEL_52;
        }
        unint64_t v13 = 0LL;
      }

      else
      {
        char v25 = v17 >= v6;
        if (v28) {
          char v25 = v6 >= v17;
        }
        if (v25)
        {
LABEL_53:
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(double *)uint64_t v26 = v6;
          *(double *)(v26 + _Block_object_dispose((const void *)(v1 - 96), 8) = v17;
          *(_BYTE *)(v26 + 16) = 1;
          return (double *)swift_willThrow();
        }

        unint64_t v13 = v83[30];
        if (v7 == v83[30])
        {
LABEL_52:
          *(double *)a4 = v6;
          *(_BYTE *)(a4 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0;
          return result;
        }
      }

      LOBYTE(v30[0]) = 10;
      *(double *)uint64_t v83 = v10;
      v27(v84, v30, v83, ObjectType, v8);
    }

    while ((LOBYTE(v84[2]) & 1) == 0);
  }

  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(void *)unint64_t v15 = 10LL;
  *(double *)(v15 + _Block_object_dispose((const void *)(v1 - 96), 8) = v6;
  *(_BYTE *)(v15 + 16) = 0;
  return (double *)swift_willThrow();
}

    __break(1u);
  }

  else if (!(a2 | result))
  {
    uint64_t v44 = 0LL;
    MEMORY[0x186E20E78](&v44, 8LL);
    return 0LL;
  }

  __break(1u);
  return result;
}

                Hasher._combine(_:)(0);
                goto LABEL_42;
              }
            }

            Hasher._combine(_:)(0);
            if (v57) {
              goto LABEL_38;
            }
            goto LABEL_41;
          }

            uint64_t v26 = 0;
            goto LABEL_36;
          }

          goto LABEL_34;
        }

        outlined destroy of Any?((uint64_t)v104, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of Any?((uint64_t)v105, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v106);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v108);
        outlined destroy of Any?( (uint64_t)&v109,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v115,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        unint64_t result = (uint64_t *)outlined destroy of Any?( (uint64_t)&v120,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if ((v46 & 1) == 0) {
          goto LABEL_73;
        }
LABEL_42:
        v43 += 2;
        ++v42;
        unint64_t v37 = v94;
        if (v47 == v44)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
          BOOL v20 = v83;
          unint64_t v21 = *(uint64_t **)(v84 + 64);
          unint64_t v22 = *(void *)(v84 + 88);
          uint64_t v9 = v72;
          uint64_t v11 = v73;
          uint64_t v4 = v70;
          v109 = v83;
          v110 = v72;
          uint64_t v10 = v71;
          v111 = v71;
          if (!__OFADD__(v85++, 1LL)) {
            goto LABEL_11;
          }
          __break(1u);
LABEL_71:
          outlined destroy of AttributedString._AttributeValue((uint64_t)v108);
LABEL_72:
          outlined destroy of Any?( (uint64_t)&v109,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
          outlined destroy of Any?((uint64_t)&v115, v21);
          outlined destroy of Any?((uint64_t)&v120, v21);
LABEL_73:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
          uint64_t v11 = v76;
          uint64_t v4 = v77;
          uint64_t v9 = v74;
          uint64_t v10 = v75;
          char v25 = v82;
          goto LABEL_74;
        }
      }
    }

  Hasher._combine(_:)(0);
  if (!v29) {
    goto LABEL_42;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v39 = v29;
  _CFObject.hash(into:)();

  if (v31)
  {
LABEL_38:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v40 = v31;
    _CFObject.hash(into:)();

    goto LABEL_44;
  }

  Hasher._combine(_:)(0);
  if (!v33) {
    goto LABEL_42;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v43 = v33;
  _CFObject.hash(into:)();

  if (v35)
  {
LABEL_38:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v44 = v35;
    _CFObject.hash(into:)();

    goto LABEL_44;
  }

  Hasher._combine(_:)(0);
  if (!v31) {
    goto LABEL_42;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v41 = v31;
  _CFObject.hash(into:)();

  if (v33)
  {
LABEL_38:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v42 = v33;
    _CFObject.hash(into:)();

    goto LABEL_44;
  }

    swift_release();
    swift_release();
    uint64_t v44 = static _SetStorage.allocate(capacity:)();
    uint64_t v45 = v44 + 56;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v84);
    Swift::String v46 = Hasher._finalize()();
    uint64_t v47 = -1LL << *(_BYTE *)(v44 + 32);
    uint64_t v48 = v46 & ~v47;
    unint64_t v49 = v48 >> 6;
    Swift::String v50 = *(void *)(v44 + 56 + 8 * (v48 >> 6));
    Swift::String v51 = 1LL << v48;
    Swift::String v52 = *(void *)(v44 + 48);
    if (((1LL << v48) & v50) == 0) {
      goto LABEL_50;
    }
    uint64_t v53 = ~v47;
    uint64_t v48 = (v48 + 1) & v53;
    unint64_t v49 = v48 >> 6;
    Swift::String v50 = *(void *)(v45 + 8 * (v48 >> 6));
    Swift::String v51 = 1LL << v48;
    if ((v50 & (1LL << v48)) == 0) {
      goto LABEL_50;
    }
    uint64_t v48 = (v48 + 1) & v53;
    unint64_t v49 = v48 >> 6;
    Swift::String v50 = *(void *)(v45 + 8 * (v48 >> 6));
    Swift::String v51 = 1LL << v48;
    if ((v50 & (1LL << v48)) == 0) {
      goto LABEL_50;
    }
    uint64_t v48 = (v48 + 1) & v53;
    unint64_t v49 = v48 >> 6;
    Swift::String v50 = *(void *)(v45 + 8 * (v48 >> 6));
    Swift::String v51 = 1LL << v48;
    if ((v50 & (1LL << v48)) != 0)
    {
      while (*(unsigned __int8 *)(v52 + v48) != (_DWORD)v84)
      {
        uint64_t v48 = (v48 + 1) & v53;
        unint64_t v49 = v48 >> 6;
        Swift::String v50 = *(void *)(v45 + 8 * (v48 >> 6));
        Swift::String v51 = 1LL << v48;
        if ((v50 & (1LL << v48)) == 0) {
          goto LABEL_50;
        }
      }
    }

    else
    {
LABEL_50:
      *(void *)(v45 + 8 * v49) = v51 | v50;
      *(_BYTE *)(v52 + v4_Block_object_dispose((const void *)(v1 - 96), 8) = v84;
      unint64_t v54 = *(void *)(v44 + 16);
      char v19 = __OFADD__(v54, 1LL);
      uint64_t v55 = v54 + 1;
      if (v19) {
        goto LABEL_97;
      }
      *(void *)(v44 + 16) = v55;
    }

  swift_release();
  swift_release();
  uint64_t v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v7);
  v57[0] = v8;
  uint64_t v48 = objc_msgSend(v55, sel_rangeOfUnit_startDate_interval_forDate_, v33, v57, v58, v47);

  unint64_t v49 = v57[0];
  if (v48)
  {
    if (v49)
    {
      objc_msgSend(v49, sel_timeIntervalSinceReferenceDate);
      unint64_t v54 = v53;

      Swift::String v51 = v58[0];
      if (v58[0] < 0.0) {
        goto LABEL_54;
      }
      *(void *)uint64_t v56 = v54;
      *(Swift::Double *)(v56 + _Block_object_dispose((const void *)(v1 - 96), 8) = v51;
      *(_BYTE *)(v56 + 16) = 0;
    }

    else
    {
      *(void *)uint64_t v56 = 0LL;
      *(void *)(v56 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
      *(_BYTE *)(v56 + 16) = 1;
    }
  }

  else
  {

    *(void *)uint64_t v56 = 0LL;
    *(void *)(v56 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
    *(_BYTE *)(v56 + 16) = 1;
  }

  result.value.duration = v52;
  result.value.start._time = v51;
  result.is_nil = v50;
  return result;
}

    uint64_t v26 = (v36 - 1) & v36;
    uint64_t v42 = v37;
    uint64_t v28 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_18:
    uint64_t v29 = 16 * v28;
    uint64_t v30 = (void *)(*(void *)(v10 + 48) + 16 * v28);
    uint64_t v31 = v30[1];
    uint64_t v32 = 8 * v28;
    unint64_t v33 = *(void *)(*(void *)(v10 + 56) + v32);
    uint64_t v34 = (void *)(*(void *)(v16 + 48) + v29);
    *uint64_t v34 = *v30;
    v34[1] = v31;
    *(void *)(*(void *)(v16 + 56) + v32) = v33;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v23 = v42;
  }

  uint64_t v38 = v23 + 8;
  if (v23 + 8 >= v41) {
    goto LABEL_42;
  }
  unint64_t v36 = *(void *)(v40 + 8 * v38);
  if (v36)
  {
    unint64_t v37 = v23 + 8;
    goto LABEL_41;
  }

  while (1)
  {
    unint64_t v37 = v38 + 1;
    if (__OFADD__(v38, 1LL)) {
      break;
    }
    if (v37 >= v41) {
      goto LABEL_42;
    }
    unint64_t v36 = *(void *)(v40 + 8 * v37);
    ++v38;
    if (v36) {
      goto LABEL_41;
    }
  }

    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v65, &v64, &v63);
    return 1LL;
  }

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

                  uint64_t v32 = 1LL;
                  goto LABEL_87;
                }

    char v25 = (v40 - 1) & v40;
    Swift::String v46 = v41;
    uint64_t v27 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_18:
    uint64_t v28 = 16 * v27;
    uint64_t v29 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v27);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    uint64_t v32 = 32 * v27;
    unint64_t v33 = *(void *)(v9 + 56) + v32;
    uint64_t v34 = *(void *)v33;
    unint64_t v35 = *(_BYTE *)(v33 + 8);
    unint64_t v36 = *(void *)(v33 + 16);
    LOBYTE(v33) = *(_BYTE *)(v33 + 24);
    unint64_t v37 = (void *)(*(void *)(v15 + 48) + v28);
    *unint64_t v37 = v30;
    v37[1] = v31;
    uint64_t v38 = *(void *)(v15 + 56) + v32;
    *(void *)uint64_t v38 = v34;
    *(_BYTE *)(v38 + _Block_object_dispose((const void *)(v1 - 96), 8) = v35;
    *(void *)(v38 + 16) = v36;
    *(_BYTE *)(v38 + 24) = v33;
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v22 = v46;
  }

  uint64_t v42 = v22 + 8;
  if (v22 + 8 >= v45) {
    goto LABEL_42;
  }
  uint64_t v40 = *(void *)(v44 + 8 * v42);
  if (v40)
  {
    uint64_t v41 = v22 + 8;
    goto LABEL_41;
  }

  while (1)
  {
    uint64_t v41 = v42 + 1;
    if (__OFADD__(v42, 1LL)) {
      break;
    }
    if (v41 >= v45) {
      goto LABEL_42;
    }
    uint64_t v40 = *(void *)(v44 + 8 * v41);
    ++v42;
    if (v40) {
      goto LABEL_41;
    }
  }

    uint64_t v27 = (v42 - 1) & v42;
    uint64_t v48 = v43;
    uint64_t v29 = __clz(__rbit64(v42)) + (v43 << 6);
LABEL_18:
    uint64_t v30 = 16 * v29;
    uint64_t v31 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v29);
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    uint64_t v34 = 32 * v29;
    unint64_t v35 = *(void *)(v11 + 56) + v34;
    unint64_t v36 = *(void *)v35;
    unint64_t v37 = *(_BYTE *)(v35 + 8);
    uint64_t v38 = *(void *)(v35 + 16);
    LOBYTE(v35) = *(_BYTE *)(v35 + 24);
    uint64_t v39 = (void *)(*(void *)(v17 + 48) + v30);
    *uint64_t v39 = v32;
    v39[1] = v33;
    uint64_t v40 = *(void *)(v17 + 56) + v34;
    *(void *)uint64_t v40 = v36;
    *(_BYTE *)(v40 + _Block_object_dispose((const void *)(v1 - 96), 8) = v37;
    *(void *)(v40 + 16) = v38;
    *(_BYTE *)(v40 + 24) = v35;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v24 = v48;
  }

  uint64_t v44 = v24 + 8;
  if (v24 + 8 >= v47) {
    goto LABEL_42;
  }
  uint64_t v42 = *(void *)(v46 + 8 * v44);
  if (v42)
  {
    uint64_t v43 = v24 + 8;
    goto LABEL_41;
  }

  while (1)
  {
    uint64_t v43 = v44 + 1;
    if (__OFADD__(v44, 1LL)) {
      break;
    }
    if (v43 >= v47) {
      goto LABEL_42;
    }
    uint64_t v42 = *(void *)(v46 + 8 * v43);
    ++v44;
    if (v42) {
      goto LABEL_41;
    }
  }

      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }

        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }

      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
  }

  return result;
}

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2);
  }
  unint64_t v14 = *((void *)v2 + 2);
  unint64_t v13 = *((void *)v2 + 3);
  if (v14 >= v13 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v14 + 1,  1,  v2);
  }
  *((void *)v2 + 2) = v14 + 1;
  v2[v14 + 32] = 11;
  if ((v1 & 0x400) == 0)
  {
LABEL_17:
    if ((v1 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }

  __src[18] = (int)ucal_getFieldDifference();
  LOBYTE(__src[19]) = 0;
  if ((a2 & 0x2000) != 0) {
    goto LABEL_42;
  }
  return memcpy(a3, __src, 0x11AuLL);
}

        __break(1u);
        goto LABEL_42;
      }

      __break(1u);
LABEL_44:
      __dst[0] = 0LL;
      __dst[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(57LL);
      v35._object = (void *)0x80000001839D1F10LL;
      v35._uint64_t countAndFlagsBits = 0xD000000000000030LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = v39;
      v36._object = (void *)v15;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = 32LL;
      v37._object = (void *)0xE100000000000000LL;
      String.append(_:)(v37);
      LOBYTE(v44[0]) = v7;
      _print_unlocked<A, B>(_:_:)();
      v38._uint64_t countAndFlagsBits = 8250LL;
      v38._object = (void *)0xE200000000000000LL;
      String.append(_:)(v38);
      v44[0] = 0;
      type metadata accessor for UErrorCode(0LL);
      _print_unlocked<A, B>(_:_:)();
      unint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }

    uint64_t v26 = (v34 - 1) & v34;
    uint64_t v28 = __clz(__rbit64(v34)) + (v23 << 6);
LABEL_18:
    uint64_t v29 = 8 * v28;
    uint64_t v30 = *(void *)(*(void *)(v39 + 48) + 8 * v28);
    uint64_t v31 = 16 * v28;
    uint64_t v32 = *(_OWORD *)(*(void *)(v39 + 56) + v31);
    *(void *)(*(void *)(v15 + 48) + v29) = v30;
    *(_OWORD *)(*(void *)(v15 + 56) + v31) = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  unint64_t v35 = v33 + 7;
  if (v35 >= v38) {
    goto LABEL_42;
  }
  uint64_t v34 = *(void *)(v37 + 8 * v35);
  if (v34)
  {
    unint64_t v23 = v35;
    goto LABEL_41;
  }

  while (1)
  {
    unint64_t v23 = v35 + 1;
    if (__OFADD__(v35, 1LL)) {
      break;
    }
    if (v23 >= v38) {
      goto LABEL_42;
    }
    uint64_t v34 = *(void *)(v37 + 8 * v23);
    ++v35;
    if (v34) {
      goto LABEL_41;
    }
  }

  v351 = v12;
  uint64_t v40 = *(unsigned __int8 *)(v15 + 18);
  if (*(_BYTE *)(v15 + 18))
  {
    unint64_t result = swift_unknownObjectRetain_n();
    uint64_t v2 = 24LL;
    uint64_t v41 = v15;
    while (1)
    {
      uint64_t v43 = *(unsigned __int16 *)(v41 + 16);
      if (!*(_WORD *)(v41 + 16)) {
        goto LABEL_44;
      }
      uint64_t v44 = *(void *)(v41 + 40);
      uint64_t v45 = __OFSUB__(v13, v44);
      Swift::String v46 = v13 - v44;
      if (v45) {
        goto LABEL_380;
      }
      if (__OFADD__(v46, 1LL))
      {
LABEL_381:
        __break(1u);
LABEL_382:
        __break(1u);
LABEL_383:
        __break(1u);
LABEL_384:
        __break(1u);
LABEL_385:
        __break(1u);
        goto LABEL_386;
      }

      if (v46 + 1 >= 1) {
        break;
      }
      uint64_t v43 = 0LL;
LABEL_45:
      uint64_t v42 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
      uint64_t v40 = ((-15LL << v42) - 1) & v40 | (v43 << v42);
      uint64_t v24 = *(void *)(v41 + 24 + 24 * v43);
      swift_unknownObjectRetain();
      unint64_t result = swift_unknownObjectRelease();
      uint64_t v41 = v24;
      if (!*(_BYTE *)(v24 + 18)) {
        goto LABEL_74;
      }
    }

    if ((_DWORD)v43 != 1)
    {
      uint64_t v47 = (uint64_t *)(v41 + 64);
      uint64_t v48 = 1LL;
      while (1)
      {
        unint64_t v49 = *v47;
        v47 += 3;
        unint64_t v13 = v46 - v49;
        if (__OFSUB__(v46, v49)) {
          goto LABEL_366;
        }
        if (__OFADD__(v13, 1LL)) {
          goto LABEL_367;
        }
        if (v13 + 1 < 1) {
          break;
        }
        ++v48;
        Swift::String v46 = v13;
        if (v43 == v48) {
          goto LABEL_44;
        }
      }

      uint64_t v43 = v48;
      unint64_t v13 = v46;
      goto LABEL_45;
    }

    unint64_t v13 = v46;
LABEL_44:
    if (v13) {
      goto LABEL_379;
    }
    goto LABEL_45;
  }

  swift_unknownObjectRetain_n();
  uint64_t v24 = v15;
LABEL_74:
  unint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)( v13,  0,  (_WORD *)(v24 + 16),  (uint64_t *)(v24 + 24));
  if (result < 0) {
    goto LABEL_409;
  }
  uint64_t v58 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v23 = v40 & 0xFFFFFFFFFFFFF0FFLL | (v58 << 8);
  char v25 = v24;
  uint64_t v12 = v351;
  if (v15) {
    goto LABEL_24;
  }
LABEL_25:
  uint64_t v26 = *(void *)(v4 + 64);
  uint64_t v27 = *(void *)(v4 + 72);
  uint64_t v28 = *(void *)(v4 + 80);
  uint64_t v29 = *(void *)(v4 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v10, v23, v25, v26, v27, v28, v29);
  swift_unknownObjectRelease();
  uint64_t v30 = swift_bridgeObjectRetain();
  v330 = specialized _NativeDictionary.filter(_:)(v30);
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease_n();
  unint64_t v5 = v340;
  uint64_t v6 = a1;
LABEL_26:
  char v3 = *v5;
  v337 = *v6;
  uint64_t v31 = *v6 >> 11;
  uint64_t v32 = v6[4] >> 11;
  v339 = v32 - v31;
  if (v32 == v31)
  {
    v329 = v337 >> 11;
    unint64_t v33 = v337 >> 11;
    goto LABEL_195;
  }

  v359 = v337 >> 11;
  uint64_t v10 = *(void *)(v3 + 64);
  uint64_t v2 = *(void *)(v3 + 80);
  if (v10) {
    uint64_t v34 = *(void *)(v3 + 80);
  }
  else {
    uint64_t v34 = 0LL;
  }
  if (v34 < v31)
  {
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
    goto LABEL_402;
  }

  unint64_t v35 = *(void *)(v3 + 72);
  unint64_t v15 = *(void *)(v3 + 88);
  v351 = v32;
  if (!v10) {
    goto LABEL_38;
  }
  if (*(_WORD *)(v10 + 16)) {
    unint64_t v36 = v31 < v2;
  }
  else {
    unint64_t v36 = 0;
  }
  if (!v36)
  {
    swift_unknownObjectRetain();
LABEL_38:
    unint64_t v37 = swift_unknownObjectRetain();
    uint64_t v38 = specialized Rope._endPath.getter(v37);
    swift_unknownObjectRelease();
    uint64_t v39 = 0LL;
    goto LABEL_80;
  }

  *(void *)&v349 = *(void *)(v3 + 80);
  Swift::String v50 = *(unsigned __int8 *)(v10 + 18);
  if (*(_BYTE *)(v10 + 18))
  {
    unint64_t result = swift_unknownObjectRetain_n();
    uint64_t v2 = -15LL;
    unint64_t v13 = v31;
    Swift::String v51 = v10;
    while (1)
    {
      Swift::String v52 = *(unsigned __int16 *)(v51 + 16);
      if (*(_WORD *)(v51 + 16))
      {
        unint64_t v54 = 0LL;
        uint64_t v55 = (uint64_t *)(v51 + 40);
        while (1)
        {
          uint64_t v56 = *v55;
          v55 += 3;
          char v57 = v13 - v56;
          if (__OFSUB__(v13, v56))
          {
            __break(1u);
LABEL_352:
            __break(1u);
            goto LABEL_353;
          }

          if (__OFADD__(v57, 1LL)) {
            goto LABEL_352;
          }
          if (v57 + 1 < 1) {
            break;
          }
          ++v54;
          unint64_t v13 = v57;
          if (v52 == v54) {
            goto LABEL_71;
          }
        }

        Swift::String v52 = v54;
      }

      else
      {
        char v57 = v13;
LABEL_71:
        if (v57) {
          goto LABEL_382;
        }
        unint64_t v13 = 0LL;
      }

      uint64_t v53 = (4 * *(_BYTE *)(v51 + 18) + 8) & 0x3C;
      Swift::String v50 = ((-15LL << v53) - 1) & v50 | (v52 << v53);
      uint64_t v39 = *(void *)(v51 + 24 + 24 * v52);
      swift_unknownObjectRetain();
      unint64_t result = swift_unknownObjectRelease();
      Swift::String v51 = v39;
      if (!*(_BYTE *)(v39 + 18)) {
        goto LABEL_78;
      }
    }
  }

  swift_unknownObjectRetain_n();
  unint64_t v13 = v31;
  uint64_t v39 = v10;
LABEL_78:
  unint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)( v13,  0,  (_WORD *)(v39 + 16),  (uint64_t *)(v39 + 24));
  if (result < 0) {
    goto LABEL_411;
  }
  CFStringRef v59 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v38 = v50 & 0xFFFFFFFFFFFFF0FFLL | (v59 << 8);
  uint64_t v2 = v349;
LABEL_80:
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v15, v38, v39, v10, v35, v2, v15);
  swift_unknownObjectRelease_n();
  uint64_t v60 = *(void *)(v3 + 64);
  uint64_t v61 = *(void *)(v3 + 72);
  uint64_t v2 = *(void *)(v3 + 80);
  unint64_t v62 = *(void *)(v3 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v15, v38, v39, v60, v61, v2, v62);
  v343 = v63;
  swift_unknownObjectRelease();
  uint64_t v64 = swift_bridgeObjectRetain();
  uint64_t v10 = specialized _NativeDictionary.filter(_:)(v64);
  swift_bridgeObjectRelease_n();
  unint64_t v15 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  unint64_t result = Set.init(minimumCapacity:)();
  uint64_t v65 = 0LL;
  *(void *)&v371 = result;
  uint64_t v66 = 1LL << *(_BYTE *)(v10 + 32);
  Swift::String v46 = -1LL;
  if (v66 < 64) {
    Swift::String v46 = ~(-1LL << v66);
  }
  uint64_t v67 = v10 + 64;
  uint64_t v68 = v46 & *(void *)(v10 + 64);
  unint64_t v13 = (unint64_t)(v66 + 63) >> 6;
  while (1)
  {
    if (v68)
    {
      uint64_t v69 = __clz(__rbit64(v68));
      v68 &= v68 - 1;
      uint64_t v70 = v69 | (v65 << 6);
      goto LABEL_84;
    }

    uint64_t v43 = v65 + 1;
    if (__OFADD__(v65, 1LL)) {
      goto LABEL_365;
    }
    if (v43 >= v13) {
      break;
    }
    uint64_t v73 = *(void *)(v67 + 8 * v43);
    ++v65;
    if (!v73)
    {
      uint64_t v65 = v43 + 1;
      if (v43 + 1 >= v13) {
        break;
      }
      uint64_t v73 = *(void *)(v67 + 8 * v65);
      if (!v73)
      {
        uint64_t v65 = v43 + 2;
        if (v43 + 2 >= v13) {
          break;
        }
        uint64_t v73 = *(void *)(v67 + 8 * v65);
        if (!v73)
        {
          uint64_t v65 = v43 + 3;
          if (v43 + 3 >= v13) {
            break;
          }
          uint64_t v73 = *(void *)(v67 + 8 * v65);
          if (!v73)
          {
            uint64_t v65 = v43 + 4;
            if (v43 + 4 >= v13) {
              break;
            }
            uint64_t v73 = *(void *)(v67 + 8 * v65);
            if (!v73)
            {
              int v74 = v43 + 5;
              if (v74 >= v13) {
                break;
              }
              uint64_t v73 = *(void *)(v67 + 8 * v74);
              if (!v73)
              {
                while (1)
                {
                  uint64_t v65 = v74 + 1;
                  if (__OFADD__(v74, 1LL)) {
                    break;
                  }
                  if (v65 >= v13) {
                    goto LABEL_104;
                  }
                  uint64_t v73 = *(void *)(v67 + 8 * v65);
                  ++v74;
                  if (v73) {
                    goto LABEL_103;
                  }
                }

    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a4[2] + 1LL,  1,  a4);
    goto LABEL_26;
  }

  if (a1 == (unsigned __int16)*v33)
  {
    uint64_t v34 = swift_unknownObjectRetain();
    specialized Rope.Builder._insertBeforeTip(_:)(v34, (uint64_t)a4 - 1, v6);
    goto LABEL_24;
  }

  uint64_t v38 = specialized Rope._Node.split(keeping:)(a1);
  Swift::String v50 = v39;
  uint64_t v41 = v40;
  uint64_t v42 = swift_unknownObjectRetain();
  specialized Rope.Builder._insertBeforeTip(_:)(v42, (uint64_t)v53, v54);
  Swift::String v51 = 0LL;
  swift_unknownObjectRetain();
  MEMORY[0x186E20E78](&v51, 8LL);
  uint64_t v43 = v51;
  uint64_t v44 = *(void **)(a2 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v44[2] + 1LL,  1,  v44);
  }
  Swift::String v46 = v44[2];
  uint64_t v45 = v44[3];
  if (v46 >= v45 >> 1) {
    uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v45 > 1),  v46 + 1,  1,  v44);
  }
  v44[2] = v46 + 1;
  uint64_t v47 = &v44[4 * v46];
  v47[4] = v38;
  v47[5] = v50;
  v47[6] = v41;
  v47[7] = v43;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(void *)(a2 + 80) = v44;
LABEL_34:
  swift_unknownObjectRelease();
  return v5;
}

            uint64_t v30 = (4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C;
            uint64_t v28 = ((-15LL << v30) - 1) & v28 | (v31 << v30);
            uint64_t v9 = *(void *)(v29 + 24 + 24 * v31);
            swift_unknownObjectRetain();
            unint64_t result = (uint64_t *)swift_unknownObjectRelease();
            uint64_t v29 = v9;
            if (!*(_BYTE *)(v9 + 18)) {
              goto LABEL_66;
            }
          }
        }

        unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
        uint64_t v28 = 0LL;
        uint64_t v6 = a4;
        uint64_t v9 = v25;
LABEL_66:
        uint64_t v38 = *(unsigned __int16 *)(v9 + 16);
        if (*(_WORD *)(v9 + 16))
        {
          uint64_t v39 = *(void *)(v9 + 24);
          unint64_t v15 = __OFSUB__(v6, v39);
          uint64_t v40 = v6 - v39;
          if (v15) {
            goto LABEL_197;
          }
          if (__OFADD__(v40, 1LL)) {
            goto LABEL_198;
          }
          if (v40 + 1 <= 0)
          {
            uint64_t v38 = 0LL;
            goto LABEL_88;
          }

          if ((_DWORD)v38 != 1)
          {
            uint64_t v41 = *(void *)(v9 + 48);
            uint64_t v6 = v40 - v41;
            if (__OFSUB__(v40, v41)) {
              goto LABEL_199;
            }
            if (__OFADD__(v6, 1LL)) {
              goto LABEL_200;
            }
            if (v6 + 1 >= 1)
            {
              if ((_DWORD)v38 != 2)
              {
                uint64_t v42 = (void *)(v9 + 72);
                uint64_t v43 = 2LL;
                while (v38 != v43)
                {
                  uint64_t v40 = v6 - *v42;
                  if (__OFSUB__(v6, *v42)) {
                    goto LABEL_193;
                  }
                  if (__OFADD__(v40, 1LL)) {
                    goto LABEL_194;
                  }
                  if (v40 + 1 < 1)
                  {
                    uint64_t v38 = v43;
                    goto LABEL_88;
                  }

                  ++v43;
                  v42 += 3;
                  uint64_t v6 = v40;
                  if (v38 == v43) {
                    goto LABEL_76;
                  }
                }

                goto LABEL_192;
              }

              goto LABEL_75;
            }

            uint64_t v38 = 1LL;
            uint64_t v6 = v40;
LABEL_88:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t v8 = v28 & 0xFFFFFFFFFFFFF0FFLL | (v38 << 8);
LABEL_89:
            swift_unknownObjectRetain();
            uint64_t v10 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v27, v8, v9, v25, v78);
            unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
            a3 = v84;
            goto LABEL_90;
          }
        }

        else
        {
LABEL_75:
          uint64_t v40 = v6;
        }

    *(void *)(a5 + 32) = 0LL;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_BYTE *)(a5 + 40) = 1;
  }

  else
  {
LABEL_20:
    *(void *)a5 = v13;
    *(void *)(a5 + _Block_object_dispose((const void *)(v1 - 96), 8) = result;
    *(void *)(a5 + 16) = v12;
    *(void *)(a5 + 24) = v9;
    *(void *)(a5 + 32) = v10;
LABEL_43:
    *(_BYTE *)(a5 + 40) = 0;
  }

  return result;
}

    swift_unknownObjectRetain();
    v251 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v24, v35, v4, v6, v23);
    unint64_t result = swift_unknownObjectRelease_n();
LABEL_92:
    unint64_t v54 = a4;
    if (__OFSUB__(a3, v25)) {
      goto LABEL_483;
    }
    v254 = a3 - v25;
    *(void *)&v283 = v24;
    *((void *)&v283 + 1) = v35;
    uint64_t v55 = v35;
    v265 = v267 + 64;
    v284 = (void *)v4;
    uint64_t v56 = v249;
    while (1)
    {
      uint64_t v10 = v56[8];
      unint64_t v5 = v56[10];
      v259 = v24;
      if (a3 != v54)
      {
        uint64_t v68 = swift_unknownObjectRetain();
        specialized Rope._endPath.getter(v68);
        if (v10) {
          swift_unknownObjectRelease();
        }
        else {
          unint64_t v5 = 0LL;
        }
        if (v254 >= v5) {
          goto LABEL_419;
        }
        goto LABEL_149;
      }

      v245 = v56[9];
      v255 = v56[11];
      if (v10)
      {
        if (v5 < a3) {
          goto LABEL_461;
        }
        if (*(_WORD *)(v10 + 16)) {
          char v57 = v5 <= a3;
        }
        else {
          char v57 = 1;
        }
        if (!v57)
        {
          unint64_t v15 = v4;
          uint64_t v58 = v55;
          CFStringRef v59 = *(unsigned __int8 *)(v10 + 18);
          if (*(_BYTE *)(v10 + 18))
          {
            unint64_t result = swift_unknownObjectRetain_n();
            char v25 = a3;
            uint64_t v60 = v10;
            while (1)
            {
              uint64_t v47 = *(unsigned __int16 *)(v60 + 16);
              if (*(_WORD *)(v60 + 16))
              {
                uint64_t v63 = *(void *)(v60 + 40);
                uint64_t v30 = __OFSUB__(v25, v63);
                uint64_t v64 = v25 - v63;
                if (v30) {
                  goto LABEL_433;
                }
                if (__OFADD__(v64, 1LL))
                {
LABEL_434:
                  __break(1u);
LABEL_435:
                  __break(1u);
LABEL_436:
                  __break(1u);
LABEL_437:
                  __break(1u);
LABEL_438:
                  __break(1u);
                  goto LABEL_439;
                }

                if (v64 + 1 < 1)
                {
                  uint64_t v47 = 0LL;
                  goto LABEL_107;
                }

                if ((_DWORD)v47 != 1)
                {
                  uint64_t v65 = (uint64_t *)(v60 + 64);
                  uint64_t v66 = 1LL;
                  while (1)
                  {
                    uint64_t v67 = *v65;
                    v65 += 3;
                    char v25 = v64 - v67;
                    if (__OFSUB__(v64, v67)) {
                      goto LABEL_424;
                    }
                    if (__OFADD__(v25, 1LL)) {
                      break;
                    }
                    if (v25 + 1 < 1)
                    {
                      uint64_t v47 = v66;
                      char v25 = v64;
                      goto LABEL_107;
                    }

                    ++v66;
                    uint64_t v64 = v25;
                    if (v47 == v66) {
                      goto LABEL_106;
                    }
                  }

  v14[2] = v38 - 1;
  v39[2] = v14;
  swift_release();
  swift_release();
}

    unint64_t v62 = (v52 - 1) & v52;
    uint64_t v63 = v53;
    uint64_t v44 = __clz(__rbit64(v52)) + (v53 << 6);
LABEL_18:
    uint64_t v45 = *(void *)(v24 + 48);
    Swift::String v46 = v68;
    uint64_t v47 = *(void *)(v68 + 72) * v44;
    uint64_t v60 = v44;
    *(void *)&uint64_t v61 = v47;
    (*(void (**)(char *, unint64_t, uint64_t))(v68 + 16))(v64, v45 + v47, v69);
    uint64_t v48 = *(void *)(v30 + 48) + v61;
    unint64_t v49 = *(void (**)(uint64_t, char *, uint64_t))(v46 + 32);
    uint64_t v61 = *(_OWORD *)(*(void *)(v24 + 56) + 16 * v60);
    Swift::String v50 = 16 * v60;
    v49(v48, v64, v69);
    *(_OWORD *)(*(void *)(v30 + 56) + v50) = v61;
    swift_retain();
    uint64_t v43 = v62;
    uint64_t v40 = v63;
  }

  unint64_t v54 = v40 + 8;
  if (v40 + 8 >= v59) {
    goto LABEL_42;
  }
  Swift::String v52 = *(void *)(v58 + 8 * v54);
  if (v52)
  {
    uint64_t v53 = v40 + 8;
    goto LABEL_41;
  }

  while (1)
  {
    uint64_t v53 = v54 + 1;
    if (__OFADD__(v54, 1LL)) {
      break;
    }
    if (v53 >= v59) {
      goto LABEL_42;
    }
    Swift::String v52 = *(void *)(v58 + 8 * v53);
    ++v54;
    if (v52) {
      goto LABEL_41;
    }
  }

    uint64_t v24 = (v32 - 1) & v32;
    uint64_t v26 = __clz(__rbit64(v32)) + (v21 << 6);
LABEL_18:
    uint64_t v27 = 8 * v26;
    uint64_t v28 = *(void *)(*(void *)(v37 + 48) + 8 * v26);
    uint64_t v29 = 16 * v26;
    uint64_t v30 = *(_OWORD *)(*(void *)(v37 + 56) + v29);
    *(void *)(*(void *)(v13 + 48) + v27) = v28;
    *(_OWORD *)(*(void *)(v13 + 56) + v29) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  unint64_t v33 = v31 + 7;
  if (v33 >= v36) {
    goto LABEL_42;
  }
  uint64_t v32 = *(void *)&v35[8 * v33];
  if (v32)
  {
    unint64_t v21 = v33;
    goto LABEL_41;
  }

  while (1)
  {
    unint64_t v21 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      break;
    }
    if (v21 >= v36) {
      goto LABEL_42;
    }
    uint64_t v32 = *(void *)&v35[8 * v21];
    ++v33;
    if (v32) {
      goto LABEL_41;
    }
  }

    uint64_t v24 = (v32 - 1) & v32;
    uint64_t v26 = __clz(__rbit64(v32)) + (v21 << 6);
LABEL_18:
    uint64_t v27 = 8 * v26;
    uint64_t v28 = *(void *)(*(void *)(v37 + 48) + 8 * v26);
    uint64_t v29 = 16 * v26;
    uint64_t v30 = *(_OWORD *)(*(void *)(v37 + 56) + v29);
    *(void *)(*(void *)(v13 + 48) + v27) = v28;
    *(_OWORD *)(*(void *)(v13 + 56) + v29) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  unint64_t v33 = v31 + 7;
  if (v33 >= v36) {
    goto LABEL_42;
  }
  uint64_t v32 = *(void *)&v35[8 * v33];
  if (v32)
  {
    unint64_t v21 = v33;
    goto LABEL_41;
  }

  while (1)
  {
    unint64_t v21 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      break;
    }
    if (v21 >= v36) {
      goto LABEL_42;
    }
    uint64_t v32 = *(void *)&v35[8 * v21];
    ++v33;
    if (v32) {
      goto LABEL_41;
    }
  }

    char v25 = (v33 - 1) & v33;
    uint64_t v27 = __clz(__rbit64(v33)) + (v22 << 6);
LABEL_18:
    uint64_t v28 = 8 * v27;
    uint64_t v29 = *(void *)(*(void *)(v38 + 48) + 8 * v27);
    uint64_t v30 = 16 * v27;
    uint64_t v31 = *(_OWORD *)(*(void *)(v38 + 56) + v30);
    *(void *)(*(void *)(v14 + 48) + v2_Block_object_dispose((const void *)(v1 - 96), 8) = v29;
    *(_OWORD *)(*(void *)(v14 + 56) + v30) = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  uint64_t v34 = v32 + 7;
  if (v34 >= v37) {
    goto LABEL_42;
  }
  unint64_t v33 = *(void *)(v36 + 8 * v34);
  if (v33)
  {
    unint64_t v22 = v34;
    goto LABEL_41;
  }

  while (1)
  {
    unint64_t v22 = v34 + 1;
    if (__OFADD__(v34, 1LL)) {
      break;
    }
    if (v22 >= v37) {
      goto LABEL_42;
    }
    unint64_t v33 = *(void *)(v36 + 8 * v22);
    ++v34;
    if (v33) {
      goto LABEL_41;
    }
  }

    char v25 = (v33 - 1) & v33;
    uint64_t v31 = __clz(__rbit64(v33)) + (v28 << 6);
LABEL_42:
    unint64_t v35 = *(void *)(*(void *)(v18 + 48) + 8 * v31);
    Hasher.init(_seed:)();
    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v47);
    unint64_t result = Hasher._finalize()();
    unint64_t v36 = -1LL << *(_BYTE *)(v19 + 32);
    unint64_t v37 = result & ~v36;
    uint64_t v38 = v37 >> 6;
    if (((-1LL << v37) & ~*(void *)(v27 + 8 * (v37 >> 6))) != 0)
    {
      uint64_t v29 = __clz(__rbit64((-1LL << v37) & ~*(void *)(v27 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v39 = 0;
      uint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_59;
        }

        uint64_t v41 = v38 == v40;
        if (v38 == v40) {
          uint64_t v38 = 0LL;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v27 + 8 * v38);
      }

      while (v42 == -1);
      uint64_t v29 = __clz(__rbit64(~v42)) + (v38 << 6);
    }

    *(void *)(v27 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v29;
    *(void *)(*(void *)(v19 + 48) + 8 * v29) = v35;
    ++*(void *)(v19 + 16);
  }

  uint64_t v34 = v32 + 4;
  if (v34 >= v26) {
    goto LABEL_51;
  }
  unint64_t v33 = v46[v34];
  if (v33)
  {
    uint64_t v28 = v34;
    goto LABEL_41;
  }

  while (1)
  {
    uint64_t v28 = v34 + 1;
    if (__OFADD__(v34, 1LL)) {
      break;
    }
    if (v28 >= v26) {
      goto LABEL_51;
    }
    unint64_t v33 = v46[v28];
    ++v34;
    if (v33) {
      goto LABEL_41;
    }
  }

            if (!v9) {
              return v6 == 0;
            }
            uint64_t v12 = *v10++;
            uint64_t v8 = v12;
            --v9;
            if (v12 < 0) {
              return 0LL;
            }
            continue;
        }
      }
    }

    return 0LL;
  }

  uint64_t v6 = 0LL;
  return v6 == 0;
}

      if (v50)
      {
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }

                Hasher._combine(_:)(0);
                goto LABEL_42;
              }
            }

            Hasher._combine(_:)(0);
            if (v54) {
              goto LABEL_38;
            }
            goto LABEL_41;
          }

                Hasher._combine(_:)(0);
                goto LABEL_42;
              }
            }

            Hasher._combine(_:)(0);
            if (v57) {
              goto LABEL_38;
            }
            goto LABEL_41;
          }

    free(v7);
    unint64_t v14 = method_getName(v5);
    NSKVONotifyingSetMethodImplementation(a1, v14, v9, a2);
    if (v9 == (id (*)(id, SEL, ...))MEMORY[0x189604878])
    {
      NSKVONotifyingSetMethodImplementation( a1,  sel_forwardInvocation_,  (id (*)(id, SEL, ...))NSKVOForwardInvocation,  0LL);
      unint64_t v15 = *(objc_class **)(a1 + 8);
      strcpy(__source, "_original_");
      unint64_t v16 = sel_getName(v14);
      unint64_t v17 = strlen(v16);
      uint64_t v18 = v17 + 11;
      MEMORY[0x1895F8858](v17);
      BOOL v20 = &__source[-((v19 + 26) & 0xFFFFFFFFFFFFFFF0LL) - 8];
      strlcpy(v20, __source, v18);
      strlcat(v20, v16, v18);
      unint64_t v21 = sel_registerName(v20);
      Implementation = method_getImplementation(v5);
      TypeEncoding = method_getTypeEncoding(v5);
      class_addMethod(v15, v21, Implementation, TypeEncoding);
    }
  }

  else
  {
    if (*(void *)a1) {
      uint64_t v10 = class_getName(*(Class *)a1);
    }
    else {
      uint64_t v10 = "nil";
    }
    uint64_t v11 = method_getName(v5);
    uint64_t v12 = sel_getName(v11);
    NSLog( (NSString *)@"KVO autonotifying only supports -set<Key>: methods that return void. Autonotifying will not be done for invocations of -[%s %s].",  v10,  v12);
  }

  switch(v4)
  {
    case 0uLL:
      unint64_t result = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ < %@",  v7,  v20,  v31);
      break;
    case 1uLL:
      unint64_t result = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ <= %@",  v7,  v20,  v31);
      break;
    case 2uLL:
      unint64_t result = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ > %@",  v7,  v20,  v31);
      break;
    case 3uLL:
      unint64_t result = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ >= %@",  v7,  v20,  v31);
      break;
    case 4uLL:
      unint64_t result = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ == %@",  v7,  v20,  v31);
      break;
    case 5uLL:
      unint64_t result = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ != %@",  v7,  v20,  v31);
      break;
    default:
      if (v4 == 100)
      {
        unint64_t v23 = 0LL;
        return +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"InRange(%@,%@,%@)",  v7,  v20,  v23);
      }

      unint64_t result = 0LL;
      break;
  }

  return result;
}

      v22[294](v25);
      goto LABEL_42;
    }

    uint64_t v82 = v20;
    unint64_t v87 = v26;
    if (objc_msgSend( a4,  "isEqual:",  +[NSTermOfAddress masculine](NSTermOfAddress, "masculine")))
    {
      cf = 0LL;
      off_18C4968E8(v26, @"gender", @"masculine", &cf);
      if (!cf) {
        goto LABEL_89;
      }
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      uint64_t v27 = (os_log_s *)_NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v105 = "msfc_putConstraintByName(pronounSemanticFeatureConcept, @gender, @masculine, &error)";
        v106 = 2112;
        v107 = cf;
LABEL_180:
        _os_log_error_impl( &dword_182EB1000,  v27,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
        goto LABEL_62;
      }

      goto LABEL_62;
    }

    if (objc_msgSend( a4,  "isEqual:",  +[NSTermOfAddress neutral](NSTermOfAddress, "neutral")))
    {
      cf = 0LL;
      off_18C4968F0(v26, @"gender", &cf);
      if (!cf) {
        goto LABEL_89;
      }
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      uint64_t v27 = (os_log_s *)_NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v105 = "msfc_clearConstraintByName(pronounSemanticFeatureConcept, @gender, &error)";
        v106 = 2112;
        v107 = cf;
        goto LABEL_180;
      }

          *(void *)(a1 + 64) = v16 + 1;
          uint64_t v11 = 5LL;
          goto LABEL_45;
        }
      }

      else
      {
        if (v11) {
          goto LABEL_45;
        }
        if (v16 != v15)
        {
          [a4 appendPlaceholder];
          ++*(void *)(a1 + 96);
          unint64_t v16 = *(void *)(a1 + 64);
        }

        if ((v12 & 0x80000000) == 0)
        {
          ++*(void *)(a1 + 56);
          [a4 appendByte:v12];
          uint64_t v10 = 0LL;
          uint64_t v11 = 0LL;
          goto LABEL_44;
        }

        if ((v12 + 64) <= 0x36)
        {
          uint64_t v10 = expectMap[v12 >> 4];
          uint64_t v11 = 1LL;
LABEL_44:
          unint64_t v15 = v16;
LABEL_45:
          unint64_t v16 = *(void *)(a1 + 64);
          if (v16 - v15 == 4) {
            uint64_t v11 = 0LL;
          }
          ++v14;
          goto LABEL_48;
        }

        unint64_t v15 = v16;
        uint64_t v11 = 5LL;
        uint64_t v10 = 5LL;
      }
    }

    else
    {
      if (v12 <= -65)
      {
        char v19 = 0;
        BOOL v20 = 0;
        unint64_t v21 = 0;
        uint64_t v11 = 2LL;
        switch(v18)
        {
          case 0LL:
            break;
          case 1LL:
            BOOL v20 = 0;
            unint64_t v21 = 0;
            char v19 = 1;
            uint64_t v11 = 3LL;
            break;
          case 2LL:
            char v19 = 0;
            BOOL v20 = 0;
            unint64_t v21 = 0;
            uint64_t v11 = 4LL;
            break;
          case 3LL:
            char v19 = 0;
            unint64_t v21 = 0;
            uint64_t v11 = 0LL;
            BOOL v20 = 1;
            break;
          default:
            char v19 = 0;
            BOOL v20 = 0;
            unint64_t v21 = 1;
            uint64_t v11 = 5LL;
            break;
        }

        if (v10 == 3 && v19 && v17 == 237 && v13 >= 0xA0u && v13 <= 0xBFu)
        {
          uint64_t v11 = 0LL;
          *(void *)(a1 + 64) = v16 + 3;
          uint64_t v10 = 3LL;
          goto LABEL_45;
        }

        if (((v10 != v11) & ~v20) == 0)
        {
          ++*(void *)(a1 + 48);
          objc_msgSend(a4, "appendBytes:count:", &a2[v14 - v11 + 1]);
          uint64_t v11 = 0LL;
          goto LABEL_45;
        }

        if (!v21) {
          goto LABEL_45;
        }
        goto LABEL_41;
      }

      v16 += v11;
      *(void *)(a1 + 64) = v16;
      uint64_t v11 = 5LL;
    }

  a1[12] = a1[8];
  unint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

    uint64_t v24 = v6;
LABEL_42:
    CFRelease(v24);
    return 1;
  }

  uint64_t v9 = (const char *)container_create_or_lookup_path_for_current_user();
  if (!v9)
  {
    unint64_t v22 = (os_log_s *)_NSFCProcessMonitorLog();
    unint64_t v23 = v22;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543618;
      unint64_t v36 = v8;
      unint64_t v37 = 2048;
      uint64_t v38 = 1LL;
      _os_log_error_impl( &dword_182EB1000,  v23,  OS_LOG_TYPE_ERROR,  "Could not get container for signing identifier %{public}@. Error: %llu",  buf,  0x16u);
    }

    CFRelease(v6);
    uint64_t v24 = v8;
    goto LABEL_42;
  }

  uint64_t v10 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  v9,  strlen(v9),  4LL,  1LL);
  uint64_t v31 = 0u;
  uint64_t v32 = 0u;
  unint64_t v33 = 0u;
  uint64_t v34 = 0u;
  uint64_t v11 = [a4 countByEnumeratingWithState:&v31 objects:v30 count:16];
  if (v11)
  {
    unint64_t v13 = v11;
    unint64_t v14 = *(void *)v32;
    *(void *)&uint64_t v12 = 138478083LL;
    uint64_t v27 = v12;
    uint64_t v28 = v6;
    while (2)
    {
      for (uint64_t i = 0LL; i != v13; ++i)
      {
        if (*(void *)v32 != v14) {
          objc_enumerationMutation(a4);
        }
        unint64_t v16 = (__CFString *)objc_msgSend(*(id *)(*((void *)&v31 + 1) + 8 * i), "path", v27);
        if (!-[__CFString hasPrefix:](v16, "hasPrefix:", v10)
          || -[__CFString containsString:](v16, "containsString:", @"/com.apple.watchconnectivity/"))
        {
          unint64_t v21 = (os_log_s *)_NSFCProcessMonitorLog();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138543619;
            unint64_t v36 = v8;
            unint64_t v37 = 2113;
            uint64_t v38 = (uint64_t)v16;
            _os_log_debug_impl( &dword_182EB1000,  v21,  OS_LOG_TYPE_DEBUG,  "Will be managing connection for %{public}@ because path is not private %{private}@",  buf,  0x16u);
          }

          uint64_t v18 = 1;
          uint64_t v6 = v28;
          goto LABEL_35;
        }

        unint64_t v17 = (os_log_s *)_NSFCProcessMonitorLog();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v27;
          unint64_t v36 = v16;
          unint64_t v37 = 2114;
          uint64_t v38 = (uint64_t)v8;
          _os_log_debug_impl( &dword_182EB1000,  v17,  OS_LOG_TYPE_DEBUG,  "Skipping path %{private}@ for %{public}@ because path it is private",  buf,  0x16u);
        }
      }

      unint64_t v13 = [a4 countByEnumeratingWithState:&v31 objects:v30 count:16];
      uint64_t v18 = 0;
      uint64_t v6 = v28;
      if (v13) {
        continue;
      }
      break;
    }
  }

  else
  {
    uint64_t v18 = 0;
  }

uint64_t PredicateExpressions.Variable.debugString(state:)(__int128 *a1)
{
  Swift::UInt v2 = *v1;
  uint64_t v3 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3);
  __int128 v7 = *a1;
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  Swift::UInt v6 = v2;
  return DebugStringConversionState.subscript.getter(&v6);
}

uint64_t PredicateExpressions.KeyPath<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  unint64_t v32 = v3;
  uint64_t v4 = AnyKeyPath.debugDescription.getter();
  unint64_t v6 = v5;
  uint64_t v35 = 46LL;
  unint64_t v36 = 0xE100000000000000LL;
  uint64_t v34 = &v35;
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)( 0x7FFFFFFFFFFFFFFFLL,  1,  partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:),  (uint64_t)v33,  v4,  v6);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v9 = *(void *)(v7 + 16);
  int64_t v10 = v9 - 1;
  unint64_t v11 = v9 - 2;
  if (v9 < 2) {
    goto LABEL_14;
  }
  uint64_t v12 = (unint64_t *)(v7 + 32 + 32 * v10);
  unint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  swift_bridgeObjectRetain();
  LOBYTE(v13) = specialized Sequence<>.starts<A>(with:)(62LL, 0xE100000000000000LL, v13, v14);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v13 & 1) != 0) {
    goto LABEL_14;
  }
  unint64_t v15 = v9 - 3;
  if (v9 < 3)
  {
    int64_t v10 = 0LL;
    goto LABEL_14;
  }

  if (v11 < *(void *)(v7 + 16))
  {
    unint64_t v16 = (unint64_t *)(v7 + 32 + 32 * v11);
    unint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    LOBYTE(v17) = specialized Sequence<>.starts<A>(with:)(62LL, 0xE100000000000000LL, v17, v18);
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v10 = v9 - 2;
    if ((v17 & 1) == 0)
    {
      char v19 = (unint64_t *)(v7 + 32 * v9 - 64);
      while ((uint64_t)(v15 + 1) >= 2)
      {
        if (v15 >= *(void *)(v7 + 16)) {
          goto LABEL_22;
        }
        unint64_t v20 = *v19;
        unint64_t v21 = v19[1];
        swift_bridgeObjectRetain();
        LOBYTE(v20) = specialized Sequence<>.starts<A>(with:)(62LL, 0xE100000000000000LL, v20, v21);
        uint64_t result = swift_bridgeObjectRelease();
        --v15;
        v19 -= 4;
        if ((v20 & 1) != 0)
        {
          int64_t v10 = v15 + 1;
          goto LABEL_13;
        }
      }

      int64_t v10 = 0LL;
LABEL_13:
      if ((uint64_t)v9 <= v10)
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
    }

LABEL_14:
    unint64_t v22 = *(void *)(v7 + 16);
    if (v22 >= v10 + 1 && v22 >= v9)
    {
      uint64_t v35 = v7;
      unint64_t v36 = v7 + 32;
      int64_t v37 = v10 + 1;
      uint64_t v38 = (2 * v9) | 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Substring>);
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>,  &demangling cache variable for type metadata for ArraySlice<Substring>,  MEMORY[0x189618F90]);
      lazy protocol witness table accessor for type Substring and conformance Substring();
      uint64_t v24 = Sequence<>.joined(separator:)();
      uint64_t v26 = v25;
      swift_bridgeObjectRelease();
      uint64_t v35 = 46LL;
      unint64_t v36 = 0xE100000000000000LL;
      v27._uint64_t countAndFlagsBits = v24;
      v27._object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      uint64_t v28 = v35;
      uint64_t v29 = (void *)v36;
      uint64_t v35 = v31;
      unint64_t v36 = v32;
      swift_bridgeObjectRetain();
      v30._uint64_t countAndFlagsBits = v28;
      v30._object = v29;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v35;
    }

    goto LABEL_21;
  }

    if (a4 >> 60 == 15) {
      int64_t v10 = 0LL;
    }
    else {
      int64_t v10 = (__CFString *)a3;
    }
    if (a4 >> 60 == 15) {
      unint64_t v20 = 0xC000000000000000LL;
    }
    else {
      unint64_t v20 = a4;
    }
    outlined copy of Data?(a3, a4);
    v76 = a1;
    URL.init(fileURLWithPath:)(a1, a2, (uint64_t)&v80);
    a3 = *((void *)&v80 + 1);
    unint64_t v21 = (void *)v80;
    unint64_t v22 = v81;
    swift_retain();
    unint64_t v23 = v21;
    swift_retain();
    if (!_foundation_swift_url_feature_enabled())
    {
      Swift::String v27 = objc_msgSend(v23, sel_isFileURL);
      swift_release();
      swift_release();

      if ((v27 & 1) != 0) {
        goto LABEL_29;
      }
      goto LABEL_30;
    }

    uint64_t v77 = v23;
    int v78 = a3;
    unint64_t v79 = v22;
    URL.scheme.getter();
    if (!v24)
    {
      swift_release();
      swift_release();

      goto LABEL_30;
    }

    uint64_t v73 = v20;
    char v25 = String.lowercased()();
    swift_bridgeObjectRelease();
    uint64_t v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_release();

    uint64_t v26 = swift_bridgeObjectRelease();
    unint64_t v20 = v73;
    if ((v28 & 1) != 0) {
      goto LABEL_29;
    }
LABEL_30:
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    Swift::String v30 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v31 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v13 = objc_msgSend(v30, sel_initWithDomain_code_userInfo_, v31, 518, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v32 = objc_msgSend(v13, sel_domain);
    unint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    a4 = v34;

    if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && a4 == v35)
    {
      swift_bridgeObjectRelease_n();
LABEL_34:
      swift_willThrow();
      swift_release();
      swift_release();

      outlined consume of Data._Representation((uint64_t)v10, v20);
      swift_bridgeObjectRelease();
      return 0LL;
    }

    a2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((a2 & 1) != 0) {
      goto LABEL_34;
    }
    __break(1u);
LABEL_69:
    uint64_t v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v65 & 1) != 0) {
LABEL_70:
    }
      uint64_t v45 = 1342177281LL;
    else {
      uint64_t v45 = 1LL;
    }
  }

  swift_release();
  swift_release();

  uint64_t v26 = swift_bridgeObjectRelease();
  unint64_t v20 = v73;
LABEL_29:
  uint64_t v72 = a2;
  MEMORY[0x1895F8858](v26);
  v66[2] = v23;
  void v66[3] = a3;
  v66[4] = v22;
  uint64_t v67 = 1;
  uint64_t v68 = v19;
  uint64_t v69 = MEMORY[0x18961AFF0];
  LOBYTE(v70) = 1;
  uint64_t v29 = v23;
  swift_retain();
  swift_retain();
  specialized Data._Representation.withUnsafeBytes<A>(_:)( (uint64_t)partial apply for closure #1 in writeToFile(path:data:options:attributes:reportProgress:),  (uint64_t)v66,  (uint64_t)v10,  v20);
  swift_release_n();
  swift_release_n();

  outlined consume of Data._Representation((uint64_t)v10, v20);
  if (!v82) {
    return 1LL;
  }
  int64_t v37 = MEMORY[0x186E20F44](v75 + v74);
  if (v37)
  {
    uint64_t v38 = (void *)v37;
    type metadata accessor for NSFileAttributeKey(0LL);
    lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
    swift_bridgeObjectRetain();
    uint64_t v39 = _NativeDictionary.bridged()();
    uint64_t v40 = String._bridgeToObjectiveCImpl()();
    *(void *)&v80 = 0LL;
    uint64_t v41 = objc_msgSend(v38, sel_setAttributes_ofItemAtPath_error_, v39, v40, &v80);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if ((v41 & 1) != 0)
    {
      uint64_t v42 = (id)v80;
      goto LABEL_48;
    }

    if ((void)v80)
    {
      uint64_t v43 = (id)v80;
      swift_willThrow();
      swift_bridgeObjectRelease();
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      swift_willThrow();
LABEL_48:
      swift_bridgeObjectRelease();
    }

    return 1LL;
  }

  else
  {
    uint64_t v71 = 0;
    uint64_t v70 = 48LL;
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

  unint64_t v21 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 16_Block_object_dispose((const void *)(v1 - 96), 8) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v21;
LABEL_15:
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  unint64_t v22 = *(void *)(a2 + 216);
  if (v22)
  {
    *(void *)(a1 + 20_Block_object_dispose((const void *)(v1 - 96), 8) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = v22;
    unint64_t v23 = *(void *)(a2 + 232);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v24 = *(void *)(a2 + 248);
    if (v24) {
      goto LABEL_17;
    }
LABEL_20:
    uint64_t v29 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v29;
    uint64_t v26 = *(void *)(a2 + 280);
    if (v26) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }

  uint64_t v28 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 20_Block_object_dispose((const void *)(v1 - 96), 8) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v28;
  uint64_t v24 = *(void *)(a2 + 248);
  if (!v24) {
    goto LABEL_20;
  }
LABEL_17:
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 24_Block_object_dispose((const void *)(v1 - 96), 8) = v24;
  char v25 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = *(void *)(a2 + 280);
  if (v26)
  {
LABEL_18:
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = v26;
    Swift::String v27 = *(void *)(a2 + 296);
    *(void *)(a1 + 28_Block_object_dispose((const void *)(v1 - 96), 8) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_22;
  }

      unint64_t v13 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000LL) == 0) {
        unint64_t v13 = v3 & 0xFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        v2[22] = v3;
        v2[23] = v6;
        MEMORY[0x1895F8858](v12);
        uint64_t v43 = v4;
        uint64_t v44 = 2;
        swift_bridgeObjectRetain();
        unint64_t v14 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v42,  v3,  v6);
        if (v15)
        {
          unint64_t v3 = (uint64_t)v14;
          unint64_t v16 = v15;
        }

        else
        {
          unint64_t v22 = v2[22];
          unint64_t v23 = v2[23];
          swift_bridgeObjectRetain();
          unint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
          unint64_t v16 = v24;
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease_n();
        unint64_t v6 = v16;
      }

      else
      {
        swift_bridgeObjectRelease();
        unint64_t v3 = 0LL;
        unint64_t v6 = 0xE000000000000000LL;
      }

      goto LABEL_30;
    }

    if ((v6 & 0x2000000000000000LL) != 0)
    {
      uint64_t v8 = HIBYTE(v6) & 0xF;
      v2[22] = v3;
      v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v4;
    }

    else if ((v3 & 0x1000000000000000LL) != 0)
    {
      uint64_t v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v7 = (char *)_StringObject.sharedUTF8.getter();
    }

    unint64_t v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 2u, 0);
    uint64_t v12 = swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_14;
    }
  }

      unint64_t v13 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000LL) == 0) {
        unint64_t v13 = v3 & 0xFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        v2[22] = v3;
        v2[23] = v6;
        MEMORY[0x1895F8858](v12);
        uint64_t v43 = v4;
        uint64_t v44 = 2;
        swift_bridgeObjectRetain();
        unint64_t v14 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v42,  v3,  v6);
        if (v15)
        {
          unint64_t v3 = (uint64_t)v14;
          unint64_t v16 = v15;
        }

        else
        {
          unint64_t v22 = v2[22];
          unint64_t v23 = v2[23];
          swift_bridgeObjectRetain();
          unint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
          unint64_t v16 = v24;
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease_n();
        unint64_t v6 = v16;
      }

      else
      {
        swift_bridgeObjectRelease();
        unint64_t v3 = 0LL;
        unint64_t v6 = 0xE000000000000000LL;
      }

      goto LABEL_30;
    }

    if ((v6 & 0x2000000000000000LL) != 0)
    {
      uint64_t v8 = HIBYTE(v6) & 0xF;
      v2[22] = v3;
      v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v4;
    }

    else if ((v3 & 0x1000000000000000LL) != 0)
    {
      uint64_t v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v7 = (char *)_StringObject.sharedUTF8.getter();
    }

    unint64_t v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 2u, 0);
    uint64_t v12 = swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_14;
    }
  }

      unint64_t v13 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000LL) == 0) {
        unint64_t v13 = v3 & 0xFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        v2[22] = v3;
        v2[23] = v6;
        MEMORY[0x1895F8858](v12);
        uint64_t v43 = v4;
        uint64_t v44 = 64;
        swift_bridgeObjectRetain();
        unint64_t v14 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v42,  v3,  v6);
        if (v15)
        {
          unint64_t v3 = (uint64_t)v14;
          unint64_t v16 = v15;
        }

        else
        {
          unint64_t v22 = v2[22];
          unint64_t v23 = v2[23];
          swift_bridgeObjectRetain();
          unint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
          unint64_t v16 = v24;
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease_n();
        unint64_t v6 = v16;
      }

      else
      {
        swift_bridgeObjectRelease();
        unint64_t v3 = 0LL;
        unint64_t v6 = 0xE000000000000000LL;
      }

      goto LABEL_30;
    }

    if ((v6 & 0x2000000000000000LL) != 0)
    {
      uint64_t v8 = HIBYTE(v6) & 0xF;
      v2[22] = v3;
      v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v4;
    }

    else if ((v3 & 0x1000000000000000LL) != 0)
    {
      uint64_t v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v7 = (char *)_StringObject.sharedUTF8.getter();
    }

    unint64_t v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x40u, 0);
    uint64_t v12 = swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_14;
    }
  }

      unint64_t v13 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000LL) == 0) {
        unint64_t v13 = v3 & 0xFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        v2[22] = v3;
        v2[23] = v6;
        MEMORY[0x1895F8858](v12);
        uint64_t v43 = v4;
        uint64_t v44 = 64;
        swift_bridgeObjectRetain();
        unint64_t v14 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v42,  v3,  v6);
        if (v15)
        {
          unint64_t v3 = (uint64_t)v14;
          unint64_t v16 = v15;
        }

        else
        {
          unint64_t v22 = v2[22];
          unint64_t v23 = v2[23];
          swift_bridgeObjectRetain();
          unint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
          unint64_t v16 = v24;
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease_n();
        unint64_t v6 = v16;
      }

      else
      {
        swift_bridgeObjectRelease();
        unint64_t v3 = 0LL;
        unint64_t v6 = 0xE000000000000000LL;
      }

      goto LABEL_30;
    }

    if ((v6 & 0x2000000000000000LL) != 0)
    {
      uint64_t v8 = HIBYTE(v6) & 0xF;
      v2[22] = v3;
      v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v4;
    }

    else if ((v3 & 0x1000000000000000LL) != 0)
    {
      uint64_t v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v7 = (char *)_StringObject.sharedUTF8.getter();
    }

    unint64_t v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x40u, 0);
    uint64_t v12 = swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_14;
    }
  }

    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    if ((v7 & 1) != 0) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }

  Hasher._combine(_:)(0LL);
  Hasher._combine(_:)(v2);
  if ((v4 & 1) != 0)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    return;
  }

  Hasher._combine(_:)(1u);
  uint64_t v8 = v1;
LABEL_16:
  Hasher._combine(_:)(v8);
}

        *(_WORD *)(a2 + 2 * v13++) = v24;
        if (a3 == v13) {
          goto LABEL_57;
        }
      }
    }

    char v19 = a4;
LABEL_57:
    unint64_t v13 = a3;
  }

  else
  {
    unint64_t v13 = 0LL;
    char v19 = a4;
  }

            unint64_t v15 = v17;
            goto LABEL_21;
          }

    LOBYTE(v11) = 1;
    if ((a3 & 1) != 0) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }

  return 0LL;
}

    uint64_t v12 = v21;
    if (v21 >= v22) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

            if (!withoutBraces) {
              goto LABEL_6;
            }
            goto LABEL_31;
          }

          unint64_t v17 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v14,  v3[1],  v3[2]);
          char v19 = v23;
          unint64_t v21 = v24;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)unint64_t v11 = xmmword_1837301B0;
          *(void *)(v11 + 16) = v16;
        }

  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
LABEL_15:
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v13 & 1) + 1LL);
  }

  if (v16 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v16 & 1) + 1LL);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Optional<A>.hash(into:)(a1, v17, v12, (v14 | (v15 << 32)) & 0xFFFFFFFFFFLL);
  return swift_bridgeObjectRelease();
}

      __break(1u);
    }

      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      goto LABEL_15;
    case 0:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      uint64_t v8 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v8;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      unint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      int64_t v10 = v9[9];
      unint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      unint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      unint64_t v14 = *(void *)(v13 - 8);
      goto LABEL_14;
  }

  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
LABEL_17:
  unint64_t v32 = *(int *)(a3 + 20);
  unint64_t v33 = *(int *)(a3 + 24);
  uint64_t v34 = &a1[v32];
  uint64_t v35 = &a2[v32];
  unint64_t v36 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = v36;
  a1[v33] = a2[v33];
  swift_bridgeObjectRetain();
  return a1;
}

        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
        goto LABEL_15;
    }

    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
  }

      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      goto LABEL_15;
    case 0:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      uint64_t v8 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v8;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      unint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      int64_t v10 = v9[9];
      unint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      unint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      unint64_t v14 = *(void *)(v13 - 8);
      goto LABEL_14;
  }

  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
LABEL_17:
  unint64_t v32 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  a1[v32] = a2[v32];
  return a1;
}

        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
        goto LABEL_15;
    }

    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
  }

        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
        goto LABEL_15;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_15;
    case 0:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      uint64_t v7 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v7;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      uint64_t v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      unint64_t v9 = v8[9];
      int64_t v10 = &a1[v9];
      unint64_t v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
      unint64_t v13 = *(void *)(v12 - 8);
      goto LABEL_14;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
        goto LABEL_15;
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_15;
    case 0:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      uint64_t v7 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v7;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      uint64_t v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      unint64_t v9 = v8[9];
      int64_t v10 = &a1[v9];
      unint64_t v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
      unint64_t v13 = *(void *)(v12 - 8);
      goto LABEL_14;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
        goto LABEL_15;
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

  uint64_t v56 = v15;
  char v57 = v12;
  uint64_t v12 = v7[8];
  unint64_t v18 = v7[9];
  char v19 = v7;
  unint64_t v20 = v7[10];
  uint64_t v58 = v19;
  CFStringRef v59 = v19[11];
  if (a2 != v6)
  {
    uint64_t v29 = v17;
    Swift::String v30 = v18;
    uint64_t v31 = swift_unknownObjectRetain();
    unint64_t v17 = v30;
    unint64_t v32 = v20;
    unint64_t v3 = specialized Rope._endPath.getter(v31);
    if (v12)
    {
      swift_unknownObjectRelease();
      unint64_t v15 = 0LL;
    }

    else
    {
      unint64_t v15 = 0LL;
      unint64_t v17 = 0LL;
      unint64_t v32 = 0LL;
    }

    uint64_t v7 = v58;
LABEL_74:
    v62[0] = v59;
    v62[1] = v3;
    v62[2] = v15;
    v62[3] = v17;
    v62[4] = v32;
    v61[0] = v9;
    v61[1] = v57;
    v61[2] = v13;
    v61[3] = v56;
    v61[4] = v29;
    return specialized BidirectionalCollection._distance(from:to:)(v61, (uint64_t)v62, v7, a2, a3);
  }

  unint64_t v54 = v18;
  uint64_t v55 = v9;
  if (!v12)
  {
    if (a2 > 0) {
      goto LABEL_122;
    }
LABEL_71:
    swift_unknownObjectRetain_n();
    unint64_t v3 = specialized Rope._endPath.getter(v12);
    swift_unknownObjectRelease();
    unint64_t v15 = 0LL;
    unint64_t v9 = 0LL;
    uint64_t v7 = v58;
    uint64_t v29 = v17;
    if (!v12) {
      goto LABEL_101;
    }
    goto LABEL_72;
  }

  if (v20 < a2) {
    goto LABEL_120;
  }
  if (!*(_WORD *)(v12 + 16) || v20 <= a2) {
    goto LABEL_71;
  }
  unint64_t v21 = *(unsigned __int8 *)(v12 + 18);
  if (!*(_BYTE *)(v12 + 18))
  {
    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    unint64_t v3 = 0LL;
    unint64_t v9 = a2;
    unint64_t v15 = v12;
    uint64_t v7 = v58;
    uint64_t v45 = *(unsigned __int16 *)(v12 + 16);
    if (*(_WORD *)(v12 + 16)) {
      goto LABEL_77;
    }
LABEL_99:
    if (!v9)
    {
      while (1)
      {
LABEL_100:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v3 |= v45 << 8;
        uint64_t v29 = v17;
        if (v12)
        {
LABEL_72:
          swift_unknownObjectRetain();
          unint64_t v17 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v59, v3, v15, v12, v54);
          swift_unknownObjectRelease_n();
          unint64_t v32 = a2 - v9;
          if (!__OFSUB__(a2, v9)) {
            goto LABEL_73;
          }
        }

        else
        {
LABEL_101:
          unint64_t v17 = 0LL;
          unint64_t v32 = a2 - v9;
          if (!__OFSUB__(a2, v9))
          {
LABEL_73:
            unint64_t v9 = v55;
            goto LABEL_74;
          }
        }

        __break(1u);
LABEL_104:
        uint64_t v45 = v47;
        unint64_t v9 = v46;
      }
    }

    goto LABEL_127;
  }

  uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  unint64_t v9 = a2;
  unint64_t v15 = v12;
  uint64_t v7 = v58;
  do
  {
    unint64_t v23 = *(unsigned __int16 *)(v15 + 16);
    if (*(_WORD *)(v15 + 16))
    {
      uint64_t v24 = *(void *)(v15 + 40);
      unint64_t v16 = __OFSUB__(v9, v24);
      char v25 = v9 - v24;
      if (v16) {
        goto LABEL_113;
      }
      if (__OFADD__(v25, 1LL)) {
        goto LABEL_114;
      }
      if (v25 + 1 < 1)
      {
        unint64_t v23 = 0LL;
        goto LABEL_23;
      }

      if ((_DWORD)v23 != 1)
      {
        uint64_t v26 = (uint64_t *)(v15 + 64);
        Swift::String v27 = 1LL;
        while (1)
        {
          uint64_t v28 = *v26;
          v26 += 3;
          unint64_t v9 = v25 - v28;
          if (__OFSUB__(v25, v28)) {
            goto LABEL_107;
          }
          if (__OFADD__(v9, 1LL)) {
            goto LABEL_108;
          }
          if (v9 + 1 < 1) {
            break;
          }
          ++v27;
          char v25 = v9;
          if (v23 == v27) {
            goto LABEL_22;
          }
        }

        unint64_t v23 = v27;
        unint64_t v9 = v25;
        goto LABEL_23;
      }

      unint64_t v9 = v25;
    }

  __break(1u);
  return result;
}

      *a2 = result;
      a2[1] = v8;
      a2[2] = v7;
      a2[3] = v9;
      a2[4] = v10;
      return result;
    }

      char v19 = *((void *)v4 + 3);
      if ((uint64_t)((v19 >> 1) + 0x4000000000000000LL) < 0)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }

      unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
      if (v20 <= 1) {
        unint64_t v21 = 1LL;
      }
      else {
        unint64_t v21 = v20;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      unint64_t v22 = (char *)swift_allocObject();
      unint64_t v23 = _swift_stdlib_malloc_size(v22);
      uint64_t v24 = v23 - 32;
      if (v23 < 32) {
        uint64_t v24 = v23 - 25;
      }
      char v25 = v24 >> 3;
      *((void *)v22 + 2) = v21;
      *((void *)v22 + 3) = 2 * (v24 >> 3);
      uint64_t v26 = v22 + 32;
      Swift::String v27 = *((void *)v4 + 3) >> 1;
      unint64_t v11 = &v22[8 * v27 + 32];
      unint64_t v14 = (v25 & 0x7FFFFFFFFFFFFFFFLL) - v27;
      if (*((void *)v4 + 2))
      {
        uint64_t v28 = v4 + 32;
        if (v22 != v4 || v26 >= &v28[8 * v27]) {
          memmove(v26, v28, 8 * v27);
        }
        *((void *)v4 + 2) = 0LL;
      }

      swift_release();
      uint64_t v4 = v22;
LABEL_26:
      uint64_t v29 = __OFSUB__(v14--, 1LL);
      if (!v29) {
        goto LABEL_27;
      }
      goto LABEL_55;
    }
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v4 = (char *)swift_allocObject();
    unint64_t v5 = _swift_stdlib_malloc_size(v4);
    unint64_t v6 = v5 - 32;
    if (v5 < 32) {
      unint64_t v6 = v5 - 25;
    }
    uint64_t v7 = v6 >> 3;
    *((void *)v4 + 2) = v3;
    *((void *)v4 + 3) = 2 * (v6 >> 3);
    uint64_t v8 = a1;
    unint64_t v9 = objc_msgSend(v8, sel_firstIndex);
    if (v9 == (id)0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_59;
    }
    int64_t v10 = v9;
    *((void *)v4 + 4) = v9;
    unint64_t v11 = v4 + 40;
    uint64_t v12 = v3 - 1;
    if (v3 != 1)
    {
      do
      {
        unint64_t v13 = objc_msgSend(v8, sel_indexGreaterThanIndex_, v10);
        if (v13 == (id)0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_56;
        }
        int64_t v10 = v13;
        *(void *)unint64_t v11 = v13;
        v11 += 8;
      }

      while (--v12);
    }

    unint64_t v14 = (v7 & 0x7FFFFFFFFFFFFFFFLL) - v3;
    unint64_t v15 = objc_msgSend(v8, sel_indexGreaterThanIndex_, v10);
    if (v15 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v16 = v15;
      if (v14) {
        goto LABEL_26;
      }
      goto LABEL_14;
    }
  }

      if (!v41) {
        goto LABEL_15;
      }
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
      goto LABEL_201;
    }

    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v268);
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v41 = v26 >> 11;
    uint64_t v44 = v35;
LABEL_32:
    v220 = (__int128 *)(v26 >> 11);
    char v57 = *(unsigned __int16 *)(v44 + 16);
    if (*(_WORD *)(v44 + 16))
    {
      uint64_t v58 = *(void *)(v44 + 24);
      uint64_t v47 = __OFSUB__(v41, v58);
      CFStringRef v59 = v41 - v58;
      uint64_t v34 = v211;
      if (v47)
      {
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }

      if (__OFADD__(v59, 1LL)) {
        goto LABEL_219;
      }
      uint64_t v55 = v44;
      if ((uint64_t)(v59 + 1) < 1)
      {
        char v57 = 0LL;
      }

      else
      {
        if ((_DWORD)v57 == 1)
        {
          uint64_t v41 = v59;
          goto LABEL_45;
        }

        uint64_t v60 = (uint64_t *)(v44 + 48);
        uint64_t v61 = 1LL;
        while (1)
        {
          unint64_t v62 = *v60;
          v60 += 3;
          uint64_t v41 = v59 - v62;
          if (__OFSUB__(v59, v62)) {
            goto LABEL_215;
          }
          if (__OFADD__(v41, 1LL)) {
            goto LABEL_216;
          }
          ++v61;
          CFStringRef v59 = v41;
          if (v57 == v61) {
            goto LABEL_45;
          }
        }

        char v57 = v61;
        uint64_t v41 = v59;
      }

      if (!v22) {
        goto LABEL_15;
      }
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
      goto LABEL_186;
    }

    swift_unknownObjectRetain_n();
    uint64_t result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v217);
    unint64_t v22 = v165 >> 11;
    char v25 = v15;
LABEL_32:
    uint64_t v35 = *(unsigned __int16 *)(v25 + 16);
    v164 = v25;
    if ((_DWORD)v35)
    {
      unint64_t v36 = *(void *)(v25 + 24);
      uint64_t v28 = __OFSUB__(v22, v36);
      int64_t v37 = v22 - v36;
      unint64_t v14 = v156;
      unint64_t v17 = v178;
      if (v28)
      {
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
        goto LABEL_204;
      }

      if (__OFADD__(v37, 1LL)) {
        goto LABEL_202;
      }
      if ((uint64_t)(v37 + 1) < 1)
      {
        uint64_t v35 = 0LL;
      }

      else
      {
        if ((_DWORD)v35 == 1)
        {
          unint64_t v22 = v37;
          goto LABEL_45;
        }

        uint64_t v38 = (uint64_t *)(v164 + 48);
        uint64_t v39 = 1LL;
        while (1)
        {
          uint64_t v40 = *v38;
          v38 += 3;
          unint64_t v22 = v37 - v40;
          if (__OFSUB__(v37, v40)) {
            goto LABEL_198;
          }
          if (__OFADD__(v22, 1LL)) {
            goto LABEL_199;
          }
          ++v39;
          int64_t v37 = v22;
          if (v35 == v39) {
            goto LABEL_45;
          }
        }

        uint64_t v35 = v39;
        unint64_t v22 = v37;
      }

      if (!v19) {
        goto LABEL_15;
      }
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }

    swift_unknownObjectRetain_n();
    uint64_t result = outlined retain of AttributedString.Runs((uint64_t)v181);
    char v19 = (char *)v15;
    unint64_t v22 = v13;
LABEL_32:
    unint64_t v32 = *(unsigned __int16 *)(v22 + 16);
    uint64_t v31 = v22;
    if (!*(_WORD *)(v22 + 16)) {
      goto LABEL_45;
    }
    unint64_t v33 = *(void *)(v22 + 24);
    char v25 = __OFSUB__(v19, v33);
    uint64_t v34 = &v19[-v33];
    if (v25)
    {
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }

    if (__OFADD__(v34, 1LL))
    {
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }

    if ((uint64_t)(v34 + 1) < 1)
    {
      unint64_t v32 = 0LL;
    }

    else
    {
      if ((_DWORD)v32 == 1)
      {
        char v19 = v34;
LABEL_45:
        if (v19)
        {
LABEL_162:
          __break(1u);
          return result;
        }

        goto LABEL_46;
      }

      uint64_t v35 = (uint64_t *)(v22 + 48);
      unint64_t v36 = 1LL;
      while (1)
      {
        int64_t v37 = *v35;
        v35 += 3;
        char v19 = &v34[-v37];
        if (__OFSUB__(v34, v37)) {
          goto LABEL_158;
        }
        if (__OFADD__(v19, 1LL)) {
          goto LABEL_159;
        }
        ++v36;
        uint64_t v34 = v19;
        if (v32 == v36) {
          goto LABEL_45;
        }
      }

      unint64_t v32 = v36;
      char v19 = v34;
    }

      if (!v27) {
        goto LABEL_15;
      }
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
LABEL_275:
      __break(1u);
LABEL_276:
      __break(1u);
LABEL_277:
      __break(1u);
      goto LABEL_278;
    }

    swift_unknownObjectRetain_n();
    uint64_t result = outlined retain of AttributedString.Runs((uint64_t)v327);
    Swift::String v27 = v270;
    Swift::String v30 = v22;
LABEL_32:
    uint64_t v38 = *(unsigned __int16 *)(v30 + 16);
    if (*(_WORD *)(v30 + 16))
    {
      uint64_t v39 = *(void *)(v30 + 24);
      unint64_t v33 = __OFSUB__(v27, v39);
      uint64_t v40 = (__int128 *)((char *)v27 - v39);
      unint64_t v21 = v260;
      if (v33)
      {
LABEL_310:
        __break(1u);
        goto LABEL_311;
      }

      if (__OFADD__(v40, 1LL))
      {
LABEL_311:
        __break(1u);
        goto LABEL_312;
      }

      if ((uint64_t)v40 + 1 < 1)
      {
        uint64_t v38 = 0LL;
      }

      else
      {
        if ((_DWORD)v38 == 1)
        {
          Swift::String v27 = v40;
          goto LABEL_45;
        }

        uint64_t v41 = (uint64_t *)(v30 + 48);
        uint64_t v42 = 1LL;
        while (1)
        {
          uint64_t v43 = *v41;
          v41 += 3;
          Swift::String v27 = (__int128 *)((char *)v40 - v43);
          if (__OFSUB__(v40, v43)) {
            goto LABEL_295;
          }
          if (__OFADD__(v27, 1LL)) {
            goto LABEL_296;
          }
          ++v42;
          uint64_t v40 = v27;
          if (v38 == v42) {
            goto LABEL_45;
          }
        }

        uint64_t v38 = v42;
        Swift::String v27 = v40;
      }

      if (!v15) {
        goto LABEL_15;
      }
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }

    swift_unknownObjectRetain_n();
    uint64_t result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v184);
    char v25 = v13;
LABEL_32:
    uint64_t v35 = *(unsigned __int16 *)(v25 + 16);
    uint64_t v34 = v25;
    if (!*(_WORD *)(v25 + 16)) {
      goto LABEL_45;
    }
    unint64_t v36 = *(void *)(v25 + 24);
    uint64_t v28 = __OFSUB__(v15, v36);
    int64_t v37 = v15 - v36;
    if (v28)
    {
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }

    if (__OFADD__(v37, 1LL))
    {
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }

    if (v37 + 1 <= 0)
    {
      uint64_t v35 = 0LL;
    }

    else
    {
      if ((_DWORD)v35 == 1)
      {
        unint64_t v15 = v37;
LABEL_45:
        if (v15)
        {
LABEL_162:
          __break(1u);
          return result;
        }

        goto LABEL_46;
      }

      uint64_t v38 = (uint64_t *)(v25 + 48);
      uint64_t v39 = 1LL;
      while (1)
      {
        uint64_t v40 = *v38;
        v38 += 3;
        unint64_t v15 = v37 - v40;
        if (__OFSUB__(v37, v40)) {
          goto LABEL_158;
        }
        if (__OFADD__(v15, 1LL)) {
          goto LABEL_159;
        }
        if (v15 + 1 < 1) {
          break;
        }
        ++v39;
        int64_t v37 = v15;
        if (v35 == v39) {
          goto LABEL_45;
        }
      }

      uint64_t v35 = v39;
      unint64_t v15 = v37;
    }

      uint64_t v7 = v5;
      return v7 << 16;
    }

    unint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9) {
      return _StringGuts.foreignScalarAlign(_:)();
    }
  }

  return result;
}

    swift_unknownObjectRetain();
    unint64_t v14 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v41, v12, v13, v7, v39);
    uint64_t result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_50;
  }

  unint64_t v15 = *(unsigned __int8 *)(v7 + 18);
  if (*(_BYTE *)(v7 + 18))
  {
    uint64_t result = (unint64_t *)swift_unknownObjectRetain_n();
    unint64_t v13 = v7;
    while (1)
    {
      unint64_t v17 = *(unsigned __int16 *)(v13 + 16);
      if (*(_WORD *)(v13 + 16))
      {
        unint64_t v18 = *(void *)(v13 + 40);
        char v19 = __OFSUB__(v8, v18);
        unint64_t v20 = v8 - v18;
        if (v19) {
          goto LABEL_57;
        }
        if (__OFADD__(v20, 1LL)) {
          goto LABEL_58;
        }
        if (v20 + 1 < 1)
        {
          unint64_t v17 = 0LL;
          goto LABEL_19;
        }

        if ((_DWORD)v17 != 1)
        {
          unint64_t v21 = (uint64_t *)(v13 + 64);
          unint64_t v22 = 1LL;
          while (1)
          {
            unint64_t v23 = *v21;
            v21 += 3;
            uint64_t v8 = v20 - v23;
            if (__OFSUB__(v20, v23)) {
              break;
            }
            if (__OFADD__(v8, 1LL)) {
              goto LABEL_55;
            }
            if (v8 + 1 < 1)
            {
              unint64_t v17 = v22;
              uint64_t v8 = v20;
              goto LABEL_19;
            }

            ++v22;
            unint64_t v20 = v8;
            if (v17 == v22) {
              goto LABEL_18;
            }
          }

          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }

        uint64_t v8 = v20;
      }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _LocaleProtocol>);
    uint64_t v28 = static _DictionaryStorage.copy(original:)();
    unint64_t v23 = v28;
    if (*(void *)(v17 + 16))
    {
      uint64_t v29 = (void *)(v28 + 64);
      Swift::String v30 = (unint64_t)((1LL << *(_BYTE *)(v23 + 32)) + 63) >> 6;
      char __src = (void *)(v17 + 64);
      uint64_t v31 = 0LL;
      *(void *)(v23 + 16) = *(void *)(v17 + 16);
      unint64_t v32 = 1LL << *(_BYTE *)(v17 + 32);
      unint64_t v33 = -1LL;
      if (v32 < 64) {
        unint64_t v33 = ~(-1LL << v32);
      }
      uint64_t v34 = v33 & *(void *)(v17 + 64);
      Swift::String v52 = (unint64_t)(v32 + 63) >> 6;
      while (1)
      {
        if (v34)
        {
          uint64_t v35 = __clz(__rbit64(v34));
          v34 &= v34 - 1;
          unint64_t v36 = v35 | (v31 << 6);
        }

        else
        {
          uint64_t v43 = v31 + 1;
          if (__OFADD__(v31, 1LL)) {
            goto LABEL_54;
          }
          if (v43 >= v52) {
            break;
          }
          uint64_t v44 = *((void *)__src + v43);
          ++v31;
          if (!v44)
          {
            uint64_t v31 = v43 + 1;
            if (v43 + 1 >= v52) {
              break;
            }
            uint64_t v44 = *((void *)__src + v31);
            if (!v44)
            {
              uint64_t v31 = v43 + 2;
              if (v43 + 2 >= v52) {
                break;
              }
              uint64_t v44 = *((void *)__src + v31);
              if (!v44)
              {
                uint64_t v31 = v43 + 3;
                if (v43 + 3 >= v52) {
                  break;
                }
                uint64_t v44 = *((void *)__src + v31);
                if (!v44)
                {
                  uint64_t v31 = v43 + 4;
                  if (v43 + 4 >= v52) {
                    break;
                  }
                  uint64_t v44 = *((void *)__src + v31);
                  if (!v44)
                  {
                    uint64_t v31 = v43 + 5;
                    if (v43 + 5 >= v52) {
                      break;
                    }
                    uint64_t v44 = *((void *)__src + v31);
                    if (!v44)
                    {
                      uint64_t v31 = v43 + 6;
                      if (v43 + 6 >= v52) {
                        break;
                      }
                      uint64_t v44 = *((void *)__src + v31);
                      if (!v44)
                      {
                        uint64_t v31 = v43 + 7;
                        if (v43 + 7 >= v52) {
                          break;
                        }
                        uint64_t v44 = *((void *)__src + v31);
                        if (!v44)
                        {
                          uint64_t v45 = v43 + 8;
                          if (v45 >= v52) {
                            break;
                          }
                          uint64_t v44 = *((void *)__src + v45);
                          if (!v44)
                          {
                            while (1)
                            {
                              uint64_t v31 = v45 + 1;
                              if (__OFADD__(v45, 1LL)) {
                                goto LABEL_55;
                              }
                              if (v31 >= v52) {
                                goto LABEL_48;
                              }
                              uint64_t v44 = *((void *)__src + v31);
                              ++v45;
                              if (v44) {
                                goto LABEL_47;
                              }
                            }
                          }

                          uint64_t v31 = v45;
                        }
                      }
                    }
                  }
                }
              }
            }
          }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Components, _LocaleProtocol>);
    char v25 = static _DictionaryStorage.copy(original:)();
    unint64_t v21 = v25;
    if (*(void *)(v15 + 16))
    {
      uint64_t v26 = (void *)(v25 + 64);
      Swift::String v27 = (unint64_t)((1LL << *(_BYTE *)(v21 + 32)) + 63) >> 6;
      uint64_t v28 = 0LL;
      *(void *)(v21 + 16) = *(void *)(v15 + 16);
      uint64_t v29 = 1LL << *(_BYTE *)(v15 + 32);
      Swift::String v30 = -1LL;
      if (v29 < 64) {
        Swift::String v30 = ~(-1LL << v29);
      }
      uint64_t v31 = v30 & *(void *)(v15 + 64);
      uint64_t v44 = v15 + 64;
      uint64_t v45 = (unint64_t)(v29 + 63) >> 6;
      while (1)
      {
        if (v31)
        {
          uint64_t v47 = (v31 - 1) & v31;
          uint64_t v48 = v28;
          unint64_t v32 = __clz(__rbit64(v31)) | (v28 << 6);
        }

        else
        {
          unint64_t v36 = v28 + 1;
          if (__OFADD__(v28, 1LL)) {
            goto LABEL_54;
          }
          if (v36 >= v45) {
            break;
          }
          int64_t v37 = *(void *)(v44 + 8 * v36);
          uint64_t v38 = v28 + 1;
          if (!v37)
          {
            uint64_t v38 = v36 + 1;
            if (v36 + 1 >= v45) {
              break;
            }
            int64_t v37 = *(void *)(v44 + 8 * v38);
            if (!v37)
            {
              uint64_t v38 = v36 + 2;
              if (v36 + 2 >= v45) {
                break;
              }
              int64_t v37 = *(void *)(v44 + 8 * v38);
              if (!v37)
              {
                uint64_t v38 = v36 + 3;
                if (v36 + 3 >= v45) {
                  break;
                }
                int64_t v37 = *(void *)(v44 + 8 * v38);
                if (!v37)
                {
                  if (v36 + 4 >= v45) {
                    break;
                  }
                  uint64_t v38 = v36 + 4;
                  int64_t v37 = *(void *)(v44 + 8 * (v36 + 4));
                  if (!v37)
                  {
                    if (v36 + 5 >= v45) {
                      break;
                    }
                    uint64_t v38 = v36 + 5;
                    int64_t v37 = *(void *)(v44 + 8 * (v36 + 5));
                    if (!v37)
                    {
                      if (v36 + 6 >= v45) {
                        break;
                      }
                      uint64_t v38 = v36 + 6;
                      int64_t v37 = *(void *)(v44 + 8 * (v36 + 6));
                      if (!v37)
                      {
                        if (v36 + 7 >= v45) {
                          break;
                        }
                        uint64_t v38 = v36 + 7;
                        int64_t v37 = *(void *)(v44 + 8 * (v36 + 7));
                        if (!v37)
                        {
                          uint64_t v39 = v36 + 8;
                          if (v39 >= v45) {
                            break;
                          }
                          int64_t v37 = *(void *)(v44 + 8 * v39);
                          if (!v37)
                          {
                            while (1)
                            {
                              uint64_t v38 = v39 + 1;
                              if (__OFADD__(v39, 1LL)) {
                                goto LABEL_55;
                              }
                              if (v38 >= v45) {
                                goto LABEL_48;
                              }
                              int64_t v37 = *(void *)(v44 + 8 * v38);
                              ++v39;
                              if (v37) {
                                goto LABEL_47;
                              }
                            }
                          }

                          uint64_t v38 = v39;
                        }
                      }
                    }
                  }
                }
              }
            }
          }

    swift_bridgeObjectRelease();
    if ((v11 & 0x2000000000000000LL) != 0) {
      uint64_t v12 = HIBYTE(v11) & 0xF;
    }
    else {
      uint64_t v12 = v10 & 0xFFFFFFFFFFFFLL;
    }
LABEL_17:
    v8 += v12 + 1;
  }

  while (v8 < v6);
  MEMORY[0x186E20E60](v4, -1LL, -1LL);
  return v7;
}

    uint64_t v38 = (uint64_t *)(v37 + 64);
    goto LABEL_15;
  }

  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v39(v26, (char *)&v48 - v21, v15);
  unint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 40) = v48;
  uint64_t v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v36 + 16));
  v39((char *)v40, v26, v15);
  uint64_t v41 = (void (*)(char *, uint64_t))v18[1];
  unint64_t v32 = v51;
  swift_bridgeObjectRetain();
  v41(v22, v50);
  int64_t v37 = v52;
  *(void *)(v36 + 56) = v52;
  uint64_t v35 = v37 >> 62;
  if (!(v37 >> 62))
  {
    uint64_t v42 = (uint64_t *)(v37 + 64);
    goto LABEL_10;
  }

  if ((_DWORD)v35 == 1)
  {
    uint64_t v42 = (uint64_t *)((v37 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_10:
    uint64_t v44 = *v42;
    swift_retain();
    goto LABEL_12;
  }

  uint64_t v44 = 0LL;
LABEL_12:
  uint64_t result = v53;
  if (!__OFADD__(v44, 1LL))
  {
    *(void *)(v36 + 64) = v44 + 1;
    swift_release();
    swift_release();
    if ((_DWORD)v35) {
      goto LABEL_3;
    }
    goto LABEL_14;
  }

  __break(1u);
  return result;
}

  uint64_t v28 = v36;
  if ((_swift_isClassOrObjCExistentialType() & 1) == 0)
  {
    uint64_t v31 = v35;
    if (a6 < 0)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }

    if (!a6) {
      return;
    }
    unint64_t v32 = a6;
    while (v32 <= a6)
    {
      unint64_t v33 = v32 - 1;
      int64_t v37 = *(void *)(v31 - 8 + 8 * v32);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v31 + *(void *)(v12 + 72) * v33, v14, v28);
      unint64_t v32 = v33;
      if (!v33) {
        return;
      }
    }

    goto LABEL_27;
  }

  uint64_t v29 = v35;
  if (a6 < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  if (a6)
  {
    Swift::String v30 = 0LL;
    do
    {
      int64_t v37 = *(void *)(v29 + 8 * v30);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v29 + *(void *)(v12 + 72) * v30++, v14, v28);
    }

    while (a6 != v30);
  }

  __break(1u);
  return result;
}

        unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 56);
        outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)v31);
        outlined retain of LocalePreferences(v31);
        unint64_t v22 = v21(ObjectType, v10);
        if (v37 != v22)
        {
          uint64_t v29 = 0LL;
          Swift::String v30 = 0LL;
          v28[0] = 0LL;
          v28[1] = 0LL;
          unint64_t v23 = (*(uint64_t (**)(uint64_t *, void *, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(v10 + 112))( &v29,  v28,  v37,  0LL,  0LL,  1LL,  ObjectType,  v10);
          int64_t v10 = v24;
          swift_unknownObjectRelease();
          unint64_t v9 = v23;
        }

        goto LABEL_18;
      }
    }

    swift_bridgeObjectRelease();
    unint64_t v16 = 0LL;
    unint64_t v15 = 0LL;
    goto LABEL_17;
  }

  unint64_t v16 = *(void *)(a2 + 40);
  outlined retain of AttributedString.LocalizationOptions(a2);
LABEL_17:
  Swift::String v30 = *(void *)a2;
  uint64_t v31 = *(void *)(a2 + 8);
  unint64_t v32 = *(_BYTE *)(a2 + 16);
  unint64_t v33 = *(_BYTE *)(a2 + 17);
  uint64_t v34 = *(void *)(a2 + 24);
  uint64_t v35 = *(_BYTE *)(a2 + 32);
  unint64_t v36 = *(_BYTE *)(a2 + 33);
  uint64_t v58 = *(_OWORD *)(a3 + 16);
  uint64_t v42 = *(void *)(a3 + 40);
  CFStringRef v59 = *(void *)(a3 + 32);
  unint64_t v49 = v32;
  int64_t v37 = *(void *)a3;
  uint64_t v38 = *(void *)(a3 + 8);
  v48[0] = v30;
  v48[1] = v31;
  Swift::String v50 = v33;
  Swift::String v51 = v34;
  Swift::String v52 = v35;
  uint64_t v53 = v36;
  unint64_t v54 = v16;
  uint64_t v55 = v15;
  uint64_t v56 = 1;
  uint64_t v39 = *(void *)(a3 + 48);
  uint64_t v40 = a3 + 56;
  char v57 = *(_OWORD *)(a3 + 56);
  outlined retain of String.LocalizationValue((uint64_t)&v58);
  swift_bridgeObjectRetain();
  uint64_t v41 = v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of Locale((uint64_t)&v57);
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( v37,  v38,  (uint64_t)v48,  v42,  v39,  (uint64_t)v43,  v40,  v46,  1u,  v45,  v44);

  outlined release of Locale((uint64_t)&v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of String.LocalizationValue((uint64_t)&v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = (id)swift_bridgeObjectRelease();
  void *v47 = v61;
  return result;
}

  uint64_t v4 = 0;
  unint64_t v9 = value | (v3 << 8);
  int64_t v10 = *(unsigned __int8 *)(v0 + 64);
  unint64_t v11 = (v10 & 1) != 0 || v10 == 2;
  uint64_t v8 = bswap32(v9) >> 16;
  if (!v11) {
    LOWORD(v_Block_object_dispose((const void *)(v1 - 96), 8) = v9;
  }
  return (unsigned __int16)v8 | (v4 << 16);
}

  uint64_t v4 = 0;
  uint64_t v7 = v2 | (v3 << 8);
  uint64_t v8 = *((unsigned __int8 *)v0 + 16);
  unint64_t v9 = (v8 & 1) != 0 || v8 == 2;
  int64_t v10 = bswap32(v7) >> 16;
  if (v9) {
    LOWORD(v7) = v10;
  }
  return (unsigned __int16)v7 | (v4 << 16);
}

      uint64_t v26 = (void *)(*(void *)(v23 + 56) + 16 * v19);
      swift_unknownObjectRelease();
      *uint64_t v26 = v11;
      v26[1] = v16;
LABEL_23:
      *(void *)(v4 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = v23;
      goto LABEL_37;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
  unint64_t v49 = static _DictionaryStorage.copy(original:)();
  unint64_t v23 = v49;
  if (!*(void *)(v88 + 16)) {
    goto LABEL_75;
  }
  Swift::String v50 = (char *)(v49 + 64);
  char __src = (char *)(v88 + 64);
  Swift::String v51 = (unint64_t)((1LL << *(_BYTE *)(v23 + 32)) + 63) >> 6;
  if (v23 != v88 || v50 >= &__src[8 * v51]) {
    memmove(v50, __src, 8 * v51);
  }
  Swift::String v52 = 0LL;
  *(void *)(v23 + 16) = *(void *)(v88 + 16);
  uint64_t v53 = 1LL << *(_BYTE *)(v88 + 32);
  unint64_t v54 = -1LL;
  if (v53 < 64) {
    unint64_t v54 = ~(-1LL << v53);
  }
  uint64_t v55 = v54 & *(void *)(v88 + 64);
  uint64_t v56 = (unint64_t)(v53 + 63) >> 6;
  while (1)
  {
    if (v55)
    {
      char v57 = __clz(__rbit64(v55));
      v55 &= v55 - 1;
      uint64_t v58 = v57 | (v52 << 6);
      goto LABEL_48;
    }

    uint64_t v63 = v52 + 1;
    if (__OFADD__(v52, 1LL))
    {
      __break(1u);
      goto LABEL_114;
    }

    if (v63 >= v56) {
      goto LABEL_75;
    }
    uint64_t v64 = *(void *)&__src[8 * v63];
    ++v52;
    if (!v64)
    {
      Swift::String v52 = v63 + 1;
      if (v63 + 1 >= v56) {
        goto LABEL_75;
      }
      uint64_t v64 = *(void *)&__src[8 * v52];
      if (!v64)
      {
        Swift::String v52 = v63 + 2;
        if (v63 + 2 >= v56) {
          goto LABEL_75;
        }
        uint64_t v64 = *(void *)&__src[8 * v52];
        if (!v64)
        {
          Swift::String v52 = v63 + 3;
          if (v63 + 3 >= v56) {
            goto LABEL_75;
          }
          uint64_t v64 = *(void *)&__src[8 * v52];
          if (!v64)
          {
            Swift::String v52 = v63 + 4;
            if (v63 + 4 >= v56) {
              goto LABEL_75;
            }
            uint64_t v64 = *(void *)&__src[8 * v52];
            if (!v64)
            {
              Swift::String v52 = v63 + 5;
              if (v63 + 5 >= v56) {
                goto LABEL_75;
              }
              uint64_t v64 = *(void *)&__src[8 * v52];
              if (!v64)
              {
                Swift::String v52 = v63 + 6;
                if (v63 + 6 >= v56) {
                  goto LABEL_75;
                }
                uint64_t v64 = *(void *)&__src[8 * v52];
                if (!v64)
                {
                  Swift::String v52 = v63 + 7;
                  if (v63 + 7 >= v56) {
                    goto LABEL_75;
                  }
                  uint64_t v64 = *(void *)&__src[8 * v52];
                  if (!v64) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

          __break(1u);
          JUMPOUT(0x183336104LL);
        }

        __break(1u);
      }
    }

    int64_t v10 = 0;
    return v10 & 1;
  }

  unint64_t v3 = type metadata accessor for DecodingError();
  swift_allocError();
  unint64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *unint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  unint64_t v6 = *(void *)(*v0 + 32LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183720D90;
  uint64_t v8 = v0[3];
  *(void *)(inited + 56) = &type metadata for _CodingKey;
  *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  unint64_t v9 = swift_allocObject();
  *(void *)(inited + 32) = v9;
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = 0LL;
  *(void *)(v9 + 32) = 0LL;
  *(_BYTE *)(v9 + 40) = 2;
  v18[0] = v6;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v3 - 8) + 104LL))( v5,  *MEMORY[0x189619368],  v3);
  swift_willThrow();
  return v10 & 1;
}

    unint64_t v5 = 0LL;
    uint64_t v12 = 1;
    return v5 | ((unint64_t)v12 << 32);
  }

  unint64_t v6 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v7 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  if ((v6 & 1) != 0)
  {
    unint64_t v9 = (float)v7;
    *(float *)&unint64_t v5 = (float)v7;
    if ((~LODWORD(v9) & 0x7F800000) != 0)
    {
      if (v9 > -9.2234e18)
      {
        int64_t v10 = (uint64_t)v9;
        goto LABEL_12;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  else
  {
    unint64_t v11 = (float)(unint64_t)v7;
    *(float *)&unint64_t v5 = (float)(unint64_t)v7;
    if ((~LODWORD(v11) & 0x7F800000) != 0)
    {
      int64_t v10 = (unint64_t)v11;
LABEL_12:
      if (v7 == v10) {
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }

  __break(1u);
  return result;
}

      swift_unknownObjectRetain();
      unint64_t v16 = specialized Rope._Node.subscript.getter(v8, a2);
      swift_unknownObjectRelease();
LABEL_15:
      swift_bridgeObjectRelease();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      unint64_t v17 = v9[4];
      unint64_t v6 = __OFSUB__(v17, v16);
      unint64_t v18 = v17 - v16;
      if (!v6)
      {
        void v9[4] = v18;
        return result;
      }

      goto LABEL_20;
    }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  unint64_t v16 = v3 + 32;
  v111 = (uint64_t *)v3;
  v105 = (void *)(v3 + 8);
  v106 = (void *)(v3 + 32);
  uint64_t v4 = v119;
  while (1)
  {
    unint64_t v17 = v8[8];
    v119 = v4;
    if (v6 != (void *)v7)
    {
      if (v17) {
        unint64_t v22 = v8[10];
      }
      else {
        unint64_t v22 = 0LL;
      }
      goto LABEL_68;
    }

    uint64_t v4 = v8[10];
    if (v17) {
      unint64_t v18 = v8[10];
    }
    else {
      unint64_t v18 = 0LL;
    }
    if (v17)
    {
      unint64_t v3 = v8[9];
      char v19 = *(unsigned __int16 *)(v17 + 16);
      uint64_t v7 = *(unsigned __int8 *)(v17 + 18);
      unint64_t v20 = v4 <= (uint64_t)v6 || (_DWORD)v19 == 0;
      v109 = v12;
      v116 = v8[11];
      if (v20)
      {
        unint64_t v21 = ((-15LL << ((4 * v7 + 8) & 0x3C)) - 1) & v7 | (unint64_t)(v19 << ((4 * v7 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v8 = 0LL;
        unint64_t v9 = 0LL;
LABEL_65:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v116, v21, v9, v17, v3);
        uint64_t result = swift_unknownObjectRelease_n();
        uint64_t v7 = a3;
        uint64_t v12 = v109;
        goto LABEL_66;
      }

      if (*(_BYTE *)(v17 + 18))
      {
        swift_unknownObjectRetain_n();
        uint64_t v8 = v6;
        uint64_t v12 = v17;
        while (1)
        {
          uint64_t v24 = *(unsigned __int16 *)(v12 + 16);
          if (*(_WORD *)(v12 + 16))
          {
            char v25 = *(void *)(v12 + 40);
            unint64_t v15 = __OFSUB__(v8, v25);
            unint64_t v16 = (uint64_t)v8 - v25;
            if (v15) {
              goto LABEL_247;
            }
            if (__OFADD__(v16, 1LL)) {
              goto LABEL_248;
            }
            if (v16 + 1 < 1)
            {
              uint64_t v24 = 0LL;
              goto LABEL_36;
            }

            if ((_DWORD)v24 != 1)
            {
              uint64_t v26 = (uint64_t *)(v12 + 64);
              Swift::String v27 = 1LL;
              while (1)
              {
                uint64_t v28 = *v26;
                v26 += 3;
                uint64_t v8 = (void *)(v16 - v28);
                if (__OFSUB__(v16, v28)) {
                  goto LABEL_230;
                }
                if (__OFADD__(v8, 1LL)) {
                  goto LABEL_231;
                }
                ++v27;
                unint64_t v16 = (uint64_t)v8;
                if (v24 == v27) {
                  goto LABEL_35;
                }
              }

              uint64_t v24 = v27;
              uint64_t v8 = (void *)v16;
              goto LABEL_36;
            }

            uint64_t v8 = (void *)v16;
          }

  v6[7] = v7;
  v6[8] = a2;
  v6[9] = a3;
  return result;
}

  uint64_t v4 = v16;
  unint64_t v20 = a3;
  char v19 = v196;
  while (1)
  {
    unint64_t v5 = *v201;
    v206 = v13;
    v207 = v10;
    v205 = v18;
    if (i != v20)
    {
      if (v5) {
        uint64_t v28 = v19[10];
      }
      else {
        uint64_t v28 = 0LL;
      }
      goto LABEL_68;
    }

    if (!v5)
    {
      if (i > 0) {
        goto LABEL_435;
      }
      Swift::String v27 = 0LL;
      goto LABEL_66;
    }

    uint64_t v24 = v19[10];
    if (v24 < i) {
      goto LABEL_421;
    }
    int64_t v10 = v19[9];
    unint64_t v13 = *(unsigned __int8 *)(v5 + 18);
    if (*(_WORD *)(v5 + 16)) {
      char v25 = v24 <= i;
    }
    else {
      char v25 = 1;
    }
    v197 = v19[11];
    if (!v25)
    {
      if (*(_BYTE *)(v5 + 18))
      {
        uint64_t result = (void *)swift_unknownObjectRetain_n();
        Swift::String v27 = i;
        uint64_t v29 = v5;
        while (1)
        {
          unint64_t v14 = *(unsigned __int16 *)(v29 + 16);
          if (!*(_WORD *)(v29 + 16)) {
            goto LABEL_35;
          }
          uint64_t v31 = *(void *)(v29 + 40);
          unint64_t v23 = __OFSUB__(v27, v31);
          unint64_t v32 = v27 - v31;
          if (v23) {
            goto LABEL_394;
          }
          if (__OFADD__(v32, 1LL)) {
            goto LABEL_395;
          }
          if (v32 + 1 > 0) {
            break;
          }
          unint64_t v14 = 0LL;
LABEL_36:
          Swift::String v30 = (4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C;
          unint64_t v13 = ((-15LL << v30) - 1) & v13 | (v14 << v30);
          unint64_t v18 = *(void *)(v29 + 24 + 24 * v14);
          swift_unknownObjectRetain();
          uint64_t result = (void *)swift_unknownObjectRelease();
          uint64_t v29 = v18;
          if (!*(_BYTE *)(v18 + 18)) {
            goto LABEL_51;
          }
        }

        if ((_DWORD)v14 != 1)
        {
          unint64_t v33 = (uint64_t *)(v29 + 64);
          uint64_t v34 = 1LL;
          while (1)
          {
            uint64_t v35 = *v33;
            v33 += 3;
            Swift::String v27 = v32 - v35;
            if (__OFSUB__(v32, v35)) {
              goto LABEL_378;
            }
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_379;
            }
            if (v27 + 1 < 1) {
              break;
            }
            ++v34;
            unint64_t v32 = v27;
            if (v14 == v34) {
              goto LABEL_35;
            }
          }

          unint64_t v14 = v34;
          Swift::String v27 = v32;
          goto LABEL_36;
        }

        Swift::String v27 = v32;
LABEL_35:
        if (v27)
        {
          __break(1u);
LABEL_394:
          __break(1u);
LABEL_395:
          __break(1u);
LABEL_396:
          __break(1u);
LABEL_397:
          __break(1u);
LABEL_398:
          __break(1u);
          goto LABEL_399;
        }

        goto LABEL_36;
      }

      uint64_t result = (void *)swift_unknownObjectRetain_n();
      unint64_t v13 = 0LL;
      Swift::String v27 = i;
      unint64_t v18 = v5;
LABEL_51:
      unint64_t v36 = *(unsigned __int16 *)(v18 + 16);
      if (*(_WORD *)(v18 + 16))
      {
        int64_t v37 = *(void *)(v18 + 24);
        unint64_t v23 = __OFSUB__(v27, v37);
        uint64_t v38 = v27 - v37;
        if (v23) {
          goto LABEL_442;
        }
        if (__OFADD__(v38, 1LL)) {
          goto LABEL_443;
        }
        if (v38 + 1 <= 0)
        {
          unint64_t v36 = 0LL;
LABEL_64:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v26 = v13 & 0xFFFFFFFFFFFFF0FFLL | (v36 << 8);
          unint64_t v20 = a3;
          goto LABEL_65;
        }

        if ((_DWORD)v36 != 1)
        {
          uint64_t v39 = (uint64_t *)(v18 + 48);
          uint64_t v40 = 1LL;
          while (1)
          {
            uint64_t v41 = *v39;
            v39 += 3;
            Swift::String v27 = v38 - v41;
            if (__OFSUB__(v38, v41)) {
              goto LABEL_418;
            }
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_419;
            }
            if (v27 + 1 < 1) {
              break;
            }
            ++v40;
            uint64_t v38 = v27;
            if (v36 == v40) {
              goto LABEL_63;
            }
          }

          unint64_t v36 = v40;
          Swift::String v27 = v38;
          goto LABEL_64;
        }

        Swift::String v27 = v38;
      }

    uint64_t v8 = a2;
    return a4(&a1[v8], a2 - v8, v6);
  }

  return specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v6);
}

    unint64_t v9 = a2;
    return a4(&a1[v9], a2 - v9, v7);
  }

  return a5(a1, a2, v7);
}

    unint64_t v9 = a2;
    return a4(&a1[v9], a2 - v9, v7);
  }

  return a5(a1, a2, v7);
}

    *(void *)(v26 + 32) = v29;
    swift_retain();
    swift_release();
    uint64_t v64 = v10[20];
    v10[20] = v26 | 0x4000000000000000LL;
    Swift::String v30 = (void *)v10[2];
    swift_retain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10[2] = v30;
    uint64_t v60 = a2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      Swift::String v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v30[2] + 1LL,  1,  v30);
      v10[2] = v30;
    }

    unint64_t v33 = v30[2];
    unint64_t v32 = v30[3];
    unint64_t v15 = (void *)(v33 + 1);
    if (v33 >= v32 >> 1) {
      Swift::String v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v32 > 1),  v33 + 1,  1,  v30);
    }
    void v30[2] = v15;
    uint64_t v34 = (uint64_t)&v30[3 * v33 + 4];
    uint64_t v35 = v69;
    *(void *)uint64_t v34 = v8;
    *(void *)(v34 + _Block_object_dispose((const void *)(v1 - 96), 8) = v35;
    *(_BYTE *)(v34 + 16) = v9;
    v10[2] = v30;
    unint64_t v36 = v30[2];
    if (!v36)
    {
      __break(1u);
      goto LABEL_42;
    }

    int64_t v37 = (uint64_t)&v30[3 * v36 + 4];
    a2 = *(void *)(v37 - 24);
    char v25 = *(void *)(v37 - 16);
    uint64_t v38 = *(unsigned __int8 *)(v37 - 8);
    if (v38 >> 5 != 3)
    {
      uint64_t v39 = v38 >> 5 == 5 && (v25 | a2) == 0;
      if (!v39 || v38 != 160)
      {
        uint64_t v4 = type metadata accessor for DecodingError();
        swift_allocError();
        unint64_t v15 = v40;
        *uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        uint64_t v41 = v10[20];
        swift_retain();
        swift_retain();
        _CodingPathNode.path.getter(v41);
        swift_release();
        _StringGuts.grow(_:)(43LL);
        swift_bridgeObjectRelease();
        *(void *)&uint64_t v65 = 0xD000000000000035LL;
        *((void *)&v65 + 1) = 0x80000001839D2CE0LL;
        uint64_t v42 = v10[2];
        if (*(void *)(v42 + 16)) {
          __asm { BR              X10 }
        }

        goto LABEL_45;
      }

      Swift::String v50 = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v52 = v51;
      uint64_t v4 = (uint64_t)v51
      *Swift::String v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      uint64_t v53 = v10[20];
      unint64_t v15 = (void *)(v53 & 0x3FFFFFFFFFFFFFFFLL);
      swift_retain();
      swift_retain();
      _CodingPathNode.path.getter(v53);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v50 - 8) + 104LL))( v52,  *MEMORY[0x189619368],  v50);
      swift_willThrow();
      swift_release();
      unint64_t v49 = v64;
LABEL_37:
      v10[20] = v49;
      swift_retain();
      swift_release();
      uint64_t v7 = (void *)v10[2];
      if (v7[2])
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          uint64_t v58 = v7[2];
          if (v58)
          {
LABEL_40:
            v7[2] = v58 - 1;
            v10[2] = v7;
            swift_release();
            swift_release();
            return swift_release();
          }

          goto LABEL_44;
        }

        if (*(_BYTE *)v12 != 45) {
          goto LABEL_269;
        }
        unint64_t v20 = specialized _parseJSON5Integer<A>(_:isHex:)( (_BYTE *)v12,  v11,  1,  (uint64_t (*)(_BYTE *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v21 & 1) == 0)
        {
          *(double *)&unint64_t v22 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v20));
          if ((v23 & 1) == 0) {
            return *(double *)&v22;
          }
        }

        goto LABEL_179;
      }

      v179 = v41;
      if (v41 == 46) {
        goto LABEL_280;
      }
      if (v41 == 78)
      {
        v197 = a4;
        unint64_t v18 = 1;
        v198 = (char *)specialized BufferView.dropFirst(_:)(1LL, v12, v11);
        specialized static JSON5Scanner.validateNaN(from:fullSource:)(v198, v199, a3, v197);
        if (v6) {
          return v7;
        }
        v215 = v197;
        goto LABEL_151;
      }

      if (v41 != 73)
      {
        v226 = 0.0;
        v227 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(20LL);
        v200._uint64_t countAndFlagsBits = 0x27207265746661LL;
        v200._object = (void *)0xE700000000000000LL;
        DefaultStringInterpolation.appendLiteral(_:)(v200);
        v201 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12);
        v202 = (v201 + 1);
        if ((v201 & 0x80) != 0) {
          v202 = (((v201 & 0x3F) << 8) | (v201 >> 6)) + 33217;
        }
        v225 = (v202 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v202) >> 3)) & 7)));
        v203._uint64_t countAndFlagsBits = MEMORY[0x186E1B6AC](&v225);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v203);
        swift_bridgeObjectRelease();
        v204._uint64_t countAndFlagsBits = 0x6D756E206E692027LL;
        v204._object = (void *)0xEB00000000726562LL;
        DefaultStringInterpolation.appendLiteral(_:)(v204);
        v205 = v226;
        v206 = v227;
        uint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v40, a3, a4);
        char v95 = v207;
        uint64_t v97 = v208;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(double *)uint64_t v39 = v205;
        *(void *)(v39 + _Block_object_dispose((const void *)(v1 - 96), 8) = v206;
        *(void *)(v39 + 16) = v179;
        goto LABEL_246;
      }

      v190 = a4;
      unint64_t v18 = 1;
      v191 = (char *)specialized BufferView.dropFirst(_:)(1LL, v12, v11);
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v191, v192, a3, v190);
      if (v6) {
        return v7;
      }
      v215 = v190;
LABEL_151:
      v132 = v12 + v11 - 1;
      v133 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v132);
      if ((v133 | 0x20) != 0x65)
      {
        specialized BufferView.withUnsafePointer<A>(_:)((const char *)v12);
        if ((v143 & 1) == 0)
        {
          uint64_t v7 = v142;
          if ((~*(void *)&v142 & 0x7FF0000000000000LL) == 0)
          {
            if ((v18 & 1) != 0) {
              return v7;
            }
            goto LABEL_179;
          }

          goto LABEL_213;
        }

        v148 = specialized BufferView.suffix(from:)(v40, v12, v11);
        if (v149 < 1) {
          goto LABEL_306;
        }
        v150 = v148;
        v151 = v149;
        uint64_t v12 = v148 + v149;
        v152 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v148);
        if (v152 == 45 || (unint64_t v11 = v150, v152 == 43)) {
          unint64_t v11 = v150 + 1;
        }
        v224 = a3;
        if (!specialized static Comparable.<= infix(_:_:)(v11, v12)) {
          goto LABEL_307;
        }
        if (v11 - v150 < 0) {
          goto LABEL_308;
        }
        v153 = (const char *)specialized BufferView.prefix(_:)(2LL, v11);
        if (specialized BufferView.withUnsafePointer<A>(_:)(v153, v154))
        {
          if (v11 < v12)
          {
            v155 = _asciiNumbers.getter();
            v156 = v155;
            v157 = 0;
            v158 = 0;
            v214 = v151 + v150;
            v210 = -v150;
            v159 = 1;
            v160 = HIBYTE(v155);
            while (1)
            {
              v218 = v159;
              v221 = v157;
              v76 = 0LL;
              v161 = v214 - v11;
              while (1)
              {
                if ((uint64_t)(v210 + v11 + v76) < 0 || (uint64_t v82 = v161 < 1, --v161, v82))
                {
                  __break(1u);
LABEL_267:
                  __break(1u);
LABEL_268:
                  __break(1u);
LABEL_269:
                  v187 = specialized _parseJSON5Integer<A>(_:isHex:)( (unsigned __int8 *)v12,  v11,  1,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
                  if ((v188 & 1) == 0)
                  {
                    *(double *)&unint64_t v22 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v187));
                    if ((v189 & 1) == 0) {
                      return *(double *)&v22;
                    }
                  }

        if (*(_BYTE *)v12 != 45) {
          goto LABEL_269;
        }
        unint64_t v20 = specialized _parseJSON5Integer<A>(_:isHex:)( (_BYTE *)v12,  v11,  1,  (uint64_t (*)(_BYTE *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v21 & 1) == 0)
        {
          *(double *)&unint64_t v22 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v20));
          if ((v23 & 1) == 0) {
            return *(double *)&v22;
          }
        }

        goto LABEL_179;
      }

      v181 = v41;
      if (v41 == 46) {
        goto LABEL_280;
      }
      if (v41 == 78)
      {
        v199 = a4;
        unint64_t v18 = 1;
        v200 = (char *)specialized BufferView.dropFirst(_:)(1LL, v12, v11);
        specialized static JSON5Scanner.validateNaN(from:fullSource:)(v200, v201, a3, v199);
        if (v6) {
          return v7;
        }
        v217 = v199;
        goto LABEL_151;
      }

      if (v41 != 73)
      {
        v228 = 0LL;
        v229 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(20LL);
        v202._uint64_t countAndFlagsBits = 0x27207265746661LL;
        v202._object = (void *)0xE700000000000000LL;
        DefaultStringInterpolation.appendLiteral(_:)(v202);
        v203 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12);
        v204 = (v203 + 1);
        if ((v203 & 0x80) != 0) {
          v204 = (((v203 & 0x3F) << 8) | (v203 >> 6)) + 33217;
        }
        v227 = (v204 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v204) >> 3)) & 7)));
        v205._uint64_t countAndFlagsBits = MEMORY[0x186E1B6AC](&v227);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v205);
        swift_bridgeObjectRelease();
        v206._uint64_t countAndFlagsBits = 0x6D756E206E692027LL;
        v206._object = (void *)0xEB00000000726562LL;
        DefaultStringInterpolation.appendLiteral(_:)(v206);
        v207 = v228;
        v208 = v229;
        char v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v40, a3, a4);
        uint64_t v97 = v209;
        uint64_t v99 = v210;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v39 = v207;
        *(void *)(v39 + _Block_object_dispose((const void *)(v1 - 96), 8) = v208;
        *(void *)(v39 + 16) = v181;
        goto LABEL_246;
      }

      v192 = a4;
      unint64_t v18 = 1;
      v193 = (char *)specialized BufferView.dropFirst(_:)(1LL, v12, v11);
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v193, v194, a3, v192);
      if (v6) {
        return v7;
      }
      v217 = v192;
LABEL_151:
      v134 = v12 + v11 - 1;
      v135 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v134);
      if ((v135 | 0x20) != 0x65)
      {
        specialized BufferView.withUnsafePointer<A>(_:)((const char *)v12);
        if ((v145 & 1) == 0)
        {
          uint64_t v7 = v144;
          if ((~*(void *)&v144 & 0x7FF0000000000000LL) == 0)
          {
            if ((v18 & 1) != 0) {
              return v7;
            }
            goto LABEL_179;
          }

          goto LABEL_213;
        }

        v150 = specialized BufferView.suffix(from:)(v40, v12, v11);
        if (v151 < 1) {
          goto LABEL_306;
        }
        v152 = v150;
        v153 = v151;
        uint64_t v12 = v150 + v151;
        v154 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v150);
        if (v154 == 45 || (unint64_t v11 = v152, v154 == 43)) {
          unint64_t v11 = v152 + 1;
        }
        v226 = a3;
        if (!specialized static Comparable.<= infix(_:_:)(v11, v12)) {
          goto LABEL_307;
        }
        if (v11 - v152 < 0) {
          goto LABEL_308;
        }
        v155 = (const char *)specialized BufferView.prefix(_:)(2LL, v11);
        if (specialized BufferView.withUnsafePointer<A>(_:)(v155, v156))
        {
          if (v11 < v12)
          {
            v157 = _asciiNumbers.getter();
            v158 = v157;
            v159 = 0;
            v160 = 0;
            v216 = v153 + v152;
            v212 = -v152;
            v161 = 1;
            v162 = HIBYTE(v157);
            while (1)
            {
              v220 = v161;
              v223 = v159;
              v85 = 0LL;
              v163 = v216 - v11;
              while (1)
              {
                if ((uint64_t)(v212 + v11 + v85) < 0 || (uint64_t v91 = v163 < 1, --v163, v91))
                {
                  __break(1u);
LABEL_267:
                  __break(1u);
LABEL_268:
                  __break(1u);
LABEL_269:
                  v189 = specialized _parseJSON5Integer<A>(_:isHex:)( (unsigned __int8 *)v12,  v11,  1,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
                  if ((v190 & 1) == 0)
                  {
                    *(double *)&unint64_t v22 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v189));
                    if ((v191 & 1) == 0) {
                      return *(double *)&v22;
                    }
                  }

        if (*(_BYTE *)v12 != 45) {
          goto LABEL_271;
        }
        unint64_t v20 = specialized _parseJSON5Integer<A>(_:isHex:)( (_BYTE *)v12,  v11,  1,  (uint64_t (*)(_BYTE *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v21 & 1) == 0)
        {
          unint64_t v22 = specialized Float.init<A>(exactly:)(v20);
          if ((v22 & 0x100000000LL) == 0) {
            return *(float *)&v22;
          }
        }

        goto LABEL_180;
      }

      v181 = v32;
      if (v32 == 46) {
        goto LABEL_282;
      }
      if (v32 == 78)
      {
        v193 = a4;
        unint64_t v18 = 1;
        v194 = (char *)specialized BufferView.dropFirst(_:)(1LL, v12, v11);
        specialized static JSON5Scanner.validateNaN(from:fullSource:)(v194, v195, a3, v193);
        if (v6) {
          return v7;
        }
        v218 = v193;
        goto LABEL_151;
      }

      if (v32 != 73)
      {
        v221 = 0LL;
        v222 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(20LL);
        v196._uint64_t countAndFlagsBits = 0x27207265746661LL;
        v196._object = (void *)0xE700000000000000LL;
        DefaultStringInterpolation.appendLiteral(_:)(v196);
        v197 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12);
        v198 = (v197 + 1);
        if ((v197 & 0x80) != 0) {
          v198 = (((v197 & 0x3F) << 8) | (v197 >> 6)) + 33217;
        }
        v220 = (v198 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v198) >> 3)) & 7)));
        v199._uint64_t countAndFlagsBits = MEMORY[0x186E1B6AC](&v220);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v199);
        swift_bridgeObjectRelease();
        v200._uint64_t countAndFlagsBits = 0x6D756E206E692027LL;
        v200._object = (void *)0xEB00000000726562LL;
        DefaultStringInterpolation.appendLiteral(_:)(v200);
        v201 = v221;
        v202 = v222;
        Swift::String v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v31, a3, a4);
        Swift::String v52 = v203;
        unint64_t v54 = v204;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v55 = v201;
        *(void *)(v55 + _Block_object_dispose((const void *)(v1 - 96), 8) = v202;
        *(void *)(v55 + 16) = v181;
        goto LABEL_259;
      }

      v186 = a4;
      unint64_t v18 = 1;
      v187 = (char *)specialized BufferView.dropFirst(_:)(1LL, v12, v11);
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v187, v188, a3, v186);
      if (v6) {
        return v7;
      }
      v218 = v186;
LABEL_151:
      v128 = v12 + v11 - 1;
      v129 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v128);
      if ((v129 | 0x20) != 0x65)
      {
        v221 = 0LL;
        v138 = _stringshims_strtof_l((const char *)v12, &v221, 0LL);
        if (v221 && (char *)(v12 + v11) == v221)
        {
          uint64_t v7 = v138;
          if ((~LODWORD(v138) & 0x7F800000) == 0)
          {
            if ((v18 & 1) != 0) {
              return v7;
            }
            goto LABEL_180;
          }

          goto LABEL_214;
        }

        v143 = specialized BufferView.suffix(from:)(v31, v12, v11);
        if (v144 < 1) {
          goto LABEL_308;
        }
        v145 = v143;
        v146 = v144;
        uint64_t v12 = v143 + v144;
        v147 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v143);
        if (v147 == 45 || (unint64_t v11 = v145, v147 == 43)) {
          unint64_t v11 = v145 + 1;
        }
        if (!specialized static Comparable.<= infix(_:_:)(v11, v12)) {
          goto LABEL_309;
        }
        if (v11 - v145 < 0) {
          goto LABEL_310;
        }
        v148 = (const char *)specialized BufferView.prefix(_:)(2LL, v11);
        if (specialized BufferView.withUnsafePointer<A>(_:)(v148, v149))
        {
          v213 = a3;
          if (v11 < v12)
          {
            v150 = _asciiNumbers.getter();
            v151 = v150;
            v152 = 0;
            v153 = 0;
            v208 = v146 + v145;
            v206 = -v145;
            v154 = 1;
            v155 = HIBYTE(v150);
            while (1)
            {
              v212 = v154;
              v217 = v152;
              v109 = 0LL;
              v156 = v208 - v11;
              while (1)
              {
                if (v206 + v11 + v109 < 0 || (v105 = v156 < 1, --v156, v105))
                {
                  __break(1u);
LABEL_269:
                  __break(1u);
LABEL_270:
                  __break(1u);
LABEL_271:
                  v184 = specialized _parseJSON5Integer<A>(_:isHex:)( (unsigned __int8 *)v12,  v11,  1,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
                  if ((v185 & 1) == 0)
                  {
                    unint64_t v22 = specialized Float.init<A>(exactly:)(v184);
                    if ((v22 & 0x100000000LL) == 0) {
                      return *(float *)&v22;
                    }
                  }

    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  int64_t v10 = *(void *)(v1[1] + 24LL);
  if (!__OFADD__(v10, v8))
  {
    __DataStorage.setLength(_:)(v10 + v8);
    goto LABEL_9;
  }

    *a4 = 0LL;
    a4[1] = 0LL;
    a4[2] = 0LL;
    return;
  }

  uint64_t v12 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v12) {
    goto LABEL_14;
  }
  unint64_t v13 = String._bridgeToObjectiveCImpl()();
  if (v7)
  {
    outlined copy of URL?((uint64_t)v7);
    swift_release();
    swift_release();
  }

  unint64_t v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x189604030]), sel_initWithString_relativeToURL_, v13, v7);
  swift_unknownObjectRelease();

  if (!v14) {
    goto LABEL_14;
  }
  unint64_t v15 = (uint64_t)static URL._converted(from:)(v14);

  uint64_t v7 = 0LL;
  unint64_t v9 = 0LL;
LABEL_19:
  *a4 = v15;
  a4[1] = v9;
  a4[2] = (uint64_t)v7;
}

  a4[3] = v10;
  a4[4] = v12;
  a4[5] = v13;
  a4[6] = v15;
  a4[7] = v16;
  unint64_t v15 = *(void *)(v9 + 64);
  unint64_t v17 = *(void *)(v9 + 72);
  unint64_t v18 = *(void *)(v9 + 80);
  unint64_t v9 = *(void *)(v9 + 88);
  if (a2 != v8)
  {
    uint64_t v28 = swift_unknownObjectRetain();
    uint64_t result = (void *)specialized Rope._endPath.getter(v28);
    uint64_t v29 = (unint64_t)result;
    if (v15)
    {
      uint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v8 = 0LL;
    }

    else
    {
      uint64_t v8 = 0LL;
      unint64_t v17 = 0LL;
      unint64_t v18 = 0LL;
    }

  unint64_t v21 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 16_Block_object_dispose((const void *)(v1 - 96), 8) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v21;
LABEL_15:
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  unint64_t v22 = *(void *)(a2 + 216);
  if (v22)
  {
    *(void *)(a1 + 20_Block_object_dispose((const void *)(v1 - 96), 8) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = v22;
    unint64_t v23 = *(void *)(a2 + 232);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v24 = *(void *)(a2 + 248);
    if (v24) {
      goto LABEL_17;
    }
LABEL_20:
    uint64_t v29 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v29;
    uint64_t v26 = *(void *)(a2 + 280);
    if (v26) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }

  uint64_t v28 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 20_Block_object_dispose((const void *)(v1 - 96), 8) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v28;
  uint64_t v24 = *(void *)(a2 + 248);
  if (!v24) {
    goto LABEL_20;
  }
LABEL_17:
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 24_Block_object_dispose((const void *)(v1 - 96), 8) = v24;
  char v25 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = *(void *)(a2 + 280);
  if (v26)
  {
LABEL_18:
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = v26;
    Swift::String v27 = *(void *)(a2 + 296);
    *(void *)(a1 + 28_Block_object_dispose((const void *)(v1 - 96), 8) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_22;
  }

      if (!v17) {
        goto LABEL_15;
      }
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }

    swift_unknownObjectRetain_n();
    uint64_t result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v184);
    uint64_t v24 = v15;
LABEL_32:
    uint64_t v34 = *(unsigned __int16 *)(v24 + 16);
    unint64_t v33 = v24;
    if (!*(_WORD *)(v24 + 16)) {
      goto LABEL_45;
    }
    uint64_t v35 = *(void *)(v24 + 24);
    Swift::String v27 = __OFSUB__(v17, v35);
    unint64_t v36 = v17 - v35;
    if (v27)
    {
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }

    if (__OFADD__(v36, 1LL))
    {
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }

    if (v36 + 1 < 1)
    {
      uint64_t v34 = 0LL;
    }

    else
    {
      if ((_DWORD)v34 == 1)
      {
        unint64_t v17 = v36;
LABEL_45:
        if (v17)
        {
LABEL_162:
          __break(1u);
          return result;
        }

        goto LABEL_46;
      }

      int64_t v37 = (uint64_t *)(v24 + 48);
      uint64_t v38 = 1LL;
      while (1)
      {
        uint64_t v39 = *v37;
        v37 += 3;
        unint64_t v17 = v36 - v39;
        if (__OFSUB__(v36, v39)) {
          goto LABEL_158;
        }
        if (__OFADD__(v17, 1LL)) {
          goto LABEL_159;
        }
        if (v17 + 1 < 1) {
          break;
        }
        ++v38;
        unint64_t v36 = v17;
        if (v34 == v38) {
          goto LABEL_45;
        }
      }

      uint64_t v34 = v38;
      unint64_t v17 = v36;
    }

    *uint64_t v4 = v3;
    v4[1] = v7;
    return (void *)v7;
  }

      uint64_t v8 = 0xFFFFLL;
      goto LABEL_15;
    }

    uint64_t v4 = 0LL;
    unint64_t v6 = 1;
  }

  else
  {
    uint64_t v4 = 0LL;
    unint64_t v6 = 1;
    if ((_WORD)result && (unsigned __int16)result != 0xFFFF)
    {
      uint64_t v4 = (unsigned __int16)result;
      uint64_t v7 = result ^ 0xFFFF;
      if (result == 0xFFFF) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }

    unint64_t v36 = (uint64_t *)(v33 + 64);
    goto LABEL_15;
  }

  int64_t v37 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  v37(v28, (char *)&v46 - v24, v18);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 40) = v46;
  uint64_t v38 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v35 + 16));
  v37((char *)v38, v28, v18);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v21 + 8);
  unint64_t v32 = v48;
  swift_bridgeObjectRetain();
  v39((char *)&v46 - v24, v20);
  unint64_t v33 = v49;
  *(void *)(v35 + 56) = v49;
  uint64_t v34 = v33 >> 62;
  if (!(v33 >> 62))
  {
    uint64_t v41 = (uint64_t *)(v33 + 64);
    uint64_t v40 = v50;
    goto LABEL_10;
  }

  uint64_t v40 = v50;
  if ((_DWORD)v34 == 1)
  {
    uint64_t v41 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_10:
    uint64_t v43 = *v41;
    swift_retain();
    goto LABEL_12;
  }

  uint64_t v43 = 0LL;
LABEL_12:
  uint64_t result = v51;
  if (!__OFADD__(v43, 1LL))
  {
    *(void *)(v35 + 64) = v43 + 1;
    swift_release();

    if ((_DWORD)v34) {
      goto LABEL_3;
    }
    goto LABEL_14;
  }

  __break(1u);
  return result;
}

  *(double *)a2 = v3;
  *(double *)(a2 + _Block_object_dispose((const void *)(v1 - 96), 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

    [v5 appendString:@"l"];
    if ((self->_options & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  return v5;
}

    unint64_t v20 = (NSString *)(id)-[__objc2_class predicateFormat](v10, "predicateFormat", v11);
LABEL_18:
    objc_autoreleasePoolPop(v3);
    return v20;
  }

  if (v6)
  {
    uint64_t v28 = v6 - 1;
    uint64_t v12 = &stru_189CA6A28;
    unint64_t v13 = v12;
    unint64_t v14 = v6 - 2;
    uint64_t v29 = v3;
    if (v6 == 2)
    {
      char v19 = (NSString *)v12;
    }

    else
    {
      unint64_t v15 = 0LL;
      do
      {
        unint64_t v16 = -[NSArray objectAtIndex:](v5, "objectAtIndex:", v15);
        unint64_t v17 = (void *)MEMORY[0x186E1FF60]();
        unint64_t v18 = -[NSCompoundPredicate _copySubpredicateDescription:](self, "_copySubpredicateDescription:", v16);
        objc_autoreleasePoolPop(v17);
        char v19 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@%@ %@ ",  v13,  v18,  v4);

        ++v15;
        unint64_t v13 = v19;
      }

      while (v14 != v15);
    }

    unint64_t v22 = -[NSCompoundPredicate _copySubpredicateDescription:]( self,  "_copySubpredicateDescription:",  -[NSArray objectAtIndex:](v5, "objectAtIndex:", v14));
    unint64_t v23 = -[NSCompoundPredicate _copySubpredicateDescription:]( self,  "_copySubpredicateDescription:",  -[NSArray objectAtIndex:](v5, "objectAtIndex:", v28));
    unint64_t v20 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@%@ %@ %@",  v19,  v22,  v4,  v23);

    unint64_t v3 = v29;
    goto LABEL_18;
  }

  if (v7 == NSAndPredicateType)
  {
    unint64_t v9 = &OBJC_CLASS___NSTruePredicate;
    goto LABEL_13;
  }

  if (v7)
  {
    unint64_t v9 = &OBJC_CLASS___NSFalsePredicate;
LABEL_13:
    int64_t v10 = -[__objc2_class defaultInstance](v9, "defaultInstance");
    goto LABEL_14;
  }

  objc_autoreleasePoolPop(v3);
  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:@"Can't have a NOT predicate with no subpredicate." userInfo:0]);
  return (id)-[NSCompoundPredicate isEqual:](v25, v26, v27);
}

    -[objc_class setLength:](a1, "setLength:", v10 + v8);
    char v19 = -[objc_class mutableBytes](a1, "mutableBytes") + v10;
    if (v8 < 0x80000
      || (unint64_t v20 = (void *)MEMORY[0x1895FD590], ((*MEMORY[0x1895FD590] - 1LL) & (v19 | v14)) != 0)
      || (malloc_default_zone(), malloc_zone_claimed_address()))
    {
      unint64_t v21 = (char *)v14;
    }

    else
    {
      unint64_t v22 = v8 & -*v20;
      NSCopyMemoryPages((const void *)v14, (void *)v19, v22);
      v8 -= v22;
      if (!v8)
      {
LABEL_19:
        if (v14 != v9) {
          free((void *)v14);
        }
        return;
      }

      unint64_t v21 = (char *)(v14 + v22);
      v19 += v22;
    }

    memmove((void *)v19, v21, v8);
    goto LABEL_19;
  }

    Swift::UInt v2 = 0;
    goto LABEL_15;
  }

  if (a2 == -1)
  {
    Swift::UInt v2 = 21;
    goto LABEL_15;
  }

  if (a2 == 5)
  {
    Swift::UInt v2 = 5;
    goto LABEL_15;
  }

  if (a2 != 9) {
    goto LABEL_14;
  }
  Swift::UInt v2 = 9;
LABEL_15:
  unint64_t v3 = (unsigned __int8 *)(a1 + 502);
  do
    uint64_t v4 = __ldaxr(v3);
  while (__stlxr(v2, v3));
  if (v2 != v4)
  {
    unint64_t v5 = *(dispatch_object_s **)(a1 + 184);
    *(void *)(a1 + 184) = 0LL;
    *(_BYTE *)(a1 + 200) = 0;
    if (v5) {
      dispatch_release(v5);
    }
  }

  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 64LL);
  if ((v3 & 0x80) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 128LL);
  }
  return result;
}

    if ((v9 & 1) == 0)
    {
      if ((v12 - 32) >= 0x5F && (v12 > 0xD || ((1 << v12) & 0x3700) == 0))
      {
        unint64_t v11 = v10 - 1;
        goto LABEL_32;
      }

      --v10;
      ++*(void *)(a1 + 56);
      unint64_t v20 = a4;
      unint64_t v21 = v12;
LABEL_37:
      [v20 appendByte:v21];
      unint64_t v9 = 0;
      continue;
    }

    unint64_t v11 = v10 - 1;
    if (v10 - 1 >= a3) {
      goto LABEL_32;
    }
    unint64_t v14 = *(unsigned __int8 *)(a2 + v10 - 1);
    uint64_t v29 = *(_BYTE *)(a2 + v10 - 2);
    Swift::String v30 = v14;
    unint64_t v23 = (void *)qword_18C496AB0;
    uint64_t v24 = v8;
    unint64_t v15 = CFStringCreateWithBytesNoCopy(0LL, bytes, 7LL, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
    if (!v15) {
      break;
    }
    unint64_t v16 = v15;
    v31[0] = CFStringGetCharacterAtIndex(v15, 0LL);
    if ([v23 indexForKey:v31 length:1] != 0x7FFFFFFFFFFFFFFFLL) {
      ++*(void *)(a1 + 80);
    }
    CFRelease(v16);
    unint64_t v17 = v31[0];
    if (!v31[0]) {
      break;
    }
    if (v26)
    {
      v31[0] = v26;
      v31[1] = v17;
      if ([(id)qword_18C496AB8 indexForKey:v31 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 88);
      }
    }

    ++*(void *)(a1 + 48);
    objc_msgSend(a4, "appendByte1:byte2:", v12, v14, v23);
    unint64_t v9 = 1;
    uint64_t v26 = v17;
    uint64_t v8 = v24;
  }

  uint64_t v26 = 0;
  uint64_t v8 = v24;
LABEL_32:
  objc_msgSend(a4, "appendPlaceholder", v23);
  ++*(void *)(a1 + 96);
  char v19 = *(void *)(a1 + 64) + 1LL;
  *(void *)(a1 + 64) = v19;
  if (v19 <= v8) {
    goto LABEL_3;
  }
LABEL_42:
  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = __63__NSItemProvider__loadObjectOfClass_options_completionHandler___block_invoke_3;
  block[3] = &unk_189CA0138;
  block[4] = *(void *)(a1 + 56);
  objc_copyWeak(&v13, (id *)(a1 + 72));
  int64_t v10 = *(void *)(a1 + 64);
  block[5] = *(void *)(a1 + 32);
  block[6] = v5;
  block[7] = v14;
  block[8] = v10;
  _NSIPDispatchAsyncCallback(block);
  objc_destroyWeak(&v13);
}

  if (a6) {
    *a6 = v9;
  }
  return result;
}

  objc_msgSend( a3,  "failWithError:",  +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  4864,  0));

  return 0LL;
}

      if (!v1) {
        unint64_t v1 = @"/System/Library/LinguisticData";
      }
    }

    if (getenv("IPHONE_SIMULATOR_ROOT")
      && (uint64_t v8 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:")) != 0LL)
    {
      unint64_t v9 = -[NSString stringByAppendingPathComponent:](v8, "stringByAppendingPathComponent:", v1);
    }

    else
    {
      unint64_t v9 = +[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v1);
    }

    _NSLinguisticDataPath_dataPath = (uint64_t)v9;
    int64_t v10 = v9;
    return _NSLinguisticDataPath_dataPath;
  }

  return result;
}

LABEL_23:
  __break(1u);
  return result;
}

        unint64_t v14 = a2[5];
        *(_OWORD *)(a1 + 64) = a2[4];
        *(_OWORD *)(a1 + 80) = v14;
        goto LABEL_24;
      }
    }

    unint64_t v13 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = v13;
    if (*((void *)a2 + 9)) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  unint64_t v5 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    if (*(void *)(a1 + 40))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    if (*(void *)(a1 + 72))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    goto LABEL_18;
  }

  unint64_t v6 = *((void *)a2 + 1);
  if (v5)
  {
    if (v6)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.LanguageCode(a1);
      unint64_t v15 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v15;
    }
  }

  else if (v6)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    unint64_t v16 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v16;
  }

  unint64_t v17 = (_OWORD *)(a1 + 32);
  unint64_t v18 = a2 + 2;
  char v19 = *((void *)a2 + 5);
  if (*(void *)(a1 + 40))
  {
    if (v19)
    {
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = *((void *)a2 + 6);
      *(void *)(a1 + 56) = *((void *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.Script(a1 + 32);
      unint64_t v20 = a2[3];
      *unint64_t v17 = *v18;
      *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = v20;
    }
  }

  else if (v19)
  {
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = *((void *)a2 + 6);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    unint64_t v21 = a2[3];
    *unint64_t v17 = *v18;
    *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = v21;
  }

  unint64_t v22 = (_OWORD *)(a1 + 64);
  unint64_t v23 = a2 + 4;
  uint64_t v24 = *((void *)a2 + 9);
  if (*(void *)(a1 + 72))
  {
    if (v24)
    {
      *(void *)(a1 + 64) = *((void *)a2 + 8);
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = *((void *)a2 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.Region(a1 + 64);
      char v25 = a2[5];
      *unint64_t v22 = *v23;
      *(_OWORD *)(a1 + 80) = v25;
    }
  }

  else if (v24)
  {
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = *((void *)a2 + 11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v26 = a2[5];
    *unint64_t v22 = *v23;
    *(_OWORD *)(a1 + 80) = v26;
  }

  *(void *)(a1 + 96) = *((void *)a2 + 12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

  if ((object & 0x1000000000000000LL) == 0)
  {
    if ((object & 0x2000000000000000LL) != 0)
    {
      unint64_t v15 = HIBYTE(object) & 0xF;
      uint64_t v44 = countAndFlagsBits;
      uint64_t v45 = object & 0xFFFFFFFFFFFFFFLL;
      unint64_t v14 = (char *)&v44;
      goto LABEL_28;
    }

    if ((countAndFlagsBits & 0x1000000000000000LL) != 0)
    {
      unint64_t v14 = (char *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
      unint64_t v15 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      goto LABEL_28;
    }

    if (v5 <= v9 >> 16) {
      goto LABEL_28;
    }
    unint64_t v9 = String.UTF8View._foreignIndex(after:)();
    if (v14 < 0) {
      return v10 == v6;
    }
LABEL_25:
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v21);
        swift_bridgeObjectRelease();
        unint64_t v22 = v91;
        if (!v91) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v85,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      unint64_t v23 = v85;
    }

    else
    {
      Hasher._combine(_:)(0);
      unint64_t v23 = v86;
    }

    outlined retain of LocalePreferences(v23);
    if (!v88) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  unint64_t v14 = 1;
LABEL_5:
  Hasher._combine(_:)(v14);
  swift_unknownObjectRelease();
  unint64_t v16 = v82;
LABEL_59:
  uint64_t v58 = (uint64_t)v4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(a2) + 36);
  if ((*(_BYTE *)(v58 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    CFStringRef v59 = *(void *)v58;
    Hasher._combine(_:)(1u);
    if ((v59 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v60 = v59;
    }
    else {
      uint64_t v60 = 0LL;
    }
    Hasher._combine(_:)(v60);
  }

  outlined init with take of LocalePreferences?( v58 + 16,  (uint64_t)v106,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  uint64_t v61 = *(unsigned __int8 *)(v58 + 73);
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v62 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v62);
  }

  uint64_t v63 = *(unsigned __int16 *)(v58 + 74);
  uint64_t v64 = v63 | (*(unsigned __int8 *)(v58 + 76) << 16);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64 & 1);
    Hasher._combine(_:)((v64 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v64) & 1);
  }

  uint64_t v65 = v83;
  uint64_t v66 = *(unsigned __int8 *)(v58 + 77);
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v67 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v67);
  }

  uint64_t v68 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v69 = v84;
  outlined init with copy of (Hashable & Sendable)?( v58 + v68[9],  v84,  &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v69, 1LL, v16) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v70 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v81, v84, v16);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v70, v16);
  }

  uint64_t v71 = v58 + v68[10];
  uint64_t v72 = *(unsigned __int8 *)(v71 + 8);
  if (v72 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v73 = *(void *)v71;
    Hasher._combine(_:)(1u);
    if ((v72 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v73 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        int v74 = v73;
      }
      else {
        int v74 = 0LL;
      }
      Hasher._combine(_:)(v74);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v73);
    }
  }

  double v75 = *(unsigned __int8 *)(v58 + v68[11]);
  if (v75 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v75);
  }

  Hasher._combine(_:)(0);
  if (!v31)
  {
LABEL_8:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
    if (!v32) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  Hasher._combine(_:)(0);
  if (!v31)
  {
LABEL_8:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
    if (!v32) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

      if (a4 <= v7) {
        unint64_t v17 = v7;
      }
      else {
        unint64_t v17 = a4;
      }
      while (v17 != a4)
      {
        if (a4 >= *(void *)(v13 + 16)) {
          goto LABEL_56;
        }
        *(_WORD *)(v13 + 2 * a4 + 32) = *(_WORD *)(a1 + 32 + 2 * a4);
        if ((uint64_t)++a4 >= (uint64_t)v7)
        {
          unint64_t v5 = 0;
          unint64_t v22 = v13;
          goto LABEL_30;
        }
      }

      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
  }

  else
  {
    unint64_t v13 = MEMORY[0x18961AFE8];
    unint64_t v22 = MEMORY[0x18961AFE8];
    if (v9) {
      goto LABEL_7;
    }
  }

  a4 = 0LL;
  if (v7) {
    goto LABEL_23;
  }
  if (!v8) {
    goto LABEL_54;
  }
LABEL_39:
  if (a4 <= v8) {
    char v19 = v8;
  }
  else {
    char v19 = a4;
  }
  while (v19 != a4)
  {
    if (a4 >= *(void *)(v13 + 16)) {
      goto LABEL_58;
    }
    *(_WORD *)(v13 + 2 * a4 + 32) = *(_WORD *)(a2 + 32 + 2 * a4);
    if ((uint64_t)++a4 >= v8)
    {
      unint64_t v22 = v13;
      goto LABEL_54;
    }
  }

    if (v2 <= v8 >> 16) {
      goto LABEL_33;
    }
    uint64_t v8 = String.UTF8View._foreignIndex(after:)();
LABEL_25:
    if (((v12 & 0xDF) - 91) <= 0xE5u && (v12 - 58) <= 0xF5u)
    {
      uint64_t result = 0LL;
    }

    if (4 * v2 == v8 >> 14) {
      return 1LL;
    }
  }

  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v10);
  swift_bridgeObjectRelease();
LABEL_24:
  uint64_t v12 = v43;
  unint64_t v11 = v44;
  unint64_t v14 = v45;
  unint64_t v13 = v46;
  unint64_t v15 = v47;
  if (v43)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v16 = v11;
    unint64_t v17 = v14;
    unint64_t v18 = v13;
    char v19 = v15;
    unint64_t v20 = v12;
    _CFObject.hash(into:)();
    if (v11) {
      goto LABEL_26;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    char v25 = v15;
    uint64_t v26 = v11;
    Swift::String v27 = v14;
    uint64_t v28 = v13;
    if (v11)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v21 = v11;
      _CFObject.hash(into:)();

      if (v14) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }

  Hasher._combine(_:)(0);
  if (v14)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v22 = v14;
    _CFObject.hash(into:)();

    if (v13) {
      goto LABEL_28;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v15) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }

    char v25 = *(void *)(v23 + 56);
    uint64_t v26 = 8 * a1;
    swift_release();
    *(void *)(v25 + v26) = v11;
LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v45 = *(void *)(v3 + 16);
    Swift::String v46 = *(void *)(v3 + 24);
    *(void *)(v3 + 16) = v23;
    *(void *)(v3 + 24) = 0LL;
    uint64_t v47 = *(_BYTE *)(v3 + 32);
    *(_BYTE *)(v3 + 32) = 4;
    outlined consume of JSONReference.Backing(v45, v46, v47);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_67;
  }

  a1 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_20:
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    unint64_t v23 = v5;
    goto LABEL_22;
  }

    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  v0[3] = v2 + 4;
  uint64_t v7 = (void *)v0[1];
  uint64_t v8 = v0[2];
  v0 += 6;
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v7, v8, (uint64_t)(v2 + 4));
  unint64_t v1 = (void *)v1[6];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_25:
  }
    unint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v1[2] + 1LL,  1,  v1);
  int64_t v10 = v1[2];
  unint64_t v9 = v1[3];
  unint64_t v11 = v10 + 1;
  if (v10 >= v9 >> 1)
  {
    unint64_t v21 = v10 + 1;
    char v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v9 > 1),  v10 + 1,  1,  v1);
    unint64_t v11 = v21;
    unint64_t v1 = v19;
  }

  pthread_key_t v1[2] = v11;
  v1[v10 + 4] = 2LL;
  *Swift::String_optional v0 = v1;
}

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v15);
          swift_bridgeObjectRelease();
LABEL_24:
          unint64_t v18 = v49;
          unint64_t v17 = v50;
          unint64_t v20 = v51;
          char v19 = v52;
          unint64_t v21 = v53;
          if (v49)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            unint64_t v22 = v17;
            unint64_t v23 = v20;
            uint64_t v24 = v19;
            char v25 = v21;
            uint64_t v26 = v18;
            _CFObject.hash(into:)();
            if (v17) {
              goto LABEL_26;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            uint64_t v31 = v21;
            unint64_t v32 = v17;
            unint64_t v33 = v20;
            uint64_t v34 = v19;
            if (v17)
            {
LABEL_26:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              Swift::String v27 = v17;
              _CFObject.hash(into:)();

              if (v20) {
                goto LABEL_27;
              }
              goto LABEL_32;
            }
          }

          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_27:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v28 = v20;
            _CFObject.hash(into:)();

            if (v19) {
              goto LABEL_28;
            }
            goto LABEL_33;
          }

    unint64_t v21 = v14;
    unint64_t v22 = NSDecimal.ulp.getter(a1, a2, a3);
    Swift::String v27 = a1;
    LOWORD(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v16;
    WORD1(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v5;
    WORD2(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v15;
    WORD3(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v10;
    WORD4(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v12;
    WORD5(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v8;
    WORD6(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v21;
    HIWORD(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v11;
    specialized static NSDecimal.+= infix(_:_:)((int *)&v27, v22, v23, v24);
    return v27 | ((unint64_t)(unsigned __int16)v28 << 32) | ((unint64_t)WORD1(v28) << 48);
  }

  Swift::String v27 = a1;
  LOWORD(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v6;
  WORD1(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v5;
  WORD2(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v7;
  WORD3(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v10;
  WORD4(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v12;
  WORD5(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v8;
  WORD6(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v9;
  HIWORD(v2_Block_object_dispose((const void *)(v1 - 96), 8) = v11;
  unint64_t v13 = _So9NSDecimala__exponent_getter((char *)&v27);
  unint64_t v14 = v9;
  unint64_t v15 = v7;
  unint64_t v16 = v6;
  if (v13 < -127
    || v6 != 39322
    || (_DWORD)v5 != 39321
    || v15 != 39321
    || v10 != 39321
    || v12 != 39321
    || (_DWORD)v8 != 39321
    || v14 != 39321
    || v11 != 6553)
  {
    goto LABEL_23;
  }

  Swift::String v27 = a1;
  LOWORD(v2_Block_object_dispose((const void *)(v1 - 96), 8) = -26214;
  *(void *)((char *)&v28 + 2) = 0x9999999999999999LL;
  *(_DWORD *)((char *)&v28 + 10) = -1717986919;
  HIWORD(v2_Block_object_dispose((const void *)(v1 - 96), 8) = 6553;
  unint64_t v17 = _So9NSDecimala__exponent_getter((char *)&v27);
  *(void *)&uint64_t v28 = -1LL;
  *((void *)&v28 + 1) = -1LL;
  _So9NSDecimala__exponent_setter((v17 - 1), &v27);
  _So9NSDecimala__length_setter(8LL, &v27);
  unint64_t v18 = 1LL;
LABEL_22:
  _So9NSDecimala__isNegative_setter(v18, &v27);
  _So9NSDecimala__isCompact_setter_0(1LL, &v27);
  _So9NSDecimala__reserved_setter(&v27);
  return v27 | ((unint64_t)(unsigned __int16)v28 << 32) | ((unint64_t)WORD1(v28) << 48);
}

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }

  swift_release();

LABEL_21:
  uint64_t v29 = *(void **)(v9 + 16);
  swift_retain();
  Swift::String v30 = v29;
  uint64_t v31 = objc_msgSend(v30, sel_nickname);
  if (v31)
  {
    unint64_t v32 = v31;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    swift_release();

    uint64_t v40 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    goto LABEL_23;
  }

  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v15);
  swift_bridgeObjectRelease();
LABEL_24:
  unint64_t v17 = v48;
  unint64_t v16 = v49;
  char v19 = v50;
  unint64_t v18 = v51;
  unint64_t v20 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v21 = v16;
    unint64_t v22 = v19;
    unint64_t v23 = v18;
    uint64_t v24 = v20;
    char v25 = v17;
    _CFObject.hash(into:)();
    if (v16) {
      goto LABEL_26;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    Swift::String v30 = v20;
    uint64_t v31 = v16;
    unint64_t v32 = v19;
    unint64_t v33 = v18;
    if (v16)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v26 = v16;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }

  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    Swift::String v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_28;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v20);
        swift_bridgeObjectRelease();
        unint64_t v21 = v85;
        if (!v85) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v99,  (uint64_t)v79,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      unint64_t v22 = v79;
    }

    else
    {
      Hasher._combine(_:)(0);
      unint64_t v22 = v80;
    }

    outlined retain of LocalePreferences(v22);
    if (!v82) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  unint64_t v13 = 1;
LABEL_5:
  Hasher._combine(_:)(v13);
  swift_unknownObjectRelease();
  unint64_t v15 = v77;
LABEL_58:
  uint64_t v53 = v2
  if ((*(_BYTE *)(v53 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v54 = *(void *)v53;
    Hasher._combine(_:)(1u);
    if ((v54 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v55 = v54;
    }
    else {
      uint64_t v55 = 0LL;
    }
    Hasher._combine(_:)(v55);
  }

  outlined init with take of LocalePreferences?( v53 + 16,  (uint64_t)v100,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  uint64_t v56 = *(unsigned __int8 *)(v53 + 73);
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v57 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v57);
  }

  uint64_t v58 = *(unsigned __int16 *)(v53 + 74);
  CFStringRef v59 = v58 | (*(unsigned __int8 *)(v53 + 76) << 16);
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v59 & 1);
    Hasher._combine(_:)((v59 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v59) & 1);
  }

  uint64_t v60 = v78;
  uint64_t v61 = *(unsigned __int8 *)(v53 + 77);
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v62 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v62);
  }

  uint64_t v63 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of (Hashable & Sendable)?( v53 + v63[9],  (uint64_t)v9,  &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v9, 1LL, v15) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v64 = v76;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v76, v9, v15);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v64, v15);
  }

  uint64_t v65 = v53 + v63[10];
  uint64_t v66 = *(unsigned __int8 *)(v65 + 8);
  if (v66 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v67 = *(void *)v65;
    Hasher._combine(_:)(1u);
    if ((v66 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v67 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v68 = v67;
      }
      else {
        uint64_t v68 = 0LL;
      }
      Hasher._combine(_:)(v68);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v67);
    }
  }

  uint64_t v69 = *(unsigned __int8 *)(v53 + v63[11]);
  if (v69 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v69);
  }

  specialized Set._Variant.insert(_:)(&v3, 2uLL);
  if ((a1 & 0x10) == 0)
  {
LABEL_5:
    if ((a1 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v47)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          unint64_t v14 = v48;
          if (!v48) {
            goto LABEL_18;
          }
          goto LABEL_25;
        }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          unint64_t v13 = v47;
          if (!v47) {
            goto LABEL_18;
          }
          goto LABEL_25;
        }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t v13 = v45;
        if (!v45)
        {
LABEL_18:
          Hasher._combine(_:)(0);
          unint64_t v14 = v46;
          if (!v46)
          {
LABEL_19:
            Hasher._combine(_:)(0);
            goto LABEL_26;
          }

  __break(1u);
  return result;
}

  Swift::String v46 = 4LL;
  if (v6 <= 1.59271755e13) {
    unint64_t v21 = v6;
  }
  else {
    unint64_t v21 = 1.59271755e13;
  }
  unint64_t v22 = fmax(v21, -2.11845067e11);
  v47[0] = v22;
  v18(v48, &v46, v47, ObjectType, v9);
  uint64_t result = (double *)outlined release of DateComponents((uint64_t)v48);
  if ((BYTE1(v48[35]) & 1) != 0) {
    goto LABEL_60;
  }
  unint64_t v23 = (void (*)(double *__return_ptr, uint64_t *, void *, uint64_t, void *))v9[20];
  LOBYTE(v45) = 2;
  *(double *)uint64_t v44 = v22;
  v23(v47, &v45, v44, ObjectType, v9);
  if ((LOBYTE(v47[2]) & 1) != 0)
  {
    uint64_t v24 = v6;
LABEL_29:
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(void *)unint64_t v20 = 2LL;
    *(double *)(v20 + _Block_object_dispose((const void *)(v1 - 96), 8) = v24;
    goto LABEL_19;
  }

  while (1)
  {
    uint64_t v34 = v47[1];
    if (!v8) {
      goto LABEL_72;
    }
    if (v47[1] / 86400.0 > 30.0)
    {
      uint64_t v35 = -172800.0;
LABEL_70:
      uint64_t v34 = v47[1] + v35;
      goto LABEL_71;
    }

    if (v47[1] / 86400.0 > 28.0)
    {
      uint64_t v35 = -86400.0;
      goto LABEL_70;
    }

  swift_release();
  LOBYTE(v28[0]) = 0;
  uint64_t result = specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(a6, (char *)v28);
  if ((a8 & 1) != 0) {
    return Array<A>._extend(with:)(a2, a3);
  }
  return result;
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v21);
        swift_bridgeObjectRelease();
        unint64_t v22 = v91;
        if (!v91) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v85,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      unint64_t v23 = v85;
    }

    else
    {
      Hasher._combine(_:)(0);
      unint64_t v23 = v86;
    }

    outlined retain of LocalePreferences(v23);
    if (!v88) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  unint64_t v14 = 1;
LABEL_5:
  Hasher._combine(_:)(v14);
  swift_unknownObjectRelease();
  unint64_t v16 = v82;
LABEL_59:
  uint64_t v58 = (uint64_t)v4 + *(int *)(a2(0LL) + 20);
  if ((*(_BYTE *)(v58 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    CFStringRef v59 = *(void *)v58;
    Hasher._combine(_:)(1u);
    if ((v59 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v60 = v59;
    }
    else {
      uint64_t v60 = 0LL;
    }
    Hasher._combine(_:)(v60);
  }

  outlined init with take of LocalePreferences?( v58 + 16,  (uint64_t)v106,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  uint64_t v61 = *(unsigned __int8 *)(v58 + 73);
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v62 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v62);
  }

  uint64_t v63 = *(unsigned __int16 *)(v58 + 74);
  uint64_t v64 = v63 | (*(unsigned __int8 *)(v58 + 76) << 16);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64 & 1);
    Hasher._combine(_:)((v64 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v64) & 1);
  }

  uint64_t v65 = v83;
  uint64_t v66 = *(unsigned __int8 *)(v58 + 77);
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v67 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v67);
  }

  uint64_t v68 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v69 = v84;
  outlined init with copy of FloatingPointRoundingRule?(v58 + v68[9], v84);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v69, 1LL, v16) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v70 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v81, v84, v16);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v70, v16);
  }

  uint64_t v71 = v58 + v68[10];
  uint64_t v72 = *(unsigned __int8 *)(v71 + 8);
  if (v72 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v73 = *(void *)v71;
    Hasher._combine(_:)(1u);
    if ((v72 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v73 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        int v74 = v73;
      }
      else {
        int v74 = 0LL;
      }
      Hasher._combine(_:)(v74);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v73);
    }
  }

  double v75 = *(unsigned __int8 *)(v58 + v68[11]);
  if (v75 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v75);
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v20);
        swift_bridgeObjectRelease();
        unint64_t v21 = v84;
        if (!v84) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v98,  (uint64_t)v78,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      unint64_t v22 = v78;
    }

    else
    {
      Hasher._combine(_:)(0);
      unint64_t v22 = v79;
    }

    outlined retain of LocalePreferences(v22);
    if (!v81) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  unint64_t v13 = 1;
LABEL_5:
  Hasher._combine(_:)(v13);
  swift_unknownObjectRelease();
  unint64_t v15 = v76;
LABEL_58:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::String v52 = v2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
  if ((*(_BYTE *)(v52 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v53 = *(void *)v52;
    Hasher._combine(_:)(1u);
    if ((v53 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      unint64_t v54 = v53;
    }
    else {
      unint64_t v54 = 0LL;
    }
    Hasher._combine(_:)(v54);
  }

  uint64_t v55 = v77;
  outlined init with take of LocalePreferences?( v52 + 16,  (uint64_t)v99,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  uint64_t v56 = *(unsigned __int8 *)(v52 + 73);
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v57 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v57);
  }

  uint64_t v58 = *(unsigned int *)(v52 + 74);
  if (*(_DWORD *)(v52 + 74) == 2)
  {
    LOBYTE(v59) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v58 & 1);
    Hasher._combine(_:)((v58 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v58) & 1);
    CFStringRef v59 = BYTE3(v58) & 1;
  }

  Hasher._combine(_:)(v59);
  uint64_t v60 = *(unsigned __int8 *)(v52 + 78);
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v61 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v61);
  }

  unint64_t v62 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of FloatingPointRoundingRule?(v52 + v62[9], (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v9, 1LL, v15) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v63 = v75;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v75, v9, v15);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v63, v15);
  }

  uint64_t v64 = v52 + v62[10];
  uint64_t v65 = *(unsigned __int8 *)(v64 + 8);
  if (v65 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v66 = *(void *)v64;
    Hasher._combine(_:)(1u);
    if ((v65 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v66 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v67 = v66;
      }
      else {
        uint64_t v67 = 0LL;
      }
      Hasher._combine(_:)(v67);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v66);
    }
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v52 + v62[11]));
  uint64_t v68 = *(unsigned __int8 *)(v52 + v62[12]);
  if (v68 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v68);
  }

  Swift::String v27 = v19[2];
  uint64_t v26 = v19[3];
  swift_bridgeObjectRetain();
  if (v27 >= v26 >> 1) {
    char v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v26 > 1),  v27 + 1,  1,  v19);
  }
  v19[2] = v27 + 1;
  uint64_t v28 = &v19[2 * v27];
  v28[4] = a5;
  v28[5] = a6;
  if (a8 != 1)
  {
LABEL_26:
    Swift::String v30 = v19[2];
    uint64_t v29 = v19[3];
    if (v30 >= v29 >> 1) {
      char v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v29 > 1),  v30 + 1,  1,  v19);
    }
    v19[2] = v30 + 1;
    uint64_t v31 = &v19[2 * v30];
    v31[4] = a7;
    v31[5] = a8;
  }

  return v19;
}

  __break(1u);
  return result;
}

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v16);
          swift_bridgeObjectRelease();
LABEL_24:
          char v19 = v50;
          unint64_t v18 = v51;
          unint64_t v21 = v52;
          unint64_t v20 = v53;
          unint64_t v22 = v54;
          if (v50)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            unint64_t v23 = v18;
            uint64_t v24 = v21;
            char v25 = v20;
            uint64_t v26 = v22;
            Swift::String v27 = v19;
            _CFObject.hash(into:)();
            if (v18) {
              goto LABEL_26;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            unint64_t v32 = v22;
            unint64_t v33 = v18;
            uint64_t v34 = v21;
            uint64_t v35 = v20;
            if (v18)
            {
LABEL_26:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              uint64_t v28 = v18;
              _CFObject.hash(into:)();

              if (v21) {
                goto LABEL_27;
              }
              goto LABEL_32;
            }
          }

          Hasher._combine(_:)(0);
          if (v21)
          {
LABEL_27:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v29 = v21;
            _CFObject.hash(into:)();

            if (v20) {
              goto LABEL_28;
            }
            goto LABEL_33;
          }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v15);
  swift_bridgeObjectRelease();
LABEL_24:
  unint64_t v17 = v48;
  unint64_t v16 = v49;
  char v19 = v50;
  unint64_t v18 = v51;
  unint64_t v20 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v21 = v16;
    unint64_t v22 = v19;
    unint64_t v23 = v18;
    uint64_t v24 = v20;
    char v25 = v17;
    _CFObject.hash(into:)();
    if (v16) {
      goto LABEL_26;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    Swift::String v30 = v20;
    uint64_t v31 = v16;
    unint64_t v32 = v19;
    unint64_t v33 = v18;
    if (v16)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v26 = v16;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }

  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    Swift::String v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_28;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }

  specialized Set._Variant.insert(_:)(&v3, 2uLL);
  if ((v1 & 8) == 0)
  {
LABEL_5:
    if ((v1 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }

          if (v13) {
            goto LABEL_69;
          }
LABEL_24:
          uint64_t v26 = (4 * *(_BYTE *)(v21 + 18) + 8) & 0x3C;
          char v25 = ((-15LL << v26) - 1) & v25 | (v27 << v26);
          unint64_t v21 = *(void *)(v21 + 24 + 24 * v27);
          swift_unknownObjectRetain();
          uint64_t result = (unint64_t *)swift_unknownObjectRelease();
          if (!*(_BYTE *)(v21 + 18))
          {
            uint64_t v34 = v25 & 0xFFFFFFFFFFFFF0FFLL;
            goto LABEL_40;
          }
        }
      }

      uint64_t result = (unint64_t *)swift_unknownObjectRetain_n();
      uint64_t v34 = 0LL;
      unint64_t v21 = v11;
LABEL_40:
      uint64_t v35 = *(unsigned __int16 *)(v21 + 16);
      unint64_t v16 = v70;
      if (*(_WORD *)(v21 + 16))
      {
        unint64_t v36 = *(void *)(v21 + 24);
        uint64_t v29 = __OFSUB__(v13, v36);
        int64_t v37 = v13 - v36;
        if (v29)
        {
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }

        if (__OFADD__(v37, 1LL))
        {
LABEL_81:
          __break(1u);
          goto LABEL_82;
        }

        if (v37 + 1 < 1)
        {
          uint64_t v35 = 0LL;
LABEL_53:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v20 = v34 | (v35 << 8);
          unint64_t v15 = v84;
          unint64_t v17 = v69;
          goto LABEL_19;
        }

        if ((_DWORD)v35 != 1)
        {
          uint64_t v38 = (uint64_t *)(v21 + 48);
          uint64_t v39 = 1LL;
          while (1)
          {
            uint64_t v40 = *v38;
            v38 += 3;
            unint64_t v13 = v37 - v40;
            if (__OFSUB__(v37, v40)) {
              goto LABEL_78;
            }
            if (__OFADD__(v13, 1LL)) {
              goto LABEL_79;
            }
            if (v13 + 1 < 1)
            {
              uint64_t v35 = v39;
              unint64_t v13 = v37;
              goto LABEL_53;
            }

            ++v39;
            int64_t v37 = v13;
            if (v35 == v39) {
              goto LABEL_52;
            }
          }
        }

        unint64_t v13 = v37;
      }

      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v28 = a2;
        uint64_t v29 = a3;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain_n();
        StringProtocol._ephemeralString.getter();
        unint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        unint64_t v22 = v20;
        if (v21)
        {
          uint64_t v28 = a2;
          uint64_t v29 = a3;
          StringProtocol._ephemeralString.getter();
          unint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v21,  (uint64_t)v24,  4u,  1);
        }

        else
        {
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 4u, 1);
        }

        uint64_t v26 = v25;
        swift_bridgeObjectRelease_n();
        if ((v26 & 1) == 0) {
          goto LABEL_22;
        }
LABEL_29:
        swift_bridgeObjectRetain();
        unint64_t v18 = swift_bridgeObjectRelease();
        *(void *)(a1 + 72) = a2;
        *(void *)(a1 + 80) = a3;
        LOBYTE(v2_Block_object_dispose((const void *)(v1 - 96), 8) = 37;
        MEMORY[0x1895F8858](v18);
        void v27[2] = &v28;
        swift_bridgeObjectRetain();
        char v19 = specialized Sequence.contains(where:)( (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (uint64_t)v27,  a2,  a3);
        uint64_t result = swift_bridgeObjectRelease();
        *(_BYTE *)(a1 + 152) = v19 & 1;
        return result;
      }

      if ((a3 & 0x2000000000000000LL) != 0)
      {
        unint64_t v17 = HIBYTE(a3) & 0xF;
        uint64_t v28 = a2;
        uint64_t v29 = a3 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v16 = (char *)&v28;
        goto LABEL_28;
      }

      if ((a2 & 0x1000000000000000LL) != 0)
      {
        unint64_t v16 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
        unint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
        goto LABEL_28;
      }

    unint64_t v11 = 0;
    return v11 & 1;
  }

  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_16;
  }
  unint64_t v3 = v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem);
  unint64_t v5 = *(void *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 8);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  unint64_t v9 = *(void *)&v27[OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 16];
  uint64_t v8 = *(void *)&v27[OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 24];
  int64_t v10 = v4 == *(void *)&v27[OBJC_IVAR____NSSwiftURLQueryItem_queryItem]
     && v5 == *(void *)&v27[OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 8];
  if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_22;
  }
  unint64_t v11 = v8 == 0;
  if (!v6)
  {

    return v11 & 1;
  }

  if (!v8)
  {
LABEL_22:

    goto LABEL_23;
  }

  if (v7 == v9 && v6 == v8)
  {

    unint64_t v11 = 1;
  }

  else
  {
    unint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }

  return v11 & 1;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v54)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    unint64_t v15 = v55;
    if (!v55) {
      goto LABEL_19;
    }
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v72, v15);
    swift_bridgeObjectRelease();
    unint64_t v16 = v56;
    if (!v56) {
      goto LABEL_20;
    }
    goto LABEL_26;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v64) {
    goto LABEL_24;
  }
LABEL_18:
  Hasher._combine(_:)(0);
  unint64_t v17 = v65;
  if (!v65)
  {
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_26;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v58) {
    goto LABEL_24;
  }
LABEL_18:
  Hasher._combine(_:)(0);
  unint64_t v16 = v59;
  if (!v59)
  {
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_26;
  }

  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

          v4[2] = v9;
          break;
        }
      }

      else if (v9 < v19)
      {
        goto LABEL_16;
      }

  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

        _StringGuts.grow(_:)(22LL);
        swift_bridgeObjectRelease();
        v22[0] = 0xD000000000000014LL;
        v22[1] = 0x80000001839C9190LL;
        unint64_t v23 = v4;
        v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1832244A4LL);
      }

      int64_t v10 = 0LL;
      unint64_t v9 = 512LL;
LABEL_20:
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v9,  a3,  a4,  v10,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))v22,  0LL,  0LL);
      return swift_willThrow();
  }

    swift_bridgeObjectRelease();
    *a1 = v2;
  }

  return v2;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v72, v12);
  swift_bridgeObjectRelease();
LABEL_24:
  unint64_t v14 = v57;
  unint64_t v13 = v58;
  unint64_t v16 = v59;
  unint64_t v15 = v60;
  unint64_t v17 = v61;
  if (v57)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v18 = v13;
    char v19 = v16;
    unint64_t v20 = v15;
    unint64_t v21 = v17;
    unint64_t v22 = v14;
    _CFObject.hash(into:)();
    if (v13) {
      goto LABEL_26;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    Swift::String v27 = v17;
    uint64_t v28 = v13;
    uint64_t v29 = v16;
    Swift::String v30 = v15;
    if (v13)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v23 = v13;
      _CFObject.hash(into:)();

      if (v16) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }

  Hasher._combine(_:)(0);
  if (v16)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v24 = v16;
    _CFObject.hash(into:)();

    if (v15) {
      goto LABEL_28;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v17) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v21);
        swift_bridgeObjectRelease();
        unint64_t v22 = v91;
        if (!v91) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v85,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      unint64_t v23 = v85;
    }

    else
    {
      Hasher._combine(_:)(0);
      unint64_t v23 = v86;
    }

    outlined retain of LocalePreferences(v23);
    if (!v88) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  unint64_t v14 = 1;
LABEL_5:
  Hasher._combine(_:)(v14);
  swift_unknownObjectRelease();
  unint64_t v16 = v82;
LABEL_59:
  uint64_t v58 = (uint64_t)v3 + *(int *)(a2 + 36);
  if ((*(_BYTE *)(v58 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    CFStringRef v59 = *(void *)v58;
    Hasher._combine(_:)(1u);
    if ((v59 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v60 = v59;
    }
    else {
      uint64_t v60 = 0LL;
    }
    Hasher._combine(_:)(v60);
  }

  outlined init with take of LocalePreferences?( v58 + 16,  (uint64_t)v106,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  uint64_t v61 = *(unsigned __int8 *)(v58 + 73);
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v62 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v62);
  }

  uint64_t v63 = *(unsigned __int16 *)(v58 + 74);
  uint64_t v64 = v63 | (*(unsigned __int8 *)(v58 + 76) << 16);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64 & 1);
    Hasher._combine(_:)((v64 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v64) & 1);
  }

  uint64_t v65 = v83;
  uint64_t v66 = *(unsigned __int8 *)(v58 + 77);
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v67 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v67);
  }

  uint64_t v68 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v69 = v84;
  outlined init with copy of FloatingPointRoundingRule?(v58 + v68[9], v84);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v69, 1LL, v16) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v70 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v81, v84, v16);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v70, v16);
  }

  uint64_t v71 = v58 + v68[10];
  uint64_t v72 = *(unsigned __int8 *)(v71 + 8);
  if (v72 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v73 = *(void *)v71;
    Hasher._combine(_:)(1u);
    if ((v72 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v73 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        int v74 = v73;
      }
      else {
        int v74 = 0LL;
      }
      Hasher._combine(_:)(v74);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v73);
    }
  }

  double v75 = *(unsigned __int8 *)(v58 + v68[11]);
  if (v75 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v75);
  }

  if (v81 < (unint64_t)v30)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    os_unfair_lock_unlock((os_unfair_lock_t)v19);
    __break(1u);
    goto LABEL_32;
  }

  uint64_t v61 = Substring.subscript.getter();
  uint64_t v63 = v62;
  uint64_t v65 = v64;
  uint64_t v67 = v66;
  uint64_t v68 = *(os_unfair_lock_s **)(v86 + 24);
  MEMORY[0x1895F8858](v61);
  unint64_t v5 = v68 + 4;
  swift_retain();
  os_unfair_lock_lock(v68 + 4);
  uint64_t v69 = v87;
  partial apply for closure #1 in ICU.CaseMap.titlecase(_:)(&v88);
  if (v69)
  {
LABEL_32:
    os_unfair_lock_unlock(v5);
    __break(1u);
    return;
  }

  uint64_t v71 = v88;
  uint64_t v70 = v89;
  os_unfair_lock_unlock(v68 + 4);
  swift_release();
  if (!v70)
  {
    uint64_t v88 = v61;
    uint64_t v89 = v63;
    uint64_t v90 = v65;
    uint64_t v91 = v67;
    lazy protocol witness table accessor for type Substring and conformance Substring();
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    uint64_t v72 = String._capitalized()();
    uint64_t v71 = v72._countAndFlagsBits;
    uint64_t v70 = v72._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  v73._uint64_t countAndFlagsBits = v71;
  v73._object = v70;
  String.append(_:)(v73);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v48)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    unint64_t v18 = v49;
    if (!v49) {
      goto LABEL_19;
    }
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v66, v18);
    swift_bridgeObjectRelease();
    char v19 = v50;
    if (!v50) {
      goto LABEL_20;
    }
    goto LABEL_26;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v53)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    unint64_t v18 = v54;
    if (!v54) {
      goto LABEL_19;
    }
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v18);
    swift_bridgeObjectRelease();
    char v19 = v55;
    if (!v55) {
      goto LABEL_20;
    }
    goto LABEL_26;
  }

    unint64_t v14 = __clz(__rbit64(v12));
    uint64_t v7 = (v12 - 1) & v12;
    int64_t v10 = v14 + (v2 << 6);
LABEL_24:
    unint64_t v15 = *(void *)(v3 + 56) + 16 * v10;
    if ((*(_BYTE *)(v15 + 8) & 1) == 0 && *(uint64_t **)v15 == result)
    {
LABEL_60:
      Swift::String v30 = *(void *)(*(void *)(v3 + 48) + 16 * v10);
      swift_bridgeObjectRetain();
      return (uint64_t *)v30;
    }
  }

  unint64_t v13 = v11 + 5;
  if (v13 < v8)
  {
    uint64_t v12 = *(void *)(v6 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        Swift::UInt v2 = v13 + 1;
        if (__OFADD__(v13, 1LL)) {
          break;
        }
        if (v2 >= v8) {
          goto LABEL_27;
        }
        uint64_t v12 = *(void *)(v6 + 8 * v2);
        ++v13;
        if (v12) {
          goto LABEL_23;
        }
      }

    uint64_t v26 = specialized UnsafeMutableBufferPointer.initialize<A>(from:)(v29, v12, (int64_t)v13, a1, a2);
    if ((v29[0] == v29[1] || v29[0] == 0LL) && v26 < a2)
    {
      a1[v26] = 0;
      unint64_t v9 = 1LL;
      goto LABEL_16;
    }

    goto LABEL_3;
  }

  unint64_t v9 = 1LL;
  specialized UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)( 1,  (uint64_t)a1,  a2,  1,  v8,  (uint64_t)objc_msgSend(v7, sel_length));
LABEL_16:
  objc_autoreleasePoolPop(v6);
  return v9;
}

  if (v43 == 7)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if (v44)
  {
    Hasher._combine(_:)(0);
    if (!v45) {
      goto LABEL_28;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized Optional<A>.hash(into:)();
    if (!v45)
    {
LABEL_28:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v28);
      if (v46 != 4) {
        goto LABEL_29;
      }
LABEL_33:
      Hasher._combine(_:)(0);
      if (v36) {
        goto LABEL_30;
      }
      goto LABEL_34;
    }
  }

  Hasher._combine(_:)(0);
  if (v46 == 4) {
    goto LABEL_33;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v36)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v35, v36);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v35, v36);
    goto LABEL_35;
  }

  if (v41 == 7)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if (v42)
  {
    Hasher._combine(_:)(0);
    if (!v43) {
      goto LABEL_28;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized Optional<A>.hash(into:)();
    if (!v43)
    {
LABEL_28:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v27);
      if (v44 != 4) {
        goto LABEL_29;
      }
LABEL_33:
      Hasher._combine(_:)(0);
      if (v35) {
        goto LABEL_30;
      }
      goto LABEL_34;
    }
  }

  Hasher._combine(_:)(0);
  if (v44 == 4) {
    goto LABEL_33;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v35)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v34, v35);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v34, v35);
    goto LABEL_35;
  }

  if (!v262)
  {
    if (!v261) {
      goto LABEL_42;
    }
    goto LABEL_49;
  }

  if (!v261)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_49:
    uint64_t v69 = v255;
    uint64_t v70 = v261;
    outlined copy of Locale.LanguageCode?(v255, v261);
    uint64_t v71 = v256;
    uint64_t v72 = v262;
    goto LABEL_31;
  }

  if (v259 != v188 || v260 != v187)
  {
    v305 = v12;
    v298 = v14;
    v312 = v13;
    v170 = v30;
    v176 = v31;
    uint64_t v61 = v21;
    unint64_t v62 = v20;
    uint64_t v63 = v18;
    uint64_t v64 = v19;
    uint64_t v65 = v16;
    uint64_t v66 = v17;
    uint64_t v67 = v15;
    v335 = v9;
    v343 = v8;
    v319 = v23;
    v327 = v10;
    uint64_t v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
    unint64_t v23 = v319;
    int64_t v10 = v327;
    unint64_t v9 = v335;
    uint64_t v8 = v343;
    unint64_t v15 = v67;
    Swift::String v30 = v170;
    uint64_t v31 = v176;
    unint64_t v14 = v298;
    uint64_t v12 = v305;
    unint64_t v13 = v312;
    unint64_t v17 = v66;
    unint64_t v16 = v65;
    char v19 = v64;
    unint64_t v18 = v63;
    unint64_t v20 = v62;
    unint64_t v21 = v61;
    if ((v68 & 1) == 0) {
      return 0LL;
    }
  }

    uint64_t v31 = specialized static Locale.NumberingSystem.validNumberingSystems(for:)(a1, a2);
    unint64_t v32 = v31[2];
    if (v32)
    {
      unint64_t v33 = 0LL;
      while (1)
      {
        uint64_t v34 = &v31[v33];
        uint64_t v35 = v31[v33 + 6] == countAndFlagsBits && v31[v33 + 7] == (void)object;
        if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        v33 += 4LL;
        if (!--v32) {
          goto LABEL_31;
        }
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v33 * 8)
      {
        int64_t v37 = v31[v33 + 4];
        unint64_t v36 = v31[v33 + 5];
        uint64_t v39 = v34[6];
        uint64_t v38 = v34[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        outlined consume of Locale.LanguageCode?(v45[21], v45[22]);
        v45[21] = v37;
        v45[22] = v36;
        v45[23] = v39;
        v45[24] = v38;
        goto LABEL_35;
      }
    }

    else
    {
LABEL_31:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v45[21], v45[22]);
    memset(&v45[21], 0, 32);
LABEL_35:
    memcpy(v44, v45, sizeof(v44));
    memcpy(v43, v45, sizeof(v43));
    Locale.Components.icuIdentifier.getter();
    uint64_t v40 = (const __CFAllocator *)*MEMORY[0x189604DD0];
    uint64_t v41 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v40, v41);
    swift_unknownObjectRelease();
    if (CanonicalLocaleIdentifierFromString)
    {
      uint64_t v8 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);
      swift_bridgeObjectRelease();

      outlined release of Locale.Components(__src);
      outlined release of Locale.Components(&v44[0]._countAndFlagsBits);
    }

    else
    {
      swift_bridgeObjectRelease();
      outlined release of Locale.Components(__src);
      outlined release of Locale.Components(&v44[0]._countAndFlagsBits);
      return 0LL;
    }

    return v8;
  }

  swift_bridgeObjectRelease();
  LODWORD(v44[0]._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  char v25 = unumsys_open();
  swift_release();
  if (!v25)
  {
    if (one-time initialization token for latn != -1) {
      swift_once();
    }
    object = (void *)*((void *)&xmmword_18C5D4100 + 1);
    uint64_t countAndFlagsBits = xmmword_18C5D4100;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_22;
  }

  uint64_t result = MEMORY[0x186E21754](v25);
  if (result)
  {
    String.init(cString:)();
    Swift::String v27 = String.lowercased()();
    uint64_t countAndFlagsBits = v27._countAndFlagsBits;
    object = v27._object;
LABEL_22:
    unumsys_close();
    goto LABEL_23;
  }

  __break(1u);
  return result;
}

          unint64_t v23 = 512LL;
LABEL_28:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_74;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v41 = (int)POSIXErrorCode.rawValue.getter();
          uint64_t v42 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v43 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v38 = objc_msgSend(v42, sel_initWithDomain_code_userInfo_, v43, v41, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v44 = objc_msgSend(v38, sel_domain);
          uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
          unint64_t v11 = v46;

          if (v45 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v11 == v47)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_33;
          }

          uint64_t v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v48 & 1) != 0) {
            goto LABEL_33;
          }
          __break(1u);
          break;
      }

      goto LABEL_73;
    }

      __break(1u);
      goto LABEL_24;
    }

    if (result > 0xFF)
    {
      __break(1u);
      goto LABEL_23;
    }

    uint64_t v7 = (result + 1);
    if ((_BYTE)result != 0xFF) {
      goto LABEL_10;
    }
  }

  if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t result = static String._tryFromUTF8(_:)();
    *a2 = result;
    a2[1] = v14;
    return result;
  }

  __src[10] = (int)ucal_get();
  LOBYTE(__src[11]) = 0;
  if ((a2 & 0x40000) == 0)
  {
LABEL_9:
    if ((a2 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  unint64_t v21 = TypeMetadata.descriptor.getter();
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  unint64_t v22 = *(_DWORD *)(v21 + 16);
  v227 = *(_OWORD *)v21;
  LODWORD(v22_Block_object_dispose((const void *)(v1 - 96), 8) = v22;
  swift_getAtKeyPath();
  swift_release();
  unint64_t v23 = FieldDescriptor.subscript.getter();
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  uint64_t v24 = *(_DWORD *)(v23 + 8);
  *(void *)&v227 = *(void *)v23;
  DWORD2(v227) = v24;
  swift_getAtKeyPath();
  swift_release();
  unint64_t v20 = MangledTypeReference.standardSubstitution.getter();
  if (!v20) {
    unint64_t v20 = TypeMetadata._resolve(_:)();
  }
  char v19 = v8;
LABEL_26:
  char v25 = swift_conformsToProtocol2();
  if (v25) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0LL;
  }
  if (v25) {
    Swift::String v27 = v20;
  }
  else {
    Swift::String v27 = 0LL;
  }
  if (v27)
  {
    v85 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 24))(v27, v26);
    unint64_t v87 = v86;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v227 = v7;
    v222 = v85;
    uint64_t v90 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v87);
    uint64_t v91 = *(void *)(v7 + 16);
    __int128 v92 = (v89 & 1) == 0;
    uint64_t v93 = v91 + v92;
    if (__OFADD__(v91, v92)) {
      goto LABEL_262;
    }
    if (*(void *)(v7 + 24) < v93)
    {
      v219 = v89;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v93,  isUniquelyReferenced_nonNull_native);
      uint64_t v7 = v227;
      unint64_t v94 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v87);
      __int128 v96 = v95 & 1;
      uint64_t v89 = v219;
      if ((v219 & 1) != v96) {
        goto LABEL_272;
      }
      uint64_t v90 = v94;
LABEL_106:
      if ((v89 & 1) == 0) {
        goto LABEL_196;
      }
LABEL_107:
      uint64_t v97 = (uint64_t *)(*(void *)(v7 + 56) + 16 * v90);
      *uint64_t v97 = v27;
      v97[1] = v26;
      goto LABEL_198;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_106;
    }
    v220 = v89;
    v210 = a1;
    v212 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
    v144 = static _DictionaryStorage.copy(original:)();
    v145 = v144;
    if (!*(void *)(v7 + 16)) {
      goto LABEL_195;
    }
    uint64_t result = (void *)(v144 + 64);
    v147 = v7 + 64;
    v148 = (unint64_t)((1LL << *(_BYTE *)(v145 + 32)) + 63) >> 6;
    v149 = 0LL;
    *(void *)(v145 + 16) = *(void *)(v7 + 16);
    v150 = 1LL << *(_BYTE *)(v7 + 32);
    if (v150 < 64) {
      v151 = ~(-1LL << v150);
    }
    else {
      v151 = -1LL;
    }
    v152 = v151 & *(void *)(v7 + 64);
    v217 = (unint64_t)(v150 + 63) >> 6;
    while (1)
    {
      if (v152)
      {
        v153 = __clz(__rbit64(v152));
        v152 &= v152 - 1;
        v154 = v153 | (v149 << 6);
      }

      else
      {
        uint64_t v60 = __OFADD__(v149++, 1LL);
        if (v60) {
          goto LABEL_268;
        }
        if (v149 >= v217) {
          goto LABEL_195;
        }
        v161 = *(void *)(v147 + 8 * v149);
        if (!v161)
        {
          v162 = v149 + 1;
          if (v149 + 1 >= v217) {
            goto LABEL_195;
          }
          v161 = *(void *)(v147 + 8 * v162);
          if (v161) {
            goto LABEL_178;
          }
          v162 = v149 + 2;
          if (v149 + 2 >= v217) {
            goto LABEL_195;
          }
          v161 = *(void *)(v147 + 8 * v162);
          if (v161)
          {
LABEL_178:
            v149 = v162;
          }

          else
          {
            v163 = v149 + 3;
            if (v149 + 3 >= v217) {
              goto LABEL_195;
            }
            v164 = v147;
            v161 = *(void *)(v147 + 8 * v163);
            if (!v161)
            {
              v163 = v149 + 4;
              if (v149 + 4 >= v217) {
                goto LABEL_195;
              }
              v161 = *(void *)(v147 + 8 * v163);
              if (!v161)
              {
                v163 = v149 + 5;
                if (v149 + 5 >= v217) {
                  goto LABEL_195;
                }
                v161 = *(void *)(v147 + 8 * v163);
                if (!v161)
                {
                  v163 = v149 + 6;
                  if (v149 + 6 >= v217) {
                    goto LABEL_195;
                  }
                  v161 = *(void *)(v147 + 8 * v163);
                  if (!v161)
                  {
                    v163 = v149 + 7;
                    if (v149 + 7 >= v217) {
                      goto LABEL_195;
                    }
                    v161 = *(void *)(v147 + 8 * v163);
                    if (!v161)
                    {
                      while (1)
                      {
                        v149 = v163 + 1;
                        if (__OFADD__(v163, 1LL)) {
                          goto LABEL_273;
                        }
                        if (v149 >= v217) {
                          break;
                        }
                        v147 = v164;
                        v161 = *(void *)(v164 + 8 * v149);
                        ++v163;
                        if (v161) {
                          goto LABEL_179;
                        }
                      }

    uint64_t v8 = (v12 - 1) & v12;
    int64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_24:
    unint64_t v14 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v10);
    unint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v1 + 56) + 72 * v10, (uint64_t)v110);
    *(void *)&v105 = v15;
    *((void *)&v105 + 1) = v16;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v110, (uint64_t)&v106);
    *(void *)&uint64_t v99 = v15;
    *((void *)&v99 + 1) = v16;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v106, (uint64_t)&v100);
    unint64_t v17 = v104;
    if (v104
      && *(void *)(v104 + 16)
      && (Hasher.init(_seed:)(),
          Hasher._combine(_:)(0LL),
          unint64_t v18 = Hasher._finalize()(),
          char v19 = -1LL << *(_BYTE *)(v17 + 32),
          unint64_t v20 = v18 & ~v19,
          ((*(void *)(v17 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) != 0))
    {
      unint64_t v21 = ~v19;
      while (*(void *)(*(void *)(v17 + 48) + 16 * v20 + 8))
      {
        unint64_t v20 = (v20 + 1) & v21;
        if (((*(void *)(v17 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) == 0) {
          goto LABEL_7;
        }
      }

      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v105);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v100);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v110);
      swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v94 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
      unint64_t v22 = __OFADD__(v95++, 1LL);
      unint64_t v1 = v98;
      if (v22)
      {
        __break(1u);
        goto LABEL_34;
      }
    }

    else
    {
LABEL_7:
      swift_bridgeObjectRetain_n();
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v105);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v100);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v110);
      swift_bridgeObjectRelease();
      unint64_t v1 = v98;
    }
  }

  unint64_t v13 = v11 + 3;
  if (v13 >= v97) {
    goto LABEL_34;
  }
  uint64_t v12 = *(void *)(v96 + 8 * v13);
  if (v12)
  {
    uint64_t v4 = v13;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_140;
    }
    if (v4 >= v97) {
      break;
    }
    uint64_t v12 = *(void *)(v96 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_23;
    }
  }

    __break(1u);
LABEL_24:
    __break(1u);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v118 + 8))(v63, v58);
  __break(1u);
  return result;
}

    int64_t v10 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v6 << 6);
LABEL_24:
    char v19 = *(void *)(v3 + 56);
    unint64_t v20 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v14);
    unint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    outlined init with copy of AttributedString._AttributeValue(v19 + 72 * v14, (uint64_t)v122);
    *(void *)&v117 = v21;
    *((void *)&v117 + 1) = v22;
    unint64_t v23 = (uint64_t)v109;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v122, (uint64_t)v109);
    *(void *)&v112 = v21;
    *((void *)&v112 + 1) = v22;
    outlined init with copy of AttributedString._AttributeValue(v23, (uint64_t)&v113);
    uint64_t v24 = *((void *)&v115 + 1);
    char v25 = v116;
    swift_bridgeObjectRetain_n();
    outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v113);
    if (!v25)
    {
      if (v15) {
        goto LABEL_6;
      }
      swift_bridgeObjectRelease_n();
      outlined destroy of Any?( (uint64_t)&v117,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, 0LL);
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, 0LL);
LABEL_38:
      outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
      swift_bridgeObjectRelease();
      unint64_t v3 = v110;
      goto LABEL_39;
    }

    if (v25 == 1)
    {
      swift_bridgeObjectRetain();
      outlined destroy of Any?( (uint64_t)&v117,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, 1LL);
      if (v15 == 1) {
        goto LABEL_38;
      }
      unint64_t v11 = v108;
      uint64_t v12 = v15;
LABEL_7:
      outlined consume of AttributedString.AttributeRunBoundaries?(v11, v12);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
      swift_bridgeObjectRelease();
      unint64_t v3 = v110;
    }

    else
    {
      if (!v15)
      {
LABEL_6:
        outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
        outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
        swift_bridgeObjectRelease();
        outlined destroy of Any?( (uint64_t)&v117,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
        outlined consume of AttributedString.AttributeRunBoundaries?(v24, v25);
        unint64_t v11 = v24;
        uint64_t v12 = v25;
        goto LABEL_7;
      }

      if (v24 == v108 && v25 == v15) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
      outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
      swift_bridgeObjectRelease();
      outlined destroy of Any?( (uint64_t)&v117,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, v25);
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, v25);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
      swift_bridgeObjectRelease();
      unint64_t v3 = v110;
      if ((v26 & 1) != 0)
      {
LABEL_39:
        *(void *)&v105[(v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v14;
        Swift::String v27 = __OFADD__(v103, 1LL);
        v103 = (unint64_t *)((char *)v103 + 1);
        if (v27)
        {
          __break(1u);
          goto LABEL_42;
        }
      }
    }
  }

  unint64_t v18 = v16 + 3;
  unint64_t v17 = *(void *)(v106 + 8 * v18);
  if (v17)
  {
    unint64_t v6 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    unint64_t v6 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      goto LABEL_157;
    }
    unint64_t v17 = *(void *)(v106 + 8 * v6);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    unint64_t v5 = (v12 - 1) & v12;
  }

  unint64_t v13 = v11 + 5;
  if (v13 >= v6)
  {
LABEL_29:
    unint64_t v14 = 0LL;
    goto LABEL_30;
  }

  uint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    uint64_t v8 = v13;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_29;
    }
    uint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_23;
    }
  }

              unint64_t v14 = 1LL << v9;
              goto LABEL_24;
            }

            goto LABEL_12;
          }
        }

        if ((unint64_t)v12 > 0xFFFFFFFFFFFFFFC0LL)
        {
          unint64_t v13 = v4 >> (v11 - v9);
          if (v9 < 0) {
            goto LABEL_17;
          }
          goto LABEL_23;
        }

  __break(1u);
  return result;
}

  swift_release();
  return swift_bridgeObjectRelease();
}

    uint64_t v56 = (v8 - 1) & v8;
    char v57 = v9;
    unint64_t v6 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_24:
    unint64_t v11 = (uint64_t *)(*(void *)(result + 48) + 16 * v6);
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    unint64_t v14 = (uint64_t *)(*(void *)(result + 56) + 80 * v6);
    unint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    unint64_t v17 = v14[2];
    unint64_t v18 = v14[3];
    char v19 = v14[5];
    unint64_t v20 = v14[7];
    unint64_t v54 = v14[6];
    uint64_t v55 = v14[4];
    unint64_t v21 = v14[8];
    CFStringRef v59 = v14[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v22 = v18;
    swift_bridgeObjectRetain();
    uint64_t v60 = v19;
    swift_bridgeObjectRetain();
    uint64_t v58 = v20;
    swift_bridgeObjectRetain();
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
    LOBYTE(v1_Block_object_dispose((const void *)(v1 - 96), 8) = v24;
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0) {
      goto LABEL_70;
    }
    uint64_t v61 = v16;
    char v25 = (void *)(*(void *)(a2 + 56) + 80 * v23);
    uint64_t v26 = v25[1];
    Swift::String v27 = v25[2];
    uint64_t v29 = v25[3];
    uint64_t v28 = v25[4];
    Swift::String v30 = v25[5];
    uint64_t v31 = v25[6];
    unint64_t v32 = v25[7];
    unint64_t v33 = v25[9];
    uint64_t v53 = v25[8];
    if (v26)
    {
      if (!v61
        || (*v25 == v15 ? (uint64_t v34 = v26 == v61) : (uint64_t v34 = 0),
            !v34
         && (uint64_t v35 = v25[7],
             unint64_t v36 = v25[4],
             int64_t v37 = _stringCompareWithSmolCheck(_:_:expecting:)(),
             uint64_t v28 = v36,
             unint64_t v32 = v35,
             (v37 & 1) == 0)))
      {
LABEL_70:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0LL;
      }
    }

    else if (v61)
    {
      goto LABEL_70;
    }

    if (v29)
    {
      if (!v22) {
        goto LABEL_70;
      }
      if (v27 != v17 || v29 != v22)
      {
        uint64_t v39 = v32;
        uint64_t v40 = v28;
        uint64_t v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v28 = v40;
        unint64_t v32 = v39;
        if ((v41 & 1) == 0) {
          goto LABEL_70;
        }
      }
    }

    else if (v22)
    {
      goto LABEL_70;
    }

    if (v30)
    {
      uint64_t v42 = v59;
      if (!v60) {
        goto LABEL_70;
      }
      if (v28 != v55 || v30 != v60)
      {
        uint64_t v44 = v32;
        uint64_t v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        unint64_t v32 = v44;
        if ((v45 & 1) == 0) {
          goto LABEL_70;
        }
      }
    }

    else
    {
      uint64_t v42 = v59;
      if (v60) {
        goto LABEL_70;
      }
    }

    if (v32)
    {
      if (!v58) {
        goto LABEL_70;
      }
      Swift::String v46 = v31 == v54 && v32 == v58;
      if (!v46 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_70;
      }
    }

    else if (v58)
    {
      goto LABEL_70;
    }

    if (!v33)
    {
      if (v42) {
        goto LABEL_70;
      }
      goto LABEL_7;
    }

    if (!v42) {
      goto LABEL_70;
    }
    if (v53 == v21 && v33 == v42)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v51;
      unint64_t v5 = v56;
      Swift::UInt v2 = v57;
    }

    else
    {
      uint64_t v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v51;
      unint64_t v5 = v56;
      Swift::UInt v2 = v57;
      if ((v48 & 1) == 0) {
        return 0LL;
      }
    }
  }

  int64_t v10 = v2 + 4;
  if (v2 + 4 >= v50) {
    return 1LL;
  }
  uint64_t v8 = *(void *)(v49 + 8 * v10);
  if (v8)
  {
    unint64_t v9 = v2 + 4;
    goto LABEL_23;
  }

  while (1)
  {
    unint64_t v9 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      break;
    }
    if (v9 >= v50) {
      return 1LL;
    }
    uint64_t v8 = *(void *)(v49 + 8 * v9);
    ++v10;
    if (v8) {
      goto LABEL_23;
    }
  }

    unint64_t v6 = (v11 - 1) & v11;
    uint64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    unint64_t v14 = result;
    unint64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    unint64_t v17 = *v15;
    unint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    unint64_t v18 = Hasher._finalize()();
    char v19 = -1LL << *(_BYTE *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) == 0) {
      goto LABEL_39;
    }
    unint64_t v21 = *(void *)(a2 + 48);
    unint64_t v22 = (void *)(v21 + 16 * v20);
    unint64_t v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (uint64_t i = v20 + 1; ; uint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        Swift::String v27 = (void *)(v21 + 16 * v26);
        uint64_t v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          unint64_t v14 = v47;
          if (!v47) {
            goto LABEL_18;
          }
          goto LABEL_25;
        }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    unint64_t v13 = v45;
    if (!v45) {
      goto LABEL_19;
    }
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v62, v13);
    swift_bridgeObjectRelease();
    unint64_t v14 = v46;
    if (!v46) {
      goto LABEL_20;
    }
    goto LABEL_26;
  }

          if (v81)
          {
            if (v80)
            {
              if (v77 != v76 || v79 != v75)
              {
                uint64_t v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
                uint64_t result = 0LL;
                if ((v24 & 1) == 0) {
                  return result;
                }
              }

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v13);
          swift_bridgeObjectRelease();
LABEL_24:
          unint64_t v16 = v47;
          unint64_t v15 = v48;
          unint64_t v18 = v49;
          unint64_t v17 = v50;
          char v19 = v51;
          if (v47)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            unint64_t v20 = v15;
            unint64_t v21 = v18;
            unint64_t v22 = v17;
            unint64_t v23 = v19;
            uint64_t v24 = v16;
            _CFObject.hash(into:)();
            if (v15) {
              goto LABEL_26;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            uint64_t v29 = v19;
            Swift::String v30 = v15;
            uint64_t v31 = v18;
            unint64_t v32 = v17;
            if (v15)
            {
LABEL_26:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              char v25 = v15;
              _CFObject.hash(into:)();

              if (v18) {
                goto LABEL_27;
              }
              goto LABEL_32;
            }
          }

          Hasher._combine(_:)(0);
          if (v18)
          {
LABEL_27:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v26 = v18;
            _CFObject.hash(into:)();

            if (v17) {
              goto LABEL_28;
            }
            goto LABEL_33;
          }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v60, v12);
  swift_bridgeObjectRelease();
LABEL_24:
  unint64_t v14 = v45;
  unint64_t v13 = v46;
  unint64_t v16 = v47;
  unint64_t v15 = v48;
  unint64_t v17 = v49;
  if (v45)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v18 = v13;
    char v19 = v16;
    unint64_t v20 = v15;
    unint64_t v21 = v17;
    unint64_t v22 = v14;
    _CFObject.hash(into:)();
    if (v13) {
      goto LABEL_26;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    Swift::String v27 = v17;
    uint64_t v28 = v13;
    uint64_t v29 = v16;
    Swift::String v30 = v15;
    if (v13)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v23 = v13;
      _CFObject.hash(into:)();

      if (v16) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }

  Hasher._combine(_:)(0);
  if (v16)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v24 = v16;
    _CFObject.hash(into:)();

    if (v15) {
      goto LABEL_28;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v17) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }

  uint64_t v38 = v34 + 40;
  while (1)
  {
    uint64_t v39 = *(unsigned __int8 *)(v38 + 27);
    uint64_t v40 = *(_BYTE *)(v38 + 24) != 3 || v39 == 2;
    if (!v40 && (v39 & 1) != 0) {
      break;
    }
    v38 += 64LL;
    if (!--v35) {
      goto LABEL_33;
    }
  }

  v103 = *(void *)(v38 - 8);
  uint64_t v44 = v21;
  uint64_t v45 = *(void *)v38;
  swift_bridgeObjectRetain();
  v120 = v45;
  unint64_t v21 = v44;
  swift_bridgeObjectRetain();
  uint64_t v31 = v113;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14 >= 4) {
    goto LABEL_37;
  }
LABEL_34:
  uint64_t v42 = MEMORY[0x18961AFE8];
  uint64_t v43 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
  if (!v43)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    v102 = 0LL;
    v118 = 0LL;
    if (v14 < 4) {
      goto LABEL_48;
    }
LABEL_51:
    outlined copy of TermOfAddress._TermOfAddress(v107, v108, v5, v115, v116, v31, v110, v15, v111, v24, v21, v25, v14);
    char v25 = v16;
    outlined consume of Locale.LanguageCode?(v107, v108);
    outlined consume of Locale.LanguageCode?(v116, v31);
    outlined consume of Locale.LanguageCode?(v111, v24);
    Swift::String v50 = v14;
    Swift::String v51 = *(void *)(v14 + 16);
    if (!v51) {
      goto LABEL_55;
    }
LABEL_52:
    unint64_t v54 = v50 + 40;
    while (*(_BYTE *)(v54 + 26) != 1)
    {
      v54 += 64LL;
      if (!--v51) {
        goto LABEL_55;
      }
    }

    uint64_t v56 = *(void *)v54;
    v114 = *(void *)(v54 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v55 = v56;
    uint64_t v31 = v113;
    if (!v130) {
      goto LABEL_63;
    }
    goto LABEL_58;
  }

  __break(1u);
  return result;
}

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v16);
          swift_bridgeObjectRelease();
LABEL_24:
          char v19 = v50;
          unint64_t v18 = v51;
          unint64_t v21 = v52;
          unint64_t v20 = v53;
          unint64_t v22 = v54;
          if (v50)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            unint64_t v23 = v18;
            uint64_t v24 = v21;
            char v25 = v20;
            uint64_t v26 = v22;
            Swift::String v27 = v19;
            _CFObject.hash(into:)();
            if (v18) {
              goto LABEL_26;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            unint64_t v32 = v22;
            unint64_t v33 = v18;
            uint64_t v34 = v21;
            uint64_t v35 = v20;
            if (v18)
            {
LABEL_26:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              uint64_t v28 = v18;
              _CFObject.hash(into:)();

              if (v21) {
                goto LABEL_27;
              }
              goto LABEL_32;
            }
          }

          Hasher._combine(_:)(0);
          if (v21)
          {
LABEL_27:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v29 = v21;
            _CFObject.hash(into:)();

            if (v20) {
              goto LABEL_28;
            }
            goto LABEL_33;
          }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v15);
  swift_bridgeObjectRelease();
LABEL_24:
  unint64_t v17 = v48;
  unint64_t v16 = v49;
  char v19 = v50;
  unint64_t v18 = v51;
  unint64_t v20 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v21 = v16;
    unint64_t v22 = v19;
    unint64_t v23 = v18;
    uint64_t v24 = v20;
    char v25 = v17;
    _CFObject.hash(into:)();
    if (v16) {
      goto LABEL_26;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    Swift::String v30 = v20;
    uint64_t v31 = v16;
    unint64_t v32 = v19;
    unint64_t v33 = v18;
    if (v16)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v26 = v16;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }

  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    Swift::String v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_28;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v15);
  swift_bridgeObjectRelease();
LABEL_24:
  unint64_t v17 = v48;
  unint64_t v16 = v49;
  char v19 = v50;
  unint64_t v18 = v51;
  unint64_t v20 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v21 = v16;
    unint64_t v22 = v19;
    unint64_t v23 = v18;
    uint64_t v24 = v20;
    char v25 = v17;
    _CFObject.hash(into:)();
    if (v16) {
      goto LABEL_26;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    Swift::String v30 = v20;
    uint64_t v31 = v16;
    unint64_t v32 = v19;
    unint64_t v33 = v18;
    if (v16)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v26 = v16;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }

  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    Swift::String v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_28;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }

  swift_release();
  LOBYTE(v33[0]) = 0;
  uint64_t result = specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(a6, (char *)v33);
  if ((a8 & 1) == 0) {
    return result;
  }
  unint64_t v18 = (int64_t)a9;
  a1 = *a9;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a9 = a1;
  if ((result & 1) == 0) {
    goto LABEL_31;
  }
LABEL_25:
  uint64_t v29 = a1[2];
  uint64_t v28 = a1[3];
  if (v29 >= v28 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v28 > 1),  v29 + 1,  1,  a1);
    a1 = (void *)result;
  }

  a1[2] = v29 + 1;
  Swift::String v30 = &a1[2 * v29];
  v30[4] = a2;
  v30[5] = a3;
  *(void *)unint64_t v18 = a1;
  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v50) {
    goto LABEL_24;
  }
LABEL_18:
  Hasher._combine(_:)(0);
  unint64_t v17 = v51;
  if (!v51)
  {
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_26;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    unint64_t v16 = v48;
    if (!v48) {
      goto LABEL_19;
    }
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v16);
    swift_bridgeObjectRelease();
    unint64_t v17 = v49;
    if (!v49) {
      goto LABEL_20;
    }
    goto LABEL_26;
  }

  unint64_t v15 = -[NSIndexSet _indexOfRangeAfterOrContainingIndex:](self, "_indexOfRangeAfterOrContainingIndex:", a4);
  if (v15 == 0x7FFFFFFFFFFFFFFFLL) {
    return;
  }
  unint64_t v16 = v15;
  unint64_t v17 = &self->super._internal;
  unint64_t v18 = &self->super._internal;
  if ((*(_BYTE *)&self->super._indexSetFlags & 1) == 0) {
    unint64_t v18 = ($BA656A43A73A71AF6C4B982E4240B787 *)(v17->_singleRange._range.location
  }
                                              + 16LL * *(void *)(v17->_singleRange._range.location + 24)
                                              + 64);
  char v19 = &v18[v15];
  uint64_t v35 = v19->_singleRange._range.location;
  if (v19->_singleRange._range.location < a4)
  {
    uint64_t v34 = v19->_singleRange._range.location - a4 + v19->_singleRange._range.length;
    unint64_t v33 = a4 + a3;
    -[NSMutableIndexSet _replaceRangeInArrayAtIndex:withRange:]( self,  "_replaceRangeInArrayAtIndex:withRange:",  v15,  v19->_singleRange._range.location,  a4 - v19->_singleRange._range.location);
    ++v16;
  }

  unint64_t v20 = v16;
  unint64_t v21 = (uint64_t *)MEMORY[0x189616658];
LABEL_36:
  uint64_t v26 = self->super._indexSetFlags;
  if ((*(_BYTE *)&v26 & 2) != 0)
  {
    length = v17->_singleRange._range.location;
    if (v17->_singleRange._range.location) {
      goto LABEL_43;
    }
    goto LABEL_46;
  }

  if ((*(_BYTE *)&v26 & 1) != 0)
  {
    length = self->super._internal._singleRange._range.length;
    if (length) {
      goto LABEL_43;
    }
    goto LABEL_46;
  }

  length = *(void *)(v17->_singleRange._range.location + 8);
  if (length)
  {
LABEL_43:
    if ((*(_BYTE *)&self->super._indexSetFlags & 1) != 0) {
      length = 1LL;
    }
    else {
      length = *(void *)(v17->_singleRange._range.location + 8);
    }
  }

  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

    uint64_t v8 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: bad objCType: %s", _NSMethodExceptionProem((objc_class *)self, a2), -[NSValue objCType](self, "objCType")), 0 reason userInfo];
    objc_exception_throw(v8);
    LOBYTE(v6) = -[NSNumber unsignedCharValue](v9, v10);
    return v6;
  }

  switch(v4)
  {
    case 'c':
      goto LABEL_11;
    case 'd':
      -[NSNumber doubleValue](self, "doubleValue");
      return (int)v5;
    case 'e':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'r':
      goto LABEL_23;
    case 'f':
      -[NSNumber floatValue](self, "floatValue");
      return (int)v7;
    case 'i':
      LOBYTE(v6) = -[NSNumber intValue](self, "intValue");
      return v6;
    case 'l':
      LOBYTE(v6) = -[NSNumber longValue](self, "longValue");
      return v6;
    case 'q':
      LOBYTE(v6) = -[NSNumber longLongValue](self, "longLongValue");
      return v6;
    case 's':
      LOBYTE(v6) = -[NSNumber shortValue](self, "shortValue");
      return v6;
    default:
      if (v4 == 81)
      {
        LOBYTE(v6) = -[NSNumber unsignedLongLongValue](self, "unsignedLongLongValue");
      }

      else
      {
        if (v4 != 83) {
          goto LABEL_23;
        }
        LOBYTE(v6) = -[NSNumber unsignedShortValue](self, "unsignedShortValue");
      }

      break;
  }

  return v6;
}

    uint64_t v8 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: bad objCType: %s", _NSMethodExceptionProem((objc_class *)self, a2), -[NSValue objCType](self, "objCType")), 0 reason userInfo];
    objc_exception_throw(v8);
    LOBYTE(v6) = -[NSNumber shortValue](v9, v10);
    return v6;
  }

  switch(v4)
  {
    case 'c':
      goto LABEL_11;
    case 'd':
      -[NSNumber doubleValue](self, "doubleValue");
      return (int)v5;
    case 'e':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'r':
      goto LABEL_23;
    case 'f':
      -[NSNumber floatValue](self, "floatValue");
      return (int)v7;
    case 'i':
      LOBYTE(v6) = -[NSNumber intValue](self, "intValue");
      return v6;
    case 'l':
      LOBYTE(v6) = -[NSNumber longValue](self, "longValue");
      return v6;
    case 'q':
      LOBYTE(v6) = -[NSNumber longLongValue](self, "longLongValue");
      return v6;
    case 's':
      LOBYTE(v6) = -[NSNumber shortValue](self, "shortValue");
      return v6;
    default:
      if (v4 == 81)
      {
        LOBYTE(v6) = -[NSNumber unsignedLongLongValue](self, "unsignedLongLongValue");
      }

      else
      {
        if (v4 != 83) {
          goto LABEL_23;
        }
        LOBYTE(v6) = -[NSNumber unsignedShortValue](self, "unsignedShortValue");
      }

      break;
  }

  return v6;
}

    uint64_t v8 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: bad objCType: %s", _NSMethodExceptionProem((objc_class *)self, a2), -[NSValue objCType](self, "objCType")), 0 reason userInfo];
    objc_exception_throw(v8);
    LOWORD(v6) = -[NSNumber unsignedShortValue](v9, v10);
    return v6;
  }

  switch(v4)
  {
    case 'c':
      goto LABEL_11;
    case 'd':
      -[NSNumber doubleValue](self, "doubleValue");
      return (int)v5;
    case 'e':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'r':
      goto LABEL_23;
    case 'f':
      -[NSNumber floatValue](self, "floatValue");
      return (int)v7;
    case 'i':
      LOWORD(v6) = -[NSNumber intValue](self, "intValue");
      return v6;
    case 'l':
      LOWORD(v6) = -[NSNumber longValue](self, "longValue");
      return v6;
    case 'q':
      LOWORD(v6) = -[NSNumber longLongValue](self, "longLongValue");
      return v6;
    case 's':
      LOWORD(v6) = -[NSNumber shortValue](self, "shortValue");
      return v6;
    default:
      if (v4 == 81)
      {
        LOWORD(v6) = -[NSNumber unsignedLongLongValue](self, "unsignedLongLongValue");
      }

      else
      {
        if (v4 != 83) {
          goto LABEL_23;
        }
        LOWORD(v6) = -[NSNumber unsignedShortValue](self, "unsignedShortValue");
      }

      break;
  }

  return v6;
}

    uint64_t v8 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: bad objCType: %s", _NSMethodExceptionProem((objc_class *)self, a2), -[NSValue objCType](self, "objCType")), 0 reason userInfo];
    objc_exception_throw(v8);
    LOWORD(v6) = -[NSNumber intValue](v9, v10);
    return v6;
  }

  switch(v4)
  {
    case 'c':
      goto LABEL_11;
    case 'd':
      -[NSNumber doubleValue](self, "doubleValue");
      return (int)v5;
    case 'e':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'r':
      goto LABEL_23;
    case 'f':
      -[NSNumber floatValue](self, "floatValue");
      return (int)v7;
    case 'i':
      LOWORD(v6) = -[NSNumber intValue](self, "intValue");
      return v6;
    case 'l':
      LOWORD(v6) = -[NSNumber longValue](self, "longValue");
      return v6;
    case 'q':
      LOWORD(v6) = -[NSNumber longLongValue](self, "longLongValue");
      return v6;
    case 's':
      LOWORD(v6) = -[NSNumber shortValue](self, "shortValue");
      return v6;
    default:
      if (v4 == 81)
      {
        LOWORD(v6) = -[NSNumber unsignedLongLongValue](self, "unsignedLongLongValue");
      }

      else
      {
        if (v4 != 83) {
          goto LABEL_23;
        }
        LOWORD(v6) = -[NSNumber unsignedShortValue](self, "unsignedShortValue");
      }

      break;
  }

  return v6;
}

    uint64_t v8 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: bad objCType: %s", _NSMethodExceptionProem((objc_class *)self, a2), -[NSValue objCType](self, "objCType")), 0 reason userInfo];
    objc_exception_throw(v8);
    return -[NSNumber unsignedIntValue](v9, v10);
  }

  else
  {
    switch(v4)
    {
      case 'c':
        return -[NSNumber charValue](self, "charValue");
      case 'd':
        -[NSNumber doubleValue](self, "doubleValue");
        return (int)v5;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_23;
      case 'f':
        -[NSNumber floatValue](self, "floatValue");
        return (int)v7;
      case 'i':
        return -[NSNumber intValue](self, "intValue");
      case 'l':
        return -[NSNumber longValue](self, "longValue");
      case 'q':
        return -[NSNumber longLongValue](self, "longLongValue");
      case 's':
        return -[NSNumber shortValue](self, "shortValue");
      default:
        if (v4 == 81)
        {
          uint64_t result = -[NSNumber unsignedLongLongValue](self, "unsignedLongLongValue");
        }

        else
        {
          if (v4 != 83) {
            goto LABEL_23;
          }
          uint64_t result = -[NSNumber unsignedShortValue](self, "unsignedShortValue");
        }

        break;
    }
  }

  return result;
}

    uint64_t v8 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: bad objCType: %s", _NSMethodExceptionProem((objc_class *)self, a2), -[NSValue objCType](self, "objCType")), 0 reason userInfo];
    objc_exception_throw(v8);
    return -[NSNumber longValue](v9, v10);
  }

  else
  {
    switch(v4)
    {
      case 'c':
        return -[NSNumber charValue](self, "charValue");
      case 'd':
        -[NSNumber doubleValue](self, "doubleValue");
        return v5;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_23;
      case 'f':
        -[NSNumber floatValue](self, "floatValue");
        return v7;
      case 'i':
        return -[NSNumber intValue](self, "intValue");
      case 'l':
        return -[NSNumber longValue](self, "longValue");
      case 'q':
        return -[NSNumber longLongValue](self, "longLongValue");
      case 's':
        return -[NSNumber shortValue](self, "shortValue");
      default:
        if (v4 == 81)
        {
          uint64_t result = -[NSNumber unsignedLongLongValue](self, "unsignedLongLongValue");
        }

        else
        {
          if (v4 != 83) {
            goto LABEL_23;
          }
          uint64_t result = -[NSNumber unsignedShortValue](self, "unsignedShortValue");
        }

        break;
    }
  }

  return result;
}

        -[NSNumber doubleValue](self, "doubleValue");
        unint64_t v6 = -v13;
        if (v13 >= 0.0) {
          unint64_t v6 = v13;
        }
        goto LABEL_25;
      }

    if (a2) {
      return +[NSUnitInformationStorage yottabytes](&OBJC_CLASS___NSUnitInformationStorage, "yottabytes");
    }
    else {
      return +[NSUnitInformationStorage yobibytes](&OBJC_CLASS___NSUnitInformationStorage, "yobibytes");
    }
  }

  switch(a1)
  {
    case 1LL:
      uint64_t result = +[NSUnitInformationStorage bytes](&OBJC_CLASS___NSUnitInformationStorage, "bytes");
      break;
    case 2LL:
      if (a2) {
        uint64_t result = +[NSUnitInformationStorage kilobytes](&OBJC_CLASS___NSUnitInformationStorage, "kilobytes");
      }
      else {
        uint64_t result = +[NSUnitInformationStorage kibibytes](&OBJC_CLASS___NSUnitInformationStorage, "kibibytes");
      }
      break;
    case 4LL:
      if (a2) {
        uint64_t result = +[NSUnitInformationStorage megabytes](&OBJC_CLASS___NSUnitInformationStorage, "megabytes");
      }
      else {
        uint64_t result = +[NSUnitInformationStorage mebibytes](&OBJC_CLASS___NSUnitInformationStorage, "mebibytes");
      }
      break;
    case 8LL:
      if (a2) {
        uint64_t result = +[NSUnitInformationStorage gigabytes](&OBJC_CLASS___NSUnitInformationStorage, "gigabytes");
      }
      else {
        uint64_t result = +[NSUnitInformationStorage gibibytes](&OBJC_CLASS___NSUnitInformationStorage, "gibibytes");
      }
      break;
    default:
      goto LABEL_23;
  }

  return result;
}

    unit = 0LL;
    unint64_t v11 = 0.0;
    return  -[NSMeasurement initWithDoubleValue:unit:]( objc_alloc(&OBJC_CLASS___NSMeasurement),  "initWithDoubleValue:unit:",  unit,  v11);
  }

  -[NSUnit dimension](self->_unit, "dimension");
  unint64_t v16 = -[NSMeasurement measurementByConvertingToUnit:]( self,  "measurementByConvertingToUnit:",  [(id)objc_opt_class() baseUnit]);
  -[NSUnit dimension](self->_unit, "dimension");
  unint64_t v17 = (void *)objc_msgSend(a4, "measurementByConvertingToUnit:", objc_msgSend((id)objc_opt_class(), "baseUnit"));
  -[NSMeasurement doubleValue](v16, "doubleValue");
  char v19 = v18;
  [v17 doubleValue];
  unint64_t v21 = v19 - v20;
  unint64_t v22 = v19 + v20;
  if (a3) {
    unint64_t v22 = 0.0;
  }
  if (a3 == 1) {
    unint64_t v11 = v21;
  }
  else {
    unint64_t v11 = v22;
  }
  unit = -[NSMeasurement unit](v16, "unit", v22, 0.0, v21);
  return  -[NSMeasurement initWithDoubleValue:unit:]( objc_alloc(&OBJC_CLASS___NSMeasurement),  "initWithDoubleValue:unit:",  unit,  v11);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.KeyPath<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.KeyPath<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.Value<A>.debugString(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  uint64_t v39 = *(void *)(a2 + 16);
  uint64_t v4 = v39;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v38);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(boxed_opaque_existential_1, v2, v4);
  outlined init with copy of Any((uint64_t)v38, (uint64_t)v37);
  outlined init with copy of Any((uint64_t)v37, (uint64_t)&v33);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  if (v36)
  {
    outlined destroy of Any?((uint64_t)&v35, &demangling cache variable for type metadata for Any?);
    if ((swift_dynamicCast() & 1) != 0)
    {
      *(void *)&__int128 v35 = 0LL;
      *((void *)&v35 + 1) = 0xE000000000000000LL;
      if ((_BYTE)v33) {
        uint64_t v6 = 1702195828LL;
      }
      else {
        uint64_t v6 = 0x65736C6166LL;
      }
      if ((_BYTE)v33) {
        unint64_t v7 = 0xE400000000000000LL;
      }
      else {
        unint64_t v7 = 0xE500000000000000LL;
      }
      unint64_t v8 = v7;
      String.append(_:)(*(Swift::String *)&v6);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Numeric);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v35, (uint64_t)&v33);
      _print_unlocked<A, B>(_:_:)();
      int64_t v10 = (void *)0xE000000000000000LL;
      uint64_t v9 = 0LL;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
    }

    else
    {
      if (swift_dynamicCast())
      {
        uint64_t v33 = 34LL;
        unint64_t v34 = 0xE100000000000000LL;
        lazy protocol witness table accessor for type String and conformance String();
        lazy protocol witness table accessor for type String and conformance String();
        RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
        swift_bridgeObjectRelease();
        String.append(_:)(v32);
        swift_bridgeObjectRelease();
        uint64_t v11 = 34LL;
      }

      else
      {
        if (swift_dynamicCast())
        {
          *(void *)&__int128 v35 = 0LL;
          *((void *)&v35 + 1) = 0xE000000000000000LL;
          v12._uint64_t countAndFlagsBits = 0x20657461443CLL;
          v12._object = (void *)0xE600000000000000LL;
          String.append(_:)(v12);
          Double.write<A>(to:)();
          v13._uint64_t countAndFlagsBits = 62LL;
          v13._object = (void *)0xE100000000000000LL;
          String.append(_:)(v13);
LABEL_10:
          int64_t v10 = (void *)*((void *)&v35 + 1);
          uint64_t v9 = v35;
          goto LABEL_25;
        }

        if (swift_dynamicCast())
        {
          uint64_t v33 = 0x20617461443CLL;
          unint64_t v34 = 0xE600000000000000LL;
          __asm { BR              X10 }
        }

        if (swift_dynamicCast())
        {
          uint64_t v33 = 0x20444955553CLL;
          unint64_t v34 = 0xE600000000000000LL;
          uint64_t v14 = UUID.uuidString.getter();
        }

        else
        {
          uint64_t v33 = 60LL;
          unint64_t v34 = 0xE100000000000000LL;
          __swift_project_boxed_opaque_existential_1(v38, v39);
          swift_getDynamicType();
          v16._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v16);
          swift_bridgeObjectRelease();
          v17._uint64_t countAndFlagsBits = 8250LL;
          v17._object = (void *)0xE200000000000000LL;
          String.append(_:)(v17);
          outlined init with copy of Any((uint64_t)v38, (uint64_t)&v35);
          String.init<A>(describing:)();
          lazy protocol witness table accessor for type String and conformance String();
          lazy protocol witness table accessor for type String and conformance String();
          RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
          swift_bridgeObjectRelease();
          uint64_t v15 = *((void *)&v35 + 1);
          uint64_t v14 = v35;
        }

        String.append(_:)(*(Swift::String *)&v14);
        swift_bridgeObjectRelease();
        uint64_t v11 = 62LL;
      }

      unint64_t v18 = 0xE100000000000000LL;
      String.append(_:)(*(Swift::String *)&v11);
      uint64_t v9 = v33;
      int64_t v10 = (void *)v34;
    }
  }

  else
  {
    int64_t v10 = (void *)0xE300000000000000LL;
    uint64_t v9 = 7104878LL;
  }

uint64_t PredicateExpressions.Conjunction<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Conjunction<>.debugString(state:)(a1, a2, a3, a4, 539371040LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Conjunction<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Conjunction<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Disjunction<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Conjunction<>.debugString(state:)(a1, a2, a3, a4, 545029152LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Disjunction<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Disjunction<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Equal<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 540884256LL, (void *)0xE400000000000000LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Equal<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.NotEqual<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 540877088LL, (void *)0xE400000000000000LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.NotEqual<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.NotEqual<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Arithmetic<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)&asc_183723EF0[8 * *v4];
  v9._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 32LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = v8;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 32LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 41LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  return 40LL;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Arithmetic<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Arithmetic<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

void PredicateExpressions.Comparison<>.debugString(state:)()
{
  __asm { BR              X10 }

uint64_t sub_182EE5FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(v4, *(void *)(v5 + 16));
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 32LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 60LL;
  v9._object = v6;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 32LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 16))(v4, *(void *)(v5 + 24), v3);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 41LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  return 40LL;
}

void protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Comparison<A, B>()
{
}

uint64_t PredicateExpressions.UnaryMinus<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.UnaryMinus<>.debugString(state:)(a1, a2, a3, 45LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.UnaryMinus<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.UnaryMinus<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.SequenceMinimum<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.debugString(state:)( a1,  a2,  a3,  0x29286E696D2ELL,  (void *)0xE600000000000000LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceMinimum<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.SequenceMaximum<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.debugString(state:)( a1,  a2,  a3,  0x292878616D2ELL,  (void *)0xE600000000000000LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceMaximum<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMaximum<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.ClosedRange<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 0x202E2E2E20LL, (void *)0xE500000000000000LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.ClosedRange<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ClosedRange<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Range<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 0x203C2E2E20LL, (void *)0xE500000000000000LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Range<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Range<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Conditional<>.debugString(state:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a3 + 16))(a1, a2[2], a3);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x202020200A7B20LL;
  v11._object = (void *)0xE700000000000000LL;
  String.append(_:)(v11);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, a2[3], a4);
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000LL) == 0) {
    uint64_t v14 = v12;
  }
  uint64_t v15 = 7LL;
  if (((v13 >> 60) & ((v12 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v15 = 11LL;
  }
  unint64_t v16 = v15 | (v14 << 16);
  if ((specialized Sequence<>.starts<A>(with:)() & 1) != 0) {
    unint64_t v17 = String.index(after:)();
  }
  else {
    unint64_t v17 = 15LL;
  }
  v18._uint64_t countAndFlagsBits = 41LL;
  v18._object = (void *)0xE100000000000000LL;
  uint64_t result = String.hasSuffix(_:)(v18);
  if ((result & 1) != 0)
  {
    uint64_t result = String.index(before:)();
    unint64_t v16 = result;
  }

  if (v16 >> 14 < v17 >> 14)
  {
    __break(1u);
  }

  else
  {
    String.subscript.getter();
    lazy protocol witness table accessor for type Substring and conformance Substring();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = MEMORY[0x186E1B610](0LL, 0xE000000000000000LL);
    Swift::String v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 0x2065736C65207D0ALL;
    v24._object = (void *)0xEE00202020200A7BLL;
    String.append(_:)(v24);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a5 + 16))(a1, a2[4], a5);
    uint64_t v27 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000LL) == 0) {
      uint64_t v27 = v25;
    }
    uint64_t v28 = 7LL;
    if (((v26 >> 60) & ((v25 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v28 = 11LL;
    }
    unint64_t v29 = v28 | (v27 << 16);
    if ((specialized Sequence<>.starts<A>(with:)() & 1) != 0) {
      unint64_t v30 = String.index(after:)();
    }
    else {
      unint64_t v30 = 15LL;
    }
    v31._uint64_t countAndFlagsBits = 41LL;
    v31._object = (void *)0xE100000000000000LL;
    uint64_t result = String.hasSuffix(_:)(v31);
    if ((result & 1) != 0)
    {
      uint64_t result = String.index(before:)();
      unint64_t v29 = result;
    }

    if (v29 >> 14 >= v30 >> 14)
    {
      String.subscript.getter();
      RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
      swift_bridgeObjectRelease();
      uint64_t v32 = MEMORY[0x186E1B610](0LL, 0xE000000000000000LL);
      unint64_t v34 = v33;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = v32;
      v35._object = v34;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._uint64_t countAndFlagsBits = 32010LL;
      v36._object = (void *)0xE200000000000000LL;
      String.append(_:)(v36);
      return 2123369LL;
    }
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Conditional<A, B, C>( uint64_t a1, void *a2, uint64_t a3)
{
  return PredicateExpressions.Conditional<>.debugString(state:)( a1,  a2,  *(void *)(a3 - 8),  *(void *)(a3 - 16),  *(void *)(a3 - 24));
}

uint64_t PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)( a1,  a2,  a3,  a4,  91LL,  (void *)0xE100000000000000LL,  93LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)( a1,  a2,  *(void *)(a3 - 8),  *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.CollectionContainsCollection<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  v7._uint64_t countAndFlagsBits = 0x6E6961746E6F632ELL;
  v7._object = (void *)0xEA00000000002873LL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 41LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  return v11;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.CollectionContainsCollection<>.debugString(state:)( a1,  a2,  *(void *)(a3 - 8),  *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.ConditionalCast<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ConditionalCast<>.debugString(state:)( a1,  a2,  a3,  0x203F736120LL,  (void *)0xE500000000000000LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.ConditionalCast<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ConditionalCast<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.ForceCast<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ConditionalCast<>.debugString(state:)( a1,  a2,  a3,  0x2021736120LL,  (void *)0xE500000000000000LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.ForceCast<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ForceCast<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.TypeCheck<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ConditionalCast<>.debugString(state:)( a1,  a2,  a3,  544434464LL,  (void *)0xE400000000000000LL);
}

uint64_t PredicateExpressions.ConditionalCast<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v7._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = a4;
  v8._object = a5;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 41LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  return 40LL;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.TypeCheck<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.TypeCheck<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.ForcedUnwrap<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.debugString(state:)(a1, a2, a3, 33LL, (void *)0xE100000000000000LL);
}

uint64_t PredicateExpressions.SequenceMinimum<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  v7._uint64_t countAndFlagsBits = a4;
  v7._object = a5;
  String.append(_:)(v7);
  return v9;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.ForcedUnwrap<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ForcedUnwrap<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.OptionalFlatMap<>.debugString(state:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v79 = *(int *)(a2 + 72);
  Swift::UInt v10 = *(void *)(v4 + v79);
  *(void *)&__int128 v83 = 0x656C626169726176LL;
  *((void *)&v83 + 1) = 0xE800000000000000LL;
  v82[0] = a1[1];
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  __int128 v81 = v83;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&__int128 v83 = *a1;
  uint64_t v13 = v83;
  *a1 = 0x8000000000000000LL;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }

  char v5 = v14;
  if (*(void *)(v13 + 24) >= v18)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v19 = v13;
      uint64_t v22 = *((void *)&v81 + 1);
      uint64_t v23 = v81;
      if ((v14 & 1) == 0)
      {
LABEL_45:
        *(void *)(v19 + 8 * (v15 >> 6) + 64) |= 1LL << v15;
        *(void *)(*(void *)(v19 + 48) + 8 * v15) = v10;
        uint64_t v45 = (void *)(*(void *)(v19 + 56) + 16 * v15);
        *uint64_t v45 = v23;
        v45[1] = v22;
        uint64_t v46 = *(void *)(v19 + 16);
        BOOL v47 = __OFADD__(v46, 1LL);
        uint64_t v48 = v46 + 1;
        if (v47)
        {
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }

        *(void *)(v19 + 16) = v48;
LABEL_47:
        *a1 = v19;
        swift_bridgeObjectRelease();
        uint64_t v49 = a1[1];
        BOOL v47 = __OFADD__(v49, 1LL);
        uint64_t v50 = v49 + 1;
        if (v47)
        {
          __break(1u);
        }

        else
        {
          a1[1] = v50;
          *(void *)&__int128 v83 = 0LL;
          *((void *)&v83 + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(28LL);
          uint64_t v51 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(a3 + 16))(a1, *(void *)(a2 + 16), a3);
          uint64_t v53 = v52;
          swift_bridgeObjectRelease();
          uint64_t v86 = v51;
          uint64_t v87 = v53;
          v54._uint64_t countAndFlagsBits = 0x70614D74616C662ELL;
          v54._object = (void *)0xEB00000000207B28LL;
          String.append(_:)(v54);
          uint64_t v55 = a1[2];
          uint64_t v56 = a1[3];
          Swift::UInt v57 = *(void *)(v6 + v79);
          __int128 v83 = *(_OWORD *)a1;
          uint64_t v84 = v55;
          uint64_t v85 = v56;
          v82[0] = v57;
          v58._uint64_t countAndFlagsBits = DebugStringConversionState.subscript.getter(v82);
          String.append(_:)(v58);
          swift_bridgeObjectRelease();
          v59._uint64_t countAndFlagsBits = 0x202020200A6E6920LL;
          v59._object = (void *)0xE800000000000000LL;
          String.append(_:)(v59);
          uint64_t v60 = (*(uint64_t (**)(uint64_t *, void))(a4 + 16))(a1, *(void *)(a2 + 32));
          uint64_t v62 = HIBYTE(v61) & 0xF;
          if ((v61 & 0x2000000000000000LL) == 0) {
            uint64_t v62 = v60;
          }
          uint64_t v63 = 7LL;
          if (((v61 >> 60) & ((v60 & 0x800000000000000LL) == 0)) != 0) {
            uint64_t v63 = 11LL;
          }
          unint64_t v64 = v63 | (v62 << 16);
          if ((specialized Sequence<>.starts<A>(with:)() & 1) != 0) {
            unint64_t v65 = String.index(after:)();
          }
          else {
            unint64_t v65 = 15LL;
          }
          v66._uint64_t countAndFlagsBits = 41LL;
          v66._object = (void *)0xE100000000000000LL;
          if (String.hasSuffix(_:)(v66)) {
            unint64_t v64 = String.index(before:)();
          }
          if (v64 >> 14 >= v65 >> 14)
          {
            v82[0] = String.subscript.getter();
            v82[1] = v67;
            v82[2] = v68;
            v82[3] = v69;
            lazy protocol witness table accessor for type Substring and conformance Substring();
            lazy protocol witness table accessor for type String and conformance String();
            RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
            swift_bridgeObjectRelease();
            uint64_t v70 = MEMORY[0x186E1B610](v83, *((void *)&v83 + 1), v84, v85);
            uint64_t v72 = v71;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v73._uint64_t countAndFlagsBits = v70;
            v73._object = v72;
            String.append(_:)(v73);
            swift_bridgeObjectRelease();
            v74._uint64_t countAndFlagsBits = 2718986LL;
            v74._object = (void *)0xE300000000000000LL;
            String.append(_:)(v74);
            return v86;
          }
        }

        __break(1u);
        goto LABEL_61;
      }

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.OptionalFlatMap<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)( a1,  a2,  a3,  a4,  91LL,  (void *)0xE100000000000000LL,  93LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.DictionaryKeySubscript<A, B, C>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)( a1,  a2,  *(void *)(a3 - 8),  *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.debugString(state:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a3 + 16))(a1, a2[2], a3);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 91LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, a2[3], a4);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0x6C7561666564202CLL;
  v13._object = (void *)0xEB00000000203A74LL;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a5 + 16))(a1, a2[4], a5);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 93LL;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  return v10;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>( uint64_t a1, void *a2, uint64_t a3)
{
  return PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.debugString(state:)( a1,  a2,  *(void *)(a3 - 8),  *(void *)(a3 - 16),  *(void *)(a3 - 24));
}

uint64_t PredicateExpressions.FloatDivision<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 2109216LL, (void *)0xE300000000000000LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.IntDivision<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.FloatDivision<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.IntRemainder<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 2106656LL, (void *)0xE300000000000000LL);
}

uint64_t PredicateExpressions.Equal<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  v11._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = a5;
  v12._object = a6;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 41LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  return 40LL;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.IntRemainder<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.IntRemainder<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Negation<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.UnaryMinus<>.debugString(state:)(a1, a2, a3, 33LL);
}

uint64_t PredicateExpressions.UnaryMinus<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return a4;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Negation<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Negation<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.NilCoalesce<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Conjunction<>.debugString(state:)(a1, a2, a3, a4, 541015840LL);
}

uint64_t PredicateExpressions.Conjunction<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = a5;
  v10._object = (void *)0xE400000000000000LL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 41LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  return 40LL;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.NilCoalesce<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.NilCoalesce<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.NilLiteral.debugString(state:)()
{
  return 7104878LL;
}

uint64_t PredicateExpressions.RangeExpressionContains<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)( a1,  a2,  a3,  a4,  0x6E6961746E6F632ELL,  (void *)0xEA00000000002873LL,  41LL);
}

uint64_t PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  v13._uint64_t countAndFlagsBits = a5;
  v13._object = a6;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = a7;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  return v17;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.RangeExpressionContains<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.RangeExpressionContains<>.debugString(state:)( a1,  a2,  *(void *)(a3 - 8),  *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceContains<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)( a1,  a2,  a3,  a4,  0x6E6961746E6F632ELL,  (void *)0xEA00000000002873LL,  41LL);
}

uint64_t PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  v13._uint64_t countAndFlagsBits = a5;
  v13._object = a6;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = a7;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  return v17;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceContains<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceContains<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceStartsWith<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a3 + 16))(a1, *(void *)(a2 + 16), a3);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x287374726174732ELL;
  v9._object = (void *)0xEE00203A68746977LL;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 41LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  return v8;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceStartsWith<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceStartsWith<>.debugString(state:)( a1,  a2,  *(void *)(a3 - 8),  *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceContainsWhere<>.debugString(state:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceContainsWhere<>.debugString(state:)( a1,  a2,  a3,  a4,  36LL,  0xD000000000000013LL,  (void *)0x80000001839C8A80LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceContainsWhere<A, B>( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceContainsWhere<>.debugString(state:)( a1,  a2,  *(void *)(a3 - 8),  *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceAllSatisfy<>.debugString(state:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceContainsWhere<>.debugString(state:)( a1,  a2,  a3,  a4,  31LL,  0x697461536C6C612ELL,  (void *)0xEE00207B28796673LL);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceAllSatisfy<A, B>( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceAllSatisfy<>.debugString(state:)( a1,  a2,  *(void *)(a3 - 8),  *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Filter<>.debugString(state:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceContainsWhere<>.debugString(state:)( a1,  a2,  a3,  a4,  27LL,  0x287265746C69662ELL,  (void *)0xEA0000000000207BLL);
}

uint64_t PredicateExpressions.SequenceContainsWhere<>.debugString(state:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6, void *a7)
{
  v79._uint64_t countAndFlagsBits = a6;
  v79._object = a7;
  uint64_t v9 = v7;
  uint64_t v78 = *(int *)(a2 + 64);
  Swift::UInt v13 = *(void *)(v7 + v78);
  *(void *)&__int128 v83 = 0x656C626169726176LL;
  *((void *)&v83 + 1) = 0xE800000000000000LL;
  v82[0] = a1[1];
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  __int128 v81 = v83;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&__int128 v83 = *a1;
  uint64_t v16 = v83;
  *a1 = 0x8000000000000000LL;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_10;
  }

  char v8 = v17;
  if (*(void *)(v16 + 24) >= v21)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v22 = v16;
      if ((v17 & 1) == 0)
      {
LABEL_43:
        *(void *)(v22 + 8 * (v18 >> 6) + 64) |= 1LL << v18;
        *(void *)(*(void *)(v22 + 48) + 8 * v1_Block_object_dispose((const void *)(v1 - 96), 8) = v13;
        *(_OWORD *)(*(void *)(v22 + 56) + 16 * v1_Block_object_dispose((const void *)(v1 - 96), 8) = v81;
        uint64_t v45 = *(void *)(v22 + 16);
        BOOL v46 = __OFADD__(v45, 1LL);
        uint64_t v47 = v45 + 1;
        if (v46)
        {
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }

        *(void *)(v22 + 16) = v47;
LABEL_45:
        *a1 = v22;
        swift_bridgeObjectRelease();
        uint64_t v48 = a1[1];
        BOOL v46 = __OFADD__(v48, 1LL);
        uint64_t v49 = v48 + 1;
        if (v46)
        {
          __break(1u);
        }

        else
        {
          a1[1] = v49;
          *(void *)&__int128 v83 = 0LL;
          *((void *)&v83 + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(a5);
          uint64_t v50 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(a3 + 16))(a1, *(void *)(a2 + 16), a3);
          uint64_t v52 = v51;
          swift_bridgeObjectRelease();
          uint64_t v86 = v50;
          uint64_t v87 = v52;
          String.append(_:)(v79);
          uint64_t v53 = a1[2];
          uint64_t v54 = a1[3];
          Swift::UInt v55 = *(void *)(v9 + v78);
          __int128 v83 = *(_OWORD *)a1;
          uint64_t v84 = v53;
          uint64_t v85 = v54;
          v82[0] = v55;
          v56._uint64_t countAndFlagsBits = DebugStringConversionState.subscript.getter(v82);
          String.append(_:)(v56);
          swift_bridgeObjectRelease();
          v57._uint64_t countAndFlagsBits = 0x202020200A6E6920LL;
          v57._object = (void *)0xE800000000000000LL;
          String.append(_:)(v57);
          uint64_t v58 = (*(uint64_t (**)(uint64_t *, void))(a4 + 16))(a1, *(void *)(a2 + 24));
          uint64_t v60 = HIBYTE(v59) & 0xF;
          if ((v59 & 0x2000000000000000LL) == 0) {
            uint64_t v60 = v58;
          }
          uint64_t v61 = 7LL;
          if (((v59 >> 60) & ((v58 & 0x800000000000000LL) == 0)) != 0) {
            uint64_t v61 = 11LL;
          }
          unint64_t v62 = v61 | (v60 << 16);
          if ((specialized Sequence<>.starts<A>(with:)() & 1) != 0) {
            unint64_t v63 = String.index(after:)();
          }
          else {
            unint64_t v63 = 15LL;
          }
          v64._uint64_t countAndFlagsBits = 41LL;
          v64._object = (void *)0xE100000000000000LL;
          if (String.hasSuffix(_:)(v64)) {
            unint64_t v62 = String.index(before:)();
          }
          if (v62 >> 14 >= v63 >> 14)
          {
            v82[0] = String.subscript.getter();
            v82[1] = v65;
            v82[2] = v66;
            v82[3] = v67;
            lazy protocol witness table accessor for type Substring and conformance Substring();
            lazy protocol witness table accessor for type String and conformance String();
            RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
            swift_bridgeObjectRelease();
            uint64_t v68 = MEMORY[0x186E1B610](v83, *((void *)&v83 + 1), v84, v85);
            uint64_t v70 = v69;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v71._uint64_t countAndFlagsBits = v68;
            v71._object = v70;
            String.append(_:)(v71);
            swift_bridgeObjectRelease();
            v72._uint64_t countAndFlagsBits = 2718986LL;
            v72._object = (void *)0xE300000000000000LL;
            String.append(_:)(v72);
            return v86;
          }
        }

        __break(1u);
        goto LABEL_59;
      }

LABEL_62:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  BOOL v46 = 0LL;
LABEL_63:

  uint64_t v51 = v73;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v82, v51);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v52 = v74;
  if (!v74)
  {
    Hasher._combine(_:)(0);
    if (v75) {
      goto LABEL_68;
    }
LABEL_70:
    Hasher._combine(_:)(0);
    goto LABEL_71;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v82, v52);
  swift_bridgeObjectRelease();
  if (!v75) {
    goto LABEL_70;
  }
LABEL_68:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_71:
  if (v76 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v53 = v76 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }

  if (v77 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v54 = v77 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }

  if (v78 == 2)
  {
    Swift::UInt v55 = 0;
  }

  else
  {
    Swift::UInt v55 = v78 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v55);
  if (v79 == 2)
  {
    Swift::String v56 = 0;
  }

  else
  {
    Swift::String v57 = v79 & 1;
    Hasher._combine(_:)(1u);
    Swift::String v56 = v57;
  }

  Hasher._combine(_:)(v56);
  outlined retain of LocalePreferences?( (uint64_t)v80,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v80,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_84:
  uint64_t v58 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v58);
}

  Hasher._combine(_:)(0);
  uint64_t v47 = 0LL;
LABEL_63:

  uint64_t v52 = v75;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v84, v52);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  a2 = v61;
  uint64_t v53 = v76;
  if (!v76)
  {
    Hasher._combine(_:)(0);
    if (v77) {
      goto LABEL_68;
    }
LABEL_70:
    Hasher._combine(_:)(0);
    goto LABEL_71;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v84, v53);
  swift_bridgeObjectRelease();
  if (!v77) {
    goto LABEL_70;
  }
LABEL_68:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_71:
  if (v78 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v54 = v78 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }

  if (v79 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v55 = v79 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v55);
  }

  if (v80 == 2)
  {
    Swift::String v56 = 0;
  }

  else
  {
    Swift::String v56 = v80 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v56);
  if (v81 == 2)
  {
    Swift::String v57 = 0;
  }

  else
  {
    uint64_t v58 = v81 & 1;
    Hasher._combine(_:)(1u);
    Swift::String v57 = v58;
  }

  Hasher._combine(_:)(v57);
  outlined retain of LocalePreferences?( (uint64_t)v82,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v82,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_84:
  unint64_t v59 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v59, a2);
}

    __break(1u);
    goto LABEL_63;
  }

      v154[0] = v64;
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v85 = String.init<A>(_:radix:uppercase:)();
      uint64_t v87 = v105;
      goto LABEL_63;
    }

  Hasher._combine(_:)(0);
  if (!v40) {
    goto LABEL_63;
  }
LABEL_58:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v50 = v40;
  _CFObject.hash(into:)();

  if (v42)
  {
LABEL_59:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v51 = v42;
    _CFObject.hash(into:)();

    goto LABEL_65;
  }

      outlined retain of LocalePreferences?( (uint64_t)v106,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      goto LABEL_60;
    }

    if (!v80)
    {
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)&v66);
      outlined retain of LocalePreferences(&v66);
      goto LABEL_64;
    }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

    swift_unknownObjectRetain();
    Swift::String v79 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v62, v80, v58, v60, v61);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_81;
  }

  Swift::UInt v65 = *(unsigned __int8 *)(v60 + 18);
  if (!*(_BYTE *)(v60 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    char v5 = v471;
    uint64_t v58 = v60;
LABEL_64:
    uint64_t v85 = *(unsigned __int16 *)(v58 + 16);
    if (!*(_WORD *)(v58 + 16)) {
      goto LABEL_605;
    }
    uint64_t v86 = *(void *)(v58 + 24);
    Swift::String v71 = __OFSUB__(v5, v86);
    uint64_t v87 = v5 - v86;
    if (v71) {
      goto LABEL_585;
    }
    if (v87 <= 0)
    {
      uint64_t v90 = 0LL;
    }

    else
    {
      if ((_DWORD)v85 == 1) {
        goto LABEL_607;
      }
      uint64_t v88 = *(void *)(v58 + 48);
      char v5 = v87 - v88;
      if (__OFSUB__(v87, v88)) {
        goto LABEL_586;
      }
      if (v5 >= 1)
      {
        if ((_DWORD)v85 == 2) {
          goto LABEL_607;
        }
        uint64_t v89 = (void *)(v58 + 72);
        uint64_t v90 = 2LL;
        while (v85 != v90)
        {
          uint64_t v91 = v5 - *v89;
          if (__OFSUB__(v5, *v89)) {
            goto LABEL_534;
          }
          if (v91 < 1) {
            goto LABEL_79;
          }
          ++v90;
          v89 += 3;
          char v5 = v91;
          if (v85 == v90) {
            goto LABEL_607;
          }
        }

        __break(1u);
LABEL_534:
        __break(1u);
LABEL_535:
        __break(1u);
LABEL_536:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
LABEL_537:
        outlined destroy of Any?( (uint64_t)&v508,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?( (uint64_t)v517,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v518,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_538:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
        goto LABEL_539;
      }

      char v5 = v87;
      uint64_t v90 = 1LL;
    }

  uint64_t v34 = a1;
  NSDecimal.copyVariableLengthInteger(_:)(v45);
  if (v66)
  {
    unint64_t v32 = v66;
    swift_bridgeObjectRelease();
LABEL_17:
    v96[0] = v32;
    uint64_t v35 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) != 0) {
      uint64_t v36 = qword_1837AAA70[(char)v87];
    }
    else {
      uint64_t v36 = 0LL;
    }
    *(_OWORD *)((char *)v96 + 4) = 0uLL;
    _So9NSDecimala__exponent_setter(0LL, v96);
    _So9NSDecimala__length_setter(0LL, v96);
    _So9NSDecimala__isNegative_setter(1LL, v96);
    _So9NSDecimala__isCompact_setter(v96);
    _So9NSDecimala__reserved_setter(v96);
    int64_t v37 = *(_OWORD *)((char *)v96 + 4);
    *(_DWORD *)uint64_t v34 = v96[0];
    *(_OWORD *)(v34 + 4) = v37;

    return v36;
  }

  Swift::UInt v67 = *((void *)v45._rawValue + 2);
  swift_bridgeObjectRelease();
  if (!HIDWORD(v67))
  {
    _So9NSDecimala__length_setter(v67, v96);
    _So9NSDecimala__isCompact_setter(v96);
    if ((int)v44 >= 128)
    {
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      unint64_t v32 = (void *)swift_allocError();
      *uint64_t v68 = 0;
      swift_willThrow();
      goto LABEL_17;
    }

    _So9NSDecimala__exponent_setter(v44, v96);
    NSDecimal.compact()();
    uint64_t v38 = v96[0];
    unint64_t v23 = *(_OWORD *)((char *)v96 + 4);
LABEL_26:
    uint64_t v36 = 0LL;
    *(_DWORD *)uint64_t v34 = v38;
    *(_OWORD *)(v34 + 4) = v23;
    return v36;
  }

            outlined destroy of Any?( (uint64_t)v213,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?( (uint64_t)v214,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v182);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v187);
            outlined destroy of Any?( (uint64_t)&v188,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v194,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = (unint64_t *)outlined destroy of Any?( (uint64_t)&v199,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v67 & 1) == 0) {
              goto LABEL_94;
            }
LABEL_63:
            v66 += 2;
            ++v65;
            uint64_t v61 = v181;
            if (v68 == v17)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
              uint64_t v38 = v151;
              uint64_t v19 = v150;
              uint64_t v45 = v167;
              if (v149[0] < v174) {
                goto LABEL_38;
              }
              uint64_t v19 = v150;
              goto LABEL_91;
            }
          }
        }

  unint64_t v26 = 0LL;
  unint64_t v27 = v10 - v12;
  if (__OFSUB__(v10, v12)) {
    goto LABEL_64;
  }
LABEL_31:
  v113[0] = v80;
  v113[1] = v24;
  v113[2] = v15;
  v113[3] = v26;
  v113[4] = v27;
  int64_t v28 = *(_OWORD *)(v8 + 32);
  v114 = *(_OWORD *)(v8 + 16);
  v115 = v28;
  v116 = *(_OWORD *)(v8 + 48);
  uint64_t result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(0LL, v12))
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }

  uint64_t v29 = BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)v104);
  uint64_t v30 = *(_OWORD *)(v7 + 11);
  __int128 v92 = *(_OWORD *)(v7 + 9);
  uint64_t v93 = v30;
  unint64_t v31 = *(_OWORD *)(v7 + 15);
  unint64_t v94 = *(_OWORD *)(v7 + 13);
  char v95 = v31;
  unint64_t v32 = *(_OWORD *)(v7 + 3);
  uint64_t v88 = *(_OWORD *)(v7 + 1);
  uint64_t v89 = v32;
  unint64_t v33 = *(_OWORD *)(v7 + 7);
  uint64_t v90 = *(_OWORD *)(v7 + 5);
  uint64_t v87 = v8;
  uint64_t v91 = v33;
  __int128 v96 = v76;
  uint64_t v97 = v75;
  uint64_t v98 = v74;
  uint64_t v99 = v73;
  char v100 = v86;
  uint64_t v101 = v83;
  v102 = v82;
  v103 = v81;
  uint64_t result = (unint64_t *)AttributedString.Runs._lastOfMatchingRuns(with:comparing:)(v113, a2, &v105);
  uint64_t v34 = *(void *)(v8 + 64);
  uint64_t v35 = *(void *)(v8 + 88);
  v109 = v105;
  v110 = v106;
  if ((void)v105 != v35)
  {
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }

  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)&v110, (uint64_t)v111);
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)v111, (uint64_t)&v117);
  if (v117)
  {
    uint64_t v36 = *(void *)(v117 + 24 * ((*((void *)&v109 + 1) >> ((4 * *(_BYTE *)(v117 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    int64_t v37 = *((void *)&v109 + 1);
    swift_unknownObjectRetain();
    uint64_t v36 = specialized Rope._Node.subscript.getter(v37, v34);
    swift_unknownObjectRelease();
  }

  uint64_t v38 = v107;
  swift_bridgeObjectRelease();
  uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
  if (__OFADD__(v38, v36)) {
    goto LABEL_76;
  }
  uint64_t v40 = *(_OWORD *)(v8 + 16);
  int64_t v41 = *(_OWORD *)(v8 + 32);
  uint64_t v39 = (__int128 *)(v8 + 16);
  v112[3] = v40;
  v112[4] = v41;
  v112[5] = v39[2];
  uint64_t result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v38 + v36, v29 >> 11))
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }

  unint64_t v42 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v44 = v43;
  BOOL v46 = v45;
  uint64_t v48 = v47;
  uint64_t result = (unint64_t *)outlined release of Locale((uint64_t)v108);
  uint64_t v49 = v86;
  if (v71 >= v42 >> 10) {
    uint64_t v49 = v42;
  }
  uint64_t v50 = *v39;
  uint64_t v51 = v39[2];
  v112[1] = v39[1];
  v112[2] = v51;
  v112[0] = v50;
  if (v72 > v49 >> 10) {
    goto LABEL_78;
  }
  uint64_t v52 = v81;
  uint64_t v53 = v82;
  if (v71 >= v42 >> 10)
  {
    uint64_t v52 = v48;
    uint64_t v53 = v46;
  }

  uint64_t v87 = v78;
  *(void *)&uint64_t v88 = v79;
  uint64_t v54 = v83;
  if (v71 >= v42 >> 10) {
    uint64_t v54 = v44;
  }
  *((void *)&v88 + 1) = v85;
  *(void *)&uint64_t v89 = v84;
  *((void *)&v89 + 1) = v49;
  *(void *)&uint64_t v90 = v54;
  *((void *)&v90 + 1) = v53;
  *(void *)&uint64_t v91 = v52;
  Swift::UInt v55 = *v39;
  Swift::String v56 = v39[2];
  v118[1] = v39[1];
  v118[2] = v56;
  v118[0] = v55;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v118, (uint64_t)v119);
  outlined retain of Locale((uint64_t)v119);
  Swift::String v57 = BigString._firstConstraintBreak(in:with:)(&v87, a3);
  unint64_t v59 = v58;
  uint64_t v61 = v60;
  unint64_t v63 = v62;
  uint64_t result = (unint64_t *)outlined release of Locale((uint64_t)v112);
  *a4 = v57;
  a4[1] = v59;
  a4[2] = v61;
  a4[3] = v63;
  return result;
}

  if (!v28) {
    goto LABEL_63;
  }
LABEL_105:
  __break(1u);
  return result;
}

            uint64_t v36 = MEMORY[0x186E1B0E8]();
            LODWORD(v13) = v36;
            if ((v12 & 1) == 0)
            {
              uint64_t v35 = 4LL;
              switch(v36)
              {
                case 1:
                case 13:
                  uint64_t v35 = 513LL;
                  goto LABEL_182;
                case 2:
                  goto LABEL_182;
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 14:
                case 15:
                case 16:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 29:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                  goto LABEL_148;
                case 17:
                  uint64_t v35 = 516LL;
                  goto LABEL_182;
                case 28:
                case 69:
                  uint64_t v35 = 640LL;
                  goto LABEL_182;
                case 30:
                  uint64_t v35 = 642LL;
                  goto LABEL_182;
                case 63:
                  uint64_t v35 = 514LL;
                  goto LABEL_182;
                default:
                  if (v36 == 102)
                  {
LABEL_146:
                    Swift::UInt v13 = 0LL;
                    uint64_t v35 = 512LL;
                  }

                  else
                  {
LABEL_148:
                    uint64_t v35 = 512LL;
LABEL_182:
                    uint64_t v34 = (id)v10;
                    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
                      goto LABEL_212;
                    }
                    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                    v153 = (int)POSIXErrorCode.rawValue.getter();
                    v154 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
                    v155 = String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    Swift::UInt v13 = (char *)objc_msgSend( v154,  sel_initWithDomain_code_userInfo_,  v155,  v153,  _NativeDictionary.bridged()());
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    v156 = objc_msgSend(v13, sel_domain);
                    v157 = static String._unconditionallyBridgeFromObjectiveC(_:)(v156);
                    v159 = v158;

                    if (v157 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                      && v159 == v160)
                    {
LABEL_185:
                      swift_bridgeObjectRelease_n();
                      Swift::String v10 = (int64_t)v34;
                    }

                    else
                    {
                      v161 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      Swift::String v10 = (int64_t)v34;
                      if ((v161 & 1) == 0) {
                        goto LABEL_208;
                      }
                    }
                  }

  Hasher._combine(_:)(0);
  if (!v40) {
    goto LABEL_63;
  }
LABEL_58:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v50 = v40;
  _CFObject.hash(into:)();

  if (v42)
  {
LABEL_59:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v51 = v42;
    _CFObject.hash(into:)();

    goto LABEL_65;
  }

              uint64_t v50 = (v56 - 1) & v56;
              uint64_t v52 = __clz(__rbit64(v56)) + (v47 << 6);
            }

            uint64_t v53 = 8 * v52;
            uint64_t v54 = *(void **)(*(void *)(v4 + 56) + v53);
            *(void *)(*(void *)(v25 + 48) + v53) = *(void *)(*(void *)(v4 + 48) + v53);
            *(void *)(*(void *)(v25 + 56) + v53) = v54;
            uint64_t result = v54;
          }
        }

    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

    uint64_t v90 = *(void *)(v7 - 376);
    uint64_t v91 = swift_getAssociatedConformanceWitness();
    MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v90, v91);
    __int128 v92 = *(void *)(v7 - 336);
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    uint64_t v93 = *(void *)(v7 - 344);
    unint64_t v94 = dispatch thunk of static Comparable.< infix(_:_:)();
    char v95 = v92;
    char v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
    v8(v95, v1);
    uint64_t v9 = *(void *)(v7 - 392);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 280))(v9, v93, v1);
    if ((v94 & 1) != 0) {
      goto LABEL_71;
    }
    __int128 v96 = *(void *)(v7 - 96);
    uint64_t v39 = dispatch thunk of BinaryInteger._lowWord.getter();
    v8(v9, v1);
    uint64_t v97 = v39 < v96;
    unint64_t v31 = *(void *)(v7 - 224);
    if (!v97) {
      goto LABEL_8;
    }
LABEL_54:
    __break(1u);
  }

  uint64_t v9 = dispatch thunk of BinaryInteger._lowWord.getter();
  v8(v34, v1);
  if (v9 < v39) {
    goto LABEL_70;
  }
  specialized Data._Representation.withUnsafeBytes<A>(_:)(*(void *)(v7 - 328), *(void *)(v7 - 320));
  (*(void (**)(uint64_t, void))(v7 - 240))(v29, *(void *)(v7 - 144));
  v8(*(void *)(v7 - 160), v1);
  return ((uint64_t (*)(void, uint64_t))v8)(*(void *)(v7 - 136), v1);
}

                uint64_t v52 = (v61 - 1) & v61;
                uint64_t v54 = __clz(__rbit64(v61)) + (v39 << 6);
              }

              Swift::UInt v55 = 16 * v54;
              Swift::String v56 = (uint64_t *)(*(void *)(v7 + 48) + v55);
              uint64_t v58 = *v56;
              Swift::String v57 = v56[1];
              unint64_t v59 = *(_OWORD *)(*(void *)(v7 + 56) + v55);
              uint64_t v60 = (void *)(v191[6] + v55);
              *uint64_t v60 = v58;
              v60[1] = v57;
              *(_OWORD *)(v191[7] + v55) = v59;
              swift_bridgeObjectRetain();
            }
          }

                uint64_t v52 = (v61 - 1) & v61;
                uint64_t v54 = __clz(__rbit64(v61)) + (v39 << 6);
              }

              Swift::UInt v55 = 16 * v54;
              Swift::String v56 = (uint64_t *)(*(void *)(v7 + 48) + v55);
              uint64_t v58 = *v56;
              Swift::String v57 = v56[1];
              unint64_t v59 = *(_OWORD *)(*(void *)(v7 + 56) + v55);
              uint64_t v60 = (void *)(v191[6] + v55);
              *uint64_t v60 = v58;
              v60[1] = v57;
              *(_OWORD *)(v191[7] + v55) = v59;
              swift_bridgeObjectRetain();
            }
          }

  __break(1u);
  return result;
}

            Swift::String v11 = (v11 & 0xFFFFFFFFFFFF0000LL) + 65540;
            goto LABEL_63;
          }
        }

        if ((a3 & 0x1000000000000000LL) != 0) {
          goto LABEL_36;
        }
        goto LABEL_62;
      }

        unint64_t v59 = *(unsigned __int8 *)v16;
        if (v59 != 93) {
          goto LABEL_89;
        }
        return v16 + 1;
      default:
LABEL_90:
        Swift::UInt v67 = v8;
        uint64_t v68 = "unknown type descriptor";
        goto LABEL_92;
    }
  }

  else
  {
    switch(*a2)
    {
      case 'c':
LABEL_7:
        *(_BYTE *)a3 = _decodeCharAtCursor( *(void *)(*(void *)(a1 + 8) + 8LL),  *(void *)(*(void *)(a1 + 8) + 16LL),  (void *)(a1 + 16));
        return v7;
      case 'd':
        uint64_t v40 = *(void *)(a1 + 8);
        int64_t v41 = (void *)(a1 + 16);
        unint64_t v42 = *(unsigned __int8 *)(a1 + 41);
        int64_t v43 = _decodeCharAtCursor(*(void *)(v40 + 8), *(void *)(v40 + 16), (void *)(a1 + 16));
        if ((_DWORD)v43 == -125)
        {
          _deserializeBytes(sizep, *(void *)(v40 + 8), *(void *)(v40 + 16), v41, 8LL);
          uint64_t v44 = *(double *)sizep;
          uint64_t v45 = COERCE_DOUBLE(bswap64(sizep[0]));
          if (v42) {
            uint64_t v44 = v45;
          }
        }

        else
        {
          uint64_t v44 = (double)(int)_decodeIntStartingWithChar(v40, v43, v41, v42 != 0);
        }

        *(double *)a3 = v44;
        return v7;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_90;
      case 'f':
        BOOL v46 = *(void *)(a1 + 8);
        uint64_t v47 = (void *)(a1 + 16);
        uint64_t v48 = *(unsigned __int8 *)(a1 + 41);
        uint64_t v49 = _decodeCharAtCursor(*(void *)(v46 + 8), *(void *)(v46 + 16), (void *)(a1 + 16));
        if ((_DWORD)v49 == -125)
        {
          _deserializeBytes(sizep, *(void *)(v46 + 8), *(void *)(v46 + 16), v47, 4LL);
          uint64_t v50 = *(float *)sizep;
          uint64_t v51 = COERCE_FLOAT(bswap32(sizep[0]));
          if (v48) {
            uint64_t v50 = v51;
          }
        }

        else
        {
          uint64_t v50 = (float)(int)_decodeIntStartingWithChar(v46, v49, v47, v48 != 0);
        }

        *(float *)a3 = v50;
        return v7;
      case 'i':
      case 'l':
LABEL_24:
        uint64_t v19 = *(void *)(a1 + 8);
        BOOL v20 = (void *)(a1 + 16);
        uint64_t v21 = *(_BYTE *)(a1 + 41) != 0;
        uint64_t v22 = _decodeCharAtCursor(*(void *)(v19 + 8), *(void *)(v19 + 16), (void *)(a1 + 16));
        *(_DWORD *)a3 = _decodeIntStartingWithChar(v19, v22, v20, v21);
        return v7;
      case 'q':
        goto LABEL_25;
      case 's':
        goto LABEL_31;
      default:
        if (v6 != 123) {
          goto LABEL_90;
        }
        uint64_t v34 = skipAggregateName(a2 + 1);
        if (*v34 != 125)
        {
          uint64_t v35 = 0LL;
          do
          {
            NSGetSizeAndAlignment(v34, sizep, &alignp);
            uint64_t v36 = roundUp(v35, alignp);
            uint64_t v34 = (char *)_decodeValueOfObjCType(a1, v34, (char *)a3 + v36);
            uint64_t v35 = sizep[0] + v36;
          }

          while (*v34 != 125);
        }

        uint64_t v7 = v34 + 1;
        break;
    }
  }

  return v7;
}

  if (a8)
  {
    *(_BYTE *)a8 = v19;
    *(_BYTE *)(a8 + 1) = v25;
    *(void *)(a8 + _Block_object_dispose((const void *)(v1 - 96), 8) = v24;
    *(void *)(a8 + 16) = v10;
    *(void *)(a8 + 24) = v12;
    *(_DWORD *)(a8 + 32) = v13;
  }

  return v19 ^ 1u;
}

      CFRelease(cf);
      Swift::String v15 = 0LL;
      char v24 = 0LL;
      uint64_t v25 = v20;
      goto LABEL_41;
    }

    if (!objc_msgSend((id)objc_msgSend(a4, "pronouns"), "count")) {
      goto LABEL_89;
    }
    theArray = CFArrayCreateMutable( 0,  objc_msgSend((id)objc_msgSend(a4, "pronouns"), "count"),  &_DisplayValueArrayCallbacks);
    char v100 = 0u;
    uint64_t v101 = 0u;
    v102 = 0u;
    v103 = 0u;
    obunint64_t j = (void *)[a4 pronouns];
    int64_t v28 = [obj countByEnumeratingWithState:&v100 objects:v99 count:16];
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = *(void *)v101;
      do
      {
        unint64_t v31 = 0LL;
        do
        {
          if (*(void *)v101 != v30) {
            objc_enumerationMutation(obj);
          }
          unint64_t v32 = *(void **)(*((void *)&v100 + 1) + 8 * v31);
          unint64_t v33 = [v32 _morphunConstraints];
          cf = 0LL;
          uint64_t v34 = (const void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, CFTypeRef *))off_18C4968F8)( v86,  [v32 pronoun],  v33,  &cf);
          if (v34)
          {
            uint64_t v35 = v34;
            if (cf)
            {
              if (_NSInflectionLog_onceToken != -1) {
                dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
              }
              uint64_t v36 = (os_log_s *)_NSInflectionLog_log;
              if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v105 = (const char *)cf;
                _os_log_error_impl( &dword_182EB1000,  v36,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error in mdv_create: %@",  buf,  0xCu);
              }

              off_18C4968D0(v35);
            }

            else
            {
              CFArrayAppendValue(theArray, v34);
            }
          }

          ++v31;
        }

        while (v29 != v31);
        uint64_t v29 = [obj countByEnumeratingWithState:&v100 objects:v99 count:16];
      }

      while (v29);
    }

    cf = 0LL;
    __int128 v81 = off_18C496900(v86, theArray, 0LL, &cf);
    if (cf)
    {
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      int64_t v37 = (os_log_s *)_NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v105 = "mpron_createWithCustom(model, localizedPronouns, nil, &error)";
        v106 = 2112;
        v107 = cf;
        _os_log_error_impl( &dword_182EB1000,  v37,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
      }

      CFRelease(cf);
      goto LABEL_88;
    }

    if (!v81)
    {
LABEL_88:
      Swift::String v15 = 0LL;
      uint64_t v25 = v82;
      char v24 = theArray;
      uint64_t v22 = (void (**)(void))&metadata instantiation cache for protocol conformance descriptor for _TimeZoneICU;
      goto LABEL_41;
    }

    cf = 0LL;
    int64_t v77 = off_18C4968E0(v81, &cf);
    if (cf)
    {
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      uint64_t v49 = (os_log_s *)_NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v105 = "mpron_toSemanticFeatureConcept(localizedPronoun, &error)";
        v106 = 2112;
        v107 = cf;
        _os_log_error_impl( &dword_182EB1000,  v49,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
      }

      CFRelease(cf);
      goto LABEL_122;
    }

    if (!v77)
    {
LABEL_122:
      uint64_t v22 = (void (**)(void))&metadata instantiation cache for protocol conformance descriptor for _TimeZoneICU;
      off_18C496930(v82);
      Swift::String v15 = 0LL;
      uint64_t v25 = v81;
      char v24 = theArray;
      goto LABEL_41;
    }

    uint64_t v78 = objc_alloc_init(MEMORY[0x189603FC8]);
    char v95 = 0u;
    __int128 v96 = 0u;
    uint64_t v97 = 0u;
    uint64_t v98 = 0u;
    Swift::String v57 = [&unk_189D1CDE8 countByEnumeratingWithState:&v95 objects:v94 count:16];
    if (!v57) {
      goto LABEL_177;
    }
    unint64_t v59 = v57;
    obja = *(void *)v96;
    *(void *)&uint64_t v58 = 136315394LL;
    int64_t v76 = v58;
LABEL_149:
    uint64_t v60 = 0LL;
    while (1)
    {
      if (*(void *)v96 != obja) {
        objc_enumerationMutation(&unk_189D1CDE8);
      }
      uint64_t v61 = *(void *)(*((void *)&v95 + 1) + 8 * v60);
      cf = 0LL;
      unint64_t v62 = off_18C496908(v87, v61, &cf);
      if (cf)
      {
        if (_NSInflectionLog_onceToken != -1) {
          dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
        }
        unint64_t v63 = (os_log_s *)_NSInflectionLog_log;
        if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v76;
          v105 = "msfc_createFeatureValueByNameCopy(pronounSemanticFeatureConcept, (CFStringRef)grammeme, &error)";
          v106 = 2112;
          v107 = cf;
          _os_log_error_impl( &dword_182EB1000,  v63,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
        }

        CFRelease(cf);
        goto LABEL_175;
      }

      Swift::String v64 = v62;
      if (v62) {
        break;
      }
LABEL_175:
      if (v59 == ++v60)
      {
        unint64_t v59 = [&unk_189D1CDE8 countByEnumeratingWithState:&v95 objects:v94 count:16];
        if (!v59)
        {
LABEL_177:
          uint64_t v87 = v77;
          if (!a5) {
            goto LABEL_103;
          }
          goto LABEL_90;
        }

        goto LABEL_149;
      }
    }

    cf = 0LL;
    Swift::UInt v65 = off_18C496848(v62, &cf);
    if (cf)
    {
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      Swift::UInt v66 = (os_log_s *)_NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = v76;
        v105 = "mss_createPrintCopy(grammemeValue, &error)";
        v106 = 2112;
        v107 = cf;
        _os_log_error_impl( &dword_182EB1000,  v66,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
      }

      Swift::UInt v67 = cf;
    }

    else
    {
      uint64_t v68 = (const void *)v65;
      if (!v65)
      {
LABEL_174:
        off_18C496850(v64);
        goto LABEL_175;
      }

      [v78 setObject:v65 forKeyedSubscript:v61];
      cf = 0LL;
      off_18C4968E8(v77, v61, v68, &cf);
      if (cf)
      {
        if (_NSInflectionLog_onceToken != -1) {
          dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
        }
        Swift::UInt v69 = (os_log_s *)_NSInflectionLog_log;
        if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v76;
          v105 = "msfc_putConstraintByName(localizedSemanticFeatureConcept, (__bridge CFStringRef)grammeme, grammemeValueString, &error)";
          v106 = 2112;
          v107 = cf;
          _os_log_error_impl( &dword_182EB1000,  v69,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
        }

        CFRelease(cf);
      }

      Swift::UInt v67 = v68;
    }

    CFRelease(v67);
    goto LABEL_174;
  }

  return result;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Filter<A, B>( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Filter<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.StringContainsRegex<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v11 = v5(a1, v6);
  v7._uint64_t countAndFlagsBits = 0x6E6961746E6F632ELL;
  v7._object = (void *)0xEA00000000002873LL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(a1, v6, a3);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 41LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  return v11;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.StringContainsRegex<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.StringContainsRegex<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.ExpressionEvaluate<>.debugString(state:)( uint64_t TupleTypeMetadata, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = a3;
  uint64_t v58 = TupleTypeMetadata;
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 == 1)
  {
    uint64_t v8 = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](TupleTypeMetadata);
    Swift::String v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v7)
    {
      unint64_t v11 = 0LL;
      unint64_t v12 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4) {
        goto LABEL_9;
      }
      unint64_t v11 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      Swift::UInt v13 = (__int128 *)(v12 + 16);
      Swift::String v14 = v10 + 16;
      unint64_t v15 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *Swift::String v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4LL;
      }

      while (v15);
      if (v7 != v11)
      {
LABEL_9:
        unint64_t v17 = v7 - v11;
        uint64_t v18 = 8 * v11;
        uint64_t v19 = &v10[8 * v11];
        BOOL v20 = (uint64_t *)(v12 + v18);
        do
        {
          uint64_t v21 = *v20++;
          *(void *)uint64_t v19 = v21;
          v19 += 8;
          --v17;
        }

        while (v17);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v8 = TupleTypeMetadata;
  }

  MEMORY[0x1895F8858](TupleTypeMetadata);
  unint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = v4;
  uint64_t v51 = v24;
  uint64_t v25 = *(uint64_t (**)(void))(v24 + 16);
  Swift::String v57 = v23;
  uint64_t isUniquelyReferenced_nonNull_native = v25();
  uint64_t v52 = v8;
  uint64_t v53 = a2;
  if (v7)
  {
    unint64_t v27 = (uint64_t *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    int64_t v28 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v29 = v8 + 32;
    uint64_t v30 = (void *)MEMORY[0x18961AFE8];
    unint64_t v31 = v7;
    unint64_t v56 = v7;
    do
    {
      uint64_t v32 = *v27;
      uint64_t v33 = *v28;
      uint64_t v34 = *(void *)(*v27 - 8);
      MEMORY[0x1895F8858](isUniquelyReferenced_nonNull_native);
      uint64_t v36 = (char *)&v51 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v34 + 16))(v36);
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v58, v32, v33);
      uint64_t v38 = v37;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v32);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v30[2] + 1LL,  1,  v30);
        uint64_t v30 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v40 = v30[2];
      unint64_t v39 = v30[3];
      if (v40 >= v39 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v39 > 1),  v40 + 1,  1,  v30);
        uint64_t v30 = (void *)isUniquelyReferenced_nonNull_native;
      }

      void v30[2] = v40 + 1;
      int64_t v41 = &v30[2 * v40];
      v41[4] = v59;
      v41[5] = v38;
      v29 += 16LL;
      ++v28;
      ++v27;
      --v31;
    }

    while (v31);
  }

  else
  {
    uint64_t v30 = (void *)MEMORY[0x18961AFE8];
  }

  uint64_t v61 = (*(uint64_t (**)(uint64_t, void))(v55 + 16))(v58, *(void *)(v53 + 24));
  uint64_t v62 = v42;
  v43._uint64_t countAndFlagsBits = 0x7461756C6176652ELL;
  v43._object = (void *)0xEA00000000002865LL;
  String.append(_:)(v43);
  uint64_t v60 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
  uint64_t v44 = BidirectionalCollection<>.joined(separator:)();
  BOOL v46 = v45;
  swift_bridgeObjectRelease();
  v47._uint64_t countAndFlagsBits = v44;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 41LL;
  v48._object = (void *)0xE100000000000000LL;
  String.append(_:)(v48);
  uint64_t v49 = v61;
  (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v52);
  return v49;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ExpressionEvaluate<>.debugString(state:)( a1,  a2,  *(void *)(a3 - 8),  *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.PredicateEvaluate<>.debugString(state:)( uint64_t TupleTypeMetadata, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = a3;
  uint64_t v58 = TupleTypeMetadata;
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 == 1)
  {
    uint64_t v8 = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](TupleTypeMetadata);
    Swift::String v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v7)
    {
      unint64_t v11 = 0LL;
      unint64_t v12 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4) {
        goto LABEL_9;
      }
      unint64_t v11 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      Swift::UInt v13 = (__int128 *)(v12 + 16);
      Swift::String v14 = v10 + 16;
      unint64_t v15 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *Swift::String v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4LL;
      }

      while (v15);
      if (v7 != v11)
      {
LABEL_9:
        unint64_t v17 = v7 - v11;
        uint64_t v18 = 8 * v11;
        uint64_t v19 = &v10[8 * v11];
        BOOL v20 = (uint64_t *)(v12 + v18);
        do
        {
          uint64_t v21 = *v20++;
          *(void *)uint64_t v19 = v21;
          v19 += 8;
          --v17;
        }

        while (v17);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v8 = TupleTypeMetadata;
  }

  MEMORY[0x1895F8858](TupleTypeMetadata);
  unint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = v4;
  uint64_t v51 = v24;
  uint64_t v25 = *(uint64_t (**)(void))(v24 + 16);
  Swift::String v57 = v23;
  uint64_t isUniquelyReferenced_nonNull_native = v25();
  uint64_t v52 = v8;
  uint64_t v53 = a2;
  if (v7)
  {
    unint64_t v27 = (uint64_t *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    int64_t v28 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v29 = v8 + 32;
    uint64_t v30 = (void *)MEMORY[0x18961AFE8];
    unint64_t v31 = v7;
    unint64_t v56 = v7;
    do
    {
      uint64_t v32 = *v27;
      uint64_t v33 = *v28;
      uint64_t v34 = *(void *)(*v27 - 8);
      MEMORY[0x1895F8858](isUniquelyReferenced_nonNull_native);
      uint64_t v36 = (char *)&v51 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v34 + 16))(v36);
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v58, v32, v33);
      uint64_t v38 = v37;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v32);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v30[2] + 1LL,  1,  v30);
        uint64_t v30 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v40 = v30[2];
      unint64_t v39 = v30[3];
      if (v40 >= v39 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v39 > 1),  v40 + 1,  1,  v30);
        uint64_t v30 = (void *)isUniquelyReferenced_nonNull_native;
      }

      void v30[2] = v40 + 1;
      int64_t v41 = &v30[2 * v40];
      v41[4] = v59;
      v41[5] = v38;
      v29 += 16LL;
      ++v28;
      ++v27;
      --v31;
    }

    while (v31);
  }

  else
  {
    uint64_t v30 = (void *)MEMORY[0x18961AFE8];
  }

  uint64_t v61 = (*(uint64_t (**)(uint64_t, void))(v55 + 16))(v58, *(void *)(v53 + 24));
  uint64_t v62 = v42;
  v43._uint64_t countAndFlagsBits = 0x7461756C6176652ELL;
  v43._object = (void *)0xEA00000000002865LL;
  String.append(_:)(v43);
  uint64_t v60 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
  uint64_t v44 = BidirectionalCollection<>.joined(separator:)();
  BOOL v46 = v45;
  swift_bridgeObjectRelease();
  v47._uint64_t countAndFlagsBits = v44;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 41LL;
  v48._object = (void *)0xE100000000000000LL;
  String.append(_:)(v48);
  uint64_t v49 = v61;
  (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v52);
  return v49;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.PredicateEvaluate<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare<>.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a3 + 16))(a1, *(void *)(a2 + 16), a3);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x80000001839C8AA0LL;
  v9._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 41LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  return v8;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.StringCaseInsensitiveCompare<>.debugString(state:)( a1,  a2,  *(void *)(a3 - 8),  *(void *)(a3 - 16));
}

id createDescription<each A, B, C>(variable:expression:typeName:outputType:)( uint64_t **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  v106._object = a7;
  v105[0] = a5;
  v108 = a4;
  uint64_t v107 = a3;
  Swift::String v10 = a1;
  uint64_t v11 = *(void *)(a9 - 8);
  MEMORY[0x1895F8858](a1);
  Swift::String v14 = (char *)v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = (void *)MEMORY[0x18961AFE8];
  if (v16)
  {
    v106._uint64_t countAndFlagsBits = v12;
    unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8],  &demangling cache variable for type metadata for _ContiguousArrayStorage<PredicateExpressions.VariableID>);
    unint64_t v17 = v15[2];
    uint64_t v18 = a6;
    do
    {
      uint64_t v19 = **v10;
      unint64_t v20 = v15[3];
      if (v17 >= v20 >> 1) {
        unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v20 > 1),  v17 + 1,  1,  v15,  &demangling cache variable for type metadata for _ContiguousArrayStorage<PredicateExpressions.VariableID>);
      }
      void v15[2] = v17 + 1;
      v15[v17 + 4] = v19;
      ++v10;
      ++v17;
      --v18;
    }

    while (v18);
  }

  (*(void (**)(char *))(v11 + 16))(v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DebugStringConvertiblePredicateExpression);
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v124, (uint64_t)&v127);
  if (a6)
  {
    uint64_t v21 = (uint64_t *)((unint64_t)v106._object & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
    unint64_t v23 = v22[2];
    do
    {
      unint64_t v24 = v22[3];
      int64_t v25 = v23 + 1;
      if (v23 >= v24 >> 1) {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v24 > 1),  v23 + 1,  1,  v22);
      }
      uint64_t v26 = *v21++;
      void v22[2] = v25;
      v22[v23++ + 4] = v26;
      --a6;
    }

    while (a6);
  }

  else
  {
    uint64_t v27 = MEMORY[0x18961AFE8];
    int64_t v25 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
    if (!v25) {
      goto LABEL_19;
    }
  }

  *(void *)&__int128 v124 = MEMORY[0x18961AFE8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0);
  uint64_t v28 = 0LL;
  uint64_t v27 = v124;
  do
  {
    uint64_t v29 = _typeName(_:qualified:)();
    uint64_t v31 = v30;
    *(void *)&__int128 v124 = v27;
    unint64_t v33 = *(void *)(v27 + 16);
    unint64_t v32 = *(void *)(v27 + 24);
    if (v33 >= v32 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
      uint64_t v27 = v124;
    }

    ++v28;
    *(void *)(v27 + 16) = v33 + 1;
    uint64_t v34 = v27 + 16 * v33;
    *(void *)(v34 + 32) = v29;
    *(void *)(v34 + 40) = v31;
  }

  while (v25 != v28);
  swift_bridgeObjectRelease();
LABEL_19:
  *(void *)&__int128 v124 = v27;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v105[3] = lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
  v106._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
  v106._object = v36;
  swift_bridgeObjectRelease();
  uint64_t v37 = swift_bridgeObjectRetain();
  uint64_t v38 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay10Foundation20PredicateExpressionsO10VariableIDVGG_AL_SSts5NeverOTg5018_sSi10Foundation20gh3O10i43IDVAESSIgynro_Si6offset_AE7elementtAE_SSts5k70OIegnrzr_TR053_s10Foundation26DebugStringConversionStateVyACSayAA20bc3O37D24IDVGcfcAG_SStSi_AGtXEfU_Tf3nnnpf_nTf1cn_n(v37);
  v105[2] = 0LL;
  v105[1] = v15;
  swift_bridgeObjectRelease();
  if (*(void *)(v38 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, String>);
    unint64_t v39 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v40 = *(void *)(v38 + 16);
  }

  else
  {
    uint64_t v40 = 0LL;
    unint64_t v39 = (void *)MEMORY[0x18961AFF0];
  }

  v105[4] = v35;
  uint64_t v117 = (uint64_t)v39;
  swift_bridgeObjectRetain_n();
  if (v40)
  {
    unint64_t v41 = 0LL;
    uint64_t v42 = (uint64_t *)(v38 + 48);
    while (v41 < *(void *)(v38 + 16))
    {
      uint64_t v43 = *(v42 - 1);
      uint64_t v44 = *v42;
      Swift::UInt v45 = *(v42 - 2);
      swift_bridgeObjectRetain();
      if (!v44) {
        goto LABEL_32;
      }
      uint64_t v113 = v45;
      unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v45);
      uint64_t v48 = v39[2];
      BOOL v49 = (v47 & 1) == 0;
      BOOL v50 = __OFADD__(v48, v49);
      uint64_t v51 = v48 + v49;
      if (v50) {
        goto LABEL_52;
      }
      char v52 = v47;
      if (v39[3] < v51)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, 1);
        unint64_t v39 = (void *)v117;
        unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v45);
        if ((v52 & 1) != (v53 & 1)) {
          goto LABEL_58;
        }
      }

      if ((v52 & 1) != 0) {
        goto LABEL_55;
      }
      v39[(v46 >> 6) + 8] |= 1LL << v46;
      *(void *)(v39[6] + 8 * v46) = v45;
      uint64_t v54 = (void *)(v39[7] + 16 * v46);
      *uint64_t v54 = v43;
      v54[1] = v44;
      uint64_t v55 = v39[2];
      BOOL v50 = __OFADD__(v55, 1LL);
      uint64_t v56 = v55 + 1;
      if (v50) {
        goto LABEL_53;
      }
      ++v41;
      v39[2] = v56;
      v42 += 3;
      if (v40 == v41) {
        goto LABEL_32;
      }
    }

    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    uint64_t v101 = (void *)swift_allocError();
    swift_willThrow();
    id v122 = v101;
    id v102 = v101;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_59;
    }
    *(void *)&__int128 v124 = 0LL;
    *((void *)&v124 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(30LL);
    v103._object = (void *)0x80000001839C8CD0LL;
    v103._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v103);
    _print_unlocked<A, B>(_:_:)();
    v104._uint64_t countAndFlagsBits = 39LL;
    v104._object = (void *)0xE100000000000000LL;
    String.append(_:)(v104);
    while (1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_58:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
LABEL_59:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      swift_unexpectedError();
      __break(1u);
LABEL_60:
      uint64_t v126 = 0LL;
      __int128 v124 = 0u;
      __int128 v125 = 0u;
      outlined destroy of Any?( (uint64_t)&v124,  &demangling cache variable for type metadata for DebugStringConvertiblePredicateExpression?);
    }
  }

id Predicate.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  unint64_t v7 = *(void *)(a1 + 16);
  if (v7 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL),  a3,  a4);
    uint64_t v9 = TupleTypeMetadata;
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    for (unint64_t i = 0LL; i < v7; ++i)
      *(void *)&v13[8 * i] = type metadata accessor for PredicateExpressions.Variable( 255LL,  *(void *)((*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL) + 8 * i),  v10,  v11);
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v9 = TupleTypeMetadata;
  }

  uint64_t v15 = *(void *)(v9 - 8);
  uint64_t v37 = &v33;
  uint64_t v16 = MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = &v33;
  MEMORY[0x1895F8858](v16);
  unint64_t v20 = (char *)&v33 - v19;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v5, (uint64_t)v38);
  uint64_t v21 = v39;
  uint64_t v34 = __swift_project_boxed_opaque_existential_1(v38, v39);
  uint64_t v35 = &v33;
  MEMORY[0x1895F8858](v34);
  unint64_t v23 = (uint64_t **)((char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v5 + *(int *)(a1 + 36), v9);
  for (uint64_t j = 0LL; j != v7; ++j)
  {
    if (v7 == 1) {
      int v25 = 0;
    }
    else {
      int v25 = *(_DWORD *)(v9 + 24 + 16 * j + 8);
    }
    uint64_t v26 = (uint64_t *)&v20[v25];
    if (v7 == 1) {
      int v27 = 0;
    }
    else {
      int v27 = *(_DWORD *)(v9 + 24 + 16 * j + 8);
    }
    *uint64_t v26 = *(void *)&v18[v27];
    v23[j] = v26;
  }

  Swift::String v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Predicate", 9uLL, 1);
  uint64_t v29 = *(void **)(a1 + 24);
  uint64_t v30 = MEMORY[0x18961AFC8] + 8LL;
  destructiveProjectEnumData for PredicateCodableError(v7, v29);
  id v31 = createDescription<each A, B, C>(variable:expression:typeName:outputType:)( v23,  (uint64_t)v34,  v28._countAndFlagsBits,  v28._object,  v30,  v7,  v29,  v30,  v21);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  return v31;
}

id Expression.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = 8 * v7;
  if (v7 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFELL),  a3,  a4);
    uint64_t v10 = TupleTypeMetadata;
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if (v7)
    {
      uint64_t v13 = (uint64_t *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL);
      Swift::String v14 = (void *)((char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v15 = v7;
      do
      {
        uint64_t v16 = *v13++;
        *v14++ = type metadata accessor for PredicateExpressions.Variable(255LL, v16, v11, v12);
        --v15;
      }

      while (v15);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v10 = TupleTypeMetadata;
  }

  uint64_t v17 = *(void *)(v10 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](TupleTypeMetadata);
  unint64_t v20 = (char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v33[2] = v33;
  MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)v33 - v21;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v5, (uint64_t)v34);
  uint64_t v23 = v35;
  v33[0] = v36;
  unint64_t v24 = __swift_project_boxed_opaque_existential_1(v34, v35);
  v33[1] = v33;
  MEMORY[0x1895F8858](v24);
  int v25 = (uint64_t **)((char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v5 + *(int *)(a1 + 44), v10);
  if (v7)
  {
    uint64_t v26 = (int *)(v10 + 32);
    int v27 = v25;
    uint64_t v28 = v7;
    do
    {
      if (v7 == 1)
      {
        LODWORD(v29) = 0;
        uint64_t v30 = v22;
      }

      else
      {
        uint64_t v29 = *v26;
        uint64_t v30 = &v22[v29];
      }

      *(void *)uint64_t v30 = *(void *)&v20[(int)v29];
      *v27++ = (uint64_t *)v30;
      v26 += 4;
      --v28;
    }

    while (v28);
  }

  id v31 = createDescription<each A, B, C>(variable:expression:typeName:outputType:)( v25,  (uint64_t)v24,  0x6973736572707845LL,  (void *)0xEA00000000006E6FLL,  *(void *)(a1 + 32),  v7,  *(void **)(a1 + 24),  *(void *)(a1 + 32),  v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  return v31;
}

uint64_t Predicate.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFELL),  a3,  a4);
    uint64_t v8 = TupleTypeMetadata;
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if (v6)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v13 = (void *)((char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v14 = v6;
      do
      {
        uint64_t v15 = *v12++;
        *v13++ = type metadata accessor for PredicateExpressions.Variable(255LL, v15, v9, v10);
        --v14;
      }

      while (v14);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v8 = TupleTypeMetadata;
  }

  MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v39[1] = a1;
  v39[2] = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v4 + *(int *)(a1 + 36), v8);
  if (v6)
  {
    uint64_t v19 = (int *)(v8 + 32);
    unint64_t v20 = (void *)MEMORY[0x18961AFE8];
    uint64_t v21 = v6;
    do
    {
      if (v6 == 1) {
        int v22 = 0;
      }
      else {
        int v22 = *v19;
      }
      uint64_t v40 = *(void **)&v17[v22];
      uint64_t v41 = 0x656C626169726156LL;
      unint64_t v42 = 0xE900000000000028LL;
      v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._uint64_t countAndFlagsBits = 41LL;
      v24._object = (void *)0xE100000000000000LL;
      String.append(_:)(v24);
      uint64_t v26 = v41;
      unint64_t v25 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v20[2] + 1LL,  1,  v20);
      }
      unint64_t v28 = v20[2];
      unint64_t v27 = v20[3];
      if (v28 >= v27 >> 1) {
        unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v27 > 1),  v28 + 1,  1,  v20);
      }
      v20[2] = v28 + 1;
      uint64_t v29 = &v20[2 * v28];
      v29[4] = v26;
      v29[5] = v25;
      v19 += 4;
      --v21;
    }

    while (v21);
  }

  else
  {
    unint64_t v20 = (void *)MEMORY[0x18961AFE8];
  }

  uint64_t v41 = 0LL;
  unint64_t v42 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(34LL);
  v30._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 0x6C62616972617628LL;
  v31._object = (void *)0xEC00000028203A65LL;
  String.append(_:)(v31);
  uint64_t v40 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
  uint64_t v32 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = v32;
  v35._object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 0x6572707865202C29LL;
  v36._object = (void *)0xEF203A6E6F697373LL;
  String.append(_:)(v36);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>);
  _print_unlocked<A, B>(_:_:)();
  v37._uint64_t countAndFlagsBits = 41LL;
  v37._object = (void *)0xE100000000000000LL;
  String.append(_:)(v37);
  return v41;
}

uint64_t Expression.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFELL),  a3,  a4);
    uint64_t v8 = TupleTypeMetadata;
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if (v6)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v13 = (uint64_t *)((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v14 = v6;
      do
      {
        uint64_t v15 = *v12++;
        *v13++ = type metadata accessor for PredicateExpressions.Variable(255LL, v15, v9, v10);
        --v14;
      }

      while (v14);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v8 = TupleTypeMetadata;
  }

  MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = a1;
  uint64_t v42 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v4 + *(int *)(a1 + 44), v8);
  if (v6)
  {
    uint64_t v19 = (int *)(v8 + 32);
    unint64_t v20 = (void *)MEMORY[0x18961AFE8];
    uint64_t v21 = v6;
    do
    {
      if (v6 == 1) {
        int v22 = 0;
      }
      else {
        int v22 = *v19;
      }
      uint64_t v43 = *(void **)&v17[v22];
      uint64_t v44 = 0x656C626169726156LL;
      unint64_t v45 = 0xE900000000000028LL;
      v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._uint64_t countAndFlagsBits = 41LL;
      v24._object = (void *)0xE100000000000000LL;
      String.append(_:)(v24);
      uint64_t v26 = v44;
      unint64_t v25 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v20[2] + 1LL,  1,  v20);
      }
      unint64_t v28 = v20[2];
      unint64_t v27 = v20[3];
      if (v28 >= v27 >> 1) {
        unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v27 > 1),  v28 + 1,  1,  v20);
      }
      v20[2] = v28 + 1;
      uint64_t v29 = &v20[2 * v28];
      v29[4] = v26;
      v29[5] = v25;
      v19 += 4;
      --v21;
    }

    while (v21);
  }

  else
  {
    unint64_t v20 = (void *)MEMORY[0x18961AFE8];
  }

  uint64_t v44 = 0LL;
  unint64_t v45 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(34LL);
  uint64_t v30 = v41;
  v31._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 0x6C62616972617628LL;
  v32._object = (void *)0xEC00000028203A65LL;
  String.append(_:)(v32);
  uint64_t v43 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
  uint64_t v33 = BidirectionalCollection<>.joined(separator:)();
  Swift::String v35 = v34;
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = v33;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 0x6572707865202C29LL;
  v37._object = (void *)0xEF203A6E6F697373LL;
  String.append(_:)(v37);
  uint64_t v43 = *(void **)(v30 + 32);
  swift_getExtendedExistentialTypeMetadata();
  _print_unlocked<A, B>(_:_:)();
  v38._uint64_t countAndFlagsBits = 41LL;
  v38._object = (void *)0xE100000000000000LL;
  String.append(_:)(v38);
  return v44;
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }

Swift::Int sub_182EE9CC0()
{
  return Hasher._finalize()();
}

Swift::Int sub_182EE9DC4()
{
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v5 = 10LL;
    if (a2 < 10) {
      uint64_t v5 = a2;
    }
    if (v5 <= 1) {
      uint64_t v6 = 1LL;
    }
    else {
      uint64_t v6 = v5;
    }
    MEMORY[0x186E1B904](103LL, 0xE100000000000000LL, v6);
  }

  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  uint64_t v5;
  uint64_t v6;
  Hasher.init(_seed:)();
  if ((a3 & 1) == 0)
  {
    uint64_t v5 = 10LL;
    if (a2 < 10) {
      uint64_t v5 = a2;
    }
    if (v5 <= 1) {
      uint64_t v6 = 1LL;
    }
    else {
      uint64_t v6 = v5;
    }
    MEMORY[0x186E1B904](89LL, 0xE100000000000000LL, v6);
  }

  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_182EE9F64()
{
  return Hasher._finalize()();
}

Swift::Int sub_182EEA018()
{
  return Hasher._finalize()();
}

Swift::Int sub_182EEA17C()
{
  return Hasher._finalize()();
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;
  _BYTE v6[72];
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v6, a1);
  specialized Set.hash(into:)((uint64_t)v6, a2);
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Swift::Int v2 = specialized RawRepresentable<>._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  Swift::Int v2;
  Hasher.init(_seed:)();
  ICULegacyNumberFormatter.Signature.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v2;
  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  type metadata accessor for CombineIdentifier();
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier,  (uint64_t (*)(uint64_t))MEMORY[0x1896021B0],  MEMORY[0x1896021C0]);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v3 = MEMORY[0x186E1CE88](*(void *)(v1 + 40), a1, 4LL);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t *a1)
{
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v57) == 1)
  {
    Hasher._combine(_:)(0);
    goto LABEL_53;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v56,  (uint64_t)v37,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v37[0] == 2)
  {
    Swift::UInt8 v2 = 0;
  }

  else
  {
    Swift::UInt8 v2 = v37[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v2);
  uint64_t v3 = v38;
  if (!v38)
  {
    Hasher._combine(_:)(0);
    uint64_t v8 = v37;
    goto LABEL_17;
  }

  Hasher._combine(_:)(1u);
  Swift::UInt v4 = *(void *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (!v4)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v56,  (uint64_t)v36,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v8 = v36;
LABEL_17:
    outlined retain of LocalePreferences(v8);
    if (!v39) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  outlined retain of LocalePreferences?( (uint64_t)v56,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v5 = v3 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v5 += 16LL;
    --v4;
  }

  while (v4);
  swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v40) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

{
  Swift::UInt8 v2;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt v29;
  Swift::UInt v30;
  Swift::UInt8 v31;
  Swift::UInt8 v32;
  Swift::UInt8 v33;
  Swift::Int v34;
  _BYTE v36[144];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  _BYTE v55[72];
  _BYTE v56[144];
  _BYTE v57[152];
  Hasher.init(_seed:)();
  outlined init with take of LocalePreferences?( (uint64_t)(a1 + 4),  (uint64_t)v56,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v56,  (uint64_t)v57,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v57) == 1)
  {
    Hasher._combine(_:)(0);
    goto LABEL_53;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v56,  (uint64_t)&v37,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v37 == 2)
  {
    Swift::UInt8 v2 = 0;
  }

  else
  {
    Swift::UInt8 v2 = v37 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v2);
  uint64_t v3 = v38;
  if (!v38)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v37);
    uint64_t v8 = &v37;
    goto LABEL_17;
  }

  Hasher._combine(_:)(1u);
  Swift::UInt v4 = *(void *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (!v4)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v56,  (uint64_t)v36,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v56,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    uint64_t v8 = (uint64_t *)v36;
LABEL_17:
    outlined retain of LocalePreferences(v8);
    if (!v39) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  outlined retain of LocalePreferences?( (uint64_t)v56,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v56,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v5 = v3 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v5 += 16LL;
    --v4;
  }

  while (v4);
  swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v40) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

LABEL_30:
  Hasher._combine(_:)(0);
  if (!v11) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  id v21 = v11;
  _CFObject.hash(into:)();

  if (v13)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    id v22 = v13;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }

  Hasher._combine(_:)(0);
  if (!v11) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  id v21 = v11;
  _CFObject.hash(into:)();

  if (v13)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    id v22 = v13;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }

        uint64_t v11 = (v21 - 1) & v21;
        id v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }

      uint64_t v27 = *(unsigned int *)(*(void *)(v5 + 48) + 4 * v19);
      uint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      Swift::UInt v29 = *v28;
      Swift::UInt v30 = v28[1];
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = MEMORY[0x186E1CE88](*(void *)(v7 + 40), v27, 4LL);
      uint64_t v13 = -1LL << *(_BYTE *)(v7 + 32);
      id v14 = result & ~v13;
      id v15 = v14 >> 6;
      if (((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        id v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v23 = 0;
        id v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }

          id v25 = v15 == v24;
          if (v15 == v24) {
            id v15 = 0LL;
          }
          v23 |= v25;
          id v26 = *(void *)(v12 + 8 * v15);
        }

        while (v26 == -1);
        id v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }

      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v16) = v27;
      id v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *id v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

        uint64_t v11 = (v21 - 1) & v21;
        id v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }

      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      Swift::UInt v29 = *v28;
      Swift::UInt v30 = v28[1];
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1LL << *(_BYTE *)(v7 + 32);
      id v14 = result & ~v13;
      id v15 = v14 >> 6;
      if (((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        id v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v23 = 0;
        id v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          id v25 = v15 == v24;
          if (v15 == v24) {
            id v15 = 0LL;
          }
          v23 |= v25;
          id v26 = *(void *)(v12 + 8 * v15);
        }

        while (v26 == -1);
        id v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }

      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      id v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *id v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_40:
  void *v3 = v7;
  return result;
}

    uint64_t v10 = (v25 - 1) & v25;
    id v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    Swift::UInt8 v31 = 16 * v22;
    Swift::UInt8 v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    Swift::Int v34 = *v32;
    Swift::UInt8 v33 = v32[1];
    Swift::String v35 = *(void *)(v5 + 56) + v31;
    Swift::String v36 = *(void *)v35;
    Swift::String v37 = *(_BYTE *)(v35 + 8);
    if ((v42 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    id v14 = -1LL << *(_BYTE *)(v7 + 32);
    id v15 = result & ~v14;
    id v16 = v15 >> 6;
    if (((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      id v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        Swift::UInt v29 = v16 == v28;
        if (v16 == v28) {
          id v16 = 0LL;
        }
        v27 |= v29;
        Swift::UInt v30 = *(void *)(v11 + 8 * v16);
      }

      while (v30 == -1);
      id v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }

    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    id v18 = 16 * v17;
    id v19 = (void *)(*(void *)(v7 + 48) + v18);
    int *v19 = v34;
    v19[1] = v33;
    id v20 = *(void *)(v7 + 56) + v18;
    *(void *)id v20 = v36;
    *(_BYTE *)(v20 + _Block_object_dispose((const void *)(v1 - 96), 8) = v37;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  uint64_t v3 = v39;
  id v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1LL << *(_BYTE *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v24 = -1LL << v38;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

    unint64_t v46 = (v23 - 1) & v23;
    char v47 = v24;
    id v20 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_31:
    Swift::UInt v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    Swift::UInt8 v31 = *v30;
    Swift::UInt8 v32 = v30[1];
    Swift::UInt8 v33 = *(void *)(v5 + 56) + 48 * v20;
    Swift::Int v34 = *(void *)v33;
    Swift::String v35 = *(void *)(v33 + 8);
    Swift::String v36 = *(void *)(v33 + 16);
    Swift::String v37 = *(void *)(v33 + 24);
    uint64_t v38 = *(void *)(v33 + 32);
    uint64_t v39 = *(_BYTE *)(v33 + 40);
    if ((v45 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v34, v35, v36, v37, v38, v39);
    }

    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v12 = -1LL << *(_BYTE *)(v48 + 32);
    uint64_t v13 = result & ~v12;
    id v14 = v13 >> 6;
    if (((-1LL << v13) & ~*(void *)(v9 + 8 * (v13 >> 6))) != 0)
    {
      id v15 = __clz(__rbit64((-1LL << v13) & ~*(void *)(v9 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0LL;
      id v16 = v38;
      id v17 = v34;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v12) >> 6;
      id v16 = v38;
      id v17 = v34;
      do
      {
        if (++v14 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        uint64_t v28 = v14 == v27;
        if (v14 == v27) {
          id v14 = 0LL;
        }
        v26 |= v28;
        Swift::UInt v29 = *(void *)(v9 + 8 * v14);
      }

      while (v29 == -1);
      id v15 = __clz(__rbit64(~v29)) + (v14 << 6);
    }

    *(void *)(v9 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    id v18 = (void *)(*(void *)(v48 + 48) + 16 * v15);
    char *v18 = v31;
    v18[1] = v32;
    id v19 = *(void *)(v48 + 56) + 48 * v15;
    *(void *)id v19 = v17;
    *(void *)(v19 + _Block_object_dispose((const void *)(v1 - 96), 8) = v35;
    *(void *)(v19 + 16) = v36;
    *(void *)(v19 + 24) = v37;
    *(void *)(v19 + 32) = v16;
    *(_BYTE *)(v19 + 40) = v39;
    ++*(void *)(v48 + 16);
    uint64_t v5 = v44;
    uint64_t v8 = v46;
    uint64_t v11 = v47;
  }

  swift_release();
  uint64_t v3 = v41;
  id v22 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v40 = 1LL << *(_BYTE *)(v5 + 32);
  if (v40 >= 64) {
    bzero(v22, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v22 = -1LL << v40;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  void *v3 = v48;
  return result;
}

        uint64_t v10 = (v23 - 1) & v23;
        id v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }

      Swift::UInt v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      Swift::UInt8 v31 = *v29;
      Swift::UInt v30 = v29[1];
      Swift::UInt8 v32 = *(void *)(v5 + 56) + 24 * v21;
      uint64_t v38 = *(_OWORD *)v32;
      Swift::UInt8 v33 = *(_BYTE *)(v32 + 16);
      if ((v37 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      id v14 = -1LL << *(_BYTE *)(v7 + 32);
      id v15 = result & ~v14;
      id v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        id v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v25 = 0;
        id v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }

          uint64_t v27 = v16 == v26;
          if (v16 == v26) {
            id v16 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }

        while (v28 == -1);
        id v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }

      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      id v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      char *v18 = v31;
      v18[1] = v30;
      id v19 = *(void *)(v7 + 56) + 24 * v17;
      *(_OWORD *)id v19 = v38;
      *(_BYTE *)(v19 + 16) = v33;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

    uint64_t v11 = (v26 - 1) & v26;
    id v23 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_31:
    Swift::UInt8 v32 = 16 * v23;
    Swift::UInt8 v33 = (uint64_t *)(*(void *)(v6 + 48) + v32);
    Swift::String v35 = *v33;
    Swift::Int v34 = v33[1];
    uint64_t v40 = *(_OWORD *)(*(void *)(v6 + 56) + v32);
    if ((v39 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    id v16 = -1LL << *(_BYTE *)(v8 + 32);
    id v17 = result & ~v16;
    id v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      Swift::UInt v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        Swift::UInt v30 = v18 == v29;
        if (v18 == v29) {
          id v18 = 0LL;
        }
        v28 |= v30;
        Swift::UInt8 v31 = *(void *)(v13 + 8 * v18);
      }

      while (v31 == -1);
      id v19 = __clz(__rbit64(~v31)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    id v20 = 16 * v19;
    id v21 = (void *)(*(void *)(v8 + 48) + v20);
    uint64_t *v21 = v35;
    v21[1] = v34;
    *(_OWORD *)(*(void *)(v8 + 56) + v20) = v40;
    ++*(void *)(v8 + 16);
  }

  swift_release();
  Swift::UInt v4 = v37;
  id v25 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  Swift::String v36 = 1LL << *(_BYTE *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v25 = -1LL << v36;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  *Swift::UInt v4 = v8;
  return result;
}

        uint64_t v11 = (v21 - 1) & v21;
        id v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }

      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      Swift::UInt v30 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      id v14 = -1LL << *(_BYTE *)(v7 + 32);
      id v15 = result & ~v14;
      id v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        id v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v23 = 0;
        id v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          id v25 = v16 == v24;
          if (v16 == v24) {
            id v16 = 0LL;
          }
          v23 |= v25;
          id v26 = *(void *)(v13 + 8 * v16);
        }

        while (v26 == -1);
        id v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(void *)(*(void *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v30;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_40:
  void *v3 = v7;
  return result;
}

    uint64_t v10 = (v24 - 1) & v24;
    id v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    Swift::UInt v30 = *(void *)(v5 + 48) + 32 * v21;
    Swift::UInt8 v32 = *(void *)v30;
    Swift::UInt8 v31 = *(void *)(v30 + 8);
    uint64_t v38 = *(_OWORD *)(v30 + 16);
    Swift::UInt8 v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }

    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v38);
    Hasher._combine(_:)(*((Swift::UInt *)&v38 + 1));
    uint64_t result = Hasher._finalize()();
    id v14 = -1LL << *(_BYTE *)(v7 + 32);
    id v15 = result & ~v14;
    id v16 = v15 >> 6;
    if (((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      id v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      id v18 = v38;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v14) >> 6;
      id v18 = v38;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        uint64_t v28 = v16 == v27;
        if (v16 == v27) {
          id v16 = 0LL;
        }
        v26 |= v28;
        Swift::UInt v29 = *(void *)(v11 + 8 * v16);
      }

      while (v29 == -1);
      id v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }

    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    id v19 = *(void *)(v7 + 48) + 32 * v17;
    *(void *)id v19 = v32;
    *(void *)(v19 + _Block_object_dispose((const void *)(v1 - 96), 8) = v31;
    *(_OWORD *)(v19 + 16) = v18;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v33;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  id v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  Swift::Int v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

        uint64_t v11 = (v24 - 1) & v24;
        id v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }

      Swift::UInt v30 = 16 * v22;
      Swift::UInt8 v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      Swift::UInt8 v33 = *v31;
      Swift::UInt8 v32 = v31[1];
      Swift::String v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v37, *((unint64_t *)&v37 + 1));
      }

      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      id v15 = -1LL << *(_BYTE *)(v8 + 32);
      id v16 = result & ~v15;
      id v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        id v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }

          uint64_t v28 = v17 == v27;
          if (v17 == v27) {
            id v17 = 0LL;
          }
          v26 |= v28;
          Swift::UInt v29 = *(void *)(v12 + 8 * v17);
        }

        while (v29 == -1);
        id v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }

      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      id v19 = 16 * v18;
      id v20 = (void *)(*(void *)(v8 + 48) + v19);
      void *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release();
  void *v3 = v8;
  return result;
}

    uint64_t v10 = (v24 - 1) & v24;
    id v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    Swift::UInt v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    Swift::UInt8 v32 = *v30;
    Swift::UInt8 v31 = v30[1];
    Swift::UInt8 v33 = *(void *)(v5 + 56) + 32 * v21;
    Swift::Int v34 = *(void *)v33;
    Swift::String v35 = *(_BYTE *)(v33 + 8);
    Swift::String v36 = *(void *)(v33 + 16);
    uint64_t v43 = *(_BYTE *)(v33 + 24);
    if ((v42 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    id v14 = -1LL << *(_BYTE *)(v7 + 32);
    id v15 = result & ~v14;
    id v16 = v15 >> 6;
    if (((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      id v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        uint64_t v28 = v16 == v27;
        if (v16 == v27) {
          id v16 = 0LL;
        }
        v26 |= v28;
        Swift::UInt v29 = *(void *)(v11 + 8 * v16);
      }

      while (v29 == -1);
      id v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }

    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    id v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    char *v18 = v32;
    v18[1] = v31;
    id v19 = *(void *)(v7 + 56) + 32 * v17;
    *(void *)id v19 = v34;
    *(_BYTE *)(v19 + _Block_object_dispose((const void *)(v1 - 96), 8) = v35;
    *(void *)(v19 + 16) = v36;
    *(_BYTE *)(v19 + 24) = v43;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  uint64_t v3 = v38;
  id v23 = v40;
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  Swift::String v37 = 1LL << *(_BYTE *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v23 = -1LL << v37;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

        uint64_t v11 = (v21 - 1) & v21;
        id v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }

      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      Swift::UInt v29 = *v28;
      Swift::UInt v30 = v28[1];
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1LL << *(_BYTE *)(v7 + 32);
      id v14 = result & ~v13;
      id v15 = v14 >> 6;
      if (((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        id v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v23 = 0;
        id v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }

          id v25 = v15 == v24;
          if (v15 == v24) {
            id v15 = 0LL;
          }
          v23 |= v25;
          id v26 = *(void *)(v12 + 8 * v15);
        }

        while (v26 == -1);
        id v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }

      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      id v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *id v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

    uint64_t v10 = (v23 - 1) & v23;
    id v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    Swift::UInt v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    Swift::UInt8 v31 = *v29;
    Swift::UInt v30 = v29[1];
    Swift::UInt8 v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    id v14 = -1LL << *(_BYTE *)(v7 + 32);
    id v15 = result & ~v14;
    id v16 = v15 >> 6;
    if (((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      id v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v25 = 0;
      id v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        uint64_t v27 = v16 == v26;
        if (v16 == v26) {
          id v16 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }

      while (v28 == -1);
      id v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }

    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    id v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    char *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  uint64_t v3 = v34;
  id v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  Swift::UInt8 v33 = 1LL << *(_BYTE *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v22 = -1LL << v33;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

    uint64_t v10 = (v25 - 1) & v25;
    id v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    Swift::UInt8 v31 = 16 * v22;
    Swift::UInt8 v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    Swift::Int v34 = *v32;
    Swift::UInt8 v33 = v32[1];
    Swift::String v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    Swift::String v36 = *v35;
    Swift::String v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    id v14 = -1LL << *(_BYTE *)(v7 + 32);
    id v15 = result & ~v14;
    id v16 = v15 >> 6;
    if (((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      id v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        Swift::UInt v29 = v16 == v28;
        if (v16 == v28) {
          id v16 = 0LL;
        }
        v27 |= v29;
        Swift::UInt v30 = *(void *)(v11 + 8 * v16);
      }

      while (v30 == -1);
      id v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }

    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    id v18 = 16 * v17;
    id v19 = (void *)(*(void *)(v7 + 48) + v18);
    int *v19 = v34;
    v19[1] = v33;
    id v20 = (void *)(*(void *)(v7 + 56) + v18);
    void *v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  uint64_t v3 = v39;
  id v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1LL << *(_BYTE *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v24 = -1LL << v38;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

    uint64_t v10 = (v24 - 1) & v24;
    id v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    Swift::UInt v30 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    Swift::String v35 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v21);
    Swift::UInt8 v31 = *(void *)(*(void *)(v5 + 48) + 16 * v21 + 8);
    if ((a2 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)();
    specialized Dictionary<>.hash(into:)((uint64_t)v36, v35);
    specialized Set.hash(into:)((uint64_t)v36, v31);
    uint64_t result = Hasher._finalize()();
    id v15 = -1LL << *(_BYTE *)(v7 + 32);
    id v16 = result & ~v15;
    id v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      id v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      id v19 = v35;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      id v19 = v35;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          id v17 = 0LL;
        }
        v26 |= v28;
        Swift::UInt v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      id v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v1_Block_object_dispose((const void *)(v1 - 96), 8) = v19;
    *(void *)(*(void *)(v7 + 56) + 8 * v1_Block_object_dispose((const void *)(v1 - 96), 8) = v30;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  uint64_t v3 = v33;
  id v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  Swift::UInt8 v32 = 1LL << *(_BYTE *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v23, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v23 = -1LL << v32;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

    uint64_t v10 = (v23 - 1) & v23;
    id v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    Swift::UInt v29 = *(void *)(v5 + 48) + 24 * v20;
    Swift::UInt8 v31 = *(void *)v29;
    Swift::UInt v30 = *(void *)(v29 + 8);
    Swift::UInt8 v32 = *(unsigned __int8 *)(v29 + 16);
    Swift::UInt8 v33 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v32);
    uint64_t result = Hasher._finalize()();
    id v14 = -1LL << *(_BYTE *)(v7 + 32);
    id v15 = result & ~v14;
    id v16 = v15 >> 6;
    if (((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      id v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v25 = 0;
      id v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        uint64_t v27 = v16 == v26;
        if (v16 == v26) {
          id v16 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }

      while (v28 == -1);
      id v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }

    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    id v18 = *(void *)(v7 + 48) + 24 * v17;
    *(void *)id v18 = v31;
    *(void *)(v18 + _Block_object_dispose((const void *)(v1 - 96), 8) = v30;
    *(_BYTE *)(v18 + 16) = v32;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v33;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  uint64_t v3 = v35;
  id v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  Swift::Int v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v22 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

        uint64_t v11 = (v21 - 1) & v21;
        id v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }

      uint64_t v27 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v19);
      Swift::UInt v30 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0) {
        swift_unknownObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      id v14 = -1LL << *(_BYTE *)(v7 + 32);
      id v15 = result & ~v14;
      id v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        id v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v23 = 0;
        id v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          id v25 = v16 == v24;
          if (v16 == v24) {
            id v16 = 0LL;
          }
          v23 |= v25;
          id v26 = *(void *)(v13 + 8 * v16);
        }

        while (v26 == -1);
        id v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(_BYTE *)(*(void *)(v7 + 48) + v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v30;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_40:
  void *v3 = v7;
  return result;
}

        Swift::String v37 = (v22 - 1) & v22;
        uint64_t v38 = v23;
        id v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }

      Swift::UInt v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
      Swift::UInt8 v31 = *v29;
      Swift::UInt v30 = v29[1];
      Swift::UInt8 v32 = *(void *)(v5 + 56) + 80 * v20;
      uint64_t v43 = *(_OWORD *)(v32 + 24);
      uint64_t v44 = *(_OWORD *)(v32 + 8);
      uint64_t v41 = *(_OWORD *)(v32 + 56);
      uint64_t v42 = *(_OWORD *)(v32 + 40);
      uint64_t v39 = *(void *)v32;
      uint64_t v40 = *(void *)(v32 + 72);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      id v14 = -1LL << *(_BYTE *)(v7 + 32);
      id v15 = result & ~v14;
      id v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        id v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v25 = 0;
        id v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }

          uint64_t v27 = v16 == v26;
          if (v16 == v26) {
            id v16 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }

        while (v28 == -1);
        id v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }

      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      id v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      char *v18 = v31;
      v18[1] = v30;
      id v19 = *(void *)(v7 + 56) + 80 * v17;
      uint64_t v13 = v38;
      *(void *)id v19 = v39;
      *(_OWORD *)(v19 + _Block_object_dispose((const void *)(v1 - 96), 8) = v44;
      *(_OWORD *)(v19 + 24) = v43;
      *(_OWORD *)(v19 + 40) = v42;
      *(_OWORD *)(v19 + 56) = v41;
      *(void *)(v19 + 72) = v40;
      ++*(void *)(v7 + 16);
      uint64_t v10 = v37;
    }
  }

  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

        uint64_t v11 = (v21 - 1) & v21;
        id v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }

      uint64_t v27 = 8 * v19;
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + v27);
      Swift::UInt v29 = *(void **)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        Swift::UInt v30 = v29;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1LL << *(_BYTE *)(v7 + 32);
      id v14 = result & ~v13;
      id v15 = v14 >> 6;
      if (((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        id v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v23 = 0;
        id v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          id v25 = v15 == v24;
          if (v15 == v24) {
            id v15 = 0LL;
          }
          v23 |= v25;
          id v26 = *(void *)(v12 + 8 * v15);
        }

        while (v26 == -1);
        id v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }

      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      id v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_40:
  void *v3 = v7;
  return result;
}

        uint64_t v64 = (v24 - 1) & v24;
        unint64_t v65 = v25;
        id v22 = __clz(__rbit64(v24)) + (v25 << 6);
      }

      Swift::UInt8 v31 = *(void *)(v7 + 56);
      Swift::UInt8 v32 = *(void *)(v7 + 48) + 96 * v22;
      Swift::Int v34 = *(void *)v32;
      Swift::UInt8 v33 = *(void *)(v32 + 8);
      Swift::String v35 = *(_BYTE *)(v32 + 16);
      Swift::String v36 = *(_BYTE *)(v32 + 24);
      Swift::String v37 = *(void *)(v32 + 32);
      v4.i32[0] = *(_DWORD *)(v32 + 40);
      uint64_t v38 = *(void *)(v32 + 48);
      uint64_t v39 = *(_BYTE *)(v32 + 56);
      uint64_t v40 = *(_BYTE *)(v32 + 57);
      v3.i32[0] = *(_DWORD *)(v32 + 58);
      uint64_t v41 = *(_BYTE *)(v32 + 62);
      uint64_t v42 = *(_BYTE *)(v32 + 63);
      uint64_t v43 = *(void *)(v32 + 64);
      uint64_t v44 = *(_BYTE *)(v32 + 72);
      unint64_t v45 = *(_BYTE *)(v32 + 73);
      unint64_t v46 = *(void *)(v32 + 80);
      char v47 = *(void *)(v32 + 88);
      uint64_t v48 = (uint64_t *)(v31 + 16 * v22);
      uint64_t v49 = v48[1];
      uint64_t v72 = *v48;
      uint64_t v78 = v37;
      Swift::String v79 = v33;
      unint64_t v76 = v35;
      Swift::String v77 = v36;
      Swift::String v75 = *(void *)v32;
      if ((v63 & 1) == 0)
      {
        uint64_t v50 = *(void *)(v32 + 80);
        unint64_t v73 = *(_BYTE *)(v32 + 62);
        Swift::String v71 = *(_BYTE *)(v32 + 63);
        char v51 = *(void *)(v32 + 64);
        char v52 = *(_BYTE *)(v32 + 72);
        char v53 = *(_BYTE *)(v32 + 73);
        char v54 = *(_BYTE *)(v32 + 56);
        uint64_t v55 = *(void *)(v32 + 88);
        uint64_t v56 = *(_BYTE *)(v32 + 57);
        uint64_t v57 = *(void *)(v32 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v38 = v57;
        uint64_t v40 = v56;
        char v47 = v55;
        uint64_t v39 = v54;
        unint64_t v45 = v53;
        uint64_t v44 = v52;
        uint64_t v43 = v51;
        uint64_t v42 = v71;
        uint64_t v41 = v73;
        unint64_t v46 = v50;
        Swift::Int v34 = v75;
        Swift::String v37 = v78;
        Swift::UInt8 v33 = v79;
        Swift::String v35 = v76;
        Swift::String v36 = v77;
      }

      Swift::String v81 = v34;
      Swift::String v82 = v33;
      Swift::String v83 = v35;
      Swift::String v84 = v36;
      Swift::String v85 = v37;
      unint64_t v66 = (int16x8_t)vmovl_u8(v4);
      uint64_t v67 = (int16x8_t)vmovl_u8(v3);
      uint64_t v86 = vmovn_s16(v66).u32[0];
      id v14 = v38;
      uint64_t v87 = v38;
      unint64_t v88 = v39;
      uint64_t v68 = v40;
      unint64_t v69 = v45;
      unint64_t v89 = v40;
      Swift::String v90 = vmovn_s16(v67).u32[0];
      uint64_t v91 = v41;
      uint64_t v92 = v42;
      uint64_t v93 = v43;
      uint64_t v94 = v44;
      char v95 = v45;
      unint64_t v70 = v46;
      __int128 v96 = v46;
      Swift::String v97 = v47;
      Hasher.init(_seed:)();
      ICUDateFormatter.PatternCacheKey.hash(into:)((uint64_t)v80);
      uint64_t result = Hasher._finalize()();
      id v15 = -1LL << *(_BYTE *)(v74 + 32);
      id v16 = result & ~v15;
      id v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
      {
        id v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
        id v19 = v49;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v15) >> 6;
        id v19 = v49;
        do
        {
          if (++v17 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }

          Swift::UInt v29 = v17 == v28;
          if (v17 == v28) {
            id v17 = 0LL;
          }
          v27 |= v29;
          Swift::UInt v30 = *(void *)(v11 + 8 * v17);
        }

        while (v30 == -1);
        id v18 = __clz(__rbit64(~v30)) + (v17 << 6);
      }

      *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      id v20 = *(void *)(v74 + 48) + 96 * v18;
      *(void *)id v20 = v75;
      *(void *)(v20 + _Block_object_dispose((const void *)(v1 - 96), 8) = v79;
      *(_BYTE *)(v20 + 16) = v76;
      *(_BYTE *)(v20 + 24) = v77;
      *(void *)(v20 + 32) = v78;
      *(_DWORD *)(v20 + 40) = vmovn_s16(v66).u32[0];
      *(void *)(v20 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = v14;
      *(_BYTE *)(v20 + 56) = v39;
      *(_BYTE *)(v20 + 57) = v68;
      *(_DWORD *)(v20 + 5_Block_object_dispose((const void *)(v1 - 96), 8) = vmovn_s16(v67).u32[0];
      *(_BYTE *)(v20 + 62) = v41;
      *(_BYTE *)(v20 + 63) = v42;
      *(void *)(v20 + 64) = v43;
      *(_BYTE *)(v20 + 72) = v44;
      *(_BYTE *)(v20 + 73) = v69;
      *(void *)(v20 + 80) = v70;
      *(void *)(v20 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = v47;
      id v21 = (void *)(*(void *)(v74 + 56) + 16 * v18);
      uint64_t *v21 = v72;
      v21[1] = v19;
      ++*(void *)(v74 + 16);
      uint64_t v7 = v62;
      uint64_t v10 = v64;
      uint64_t v13 = v65;
    }
  }

  uint64_t result = swift_release();
  *uint64_t v5 = v74;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    id v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    Swift::UInt v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    Swift::UInt8 v32 = *v30;
    Swift::UInt8 v31 = v30[1];
    Swift::UInt8 v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }

    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    id v15 = -1LL << *(_BYTE *)(v8 + 32);
    id v16 = result & ~v15;
    id v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      id v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          id v17 = 0LL;
        }
        v26 |= v28;
        Swift::UInt v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      id v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    id v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    int *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose((const void *)(v1 - 96), 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release();
  id v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  Swift::Int v34 = 1LL << *(_BYTE *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v23 = -1LL << v34;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  *Swift::UInt v4 = v8;
  return result;
}

        uint64_t v11 = (v24 - 1) & v24;
        id v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }

      Swift::UInt v30 = 16 * v22;
      Swift::UInt8 v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      Swift::UInt8 v33 = *v31;
      Swift::UInt8 v32 = v31[1];
      Swift::String v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      id v15 = -1LL << *(_BYTE *)(v8 + 32);
      id v16 = result & ~v15;
      id v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        id v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }

          uint64_t v28 = v17 == v27;
          if (v17 == v27) {
            id v17 = 0LL;
          }
          v26 |= v28;
          Swift::UInt v29 = *(void *)(v12 + 8 * v17);
        }

        while (v29 == -1);
        id v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }

      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      id v19 = 16 * v18;
      id v20 = (void *)(*(void *)(v8 + 48) + v19);
      void *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release();
  void *v3 = v8;
  return result;
}

        uint64_t v11 = (v21 - 1) & v21;
        id v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }

      uint64_t v27 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v19);
      uint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      Swift::UInt v29 = *v28;
      Swift::UInt v30 = v28[1];
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1LL << *(_BYTE *)(v7 + 32);
      id v14 = result & ~v13;
      id v15 = v14 >> 6;
      if (((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        id v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v23 = 0;
        id v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          id v25 = v15 == v24;
          if (v15 == v24) {
            id v15 = 0LL;
          }
          v23 |= v25;
          id v26 = *(void *)(v12 + 8 * v15);
        }

        while (v26 == -1);
        id v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }

      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(_BYTE *)(*(void *)(v7 + 48) + v16) = v27;
      id v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *id v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_40:
  void *v3 = v7;
  return result;
}

        uint64_t v11 = (v21 - 1) & v21;
        id v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }

      uint64_t v27 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v19);
      Swift::UInt v30 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      id v14 = -1LL << *(_BYTE *)(v7 + 32);
      id v15 = result & ~v14;
      id v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        id v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v23 = 0;
        id v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          id v25 = v16 == v24;
          if (v16 == v24) {
            id v16 = 0LL;
          }
          v23 |= v25;
          id v26 = *(void *)(v13 + 8 * v16);
        }

        while (v26 == -1);
        id v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(_BYTE *)(*(void *)(v7 + 48) + v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v30;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_40:
  void *v3 = v7;
  return result;
}

        uint64_t v12 = (v22 - 1) & v22;
        id v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }

      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      Swift::UInt8 v31 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0) {
        swift_unknownObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      id v15 = -1LL << *(_BYTE *)(v7 + 32);
      id v16 = result & ~v15;
      id v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        id v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v24 = 0;
        id v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          id v26 = v17 == v25;
          if (v17 == v25) {
            id v17 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v14 + 8 * v17);
        }

        while (v27 == -1);
        id v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }

      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      *(void *)(*(void *)(v7 + 48) + 8 * v1_Block_object_dispose((const void *)(v1 - 96), 8) = v28;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v1_Block_object_dispose((const void *)(v1 - 96), 8) = v31;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_40:
  void *v3 = v7;
  return result;
}

        uint64_t v12 = (v25 - 1) & v25;
        id v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }

      Swift::UInt8 v31 = 16 * v23;
      Swift::UInt8 v32 = (uint64_t *)(*(void *)(v6 + 48) + v31);
      Swift::Int v34 = *v32;
      Swift::UInt8 v33 = v32[1];
      uint64_t v38 = *(_OWORD *)(*(void *)(v6 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
      }

      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      id v16 = -1LL << *(_BYTE *)(v9 + 32);
      id v17 = result & ~v16;
      id v18 = v17 >> 6;
      if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        id v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }

          Swift::UInt v29 = v18 == v28;
          if (v18 == v28) {
            id v18 = 0LL;
          }
          v27 |= v29;
          Swift::UInt v30 = *(void *)(v13 + 8 * v18);
        }

        while (v30 == -1);
        id v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }

      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      id v20 = 16 * v19;
      id v21 = (void *)(*(void *)(v9 + 48) + v20);
      uint64_t *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(void *)(v9 + 56) + v20) = v38;
      ++*(void *)(v9 + 16);
    }
  }

  uint64_t result = swift_release();
  *Swift::UInt v4 = v9;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    id v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    Swift::UInt v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    Swift::UInt8 v32 = *v30;
    Swift::UInt8 v31 = v30[1];
    Swift::UInt8 v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      Swift::Int v34 = v33;
    }

    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    id v15 = -1LL << *(_BYTE *)(v8 + 32);
    id v16 = result & ~v15;
    id v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      id v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          id v17 = 0LL;
        }
        v26 |= v28;
        Swift::UInt v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      id v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    id v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    int *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose((const void *)(v1 - 96), 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release();
  Swift::UInt v4 = v36;
  id v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  Swift::String v35 = 1LL << *(_BYTE *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v23 = -1LL << v35;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  *Swift::UInt v4 = v8;
  return result;
}

        uint64_t v12 = (v22 - 1) & v22;
        id v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }

      uint64_t v28 = 8 * v20;
      Swift::UInt v29 = *(void *)(*(void *)(v5 + 48) + v28);
      Swift::UInt v30 = *(void **)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        Swift::UInt8 v31 = v30;
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      id v14 = -1LL << *(_BYTE *)(v7 + 32);
      id v15 = result & ~v14;
      id v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        id v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v24 = 0;
        id v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          id v26 = v16 == v25;
          if (v16 == v25) {
            id v16 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }

        while (v27 == -1);
        id v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      id v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v1_Block_object_dispose((const void *)(v1 - 96), 8) = v29;
      *(void *)(*(void *)(v7 + 56) + v1_Block_object_dispose((const void *)(v1 - 96), 8) = v30;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_40:
  void *v3 = v7;
  return result;
}

    uint64_t v10 = (v25 - 1) & v25;
    id v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    Swift::UInt8 v31 = 16 * v22;
    Swift::UInt8 v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    Swift::Int v34 = *v32;
    Swift::UInt8 v33 = v32[1];
    uint64_t v39 = *(_OWORD *)(*(void *)(v5 + 56) + v31);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    id v15 = -1LL << *(_BYTE *)(v7 + 32);
    id v16 = result & ~v15;
    id v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      id v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        Swift::UInt v29 = v17 == v28;
        if (v17 == v28) {
          id v17 = 0LL;
        }
        v27 |= v29;
        Swift::UInt v30 = *(void *)(v12 + 8 * v17);
      }

      while (v30 == -1);
      id v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    id v19 = 16 * v18;
    id v20 = (void *)(*(void *)(v7 + 48) + v19);
    void *v20 = v34;
    v20[1] = v33;
    *(_OWORD *)(*(void *)(v7 + 56) + v19) = v39;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  uint64_t v3 = v36;
  id v24 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  Swift::String v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v24 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

  *(void *)(v6 + 8 * v11) = i | v12;
  Swift::UInt8 v31 = v65;
  *(void *)(*(void *)(v5 + 48) + 8 * v10) = v65;
  uint64_t v44 = *(void *)(v5 + 16);
  unint64_t v45 = __OFADD__(v44, 1LL);
  unint64_t v46 = v44 + 1;
  if (v45)
  {
    __break(1u);
    goto LABEL_51;
  }

  *(void *)(v5 + 16) = v46;
LABEL_32:
  type metadata accessor for NSURLResourceKey(0LL);
  swift_arrayDestroy();
  char v47 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v47);
  swift_release();
  uint64_t v48 = _ContiguousArrayBuffer._asCocoaArray()();
  *(void *)&uint64_t v67 = 0LL;
  uint64_t v10 = (unint64_t)v64;
  uint64_t v49 = objc_msgSend(v64, sel_resourceValuesForKeys_error_, v48, &v67);
  swift_unknownObjectRelease();
  uint64_t v50 = (void *)v67;
  if (!v49)
  {
    if ((void)v67)
    {
      uint64_t v56 = (id)v67;
      swift_willThrow();
      swift_release();

LABEL_48:
      swift_bridgeObjectRetain();
      Path = String._lastPathComponent.getter(v63, a2);
      uint64_t v61 = v60;
      swift_bridgeObjectRelease();
      unint64_t v70 = Path;
      Swift::String v71 = v61;
      v66[0] = 58LL;
      v66[1] = 0xE100000000000000LL;
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      return v67;
    }

    if (one-time initialization token for _nilObjCError == -1)
    {
LABEL_47:
      swift_willThrow();
      swift_release();
      goto LABEL_48;
    }

    uint64_t v7 = 0LL;
    uint64_t v5 = 0LL;
    Swift::UInt v4 = v14;
    goto LABEL_5;
  }

  uint64_t v7 = 0LL;
  uint64_t v5 = 0LL;
  v4 += 3LL;
LABEL_5:
  v1[3] = v4;
  v1[4] = v5;
  if (v7)
  {
LABEL_6:
    uint64_t v8 = (void (*)(uint64_t *__return_ptr, uint64_t *))v1[5];
    id v17 = v7;
    v8(&v16, &v17);
    swift_release();
  }

  id v25 = v2[24];
  swift_bridgeObjectRelease();
  *(void *)(v25 + 40) = v3;
  *(void *)(v25 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = v6;
  swift_bridgeObjectRelease();
LABEL_34:
  free(v2);
}

  id v25 = v2[24];
  swift_bridgeObjectRelease();
  *(void *)(v25 + 56) = v3;
  *(void *)(v25 + 64) = v6;
  swift_bridgeObjectRelease();
LABEL_34:
  free(v2);
}

  id v25 = v2[24];
  swift_bridgeObjectRelease();
  *(void *)(v25 + 120) = v3;
  *(void *)(v25 + 12_Block_object_dispose((const void *)(v1 - 96), 8) = v6;
  swift_bridgeObjectRelease();
LABEL_34:
  free(v2);
}

  id v25 = v2[24];
  swift_bridgeObjectRelease();
  *(void *)(v25 + 136) = v3;
  *(void *)(v25 + 144) = v6;
  swift_bridgeObjectRelease();
LABEL_34:
  free(v2);
}

  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

  *(void *)&v258 = v23;
  *((void *)&v258 + 1) = v24;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  uint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v39 = objc_msgSend(v38, sel__fastCharacterContents);
  uint64_t v40 = v38;
  if (v39)
  {
    *(void *)&v258 = v23;
    *((void *)&v258 + 1) = v24;
    StringProtocol._ephemeralString.getter();
    uint64_t v41 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v42 = objc_msgSend(v41, sel_length);
    uint64_t v43 = swift_unknownObjectRelease();
    id v23 = (unint64_t)&v245;
    uint64_t v44 = MEMORY[0x1895F8858](v43);
    LOBYTE(v243) = 0;
    MEMORY[0x1895F8858](v44);
    v240 = v39;
    v241 = v42;
    uint64_t v28 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v39,  (uint64_t)v42,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  v45,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t)v239);
    Swift::UInt v29 = v46;
    swift_bridgeObjectRelease_n();
    goto LABEL_40;
  }

  *(void *)&v258 = v23;
  *((void *)&v258 + 1) = v24;
  swift_bridgeObjectRetain();
  id v23 = String.init<A>(_:)();
  uint64_t v48 = v47;
  if ((v47 & 0x1000000000000000LL) != 0)
  {
LABEL_264:
    id v23 = static String._copying(_:)();
    v229 = v228;
    swift_bridgeObjectRelease();
    uint64_t v48 = v229;
  }

  Swift::UInt v30 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
  if ((v48 & 0x2000000000000000LL) == 0)
  {
    if ((v23 & 0x1000000000000000LL) != 0)
    {
      uint64_t v49 = (unsigned __int8 *)((v48 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v50 = v23 & 0xFFFFFFFFFFFFLL;
      goto LABEL_37;
    }

    goto LABEL_267;
  }

  uint64_t v50 = HIBYTE(v48) & 0xF;
  *(void *)&v258 = v23;
  *((void *)&v258 + 1) = v48 & 0xFFFFFFFFFFFFFFLL;
  v256 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
  v257 = 0LL;
  uint64_t v49 = (unsigned __int8 *)&v258;
  char v51 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v256;
  for (unint64_t i = (unsigned __int8 *)&v258; ; unint64_t i = v49)
  {
    uint64_t v28 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v49,  v50,  v51,  0,  i,  v50);
    Swift::UInt v29 = v53;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
LABEL_40:
    Swift::UInt v30 = v255;
LABEL_41:
    v276 = 0;
    LOBYTE(v273) = 0;
    v269 = 0;
    v268 = 0;
    if (!v29) {
      goto LABEL_57;
    }
LABEL_42:
    char v54 = specialized Collection.first.getter(v28, v29);
    if ((v54 & 0x1FF) != 0x5B) {
      goto LABEL_136;
    }
    if ((v29 & 0x1000000000000000LL) != 0)
    {
      uint64_t v116 = String.UTF8View._foreignCount()();
      if (__OFSUB__(v116, 1LL)) {
        goto LABEL_279;
      }
      uint64_t v56 = (v28 >> 59) & 1;
      char v54 = MEMORY[0x186E1B838](15LL, v116 - 1, v28, v29);
      Swift::UInt v30 = v255;
LABEL_48:
      if ((v54 & 0xC) != 4LL << v56) {
        goto LABEL_49;
      }
      goto LABEL_248;
    }

    uint64_t v55 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000LL) == 0) {
      uint64_t v55 = v28 & 0xFFFFFFFFFFFFLL;
    }
    if (v55)
    {
      char v54 = (v55 << 16) - 65532;
      LOBYTE(v56) = 1;
      goto LABEL_48;
    }

    __break(1u);
LABEL_248:
    char v54 = _StringGuts._slowEnsureMatchingEncoding(_:)(v54, v28, v29);
LABEL_49:
    uint64_t v57 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000LL) == 0) {
      uint64_t v57 = v28 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v58 = v54 >> 16;
    if (v54 >> 16 >= v57)
    {
      __break(1u);
LABEL_250:
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }

    if ((v29 & 0x1000000000000000LL) != 0)
    {
      uint64_t v60 = String.UTF8View._foreignSubscript(position:)();
    }

    else if ((v29 & 0x2000000000000000LL) != 0)
    {
      *(void *)&v258 = v28;
      *((void *)&v258 + 1) = v29 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v60 = *((_BYTE *)&v258 + v58);
    }

    else
    {
      if ((v28 & 0x1000000000000000LL) != 0) {
        uint64_t v59 = (v29 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v59 = _StringObject.sharedUTF8.getter();
      }
      uint64_t v60 = *(_BYTE *)(v59 + v58);
    }

    if (v60 == 93)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v105 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v28, v29);
      swift_bridgeObjectRelease_n();
      if ((v105 & 1) != 0) {
        goto LABEL_142;
      }
      goto LABEL_130;
    }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v66, v67, v68);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v66, 0LL, 1LL, v68);
      goto LABEL_31;
    case 13:
      *(void *)a1 = *(void *)a2;
      uint64_t v8 = (_OWORD *)((char *)a1 + v7);
      uint64_t v9 = (_OWORD *)((char *)a2 + v7);
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
      uint64_t v10 = swift_getEnumCaseMultiPayload();
      if (v10 == 2)
      {
        *uint64_t v8 = *v9;
        uint64_t v48 = (char *)v8 + v47;
        uint64_t v49 = (char *)v9 + v47;
        *(void *)uint64_t v48 = *(void *)((char *)v9 + v47);
        v48[8] = *((_BYTE *)v9 + v47 + 8);
        uint64_t v50 = *(_OWORD *)((char *)v9 + v47 + 32);
        *((_OWORD *)v48 + 1) = *(_OWORD *)((char *)v9 + v47 + 16);
        *((_OWORD *)v48 + 2) = v50;
        *((_OWORD *)v48 + 3) = *(_OWORD *)((char *)v9 + v47 + 48);
        *(_OWORD *)(v48 + 57) = *(_OWORD *)((char *)v9 + v47 + 57);
        v48[73] = *((_BYTE *)v9 + v47 + 73);
        v48[76] = *((_BYTE *)v9 + v47 + 76);
        *((_WORD *)v48 + 37) = *(_WORD *)((char *)v9 + v47 + 74);
        v48[77] = *((_BYTE *)v9 + v47 + 77);
        char v51 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        char v52 = v51[9];
        char v53 = &v48[v52];
        char v54 = &v49[v52];
        uint64_t v55 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v56 = *(void *)(v55 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1LL, v55))
        {
LABEL_21:
          uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v53, v54, *(void *)(*(void *)(v60 - 8) + 64LL));
LABEL_40:
          unint64_t v88 = v51[10];
          unint64_t v89 = &v48[v88];
          Swift::String v90 = &v49[v88];
          *(void *)unint64_t v89 = *(void *)v90;
          v89[8] = v90[8];
          uint64_t v91 = v51[11];
          Swift::String v83 = &v48[v91];
          Swift::String v84 = &v49[v91];
LABEL_41:
          *Swift::String v83 = *v84;
          swift_storeEnumTagMultiPayload();
          goto LABEL_42;
        }
      }

      else
      {
        if (v10 == 1)
        {
          uint64_t v11 = v9[1];
          *uint64_t v8 = *v9;
          v8[1] = v11;
          uint64_t v13 = (char *)v8 + v12;
          id v14 = (char *)v9 + v12;
          *(void *)uint64_t v13 = *(void *)((char *)v9 + v12);
          v13[8] = *((_BYTE *)v9 + v12 + 8);
          id v15 = *(_OWORD *)((char *)v9 + v12 + 32);
          *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v9 + v12 + 16);
          *((_OWORD *)v13 + 2) = v15;
          *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v9 + v12 + 48);
          *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v9 + v12 + 57);
          v13[73] = *((_BYTE *)v9 + v12 + 73);
          *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)v9 + v12 + 74);
          v13[78] = *((_BYTE *)v9 + v12 + 78);
          id v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
          id v17 = v16[9];
          id v18 = &v13[v17];
          id v19 = &v14[v17];
          id v20 = type metadata accessor for FloatingPointRoundingRule();
          id v21 = *(void *)(v20 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
          {
            id v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
          }

          else
          {
            (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
          }

          Swift::String v79 = v16[10];
          v80 = &v13[v79];
          Swift::String v81 = &v14[v79];
          *(void *)v80 = *(void *)v81;
          v80[8] = v81[8];
          v13[v16[11]] = v14[v16[11]];
          Swift::String v82 = v16[12];
          Swift::String v83 = &v13[v82];
          Swift::String v84 = &v14[v82];
          goto LABEL_41;
        }

        *uint64_t v8 = *v9;
        uint64_t v48 = (char *)v8 + v57;
        uint64_t v49 = (char *)v9 + v57;
        *(void *)uint64_t v48 = *(void *)((char *)v9 + v57);
        v48[8] = *((_BYTE *)v9 + v57 + 8);
        uint64_t v58 = *(_OWORD *)((char *)v9 + v57 + 32);
        *((_OWORD *)v48 + 1) = *(_OWORD *)((char *)v9 + v57 + 16);
        *((_OWORD *)v48 + 2) = v58;
        *((_OWORD *)v48 + 3) = *(_OWORD *)((char *)v9 + v57 + 48);
        *(_OWORD *)(v48 + 57) = *(_OWORD *)((char *)v9 + v57 + 57);
        v48[73] = *((_BYTE *)v9 + v57 + 73);
        v48[76] = *((_BYTE *)v9 + v57 + 76);
        *((_WORD *)v48 + 37) = *(_WORD *)((char *)v9 + v57 + 74);
        v48[77] = *((_BYTE *)v9 + v57 + 77);
        char v51 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v59 = v51[9];
        char v53 = &v48[v59];
        char v54 = &v49[v59];
        uint64_t v55 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v56 = *(void *)(v55 - 8);
      }

      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v53, v54, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0LL, 1LL, v55);
      goto LABEL_40;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

  Hasher._combine(_:)(0);
  if (!v36)
  {
LABEL_19:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v23);
    if (!v37) {
      goto LABEL_20;
    }
    goto LABEL_32;
  }

  Hasher._combine(_:)(0);
  if (!v38)
  {
LABEL_15:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v25);
    if (!v39) {
      goto LABEL_16;
    }
LABEL_32:
    Hasher._combine(_:)(0);
    if (!v40) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }

  Hasher._combine(_:)(0);
  if (!v38)
  {
LABEL_15:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v25);
    if (!v39) {
      goto LABEL_16;
    }
LABEL_32:
    Hasher._combine(_:)(0);
    if (!v40) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }

  objc_msgSend(v8, sel_setSecond_, v25);
  if ((v41 & 1) != 0)
  {
LABEL_13:
    if ((v42 & 1) != 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

    Hasher._combine(_:)(0);
    if (v18)
    {
LABEL_4:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_5;
    }

    swift_release();
    return (uint64_t)v29;
  }

  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

  char v52 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v27 = static _DictionaryStorage.copy(original:)();
  id v23 = v27;
  if (!*(void *)(v5 + 16))
  {
LABEL_64:
    swift_bridgeObjectRelease();
    a1 = v52;
    if ((v4 & 1) == 0) {
      goto LABEL_65;
    }
    goto LABEL_23;
  }

  uint64_t v28 = (char *)(v27 + 64);
  char __src = (char *)(v5 + 64);
  uint64_t v56 = v6;
  Swift::UInt v29 = (unint64_t)((1LL << *(_BYTE *)(v23 + 32)) + 63) >> 6;
  if (v23 != v5 || v28 >= &__src[8 * v29]) {
    memmove(v28, __src, 8 * v29);
  }
  Swift::UInt v30 = 0LL;
  *(void *)(v23 + 16) = *(void *)(v5 + 16);
  Swift::UInt8 v31 = 1LL << *(_BYTE *)(v5 + 32);
  Swift::UInt8 v32 = -1LL;
  if (v31 < 64) {
    Swift::UInt8 v32 = ~(-1LL << v31);
  }
  Swift::UInt8 v33 = v32 & *(void *)(v5 + 64);
  char v53 = (unint64_t)(v31 + 63) >> 6;
  while (2)
  {
    uint64_t v6 = v56;
    if (v33)
    {
      Swift::Int v34 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      Swift::String v35 = v34 | (v30 << 6);
LABEL_38:
      Swift::String v36 = 16 * v35;
      Swift::String v37 = (void *)(*(void *)(v5 + 48) + 16 * v35);
      uint64_t v38 = v37[1];
      uint64_t v39 = 8 * v35;
      uint64_t v40 = *(void *)(*(void *)(v5 + 56) + v39);
      uint64_t v41 = (void *)(*(void *)(v23 + 48) + v36);
      *uint64_t v41 = *v37;
      v41[1] = v38;
      *(void *)(*(void *)(v23 + 56) + v39) = v40;
      swift_bridgeObjectRetain();
      swift_retain();
      continue;
    }

    break;
  }

  uint64_t v42 = v30 + 1;
  if (__OFADD__(v30, 1LL)) {
    goto LABEL_69;
  }
  if (v42 >= v53) {
    goto LABEL_64;
  }
  uint64_t v43 = *(void *)&__src[8 * v42];
  ++v30;
  if (v43) {
    goto LABEL_63;
  }
  Swift::UInt v30 = v42 + 1;
  if (v42 + 1 >= v53) {
    goto LABEL_64;
  }
  uint64_t v43 = *(void *)&__src[8 * v30];
  if (v43) {
    goto LABEL_63;
  }
  Swift::UInt v30 = v42 + 2;
  if (v42 + 2 >= v53) {
    goto LABEL_64;
  }
  uint64_t v43 = *(void *)&__src[8 * v30];
  if (v43) {
    goto LABEL_63;
  }
  Swift::UInt v30 = v42 + 3;
  if (v42 + 3 >= v53) {
    goto LABEL_64;
  }
  uint64_t v43 = *(void *)&__src[8 * v30];
  if (v43) {
    goto LABEL_63;
  }
  Swift::UInt v30 = v42 + 4;
  if (v42 + 4 >= v53) {
    goto LABEL_64;
  }
  uint64_t v43 = *(void *)&__src[8 * v30];
  if (v43) {
    goto LABEL_63;
  }
  Swift::UInt v30 = v42 + 5;
  if (v42 + 5 >= v53) {
    goto LABEL_64;
  }
  uint64_t v43 = *(void *)&__src[8 * v30];
  if (v43) {
    goto LABEL_63;
  }
  Swift::UInt v30 = v42 + 6;
  if (v42 + 6 >= v53) {
    goto LABEL_64;
  }
  uint64_t v43 = *(void *)&__src[8 * v30];
  if (v43) {
    goto LABEL_63;
  }
  Swift::UInt v30 = v42 + 7;
  if (v42 + 7 >= v53) {
    goto LABEL_64;
  }
  uint64_t v43 = *(void *)&__src[8 * v30];
  if (v43)
  {
LABEL_63:
    Swift::UInt8 v33 = (v43 - 1) & v43;
    Swift::String v35 = __clz(__rbit64(v43)) + (v30 << 6);
    goto LABEL_38;
  }

  uint64_t v44 = v42 + 8;
  if (v44 >= v53) {
    goto LABEL_64;
  }
  uint64_t v43 = *(void *)&__src[8 * v44];
  if (v43)
  {
    Swift::UInt v30 = v44;
    goto LABEL_63;
  }

  while (1)
  {
    Swift::UInt v30 = v44 + 1;
    if (__OFADD__(v44, 1LL)) {
      break;
    }
    uint64_t v6 = v56;
    if (v30 >= v53) {
      goto LABEL_64;
    }
    uint64_t v43 = *(void *)&__src[8 * v30];
    ++v44;
    if (v43) {
      goto LABEL_63;
    }
  }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v21 = 0xE100000000000000LL;
      id v19 = 47LL;
LABEL_31:
      id v15 = v105;
      id v20 = v99;
      goto LABEL_36;
    }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v21 = 0xE100000000000000LL;
      id v19 = 47LL;
LABEL_31:
      id v15 = v105;
      id v20 = v99;
      goto LABEL_36;
    }

        __break(1u);
        goto LABEL_31;
      }

      while (v15 != v16)
      {
        if (v20 - 1 == v16) {
          return 0LL;
        }
        if (v19 + 1 < a5) {
          goto LABEL_25;
        }
        if (__OFSUB__(v20, ++v16)) {
          goto LABEL_26;
        }
        if (v20 - v16 < v17) {
          return 0LL;
        }
        uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v16, a3, a4, a5, a6, a8);
        if ((result & 1) != 0) {
          goto LABEL_17;
        }
      }

      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
  }

  return result;
}

  specialized Set._Variant.insert(_:)(&v3, 9uLL);
  if ((a1 & 0x1000) == 0)
  {
LABEL_12:
    if ((a1 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

        uint64_t v55 = 0;
        goto LABEL_87;
      }
    }
  }

  if (v56 == v20)
  {
    if ((a5 & 1) == 0) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  __break(1u);
  return result;
}

  Swift::UInt8 v33 = v39[10];
  Swift::Int v34 = v39[11];
  v35[0] = v40[0];
  *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)((char *)v40 + 9);
  Swift::UInt v29 = v39[6];
  Swift::UInt v30 = v39[7];
  Swift::UInt8 v31 = v39[8];
  Swift::UInt8 v32 = v39[9];
  id v25 = v39[2];
  id v26 = v39[3];
  uint64_t v27 = v39[4];
  uint64_t v28 = v39[5];
  id v23 = v39[0];
  id v24 = v39[1];
  outlined release of Locale((uint64_t)&v23);
  outlined destroy of Any?((uint64_t)&v36, &demangling cache variable for type metadata for Any?);
  id v20 = v3[3];
  if (v20 >= 2)
  {
    id v21 = v20 >> 1;
    id v19 = __OFSUB__(v21, v7);
    id v22 = v21 - v7;
    if (v19)
    {
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      return;
    }

    v3[2] = v22;
  }

  Hasher._combine(_:)(0);
  if (!v12) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  id v22 = v12;
  _CFObject.hash(into:)();

  if (v14)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    id v23 = v14;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }

  Hasher._combine(_:)(0);
  if (!v10) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  id v20 = v10;
  _CFObject.hash(into:)();

  if (v12)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    id v21 = v12;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }

  Hasher._combine(_:)(0);
  if (!v10) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  id v20 = v10;
  _CFObject.hash(into:)();

  if (v12)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    id v21 = v12;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }

  specialized Set._Variant.insert(_:)(&v3, 9uLL);
  if ((v1 & 0x400) == 0)
  {
LABEL_12:
    if ((v1 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }

  Hasher._combine(_:)(0);
  if (!v47) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  id v25 = v47;
  _CFObject.hash(into:)();

  id v26 = v48;
  if (v48)
  {
LABEL_27:
    uint64_t v27 = v8;
    uint64_t v28 = v26;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    Swift::UInt v29 = v28;
    uint64_t v8 = v27;
    uint64_t v13 = v41;
    id v16 = v44;
    id v17 = v43;
    id v14 = v42;
    id v15 = v47;
    Swift::UInt v30 = v29;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }

  Hasher._combine(_:)(0);
  if (!v48) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  id v25 = v48;
  _CFObject.hash(into:)();

  id v26 = v49;
  if (v49)
  {
LABEL_27:
    uint64_t v27 = v13;
    uint64_t v28 = v8;
    Swift::UInt v29 = v9;
    Swift::UInt v30 = v26;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    Swift::UInt8 v31 = v30;
    uint64_t v9 = v29;
    uint64_t v8 = v28;
    uint64_t v13 = v27;
    id v14 = v42;
    id v15 = v43;
    id v16 = v44;
    id v17 = v48;
    Swift::UInt8 v32 = v31;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }

  __break(1u);
  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    uint64_t v28 = v62;
    if (!v62) {
      goto LABEL_25;
    }
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v28);
    swift_bridgeObjectRelease();
    Swift::UInt v29 = v63;
    if (!v63) {
      goto LABEL_26;
    }
    goto LABEL_33;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    id v25 = v60;
    if (!v60) {
      goto LABEL_25;
    }
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v25);
    swift_bridgeObjectRelease();
    id v26 = v61;
    if (!v61) {
      goto LABEL_26;
    }
    goto LABEL_33;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v25 = v58;
  if (v58) {
    goto LABEL_31;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  id v26 = v59;
  if (!v59)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_33;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    Swift::UInt v29 = v64;
    if (!v64) {
      goto LABEL_25;
    }
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v29);
    swift_bridgeObjectRelease();
    Swift::UInt v30 = v65;
    if (!v65) {
      goto LABEL_26;
    }
    goto LABEL_33;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    id v25 = v60;
    if (!v60) {
      goto LABEL_25;
    }
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v25);
    swift_bridgeObjectRelease();
    id v26 = v61;
    if (!v61) {
      goto LABEL_26;
    }
    goto LABEL_33;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt v29 = v61;
  if (v61) {
    goto LABEL_31;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  Swift::UInt v30 = v62;
  if (!v62)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_33;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v27 = v59;
  if (v59) {
    goto LABEL_31;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  uint64_t v28 = v60;
  if (!v60)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_33;
  }

    uint64_t v101 = *(void *)(v98 + 56);
    id v102 = 8 * v93;
    swift_release();
    *(void *)(v101 + v102) = v89;
    goto LABEL_69;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    Swift::String v98 = v91;
    if ((v92 & 1) == 0) {
      goto LABEL_68;
    }
    goto LABEL_30;
  }

  uint64_t v127 = (char *)v93;
  LODWORD(v12_Block_object_dispose((const void *)(v1 - 96), 8) = v92;
  uint64_t v129 = v89;
  v130 = (char *)v44;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  Swift::String v103 = static _DictionaryStorage.copy(original:)();
  Swift::String v98 = v103;
  if (!*(void *)(v91 + 16))
  {
LABEL_67:
    swift_bridgeObjectRelease();
    unint64_t v45 = (uint64_t)v138;
    uint64_t v42 = v141;
    unint64_t v89 = v129;
    uint64_t v93 = (unint64_t)v127;
    if ((v128 & 1) == 0) {
      goto LABEL_68;
    }
    goto LABEL_30;
  }

  Swift::String v104 = (char *)(v103 + 64);
  v105 = 1LL << *(_BYTE *)(v98 + 32);
  v136 = (char *)(v91 + 64);
  Swift::String v106 = (unint64_t)(v105 + 63) >> 6;
  if (v98 != v91 || v104 >= &v136[8 * v106]) {
    memmove(v104, v136, 8 * v106);
  }
  v137 = 0LL;
  *(void *)(v98 + 16) = *(void *)(v91 + 16);
  uint64_t v107 = 1LL << *(_BYTE *)(v91 + 32);
  v108 = -1LL;
  if (v107 < 64) {
    v108 = ~(-1LL << v107);
  }
  uint64_t v109 = v108 & *(void *)(v91 + 64);
  v135 = (unint64_t)(v107 + 63) >> 6;
  unint64_t v110 = v140;
  while (1)
  {
    if (v109)
    {
      uint64_t v111 = __clz(__rbit64(v109));
      v109 &= v109 - 1;
      unint64_t v112 = v111 | (v137 << 6);
      goto LABEL_41;
    }

    uint64_t v116 = v137 + 1;
    if (__OFADD__(v137, 1LL))
    {
      __break(1u);
      goto LABEL_71;
    }

    if (v116 >= v135) {
      goto LABEL_67;
    }
    uint64_t v117 = *(void *)&v136[8 * v116];
    unint64_t v118 = v137 + 1;
    if (!v117)
    {
      unint64_t v118 = v137 + 2;
      if (v137 + 2 >= v135) {
        goto LABEL_67;
      }
      uint64_t v117 = *(void *)&v136[8 * v118];
      if (!v117)
      {
        unint64_t v118 = v137 + 3;
        if (v137 + 3 >= v135) {
          goto LABEL_67;
        }
        uint64_t v117 = *(void *)&v136[8 * v118];
        if (!v117)
        {
          unint64_t v118 = v137 + 4;
          if (v137 + 4 >= v135) {
            goto LABEL_67;
          }
          uint64_t v117 = *(void *)&v136[8 * v118];
          if (!v117)
          {
            unint64_t v118 = v137 + 5;
            if (v137 + 5 >= v135) {
              goto LABEL_67;
            }
            uint64_t v117 = *(void *)&v136[8 * v118];
            if (!v117)
            {
              unint64_t v118 = v137 + 6;
              if (v137 + 6 >= v135) {
                goto LABEL_67;
              }
              uint64_t v117 = *(void *)&v136[8 * v118];
              if (!v117)
              {
                unint64_t v118 = v137 + 7;
                if (v137 + 7 >= v135) {
                  goto LABEL_67;
                }
                uint64_t v117 = *(void *)&v136[8 * v118];
                if (!v117)
                {
                  unint64_t v118 = v137 + 8;
                  if (v137 + 8 >= v135) {
                    goto LABEL_67;
                  }
                  uint64_t v117 = *(void *)&v136[8 * v118];
                  if (!v117) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

      uint64_t v6 = 0LL;
      Swift::UInt8 v33 = 0LL;
      Swift::UInt8 v31 = 0u;
      Swift::UInt8 v32 = 0u;
      Swift::UInt v29 = 0u;
      Swift::UInt v30 = 0u;
    }

    id v18 = *(void *)(v21 + 8 * v19);
    if (v18)
    {
LABEL_15:
      id v17 = v19;
LABEL_12:
      uint64_t v6 = (v18 - 1) & v18;
      id v16 = __clz(__rbit64(v18)) + (v17 << 6);
      id v14 = v17;
      continue;
    }

    break;
  }

  while (1)
  {
    id v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v22)
    {
      id v14 = v22 - 1;
      goto LABEL_30;
    }

    id v18 = *(void *)(v21 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_12;
    }
  }

  Hasher._combine(_:)(0);
  if (!v10) {
    goto LABEL_31;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  id v20 = v10;
  _CFObject.hash(into:)();

  if (v12)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    id v21 = v12;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
    }

    else
    {
LABEL_59:
      *(void *)(v180 + 8 * v8_Block_object_dispose((const void *)(v1 - 96), 8) = v90 | v89;
      *(void *)(*(void *)(v80 + 48) + 8 * v47) = v45;
      uint64_t v120 = *(void *)(v80 + 16);
      char v52 = __OFADD__(v120, 1LL);
      Swift::String v121 = v120 + 1;
      if (v52) {
        goto LABEL_100;
      }
      *(void *)(v80 + 16) = v121;
    }

    Swift::String v82 = 1;
    Swift::String v83 = 1LL;
    if ((v84 & 1) == 0) {
      continue;
    }
    break;
  }

  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0LL);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  id v122 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v122);
  swift_release();
  unint64_t v123 = _ContiguousArrayBuffer._asCocoaArray()();
  *(void *)&v185 = 0LL;
  __int128 v124 = objc_msgSend(*(id *)v176, sel_resourceValuesForKeys_error_, v123, &v185);
  swift_unknownObjectRelease();
  __int128 v125 = (void *)v185;
  if (!v124)
  {
    unint64_t v45 = (uint64_t)&v182;
    if ((void)v185)
    {
      v133 = (id)v185;
      swift_willThrow();

      swift_release();
      swift_release();
      swift_release();
      v134 = 0LL;
      char v47 = (unint64_t)v166;
      v135 = v167;
      v136 = v165;
      goto LABEL_70;
    }

    char v47 = (unint64_t)v166;
    if (one-time initialization token for _nilObjCError == -1) {
      goto LABEL_95;
    }
    goto LABEL_102;
  }

  uint64_t v126 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v124);
  uint64_t v127 = v125;

  *(void *)&v185 = v126;
  *((void *)&v185 + 1) = v80;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v128 = URLResourceValues._get(_:)(v172);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v45 = (uint64_t)&v182;
  if (v128 != 2)
  {
    uint64_t v129 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
    v130 = @"NSFileExtensionHidden";
    v131 = objc_msgSend(v129, sel_initWithBool_, v128 & 1);
    *((void *)&v186 + 1) = v169;
    *(void *)&v185 = v131;
    specialized Dictionary.subscript.setter((uint64_t)&v185, v130);
  }

  *(void *)&v185 = v126;
  *((void *)&v185 + 1) = v80;
  v132 = v163;
  URLResourceValues.creationDate.getter((uint64_t)&v183);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v184 & 1) != 0)
  {
    v185 = 0u;
    v186 = 0u;
  }

  else
  {
    *((void *)&v186 + 1) = &type metadata for Date;
    *(void *)&v185 = v183;
  }

  v135 = v167;
  v136 = v165;
  v134 = v4;
  specialized Dictionary.subscript.setter((uint64_t)&v185, v132);

  swift_release();
  swift_release();
  char v47 = (unint64_t)v166;
LABEL_70:
  v137 = specialized _FileManagerImpl._extendedAttributes(at:followSymlinks:)((const char *)v47);
  if (v134)
  {
  }

  else
  {
    v138 = v137;
    if (v137)
    {
      v139 = (void *)String._bridgeToObjectiveCImpl()();
      *((void *)&v186 + 1) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Data]);
      *(void *)&v185 = v138;
      specialized Dictionary.subscript.setter((uint64_t)&v185, v139);
    }
  }

  v140 = S_IFMT.getter() & v136;
  if (v140 == (unsigned __int16)S_IFREG.getter()
    || (v141 = S_IFMT.getter() & v136, v141 == (unsigned __int16)S_IFDIR.getter()))
  {
    v142 = specialized static _FileManagerImpl._fileProtectionValueForPath(_:)((const char *)v47);
    if ((v142 & 0x100000000LL) != 0 || (v143 = specialized NSFileProtectionType.init(intValue:)(v142)) == 0LL)
    {
      *(_OWORD *)(v45 + 160) = 0u;
      *(_OWORD *)(v45 + 176) = 0u;
      specialized Dictionary.subscript.setter((uint64_t)&v185, @"NSFileProtectionKey");
    }

    else
    {
      v144 = v143;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
      v145 = String._bridgeToObjectiveCImpl()();
      v146 = @"NSFileProtectionKey";
      swift_bridgeObjectRelease();
      *((void *)&v186 + 1) = v162;
      *(void *)&v185 = v145;
      specialized Dictionary.subscript.setter((uint64_t)&v185, v146);
    }
  }

  *v135 = v181;
}

  uint64_t v72 = _NativeDictionary.bridged()();
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v75);
  return v72;
}

        uint64_t v28 = (v33 - 1) & v33;
        Swift::UInt8 v31 = __clz(__rbit64(v33)) + (v23 << 6);
        if (!v14[2]) {
          goto LABEL_41;
        }
      }
    }

    else
    {
LABEL_41:
      __break(1u);
    }

    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
  }

  __break(1u);
LABEL_48:
  __break(1u);
}

      if (v7 >= v8)
      {
        *(void *)(a5 + 72) = v8;
        *(void *)(a5 + 80) = v7;
        *(_BYTE *)(a5 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
        *(_BYTE *)(a5 + 186) = specialized Sequence<>.contains(_:)(0x25u, v8, v7, a3);
        return 1LL;
      }

      __break(1u);
      goto LABEL_34;
    }

    uint64_t v11 = a2;
    while (*(_BYTE *)(a3 - 2 + v11) != 64)
    {
      if (result + 1 == --v11) {
        goto LABEL_7;
      }
    }

    uint64_t v10 = v11 - 2;
  }

  if (v10 < result)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t result = specialized Collection<>.firstIndex(of:)(0x3Au, result, v10, a3);
  if ((v12 & 1) != 0)
  {
    *(void *)(a5 + 24) = v9;
    *(void *)(a5 + 32) = v10;
    uint64_t v13 = (_BYTE *)(a5 + 40);
  }

  else
  {
    if (result < v9)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }

    *(void *)(a5 + 24) = v9;
    *(void *)(a5 + 32) = result;
    *(_BYTE *)(a5 + 40) = 0;
    if (v10 < result + 1)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    *(void *)(a5 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = result + 1;
    *(void *)(a5 + 56) = v10;
    uint64_t v13 = (_BYTE *)(a5 + 64);
  }

  *uint64_t v13 = 0;
  uint64_t v8 = v10 + 1;
  if (v8 == v7) {
    goto LABEL_24;
  }
LABEL_17:
  if (*(_BYTE *)(a3 + v8) != 91) {
    goto LABEL_24;
  }
  if (v8 <= v7)
  {
    uint64_t result = specialized Collection<>.firstIndex(of:)(0x5Du, v8, v7, a3);
    if ((v14 & 1) == 0)
    {
      id v15 = result;
      *(_BYTE *)(a5 + 185) = 1;
      if (++result == v7) {
        goto LABEL_30;
      }
      if (*(_BYTE *)(a3 + result) != 58) {
        return 0LL;
      }
      id v16 = v15 + 2;
      if (v16 <= v7) {
        goto LABEL_29;
      }
      __break(1u);
    }

    goto LABEL_24;
  }

                            uint64_t v40 = (uint64_t *)(*(void *)(v35 + 56) + 16 * v30);
                            swift_bridgeObjectRelease();
                            *uint64_t v40 = v14;
                            v40[1] = v13;
                            goto LABEL_102;
                          }

                          uint64_t v61 = v74;
                        }
                      }
                    }
                  }
                }
              }
            }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    MEMORY[0x1895F8858](v20);
    *((_BYTE *)&v66 - 16) = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v50 = v67;
    dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
    if (v70 < 2)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v13, v50, a3);
      v13[*(int *)(v11 + 36)] = v36;
      MEMORY[0x186E20D4C](&protocol conformance descriptor for UTF16EndianAdaptor<A>, v11);
      uint64_t v38 = specialized String.init<A, B>(_validating:as:)((uint64_t)v13, v11);
      if (!v51) {
        return 0LL;
      }
      return v38;
    }

    return v69;
  }

  if (v24 > 9)
  {
    if (v24 != 10)
    {
      if (v24 == 2348810496LL)
      {
        Swift::String v36 = 2;
        goto LABEL_18;
      }

        uint64_t v43 = (void *)(*(void *)(v41 + 56) + 16 * v36);
        swift_unknownObjectRelease();
        *uint64_t v43 = v11;
        v43[1] = v34;
LABEL_36:
        *(void *)(v4 + 40) = v41;
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v41 = v89;
        if ((v37 & 1) == 0) {
          goto LABEL_34;
        }
        goto LABEL_30;
      }
    }

    Swift::String v84 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _TimeZoneProtocol>);
    unint64_t v66 = static _DictionaryStorage.copy(original:)();
    uint64_t v41 = v66;
    if (!*(void *)(v89 + 16)) {
      goto LABEL_111;
    }
    uint64_t v67 = (char *)(v66 + 64);
    uint64_t v86 = (char *)(v89 + 64);
    uint64_t v68 = (unint64_t)((1LL << *(_BYTE *)(v41 + 32)) + 63) >> 6;
    if (v41 != v89 || v67 >= &v86[8 * v68]) {
      memmove(v67, v86, 8 * v68);
    }
    unint64_t v69 = 0LL;
    *(void *)(v41 + 16) = *(void *)(v89 + 16);
    unint64_t v70 = 1LL << *(_BYTE *)(v89 + 32);
    Swift::String v71 = -1LL;
    if (v70 < 64) {
      Swift::String v71 = ~(-1LL << v70);
    }
    uint64_t v72 = v71 & *(void *)(v89 + 64);
    Swift::String v85 = (unint64_t)(v70 + 63) >> 6;
    while (1)
    {
      if (v72)
      {
        unint64_t v73 = __clz(__rbit64(v72));
        v72 &= v72 - 1;
        unint64_t v74 = v73 | (v69 << 6);
      }

      else
      {
        Swift::String v81 = v69 + 1;
        if (__OFADD__(v69, 1LL))
        {
LABEL_114:
          __break(1u);
          goto LABEL_115;
        }

        if (v81 >= v85) {
          goto LABEL_111;
        }
        Swift::String v82 = *(void *)&v86[8 * v81];
        ++v69;
        if (!v82)
        {
          unint64_t v69 = v81 + 1;
          if (v81 + 1 >= v85) {
            goto LABEL_111;
          }
          Swift::String v82 = *(void *)&v86[8 * v69];
          if (!v82)
          {
            unint64_t v69 = v81 + 2;
            if (v81 + 2 >= v85) {
              goto LABEL_111;
            }
            Swift::String v82 = *(void *)&v86[8 * v69];
            if (!v82)
            {
              unint64_t v69 = v81 + 3;
              if (v81 + 3 >= v85) {
                goto LABEL_111;
              }
              Swift::String v82 = *(void *)&v86[8 * v69];
              if (!v82)
              {
                unint64_t v69 = v81 + 4;
                if (v81 + 4 >= v85) {
                  goto LABEL_111;
                }
                Swift::String v82 = *(void *)&v86[8 * v69];
                if (!v82)
                {
                  unint64_t v69 = v81 + 5;
                  if (v81 + 5 >= v85) {
                    goto LABEL_111;
                  }
                  Swift::String v82 = *(void *)&v86[8 * v69];
                  if (!v82)
                  {
                    unint64_t v69 = v81 + 6;
                    if (v81 + 6 >= v85) {
                      goto LABEL_111;
                    }
                    Swift::String v82 = *(void *)&v86[8 * v69];
                    if (!v82)
                    {
                      Swift::String v83 = v81 + 7;
                      if (v83 >= v85) {
                        goto LABEL_111;
                      }
                      Swift::String v82 = *(void *)&v86[8 * v83];
                      if (v82)
                      {
                        unint64_t v69 = v83;
                      }

                      else
                      {
                        do
                        {
                          unint64_t v69 = v83 + 1;
                          if (__OFADD__(v83, 1LL)) {
                            goto LABEL_116;
                          }
                          if (v69 >= v85) {
                            goto LABEL_111;
                          }
                          Swift::String v82 = *(void *)&v86[8 * v69];
                          ++v83;
                        }

                        while (!v82);
                      }
                    }
                  }
                }
              }
            }
          }
        }

        uint64_t v72 = (v82 - 1) & v82;
        unint64_t v74 = __clz(__rbit64(v82)) + (v69 << 6);
      }

      Swift::String v75 = 16 * v74;
      unint64_t v76 = (uint64_t *)(*(void *)(v89 + 48) + v75);
      uint64_t v78 = *v76;
      Swift::String v77 = v76[1];
      Swift::String v79 = *(_OWORD *)(*(void *)(v89 + 56) + v75);
      v80 = (void *)(*(void *)(v41 + 48) + v75);
      void *v80 = v78;
      v80[1] = v77;
      *(_OWORD *)(*(void *)(v41 + 56) + v75) = v79;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
  }

  uint64_t v8 = *(void *)(v2 + 48);
  if (*(void *)(v8 + 16))
  {
    uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(0LL);
    if ((v10 & 1) != 0)
    {
      uint64_t v11 = *(void **)(*(void *)(v8 + 56) + 16 * v9);
      swift_unknownObjectRetain();
      return (uint64_t)v11;
    }
  }

  type metadata accessor for _TimeZoneGMTICU();
  uint64_t v11 = (void *)swift_allocObject();
  uint64_t v12 = specialized static TimeZone.nameForSecondsFromGMT(_:)(0LL);
  if (!v13)
  {
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  id v14 = v12;
  id v15 = v13;
  id v16 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU,  (uint64_t)&protocol conformance descriptor for _TimeZoneGMTICU);
  v11[3] = v14;
  v11[4] = v15;
  v11[2] = 0LL;
  swift_retain();
  id v17 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v88 = *(void *)(v4 + 48);
  *(void *)(v4 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = 0x8000000000000000LL;
  id v19 = specialized __RawDictionaryStorage.find<A>(_:)(0LL);
  id v20 = *(void *)(v88 + 16);
  id v21 = (v18 & 1) == 0;
  id v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v15) = v18;
    if (*(void *)(v88 + 24) < v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, v17);
      id v23 = v88;
      id v24 = specialized __RawDictionaryStorage.find<A>(_:)(0LL);
      if ((v15 & 1) != (v25 & 1)) {
        goto LABEL_117;
      }
      id v19 = v24;
      if ((v15 & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if ((v17 & 1) != 0)
    {
      id v23 = v88;
      if ((v18 & 1) == 0)
      {
LABEL_21:
        while (1)
        {
          *(void *)(v23 + 8 * (v19 >> 6) + 64) |= 1LL << v19;
          *(void *)(*(void *)(v23 + 48) + 8 * v19) = 0LL;
          Swift::UInt v30 = (void *)(*(void *)(v23 + 56) + 16 * v19);
          *Swift::UInt v30 = v11;
          v30[1] = v16;
          Swift::UInt8 v31 = *(void *)(v23 + 16);
          Swift::UInt8 v32 = __OFADD__(v31, 1LL);
          Swift::UInt8 v33 = v31 + 1;
          if (!v32) {
            break;
          }
          __break(1u);
LABEL_75:
          swift_bridgeObjectRelease();
          if ((v15 & 1) != 0) {
            goto LABEL_14;
          }
        }

        *(void *)(v23 + 16) = v33;
        goto LABEL_23;
      }

        __break(1u);
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_30;
  }

  Swift::UInt8 v31 = 18LL;
  Swift::UInt8 v32 = v17;
  Swift::UInt8 v33 = 0LL;
  Swift::Int v34 = 0LL;
  Swift::String v35 = 1;
  lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
  swift_willThrowTypedImpl();
LABEL_17:
  *(void *)(v9 + 56) = v18;
  *(void *)(v9 + 64) = specialized static _CalendarGregorian.yearMonthDayFromJulianDay(_:useJulianRef:)(v18, 0);
  id v16 = v30;
LABEL_18:
  *(_OWORD *)(v9 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = v16;
  swift_unknownObjectRelease();
  if ((v12 & 1) == 0 && (unint64_t)(a4 - 8) >= 0xFFFFFFFFFFFFFFF9LL)
  {
    *(void *)(v9 + 120) = a4;
    *(_BYTE *)(v9 + 12_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
  }

  if ((v10 & 1) == 0)
  {
    id v25 = 7LL;
    if (v11 < 7) {
      id v25 = v11;
    }
    if (v25 <= 1) {
      id v25 = 1LL;
    }
    *(void *)(v9 + 136) = v25;
    *(_BYTE *)(v9 + 144) = 0;
  }

  __src[14] = (int)ucal_get();
  LOBYTE(__src[15]) = 0;
  if ((a2 & 0x20) == 0)
  {
LABEL_16:
    if ((a2 & 0x40) == 0) {
      goto LABEL_17;
    }
LABEL_32:
    __src[18] = (int)ucal_get();
    LOBYTE(__src[19]) = 0;
    if ((a2 & 0x2000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_33;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

    if ((v26 & 1) != 0) {
      break;
    }
LABEL_33:
    uint64_t v78 = v5;
    Swift::String v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    id v22 = &v78;
    Swift::String v35 = StringProtocol._toUTF16Offsets(_:)();
    uint64_t v12 = v36 - v35;
    if (!__OFSUB__(v36, v35))
    {
      Swift::String v37 = (uint64_t *)v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
        goto LABEL_35;
      }
      goto LABEL_78;
    }

    __break(1u);
LABEL_75:
    unint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  i[2] + 1LL,  1,  i);
LABEL_15:
    v3 |= 4u;
    id v24 = i[2];
    id v23 = i[3];
    if (v24 >= v23 >> 1) {
      unint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v23 > 1),  v24 + 1,  1,  i);
    }
    i[2] = v24 + 1;
    id v25 = &i[2 * v24];
    v25[4] = v22;
    v25[5] = v12;
  }

  while (1)
  {
    uint64_t v41 = *(_BYTE *)(a1 + 168);
    if ((v41 & 1) == 0) {
      break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  i[2] + 1LL,  1,  i);
    }
    uint64_t v43 = i[2];
    uint64_t v42 = i[3];
    if (v43 >= v42 >> 1) {
      unint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v42 > 1),  v43 + 1,  1,  i);
    }
    i[2] = v43 + 1;
    *(_OWORD *)&i[2 * v43 + 4] = xmmword_1837A9530;
    if ((*(_BYTE *)(a1 + 192) & 1) != 0) {
      goto LABEL_44;
    }
LABEL_53:
    char v54 = v5;
    uint64_t v5 = *(void *)(a1 + 176);
    uint64_t v78 = v54;
    Swift::String v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    Swift::String v37 = &v78;
    uint64_t v55 = StringProtocol._toUTF16Offsets(_:)();
    uint64_t v12 = v56 - v55;
    if (!__OFSUB__(v56, v55))
    {
      uint64_t v57 = (uint64_t *)v55;
      uint64_t v59 = i[2];
      uint64_t v58 = i[3];
      uint64_t v60 = v59 + 1;
      if (v59 >= v58 >> 1) {
        goto LABEL_80;
      }
      goto LABEL_55;
    }

    uint64_t v28 = a3[8];
    if (a4 != a5)
    {
      uint64_t v5 = a3[11];
      uint64_t v12 = v81;
      if (v28)
      {
        uint64_t v7 = 0LL;
        uint64_t v8 = a3[9];
        uint64_t v9 = a3[10];
        uint64_t v6 = ((-15LL << ((4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v28 + 18) | ((unint64_t)*(unsigned __int16 *)(v28 + 16) << ((4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C));
      }

      else
      {
        uint64_t v6 = 0LL;
        uint64_t v7 = 0LL;
        uint64_t v8 = 0LL;
        uint64_t v9 = 0LL;
      }

      goto LABEL_4;
    }

    if (v28) {
      Swift::UInt v29 = a3[10];
    }
    else {
      Swift::UInt v29 = 0LL;
    }
    if (a4 < 0 || v29 < a5) {
      goto LABEL_190;
    }
    Swift::UInt v30 = a3[11];
    if (v28) {
      break;
    }
    uint64_t v9 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v8 = 0LL;
LABEL_94:
    uint64_t v13 = __OFSUB__(v18, v9);
    uint64_t v9 = v18 - v9;
    if (v13) {
      goto LABEL_191;
    }
    uint64_t v12 = v81;
    uint64_t v5 = v30;
LABEL_4:
    if (v9 == v12) {
      return (uint64_t *)v11;
    }
  }

  Swift::UInt8 v31 = a3[9];
  Swift::UInt8 v32 = *(unsigned __int8 *)(v28 + 18);
  if (!*(_WORD *)(v28 + 16) || a3[10] <= a5)
  {
    uint64_t v6 = ((-15LL << ((4 * v32 + 8) & 0x3C)) - 1) & v32 | ((unint64_t)*(unsigned __int16 *)(v28 + 16) << ((4 * v32 + 8) & 0x3C));
    swift_unknownObjectRetain();
    uint64_t v9 = 0LL;
    uint64_t v7 = 0LL;
LABEL_93:
    swift_unknownObjectRetain();
    uint64_t v8 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v30, v6, v7, v28, v31);
    uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
    a3 = v82;
    id v18 = a5;
    goto LABEL_94;
  }

  if (*(_BYTE *)(v28 + 18))
  {
    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v9 = a5;
    Swift::UInt8 v33 = v28;
    while (1)
    {
      Swift::String v35 = *(unsigned __int16 *)(v33 + 16);
      if (!*(_WORD *)(v33 + 16)) {
        goto LABEL_42;
      }
      Swift::String v36 = *(void *)(v33 + 40);
      Swift::String v37 = v9 - v36;
      if (__OFSUB__(v9, v36)) {
        goto LABEL_181;
      }
      if (__OFADD__(v37, 1LL)) {
        goto LABEL_182;
      }
      if (v37 + 1 <= 0)
      {
        Swift::String v35 = 0LL;
      }

      else
      {
        if ((_DWORD)v35 == 1)
        {
          v9 -= v36;
LABEL_42:
          if (v9) {
            goto LABEL_180;
          }
          goto LABEL_43;
        }

        uint64_t v38 = *(void *)(v33 + 64);
        uint64_t v13 = __OFSUB__(v37, v38);
        uint64_t v39 = v37 - v38;
        if (v13) {
          goto LABEL_187;
        }
        if (__OFADD__(v39, 1LL)) {
          goto LABEL_189;
        }
        if (v39 + 1 >= 1)
        {
          if ((_DWORD)v35 != 2)
          {
            uint64_t v40 = (void *)(v33 + 88);
            uint64_t v41 = 2LL;
            while (v35 != v41)
            {
              uint64_t v9 = v39 - *v40;
              if (__OFSUB__(v39, *v40)) {
                goto LABEL_173;
              }
              if (__OFADD__(v9, 1LL)) {
                goto LABEL_174;
              }
              if (v9 + 1 < 1)
              {
                Swift::String v35 = v41;
                uint64_t v9 = v39;
                goto LABEL_43;
              }

              ++v41;
              v40 += 3;
              uint64_t v39 = v9;
              if (v35 == v41) {
                goto LABEL_42;
              }
            }

    id v16 = 0;
    goto LABEL_31;
  }

  if (a1 == a2)
  {
    __break(1u);
  }

  else if (!__OFSUB__(a2, 1LL))
  {
    uint64_t v10 = 0;
    if (a2 - 1 >= v18) {
      id v14 = v18;
    }
    else {
      id v14 = a2 - 1;
    }
    if (v18 >= a1) {
      uint64_t v12 = v14;
    }
    else {
      uint64_t v12 = a1;
    }
    goto LABEL_22;
  }

  __break(1u);
  return result;
}

      __break(1u);
LABEL_31:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a1[2] + 1LL,  1,  a1);
      a1 = (void *)result;
      *(void *)id v18 = result;
      goto LABEL_25;
    }

    id v18 = v26;
    goto LABEL_22;
  }

                if ([v5 grammaticalPerson]) {
                  goto LABEL_32;
                }
                goto LABEL_31;
              }

              goto LABEL_20;
            }

            objc_msgSend(v5, "setNumber:", objc_msgSend(a2, "number"));
          }

          if (![a2 grammaticalCase]) {
            goto LABEL_22;
          }
          if ((a3 & 1) != 0)
          {
LABEL_21:
            objc_msgSend(v5, "setGrammaticalCase:", objc_msgSend(a2, "grammaticalCase"));
            goto LABEL_22;
          }

    if ((*(_BYTE *)&indexSet->_indexSetFlags & 2) != 0)
    {
      id v16 = indexSet->_internal._singleRange._range.location;
    }

    else
    {
      id v21 = -[NSIndexSet lastIndex](indexSet, "lastIndex");
      id v16 = 0x7FFFFFFFFFFFFFFFLL;
      if (v21 != 0x7FFFFFFFFFFFFFFFLL && v21 > 0x3F)
      {
        id v22 = 0;
        goto LABEL_36;
      }

      Swift::UInt v29 = 0LL;
      Swift::UInt v30 = 0LL;
      id v16 = 0LL;
      indexSetFlags = indexSet->_indexSetFlags;
      p_internal = &indexSet->_internal;
      Swift::UInt8 v33 = ($BA656A43A73A71AF6C4B982E4240B787 *)(&indexSet->_internal._singleBitfield + 1);
      if ((*(_BYTE *)&indexSetFlags & 2) != 0) {
        Swift::UInt8 v33 = &indexSet->_internal;
      }
      while (1)
      {
        Swift::Int v34 = v33;
        if ((*(_BYTE *)&indexSetFlags & 3) == 0) {
          Swift::Int v34 = ($BA656A43A73A71AF6C4B982E4240B787 *)(p_internal->_singleRange._range.location + 8);
        }
        Swift::String v35 = v34->_singleRange._range.location;
        Swift::String v36 = v34->_singleRange._range.location != 0;
        if ((*(_BYTE *)&indexSetFlags & 1) == 0 && v35) {
          Swift::String v36 = *(void *)(p_internal->_singleRange._range.location + 8);
        }
        if (v30 >= v36) {
          break;
        }
        Swift::String v37 = &indexSet->_internal;
        if ((*(_BYTE *)&indexSetFlags & 1) == 0) {
          Swift::String v37 = ($BA656A43A73A71AF6C4B982E4240B787 *)(p_internal->_singleRange._range.location
        }
        uint64_t v38 = &v37[v29];
        uint64_t v40 = v38->_singleRange._range.location;
        length = v38->_singleRange._range.length;
        uint64_t v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)length << v40;
        if (length) {
          uint64_t v42 = v41;
        }
        else {
          uint64_t v42 = 0LL;
        }
        v16 |= v42;
        ++v30;
        ++v29;
      }
    }

  _Block_object_dispose(v26, 8);
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);
  free(v24);
}

    LODWORD(a1) = 0;
    goto LABEL_37;
  }

  if ((objc_opt_isKindOfClass() & 1) != 0
    && [a3 containsValueForKey:@"NS.minimalBookmarkData"]
    && [a3 _strictSecureDecodingEnabled])
  {
    uint64_t v6 = (os_log_s *)_NSOSLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v27 = _NSMethodExceptionProem(a1, sel_initWithCoder_);
      _os_log_fault_impl( &dword_182EB1000,  v6,  OS_LOG_TYPE_FAULT,  "%@: Skipped decoding bookmark data due to NSKeyedUnarchiver mode.",  buf,  0xCu);
    }

            uint64_t v6 = 0LL;
            goto LABEL_9;
          }

          uint64_t v10 = vdup_n_s16(v5);
          if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x40005000602C00LL, (uint16x4_t)vadd_s16( v10,  (int16x4_t)0x602850CED05400LL))) & 1) != 0 || (uint64_t v11 = v5 & 0xFF00, v11 == 4352)
            || (v5 & 0xFFE0) == 0xA960)
          {
            uint64_t v6 = 3LL;
            goto LABEL_9;
          }

          if ((vmaxv_u16(vcgt_u16((uint16x4_t)0xFC006071800200LL, (uint16x4_t)vadd_s16( v10,  (int16x4_t)0x10001F0D1800700LL))) & 1) != 0)
          {
            uint64_t v6 = 2LL;
            goto LABEL_9;
          }

          id v17 = v5 & 0xFFE0;
          uint64_t v6 = 0LL;
          if (v5 - 8204 < 6) {
            goto LABEL_9;
          }
          if (v5 == 8217) {
            goto LABEL_9;
          }
          uint64_t v6 = 0LL;
          if (v5 - 8234 < 5) {
            goto LABEL_9;
          }
          if ((v5 & 0xFFF0) == 0x2060) {
            goto LABEL_9;
          }
          uint64_t v6 = 0LL;
          if (v5 == 65279 || (v5 & 0xFFF0) == 0xFE00) {
            goto LABEL_9;
          }
          if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x700E000260030LL, (uint16x4_t)vadd_s16( v10,  (int16x4_t)0x50058E0E300E295LL))) & 1) == 0 && v11 != 7680 && v17 != 11360)
          {
            if (v5 - 7462 >= 5 && v11 != 7936)
            {
              uint64_t v6 = 0LL;
              if ((vmaxv_u16( vcgt_u16( (uint16x4_t)0x300030003F0065LL,  (uint16x4_t)vadd_s16(v10, (int16x4_t)0xDF30DF90E2D4E265LL))) & 1) != 0 || v17 == 42752)
              {
                goto LABEL_9;
              }

              if (v5 - 0x2000 >= 0xC00 && v5 <= 0xFFFB && (v5 & 0xFF80) != 0x2E00)
              {
                if (v11 == 3840)
                {
                  uint64_t v6 = 24LL;
                  goto LABEL_9;
                }

                if (v5 - 4096 < 0xA0)
                {
                  uint64_t v6 = 25LL;
                  goto LABEL_9;
                }

                if (v5 - 4256 < 0x60)
                {
                  uint64_t v6 = 26LL;
                  goto LABEL_9;
                }

                if (v5 - 4608 < 0x1A0)
                {
                  uint64_t v6 = 27LL;
                  goto LABEL_9;
                }

                if (v5 - 5024 < 0x60)
                {
                  uint64_t v6 = 28LL;
                  goto LABEL_9;
                }

                if (v5 - 5120 < 0x280)
                {
                  uint64_t v6 = 29LL;
                  goto LABEL_9;
                }

                if ((v5 & 0xFF80) == 0x1780)
                {
                  uint64_t v6 = 30LL;
                  goto LABEL_9;
                }

                if (v5 - 6144 < 0xB0)
                {
                  uint64_t v6 = 31LL;
                  goto LABEL_9;
                }

                if (v5 >> 10 == 54)
                {
                  uint64_t v12 = v3 + 1;
                  if (v3 + 1 < a2 && (*(_WORD *)(a1 + 2 * v12) & 0xFC00) == 0xDC00)
                  {
                    uint64_t v13 = 1025 * v5 - 56744960;
                    id v14 = (1025 * v5 - 56613888) & 0xFFFF0000;
                    if (v13 >= 0x10000 || v14 == 0x10000) {
                      uint64_t v6 = 1LL;
                    }
                    else {
                      uint64_t v6 = 2LL;
                    }
                    uint64_t v3 = v12;
                    goto LABEL_9;
                  }
                }
              }

    [v25 removeObjectAtIndex:0];
    if (![v25 count]) {
      goto LABEL_31;
    }
  }

  uint64_t v39 = (os_log_s *)_NSOSLog();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138477827;
    uint64_t v43 = v26;
    _os_log_error_impl( &dword_182EB1000,  v39,  OS_LOG_TYPE_ERROR,  "-[NSFileWrapper initWithSerializedRepresentation:] encountered an invalid preferredFileName: %{private}@",  buf,  0xCu);
  }