void _PlistUnkeyedEncodingContainerBPlist.superEncoder()(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  v4 = *v1;
  v3 = v1[1];
  v5 = *(unsigned __int8 *)(v3 + 40) >> 4;
  if (v5 == 6)
  {
    v6 = v3 + 32;
    goto LABEL_5;
  }

  if (v5 == 5)
  {
    v6 = v3 + 16;
LABEL_5:
    v7 = *(void *)(*(void *)v6 + 16LL);
    v8 = *(void *)(v4 + 40);
    v9 = type metadata accessor for __PlistReferencingEncoderBPlist();
    swift_allocObject();
    swift_retain();
    swift_retain();
    v10 = swift_retain();
    v11 = __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)(v10, v7, v8, v3);
    a1[3] = v9;
    a1[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type __PlistReferencingEncoderBPlist and conformance __PlistEncoderBPlist,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderBPlist,  (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
    *a1 = v11;
    return;
  }

  __break(1u);
}

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance _PlistUnkeyedEncodingContainerBPlist()
{
  uint64_t v1 = *(void *)(v0 + 8);
  int v2 = *(unsigned __int8 *)(v1 + 40) >> 4;
  if (v2 == 6)
  {
    uint64_t v3 = v1 + 32;
    return *(void *)(*(void *)v3 + 16LL);
  }

  if (v2 == 5)
  {
    uint64_t v3 = v1 + 16;
    return *(void *)(*(void *)v3 + 16LL);
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance _PlistUnkeyedEncodingContainerBPlist()
{
  return swift_release();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist()
{
  return swift_release();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist( unint64_t a1, unint64_t a2)
{
  return _PlistUnkeyedEncodingContainerBPlist.encode(_:)(a1, a2);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist( double a1)
{
  return swift_release();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist( float a1)
{
  return swift_release();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_release();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _PlistUnkeyedEncodingContainerBPlist( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _PlistUnkeyedEncodingContainerBPlist.encode<A>(_:)(a1, a2, a3);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderBPlist.encode(_:)( Swift::Bool a1)
{
  if (((*(uint64_t (**)(void))(*(void *)v1 + 240LL))() & 1) != 0)
  {
    swift_retain_n();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    swift_release();
  }

  else
  {
    __break(1u);
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderBPlist.encode(_:)( Swift::String a1)
{
  uint64_t v2 = v1;
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (((*(uint64_t (**)(void))(*(void *)v1 + 240LL))() & 1) != 0)
  {
    if ((specialized Sequence.allSatisfy(_:)(countAndFlagsBits, (unint64_t)object) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      id v5 = (id)String.hashValue.getter();
      unsigned __int8 v6 = 1;
    }

    else
    {
      v7 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      id v5 = objc_msgSend(v7, sel_hash);
      swift_unknownObjectRelease();
      unsigned __int8 v6 = 0;
    }

    uint64_t v8 = *(void *)(v2 + 88);
    uint64_t v9 = *(void *)(v8 + 16);
    unint64_t v10 = *(void *)(v8 + 24);
    uint64_t v11 = *(void *)(v8 + 32);
    *(void *)(v8 + 16) = countAndFlagsBits;
    *(void *)(v8 + 24) = object;
    *(void *)(v8 + 32) = v5;
    unsigned __int8 v12 = *(_BYTE *)(v8 + 40);
    *(_BYTE *)(v8 + 40) = v6;
    outlined copy of _BPlistEncodingFormat.Reference.Backing( countAndFlagsBits,  (unint64_t)object,  (uint64_t)v5,  v6);
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v9, v10, v11, v12);
    swift_retain();
    if ((specialized Set._Variant.insert(_:)(&v14, v8) & 1) != 0)
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + 16) = 2LL;
      *(_BYTE *)(v13 + 40) = -112;
      *(void *)(v13 + 48) = -1LL;
      swift_bridgeObjectRelease();
      swift_release();
      *(void *)(v2 + 88) = v13;
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    swift_release();
  }

  else
  {
    __break(1u);
  }

uint64_t __PlistEncoderBPlist.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t result = (*(uint64_t (**)(void))(*v3 + 240LL))();
  if ((result & 1) != 0)
  {
    unint64_t v10 = v3[5];
    swift_retain();
    uint64_t v11 = specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(a1, v10, 0LL, 0LL, 0LL, 255, a2, a3);
    if (!v5)
    {
      if (!v11)
      {
        uint64_t v12 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x18961AFE8]);
        uint64_t v14 = v13;
        uint64_t v16 = v15;
        type metadata accessor for _BPlistEncodingFormat.Reference();
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = v12;
        *(void *)(v17 + 24) = v14;
        *(void *)(v17 + 32) = v16;
        *(_BYTE *)(v17 + 40) = 96;
        *(void *)(v17 + 48) = -1LL;
      }

      swift_release();
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }

    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t protocol witness for Encoder.codingPath.getter in conformance __PlistEncoderBPlist()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_retain();
  uint64_t v2 = _CodingPathNode.path.getter(v1);
  swift_release();
  return v2;
}

uint64_t protocol witness for SingleValueEncodingContainer.encodeNil() in conformance __PlistEncoderBPlist()
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v0 + 240LL))();
  if ((result & 1) != 0)
  {
    swift_retain_n();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist( Swift::Bool a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist( uint64_t a1, uint64_t a2)
{
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist( double a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 240LL))();
  if ((result & 1) != 0)
  {
    specialized _BPlistEncodingFormat.number<A>(from:)(a1);
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist( float a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 240LL))();
  if ((result & 1) != 0)
  {
    specialized _BPlistEncodingFormat.number<A>(from:)(a1);
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist( a1,  a2,  a3,  (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist( a1,  a2,  a3,  (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist( a1,  a2,  a3,  (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist( a1,  a2,  a3,  (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist( a1,  a2,  a3,  (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist( a1,  a2,  a3,  (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist( a1,  a2,  a3,  (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist( a1,  a2,  a3,  (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v4 + 240LL))();
  if ((result & 1) != 0)
  {
    a4(a1);
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist()
{
  return SingleValueEncodingContainer.encode(_:)();
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance __PlistEncoderBPlist( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __PlistEncoderBPlist.encode<A>(_:)(a1, a2, a3);
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(unsigned __int16 a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + 32) = 0LL;
  unsigned __int8 v8 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  char v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  uint64_t v10 = v13;
  if ((v9 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0LL;
    *(void *)(v11 + 32) = 0LL;
    *(void *)(v11 + 16) = 2LL;
    *(_BYTE *)(v11 + 40) = -112;
    *(void *)(v11 + 48) = -1LL;
    swift_release();
    *(void *)(v2 + 32) = v11;
  }

  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(char a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + 32) = 0LL;
  unsigned __int8 v8 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  char v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  uint64_t v10 = v13;
  if ((v9 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0LL;
    *(void *)(v11 + 32) = 0LL;
    *(void *)(v11 + 16) = 2LL;
    *(_BYTE *)(v11 + 40) = -112;
    *(void *)(v11 + 48) = -1LL;
    swift_release();
    *(void *)(v2 + 32) = v11;
  }

  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(__int16 a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + 32) = 0LL;
  unsigned __int8 v8 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  char v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  uint64_t v10 = v13;
  if ((v9 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0LL;
    *(void *)(v11 + 32) = 0LL;
    *(void *)(v11 + 16) = 2LL;
    *(_BYTE *)(v11 + 40) = -112;
    *(void *)(v11 + 48) = -1LL;
    swift_release();
    *(void *)(v2 + 32) = v11;
  }

  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(int a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + 32) = 0LL;
  unsigned __int8 v8 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  char v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  uint64_t v10 = v13;
  if ((v9 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0LL;
    *(void *)(v11 + 32) = 0LL;
    *(void *)(v11 + 16) = 2LL;
    *(_BYTE *)(v11 + 40) = -112;
    *(void *)(v11 + 48) = -1LL;
    swift_release();
    *(void *)(v2 + 32) = v11;
  }

  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v4 = *(void *)(v3 + 24);
  uint64_t v6 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + 32) = 0LL;
  unsigned __int8 v7 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v4, v6, v7);
  swift_retain();
  char v8 = specialized Set._Variant.insert(_:)(&v12, v3);
  uint64_t v9 = v12;
  if ((v8 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 24) = 0LL;
    *(void *)(v10 + 32) = 0LL;
    *(void *)(v10 + 16) = 2LL;
    *(_BYTE *)(v10 + 40) = -112;
    *(void *)(v10 + 48) = -1LL;
    swift_release();
    *(void *)(v2 + 32) = v10;
  }

  return v9;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v4 = *(void *)(v3 + 24);
  uint64_t v6 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + 32) = 0LL;
  unsigned __int8 v7 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 16;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v4, v6, v7);
  swift_retain();
  char v8 = specialized Set._Variant.insert(_:)(&v12, v3);
  uint64_t v9 = v12;
  if ((v8 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 24) = 0LL;
    *(void *)(v10 + 32) = 0LL;
    *(void *)(v10 + 16) = 2LL;
    *(_BYTE *)(v10 + 40) = -112;
    *(void *)(v10 + 48) = -1LL;
    swift_release();
    *(void *)(v2 + 32) = v10;
  }

  return v9;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + 32) = 0LL;
  unsigned __int8 v8 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  char v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  uint64_t v10 = v13;
  if ((v9 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0LL;
    *(void *)(v11 + 32) = 0LL;
    *(void *)(v11 + 16) = 2LL;
    *(_BYTE *)(v11 + 40) = -112;
    *(void *)(v11 + 48) = -1LL;
    swift_release();
    *(void *)(v2 + 32) = v11;
  }

  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(unsigned int a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + 32) = 0LL;
  unsigned __int8 v8 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  char v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  uint64_t v10 = v13;
  if ((v9 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0LL;
    *(void *)(v11 + 32) = 0LL;
    *(void *)(v11 + 16) = 2LL;
    *(_BYTE *)(v11 + 40) = -112;
    *(void *)(v11 + 48) = -1LL;
    swift_release();
    *(void *)(v2 + 32) = v11;
  }

  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(double a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  uint64_t v6 = *(void *)(v3 + 32);
  *(double *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + 32) = 0LL;
  unsigned __int8 v7 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 48;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v4, v5, v6, v7);
  swift_retain();
  char v8 = specialized Set._Variant.insert(_:)(&v12, v3);
  uint64_t v9 = v12;
  if ((v8 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 24) = 0LL;
    *(void *)(v10 + 32) = 0LL;
    *(void *)(v10 + 16) = 2LL;
    *(_BYTE *)(v10 + 40) = -112;
    *(void *)(v10 + 48) = -1LL;
    swift_release();
    *(void *)(v2 + 32) = v10;
  }

  return v9;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(float a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  uint64_t v6 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = LODWORD(a1);
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + 32) = 0LL;
  unsigned __int8 v7 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 64;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v4, v5, v6, v7);
  swift_retain();
  char v8 = specialized Set._Variant.insert(_:)(&v12, v3);
  uint64_t v9 = v12;
  if ((v8 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 24) = 0LL;
    *(void *)(v10 + 32) = 0LL;
    *(void *)(v10 + 16) = 2LL;
    *(_BYTE *)(v10 + 40) = -112;
    *(void *)(v10 + 48) = -1LL;
    swift_release();
    *(void *)(v2 + 32) = v10;
  }

  return v9;
}

uint64_t _BPlistEncodingFormat.data(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v5 = *(void *)(v4 + 16);
  unint64_t v6 = *(void *)(v4 + 24);
  uint64_t v7 = *(void *)(v4 + 32);
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = 0LL;
  unsigned __int8 v8 = *(_BYTE *)(v4 + 40);
  *(_BYTE *)(v4 + 40) = 0x80;
  outlined copy of Data._Representation(a1, a2);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  char v9 = specialized Set._Variant.insert(_:)(&v13, v4);
  uint64_t v10 = v13;
  if ((v9 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0LL;
    *(void *)(v11 + 32) = 0LL;
    *(void *)(v11 + 16) = 2LL;
    *(_BYTE *)(v11 + 40) = -112;
    *(void *)(v11 + 48) = -1LL;
    swift_release();
    *(void *)(v3 + 32) = v11;
  }

  return v10;
}

uint64_t specialized __PlistEncoderBPlist.wrap<A>(_:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v88 = a4;
  int v10 = ~a6;
  unint64_t v67 = *(void *)(*(void *)(v6 + 16) + 16LL);
  uint64_t v11 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x18961AFE8]);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  type metadata accessor for _BPlistEncodingFormat.Reference();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 24) = v13;
  v72 = (void *)(v16 + 24);
  *(void *)(v16 + 16) = v11;
  *(void *)(v16 + 32) = v15;
  *(_BYTE *)(v16 + 40) = 96;
  *(void *)(v16 + 48) = -1LL;
  swift_retain();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  uint64_t v74 = v16;
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  uint64_t v68 = v6 + 16;
  specialized ContiguousArray._endMutation()();
  if (!v10)
  {
    swift_retain();
    uint64_t v17 = (void *)a2;
    uint64_t v20 = v88;
    uint64_t v19 = a3;
    goto LABEL_11;
  }

  uint64_t v17 = (void *)swift_allocObject();
  v17[5] = &type metadata for _CodingKey;
  v17[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v18 = swift_allocObject();
  v17[2] = v18;
  uint64_t v19 = a3;
  uint64_t v20 = v88;
  *(void *)(v18 + 16) = a3;
  *(void *)(v18 + 24) = v20;
  *(void *)(v18 + 32) = a5;
  *(_BYTE *)(v18 + 40) = a6;
  v17[7] = a2;
  if (a2 >> 62)
  {
    if (a2 >> 62 != 1)
    {
      uint64_t v22 = 0LL;
      goto LABEL_9;
    }

    v21 = (uint64_t *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    v21 = (uint64_t *)(a2 + 64);
  }

  uint64_t v22 = *v21;
  swift_retain();
LABEL_9:
  if (__OFADD__(v22, 1LL)) {
    goto LABEL_63;
  }
  v17[8] = v22 + 1;
LABEL_11:
  outlined copy of _CodingKey?(v19, v20, a5, a6);
  uint64_t v23 = swift_bridgeObjectRetain();
  v24 = specialized _copyCollectionToContiguousArray<A>(_:)(v23);
  swift_bridgeObjectRelease();
  v85 = v24;
  specialized MutableCollection<>.sort(by:)(&v85);
  if (v76)
  {
LABEL_65:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }

  unint64_t v25 = 0LL;
  unint64_t v26 = v85[2];
  v70 = v85;
  v69 = v85 + 4;
  v73 = v17;
  unint64_t v71 = v26;
  if (!v26) {
    goto LABEL_16;
  }
LABEL_13:
  if ((v25 & 0x8000000000000000LL) != 0)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }

  if (v25 >= v70[2])
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }

  outlined init with copy of (key: String, value: Encodable)((uint64_t)&v69[7 * v25], (uint64_t)&v81);
  unint64_t v27 = v25 + 1;
  while (1)
  {
    outlined init with take of (key: String, value: Encodable)?((uint64_t)&v81, (uint64_t)&v85);
    unint64_t v28 = v86;
    if (!v86) {
      break;
    }
    unint64_t v77 = v27;
    unint64_t v29 = (unint64_t)v85;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v87, (uint64_t)&v81);
    if ((v28 & 0x2000000000000000LL) != 0) {
      unint64_t v30 = HIBYTE(v28) & 0xF;
    }
    else {
      unint64_t v30 = v29 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v31 = (v29 >> 59) & 1;
    if ((v28 & 0x1000000000000000LL) == 0) {
      LOBYTE(v31) = 1;
    }
    uint64_t v32 = 4LL << v31;
    uint64_t v88 = v28 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v33 = 15LL;
    do
    {
      while (1)
      {
        if (4 * v30 == v33 >> 14)
        {
          swift_bridgeObjectRetain();
          id v39 = (id)String.hashValue.getter();
          unsigned __int8 v40 = 1;
          goto LABEL_45;
        }

        unint64_t v34 = v33 & 0xC;
        unint64_t v35 = v33;
        if (v34 == v32) {
          unint64_t v35 = _StringGuts._slowEnsureMatchingEncoding(_:)(v33, v29, v28);
        }
        unint64_t v36 = v35 >> 16;
        if (v35 >> 16 >= v30)
        {
          __break(1u);
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }

        if ((v28 & 0x1000000000000000LL) == 0) {
          break;
        }
        char v38 = String.UTF8View._foreignSubscript(position:)();
        if (v34 == v32) {
          goto LABEL_34;
        }
LABEL_37:
        if ((v28 & 0x1000000000000000LL) != 0) {
          goto LABEL_38;
        }
LABEL_24:
        unint64_t v33 = (v33 & 0xFFFFFFFFFFFF0000LL) + 65540;
        if (v38 < 0) {
          goto LABEL_44;
        }
      }

      if ((v28 & 0x2000000000000000LL) != 0)
      {
        unint64_t v79 = v29;
        *(void *)&__int128 v80 = v88;
        char v38 = *((_BYTE *)&v79 + v36);
        if (v34 == v32) {
          goto LABEL_34;
        }
        goto LABEL_37;
      }

      uint64_t v37 = (v28 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v29 & 0x1000000000000000LL) == 0) {
        uint64_t v37 = _StringObject.sharedUTF8.getter();
      }
      char v38 = *(_BYTE *)(v37 + v36);
      if (v34 != v32) {
        goto LABEL_37;
      }
LABEL_34:
      unint64_t v33 = _StringGuts._slowEnsureMatchingEncoding(_:)(v33, v29, v28);
      if ((v28 & 0x1000000000000000LL) == 0) {
        goto LABEL_24;
      }
LABEL_38:
      if (v30 <= v33 >> 16) {
        goto LABEL_60;
      }
      unint64_t v33 = String.UTF8View._foreignIndex(after:)();
    }

    while ((v38 & 0x80) == 0);
LABEL_44:
    v41 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v39 = objc_msgSend(v41, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v40 = 0;
LABEL_45:
    uint64_t v42 = *(void *)(v75 + 88);
    uint64_t v43 = *(void *)(v42 + 16);
    unint64_t v44 = *(void *)(v42 + 24);
    uint64_t v45 = *(void *)(v42 + 32);
    *(void *)(v42 + 16) = v29;
    *(void *)(v42 + 24) = v28;
    *(void *)(v42 + 32) = v39;
    unsigned __int8 v46 = *(_BYTE *)(v42 + 40);
    *(_BYTE *)(v42 + 40) = v40;
    outlined copy of _BPlistEncodingFormat.Reference.Backing(v29, v28, (uint64_t)v39, v40);
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v43, v44, v45, v46);
    swift_retain();
    char v47 = specialized Set._Variant.insert(_:)((uint64_t *)&v79, v42);
    uint64_t v48 = v79;
    if ((v47 & 1) != 0)
    {
      uint64_t v49 = swift_allocObject();
      *(void *)(v49 + 24) = 0LL;
      *(void *)(v49 + 32) = 0LL;
      *(void *)(v49 + 16) = 2LL;
      *(_BYTE *)(v49 + 40) = -112;
      *(void *)(v49 + 48) = -1LL;
      swift_bridgeObjectRelease();
      swift_release();
      *(void *)(v75 + 88) = v49;
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    uint64_t v51 = *((void *)&v82 + 1);
    uint64_t v50 = v83;
    v52 = __swift_project_boxed_opaque_existential_1(&v81, *((uint64_t *)&v82 + 1));
    if (!specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(v52, v73, v29, v28, 0LL, 0LL, v51, v50))
    {
      uint64_t v53 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x18961AFE8]);
      uint64_t v55 = v54;
      uint64_t v57 = v56;
      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 16) = v53;
      *(void *)(v58 + 24) = v55;
      *(void *)(v58 + 32) = v57;
      *(_BYTE *)(v58 + 40) = 96;
      *(void *)(v58 + 48) = -1LL;
    }

    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v74 + 40) & 0xF0) != 0x60) {
      goto LABEL_64;
    }
    unint64_t v79 = *(void *)(v74 + 16);
    __int128 v80 = *(_OWORD *)(v74 + 24);
    *(void *)(v74 + 16) = 2LL;
    void *v72 = 0LL;
    v72[1] = 0LL;
    *(_BYTE *)(v74 + 40) = -112;
    swift_retain();
    uint64_t v59 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v59, v48);
    uint64_t v60 = *(void *)(v74 + 16);
    unint64_t v61 = *(void *)(v74 + 24);
    uint64_t v62 = *(void *)(v74 + 32);
    *(void *)(v74 + 16) = v79;
    *(_OWORD *)(v74 + 24) = v80;
    unsigned __int8 v63 = *(_BYTE *)(v74 + 40);
    *(_BYTE *)(v74 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v60, v61, v62, v63);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v81);
    unint64_t v26 = v71;
    unint64_t v25 = v77;
    if (v77 != v71) {
      goto LABEL_13;
    }
LABEL_16:
    uint64_t v84 = 0LL;
    __int128 v82 = 0u;
    __int128 v83 = 0u;
    unint64_t v27 = v26;
    __int128 v81 = 0u;
  }

  swift_release();
  if (v67 >= *(void *)(*(void *)v68 + 16LL))
  {
    swift_release();
    swift_release();
    return 0LL;
  }

  else
  {
    uint64_t v64 = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    if (!v64) {
      uint64_t v64 = specialized ContiguousArray.remove(at:)( *(void *)(*(void *)v68 + 16LL) - 1LL,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    }
    uint64_t v65 = v64;
    swift_release();
    swift_release();
  }

  return v65;
}

uint64_t __PlistEncoderBPlist.wrap<A>(_:for:_:)( uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  v90 = a5;
  unint64_t v99 = a3;
  uint64_t v92 = a1;
  uint64_t v100 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  v89 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v96 = (__int128 *)type metadata accessor for Optional();
  uint64_t v9 = *((void *)v96 - 1);
  MEMORY[0x1895F8858](v96);
  uint64_t v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  v95 = (char *)&v86 - v13;
  uint64_t v98 = v5;
  unint64_t v87 = *(void *)(*(void *)(v5 + 16) + 16LL);
  uint64_t v14 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x18961AFE8]);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v91 = type metadata accessor for _BPlistEncodingFormat.Reference();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 24) = v16;
  v93 = (void *)(v19 + 24);
  *(void *)(v19 + 16) = v14;
  *(void *)(v19 + 32) = v18;
  *(_BYTE *)(v19 + 40) = 96;
  *(void *)(v19 + 48) = -1LL;
  swift_retain();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  uint64_t v97 = v19;
  uint64_t v20 = v96;
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  uint64_t v88 = v5 + 16;
  specialized ContiguousArray._endMutation()();
  uint64_t v110 = v9;
  v21 = *(void (**)(char *, unint64_t, __int128 *))(v9 + 16);
  uint64_t v22 = v95;
  v21(v95, v99, v20);
  v21(v11, (unint64_t)v22, v20);
  uint64_t v23 = v100;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v11, 1LL, a4) == 1)
  {
    v24 = *(void (**)(char *, __int128 *))(v110 + 8);
    v24(v22, v20);
    v24(v11, v20);
    swift_retain();
    uint64_t v25 = v98;
    goto LABEL_10;
  }

  unint64_t v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  unint64_t v27 = v89;
  v26(v89, v11, a4);
  unint64_t v28 = (uint64_t *)swift_allocObject();
  unint64_t v29 = v90;
  v28[5] = a4;
  v28[6] = (uint64_t)v29;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28 + 2);
  v26((char *)boxed_opaque_existential_1, v27, a4);
  (*(void (**)(char *, __int128 *))(v110 + 8))(v22, v20);
  v28[7] = a2;
  if (!(a2 >> 62))
  {
    uint64_t v31 = (uint64_t *)(a2 + 64);
    uint64_t v25 = v98;
LABEL_8:
    uint64_t v32 = *v31;
    swift_retain();
    uint64_t v85 = v32 + 1;
    if (__OFADD__(v32, 1LL))
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }

    goto LABEL_9;
  }

  uint64_t v25 = v98;
  if (a2 >> 62 == 1)
  {
    uint64_t v31 = (uint64_t *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_8;
  }

  uint64_t v85 = 1LL;
LABEL_9:
  v28[8] = v85;
  a2 = (unint64_t)v28;
LABEL_10:
  uint64_t v33 = swift_bridgeObjectRetain();
  unint64_t v34 = specialized _copyCollectionToContiguousArray<A>(_:)(v33);
  swift_bridgeObjectRelease();
  v107 = v34;
  uint64_t v35 = v94;
  specialized MutableCollection<>.sort(by:)(&v107);
  if (!v35)
  {
    unint64_t v36 = 0LL;
    unint64_t v37 = v107[2];
    v90 = v107;
    v89 = (char *)(v107 + 4);
    v96 = (__int128 *)&v109;
    uint64_t v94 = v25 + 80;
    v95 = (char *)a2;
    uint64_t v92 = v37;
    if (!v37) {
      goto LABEL_12;
    }
    while (1)
    {
      if ((v36 & 0x8000000000000000LL) != 0) {
        goto LABEL_67;
      }
      if (v36 >= v90[2]) {
        goto LABEL_68;
      }
      outlined init with copy of (key: String, value: Encodable)((uint64_t)&v89[56 * v36], (uint64_t)&v103);
      unint64_t v38 = v36 + 1;
      while (2)
      {
        outlined init with take of (key: String, value: Encodable)?((uint64_t)&v103, (uint64_t)&v107);
        unint64_t v39 = v108;
        if (!v108)
        {
          swift_release();
          uint64_t v81 = v88;
          if (v87 >= *(void *)(*(void *)v88 + 16LL))
          {
            swift_release();
            swift_release();
            return 0LL;
          }

          else
          {
            uint64_t v82 = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
            if (!v82) {
              uint64_t v82 = specialized ContiguousArray.remove(at:)( *(void *)(*(void *)v81 + 16LL) - 1LL,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
            }
            unint64_t v40 = v82;
            swift_release();
            swift_release();
          }

          return v40;
        }

        unint64_t v99 = v38;
        uint64_t v100 = 0LL;
        unint64_t v40 = (unint64_t)v107;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v96, (uint64_t)&v103);
        if ((v39 & 0x2000000000000000LL) != 0) {
          unint64_t v41 = HIBYTE(v39) & 0xF;
        }
        else {
          unint64_t v41 = v40 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v42 = (v40 >> 59) & 1;
        if ((v39 & 0x1000000000000000LL) == 0) {
          LOBYTE(v42) = 1;
        }
        uint64_t v43 = 4LL << v42;
        uint64_t v110 = v39 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v44 = 15LL;
        do
        {
          while (1)
          {
            if (4 * v41 == v44 >> 14)
            {
              swift_bridgeObjectRetain();
              id v50 = (id)String.hashValue.getter();
              unsigned __int8 v51 = 1;
              goto LABEL_44;
            }

            unint64_t v45 = v44 & 0xC;
            unint64_t v46 = v44;
            if (v45 == v43) {
              unint64_t v46 = _StringGuts._slowEnsureMatchingEncoding(_:)(v44, v40, v39);
            }
            unint64_t v47 = v46 >> 16;
            if (v46 >> 16 >= v41) {
              goto LABEL_65;
            }
            if ((v39 & 0x1000000000000000LL) == 0) {
              break;
            }
            char v49 = String.UTF8View._foreignSubscript(position:)();
            if (v45 == v43) {
              goto LABEL_40;
            }
LABEL_35:
            if ((v39 & 0x1000000000000000LL) != 0) {
              goto LABEL_36;
            }
LABEL_23:
            unint64_t v44 = (v44 & 0xFFFFFFFFFFFF0000LL) + 65540;
            if (v49 < 0) {
              goto LABEL_43;
            }
          }

          if ((v39 & 0x2000000000000000LL) != 0)
          {
            unint64_t v101 = v40;
            *(void *)&__int128 v102 = v110;
            char v49 = *((_BYTE *)&v101 + v47);
            if (v45 == v43) {
              goto LABEL_40;
            }
            goto LABEL_35;
          }

          uint64_t v48 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v40 & 0x1000000000000000LL) == 0) {
            uint64_t v48 = _StringObject.sharedUTF8.getter();
          }
          char v49 = *(_BYTE *)(v48 + v47);
          if (v45 != v43) {
            goto LABEL_35;
          }
LABEL_40:
          unint64_t v44 = _StringGuts._slowEnsureMatchingEncoding(_:)(v44, v40, v39);
          if ((v39 & 0x1000000000000000LL) == 0) {
            goto LABEL_23;
          }
LABEL_36:
          if (v41 <= v44 >> 16) {
            goto LABEL_66;
          }
          unint64_t v44 = String.UTF8View._foreignIndex(after:)();
        }

        while ((v49 & 0x80) == 0);
LABEL_43:
        v52 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRetain();
        id v50 = objc_msgSend(v52, sel_hash);
        swift_unknownObjectRelease();
        unsigned __int8 v51 = 0;
LABEL_44:
        uint64_t v53 = v98;
        uint64_t v54 = *(void *)(v98 + 88);
        uint64_t v55 = *(void *)(v54 + 16);
        unint64_t v56 = *(void *)(v54 + 24);
        uint64_t v57 = *(void *)(v54 + 32);
        *(void *)(v54 + 16) = v40;
        *(void *)(v54 + 24) = v39;
        *(void *)(v54 + 32) = v50;
        unsigned __int8 v58 = *(_BYTE *)(v54 + 40);
        *(_BYTE *)(v54 + 40) = v51;
        outlined copy of _BPlistEncodingFormat.Reference.Backing(v40, v39, (uint64_t)v50, v51);
        outlined consume of _BPlistEncodingFormat.Reference.Backing(v55, v56, v57, v58);
        swift_retain();
        char v59 = specialized Set._Variant.insert(_:)((uint64_t *)&v101, v54);
        uint64_t v60 = v101;
        unint64_t v61 = (unint64_t)v95;
        if ((v59 & 1) != 0)
        {
          uint64_t v62 = swift_allocObject();
          *(void *)(v62 + 24) = 0LL;
          *(void *)(v62 + 32) = 0LL;
          *(void *)(v62 + 16) = 2LL;
          *(_BYTE *)(v62 + 40) = -112;
          *(void *)(v62 + 48) = -1LL;
          swift_bridgeObjectRelease();
          swift_release();
          *(void *)(v53 + 88) = v62;
        }

        else
        {
          swift_bridgeObjectRelease();
        }

        uint64_t v63 = v97;
        uint64_t v65 = *((void *)&v104 + 1);
        uint64_t v64 = v105;
        v66 = __swift_project_boxed_opaque_existential_1(&v103, *((uint64_t *)&v104 + 1));
        uint64_t v67 = v100;
        uint64_t v68 = specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)( (uint64_t)v66,  v61,  v40,  v39,  0LL,  0,  v65,  v64);
        if (v67)
        {
          swift_bridgeObjectRelease();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
          swift_release();
          uint64_t v83 = v88;
          if (v87 < *(void *)(*(void *)v88 + 16LL))
          {
            if (!specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew())) {
              specialized ContiguousArray.remove(at:)( *(void *)(*(void *)v83 + 16LL) - 1LL,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
            }
            swift_release();
          }

          swift_willThrow();
          swift_release();
          swift_release();
          return v40;
        }

        if (!v68)
        {
          uint64_t v69 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x18961AFE8]);
          uint64_t v71 = v70;
          uint64_t v73 = v72;
          uint64_t v74 = swift_allocObject();
          *(void *)(v74 + 16) = v69;
          *(void *)(v74 + 24) = v71;
          *(void *)(v74 + 32) = v73;
          *(_BYTE *)(v74 + 40) = 96;
          *(void *)(v74 + 48) = -1LL;
        }

        swift_bridgeObjectRelease();
        if ((*(_BYTE *)(v63 + 40) & 0xF0) != 0x60) {
          goto LABEL_69;
        }
        unint64_t v101 = *(void *)(v63 + 16);
        __int128 v102 = *(_OWORD *)(v63 + 24);
        *(void *)(v63 + 16) = 2LL;
        uint64_t v75 = v93;
        void *v93 = 0LL;
        v75[1] = 0LL;
        *(_BYTE *)(v63 + 40) = -112;
        swift_retain();
        uint64_t v76 = swift_retain();
        specialized OrderedDictionary.subscript.setter(v76, v60);
        uint64_t v77 = *(void *)(v63 + 16);
        unint64_t v78 = *(void *)(v63 + 24);
        uint64_t v79 = *(void *)(v63 + 32);
        *(void *)(v63 + 16) = v101;
        *(_OWORD *)(v63 + 24) = v102;
        unsigned __int8 v80 = *(_BYTE *)(v63 + 40);
        *(_BYTE *)(v63 + 40) = 96;
        outlined consume of _BPlistEncodingFormat.Reference.Backing(v77, v78, v79, v80);
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
        unint64_t v37 = v92;
        unint64_t v36 = v99;
        if (v99 == v92)
        {
LABEL_12:
          uint64_t v106 = 0LL;
          __int128 v104 = 0u;
          __int128 v105 = 0u;
          unint64_t v38 = v37;
          __int128 v103 = 0u;
          continue;
        }

        break;
      }
    }
  }

uint64_t specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  v4[3] = type metadata accessor for __PlistEncoderBPlist();
  v4[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist,  v2,  (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist,  (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
  v4[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  v4[3] = type metadata accessor for __PlistEncoderBPlist();
  v4[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist,  v2,  (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist,  (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
  v4[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t specialized __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)( void (*a1)(void *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v9 = v7;
  uint64_t v15 = a1;
  uint64_t v16 = v9 + 2;
  unint64_t v30 = *(void *)(v9[2] + 16LL);
  if (a7 != -1)
  {
    unint64_t v29 = a1;
    uint64_t v28 = v8;
    uint64_t v17 = (void *)swift_allocObject();
    v17[5] = &type metadata for _CodingKey;
    v17[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v18 = swift_allocObject();
    v17[2] = v18;
    *(void *)(v18 + 16) = a4;
    *(void *)(v18 + 24) = a5;
    *(void *)(v18 + 32) = a6;
    *(_BYTE *)(v18 + 40) = a7;
    v17[7] = a3;
    uint64_t v27 = a4;
    uint64_t v19 = a5;
    if (a3 >> 62)
    {
      if (a3 >> 62 != 1)
      {
        uint64_t v24 = a6;
        uint64_t v23 = 1LL;
LABEL_10:
        v17[8] = v23;
        uint64_t v21 = v9[5];
        uint64_t v22 = v9[6];
        v9[5] = v17;
        uint64_t v16 = v9 + 2;
LABEL_11:
        outlined copy of _CodingKey?(v27, v19, v24, a7);
        uint64_t v8 = v28;
        goto LABEL_12;
      }

      uint64_t v20 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v20 = (uint64_t *)(a3 + 64);
    }

    uint64_t v24 = a6;
    uint64_t v25 = *v20;
    swift_retain();
    uint64_t v23 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
      return 0LL;
    }

    goto LABEL_10;
  }

  uint64_t v21 = v9[5];
  uint64_t v22 = v9[6];
  v9[5] = a3;
  if (!(a3 >> 62))
  {
    uint64_t v27 = a4;
    uint64_t v28 = v8;
    uint64_t v19 = a5;
    uint64_t v24 = a6;
    unint64_t v29 = a1;
    uint64_t v23 = *(void *)(a3 + 64);
    swift_retain();
    goto LABEL_11;
  }

  if (a3 >> 62 == 1)
  {
    unint64_t v29 = a1;
    uint64_t v23 = *(void *)(a3 + 32);
    swift_retain();
LABEL_12:
    swift_retain();
    uint64_t v15 = v29;
    goto LABEL_13;
  }

  uint64_t v23 = 0LL;
LABEL_13:
  v9[6] = v23;
  v15(v9);
  if (v8)
  {
    v9[5] = v21;
    swift_retain();
    swift_release();
    v9[6] = v22;
    swift_release();
    swift_release();
    if (v30 < *(void *)(v9[2] + 16LL))
    {
      if (!specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew())) {
        specialized ContiguousArray.remove(at:)( *(void *)(*v16 + 16LL) - 1LL,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      }
      swift_release();
    }

    return swift_willThrow();
  }

  v9[5] = v21;
  swift_retain();
  swift_release();
  v9[6] = v22;
  swift_release();
  swift_release();
  if (v30 >= *(void *)(v9[2] + 16LL)) {
    return 0LL;
  }
  uint64_t result = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
  if (!result) {
    return specialized ContiguousArray.remove(at:)( *(void *)(*v16 + 16LL) - 1LL,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
  }
  return result;
}

uint64_t __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)( void (*a1)(void *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v47 = a1;
  uint64_t v7 = v6;
  uint64_t v45 = a6;
  uint64_t v46 = a2;
  unint64_t v50 = a3;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v44 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v17 = MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v42 - v18;
  uint64_t v20 = v7[2];
  uint64_t v43 = v7 + 2;
  unint64_t v49 = *(void *)(v20 + 16);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
  v21((char *)&v42 - v18, a4, v12, v17);
  ((void (*)(char *, char *, uint64_t))v21)(v15, v19, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1LL, a5) != 1)
  {
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    unint64_t v29 = v44;
    v28(v44, v15, a5);
    unint64_t v30 = (uint64_t *)swift_allocObject();
    uint64_t v31 = v45;
    v30[5] = a5;
    v30[6] = v31;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30 + 2);
    v28((char *)boxed_opaque_existential_1, v29, a5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    unint64_t v34 = v50;
    v30[7] = v50;
    unint64_t v35 = v34 >> 62;
    if (v34 >> 62)
    {
      if ((_DWORD)v35 != 1)
      {
        uint64_t v27 = 1LL;
        if (!__OFSUB__((_DWORD)v35, 1)) {
          goto LABEL_12;
        }
        goto LABEL_27;
      }

      unint64_t v36 = (uint64_t *)((v34 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      unint64_t v36 = (uint64_t *)(v34 + 64);
    }

    uint64_t v37 = *v36;
    uint64_t result = swift_retain();
    BOOL v38 = __OFADD__(v37, 1LL);
    uint64_t v27 = v37 + 1;
    if (!v38)
    {
LABEL_12:
      v30[8] = v27;
      uint64_t v24 = v7[5];
      uint64_t v23 = v7[6];
      v7[5] = v30;
      goto LABEL_13;
    }

uint64_t __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a1;
  *(void *)(v4 + 104) = a4;
  *(void *)(v4 + 112) = a2;
  *(void *)(v4 + 120) = 0LL;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v9 = (void *)swift_allocObject();
  v9[5] = &type metadata for _CodingKey;
  v9[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  v9[2] = result;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = a2;
  *(_BYTE *)(result + 40) = 2;
  unint64_t v11 = a3 >> 62;
  v9[7] = a3;
  if (a3 >> 62)
  {
    uint64_t v12 = 0LL;
    if ((_DWORD)v11 != 1) {
      goto LABEL_6;
    }
    uint64_t v13 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    uint64_t v13 = (uint64_t *)(a3 + 64);
  }

  uint64_t v12 = *v13;
  uint64_t result = swift_retain();
LABEL_6:
  if (__OFADD__(v12, 1LL))
  {
    __break(1u);
  }

  else
  {
    v9[8] = v12 + 1;
    if ((_DWORD)v11)
    {
      if ((_DWORD)v11 == 1)
      {
        uint64_t v14 = *(void *)(a3 + 32);
        swift_bridgeObjectRetain();
        swift_release();
      }

      else
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = 0LL;
      }
    }

    else
    {
      uint64_t v14 = *(void *)(a3 + 64);
      swift_bridgeObjectRetain();
      swift_release();
    }

    *(void *)(v4 + 16) = MEMORY[0x18961AFE8];
    *(void *)(v4 + 24) = v8;
    *(void *)(v4 + 32) = v7;
    *(void *)(v4 + 40) = v9;
    *(void *)(v4 + 48) = v14;
    specialized _BPlistEncodingFormat.init()((uint64_t *)v16);
    __int128 v15 = v16[1];
    *(_OWORD *)(v4 + 56) = v16[0];
    *(_OWORD *)(v4 + 72) = v15;
    *(void *)(v4 + 88) = v17;
    return v4;
  }

  return result;
}

BOOL __PlistReferencingEncoderBPlist.canEncodeNewValue.getter()
{
  uint64_t v1 = *(void *)(v0[2] + 16LL);
  unint64_t v2 = v0[5];
  swift_retain();
  uint64_t v3 = _CodingPathNode.path.getter(v2);
  swift_release();
  uint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  unint64_t v5 = *(void *)(v0[12] + 40LL);
  swift_retain();
  uint64_t v6 = _CodingPathNode.path.getter(v5);
  swift_release();
  uint64_t v7 = *(void *)(v6 + 16);
  swift_bridgeObjectRelease();
  return v1 == v4 + ~v7;
}

uint64_t __PlistReferencingEncoderBPlist.__ivar_destroyer()
{
  return outlined consume of __JSONReferencingEncoder.Reference(*(void *)(v0 + 104));
}

uint64_t __PlistReferencingEncoderBPlist.deinit()
{
  uint64_t v1 = v0;
  uint64_t v3 = v0[2];
  unint64_t v2 = v0 + 2;
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4 == 1)
  {
    uint64_t v5 = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    if (!v5) {
      uint64_t v5 = specialized ContiguousArray.remove(at:)( *(void *)(*v2 + 16LL) - 1LL,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    }
    uint64_t v6 = v5;
  }

  else
  {
    if (v4) {
      goto LABEL_25;
    }
    uint64_t v7 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x18961AFE8]);
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v7;
    *(void *)(v6 + 24) = v9;
    *(void *)(v6 + 32) = v11;
    *(_BYTE *)(v6 + 40) = 96;
    *(void *)(v6 + 48) = -1LL;
  }

  uint64_t v12 = v1[13];
  uint64_t v13 = v1[14];
  unint64_t v14 = v1[15];
  if (v12 < 0)
  {
    uint64_t v20 = v12 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v21 = v1[12];
    if ((specialized Sequence.allSatisfy(_:)(v1[14], v1[15]) & 1) != 0)
    {
      swift_retain();
      swift_bridgeObjectRetain_n();
      id v22 = (id)String.hashValue.getter();
      unsigned __int8 v23 = 1;
    }

    else
    {
      uint64_t v24 = (void *)String._bridgeToObjectiveCImpl()();
      swift_retain();
      swift_bridgeObjectRetain_n();
      id v22 = objc_msgSend(v24, sel_hash);
      swift_unknownObjectRelease();
      unsigned __int8 v23 = 0;
    }

    uint64_t v25 = *(void *)(v21 + 88);
    uint64_t v37 = *(void *)(v25 + 16);
    uint64_t v38 = v21;
    unint64_t v26 = *(void *)(v25 + 24);
    uint64_t v27 = *(void *)(v25 + 32);
    *(void *)(v25 + 16) = v13;
    *(void *)(v25 + 24) = v14;
    *(void *)(v25 + 32) = v22;
    unsigned __int8 v28 = *(_BYTE *)(v25 + 40);
    *(_BYTE *)(v25 + 40) = v23;
    outlined copy of _BPlistEncodingFormat.Reference.Backing(v13, v14, (uint64_t)v22, v23);
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v37, v26, v27, v28);
    swift_retain();
    char v29 = specialized Set._Variant.insert(_:)(&v39, v25);
    uint64_t v30 = v39;
    if ((v29 & 1) != 0)
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 24) = 0LL;
      *(void *)(v31 + 32) = 0LL;
      *(void *)(v31 + 16) = 2LL;
      *(_BYTE *)(v31 + 40) = -112;
      *(void *)(v31 + 48) = -1LL;
      swift_bridgeObjectRelease();
      swift_release();
      *(void *)(v38 + 88) = v31;
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v20 + 40) & 0xF0) == 0x60)
    {
      uint64_t v39 = *(void *)(v20 + 16);
      __int128 v40 = *(_OWORD *)(v20 + 24);
      *(void *)(v20 + 16) = 2LL;
      *(void *)(v20 + 24) = 0LL;
      *(void *)(v20 + 32) = 0LL;
      *(_BYTE *)(v20 + 40) = -112;
      swift_retain();
      swift_retain();
      specialized OrderedDictionary.subscript.setter(v6, v30);
      uint64_t v32 = *(void *)(v20 + 16);
      unint64_t v33 = *(void *)(v20 + 24);
      uint64_t v34 = *(void *)(v20 + 32);
      *(void *)(v20 + 16) = v39;
      *(_OWORD *)(v20 + 24) = v40;
      unsigned __int8 v35 = *(_BYTE *)(v20 + 40);
      *(_BYTE *)(v20 + 40) = 96;
      outlined consume of _BPlistEncodingFormat.Reference.Backing(v32, v33, v34, v35);
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_20;
    }
  }

  else
  {
    if ((*(_BYTE *)(v12 + 40) & 0xF0) == 0x50)
    {
      uint64_t v39 = *(void *)(v12 + 16);
      uint64_t v15 = v39;
      *(void *)(v12 + 16) = 2LL;
      *(void *)(v12 + 24) = 0LL;
      *(void *)(v12 + 32) = 0LL;
      *(_BYTE *)(v12 + 40) = -112;
      if (*(void *)(v15 + 16) < v13)
      {
        __break(1u);
      }

      else if ((v13 & 0x8000000000000000LL) == 0)
      {
        outlined copy of __JSONReferencingEncoder.Reference(v12);
        swift_retain();
        specialized ContiguousArray.replaceSubrange<A>(_:with:)(v13, v13, v6);
        uint64_t v16 = *(void *)(v12 + 16);
        unint64_t v17 = *(void *)(v12 + 24);
        uint64_t v18 = *(void *)(v12 + 32);
        *(void *)(v12 + 16) = v39;
        unsigned __int8 v19 = *(_BYTE *)(v12 + 40);
        *(void *)(v12 + 24) = 0LL;
        *(void *)(v12 + 32) = 0LL;
        *(_BYTE *)(v12 + 40) = 80;
        outlined consume of _BPlistEncodingFormat.Reference.Backing(v16, v17, v18, v19);
        swift_release();
        outlined consume of __JSONReferencingEncoder.Reference(v12);
LABEL_20:
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined consume of __JSONReferencingEncoder.Reference(v1[13]);
        return (uint64_t)v1;
      }

      __break(1u);
    }

    __break(1u);
  }

  __break(1u);
LABEL_25:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __PlistReferencingEncoderBPlist.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistReferencingEncoderBPlist()
{
  return objc_opt_self();
}

uint64_t specialized OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v7 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v8 = *(void *)(v6 + 16);
  swift_retain();
  if (v7)
  {
    swift_retain();
    unint64_t v9 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a2, v6 + 32, v8, (void *)(v7 + 16), v7 + 32);
    char v11 = v10;
    uint64_t v13 = v12;
  }

  else
  {
    unint64_t v9 = specialized Collection<>.firstIndex(of:)(a2, v6 + 32, v8);
    char v11 = v14;
    uint64_t v13 = 0LL;
  }

  swift_release();
  swift_release();
  if ((v11 & 1) != 0)
  {
    if (!a1) {
      return swift_release();
    }
    swift_retain();
    specialized OrderedSet._appendNew(_:in:)();
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
LABEL_13:
    specialized ContiguousArray._endMutation()();
    swift_release_n();
    return swift_release();
  }

  if (!a1)
  {
    specialized OrderedSet._removeExistingMember(at:in:)(v9, v13);
    swift_release();
    specialized ContiguousArray.remove(at:)( v9,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    swift_release();
    return swift_release();
  }

  uint64_t v15 = v3[2];
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  v3[2] = v15;
  if ((result & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  }
  if ((v9 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (v9 < *(void *)(v15 + 16))
  {
    swift_retain();
    swift_release();
    *(void *)(v15 + 8 * v9 + 32) = a1;
    goto LABEL_13;
  }

  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.subscript.getter( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a3 + 32;
  uint64_t v7 = *(void *)(a3 + 16);
  if (a2)
  {
    uint64_t v8 = (void *)(a2 + 16);
    uint64_t v9 = a2 + 32;
    swift_retain();
    a1 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v6, v7, v8, v9);
    uint64_t v7 = v10;
    uint64_t result = swift_release();
    if ((v7 & 1) != 0) {
      return 0LL;
    }
    if ((a1 & 0x8000000000000000LL) == 0) {
      goto LABEL_16;
    }
LABEL_4:
    __break(1u);
  }

  if (!v7) {
    return 0LL;
  }
  uint64_t v12 = a3;
  uint64_t v13 = swift_retain();
  char v14 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v13, a1);
  uint64_t result = swift_release();
  if ((v14 & 1) != 0)
  {
    a1 = 0LL;
    goto LABEL_16;
  }

  if (v7 == 1) {
    return 0LL;
  }
  uint64_t v15 = swift_retain();
  char v16 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v15, a1);
  uint64_t result = swift_release();
  if ((v16 & 1) == 0)
  {
    uint64_t v17 = 0LL;
    uint64_t v18 = v7 - 2;
    uint64_t v19 = v12 + 48;
    while (v18 != v17)
    {
      uint64_t v7 = *(void *)(v19 + 8 * v17);
      uint64_t v20 = swift_retain();
      char v21 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v20, a1);
      uint64_t result = swift_release();
      ++v17;
      if ((v21 & 1) != 0)
      {
        a1 = v17 + 1;
        if (v17 + 1 < 0) {
          goto LABEL_4;
        }
        goto LABEL_16;
      }
    }

    return 0LL;
  }

  a1 = 1LL;
LABEL_16:
  if (a1 < *(void *)(a4 + 16)) {
    return swift_retain();
  }
  __break(1u);
  return result;
}

uint64_t _BPlistEncodingFormat.Reference.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _BPlistEncodingFormat.Reference()
{
  return objc_opt_self();
}

uint64_t destroy for _BPlistEncodingFormat.Reference.Backing(uint64_t a1)
{
  return outlined consume of _BPlistEncodingFormat.Reference.Backing( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(_BYTE *)(a1 + 24));
}

uint64_t outlined consume of _BPlistEncodingFormat.Reference.Backing( uint64_t result, unint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  switch(a4 >> 4)
  {
    case 0:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 5:
      goto LABEL_4;
    case 6:
      swift_release();
      swift_release();
LABEL_4:
      uint64_t result = swift_release();
      break;
    case 8:
      uint64_t result = outlined consume of Data._Representation(result, a2);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t initializeWithCopy for _BPlistEncodingFormat.Reference.Backing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _BPlistEncodingFormat.Reference.Backing(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for _BPlistEncodingFormat.Reference.Backing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _BPlistEncodingFormat.Reference.Backing(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for _BPlistEncodingFormat.Reference.Backing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _BPlistEncodingFormat.Reference.Backing(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x77 && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 119);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 24) >> 4) & 0xFFFFFF8F | (16 * ((*(unsigned __int8 *)(a1 + 24) >> 1) & 7))) ^ 0x7F;
  if (v3 >= 0x76) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _BPlistEncodingFormat.Reference.Backing( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x76)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 119;
    if (a3 >= 0x77) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0x77) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8) = 0LL;
      *(void *)(result + 16) = 0LL;
      *(_BYTE *)(result + 24) = 2 * (((-a2 >> 4) & 7) - 8 * a2);
    }
  }

  return result;
}

uint64_t getEnumTag for _BPlistEncodingFormat.Reference.Backing(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 24);
  if (v1 <= 0x8F) {
    return v1 >> 4;
  }
  else {
    return (*(_DWORD *)a1 + 9);
  }
}

uint64_t destructiveProjectEnumData for _BPlistEncodingFormat.Reference.Backing(uint64_t result)
{
  *(_BYTE *)(result + 24) &= 0xFu;
  return result;
}

uint64_t destructiveInjectEnumTag for _BPlistEncodingFormat.Reference.Backing( uint64_t result, unsigned int a2)
{
  if (a2 < 9)
  {
    *(_BYTE *)(result + 24) = *(_BYTE *)(result + 24) & 1 | (16 * a2);
  }

  else
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = a2 - 9;
    *(_BYTE *)(result + 24) = -112;
  }

  return result;
}

ValueMetadata *type metadata accessor for _BPlistEncodingFormat.Reference.Backing()
{
  return &type metadata for _BPlistEncodingFormat.Reference.Backing;
}

void *type metadata accessor for __PlistReferencingEncoderBPlist.Reference()
{
  return &unk_189C85278;
}

uint64_t destroy for _BPlistEncodingFormat()
{
  return swift_release();
}

void *initializeWithCopy for _BPlistEncodingFormat(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for _BPlistEncodingFormat(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _BPlistEncodingFormat(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _BPlistEncodingFormat(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _BPlistEncodingFormat(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _BPlistEncodingFormat()
{
  return &type metadata for _BPlistEncodingFormat;
}

void *type metadata accessor for _PlistEncodingStorageBPlist()
{
  return &unk_189C85328;
}

_UNKNOWN **associated type witness table accessor for PlistEncodingFormat.Writer : PlistWriting in _BPlistEncodingFormat()
{
  return &protocol witness table for _BPlistEncodingFormat.Writer;
}

_UNKNOWN **associated type witness table accessor for PlistWriting.Reference : PlistEncodingReference in _BPlistEncodingFormat.Writer()
{
  return &protocol witness table for _BPlistEncodingFormat.Reference;
}

uint64_t _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *(void *)(result + 16);
  unint64_t v4 = *(void *)(result + 24);
  uint64_t v5 = *(void *)(result + 32);
  unsigned int v6 = *(unsigned __int8 *)(result + 40);
  if (v6 >> 4 == 6)
  {
    uint64_t v13 = *a2;
    *(void *)(result + 48) = *a2;
    BOOL v8 = __OFADD__(v13, 1LL);
    uint64_t v14 = v13 + 1;
    if (v8)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }

    *a2 = v14;
    uint64_t v15 = *(void *)(v4 + 16);
    if (!v15)
    {
      outlined copy of _BPlistEncodingFormat.Reference.Backing(v3, v4, v5, v6);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v18 = *(void *)(v5 + 16);
      if (!v18)
      {
LABEL_25:
        outlined consume of _BPlistEncodingFormat.Reference.Backing(v3, v4, v5, v6);
        swift_release();
        swift_release();
        return swift_release();
      }

uint64_t _BPlistEncodingFormat.Writer.append(_:)(uint64_t result)
{
  if (*(void *)(result + 48) == *(void *)(*(void *)v1 + 16LL)) {
    __asm { BR              X14 }
  }

  return result;
}

void _BPlistEncodingFormat.Writer.write(_:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 1) {
    return;
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + 32);
  if ((unint64_t)a2 < 0x2000)
  {
    uint64_t v5 = 0x2000 - v4;
    if (__OFSUB__(0x2000LL, v4))
    {
      __break(1u);
    }

    else
    {
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = 0x2000 - v4;
      }
      if (v5 < a2) {
        goto LABEL_8;
      }
      if (!*(void *)(v3 + 16))
      {
LABEL_17:
        __break(1u);
        return;
      }

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      if (!__OFADD__(v4, v6))
      {
        *(void *)(v3 + 32) = v4 + v6;
        return;
      }
    }

    __break(1u);
    goto LABEL_17;
  }

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.append(_:isASCII:)(Swift::String _, Swift::Bool isASCII)
{
  if (!isASCII)
  {
    v3._uint64_t countAndFlagsBits = 2415919360LL;
    String.data(using:allowLossyConversion:)( &v3._countAndFlagsBits,  0,  _._countAndFlagsBits,  (unint64_t)_._object);
    if (v2 >> 60 != 15) {
      __asm { BR              X11 }
    }

    __break(1u);
    JUMPOUT(0x183250500LL);
  }

  Swift::String v3 = _;
  swift_bridgeObjectRetain();
  specialized String.withUTF8<A>(_:)(&v3._countAndFlagsBits);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.append(_:)(Swift::UInt64 a1)
{
  v2[1] = *MEMORY[0x1895F89C0];
  _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 4);
  v2[0] = 0LL;
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)v2, 8LL);
  v2[0] = bswap64(a1);
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)v2, 8LL);
}

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.append(_:)(Swift::Int64 a1)
{
  v3[1] = *MEMORY[0x1895F89C0];
  if ((unint64_t)a1 <= 0xFF)
  {
    _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 0);
    LOBYTE(v3[0]) = a1;
    uint64_t v2 = 1LL;
  }

  else if ((unint64_t)a1 >> 16)
  {
    if (HIDWORD(a1))
    {
      _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 3);
      v3[0] = bswap64(a1);
      uint64_t v2 = 8LL;
    }

    else
    {
      _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 2);
      LODWORD(v3[0]) = bswap32(a1);
      uint64_t v2 = 4LL;
    }
  }

  else
  {
    _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 1);
    LOWORD(v3[0]) = bswap32(a1) >> 16;
    uint64_t v2 = 2LL;
  }

  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)v3, v2);
}

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.appendTrue()()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1 == 0x2000)
  {
    Data._Representation.append(contentsOf:)();
    uint64_t v1 = 0LL;
  }

  *(_BYTE *)(*(void *)(v0 + 16) + v1) = 9;
  BOOL v2 = __OFADD__(v1, 1LL);
  uint64_t v3 = v1 + 1;
  if (v2) {
    __break(1u);
  }
  else {
    *(void *)(v0 + 32) = v3;
  }
}

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.appendFalse()()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1 == 0x2000)
  {
    Data._Representation.append(contentsOf:)();
    uint64_t v1 = 0LL;
  }

  *(_BYTE *)(*(void *)(v0 + 16) + v1) = 8;
  BOOL v2 = __OFADD__(v1, 1LL);
  uint64_t v3 = v1 + 1;
  if (v2) {
    __break(1u);
  }
  else {
    *(void *)(v0 + 32) = v3;
  }
}

void _BPlistEncodingFormat.Writer.append(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_18325076C()
{
}

void _BPlistEncodingFormat.Writer.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  Swift::Int64 v15 = *(void *)(a3 + 16);
  _BPlistEncodingFormat.Writer.append(_:count:)(9, v15);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    unint64_t v7 = *(void *)(*(void *)(a2 + 32) + 48LL);
    if ((v7 & 0x8000000000000000LL) != 0 || HIDWORD(v7))
    {
      swift_retain();
      goto LABEL_36;
    }

    swift_retain();
    swift_retain();
    uint64_t v8 = 0LL;
    while (1)
    {
      uint64_t v9 = v3[8];
      v16[0] = bswap32(v7);
      _BPlistEncodingFormat.Writer.write(_:)((uint64_t)&v16[1] - v9, v9);
      if (v6 - 1 == v8) {
        break;
      }
      unint64_t v7 = *(void *)(*(void *)(a2 + 8 * v8 + 40) + 48LL);
      if ((v7 & 0x8000000000000000LL) == 0)
      {
        ++v8;
        if (!HIDWORD(v7)) {
          continue;
        }
      }

      while (1)
      {
LABEL_37:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_35:
        swift_retain();
        swift_retain();
LABEL_36:
        swift_retain();
      }
    }

    swift_release();
    swift_release();
  }

  if (v15)
  {
    unint64_t v10 = *(void *)(*(void *)(a3 + 32) + 48LL);
    if ((v10 & 0x8000000000000000LL) != 0 || HIDWORD(v10)) {
      goto LABEL_35;
    }
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v11 = 0LL;
    while (1)
    {
      uint64_t v12 = v3[8];
      v16[0] = bswap32(v10);
      _BPlistEncodingFormat.Writer.write(_:)((uint64_t)&v16[1] - v12, v12);
      if (v15 - 1 == v11) {
        break;
      }
      unint64_t v10 = *(void *)(*(void *)(a3 + 8 * v11 + 40) + 48LL);
      if ((v10 & 0x8000000000000000LL) == 0)
      {
        ++v11;
        if (!HIDWORD(v10)) {
          continue;
        }
      }

      goto LABEL_37;
    }

    swift_release();
    swift_release();
    swift_release();
  }

  if (!v6)
  {
    if (!v15) {
      return;
    }
    goto LABEL_27;
  }

  swift_retain();
  swift_retain();
  for (uint64_t i = 0LL; i != v6; ++i)
  {
    if (*(void *)(*(void *)(a2 + 8 * i + 32) + 48LL) == *(void *)(*(void *)v3 + 16LL)) {
      __asm { BR              X12 }
    }
  }

  swift_release();
  swift_release();
  if (v15)
  {
LABEL_27:
    swift_retain();
    swift_retain();
    swift_retain();
    for (uint64_t j = 0LL; j != v15; ++j)
    {
      if (*(void *)(*(void *)(a3 + 8 * j + 32) + 48LL) == *(void *)(*(void *)v3 + 16LL)) {
        __asm { BR              X12 }
      }
    }

    swift_release();
    swift_release();
    swift_release();
  }

void _BPlistEncodingFormat.Writer.append(_:)(uint64_t a1)
{
  BOOL v2 = v1;
  uint64_t v11 = *MEMORY[0x1895F89C0];
  Swift::Int64 v4 = *(void *)(a1 + 16);
  _BPlistEncodingFormat.Writer.append(_:count:)(8, v4);
  Swift::Int64 v9 = v4;
  if (v4)
  {
    unint64_t v5 = *(void *)(*(void *)(a1 + 32) + 48LL);
    if ((v5 & 0x8000000000000000LL) != 0)
    {
      swift_retain();
      while (1)
      {
LABEL_16:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_17:
        swift_retain();
      }
    }

    if (HIDWORD(v5)) {
      goto LABEL_17;
    }
    swift_retain();
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = v2[8];
      LODWORD(v10) = bswap32(v5);
      _BPlistEncodingFormat.Writer.write(_:)((uint64_t)&v10 - v7 + 4, v7);
      if (v9 - 1 == v6) {
        break;
      }
      unint64_t v5 = *(void *)(*(void *)(a1 + 8 * v6 + 40) + 48LL);
      if ((v5 & 0x8000000000000000LL) == 0)
      {
        ++v6;
        if (!HIDWORD(v5)) {
          continue;
        }
      }

      goto LABEL_16;
    }

    swift_release();
    swift_retain();
    uint64_t v8 = 0LL;
    do
    {
      if (*(void *)(*(void *)(a1 + 32 + 8 * v8) + 48LL) == *(void *)(*(void *)v2 + 16LL)) {
        __asm { BR              X12 }
      }

      ++v8;
    }

    while (v8 != v9);
    swift_release();
  }

void _BPlistEncodingFormat.Writer.append(_:count:)(char a1, Swift::Int64 a2)
{
  char v4 = byte_1837C50EE[a1];
  if (a2 > 14)
  {
    char v5 = v4 | 0xF;
    uint64_t v6 = *(void *)(v2 + 32);
    if (v6 != 0x2000)
    {
      *(_BYTE *)(*(void *)(v2 + 16) + v6) = v5;
      BOOL v7 = __OFADD__(v6, 1LL);
      uint64_t v8 = v6 + 1;
      if (!v7)
      {
        *(void *)(v2 + 32) = v8;
LABEL_8:
        _BPlistEncodingFormat.Writer.append(_:)(a2);
        return;
      }

      goto LABEL_12;
    }

    goto LABEL_7;
  }

  if (a2 < 0)
  {
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }

  char v5 = v4 | a2;
  uint64_t v9 = *(void *)(v2 + 32);
  if (v9 == 0x2000)
  {
LABEL_7:
    Data._Representation.append(contentsOf:)();
    **(_BYTE **)(v2 + 16) = v5;
    *(void *)(v2 + 32) = 1LL;
    if (a2 >= 15) {
      goto LABEL_8;
    }
    return;
  }

  *(_BYTE *)(*(void *)(v2 + 16) + v9) = v5;
  BOOL v7 = __OFADD__(v9, 1LL);
  uint64_t v10 = v9 + 1;
  if (v7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  *(void *)(v2 + 32) = v10;
}

void _BPlistEncodingFormat.Writer.write(_:subtype:)(char a1, char a2)
{
  char v3 = byte_1837C50EE[a1] | a2;
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 == 0x2000)
  {
    Data._Representation.append(contentsOf:)();
    uint64_t v4 = 0LL;
  }

  *(_BYTE *)(*(void *)(v2 + 16) + v4) = v3;
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    *(void *)(v2 + 32) = v6;
  }
}

void _BPlistEncodingFormat.Reference.hash(into:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  unsigned int v4 = *(unsigned __int8 *)(v1 + 40);
  switch(v4 >> 4)
  {
    case 0u:
      Hasher._combine(_:)(*(void *)(v1 + 32));
      break;
    case 1u:
    case 2u:
      Swift::UInt64 v5 = *(void *)(v1 + 16);
      goto LABEL_6;
    case 3u:
    case 7u:
      if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v5 = *(void *)(v1 + 16);
      }
      else {
        Swift::UInt64 v5 = 0LL;
      }
LABEL_6:
      Hasher._combine(_:)(v5);
      break;
    case 4u:
      if ((v2 & 0x7FFFFF) == 0 && (*(void *)(v1 + 16) & 0x7F800000LL) == 0) {
        Swift::UInt32 v7 = 0;
      }
      else {
        Swift::UInt32 v7 = *(void *)(v1 + 16);
      }
      Hasher._combine(_:)(v7);
      break;
    case 8u:
      Data.hash(into:)(a1, v2, v3);
      break;
    default:
      outlined copy of _BPlistEncodingFormat.Reference.Backing(v2, v3, *(void *)(v1 + 32), v4);
      _StringGuts.grow(_:)(79LL);
      v8._object = (void *)0x80000001839CE880LL;
      v8._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v8);
      _print_unlocked<A, B>(_:_:)();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _BPlistEncodingFormat.Reference()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _BPlistEncodingFormat.Reference(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _BPlistEncodingFormat.Reference()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _BPlistEncodingFormat.Reference( uint64_t *a1, uint64_t *a2)
{
  return specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(*a1, *a2);
}

uint64_t base witness table accessor for Equatable in _BPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type _BPlistEncodingFormat.Reference and conformance _BPlistEncodingFormat.Reference,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for _BPlistEncodingFormat.Reference,  (uint64_t)&protocol conformance descriptor for _BPlistEncodingFormat.Reference);
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)( uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    uint64_t v7 = result;
    uint64_t v8 = 56 * a3;
LABEL_6:
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    while (1)
    {
      uint64_t v11 = *a4 + v10;
      outlined init with copy of (key: String, value: Encodable)(v11, (uint64_t)v21);
      outlined init with copy of (key: String, value: Encodable)(v11 - 56, (uint64_t)v20);
      if (v21[0] == v20[0] && v21[1] == v20[1])
      {
        outlined destroy of (key: String, value: Encodable)((uint64_t)v20);
        uint64_t result = outlined destroy of (key: String, value: Encodable)((uint64_t)v21);
LABEL_5:
        ++v5;
        v8 += 56LL;
        if (v5 == a2) {
          return result;
        }
        goto LABEL_6;
      }

      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined destroy of (key: String, value: Encodable)((uint64_t)v20);
      uint64_t result = outlined destroy of (key: String, value: Encodable)((uint64_t)v21);
      if ((v13 & 1) == 0) {
        goto LABEL_5;
      }
      if (!*a4) {
        break;
      }
      uint64_t v14 = *a4 + v10;
      uint64_t v15 = *(void *)(v14 + 48);
      __int128 v17 = *(_OWORD *)(v14 + 16);
      __int128 v16 = *(_OWORD *)(v14 + 32);
      __int128 v18 = *(_OWORD *)v14;
      __int128 v19 = *(_OWORD *)(v14 - 40);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)(v14 - 56);
      *(_OWORD *)(v14 + 16) = v19;
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(v14 - 24);
      *(void *)(v14 + 48) = *(void *)(v14 - 8);
      *(_OWORD *)(v14 - 56) = v18;
      *(_OWORD *)(v14 - 40) = v17;
      *(_OWORD *)(v14 - 24) = v16;
      v10 -= 56LL;
      ++v9;
      *(void *)(v14 - 8) = v15;
      if (v5 == v9) {
        goto LABEL_5;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t specialized OrderedSet._appendNew(_:in:)()
{
  uint64_t result = specialized ContiguousArray._endMutation()();
  uint64_t v2 = *(void *)(v0[1] + 16);
  if (*v0)
  {
    if (MEMORY[0x186E1ACA4](*(void *)(*v0 + 16) & 0x3FLL) >= v2)
    {
      uint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v3 = *v0;
      if ((result & 1) == 0)
      {
        if (!v3)
        {
LABEL_12:
          __break(1u);
          return result;
        }

        uint64_t v3 = _HashTable.copy()();
        uint64_t result = swift_release();
        *uint64_t v0 = v3;
      }

      if (v3) {
        return _HashTable.UnsafeHandle.subscript.setter();
      }
      __break(1u);
      goto LABEL_12;
    }

    return specialized OrderedSet._regenerateHashTable()();
  }

  return result;
}

uint64_t specialized OrderedSet._regenerateHashTable()()
{
  Swift::Int v1 = v0[1];
  if (*v0)
  {
    uint64_t v2 = *(void *)(*v0 + 24) & 0x3FLL;
    unint64_t v3 = *(void *)(v1 + 16);
    if (v2) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v2 = 0LL;
    unint64_t v3 = *(void *)(v1 + 16);
  }

  if (v3 < 0x10)
  {
    uint64_t v4 = 0LL;
    goto LABEL_11;
  }

uint64_t specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)( Swift::Int a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = MEMORY[0x186E1ACC8](*(void *)(a1 + 16));
  uint64_t v9 = 0LL;
  if ((a3 & 1) != 0) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = a2;
  }
  if (v10 <= v8) {
    uint64_t v10 = v8;
  }
  if (v10 <= a4) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v11 >= 5)
  {
    uint64_t v9 = MEMORY[0x186E1ACD4]();
    specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(a1, (void *)(v9 + 16), v9 + 32);
  }

  return v9;
}

Swift::Int specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)( Swift::Int result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = 0LL;
    while (1)
    {
      Hasher.init(_seed:)();
      swift_retain();
      _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v16);
      uint64_t result = Hasher._finalize()();
      uint64_t v7 = 1LL << *a2;
      BOOL v8 = __OFSUB__(v7, 1LL);
      uint64_t v9 = v7 - 1;
      if (v8) {
        break;
      }
      Swift::Int v10 = v9 & result;
      uint64_t v11 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      uint64_t v13 = v12;
      uint64_t v15 = v14;
      swift_release();
      v16[0] = a2;
      v16[1] = a3;
      _OWORD v16[2] = v10;
      uint64_t v17 = v11;
      uint64_t v18 = v13;
      uint64_t v19 = v15;
      char v20 = 0;
      while (v17)
        _HashTable.BucketIterator.advance()();
      uint64_t result = _HashTable.BucketIterator.currentValue.setter();
      if (++v6 == v3) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  Swift::Int result = Hasher._finalize()();
  uint64_t v9 = 1LL << *a4;
  BOOL v10 = __OFSUB__(v9, 1LL);
  uint64_t v11 = v9 - 1;
  if (v10)
  {
    __break(1u);
  }

  else
  {
    Swift::Int v12 = v11 & result;
    uint64_t v13 = _HashTable.UnsafeHandle._startIterator(bucket:)();
    *(void *)&__int128 v27 = a4;
    *((void *)&v27 + 1) = a5;
    *(void *)&__int128 v28 = v12;
    *((void *)&v28 + 1) = v13;
    *(void *)&__int128 v29 = v14;
    *((void *)&v29 + 1) = v15;
    char v30 = 0;
    uint64_t v16 = _HashTable.BucketIterator.currentValue.getter();
    __int128 v23 = v27;
    __int128 v24 = v28;
    __int128 v25 = v29;
    char v26 = v30;
    if ((v17 & 1) == 0)
    {
      uint64_t v18 = swift_retain();
      char v19 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v18, a1);
      swift_release();
      if ((v19 & 1) == 0)
      {
        do
        {
          _HashTable.BucketIterator.advance()();
          __int128 v31 = v23;
          __int128 v32 = v24;
          __int128 v33 = v25;
          char v34 = v26;
          uint64_t v16 = _HashTable.BucketIterator.currentValue.getter();
          if ((v20 & 1) != 0) {
            break;
          }
          uint64_t v21 = swift_retain();
          char v22 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v21, a1);
          swift_release();
        }

        while ((v22 & 1) == 0);
      }
    }

    return v16;
  }

  return result;
}

uint64_t specialized OrderedSet._reserveCapacity(_:persistent:)(uint64_t result, char a2)
{
  if (result < 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v3 = v2;
  uint64_t v5 = result;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v7 = *v2;
  Swift::Int v6 = v2[1];
  if (*v2)
  {
    uint64_t v8 = *(void *)(v7 + 16) & 0x3FLL;
    uint64_t v9 = MEMORY[0x186E1ACC8](v5);
    if ((a2 & 1) != 0)
    {
      uint64_t v10 = v9;
      if (v8 >= v9) {
        goto LABEL_14;
      }
    }

    else
    {
      uint64_t v10 = *(void *)(v7 + 24) & 0x3FLL;
      if (v8 >= v9) {
        goto LABEL_14;
      }
    }

unint64_t specialized OrderedSet._removeExistingMember(at:in:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2[1] + 16);
  if (!*v2)
  {
    if (!v4) {
      goto LABEL_16;
    }
    return specialized ContiguousArray.remove(at:)( a1,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
  }

  if ((*(void *)(*v2 + 16) & 0x3FLL) == (*(void *)(*v2 + 24) & 0x3FLL))
  {
    if (!v4) {
      goto LABEL_16;
    }
  }

  else if (v4 <= static _HashTable.minimumCapacity(forScale:)())
  {
LABEL_16:
    uint64_t v9 = specialized ContiguousArray.remove(at:)( a1,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    specialized OrderedSet._regenerateHashTable()();
    return v9;
  }

  unint64_t result = swift_isUniquelyReferenced_native();
  uint64_t v7 = *v2;
  if ((result & 1) == 0)
  {
    if (!v7) {
      goto LABEL_21;
    }
    uint64_t v7 = _HashTable.copy()();
    unint64_t result = swift_release();
    *uint64_t v2 = v7;
  }

  if (v7)
  {
    swift_retain();
    unint64_t result = specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)( a2,  (void *)(v7 + 16),  v7 + 32,  (uint64_t)v2);
    uint64_t v8 = a1 + 1;
    if (__OFADD__(a1, 1LL))
    {
      __break(1u);
    }

    else if (v8 >= a1)
    {
      specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)( a1,  v8,  v2[1],  (void *)(v7 + 16),  v7 + 32);
      swift_release();
      return specialized ContiguousArray.remove(at:)( a1,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    }

    __break(1u);
  }

  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = v5 + 24 * a1;
    __int128 v9 = *(_OWORD *)(v7 + 32);
    uint64_t v8 = (_BYTE *)(v7 + 32);
    char v10 = v8[16];
    unint64_t v11 = v6 - 1;
    *(_OWORD *)a2 = v9;
    *(_BYTE *)(a2 + 16) = v10;
    uint64_t v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v8, v8 + 24, 24 * v12);
      *(void *)(v5 + 16) = v11;
      *uint64_t v2 = v5;
      return result;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)(unint64_t a1)
{
  return specialized ContiguousArray.remove(at:)( a1,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
}

uint64_t specialized ContiguousArray.remove(at:)(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = *v2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v5 = a2(v5);
    *uint64_t v2 = v5;
  }

  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v8 = v7 - 1;
    uint64_t v9 = v7 - 1 - a1;
    if (v9 >= 0)
    {
      uint64_t v10 = v5 + 8 * a1;
      uint64_t v11 = *(void *)(v10 + 32);
      memmove((void *)(v10 + 32), (const void *)(v10 + 40), 8 * v9);
      *(void *)(v5 + 16) = v8;
      specialized ContiguousArray._endMutation()();
      return v11;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  *(void *)&__int128 v23 = a2;
  *((void *)&v23 + 1) = a3;
  uint64_t v24 = a1;
  uint64_t v25 = _HashTable.UnsafeHandle._startIterator(bucket:)();
  uint64_t v26 = v7;
  uint64_t v27 = v8;
  char v28 = 0;
  _HashTable.BucketIterator.advance()();
  uint64_t v9 = v25;
  if (!v25) {
    return _HashTable.UnsafeHandle.subscript.setter();
  }
  char v10 = v28;
  uint64_t v11 = v26;
  uint64_t v12 = v27;
  uint64_t v13 = v24;
  uint64_t v14 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)();
  __int128 v15 = v23;
  uint64_t v16 = v14;
  while (1)
  {
    __int128 v29 = v15;
    uint64_t v30 = v13;
    uint64_t v31 = v9;
    uint64_t v32 = v11;
    uint64_t v33 = v12;
    char v34 = v10 & 1;
    unint64_t result = _HashTable.BucketIterator.currentValue.getter();
    if ((v18 & 1) != 0) {
      break;
    }
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      break;
    }

    if (result >= *(void *)(*(void *)(a4 + 8) + 16LL)) {
      goto LABEL_16;
    }
    Hasher.init(_seed:)();
    swift_retain();
    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v22);
    Swift::Int v19 = Hasher._finalize()();
    unint64_t result = swift_release();
    uint64_t v20 = 1LL << *a2;
    if (__OFSUB__(v20, 1LL)) {
      goto LABEL_17;
    }
    uint64_t v21 = (v20 - 1) & v19;
    if (v6 >= v16)
    {
      if (v21 < v16) {
        goto LABEL_3;
      }
    }

    else if (v21 >= v16)
    {
      goto LABEL_13;
    }

    if (v6 >= v21)
    {
LABEL_13:
      _HashTable.BucketIterator.currentValue.getter();
      _HashTable.UnsafeHandle.subscript.setter();
      uint64_t v6 = v13;
    }

void specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }

  if (v6 >= 1)
  {
    unint64_t v10 = *(void *)(a3 + 16);
    uint64_t v11 = v10 - v6;
    if (a1 < v11 >> 1)
    {
      if (MEMORY[0x186E1ACA4](*a4 & 0x3FLL) / 3 > a1)
      {
        if (a1 < 0)
        {
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }

        if (v10 < a1)
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }

        if (a1)
        {
          swift_retain();
          uint64_t v12 = 0LL;
          while (1)
          {
            Hasher.init(_seed:)();
            swift_retain();
            _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)&v50);
            Swift::Int v13 = Hasher._finalize()();
            uint64_t v14 = 1LL << *a4;
            BOOL v15 = __OFSUB__(v14, 1LL);
            uint64_t v16 = v14 - 1;
            if (v15) {
              break;
            }
            Swift::Int v17 = v16 & v13;
            uint64_t v18 = _HashTable.UnsafeHandle._startIterator(bucket:)();
            *(void *)&__int128 v50 = a4;
            *((void *)&v50 + 1) = a5;
            Swift::Int v51 = v17;
            *(void *)&__int128 v52 = v18;
            *((void *)&v52 + 1) = v19;
            uint64_t v53 = v20;
            char v54 = 0;
            if (v18)
            {
              char v21 = 0;
              char v22 = a4;
              uint64_t v23 = a5;
              do
              {
                *(void *)&__int128 v55 = v22;
                *((void *)&v55 + 1) = v23;
                Swift::Int v56 = v17;
                *(void *)&__int128 v57 = v18;
                *((void *)&v57 + 1) = v19;
                uint64_t v58 = v20;
                char v59 = v21 & 1;
                uint64_t v24 = _HashTable.BucketIterator.currentValue.getter();
                if ((v25 & 1) == 0 && v24 == v12) {
                  break;
                }
                _HashTable.BucketIterator.advance()();
                uint64_t v23 = *((void *)&v50 + 1);
                char v22 = (void *)v50;
                Swift::Int v17 = v51;
                uint64_t v19 = *((void *)&v52 + 1);
                uint64_t v18 = v52;
                uint64_t v20 = v53;
                char v21 = v54;
              }

              while ((void)v52);
            }

            if (__OFADD__(v12, v6)) {
              goto LABEL_56;
            }
            ++v12;
            _HashTable.BucketIterator.currentValue.setter();
            swift_release();
            if (v12 == a1)
            {
              swift_release();
              goto LABEL_20;
            }
          }

          __break(1u);
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }

        goto LABEL_20;
      }

      *(void *)&__int128 v55 = a4;
      *((void *)&v55 + 1) = a5;
      Swift::Int v56 = 0LL;
      *(void *)&__int128 v57 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      *((void *)&v57 + 1) = v30;
      uint64_t v58 = v31;
      char v59 = 0;
      __int128 v50 = v55;
      Swift::Int v51 = 0LL;
      __int128 v52 = v57;
      uint64_t v53 = v58;
      char v54 = v59;
      uint64_t v32 = _HashTable.BucketIterator.currentValue.getter();
      if ((v33 & 1) != 0 || v32 >= a1)
      {
LABEL_32:
        _HashTable.BucketIterator.advance()();
LABEL_20:
        uint64_t v26 = a4[1];
        if (__OFSUB__(v26 >> 6, v6))
        {
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }

        uint64_t v27 = 1LL << *a4;
        BOOL v15 = __OFSUB__(v27, 1LL);
        uint64_t v28 = v27 - 1;
        if (v15)
        {
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }

        uint64_t v29 = (v28 & (((v26 >> 6) - v6) >> 63)) + (v26 >> 6) - v6;
        if (v29 < v28) {
          uint64_t v28 = 0LL;
        }
        a4[1] = a4[1] & 0x3FLL | ((v29 - v28) << 6);
        return;
      }

      if (!__OFADD__(v32, v6))
      {
        _HashTable.BucketIterator.currentValue.setter();
        goto LABEL_32;
      }

      __break(1u);
LABEL_38:
      *(void *)&__int128 v55 = a4;
      *((void *)&v55 + 1) = a5;
      Swift::Int v56 = 0LL;
      *(void *)&__int128 v57 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      *((void *)&v57 + 1) = v34;
      uint64_t v58 = v35;
      char v59 = 0;
      __int128 v50 = v55;
      Swift::Int v51 = 0LL;
      __int128 v52 = v57;
      uint64_t v53 = v58;
      char v54 = v59;
      uint64_t v36 = _HashTable.BucketIterator.currentValue.getter();
      if ((v37 & 1) == 0 && v36 >= v5)
      {
        if (__OFSUB__(v36, v6))
        {
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }

        _HashTable.BucketIterator.currentValue.setter();
      }

      _HashTable.BucketIterator.advance()();
      return;
    }

    uint64_t v5 = a2;
    if (__OFSUB__(v10, a2))
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }

    if ((uint64_t)v10 < v5)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }

    if (v5 < 0)
    {
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }

    if (v10 != v5)
    {
      if (v10 <= v5)
      {
LABEL_68:
        __break(1u);
        return;
      }

      swift_retain();
      while (1)
      {
        Hasher.init(_seed:)();
        swift_retain();
        _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)&v50);
        Swift::Int v38 = Hasher._finalize()();
        uint64_t v39 = 1LL << *a4;
        BOOL v15 = __OFSUB__(v39, 1LL);
        uint64_t v40 = v39 - 1;
        if (v15) {
          goto LABEL_58;
        }
        Swift::Int v41 = v40 & v38;
        uint64_t v42 = _HashTable.UnsafeHandle._startIterator(bucket:)();
        *(void *)&__int128 v50 = a4;
        *((void *)&v50 + 1) = a5;
        Swift::Int v51 = v41;
        *(void *)&__int128 v52 = v42;
        *((void *)&v52 + 1) = v43;
        uint64_t v53 = v44;
        char v54 = 0;
        if (v42)
        {
          char v45 = 0;
          uint64_t v46 = a4;
          uint64_t v47 = a5;
          do
          {
            *(void *)&__int128 v55 = v46;
            *((void *)&v55 + 1) = v47;
            Swift::Int v56 = v41;
            *(void *)&__int128 v57 = v42;
            *((void *)&v57 + 1) = v43;
            uint64_t v58 = v44;
            char v59 = v45 & 1;
            uint64_t v48 = _HashTable.BucketIterator.currentValue.getter();
            if ((v49 & 1) == 0 && v48 == v5) {
              break;
            }
            _HashTable.BucketIterator.advance()();
            uint64_t v47 = *((void *)&v50 + 1);
            uint64_t v46 = (void *)v50;
            Swift::Int v41 = v51;
            uint64_t v43 = *((void *)&v52 + 1);
            uint64_t v42 = v52;
            uint64_t v44 = v53;
            char v45 = v54;
          }

          while ((void)v52);
        }

        if (__OFSUB__(v5, v6)) {
          goto LABEL_59;
        }
        ++v5;
        _HashTable.BucketIterator.currentValue.setter();
        swift_release();
        if (v5 == v10)
        {
          swift_release();
          return;
        }
      }
    }
  }

uint64_t specialized ContiguousArray._customRemoveLast()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = result;
  }

  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    uint64_t v6 = v5 - 1;
    uint64_t v7 = v3 + 24 * v6;
    char v8 = *(_BYTE *)(v7 + 48);
    *(_OWORD *)a1 = *(_OWORD *)(v7 + 32);
    *(_BYTE *)(a1 + 16) = v8;
    *(void *)(v3 + 16) = v6;
    *Swift::Int v1 = v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t specialized ContiguousArray._customRemoveLast()()
{
  return specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
}

uint64_t specialized ContiguousArray._customRemoveLast()(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *Swift::Int v1 = v3;
  if ((result & 1) == 0)
  {
    uint64_t result = a1(v3);
    uint64_t v3 = result;
    *Swift::Int v1 = result;
  }

  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    uint64_t v6 = v5 - 1;
    uint64_t v7 = *(void *)(v3 + 8 * v6 + 32);
    *(void *)(v3 + 16) = v6;
    specialized ContiguousArray._endMutation()();
    return v7;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t specialized __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v49 = a6;
  v51[3] = &type metadata for _CodingKey;
  unint64_t v46 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v51[4] = v46;
  uint64_t v15 = swift_allocObject();
  v51[0] = v15;
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  *(void *)(v15 + 32) = a4;
  *(_BYTE *)(v15 + 40) = a5;
  *(void *)(a8 + 96) = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  _CodingKey.stringValue.getter(a2, a3, a4, a5);
  uint64_t v50 = a7;
  *(void *)(a8 + 104) = a7 | 0x8000000000000000LL;
  *(void *)(a8 + 112) = v16;
  *(void *)(a8 + 120) = v17;
  swift_release();
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v47 = *(void *)(a1 + 24);
  uint64_t v48 = v18;
  uint64_t v19 = __swift_project_boxed_opaque_existential_1(v51, (uint64_t)&type metadata for _CodingKey);
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  MEMORY[0x1895F8858](v20);
  uint64_t v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  initializeWithCopy for _CodingKey((uint64_t)v23, (uint64_t)v19);
  uint64_t v24 = storeEnumTagSinglePayload for _CodingKey((uint64_t)v23, 0, 1u);
  MEMORY[0x1895F8858](v24);
  uint64_t v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v28 = MEMORY[0x1895F8858](v27);
  (*(void (**)(char *, char *, uint64_t, __n128))(v21 + 16))(v23, v23, v20, v28);
  if (getEnumTagSinglePayload for _CodingKey((uint64_t)v23, 1u) == 1)
  {
    uint64_t v29 = *(void (**)(char *, uint64_t))(v21 + 8);
    uint64_t v30 = v48;
    swift_bridgeObjectRetain();
    v29(v23, v20);
    v29(v23, v20);
    unint64_t v31 = v49;
    swift_retain();
    swift_release();
    swift_release();
    unint64_t v32 = v31 >> 62;
    char v33 = (uint64_t *)v31;
    if (v31 >> 62)
    {
LABEL_3:
      if ((_DWORD)v32 != 1)
      {
        uint64_t v39 = 0LL;
LABEL_14:
        uint64_t v43 = v47;
        *(void *)(a8 + 16) = MEMORY[0x18961AFE8];
        *(void *)(a8 + 24) = v43;
        *(void *)(a8 + 32) = v30;
        *(void *)(a8 + 40) = v33;
        *(void *)(a8 + 48) = v39;
        specialized _BPlistEncodingFormat.init()((uint64_t *)v52);
        __int128 v44 = v52[1];
        *(_OWORD *)(a8 + 56) = v52[0];
        *(_OWORD *)(a8 + 72) = v44;
        *(void *)(a8 + 88) = v53;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
        return a8;
      }

      uint64_t v34 = (uint64_t *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      uint64_t v39 = *v34;
      swift_release();
      goto LABEL_14;
    }

uint64_t specialized __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v52 = a3;
  *(void *)&__int128 v56 = a6;
  *((void *)&v56 + 1) = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v55);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL))(boxed_opaque_existential_1, a2, a6);
  *(void *)(a5 + 96) = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v13 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v54 = a4;
  *(void *)(a5 + 104) = a4 | 0x8000000000000000LL;
  *(void *)(a5 + 112) = v13;
  *(void *)(a5 + 120) = v14;
  swift_release();
  uint64_t v49 = *(void *)(a1 + 24);
  uint64_t v53 = a1;
  uint64_t v51 = *(void *)(a1 + 32);
  __int128 v48 = v56;
  uint64_t v15 = v56;
  uint64_t v16 = __swift_project_boxed_opaque_existential_1(v55, v56);
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = *(void **)(v17 - 8);
  uint64_t v19 = v18[8];
  __n128 v20 = MEMORY[0x1895F8858](v17);
  unint64_t v21 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v22 = (char *)&v48 - v21;
  uint64_t v23 = *(void *)(v15 - 8);
  (*(void (**)(char *, void *, uint64_t, __n128))(v23 + 16))((char *)&v48 - v21, v16, v15, v20);
  uint64_t v24 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v23 + 56))((char *)&v48 - v21, 0LL, 1LL, v15);
  MEMORY[0x1895F8858](v24);
  uint64_t v26 = (char *)&v48 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v28 = MEMORY[0x1895F8858](v27);
  uint64_t v29 = (char *)&v48 - v21;
  uint64_t v30 = (void (*)(char *, char *, uint64_t, __n128))v18[2];
  uint64_t v50 = v17;
  v30((char *)&v48 - v21, (char *)&v48 - v21, v17, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))((char *)&v48 - v21, 1LL, v15) == 1)
  {
    unint64_t v31 = (void (*)(char *, uint64_t))v18[1];
    uint64_t v32 = v51;
    swift_bridgeObjectRetain();
    uint64_t v33 = v50;
    v31(v22, v50);
    v31(v29, v33);
    unint64_t v34 = v52;
    swift_retain();
    swift_release();
    swift_release();
    unint64_t v35 = v34 >> 62;
    uint64_t v36 = v34;
    unint64_t v37 = v34;
    if (v34 >> 62)
    {
LABEL_3:
      if ((_DWORD)v35 != 1)
      {
        uint64_t v43 = 0LL;
LABEL_16:
        uint64_t v46 = v49;
        *(void *)(a5 + 16) = MEMORY[0x18961AFE8];
        *(void *)(a5 + 24) = v46;
        *(void *)(a5 + 32) = v32;
        *(void *)(a5 + 40) = v36;
        *(void *)(a5 + 48) = v43;
        specialized _BPlistEncodingFormat.init()((uint64_t *)v57);
        __int128 v47 = v57[1];
        *(_OWORD *)(a5 + 56) = v57[0];
        *(_OWORD *)(a5 + 72) = v47;
        *(void *)(a5 + 88) = v58;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
        return a5;
      }

      Swift::Int v38 = (uint64_t *)((v37 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_15:
      uint64_t v43 = *v38;
      swift_release();
      goto LABEL_16;
    }

uint64_t specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
  double v6 = *(double *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unsigned int v9 = *(unsigned __int8 *)(a2 + 40);
  switch(v5 >> 4)
  {
    case 0u:
      if (v9 >= 0x10) {
        goto LABEL_30;
      }
      if ((v5 & 1) != 0)
      {
        if ((v9 & 1) == 0) {
          goto LABEL_30;
        }
        if (*(void *)&v2 == *(void *)&v6 && v3 == v7) {
          char v10 = 1;
        }
        else {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        outlined copy of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v2, v3, v4, v5);
        outlined copy of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
      }

      else
      {
        if ((v9 & 1) != 0) {
          goto LABEL_30;
        }
        type metadata accessor for NSObject();
        String._bridgeToObjectiveCImpl()();
        String._bridgeToObjectiveCImpl()();
        outlined copy of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v2, v3, v4, v5);
        outlined copy of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
        char v10 = static NSObject.== infix(_:_:)();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }

      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v2, v3, v4, v5);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
      return v10 & 1;
    case 1u:
      if ((v9 & 0xF0) == 0x10) {
        goto LABEL_7;
      }
      goto LABEL_30;
    case 2u:
      if ((v9 & 0xF0) == 0x20) {
        goto LABEL_7;
      }
      goto LABEL_30;
    case 3u:
      if ((v9 & 0xF0) != 0x30) {
        goto LABEL_30;
      }
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(void *)(a1 + 16), v3, v4, v5);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
      if (v2 == v6)
      {
        char v10 = 1;
      }

      else if ((~*(void *)&v2 & 0x7FF0000000000000LL) != 0)
      {
LABEL_31:
        char v10 = 0;
      }

      else
      {
        BOOL v15 = (~*(void *)&v6 & 0x7FF0000000000000LL) == 0;
        if ((*(void *)&v6 & 0xFFFFFFFFFFFFFLL) == 0) {
          BOOL v15 = 0;
        }
        char v10 = (*(void *)&v2 & 0xFFFFFFFFFFFFFLL) != 0 && v15;
      }

      return v10 & 1;
    case 4u:
      if ((v9 & 0xF0) != 0x40) {
        goto LABEL_30;
      }
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(void *)(a1 + 16), v3, v4, v5);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
      BOOL v11 = (~LODWORD(v6) & 0x7F800000) == 0LL;
      if ((LODWORD(v6) & 0x7FFFFF) == 0) {
        BOOL v11 = 0;
      }
      char v13 = (~LODWORD(v2) & 0x7F800000) == 0 && (LODWORD(v2) & 0x7FFFFF) != 0 && v11;
      else {
        char v10 = v13;
      }
      return v10 & 1;
    case 7u:
      if ((v9 & 0xF0) != 0x70) {
        goto LABEL_30;
      }
LABEL_7:
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(void *)(a1 + 16), v3, v4, v5);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
      char v10 = v2 == v6;
      return v10 & 1;
    case 8u:
      if ((v9 & 0xF0) == 0x80) {
        __asm { BR              X9 }
      }

      goto LABEL_30;
    default:
LABEL_30:
      outlined copy of _BPlistEncodingFormat.Reference.Backing(*(void *)(a1 + 16), v3, v4, v5);
      outlined copy of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v2, v3, v4, v5);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
      goto LABEL_31;
  }

uint64_t specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  double v2 = (void *)MEMORY[0x18961AFE8];
  if ((MEMORY[0x18961AFE8] & 0xC000000000000000LL) != 0)
  {
    unint64_t v26 = MEMORY[0x18961AFE8];
    double v2 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x18961AFE8]);
    specialized _copyCollectionToContiguousArray<A>(_:)(v26);
  }

  uint64_t v27 = 0LL;
  Swift::Int v28 = (Swift::Int)v2;
  uint64_t v3 = *(void *)(a1 + 16);
  specialized OrderedSet._reserveCapacity(_:persistent:)(v3, 0);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 0LL;
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 32 + 16 * v4);
      uint64_t v7 = *(void *)(v28 + 16);
      if (v27)
      {
        swift_retain();
        swift_retain();
        swift_retain();
        specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v6, v28 + 32, v7, (void *)(v27 + 16), v27 + 32);
        char v9 = v8;
        uint64_t v5 = v10;
        uint64_t result = swift_release();
        if ((v9 & 1) == 0) {
          goto LABEL_39;
        }
      }

      else
      {
        if (!v7)
        {
          swift_retain();
          swift_retain();
LABEL_19:
          uint64_t v5 = 0LL;
          goto LABEL_20;
        }

        swift_retain();
        swift_retain();
        uint64_t v12 = swift_retain();
        char v13 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v12, v6);
        uint64_t result = swift_release();
        if ((v13 & 1) != 0) {
          goto LABEL_39;
        }
        if (v7 == 1) {
          goto LABEL_19;
        }
        uint64_t v14 = swift_retain();
        char v15 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v14, v6);
        uint64_t result = swift_release();
        if ((v15 & 1) != 0)
        {
LABEL_39:
          __break(1u);
          return result;
        }

        uint64_t v5 = v7 - 2;
        Swift::Int v16 = v28 + 48;
        while (v5)
        {
          v16 += 8LL;
          uint64_t v17 = swift_retain();
          char v18 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v17, v6);
          uint64_t result = swift_release();
          --v5;
          if ((v18 & 1) != 0) {
            goto LABEL_39;
          }
        }
      }

uint64_t partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)( uint64_t a1)
{
  return specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(a1);
}

{
  uint64_t v1;
  return specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with copy of (key: String, value: Encodable)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_183256C64()
{
  return swift_deallocObject();
}

uint64_t sub_183256C94()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of (key: String, value: Encodable)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(a1);
}

uint64_t specialized _BPlistEncodingFormat.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0LL;
  *(void *)(v2 + 32) = 0LL;
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 2LL;
  *(_BYTE *)(v2 + 40) = -112;
  *(void *)(v2 + 48) = -1LL;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + 32) = 0LL;
  *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(_BYTE *)(v3 + 40) = -112;
  *(void *)(v3 + 48) = -1LL;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 24) = 0LL;
  *(void *)(v4 + 32) = 0LL;
  *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1LL;
  *(_BYTE *)(v4 + 40) = -112;
  *(void *)(v4 + 48) = -1LL;
  uint64_t result = swift_allocObject();
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 2LL;
  *(_BYTE *)(result + 40) = -112;
  *(void *)(result + 48) = -1LL;
  *a1 = v2;
  a1[1] = v3;
  uint64_t v6 = MEMORY[0x18961AFF8];
  a1[2] = v4;
  a1[3] = v6;
  a1[4] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist()
{
  unint64_t result = lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist;
  if (!lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for _PlistUnkeyedEncodingContainerBPlist,  &unk_189C854C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist);
  }

  return result;
}

uint64_t type metadata accessor for _PlistKeyedEncodingContainerBPlist( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _PlistKeyedEncodingContainerBPlist);
}

void *type metadata accessor for _PlistUnkeyedEncodingContainerBPlist()
{
  return &unk_189C854C0;
}

uint64_t destroy for _BPlistEncodingFormat.Writer(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)(a1 + 40), *(void *)(a1 + 48));
}

uint64_t initializeWithCopy for _BPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  unint64_t v4 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v3, v4);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v4;
  return a1;
}

uint64_t assignWithCopy for _BPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  unint64_t v4 = *(void *)(a2 + 48);
  outlined copy of Data._Representation(v5, v4);
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

uint64_t assignWithTake for _BPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(void *)(a1 + 48);
  __int128 v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for _BPlistEncodingFormat.Writer()
{
  return &type metadata for _BPlistEncodingFormat.Writer;
}

uint64_t IntegerFormatStyle.format(_:)(uint64_t a1, uint64_t a2)
{
  void (*v35)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  char v41;
  char *v42;
  BOOL v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  char *v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  char *v71;
  char *v72;
  uint64_t v73;
  BOOL v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t AssociatedConformanceWitness;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE v116[144];
  uint64_t v117;
  uint64_t v3 = v2;
  v112 = a1;
  v117 = *MEMORY[0x1895F89C0];
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v101 = *(void *)(AssociatedTypeWitness - 8);
  __int128 v102 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v100 = (char *)&v95 - v8;
  v107 = v5;
  unint64_t v99 = *(void *)(*(void *)(v5 + 24) + 16LL);
  v96 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v96);
  v95 = (char *)&v95 - v9;
  unint64_t v108 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v97 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v98 = (char *)&v95 - v13;
  MEMORY[0x1895F8858](v14);
  uint64_t v110 = (char *)&v95 - v15;
  MEMORY[0x1895F8858](v16);
  __int128 v103 = (char *)&v95 - v17;
  MEMORY[0x1895F8858](v18);
  v111 = (char *)&v95 - v19;
  MEMORY[0x1895F8858](v20);
  uint64_t v109 = (char *)&v95 - v21;
  MEMORY[0x1895F8858](v22);
  __int128 v105 = (char *)&v95 - v23;
  MEMORY[0x1895F8858](v24);
  __int128 v104 = (char *)&v95 - v25;
  uint64_t v26 = type metadata accessor for ICUNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v26);
  Swift::Int v28 = (char *)&v95 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v106 = v3 + *(int *)(a2 + 36);
  uint64_t v29 = *(void *)(v3 + 8);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 472);
  swift_unknownObjectRetain();
  uint64_t v32 = v31(ObjectType, v29);
  uint64_t v34 = v33;
  swift_unknownObjectRelease();
  unint64_t v35 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v29 + 464);
  swift_unknownObjectRetain();
  v35(&v114, ObjectType, v29);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)&v114,  (uint64_t)v116,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature( v106,  (uint64_t)v28,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v36 = (uint64_t *)&v28[*(int *)(v26 + 20)];
  *uint64_t v36 = v32;
  v36[1] = v34;
  outlined init with take of LocalePreferences?( (uint64_t)v116,  (uint64_t)&v28[*(int *)(v26 + 24)],  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  unint64_t v37 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v28);
  outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v28,  type metadata accessor for ICUNumberFormatter.Signature);
  if (!v37)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v111, v112, v6);
    return String.init<A>(_:radix:uppercase:)();
  }

  uint64_t v106 = v37;
  Swift::Int v38 = v108;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v108 + 16);
  uint64_t v40 = v104;
  v39(v104, v112, v6);
  Swift::Int v41 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v42 = v105;
  v39(v105, (uint64_t)v40, v6);
  uint64_t v43 = (v41 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
  uint64_t v44 = v110;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v38 + 8);
  v45(v42, v6);
  uint64_t v46 = v109;
  v39(v109, (uint64_t)v40, v6);
  if (!v43)
  {
    v45(v46, v6);
    goto LABEL_12;
  }

  v114 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    __int128 v47 = v109;
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v69 = v111;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v70 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v71 = v69;
      uint64_t v44 = v110;
      v45(v71, v6);
      v45(v47, v6);
      if ((v70 & 1) != 0) {
        goto LABEL_43;
      }
    }

    else
    {
      __int128 v48 = dispatch thunk of BinaryInteger._lowWord.getter();
      v45(v47, v6);
      if (v48 < v114) {
        goto LABEL_43;
      }
    }

uint64_t IntegerFormatStyle.Currency.format(_:)(uint64_t a1, uint64_t a2)
{
  return IntegerFormatStyle.Currency.format(_:)( a1,  a2,  (void (*)(void, __n128))type metadata accessor for ICUCurrencyNumberFormatter,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))static ICUCurrencyNumberFormatter.create<A>(for:));
}

uint64_t IntegerFormatStyle.Percent.format(_:)(uint64_t a1, uint64_t a2)
{
  return IntegerFormatStyle.Currency.format(_:)( a1,  a2,  (void (*)(void, __n128))type metadata accessor for ICUPercentNumberFormatter,  static ICUPercentNumberFormatter.create<A>(for:));
}

uint64_t IntegerFormatStyle.Currency.format(_:)( uint64_t a1, uint64_t a2, void (*a3)(void, __n128), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v103 = *MEMORY[0x1895F89C0];
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v92 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v93 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v91 = (char *)&v84 - v11;
  uint64_t v88 = *(void *)(*(void *)(v8 + 24) + 16LL);
  uint64_t v87 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v87);
  uint64_t v86 = (char *)&v84 - v12;
  uint64_t v13 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v14);
  v89 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  v90 = (char *)&v84 - v17;
  MEMORY[0x1895F8858](v18);
  v95 = (char *)&v84 - v19;
  MEMORY[0x1895F8858](v20);
  uint64_t v98 = (char *)&v84 - v21;
  MEMORY[0x1895F8858](v22);
  unint64_t v99 = (char *)&v84 - v23;
  MEMORY[0x1895F8858](v24);
  uint64_t v26 = (char *)&v84 - v25;
  MEMORY[0x1895F8858](v27);
  uint64_t v29 = (char *)&v84 - v28;
  __n128 v31 = MEMORY[0x1895F8858](v30);
  uint64_t v33 = (char *)&v84 - v32;
  a3(0LL, v31);
  uint64_t v97 = a4(v4, v9, v8);
  if (!v97)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v99, a1, v9);
    return String.init<A>(_:radix:uppercase:)();
  }

  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v94 = a1;
  v34(v33, a1, v9);
  char v35 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v96 = v34;
  v34(v29, (uint64_t)v33, v9);
  BOOL v36 = (v35 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
  unint64_t v37 = v98;
  uint64_t v85 = v13;
  Swift::Int v38 = *(void (**)(char *, uint64_t))(v13 + 8);
  v38(v29, v9);
  uint64_t v39 = (void (*)(char *, char *, uint64_t))v96;
  v96(v26, (uint64_t)v33, v9);
  if (!v36)
  {
    v38(v26, v9);
    uint64_t v43 = v94;
    Swift::Int v41 = v95;
    uint64_t v44 = v97;
    goto LABEL_12;
  }

  uint64_t v101 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    uint64_t v40 = dispatch thunk of BinaryInteger.bitWidth.getter();
    Swift::Int v41 = v95;
    if (v40 >= 64)
    {
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v60 = v99;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v61 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v62 = v60;
      unint64_t v37 = v98;
      v38(v62, v9);
      v38(v26, v9);
      uint64_t v43 = v94;
      uint64_t v44 = v97;
      if ((v61 & 1) != 0) {
        goto LABEL_42;
      }
    }

    else
    {
      uint64_t v42 = dispatch thunk of BinaryInteger._lowWord.getter();
      v38(v26, v9);
      uint64_t v43 = v94;
      uint64_t v44 = v97;
      if (v42 < v101) {
        goto LABEL_42;
      }
    }

__n128 IntegerFormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *a3 = v7;
  return result;
}

uint64_t IntegerFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 IntegerFormatStyle.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  *Swift::Int v1 = *a1;
  return result;
}

uint64_t (*IntegerFormatStyle.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 IntegerFormatStyle.init(locale:)@<Q0>( __n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  __n128 v7 = (char *)a5 + *(int *)(type metadata accessor for IntegerFormatStyle(0LL, a2, a3, a4) + 36);
  *(void *)__n128 v7 = 0LL;
  v7[8] = 1;
  *((void *)v7 + 2) = 0LL;
  *((void *)v7 + 3) = 0LL;
  *((void *)v7 + 4) = 0LL;
  *((void *)v7 + 5) = 0x1FFFFFFFELL;
  *((void *)v7 + 7) = 0LL;
  *((void *)v7 + 8) = 0LL;
  *((void *)v7 + 6) = 0LL;
  *((_DWORD *)v7 + 18) = 131584;
  *((_WORD *)v7 + 38) = 512;
  uint64_t v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v9 = &v7[v8[9]];
  uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
  __n128 v13 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = &v7[v8[10]];
  *(void *)uint64_t v11 = 0LL;
  v11[8] = -1;
  v7[v8[11]] = 3;
  __n128 result = v13;
  *a5 = v13;
  return result;
}

uint64_t IntegerFormatStyle.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.attributed.getter(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v3 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v3, a1);
  type metadata accessor for IntegerFormatStyle.Attributed.Style(0LL, *(void *)(a1 + 16), *(void *)(a1 + 24), v5);
  return swift_storeEnumTagMultiPayload();
}

uint64_t static IntegerFormatStyle.== infix(_:_:)(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static IntegerFormatStyle.== infix(_:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle);
}

uint64_t IntegerFormatStyle.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x697463656C6C6F63LL;
  }
  else {
    return 0x656C61636F6CLL;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IntegerFormatStyle<A>.CodingKeys()
{
  return PredicateExpressions.KeyPath<>.CodingKeys.hashValue.getter(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.CodingKeys( a1,  a2,  a3,  (void (*)(_BYTE *, void, void, void))PredicateExpressions.KeyPath<>.CodingKeys.hash(into:));
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IntegerFormatStyle<A>.CodingKeys()
{
  return IntegerFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized NSDecimal.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t IntegerFormatStyle.encode(to:)(void *a1, uint64_t a2)
{
  return IntegerFormatStyle.encode(to:)( a1,  a2,  (uint64_t (*)(uint64_t, void, void))type metadata accessor for IntegerFormatStyle.CodingKeys,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.CodingKeys);
}

Swift::Int IntegerFormatStyle.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.hash(into:));
}

uint64_t IntegerFormatStyle.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = a4;
  __n128 v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v7);
  __n128 v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for IntegerFormatStyle.CodingKeys(255LL, a2, a3, v9);
  uint64_t v35 = MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.CodingKeys, v10);
  uint64_t v34 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v30 = *(void *)(v34 - 8);
  MEMORY[0x1895F8858](v34);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v14 = type metadata accessor for IntegerFormatStyle(0LL, a2, a3, v13);
  uint64_t v29 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (_OWORD *)((char *)&v29 - v15);
  uint64_t v18 = (char *)&v29 + *(int *)(v17 + 36) - v15;
  *(void *)uint64_t v18 = 0LL;
  v18[8] = 1;
  *((void *)v18 + 2) = 0LL;
  *((void *)v18 + 3) = 0LL;
  *((void *)v18 + 4) = 0LL;
  *((void *)v18 + 5) = 0x1FFFFFFFELL;
  *((void *)v18 + 7) = 0LL;
  *((void *)v18 + 8) = 0LL;
  *((void *)v18 + 6) = 0LL;
  *((_DWORD *)v18 + 18) = 131584;
  *((_WORD *)v18 + 38) = 512;
  uint64_t v19 = &v18[v7[9]];
  uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
  uint64_t v21 = &v18[v7[10]];
  *(void *)uint64_t v21 = 0LL;
  void v21[8] = -1;
  v18[v7[11]] = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v33 = v12;
  uint64_t v22 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v18,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }

  else
  {
    uint64_t v23 = v30;
    uint64_t v24 = (uint64_t)v31;
    uint64_t v36 = v14;
    uint64_t v25 = v32;
    char v38 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *uint64_t v16 = v37;
    LOBYTE(v37) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection,  type metadata accessor for NumberFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v33, v34);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v24, (uint64_t)v18);
    uint64_t v26 = v29;
    uint64_t v27 = v36;
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v29 + 16))(v25, v16, v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v26 + 8))(v16, v27);
  }

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return IntegerFormatStyle.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>( void *a1, uint64_t a2)
{
  return IntegerFormatStyle.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>( __int128 *a1, __int128 *a2, uint64_t a3)
{
  return static IntegerFormatStyle.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t (*IntegerFormatStyle.Percent.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 IntegerFormatStyle.Percent.init(locale:)@<Q0>( __n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  __n128 v7 = (char *)a5 + *(int *)(type metadata accessor for IntegerFormatStyle.Percent(0LL, a2, a3, a4) + 36);
  uint64_t v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v9 = &v7[v8[9]];
  uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
  __n128 v13 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  *(void *)__n128 v7 = 0x3FF0000000000000LL;
  v7[8] = 0;
  *((void *)v7 + 2) = 0LL;
  *((void *)v7 + 3) = 0LL;
  *((void *)v7 + 4) = 0LL;
  *((void *)v7 + 5) = 0x1FFFFFFFELL;
  *((void *)v7 + 7) = 0LL;
  *((void *)v7 + 8) = 0LL;
  *((void *)v7 + 6) = 0LL;
  *((_DWORD *)v7 + 18) = 131584;
  *((_WORD *)v7 + 38) = 512;
  uint64_t v11 = &v7[v8[10]];
  *(void *)uint64_t v11 = 0LL;
  v11[8] = -1;
  v7[v8[11]] = 3;
  __n128 result = v13;
  *a5 = v13;
  return result;
}

uint64_t IntegerFormatStyle.Percent.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.attributed.getter(a1, a2);
}

uint64_t IntegerFormatStyle.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  *(_BYTE *)(a3 + *(int *)(a2 + 36) + 73) = v6;
  return result;
}

__n128 IntegerFormatStyle.precision(_:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v11 = a1[1];
  __int128 v12 = *a1;
  __n128 v10 = (__n128)a1[2];
  uint64_t v6 = *((void *)a1 + 6);
  char v7 = *((_BYTE *)a1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  uint64_t v8 = a3 + *(int *)(a2 + 36);
  *(_OWORD *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v12;
  *(_OWORD *)(v8 + 32) = v11;
  __n128 result = v10;
  *(__n128 *)(v8 + 48) = v10;
  *(void *)(v8 + 64) = v6;
  *(_BYTE *)(v8 + 72) = v7;
  return result;
}

uint64_t IntegerFormatStyle.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v6 = *a1;
  int v7 = a1[1];
  int v8 = a1[2];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  if (v7) {
    __int16 v10 = 256;
  }
  else {
    __int16 v10 = 0;
  }
  uint64_t v11 = a3 + *(int *)(a2 + 36);
  *(_BYTE *)(v11 + 76) = v8 != 0;
  *(_WORD *)(v11 + 74) = v10 | v6;
  return result;
}

uint64_t IntegerFormatStyle.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  *(_BYTE *)(a3 + *(int *)(a2 + 36) + 77) = v6;
  return result;
}

uint64_t IntegerFormatStyle.rounded(rule:increment:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = a5 + *(int *)(a4 + 36);
  uint64_t v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v13 = v11 + *(int *)(v12 + 36);
  outlined destroy of FloatingPointRoundingRule?(v13);
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v13, 0LL, 1LL, v14);
  if ((a3 & 1) == 0)
  {
    uint64_t v17 = v11 + *(int *)(v12 + 40);
    *(void *)uint64_t v17 = a2;
    *(_BYTE *)(v17 + 8) = 0;
  }

  return result;
}

uint64_t IntegerFormatStyle.scale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4 = v3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v4, a1);
  uint64_t v9 = a2 + *(int *)(a1 + 36);
  *(double *)uint64_t v9 = a3;
  *(_BYTE *)(v9 + 8) = 0;
  return result;
}

uint64_t IntegerFormatStyle.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  uint64_t v7 = a3 + *(int *)(a2 + 36);
  uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  *(_BYTE *)(v7 + *(int *)(result + 44)) = v6;
  return result;
}

void IntegerFormatStyle.hash(into:)(uint64_t a1, uint64_t a2)
{
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  uint64_t v58;
  Swift::UInt64 v59;
  Swift::UInt64 v60;
  int v61;
  Swift::UInt v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  Swift::UInt v67;
  int *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int v72;
  Swift::UInt v73;
  Swift::UInt64 v74;
  Swift::UInt v75;
  void *v76;
  id v77;
  void *v78;
  uint64_t v79;
  void *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[144];
  char v86[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  void v104[18];
  _BYTE v105[144];
  _BYTE v106[152];
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v82 = v6;
  uint64_t v83 = v7;
  MEMORY[0x1895F8858](v6);
  uint64_t v81 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v9);
  uint64_t v84 = (uint64_t)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = v2[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if ((v13(ObjectType, v11) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 464);
    swift_unknownObjectRetain();
    v15(v104, ObjectType, v11);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v104,  (uint64_t)v105,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v106,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
    {
      Swift::UInt8 v14 = 0;
      goto LABEL_5;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v86,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v86[0] == 2)
    {
      uint64_t v17 = 0;
    }

    else
    {
      uint64_t v17 = v86[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v17);
    uint64_t v18 = v87;
    uint64_t v79 = a2;
    if (v87)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v18 + 16));
      uint64_t v19 = *(void *)(v18 + 16);
      if (v19)
      {
        outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v20 = v18 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v20 += 16LL;
          --v19;
        }

        while (v19);
        swift_bridgeObjectRelease();
        if (!v88)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v89) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }

uint64_t static IntegerFormatStyle.Percent.== infix(_:_:)(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static IntegerFormatStyle.== infix(_:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Percent);
}

uint64_t static IntegerFormatStyle.== infix(_:_:)( __int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  __int128 v10 = *a1;
  __int128 v13 = *a2;
  __int128 v14 = v10;
  uint64_t v11 = a5(0LL, a3, a4);
  return static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)a1 + *(int *)(v11 + 36),  (char *)a2 + *(int *)(v11 + 36));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Percent.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.CodingKeys( a1,  a2,  a3,  (void (*)(_BYTE *, void, void, void))IntegerFormatStyle.Percent.CodingKeys.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, void, void, void))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Percent.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Percent.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t IntegerFormatStyle.Percent.encode(to:)(void *a1, uint64_t a2)
{
  return IntegerFormatStyle.encode(to:)( a1,  a2,  (uint64_t (*)(uint64_t, void, void))type metadata accessor for IntegerFormatStyle.Percent.CodingKeys,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent.CodingKeys);
}

uint64_t IntegerFormatStyle.encode(to:)( void *a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, void), uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v8 = a3(255LL, *(void *)(a2 + 16), *(void *)(a2 + 24));
  MEMORY[0x186E20D4C](a4, v8);
  uint64_t v9 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)v15 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v16 = *v6;
  char v17 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint64_t v13 = v15[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v13)
  {
    LOBYTE(v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection,  type metadata accessor for NumberFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int IntegerFormatStyle.Percent.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter( a1,  (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.Percent.hash(into:));
}

uint64_t IntegerFormatStyle.Percent.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v7);
  __n128 v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for IntegerFormatStyle.Percent.CodingKeys(255LL, a2, a3, v9);
  uint64_t v35 = MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Percent.CodingKeys, v10);
  uint64_t v34 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v30 = *(void *)(v34 - 8);
  MEMORY[0x1895F8858](v34);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v14 = type metadata accessor for IntegerFormatStyle.Percent(0LL, a2, a3, v13);
  uint64_t v29 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  __int128 v16 = (_OWORD *)((char *)&v29 - v15);
  uint64_t v18 = (char *)&v29 + *(int *)(v17 + 36) - v15;
  uint64_t v19 = &v18[v7[9]];
  uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
  *(void *)uint64_t v18 = 0x3FF0000000000000LL;
  v18[8] = 0;
  *((void *)v18 + 2) = 0LL;
  *((void *)v18 + 3) = 0LL;
  *((void *)v18 + 4) = 0LL;
  *((void *)v18 + 5) = 0x1FFFFFFFELL;
  *((void *)v18 + 7) = 0LL;
  *((void *)v18 + 8) = 0LL;
  *((void *)v18 + 6) = 0LL;
  *((_DWORD *)v18 + 18) = 131584;
  *((_WORD *)v18 + 38) = 512;
  uint64_t v21 = &v18[v7[10]];
  *(void *)uint64_t v21 = 0LL;
  void v21[8] = -1;
  v18[v7[11]] = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v33 = v12;
  uint64_t v22 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v18,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }

  else
  {
    uint64_t v23 = v30;
    uint64_t v24 = (uint64_t)v31;
    uint64_t v36 = v14;
    uint64_t v25 = v32;
    char v38 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *__int128 v16 = v37;
    LOBYTE(v37) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection,  type metadata accessor for NumberFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v33, v34);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v24, (uint64_t)v18);
    uint64_t v26 = v29;
    uint64_t v27 = v36;
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v29 + 16))(v25, v16, v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v26 + 8))(v16, v27);
  }

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>.Percent@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return IntegerFormatStyle.Percent.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>.Percent( void *a1, uint64_t a2)
{
  return IntegerFormatStyle.Percent.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Percent( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.Percent.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Percent( __int128 *a1, __int128 *a2, uint64_t a3)
{
  return static IntegerFormatStyle.Percent.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t (*IntegerFormatStyle.Currency.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t IntegerFormatStyle.Currency.currencyCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IntegerFormatStyle.Currency.init(code:locale:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(_OWORD *)a6 = *a3;
  *(void *)(a6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
  *(void *)(a6 + 24) = a2;
  uint64_t v6 = a6 + *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0LL, a4, a5, a4) + 40);
  uint64_t v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v8 = v6 + v7[9];
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))( v8,  1LL,  1LL,  v9);
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(void *)(v6 + 24) = 0LL;
  *(void *)(v6 + 32) = 0LL;
  *(void *)(v6 + 40) = 0x1FFFFFFFELL;
  *(void *)(v6 + 56) = 0LL;
  *(void *)(v6 + 64) = 0LL;
  *(void *)(v6 + 48) = 0LL;
  *(_WORD *)(v6 + 72) = 512;
  *(_DWORD *)(v6 + 74) = 2;
  *(_BYTE *)(v6 + 78) = 2;
  uint64_t v11 = v6 + v7[10];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = -1;
  *(_BYTE *)(v6 + v7[11]) = 1;
  *(_BYTE *)(v6 + v7[12]) = 3;
  return result;
}

uint64_t IntegerFormatStyle.Currency.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.attributed.getter(a1, a2);
}

uint64_t IntegerFormatStyle.Currency.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  *(_BYTE *)(a3 + *(int *)(a2 + 40) + 73) = v6;
  return result;
}

__n128 IntegerFormatStyle.Currency.precision(_:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v11 = a1[1];
  __int128 v12 = *a1;
  __n128 v10 = (__n128)a1[2];
  uint64_t v6 = *((void *)a1 + 6);
  char v7 = *((_BYTE *)a1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  uint64_t v8 = a3 + *(int *)(a2 + 40);
  *(_OWORD *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v12;
  *(_OWORD *)(v8 + 32) = v11;
  __n128 result = v10;
  *(__n128 *)(v8 + 48) = v10;
  *(void *)(v8 + 64) = v6;
  *(_BYTE *)(v8 + 72) = v7;
  return result;
}

uint64_t IntegerFormatStyle.Currency.sign(strategy:)@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *a1;
  int v7 = a1[1];
  int v8 = a1[2];
  int v9 = a1[3];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  if (v7) {
    int v11 = 256;
  }
  else {
    int v11 = 0;
  }
  int v12 = v11 | v6;
  if (v8) {
    int v13 = 0x10000;
  }
  else {
    int v13 = 0;
  }
  if (v9) {
    int v14 = 0x1000000;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)(a3 + *(int *)(a2 + 40) + 74) = v12 | v13 | v14;
  return result;
}

uint64_t IntegerFormatStyle.Currency.decimalSeparator(strategy:)@<X0>( char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  *(_BYTE *)(a3 + *(int *)(a2 + 40) + 78) = v6;
  return result;
}

uint64_t IntegerFormatStyle.Currency.rounded(rule:increment:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = a5 + *(int *)(a4 + 40);
  uint64_t v12 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v13 = v11 + *(int *)(v12 + 36);
  outlined destroy of FloatingPointRoundingRule?(v13);
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v13, 0LL, 1LL, v14);
  if ((a3 & 1) == 0)
  {
    uint64_t v17 = v11 + *(int *)(v12 + 40);
    *(void *)uint64_t v17 = a2;
    *(_BYTE *)(v17 + 8) = 0;
  }

  return result;
}

uint64_t IntegerFormatStyle.Currency.scale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4 = v3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v4, a1);
  uint64_t v9 = a2 + *(int *)(a1 + 40);
  *(double *)uint64_t v9 = a3;
  *(_BYTE *)(v9 + 8) = 0;
  return result;
}

uint64_t IntegerFormatStyle.Currency.presentation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  uint64_t v7 = a3 + *(int *)(a2 + 40);
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  *(_BYTE *)(v7 + *(int *)(result + 44)) = v6;
  return result;
}

uint64_t IntegerFormatStyle.Currency.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, v3, a2);
  uint64_t v7 = a3 + *(int *)(a2 + 40);
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  *(_BYTE *)(v7 + *(int *)(result + 48)) = v6;
  return result;
}

void IntegerFormatStyle.Currency.hash(into:)(uint64_t a1, uint64_t a2)
{
  void (*v16)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  char *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  char *v38;
  char *v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  char *v45;
  void *v46;
  void *v47;
  char *v48;
  id v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::UInt v54;
  Swift::UInt v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  Swift::UInt8 v58;
  uint64_t v59;
  Swift::UInt64 v60;
  Swift::UInt64 v61;
  uint64_t v62;
  int v63;
  Swift::UInt v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  Swift::UInt v68;
  int *v69;
  char *v70;
  uint64_t v71;
  int v72;
  Swift::UInt v73;
  Swift::UInt64 v74;
  Swift::UInt v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[144];
  char v86[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  char *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  void v104[18];
  _BYTE v105[144];
  _BYTE v106[152];
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v83 = v6;
  uint64_t v84 = v7;
  MEMORY[0x1895F8858](v6);
  uint64_t v82 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 48);
  swift_unknownObjectRetain();
  if ((v14(ObjectType, v12) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v12 + 64))(ObjectType, v12);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    __int128 v16 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 464);
    swift_unknownObjectRetain();
    v16(v104, ObjectType, v12);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v104,  (uint64_t)v105,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v106,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
    {
      Swift::UInt8 v15 = 0;
      goto LABEL_5;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v86,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v86[0] == 2)
    {
      uint64_t v18 = 0;
    }

    else
    {
      uint64_t v18 = v86[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v18);
    uint64_t v19 = v87;
    uint64_t v80 = a2;
    if (v87)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v19 + 16));
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v21 = v19 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v21 += 16LL;
          --v20;
        }

        while (v20);
        swift_bridgeObjectRelease();
        if (!v88)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v89) {
            goto LABEL_15;
          }
          goto LABEL_21;
        }

uint64_t static IntegerFormatStyle.Currency.== infix(_:_:)( __int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v8 = *a1;
  __int128 v13 = *a2;
  __int128 v14 = v8;
  uint64_t v9 = *((void *)a2 + 3);
  BOOL v10 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == v9;
  if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0LL;
  }
  uint64_t v11 = type metadata accessor for IntegerFormatStyle.Currency(0LL, a3, a4, v9);
  return static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)a1 + *(int *)(v11 + 40),  (char *)a2 + *(int *)(v11 + 40));
}

uint64_t IntegerFormatStyle.Currency.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x656C61636F6CLL;
  }
  if (a1 == 1) {
    return 0x79636E6572727563LL;
  }
  return 0x697463656C6C6F63LL;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys( a1,  a2,  a3,  (void (*)(_BYTE *, void, void, void))IntegerFormatStyle.Currency.CodingKeys.hash(into:));
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IntegerFormatStyle<A>.Currency.CodingKeys()
{
  return IntegerFormatStyle.Currency.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized NSDecimal.FormatStyle.Currency.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Currency.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Currency.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t IntegerFormatStyle.Currency.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for IntegerFormatStyle.Currency.CodingKeys( 255LL,  *(void *)(a2 + 16),  *(void *)(a2 + 24),  a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency.CodingKeys, v5);
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  BOOL v10 = (__int128 *)v13[0];
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v14 = *v10;
  char v15 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint64_t v11 = v13[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 2;
    type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int IntegerFormatStyle.Currency.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter( a1,  (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.Currency.hash(into:));
}

uint64_t IntegerFormatStyle.Currency.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v27 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v27);
  uint64_t v26 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for IntegerFormatStyle.Currency.CodingKeys(255LL, a2, a3, v8);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency.CodingKeys, v9);
  uint64_t v28 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v25 = *(void *)(v28 - 8);
  MEMORY[0x1895F8858](v28);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v24 = type metadata accessor for IntegerFormatStyle.Currency(0LL, a2, a3, v12);
  uint64_t v13 = *(void *)(v24 - 8);
  MEMORY[0x1895F8858](v24);
  char v15 = (char *)&v23 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v29 = v11;
  uint64_t v16 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v18 = v24;
  uint64_t v17 = v25;
  uint64_t v30 = v13;
  uint64_t v19 = (uint64_t)v26;
  char v32 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)char v15 = v31;
  LOBYTE(v31) = 1;
  *((void *)v15 + 2) = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v15 + 3) = v20;
  LOBYTE(v31) = 2;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v29, v28);
  outlined init with take of ICUNumberFormatter.Signature( v19,  (uint64_t)&v15[*(int *)(v18 + 40)],  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v21 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v23, v15, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v15, v18);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>.Currency@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return IntegerFormatStyle.Currency.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>.Currency( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return IntegerFormatStyle.Currency.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.Currency.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Currency( __int128 *a1, __int128 *a2, uint64_t a3)
{
  return static IntegerFormatStyle.Currency.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance IntegerFormatStyle<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = IntegerFormatStyle.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance IntegerFormatStyle<A>.Percent@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = IntegerFormatStyle.Percent.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance IntegerFormatStyle<A>.Currency@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = IntegerFormatStyle.Currency.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t IntegerFormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.parseStrategy.getter( a1,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>,  a2);
}

uint64_t IntegerFormatStyle.Currency.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(a1 - 8);
  __n128 v10 = MEMORY[0x1895F8858](v9);
  uint64_t v12 = (__int128 *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void (**)(__int128 *, uint64_t, uint64_t, __n128))(v8 + 16);
  v13(v12, v2, a1, v10);
  ((void (*)(uint64_t, __int128 *, uint64_t))v13)(a2, v12, a1);
  uint64_t v14 = MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, a1);
  char v15 = (int *)type metadata accessor for IntegerParseStrategy(0LL, a1, v14, *(void *)(a1 + 24));
  *(_BYTE *)(a2 + v15[11]) = 1;
  uint64_t v16 = v15[13];
  __int128 v19 = *v12;
  *(_OWORD *)(a2 + v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v19;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v12 + *(int *)(a1 + 40),  (uint64_t)v7,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v17 = *(void (**)(__int128 *, uint64_t))(v8 + 8);
  swift_unknownObjectRetain();
  v17(v12, a1);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v7,  a2 + v15[12],  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
}

uint64_t IntegerFormatStyle.Percent.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.parseStrategy.getter( a1,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent,  a2);
}

uint64_t IntegerFormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v6 = MEMORY[0x1895F8858](a1);
  uint64_t v8 = (_OWORD *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __n128 v10 = *(void (**)(_OWORD *, __n128))(v9 + 16);
  v10(v8, v6);
  ((void (*)(uint64_t, _OWORD *, uint64_t))v10)(a3, v8, a1);
  uint64_t v11 = MEMORY[0x186E20D4C](a2, a1);
  uint64_t v12 = (int *)type metadata accessor for IntegerParseStrategy(0LL, a1, v11, *(void *)(a1 + 24));
  *(_BYTE *)(a3 + v12[11]) = 1;
  *(_OWORD *)(a3 + v12[13]) = *v8;
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v8 + *(int *)(a1 + 36),  a3 + v12[12],  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  return swift_storeEnumTagMultiPayload();
}

uint64_t static FormatStyle.currency<A>(code:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = static LocaleCache.cache + 16;
  uint64_t v12 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v12);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v11, &v22);
  os_unfair_lock_unlock(v12);
  swift_release_n();
  uint64_t v13 = v22;
  uint64_t v14 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *a5 = v13;
  a5[1] = v14;
  a5[2] = a1;
  a5[3] = a2;
  uint64_t v16 = (char *)a5 + *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0LL, a3, a4, v15) + 40);
  uint64_t v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v18 = &v16[v17[9]];
  uint64_t v19 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))( v18,  1LL,  1LL,  v19);
  *(void *)uint64_t v16 = 0LL;
  _DWORD v16[8] = 1;
  *((void *)v16 + 2) = 0LL;
  *((void *)v16 + 3) = 0LL;
  *((void *)v16 + 4) = 0LL;
  *((void *)v16 + 5) = 0x1FFFFFFFELL;
  *((void *)v16 + 7) = 0LL;
  *((void *)v16 + 8) = 0LL;
  *((void *)v16 + 6) = 0LL;
  *((_WORD *)v16 + 36) = 512;
  *(_DWORD *)(v16 + 74) = 2;
  v16[78] = 2;
  uint64_t v21 = &v16[v17[10]];
  *(void *)uint64_t v21 = 0LL;
  void v21[8] = -1;
  v16[v17[11]] = 1;
  v16[v17[12]] = 3;
  return result;
}

uint64_t IntegerFormatStyle.Attributed.Style.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = type metadata accessor for IntegerFormatStyle.Currency(0LL, v6, v7, a4);
  uint64_t v34 = *(void *)(v8 - 8);
  uint64_t v35 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v12 = type metadata accessor for IntegerFormatStyle.Percent(0LL, v6, v7, v11);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v33 - v14;
  uint64_t v17 = type metadata accessor for IntegerFormatStyle(0LL, v6, v7, v16);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v33 - v19;
  __n128 v22 = MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))(v24, v4, a2, v22);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v24, v12);
      uint64_t v27 = v36;
      Hasher._combine(_:)(1uLL);
      IntegerFormatStyle.hash(into:)(v27, v12);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }

    else
    {
      uint64_t v31 = v34;
      uint64_t v30 = v35;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v10, v24, v35);
      uint64_t v32 = v36;
      Hasher._combine(_:)(2uLL);
      IntegerFormatStyle.Currency.hash(into:)(v32, v30);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v10, v30);
    }
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v24, v17);
    uint64_t v29 = v36;
    Hasher._combine(_:)(0LL);
    IntegerFormatStyle.hash(into:)(v29, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }

uint64_t static IntegerFormatStyle.Attributed.Style.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v62 = a1;
  uint64_t v63 = a2;
  uint64_t v6 = type metadata accessor for IntegerFormatStyle.Currency(0LL, a3, a4, a4);
  uint64_t v57 = *(void *)(v6 - 8);
  uint64_t v58 = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v54 = (char *)&v52 - v7;
  uint64_t v9 = type metadata accessor for IntegerFormatStyle.Percent(0LL, a3, a4, v8);
  uint64_t v55 = *(void *)(v9 - 8);
  uint64_t v56 = v9;
  MEMORY[0x1895F8858](v9);
  char v53 = (char *)&v52 - v10;
  uint64_t v12 = type metadata accessor for IntegerFormatStyle(0LL, a3, a4, v11);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (__int128 *)((char *)&v52 - v14);
  uint64_t v17 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0LL, a3, a4, v16);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v59 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  __n128 v22 = (char *)&v52 - v21;
  MEMORY[0x1895F8858](v23);
  uint64_t v25 = (char *)&v52 - v24;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v61 = *(void *)(TupleTypeMetadata2 - 8);
  __n128 v27 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v29 = (char *)&v52 - v28;
  uint64_t v31 = (char *)&v52 + *(int *)(v30 + 48) - v28;
  uint64_t v60 = v18;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16);
  v32((char *)&v52 - v28, v62, v17, v27);
  ((void (*)(char *, uint64_t, uint64_t))v32)(v31, v63, v17);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      ((void (*)(char *, char *, uint64_t))v32)(v22, v29, v17);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v34 = v55;
        uint64_t v35 = v56;
        uint64_t v36 = (__int128 *)v53;
        (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v53, v31, v56);
        __int128 v37 = *(_OWORD *)v22;
        __int128 v64 = *v36;
        __int128 v65 = v37;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v65, (uint64_t)&v64) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( &v22[*(int *)(v35 + 36)],  (char *)v36 + *(int *)(v35 + 36)) & 1) != 0)
        {
          char v38 = *(void (**)(__int128 *, uint64_t))(v34 + 8);
          v38(v36, v35);
          uint64_t v39 = v22;
LABEL_16:
          uint64_t v44 = v35;
LABEL_26:
          v38((__int128 *)v39, v44);
          uint64_t v45 = 1LL;
LABEL_29:
          uint64_t v46 = v60;
          goto LABEL_30;
        }

        uint64_t v47 = *(void (**)(__int128 *, uint64_t))(v34 + 8);
        v47(v36, v35);
        __int128 v48 = v22;
LABEL_22:
        uint64_t v49 = v35;
        goto LABEL_28;
      }

      (*(void (**)(char *, uint64_t))(v55 + 8))(v22, v56);
    }

    else
    {
      uint64_t v40 = v59;
      ((void (*)(char *, char *, uint64_t))v32)(v59, v29, v17);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v41 = v57;
        uint64_t v35 = v58;
        uint64_t v42 = v54;
        (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v54, v31, v58);
        __int128 v43 = *(_OWORD *)v40;
        __int128 v64 = *(_OWORD *)v42;
        __int128 v65 = v43;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v65, (uint64_t)&v64) & 1) != 0
          && (*((void *)v40 + 2) == *((void *)v42 + 2) && *((void *)v40 + 3) == *((void *)v42 + 3)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && specialized static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)( (uint64_t)&v40[*(int *)(v35 + 40)],  (uint64_t)&v42[*(int *)(v35 + 40)]))
        {
          char v38 = *(void (**)(__int128 *, uint64_t))(v41 + 8);
          v38((__int128 *)v42, v35);
          uint64_t v39 = v40;
          goto LABEL_16;
        }

        uint64_t v47 = *(void (**)(__int128 *, uint64_t))(v41 + 8);
        v47((__int128 *)v42, v35);
        __int128 v48 = v40;
        goto LABEL_22;
      }

      (*(void (**)(char *, uint64_t))(v57 + 8))(v40, v58);
    }
  }

  else
  {
    ((void (*)(char *, char *, uint64_t))v32)(v25, v29, v17);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(__int128 *, char *, uint64_t))(v13 + 32))(v15, v31, v12);
      __int128 v50 = *(_OWORD *)v25;
      __int128 v64 = *v15;
      __int128 v65 = v50;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v65, (uint64_t)&v64) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( &v25[*(int *)(v12 + 36)],  (char *)v15 + *(int *)(v12 + 36)) & 1) != 0)
      {
        char v38 = *(void (**)(__int128 *, uint64_t))(v13 + 8);
        v38(v15, v12);
        uint64_t v39 = v25;
        uint64_t v44 = v12;
        goto LABEL_26;
      }

      uint64_t v47 = *(void (**)(__int128 *, uint64_t))(v13 + 8);
      v47(v15, v12);
      __int128 v48 = v25;
      uint64_t v49 = v12;
LABEL_28:
      v47((__int128 *)v48, v49);
      uint64_t v45 = 0LL;
      goto LABEL_29;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v25, v12);
  }

  uint64_t v45 = 0LL;
  uint64_t v46 = v61;
  uint64_t v17 = TupleTypeMetadata2;
LABEL_30:
  (*(void (**)(char *, uint64_t))(v46 + 8))(v29, v17);
  return v45;
}

uint64_t IntegerFormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72656765746E69LL && a2 == 0xE700000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x746E6563726570LL && a2 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x79636E6572727563LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t IntegerFormatStyle.Attributed.Style.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x72656765746E69LL;
  }
  if (a1 == 1) {
    return 0x746E6563726570LL;
  }
  return 0x79636E6572727563LL;
}

uint64_t IntegerFormatStyle.Attributed.Style.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v75 = a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v8 = type metadata accessor for IntegerFormatStyle.Attributed.Style.CurrencyCodingKeys(255LL, v5, v6, a4);
  uint64_t v66 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys,  v8);
  uint64_t v67 = v8;
  uint64_t v72 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v50 = *(void *)(v72 - 8);
  MEMORY[0x1895F8858](v72);
  uint64_t v70 = (char *)&v49 - v9;
  uint64_t v71 = type metadata accessor for IntegerFormatStyle.Currency(0LL, v5, v6, v10);
  uint64_t v69 = *(void *)(v71 - 8);
  MEMORY[0x1895F8858](v71);
  uint64_t v68 = (char *)&v49 - v11;
  uint64_t v13 = type metadata accessor for IntegerFormatStyle.Attributed.Style.PercentCodingKeys(255LL, v5, v6, v12);
  uint64_t v58 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys,  v13);
  uint64_t v59 = v13;
  uint64_t v65 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v63 = *(void *)(v65 - 8);
  MEMORY[0x1895F8858](v65);
  uint64_t v62 = (char *)&v49 - v14;
  uint64_t v64 = type metadata accessor for IntegerFormatStyle.Percent(0LL, v5, v6, v15);
  uint64_t v61 = *(void *)(v64 - 8);
  MEMORY[0x1895F8858](v64);
  uint64_t v60 = (char *)&v49 - v16;
  uint64_t v18 = type metadata accessor for IntegerFormatStyle.Attributed.Style.IntegerCodingKeys(255LL, v5, v6, v17);
  uint64_t v19 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys,  v18);
  uint64_t v53 = v18;
  uint64_t v52 = v19;
  uint64_t v57 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v51 = *(void *)(v57 - 8);
  MEMORY[0x1895F8858](v57);
  uint64_t v55 = (char *)&v49 - v20;
  uint64_t v56 = type metadata accessor for IntegerFormatStyle(0LL, v5, v6, v21);
  uint64_t v54 = *(void *)(v56 - 8);
  MEMORY[0x1895F8858](v56);
  uint64_t v73 = (char *)&v49 - v22;
  uint64_t v23 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v24);
  uint64_t v26 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for IntegerFormatStyle.Attributed.Style.CodingKeys(255LL, v5, v6, v27);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.CodingKeys, v28);
  uint64_t v29 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v74 = *(void *)(v29 - 8);
  MEMORY[0x1895F8858](v29);
  uint64_t v31 = (char *)&v49 - v30;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v76, v75);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    uint64_t v33 = v31;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v35 = v60;
      uint64_t v34 = v61;
      uint64_t v36 = v26;
      uint64_t v37 = v64;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v60, v36, v64);
      char v78 = 1;
      char v38 = v62;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Percent, v37);
      uint64_t v39 = v65;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v40 = v63;
    }

    else
    {
      uint64_t v35 = v68;
      uint64_t v34 = v69;
      uint64_t v47 = v26;
      uint64_t v37 = v71;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v68, v47, v71);
      char v79 = 2;
      char v38 = v70;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, v37);
      uint64_t v39 = v72;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v40 = v50;
    }

    (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v37);
  }

  else
  {
    uint64_t v41 = v51;
    uint64_t v42 = v54;
    __int128 v43 = v26;
    uint64_t v44 = v56;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v73, v43, v56);
    char v77 = 0;
    uint64_t v45 = v55;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>, v44);
    uint64_t v46 = v57;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v33 = v31;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v45, v46);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v73, v44);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v33, v29);
}

Swift::Int IntegerFormatStyle.Attributed.Style.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t IntegerFormatStyle.Attributed.Style.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v97 = a5;
  uint64_t v93 = type metadata accessor for IntegerFormatStyle.Attributed.Style.CurrencyCodingKeys(255LL, a2, a3, a4);
  uint64_t v91 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys,  v93);
  uint64_t v85 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v84 = *(void *)(v85 - 8);
  MEMORY[0x1895F8858](v85);
  uint64_t v94 = (char *)&v75 - v8;
  uint64_t v10 = type metadata accessor for IntegerFormatStyle.Attributed.Style.PercentCodingKeys(255LL, a2, a3, v9);
  uint64_t v89 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys,  v10);
  uint64_t v90 = v10;
  uint64_t v83 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v82 = *(void *)(v83 - 8);
  MEMORY[0x1895F8858](v83);
  uint64_t v92 = (char *)&v75 - v11;
  uint64_t v13 = type metadata accessor for IntegerFormatStyle.Attributed.Style.IntegerCodingKeys(255LL, a2, a3, v12);
  uint64_t v14 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys,  v13);
  uint64_t v87 = v13;
  uint64_t v86 = v14;
  uint64_t v81 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x1895F8858](v81);
  uint64_t v88 = (char *)&v75 - v15;
  uint64_t v17 = type metadata accessor for IntegerFormatStyle.Attributed.Style.CodingKeys(255LL, a2, a3, v16);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.CodingKeys, v17);
  uint64_t v101 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v96 = *(void *)(v101 - 8);
  MEMORY[0x1895F8858](v101);
  uint64_t v19 = (char *)&v75 - v18;
  uint64_t v98 = a3;
  uint64_t v99 = a2;
  uint64_t v95 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0LL, a2, a3, v20);
  uint64_t v100 = *(void *)(v95 - 8);
  MEMORY[0x1895F8858](v95);
  uint64_t v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v23);
  uint64_t v25 = (char *)&v75 - v24;
  MEMORY[0x1895F8858](v26);
  uint64_t v28 = (char *)&v75 - v27;
  MEMORY[0x1895F8858](v29);
  uint64_t v31 = (char *)&v75 - v30;
  uint64_t v32 = a1;
  uint64_t v33 = a1[3];
  uint64_t v102 = v32;
  __swift_project_boxed_opaque_existential_1(v32, v33);
  uint64_t v34 = v103;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v34) {
    goto LABEL_11;
  }
  uint64_t v75 = v28;
  uint64_t v76 = v25;
  char v77 = v22;
  uint64_t v35 = v98;
  char v78 = v31;
  uint64_t v37 = v96;
  uint64_t v36 = v97;
  uint64_t v103 = 0LL;
  char v79 = v19;
  uint64_t v38 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v39 = _ArrayBuffer.requestNativeBuffer()();
  if (!v39)
  {
    uint64_t v108 = v38;
    uint64_t v40 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618488], v40);
    uint64_t v39 = _copyCollectionToContiguousArray<A>(_:)();
  }

  uint64_t v41 = v39;
  swift_bridgeObjectRelease();
  uint64_t v42 = v37;
  uint64_t v43 = v100;
  uint64_t v44 = (2LL * *(void *)(v41 + 16)) | 1;
  uint64_t v104 = v41;
  uint64_t v105 = v41 + 32;
  uint64_t v106 = 0LL;
  unint64_t v107 = v44;
  uint64_t v45 = type metadata accessor for ArraySlice();
  MEMORY[0x186E20D4C](MEMORY[0x189618FA0], v45);
  Collection<>.popFirst()();
  uint64_t v46 = v99;
  if (v108 == 3 || v106 != v107 >> 1)
  {
    uint64_t v56 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v58 = v57;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v58 = v95;
    uint64_t v59 = v101;
    uint64_t v60 = v79;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v56 - 8) + 104LL))( v58,  *MEMORY[0x189619358],  v56);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v60, v59);
LABEL_11:
    uint64_t v61 = (uint64_t)v102;
    return __swift_destroy_boxed_opaque_existential_1(v61);
  }

  if (!(_BYTE)v108)
  {
    LOBYTE(v108) = 0;
    uint64_t v63 = v88;
    uint64_t v48 = v101;
    uint64_t v49 = v79;
    uint64_t v64 = v103;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    if (!v64)
    {
      uint64_t v66 = type metadata accessor for IntegerFormatStyle(0LL, v46, v35, v65);
      MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>, v66);
      uint64_t v53 = v75;
      uint64_t v67 = v81;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v63, v67);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v79, v101);
      uint64_t v55 = v95;
      goto LABEL_18;
    }

    goto LABEL_16;
  }

  if (v108 != 1)
  {
    LOBYTE(v108) = 2;
    uint64_t v68 = v94;
    uint64_t v48 = v101;
    uint64_t v49 = v79;
    uint64_t v69 = v103;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    if (!v69)
    {
      uint64_t v71 = type metadata accessor for IntegerFormatStyle.Currency(0LL, v46, v35, v70);
      MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, v71);
      uint64_t v53 = v77;
      uint64_t v72 = v85;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v68, v72);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v79, v101);
      uint64_t v55 = v95;
      goto LABEL_18;
    }

    goto LABEL_16;
  }

  LOBYTE(v108) = 1;
  uint64_t v47 = v92;
  uint64_t v48 = v101;
  uint64_t v49 = v79;
  uint64_t v50 = v103;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v50)
  {
LABEL_16:
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v49, v48);
    uint64_t v61 = (uint64_t)v102;
    return __swift_destroy_boxed_opaque_existential_1(v61);
  }

  uint64_t v52 = type metadata accessor for IntegerFormatStyle.Percent(0LL, v46, v35, v51);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Percent, v52);
  uint64_t v53 = v76;
  uint64_t v54 = v83;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v47, v54);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v79, v101);
  uint64_t v55 = v95;
LABEL_18:
  swift_storeEnumTagMultiPayload();
  uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  uint64_t v74 = v78;
  v73(v78, v53, v55);
  v73(v36, v74, v55);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys( char *a1, char *a2)
{
  return static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
  return FloatingPointParseStrategy.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys( uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys( a1,  a2,  a3,  (void (*)(_BYTE *, void, void, void))FloatingPointParseStrategy.CodingKeys.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, void, void, void))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
  return IntegerFormatStyle.Attributed.Style.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = IntegerFormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = specialized URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = default argument 1 of _typeName(_:qualified:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>.Attributed.Style@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  return IntegerFormatStyle.Attributed.Style.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3, a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>.Attributed.Style( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return IntegerFormatStyle.Attributed.Style.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Attributed.Style( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.Attributed.Style.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Attributed.Style( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static IntegerFormatStyle.Attributed.Style.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t IntegerFormatStyle.Attributed.format(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  void (*v94)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t result;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  void (*v133)(char *, char *, uint64_t);
  uint64_t v134[18];
  __int128 v135[9];
  v125 = a4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for IntegerFormatStyle.Percent(0LL, v5, v6, a3);
  v115 = *(void *)(v7 - 8);
  v116 = v7;
  MEMORY[0x1895F8858](v7);
  v114 = (char *)&v105 - v8;
  v112 = type metadata accessor for IntegerFormatStyle.Currency(0LL, v5, v6, v9);
  uint64_t v110 = *(void *)(v112 - 8);
  MEMORY[0x1895F8858](v112);
  uint64_t v109 = (char *)&v105 - v10;
  v111 = type metadata accessor for ICUNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v111);
  v113 = (uint64_t)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v131 = type metadata accessor for IntegerFormatStyle(0LL, v5, v6, v12);
  v120 = *(void *)(v131 - 8);
  MEMORY[0x1895F8858](v131);
  uint64_t v14 = (char *)&v105 - v13;
  uint64_t v16 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0LL, v5, v6, v15);
  v126 = *(void *)(v16 - 8);
  v127 = v16;
  MEMORY[0x1895F8858](v16);
  v128 = (char *)&v105 - v17;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v118 = *(void *)(AssociatedTypeWitness - 8);
  v119 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  v117 = (char *)&v105 - v19;
  uint64_t v108 = *(void *)(*(void *)(v6 + 24) + 16LL);
  uint64_t v20 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v20);
  uint64_t v105 = (char *)&v105 - v21;
  MEMORY[0x1895F8858](v22);
  uint64_t v106 = (char *)&v105 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v24);
  unint64_t v107 = (char *)&v105 - v25;
  MEMORY[0x1895F8858](v26);
  v124 = (char *)&v105 - v27;
  MEMORY[0x1895F8858](v28);
  v122 = (char *)&v105 - v29;
  MEMORY[0x1895F8858](v30);
  v123 = (char *)&v105 - v31;
  MEMORY[0x1895F8858](v32);
  uint64_t v34 = (char *)&v105 - v33;
  MEMORY[0x1895F8858](v35);
  uint64_t v37 = (char *)&v105 - v36;
  __n128 v39 = MEMORY[0x1895F8858](v38);
  uint64_t v41 = (char *)&v105 - v40;
  v130 = v42;
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v42 + 16);
  v121 = (char *)a1;
  v43((char *)&v105 - v40, a1, v5, v39);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  v133 = (void (*)(char *, char *, uint64_t))v43;
  ((void (*)(char *, char *, uint64_t))v43)(v37, v41, v5);
  v132 = v14;
  BOOL v44 = (a1 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v130 + 8);
  v45(v37, v5);
  v133(v34, v41, v5);
  if (!v44)
  {
    v45(v34, v5);
    uint64_t v50 = v131;
    uint64_t v47 = v124;
    goto LABEL_10;
  }

  *(void *)&v135[0] = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    uint64_t v46 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v47 = v124;
    if (v46 >= 64)
    {
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v48 = v123;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v49 = dispatch thunk of static Comparable.< infix(_:_:)();
      v45(v48, v5);
      v45(v34, v5);
      uint64_t v50 = v131;
      if ((v49 & 1) != 0) {
        goto LABEL_36;
      }
LABEL_10:
      uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
      uint64_t v52 = v122;
      uint64_t v53 = v133;
      v133(v122, v41, v5);
      if (v51 < 65)
      {
        uint64_t v54 = dispatch thunk of BinaryInteger.bitWidth.getter();
        v45(v52, v5);
        if (v54 != 64)
        {
          v53(v47, v41, v5);
          goto LABEL_24;
        }

        char v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
        v53(v47, v41, v5);
        if ((v55 & 1) != 0)
        {
LABEL_24:
          v45(v47, v5);
          goto LABEL_25;
        }
      }

      else
      {
        v45(v52, v5);
        v53(v47, v41, v5);
      }

      *(void *)&v135[0] = 0x7FFFFFFFFFFFFFFFLL;
      char v56 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v56 & 1) != 0)
      {
        if (v57 > 64)
        {
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          uint64_t v58 = v123;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v59 = dispatch thunk of static Comparable.< infix(_:_:)();
          v45(v58, v5);
          uint64_t v60 = v47;
          goto LABEL_31;
        }
      }

      else if (v57 > 63)
      {
        v134[0] = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v69 = v123;
        (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v123, v47, v5);
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        uint64_t v70 = v107;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v59 = dispatch thunk of static Comparable.< infix(_:_:)();
        v45(v70, v5);
        uint64_t v60 = v69;
LABEL_31:
        v45(v60, v5);
        if ((v59 & 1) != 0) {
          goto LABEL_36;
        }
LABEL_25:
        uint64_t v65 = dispatch thunk of BinaryInteger._lowWord.getter();
        v45(v41, v5);
        uint64_t v66 = 0LL;
        uint64_t v67 = 0LL;
        goto LABEL_37;
      }

      dispatch thunk of BinaryInteger._lowWord.getter();
      goto LABEL_24;
    }

uint64_t IntegerFormatStyle.Attributed.locale(_:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = type metadata accessor for IntegerFormatStyle.Percent(0LL, v7, v8, a3);
  uint64_t v46 = *(void *)(v9 - 8);
  uint64_t v47 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (uint64_t *)((char *)&v42 - v10);
  uint64_t v13 = type metadata accessor for IntegerFormatStyle.Currency(0LL, v7, v8, v12);
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (uint64_t *)((char *)&v42 - v14);
  uint64_t v17 = type metadata accessor for IntegerFormatStyle(0LL, v7, v8, v16);
  uint64_t v42 = *(void *)(v17 - 8);
  uint64_t v43 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (uint64_t *)((char *)&v42 - v18);
  uint64_t v21 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0LL, v7, v8, v20);
  uint64_t v22 = *(void *)(v21 - 8);
  __n128 v23 = MEMORY[0x1895F8858](v21);
  uint64_t v25 = (char *)&v42 - v24;
  uint64_t v27 = *a1;
  uint64_t v26 = a1[1];
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(a2 - 8) + 16LL);
  uint64_t v49 = a4;
  uint64_t v29 = a4;
  uint64_t v30 = v48;
  v28(v29, v48, a2, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, v30, v21);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v33 = v46;
      uint64_t v32 = v47;
      (*(void (**)(void *, char *, uint64_t))(v46 + 32))(v11, v25, v47);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v11 = v27;
      v11[1] = v26;
      uint64_t v34 = v49;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v49, v21);
      (*(void (**)(uint64_t, void *, uint64_t))(v33 + 16))(v34, v11, v32);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(void *, uint64_t))(v33 + 8))(v11, v32);
    }

    else
    {
      uint64_t v40 = v44;
      uint64_t v39 = v45;
      (*(void (**)(void *, char *, uint64_t))(v44 + 32))(v15, v25, v45);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v15 = v27;
      v15[1] = v26;
      uint64_t v41 = v49;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v49, v21);
      (*(void (**)(uint64_t, void *, uint64_t))(v40 + 16))(v41, v15, v39);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(void *, uint64_t))(v40 + 8))(v15, v39);
    }
  }

  else
  {
    uint64_t v37 = v42;
    uint64_t v36 = v43;
    (*(void (**)(void *, char *, uint64_t))(v42 + 32))(v19, v25, v43);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *uint64_t v19 = v27;
    v19[1] = v26;
    uint64_t v38 = v49;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v49, v21);
    (*(void (**)(uint64_t, void *, uint64_t))(v37 + 16))(v38, v19, v36);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(void *, uint64_t))(v37 + 8))(v19, v36);
  }

uint64_t IntegerFormatStyle.Attributed.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for IntegerFormatStyle.Currency(0LL, v5, v6, a4);
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v11 = type metadata accessor for IntegerFormatStyle.Percent(0LL, v5, v6, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v16 = type metadata accessor for IntegerFormatStyle(0LL, v5, v6, v15);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v33 - v18;
  uint64_t v21 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0LL, v5, v6, v20);
  __n128 v22 = MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v33 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))((char *)&v33 - v23, v4, v21, v22);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v24, v11);
      uint64_t v27 = v36;
      Hasher._combine(_:)(1uLL);
      IntegerFormatStyle.hash(into:)(v27, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }

    else
    {
      uint64_t v31 = v34;
      uint64_t v30 = v35;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v9, v24, v35);
      uint64_t v32 = v36;
      Hasher._combine(_:)(2uLL);
      IntegerFormatStyle.Currency.hash(into:)(v32, v30);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v9, v30);
    }
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v24, v16);
    uint64_t v29 = v36;
    Hasher._combine(_:)(0LL);
    IntegerFormatStyle.hash(into:)(v29, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }

uint64_t IntegerFormatStyle.Attributed.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x656C797473LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }

  return v4 & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.Attributed.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = IntegerFormatStyle.Attributed.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t IntegerFormatStyle.Attributed.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for IntegerFormatStyle.Attributed.CodingKeys(255LL, v5, v6, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.CodingKeys, v7);
  uint64_t v8 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v14 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v14 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v12 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0LL, v5, v6, v11);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style, v12);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v10, v8);
}

Swift::Int IntegerFormatStyle.Attributed.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter( a1,  (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.Attributed.hash(into:));
}

Swift::Int IntegerFormatStyle.hashValue.getter(uint64_t a1, void (*a2)(_BYTE *, uint64_t))
{
  return Hasher._finalize()();
}

uint64_t IntegerFormatStyle.Attributed.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a5;
  uint64_t v29 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0LL, a2, a3, a4);
  uint64_t v27 = *(void *)(v29 - 8);
  MEMORY[0x1895F8858](v29);
  uint64_t v30 = (char *)&v24 - v8;
  uint64_t v10 = type metadata accessor for IntegerFormatStyle.Attributed.CodingKeys(255LL, a2, a3, v9);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.CodingKeys, v10);
  uint64_t v31 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v25 = *(void *)(v31 - 8);
  MEMORY[0x1895F8858](v31);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v24 = type metadata accessor for IntegerFormatStyle.Attributed(0LL, a2, a3, v13);
  uint64_t v14 = *(void *)(v24 - 8);
  MEMORY[0x1895F8858](v24);
  uint64_t v16 = (char *)&v24 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v26 = v12;
  uint64_t v17 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    uint64_t v32 = v14;
    uint64_t v18 = v25;
    uint64_t v20 = v27;
    uint64_t v19 = v28;
    uint64_t v21 = v29;
    MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style, v29);
    __n128 v22 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v31);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v16, v30, v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v19, v16, v24);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>.Attributed@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return IntegerFormatStyle.Attributed.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3, a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>.Attributed( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return IntegerFormatStyle.Attributed.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Attributed( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.Attributed.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Attributed( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static IntegerFormatStyle.Attributed.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t IntegerFormatStyle.consuming(_:startingAt:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, 0, a7);
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance IntegerFormatStyle<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance IntegerFormatStyle<A>(uint64_t a1)
{
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t IntegerFormatStyle.Percent.consuming(_:startingAt:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, 1, a7);
}

uint64_t IntegerFormatStyle.consuming(_:startingAt:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W7>, uint64_t *a8@<X8>)
{
  int v39 = a7;
  uint64_t v37 = a1;
  uint64_t v41 = a4;
  unint64_t v42 = a5;
  unint64_t v40 = a3;
  uint64_t v38 = a2;
  uint64_t v43 = a8;
  uint64_t v9 = *(void *)(a6 - 8);
  __n128 v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (_OWORD *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = MEMORY[0x186E20D4C](v14, v13, v10);
  uint64_t v16 = (int *)type metadata accessor for IntegerParseStrategy(0LL, a6, v15, *(void *)(a6 + 24));
  uint64_t v17 = *((void *)v16 - 1);
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v20 = *(void *)(a6 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v34 = *(void *)(v22 - 8);
  uint64_t v35 = v22;
  __n128 v23 = MEMORY[0x1895F8858](v22);
  uint64_t v25 = (uint64_t *)((char *)&v34 - v24);
  uint64_t v26 = *(void (**)(_OWORD *, uint64_t, uint64_t, __n128))(v9 + 16);
  v26(v12, v36, a6, v23);
  ((void (*)(char *, _OWORD *, uint64_t))v26)(v19, v12, a6);
  v19[v16[11]] = 0;
  *(_OWORD *)&v19[v16[13]] = *v12;
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v12 + *(int *)(a6 + 36),  (uint64_t)&v19[v16[12]],  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  swift_storeEnumTagMultiPayload();
  IntegerParseStrategy.parse(_:startingAt:in:)(v37, v38, v40, v42, v16, v25);
  (*(void (**)(char *, int *))(v17 + 8))(v19, v16);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48LL))( v25,  1LL,  TupleTypeMetadata2) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v34 + 8))(v25, v35);
    uint64_t v27 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))( v43,  1LL,  1LL,  v27);
  }

  else
  {
    uint64_t v29 = *v25;
    uint64_t v30 = (char *)v25 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v31 = swift_getTupleTypeMetadata2();
    uint64_t v32 = v43;
    uint64_t v33 = (char *)v43 + *(int *)(v31 + 48);
    *uint64_t v43 = v29;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))(v33, v30, v20);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))( v32,  0LL,  1LL,  v31);
  }

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance IntegerFormatStyle<A>.Percent@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.Percent.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance IntegerFormatStyle<A>.Percent( uint64_t a1)
{
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t IntegerFormatStyle.Currency.consuming(_:startingAt:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v49 = a4;
  unint64_t v50 = a5;
  unint64_t v48 = a3;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  uint64_t v51 = a7;
  uint64_t v44 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v44);
  uint64_t v41 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(a6 - 8);
  __n128 v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (__int128 *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, a6, v11);
  uint64_t v15 = (int *)type metadata accessor for IntegerParseStrategy(0LL, a6, v14, *(void *)(a6 + 24));
  uint64_t v42 = *((void *)v15 - 1);
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v39 - v19;
  uint64_t v47 = *(void *)(a6 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v39 = *(void *)(v22 - 8);
  uint64_t v40 = v22;
  __n128 v23 = MEMORY[0x1895F8858](v22);
  uint64_t v25 = (uint64_t *)((char *)&v39 - v24);
  uint64_t v26 = *(void (**)(char *, __int128 *, uint64_t))(v9 + 16);
  ((void (*)(__int128 *, void, uint64_t, __n128))v26)(v13, v43, a6, v23);
  v26(v17, v13, a6);
  v17[v15[11]] = 0;
  uint64_t v27 = v15[13];
  __int128 v43 = *v13;
  *(_OWORD *)&v17[v27] = v43;
  uint64_t v28 = v41;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v13 + *(int *)(a6 + 40),  v41,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v29 = *(void (**)(__int128 *, uint64_t))(v9 + 8);
  swift_unknownObjectRetain();
  v29(v13, a6);
  swift_storeEnumTagMultiPayload();
  outlined init with take of ICUNumberFormatter.Signature( v28,  (uint64_t)&v17[v15[12]],  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t v30 = v42;
  (*(void (**)(char *, char *, int *))(v42 + 32))(v20, v17, v15);
  IntegerParseStrategy.parse(_:startingAt:in:)(v45, v46, v48, v50, v15, v25);
  (*(void (**)(char *, int *))(v30 + 8))(v20, v15);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48LL))( v25,  1LL,  TupleTypeMetadata2) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v25, v40);
    uint64_t v31 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))( v51,  1LL,  1LL,  v31);
  }

  else
  {
    uint64_t v33 = *v25;
    uint64_t v34 = (char *)v25 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v35 = v47;
    uint64_t v36 = swift_getTupleTypeMetadata2();
    uint64_t v37 = v51;
    uint64_t v38 = (char *)v51 + *(int *)(v36 + 48);
    *uint64_t v51 = v33;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32LL))(v38, v34, v35);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))( v37,  0LL,  1LL,  v36);
  }

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance IntegerFormatStyle<A>.Currency@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.Currency.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance IntegerFormatStyle<A>.Currency( uint64_t a1)
{
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t static RegexComponent<>.localizedInteger(locale:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  char v4 = (char *)a2
  *(void *)char v4 = 0LL;
  v4[8] = 1;
  *((void *)v4 + 2) = 0LL;
  *((void *)v4 + 3) = 0LL;
  *((void *)v4 + 4) = 0LL;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0LL;
  *((void *)v4 + 8) = 0LL;
  *((void *)v4 + 6) = 0LL;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  __int128 v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = &v4[v5[10]];
  *(void *)uint64_t v8 = 0LL;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;
  return swift_unknownObjectRetain();
}

uint64_t static RegexComponent<>.localizedIntegerPercentage(locale:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  char v4 = (char *)a2
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  __int128 v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  *(void *)char v4 = 0x3FF0000000000000LL;
  v4[8] = 0;
  *((void *)v4 + 2) = 0LL;
  *((void *)v4 + 3) = 0LL;
  *((void *)v4 + 4) = 0LL;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0LL;
  *((void *)v4 + 8) = 0LL;
  *((void *)v4 + 6) = 0LL;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v8 = &v4[v5[10]];
  *(void *)uint64_t v8 = 0LL;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;
  return swift_unknownObjectRetain();
}

uint64_t static RegexComponent<>.localizedIntegerCurrency(code:locale:)@<X0>( uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  *(_OWORD *)a3 = *a2;
  *(void *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(void *)(a3 + 24) = v5;
  uint64_t v6 = a3
  uint64_t v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v8 = v6 + v7[9];
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(void *)(v6 + 24) = 0LL;
  *(void *)(v6 + 32) = 0LL;
  *(void *)(v6 + 40) = 0x1FFFFFFFELL;
  *(void *)(v6 + 56) = 0LL;
  *(void *)(v6 + 64) = 0LL;
  *(void *)(v6 + 48) = 0LL;
  *(_WORD *)(v6 + 72) = 512;
  *(_DWORD *)(v6 + 74) = 2;
  *(_BYTE *)(v6 + 78) = 2;
  uint64_t v10 = v6 + v7[10];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = -1;
  *(_BYTE *)(v6 + v7[11]) = 1;
  *(_BYTE *)(v6 + v7[12]) = 3;
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for IntegerFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerFormatStyle);
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerFormatStyle.Attributed.Style);
}

uint64_t outlined destroy of FloatingPointRoundingRule?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for IntegerFormatStyle.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerFormatStyle.CodingKeys);
}

uint64_t type metadata accessor for IntegerFormatStyle.Percent( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerFormatStyle.Percent);
}

uint64_t type metadata accessor for IntegerFormatStyle.Percent.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerFormatStyle.Percent.CodingKeys);
}

uint64_t type metadata accessor for IntegerFormatStyle.Currency( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerFormatStyle.Currency);
}

uint64_t type metadata accessor for IntegerFormatStyle.Currency.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerFormatStyle.Currency.CodingKeys);
}

uint64_t outlined consume of ICUNumberFormatterBase.Value(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerFormatStyle.Attributed.CodingKeys);
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerFormatStyle.Attributed);
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>()
{
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Percent()
{
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Currency()
{
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>);
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Percent( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent);
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Currency( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Currency,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Currency,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Currency);
}

void associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in IntegerFormatStyle<A>()
{
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Currency( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Percent( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Percent);
  *(void *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed()
{
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Attributed( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed);
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[1] = MEMORY[0x186E20D4C](a4);
  a1[2] = MEMORY[0x186E20D4C](a5, a2);
  uint64_t result = MEMORY[0x186E20D4C](a6, a2);
  a1[3] = result;
  return result;
}

void base witness table accessor for RegexComponent in IntegerFormatStyle<A>()
{
}

void base witness table accessor for RegexComponent in IntegerFormatStyle<A>.Percent()
{
}

void base witness table accessor for RegexComponent in IntegerFormatStyle<A>.Currency()
{
}

uint64_t getEnumTagSinglePayload for IntegerFormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for IntegerFormatStyle()
{
  uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for IntegerFormatStyle(void *a1, void *a2, uint64_t a3)
{
  char v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    char v3 = (void *)(v5 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    uint64_t v6 = a2[1];
    *a1 = v5;
    a1[1] = v6;
    uint64_t v7 = *(int *)(a3 + 36);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    v8[8] = *((_BYTE *)a2 + v7 + 8);
    *(void *)uint64_t v8 = *(void *)((char *)a2 + v7);
    *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
    __int128 v10 = *(_OWORD *)((char *)a2 + v7 + 48);
    __int128 v11 = *(_OWORD *)((char *)a2 + v7 + 16);
    *((_OWORD *)v8 + 2) = *(_OWORD *)((char *)a2 + v7 + 32);
    *((_OWORD *)v8 + 3) = v10;
    *((_OWORD *)v8 + 1) = v11;
    v8[73] = *((_BYTE *)a2 + v7 + 73);
    LOWORD(v7) = *(_WORD *)((char *)a2 + v7 + 74);
    v8[76] = v9[76];
    *((_WORD *)v8 + 37) = v7;
    v8[77] = v9[77];
    uint64_t v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v13 = v12[9];
    uint64_t v14 = &v8[v13];
    uint64_t v15 = &v9[v13];
    uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain();
    if (v18(v15, 1LL, v16))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    }

    uint64_t v20 = v12[10];
    uint64_t v21 = &v8[v20];
    uint64_t v22 = &v9[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    void v21[8] = v22[8];
    v8[v12[11]] = v9[v12[11]];
  }

  return v3;
}

uint64_t destroy for IntegerFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL) + 36);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  return result;
}

_OWORD *initializeWithCopy for IntegerFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  v5[8] = *((_BYTE *)a2 + v4 + 8);
  *(void *)uint64_t v5 = *(void *)((char *)a2 + v4);
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)a2 + v4 + 57);
  __int128 v7 = *(_OWORD *)((char *)a2 + v4 + 48);
  __int128 v8 = *(_OWORD *)((char *)a2 + v4 + 16);
  *((_OWORD *)v5 + 2) = *(_OWORD *)((char *)a2 + v4 + 32);
  *((_OWORD *)v5 + 3) = v7;
  *((_OWORD *)v5 + 1) = v8;
  v5[73] = *((_BYTE *)a2 + v4 + 73);
  *((_WORD *)v5 + 37) = *(_WORD *)((char *)a2 + v4 + 74);
  v5[76] = *((_BYTE *)a2 + v4 + 76);
  v5[77] = *((_BYTE *)a2 + v4 + 77);
  uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v10 = v9[9];
  __int128 v11 = &v5[v10];
  uint64_t v12 = &v6[v10];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_unknownObjectRetain();
  if (v15(v12, 1LL, v13))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
  }

  uint64_t v17 = v9[10];
  uint64_t v18 = &v5[v17];
  uint64_t v19 = &v6[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  v5[v9[11]] = v6[v9[11]];
  return a1;
}

void *assignWithCopy for IntegerFormatStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 36);
  __int128 v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  LOBYTE(v7) = *((_BYTE *)a2 + v7 + 8);
  *(void *)__int128 v8 = *(void *)v9;
  v8[8] = v7;
  __int128 v10 = *((_OWORD *)v9 + 1);
  __int128 v11 = *((_OWORD *)v9 + 2);
  __int128 v12 = *((_OWORD *)v9 + 3);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
  *((_OWORD *)v8 + 2) = v11;
  *((_OWORD *)v8 + 3) = v12;
  *((_OWORD *)v8 + 1) = v10;
  v8[73] = v9[73];
  LOWORD(v7) = *((_WORD *)v9 + 37);
  v8[76] = v9[76];
  *((_WORD *)v8 + 37) = v7;
  v8[77] = v9[77];
  uint64_t v13 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v14 = v13[9];
  uint64_t v15 = &v8[v14];
  uint64_t v16 = &v9[v14];
  uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
LABEL_7:
  uint64_t v23 = v13[10];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  uint64_t v26 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)uint64_t v24 = v26;
  v8[v13[11]] = v9[v13[11]];
  return a1;
}

_OWORD *initializeWithTake for IntegerFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  v5[8] = *((_BYTE *)a2 + v4 + 8);
  *(void *)uint64_t v5 = *(void *)((char *)a2 + v4);
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)a2 + v4 + 57);
  __int128 v7 = *(_OWORD *)((char *)a2 + v4 + 48);
  __int128 v8 = *(_OWORD *)((char *)a2 + v4 + 16);
  *((_OWORD *)v5 + 2) = *(_OWORD *)((char *)a2 + v4 + 32);
  *((_OWORD *)v5 + 3) = v7;
  *((_OWORD *)v5 + 1) = v8;
  v5[73] = *((_BYTE *)a2 + v4 + 73);
  LOWORD(v4) = *(_WORD *)((char *)a2 + v4 + 74);
  v5[76] = v6[76];
  *((_WORD *)v5 + 37) = v4;
  v5[77] = v6[77];
  uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v10 = v9[9];
  __int128 v11 = &v5[v10];
  __int128 v12 = &v6[v10];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
  }

  uint64_t v16 = v9[10];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  v5[v9[11]] = v6[v9[11]];
  return a1;
}

void *assignWithTake for IntegerFormatStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 36);
  __int128 v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)__int128 v8 = *(void *)((char *)a2 + v7);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  __int128 v10 = *(_OWORD *)((char *)a2 + v7 + 32);
  *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)a2 + v7 + 16);
  *((_OWORD *)v8 + 2) = v10;
  *((_OWORD *)v8 + 3) = *(_OWORD *)((char *)a2 + v7 + 48);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
  v8[73] = *((_BYTE *)a2 + v7 + 73);
  v8[76] = *((_BYTE *)a2 + v7 + 76);
  *((_WORD *)v8 + 37) = *(_WORD *)((char *)a2 + v7 + 74);
  v8[77] = *((_BYTE *)a2 + v7 + 77);
  __int128 v11 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v12 = v11[9];
  uint64_t v13 = &v8[v12];
  uint64_t v14 = &v9[v12];
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }

  if (v19)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
LABEL_7:
  uint64_t v21 = v11[10];
  uint64_t v22 = &v8[v21];
  uint64_t v23 = &v9[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  v8[v11[11]] = v9[v11[11]];
  return a1;
}

uint64_t getEnumTagSinglePayload for IntegerFormatStyle.Percent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm_3(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 36)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Percent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_indexTm_3(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 36)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for IntegerFormatStyle.Currency()
{
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for IntegerFormatStyle.Currency(void *a1, void *a2, uint64_t a3)
{
  char v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    char v3 = (void *)(v5 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    *a1 = v5;
    a1[1] = v6;
    uint64_t v8 = a2[3];
    a1[2] = v7;
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 40);
    __int128 v10 = (char *)a1 + v9;
    __int128 v11 = (char *)a2 + v9;
    *(void *)__int128 v10 = *(void *)((char *)a2 + v9);
    v10[8] = *((_BYTE *)a2 + v9 + 8);
    __int128 v12 = *(_OWORD *)((char *)a2 + v9 + 32);
    *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
    *((_OWORD *)v10 + 2) = v12;
    *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
    *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
    v10[73] = *((_BYTE *)a2 + v9 + 73);
    *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
    v10[78] = *((_BYTE *)a2 + v9 + 78);
    uint64_t v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    uint64_t v14 = v13[9];
    __dst = &v10[v14];
    uint64_t v15 = &v11[v14];
    uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v17 = *(void *)(v16 - 8);
    int v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v18(v15, 1LL, v16))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v15, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0LL, 1LL, v16);
    }

    uint64_t v20 = v13[10];
    uint64_t v21 = &v10[v20];
    uint64_t v22 = &v11[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    void v21[8] = v22[8];
    v10[v13[11]] = v11[v13[11]];
    v10[v13[12]] = v11[v13[12]];
  }

  return v3;
}

uint64_t destroy for IntegerFormatStyle.Currency(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL) + 36);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  return result;
}

uint64_t initializeWithCopy for IntegerFormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v6 = *(void *)(a2 + v5);
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(a2 + v5 + 8);
  __int128 v8 = *(_OWORD *)(a2 + v5 + 32);
  *(_OWORD *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + v5 + 48);
  *(_OWORD *)(v6 + 57) = *(_OWORD *)(a2 + v5 + 57);
  *(_BYTE *)(v6 + 73) = *(_BYTE *)(a2 + v5 + 73);
  *(_DWORD *)(v6 + 74) = *(_DWORD *)(a2 + v5 + 74);
  *(_BYTE *)(v6 + 78) = *(_BYTE *)(a2 + v5 + 78);
  uint64_t v9 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v10 = v9[9];
  __int128 v11 = (void *)(v6 + v10);
  __int128 v12 = (const void *)(v7 + v10);
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v12, 1LL, v13))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
  }

  uint64_t v17 = v9[10];
  uint64_t v18 = v6 + v17;
  uint64_t v19 = v7 + v17;
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_BYTE *)(v6 + v9[11]) = *(_BYTE *)(v7 + v9[11]);
  *(_BYTE *)(v6 + v9[12]) = *(_BYTE *)(v7 + v9[12]);
  return a1;
}

void *assignWithCopy for IntegerFormatStyle.Currency(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v6;
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 40);
  __int128 v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)((char *)a2 + v7);
  v8[8] = v9[8];
  *(void *)__int128 v8 = v10;
  __int128 v11 = *((_OWORD *)v9 + 1);
  __int128 v12 = *((_OWORD *)v9 + 2);
  __int128 v13 = *((_OWORD *)v9 + 3);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
  *((_OWORD *)v8 + 2) = v12;
  *((_OWORD *)v8 + 3) = v13;
  *((_OWORD *)v8 + 1) = v11;
  v8[73] = v9[73];
  *(_DWORD *)(v8 + 74) = *(_DWORD *)(v9 + 74);
  v8[78] = v9[78];
  uint64_t v14 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v15 = v14[9];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  uint64_t v18 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1LL, v18);
  int v22 = v20(v17, 1LL, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }

  if (v22)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
LABEL_7:
  uint64_t v24 = v14[10];
  uint64_t v25 = &v8[v24];
  uint64_t v26 = &v9[v24];
  uint64_t v27 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)uint64_t v25 = v27;
  v8[v14[11]] = v9[v14[11]];
  v8[v14[12]] = v9[v14[12]];
  return a1;
}

_OWORD *initializeWithTake for IntegerFormatStyle.Currency(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  v6[8] = *((_BYTE *)a2 + v5 + 8);
  *(void *)uint64_t v6 = *(void *)((char *)a2 + v5);
  *(_OWORD *)(v6 + 57) = *(_OWORD *)((char *)a2 + v5 + 57);
  __int128 v8 = *(_OWORD *)((char *)a2 + v5 + 48);
  __int128 v9 = *(_OWORD *)((char *)a2 + v5 + 16);
  *((_OWORD *)v6 + 2) = *(_OWORD *)((char *)a2 + v5 + 32);
  *((_OWORD *)v6 + 3) = v8;
  *((_OWORD *)v6 + 1) = v9;
  v6[73] = *((_BYTE *)a2 + v5 + 73);
  *(_DWORD *)(v6 + 74) = *(_DWORD *)((char *)a2 + v5 + 74);
  v6[78] = *((_BYTE *)a2 + v5 + 78);
  uint64_t v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v11 = v10[9];
  __int128 v12 = &v6[v11];
  __int128 v13 = &v7[v11];
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v17 = v10[10];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  v6[v10[11]] = v7[v10[11]];
  v6[v10[12]] = v7[v10[12]];
  return a1;
}

void *assignWithTake for IntegerFormatStyle.Currency(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  *(void *)uint64_t v10 = *(void *)((char *)a2 + v9);
  v10[8] = *((_BYTE *)a2 + v9 + 8);
  __int128 v12 = *(_OWORD *)((char *)a2 + v9 + 32);
  *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
  *((_OWORD *)v10 + 2) = v12;
  *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
  *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
  v10[73] = *((_BYTE *)a2 + v9 + 73);
  *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
  v10[78] = *((_BYTE *)a2 + v9 + 78);
  __int128 v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v14 = v13[9];
  uint64_t v15 = &v10[v14];
  uint64_t v16 = &v11[v14];
  uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
LABEL_7:
  uint64_t v23 = v13[10];
  uint64_t v24 = &v10[v23];
  uint64_t v25 = &v11[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  v10[v13[11]] = v11[v13[11]];
  v10[v13[12]] = v11[v13[12]];
  return a1;
}

uint64_t getEnumTagSinglePayload for IntegerFormatStyle.Currency()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183260D50(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 40)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Currency()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_183260DD8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 40)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for IntegerFormatStyle.Attributed( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for IntegerFormatStyle.Attributed.Style( 319LL,  *(void *)(a1 + 16),  *(void *)(a1 + 24),  a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IntegerFormatStyle.Attributed( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  int v8 = *(_DWORD *)(*(void *)(type metadata accessor for IntegerFormatStyle.Attributed.Style(0LL, v7, v6, a4) - 8)
                 + 80LL);
  if ((v8 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v23 = a2[3];
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a2[2];
      *(void *)(a1 + 24) = v23;
      uint64_t v24 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0LL, v7, v6, v10) + 40);
      uint64_t v25 = a1 + v24;
      uint64_t v26 = (uint64_t)a2 + v24;
      *(void *)uint64_t v25 = *(uint64_t *)((char *)a2 + v24);
      *(_BYTE *)(v25 + 8) = *((_BYTE *)a2 + v24 + 8);
      __int128 v27 = *(_OWORD *)((char *)a2 + v24 + 32);
      *(_OWORD *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)((char *)a2 + v24 + 16);
      *(_OWORD *)(v25 + 32) = v27;
      *(_OWORD *)(v25 + 48) = *(_OWORD *)((char *)a2 + v24 + 48);
      *(_OWORD *)(v25 + 57) = *(_OWORD *)((char *)a2 + v24 + 57);
      *(_BYTE *)(v25 + 73) = *((_BYTE *)a2 + v24 + 73);
      *(_DWORD *)(v25 + 74) = *(_DWORD *)((char *)a2 + v24 + 74);
      *(_BYTE *)(v25 + 78) = *((_BYTE *)a2 + v24 + 78);
      uint64_t v28 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v29 = v28[9];
      __dst = (void *)(v25 + v29);
      uint64_t v30 = (const void *)(v26 + v29);
      uint64_t v31 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v32 = *(void *)(v31 - 8);
      uint64_t v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v33(v30, 1LL, v31))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v30, *(void *)(*(void *)(v34 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(__dst, v30, v31);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0LL, 1LL, v31);
      }

      uint64_t v40 = v28[10];
      uint64_t v41 = v25 + v40;
      uint64_t v42 = v26 + v40;
      *(void *)uint64_t v41 = *(void *)v42;
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(_BYTE *)(v25 + v28[11]) = *(_BYTE *)(v26 + v28[11]);
      *(_BYTE *)(v25 + v28[12]) = *(_BYTE *)(v26 + v28[12]);
      goto LABEL_16;
    }

    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v11 = *(int *)(type metadata accessor for IntegerFormatStyle.Percent(0LL, v7, v6, v10) + 36);
      uint64_t v12 = a1 + v11;
      uint64_t v13 = (uint64_t)a2 + v11;
      *(void *)uint64_t v12 = *(uint64_t *)((char *)a2 + v11);
      *(_BYTE *)(v12 + 8) = *((_BYTE *)a2 + v11 + 8);
      __int128 v14 = *(_OWORD *)((char *)a2 + v11 + 32);
      *(_OWORD *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)((char *)a2 + v11 + 16);
      *(_OWORD *)(v12 + 32) = v14;
      *(_OWORD *)(v12 + 48) = *(_OWORD *)((char *)a2 + v11 + 48);
      *(_OWORD *)(v12 + 57) = *(_OWORD *)((char *)a2 + v11 + 57);
      *(_BYTE *)(v12 + 73) = *((_BYTE *)a2 + v11 + 73);
      *(_WORD *)(v12 + 74) = *(_WORD *)((char *)a2 + v11 + 74);
      *(_BYTE *)(v12 + 76) = *((_BYTE *)a2 + v11 + 76);
      *(_BYTE *)(v12 + 77) = *((_BYTE *)a2 + v11 + 77);
      uint64_t v15 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v16 = v15[9];
      uint64_t v17 = (void *)(v12 + v16);
      uint64_t v18 = (const void *)(v13 + v16);
      uint64_t v19 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v20 = *(void *)(v19 - 8);
      int v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
      swift_unknownObjectRetain();
      if (v21(v18, 1LL, v19)) {
        goto LABEL_10;
      }
    }

    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v35 = *(int *)(type metadata accessor for IntegerFormatStyle(0LL, v7, v6, v10) + 36);
      uint64_t v12 = a1 + v35;
      uint64_t v13 = (uint64_t)a2 + v35;
      *(void *)uint64_t v12 = *(uint64_t *)((char *)a2 + v35);
      *(_BYTE *)(v12 + 8) = *((_BYTE *)a2 + v35 + 8);
      __int128 v36 = *(_OWORD *)((char *)a2 + v35 + 32);
      *(_OWORD *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)((char *)a2 + v35 + 16);
      *(_OWORD *)(v12 + 32) = v36;
      *(_OWORD *)(v12 + 48) = *(_OWORD *)((char *)a2 + v35 + 48);
      *(_OWORD *)(v12 + 57) = *(_OWORD *)((char *)a2 + v35 + 57);
      *(_BYTE *)(v12 + 73) = *((_BYTE *)a2 + v35 + 73);
      *(_WORD *)(v12 + 74) = *(_WORD *)((char *)a2 + v35 + 74);
      *(_BYTE *)(v12 + 76) = *((_BYTE *)a2 + v35 + 76);
      *(_BYTE *)(v12 + 77) = *((_BYTE *)a2 + v35 + 77);
      uint64_t v15 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v37 = v15[9];
      uint64_t v17 = (void *)(v12 + v37);
      uint64_t v18 = (const void *)(v13 + v37);
      uint64_t v19 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
      swift_unknownObjectRetain();
      if (v38(v18, 1LL, v19))
      {
LABEL_10:
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v17, v18, *(void *)(*(void *)(v39 - 8) + 64LL));
LABEL_15:
        uint64_t v43 = v15[10];
        uint64_t v44 = v12 + v43;
        uint64_t v45 = v13 + v43;
        *(void *)uint64_t v44 = *(void *)v45;
        *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
        *(_BYTE *)(v12 + v15[11]) = *(_BYTE *)(v13 + v15[11]);
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
    goto LABEL_15;
  }

  uint64_t v22 = *a2;
  *(void *)a1 = *a2;
  a1 = v22 + ((v8 + 16LL) & ~(unint64_t)v8);
  swift_retain();
  return a1;
}

uint64_t destroy for IntegerFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  type metadata accessor for IntegerFormatStyle.Attributed.Style(0LL, v6, v5, a4);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0LL, v6, v5, v10) + 40);
    uint64_t v12 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  }

  else
  {
    if ((_DWORD)result == 1)
    {
      swift_unknownObjectRelease();
      uint64_t v9 = type metadata accessor for IntegerFormatStyle.Percent(0LL, v6, v5, v13);
    }

    else
    {
      if ((_DWORD)result) {
        return result;
      }
      swift_unknownObjectRelease();
      uint64_t v9 = type metadata accessor for IntegerFormatStyle(0LL, v6, v5, v8);
    }

    uint64_t v11 = *(int *)(v9 + 36);
    uint64_t v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  }

  uint64_t v14 = a1 + *(int *)(v12 + 36) + v11;
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  }
  return result;
}

uint64_t initializeWithCopy for IntegerFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  type metadata accessor for IntegerFormatStyle.Attributed.Style(0LL, v7, v6, a4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2)
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v10 = *(int *)(type metadata accessor for IntegerFormatStyle.Percent(0LL, v7, v6, v9) + 36);
      uint64_t v11 = a1 + v10;
      uint64_t v12 = a2 + v10;
      *(void *)uint64_t v11 = *(void *)(a2 + v10);
      *(_BYTE *)(v11 + 8) = *(_BYTE *)(a2 + v10 + 8);
      __int128 v13 = *(_OWORD *)(a2 + v10 + 32);
      *(_OWORD *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + v10 + 16);
      *(_OWORD *)(v11 + 32) = v13;
      *(_OWORD *)(v11 + 48) = *(_OWORD *)(a2 + v10 + 48);
      *(_OWORD *)(v11 + 57) = *(_OWORD *)(a2 + v10 + 57);
      *(_BYTE *)(v11 + 73) = *(_BYTE *)(a2 + v10 + 73);
      *(_WORD *)(v11 + 74) = *(_WORD *)(a2 + v10 + 74);
      *(_BYTE *)(v11 + 76) = *(_BYTE *)(a2 + v10 + 76);
      *(_BYTE *)(v11 + 77) = *(_BYTE *)(a2 + v10 + 77);
      uint64_t v14 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v15 = v14[9];
      uint64_t v16 = (void *)(v11 + v15);
      uint64_t v17 = (const void *)(v12 + v15);
      uint64_t v18 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v19 = *(void *)(v18 - 8);
      uint64_t v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
      swift_unknownObjectRetain();
      if (v20(v17, 1LL, v18)) {
        goto LABEL_8;
      }
    }

    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v34 = *(int *)(type metadata accessor for IntegerFormatStyle(0LL, v7, v6, v9) + 36);
      uint64_t v11 = a1 + v34;
      uint64_t v12 = a2 + v34;
      *(void *)uint64_t v11 = *(void *)(a2 + v34);
      *(_BYTE *)(v11 + 8) = *(_BYTE *)(a2 + v34 + 8);
      __int128 v35 = *(_OWORD *)(a2 + v34 + 32);
      *(_OWORD *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + v34 + 16);
      *(_OWORD *)(v11 + 32) = v35;
      *(_OWORD *)(v11 + 48) = *(_OWORD *)(a2 + v34 + 48);
      *(_OWORD *)(v11 + 57) = *(_OWORD *)(a2 + v34 + 57);
      *(_BYTE *)(v11 + 73) = *(_BYTE *)(a2 + v34 + 73);
      *(_WORD *)(v11 + 74) = *(_WORD *)(a2 + v34 + 74);
      *(_BYTE *)(v11 + 76) = *(_BYTE *)(a2 + v34 + 76);
      *(_BYTE *)(v11 + 77) = *(_BYTE *)(a2 + v34 + 77);
      uint64_t v14 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v36 = v14[9];
      uint64_t v16 = (void *)(v11 + v36);
      uint64_t v17 = (const void *)(v12 + v36);
      uint64_t v18 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v19 = *(void *)(v18 - 8);
      uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
      swift_unknownObjectRetain();
      if (v37(v17, 1LL, v18))
      {
LABEL_8:
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v16, v17, *(void *)(*(void *)(v38 - 8) + 64LL));
LABEL_13:
        uint64_t v45 = v14[10];
        uint64_t v46 = v11 + v45;
        uint64_t v47 = v12 + v45;
        *(void *)uint64_t v46 = *(void *)v47;
        *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
        uint64_t v48 = v14[11];
        uint64_t v43 = (_BYTE *)(v11 + v48);
        uint64_t v44 = (_BYTE *)(v12 + v48);
        goto LABEL_14;
      }
    }

    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    goto LABEL_13;
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v21 = *(void *)(a2 + 24);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v21;
  uint64_t v22 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0LL, v7, v6, v9) + 40);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)uint64_t v23 = *(void *)(a2 + v22);
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(a2 + v22 + 8);
  __int128 v25 = *(_OWORD *)(a2 + v22 + 32);
  *(_OWORD *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + v22 + 16);
  *(_OWORD *)(v23 + 32) = v25;
  *(_OWORD *)(v23 + 48) = *(_OWORD *)(a2 + v22 + 48);
  *(_OWORD *)(v23 + 57) = *(_OWORD *)(a2 + v22 + 57);
  *(_BYTE *)(v23 + 73) = *(_BYTE *)(a2 + v22 + 73);
  *(_DWORD *)(v23 + 74) = *(_DWORD *)(a2 + v22 + 74);
  *(_BYTE *)(v23 + 78) = *(_BYTE *)(a2 + v22 + 78);
  uint64_t v26 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v27 = v26[9];
  uint64_t v28 = (void *)(v23 + v27);
  uint64_t v29 = (const void *)(v24 + v27);
  uint64_t v30 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v32(v29, 1LL, v30))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
  }

  uint64_t v39 = v26[10];
  uint64_t v40 = v23 + v39;
  uint64_t v41 = v24 + v39;
  *(void *)uint64_t v40 = *(void *)v41;
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
  *(_BYTE *)(v23 + v26[11]) = *(_BYTE *)(v24 + v26[11]);
  uint64_t v42 = v26[12];
  uint64_t v43 = (_BYTE *)(v23 + v42);
  uint64_t v44 = (_BYTE *)(v24 + v42);
LABEL_14:
  *uint64_t v43 = *v44;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for IntegerFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v7 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v8 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0LL, v7, v6, a4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v12 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0LL, v7, v6, v10) + 40);
      uint64_t v13 = a1 + v12;
      uint64_t v14 = a2 + v12;
      LOBYTE(v12) = *(_BYTE *)(a2 + v12 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(_BYTE *)(v13 + 8) = v12;
      __int128 v15 = *(_OWORD *)(v14 + 57);
      __int128 v17 = *(_OWORD *)(v14 + 32);
      __int128 v16 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(v14 + 16);
      *(_OWORD *)(v13 + 32) = v17;
      *(_OWORD *)(v13 + 48) = v16;
      *(_OWORD *)(v13 + 57) = v15;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
      *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
      uint64_t v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v19 = v18[9];
      __dst = (void *)(v13 + v19);
      uint64_t v20 = (const void *)(v14 + v19);
      uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v23(v20, 1LL, v21))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(__dst, v20, v21);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0LL, 1LL, v21);
      }

      uint64_t v46 = v18[10];
      uint64_t v47 = v13 + v46;
      uint64_t v48 = (uint64_t *)(v14 + v46);
      uint64_t v49 = *v48;
      *(_BYTE *)(v47 + 8) = *((_BYTE *)v48 + 8);
      *(void *)uint64_t v47 = v49;
      *(_BYTE *)(v13 + v18[11]) = *(_BYTE *)(v14 + v18[11]);
      uint64_t v50 = v18[12];
      uint64_t v44 = (_BYTE *)(v13 + v50);
      uint64_t v45 = (_BYTE *)(v14 + v50);
    }

    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v11 = type metadata accessor for IntegerFormatStyle.Percent(0LL, v7, v6, v10);
      }
      else {
        uint64_t v11 = type metadata accessor for IntegerFormatStyle(0LL, v7, v6, v10);
      }
      uint64_t v25 = *(int *)(v11 + 36);
      uint64_t v26 = a1 + v25;
      uint64_t v27 = a2 + v25;
      LOBYTE(v25) = *(_BYTE *)(a2 + v25 + 8);
      *(void *)uint64_t v26 = *(void *)v27;
      *(_BYTE *)(v26 + 8) = v25;
      __int128 v28 = *(_OWORD *)(v27 + 57);
      __int128 v30 = *(_OWORD *)(v27 + 32);
      __int128 v29 = *(_OWORD *)(v27 + 48);
      *(_OWORD *)(v26 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(v27 + 16);
      *(_OWORD *)(v26 + 32) = v30;
      *(_OWORD *)(v26 + 48) = v29;
      *(_OWORD *)(v26 + 57) = v28;
      *(_BYTE *)(v26 + 73) = *(_BYTE *)(v27 + 73);
      LOWORD(v25) = *(_WORD *)(v27 + 74);
      *(_BYTE *)(v26 + 76) = *(_BYTE *)(v27 + 76);
      *(_WORD *)(v26 + 74) = v25;
      *(_BYTE *)(v26 + 77) = *(_BYTE *)(v27 + 77);
      uint64_t v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v32 = v31[9];
      uint64_t v33 = (void *)(v26 + v32);
      uint64_t v34 = (const void *)(v27 + v32);
      uint64_t v35 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
      swift_unknownObjectRetain();
      if (v37(v34, 1LL, v35))
      {
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
      }

      uint64_t v39 = v31[10];
      uint64_t v40 = v26 + v39;
      uint64_t v41 = (uint64_t *)(v27 + v39);
      uint64_t v42 = *v41;
      *(_BYTE *)(v40 + 8) = *((_BYTE *)v41 + 8);
      *(void *)uint64_t v40 = v42;
      uint64_t v43 = v31[11];
      uint64_t v44 = (_BYTE *)(v26 + v43);
      uint64_t v45 = (_BYTE *)(v27 + v43);
    }

    *uint64_t v44 = *v45;
    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

_OWORD *initializeWithTake for IntegerFormatStyle.Attributed(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  type metadata accessor for IntegerFormatStyle.Attributed.Style(0LL, v7, v6, a4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    __int128 v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    uint64_t v12 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0LL, v7, v6, v9) + 40);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    *(void *)uint64_t v13 = *(void *)((char *)a2 + v12);
    v13[8] = *((_BYTE *)a2 + v12 + 8);
    __int128 v15 = *(_OWORD *)((char *)a2 + v12 + 32);
    *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)a2 + v12 + 16);
    *((_OWORD *)v13 + 2) = v15;
    *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)a2 + v12 + 48);
    *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)a2 + v12 + 57);
    v13[73] = *((_BYTE *)a2 + v12 + 73);
    *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)a2 + v12 + 74);
    v13[78] = *((_BYTE *)a2 + v12 + 78);
    __int128 v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    uint64_t v17 = v16[9];
    uint64_t v18 = &v13[v17];
    uint64_t v19 = &v14[v17];
    uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
    }

    uint64_t v40 = v16[10];
    uint64_t v41 = &v13[v40];
    uint64_t v42 = &v14[v40];
    *(void *)uint64_t v41 = *(void *)v42;
    v41[8] = v42[8];
    v13[v16[11]] = v14[v16[11]];
    uint64_t v43 = v16[12];
    uint64_t v38 = &v13[v43];
    uint64_t v39 = &v14[v43];
  }

  else
  {
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v10 = type metadata accessor for IntegerFormatStyle.Percent(0LL, v7, v6, v9);
    }
    else {
      uint64_t v10 = type metadata accessor for IntegerFormatStyle(0LL, v7, v6, v9);
    }
    uint64_t v23 = *(int *)(v10 + 36);
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    *(void *)uint64_t v24 = *(void *)((char *)a2 + v23);
    v24[8] = *((_BYTE *)a2 + v23 + 8);
    __int128 v26 = *(_OWORD *)((char *)a2 + v23 + 32);
    *((_OWORD *)v24 + 1) = *(_OWORD *)((char *)a2 + v23 + 16);
    *((_OWORD *)v24 + 2) = v26;
    *((_OWORD *)v24 + 3) = *(_OWORD *)((char *)a2 + v23 + 48);
    *(_OWORD *)(v24 + 57) = *(_OWORD *)((char *)a2 + v23 + 57);
    v24[73] = *((_BYTE *)a2 + v23 + 73);
    *((_WORD *)v24 + 37) = *(_WORD *)((char *)a2 + v23 + 74);
    v24[76] = *((_BYTE *)a2 + v23 + 76);
    v24[77] = *((_BYTE *)a2 + v23 + 77);
    uint64_t v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v28 = v27[9];
    __int128 v29 = &v24[v28];
    __int128 v30 = &v25[v28];
    uint64_t v31 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1LL, v31))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
    }

    uint64_t v34 = v27[10];
    uint64_t v35 = &v24[v34];
    uint64_t v36 = &v25[v34];
    *(void *)uint64_t v35 = *(void *)v36;
    v35[8] = v36[8];
    uint64_t v37 = v27[11];
    uint64_t v38 = &v24[v37];
    uint64_t v39 = &v25[v37];
  }

  *uint64_t v38 = *v39;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for IntegerFormatStyle.Attributed(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v7 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v8 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0LL, v7, v6, a4);
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      __int128 v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      uint64_t v13 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0LL, v7, v6, v10) + 40);
      uint64_t v14 = (char *)a1 + v13;
      __int128 v15 = (char *)a2 + v13;
      *(void *)uint64_t v14 = *(void *)((char *)a2 + v13);
      v14[8] = *((_BYTE *)a2 + v13 + 8);
      __int128 v16 = *(_OWORD *)((char *)a2 + v13 + 32);
      *((_OWORD *)v14 + 1) = *(_OWORD *)((char *)a2 + v13 + 16);
      *((_OWORD *)v14 + 2) = v16;
      *((_OWORD *)v14 + 3) = *(_OWORD *)((char *)a2 + v13 + 48);
      *(_OWORD *)(v14 + 57) = *(_OWORD *)((char *)a2 + v13 + 57);
      v14[73] = *((_BYTE *)a2 + v13 + 73);
      *(_DWORD *)(v14 + 74) = *(_DWORD *)((char *)a2 + v13 + 74);
      v14[78] = *((_BYTE *)a2 + v13 + 78);
      uint64_t v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v18 = v17[9];
      uint64_t v19 = &v14[v18];
      uint64_t v20 = &v15[v18];
      uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
      }

      uint64_t v41 = v17[10];
      uint64_t v42 = &v14[v41];
      uint64_t v43 = &v15[v41];
      *(void *)uint64_t v42 = *(void *)v43;
      v42[8] = v43[8];
      v14[v17[11]] = v15[v17[11]];
      uint64_t v44 = v17[12];
      uint64_t v39 = &v14[v44];
      uint64_t v40 = &v15[v44];
    }

    else
    {
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v11 = type metadata accessor for IntegerFormatStyle.Percent(0LL, v7, v6, v10);
      }
      else {
        uint64_t v11 = type metadata accessor for IntegerFormatStyle(0LL, v7, v6, v10);
      }
      uint64_t v24 = *(int *)(v11 + 36);
      uint64_t v25 = (char *)a1 + v24;
      __int128 v26 = (char *)a2 + v24;
      *(void *)uint64_t v25 = *(void *)((char *)a2 + v24);
      v25[8] = *((_BYTE *)a2 + v24 + 8);
      __int128 v27 = *(_OWORD *)((char *)a2 + v24 + 32);
      *((_OWORD *)v25 + 1) = *(_OWORD *)((char *)a2 + v24 + 16);
      *((_OWORD *)v25 + 2) = v27;
      *((_OWORD *)v25 + 3) = *(_OWORD *)((char *)a2 + v24 + 48);
      *(_OWORD *)(v25 + 57) = *(_OWORD *)((char *)a2 + v24 + 57);
      v25[73] = *((_BYTE *)a2 + v24 + 73);
      *((_WORD *)v25 + 37) = *(_WORD *)((char *)a2 + v24 + 74);
      v25[76] = *((_BYTE *)a2 + v24 + 76);
      v25[77] = *((_BYTE *)a2 + v24 + 77);
      uint64_t v28 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v29 = v28[9];
      __int128 v30 = &v25[v29];
      uint64_t v31 = &v26[v29];
      uint64_t v32 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v30, v31, v32);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
      }

      uint64_t v35 = v28[10];
      uint64_t v36 = &v25[v35];
      uint64_t v37 = &v26[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      uint64_t v38 = v28[11];
      uint64_t v39 = &v25[v38];
      uint64_t v40 = &v26[v38];
    }

    *uint64_t v39 = *v40;
    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for IntegerFormatStyle.Attributed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183262254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for IntegerFormatStyle.Attributed.Style( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Attributed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832622A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for IntegerFormatStyle.Attributed.Style( 0LL,  *(void *)(a4 + 16),  *(void *)(a4 + 24),  a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, a2, a2, v6);
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Percent.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_18326233C + 4 * byte_1837C5115[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183262370 + 4 * byte_1837C5110[v4]))();
}

uint64_t sub_183262370(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183262378(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183262380LL);
  }
  return result;
}

uint64_t sub_18326238C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183262394LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_183262398(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832623A0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata completion function for IntegerFormatStyle.Attributed.Style( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t result = type metadata accessor for IntegerFormatStyle(319LL, v4, v5, a4);
  if (v8 <= 0x3F)
  {
    uint64_t result = type metadata accessor for IntegerFormatStyle.Percent(319LL, v4, v5, v7);
    if (v10 <= 0x3F)
    {
      uint64_t result = type metadata accessor for IntegerFormatStyle.Currency(319LL, v4, v5, v9);
      if (v11 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IntegerFormatStyle.Attributed.Style( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v21 = a2[3];
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a2[2];
      *(void *)(a1 + 24) = v21;
      uint64_t v22 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v8)
                   + 40);
      uint64_t v23 = a1 + v22;
      uint64_t v24 = (uint64_t)a2 + v22;
      *(void *)uint64_t v23 = *(uint64_t *)((char *)a2 + v22);
      *(_BYTE *)(v23 + 8) = *((_BYTE *)a2 + v22 + 8);
      __int128 v25 = *(_OWORD *)((char *)a2 + v22 + 32);
      *(_OWORD *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)((char *)a2 + v22 + 16);
      *(_OWORD *)(v23 + 32) = v25;
      *(_OWORD *)(v23 + 48) = *(_OWORD *)((char *)a2 + v22 + 48);
      *(_OWORD *)(v23 + 57) = *(_OWORD *)((char *)a2 + v22 + 57);
      *(_BYTE *)(v23 + 73) = *((_BYTE *)a2 + v22 + 73);
      *(_DWORD *)(v23 + 74) = *(_DWORD *)((char *)a2 + v22 + 74);
      *(_BYTE *)(v23 + 78) = *((_BYTE *)a2 + v22 + 78);
      __int128 v26 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v27 = v26[9];
      __dst = (void *)(v23 + v27);
      uint64_t v28 = (const void *)(v24 + v27);
      uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v31(v28, 1LL, v29))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v28, *(void *)(*(void *)(v32 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(__dst, v28, v29);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(__dst, 0LL, 1LL, v29);
      }

      uint64_t v38 = v26[10];
      uint64_t v39 = v23 + v38;
      uint64_t v40 = v24 + v38;
      *(void *)uint64_t v39 = *(void *)v40;
      *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
      *(_BYTE *)(v23 + v26[11]) = *(_BYTE *)(v24 + v26[11]);
      *(_BYTE *)(v23 + v26[12]) = *(_BYTE *)(v24 + v26[12]);
      goto LABEL_16;
    }

    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v9 = *(int *)(type metadata accessor for IntegerFormatStyle.Percent( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v8)
                  + 36);
      uint64_t v10 = a1 + v9;
      uint64_t v11 = (uint64_t)a2 + v9;
      *(void *)uint64_t v10 = *(uint64_t *)((char *)a2 + v9);
      *(_BYTE *)(v10 + 8) = *((_BYTE *)a2 + v9 + 8);
      __int128 v12 = *(_OWORD *)((char *)a2 + v9 + 32);
      *(_OWORD *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)((char *)a2 + v9 + 16);
      *(_OWORD *)(v10 + 32) = v12;
      *(_OWORD *)(v10 + 48) = *(_OWORD *)((char *)a2 + v9 + 48);
      *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
      *(_BYTE *)(v10 + 73) = *((_BYTE *)a2 + v9 + 73);
      *(_WORD *)(v10 + 74) = *(_WORD *)((char *)a2 + v9 + 74);
      *(_BYTE *)(v10 + 76) = *((_BYTE *)a2 + v9 + 76);
      *(_BYTE *)(v10 + 77) = *((_BYTE *)a2 + v9 + 77);
      uint64_t v13 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v14 = v13[9];
      __int128 v15 = (void *)(v10 + v14);
      __int128 v16 = (const void *)(v11 + v14);
      uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v18 = *(void *)(v17 - 8);
      uint64_t v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
      swift_unknownObjectRetain();
      if (v19(v16, 1LL, v17)) {
        goto LABEL_10;
      }
    }

    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v10 = a1 + v33;
      uint64_t v11 = (uint64_t)a2 + v33;
      *(void *)uint64_t v10 = *(uint64_t *)((char *)a2 + v33);
      *(_BYTE *)(v10 + 8) = *((_BYTE *)a2 + v33 + 8);
      __int128 v34 = *(_OWORD *)((char *)a2 + v33 + 32);
      *(_OWORD *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)((char *)a2 + v33 + 16);
      *(_OWORD *)(v10 + 32) = v34;
      *(_OWORD *)(v10 + 48) = *(_OWORD *)((char *)a2 + v33 + 48);
      *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v33 + 57);
      *(_BYTE *)(v10 + 73) = *((_BYTE *)a2 + v33 + 73);
      *(_WORD *)(v10 + 74) = *(_WORD *)((char *)a2 + v33 + 74);
      *(_BYTE *)(v10 + 76) = *((_BYTE *)a2 + v33 + 76);
      *(_BYTE *)(v10 + 77) = *((_BYTE *)a2 + v33 + 77);
      uint64_t v13 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v35 = v13[9];
      __int128 v15 = (void *)(v10 + v35);
      __int128 v16 = (const void *)(v11 + v35);
      uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v18 = *(void *)(v17 - 8);
      uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
      swift_unknownObjectRetain();
      if (v36(v16, 1LL, v17))
      {
LABEL_10:
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v15, v16, *(void *)(*(void *)(v37 - 8) + 64LL));
LABEL_15:
        uint64_t v41 = v13[10];
        uint64_t v42 = v10 + v41;
        uint64_t v43 = v11 + v41;
        *(void *)uint64_t v42 = *(void *)v43;
        *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
        *(_BYTE *)(v10 + v13[11]) = *(_BYTE *)(v11 + v13[11]);
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
    goto LABEL_15;
  }

  uint64_t v20 = *a2;
  *(void *)a1 = *a2;
  a1 = v20 + ((v5 + 16LL) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

uint64_t destroy for IntegerFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency( 0LL,  *(void *)(a2 + 16),  *(void *)(a2 + 24),  v7)
                + 40);
    uint64_t v9 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  }

  else
  {
    if ((_DWORD)result == 1)
    {
      swift_unknownObjectRelease();
      uint64_t v6 = type metadata accessor for IntegerFormatStyle.Percent(0LL, *(void *)(a2 + 16), *(void *)(a2 + 24), v10);
    }

    else
    {
      if ((_DWORD)result) {
        return result;
      }
      swift_unknownObjectRelease();
      uint64_t v6 = type metadata accessor for IntegerFormatStyle(0LL, *(void *)(a2 + 16), *(void *)(a2 + 24), v5);
    }

    uint64_t v8 = *(int *)(v6 + 36);
    uint64_t v9 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  }

  uint64_t v11 = a1 + *(int *)(v9 + 36) + v8;
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  return result;
}

uint64_t initializeWithCopy for IntegerFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2)
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v8 = *(int *)(type metadata accessor for IntegerFormatStyle.Percent( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v7)
                  + 36);
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      *(void *)uint64_t v9 = *(void *)(a2 + v8);
      *(_BYTE *)(v9 + 8) = *(_BYTE *)(a2 + v8 + 8);
      __int128 v11 = *(_OWORD *)(a2 + v8 + 32);
      *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + v8 + 16);
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)(v9 + 48) = *(_OWORD *)(a2 + v8 + 48);
      *(_OWORD *)(v9 + 57) = *(_OWORD *)(a2 + v8 + 57);
      *(_BYTE *)(v9 + 73) = *(_BYTE *)(a2 + v8 + 73);
      *(_WORD *)(v9 + 74) = *(_WORD *)(a2 + v8 + 74);
      *(_BYTE *)(v9 + 76) = *(_BYTE *)(a2 + v8 + 76);
      *(_BYTE *)(v9 + 77) = *(_BYTE *)(a2 + v8 + 77);
      uint64_t v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v13 = v12[9];
      uint64_t v14 = (void *)(v9 + v13);
      __int128 v15 = (const void *)(v10 + v13);
      uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
      swift_unknownObjectRetain();
      if (v18(v15, 1LL, v16)) {
        goto LABEL_8;
      }
    }

    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v9 = a1 + v31;
      uint64_t v10 = a2 + v31;
      *(void *)uint64_t v9 = *(void *)(a2 + v31);
      *(_BYTE *)(v9 + 8) = *(_BYTE *)(a2 + v31 + 8);
      __int128 v32 = *(_OWORD *)(a2 + v31 + 32);
      *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + v31 + 16);
      *(_OWORD *)(v9 + 32) = v32;
      *(_OWORD *)(v9 + 48) = *(_OWORD *)(a2 + v31 + 48);
      *(_OWORD *)(v9 + 57) = *(_OWORD *)(a2 + v31 + 57);
      *(_BYTE *)(v9 + 73) = *(_BYTE *)(a2 + v31 + 73);
      *(_WORD *)(v9 + 74) = *(_WORD *)(a2 + v31 + 74);
      *(_BYTE *)(v9 + 76) = *(_BYTE *)(a2 + v31 + 76);
      *(_BYTE *)(v9 + 77) = *(_BYTE *)(a2 + v31 + 77);
      uint64_t v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v33 = v12[9];
      uint64_t v14 = (void *)(v9 + v33);
      __int128 v15 = (const void *)(v10 + v33);
      uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v17 = *(void *)(v16 - 8);
      __int128 v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
      swift_unknownObjectRetain();
      if (v34(v15, 1LL, v16))
      {
LABEL_8:
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v14, v15, *(void *)(*(void *)(v35 - 8) + 64LL));
LABEL_13:
        uint64_t v42 = v12[10];
        uint64_t v43 = v9 + v42;
        uint64_t v44 = v10 + v42;
        *(void *)uint64_t v43 = *(void *)v44;
        *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
        uint64_t v45 = v12[11];
        uint64_t v40 = (_BYTE *)(v9 + v45);
        uint64_t v41 = (_BYTE *)(v10 + v45);
        goto LABEL_14;
      }
    }

    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    goto LABEL_13;
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v19 = *(void *)(a2 + 24);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v19;
  uint64_t v20 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v7)
               + 40);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(void *)uint64_t v21 = *(void *)(a2 + v20);
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(a2 + v20 + 8);
  __int128 v23 = *(_OWORD *)(a2 + v20 + 32);
  *(_OWORD *)(v21 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + v20 + 16);
  *(_OWORD *)(v21 + 32) = v23;
  *(_OWORD *)(v21 + 48) = *(_OWORD *)(a2 + v20 + 48);
  *(_OWORD *)(v21 + 57) = *(_OWORD *)(a2 + v20 + 57);
  *(_BYTE *)(v21 + 73) = *(_BYTE *)(a2 + v20 + 73);
  *(_DWORD *)(v21 + 74) = *(_DWORD *)(a2 + v20 + 74);
  *(_BYTE *)(v21 + 78) = *(_BYTE *)(a2 + v20 + 78);
  uint64_t v24 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v25 = v24[9];
  __dst = (void *)(v21 + v25);
  __int128 v26 = (const void *)(v22 + v25);
  uint64_t v27 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v29(v26, 1LL, v27))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v26, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(__dst, v26, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(__dst, 0LL, 1LL, v27);
  }

  uint64_t v36 = v24[10];
  uint64_t v37 = v21 + v36;
  uint64_t v38 = v22 + v36;
  *(void *)uint64_t v37 = *(void *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  *(_BYTE *)(v21 + v24[11]) = *(_BYTE *)(v22 + v24[11]);
  uint64_t v39 = v24[12];
  uint64_t v40 = (_BYTE *)(v21 + v39);
  uint64_t v41 = (_BYTE *)(v22 + v39);
LABEL_14:
  *uint64_t v40 = *v41;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for IntegerFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v9 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v7)
                  + 40);
      uint64_t v10 = a1 + v9;
      uint64_t v11 = a2 + v9;
      LOBYTE(v9) = *(_BYTE *)(a2 + v9 + 8);
      *(void *)uint64_t v10 = *(void *)v11;
      *(_BYTE *)(v10 + 8) = v9;
      __int128 v12 = *(_OWORD *)(v11 + 57);
      __int128 v14 = *(_OWORD *)(v11 + 32);
      __int128 v13 = *(_OWORD *)(v11 + 48);
      *(_OWORD *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(v11 + 16);
      *(_OWORD *)(v10 + 32) = v14;
      *(_OWORD *)(v10 + 48) = v13;
      *(_OWORD *)(v10 + 57) = v12;
      *(_BYTE *)(v10 + 73) = *(_BYTE *)(v11 + 73);
      *(_DWORD *)(v10 + 74) = *(_DWORD *)(v11 + 74);
      *(_BYTE *)(v10 + 78) = *(_BYTE *)(v11 + 78);
      __int128 v15 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v16 = v15[9];
      __dst = (void *)(v10 + v16);
      uint64_t v17 = (const void *)(v11 + v16);
      uint64_t v18 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v19 = *(void *)(v18 - 8);
      uint64_t v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v20(v17, 1LL, v18))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v17, *(void *)(*(void *)(v21 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(__dst, v17, v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0LL, 1LL, v18);
      }

      uint64_t v43 = v15[10];
      uint64_t v44 = v10 + v43;
      uint64_t v45 = (uint64_t *)(v11 + v43);
      uint64_t v46 = *v45;
      *(_BYTE *)(v44 + 8) = *((_BYTE *)v45 + 8);
      *(void *)uint64_t v44 = v46;
      *(_BYTE *)(v10 + v15[11]) = *(_BYTE *)(v11 + v15[11]);
      uint64_t v47 = v15[12];
      uint64_t v41 = (_BYTE *)(v10 + v47);
      uint64_t v42 = (_BYTE *)(v11 + v47);
    }

    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v8 = type metadata accessor for IntegerFormatStyle.Percent(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v7);
      }
      else {
        uint64_t v8 = type metadata accessor for IntegerFormatStyle(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v7);
      }
      uint64_t v22 = *(int *)(v8 + 36);
      uint64_t v23 = a1 + v22;
      uint64_t v24 = a2 + v22;
      LOBYTE(v22) = *(_BYTE *)(a2 + v22 + 8);
      *(void *)uint64_t v23 = *(void *)v24;
      *(_BYTE *)(v23 + 8) = v22;
      __int128 v25 = *(_OWORD *)(v24 + 57);
      __int128 v27 = *(_OWORD *)(v24 + 32);
      __int128 v26 = *(_OWORD *)(v24 + 48);
      *(_OWORD *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(v24 + 16);
      *(_OWORD *)(v23 + 32) = v27;
      *(_OWORD *)(v23 + 48) = v26;
      *(_OWORD *)(v23 + 57) = v25;
      *(_BYTE *)(v23 + 73) = *(_BYTE *)(v24 + 73);
      LOWORD(v22) = *(_WORD *)(v24 + 74);
      *(_BYTE *)(v23 + 76) = *(_BYTE *)(v24 + 76);
      *(_WORD *)(v23 + 74) = v22;
      *(_BYTE *)(v23 + 77) = *(_BYTE *)(v24 + 77);
      uint64_t v28 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v29 = v28[9];
      uint64_t v30 = (void *)(v23 + v29);
      uint64_t v31 = (const void *)(v24 + v29);
      uint64_t v32 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v33 = *(void *)(v32 - 8);
      __int128 v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
      swift_unknownObjectRetain();
      if (v34(v31, 1LL, v32))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
      }

      uint64_t v36 = v28[10];
      uint64_t v37 = v23 + v36;
      uint64_t v38 = (uint64_t *)(v24 + v36);
      uint64_t v39 = *v38;
      *(_BYTE *)(v37 + 8) = *((_BYTE *)v38 + 8);
      *(void *)uint64_t v37 = v39;
      uint64_t v40 = v28[11];
      uint64_t v41 = (_BYTE *)(v23 + v40);
      uint64_t v42 = (_BYTE *)(v24 + v40);
    }

    _BYTE *v41 = *v42;
    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

_OWORD *initializeWithTake for IntegerFormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    __int128 v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    uint64_t v10 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v7)
                 + 40);
    uint64_t v11 = (char *)a1 + v10;
    __int128 v12 = (char *)a2 + v10;
    *(void *)uint64_t v11 = *(void *)((char *)a2 + v10);
    v11[8] = *((_BYTE *)a2 + v10 + 8);
    __int128 v13 = *(_OWORD *)((char *)a2 + v10 + 32);
    *((_OWORD *)v11 + 1) = *(_OWORD *)((char *)a2 + v10 + 16);
    *((_OWORD *)v11 + 2) = v13;
    *((_OWORD *)v11 + 3) = *(_OWORD *)((char *)a2 + v10 + 48);
    *(_OWORD *)(v11 + 57) = *(_OWORD *)((char *)a2 + v10 + 57);
    v11[73] = *((_BYTE *)a2 + v10 + 73);
    *(_DWORD *)(v11 + 74) = *(_DWORD *)((char *)a2 + v10 + 74);
    v11[78] = *((_BYTE *)a2 + v10 + 78);
    __int128 v14 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    uint64_t v15 = v14[9];
    uint64_t v16 = &v11[v15];
    uint64_t v17 = &v12[v15];
    uint64_t v18 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    }

    uint64_t v38 = v14[10];
    uint64_t v39 = &v11[v38];
    uint64_t v40 = &v12[v38];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    v11[v14[11]] = v12[v14[11]];
    uint64_t v41 = v14[12];
    uint64_t v36 = &v11[v41];
    uint64_t v37 = &v12[v41];
  }

  else
  {
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v8 = type metadata accessor for IntegerFormatStyle.Percent(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v7);
    }
    else {
      uint64_t v8 = type metadata accessor for IntegerFormatStyle(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v7);
    }
    uint64_t v21 = *(int *)(v8 + 36);
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    *(void *)uint64_t v22 = *(void *)((char *)a2 + v21);
    v22[8] = *((_BYTE *)a2 + v21 + 8);
    __int128 v24 = *(_OWORD *)((char *)a2 + v21 + 32);
    *((_OWORD *)v22 + 1) = *(_OWORD *)((char *)a2 + v21 + 16);
    *((_OWORD *)v22 + 2) = v24;
    *((_OWORD *)v22 + 3) = *(_OWORD *)((char *)a2 + v21 + 48);
    *(_OWORD *)(v22 + 57) = *(_OWORD *)((char *)a2 + v21 + 57);
    v22[73] = *((_BYTE *)a2 + v21 + 73);
    *((_WORD *)v22 + 37) = *(_WORD *)((char *)a2 + v21 + 74);
    v22[76] = *((_BYTE *)a2 + v21 + 76);
    v22[77] = *((_BYTE *)a2 + v21 + 77);
    __int128 v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v26 = v25[9];
    __int128 v27 = &v22[v26];
    uint64_t v28 = &v23[v26];
    uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
    }

    uint64_t v32 = v25[10];
    uint64_t v33 = &v22[v32];
    __int128 v34 = &v23[v32];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    uint64_t v35 = v25[11];
    uint64_t v36 = &v22[v35];
    uint64_t v37 = &v23[v35];
  }

  *uint64_t v36 = *v37;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for IntegerFormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      __int128 v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      uint64_t v10 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency( 0LL,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  v7)
                   + 40);
      uint64_t v11 = (char *)a1 + v10;
      __int128 v12 = (char *)a2 + v10;
      *(void *)uint64_t v11 = *(void *)((char *)a2 + v10);
      v11[8] = *((_BYTE *)a2 + v10 + 8);
      __int128 v13 = *(_OWORD *)((char *)a2 + v10 + 32);
      *((_OWORD *)v11 + 1) = *(_OWORD *)((char *)a2 + v10 + 16);
      *((_OWORD *)v11 + 2) = v13;
      *((_OWORD *)v11 + 3) = *(_OWORD *)((char *)a2 + v10 + 48);
      *(_OWORD *)(v11 + 57) = *(_OWORD *)((char *)a2 + v10 + 57);
      v11[73] = *((_BYTE *)a2 + v10 + 73);
      *(_DWORD *)(v11 + 74) = *(_DWORD *)((char *)a2 + v10 + 74);
      v11[78] = *((_BYTE *)a2 + v10 + 78);
      __int128 v14 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v15 = v14[9];
      uint64_t v16 = &v11[v15];
      uint64_t v17 = &v12[v15];
      uint64_t v18 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
      }

      uint64_t v38 = v14[10];
      uint64_t v39 = &v11[v38];
      uint64_t v40 = &v12[v38];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v40[8];
      v11[v14[11]] = v12[v14[11]];
      uint64_t v41 = v14[12];
      uint64_t v36 = &v11[v41];
      uint64_t v37 = &v12[v41];
    }

    else
    {
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v8 = type metadata accessor for IntegerFormatStyle.Percent(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v7);
      }
      else {
        uint64_t v8 = type metadata accessor for IntegerFormatStyle(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v7);
      }
      uint64_t v21 = *(int *)(v8 + 36);
      uint64_t v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      *(void *)uint64_t v22 = *(void *)((char *)a2 + v21);
      v22[8] = *((_BYTE *)a2 + v21 + 8);
      __int128 v24 = *(_OWORD *)((char *)a2 + v21 + 32);
      *((_OWORD *)v22 + 1) = *(_OWORD *)((char *)a2 + v21 + 16);
      *((_OWORD *)v22 + 2) = v24;
      *((_OWORD *)v22 + 3) = *(_OWORD *)((char *)a2 + v21 + 48);
      *(_OWORD *)(v22 + 57) = *(_OWORD *)((char *)a2 + v21 + 57);
      v22[73] = *((_BYTE *)a2 + v21 + 73);
      *((_WORD *)v22 + 37) = *(_WORD *)((char *)a2 + v21 + 74);
      v22[76] = *((_BYTE *)a2 + v21 + 76);
      v22[77] = *((_BYTE *)a2 + v21 + 77);
      __int128 v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v26 = v25[9];
      __int128 v27 = &v22[v26];
      uint64_t v28 = &v23[v26];
      uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29))
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
      }

      uint64_t v32 = v25[10];
      uint64_t v33 = &v22[v32];
      __int128 v34 = &v23[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      v33[8] = v34[8];
      uint64_t v35 = v25[11];
      uint64_t v36 = &v22[v35];
      uint64_t v37 = &v23[v35];
    }

    *uint64_t v36 = *v37;
    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style()
{
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.CodingKeys()
{
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Percent.CodingKeys()
{
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Currency.CodingKeys()
{
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Currency.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Currency.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Percent.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Percent.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.CodingKeys()
{
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style.CurrencyCodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerFormatStyle.Attributed.Style.CurrencyCodingKeys);
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style.PercentCodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerFormatStyle.Attributed.Style.PercentCodingKeys);
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style.IntegerCodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerFormatStyle.Attributed.Style.IntegerCodingKeys);
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerFormatStyle.Attributed.Style.CodingKeys);
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Currency.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_183263884 + 4 * byte_1837C511F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1832638B8 + 4 * byte_1837C511A[v4]))();
}

uint64_t sub_1832638B8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832638C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1832638C8LL);
  }
  return result;
}

uint64_t sub_1832638D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1832638DCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1832638E0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832638E8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Attributed.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_183263934 + 4 * byte_1837C5124[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_183263954 + 4 * byte_1837C5129[v4]))();
  }
}

_BYTE *sub_183263934(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_183263954(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_18326395C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_183263964(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_18326396C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_183263974(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys()
{
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
}

uint64_t FormatStyle.locale(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2, a1);
}

uint64_t dispatch thunk of FormatStyle.format(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of FormatStyle.locale(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance URL.FormatStyle@<X0>(_OWORD *a1@<X8>)
{
  __int128 v2 = v1[9];
  __int128 v3 = v1[11];
  __int128 v29 = v1[10];
  __int128 v30 = v3;
  __int128 v4 = v1[11];
  __int128 v31 = v1[12];
  __int128 v5 = v1[5];
  __int128 v6 = v1[7];
  __int128 v25 = v1[6];
  __int128 v7 = v25;
  __int128 v26 = v6;
  __int128 v8 = v1[7];
  __int128 v9 = v1[9];
  __int128 v27 = v1[8];
  __int128 v10 = v27;
  __int128 v28 = v9;
  __int128 v11 = v1[1];
  __int128 v12 = v1[3];
  __int128 v21 = v1[2];
  __int128 v13 = v21;
  __int128 v22 = v12;
  __int128 v14 = v1[3];
  __int128 v15 = v1[5];
  __int128 v23 = v1[4];
  __int128 v16 = v23;
  __int128 v24 = v15;
  __int128 v17 = v1[1];
  v20[0] = *v1;
  __int128 v18 = v20[0];
  v20[1] = v17;
  a1[10] = v29;
  a1[11] = v4;
  a1[12] = v1[12];
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v2;
  a1[2] = v13;
  a1[3] = v14;
  a1[4] = v16;
  a1[5] = v5;
  *a1 = v18;
  a1[1] = v11;
  return outlined retain of URL.FormatStyle((uint64_t)v20);
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.ISO8601FormatStyle@<X0>( uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 1);
  char v3 = *(_BYTE *)(v1 + 2);
  char v4 = *(_BYTE *)(v1 + 3);
  char v5 = *(_BYTE *)(v1 + 4);
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_BYTE *)(a1 + 3) = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t URLParseInfo.port.getter()
{
  if ((*(_BYTE *)(v0 + 144) & 1) != 0) {
    return 0LL;
  }
  unint64_t v2 = String.subscript.getter();
  uint64_t v6 = v5;
  if (!((v2 ^ v3) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v7 = v2;
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  uint64_t v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v2,  v3,  v4,  v5,  10LL);
  if ((v11 & 0x100) != 0)
  {
    uint64_t v12 = specialized _parseInteger<A, B>(ascii:radix:)(v7, v8, v9, v6, 10LL);
    char v16 = v15;
    swift_bridgeObjectRelease();
    int v14 = v16 & 1;
  }

  else
  {
    uint64_t v12 = v10;
    char v13 = v11;
    swift_bridgeObjectRelease();
    int v14 = v13 & 1;
  }

  if (v14) {
    return 0LL;
  }
  else {
    return v12;
  }
}

uint64_t URLParseInfo.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for URLParseInfo()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of static UIDNAHook.encode<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of static UIDNAHook.decode<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t storeEnumTagSinglePayload for URLParserKind(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_183263D10 + 4 * asc_1837C60E0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_183263D30 + 4 * byte_1837C60E5[v4]))();
  }
}

_BYTE *sub_183263D10(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_183263D30(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_183263D38(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_183263D40(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_183263D48(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_183263D50(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for URLParserKind()
{
  return &type metadata for URLParserKind;
}

unint64_t lazy protocol witness table accessor for type URLParserKind and conformance URLParserKind()
{
  unint64_t result = lazy protocol witness table cache variable for type URLParserKind and conformance URLParserKind;
  if (!lazy protocol witness table cache variable for type URLParserKind and conformance URLParserKind)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLParserKind, &type metadata for URLParserKind);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLParserKind and conformance URLParserKind);
  }

  return result;
}

uint64_t specialized static RFC3986Parser.percentEncodeHost<A>(_:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (!a4) {
    return 0LL;
  }
  unint64_t v6 = a1 >> 14;
  unint64_t v7 = a2 >> 14;
  if (a1 >> 14 == a2 >> 14) {
    return 0LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = Substring.UTF8View.subscript.getter();
  if (__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1LL))
  {
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  Substring.UTF8View.index(_:offsetBy:)();
  uint64_t v11 = Substring.UTF8View.subscript.getter();
  if (v11 != 93)
  {
LABEL_15:
    unint64_t v105 = a1;
    uint64_t v106 = (unsigned __int16 *)a2;
    unint64_t v107 = (unsigned __int16 *)a3;
    unint64_t v108 = a4;
    MEMORY[0x1895F8858](v11);
    uint64_t v96 = &v105;
    char v97 = 4;
    swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t)_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v95,  a1,  a2,  a3,  a4);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    if (!v29)
    {
      unint64_t v30 = v105;
      unint64_t v31 = (unint64_t)v106;
      unint64_t v32 = (unint64_t)v107;
      unint64_t v33 = v108;
      swift_bridgeObjectRetain();
      uint64_t v8 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v30, v31, v32, v33, 4u);
      swift_bridgeObjectRelease();
    }

    goto LABEL_17;
  }

  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() != 91)
  {
LABEL_68:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_69;
  }

  if (__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1LL)) {
    goto LABEL_57;
  }
  Substring.UTF8View.index(_:offsetBy:)();
  int v12 = Substring.UTF8View.subscript.getter();
  swift_bridgeObjectRelease();
  if (v12 != 93)
  {
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }

  swift_bridgeObjectRetain();
  uint64_t v13 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2, a3, a4);
  if ((v14 & 1) == 0)
  {
    unint64_t v15 = v13;
    if (!__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1LL))
    {
      uint64_t v104 = (unsigned __int16 *)(v15 >> 14);
      if (v15 >> 14 <= (unint64_t)Substring.UTF8View.index(_:offsetBy:)() >> 14)
      {
        uint64_t v16 = Substring.subscript.getter();
        unint64_t v18 = v17;
        unint64_t v105 = v16;
        uint64_t v106 = v19;
        unint64_t v107 = v20;
        unint64_t v108 = v17;
        MEMORY[0x1895F8858](v16);
        uint64_t v96 = &v105;
        char v97 = 8;
        __int128 v24 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v95,  v22,  v23,  v21,  v18);
        if (v25)
        {
          uint64_t v26 = (uint64_t)v24;
          __int128 v27 = v25;
        }

        else
        {
          unint64_t v68 = v105;
          unint64_t v69 = (unint64_t)v106;
          unint64_t v70 = v108;
          uint64_t v103 = v107;
          swift_bridgeObjectRetain();
          uint64_t v26 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( v68,  v69,  (unint64_t)v103,  v70,  8u);
          __int128 v27 = v71;
          swift_bridgeObjectRelease();
        }

        if ((unint64_t)v104 >= v6)
        {
          uint64_t v72 = Substring.subscript.getter();
          uint64_t v73 = MEMORY[0x186E1B610](v72);
          uint64_t v75 = v74;
          swift_bridgeObjectRelease();
          unint64_t v105 = v73;
          uint64_t v106 = v75;
          v76._uint64_t countAndFlagsBits = v26;
          v76._object = v27;
          String.append(_:)(v76);
          swift_bridgeObjectRelease();
          v77._uint64_t countAndFlagsBits = 93LL;
          v77._object = (void *)0xE100000000000000LL;
          String.append(_:)(v77);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return v105;
        }

        goto LABEL_64;
      }

      goto LABEL_61;
    }

    goto LABEL_59;
  }

  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() == 91)
  {
    if (__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1LL))
    {
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }

    Substring.UTF8View.index(_:offsetBy:)();
    int v34 = Substring.UTF8View.subscript.getter();
    swift_bridgeObjectRelease();
    if (v34 != 93)
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }

    swift_bridgeObjectRetain();
    unint64_t v35 = Substring.UTF8View.index(after:)();
    if (__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1LL))
    {
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }

    if ((unint64_t)Substring.UTF8View.index(_:offsetBy:)() >> 14 < v35 >> 14)
    {
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }

    unint64_t v36 = Substring.subscript.getter();
    unint64_t v38 = v37;
    unint64_t v40 = v39;
    unint64_t v42 = v41;
    uint64_t v43 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2, a3, a4);
    if ((v44 & 1) != 0)
    {
      char v60 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v36,  v38,  v40,  v42,  2u,  0);
      if (v60 == 2)
      {
        unint64_t v105 = v36;
        uint64_t v106 = (unsigned __int16 *)v38;
        unint64_t v107 = (unsigned __int16 *)v40;
        unint64_t v108 = v42;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        StringProtocol._ephemeralString.getter();
        uint64_t v103 = (unsigned __int16 *)v38;
        uint64_t v104 = (unsigned __int16 *)v40;
        unint64_t v61 = v42;
        uint64_t v62 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v63 = (unsigned __int16 *)objc_msgSend(v62, sel__fastCharacterContents);
        id v64 = v62;
        if (!v63)
        {
          swift_bridgeObjectRetain();
          BOOL v78 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v36,  (unint64_t)v103,  (unint64_t)v104,  v61,  2u,  0);
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }

        unint64_t v105 = v36;
        uint64_t v106 = v103;
        unint64_t v107 = v104;
        unint64_t v108 = v61;
        StringProtocol._ephemeralString.getter();
        uint64_t v65 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v66 = objc_msgSend(v65, sel_length);
        swift_unknownObjectRelease();
        char v60 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v63,  (uint64_t)v66,  2u,  0);
      }

      BOOL v67 = v60;
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }

    unint64_t v45 = v43;
    uint64_t v104 = (unsigned __int16 *)v40;
    unint64_t v46 = Substring.UTF8View.index(after:)();
    if (v7 == v46 >> 14) {
      goto LABEL_33;
    }
    unint64_t v47 = v46;
    unint64_t v100 = v47;
    if (v45 >> 14 < v36 >> 14)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }

    unint64_t v48 = Substring.subscript.getter();
    unint64_t v50 = v49;
    unint64_t v101 = v48;
    uint64_t v102 = v51;
    uint64_t v103 = v52;
    char v53 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v48,  (unint64_t)v51,  (unint64_t)v52,  v49,  2u,  0);
    uint64_t v99 = 0LL;
    if (v53 == 2)
    {
      unint64_t v105 = v101;
      uint64_t v106 = v102;
      unint64_t v107 = v103;
      unint64_t v108 = v50;
      unint64_t v98 = v50;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      uint64_t v54 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      char v55 = (unsigned __int16 *)objc_msgSend(v54, sel__fastCharacterContents);
      id v56 = v54;
      if (!v55)
      {
        swift_bridgeObjectRetain();
        BOOL v80 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v101,  (unint64_t)v102,  (unint64_t)v103,  v98,  2u,  0);
        swift_bridgeObjectRelease_n();
        if (!v80) {
          goto LABEL_33;
        }
LABEL_49:
        swift_bridgeObjectRetain();
        if (v38 >> 14 < (unint64_t)Substring.index(after:)() >> 14)
        {
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }

        uint64_t v81 = (unsigned __int16 *)v42;
        unint64_t v82 = Substring.subscript.getter();
        unint64_t v84 = v83;
        unint64_t v86 = v85;
        uint64_t v104 = (unsigned __int16 *)v87;
        char v88 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v82,  v83,  v85,  v87,  8u,  1);
        if (v88 != 2)
        {
          char v94 = v88;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          if ((v94 & 1) != 0) {
            goto LABEL_39;
          }
          goto LABEL_45;
        }

        uint64_t v103 = v81;
        unint64_t v105 = v82;
        uint64_t v106 = (unsigned __int16 *)v84;
        unint64_t v107 = (unsigned __int16 *)v86;
        unint64_t v108 = (unint64_t)v104;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        StringProtocol._ephemeralString.getter();
        uint64_t v89 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v90 = (unsigned __int16 *)objc_msgSend(v89, sel__fastCharacterContents);
        id v91 = v89;
        uint64_t v102 = v90;
        if (v90)
        {
          unint64_t v105 = v82;
          uint64_t v106 = (unsigned __int16 *)v84;
          unint64_t v107 = (unsigned __int16 *)v86;
          unint64_t v108 = (unint64_t)v104;
          StringProtocol._ephemeralString.getter();
          uint64_t v92 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v93 = objc_msgSend(v92, sel_length);
          swift_unknownObjectRelease();
          BOOL v67 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v102,  (uint64_t)v93,  8u,  1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_38:
          swift_bridgeObjectRelease();
          if (v67)
          {
LABEL_39:
            unint64_t v105 = a1;
            uint64_t v106 = (unsigned __int16 *)a2;
            unint64_t v107 = (unsigned __int16 *)a3;
            unint64_t v108 = a4;
            lazy protocol witness table accessor for type Substring and conformance Substring();
            uint64_t v8 = String.init<A>(_:)();
LABEL_17:
            swift_bridgeObjectRelease();
            return v8;
          }

uint64_t one-time initialization function for schemesToPercentEncodeHost()
{
  uint64_t v0 = 0LL;
  uint64_t v5 = Set.init(minimumCapacity:)();
  do
  {
    unint64_t v1 = *(void *)((char *)&outlined read-only object #0 of one-time initialization function for schemesToPercentEncodeHost
                   + v0
                   + 32);
    unint64_t v2 = *(void *)((char *)&outlined read-only object #0 of one-time initialization function for schemesToPercentEncodeHost
                   + v0
                   + 40);
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v4, v1, v2);
    swift_bridgeObjectRelease();
    v0 += 16LL;
  }

  while (v0 != 208);
  uint64_t result = swift_arrayDestroy();
  static RFC3986Parser.schemesToPercentEncodeHost = v5;
  return result;
}

unint64_t convert #1 (_:) in static RFC3986Parser.parse(urlString:)( unint64_t result, unint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(a4 + 16);
  unint64_t v7 = *(void *)(a4 + 24);
  if ((v7 & 0x1000000000000000LL) == 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else
    {
      unint64_t v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000LL) == 0) {
        unint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
      }
      if (v8 >= result)
      {
        unint64_t v9 = (result << 16) | 4;
        if ((v7 & 0x1000000000000000LL) == 0) {
          goto LABEL_8;
        }
LABEL_18:
        unint64_t v11 = MEMORY[0x186E1B838](15LL, a2, v6);
        goto LABEL_13;
      }
    }

    __break(1u);
    goto LABEL_21;
  }

  uint64_t result = MEMORY[0x186E1B838](15LL, result, v6);
  unint64_t v9 = result;
  uint64_t v6 = *(void *)(a4 + 16);
  unint64_t v7 = *(void *)(a4 + 24);
  if ((v7 & 0x1000000000000000LL) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((a2 & 0x8000000000000000LL) != 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  unint64_t v10 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 >= a2)
  {
    unint64_t v11 = (a2 << 16) | 4;
LABEL_13:
    if (v11 >> 14 >= v9 >> 14) {
      return v9;
    }
    __break(1u);
    return 0LL;
  }

unint64_t UInt8.allowedURLComponents.getter(char a1)
{
  char v1 = a1 - 33;
  char v2 = a1 - 58;
  unsigned int v3 = (a1 - 58);
  if (v3 > 0xF5) {
    return 255LL;
  }
  if (v3 < 7 && ((0x6Bu >> v2) & 1) != 0) {
    return 0xF0C0D276D2F6D2uLL >> (8 * v2);
  }
  if (a1 == 126) {
    int v4 = -2;
  }
  else {
    int v4 = 0;
  }
  else {
    int v5 = 255;
  }
  if (a1 == 95) {
    unsigned int v6 = 254;
  }
  else {
    unsigned int v6 = v5;
  }
  else {
    return 255LL;
  }
}

uint64_t specialized static RFC3986Parser.parseAuthority(_:into:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a2;
  uint64_t v8 = a2;
  if (a2 == result) {
    goto LABEL_25;
  }
  uint64_t v9 = result;
  uint64_t v10 = a2 - 1;
  if (*(_BYTE *)(a3 + a2 - 1) != 64)
  {
    if (v10 == result)
    {
LABEL_7:
      uint64_t v8 = result;
      if (result != a2) {
        goto LABEL_17;
      }
LABEL_24:
      if (v8 > v7)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }

uint64_t specialized static RFC3986Parser.parse(urlString:)(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  swift_bridgeObjectRetain();
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_75;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    goto LABEL_76;
  }
LABEL_3:
  uint64_t v11 = &v195;
  if ((a1 & 0x1000000000000000LL) != 0)
  {
    char v12 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
    goto LABEL_5;
  }

  while (1)
  {
    uint64_t v103 = _StringObject.sharedUTF8.getter();
    uint64_t v11 = &v195;
    char v12 = (unsigned __int8 *)v103;
    uint64_t v13 = v104;
LABEL_5:
    char v14 = 1;
    LOBYTE(v169) = 1;
    LOBYTE(v140) = 1;
    LOBYTE(v193) = 1;
    char v224 = 1;
    char v223 = 1;
    char v222 = 1;
    char v221 = 1;
    char v220 = 1;
    uint64_t v196 = 0LL;
    unint64_t v195 = 0LL;
    char v197 = 1;
    __int128 v198 = 0uLL;
    char v199 = 1;
    __int128 v200 = 0uLL;
    char v201 = 1;
    __int128 v202 = 0uLL;
    char v203 = 1;
    unint64_t v205 = 0LL;
    unint64_t v204 = 0LL;
    char v206 = 1;
    uint64_t v208 = 0LL;
    uint64_t v207 = 0LL;
    char v209 = 1;
    __int128 v210 = 0uLL;
    char v211 = 1;
    unint64_t v213 = 0LL;
    unint64_t v212 = 0LL;
    char v214 = 1;
    __int16 v215 = 0;
    char v216 = 0;
    if (!v13)
    {
      char v128 = 0;
      char v138 = 0;
      char v139 = 0;
      char v21 = 0;
      unint64_t v22 = 0LL;
      unint64_t v23 = 0LL;
      unint64_t v20 = 0LL;
      unint64_t v24 = 0LL;
      int64_t v19 = 0LL;
      uint64_t v4 = 0LL;
      unint64_t v134 = 0LL;
      unint64_t v135 = 0LL;
      char v219 = 1;
      char v218 = 1;
      char v217 = 1;
      char v168 = 1;
      char v167 = 1;
      char v166 = 0;
      __int128 v25 = 0uLL;
      __int128 v136 = 0u;
      char v165 = 1;
      char v26 = 1;
      char v18 = 1;
      char v164 = 1;
      char v27 = 1;
      char v28 = 1;
      char v29 = 1;
      char v30 = 1;
LABEL_15:
      __int128 v130 = v25;
      __int128 v132 = v25;
      __int128 v129 = v25;
      goto LABEL_129;
    }

    unsigned int v15 = *v12;
    if (v15 - 35 <= 0x3A
      && (uint64_t v16 = 0x500000030801001LL, ((1LL << (v15 - 35)) & 0x500000030801001LL) != 0))
    {
LABEL_8:
      uint64_t v17 = 0LL;
    }

    else
    {
      unint64_t v34 = 1LL;
      uint64_t v16 = 0x500000030001001LL;
      uint64_t v17 = 1LL;
      while (1)
      {
        if (v13 == v17)
        {
          uint64_t v17 = v13;
          goto LABEL_9;
        }

        int v40 = v12[v17++];
        uint64_t v9 = (v40 - 35);
        if (v9 <= 0x3A)
        {
          if (((1LL << v9) & 0x500000030001001LL) != 0) {
            goto LABEL_8;
          }
          if (v9 == 23) {
            break;
          }
        }
      }

      uint64_t v41 = v17 - 1;
      if (v17 - 1 < 0) {
        goto LABEL_153;
      }
      unint64_t v195 = 0LL;
      uint64_t v196 = v17 - 1;
      char v197 = 0;
      if (v13 == v17)
      {
        if (v15 >= 0x41)
        {
          char v14 = 1;
          if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( 0LL,  v41,  (uint64_t)v12,  1u,  0))
          {
            unint64_t v23 = v41;
            char v128 = 0;
            char v138 = 0;
            char v139 = 0;
            char v21 = 0;
            char v30 = 0;
            unint64_t v22 = 0LL;
            unint64_t v20 = 0LL;
            unint64_t v24 = 0LL;
            unint64_t v134 = 0LL;
            unint64_t v135 = 0LL;
            char v219 = 0;
            char v218 = 1;
            char v217 = 1;
            char v168 = 1;
            char v167 = 1;
            __int128 v25 = 0uLL;
            __int128 v136 = 0u;
            char v166 = 0;
            char v26 = 1;
            char v18 = 1;
            char v165 = 1;
            char v27 = 1;
            char v28 = 1;
            char v164 = 1;
            char v29 = 1;
            int64_t v19 = v13;
            uint64_t v4 = v13;
            goto LABEL_15;
          }
        }

        goto LABEL_141;
      }

      if (v15 < 0x41) {
        goto LABEL_141;
      }
      BOOL v48 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( 0LL,  v17 - 1,  (uint64_t)v12,  1u,  0);
      uint64_t v11 = &v195;
      if (!v48) {
        goto LABEL_141;
      }
    }

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5H7VGXEfU_10Foundation0nO0VXMtAQ15URLComponentSet01_qrstuvW0LLVSbTf1nnc_nTf4xndnn_n( uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned __int8 a6, char a7)
{
  unint64_t v11 = a2;
  uint64_t v12 = result;
  uint64_t v13 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = 4LL << v13;
  unint64_t v15 = a2 & 0xC;
  if (v15 == 4LL << v13)
  {
    unsigned __int8 v17 = a6;
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a6 = v17;
    a2 = result;
    if ((a5 & 0x1000000000000000LL) == 0)
    {
LABEL_5:
      int64_t v16 = a2 >> 16;
      if (v15 != v14) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
    goto LABEL_5;
  }

  unsigned __int8 v25 = a6;
  unint64_t v18 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000LL) != 0) {
    unint64_t v18 = HIBYTE(a5) & 0xF;
  }
  if (v18 < a2 >> 16) {
    goto LABEL_31;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v16 = result;
  a6 = v25;
  if (v15 == v14)
  {
LABEL_14:
    unsigned __int8 v19 = a6;
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a4, a5);
    a6 = v19;
    unint64_t v11 = result;
  }

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5, char a6)
{
  if ((a4 & 0x1000000000000000LL) != 0) {
    return 2LL;
  }
  if ((a4 & 0x2000000000000000LL) != 0)
  {
    v16[0] = a3;
    v16[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    char v14 = a6 & 1;
    uint64_t v13 = v16;
  }

  else
  {
    if ((a3 & 0x1000000000000000LL) != 0) {
      uint64_t v13 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v13 = (void *)_StringObject.sharedUTF8.getter();
    }
    char v14 = a6 & 1;
  }

  uint64_t result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5H7VGXEfU_10Foundation0nO0VXMtAQ15URLComponentSet01_qrstuvW0LLVSbTf1nnc_nTf4xndnn_n( (uint64_t)v13,  a1,  a2,  a3,  a4,  a5,  v14);
  if (!v6) {
    return result & 1;
  }
  return result;
}

uint64_t specialized static RFC3986Parser.validate(parseInfo:)(_BYTE *a1)
{
  if ((a1[72] & 1) != 0) {
    goto LABEL_6;
  }
  unint64_t v2 = String.subscript.getter();
  unint64_t v4 = v3;
  unint64_t v6 = v5;
  unint64_t v8 = v7;
  char v9 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v2,  v3,  v5,  v7,  2u,  1);
  if (v9 == 2)
  {
    lazy protocol witness table accessor for type Substring and conformance Substring();
    StringProtocol._ephemeralString.getter();
    uint64_t v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    id v12 = v10;
    if (!v11)
    {
      swift_bridgeObjectRetain();
      BOOL v97 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v2,  v4,  v6,  v8,  2u,  1);
      swift_bridgeObjectRelease_n();
      if (!v97) {
        return 0LL;
      }
      goto LABEL_6;
    }

    StringProtocol._ephemeralString.getter();
    uint64_t v13 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v13, sel_length);
    swift_unknownObjectRelease();
    char v9 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v11,  (uint64_t)v14,  2u,  1);
  }

  char v15 = v9;
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0) {
    return 0LL;
  }
LABEL_6:
  if ((a1[96] & 1) == 0)
  {
    unint64_t v16 = String.subscript.getter();
    unint64_t v18 = v17;
    unint64_t v20 = v19;
    unint64_t v22 = v21;
    char v23 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v16,  v17,  v19,  v21,  2u,  1);
    if (v23 != 2) {
      goto LABEL_10;
    }
    lazy protocol witness table accessor for type Substring and conformance Substring();
    StringProtocol._ephemeralString.getter();
    unint64_t v24 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unsigned __int8 v25 = (unsigned __int16 *)objc_msgSend(v24, sel__fastCharacterContents);
    id v26 = v24;
    if (v25)
    {
      StringProtocol._ephemeralString.getter();
      char v27 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v28 = objc_msgSend(v27, sel_length);
      swift_unknownObjectRelease();
      char v23 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v25,  (uint64_t)v28,  2u,  1);
LABEL_10:
      char v29 = v23;
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0) {
        return 0LL;
      }
      goto LABEL_11;
    }

    swift_bridgeObjectRetain();
    BOOL v120 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v16,  v18,  v20,  v22,  2u,  1);
    swift_bridgeObjectRelease_n();
    if (!v120) {
      return 0LL;
    }
  }

uint64_t specialized static RFC3986Parser.invalidComponents(of:)(_BYTE *a1)
{
  if ((a1[72] & 1) != 0)
  {
    uint64_t v2 = 0LL;
    goto LABEL_13;
  }

  unint64_t v3 = String.subscript.getter();
  unint64_t v5 = v4;
  unint64_t v7 = v6;
  unint64_t v9 = v8;
  char v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v3,  v4,  v6,  v8,  2u,  1);
  if (v10 == 2)
  {
    lazy protocol witness table accessor for type Substring and conformance Substring();
    StringProtocol._ephemeralString.getter();
    unint64_t v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents);
    id v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      id v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v15 = (uint64_t)objc_msgSend(v14, sel_length);
      swift_unknownObjectRelease();
      LOBYTE(v15) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v12,  v15,  2u,  1);
      swift_bridgeObjectRelease();
      if ((v15 & 1) != 0) {
        uint64_t v2 = 0LL;
      }
      else {
        uint64_t v2 = 2LL;
      }
      goto LABEL_13;
    }

    swift_bridgeObjectRetain();
    char v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v3, v5, v7, v9, 2u, 1);
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v16 = v10;
    swift_bridgeObjectRelease();
    char v17 = v16 & 1;
  }

  if ((v17 & 1) != 0) {
    uint64_t v2 = 0LL;
  }
  else {
    uint64_t v2 = 2LL;
  }
LABEL_13:
  if ((a1[96] & 1) == 0)
  {
    unint64_t v18 = String.subscript.getter();
    unint64_t v20 = v19;
    unint64_t v22 = v21;
    unint64_t v24 = v23;
    char v25 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v18,  v19,  v21,  v23,  2u,  1);
    if (v25 == 2)
    {
      uint64_t v26 = v2;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      char v27 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v28 = (unsigned __int16 *)objc_msgSend(v27, sel__fastCharacterContents);
      id v29 = v27;
      if (v28)
      {
        StringProtocol._ephemeralString.getter();
        unint64_t v30 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v31 = objc_msgSend(v30, sel_length);
        swift_unknownObjectRelease();
        BOOL v32 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v28,  (uint64_t)v31,  2u,  1);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRetain();
        BOOL v32 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v18,  v20,  v22,  v24,  2u,  1);
        swift_bridgeObjectRelease_n();
      }

      uint64_t v2 = v26;
      if (v32) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }

    char v33 = v25;
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0) {
LABEL_18:
    }
      uint64_t v2 = v2 | 4;
  }

Swift::Int specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)( uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = 0LL;
  unint64_t v5 = (_BYTE *)specialized static RFC3986Parser.parse(urlString:)(a1, a2);
  if (!v5) {
    return v4;
  }
  unint64_t v6 = v5;
  if ((a3 & 1) == 0)
  {
    if ((specialized static RFC3986Parser.validate(parseInfo:)(v5) & 1) == 0)
    {
      swift_release();
      return 0LL;
    }

    return (Swift::Int)v6;
  }

  char v7 = specialized static RFC3986Parser.invalidComponents(of:)(v5);
  if (v7)
  {
    char v8 = v7;
    uint64_t v206 = 0LL;
    unint64_t v207 = 0xE000000000000000LL;
    if ((v6[48] & 1) == 0)
    {
      uint64_t v9 = String.subscript.getter();
      uint64_t v10 = MEMORY[0x186E1B610](v9);
      id v12 = v11;
      swift_bridgeObjectRelease();
      v203._unint64_t countAndFlagsBits = v10;
      v203._object = v12;
      v13._unint64_t countAndFlagsBits = 58LL;
      v13._object = (void *)0xE100000000000000LL;
      String.append(_:)(v13);
      v14._unint64_t countAndFlagsBits = v10;
      v14._object = v12;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
    }

    int v15 = v8;
    if (v6[72] == 1)
    {
      if (v6[96] == 1 && v6[120] == 1 && (v6[144] & 1) != 0) {
        goto LABEL_35;
      }
      uint64_t v16 = 12079LL;
      unint64_t v17 = 0xE200000000000000LL;
    }

    else
    {
      v18._unint64_t countAndFlagsBits = 12079LL;
      v18._object = (void *)0xE200000000000000LL;
      String.append(_:)(v18);
      uint64_t v19 = String.subscript.getter();
      unint64_t v23 = v22;
      if ((v15 & 2) != 0)
      {
        if ((v19 ^ v20) >> 14)
        {
          v203._unint64_t countAndFlagsBits = v19;
          v203._object = (void *)v20;
          unint64_t v204 = v21;
          unint64_t v205 = v22;
          MEMORY[0x1895F8858](v19);
          uint64_t v194 = &v203;
          char v195 = 2;
          id v29 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v193,  v28,  v27,  v26,  v23);
          if (v30)
          {
            uint64_t v24 = (uint64_t)v29;
            char v25 = v30;
          }

          else
          {
            unint64_t countAndFlagsBits = v203._countAndFlagsBits;
            object = v203._object;
            unint64_t v33 = v204;
            unint64_t v34 = v205;
            swift_bridgeObjectRetain();
            uint64_t v24 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( countAndFlagsBits,  (unint64_t)object,  v33,  v34,  2u);
            char v25 = v35;
            swift_bridgeObjectRelease();
          }

          swift_bridgeObjectRelease();
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t v24 = 0LL;
          char v25 = (void *)0xE000000000000000LL;
        }

        v36._unint64_t countAndFlagsBits = v24;
        v36._object = v25;
        String.append(_:)(v36);
      }

      else
      {
        v203._unint64_t countAndFlagsBits = v19;
        v203._object = (void *)v20;
        unint64_t v204 = v21;
        unint64_t v205 = v22;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        String.append<A>(contentsOf:)();
      }

      swift_bridgeObjectRelease();
      if ((v6[96] & 1) == 0)
      {
        uint64_t v37 = String.subscript.getter();
        unint64_t v41 = v40;
        if ((v15 & 4) != 0)
        {
          uint64_t v201 = 58LL;
          unint64_t v202 = 0xE100000000000000LL;
          if ((v37 ^ v38) >> 14)
          {
            v203._unint64_t countAndFlagsBits = v37;
            v203._object = (void *)v38;
            unint64_t v204 = v39;
            unint64_t v205 = v40;
            MEMORY[0x1895F8858](v37);
            uint64_t v194 = &v203;
            char v195 = 2;
            uint64_t v50 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v193,  v49,  v48,  v47,  v41);
            if (v51)
            {
              uint64_t v45 = (uint64_t)v50;
              unint64_t v46 = v51;
            }

            else
            {
              unint64_t v52 = v203._countAndFlagsBits;
              int v53 = v203._object;
              unint64_t v54 = v204;
              unint64_t v55 = v205;
              swift_bridgeObjectRetain();
              uint64_t v45 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( v52,  (unint64_t)v53,  v54,  v55,  2u);
              unint64_t v46 = v56;
              swift_bridgeObjectRelease();
            }

            swift_bridgeObjectRelease();
          }

          else
          {
            swift_bridgeObjectRelease();
            uint64_t v45 = 0LL;
            unint64_t v46 = (void *)0xE000000000000000LL;
          }

          v57._unint64_t countAndFlagsBits = v45;
          v57._object = v46;
          String.append(_:)(v57);
          swift_bridgeObjectRelease();
          uint64_t v43 = v201;
          unint64_t v44 = v202;
        }

        else
        {
          v203._unint64_t countAndFlagsBits = 58LL;
          v203._object = (void *)0xE100000000000000LL;
          v42._unint64_t countAndFlagsBits = MEMORY[0x186E1B610](v37, v38, v39, v40);
          String.append(_:)(v42);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v43 = v203._countAndFlagsBits;
          unint64_t v44 = (unint64_t)v203._object;
        }

        unint64_t v58 = v44;
        String.append(_:)(*(Swift::String *)&v43);
        swift_bridgeObjectRelease();
      }

      uint64_t v16 = 64LL;
      unint64_t v17 = 0xE100000000000000LL;
    }

    String.append(_:)(*(Swift::String *)&v16);
LABEL_35:
    if ((v6[120] & 1) != 0) {
      goto LABEL_39;
    }
    uint64_t v59 = String.subscript.getter();
    unint64_t v63 = v59;
    unint64_t v64 = v60;
    unint64_t v65 = v61;
    unint64_t v66 = v62;
    if ((v15 & 8) == 0)
    {
      v203._unint64_t countAndFlagsBits = v59;
      v203._object = (void *)v60;
      unint64_t v204 = v61;
      unint64_t v205 = v62;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      String.append<A>(contentsOf:)();
      goto LABEL_38;
    }

    int v79 = v6[217];
    int v198 = v15;
    if (v79 == 1)
    {
      unint64_t v80 = v59 ^ v60;
      goto LABEL_62;
    }

    if ((v6[48] & 1) != 0)
    {
      uint64_t v196 = 0LL;
      uint64_t v197 = 0LL;
      uint64_t v84 = 0LL;
    }

    else
    {
      uint64_t v85 = String.subscript.getter();
      uint64_t v196 = v86;
      uint64_t v197 = v85;
      uint64_t v84 = v87;
    }

    unint64_t v80 = v63 ^ v64;
    if ((v63 ^ v64) >= 0x4000)
    {
      swift_bridgeObjectRetain();
      if (Substring.UTF8View.subscript.getter() == 91)
      {
        if (__OFSUB__(specialized Collection.count.getter(v63, v64, v65, v66), 1LL))
        {
          __break(1u);
          goto LABEL_153;
        }

        Substring.UTF8View.index(_:offsetBy:)();
        int v88 = Substring.UTF8View.subscript.getter();
        swift_bridgeObjectRelease();
        if (v88 == 93)
        {
          swift_bridgeObjectRelease();
          goto LABEL_64;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
      }
    }

    if (v84)
    {
      uint64_t v89 = one-time initialization token for schemesToPercentEncodeHost;
      swift_bridgeObjectRetain();
      if (v89 != -1) {
        swift_once();
      }
      uint64_t v90 = static RFC3986Parser.schemesToPercentEncodeHost;
      Swift::String v91 = Substring.lowercased()();
      LOBYTE(v90) = specialized Set.contains(_:)(v91._countAndFlagsBits, (uint64_t)v91._object, v90);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if ((v90 & 1) != 0)
      {
LABEL_62:
        if (!(v80 >> 14))
        {
          swift_bridgeObjectRelease();
          uint64_t v92 = 0LL;
          id v93 = (void *)0xE000000000000000LL;
          goto LABEL_65;
        }

uint64_t _sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)( a1,  a2,  *(unsigned __int8 *)(v3 + 24),  a3);
}

uint64_t sub_18326942C()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of URLBufferParseInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLBufferParseInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

__n128 __swift_memcpy188_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  __int128 v9 = a2[9];
  __int128 v10 = a2[10];
  *(_OWORD *)(a1 + 172) = *(__int128 *)((char *)a2 + 172);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for URLBufferParseInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 188)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 185);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for URLBufferParseInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 184) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 188) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 188) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 185) = a2 + 1;
    }
  }

  return result;
}

void *type metadata accessor for URLBufferParseInfo()
{
  return &unk_189C860D0;
}

BOOL specialized UErrorCode.checkSuccessAndLogError(_:)(UErrorCode a1)
{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD00000000000001ELL, 0x80000001839CE9F0LL);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000017LL, 0x80000001839CEB20LL);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000027LL, 0x80000001839CEAF0LL);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000024LL, 0x80000001839CEAC0LL);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD00000000000002CLL, 0x80000001839CEA90LL);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000032LL, 0x80000001839CEA50LL);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000012LL, 0x80000001839CEA30LL);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD00000000000001FLL, 0x80000001839CEA10LL);
}

BOOL specialized UErrorCode.checkSuccessAndLogError(_:)(UErrorCode a1, uint64_t a2, unint64_t a3)
{
  if (a1 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static ICUError.logger);
    __int128 v7 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v14 = v10;
      *(_DWORD *)uint64_t v9 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2080;
      unint64_t v11 = ICUError.debugDescription.getter(a1);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_182EB1000, v7, v8, "%s. Error: %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186E20E60](v10, -1LL, -1LL);
      MEMORY[0x186E20E60](v9, -1LL, -1LL);
    }
  }

  return a1 < U_ILLEGAL_ARGUMENT_ERROR;
}

uint64_t specialized _withResizingUCharBuffer(initialSize:_:)( uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  v8[2] = *MEMORY[0x1895F89C0];
  if ((isStackAllocationSafe & 0x80000000) != 0) {
    __break(1u);
  }
  if ((int)isStackAllocationSafe < 513
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v8[-1] - v4, a3, v8);
    return v8[0];
  }

  else
  {
    uint64_t v6 = swift_slowAlloc();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v6, a3, v8);
    MEMORY[0x186E20E60](v6, -1LL, -1LL);
    return v8[0];
  }

uint64_t specialized _withResizingUCharBuffer(initialSize:_:)(uint64_t isStackAllocationSafe)
{
  return specialized _withResizingUCharBuffer(initialSize:_:)(isStackAllocationSafe);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5[3];
  v5[2] = *MEMORY[0x1895F89C0];
  if ((isStackAllocationSafe & 0x80000000) != 0) {
    __break(1u);
  }
  if ((int)isStackAllocationSafe < 513
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v5[-1] - v1, v5);
    return v5[0];
  }

  else
  {
    unsigned int v3 = swift_slowAlloc();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v3, v5);
    MEMORY[0x186E20E60](v3, -1LL, -1LL);
    return v5[0];
  }

char *specialized withVaList<A>(_:_:)(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = 8LL;
  v4[3] = 0LL;
  int v5 = v4 + 3;
  v4[4] = 0LL;
  void v4[5] = 0LL;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = a1 + 32;
    while (1)
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( v8 + 40 * v7,  (uint64_t)v26);
      uint64_t v9 = v27;
      uint64_t v10 = v28;
      __swift_project_boxed_opaque_existential_1(v26, v27);
      __n128 result = (char *)MEMORY[0x186E1CF6C](v9, v10);
      uint64_t v12 = *v5;
      uint64_t v13 = *((void *)result + 2);
      BOOL v14 = __OFADD__(*v5, v13);
      uint64_t v15 = *v5 + v13;
      if (v14)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        return result;
      }

      uint64_t v16 = result;
      uint64_t v17 = v4[4];
      if (v17 >= v15) {
        goto LABEL_18;
      }
      if (v17 + 0x4000000000000000LL < 0) {
        goto LABEL_29;
      }
      Swift::String v18 = (char *)v4[5];
      if (2 * v17 > v15) {
        uint64_t v15 = 2 * v17;
      }
      v4[4] = v15;
      __n128 result = (char *)swift_slowAlloc();
      void v4[5] = result;
      if (v18) {
        break;
      }
LABEL_19:
      if (!result) {
        goto LABEL_32;
      }
      uint64_t v20 = *((void *)v16 + 2);
      if (v20)
      {
        unint64_t v21 = (uint64_t *)(v16 + 32);
        uint64_t v22 = *v5;
        while (1)
        {
          uint64_t v23 = *v21++;
          *(void *)&result[8 * v22] = v23;
          uint64_t v22 = *v5 + 1;
          if (__OFADD__(*v5, 1LL)) {
            break;
          }
          *int v5 = v22;
          if (!--v20) {
            goto LABEL_3;
          }
        }

        __break(1u);
        goto LABEL_28;
      }

uint64_t _withFixedUCharBuffer(size:defaultIsError:_:)( uint64_t isStackAllocationSafe, unsigned __int8 a2, uint64_t (*a3)(uint64_t, uint64_t, int *))
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if ((isStackAllocationSafe & 0x80000000) != 0) {
    __break(1u);
  }
  uint64_t v5 = isStackAllocationSafe;
  if ((int)isStackAllocationSafe <= 512
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    __n128 v6 = MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v8 = &v16[-v7];
    int v17 = 0;
    uint64_t v9 = ((uint64_t (*)(_BYTE *, uint64_t, int *, __n128))a3)(&v16[-v7], v5, &v17, v6);
    if ((v9 & 0x100000000LL) != 0 || v17 > 0) {
      return 0LL;
    }
    BOOL v10 = (int)v9 <= (int)v5 && ((v17 == -127) & a2) == 0;
    else {
      return specialized String.init(_utf16:)((uint64_t)v8, v9);
    }
  }

  else
  {
    uint64_t v12 = swift_slowAlloc();
    int v17 = 0;
    uint64_t v13 = a3(v12, v5, &v17);
    if ((v13 & 0x100000000LL) != 0 || v17 > 0)
    {
      uint64_t v15 = 0LL;
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    MEMORY[0x186E20E60](v12, -1LL, -1LL);
  }

  return v15;
}

const char *ICUError.debugDescription.getter(UErrorCode a1)
{
  __n128 result = u_errorName(a1);
  if (result)
  {
    __n128 result = (const char *)MEMORY[0x186E1B634]();
    if (!v2)
    {
      _StringGuts.grow(_:)(20LL);
      swift_bridgeObjectRelease();
      v3._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      return (const char *)0xD000000000000012LL;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static ICUError.logger);
  __swift_project_value_buffer(v0, (uint64_t)static ICUError.logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static _CalendarGregorian.logger);
  __swift_project_value_buffer(v0, (uint64_t)static _CalendarGregorian.logger);
  return Logger.init(subsystem:category:)();
}

const char *protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICUError()
{
  return ICUError.debugDescription.getter(*v0);
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X4>, void *a3@<X8>)
{
  if (!a1) {
LABEL_7:
  }
    __break(1u);
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t result = ucal_getCanonicalTimeZoneID();
  *a3 = 0LL;
  a3[1] = 0LL;
  return result;
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  int v9 = 0;
  if (!a1) {
    __break(1u);
  }
  int v4 = udat_formatForFields();
  if (v4 <= 0)
  {
    uint64_t result = swift_release();
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  else
  {
    uint64_t v5 = specialized String.init(_utf16:)(a1, v4);
    uint64_t v7 = v6;
    uint64_t result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }

  return result;
}

{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v10 = *MEMORY[0x1895F89C0];
  int v9 = 0;
  if (!a1) {
    __break(1u);
  }
  int v4 = unumf_resultToString();
  if (v4 <= 0)
  {
    uint64_t result = swift_release();
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  else
  {
    uint64_t v5 = specialized String.init(_utf16:)(a1, v4);
    uint64_t v7 = v6;
    uint64_t result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }

  return result;
}

{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v10 = *MEMORY[0x1895F89C0];
  int v9 = 0;
  if (!a1) {
    __break(1u);
  }
  int v4 = unum_formatInt64();
  if (v4 <= 0)
  {
    uint64_t result = swift_release();
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  else
  {
    uint64_t v5 = specialized String.init(_utf16:)(a1, v4);
    uint64_t v7 = v6;
    uint64_t result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }

  return result;
}

{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v10 = *MEMORY[0x1895F89C0];
  int v9 = 0;
  if (!a1) {
    __break(1u);
  }
  int v4 = udat_formatForFields();
  if (v4 <= 0)
  {
    swift_release();
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  else
  {
    uint64_t v5 = specialized String.init(_utf16:)(a1, v4);
    uint64_t v7 = v6;
    swift_release();
    *a2 = v5;
    a2[1] = v7;
  }

  return swift_release();
}

{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v10 = *MEMORY[0x1895F89C0];
  int v9 = 0;
  if (!a1) {
    __break(1u);
  }
  int v4 = udtitvfmt_format();
  if (v4 <= 0)
  {
    uint64_t result = swift_release();
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  else
  {
    uint64_t v5 = specialized String.init(_utf16:)(a1, v4);
    uint64_t v7 = v6;
    uint64_t result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }

  return result;
}

{
  int TimeZoneDisplayName;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v10 = *MEMORY[0x1895F89C0];
  int v9 = 0;
  if (!a1) {
    __break(1u);
  }
  String.utf8CString.getter();
  TimeZoneDisplayName = ucal_getTimeZoneDisplayName();
  swift_release();
  if (TimeZoneDisplayName <= 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  else
  {
    uint64_t v5 = specialized String.init(_utf16:)(a1, TimeZoneDisplayName);
    uint64_t v7 = v6;
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v5;
    a2[1] = v7;
  }

  return result;
}

{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v7 = *MEMORY[0x1895F89C0];
  uint64_t v6 = 0;
  if (!a1) {
    __break(1u);
  }
  MEMORY[0x186E211D8]();
  uint64_t result = udat_format();
  if ((int)result <= 0)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  else
  {
    uint64_t result = specialized String.init(_utf16:)(a1, result);
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

{
  int Symbols;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v10 = *MEMORY[0x1895F89C0];
  int v9 = 0;
  if (!a1) {
    __break(1u);
  }
  Symbols = udat_getSymbols();
  if (Symbols <= 0)
  {
    uint64_t result = swift_release();
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  else
  {
    uint64_t v5 = specialized String.init(_utf16:)(a1, Symbols);
    uint64_t v7 = v6;
    uint64_t result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }

  return result;
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(a1, a2, a3, a4, a5, MEMORY[0x189615C50], a6);
}

{
  return specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(a1, a2, a3, a4, a5, MEMORY[0x189615C48], a6);
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t, int *, double)@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  int v29 = 0;
  if (!a1) {
LABEL_24:
  }
    __break(1u);
  double v12 = (double)a4;
  uint64_t isStackAllocationSafe = a6(*(void *)(a3 + 16), a5, a1, a2, &v29, (double)a4);
  if (v29 != 15)
  {
    if (v29 > 0 || (int)isStackAllocationSafe <= 0)
    {
      uint64_t result = swift_release();
      *a7 = 0LL;
      a7[1] = 0LL;
      return result;
    }

    uint64_t v18 = specialized String.init(_utf16:)(a1, isStackAllocationSafe);
    uint64_t v19 = v23;
    goto LABEL_17;
  }

  uint64_t v14 = (isStackAllocationSafe + 1);
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
    goto LABEL_23;
  }

  if ((v14 & 0x80000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if ((int)v14 < 513
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v16 = (char *)&v28 - v15;
    int v28 = 0;
    int v17 = a6(*(void *)(a3 + 16), a5, (uint64_t)&v28 - v15, v14, &v28, v12);
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    if (v28 <= 0 && v17 > 0)
    {
      uint64_t v18 = specialized String.init(_utf16:)((uint64_t)v16, v17);
      uint64_t v19 = v20;
    }

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  int v27 = 0;
  if (!a1) {
LABEL_27:
  }
    __break(1u);
  closure #1 in ICUListFormatter.format(strings:)(a1, a2, (uint64_t)&v27, a3, a4, a5, a6);
  if ((isStackAllocationSafe & 0x100000000LL) != 0)
  {
LABEL_15:
    swift_release();
    *a7 = 0LL;
    a7[1] = 0LL;
    return swift_bridgeObjectRelease();
  }

  if (v27 != 15)
  {
    if (v27 <= 0 && (int)isStackAllocationSafe > 0)
    {
      uint64_t v18 = specialized String.init(_utf16:)(a1, isStackAllocationSafe);
      uint64_t v19 = v21;
LABEL_17:
      swift_release();
      *a7 = v18;
      a7[1] = v19;
      return swift_bridgeObjectRelease();
    }

    goto LABEL_15;
  }

  uint64_t v14 = (isStackAllocationSafe + 1);
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
    goto LABEL_26;
  }

  if ((v14 & 0x80000000) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  if ((int)v14 < 513
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v16 = (char *)&v26 - v15;
    int v26 = 0;
    closure #1 in ICUListFormatter.format(strings:)((uint64_t)&v26 - v15, v14, (uint64_t)&v26, a3, a4, a5, a6);
    uint64_t v18 = 0LL;
    if ((v17 & 0x100000000LL) != 0)
    {
      uint64_t v19 = 0LL;
    }

    else
    {
      uint64_t v19 = 0LL;
      if (v26 <= 0 && (int)v17 > 0)
      {
        uint64_t v18 = specialized String.init(_utf16:)((uint64_t)v16, v17);
        uint64_t v19 = v20;
      }
    }

    goto LABEL_17;
  }

  uint64_t v23 = swift_slowAlloc();
  int v26 = 0;
  closure #1 in ICUListFormatter.format(strings:)(v23, v14, (uint64_t)&v26, a3, a4, a5, a6);
  if ((v24 & 0x100000000LL) != 0 || v26 > 0 || (int)v24 <= 0)
  {
    *a7 = 0LL;
    a7[1] = 0LL;
  }

  else
  {
    *a7 = specialized String.init(_utf16:)(v23, v24);
    a7[1] = v25;
  }

  MEMORY[0x186E20E60](v23, -1LL, -1LL);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t *a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  int v10 = 0;
  if (!a1) {
LABEL_7:
  }
    __break(1u);
  if (*(void *)(a2 + 16) >> 31)
  {
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    goto LABEL_7;
  }

  int BestPatternWithOptions = udatpg_getBestPatternWithOptions();
  if (BestPatternWithOptions <= 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = 0LL;
    a3[1] = 0LL;
  }

  else
  {
    uint64_t v6 = specialized String.init(_utf16:)(a1, BestPatternWithOptions);
    uint64_t v8 = v7;
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v6;
    a3[1] = v8;
  }

  return result;
}

uint64_t specialized closure #1 in _withResizingCharBuffer(initialSize:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  int v11 = 0;
  if (!a1) {
    goto LABEL_10;
  }
  if (!a2) {
    goto LABEL_11;
  }
  if (a3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    __break(1u);
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }

  int v6 = ucasemap_utf8ToTitle();
  if (v6 <= 0)
  {
    uint64_t result = swift_release();
    *a4 = 0LL;
    a4[1] = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + v6) = 0;
    uint64_t v7 = MEMORY[0x186E1B634](a1);
    uint64_t v9 = v8;
    uint64_t result = swift_release();
    *a4 = v7;
    a4[1] = v9;
  }

  return result;
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized _withFixedCharBuffer(size:_:)( a1,  a2,  a3,  (uint64_t (*)(uint64_t, char *, uint64_t, char *))MEMORY[0x189615938]);
}

{
  return specialized _withFixedCharBuffer(size:_:)(a1, a2, a3, MEMORY[0x189615470]);
}

{
  return specialized _withFixedCharBuffer(size:_:)(a1, a2, a3, MEMORY[0x1896159E8]);
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t isStackAllocationSafe)
{
  return specialized _withFixedCharBuffer(size:_:)(isStackAllocationSafe);
}

{
  int v1;
  uint64_t v2;
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  int v10 = *MEMORY[0x1895F89C0];
  char v1 = isStackAllocationSafe + 1;
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }

  if (v1 < 0) {
    goto LABEL_15;
  }
  if (v1 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    Swift::String v3 = (char *)&v9 - v2;
    HIDWORD(v9) = 0;
    String.utf8CString.getter();
    int v4 = uloc_toLanguageTag();
    swift_release();
    uint64_t v5 = 0LL;
    if (SHIDWORD(v9) <= 0 && v4 > 0)
    {
      v3[v4] = 0;
      return MEMORY[0x186E1B634](v3);
    }
  }

  else
  {
    int v6 = swift_slowAlloc();
    String.utf8CString.getter();
    uint64_t v7 = uloc_toLanguageTag();
    swift_release();
    uint64_t v5 = 0LL;
    if (v7 > 0)
    {
      *(_BYTE *)(v6 + v7) = 0;
      uint64_t v5 = MEMORY[0x186E1B634](v6);
    }

    MEMORY[0x186E20E60](v6, -1LL, -1LL);
  }

  return v5;
}

{
  int v1;
  uint64_t v2;
  char *v3;
  int Language;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  int v10 = *MEMORY[0x1895F89C0];
  char v1 = isStackAllocationSafe + 1;
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }

  if (v1 < 0) {
    goto LABEL_15;
  }
  if (v1 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    Swift::String v3 = (char *)&v9 - v2;
    HIDWORD(v9) = 0;
    String.utf8CString.getter();
    Language = uloc_getLanguage();
    swift_release();
    uint64_t v5 = 0LL;
    if (SHIDWORD(v9) <= 0 && Language > 0)
    {
      v3[Language] = 0;
      return MEMORY[0x186E1B634](v3);
    }
  }

  else
  {
    int v6 = swift_slowAlloc();
    String.utf8CString.getter();
    uint64_t v7 = uloc_getLanguage();
    swift_release();
    uint64_t v5 = 0LL;
    if (v7 > 0)
    {
      *(_BYTE *)(v6 + v7) = 0;
      uint64_t v5 = MEMORY[0x186E1B634](v6);
    }

    MEMORY[0x186E20E60](v6, -1LL, -1LL);
  }

  return v5;
}

{
  int v1;
  uint64_t v2;
  char *v3;
  int Variant;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  int v10 = *MEMORY[0x1895F89C0];
  char v1 = isStackAllocationSafe + 1;
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }

  if (v1 < 0) {
    goto LABEL_15;
  }
  if (v1 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    Swift::String v3 = (char *)&v9 - v2;
    HIDWORD(v9) = 0;
    String.utf8CString.getter();
    Variant = uloc_getVariant();
    swift_release();
    uint64_t v5 = 0LL;
    if (SHIDWORD(v9) <= 0 && Variant > 0)
    {
      v3[Variant] = 0;
      return MEMORY[0x186E1B634](v3);
    }
  }

  else
  {
    int v6 = swift_slowAlloc();
    String.utf8CString.getter();
    uint64_t v7 = uloc_getVariant();
    swift_release();
    uint64_t v5 = 0LL;
    if (v7 > 0)
    {
      *(_BYTE *)(v6 + v7) = 0;
      uint64_t v5 = MEMORY[0x186E1B634](v6);
    }

    MEMORY[0x186E20E60](v6, -1LL, -1LL);
  }

  return v5;
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t a1, uint64_t *a2)
{
  return specialized _withFixedCharBuffer(size:_:)( a1,  a2,  (uint64_t (*)(uint64_t, char *, uint64_t, int *))MEMORY[0x1896159C0]);
}

{
  return specialized _withFixedCharBuffer(size:_:)(a1, a2, MEMORY[0x189615478]);
}

{
  return specialized _withFixedCharBuffer(size:_:)( a1,  a2,  (uint64_t (*)(uint64_t, char *, uint64_t, int *))MEMORY[0x189615960]);
}

uint64_t specialized _withResizingUCharBuffer(initialSize:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v17[2] = *MEMORY[0x1895F89C0];
  if ((a1 & 0x80000000) != 0) {
    __break(1u);
  }
  swift_retain_n();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if ((int)a1 < 513 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v12 = (char *)&v17[-1] - v11;
    swift_retain();
    swift_bridgeObjectRetain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v12, a1, a2, a3, a4, a5, v17);
    uint64_t v13 = v17[0];
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }

  else
  {
    uint64_t v14 = swift_slowAlloc();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v14, a1, a2, a3, a4, a5, v17);
    MEMORY[0x186E20E60](v14, -1LL, -1LL);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v17[0];
  }

  return v13;
}

uint64_t specialized _withResizingUCharBuffer(initialSize:_:)(int a1)
{
  v9[2] = *MEMORY[0x1895F89C0];
  if (a1 < 0) {
    __break(1u);
  }
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (a1 < 513 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    int v4 = (char *)&v9[-1] - v3;
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v4, v9);
    uint64_t v5 = v9[0];
    swift_release_n();
  }

  else
  {
    uint64_t v6 = swift_slowAlloc();
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v6, v9);
    MEMORY[0x186E20E60](v6, -1LL, -1LL);
    swift_release_n();
    return v9[0];
  }

  return v5;
}

{
  uint64_t isStackAllocationSafe;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9[3];
  v9[2] = *MEMORY[0x1895F89C0];
  if (a1 < 0) {
    __break(1u);
  }
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (a1 < 513 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    int v4 = (char *)&v9[-1] - v3;
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v4, v9);
    uint64_t v5 = v9[0];
    swift_release_n();
  }

  else
  {
    uint64_t v6 = swift_slowAlloc();
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v6, v9);
    MEMORY[0x186E20E60](v6, -1LL, -1LL);
    swift_release_n();
    return v9[0];
  }

  return v5;
}

{
  uint64_t isStackAllocationSafe;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9[3];
  v9[2] = *MEMORY[0x1895F89C0];
  if (a1 < 0) {
    __break(1u);
  }
  swift_retain_n();
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (a1 < 513 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    int v4 = (char *)&v9[-1] - v3;
    swift_retain();
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v4, v9);
    uint64_t v5 = v9[0];
    swift_release_n();
    swift_release_n();
  }

  else
  {
    uint64_t v6 = swift_slowAlloc();
    swift_retain();
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v6, v9);
    MEMORY[0x186E20E60](v6, -1LL, -1LL);
    swift_release_n();
    swift_release_n();
    return v9[0];
  }

  return v5;
}

uint64_t specialized _withFixedUCharBuffer(size:defaultIsError:_:)( uint64_t isStackAllocationSafe, unsigned __int8 a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if ((isStackAllocationSafe & 0x80000000) != 0) {
    __break(1u);
  }
  int v3 = isStackAllocationSafe;
  if ((int)isStackAllocationSafe < 513
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v5 = (char *)&v11 - v4;
    HIDWORD(v11) = 0;
    String.utf8CString.getter();
    String.utf8CString.getter();
    String.utf8CString.getter();
    int DisplayKeywordValue = uloc_getDisplayKeywordValue();
    swift_release();
    swift_release();
    swift_release();
    if (SHIDWORD(v11) <= 0)
    {
      uint64_t v7 = 0LL;
      if (((HIDWORD(v11) == -127) & a2) != 1 && DisplayKeywordValue <= v3 && DisplayKeywordValue > 0) {
        return specialized String.init(_utf16:)((uint64_t)v5, DisplayKeywordValue);
      }
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = swift_slowAlloc();
    String.utf8CString.getter();
    String.utf8CString.getter();
    String.utf8CString.getter();
    int v9 = uloc_getDisplayKeywordValue();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v7 = 0LL;
    if (v9 <= v3 && v9 > 0) {
      uint64_t v7 = specialized String.init(_utf16:)(v8, v9);
    }
    MEMORY[0x186E20E60](v8, -1LL, -1LL);
  }

  return v7;
}

{
  int v3;
  uint64_t v4;
  char *v5;
  int v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if ((isStackAllocationSafe & 0x80000000) != 0) {
    __break(1u);
  }
  int v3 = isStackAllocationSafe;
  if ((int)isStackAllocationSafe < 513
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v5 = (char *)&v13 - v4;
    HIDWORD(v13) = 0;
    String.utf8CString.getter();
    uint64_t v6 = ucurr_forLocale();
    swift_release();
    if (SHIDWORD(v13) > 0) {
      return 0LL;
    }
    uint64_t v7 = ((HIDWORD(v13) == -127) & a2) != 1 && v6 <= v3;
    if (!v7 || v6 <= 0) {
      return 0LL;
    }
    else {
      return specialized String.init(_utf16:)((uint64_t)v5, v6);
    }
  }

  else
  {
    int v9 = swift_slowAlloc();
    String.utf8CString.getter();
    int v10 = ucurr_forLocale();
    swift_release();
    uint64_t v11 = 0LL;
    if (v10 <= v3 && v10 > 0) {
      uint64_t v11 = specialized String.init(_utf16:)(v9, v10);
    }
    MEMORY[0x186E20E60](v9, -1LL, -1LL);
  }

  return v11;
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t isStackAllocationSafe, __int128 *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  int v2 = isStackAllocationSafe + 1;
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }

  if (v2 < 0) {
    goto LABEL_15;
  }
  if (v2 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v5 = (char *)&v17 - v4;
    int v18 = 0;
    __int128 v6 = a2[3];
    __int128 v21 = a2[2];
    __int128 v22 = v6;
    __int128 v7 = a2[5];
    __int128 v23 = a2[4];
    __int128 v24 = v7;
    __int128 v8 = a2[1];
    __int128 v19 = *a2;
    __int128 v20 = v8;
    Locale.Language.maximalIdentifier.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    int Script = uloc_getScript();
    swift_release();
    uint64_t v10 = 0LL;
    if (v18 <= 0 && Script > 0)
    {
      v5[Script] = 0;
      return MEMORY[0x186E1B634](v5);
    }
  }

  else
  {
    uint64_t v11 = swift_slowAlloc();
    int v18 = 0;
    __int128 v12 = a2[3];
    __int128 v21 = a2[2];
    __int128 v22 = v12;
    __int128 v13 = a2[5];
    __int128 v23 = a2[4];
    __int128 v24 = v13;
    __int128 v14 = a2[1];
    __int128 v19 = *a2;
    __int128 v20 = v14;
    Locale.Language.maximalIdentifier.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    int v15 = uloc_getScript();
    swift_release();
    uint64_t v10 = 0LL;
    if (v15 > 0)
    {
      *(_BYTE *)(v11 + v15) = 0;
      uint64_t v10 = MEMORY[0x186E1B634](v11);
    }

    MEMORY[0x186E20E60](v11, -1LL, -1LL);
  }

  return v10;
}

uint64_t specialized _withFixedCharBuffer(size:_:)( uint64_t isStackAllocationSafe, uint64_t *a2, uint64_t (*a3)(uint64_t, char *, uint64_t, int *))
{
  uint64_t v69 = *MEMORY[0x1895F89C0];
  int v3 = isStackAllocationSafe + 1;
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_29:
    __break(1u);
  }

  if (v3 < 0) {
    goto LABEL_29;
  }
  uint64_t v6 = isStackAllocationSafe;
  if (v3 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    __int128 v8 = (char *)&v44 - v7;
    int v47 = 0;
    __int128 v9 = *((_OWORD *)a2 + 3);
    __int128 v50 = *((_OWORD *)a2 + 2);
    __int128 v51 = v9;
    __int128 v10 = *((_OWORD *)a2 + 5);
    __int128 v52 = *((_OWORD *)a2 + 4);
    __int128 v53 = v10;
    __int128 v11 = *((_OWORD *)a2 + 1);
    __int128 v48 = *(_OWORD *)a2;
    __int128 v49 = v11;
    outlined init with take of LocalePreferences?( (uint64_t)&v48,  (uint64_t)v56,  &demangling cache variable for type metadata for Locale.LanguageCode?);
    uint64_t v45 = 0LL;
    unint64_t v46 = 0xE000000000000000LL;
    outlined init with take of LocalePreferences?( (uint64_t)v56,  (uint64_t)v57,  &demangling cache variable for type metadata for Locale.LanguageCode?);
    if (v58)
    {
      uint64_t v12 = v59;
      __int128 v13 = v60;
      outlined retain of Locale.Language( a2,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
      v14._unint64_t countAndFlagsBits = v12;
      v14._object = v13;
      String.append(_:)(v14);
    }

    else
    {
      outlined retain of Locale.Language( a2,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    }

    outlined init with take of LocalePreferences?( (uint64_t)&v50,  (uint64_t)v55,  &demangling cache variable for type metadata for Locale.Script?);
    outlined init with take of LocalePreferences?( (uint64_t)v55,  (uint64_t)v61,  &demangling cache variable for type metadata for Locale.Script?);
    if (v62)
    {
      uint64_t v15 = v63;
      uint64_t v16 = v64;
      v17._unint64_t countAndFlagsBits = 45LL;
      v17._object = (void *)0xE100000000000000LL;
      String.append(_:)(v17);
      v18._unint64_t countAndFlagsBits = v15;
      v18._object = v16;
      String.append(_:)(v18);
    }

    outlined init with take of LocalePreferences?( (uint64_t)&v52,  (uint64_t)v54,  (uint64_t *)&demangling cache variable for type metadata for Locale.Region?);
    outlined init with take of LocalePreferences?( (uint64_t)v54,  (uint64_t)v65,  (uint64_t *)&demangling cache variable for type metadata for Locale.Region?);
    if (v66)
    {
      uint64_t v19 = v67;
      __int128 v20 = v68;
      v21._unint64_t countAndFlagsBits = 95LL;
      v21._object = (void *)0xE100000000000000LL;
      String.append(_:)(v21);
      v22._unint64_t countAndFlagsBits = v19;
      v22._object = v20;
      String.append(_:)(v22);
    }

    outlined retain of Locale.Language( a2,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    uint64_t v23 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    int v24 = a3(v23 + 32, v8, v6, &v47);
    swift_release();
    uint64_t v25 = 0LL;
    if (v47 <= 0 && v24 > 0)
    {
      v8[v24] = 0;
      return MEMORY[0x186E1B634](v8);
    }
  }

  else
  {
    uint64_t v26 = swift_slowAlloc();
    int v47 = 0;
    __int128 v27 = *((_OWORD *)a2 + 3);
    __int128 v50 = *((_OWORD *)a2 + 2);
    __int128 v51 = v27;
    __int128 v28 = *((_OWORD *)a2 + 5);
    __int128 v52 = *((_OWORD *)a2 + 4);
    __int128 v53 = v28;
    __int128 v29 = *((_OWORD *)a2 + 1);
    __int128 v48 = *(_OWORD *)a2;
    __int128 v49 = v29;
    outlined init with take of LocalePreferences?( (uint64_t)&v48,  (uint64_t)v56,  &demangling cache variable for type metadata for Locale.LanguageCode?);
    uint64_t v45 = 0LL;
    unint64_t v46 = 0xE000000000000000LL;
    outlined init with take of LocalePreferences?( (uint64_t)v56,  (uint64_t)v57,  &demangling cache variable for type metadata for Locale.LanguageCode?);
    if (v58)
    {
      uint64_t v30 = v59;
      id v31 = v60;
      outlined retain of Locale.Language( a2,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
      v32._unint64_t countAndFlagsBits = v30;
      v32._object = v31;
      String.append(_:)(v32);
    }

    else
    {
      outlined retain of Locale.Language( a2,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    }

    outlined init with take of LocalePreferences?( (uint64_t)&v50,  (uint64_t)v55,  &demangling cache variable for type metadata for Locale.Script?);
    outlined init with take of LocalePreferences?( (uint64_t)v55,  (uint64_t)v61,  &demangling cache variable for type metadata for Locale.Script?);
    if (v62)
    {
      uint64_t v33 = v63;
      unint64_t v34 = v64;
      v35._unint64_t countAndFlagsBits = 45LL;
      v35._object = (void *)0xE100000000000000LL;
      String.append(_:)(v35);
      v36._unint64_t countAndFlagsBits = v33;
      v36._object = v34;
      String.append(_:)(v36);
    }

    outlined init with take of LocalePreferences?( (uint64_t)&v52,  (uint64_t)v54,  (uint64_t *)&demangling cache variable for type metadata for Locale.Region?);
    outlined init with take of LocalePreferences?( (uint64_t)v54,  (uint64_t)v65,  (uint64_t *)&demangling cache variable for type metadata for Locale.Region?);
    if (v66)
    {
      uint64_t v37 = v67;
      unint64_t v38 = v68;
      v39._unint64_t countAndFlagsBits = 95LL;
      v39._object = (void *)0xE100000000000000LL;
      String.append(_:)(v39);
      v40._unint64_t countAndFlagsBits = v37;
      v40._object = v38;
      String.append(_:)(v40);
    }

    outlined retain of Locale.Language( a2,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    uint64_t v41 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    int v42 = a3(v41 + 32, (char *)v26, v6, &v47);
    swift_release();
    uint64_t v25 = 0LL;
    if (v47 <= 0 && v42 > 0)
    {
      *(_BYTE *)(v26 + v42) = 0;
      uint64_t v25 = MEMORY[0x186E1B634](v26);
    }

    MEMORY[0x186E20E60](v26, -1LL, -1LL);
  }

  return v25;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80LL) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }

  return a2;
}

uint64_t specialized _withFixedCharBuffer(size:_:)( uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, char *, uint64_t, char *))
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  int v4 = isStackAllocationSafe + 1;
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }

  if (v4 < 0) {
    goto LABEL_15;
  }
  uint64_t v6 = isStackAllocationSafe;
  if (v4 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    __int128 v8 = (char *)&v16 - v7;
    HIDWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    uint64_t v9 = String.utf8CString.getter();
    int v10 = a4(v9 + 32, v8, v6, (char *)&v16 + 4);
    swift_release();
    uint64_t v11 = 0LL;
    if (SHIDWORD(v16) <= 0 && v10 > 0)
    {
      v8[v10] = 0;
      return MEMORY[0x186E1B634](v8);
    }
  }

  else
  {
    uint64_t v12 = swift_slowAlloc();
    HIDWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    uint64_t v13 = String.utf8CString.getter();
    int v14 = a4(v13 + 32, (char *)v12, v6, (char *)&v16 + 4);
    swift_release();
    uint64_t v11 = 0LL;
    if (SHIDWORD(v16) <= 0 && v14 > 0)
    {
      *(_BYTE *)(v12 + v14) = 0;
      uint64_t v11 = MEMORY[0x186E1B634](v12);
    }

    MEMORY[0x186E20E60](v12, -1LL, -1LL);
  }

  return v11;
}

uint64_t specialized _withFixedUCharBuffer(size:defaultIsError:_:)( uint64_t isStackAllocationSafe, unsigned __int8 a2, uint64_t a3)
{
  v15[19] = *MEMORY[0x1895F89C0];
  if ((isStackAllocationSafe & 0x80000000) != 0) {
    __break(1u);
  }
  int v5 = isStackAllocationSafe;
  if ((int)isStackAllocationSafe < 513
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v7 = (char *)v15 - v6;
    v15[0] = 0LL;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    uint64_t v9 = MEMORY[0x1896185C0];
    *(void *)(inited + 56) = MEMORY[0x189618560];
    *(void *)(inited + 64) = v9;
    *(void *)(inited + 32) = 0x4024000000000000LL;
    swift_bridgeObjectRetain();
    specialized withVaList<A>(_:_:)(inited, v15, a3);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
    swift_arrayDestroy();
    if (SHIDWORD(v15[0]) <= 0)
    {
      uint64_t v10 = 0LL;
      if (((HIDWORD(v15[0]) == -127) & a2) != 1 && SLODWORD(v15[0]) <= v5 && SLODWORD(v15[0]) > 0) {
        return specialized String.init(_utf16:)((uint64_t)v7, LODWORD(v15[0]));
      }
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    uint64_t v11 = swift_slowAlloc();
    v15[0] = 0LL;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v12 = swift_initStackObject();
    *(_OWORD *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    uint64_t v13 = MEMORY[0x1896185C0];
    *(void *)(v12 + 56) = MEMORY[0x189618560];
    *(void *)(v12 + 64) = v13;
    *(void *)(v12 + 32) = 0x4024000000000000LL;
    swift_bridgeObjectRetain();
    specialized withVaList<A>(_:_:)(v12, v15, a3);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
    swift_arrayDestroy();
    if (SHIDWORD(v15[0]) <= 0)
    {
      uint64_t v10 = 0LL;
      if (((HIDWORD(v15[0]) == -127) & a2) != 1 && SLODWORD(v15[0]) <= v5 && SLODWORD(v15[0]) > 0) {
        uint64_t v10 = specialized String.init(_utf16:)(v11, LODWORD(v15[0]));
      }
    }

    else
    {
      uint64_t v10 = 0LL;
    }

    MEMORY[0x186E20E60](v11, -1LL, -1LL);
  }

  return v10;
}

ValueMetadata *type metadata accessor for ICUError()
{
  return &type metadata for ICUError;
}

ValueMetadata *type metadata accessor for ICU()
{
  return &type metadata for ICU;
}

id @objc static NSTimeZone._timeZoneWith(name:data:)(uint64_t a1, uint64_t a2, void *a3, id a4)
{
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v7 = v6;
  if (a4)
  {
    id v8 = a4;
    a4 = specialized Data.init(referencing:)(v8);
    unint64_t v10 = v9;
  }

  else
  {
    unint64_t v10 = 0xF000000000000000LL;
  }

  id v11 = specialized static NSTimeZone._timeZoneWith(name:data:)((uint64_t)v5, v7, (uint64_t)a4, v10);
  outlined consume of Data?((uint64_t)a4, v10);
  swift_bridgeObjectRelease();
  return v11;
}

char *@objc static NSTimeZone._timeZoneWith(name:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  if (one-time initialization token for cache != -1) {
    uint64_t v3 = swift_once();
  }
  int v4 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1895F8858](v3);
  swift_retain_n();
  os_unfair_lock_lock(v4 + 36);
  closure #1 in TimeZoneCache.bridgedFixed(_:)partial apply(&v6);
  os_unfair_lock_unlock(v4 + 36);
  swift_bridgeObjectRelease();
  swift_release_n();
  return v6;
}

char *@objc static NSTimeZone._timeZoneWith(secondsFromGMT:)(uint64_t a1)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  char v1 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1895F8858](a1);
  swift_retain_n();
  os_unfair_lock_lock(v1 + 36);
  partial apply for closure #1 in TimeZoneCache.bridgedOffsetFixed(_:)(&v3);
  os_unfair_lock_unlock(v1 + 36);
  swift_release_n();
  return v3;
}

char *@objc static NSTimeZone._timeZoneWith(name:tryAbbrev:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v7 = specialized static NSTimeZone._timeZoneWith(name:tryAbbrev:)((uint64_t)v5, v6, a4);
  swift_bridgeObjectRelease();
  return v7;
}

char *@objc static NSTimeZone._timeZoneWith(abbreviation:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  id v5 = specialized static NSTimeZone._timeZoneWith(abbreviation:)((uint64_t)v3, v4);
  swift_bridgeObjectRelease();
  return v5;
}

id @objc static NSTimeZone._autoupdating()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static TimeZoneCache.cache + 16;
  char v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.bridgedAutoupdatingCurrent.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

id @objc static NSTimeZone._current()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static TimeZoneCache.cache + 16;
  char v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.bridgedCurrent.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

id @objc static NSTimeZone._default()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static TimeZoneCache.cache + 16;
  char v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.bridgedDefault.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

uint64_t @objc static NSTimeZone._setDefaultTimeZone(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    type metadata accessor for _NSSwiftTimeZone();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
      uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      swift_unknownObjectRetain();
    }

    else
    {
      type metadata accessor for _TimeZoneBridged();
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a3;
      uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged,  (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
      id v7 = a3;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t v8 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  v10[1] = v6;
  v10[2] = static TimeZoneCache.cache;
  v10[0] = v5;
  TimeZoneCache.setDefault(_:)(v10);
  return swift_unknownObjectRelease_n();
}

id @objc static NSTimeZone._resetSystemTimeZone()()
{
  return specialized static NSTimeZone._resetSystemTimeZone()();
}

id @objc static NSTimeZone._abbreviationDictionary()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static TimeZoneCache.cache + 16;
  char v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.timeZoneAbbreviations()(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return (id)_NativeDictionary.bridged()();
}

uint64_t @objc static NSTimeZone._setAbbreviationDictionary(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3);
  if (one-time initialization token for cache != -1) {
    uint64_t v3 = swift_once();
  }
  uint64_t v4 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1895F8858](v3);
  swift_retain_n();
  os_unfair_lock_lock(v4 + 36);
  partial apply for closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)((uint64_t)&v4[4]);
  os_unfair_lock_unlock(v4 + 36);
  swift_bridgeObjectRelease();
  return swift_release_n();
}

id @objc static NSTimeZone._knownTimeZoneIdentifiers()()
{
  if (one-time initialization token for icuTZIdentifiers != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

id @objc static NSTimeZone._timeZoneDataVersion()()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v3 = 0;
  uint64_t v0 = MEMORY[0x186E211E4](&v3);
  if (v0 && v3 <= 0) {
    MEMORY[0x186E1B634](v0);
  }
  char v1 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v1;
}

id _NSSwiftTimeZone.replacementObject(for:)@<X0>(void *a1@<X8>)
{
  int v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  __int128 v14 = *(_OWORD *)&v1[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  uint64_t v5 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = static TimeZoneCache.cache + 16;
  id v7 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v6, v13);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  uint64_t v8 = v13[0];
  uint64_t v9 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating,  (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  v13[0] = v8;
  v13[1] = v9;
  char v10 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v14, (uint64_t)v13);
  swift_unknownObjectRelease();
  swift_release();
  if ((v10 & 1) != 0)
  {
    id v11 = objc_msgSend(objc_allocWithZone((Class)__NSLocalTimeZone), sel_init);
    id result = (id)type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for __NSLocalTimeZone);
    uint64_t ObjectType = (uint64_t)result;
  }

  else
  {
    id result = v2;
    id v11 = result;
  }

  a1[3] = ObjectType;
  *a1 = v11;
  return result;
}

uint64_t _NSSwiftTimeZone.data.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  uint64_t ObjectType = swift_getObjectType();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32);
  swift_unknownObjectRetain();
  uint64_t v4 = v3(ObjectType, v1);
  uint64_t v6 = v5;
  swift_unknownObjectRelease();
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____NSSwiftTimeZone_lock);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  v10._unint64_t countAndFlagsBits = v4;
  v10._object = v6;
  closure #1 in _NSSwiftTimeZone.data.getter(v10, (uint64_t *)(v7 + 16), &v9);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  swift_bridgeObjectRelease();
  swift_release();
  return v9;
}

uint64_t closure #1 in _NSSwiftTimeZone.data.getter@<X0>( Swift::String a1@<0:X1, 8:X2>, uint64_t *a2@<X0>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a2;
  unint64_t v4 = a2[1];
  if (v4 >> 60 != 15)
  {
    *a3 = v5;
    a3[1] = v4;
    return outlined copy of Data?(v5, v4);
  }

  uint64_t v37 = a3;
  uint64_t v32 = v5;
  String.append(_:)(a1);
  *(void *)&__int128 v33 = 11822LL;
  *((void *)&v33 + 1) = 0xE200000000000000LL;
  v36[0] = 0xD00000000000001ALL;
  v36[1] = 0x80000001839CEC80LL;
  if ((0x80000001839CEC80LL & 0x1000000000000000LL) == 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = String.subscript.getter();
    unint64_t v9 = v8;
    uint64_t v30 = v10;
    uint64_t v31 = v11;
    swift_bridgeObjectRelease();
    unint64_t v12 = Substring.init<A>(_:)();
    if ((v7 ^ v9) < 0x4000 || (v12 ^ v13) >> 14 == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v12,  v13,  v14,  v15,  0,  0,  0,  0,  0,  v7,  v9,  v30,  v31);
      char v24 = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0) {
        goto LABEL_14;
      }
    }

uint64_t _NSSwiftTimeZone.secondsFromGMT.getter()
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__darwin_time_t v2 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = v2;
  uint64_t v4 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v1 + 40))(&__tp, ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t _NSSwiftTimeZone.abbreviation.getter()
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__darwin_time_t v2 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = v2;
  uint64_t v4 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v1 + 56))(&__tp, ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t _NSSwiftTimeZone.isDaylightSavingTime.getter()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__darwin_time_t v2 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = v2;
  LOBYTE(v1) = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v1 + 64))(&__tp, ObjectType, v1);
  swift_unknownObjectRelease();
  return v1 & 1;
}

double _NSSwiftTimeZone.daylightSavingTimeOffset.getter()
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__darwin_time_t v2 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = v2;
  double v4 = (*(double (**)(timespec *, uint64_t, uint64_t))(v1 + 72))(&__tp, ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t _NSSwiftTimeZone.nextDaylightSavingTimeTransition.getter()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  (*(void (**)(timespec *, uint64_t, uint64_t))(v1 + 80))(&__tp, ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for _NSSwiftTimeZone()
{
  return objc_opt_self();
}

uint64_t *destroy for _NSSwiftTimeZone.State(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 >> 60 != 15) {
    return (uint64_t *)outlined consume of Data._Representation(*result, v1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _NSSwiftTimeZone.State(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v4 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }

  return a1;
}

uint64_t *assignWithCopy for _NSSwiftTimeZone.State(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *(void *)a2;
      outlined copy of Data._Representation(*(void *)a2, *(void *)(a2 + 8));
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      outlined consume of Data._Representation(v7, v8);
      return a1;
    }

    outlined destroy of Data((uint64_t)a1);
    goto LABEL_6;
  }

  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  uint64_t v5 = *(void *)a2;
  outlined copy of Data._Representation(*(void *)a2, *(void *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

uint64_t *assignWithTake for _NSSwiftTimeZone.State(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      outlined consume of Data._Representation(v6, v4);
      return a1;
    }

    outlined destroy of Data((uint64_t)a1);
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for _NSSwiftTimeZone.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 12);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0) {
    int v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _NSSwiftTimeZone.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)uint64_t result = a2 - 12;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xC) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xC) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _NSSwiftTimeZone.State()
{
  return &type metadata for _NSSwiftTimeZone.State;
}

uint64_t partial apply for closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(uint64_t a1)
{
  return closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(a1, *(void *)(v1 + 16));
}

id specialized static NSTimeZone._timeZoneWith(name:data:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >> 60 == 15)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
    swift_retain_n();
    os_unfair_lock_lock(v6);
    closure #1 in TimeZoneCache.bridgedFixed(_:)(a1, a2, (char **)v17);
    os_unfair_lock_unlock(v6);
    swift_release_n();
    return *(id *)&v17[0];
  }

  else
  {
    outlined copy of Data?(a3, a4);
    uint64_t v10 = one-time initialization token for cache;
    swift_bridgeObjectRetain();
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v11 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
    swift_retain_n();
    os_unfair_lock_lock(v11);
    closure #1 in TimeZoneCache.fixed(_:)(a1, a2, (uint64_t *)v17);
    os_unfair_lock_unlock(v11);
    swift_bridgeObjectRelease();
    swift_release_n();
    if (*(void *)&v17[0])
    {
      __int128 v15 = v17[0];
      unint64_t v12 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
      unint64_t v13 = (char *)objc_allocWithZone(v12);
      *(_OWORD *)&v13[OBJC_IVAR____NSSwiftTimeZone_timeZone] = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
      uint64_t v14 = swift_allocObject();
      *(_DWORD *)(v14 + 32) = 0;
      *(void *)(v14 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a3;
      *(void *)(v14 + 24) = a4;
      *(void *)&v13[OBJC_IVAR____NSSwiftTimeZone_lock] = v14;
      v16.receiver = v13;
      v16.super_class = v12;
      return objc_msgSendSuper2(&v16, sel_init);
    }

    else
    {
      outlined consume of Data?(a3, a4);
      return 0LL;
    }
  }

char *specialized static NSTimeZone._timeZoneWith(name:tryAbbrev:)(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    uint64_t v5 = one-time initialization token for cache;
    swift_bridgeObjectRetain();
    if (v5 != -1) {
      swift_once();
    }
    uint64_t v6 = (os_unfair_lock_s *)static TimeZoneCache.cache;
    swift_retain_n();
    os_unfair_lock_lock(v6 + 36);
    closure #1 in TimeZoneCache.timeZoneAbbreviations()((uint64_t)&v6[4], (uint64_t *)&v16);
    os_unfair_lock_unlock(v6 + 36);
    swift_release_n();
    uint64_t v7 = v16;
    if (*((void *)v16 + 2))
    {
      unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if ((v9 & 1) != 0)
      {
        uint64_t v10 = (uint64_t *)(*((void *)v7 + 7) + 16 * v8);
        uint64_t v11 = *v10;
        unint64_t v12 = v10[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v13 = (os_unfair_lock_s *)static TimeZoneCache.cache;
        swift_retain_n();
        os_unfair_lock_lock(v13 + 36);
        closure #1 in TimeZoneCache.bridgedFixed(_:)(v11, v12, &v16);
        os_unfair_lock_unlock(v13 + 36);
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v14 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  swift_retain_n();
  os_unfair_lock_lock(v14 + 36);
  closure #1 in TimeZoneCache.bridgedFixed(_:)(a1, a2, &v16);
  os_unfair_lock_unlock(v14 + 36);
LABEL_11:
  swift_release_n();
  return v16;
}

char *specialized static NSTimeZone._timeZoneWith(abbreviation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = specialized static TimeZone.identifierForAbbreviation(_:)(a1, a2);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = v2;
  unint64_t v5 = v3;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.bridgedFixed(_:)(v4, v5, &v8);
  os_unfair_lock_unlock(v6);
  swift_bridgeObjectRelease();
  swift_release_n();
  return v8;
}

id specialized static NSTimeZone._resetSystemTimeZone()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.reset()(v0, &v10);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  __int128 v8 = v10;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static CalendarCache.cache + 16;
  unint64_t v3 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in CalendarCache.reset()(v2);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  if (!(void)v8) {
    return 0LL;
  }
  uint64_t v4 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  unint64_t v5 = (char *)objc_allocWithZone(v4);
  *(_OWORD *)&v5[OBJC_IVAR____NSSwiftTimeZone_timeZone] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 32) = 0;
  *(_OWORD *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_1837ADD10;
  *(void *)&v5[OBJC_IVAR____NSSwiftTimeZone_lock] = v6;
  v9.receiver = v5;
  v9.super_class = v4;
  return objc_msgSendSuper2(&v9, sel_init);
}

char *partial apply for closure #1 in TimeZoneCache.bridgedOffsetFixed(_:)@<X0>(char **a1@<X8>)
{
  return closure #1 in TimeZoneCache.bridgedOffsetFixed(_:)(*(void *)(v1 + 16), a1);
}

char *closure #1 in TimeZoneCache.bridgedFixed(_:)partial apply@<X0>(char **a1@<X8>)
{
  return closure #1 in TimeZoneCache.bridgedFixed(_:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t _AsyncBytesBuffer.init(capacity:)()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

uint64_t type metadata accessor for _AsyncBytesBuffer.Storage()
{
  uint64_t result = type metadata singleton initialization cache for _AsyncBytesBuffer.Storage;
  if (!type metadata singleton initialization cache for _AsyncBytesBuffer.Storage) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t _AsyncBytesBuffer.next()()
{
  *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  void *v5;
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 **)(v1 + 8);
  if (v2 == *(unsigned __int8 **)(v1 + 16))
  {
    unint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 24) = v5;
    *unint64_t v5 = v0;
    v5[1] = NSURLSession.AsyncBytes.Iterator.next();
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }

  else
  {
    unint64_t v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }

uint64_t IOActor.read(from:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  void v3[2] = a1;
  return swift_task_switch();
}

uint64_t IOActor.read(from:into:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1) {
    uint64_t v2 = *(void *)(v0 + 32) - v1;
  }
  else {
    uint64_t v2 = 0LL;
  }
  NSFileHandle.read(upToCount:)(v2);
  if (v3 >> 60 != 15) {
    __asm { BR              X10 }
  }

  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t one-time initialization function for default()
{
  uint64_t v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  static IOActor.default = v0;
  return result;
}

{
  uint64_t result;
  type metadata accessor for URL.UnicodeLookalikeTable();
  uint64_t result = swift_initStaticObject();
  static URL.UnicodeLookalikeTable.default = result;
  return result;
}

uint64_t IOActor.__deallocating_deinit()
{
  return swift_defaultActor_deallocate();
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance IOActor()
{
  return v0;
}

uint64_t _AsyncBytesBuffer.Storage.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t _AsyncBytesBuffer.nextPointer.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _AsyncBytesBuffer.nextPointer.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_AsyncBytesBuffer.nextPointer.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t _AsyncBytesBuffer.endPointer.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _AsyncBytesBuffer.endPointer.setter(uint64_t result)
{
  *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
  return result;
}

uint64_t (*_AsyncBytesBuffer.endPointer.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t _AsyncBytesBuffer.reloadBufferAndNext()()
{
  *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  void *v6;
  uint64_t v1 = *(void *)(v0 + 64);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(*(void *)(v0 + 32));
  if (!v1) {
    *(_BYTE *)(*(void *)(v0 + 24) + 32LL) = 1;
  }
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = *(unsigned __int8 **)(v2 + 8);
  if (v3 == *(unsigned __int8 **)(v2 + 16))
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v6;
    *uint64_t v6 = v0;
    v6[1] = _AsyncBytesBuffer.reloadBufferAndNext();
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }

  else
  {
    uint64_t v4 = *v3;
    *(void *)(v2 + 8) = v3 + 1;
    *(_WORD *)(v0 + 88) = v4;
    return swift_task_switch();
  }

{
  uint64_t v0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 88) | (*(unsigned __int8 *)(v0 + 89) << 8));
}

{
  uint64_t v0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 24);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(*(void *)(v0 + 32));
  *(_BYTE *)(v1 + 32) = 1;
  swift_willThrow();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void _AsyncBytesBuffer.reloadBufferAndNext()()
{
  if (**(void **)(v0 + 16))
  {
    type metadata accessor for _AsyncBytesBuffer.Storage();
    swift_unknownObjectRetain();
    uint64_t v1 = swift_dynamicCastClassUnconditional();
    *(void *)(v0 + 24) = v1;
    if (*(_BYTE *)(v1 + 32) == 1)
    {
      swift_release();
      (*(void (**)(uint64_t))(v0 + 8))(256LL);
      return;
    }

    static Task<>.checkCancellation()();
    *(void *)(*(void *)(v0 + 16) + 8LL) = v1 + 33;
    uint64_t v2 = swift_dynamicCastClassUnconditional();
    unint64_t v3 = *(int **)(v2 + 16);
    *(void *)(v0 + 32) = v3;
    *(void *)(v0 + 40) = *(void *)(v2 + 24);
    if (v3)
    {
      unint64_t v5 = (void (*)(void))((char *)v3 + *v3);
      swift_retain();
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 48) = v4;
      *uint64_t v4 = v0;
      v4[1] = _AsyncBytesBuffer.reloadBufferAndNext();
      v5(*(void *)(v0 + 16));
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t _AsyncBytesBuffer.reloadBufferAndNext()(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(void *)(v4 + 64) = a1;
  }
  return swift_task_switch();
}

uint64_t _AsyncBytesBuffer.reloadBufferAndNext()(__int16 a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    *(_BYTE *)(v4 + 89) = HIBYTE(a1) & 1;
    *(_BYTE *)(v4 + 88) = a1;
  }

  return swift_task_switch();
}

uint64_t NSFileHandle.AsyncBytes.makeAsyncIterator()()
{
  uint64_t v1 = *v0;
  type metadata accessor for _AsyncBytesBuffer.Storage();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(void *)(v2 + 24) = 0LL;
  *(_BYTE *)(v2 + 32) = 0;
  id v3 = v1;
  unsigned int v4 = objc_msgSend(v3, sel_fileDescriptor);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  id v6 = v3;
  uint64_t v7 = swift_dynamicCastClassUnconditional();
  uint64_t v8 = *(void *)(v7 + 16);
  *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = &async function pointer to partial apply for closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:);
  *(void *)(v7 + 24) = v5;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v8);

  return v2;
}

uint64_t NSFileHandle.AsyncBytes.Iterator.buffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NSFileHandle.AsyncBytes.Iterator.buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_unknownObjectRelease();
  *id v3 = a1;
  v3[1] = a2;
  void v3[2] = a3;
  return result;
}

uint64_t (*NSFileHandle.AsyncBytes.Iterator.buffer.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(v3 + 200) = a2;
  *(void *)(v3 + 144) = a1;
  *(void *)(v3 + 152) = a3;
  return swift_task_switch();
}

void closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)()
{
  uint64_t v1 = *(void **)(v0 + 144);
  if (*v1)
  {
    int v2 = *(_DWORD *)(v0 + 200);
    type metadata accessor for _AsyncBytesBuffer.Storage();
    uint64_t v3 = swift_dynamicCastClassUnconditional();
    *(void *)(v0 + 160) = v3;
    v1[1] = v3 + 33;
    unsigned int v4 = (const void *)swift_dynamicCastClassUnconditional();
    size_t v5 = _swift_stdlib_malloc_size(v4);
    *(void *)(v0 + 168) = v5;
    if (v2 < 0)
    {
      size_t v6 = v5;
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 184) = v7;
      void *v7 = v0;
      v7[1] = closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:);
      uint64_t v8 = *(void *)(v0 + 152);
      v7[3] = v3 + 33;
      v7[4] = v3 + v6;
      v7[2] = v8;
    }

    else if (one-time initialization token for default != -1)
    {
      swift_once();
    }

    swift_task_switch();
  }

  else
  {
    __break(1u);
  }

unint64_t closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)()
{
  do
  {
    ssize_t v1 = read(*(_DWORD *)(v0 + 200), (void *)(*(void *)(v0 + 160) + 33LL), *(void *)(v0 + 168) - 33LL);
    if ((v1 & 0x8000000000000000LL) == 0)
    {
      *(void *)(v0 + 176) = v1;
      return swift_task_switch();
    }

    int v2 = MEMORY[0x186E1B0E8]();
  }

  while (MEMORY[0x186E1B0E8]() == 4);
  uint64_t v3 = *(unsigned int *)(v0 + 200);
  uint64_t v4 = swift_slowAlloc();
  if (MEMORY[0x186E1B10C](v3, 50LL, v4) == -1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
    uint64_t v22 = v2;
    id v23 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v24 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    objc_msgSend(v23, sel_initWithDomain_code_userInfo_, v24, v22, _NativeDictionary.bridged()());
    goto LABEL_9;
  }

  uint64_t v5 = static String._fromUTF8Repairing(_:)();
  uint64_t v7 = v6;
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFilePath");
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 40) = v9;
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  __int128 v10 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, v0 + 96);
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v12 = *(void *)(v0 + 104);
  swift_retain();
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
  if ((v14 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    v10[(result >> 6) + 8] |= 1LL << result;
    __int128 v15 = (uint64_t *)(v10[6] + 16 * result);
    *__int128 v15 = v11;
    v15[1] = v12;
    unint64_t result = (unint64_t)outlined init with take of Any((_OWORD *)(v0 + 112), (_OWORD *)(v10[7] + 32 * result));
    uint64_t v16 = v10[2];
    BOOL v17 = __OFADD__(v16, 1LL);
    uint64_t v18 = v16 + 1;
    if (!v17)
    {
      uint64_t v19 = v2;
      v10[2] = v18;
      swift_bridgeObjectRelease();
      swift_release();
      id v20 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      uint64_t v21 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      objc_msgSend(v20, sel_initWithDomain_code_userInfo_, v21, v19, _NativeDictionary.bridged()());
LABEL_9:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_willThrow();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  __break(1u);
  return result;
}

uint64_t closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)()
{
  *(void *)(*(void *)(v0 + 144) + 16LL) = *(void *)(*(void *)(v0 + 144) + 8LL) + *(void *)(v0 + 176);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  *(void *)(*(void *)(v0 + 144) + 16LL) = *(void *)(*(void *)(v0 + 144) + 8LL) + *(void *)(v0 + 192);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(void *)(v4 + 192) = a1;
  return swift_task_switch();
}

uint64_t sub_183270DAC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)(uint64_t a1)
{
  int v4 = *(_DWORD *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply;
  *(_DWORD *)(v6 + 200) = v4;
  *(void *)(v6 + 144) = a1;
  *(void *)(v6 + 152) = v5;
  return swift_task_switch();
}

uint64_t NSFileHandle.AsyncBytes.Iterator.next()()
{
  *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v0;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSFileHandle.AsyncBytes.Iterator( uint64_t a1)
{
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSFileHandle.AsyncBytes.Iterator()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(char **)(v1 + 8);
  if (v2 == *(char **)(v1 + 16))
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 32) = v6;
    *uint64_t v6 = v0;
    v6[1] = protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }

  else
  {
    char v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    int v4 = *(_BYTE **)(v0 + 16);
    *int v4 = v3;
    v4[1] = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t _sSo12NSFileHandleC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSFileHandleC10FoundationE10AsyncBytesV8IteratorV_Tgq5Tu
                                                + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSFileHandleC10FoundationE10AsyncBytesV8IteratorV_Tgq5Tu);
  uint64_t v7 = (void *)swift_task_alloc();
  v4[4] = v7;
  void *v7 = v4;
  v7[1] = _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return v9(a2, a3);
}

void protocol witness for AsyncSequence.makeAsyncIterator() in conformance NSFileHandle.AsyncBytes( uint64_t *a1@<X8>)
{
  uint64_t v3 = NSFileHandle.AsyncBytes.makeAsyncIterator()();
  uint64_t v5 = v4;
  uint64_t v7 = v6;

  *a1 = v3;
  a1[1] = v5;
  a1[2] = v7;
}

id NSFileHandle.bytes.getter@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return v1;
}

unint64_t lazy protocol witness table accessor for type NSFileHandle.AsyncBytes.Iterator and conformance NSFileHandle.AsyncBytes.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSFileHandle.AsyncBytes.Iterator and conformance NSFileHandle.AsyncBytes.Iterator;
  if (!lazy protocol witness table cache variable for type NSFileHandle.AsyncBytes.Iterator and conformance NSFileHandle.AsyncBytes.Iterator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSFileHandle.AsyncBytes.Iterator,  &type metadata for NSFileHandle.AsyncBytes.Iterator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSFileHandle.AsyncBytes.Iterator and conformance NSFileHandle.AsyncBytes.Iterator);
  }

  return result;
}

uint64_t type metadata accessor for IOActor()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for _AsyncBytesBuffer()
{
  return &type metadata for _AsyncBytesBuffer;
}

uint64_t type metadata completion function for _AsyncBytesBuffer.Storage()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for _AsyncBytesBuffer.Storage()
{
  return type metadata accessor for _AsyncBytesBuffer.Storage();
}

ValueMetadata *type metadata accessor for NSFileHandle.AsyncBytes()
{
  return &type metadata for NSFileHandle.AsyncBytes;
}

ValueMetadata *type metadata accessor for NSFileHandle.AsyncBytes.Iterator()
{
  return &type metadata for NSFileHandle.AsyncBytes.Iterator;
}

void *destroy for _AsyncBytesBuffer.Header(void *result)
{
  if (*result) {
    return (void *)swift_release();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _AsyncBytesBuffer.Header(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    swift_retain();
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for _AsyncBytesBuffer.Header(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*(void *)a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v6;
      swift_retain();
      goto LABEL_8;
    }

uint64_t assignWithTake for _AsyncBytesBuffer.Header(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*(void *)a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v6;
      goto LABEL_8;
    }

uint64_t getEnumTagSinglePayload for _AsyncBytesBuffer.Header(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _AsyncBytesBuffer.Header( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _AsyncBytesBuffer.Header()
{
  return &type metadata for _AsyncBytesBuffer.Header;
}

void __swiftcall parseError(_:exampleFormattedString:)( Foundation::CocoaError *__return_ptr retstr, Swift::String _, Swift::String_optional exampleFormattedString)
{
  object = _._object;
  uint64_t countAndFlagsBits = _._countAndFlagsBits;
  if (exampleFormattedString.value._object)
  {
    uint64_t v6 = exampleFormattedString.value._object;
    uint64_t v7 = exampleFormattedString.value._countAndFlagsBits;
    v36[0] = 0LL;
    v36[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(88LL);
    v8._uint64_t countAndFlagsBits = 0x7020746F6E6E6143LL;
    v8._object = (void *)0xED00002065737261LL;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = countAndFlagsBits;
    v9._object = object;
    String.append(_:)(v9);
    v10._object = (void *)0x80000001839CAB20LL;
    v10._uint64_t countAndFlagsBits = 0xD000000000000046LL;
    String.append(_:)(v10);
    uint64_t v11 = v7;
    uint64_t v12 = v6;
  }

  else
  {
    _StringGuts.grow(_:)(16LL);
    swift_bridgeObjectRelease();
    strcpy((char *)v36, "Cannot parse ");
    HIWORD(v36[1]) = -4864;
    uint64_t v11 = countAndFlagsBits;
    uint64_t v12 = object;
  }

  String.append(_:)(*(Swift::String *)&v11);
  v13._uint64_t countAndFlagsBits = 46LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  uint64_t v14 = v36[0];
  uint64_t v15 = v36[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 40) = v17;
  *(void *)(inited + 48) = v14;
  *(void *)(inited + 56) = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v18 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)v36);
  uint64_t v19 = v36[0];
  uint64_t v20 = v36[1];
  swift_retain();
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
  if ((v22 & 1) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  v18[(v21 >> 6) + 8] |= 1LL << v21;
  id v23 = (uint64_t *)(v18[6] + 16 * v21);
  *id v23 = v19;
  v23[1] = v20;
  outlined init with take of Any(&v37, (_OWORD *)(v18[7] + 32 * v21));
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1LL);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  v18[2] = v26;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v27 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v28 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  __int128 v29 = (objc_class *)objc_msgSend(v27, sel_initWithDomain_code_userInfo_, v28, 2048, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v30 = -[objc_class domain](v29, sel_domain);
  id v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;

  if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v33 == v34)
  {
    swift_bridgeObjectRelease_n();
LABEL_10:
    retstr->_nsError.super.isa = v29;
    return;
  }

  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v35 & 1) != 0) {
    goto LABEL_10;
  }
LABEL_13:
  __break(1u);
}

Swift::Void __swiftcall AnyKeyPath._validateForPredicateUsage(restrictArguments:)(Swift::Bool restrictArguments)
{
  unint64_t v2 = *(unsigned int *)(v1 + 32);
  switch((v2 >> 24) & 0x7F)
  {
    case 1uLL:
    case 3uLL:
      dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
      type metadata accessor for PartialKeyPath();
      swift_dynamicCastClassUnconditional();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      if ((v3 & 1) != 0) {
        goto LABEL_21;
      }
      return;
    case 2uLL:
      if ((v2 & 0x400000) != 0)
      {
        if ((v2 & 0x80000) == 0)
        {
          uint64_t v4 = 4LL;
          goto LABEL_16;
        }

        if (restrictArguments) {
          goto LABEL_21;
        }
        uint64_t v5 = 4LL;
      }

      else
      {
        if ((v2 & 0x80000) == 0)
        {
          uint64_t v4 = 3LL;
          goto LABEL_16;
        }

        if (restrictArguments) {
          goto LABEL_21;
        }
        uint64_t v5 = 3LL;
      }

      unint64_t v6 = *(void *)(v1 + 32 + 8 * v5);
      if ((v6 & 0x8000000000000000LL) != 0) {
        goto LABEL_19;
      }
      uint64_t v7 = v5 + (v6 >> 3);
      if ((unint64_t)(v7 - 0xFFFFFFFFFFFFFFELL) >> 61 != 7)
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        _StringGuts.grow(_:)(52LL);
        v8._uint64_t countAndFlagsBits = 0xD000000000000031LL;
        v8._object = (void *)0x80000001839CED80LL;
        String.append(_:)(v8);
        v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v9);
        swift_bridgeObjectRelease();
        v10._uint64_t countAndFlagsBits = 41LL;
        v10._object = (void *)0xE100000000000000LL;
        String.append(_:)(v10);
        while (1)
        {
LABEL_21:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }

      uint64_t v4 = v7 + 2;
LABEL_16:
      return;
    case 4uLL:
      goto LABEL_21;
    default:
      goto LABEL_20;
  }

double NSFastEnumerationIterator.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_BYTE *)(a2 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
  return result;
}

void NSFastEnumerationIterator.next()(uint64_t a1@<X8>)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(v1 + 200);
  id v4 = (id)(v3 + 1);
  if (__OFADD__(v3, 1LL)) {
    __break(1u);
  }
  if (*(void *)(v1 + 208) < (uint64_t)v4)
  {
    *(void *)(v1 + 200) = 0LL;
    if (!*(void *)v1) {
      goto LABEL_18;
    }
    uint64_t v5 = *(void *)(v1 + 192);
    __int128 v31 = *(_OWORD *)(v1 + 136);
    __int128 v6 = *(_OWORD *)(v1 + 176);
    *(_OWORD *)&v32[8] = *(_OWORD *)(v1 + 160);
    *(_OWORD *)&v32[24] = v6;
    __int128 v7 = *(_OWORD *)(v1 + 24);
    __int128 v23 = *(_OWORD *)(v1 + 8);
    __int128 v24 = v7;
    __int128 v8 = *(_OWORD *)(v1 + 56);
    __int128 v25 = *(_OWORD *)(v1 + 40);
    __int128 v26 = v8;
    __int128 v9 = *(_OWORD *)(v1 + 88);
    __int128 v27 = *(_OWORD *)(v1 + 72);
    __int128 v28 = v9;
    __int128 v10 = *(_OWORD *)(v1 + 120);
    __int128 v29 = *(_OWORD *)(v1 + 104);
    __int128 v30 = v10;
    uint64_t v22 = 0LL;
    *(void *)&v32[40] = v5;
    *(void *)uint64_t v32 = &v22;
    id v4 = objc_msgSend((id)swift_unknownObjectRetain(), sel_countByEnumeratingWithState_objects_count_, &v31, &v23, 16);
    uint64_t v11 = (__int128 *)*((void *)&v31 + 1);
    swift_unknownObjectRelease();
    __int128 v12 = *(_OWORD *)&v32[16];
    *(_OWORD *)(v1 + 152) = *(_OWORD *)v32;
    *(_OWORD *)(v1 + 168) = v12;
    *(_OWORD *)(v1 + 184) = *(_OWORD *)&v32[32];
    __int128 v13 = v23;
    *(_OWORD *)(v1 + 24) = v24;
    __int128 v14 = v26;
    *(_OWORD *)(v1 + 40) = v25;
    *(_OWORD *)(v1 + 56) = v14;
    __int128 v15 = v28;
    *(_OWORD *)(v1 + 72) = v27;
    *(_OWORD *)(v1 + 88) = v15;
    __int128 v16 = v30;
    *(_OWORD *)(v1 + 104) = v29;
    BOOL v17 = v11 && &v23 == v11;
    BOOL v18 = v17;
    *(void *)(v1 + 208) = v4;
    *(_BYTE *)(v1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v18;
    *(void *)(v1 + 136) = v31;
    *(void *)(v1 + 144) = v11;
    *(_OWORD *)(v1 + 8) = v13;
    *(_OWORD *)(v1 + 120) = v16;
    if (!v4)
    {
LABEL_18:
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
      return;
    }

    uint64_t v19 = v13;
    if (v18)
    {
      if ((void)v13)
      {
LABEL_13:
        swift_unknownObjectRetain();
        *(void *)(a1 + 24) = swift_getObjectType();
        *(void *)a1 = v19;
        *(void *)(v1 + 200) = 1LL;
        return;
      }

uint64_t NSEnumerator.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_BYTE *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSEnumerator()
{
  uint64_t v1 = *v0;
  uint64_t v2 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);

  return v2;
}

uint64_t initializeWithCopy for NSFastEnumerationIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_BYTE *)(a2 + 216);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NSFastEnumerationIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_BYTE *)(a2 + 216);
  return a1;
}

__n128 __swift_memcpy217_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  __int128 v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for NSFastEnumerationIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_BYTE *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSFastEnumerationIterator(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 217)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NSFastEnumerationIterator( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 217) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 217) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NSFastEnumerationIterator()
{
  return &type metadata for NSFastEnumerationIterator;
}

void StringProtocol.localizedCapitalized.getter(uint64_t a1)
{
  __n128 v3 = MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))( (char *)v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v1,  a1,  v3);
  uint64_t v6 = String.init<A>(_:)();
  __int128 v8 = v7;
  if (one-time initialization token for cache != -1) {
LABEL_27:
  }
    swift_once();
  uint64_t v87 = static LocaleCache.cache;
  uint64_t v9 = LocaleCache.current.getter();
  uint64_t v11 = v10;
  uint64_t ObjectType = swift_getObjectType();
  __int128 v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 64);
  swift_unknownObjectRetain();
  uint64_t v14 = v13(ObjectType, v11);
  uint64_t v16 = v15;
  swift_unknownObjectRelease();
  uint64_t v17 = specialized static ICU.CaseMap.caseMappingForLocale(_:)(v14, v16);
  swift_bridgeObjectRelease();
  uint64_t v85 = v17;
  if (!v17)
  {
    uint64_t v87 = v6;
    int v88 = v8;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    String._capitalized()();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return;
  }

  v73[1] = v9;
  uint64_t v86 = 0LL;
  uint64_t v91 = 0LL;
  unint64_t v92 = 0xE000000000000000LL;
  swift_bridgeObjectRetain();
  unint64_t v18 = String.subscript.getter();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  v73[2] = v8;
  swift_bridgeObjectRelease();
  uint64_t v25 = MEMORY[0x186E1BFF4](46LL, 0xE100000000000000LL);
  unint64_t v76 = v26;
  unint64_t v77 = v25;
  uint64_t v75 = v27;
  uint64_t v82 = v28;
  __int128 v29 = (os_unfair_lock_s *)(v18 >> 14);
  uint64_t v79 = v24;
  unint64_t v80 = (unint64_t)v20 >> 14;
  if (v18 >> 14 < (unint64_t)v20 >> 14)
  {
    swift_bridgeObjectRetain();
    uint64_t v83 = v22;
    unint64_t v84 = v18;
    unint64_t v30 = Substring.subscript.getter();
    unint64_t v32 = v31;
    uint64_t v34 = v33;
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    if ((v30 ^ v32) < 0x4000 || (v77 ^ v76) < 0x4000)
    {
      __int128 v8 = v29;
LABEL_19:
      swift_bridgeObjectRelease();
      __int128 v29 = v8;
    }

    else
    {
      uint64_t v6 = v84;
      uint64_t v74 = v20;
      while (1)
      {
        unint64_t v37 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v77,  v76,  v75,  v82,  0,  0,  0,  0,  0,  v30,  v32,  v34,  v36);
        unint64_t v39 = v38;
        char v41 = v40;
        swift_bridgeObjectRelease();
        if ((v41 & 1) != 0) {
          break;
        }
        char v81 = (os_unfair_lock_s *)(v39 >> 14);
        if (v37 >> 14 == v39 >> 14) {
          break;
        }
        if (v37 >> 14 < (unint64_t)v29)
        {
          __break(1u);
          goto LABEL_27;
        }

        uint64_t v78 = v39;
        uint64_t v42 = Substring.subscript.getter();
        uint64_t v44 = v43;
        uint64_t v46 = v45;
        uint64_t v48 = v47;
        __int128 v49 = *(os_unfair_lock_s **)(v85 + 24);
        MEMORY[0x1895F8858](v42);
        uint64_t v20 = v49 + 4;
        swift_retain();
        os_unfair_lock_lock(v49 + 4);
        uint64_t v50 = v86;
        partial apply for closure #1 in ICU.CaseMap.titlecase(_:)(&v87);
        uint64_t v86 = v50;
        if (v50) {
          goto LABEL_29;
        }
        uint64_t countAndFlagsBits = v87;
        object = v88;
        os_unfair_lock_unlock(v49 + 4);
        swift_release();
        if (!object)
        {
          uint64_t v87 = v42;
          int v88 = v44;
          uint64_t v89 = v46;
          uint64_t v90 = v48;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          swift_bridgeObjectRetain_n();
          String.init<A>(_:)();
          Swift::String v53 = String._capitalized()();
          uint64_t countAndFlagsBits = v53._countAndFlagsBits;
          object = v53._object;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        uint64_t v20 = v74;
        uint64_t v54 = v78;
        v55._uint64_t countAndFlagsBits = countAndFlagsBits;
        v55._object = object;
        String.append(_:)(v55);
        swift_bridgeObjectRelease();
        v56._uint64_t countAndFlagsBits = 46LL;
        v56._object = (void *)0xE100000000000000LL;
        String.append(_:)(v56);
        swift_bridgeObjectRelease();
        __int128 v8 = v81;
        if ((unint64_t)v81 >= v80)
        {
          __int128 v29 = v81;
          break;
        }

        swift_bridgeObjectRetain();
        unint64_t v30 = Substring.subscript.getter();
        unint64_t v32 = v57;
        uint64_t v34 = v58;
        uint64_t v36 = v59;
        swift_bridgeObjectRelease();
        uint64_t v6 = v54;
        __int128 v29 = v8;
        if ((v30 ^ v32) < 0x4000) {
          goto LABEL_19;
        }
      }
    }
  }

  if (v80 < (unint64_t)v29)
  {
    __break(1u);
LABEL_29:
    os_unfair_lock_unlock(v20);
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v60 = Substring.subscript.getter();
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v67 = *(os_unfair_lock_s **)(v85 + 24);
  MEMORY[0x1895F8858](v60);
  __int128 v8 = v67 + 4;
  swift_retain();
  os_unfair_lock_lock(v67 + 4);
  uint64_t v68 = v86;
  partial apply for closure #1 in ICU.CaseMap.titlecase(_:)(&v87);
  if (v68)
  {
LABEL_30:
    os_unfair_lock_unlock(v8);
    __break(1u);
    return;
  }

  uint64_t v70 = v87;
  uint64_t v69 = v88;
  os_unfair_lock_unlock(v67 + 4);
  swift_release();
  if (!v69)
  {
    uint64_t v87 = v60;
    int v88 = v62;
    uint64_t v89 = v64;
    uint64_t v90 = v66;
    lazy protocol witness table accessor for type Substring and conformance Substring();
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v71 = String._capitalized()();
    uint64_t v70 = v71._countAndFlagsBits;
    uint64_t v69 = v71._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  v72._uint64_t countAndFlagsBits = v70;
  v72._object = v69;
  String.append(_:)(v72);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void StringProtocol.capitalized(with:)(uint64_t a1, uint64_t a2)
{
  __n128 v3 = MEMORY[0x1895F8858](a1);
  uint64_t v5 = (os_unfair_lock_s *)((char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  (*(void (**)(os_unfair_lock_s *, uint64_t, uint64_t, __n128))(v9 + 16))(v5, v10, a2, v3);
  uint64_t v11 = String.init<A>(_:)();
  __int128 v13 = v12;
  if (v8)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = *(os_unfair_lock_s **)(v7 + 64);
    swift_unknownObjectRetain();
    uint64_t v15 = ((uint64_t (*)(uint64_t, uint64_t))v5)(ObjectType, v7);
    uint64_t v17 = v16;
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v15 = 0LL;
    uint64_t v17 = 0LL;
  }

  uint64_t v18 = specialized static ICU.CaseMap.caseMappingForLocale(_:)(v15, v17);
  swift_bridgeObjectRelease();
  uint64_t v86 = v18;
  if (!v18)
  {
    uint64_t v88 = v11;
    uint64_t v89 = v13;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    String._capitalized()();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return;
  }

  uint64_t v92 = 0LL;
  unint64_t v93 = 0xE000000000000000LL;
  swift_bridgeObjectRetain();
  unint64_t v19 = String.subscript.getter();
  unint64_t v21 = v20;
  unint64_t v23 = v22;
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = MEMORY[0x186E1BFF4](46LL, 0xE100000000000000LL);
  unint64_t v77 = v27;
  unint64_t v78 = v26;
  uint64_t v76 = v28;
  uint64_t v83 = v29;
  unint64_t v30 = (os_unfair_lock_s *)(v19 >> 14);
  uint64_t v80 = v25;
  unint64_t v81 = v21 >> 14;
  uint64_t v74 = v13;
  if (v19 >> 14 >= v21 >> 14)
  {
    uint64_t v87 = 0LL;
  }

  else
  {
    swift_bridgeObjectRetain();
    unint64_t v84 = v21;
    unint64_t v85 = v19;
    unint64_t v19 = v23;
    unint64_t v31 = Substring.subscript.getter();
    unint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((v31 ^ v33) < 0x4000 || (v78 ^ v77) < 0x4000)
    {
      uint64_t v87 = 0LL;
      uint64_t v5 = v30;
LABEL_21:
      swift_bridgeObjectRelease();
      unint64_t v30 = v5;
    }

    else
    {
      uint64_t v87 = 0LL;
      unint64_t v75 = v19;
      while (1)
      {
        unint64_t v38 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v78,  v77,  v76,  v83,  0,  0,  0,  0,  0,  v31,  v33,  v35,  v37);
        unint64_t v40 = v39;
        char v42 = v41;
        swift_bridgeObjectRelease();
        if ((v42 & 1) != 0) {
          break;
        }
        uint64_t v82 = (os_unfair_lock_s *)(v40 >> 14);
        if (v38 >> 14 == v40 >> 14) {
          break;
        }
        if (v38 >> 14 < (unint64_t)v30)
        {
          __break(1u);
          goto LABEL_30;
        }

        unint64_t v79 = v40;
        uint64_t v43 = Substring.subscript.getter();
        uint64_t v45 = v44;
        uint64_t v47 = v46;
        uint64_t v49 = v48;
        uint64_t v50 = *(os_unfair_lock_s **)(v86 + 24);
        MEMORY[0x1895F8858](v43);
        unint64_t v19 = (unint64_t)&v50[4];
        swift_retain();
        os_unfair_lock_lock(v50 + 4);
        uint64_t v51 = v87;
        partial apply for closure #1 in ICU.CaseMap.titlecase(_:)(&v88);
        uint64_t v87 = v51;
        if (v51) {
          goto LABEL_31;
        }
        uint64_t countAndFlagsBits = v88;
        object = v89;
        os_unfair_lock_unlock(v50 + 4);
        swift_release();
        if (!object)
        {
          uint64_t v88 = v43;
          uint64_t v89 = v45;
          uint64_t v90 = v47;
          uint64_t v91 = v49;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          swift_bridgeObjectRetain_n();
          String.init<A>(_:)();
          Swift::String v54 = String._capitalized()();
          uint64_t countAndFlagsBits = v54._countAndFlagsBits;
          object = v54._object;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        unint64_t v19 = v85;
        unint64_t v55 = v75;
        v56._uint64_t countAndFlagsBits = countAndFlagsBits;
        v56._object = object;
        String.append(_:)(v56);
        swift_bridgeObjectRelease();
        v57._uint64_t countAndFlagsBits = 46LL;
        v57._object = (void *)0xE100000000000000LL;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        uint64_t v5 = v82;
        if ((unint64_t)v82 >= v81)
        {
          unint64_t v30 = v82;
          goto LABEL_23;
        }

        swift_bridgeObjectRetain();
        unint64_t v19 = v55;
        unint64_t v31 = Substring.subscript.getter();
        unint64_t v33 = v58;
        uint64_t v35 = v59;
        uint64_t v37 = v60;
        swift_bridgeObjectRelease();
        unint64_t v30 = v5;
        if ((v31 ^ v33) < 0x4000) {
          goto LABEL_21;
        }
      }
    }

    unint64_t v19 = v85;
  }

uint64_t StringProtocol.localizedLowercase.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.localizedLowercase.getter( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t))ICU.CaseMap.lowercase(_:),  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x189617C98]);
}

uint64_t StringProtocol.lowercased(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.lowercased(with:)( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t))ICU.CaseMap.lowercase(_:),  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x189617C98]);
}

uint64_t StringProtocol.localizedUppercase.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.localizedLowercase.getter( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t))ICU.CaseMap.uppercase(_:),  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x189617CA8]);
}

uint64_t StringProtocol.localizedLowercase.getter( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  __n128 v8 = MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))( (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4,  a1,  v8);
  uint64_t v11 = String.init<A>(_:)();
  uint64_t v13 = v12;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  v24[1] = static LocaleCache.cache;
  LocaleCache.current.getter();
  uint64_t v15 = v14;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 64))(ObjectType, v15);
  uint64_t v19 = specialized static ICU.CaseMap.caseMappingForLocale(_:)(v17, v18);
  swift_bridgeObjectRelease();
  if (!v19 || (uint64_t v20 = a3(v11, v13), v22 = v21, swift_release(), !v22)) {
    uint64_t v20 = a4(v11, v13);
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t StringProtocol.uppercased(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.lowercased(with:)( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t))ICU.CaseMap.uppercase(_:),  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x189617CA8]);
}

uint64_t StringProtocol.lowercased(with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  __n128 v8 = MEMORY[0x1895F8858](a1);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))( (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v14,  a2,  v8);
  uint64_t v15 = String.init<A>(_:)();
  uint64_t v17 = v16;
  if (v11)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 64);
    swift_unknownObjectRetain();
    uint64_t v20 = v19(ObjectType, v12);
    uint64_t v22 = v21;
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v20 = 0LL;
    uint64_t v22 = 0LL;
  }

  uint64_t v23 = specialized static ICU.CaseMap.caseMappingForLocale(_:)(v20, v22);
  swift_bridgeObjectRelease();
  if (!v23 || (v24 = a4(v15, v17), uint64_t v26 = v25, swift_release(), !v26)) {
    uint64_t v24 = a5(v15, v17);
  }
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t partial apply for closure #1 in ICU.CaseMap.titlecase(_:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in ICU.CaseMap.titlecase(_:)(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t _LocaleAutoupdating.firstDayOfWeek.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (uint64_t *)(static LocaleCache.cache + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.current.getter(v0, v8);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (*(void *)&v8[0])
  {
    uint64_t v2 = *((void *)&v8[0] + 1);
LABEL_7:
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 328))(ObjectType, v2);
    return swift_unknownObjectRelease();
  }

  LocaleCache.preferences()(v8);
  char v4 = v3;
  swift_retain();
  os_unfair_lock_lock(v1);
  closure #2 in LocaleCache.current.getter(v0, (uint64_t)v8, v4 & 1, v7);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (v7[0])
  {
    uint64_t v2 = v7[1];
    outlined release of LocalePreferences(v8);
    goto LABEL_7;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _LocaleAutoupdating.prefs.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (uint64_t *)(static LocaleCache.cache + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.current.getter(v0, v8);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (*(void *)&v8[0])
  {
    uint64_t v2 = *((void *)&v8[0] + 1);
LABEL_7:
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 464))(ObjectType, v2);
    return swift_unknownObjectRelease();
  }

  LocaleCache.preferences()(v8);
  char v4 = v3;
  swift_retain();
  os_unfair_lock_lock(v1);
  closure #2 in LocaleCache.current.getter(v0, (uint64_t)v8, v4 & 1, v7);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (v7[0])
  {
    uint64_t v2 = v7[1];
    outlined release of LocalePreferences(v8);
    goto LABEL_7;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _LocaleAutoupdating()
{
  return objc_opt_self();
}

void protocol witness for _LocaleProtocol.init(identifier:prefs:) in conformance _LocaleAutoupdating()
{
}

void protocol witness for _LocaleProtocol.init(name:prefs:disableBundleMatching:) in conformance _LocaleAutoupdating()
{
}

void protocol witness for _LocaleProtocol.init(components:) in conformance _LocaleAutoupdating()
{
}

uint64_t protocol witness for _LocaleProtocol.copy(newCalendarIdentifier:) in conformance _LocaleAutoupdating( char *a1)
{
  char v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static LocaleCache.cache;
  LocaleCache.current.getter();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  char v7 = v1;
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 40))(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t protocol witness for _LocaleProtocol.identifier.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleAutoupdating( uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 72))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.languageCodeDisplayName(for:) in conformance _LocaleAutoupdating( uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 80))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.countryCodeDisplayName(for:) in conformance _LocaleAutoupdating( uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 88))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.scriptCodeDisplayName(for:) in conformance _LocaleAutoupdating( uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 96))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.variantCodeDisplayName(for:) in conformance _LocaleAutoupdating( uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 104))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.calendarIdentifierDisplayName(for:) in conformance _LocaleAutoupdating( char *a1)
{
  char v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static LocaleCache.cache;
  LocaleCache.current.getter();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  char v7 = v1;
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 112))(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t protocol witness for _LocaleProtocol.currencyCodeDisplayName(for:) in conformance _LocaleAutoupdating( uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 120))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.currencySymbolDisplayName(for:) in conformance _LocaleAutoupdating( uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 128))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifierDisplayName(for:) in conformance _LocaleAutoupdating( uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 136))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.collatorIdentifierDisplayName(for:) in conformance _LocaleAutoupdating( uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 144))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.languageCode.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 152))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.scriptCode.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 160))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.variantCode.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 168))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.regionCode.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 176))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.exemplarCharacterSet.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 184))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.calendar.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 192))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.calendarIdentifier.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 200))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifier.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 208))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.usesMetricSystem.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v1 & 1;
}

uint64_t protocol witness for _LocaleProtocol.decimalSeparator.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 224))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.groupingSeparator.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 232))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencySymbol.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 240))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencyCode.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 248))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.collatorIdentifier.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 256))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.quotationBeginDelimiter.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 264))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.quotationEndDelimiter.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 272))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationBeginDelimiter.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 280))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationEndDelimiter.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 288))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.measurementSystem.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 296))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.currency.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 304))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.numberingSystem.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 312))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.availableNumberingSystems.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 320))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.firstDayOfWeek.getter in conformance _LocaleAutoupdating()
{
  return _LocaleAutoupdating.firstDayOfWeek.getter();
}

uint64_t protocol witness for _LocaleProtocol.weekendRange.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 336))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.language.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 352))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.hourCycle.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 360))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.collation.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 368))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.region.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 376))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.timeZone.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 384))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.subdivision.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 392))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.variant.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 400))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.temperatureUnit.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 408))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.forceHourCycle.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 424))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.forceFirstWeekday(_:) in conformance _LocaleAutoupdating( char *a1)
{
  char v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v7 = static LocaleCache.cache;
  LocaleCache.current.getter();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  char v6 = v1;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 432))(&v6, ObjectType, v3);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.forceMinDaysInFirstWeek(_:) in conformance _LocaleAutoupdating( char *a1)
{
  char v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static LocaleCache.cache;
  LocaleCache.current.getter();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  char v7 = v1;
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 440))(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t protocol witness for _LocaleProtocol.forceMeasurementSystem.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 448))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.forceTemperatureUnit.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 456))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.prefs.getter in conformance _LocaleAutoupdating()
{
  return _LocaleAutoupdating.prefs.getter();
}

uint64_t protocol witness for _LocaleProtocol.identifierCapturingPreferences.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 472))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.pref(for:) in conformance _LocaleAutoupdating( uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 480))(a1, a2, ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.bridgeToNSLocale() in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static LocaleCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.autoupdatingCurrentNSLocale()(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.customDateFormat(_:) in conformance _LocaleAutoupdating( uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = v1;
  uint64_t v5 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 496))(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

unint64_t instantiation function for generic protocol witness table for _LocaleAutoupdating( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized _LocaleAutoupdating.minimumDaysInFirstWeek.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (uint64_t *)(static LocaleCache.cache + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.current.getter(v0, v9);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (*(void *)&v9[0])
  {
    uint64_t v2 = *((void *)&v9[0] + 1);
LABEL_7:
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 344))(ObjectType, v2);
    swift_unknownObjectRelease();
    return v6;
  }

  LocaleCache.preferences()(v9);
  char v4 = v3;
  swift_retain();
  os_unfair_lock_lock(v1);
  closure #2 in LocaleCache.current.getter(v0, (uint64_t)v9, v4 & 1, v8);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (v8[0])
  {
    uint64_t v2 = v8[1];
    outlined release of LocalePreferences(v9);
    goto LABEL_7;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _LocaleAutoupdating.debugDescription.getter()
{
  HIWORD(v12[1]) = -4864;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (uint64_t *)(static LocaleCache.cache + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.current.getter(v0, v13);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (*(void *)&v13[0])
  {
    uint64_t v2 = *((void *)&v13[0] + 1);
LABEL_7:
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
    uint64_t v8 = v7;
    swift_unknownObjectRelease();
    v9._uint64_t countAndFlagsBits = v6;
    v9._object = v8;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    return v12[0];
  }

  LocaleCache.preferences()(v13);
  char v4 = v3;
  swift_retain();
  os_unfair_lock_lock(v1);
  closure #2 in LocaleCache.current.getter(v0, (uint64_t)v13, v4 & 1, v11);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (v11[0])
  {
    uint64_t v2 = v11[1];
    outlined release of LocalePreferences(v13);
    goto LABEL_7;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void LockedState.withLock<A>(_:)(void (*a1)(char *))
{
  char v3 = *v1;
  uint64_t v4 = **v1;
  uint64_t v5 = (char *)*v1 + *(void *)(*MEMORY[0x189619408] + v4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)((char *)v3 + ((*(unsigned int *)(v4 + 48) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  a1(v5);
  os_unfair_lock_unlock(v6);
}

uint64_t LockedState.withLockExtendingLifetimeOfState<A>(_:)( void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::String v9 = *v3;
  uint64_t v10 = **v3;
  uint64_t v11 = (char *)*v3 + *(void *)(*MEMORY[0x189619408] + v10 + 16);
  uint64_t v12 = (os_unfair_lock_s *)((char *)v9 + ((*(unsigned int *)(v10 + 48) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v12);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
  a1(v11);
  os_unfair_lock_unlock(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t LockedState.init(initialState:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + ((*(unsigned int *)(*(void *)v8 + 48LL) + 3LL) & 0x1FFFFFFFCLL)) = 0;
  uint64_t v9 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))( v8 + *(void *)(*MEMORY[0x189619408] + *(void *)v8 + 16LL),  a1,  a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  *a5 = v8;
  return result;
}

void LockedState<A>.lock()()
{
}

uint64_t LockedState<A>.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
  *a1 = result;
  return result;
}

void LockedState.withLockUnchecked<A>(_:)(void (*a1)(char *))
{
  char v3 = *v1;
  uint64_t v4 = **v1;
  uint64_t v5 = (char *)*v1 + *(void *)(*MEMORY[0x189619408] + v4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)((char *)v3 + ((*(unsigned int *)(v4 + 48) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  a1(v5);
  os_unfair_lock_unlock(v6);
}

uint64_t type metadata accessor for LockedState._Buffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LockedState._Buffer);
}

void LockedState<A>.unlock()()
{
}

uint64_t LockedState._Buffer.__deallocating_deinit()
{
  (*(void (**)(char *))(*(void *)(*(void *)(*(void *)v0
                                                         + class metadata base offset for LockedState._Buffer)
                                             - 8LL)
                                 + 8LL))(&v0[*(void *)(*MEMORY[0x189619408] + *(void *)v0 + 16LL)]);
  return swift_deallocClassInstance();
}

void LockedState<A>.withLock<A>(_:)(void (*a1)(void))
{
  char v3 = *v1 + 4;
  os_unfair_lock_lock(v3);
  a1();
  os_unfair_lock_unlock(v3);
}

uint64_t type metadata accessor for LockedState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LockedState);
}

uint64_t type metadata completion function for LockedState._Buffer()
{
  return swift_initClassMetadata2();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RegexPatternCache.Key()
{
  Swift::UInt8 v1 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance RegexPatternCache.Key()
{
  Swift::UInt8 v1 = *(_BYTE *)(v0 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RegexPatternCache.Key()
{
  Swift::UInt8 v1 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RegexPatternCache.Key( uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return v2 ^ v3 ^ 1u;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0LL;
  if ((v5 & 1) != 0) {
    return v2 ^ v3 ^ 1u;
  }
  return result;
}

uint64_t closure #1 in RegexPatternCache.regex(for:caseInsensitive:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, void (*a6)(char *, uint64_t, uint64_t, uint64_t)@<X5>, int a7@<W6>, char *a8@<X8>)
{
  int v54 = a7;
  uint64_t v59 = a5;
  uint64_t v60 = (void (*)(char *, uint64_t, uint64_t, uint64_t))a6;
  Swift::String v57 = a8;
  uint64_t v53 = type metadata accessor for RegexWordBoundaryKind();
  uint64_t v51 = *(void *)(v53 - 8);
  MEMORY[0x1895F8858](v53);
  uint64_t v50 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  unint64_t v55 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v48 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  uint64_t v48 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  unint64_t v58 = (char *)&v48 - v23;
  uint64_t v24 = MEMORY[0x1895F8858](v22);
  MEMORY[0x1895F8858](v24);
  uint64_t v26 = (char *)&v48 - v25;
  uint64_t v27 = *a1;
  uint64_t v28 = *(void *)(*a1 + 16);
  Swift::String v56 = a1;
  unint64_t v61 = a2;
  __int128 v52 = v29;
  if (v28)
  {
    swift_bridgeObjectRetain();
    int v49 = a4;
    unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 1);
    if ((v31 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))( v17,  *(void *)(v27 + 56) + *(void *)(v19 + 72) * v30,  v18);
      unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
      v32(v17, 0LL, 1LL, v18);
    }

    else
    {
      unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
      v32(v17, 1LL, 1LL, v18);
    }

    swift_bridgeObjectRelease();
    int v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18);
    LOBYTE(aos_unfair_lock_unlock(*v0 + 4) = v49;
    if (v33 != 1)
    {
      uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
      v46(v26, v17, v18);
      uint64_t v47 = v57;
      v46(v57, v26, v18);
      return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v32)(v47, 0LL, 1LL, v18);
    }
  }

  else
  {
    unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v32(v17, 1LL, 1LL, v18);
  }

  outlined destroy of Regex<AnyRegexOutput>?((uint64_t)v17);
  swift_bridgeObjectRetain();
  uint64_t v34 = v58;
  uint64_t v35 = v62;
  uint64_t result = Regex<A>.init(_:)();
  unint64_t v37 = v61;
  if (!v35)
  {
    uint64_t v60 = v32;
    uint64_t v62 = a3;
    unint64_t v38 = v50;
    MEMORY[0x186E1ABB4](result);
    unint64_t v39 = v52;
    Regex.wordBoundaryKind(_:)();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v38, v53);
    unint64_t v40 = *(void (**)(char *, uint64_t))(v19 + 8);
    v40(v34, v18);
    if ((v54 & 1) != 0)
    {
      char v41 = v48;
      Regex.ignoresCase(_:)();
      v40(v39, v18);
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v39, v41, v18);
    }

    uint64_t v42 = (uint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v55, v39, v18);
    uint64_t v43 = (uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v60;
    v60((char *)v42, 0LL, 1LL, v18);
    uint64_t v44 = v62;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter(v42, v37, v44, a4 & 1);
    uint64_t v45 = v57;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v57, v39, v18);
    return v43((uint64_t)v45, 0LL, 1LL, v18);
  }

  return result;
}

uint64_t outlined destroy of Regex<AnyRegexOutput>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for RegexPatternCache()
{
  return &type metadata for RegexPatternCache;
}

ValueMetadata *type metadata accessor for RegexPatternCache.Key()
{
  return &type metadata for RegexPatternCache.Key;
}

unint64_t lazy protocol witness table accessor for type RegexPatternCache.Key and conformance RegexPatternCache.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexPatternCache.Key and conformance RegexPatternCache.Key;
  if (!lazy protocol witness table cache variable for type RegexPatternCache.Key and conformance RegexPatternCache.Key)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for RegexPatternCache.Key,  &type metadata for RegexPatternCache.Key);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RegexPatternCache.Key and conformance RegexPatternCache.Key);
  }

  return result;
}

__n128 protocol witness for DataProtocol.regions.getter in conformance UnsafeRawBufferPointer@<Q0>( __n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in UnsafeRawBufferPointer()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type CollectionOfOne<UnsafeRawBufferPointer> and conformance CollectionOfOne<A>,  &demangling cache variable for type metadata for CollectionOfOne<UnsafeRawBufferPointer>,  MEMORY[0x189619490]);
}

unint64_t lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
    unint64_t v2 = lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> Slice<A>, v1, &v2);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>);
  }

  return result;
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in UnsafeRawBufferPointer()
{
  return &protocol witness table for UnsafeRawBufferPointer;
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element.Collection.SubSequence : ContiguousBytes in UnsafeRawBufferPointer()
{
  return lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>( &lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>,  &demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>,  (uint64_t)&protocol witness table for UnsafeRawBufferPointer);
}

unint64_t instantiation function for generic protocol witness table for UnsafeRawBufferPointer( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> UnsafeBufferPointer<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type CollectionOfOne<UnsafeBufferPointer<UInt8>> and conformance CollectionOfOne<A>,  &demangling cache variable for type metadata for CollectionOfOne<UnsafeBufferPointer<UInt8>>,  MEMORY[0x189619490]);
}

unint64_t lazy protocol witness table accessor for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeBufferPointer<UInt8>>);
    uint64_t v2 = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance <A> UnsafeBufferPointer<A>,  &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>,  (uint64_t)&protocol conformance descriptor for <A> UnsafeBufferPointer<A>);
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> Slice<A>, v1, &v2);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>);
  }

  return result;
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in <A> UnsafeBufferPointer<A>()
{
  return &protocol witness table for <A> UnsafeBufferPointer<A>;
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element : DataProtocol in <A> UnsafeBufferPointer<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance <A> UnsafeBufferPointer<A>,  &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>,  (uint64_t)&protocol conformance descriptor for <A> UnsafeBufferPointer<A>);
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element.Collection.SubSequence : ContiguousBytes in <A> UnsafeBufferPointer<A>()
{
  return lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>( &lazy protocol witness table cache variable for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>,  &demangling cache variable for type metadata for Slice<UnsafeBufferPointer<UInt8>>,  (uint64_t)&protocol witness table for <A> UnsafeBufferPointer<A>);
}

uint64_t lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>( unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t v7 = a3;
    uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> Slice<A>, v6, &v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> UnsafeBufferPointer<A>(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance UnsafeBufferPointer<A>,  &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>,  MEMORY[0x189617C78]);
  *(void *)(a1 + 8) = result;
  return result;
}

id specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = objc_msgSend(v3, sel_length);
  if (a1 < 0 || (uint64_t)result < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  id result = objc_msgSend(v3, sel_length);
  uint64_t v8 = a3 - a1;
  if (a2 >= 1)
  {
    if (v8 < 0 || v8 >= a2) {
      goto LABEL_12;
    }
    return 0LL;
  }

  if (v8 <= 0 && v8 > a2) {
    return 0LL;
  }
LABEL_12:
  BOOL v10 = __OFADD__(a1, a2);
  uint64_t v9 = a1 + a2;
  if (v10)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  id result = objc_msgSend(v3, sel_length);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6 + a5;
  if (__OFADD__(a6, a5))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (v6 < a3 || a3 < a6 || result < a6 || v6 < result) {
    goto LABEL_19;
  }
  uint64_t v7 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  if (a2 >= 1)
  {
    return 0LL;
  }

  if (v7 <= 0 && v7 > a2) {
    return 0LL;
  }
LABEL_14:
  BOOL v8 = __OFADD__(result, a2);
  result += a2;
  if (v8)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    return result;
  }

  if (result < a6 || v6 < result) {
    goto LABEL_22;
  }
  return result;
}

__n128 DispatchData.Region.regions.getter@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  return result;
}

uint64_t DispatchData.Region.subscript.getter(uint64_t result)
{
  uint64_t v3 = v1[1];
  uint64_t v2 = v1[2];
  BOOL v4 = __OFADD__(v2, v3);
  uint64_t v5 = v2 + v3;
  if (v4)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (v2 > result || v5 < result) {
    goto LABEL_9;
  }
  BOOL v4 = __OFSUB__(result, v2);
  uint64_t v7 = result - v2;
  if (!v4) {
    return *(unsigned __int8 *)(*v1 + v7);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t DispatchData.Region.startIndex.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t DispatchData.Region.endIndex.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t result = v2 + v1;
  if (__OFADD__(v2, v1)) {
    __break(1u);
  }
  return result;
}

uint64_t DispatchData.Region.withUnsafeBytes<A>(_:)(uint64_t (*a1)(void))
{
  return a1();
}

__n128 protocol witness for DataProtocol.regions.getter in conformance DispatchData.Region@<Q0>( __n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  return result;
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance DispatchData.Region( uint64_t (*a1)(void))
{
  return DispatchData.Region.withUnsafeBytes<A>(_:)(a1);
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance DispatchData.Region@<X0>( void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1LL;
  if (__OFSUB__(*result, 1LL))
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  BOOL v6 = __OFADD__(v4, v5);
  uint64_t v7 = v4 + v5;
  if (v6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (v3 >= v4 && v3 < v7)
  {
    *a2 = v3;
    return result;
  }

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance DispatchData.Region( uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1LL))
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  BOOL v5 = __OFADD__(v3, v4);
  uint64_t v6 = v3 + v4;
  if (v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (v2 >= v3 && v2 < v6)
  {
    *__n128 result = v2;
    return result;
  }

void protocol witness for Collection.startIndex.getter in conformance DispatchData.Region(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

void protocol witness for Collection.endIndex.getter in conformance DispatchData.Region(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  BOOL v4 = __OFADD__(v3, v2);
  uint64_t v5 = v3 + v2;
  if (v4) {
    __break(1u);
  }
  else {
    *a1 = v5;
  }
}

uint64_t (*protocol witness for Collection.subscript.read in conformance DispatchData.Region( uint64_t (*result)(), uint64_t *a2))()
{
  uint64_t v4 = v2[1];
  uint64_t v3 = v2[2];
  uint64_t v5 = v3 + v4;
  if (__OFADD__(v3, v4))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v6 = *a2;
  if (*a2 < v3 || v5 < v6) {
    goto LABEL_9;
  }
  BOOL v8 = __OFSUB__(v6, v3);
  uint64_t v9 = v6 - v3;
  if (!v8)
  {
    *(_BYTE *)__n128 result = *(_BYTE *)(*v2 + v9);
    return destructiveProjectEnumData for PredicateCodableError;
  }

uint64_t *protocol witness for Collection.subscript.getter in conformance DispatchData.Region@<X0>( uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2[1];
  uint64_t v4 = v2[2];
  uint64_t v5 = v4 + v3;
  if (__OFADD__(v4, v3))
  {
    __break(1u);
    goto LABEL_7;
  }

  if (v5 < v4)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v6 = *result;
  if (*result < v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v7 = result[1];
  if (v5 >= v7)
  {
    a2[2] = *v2;
    a2[3] = v3;
    a2[4] = v4;
    *a2 = v6;
    a2[1] = v7;
    return result;
  }

void protocol witness for Collection.indices.getter in conformance DispatchData.Region(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v2 = *(void *)(v1 + 16);
  BOOL v4 = __OFADD__(v2, v3);
  uint64_t v5 = v2 + v3;
  if (v4)
  {
    __break(1u);
  }

  else if (v5 >= v2)
  {
    *a1 = v2;
    a1[1] = v5;
    return;
  }

  __break(1u);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance DispatchData.Region()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  BOOL v3 = __OFADD__(v1, v2);
  uint64_t v4 = v1 + v2;
  if (!v3) {
    return v1 == v4;
  }
  __break(1u);
  return result;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance DispatchData.Region@<X0>( void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v6 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(v3 + 16);
  BOOL v7 = __OFADD__(v5, v6);
  uint64_t v8 = v5 + v6;
  if (v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (v4 >= v5 && v8 >= v4)
  {
    *a3 = v4;
    return result;
  }

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance DispatchData.Region@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4, v4[1], v4[2]);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance DispatchData.Region( uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  BOOL v5 = __OFADD__(v4, v3);
  uint64_t v6 = v4 + v3;
  if (v5)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v7 = *result;
  uint64_t v8 = *a2;
  if (v6 < *a2 || v8 < v4 || v7 < v4 || v6 < v7) {
    goto LABEL_15;
  }
  uint64_t result = (uint64_t *)(v8 - v7);
  if (__OFSUB__(v8, v7)) {
LABEL_16:
  }
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance DispatchData.Region@<X0>( uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = v4 + v3;
  if (__OFADD__(v4, v3))
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = *result;
    if (*result >= v4 && v6 < v5)
    {
      *a2 = v6 + 1;
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance DispatchData.Region( uint64_t *result)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v4 = v2 + v3;
  if (__OFADD__(v2, v3))
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = *result;
    if (*result >= v2 && v5 < v4)
    {
      *uint64_t result = v5 + 1;
      return result;
    }
  }

  __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance DispatchData.Region@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = v2;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance DispatchData.Region()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  BOOL v3 = __OFADD__(v1, v2);
  uint64_t v4 = v1 + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_6;
  }

  uint64_t result = v4 - v1;
  if (v4 < v1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (__OFSUB__(v4, v1)) {
LABEL_7:
  }
    __break(1u);
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance DispatchData.Region()
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(*(void **)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance DispatchData.Region( void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t DispatchData.regions.getter()
{
  uint64_t v1 = MEMORY[0x18961AFE8];
  DispatchData.enumerateBytes(_:)();
  return v1;
}

uint64_t closure #1 in DispatchData.regions.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = (void *)*a5;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a5 = (uint64_t)v9;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
    uint64_t v9 = (void *)result;
    *a5 = result;
  }

  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
    uint64_t v9 = (void *)result;
  }

  v9[2] = v12 + 1;
  uint64_t v13 = &v9[3 * v12];
  v13[4] = a1;
  v13[5] = a2;
  v13[6] = a3;
  *a5 = (uint64_t)v9;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in DispatchData.Region()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type CollectionOfOne<DispatchData.Region> and conformance CollectionOfOne<A>,  &demangling cache variable for type metadata for CollectionOfOne<DispatchData.Region>,  MEMORY[0x189619490]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in DispatchData.Region()
{
  return lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>( &lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>,  (uint64_t (*)(void))lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region,  (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in DispatchData.Region()
{
  return &protocol witness table for DispatchData.Region;
}

unint64_t lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<DispatchData.Region>);
    uint64_t v2 = &protocol witness table for DispatchData.Region;
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> Slice<A>, v1, &v2);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for DispatchData.Region( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in DispatchData.Region()
{
  return lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>( &lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>,  (uint64_t (*)(void))lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region,  MEMORY[0x18961A5E0]);
}

uint64_t lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>( unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<DispatchData.Region>);
    uint64_t v8 = a2();
    uint64_t result = MEMORY[0x186E20D4C](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in DispatchData.Region()
{
  return lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>( &lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>,  (uint64_t (*)(void))lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region,  MEMORY[0x18961A5C8]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in DispatchData.Region()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance Slice<A>,  &demangling cache variable for type metadata for Slice<DispatchData.Region>,  MEMORY[0x18961A5E8]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in DispatchData.Region()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IndexingIterator<DispatchData.Region> and conformance IndexingIterator<A>,  &demangling cache variable for type metadata for IndexingIterator<DispatchData.Region>,  MEMORY[0x189619678]);
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in DispatchData()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [DispatchData.Region] and conformance [A],  &demangling cache variable for type metadata for [DispatchData.Region],  MEMORY[0x189618458]);
}

unint64_t lazy protocol witness table accessor for type Slice<DispatchData> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<DispatchData> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<DispatchData> and conformance <> Slice<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<DispatchData>);
    uint64_t v2 = lazy protocol witness table accessor for type DispatchData and conformance DispatchData( &lazy protocol witness table cache variable for type DispatchData and conformance DispatchData,  (uint64_t)&protocol conformance descriptor for DispatchData);
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> Slice<A>, v1, &v2);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Slice<DispatchData> and conformance <> Slice<A>);
  }

  return result;
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance DispatchData@<X0>(void *a1@<X8>)
{
  uint64_t v3 = MEMORY[0x18961AFE8];
  uint64_t result = DispatchData.enumerateBytes(_:)();
  *a1 = v3;
  return result;
}

uint64_t instantiation function for generic protocol witness table for DispatchData(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type DispatchData and conformance DispatchData( &lazy protocol witness table cache variable for type DispatchData and conformance DispatchData,  MEMORY[0x18961B768]);
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for DispatchData.Region()
{
  return &type metadata for DispatchData.Region;
}

ValueMetadata *type metadata accessor for DispatchData.Region.Storage()
{
  return &type metadata for DispatchData.Region.Storage;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)( uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a3 - result;
  if (a3 > result)
  {
    while ((unint64_t)(~result + a3) <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v4 == ++v3) {
        goto LABEL_13;
      }
    }

    __break(1u);
    goto LABEL_32;
  }

  if (a3 < result)
  {
    unint64_t v5 = ~a3 + result;
    if (v5 >= (result ^ 0x8000000000000000LL)) {
      unint64_t v5 = result ^ 0x8000000000000000LL;
    }
    unint64_t v6 = 0x8000000000000000LL;
    if (v5 < 0x8000000000000000LL) {
      unint64_t v6 = v5;
    }
    while ((v5 & 0x8000000000000000LL) == 0)
    {
      if ((result ^ 0x8000000000000000LL) == v6) {
        goto LABEL_34;
      }
      if (v4 == --v3)
      {
LABEL_13:
        if (a2 > 0)
        {
          if ((v3 & 0x8000000000000000LL) == 0) {
            goto LABEL_19;
          }
          goto LABEL_20;
        }

        if (v3 >= 1) {
          goto LABEL_26;
        }
        goto LABEL_24;
      }
    }

    goto LABEL_33;
  }

  if (a2 > 0)
  {
LABEL_19:
    if (v3 >= (unint64_t)a2)
    {
LABEL_20:
      unint64_t v7 = result ^ 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v8 = a2 - 1;
      while (v7 > v8)
      {
        ++result;
        if (!--a2) {
          return result;
        }
      }

uint64_t _CalendarProtocol.localeIdentifier.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 32))(v6);
  if (!v6[0]) {
    return 0LL;
  }
  uint64_t v2 = v6[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  swift_unknownObjectRelease();
  return v4;
}

void _CalendarProtocol.gregorianStartDate.getter(uint64_t a1@<X8>)
{
}

uint64_t _CalendarProtocol.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0LL;
  unint64_t v5 = 0xE000000000000000LL;
  (*(void (**)(char *__return_ptr))(a2 + 24))(&v3);
  _print_unlocked<A, B>(_:_:)();
  return v4;
}

uint64_t dispatch thunk of _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void))(a10 + 16))( a1,  a2,  a3,  a4,  a5 & 1,  a6,  a7 & 1);
}

uint64_t dispatch thunk of _CalendarProtocol.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of _CalendarProtocol.locale.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of _CalendarProtocol.localeIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of _CalendarProtocol.preferredFirstWeekday.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of _CalendarProtocol.minimumDaysInFirstWeek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of _CalendarProtocol.preferredMinimumDaysInFirstweek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of _CalendarProtocol.gregorianStartDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of _CalendarProtocol.isAutoupdating.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of _CalendarProtocol.isBridged.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void))(a8 + 112))( a1,  a2,  a3,  a4 & 1,  a5,  a6 & 1);
}

uint64_t dispatch thunk of _CalendarProtocol.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of _CalendarProtocol.minimumRange(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of _CalendarProtocol.maximumRange(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of _CalendarProtocol.range(of:in:for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 144))();
}

uint64_t dispatch thunk of _CalendarProtocol.ordinality(of:in:for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 152))();
}

uint64_t dispatch thunk of _CalendarProtocol.dateInterval(of:for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 160))();
}

uint64_t dispatch thunk of _CalendarProtocol.isDateInWeekend(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 168))();
}

uint64_t dispatch thunk of _CalendarProtocol.date(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t dispatch thunk of _CalendarProtocol.dateComponents(_:from:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 184))();
}

uint64_t dispatch thunk of _CalendarProtocol.dateComponents(_:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 192))();
}

uint64_t dispatch thunk of _CalendarProtocol.date(byAdding:to:wrappingComponents:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 200))();
}

uint64_t dispatch thunk of _CalendarProtocol.dateComponents(_:from:to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 208))();
}

uint64_t protocol witness for _CalendarProtocol.localeIdentifier.getter in conformance _CalendarGregorian()
{
  if (!*(void *)(v0 + 88)) {
    return 0LL;
  }
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t ObjectType = swift_getObjectType();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  swift_unknownObjectRetain();
  uint64_t v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t protocol witness for _CalendarProtocol.localeIdentifier.getter in conformance _CalendarICU()
{
  if (!*(void *)(v0 + 104)) {
    return 0LL;
  }
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t ObjectType = swift_getObjectType();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  swift_unknownObjectRetain();
  uint64_t v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t specialized _CalendarProtocol.localeIdentifier.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v7);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  uint64_t v1 = v7[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v1 + 32))(v8, ObjectType, v1);
  swift_unknownObjectRelease();
  if (!v8[0]) {
    return 0LL;
  }
  uint64_t v3 = v8[1];
  uint64_t v4 = swift_getObjectType();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(v4, v3);
  swift_unknownObjectRelease();
  return v5;
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  uint64_t v1 = (objc_class *)type metadata accessor for __NSConcreteUUID();
  __int128 v4 = *v0;
  uint64_t v2 = (char *)objc_allocWithZone(v1);
  *(_OWORD *)&v2[OBJC_IVAR_____NSConcreteUUID__storage] = v4;
  v5.receiver = v2;
  v5.super_class = v1;
  return (NSUUID)objc_msgSendSuper2(&v5, sel_init);
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  char v13 = 1;
  if (!a1)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t result = specialized static UUID._conditionallyBridgeFromObjectiveC(_:result:)(a1, (uint64_t)&v11);
  if ((result & 1) != 0)
  {
    if ((v13 & 1) == 0)
    {
      unint64_t v5 = v11;
      uint64_t v4 = v12;
      unint64_t v6 = v11 >> 8;
      unint64_t v7 = v11 >> 16;
      *(_BYTE *)a2 = v11;
      *(_BYTE *)(a2 + 1) = v6;
      *(_BYTE *)(a2 + 2) = v7;
      *(_BYTE *)(a2 + 3) = BYTE3(v5);
      *(_BYTE *)(a2 + os_unfair_lock_unlock(*v0 + 4) = BYTE4(v5);
      *(_BYTE *)(a2 + 5) = BYTE5(v5);
      *(_BYTE *)(a2 + 6) = BYTE6(v5);
      *(_BYTE *)(a2 + 7) = HIBYTE(v5);
      *(void *)(a2 + 8) = v4;
      return result;
    }

    goto LABEL_6;
  }

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UUID()
{
  uint64_t v1 = (objc_class *)type metadata accessor for __NSConcreteUUID();
  __int128 v4 = *v0;
  uint64_t v2 = (char *)objc_allocWithZone(v1);
  *(_OWORD *)&v2[OBJC_IVAR_____NSConcreteUUID__storage] = v4;
  v5.receiver = v2;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UUID()
{
  return UUID.uuidString.getter();
}

uint64_t NSUUID._toCustomAnyHashable()()
{
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSUUID()
{
  uint64_t v1 = *v0;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v1, (uint64_t)&v2);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  AnyHashable.init<A>(_:)();
}

objc_super *__NSConcreteUUID.init(coder:)(id a1)
{
  uint64_t v77 = *MEMORY[0x1895F89C0];
  uint64_t v3 = v1;
  if (!objc_msgSend(a1, sel_allowsKeyedCoding))
  {

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x189617FA8];
    *(void *)(inited + 40) = v9;
    *(void *)(inited + 48) = 0xD000000000000026LL;
    *(void *)(inited + 56) = 0x80000001839CC750LL;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    Swift::String v10 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v74);
    uint64_t v11 = v74;
    uint64_t v12 = v75;
    swift_retain();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
    if ((v14 & 1) != 0)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }

    v10[(v13 >> 6) + 8] |= 1LL << v13;
    uint64_t v15 = (uint64_t *)(v10[6] + 16 * v13);
    *uint64_t v15 = v11;
    v15[1] = v12;
    outlined init with take of Any(v76, (_OWORD *)(v10[7] + 32 * v13));
    uint64_t v16 = v10[2];
    BOOL v17 = __OFADD__(v16, 1LL);
    uint64_t v18 = v16 + 1;
    if (v17)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }

    v10[2] = v18;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v19 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v20 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v21 = objc_msgSend(v19, sel_initWithDomain_code_userInfo_, v20, 4864, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v22 = objc_msgSend(v21, sel_domain);
    id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v25 = v24;

    if (v23 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v25 != v26)
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }

      goto LABEL_11;
    }

    goto LABEL_9;
  }

  uint64_t v73 = 0LL;
  uint64_t v4 = String._bridgeToObjectiveCImpl()();
  a1 = a1;
  objc_super v5 = objc_msgSend(a1, sel_decodeBytesForKey_returnedLength_, v4, &v73);
  swift_unknownObjectRelease();
  if (v5)
  {
    if (v73 == 16)
    {
      *(_OWORD *)&v3[OBJC_IVAR_____NSConcreteUUID__storage] = *v5;

      uint64_t v6 = type metadata accessor for __NSConcreteUUID();
      uint64_t v70 = v3;
      unint64_t v7 = (objc_super *)&v70;
LABEL_16:
      v7->super_class = (Class)v6;
      uint64_t v28 = -[objc_super init](v7, sel_init, v70);

      return v28;
    }

    if (objc_msgSend((id)objc_opt_self(), sel__compatibilityBehavior))
    {
      unint64_t v30 = &v3[OBJC_IVAR_____NSConcreteUUID__storage];
      *(void *)unint64_t v30 = 0LL;
      *((void *)v30 + 1) = 0LL;

      uint64_t v6 = type metadata accessor for __NSConcreteUUID();
      uint64_t v71 = v3;
      unint64_t v7 = (objc_super *)&v71;
      goto LABEL_16;
    }
  }

  else
  {
    if (objc_msgSend((id)objc_opt_self(), sel__compatibilityBehavior))
    {
      uint64_t v29 = &v3[OBJC_IVAR_____NSConcreteUUID__storage];
      *(void *)uint64_t v29 = 0LL;
      *((void *)v29 + 1) = 0LL;

      uint64_t v6 = type metadata accessor for __NSConcreteUUID();
      Swift::String v72 = v3;
      unint64_t v7 = (objc_super *)&v72;
      goto LABEL_16;
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v32 = swift_initStackObject();
    *(_OWORD *)(v32 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    *(void *)(v32 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(v32 + 72) = MEMORY[0x189617FA8];
    *(void *)(v32 + 40) = v33;
    *(void *)(v32 + 48) = 0xD00000000000001FLL;
    *(void *)(v32 + 56) = 0x80000001839CEFA0LL;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v34 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(v32 + 32, (uint64_t)&v74);
    uint64_t v35 = v74;
    uint64_t v36 = v75;
    swift_retain();
    unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    if ((v38 & 1) != 0) {
      goto LABEL_33;
    }
    v34[(v37 >> 6) + 8] |= 1LL << v37;
    unint64_t v39 = (uint64_t *)(v34[6] + 16 * v37);
    *unint64_t v39 = v35;
    v39[1] = v36;
    outlined init with take of Any(v76, (_OWORD *)(v34[7] + 32 * v37));
    uint64_t v40 = v34[2];
    BOOL v17 = __OFADD__(v40, 1LL);
    uint64_t v41 = v40 + 1;
    if (v17)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    v34[2] = v41;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v42 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v43 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v44 = objc_msgSend(v42, sel_initWithDomain_code_userInfo_, v43, 4865, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v45 = objc_msgSend(v44, sel_domain);
    id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    uint64_t v48 = v47;

    if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v48 == v49) {
      goto LABEL_9;
    }
    char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v50 & 1) != 0) {
      goto LABEL_11;
    }
    __break(1u);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v51 = swift_initStackObject();
  *(_OWORD *)(v51 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(v51 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(v51 + 72) = MEMORY[0x189617FA8];
  *(void *)(v51 + 40) = v52;
  *(void *)(v51 + 48) = 0xD000000000000027LL;
  *(void *)(v51 + 56) = 0x80000001839CEFC0LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v53 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(v51 + 32, (uint64_t)&v74);
  uint64_t v54 = v74;
  uint64_t v55 = v75;
  swift_retain();
  unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v55);
  if ((v57 & 1) != 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }

  v53[(v56 >> 6) + 8] |= 1LL << v56;
  unint64_t v58 = (uint64_t *)(v53[6] + 16 * v56);
  *unint64_t v58 = v54;
  v58[1] = v55;
  outlined init with take of Any(v76, (_OWORD *)(v53[7] + 32 * v56));
  uint64_t v59 = v53[2];
  BOOL v17 = __OFADD__(v59, 1LL);
  uint64_t v60 = v59 + 1;
  if (v17) {
    goto LABEL_36;
  }
  v53[2] = v60;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v61 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v62 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v63 = objc_msgSend(v61, sel_initWithDomain_code_userInfo_, v62, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v64 = objc_msgSend(v63, sel_domain);
  id v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
  uint64_t v67 = v66;

  if (v65 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v67 == v68)
  {
LABEL_9:
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }

  char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v69 & 1) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }

id __NSConcreteUUID.init(uuidString:)()
{
  uint64_t v1 = v0;
  UUID.init(uuidString:)((uint64_t)v14);
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
    int v6 = HIDWORD(v14[0]);
    uint64_t v5 = v14[1];
    uint64_t v7 = v14[0] >> 8;
    uint64_t v8 = v14[0] >> 16;
    uint64_t v9 = v14[0] >> 24;
    Swift::String v10 = &v1[OBJC_IVAR_____NSConcreteUUID__storage];
    *Swift::String v10 = v14[0];
    v10[1] = v7;
    v10[2] = v8;
    uint64_t v10[3] = v9;
    *((_DWORD *)v10 + 1) = v6;
    *((void *)v10 + 1) = v5;

    uint64_t v3 = type metadata accessor for __NSConcreteUUID();
    uint64_t v12 = v1;
    uint64_t v4 = (objc_super *)&v12;
    goto LABEL_5;
  }

  if (objc_msgSend((id)objc_opt_self(), sel__compatibilityBehavior))
  {
    __int128 v2 = &v1[OBJC_IVAR_____NSConcreteUUID__storage];
    *(void *)__int128 v2 = 0LL;
    *((void *)v2 + 1) = 0LL;

    uint64_t v3 = type metadata accessor for __NSConcreteUUID();
    v13.receiver = v1;
    uint64_t v4 = &v13;
LABEL_5:
    v4->super_class = (Class)v3;
    return -[objc_super init](v4, sel_init);
  }

  type metadata accessor for __NSConcreteUUID();
  swift_deallocPartialClassInstance();
  return 0LL;
}

id __NSConcreteUUID.init(uuidBytes:)(__int128 *a1)
{
  if (a1) {
    __int128 v2 = *a1;
  }
  else {
    __int128 v2 = 0uLL;
  }
  *(_OWORD *)&v1[OBJC_IVAR_____NSConcreteUUID__storage] = v2;
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for __NSConcreteUUID();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t closure #1 in __NSConcreteUUID.debugDescription.getter@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  v4._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 32LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafePointer<__NSConcreteUUID>);
  lazy protocol witness table accessor for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>();
  v6._uint64_t countAndFlagsBits = _Pointer.debugDescription.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 8254LL;
  v7._object = (void *)0xE200000000000000LL;
  String.append(_:)(v7);
  id v8 = objc_msgSend(a1, sel_UUIDString);
  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  v12._uint64_t countAndFlagsBits = (uint64_t)v9;
  v12._object = v11;
  String.append(_:)(v12);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = 60LL;
  a2[1] = 0xE100000000000000LL;
  return result;
}

id __NSConcreteUUID.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for __NSConcreteUUID();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized static UUID._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  type metadata accessor for __NSConcreteUUID();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    __int128 v5 = *(_OWORD *)(v4 + OBJC_IVAR_____NSConcreteUUID__storage);
  }

  else
  {
    __int128 v7 = 0uLL;
    objc_msgSend(a1, sel_getUUIDBytes_, &v7);
    __int128 v5 = v7;
  }

  *(_OWORD *)a2 = v5;
  *(_BYTE *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
  return 1LL;
}

uint64_t specialized static UUID._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result = specialized static UUID._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    type metadata accessor for NSUUID();
    v3._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = 544175136LL;
    v4._object = (void *)0xE400000000000000LL;
    String.append(_:)(v4);
    v5._uint64_t countAndFlagsBits = 1145656661LL;
    v5._object = (void *)0xE400000000000000LL;
    String.append(_:)(v5);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

unint64_t type metadata accessor for NSUUID()
{
  unint64_t result = lazy cache variable for type metadata for NSUUID;
  if (!lazy cache variable for type metadata for NSUUID)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSUUID);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for UUID, &type metadata for UUID);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for UUID, &type metadata for UUID);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for UUID, &type metadata for UUID);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for UUID, &type metadata for UUID);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for UUID, &type metadata for UUID);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for UUID(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type UUID and conformance UUID();
  a1[2] = lazy protocol witness table accessor for type UUID and conformance UUID();
  a1[3] = lazy protocol witness table accessor for type UUID and conformance UUID();
  unint64_t result = lazy protocol witness table accessor for type UUID and conformance UUID();
  a1[4] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UnsafePointer<__NSConcreteUUID>);
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189617C18], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>);
  }

  return result;
}

uint64_t NSComparisonResult.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t NSComparisonResult.init(from:)(void *a1)
{
  uint64_t v3 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  else
  {
    __swift_project_boxed_opaque_existential_1(v5, v5[3]);
    uint64_t v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  return v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSComparisonResult@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v5;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSComparisonResult(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void static CocoaError.fileNoSuchFileError.getter(void *a1@<X8>)
{
  *a1 = 4LL;
}

void static CocoaError.fileLockingError.getter(void *a1@<X8>)
{
  *a1 = 255LL;
}

void static CocoaError.fileReadUnknownError.getter(void *a1@<X8>)
{
  *a1 = 256LL;
}

void static CocoaError.fileReadNoPermissionError.getter(void *a1@<X8>)
{
  *a1 = 257LL;
}

void static CocoaError.fileReadInvalidFileNameError.getter(void *a1@<X8>)
{
  *a1 = 258LL;
}

void static CocoaError.fileReadCorruptFileError.getter(void *a1@<X8>)
{
  *a1 = 259LL;
}

void static CocoaError.fileReadNoSuchFileError.getter(void *a1@<X8>)
{
  *a1 = 260LL;
}

void static CocoaError.fileReadInapplicableStringEncodingError.getter(void *a1@<X8>)
{
  *a1 = 261LL;
}

void static CocoaError.fileReadUnsupportedSchemeError.getter(void *a1@<X8>)
{
  *a1 = 262LL;
}

void static CocoaError.fileReadTooLargeError.getter(void *a1@<X8>)
{
  *a1 = 263LL;
}

void static CocoaError.fileReadUnknownStringEncodingError.getter(void *a1@<X8>)
{
  *a1 = 264LL;
}

void static CocoaError.fileWriteUnknownError.getter(void *a1@<X8>)
{
  *a1 = 512LL;
}

void static CocoaError.fileWriteNoPermissionError.getter(void *a1@<X8>)
{
  *a1 = 513LL;
}

void static CocoaError.fileWriteInvalidFileNameError.getter(void *a1@<X8>)
{
  *a1 = 514LL;
}

void static CocoaError.fileWriteFileExistsError.getter(void *a1@<X8>)
{
  *a1 = 516LL;
}

void static CocoaError.fileWriteInapplicableStringEncodingError.getter(void *a1@<X8>)
{
  *a1 = 517LL;
}

void static CocoaError.fileWriteUnsupportedSchemeError.getter(void *a1@<X8>)
{
  *a1 = 518LL;
}

void static CocoaError.fileWriteOutOfSpaceError.getter(void *a1@<X8>)
{
  *a1 = 640LL;
}

void static CocoaError.fileWriteVolumeReadOnlyError.getter(void *a1@<X8>)
{
  *a1 = 642LL;
}

void static CocoaError.fileManagerUnmountUnknownError.getter(void *a1@<X8>)
{
  *a1 = 768LL;
}

void static CocoaError.fileManagerUnmountBusyError.getter(void *a1@<X8>)
{
  *a1 = 769LL;
}

void static CocoaError.keyValueValidationError.getter(void *a1@<X8>)
{
  *a1 = 1024LL;
}

void static CocoaError.formattingError.getter(void *a1@<X8>)
{
  *a1 = 2048LL;
}

void static CocoaError.userCancelledError.getter(void *a1@<X8>)
{
  *a1 = 3072LL;
}

void static CocoaError.featureUnsupportedError.getter(void *a1@<X8>)
{
  *a1 = 3328LL;
}

void static CocoaError.executableNotLoadableError.getter(void *a1@<X8>)
{
  *a1 = 3584LL;
}

void static CocoaError.executableArchitectureMismatchError.getter(void *a1@<X8>)
{
  *a1 = 3585LL;
}

void static CocoaError.executableRuntimeMismatchError.getter(void *a1@<X8>)
{
  *a1 = 3586LL;
}

void static CocoaError.executableLoadError.getter(void *a1@<X8>)
{
  *a1 = 3587LL;
}

void static CocoaError.executableLinkError.getter(void *a1@<X8>)
{
  *a1 = 3588LL;
}

void static CocoaError.propertyListReadCorruptError.getter(void *a1@<X8>)
{
  *a1 = 3840LL;
}

void static CocoaError.propertyListReadUnknownVersionError.getter(void *a1@<X8>)
{
  *a1 = 3841LL;
}

void static CocoaError.propertyListReadStreamError.getter(void *a1@<X8>)
{
  *a1 = 3842LL;
}

void static CocoaError.propertyListWriteStreamError.getter(void *a1@<X8>)
{
  *a1 = 3851LL;
}

void static CocoaError.propertyListWriteInvalidError.getter(void *a1@<X8>)
{
  *a1 = 3852LL;
}

void static CocoaError.ubiquitousFileUnavailableError.getter(void *a1@<X8>)
{
  *a1 = 4353LL;
}

void static CocoaError.ubiquitousFileNotUploadedDueToQuotaError.getter(void *a1@<X8>)
{
  *a1 = 4354LL;
}

void static CocoaError.userActivityHandoffFailedError.getter(void *a1@<X8>)
{
  *a1 = 4608LL;
}

void static CocoaError.userActivityConnectionUnavailableError.getter(void *a1@<X8>)
{
  *a1 = 4609LL;
}

void static CocoaError.userActivityRemoteApplicationTimedOutError.getter(void *a1@<X8>)
{
  *a1 = 4610LL;
}

void static CocoaError.userActivityHandoffUserInfoTooLargeError.getter(void *a1@<X8>)
{
  *a1 = 4611LL;
}

void static CocoaError.coderReadCorruptError.getter(void *a1@<X8>)
{
  *a1 = 4864LL;
}

void static CocoaError.coderValueNotFoundError.getter(void *a1@<X8>)
{
  *a1 = 4865LL;
}

uint64_t static TimeZone.tryParseGMTName(_:)()
{
  return specialized static TimeZone.tryParseGMTName(_:)();
}

void _TimeZoneGMT.__allocating_init(identifier:)()
{
}

void *_TimeZoneGMT.init(secondsFromGMT:)(uint64_t a1)
{
  uint64_t v3 = specialized static TimeZone.nameForSecondsFromGMT(_:)(a1);
  if (v4)
  {
    v1[3] = v3;
    v1[4] = v4;
    v1[2] = a1;
  }

  else
  {
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  return v1;
}

Swift::tuple_rawOffset_Int_daylightSavingOffset_Double __swiftcall _TimeZoneGMT.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)( Foundation::Date a1, Foundation::TimeZone::DaylightSavingTimePolicy repeatedTimePolicy, Foundation::TimeZone::DaylightSavingTimePolicy skippedTimePolicy)
{
  Swift::Int v4 = *(void *)(v3 + 16);
  double v5 = 0.0;
  result.daylightSavingOffset = v5;
  result.rawOffset = v4;
  return result;
}

uint64_t _TimeZoneGMT.debugDescription.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x7366666F20746D67LL;
}

uint64_t _TimeZoneGMT.deinit()
{
  return v0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _TimeZoneGMT()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x7366666F20746D67LL;
}

uint64_t specialized static TimeZone.nameForSecondsFromGMT(_:)(uint64_t a1)
{
  uint64_t v1 = 5524807LL;
  if (a1 >= 0) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = -a1;
  }
  unsigned __int16 v4 = (unsigned __int16)(v3 + 30) % 0xE10u;
  if (v3 > 0xDF1 || (unsigned __int16)(v3 + 30) % 0xE10u >= 0x3C)
  {
    if (v3 > 0x8C81)
    {
      uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
      Swift::String v6 = v8;
    }

    else
    {
      v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      uint64_t v7 = 48LL;
      Swift::String v6 = (void *)0xE100000000000000LL;
    }

    if (v4 > 0x257u)
    {
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      Swift::String v10 = v12;
    }

    else
    {
      v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      uint64_t v11 = 48LL;
      Swift::String v10 = (void *)0xE100000000000000LL;
    }

    if (a1 >= 0) {
      uint64_t v13 = 43LL;
    }
    else {
      uint64_t v13 = 45LL;
    }
    unint64_t v14 = 0xE100000000000000LL;
    String.append(_:)(*(Swift::String *)&v13);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = v7;
    v15._object = v6;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = v11;
    v16._object = v10;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    return 5524807LL;
  }

  return v1;
}

uint64_t specialized static TimeZone.tryParseGMTName(_:)()
{
  uint64_t v0 = String.count.getter();
  unint64_t v1 = v0;
  char v2 = specialized Sequence<>.starts<A>(with:)();
  char v3 = specialized Sequence<>.starts<A>(with:)();
  if ((v2 & 1) == 0 && (v3 & 1) == 0) {
    return 0LL;
  }
  if (v1 == 3) {
    return 0LL;
  }
  if (v1 < 5) {
    return 0LL;
  }
  String.index(_:offsetBy:)();
  uint64_t v6 = String.subscript.getter();
  uint64_t v7 = v5;
  if (v6 == 43 && v5 == 0xE100000000000000LL)
  {
    char v8 = 1;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (v6 == 45 && v7 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
      char v9 = 1;
      goto LABEL_17;
    }
  }

  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  char v9 = v8 ^ 1 | v10;
  if ((v8 & 1) == 0 && (v10 & 1) == 0) {
    return 0LL;
  }
LABEL_17:
  String.index(after:)();
  String.subscript.getter();
  __int16 v11 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  uint64_t result = 0LL;
  unint64_t v12 = (v11 - 48);
  if (v1 == 5)
  {
    if ((v9 & 1) != 0) {
      return -3600LL * (int)v12;
    }
    return 3600LL * v12;
  }

  String.index(after:)();
  String.subscript.getter();
  __int16 v13 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  if ((v13 & 0x100) != 0) {
    return 0LL;
  }
  if (v13 > 0x2Fu)
  {
    if (v13 != 58)
    {
      unint64_t v12 = 10LL * v12 + (v13 - 48);
      if (v12 > 0x12) {
        return 0LL;
      }
      if (v1 == 6)
      {
        if ((v9 & 1) != 0) {
          return -3600LL * (int)v12;
        }
        return 3600LL * v12;
      }
    }
  }

  else if (v13 != 46)
  {
    return 0LL;
  }

  if (v1 < 8) {
    return 0LL;
  }
  String.index(after:)();
  String.subscript.getter();
  __int16 v14 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  if ((v14 & 0x100) != 0) {
    return 0LL;
  }
  if (v14 < 0x30u)
  {
    uint64_t result = 0LL;
    goto LABEL_40;
  }

  if (v14 == 58)
  {
    if (v1 == 9)
    {
LABEL_40:
      String.index(after:)();
      goto LABEL_43;
    }

    return 0LL;
  }

  uint64_t result = 0LL;
LABEL_43:
  String.subscript.getter();
  __int16 v15 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  String.index(after:)();
  String.subscript.getter();
  __int16 v16 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  uint64_t result = 0LL;
  if ((v15 & 0x100) != 0) {
    unsigned __int8 v17 = 0;
  }
  else {
    unsigned __int8 v17 = v15;
  }
  int v18 = v17 - 48;
  if ((v18 & 0xFFFFFF00) != 0)
  {
    __break(1u);
    goto LABEL_58;
  }

  __int16 v19 = 10 * v18;
  if ((v19 & 0xF00) != 0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  unsigned int v20 = v19 + (v16 - 48);
  if (((v20 >> 8) & 1) != 0)
  {
LABEL_59:
    __break(1u);
    return result;
  }

  if (v12 == 18 && (_BYTE)v20) {
    return 0LL;
  }
  if ((v9 & 1) != 0) {
    return -3600LL * (int)v12 - 60LL * v20;
  }
  return 3600LL * v12 + 60LL * v20;
}

uint64_t specialized static _TimeZoneGMT.abbreviation(for:)(uint64_t a1)
{
  uint64_t result = 5524807LL;
  if (a1 >= 0) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = -a1;
  }
  if (v3 > 0xDF1 || (unsigned __int16)(v3 + 30) % 0xE10u >= 0x3C)
  {
    if (a1 >= 0) {
      uint64_t v4 = 43LL;
    }
    else {
      uint64_t v4 = 45LL;
    }
    unint64_t v5 = 0xE100000000000000LL;
    String.append(_:)(*(Swift::String *)&v4);
    if (v3 >= 0x8C82) {
      String.UnicodeScalarView.append(_:)();
    }
    String.UnicodeScalarView.append(_:)();
    uint64_t result = 5524807LL;
    if ((unsigned __int16)(v3 + 30) % 0xE10u >= 0x3C)
    {
      String.UnicodeScalarView.append(_:)();
      String.UnicodeScalarView.append(_:)();
      String.UnicodeScalarView.append(_:)();
      return 5524807LL;
    }
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneGMT(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _TimeZoneGMT and conformance _TimeZoneGMT();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneGMT and conformance _TimeZoneGMT()
{
  unint64_t result = lazy protocol witness table cache variable for type _TimeZoneGMT and conformance _TimeZoneGMT;
  if (!lazy protocol witness table cache variable for type _TimeZoneGMT and conformance _TimeZoneGMT)
  {
    uint64_t v1 = type metadata accessor for _TimeZoneGMT();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _TimeZoneGMT, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneGMT and conformance _TimeZoneGMT);
  }

  return result;
}

uint64_t type metadata accessor for _TimeZoneGMT()
{
  return objc_opt_self();
}

uint64_t method lookup function for _TimeZoneGMT()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _TimeZoneGMT.__allocating_init(identifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of _TimeZoneGMT.__allocating_init(secondsFromGMT:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t destroy for _FileManagerImpl()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for _FileManagerImpl(uint64_t a1)
{
  return a1;
}

uint64_t assignWithCopy for _FileManagerImpl(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for _FileManagerImpl(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for _FileManagerImpl(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for _FileManagerImpl()
{
  return &type metadata for _FileManagerImpl;
}

Swift::Bool __swiftcall _FileManagerImpl.contentsEqual(atPath:andPath:)(Swift::String atPath, Swift::String andPath)
{
  uint64_t v4 = v2;
  Swift::String v89 = andPath;
  unint64_t object = (unint64_t)atPath._object;
  id countAndFlagsBits = (id)atPath._countAndFlagsBits;
  uint64_t v104 = *MEMORY[0x1895F89C0];
  uint64_t v7 = MEMORY[0x186E20F44]();
  if (!v7) {
    goto LABEL_71;
  }
  char v8 = (void *)v7;
  v9._id countAndFlagsBits = (uint64_t)countAndFlagsBits;
  v9._unint64_t object = (void *)object;
  NSFileManager._fileStat(_:)(&v92, v9);

  outlined init with take of stat?((uint64_t)&v92, (uint64_t)&v99);
  int v10 = v99;
  LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v100;
  uint64_t v11 = v101;
  int v12 = v102;
  uint64_t v13 = v103;
  uint64_t v14 = MEMORY[0x186E20F44](v4);
  if (!v14) {
    goto LABEL_71;
  }
  __int16 v15 = (void *)v14;
  NSFileManager._fileStat(_:)(&v93, v89);

  outlined init with take of stat?((uint64_t)&v93, (uint64_t)&v94);
  id v88 = countAndFlagsBits;
  id countAndFlagsBits = (id)object;
  unint64_t object = v97;
  uint64_t v18 = v98;
  if (v10 == v94 && v11 == v96)
  {
    char v16 = 1;
    return v16 & 1;
  }

  int v19 = v95;
  int v20 = S_IFMT.getter() & v3;
  int v21 = S_IFMT.getter() & v3;
  if (v21 == (unsigned __int16)S_IFBLK.getter() || v21 == (unsigned __int16)S_IFCHR.getter())
  {
    char v16 = v12 == (_DWORD)object;
    return v16 & 1;
  }

  int v22 = S_IFMT.getter() & v3;
  if (v22 == (unsigned __int16)S_IFREG.getter())
  {
    if (v13 == v18)
    {
      uint64_t v23 = MEMORY[0x186E20F44](v4);
      if (v23)
      {
        uint64_t v24 = (void *)v23;
        MEMORY[0x1895F8858](v23);
        v82[2] = v4;
        Swift::String v83 = v89;
        char v16 = specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)( (uint64_t)v88,  (unint64_t)countAndFlagsBits,  (void (*)(_BYTE *))partial apply for closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:),  (uint64_t)v82);

        return v16 & 1;
      }

uint64_t specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)( uint64_t a1, unint64_t a2, uint64_t (*a3)(char *), uint64_t a4)
{
  uint64_t v6 = v4;
  v19[131] = *MEMORY[0x1895F89C0];
  uint64_t ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager()) {
    return specialized String.withFileSystemRepresentation<A>(_:)(a3, a4, a1, a2);
  }
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    unsigned __int8 v13 = objc_msgSend( v6,  sel_getFileSystemRepresentation_maxLength_withPath_,  v19,  1026,  String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v13 & 1) != 0) {
      uint64_t v14 = (char *)v19;
    }
    else {
      uint64_t v14 = 0LL;
    }
    uint64_t result = a3(v14);
    if (v5) {
      return swift_willThrow();
    }
  }

  else
  {
    uint64_t v16 = swift_slowAlloc();
    unsigned __int8 v17 = objc_msgSend( v6,  sel_getFileSystemRepresentation_maxLength_withPath_,  v16,  1026,  String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v17 & 1) != 0) {
      uint64_t v18 = (char *)v16;
    }
    else {
      uint64_t v18 = 0LL;
    }
    a3(v18);
    return MEMORY[0x186E20E60](v16, -1LL, -1LL);
  }

  return result;
}

uint64_t specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)( uint64_t a1, unint64_t a2, void (*a3)(char *), uint64_t a4)
{
  uint64_t v6 = v4;
  v19[133] = *MEMORY[0x1895F89C0];
  uint64_t ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager()) {
    return specialized String.withFileSystemRepresentation<A>(_:)(a3, a4, a1, a2);
  }
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    unsigned __int8 v13 = objc_msgSend( v6,  sel_getFileSystemRepresentation_maxLength_withPath_,  v19,  1026,  String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v13 & 1) != 0) {
      uint64_t v14 = (char *)v19;
    }
    else {
      uint64_t v14 = 0LL;
    }
    a3(v14);
    if (v5) {
      return swift_willThrow();
    }
    else {
      return v19[131];
    }
  }

  else
  {
    uint64_t v16 = swift_slowAlloc();
    unsigned __int8 v17 = objc_msgSend( v6,  sel_getFileSystemRepresentation_maxLength_withPath_,  v16,  1026,  String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v17 & 1) != 0) {
      uint64_t v18 = (char *)v16;
    }
    else {
      uint64_t v18 = 0LL;
    }
    a3(v18);
    if (v5)
    {
      return MEMORY[0x186E20E60](v16, -1LL, -1LL);
    }

    else
    {
      MEMORY[0x186E20E60](v16, -1LL, -1LL);
      return v19[132];
    }
  }

{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t ObjectType;
  uint64_t isStackAllocationSafe;
  unsigned __int8 v13;
  char *v14;
  uint64_t v16;
  unsigned __int8 v17;
  char *v18;
  void v19[136];
  uint64_t v6 = v4;
  v19[135] = *MEMORY[0x1895F89C0];
  uint64_t ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager()) {
    return specialized String.withFileSystemRepresentation<A>(_:)(a3, a4, a1, a2);
  }
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    unsigned __int8 v13 = objc_msgSend( v6,  sel_getFileSystemRepresentation_maxLength_withPath_,  v19,  1026,  String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v13 & 1) != 0) {
      uint64_t v14 = (char *)v19;
    }
    else {
      uint64_t v14 = 0LL;
    }
    a3(v14);
    if (v5) {
      return swift_willThrow();
    }
    else {
      return v19[131];
    }
  }

  else
  {
    uint64_t v16 = swift_slowAlloc();
    unsigned __int8 v17 = objc_msgSend( v6,  sel_getFileSystemRepresentation_maxLength_withPath_,  v16,  1026,  String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v17 & 1) != 0) {
      uint64_t v18 = (char *)v16;
    }
    else {
      uint64_t v18 = 0LL;
    }
    a3(v18);
    if (v5)
    {
      return MEMORY[0x186E20E60](v16, -1LL, -1LL);
    }

    else
    {
      MEMORY[0x186E20E60](v16, -1LL, -1LL);
      return v19[133];
    }
  }

uint64_t specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)( uint64_t a1, unint64_t a2, void (*a3)(_BYTE *), uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager())
  {
    char v15 = specialized String.withFileSystemRepresentation<A>(_:)(a3, a4, a1, a2);
  }

  else
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) != 0)
    {
      MEMORY[0x1895F8858](isStackAllocationSafe);
      unsigned __int8 v13 = objc_msgSend( v6,  sel_getFileSystemRepresentation_maxLength_withPath_,  v20,  1026,  String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease();
      if ((v13 & 1) != 0) {
        uint64_t v14 = v20;
      }
      else {
        uint64_t v14 = 0LL;
      }
      a3(v14);
      if (v5) {
        char v15 = swift_willThrow();
      }
      else {
        char v15 = v20[1046];
      }
    }

    else
    {
      uint64_t v16 = swift_slowAlloc();
      unsigned __int8 v17 = objc_msgSend( v6,  sel_getFileSystemRepresentation_maxLength_withPath_,  v16,  1026,  String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease();
      if ((v17 & 1) != 0) {
        uint64_t v18 = (_BYTE *)v16;
      }
      else {
        uint64_t v18 = 0LL;
      }
      a3(v18);
      if (v5)
      {
        char v15 = MEMORY[0x186E20E60](v16, -1LL, -1LL);
      }

      else
      {
        MEMORY[0x186E20E60](v16, -1LL, -1LL);
        char v15 = v20[1047];
      }
    }
  }

  return v15 & 1;
}

void __swiftcall NSFileManager._fileStat(_:)(stat_optional *__return_ptr retstr, Swift::String a2)
{
  uint64_t v3 = v2;
  unint64_t object = (unint64_t)a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager())
  {
    if ((object & 0x1000000000000000LL) != 0)
    {
      Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
    }

    else if ((object & 0x2000000000000000LL) != 0)
    {
      Swift::Int isStackAllocationSafe = HIBYTE(object) & 0xF;
    }

    else
    {
      Swift::Int isStackAllocationSafe = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }

    uint64_t v12 = 3 * isStackAllocationSafe;
    if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 == (3 * isStackAllocationSafe) >> 63)
    {
      if (v12 >= -1)
      {
        uint64_t v13 = v12 + 1;
        if (v12 < 1024
          || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1895F8858](isStackAllocationSafe);
          Swift::String v9 = (char *)&v22 - v14;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v9, v13, 1, countAndFlagsBits, object);
          char v16 = v15;
          swift_bridgeObjectRelease();
          if ((v16 & 1) != 0) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }

        unsigned __int8 v17 = (const char *)swift_slowAlloc();
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v17, v13, 1, countAndFlagsBits, object);
        char v20 = v19;
        swift_bridgeObjectRelease();
        if ((v20 & 1) != 0) {
          goto LABEL_22;
        }
LABEL_21:
        memset(&v23, 0, 28);
        memset(&v23.st_atimespec, 0, 112);
        if (!lstat(v17, &v23))
        {
          stat v25 = v23;
          _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi_((uint64_t)&v25);
          goto LABEL_23;
        }

unint64_t _openFD #1 (_:) in _FileManagerImpl.contentsEqual(atPath:andPath:)()
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  memset(&v6, 0, 28);
  memset(&v6.st_atimespec, 0, 112);
  int v0 = open(_:_:_:)();
  if ((v0 & 0x80000000) == 0)
  {
    unsigned int v1 = v0;
    if ((fstat(v0, &v6) & 0x80000000) == 0)
    {
      int st_mode = v6.st_mode;
      int v3 = S_IFMT.getter() & st_mode;
      if (v3 != (unsigned __int16)S_IFDIR.getter())
      {
        unsigned __int8 v4 = 0;
        goto LABEL_6;
      }
    }

    close(v1);
  }

  unsigned int v1 = 0;
  unsigned __int8 v4 = 1;
LABEL_6:
  LOBYTE(v6.st_dev) = v4;
  return v1 | ((unint64_t)v4 << 32);
}

unint64_t closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)@<X0>( unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  if (!result
    || (uint64_t result = _openFD #1 (_:) in _FileManagerImpl.contentsEqual(atPath:andPath:)(), (result & 0x100000000LL) != 0))
  {
    *a5 = 0;
  }

  else
  {
    int v9 = result;
    uint64_t v10 = MEMORY[0x186E20F44](a2);
    if (v10)
    {
      uint64_t v11 = (void *)v10;
      MEMORY[0x1895F8858](v10);
      v13[4] = v9;
      char v12 = specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)( a3,  a4,  (void (*)(_BYTE *))partial apply for closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:),  (uint64_t)v13);

      *a5 = v12 & 1;
      return close(v9);
    }

    else
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }

  return result;
}

unint64_t closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)@<X0>( unint64_t result@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (!result
    || (uint64_t result = _openFD #1 (_:) in _FileManagerImpl.contentsEqual(atPath:andPath:)(), (result & 0x100000000LL) != 0))
  {
    *a3 = 0;
    return result;
  }

  unint64_t v6 = result;
  MEMORY[0x186E1B100](a2, 48LL, 1LL);
  MEMORY[0x186E1B100](v6, 48LL, 1LL);
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    uint64_t v8 = &v10;
    MEMORY[0x1895F8858](isStackAllocationSafe);
    closure #1 in closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)( &v9,  0x2000uLL,  0x2000LL,  a2,  v6,  (BOOL *)&v10 + 7);
    if (!v3)
    {
      *a3 = HIBYTE(v10);
      return close(v6);
    }

    swift_willThrow();

    __break(1u);
  }

  else
  {
    uint64_t v8 = (uint64_t *)swift_slowAlloc();
    closure #1 in closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)( v8,  0x2000uLL,  0x2000LL,  a2,  v6,  a3);
    if (!v3)
    {
      MEMORY[0x186E20E60](v8, -1LL, -1LL);
      return close(v6);
    }
  }

  uint64_t result = MEMORY[0x186E20E60](v8, -1LL, -1LL);
  __break(1u);
  return result;
}

void closure #1 in closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)( void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, BOOL *a6@<X8>)
{
  v20[1] = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if ((a2 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
    }

    if (a2) {
      bzero(a1, a2);
    }
  }

  if (a3 < 0) {
    goto LABEL_29;
  }
  if (a3 <= 1024)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v13 = (char *)v20 - v14;
    if (!a3)
    {
LABEL_12:
      if (a1)
      {
        while (1)
        {
          ssize_t v15 = read(a4, a1, a3);
          if (v15 <= 0) {
            break;
          }
          if (read(a5, v13, a3) != v15
            || (specialized Sequence<>.elementsEqual<A>(_:)((unsigned __int8 *)v13, a3, (unsigned __int8 *)a1, a2) & 1) == 0)
          {
            BOOL v16 = 0;
            goto LABEL_18;
          }
        }

        BOOL v16 = v15 > -2;
LABEL_18:
        *a6 = v16;
        return;
      }

      __break(1u);
LABEL_31:
      __break(1u);
      return;
    }

    if (a3 >= 1)
    {
LABEL_11:
      bzero(v13, a3);
      goto LABEL_12;
    }

    goto LABEL_28;
  }

  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((_DWORD)isStackAllocationSafe)
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v13 = (char *)v20 - ((a3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    goto LABEL_11;
  }

  unsigned __int8 v17 = (void *)swift_slowAlloc();
  bzero(v17, a3);
  if (!a1) {
    goto LABEL_31;
  }
  while (1)
  {
    ssize_t v18 = read(a4, a1, a3);
    if (v18 <= 0) {
      break;
    }
    if (read(a5, v17, a3) != v18
      || (specialized Sequence<>.elementsEqual<A>(_:)((unsigned __int8 *)v17, a3, (unsigned __int8 *)a1, a2) & 1) == 0)
    {
      BOOL v19 = 0;
      goto LABEL_25;
    }
  }

  BOOL v19 = v18 > -2;
LABEL_25:
  *a6 = v19;
  MEMORY[0x186E20E60](v17, -1LL, -1LL);
}

uint64_t outlined init with take of stat?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for stat?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UInt16 and conformance UInt16()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt16 and conformance UInt16;
  if (!lazy protocol witness table cache variable for type UInt16 and conformance UInt16)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A820], MEMORY[0x18961A800]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UInt16 and conformance UInt16);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type UInt16 and conformance UInt16;
  if (!lazy protocol witness table cache variable for type UInt16 and conformance UInt16)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A828], MEMORY[0x18961A800]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UInt16 and conformance UInt16);
  }

  return result;
}

unint64_t partial apply for closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)@<X0>( unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  a2);
}

unint64_t type metadata accessor for NSFileManager()
{
  unint64_t result = lazy cache variable for type metadata for NSFileManager;
  if (!lazy cache variable for type metadata for NSFileManager)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSFileManager);
  }

  return result;
}

unint64_t partial apply for closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)@<X0>( unint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)(a1, *(unsigned int *)(v2 + 16), a2);
}

double _sSo4statVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = 0u;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 14os_unfair_lock_unlock(*v0 + 4) = 1;
  return result;
}

double UUID.init()@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  *(_OWORD *)int v3 = 0uLL;
  _foundation_uuid_generate_random((unsigned __int8 *)v3);
  double result = v3[0];
  *a1 = *(_OWORD *)v3;
  return result;
}

uint64_t UUID.init(uuid:)@<X0>( uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, int a10, int a11)
{
  *(_BYTE *)a9 = result;
  *(_BYTE *)(a9 + 1) = a2;
  *(_BYTE *)(a9 + 2) = a3;
  *(_BYTE *)(a9 + 3) = a4;
  *(_BYTE *)(a9 + os_unfair_lock_unlock(*v0 + 4) = a5;
  *(_BYTE *)(a9 + 5) = a6;
  *(_BYTE *)(a9 + 6) = a7;
  *(_BYTE *)(a9 + 7) = a8;
  *(_DWORD *)(a9 + 8) = a10;
  *(_DWORD *)(a9 + 12) = a11;
  return result;
}

uint64_t UUID.debugDescription.getter()
{
  return UUID.uuidString.getter();
}

uint64_t UUID.init(uuidString:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  *(_OWORD *)unint64_t v6 = 0uLL;
  uint64_t v2 = String.utf8CString.getter();
  int v3 = _foundation_uuid_parse((const char *)(v2 + 32), v6);
  uint64_t result = swift_release();
  if (v3) {
    __int128 v5 = 0uLL;
  }
  else {
    __int128 v5 = *(_OWORD *)v6;
  }
  *(_OWORD *)a1 = v5;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3 != 0;
  return result;
}

uint64_t UUID.uuid.getter()
{
  return *(void *)v0;
}

uint64_t UUID.hash(into:)()
{
  return Hasher.combine(bytes:)();
}

uint64_t UUID.description.getter()
{
  return UUID.uuidString.getter();
}

BOOL static UUID.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int UUID.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UUID()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UUID()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UUID(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t UUID.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v13 = *v0;
  v12[1] = MEMORY[0x18961AFE8];
  uint64_t v8 = *MEMORY[0x18961A718];
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x18961A748], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance UUID()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v13 = *v0;
  v12[1] = MEMORY[0x18961AFE8];
  uint64_t v8 = *MEMORY[0x18961A718];
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x18961A748], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t UUID.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v29, v29[3]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    UUID.init(uuidString:)((uint64_t)&v26);
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0)
    {
      uint64_t v5 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v7 = v6;
      uint64_t v8 = a1[3];
      uint64_t v9 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v8);
      MEMORY[0x186E1CF78](v8, v9);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104LL))( v7,  *MEMORY[0x189619360],  v5);
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    }

    else
    {
      char v11 = v26;
      char v10 = v27;
      unint64_t v12 = v26 >> 8;
      unint64_t v13 = v26 >> 16;
      unint64_t v14 = v26 >> 24;
      unint64_t v15 = HIDWORD(v26);
      unint64_t v17 = v26 >> 40;
      unint64_t v18 = HIWORD(v26);
      unint64_t v19 = HIBYTE(v26);
      unint64_t v20 = v27 >> 8;
      unint64_t v21 = v27 >> 16;
      unint64_t v22 = v27 >> 24;
      unint64_t v23 = HIDWORD(v27);
      unint64_t v24 = v27 >> 40;
      unint64_t v25 = HIWORD(v27);
      unint64_t v30 = HIBYTE(v27);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
      *a2 = v11;
      a2[1] = v12;
      a2[2] = v13;
      a2[3] = v14;
      a2[4] = v15;
      a2[5] = v17;
      a2[6] = v18;
      a2[7] = v19;
      a2[8] = v10;
      a2[9] = v20;
      a2[10] = v21;
      a2[11] = v22;
      a2[12] = v23;
      a2[13] = v24;
      a2[14] = v25;
      a2[15] = v30;
    }
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t UUID.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UUID@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  return UUID.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UUID(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance UUID(__int128 *a1, __int128 *a2)
{
  __int128 v2 = *a1;
  __int128 v4 = *a2;
  __int128 v5 = v2;
  return (specialized static UUID.< infix(_:_:)(&v4, &v5) & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance UUID(__int128 *a1, __int128 *a2)
{
  __int128 v2 = *a1;
  __int128 v4 = *a2;
  __int128 v5 = v2;
  return (specialized static UUID.< infix(_:_:)(&v5, &v4) & 1) == 0;
}

unint64_t protocol witness for static Comparable.> infix(_:_:) in conformance UUID( __int128 *a1, __int128 *a2)
{
  __int128 v2 = *a1;
  __int128 v4 = *a2;
  __int128 v5 = v2;
  return specialized static UUID.< infix(_:_:)(&v4, &v5) & 1;
}

unint64_t specialized static UUID.< infix(_:_:)(__int128 *a1, __int128 *a2)
{
  unint64_t v2 = 0LL;
  uint64_t v9 = *MEMORY[0x1895F89C0];
  __int128 v3 = *a1;
  __int128 v7 = *a2;
  __int128 v8 = v3;
  for (uint64_t i = 15LL; i != -1; --i)
  {
    unint64_t v5 = *((unsigned __int8 *)&v8 + i) - (unint64_t)*((unsigned __int8 *)&v7 + i);
    unint64_t v2 = v2 & ((uint64_t)((v5 - 1) & ~v5) >> 8) | v5;
  }

  return v2 >> 63;
}

__n128 __swift_memcpy16_1(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

Swift::String_optional __swiftcall ICU.CaseMap.lowercase(_:)(Swift::String a1)
{
  uint64_t v1 = ICU.CaseMap.lowercase(_:)(a1._countAndFlagsBits, (uint64_t)a1._object, MEMORY[0x189615660]);
  result.value._unint64_t object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

Swift::String_optional __swiftcall ICU.CaseMap.uppercase(_:)(Swift::String a1)
{
  uint64_t v1 = ICU.CaseMap.lowercase(_:)(a1._countAndFlagsBits, (uint64_t)a1._object, MEMORY[0x189615670]);
  result.value._unint64_t object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t ICU.CaseMap.lowercase(_:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _BYTE *, uint64_t, uint64_t, unint64_t, int *))
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v5 = String.utf8CString.getter();
  unint64_t v6 = *(void *)(v5 + 16);
  int v22 = 0;
  if (v6 >> 31)
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }

  uint64_t v7 = v5 + 32;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t isStackAllocationSafe = a3(v8, v23, 32LL, v5 + 32, v6, &v22);
  if (v22 != 15)
  {
    if (v22 > 0 || (int)isStackAllocationSafe <= 0)
    {
      uint64_t v15 = 0LL;
    }

    else
    {
      v23[isStackAllocationSafe] = 0;
      uint64_t v15 = MEMORY[0x186E1B634](v23);
    }

    goto LABEL_21;
  }

  uint64_t v10 = (isStackAllocationSafe + 1);
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1)) {
    goto LABEL_23;
  }
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_24;
  }
  if ((int)v10 < 1025
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __n128 v11 = MEMORY[0x1895F8858](isStackAllocationSafe);
    unint64_t v13 = &v20[-v12];
    int v21 = 0;
    int v14 = ((uint64_t (*)(uint64_t, _BYTE *, uint64_t, uint64_t, unint64_t, int *, __n128))a3)( v8,  &v20[-v12],  v10,  v7,  v6,  &v21,  v11);
    uint64_t v15 = 0LL;
    if (v21 <= 0 && v14 >= 1)
    {
      v13[v14] = 0;
      uint64_t v15 = MEMORY[0x186E1B634](v13);
    }
  }

  else
  {
    uint64_t v17 = swift_slowAlloc();
    int v21 = 0;
    int v18 = a3(v8, (_BYTE *)v17, v10, v7, v6, &v21);
    uint64_t v15 = 0LL;
    if (v21 <= 0 && v18 >= 1)
    {
      *(_BYTE *)(v17 + v18) = 0;
      uint64_t v15 = MEMORY[0x186E1B634](v17);
    }

    MEMORY[0x186E20E60](v17, -1LL, -1LL);
  }

uint64_t ICU.CaseMap.init(localeID:)()
{
  uint64_t v1 = ucasemap_open();
  swift_release();
  if (!v1) {
    __break(1u);
  }
  *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
  *(void *)(v0 + 2os_unfair_lock_unlock(*v0 + 4) = v2;
  return v0;
}

uint64_t ICU.CaseMap.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICU.CaseMap()
{
  return objc_opt_self();
}

uint64_t one-time initialization function for _cache()
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 2os_unfair_lock_unlock(*v0 + 4) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFF0];
  static ICU.CaseMap._cache = result;
  return result;
}

uint64_t closure #1 in static ICU.CaseMap.caseMappingForLocale(_:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)result;
  if (*(void *)(*(void *)result + 16LL))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(*(void *)(v5 + 56) + 8 * v8);
      swift_retain();
    }

    else
    {
      uint64_t v10 = 0LL;
    }

    uint64_t result = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  *a4 = v10;
  return result;
}

uint64_t closure #2 in static ICU.CaseMap.caseMappingForLocale(_:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = *a1;
  uint64_t v10 = *a1;
  *a1 = 0x8000000000000000LL;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v4 = v11;
    if (*(void *)(v10 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v15,  isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v43;
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v18 & 1)) {
        goto LABEL_47;
      }
      unint64_t v12 = v17;
      if ((v4 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      uint64_t v19 = *(void *)(v16 + 56);
      swift_release();
      *(void *)(v19 + 8 * v12) = a4;
LABEL_44:
      *a1 = v16;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v16 = v10;
      if ((v11 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a4, v16);
      swift_bridgeObjectRetain();
      goto LABEL_44;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ICU.CaseMap>);
  uint64_t v20 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v20;
  if (!*(void *)(v10 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }

  int v21 = (void *)(v20 + 64);
  unint64_t v22 = (unint64_t)((1LL << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  uint64_t v40 = v10 + 64;
  int64_t v23 = 0LL;
  *(void *)(v16 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v10 + 16);
  uint64_t v24 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v25 = -1LL;
  if (v24 < 64) {
    uint64_t v25 = ~(-1LL << v24);
  }
  unint64_t v26 = v25 & *(void *)(v10 + 64);
  int64_t v41 = (unint64_t)(v24 + 63) >> 6;
  while (1)
  {
    if (v26)
    {
      unint64_t v27 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      int64_t v42 = v23;
      unint64_t v28 = v27 | (v23 << 6);
      goto LABEL_18;
    }

    int64_t v35 = v23 + 1;
    if (__OFADD__(v23, 1LL))
    {
      __break(1u);
      goto LABEL_46;
    }

    if (v35 >= v41) {
      goto LABEL_42;
    }
    unint64_t v36 = *(void *)(v40 + 8 * v35);
    int64_t v37 = v23 + 1;
    if (!v36)
    {
      int64_t v37 = v23 + 2;
      if (v23 + 2 >= v41) {
        goto LABEL_42;
      }
      unint64_t v36 = *(void *)(v40 + 8 * v37);
      if (!v36)
      {
        int64_t v37 = v23 + 3;
        if (v23 + 3 >= v41) {
          goto LABEL_42;
        }
        unint64_t v36 = *(void *)(v40 + 8 * v37);
        if (!v36)
        {
          int64_t v37 = v23 + 4;
          if (v23 + 4 >= v41) {
            goto LABEL_42;
          }
          unint64_t v36 = *(void *)(v40 + 8 * v37);
          if (!v36)
          {
            int64_t v37 = v23 + 5;
            if (v23 + 5 >= v41) {
              goto LABEL_42;
            }
            unint64_t v36 = *(void *)(v40 + 8 * v37);
            if (!v36)
            {
              int64_t v37 = v23 + 6;
              if (v23 + 6 >= v41) {
                goto LABEL_42;
              }
              unint64_t v36 = *(void *)(v40 + 8 * v37);
              if (!v36)
              {
                int64_t v37 = v23 + 7;
                if (v23 + 7 >= v41) {
                  goto LABEL_42;
                }
                unint64_t v36 = *(void *)(v40 + 8 * v37);
                if (!v36) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t closure #1 in ICU.CaseMap.titlecase(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10[3] = a4;
  v10[0] = a1;
  v10[1] = a2;
  v10[2] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized Substring.withUTF8<A>(_:)(v10);
  uint64_t v8 = v7;
  swift_release();
  *a5 = v6;
  a5[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t specialized static ICU.CaseMap.caseMappingForLocale(_:)(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = 0LL;
  }
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0xE000000000000000LL;
  }
  uint64_t v4 = one-time initialization token for _cache;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = static ICU.CaseMap._cache + 16;
  uint64_t v6 = (os_unfair_lock_s *)(static ICU.CaseMap._cache + 24);
  swift_retain();
  os_unfair_lock_lock(v6);
  closure #1 in static ICU.CaseMap.caseMappingForLocale(_:)(v5, v2, v3, &v10);
  os_unfair_lock_unlock(v6);
  swift_release();
  uint64_t v7 = v10;
  if (!v10)
  {
    type metadata accessor for ICU.CaseMap();
    uint64_t v7 = swift_allocObject();
    swift_bridgeObjectRetain();
    ICU.CaseMap.init(localeID:)();
    uint64_t v8 = static ICU.CaseMap._cache;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 24));
    closure #2 in static ICU.CaseMap.caseMappingForLocale(_:)((uint64_t *)(v8 + 16), v2, v3, v7);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 24));
    swift_release();
  }

  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Substring.withUTF8<A>(_:)(void *a1)
{
  uint64_t v2 = v1;
  _OWORD v17[2] = *MEMORY[0x1895F89C0];
  uint64_t v4 = a1[3];
  if ((v4 & 0x1000000000000000LL) != 0)
  {
    Substring._slowMakeContiguousUTF8()();
    uint64_t v4 = a1[3];
  }

  unint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v7 = *a1 >> 16;
  unint64_t v8 = v6 >> 16;
  if ((v4 & 0x2000000000000000LL) != 0)
  {
    v17[0] = v5;
    v17[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    swift_retain_n();
    uint64_t v13 = swift_bridgeObjectRetain();
    MEMORY[0x1895F8858](v13);
    specialized closure #1 in _withResizingCharBuffer(initialSize:_:)((uint64_t)v15, (uint64_t)v17 + v7, v8 - v7, &v16);
    if (!v1)
    {
      uint64_t v12 = v16;
      goto LABEL_10;
    }
  }

  else
  {
    if ((v5 & 0x1000000000000000LL) != 0)
    {
      uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }

    else
    {
      uint64_t v9 = _StringObject.sharedUTF8.getter();
      if (!v9)
      {
        swift_retain_n();
        swift_bridgeObjectRetain();
        __break(1u);
      }
    }

    uint64_t v10 = v9 + v7;
    swift_retain_n();
    uint64_t v11 = swift_bridgeObjectRetain();
    MEMORY[0x1895F8858](v11);
    specialized closure #1 in _withResizingCharBuffer(initialSize:_:)((uint64_t)v15, v10, v8 - v7, v17);
    if (!v2)
    {
      uint64_t v12 = v17[0];
LABEL_10:
      swift_bridgeObjectRelease();
      swift_release();
      return v12;
    }
  }

  uint64_t result = swift_willThrow();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation4DateV21ComponentsFormatStyleV5FieldVG_AL6OptionOs5NeverOTg5015_s10Foundation4e19V27AnchoredRelativegh75V12usableFields33_C066C46DD7A4458BFE9B19CA47B7E7FELLSayAC010ComponentseF0V5i2V6J59OGyFAmKcfu_33_7a8e0f6e267ccb9df6f8247fecae9d92AkMTf3nnnpk_nTf1cn_n( uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (!v1) {
    return v2;
  }
  uint64_t v15 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v15;
  uint64_t result = specialized Set.startIndex.getter(a1);
  uint64_t v5 = result;
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  while ((v5 & 0x8000000000000000LL) == 0 && v5 < 1LL << *(_BYTE *)(a1 + 32))
  {
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v7) {
      goto LABEL_14;
    }
    char v10 = *(_BYTE *)(*(void *)(a1 + 48) + v5);
    unint64_t v12 = *(void *)(v15 + 16);
    unint64_t v11 = *(void *)(v15 + 24);
    if (v12 >= v11 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    }
    *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v12 + 1;
    *(_BYTE *)(v15 + v12 + 32) = v10;
    uint64_t result = specialized _NativeSet.index(after:)(v5, v7, v9 & 1, a1);
    uint64_t v5 = result;
    uint64_t v7 = v13;
    char v9 = v14 & 1;
    if (!--v1)
    {
      outlined consume of Set<Calendar.Component>.Index._Variant(result, v13, v14 & 1);
      return v2;
    }
  }

  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

double specialized BinaryFloatingPoint.rounded<A>(increment:rule:)(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  char v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2 != 0.0)
  {
    double v10 = a3 / a2;
    double v15 = v10;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    int v11 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
    if (v11 == *MEMORY[0x189619F78])
    {
      double v12 = round(v10);
    }

    else if (v11 == *MEMORY[0x189619F70])
    {
      double v12 = rint(v10);
    }

    else
    {
      if (v11 == *MEMORY[0x189619F88]) {
        goto LABEL_7;
      }
      if (v11 == *MEMORY[0x189619F90]) {
        goto LABEL_9;
      }
      if (v11 == *MEMORY[0x189619F60])
      {
        double v12 = trunc(v10);
        return v12 * a2;
      }

      if (v11 != *MEMORY[0x189619F68])
      {
        Double._roundSlowPath(_:)();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        double v12 = v15;
        return v12 * a2;
      }

      if ((*(void *)&v10 & 0x8000000000000000LL) != 0) {
LABEL_9:
      }
        double v12 = floor(v10);
      else {
LABEL_7:
      }
        double v12 = ceil(v10);
    }

    return v12 * a2;
  }

  return a3;
}

double Date.AnchoredRelativeFormatStyle.anchor.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 48);
  *a1 = result;
  return result;
}

double Date.AnchoredRelativeFormatStyle.anchor.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 48) = *a1;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.anchor.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Date.AnchoredRelativeFormatStyle.presentation.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

_BYTE *Date.AnchoredRelativeFormatStyle.presentation.setter(_BYTE *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.presentation.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1;
  return Measurement<>.AttributedStyle<>.ByteCount.style.modify;
}

void Date.AnchoredRelativeFormatStyle.unitsStyle.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *Date.AnchoredRelativeFormatStyle.unitsStyle.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

_BYTE *(*Date.AnchoredRelativeFormatStyle.unitsStyle.modify(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 1);
  return Date.AnchoredRelativeFormatStyle.unitsStyle.modify;
}

_BYTE *Date.AnchoredRelativeFormatStyle.unitsStyle.modify(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 1LL) = result[8];
  return result;
}

void Date.AnchoredRelativeFormatStyle.capitalizationContext.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *Date.AnchoredRelativeFormatStyle.capitalizationContext.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

_BYTE *(*Date.AnchoredRelativeFormatStyle.capitalizationContext.modify( uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 2);
  return Date.AnchoredRelativeFormatStyle.capitalizationContext.modify;
}

_BYTE *Date.AnchoredRelativeFormatStyle.capitalizationContext.modify(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 2LL) = result[8];
  return result;
}

uint64_t Date.AnchoredRelativeFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 Date.AnchoredRelativeFormatStyle.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.locale.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  swift_unknownObjectRetain();
  return Date.AnchoredRelativeFormatStyle.locale.modify;
}

uint64_t Date.AnchoredRelativeFormatStyle.locale.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)(v2 + 8) = v4;
    *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
    return swift_unknownObjectRelease();
  }

  else
  {
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(v2 + 8) = v4;
    *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  }

  return result;
}

uint64_t Date.AnchoredRelativeFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Date.AnchoredRelativeFormatStyle.calendar.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 2os_unfair_lock_unlock(*v0 + 4) = *a1;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.calendar.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  swift_unknownObjectRetain();
  return Measurement<>.AttributedStyle<>.ByteCount.locale.modify;
}

uint64_t Date.AnchoredRelativeFormatStyle.allowedFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Date.AnchoredRelativeFormatStyle.allowedFields.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.allowedFields.modify( void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(void *)(v1 + 40);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return Date.RelativeFormatStyle.allowedFields.modify;
}

__n128 Date.AnchoredRelativeFormatStyle.init(anchor:presentation:unitsStyle:locale:calendar:capitalizationContext:)@<Q0>( uint64_t *a1@<X0>, char *a2@<X1>, char *a3@<X2>, __int128 *a4@<X3>, __n128 *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = *a1;
  __n128 v25 = *a5;
  __int128 v26 = *a4;
  uint64_t v9 = 7LL;
  char v24 = *a6;
  char v10 = *a3;
  char v11 = *a2;
  uint64_t v28 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7LL, 0);
  uint64_t v12 = v28;
  unint64_t v13 = *(void *)(v28 + 16);
  uint64_t v14 = &byte_189C6B530;
  do
  {
    char v16 = *v14++;
    char v15 = v16;
    uint64_t v28 = v12;
    unint64_t v17 = *(void *)(v12 + 24);
    if (v13 >= v17 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v13 + 1, 1);
      uint64_t v12 = v28;
    }

    *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v13 + 1;
    *(_BYTE *)(v12 + v13++ + 32) = v15;
    --v9;
  }

  while (v9);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field();
  uint64_t v18 = Set.init(minimumCapacity:)();
  uint64_t v28 = v18;
  uint64_t v19 = *(void *)(v12 + 16);
  if (v19)
  {
    for (uint64_t i = 0LL; i != v19; ++i)
    {
      uint64_t v21 = v12 + i;
      specialized Set._Variant.insert(_:)(&v27, *(unsigned __int8 *)(v21 + 32));
    }

    swift_bridgeObjectRelease();
    uint64_t v22 = v28;
  }

  else
  {
    uint64_t v22 = v18;
    swift_bridgeObjectRelease();
  }

  *(_BYTE *)a7 = v11;
  *(_BYTE *)(a7 + 1) = v10;
  *(_BYTE *)(a7 + 2) = v24;
  *(_OWORD *)(a7 + 8) = v26;
  __n128 result = v25;
  *(__n128 *)(a7 + 2os_unfair_lock_unlock(*v0 + 4) = v25;
  *(void *)(a7 + 40) = v22;
  *(void *)(a7 + 48) = v8;
  return result;
}

double Date.AnchoredRelativeFormatStyle.init(anchor:allowedFields:presentation:unitsStyle:locale:calendar:capitalizationContext:)@<D0>( double *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, char *a4@<X3>, _OWORD *a5@<X4>, _OWORD *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  double result = *a1;
  char v9 = *a4;
  char v10 = *a7;
  *(_BYTE *)a8 = *a3;
  *(_BYTE *)(a8 + 1) = v9;
  *(_BYTE *)(a8 + 2) = v10;
  *(_OWORD *)(a8 + 8) = *a5;
  *(_OWORD *)(a8 + 2os_unfair_lock_unlock(*v0 + 4) = *a6;
  *(void *)(a8 + 40) = a2;
  *(double *)(a8 + 48) = result;
  return result;
}

Swift::String __swiftcall Date.AnchoredRelativeFormatStyle.format(_:)(Foundation::Date a1)
{
  Swift::String v5 = Date.RelativeFormatStyle._format(_:refDate:)(*(Foundation::Date *)&v1->_time, v2[6]);
  unint64_t object = v5._object;
  uint64_t countAndFlagsBits = v5._countAndFlagsBits;
  result._unint64_t object = object;
  result._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t Date.AnchoredRelativeFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = *(_WORD *)(v2 + 1);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = *(void *)(v2 + 48);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_WORD *)(a2 + 1) = v3;
  *(_OWORD *)(a2 + 8) = *a1;
  *(_OWORD *)(a2 + 2os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(v2 + 24);
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v5;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

void Date.AnchoredRelativeFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  Swift::UInt8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  Swift::UInt v42;
  Swift::UInt v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  Swift::UInt8 v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  Swift::UInt64 v49;
  void *v50;
  void *v51;
  void *v52;
  Swift::UInt64 v53;
  uint64_t v54;
  _BYTE v55[144];
  char v56[8];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  void v74[18];
  _BYTE v75[144];
  _BYTE v76[152];
  Swift::UInt v3 = v1[1];
  Swift::UInt v4 = v1[2];
  uint64_t v5 = *((void *)v1 + 2);
  unint64_t v54 = *((void *)v1 + 4);
  uint64_t v6 = *((void *)v1 + 5);
  Swift::UInt64 v7 = *((void *)v1 + 6);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  char v9 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if ((v9(ObjectType, v5) & 1) != 0)
  {
    Swift::UInt8 v10 = 1;
LABEL_5:
    Hasher._combine(_:)(v10);
    swift_unknownObjectRelease();
    uint64_t v12 = v54;
    goto LABEL_59;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v11(v74, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75);
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v76) == 1)
  {
    Swift::UInt8 v10 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v56);
  Hasher._combine(_:)(1u);
  if (v56[0] == 2)
  {
    unint64_t v13 = 0;
  }

  else
  {
    unint64_t v13 = v56[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v13);
  uint64_t v14 = v57;
  if (!v57)
  {
    Hasher._combine(_:)(0);
    uint64_t v18 = v56;
    goto LABEL_19;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v14 + 16));
  char v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v55);
    uint64_t v18 = v55;
LABEL_19:
    outlined retain of LocalePreferences(v18);
    if (!v58) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  outlined retain of LocalePreferences?( (uint64_t)v75,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v16 = v14 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 += 16LL;
    --v15;
  }

  while (v15);
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v59) {
      goto LABEL_15;
    }
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    unint64_t v17 = v60;
    if (!v60) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.AnchoredRelativeFormatStyle.CodingKeys()
{
  if (*v0) {
    return 0x726F68636E61LL;
  }
  else {
    return 0x79745372656E6E69LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.AnchoredRelativeFormatStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Date.AnchoredRelativeFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AnchoredRelativeFormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AnchoredRelativeFormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.AnchoredRelativeFormatStyle.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AnchoredRelativeFormatStyle.CodingKeys>);
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = *v2;
  __int16 v8 = *(_WORD *)(v2 + 1);
  uint64_t v9 = *((void *)v2 + 5);
  uint64_t v10 = *((void *)v2 + 6);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_WORD *)((char *)&v16 + 1) = v8;
  __int128 v17 = *(_OWORD *)(v2 + 8);
  __int128 v18 = *(_OWORD *)(v2 + 24);
  uint64_t v19 = v9;
  char v15 = 0;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  uint64_t v11 = v13[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    uint64_t v16 = v10;
    char v15 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v6, v4);
}

Swift::Int Date.AnchoredRelativeFormatStyle.hashValue.getter()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  Swift::UInt v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  uint64_t v44;
  void (*v45)(_BYTE *, uint64_t, uint64_t);
  Swift::UInt64 v46;
  void *v48;
  Swift::UInt64 v49;
  uint64_t v50;
  _BYTE v51[144];
  char v52[8];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  void v70[18];
  _BYTE v71[144];
  _BYTE v72[144];
  _BYTE v73[80];
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  uint64_t v4 = *((void *)v0 + 2);
  uint64_t v50 = *((void *)v0 + 4);
  uint64_t v5 = *((void *)v0 + 5);
  Swift::UInt64 v6 = *((void *)v0 + 6);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  uint64_t ObjectType = swift_getObjectType();
  __int16 v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if ((v8(ObjectType, v4) & 1) != 0)
  {
    Swift::UInt8 v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease();
    uint64_t v11 = v50;
    goto LABEL_59;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v70, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)v71);
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v72);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v72) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v52);
  Hasher._combine(_:)(1u);
  if (v52[0] == 2)
  {
    uint64_t v12 = 0;
  }

  else
  {
    uint64_t v12 = v52[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v12);
  unint64_t v13 = v53;
  if (!v53)
  {
    Hasher._combine(_:)(0);
    __int128 v17 = v52;
    goto LABEL_19;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v51);
    __int128 v17 = v51;
LABEL_19:
    outlined retain of LocalePreferences(v17);
    if (!v54) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  outlined retain of LocalePreferences?( (uint64_t)v71,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16LL;
    --v14;
  }

  while (v14);
  swift_bridgeObjectRelease();
  if (!v54)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v55) {
      goto LABEL_15;
    }
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = v56;
    if (!v56) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }

uint64_t Date.AnchoredRelativeFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AnchoredRelativeFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  __int16 v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v22 = 0;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v21 = v17;
  int v12 = BYTE2(v17);
  int v13 = BYTE1(v17);
  __int128 v15 = v19;
  __int128 v16 = v18;
  uint64_t v9 = v20;
  char v22 = 1;
  lazy protocol witness table accessor for type Date and conformance Date();
  uint64_t v14 = v16;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v10 = v17;
  *(_BYTE *)a2 = v21;
  *(_BYTE *)(a2 + 1) = v13;
  *(_BYTE *)(a2 + 2) = v12;
  *(_OWORD *)(a2 + 8) = v16;
  *(_OWORD *)(a2 + 2os_unfair_lock_unlock(*v0 + 4) = v15;
  *(void *)(a2 + 40) = v9;
  *(void *)(a2 + 48) = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.AnchoredRelativeFormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.AnchoredRelativeFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.AnchoredRelativeFormatStyle( void *a1)
{
  return Date.AnchoredRelativeFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.AnchoredRelativeFormatStyle()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t, uint64_t);
  Swift::UInt64 v45;
  void *v47;
  Swift::UInt64 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  void v68[18];
  _BYTE v69[144];
  _BYTE v70[144];
  _BYTE v71[80];
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  uint64_t v4 = *((void *)v0 + 2);
  uint64_t v49 = *((void *)v0 + 4);
  uint64_t v5 = *((void *)v0 + 5);
  Swift::UInt64 v6 = *((void *)v0 + 6);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  uint64_t ObjectType = swift_getObjectType();
  __int16 v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if ((v8(ObjectType, v4) & 1) != 0)
  {
    Swift::UInt8 v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease();
    uint64_t v11 = v49;
    goto LABEL_58;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v68, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69);
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v70);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v70) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)&v50);
  Hasher._combine(_:)(1u);
  if (v50 == 2)
  {
    int v12 = 0;
  }

  else
  {
    int v12 = v50 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v12);
  int v13 = v51;
  if (!v51)
  {
    Hasher._combine(_:)(0);
LABEL_18:
    outlined retain of LocalePreferences(&v50);
    if (!v52) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14) {
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?( (uint64_t)v69,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16LL;
    --v14;
  }

  while (v14);
  swift_bridgeObjectRelease();
  if (!v52)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v53) {
      goto LABEL_15;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    __int128 v16 = v54;
    if (!v54) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }

Foundation::Date_optional __swiftcall Date.AnchoredRelativeFormatStyle.discreteInput(before:)(Foundation::Date before)
{
  uint64_t v4 = v2;
  double v5 = *v1;
  __int16 v6 = *(_WORD *)(v3 + 1);
  uint64_t v7 = *((void *)v3 + 5);
  double v8 = *((double *)v3 + 6);
  char v16 = *v3;
  __int16 v17 = v6;
  __int128 v9 = *(_OWORD *)(v3 + 24);
  __int128 v18 = *(_OWORD *)(v3 + 8);
  __int128 v19 = v9;
  uint64_t v20 = v7;
  double v21 = v8;
  double v14 = v8;
  double v15 = v5;
  char v10 = Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)( &v15,  &v14,  1,  v8 < v5,  (uint64_t)&v22);
  int v11 = v23;
  if (v23 == 2)
  {
    double v12 = 0.0;
  }

  else
  {
    double v12 = v22;
    if ((v23 & 1) != 0)
    {
      double v13 = 0.0 - v22;
      if (0.0 - v22 < INFINITY) {
        *(void *)&v13 += (*(uint64_t *)&v13 >> 63) | 1;
      }
      double v12 = -v13;
    }
  }

  *(double *)uint64_t v4 = v12;
  *(_BYTE *)(v4 + 8) = v11 == 2;
  result.value = *(Foundation::Date *)&v12;
  result.is_nil = v10;
  return result;
}

uint64_t Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)@<X0>( double *a1@<X0>, double *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  void (*v65)(_OWORD *__return_ptr, double *, double *, uint64_t, void);
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  unsigned __int8 *v69;
  int v71;
  int v72;
  unsigned __int8 *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(double *, double *, _OWORD *, uint64_t, void);
  uint64_t v79;
  double v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  double v92;
  void (*v93)(double *__return_ptr, double *, double *, void, uint64_t, void);
  double *v94;
  double v95;
  double v96;
  uint64_t ObjectType;
  unint64_t v98;
  uint64_t (*v99)(double *, double *, _OWORD *, uint64_t, void);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char v104;
  Swift::Int v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  char v112;
  double v113;
  uint64_t v114;
  Swift::Int_optional v115;
  _BYTE *v116;
  void (*v117)(Foundation::Date *__return_ptr, double *, double *, void, uint64_t, void);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  double *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(double *, double *, _OWORD *, uint64_t, void);
  uint64_t v133;
  int v134;
  _BYTE *v135;
  unint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  char v140;
  double v141;
  double v142[36];
  double v143[36];
  double v144;
  char v145;
  Foundation::Date v146;
  char v147;
  _OWORD v148[19];
  void v149[36];
  char v150;
  __int16 v151;
  __int128 v152;
  double v153;
  double v154;
  uint64_t v155;
  Swift::Int_optional v156;
  unint64_t v134 = a4;
  LODWORD(v133) = a3;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  double v12 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  double v13 = *a1;
  double v14 = *a2;
  __int16 v15 = *(_WORD *)(v5 + 1);
  double v17 = *((double *)v5 + 3);
  double v16 = *((double *)v5 + 4);
  uint64_t v18 = *((void *)v5 + 5);
  unint64_t v150 = *v5;
  char v151 = v15;
  unint64_t v152 = *(_OWORD *)(v5 + 8);
  unint64_t v153 = v17;
  unsigned int v154 = v16;
  Swift::String v155 = v18;
  uint64_t v19 = one-time initialization token for sortedAllowedComponents;
  unint64_t v137 = v152;
  unint64_t v138 = v16;
  swift_unknownObjectRetain();
  unint64_t v139 = v17;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v19 != -1) {
    goto LABEL_156;
  }
  while (2)
  {
    Swift::Int v20 = swift_bridgeObjectRetain();
    Swift::Int v21 = specialized _ArrayProtocol.filter(_:)(v20, (uint64_t)&v150);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(v21 + 16);
    if (!v22)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a5 = 0LL;
      *(_BYTE *)(a5 + 8) = 2;
      return result;
    }

    char v129 = (double *)a5;
    unsigned int v23 = *(unsigned __int8 *)(v22 + v21 + 31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x189619F78], v9);
    double v24 = specialized BinaryFloatingPoint.rounded<A>(increment:rule:)((uint64_t)v12, 1.0, v13 - v14);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    double v25 = v14 + v24;
    swift_unknownObjectRetain();
    double v26 = v139;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    Swift::Int v27 = swift_bridgeObjectRetain();
    Swift::Int v28 = specialized _ArrayProtocol.filter(_:)(v27, (uint64_t)&v150);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
    uint64_t v29 = Set.init(minimumCapacity:)();
    v149[0] = v29;
    uint64_t v30 = *(void *)(v28 + 16);
    if (v30)
    {
      for (uint64_t i = 0LL; i != v30; ++i)
      {
        Swift::Int v32 = v28 + i;
        specialized Set._Variant.insert(_:)(v148, *(unsigned __int8 *)(v32 + 32));
      }

      swift_bridgeObjectRelease();
      uint64_t v33 = v149[0];
    }

    else
    {
      uint64_t v33 = v29;
      swift_bridgeObjectRelease();
    }

    *(double *)unint64_t v149 = v26;
    *(double *)&v149[1] = v138;
    v143[0] = v25;
    v142[0] = v14;
    swift_unknownObjectRetain();
    Calendar.dateComponents(_:from:to:)(v33, v143, v142, v148);
    swift_unknownObjectRelease();
    memcpy(v149, v148, 0x11AuLL);
    outlined retain of DateComponents((uint64_t)v149);
    uint64_t v35 = swift_bridgeObjectRetain();
    uint64_t v36 = specialized Sequence.compactMap<A>(_:)(v35);
    unint64_t v131 = 0LL;
    outlined release of DateComponents((uint64_t)v149);
    swift_bridgeObjectRelease();
    if (*(void *)(v36 + 16))
    {
      uint64_t v37 = *(unsigned __int8 *)(v36 + 32);
      uint64_t v38 = *(void *)(v36 + 40);
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v38 = 0LL;
      uint64_t v37 = 18LL;
    }

    if (v37 == 18)
    {
      uint64_t v38 = 0LL;
      unsigned int v39 = v23;
    }

    else
    {
      unsigned int v39 = v37;
    }

    if ((v39 - 4) > 2u)
    {
      LOBYTE(v14os_unfair_lock_unlock(*v0 + 4) = v39;
      v142[0] = v14;
      v146._double time = v25;
      v143[0] = v26;
      v143[1] = v138;
      swift_unknownObjectRetain();
      static Date.RelativeFormatStyle._alignedComponentValue(component:for:reference:calendar:allowedComponents:)( &v144,  v142,  &v146._time,  (uint64_t *)v143,  v33,  (uint64_t)v148);
    }

    else
    {
      v142[0] = v25;
      v146._double time = v14;
      v143[0] = v26;
      v143[1] = v138;
      LOBYTE(v14os_unfair_lock_unlock(*v0 + 4) = v39;
      swift_unknownObjectRetain();
      static Date.RelativeFormatStyle._roundedLargestComponentValue(refDate:for:calendar:allowedComponents:largestAllowedComponent:)( (uint64_t *)v142,  &v146._time,  v143,  v33,  (unsigned __int8 *)&v144,  v148);
    }

    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v149);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    if (LOBYTE(v148[0]) == 18LL) {
      uint64_t v41 = v38;
    }
    else {
      uint64_t v41 = *((void *)&v148[0] + 1);
    }
    if (LOBYTE(v148[0]) == 18LL) {
      unint64_t v42 = v39;
    }
    else {
      unint64_t v42 = LODWORD(v148[0]);
    }
    uint64_t v43 = v129;
    unsigned __int8 v44 = 0;
    int v45 = 1;
    switch((char)v42)
    {
      case 1:
        goto LABEL_29;
      case 2:
        unsigned __int8 v44 = 1;
        goto LABEL_29;
      case 3:
        unsigned __int8 v44 = v42;
        goto LABEL_29;
      case 4:
      case 5:
      case 6:
        int v45 = 0;
        unsigned __int8 v44 = v42;
        goto LABEL_29;
      case 10:
      case 11:
        unsigned __int8 v44 = 2;
LABEL_29:
        uint64_t v135 = (char *)&v148[16] + 8;
        double v46 = v138;
        LODWORD(v132) = v45;
        if ((v134 & 1) == 0) {
          goto LABEL_43;
        }
        uint64_t v47 = v41;
        if (v41 < 0)
        {
          uint64_t v47 = -v41;
          if (__OFSUB__(0LL, v41)) {
            goto LABEL_162;
          }
        }

        if (v47 != 1)
        {
LABEL_43:
          LOBYTE(v59) = v133;
          goto LABEL_44;
        }

        unint64_t v130 = v41;
        unint64_t v136 = v42;
        uint64_t v48 = swift_bridgeObjectRetain();
        uint64_t v49 = v131;
        uint64_t v50 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation4DateV21ComponentsFormatStyleV5FieldVG_AL6OptionOs5NeverOTg5015_s10Foundation4e19V27AnchoredRelativegh75V12usableFields33_C066C46DD7A4458BFE9B19CA47B7E7FELLSayAC010ComponentseF0V5i2V6J59OGyFAmKcfu_33_7a8e0f6e267ccb9df6f8247fecae9d92AkMTf3nnnpk_nTf1cn_n(v48);
        swift_bridgeObjectRelease();
        *(void *)&v148[0] = v50;
        swift_bridgeObjectRetain();
        specialized MutableCollection<>.sort(by:)((uint64_t *)v148);
        if (v49) {
          goto LABEL_171;
        }
        unint64_t v131 = 0LL;
        swift_bridgeObjectRelease();
        uint64_t v51 = *(void *)(*(void *)&v148[0] + 16LL);
        if (v51)
        {
          uint64_t v52 = (unsigned __int8 *)(*(void *)&v148[0] + 32LL);
          uint64_t v53 = MEMORY[0x18961AFE8];
          do
          {
            unsigned int v57 = *v52++;
            char v56 = v57;
            if (v57 > v44)
            {
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)&v148[0] = v53;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v53 + 16) + 1LL,  1);
                uint64_t v53 = *(void *)&v148[0];
              }

              unint64_t v55 = *(void *)(v53 + 16);
              unint64_t v54 = *(void *)(v53 + 24);
              if (v55 >= v54 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v54 > 1,  v55 + 1,  1);
                uint64_t v53 = *(void *)&v148[0];
              }

              *(void *)(v53 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v55 + 1;
              *(_BYTE *)(v53 + v55 + 32) = v56;
            }

            --v51;
          }

          while (v51);
        }

        else
        {
          uint64_t v53 = MEMORY[0x18961AFE8];
        }

        swift_release();
        if (!*(void *)(v53 + 16))
        {
          swift_release();
          uint64_t v43 = v129;
          uint64_t v41 = v130;
          double v46 = v138;
          double v26 = v139;
          LOBYTE(v59) = v133;
          unint64_t v42 = v136;
          goto LABEL_44;
        }

        Swift::String v75 = *(unsigned __int8 *)(v53 + 32);
        swift_release();
        LODWORD(v132) = v75 < 4;
        uint64_t v43 = v129;
        double v46 = v138;
        double v26 = v139;
        unint64_t v42 = v136;
        if ((_DWORD)v75 == v44) {
          goto LABEL_77;
        }
        LOBYTE(v143[0]) = 0x60504030A0201uLL >> (8 * v75);
        LOBYTE(v142[0]) = v136;
        unsigned __int16 v95 = 1.59271755e13;
        if (v14 <= 1.59271755e13) {
          unsigned __int16 v95 = v14;
        }
        uint64_t v96 = fmax(v95, -2.11845067e11);
        uint64_t ObjectType = swift_getObjectType();
        *(double *)id v148 = v96;
        uint64_t v59 = v75;
        uint64_t v98 = v42;
        int v99 = *(uint64_t (**)(double *, double *, _OWORD *, uint64_t, void))(*(void *)&v46 + 144LL);
        swift_unknownObjectRetain();
        unint64_t v128 = ObjectType;
        unsigned __int16 v100 = v99(v143, v142, v148, ObjectType, *(void *)&v46);
        int v102 = v101;
        uint64_t v104 = v103;
        swift_unknownObjectRelease();
        if ((v104 & 1) != 0)
        {
          unsigned __int8 v44 = v59;
          LOBYTE(v59) = v133;
          unint64_t v42 = v98;
          uint64_t v41 = v130;
          goto LABEL_44;
        }

        unint64_t v126 = v59;
        unint64_t v127 = v100;
        *(double *)id v148 = v26;
        *((double *)v148 + 1) = v46;
        LOBYTE(v146._time) = v98;
        if ((v133 & 1) != 0) {
          BOOL v105 = 1LL;
        }
        else {
          BOOL v105 = -1LL;
        }
        v142[0] = v14;
        unint64_t v40 = (unint64_t)Calendar.date(byAdding:value:to:wrappingComponents:)( (Foundation::Calendar::Component)&v146,  v105,  (Foundation::Date)v40,  (Swift::Bool)v142);
        if ((LOBYTE(v143[1]) & 1) != 0)
        {
          unint64_t v42 = v98;
          unsigned __int8 v44 = v126;
LABEL_77:
          LOBYTE(v59) = v133;
          uint64_t v41 = v130;
          goto LABEL_44;
        }

        id v106 = v102 - v127;
        if (__OFSUB__(v102, v127)) {
          goto LABEL_163;
        }
        Swift::String v107 = v106 + 1;
        if (__OFADD__(v106, 1LL)) {
          goto LABEL_164;
        }
        uint64_t v124 = v106 + 1;
        uint64_t v125 = v102 - v127;
        if (v107 < 0) {
          goto LABEL_165;
        }
        uint64_t v108 = v143[0];
        unint64_t v109 = -v130;
        unint64_t v110 = __OFSUB__(0LL, v130);
        LODWORD(v136) = v110;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v111 = 0LL;
        unint64_t v127 = 0x60504030A0201uLL >> (8 * v126);
        unint64_t v112 = 1;
        Swift::String v113 = v138;
        uint64_t v114 = v107;
        break;
      default:
        goto LABEL_169;
    }

    while (1)
    {
      if ((v136 & 1) != 0) {
        goto LABEL_158;
      }
      v115.value = v109 * v114;
      memset(v148, 0, 40);
      BYTE8(v148[2]) = 1;
      *(void *)&v148[3] = 0LL;
      BYTE8(v148[3]) = 1;
      *(void *)&v148[4] = 0LL;
      BYTE8(v148[4]) = 1;
      *(void *)&v148[5] = 0LL;
      BYTE8(v148[5]) = 1;
      *(void *)&v148[6] = 0LL;
      BYTE8(v148[6]) = 1;
      *(void *)&v148[7] = 0LL;
      BYTE8(v148[7]) = 1;
      *(void *)&v148[8] = 0LL;
      BYTE8(v148[8]) = 1;
      *(void *)&v148[9] = 0LL;
      BYTE8(v148[9]) = 1;
      *(void *)&v148[10] = 0LL;
      BYTE8(v148[10]) = 1;
      *(void *)&v148[11] = 0LL;
      BYTE8(v148[11]) = 1;
      *(void *)&v148[12] = 0LL;
      BYTE8(v148[12]) = 1;
      *(void *)&v148[13] = 0LL;
      BYTE8(v148[13]) = 1;
      *(void *)&v148[14] = 0LL;
      BYTE8(v148[14]) = 1;
      *(void *)&v148[15] = 0LL;
      BYTE8(v148[15]) = 1;
      uint64_t v116 = v135;
      *uint64_t v135 = 1;
      *(void *)&v148[16] = 0LL;
      *(void *)&v148[17] = 0LL;
      v116[16] = 1;
      BYTE9(v148[17]) = 2;
      LOBYTE(v142[0]) = v127;
      v115.is_nil = 0;
      DateComponents.setValue(_:for:)(v115, (Foundation::Calendar::Component)v142);
      memcpy(v143, v148, 0x11AuLL);
      memcpy(v142, v148, 0x11AuLL);
      unint64_t v144 = v96;
      id v117 = *(void (**)(Foundation::Date *__return_ptr, double *, double *, void, uint64_t, void))(*(void *)&v113 + 200LL);
      swift_unknownObjectRetain();
      v117(&v146, v142, &v144, 0LL, v128, *(void *)&v113);
      outlined release of DateComponents((uint64_t)v143);
      swift_unknownObjectRelease();
      if ((v147 & 1) == 0) {
        break;
      }
LABEL_134:
      unint64_t v118 = v107;
      if ((v112 & 1) == 0)
      {
        unint64_t v118 = v111 - 1;
        if (v111 < 1) {
          goto LABEL_161;
        }
      }

      if (!v118) {
        goto LABEL_137;
      }
      unint64_t v112 = 0;
      unint64_t v111 = v118;
      uint64_t v114 = v118 - 1;
      if (v111 < 1) {
        goto LABEL_160;
      }
    }

    if ((v133 & 1) != 0)
    {
      if (v108 >= v146._time) {
        goto LABEL_138;
      }
      goto LABEL_134;
    }

    if (v146._time < v108 || v13 >= v146._time) {
      goto LABEL_134;
    }
LABEL_138:
    if ((v112 & 1) != 0) {
      goto LABEL_141;
    }
    if (!v111)
    {
LABEL_137:
      swift_bridgeObjectRelease();
      double v26 = v139;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v43 = v129;
      unint64_t v119 = v130;
      double v46 = v138;
      LOBYTE(v59) = v133;
      unint64_t v120 = v125;
      goto LABEL_152;
    }

    Swift::String v107 = v111 - 1;
LABEL_141:
    double v46 = v138;
    double v26 = v139;
    v142[0] = v139;
    v142[1] = v138;
    Swift::String v140 = 0x60504030A0201uLL >> (8 * v126);
    uint64_t v141 = v14;
    Calendar.date(byAdding:value:to:wrappingComponents:)( (Foundation::Calendar::Component)&v140,  v109 * v107,  v146,  (Swift::Bool)&v141);
    uint64_t v43 = v129;
    if ((v145 & 1) != 0) {
      goto LABEL_170;
    }
    unint64_t v121 = v144;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    LODWORD(v59) = v133;
    if ((v133 & 1) == 0)
    {
LABEL_146:
      unint64_t v119 = v130;
      if (v121 >= v108 && v13 < v121) {
        goto LABEL_148;
      }
      goto LABEL_168;
    }

    unint64_t v119 = v130;
    if (v108 < v121)
    {
      __break(1u);
      goto LABEL_146;
    }

Foundation::Date_optional __swiftcall Date.AnchoredRelativeFormatStyle.discreteInput(after:)(Foundation::Date after)
{
  uint64_t v4 = v2;
  double v5 = *v1;
  __int16 v6 = *(_WORD *)(v3 + 1);
  uint64_t v7 = *((void *)v3 + 5);
  double v8 = *((double *)v3 + 6);
  char v15 = *v3;
  __int16 v16 = v6;
  __int128 v9 = *(_OWORD *)(v3 + 24);
  __int128 v17 = *(_OWORD *)(v3 + 8);
  __int128 v18 = v9;
  uint64_t v19 = v7;
  double v20 = v8;
  double v13 = v8;
  double v14 = v5;
  char v10 = Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)( &v14,  &v13,  0,  v5 < v8,  (uint64_t)&v21);
  int v11 = v22;
  if (v22 == 2)
  {
    double v12 = 0.0;
  }

  else
  {
    double v12 = v21;
    if ((v22 & 1) != 0)
    {
      double v12 = v21 + 0.0;
      if (v21 + 0.0 < INFINITY) {
        *(void *)&v12 += (*(uint64_t *)&v12 >> 63) | 1;
      }
    }
  }

  *(double *)uint64_t v4 = v12;
  *(_BYTE *)(v4 + 8) = v11 == 2;
  result.value = *(Foundation::Date *)&v12;
  result.is_nil = v10;
  return result;
}

Foundation::Date_optional __swiftcall Date.AnchoredRelativeFormatStyle.input(before:)(Foundation::Date before)
{
  double v4 = *v1;
  double v5 = *(double *)(v3 + 48);
  double v6 = 0.0 - *v1;
  if (v6 < INFINITY) {
    *(void *)&double v6 = ((COERCE__INT64(0.0 - *v1) >> 63) | 1) + COERCE__INT64(0.0 - *v1);
  }
  double v7 = (v4 + 978307200.0) * -1000.0 + 0.0;
  if (v7 < INFINITY) {
    *(void *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
  }
  double v8 = 0.0 - v5;
  if (0.0 - v5 < INFINITY) {
    *(void *)&double v8 = ((COERCE__INT64(0.0 - v5) >> 63) | 1) + COERCE__INT64(0.0 - v5);
  }
  double v9 = (v5 + 978307200.0) * -1000.0 + 0.0;
  if (v9 < INFINITY) {
    *(void *)&v9 += (*(uint64_t *)&v9 >> 63) | 1;
  }
  double v10 = fabs(v5 + v8);
  double v11 = vabdd_f64(v4, -978307200.0 - v7 / 1000.0);
  double v12 = fabs(v4 + v6);
  double v13 = vabdd_f64(v5, -978307200.0 - v9 / 1000.0);
  double v14 = v4 - (v12 + v11 + v10 + v13 + v12 + v11 + v10 + v13);
  double v15 = v14;
  if (v14 >= v4) {
    double v15 = 0.0;
  }
  *(double *)uint64_t v2 = v15;
  *(_BYTE *)(v2 + 8) = v14 >= v4;
  result.value = *(Foundation::Date *)&v4;
  result.is_nil = (char)v1;
  return result;
}

Foundation::Date_optional __swiftcall Date.AnchoredRelativeFormatStyle.input(after:)(Foundation::Date after)
{
  double v4 = *v1;
  double v5 = *(double *)(v3 + 48);
  double v6 = 0.0 - *v1;
  if (v6 < INFINITY) {
    *(void *)&double v6 = ((COERCE__INT64(0.0 - *v1) >> 63) | 1) + COERCE__INT64(0.0 - *v1);
  }
  double v7 = (v4 + 978307200.0) * -1000.0 + 0.0;
  if (v7 < INFINITY) {
    *(void *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
  }
  double v8 = 0.0 - v5;
  if (0.0 - v5 < INFINITY) {
    *(void *)&double v8 = ((COERCE__INT64(0.0 - v5) >> 63) | 1) + COERCE__INT64(0.0 - v5);
  }
  double v9 = (v5 + 978307200.0) * -1000.0 + 0.0;
  if (v9 < INFINITY) {
    *(void *)&v9 += (*(uint64_t *)&v9 >> 63) | 1;
  }
  double v10 = fabs(v5 + v8);
  double v11 = vabdd_f64(v4, -978307200.0 - v7 / 1000.0);
  double v12 = fabs(v4 + v6);
  double v13 = vabdd_f64(v5, -978307200.0 - v9 / 1000.0);
  double v14 = v4 + v12 + v11 + v10 + v13 + v12 + v11 + v10 + v13;
  double v15 = v14;
  if (v4 >= v14) {
    double v15 = 0.0;
  }
  *(double *)uint64_t v2 = v15;
  *(_BYTE *)(v2 + 8) = v4 >= v14;
  result.value = *(Foundation::Date *)&v4;
  result.is_nil = (char)v1;
  return result;
}

void *Date.aligned(to:of:in:)@<X0>(char a1@<W0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 + 8);
  double v8 = *v4;
  if (*v4 > 1.59271755e13) {
    double v8 = 1.59271755e13;
  }
  char v15 = *a2;
  double v9 = fmax(v8, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v14 = v9;
  Foundation::Date_optional result = (*(void *(**)(double *__return_ptr, char *, double *, uint64_t, uint64_t))(v7 + 160))( &v16,  &v15,  &v14,  ObjectType,  v7);
  char v12 = v18;
  if ((v18 & 1) != 0)
  {
    *(void *)a4 = 0LL;
  }

  else if ((a1 & 1) != 0)
  {
    double v13 = 0.0 - v17;
    if (0.0 - v17 < INFINITY) {
      *(void *)&v13 += (*(uint64_t *)&v13 >> 63) | 1;
    }
    *(double *)a4 = v16 - v13;
  }

  else
  {
    *(double *)a4 = v16;
  }

  *(_BYTE *)(a4 + 8) = v12;
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.AnchoredRelativeFormatStyle@<X0>( Foundation::Date *a1@<X0>, Swift::String *a2@<X8>)
{
  Swift::String v5 = Date.RelativeFormatStyle._format(_:refDate:)(*(Foundation::Date *)&a1->_time, v2[6]);
  uint64_t result = v5._countAndFlagsBits;
  *a2 = v5;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.AnchoredRelativeFormatStyle@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = *(_WORD *)(v2 + 1);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = *(void *)(v2 + 48);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_WORD *)(a2 + 1) = v3;
  *(_OWORD *)(a2 + 8) = *a1;
  *(_OWORD *)(a2 + 2os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(v2 + 24);
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v5;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t specialized static Date.AnchoredRelativeFormatStyle.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result = 0LL;
  if (((*a1 ^ *a2) & 1) == 0 && a1[1] == a2[1] && a1[2] == a2[2])
  {
    uint64_t v4 = *((void *)a1 + 5);
    double v5 = *((double *)a1 + 6);
    __int128 v13 = *(_OWORD *)(a2 + 24);
    __int128 v14 = *(_OWORD *)(a1 + 24);
    uint64_t v6 = *((void *)a2 + 5);
    double v7 = *((double *)a2 + 6);
    uint64_t v9 = *((void *)a2 + 1);
    uint64_t v8 = *((void *)a2 + 2);
    uint64_t v11 = *((void *)a1 + 1);
    uint64_t v10 = *((void *)a1 + 2);
    *(void *)&__int128 v16 = v11;
    *((void *)&v16 + 1) = v10;
    *(void *)&__int128 v15 = v9;
    *((void *)&v15 + 1) = v8;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Locale.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v15) & 1) != 0
      && (__int128 v15 = v13, v16 = v14, (specialized static Calendar.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v15) & 1) != 0))
    {
      unsigned __int8 v12 = specialized static Set.== infix(_:_:)(v4, v6);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v12 & (v5 == v7);
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return 0LL;
    }
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AnchoredRelativeFormatStyle.CodingKeys,  &unk_189C87050);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AnchoredRelativeFormatStyle.CodingKeys,  &unk_189C87050);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AnchoredRelativeFormatStyle.CodingKeys,  &unk_189C87050);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AnchoredRelativeFormatStyle.CodingKeys,  &unk_189C87050);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AnchoredRelativeFormatStyle,  &type metadata for Date.AnchoredRelativeFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AnchoredRelativeFormatStyle,  &type metadata for Date.AnchoredRelativeFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AnchoredRelativeFormatStyle,  &type metadata for Date.AnchoredRelativeFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AnchoredRelativeFormatStyle,  &type metadata for Date.AnchoredRelativeFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AnchoredRelativeFormatStyle,  &type metadata for Date.AnchoredRelativeFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.AnchoredRelativeFormatStyle( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.AnchoredRelativeFormatStyle( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle();
  unint64_t result = lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle();
  a1[3] = result;
  return result;
}

_BYTE *sub_1832810DC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_1832810E8(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1832810F4@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 1);
  return result;
}

_BYTE *sub_183281100(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 1) = *result;
  return result;
}

uint64_t sub_18328110C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 2);
  return result;
}

_BYTE *sub_183281118(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 2) = *result;
  return result;
}

uint64_t sub_183281124@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 8);
  return swift_unknownObjectRetain();
}

__n128 sub_183281134(__n128 *a1, uint64_t a2)
{
  __n128 v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v4;
  *(__n128 *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_18328117C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 24);
  return swift_unknownObjectRetain();
}

__n128 sub_18328118C(__n128 *a1, uint64_t a2)
{
  __n128 v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v4;
  *(__n128 *)(a2 + 2os_unfair_lock_unlock(*v0 + 4) = v4;
  return result;
}

uint64_t sub_1832811D4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1832811E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 40) = v3;
  return result;
}

uint64_t initializeWithCopy for Date.AnchoredRelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.AnchoredRelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for Date.AnchoredRelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.AnchoredRelativeFormatStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.AnchoredRelativeFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2os_unfair_lock_unlock(*v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Date.AnchoredRelativeFormatStyle()
{
  return &type metadata for Date.AnchoredRelativeFormatStyle;
}

uint64_t storeEnumTagSinglePayload for Date.AnchoredRelativeFormatStyle.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vos_unfair_lock_unlock(*v0 + 4) = 1;
  }
  else {
    LODWORD(vos_unfair_lock_unlock(*v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_183281488 + 4 * byte_1837C6CC5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1832814BC + 4 * asc_1837C6CC0[v4]))();
}

uint64_t sub_1832814BC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832814C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1832814CCLL);
  }
  return result;
}

uint64_t sub_1832814D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1832814E0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1832814E4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832814EC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.AnchoredRelativeFormatStyle.CodingKeys()
{
  return &unk_189C87050;
}

uint64_t specialized Date.AnchoredRelativeFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x79745372656E6E69LL && a2 == 0xEA0000000000656CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x726F68636E61LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

void NSUndoManager.registerUndo<A>(withTarget:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a4;
  uint64_t v9[3] = a2;
  v9[4] = a3;
  v11[4] = partial apply for closure #1 in NSUndoManager.registerUndo<A>(withTarget:handler:);
  v11[5] = v9;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 1107296256LL;
  v11[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> ();
  uint64_t v11[3] = &block_descriptor_14;
  uint64_t v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_registerUndoWithTarget_handler_, a1, v10);
  _Block_release(v10);
}

uint64_t closure #1 in NSUndoManager.registerUndo<A>(withTarget:handler:)( uint64_t a1, void (*a2)())
{
  return swift_unknownObjectRelease();
}

uint64_t sub_183281CAC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSUndoManager.registerUndo<A>(withTarget:handler:)(uint64_t a1)
{
  return closure #1 in NSUndoManager.registerUndo<A>(withTarget:handler:)(a1, *(void (**)())(v1 + 24));
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> ()(uint64_t a1, uint64_t a2)
{
  int v3 = *(void (**)(void *))(a1 + 32);
  v5[3] = swift_getObjectType();
  v5[0] = a2;
  swift_retain();
  swift_unknownObjectRetain();
  v3(v5);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t getEnumTagSinglePayload for NSDecimal.DecimalParseResult(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NSDecimal.DecimalParseResult(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 33) = v3;
  return result;
}

uint64_t getEnumTag for NSDecimal.DecimalParseResult(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t destructiveInjectEnumTag for NSDecimal.DecimalParseResult(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
    *(void *)(result + 2os_unfair_lock_unlock(*v0 + 4) = 0LL;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    *(_BYTE *)(result + 32) = 1;
  }

  else
  {
    *(_BYTE *)(result + 32) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for NSDecimal.DecimalParseResult()
{
  return &type metadata for NSDecimal.DecimalParseResult;
}

uint64_t dispatch thunk of ParseableFormatStyle.parseStrategy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  __asm { BR              X10 }

  return result;
}

id sub_183281E54()
{
  uint64_t v3 = v0;
  __int16 v4 = v1;
  char v5 = BYTE2(v1);
  char v6 = BYTE3(v1);
  char v7 = BYTE4(v1);
  char v8 = BYTE5(v1);
  return objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, &v3, BYTE6(v1));
}

id static Data._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  id v1 = a1;
  id v2 = specialized Data.init(referencing:)(v1);

  return v2;
}

uint64_t __DataStorage.__allocating_init(immutableReference:offset:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = objc_msgSend(v3, sel_bytes);
  id v5 = objc_msgSend(v3, sel_length);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 40) = a2;
  *(_BYTE *)(result + 6os_unfair_lock_unlock(*v0 + 4) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(void *)(result + 2os_unfair_lock_unlock(*v0 + 4) = v5;
  *(void *)(result + 48) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(result + 56) = v6;
  return result;
}

uint64_t __DataStorage.__allocating_init(mutableReference:offset:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = objc_msgSend(v3, sel_mutableBytes);
  id v5 = objc_msgSend(v3, sel_length);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 40) = a2;
  *(_BYTE *)(result + 6os_unfair_lock_unlock(*v0 + 4) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(void *)(result + 2os_unfair_lock_unlock(*v0 + 4) = v5;
  *(void *)(result + 48) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(result + 56) = v6;
  return result;
}

uint64_t __DataStorage.__allocating_init(customReference:offset:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = objc_msgSend(v3, sel_bytes);
  id v5 = objc_msgSend(v3, sel_length);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 40) = a2;
  *(_BYTE *)(result + 6os_unfair_lock_unlock(*v0 + 4) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(void *)(result + 2os_unfair_lock_unlock(*v0 + 4) = v5;
  *(void *)(result + 48) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(result + 56) = v6;
  return result;
}

uint64_t __DataStorage.__allocating_init(customMutableReference:offset:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = objc_msgSend(v3, sel_mutableBytes);
  id v5 = objc_msgSend(v3, sel_length);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 40) = a2;
  *(_BYTE *)(result + 6os_unfair_lock_unlock(*v0 + 4) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(void *)(result + 2os_unfair_lock_unlock(*v0 + 4) = v5;
  *(void *)(result + 48) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(result + 56) = v6;
  return result;
}

char *__DataStorage.bridgedReference(_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_init);
  }
  id v6 = objc_allocWithZone((Class)type metadata accessor for __NSSwiftData());
  swift_retain();
  char v7 = (char *)objc_msgSend(v6, sel_init);
  *(void *)&v7[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = v2;
  char v8 = v7;
  swift_release();
  uint64_t v9 = &v8[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)uint64_t v9 = a1;
  *((void *)v9 + 1) = a2;
  v9[16] = 0;

  return v8;
}

uint64_t __NSSwiftData.bytes.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    if (!v2) {
      return 47824LL;
    }
    uint64_t v3 = *(void *)(v1 + 40);
    BOOL v4 = __OFSUB__(0LL, v3);
    uint64_t v5 = -v3;
    if (!v4)
    {
      if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC10Foundation13__NSSwiftData__range + 16) & 1) == 0) {
        return v2 + v5 + *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__NSSwiftData__range);
      }
      goto LABEL_9;
    }

    __break(1u);
  }

  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

id @objc __NSSwiftData.init(contentsOfMappedFile:)(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  return __NSSwiftData.init(contentsOfMappedFile:)((uint64_t)v5, v6, a4);
}

id __NSSwiftData.init(base64Encoded:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0LL;
  id v5 = &v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)id v5 = 0LL;
  *((void *)v5 + 1) = 0LL;
  v5[16] = 1;
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for __NSSwiftData();
  id v7 = objc_msgSendSuper2(&v9, sel_initWithBase64EncodedString_options_, v6, a3);
  swift_unknownObjectRelease();
  if (v7) {

  }
  return v7;
}

void __NSSwiftData.init(base64Encoded:options:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing) = 0LL;
  uint64_t v3 = v2 + OBJC_IVAR____TtC10Foundation13__NSSwiftData__range;
  *(void *)uint64_t v3 = 0LL;
  *(void *)(v3 + 8) = 0LL;
  *(_BYTE *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
  __asm { BR              X10 }

id sub_183282714( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, objc_super a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  uint64_t v45 = v37;
  __int16 v46 = v36;
  char v47 = BYTE2(v36);
  char v48 = BYTE3(v36);
  char v49 = BYTE4(v36);
  char v50 = BYTE5(v36);
  id v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, &v45, BYTE6(v36));
  uint64_t v41 = (objc_class *)type metadata accessor for __NSSwiftData();
  v51.receiver = v39;
  v51.super_class = v41;
  id v42 = objc_msgSendSuper2(&v51, sel_initWithBase64EncodedData_options_, v40, v38);
  outlined consume of Data._Representation(v37, v36);
  id v43 = v42;

  if (v43) {
  return v43;
  }
}

id @objc __NSSwiftData.init(bytes:length:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  *(void *)&a1[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0LL;
  char v8 = &a1[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)char v8 = 0LL;
  *((void *)v8 + 1) = 0LL;
  v8[16] = 1;
  v10.receiver = a1;
  v10.super_class = (Class)type metadata accessor for __NSSwiftData();
  return objc_msgSendSuper2(&v10, *a5, a3, a4);
}

id __NSSwiftData.init(bytesNoCopy:length:deallocator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&v4[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0LL;
  char v8 = &v4[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)char v8 = 0LL;
  *((void *)v8 + 1) = 0LL;
  v8[16] = 1;
  if (a3)
  {
    v13[4] = a3;
    v13[5] = a4;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 1107296256LL;
    void v13[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ();
    uint64_t v13[3] = &block_descriptor_15;
    objc_super v9 = _Block_copy(v13);
    swift_retain();
    swift_release();
  }

  else
  {
    objc_super v9 = 0LL;
  }

  objc_super v10 = (objc_class *)type metadata accessor for __NSSwiftData();
  v14.receiver = v4;
  v14.super_class = v10;
  id v11 = objc_msgSendSuper2(&v14, sel_initWithBytesNoCopy_length_deallocator_, a1, a2, v9);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(a3);
  _Block_release(v9);
  return v11;
}

id __NSSwiftData.init(contentsOfFile:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[1] = *(id *)MEMORY[0x1895F89C0];
  *(void *)&v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0LL;
  id v5 = &v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)id v5 = 0LL;
  *((void *)v5 + 1) = 0LL;
  v5[16] = 1;
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v12[0] = 0LL;
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for __NSSwiftData();
  id v7 = objc_msgSendSuper2(&v11, sel_initWithContentsOfFile_options_error_, v6, a3, v12);
  swift_unknownObjectRelease();
  if (v7)
  {
    id v8 = v12[0];
  }

  else
  {
    if (v12[0])
    {
      v12[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v9 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

  return v7;
}

id __NSSwiftData.init(contentsOf:options:)(void **a1, uint64_t a2)
{
  v11[1] = *(id *)MEMORY[0x1895F89C0];
  BOOL v4 = *a1;
  *(void *)&v2[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0LL;
  id v5 = &v2[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)id v5 = 0LL;
  *((void *)v5 + 1) = 0LL;
  v5[16] = 1;
  swift_release();
  swift_release();
  v11[0] = 0LL;
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for __NSSwiftData();
  id v6 = objc_msgSendSuper2(&v10, sel_initWithContentsOfURL_options_error_, v4, a2, v11);

  if (v6)
  {
    id v7 = v11[0];
  }

  else
  {
    if (v11[0])
    {
      v11[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v8 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

  return v6;
}

id __NSSwiftData.init(contentsOfMappedFile:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0LL;
  id v5 = &v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)id v5 = 0LL;
  *((void *)v5 + 1) = 0LL;
  v5[16] = 1;
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for __NSSwiftData();
  id v7 = objc_msgSendSuper2(&v9, *a3, v6);
  swift_unknownObjectRelease();
  if (v7) {

  }
  return v7;
}

id __NSSwiftData.init(contentsOf:)(void **a1)
{
  uint64_t v2 = *a1;
  *(void *)&v1[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0LL;
  uint64_t v3 = &v1[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)uint64_t v3 = 0LL;
  *((void *)v3 + 1) = 0LL;
  v3[16] = 1;
  swift_release();
  swift_release();
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for __NSSwiftData();
  id v4 = objc_msgSendSuper2(&v6, sel_initWithContentsOfURL_, v2);

  if (v4) {
  return v4;
  }
}

id __NSSwiftData.init(contentsOfFile:error:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  v12[1] = *(id *)MEMORY[0x1895F89C0];
  *(void *)&v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0LL;
  id v5 = &v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)id v5 = 0LL;
  *((void *)v5 + 1) = 0LL;
  v5[16] = 1;
  if (a2)
  {
    objc_super v6 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }

  else
  {
    objc_super v6 = 0LL;
  }

  v12[0] = 0LL;
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for __NSSwiftData();
  id v7 = objc_msgSendSuper2(&v11, *a3, v6, v12);

  if (v7)
  {
    id v8 = v12[0];
  }

  else
  {
    if (v12[0])
    {
      v12[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v9 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

  return v7;
}

id @objc __NSSwiftData.init(contentsOfFile:error:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, SEL *a5)
{
  if (a3)
  {
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  }

  else
  {
    id v6 = 0LL;
    uint64_t v7 = 0LL;
  }

  return __NSSwiftData.init(contentsOfFile:error:)((uint64_t)v6, v7, a5);
}

id __NSSwiftData.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for __NSSwiftData();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

NSData __swiftcall Data._Representation.bridgedReference()()
{
  __asm { BR              X10 }

  return result;
}

id sub_1832833A0()
{
  uint64_t v3 = v0;
  __int16 v4 = v1;
  char v5 = BYTE2(v1);
  char v6 = BYTE3(v1);
  char v7 = BYTE4(v1);
  char v8 = BYTE5(v1);
  return objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, &v3, BYTE6(v1));
}

id static Data._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id result = specialized Data.init(referencing:)(a1);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  return result;
}

uint64_t static Data._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  *(void *)a2 = specialized Data.init(referencing:)(a1);
  *(void *)(a2 + 8) = v4;
  return 1LL;
}

NSData protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Data()
{
  return Data._bridgeToObjectiveC()();
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Data( void *a1, uint64_t a2)
{
  id result = specialized Data.init(referencing:)(a1);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Data( void *a1, uint64_t a2)
{
  *(void *)a2 = specialized Data.init(referencing:)(a1);
  *(void *)(a2 + 8) = v4;
  return 1LL;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Data( void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = specialized Data.init(referencing:)(v3);
    unint64_t v6 = v5;
  }

  else
  {
    id v4 = 0LL;
    unint64_t v6 = 0xC000000000000000LL;
  }

  *a2 = v4;
  a2[1] = v6;
}

NSData __swiftcall Data.InlineSlice.bridgedReference()()
{
  Class isa = result.super.isa;
  result.super.Class isa = (Class)SLODWORD(result.super.isa);
  __break(1u);
  return result;
}

NSData __swiftcall Data.LargeSlice.bridgedReference()()
{
  return (NSData)__DataStorage.bridgedReference(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t NSData._toCustomAnyHashable()()
{
  id v1 = v0;
  specialized Data.init(referencing:)(v1);

  lazy protocol witness table accessor for type Data and conformance Data();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSData()
{
  id v1 = *v0;
  specialized Data.init(referencing:)(v1);

  lazy protocol witness table accessor for type Data and conformance Data();
  AnyHashable.init<A>(_:)();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ()( uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);
  return swift_release();
}

id specialized Data.init(referencing:)(void *a1)
{
  id result = objc_msgSend(a1, sel_length);
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    objc_msgSend(a1, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSData();
    swift_dynamicCast();
    id v4 = v9;
    id v5 = objc_msgSend(v4, sel_bytes);
    id v6 = objc_msgSend(v4, sel_length);
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
    type metadata accessor for __DataStorage();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 32) = 0LL;
    *(void *)(v8 + 40) = 0LL;
    *(_BYTE *)(v8 + 6os_unfair_lock_unlock(*v0 + 4) = 0;
    *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
    *(void *)(v8 + 2os_unfair_lock_unlock(*v0 + 4) = v6;
    *(void *)(v8 + 48) = destructiveProjectEnumData for PredicateCodableError;
    *(void *)(v8 + 56) = v7;
    return (id)specialized Data._Representation.init(_:count:)((void *)v8, v3);
  }

  return result;
}

uint64_t sub_183283A00()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for __NSSwiftData()
{
  return objc_opt_self();
}

unint64_t instantiation function for generic protocol witness table for Data(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Data and conformance Data();
  a1[2] = lazy protocol witness table accessor for type Data and conformance Data();
  a1[3] = lazy protocol witness table accessor for type Data and conformance Data();
  unint64_t result = lazy protocol witness table accessor for type Data and conformance Data();
  a1[4] = result;
  return result;
}

{
  unint64_t result;
  a1[1] = lazy protocol witness table accessor for type Data and conformance Data();
  a1[2] = lazy protocol witness table accessor for type Data and conformance Data();
  unint64_t result = lazy protocol witness table accessor for type Data and conformance Data();
  a1[3] = result;
  return result;
}

uint64_t sub_183283B90()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned UnsafeMutableRawPointer, @unowned Int) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t AsyncCharacterSequence.AsyncIterator.remaining.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator( 0LL,  *(void *)(a1 + 16),  *(void *)(a1 + 24),  a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a3, v3, v5);
}

uint64_t AsyncCharacterSequence.AsyncIterator.remaining.setter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator( 0LL,  *(void *)(a2 + 16),  *(void *)(a2 + 24),  a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(v4, a1, v6);
}

uint64_t (*AsyncCharacterSequence.AsyncIterator.remaining.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AsyncCharacterSequence.AsyncIterator.accumulator.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AsyncCharacterSequence.AsyncIterator.accumulator.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3 + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*AsyncCharacterSequence.AsyncIterator.accumulator.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AsyncCharacterSequence.AsyncIterator.next()(uint64_t a1)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = v1;
  return swift_task_switch();
}

uint64_t AsyncCharacterSequence.AsyncIterator.next()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 48);
  uint64_t v6 = *(void *)(v5 + 16);
  *(void *)(v4 + 6os_unfair_lock_unlock(*v0 + 4) = v6;
  uint64_t v7 = *(void *)(v5 + 24);
  *(void *)(v4 + 72) = v7;
  *(_DWORD *)(v4 + 176) = *(_DWORD *)(type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator( 0LL,  v6,  v7,  a4)
                                    + 36);
  uint64_t v8 = 1LL;
  do
  {
    objc_super v14 = (char *)(*(void *)(v4 + 56) + *(int *)(v4 + 176));
    if ((v14[1] & 1) != 0)
    {
      *(void *)(v4 + 112) = swift_getAssociatedTypeWitness();
      *(void *)(v4 + 120) = swift_getAssociatedConformanceWitness();
      uint64_t v19 = (void *)swift_task_alloc();
      *(void *)(v4 + 128) = v19;
      *uint64_t v19 = v4;
      v19[1] = AsyncCharacterSequence.AsyncIterator.next();
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }

    char v15 = *v14;
    *(_WORD *)objc_super v14 = 256;
    if ((v15 & 0xE0) == 0xC0) {
      goto LABEL_24;
    }
    if ((v15 & 0xF0) == 0xE0)
    {
      uint64_t v8 = 2LL;
LABEL_24:
      *(_BYTE *)(v4 + 18os_unfair_lock_unlock(*v0 + 4) = v15;
      *(_WORD *)(v4 + 185) = 0;
      *(_BYTE *)(v4 + 187) = 0;
      *(void *)(v4 + 80) = v8;
      *(void *)(v4 + 88) = 0LL;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      double v20 = (void *)swift_task_alloc();
      *(void *)(v4 + 96) = v20;
      *double v20 = v4;
      v20[1] = AsyncCharacterSequence.AsyncIterator.next();
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }

    if ((v15 & 0xF8) == 0xF0)
    {
      uint64_t v8 = 3LL;
      goto LABEL_24;
    }

    if ((v15 & 0x80) == 0)
    {
      *(_BYTE *)(v4 + 18os_unfair_lock_unlock(*v0 + 4) = v15;
      *(_WORD *)(v4 + 185) = 0;
      *(_BYTE *)(v4 + 187) = 0;
      uint64_t v16 = static String._fromUTF8Repairing(_:)();
      if ((v17 & 0x2000000000000000LL) != 0) {
        uint64_t v18 = HIBYTE(v17) & 0xF;
      }
      else {
        uint64_t v18 = v16 & 0xFFFFFFFFFFFFLL;
      }
      if (!v18) {
        goto LABEL_31;
      }
      if ((v17 & 0x1000000000000000LL) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((v17 & 0x2000000000000000LL) != 0)
        {
          *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v16;
          *(void *)(v4 + 2os_unfair_lock_unlock(*v0 + 4) = v17 & 0xFFFFFFFFFFFFFFLL;
        }

        else if ((v16 & 0x1000000000000000LL) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }

        _decodeScalar(_:startingAt:)();
      }

      swift_bridgeObjectRelease();
    }

    id v9 = (uint64_t *)(*(void *)(v4 + 56) + *(int *)(*(void *)(v4 + 48) + 36LL));
    uint64_t v10 = v9[1];
    *(void *)(v4 + 32) = *v9;
    *(void *)(v4 + 40) = v10;
    String.UnicodeScalarView.append(_:)();
    uint64_t v11 = *(void *)(v4 + 32);
    unint64_t v12 = *(void *)(v4 + 40);
    *id v9 = v11;
    v9[1] = v12;
    swift_bridgeObjectRetain();
    uint64_t v13 = String.count.getter();
    swift_bridgeObjectRelease();
  }

  while (v13 < 2);
  uint64_t v22 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000LL) == 0) {
    uint64_t v22 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (!v22)
  {
    __break(1u);
    goto LABEL_40;
  }

  uint64_t result = specialized Collection.first.getter(v11, v12);
  if (v23) {
    goto LABEL_36;
  }
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease();
  double v24 = (uint64_t *)(*(void *)(v4 + 56) + *(int *)(*(void *)(v4 + 48) + 36LL));
  uint64_t v26 = *v24;
  unint64_t v25 = v24[1];
  swift_bridgeObjectRetain();
  uint64_t v27 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v27 <= 0)
  {
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v29, v30);
  }

  uint64_t v28 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000LL) == 0) {
    uint64_t v28 = v26 & 0xFFFFFFFFFFFFLL;
  }
  if (!v28) {
LABEL_40:
  }
    __break(1u);
  uint64_t result = specialized Collection.first.getter(v26, v25);
  if (v23)
  {
LABEL_36:
    uint64_t v29 = result;
    uint64_t v30 = v23;
    specialized RangeReplaceableCollection.removeFirst(_:)(1LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v29, v30);
  }

  __break(1u);
  return result;
}

uint64_t AsyncCharacterSequence.AsyncIterator.next()()
{
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v1 = *(_BYTE *)(v0 + 192);
  if ((*(_BYTE *)(v0 + 193) & 1) == 0)
  {
    if ((v1 & 0xC0) == 0x80)
    {
      uint64_t v2 = *(void *)(v0 + 80);
      uint64_t v3 = *(void *)(v0 + 88) + 1LL;
      *(_BYTE *)(v0 + 184 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v1;
      if (v3 != v2) {
        goto LABEL_55;
      }
    }

    else
    {
      uint64_t v4 = (_BYTE *)(*(void *)(v0 + 56) + *(int *)(v0 + 176));
      *uint64_t v4 = v1;
      v4[1] = 0;
    }
  }

  uint64_t v5 = static String._fromUTF8Repairing(_:)();
  uint64_t v7 = v6;
  uint64_t v8 = (v6 & 0x2000000000000000LL) == 0;
  if ((v6 & 0x2000000000000000LL) != 0) {
    id v9 = HIBYTE(v6) & 0xF;
  }
  else {
    id v9 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    unint64_t v25 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36LL));
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    swift_bridgeObjectRetain();
    uint64_t v28 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v28 > 0)
    {
      uint64_t v29 = HIBYTE(v26) & 0xF;
      if ((v26 & 0x2000000000000000LL) == 0) {
        uint64_t v29 = v27 & 0xFFFFFFFFFFFFLL;
      }
      if (!v29)
      {
        __break(1u);
        goto LABEL_58;
      }

      uint64_t result = specialized Collection.first.getter(v27, v26);
      if (v31) {
        goto LABEL_48;
      }
      __break(1u);
    }

    Swift::Int v32 = 0LL;
    uint64_t v33 = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v32, v33);
  }

  uint64_t v10 = v5;
  while (1)
  {
    if ((v7 & 0x1000000000000000LL) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if (v8)
      {
        if ((v10 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
      }

      else
      {
        *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
        *(void *)(v0 + 2os_unfair_lock_unlock(*v0 + 4) = v7 & 0xFFFFFFFFFFFFFFLL;
      }

      _decodeScalar(_:startingAt:)();
    }

    swift_bridgeObjectRelease();
    uint64_t v11 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36LL));
    unint64_t v12 = v11[1];
    *(void *)(v0 + 32) = *v11;
    *(void *)(v0 + 40) = v12;
    String.UnicodeScalarView.append(_:)();
    uint64_t v13 = *(void *)(v0 + 32);
    objc_super v14 = *(void *)(v0 + 40);
    *uint64_t v11 = v13;
    v11[1] = v14;
    swift_bridgeObjectRetain();
    char v15 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v15 > 1) {
      goto LABEL_44;
    }
    uint64_t v16 = (char *)(*(void *)(v0 + 56) + *(int *)(v0 + 176));
    if ((v16[1] & 1) != 0)
    {
LABEL_50:
      *(void *)(v0 + 112) = swift_getAssociatedTypeWitness();
      *(void *)(v0 + 120) = swift_getAssociatedConformanceWitness();
      uint64_t v35 = (void *)swift_task_alloc();
      *(void *)(v0 + 128) = v35;
      *uint64_t v35 = v0;
      v35[1] = AsyncCharacterSequence.AsyncIterator.next();
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }

    unint64_t v17 = *v16;
    *(_WORD *)uint64_t v16 = 256;
    if ((v17 & 0xE0) == 0xC0)
    {
LABEL_51:
      unint64_t v36 = 1LL;
LABEL_54:
      uint64_t v3 = 0LL;
      *(void *)(v0 + 80) = v36;
      *(_BYTE *)(v0 + 18os_unfair_lock_unlock(*v0 + 4) = v17;
      *(_WORD *)(v0 + 185) = 0;
      *(_BYTE *)(v0 + 187) = 0;
LABEL_55:
      *(void *)(v0 + 88) = v3;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      uint64_t v37 = (void *)swift_task_alloc();
      *(void *)(v0 + 96) = v37;
      *uint64_t v37 = v0;
      v37[1] = AsyncCharacterSequence.AsyncIterator.next();
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }

    if ((v17 & 0xF0) == 0xE0)
    {
LABEL_52:
      unint64_t v36 = 2LL;
      goto LABEL_54;
    }

    if ((v17 & 0xF8) == 0xF0)
    {
LABEL_53:
      unint64_t v36 = 3LL;
      goto LABEL_54;
    }

    if (v17 < 0) {
      break;
    }
LABEL_23:
    *(_BYTE *)(v0 + 18os_unfair_lock_unlock(*v0 + 4) = v17;
    *(_WORD *)(v0 + 185) = 0;
    *(_BYTE *)(v0 + 187) = 0;
    uint64_t v18 = static String._fromUTF8Repairing(_:)();
    uint64_t v10 = v18;
    uint64_t v7 = v19;
    uint64_t v8 = (v19 & 0x2000000000000000LL) == 0;
    if ((v19 & 0x2000000000000000LL) != 0) {
      double v20 = HIBYTE(v19) & 0xF;
    }
    else {
      double v20 = v18 & 0xFFFFFFFFFFFFLL;
    }
    if (!v20) {
      goto LABEL_37;
    }
  }

  while (1)
  {
    double v21 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36LL));
    uint64_t v22 = v21[1];
    *(void *)(v0 + 32) = *v21;
    *(void *)(v0 + 40) = v22;
    String.UnicodeScalarView.append(_:)();
    uint64_t v13 = *(void *)(v0 + 32);
    objc_super v14 = *(void *)(v0 + 40);
    void *v21 = v13;
    v21[1] = v14;
    swift_bridgeObjectRetain();
    uint64_t v23 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v23 >= 2) {
      break;
    }
    double v24 = (char *)(*(void *)(v0 + 56) + *(int *)(v0 + 176));
    if ((v24[1] & 1) != 0) {
      goto LABEL_50;
    }
    unint64_t v17 = *v24;
    *(_WORD *)double v24 = 256;
    if ((v17 & 0xE0) == 0xC0) {
      goto LABEL_51;
    }
    if ((v17 & 0xF0) == 0xE0) {
      goto LABEL_52;
    }
    if ((v17 & 0xF8) == 0xF0) {
      goto LABEL_53;
    }
    if ((v17 & 0x80) == 0) {
      goto LABEL_23;
    }
  }

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 136LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v1 = *(_BYTE *)(v0 + 190);
  if ((*(_BYTE *)(v0 + 191) & 1) != 0) {
    goto LABEL_2;
  }
  if ((*(_BYTE *)(v0 + 190) & 0x80) == 0) {
    goto LABEL_9;
  }
  if ((v1 & 0xE0) == 0xC0)
  {
    double v21 = 1LL;
LABEL_46:
    *(_BYTE *)(v0 + 180) = v1;
    *(_WORD *)(v0 + 181) = 0;
    *(_BYTE *)(v0 + 183) = 0;
    *(void *)(v0 + 14os_unfair_lock_unlock(*v0 + 4) = v21;
    *(void *)(v0 + 152) = 0LL;
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v26;
    *uint64_t v26 = v0;
    v26[1] = AsyncCharacterSequence.AsyncIterator.next();
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }

  if ((v1 & 0xF0) == 0xE0)
  {
    double v21 = 2LL;
    goto LABEL_46;
  }

  if ((v1 & 0xF8) == 0xF0)
  {
    double v21 = 3LL;
    goto LABEL_46;
  }

  while (1)
  {
LABEL_9:
    uint64_t v11 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36LL));
    unint64_t v12 = v11[1];
    *(void *)(v0 + 32) = *v11;
    *(void *)(v0 + 40) = v12;
    String.UnicodeScalarView.append(_:)();
    uint64_t v13 = *(void *)(v0 + 32);
    objc_super v14 = *(void *)(v0 + 40);
    *uint64_t v11 = v13;
    v11[1] = v14;
    swift_bridgeObjectRetain();
    char v15 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v15 >= 2)
    {
      uint64_t v22 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000LL) == 0) {
        uint64_t v22 = v13 & 0xFFFFFFFFFFFFLL;
      }
      if (v22)
      {
        uint64_t result = specialized Collection.first.getter(v13, v14);
        if (!v8)
        {
          __break(1u);
LABEL_39:
          *(void *)(v0 + 112) = swift_getAssociatedTypeWitness();
          *(void *)(v0 + 120) = swift_getAssociatedConformanceWitness();
          uint64_t v23 = (void *)swift_task_alloc();
          *(void *)(v0 + 128) = v23;
          *uint64_t v23 = v0;
          v23[1] = AsyncCharacterSequence.AsyncIterator.next();
          return dispatch thunk of AsyncIteratorProtocol.next()();
        }

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 168LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v1 = *(_BYTE *)(v0 + 188);
  if ((*(_BYTE *)(v0 + 189) & 1) == 0)
  {
    if ((v1 & 0xC0) == 0x80)
    {
      uint64_t v2 = *(void *)(v0 + 144);
      uint64_t v3 = *(void *)(v0 + 152) + 1LL;
      *(_BYTE *)(v0 + 180 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v1;
      if (v3 != v2)
      {
        *(void *)(v0 + 152) = v3;
        uint64_t v4 = (void *)swift_task_alloc();
        *(void *)(v0 + 160) = v4;
        *uint64_t v4 = v0;
        v4[1] = AsyncCharacterSequence.AsyncIterator.next();
        return dispatch thunk of AsyncIteratorProtocol.next()();
      }
    }

    else
    {
      uint64_t v5 = (_BYTE *)(*(void *)(v0 + 56) + *(int *)(v0 + 176));
      *uint64_t v5 = v1;
      v5[1] = 0;
    }
  }

  uint64_t v6 = static String._fromUTF8Repairing(_:)();
  uint64_t v8 = specialized Collection.first.getter(v6, v7);
  swift_bridgeObjectRelease();
  if ((v8 & 0x100000000LL) != 0) {
    goto LABEL_38;
  }
  id v9 = 1LL;
  while (1)
  {
    uint64_t v10 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36LL));
    uint64_t v11 = v10[1];
    *(void *)(v0 + 32) = *v10;
    *(void *)(v0 + 40) = v11;
    String.UnicodeScalarView.append(_:)();
    unint64_t v12 = *(void *)(v0 + 32);
    uint64_t v13 = *(void *)(v0 + 40);
    *uint64_t v10 = v12;
    v10[1] = v13;
    swift_bridgeObjectRetain();
    objc_super v14 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v14 >= 2)
    {
      double v20 = HIBYTE(v13) & 0xF;
      if ((v13 & 0x2000000000000000LL) == 0) {
        double v20 = v12 & 0xFFFFFFFFFFFFLL;
      }
      if (v20)
      {
        uint64_t result = specialized Collection.first.getter(v12, v13);
        if (!v22)
        {
          __break(1u);
LABEL_32:
          *(void *)(v0 + 112) = swift_getAssociatedTypeWitness();
          *(void *)(v0 + 120) = swift_getAssociatedConformanceWitness();
          uint64_t v23 = (void *)swift_task_alloc();
          *(void *)(v0 + 128) = v23;
          *uint64_t v23 = v0;
          v23[1] = AsyncCharacterSequence.AsyncIterator.next();
          return dispatch thunk of AsyncIteratorProtocol.next()();
        }

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator( uint64_t a1, uint64_t a2)
{
  v3[5] = v2;
  v3[6] = a2;
  v3[4] = a1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(v4 + 40);
  uint64_t v5 = *(void *)(v4 + 48);
  uint64_t v7 = *(void *)(v5 + 16);
  *(void *)(v4 + 56) = v7;
  uint64_t v8 = *(void *)(v5 + 24);
  *(void *)(v4 + 6os_unfair_lock_unlock(*v0 + 4) = v8;
  uint64_t v9 = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator(0LL, v7, v8, a4);
  *(void *)(v4 + 72) = v9;
  uint64_t v10 = *(int *)(v9 + 36);
  *(_DWORD *)(v4 + 120) = v10;
  uint64_t v11 = (char *)(v6 + v10);
  if ((v11[1] & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    unint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v4 + 88) = v12;
    *unint64_t v12 = v4;
    v12[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }

  else
  {
    char v14 = *v11;
    *(_WORD *)uint64_t v11 = 256;
    char v15 = (void *)swift_task_alloc();
    *(void *)(v4 + 80) = v15;
    *char v15 = v4;
    v15[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    return AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)(v14, *(void *)(v4 + 72));
  }

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator( uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(void *)(v4 + 10os_unfair_lock_unlock(*v0 + 4) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(void *)(v4 + 10os_unfair_lock_unlock(*v0 + 4) = a1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator()
{
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t *v18;
  char v19;
  void *v20;
  if ((*(void *)(v0 + 104) & 0x100000000LL) != 0) {
    goto LABEL_8;
  }
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 40) + *(int *)(*(void *)(v0 + 48) + 36LL));
  uint64_t v2 = v1[1];
  *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *v1;
  *(void *)(v0 + 2os_unfair_lock_unlock(*v0 + 4) = v2;
  String.UnicodeScalarView.append(_:)();
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  *uint64_t v1 = v4;
  v1[1] = v3;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.count.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 >= 2)
  {
    uint64_t v7 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000LL) == 0) {
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (!v7) {
      goto LABEL_20;
    }
    uint64_t result = specialized Collection.first.getter(v4, v3);
    if (v8)
    {
LABEL_13:
      char v14 = result;
      char v15 = v8;
      specialized RangeReplaceableCollection.removeFirst(_:)(1LL);
LABEL_17:
      uint64_t v18 = *(uint64_t **)(v0 + 32);
      *uint64_t v18 = v14;
      v18[1] = v15;
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    __break(1u);
LABEL_8:
    uint64_t v9 = (uint64_t *)(*(void *)(v0 + 40) + *(int *)(*(void *)(v0 + 48) + 36LL));
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    swift_bridgeObjectRetain();
    unint64_t v12 = String.count.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v12 < 1)
    {
      char v14 = 0LL;
      char v15 = 0LL;
      goto LABEL_17;
    }

    uint64_t v13 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000LL) == 0) {
      uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
    }
    if (v13)
    {
      uint64_t result = specialized Collection.first.getter(v10, v11);
      if (v8) {
        goto LABEL_13;
      }
      goto LABEL_21;
    }

    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }

  uint64_t v16 = (char *)(*(void *)(v0 + 40) + *(int *)(v0 + 120));
  if ((v16[1] & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    unint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v17;
    *unint64_t v17 = v0;
    v17[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }

  else
  {
    uint64_t v19 = *v16;
    *(_WORD *)uint64_t v16 = 256;
    double v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v20;
    *double v20 = v0;
    v20[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    return AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)(v19, *(void *)(v0 + 72));
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  char v19;
  char *v20;
  void *v21;
  char v22;
  void *v23;
  LOBYTE(v1) = *(_BYTE *)(v0 + 124);
  if ((*(_BYTE *)(v0 + 125) & 1) != 0)
  {
    uint64_t v2 = (uint64_t *)(*(void *)(v0 + 40) + *(int *)(*(void *)(v0 + 48) + 36LL));
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    swift_bridgeObjectRetain();
    uint64_t v1 = String.count.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v1 <= 0)
    {
      char v14 = 0LL;
      char v15 = 0LL;
      goto LABEL_16;
    }

    uint64_t v6 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000LL) == 0) {
      uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (!v6)
    {
      __break(1u);
      goto LABEL_23;
    }

    uint64_t result = specialized Collection.first.getter(v3, v4);
    if (v7)
    {
LABEL_14:
      char v14 = result;
      char v15 = v7;
      specialized RangeReplaceableCollection.removeFirst(_:)(1LL);
LABEL_16:
      uint64_t v16 = *(uint64_t **)(v0 + 32);
      *uint64_t v16 = v14;
      v16[1] = v15;
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    __break(1u);
  }

  if ((v1 & 0x80) != 0)
  {
    unint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v17;
    *unint64_t v17 = v0;
    v17[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    uint64_t v18 = *(void *)(v0 + 72);
    uint64_t v19 = v1;
    return AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)(v19, v18);
  }

  uint64_t v8 = (uint64_t *)(*(void *)(v0 + 40) + *(int *)(*(void *)(v0 + 48) + 36LL));
  uint64_t v9 = v8[1];
  *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *v8;
  *(void *)(v0 + 2os_unfair_lock_unlock(*v0 + 4) = v9;
  String.UnicodeScalarView.append(_:)();
  uint64_t v10 = *(void *)(v0 + 16);
  uint64_t v11 = *(void *)(v0 + 24);
  *uint64_t v8 = v10;
  v8[1] = v11;
  swift_bridgeObjectRetain();
  unint64_t v12 = String.count.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v12 <= 1)
  {
    double v20 = (char *)(*(void *)(v0 + 40) + *(int *)(v0 + 120));
    if ((v20[1] & 1) != 0)
    {
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      double v21 = (void *)swift_task_alloc();
      *(void *)(v0 + 88) = v21;
      void *v21 = v0;
      v21[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }

    uint64_t v22 = *v20;
    *(_WORD *)double v20 = 256;
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v23;
    *uint64_t v23 = v0;
    v23[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    uint64_t v18 = *(void *)(v0 + 72);
    uint64_t v19 = v22;
    return AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)(v19, v18);
  }

  uint64_t v13 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000LL) == 0) {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v13)
  {
    uint64_t result = specialized Collection.first.getter(v10, v11);
    if (v7) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }

uint64_t AsyncCharacterSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  __n128 v5 = MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, __n128))(v7 + 16))((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL), v5);
  uint64_t v8 = *(void *)(a1 + 24);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  *(_WORD *)(a2 + *(int *)(type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator(0LL, v4, v8, v9) + 36)) = 256;
  uint64_t result = type metadata accessor for AsyncCharacterSequence.AsyncIterator(0LL, v4, v8, v10);
  unint64_t v12 = (void *)(a2 + *(int *)(result + 36));
  *unint64_t v12 = 0LL;
  v12[1] = 0xE000000000000000LL;
  return result;
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncCharacterSequence<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v2, a1);
}

uint64_t AsyncSequence<>.characters.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2);
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((a2 & 0x2000000000000000LL) == 0 && (a1 & 0x1000000000000000LL) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }

  else
  {
    unsigned int v5 = 0;
  }

  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t specialized RangeReplaceableCollection.removeFirst(_:)(uint64_t result)
{
  if (result)
  {
    if (result < 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t result = String.index(_:offsetBy:limitedBy:)();
      if ((v1 & 1) == 0) {
        return String.removeSubrange(_:)();
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0LL;
  }
}

{
  uint64_t v3;
  unsigned __int8 v4;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    uint64_t v4 = a1;
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      uint64_t v4 = String.UTF8View._foreignSubscript(position:)();
    }

    else if ((a2 & 0x2000000000000000LL) == 0)
    {
      if ((a1 & 0x1000000000000000LL) != 0) {
        uint64_t v4 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      }
      else {
        uint64_t v4 = *(_BYTE *)_StringObject.sharedUTF8.getter();
      }
    }
  }

  else
  {
    uint64_t v4 = 0;
  }

  return v4 | ((v3 == 0) << 8);
}

{
  uint64_t v2;
  unsigned int v3;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    goto LABEL_9;
  }
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = String.UTF16View._foreignSubscript(position:)();
    return (unsigned __int16)v3 | ((v2 == 0) << 16);
  }

  uint64_t v3 = _StringGuts.fastUTF8Scalar(startingAt:)();
  if (HIWORD(v3))
  {
    uint64_t v3 = (unsigned __int16)((v3 + 67043328) >> 10) + 55296;
    if ((v3 & 0x10000) != 0)
    {
      __break(1u);
LABEL_9:
      LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
    }
  }

  return (unsigned __int16)v3 | ((v2 == 0) << 16);
}

uint64_t type metadata accessor for AsyncCharacterSequence.AsyncIterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AsyncCharacterSequence.AsyncIterator);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncCharacterSequence<A>()
{
}

uint64_t getEnumTagSinglePayload for AsyncCharacterSequence(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183285DE8 + 4 * byte_1837C7060[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AsyncCharacterSequence( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for AsyncCharacterSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AsyncCharacterSequence);
}

uint64_t type metadata completion function for AsyncCharacterSequence.AsyncIterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator( 319LL,  *(void *)(a1 + 16),  *(void *)(a1 + 24),  a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncCharacterSequence.AsyncIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = v6 + 9;
  int v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || ((v6 + 9) & 0xFFFFFFFFFFFFFFF8LL) + 16 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(_WORD *)((char *)a1 + v6) = *(_WORD *)((char *)a2 + v6);
    unsigned int v11 = (void *)(((unint64_t)a1 + v7) & 0xFFFFFFFFFFFFFFF8LL);
    unsigned int v12 = (void *)(((unint64_t)a2 + v7) & 0xFFFFFFFFFFFFFFF8LL);
    *unsigned int v11 = *v12;
    v11[1] = v12[1];
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t destroy for AsyncCharacterSequence.AsyncIterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(a1, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AsyncCharacterSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  *(_WORD *)(v6 + a1) = *(_WORD *)(v6 + a2);
  v6 += 9LL;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  void *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AsyncCharacterSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  *(_WORD *)(v6 + a1) = *(_WORD *)(v6 + a2);
  v6 += 9LL;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  void *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AsyncCharacterSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  *(_WORD *)(v6 + a1) = *(_WORD *)(v6 + a2);
  *(_OWORD *)((v6 + 9 + a1) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((v6 + 9 + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for AsyncCharacterSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  *(_WORD *)(v6 + a1) = *(_WORD *)(v6 + a2);
  v6 += 9LL;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  void *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncCharacterSequence.AsyncIterator(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((v7 + 9) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    __asm { BR              X15 }
  }

  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  }
  unint64_t v12 = *(void *)(((a1 + v7 + 9) & 0xFFFFFFFFFFFFF8LL) + 8);
  if (v12 >= 0xFFFFFFFF) {
    LODWORD(v12) = -1;
  }
  return (v12 + 1);
}

void storeEnumTagSinglePayload for AsyncCharacterSequence.AsyncIterator( unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 >= a3)
  {
    int v11 = 0u;
    if (a2 <= v7) {
      goto LABEL_17;
    }
  }

  else
  {
    if ((((_DWORD)v8 + 9) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v9 = a3 - v7 + 1;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v9 >= 0x10000) {
      int v10 = 4;
    }
    else {
      int v10 = 2;
    }
    if (v9 < 0x100) {
      int v10 = 1;
    }
    if (v9 >= 2) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    if (a2 <= v7) {
LABEL_17:
    }
      __asm { BR              X11 }
  }

  if ((((_DWORD)v8 + 9) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v12 = ~v7 + a2;
    bzero(a1, ((v8 + 9) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v12;
  }

  __asm { BR              X10 }

void sub_183286658()
{
  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x183286738LL);
}

void sub_183286660()
{
  *(_DWORD *)(v0 + v2) = 0;
  if (v1) {
    JUMPOUT(0x183286668LL);
  }
  JUMPOUT(0x183286738LL);
}

void sub_1832866D0()
{
  *uint64_t v0 = v1;
  JUMPOUT(0x183286738LL);
}

void sub_1832866F4()
{
  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x183286738LL);
}

void sub_1832866FC()
{
  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x183286738LL);
}

void sub_183286704(uint64_t a1, size_t a2, unsigned int a3)
{
  *(_WORD *)&v4[v6] = 0;
  if (v5)
  {
    if (a3 < 0x7FFFFFFF) {
      JUMPOUT(0x1832866D8LL);
    }
    if (a3 >= v5) {
      JUMPOUT(0x183286710LL);
    }
    if ((_DWORD)a2)
    {
      else {
        int v3 = 4;
      }
      bzero(v4, a2);
      __asm { BR              X10 }
    }
  }

  JUMPOUT(0x183286738LL);
}

void sub_18328674C()
{
  *(_WORD *)uint64_t v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x183286738LL);
}

void sub_18328675C()
{
  *uint64_t v0 = v1;
  JUMPOUT(0x183286738LL);
}

void sub_183286764()
{
  *uint64_t v0 = v1;
  JUMPOUT(0x183286738LL);
}

Swift::String_optional __swiftcall ICU.Enumerator.Elements.Iterator.next()()
{
  if (uenum_next())
  {
    uint64_t v0 = String.init(cString:)();
  }

  else
  {
    uint64_t v0 = 0LL;
    int v1 = 0LL;
  }

  result.value._unint64_t object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t ICU.Enumerator.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICU.Enumerator()
{
  return objc_opt_self();
}

Swift::String __swiftcall Date.VerbatimFormatStyle.format(_:)(Foundation::Date a1)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  double v3 = *v1;
  uint64_t v4 = *((void *)v2 + 6);
  uint64_t v5 = *((void *)v2 + 7);
  __int128 v6 = v2[1];
  __int128 v19 = *v2;
  __int128 v20 = v6;
  __int128 v21 = v19;
  __int128 v7 = v2[2];
  __int128 v22 = v6;
  *(_OWORD *)uint64_t v23 = v7;
  *(void *)&v23[16] = v4;
  uint64_t v24 = v5;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v21, (uint64_t)v29);
  __int128 v21 = v29[0];
  __int128 v22 = v29[1];
  v23[0] = v30;
  *(_OWORD *)&v23[8] = v31;
  LOBYTE(v2os_unfair_lock_unlock(*v0 + 4) = v32;
  uint64_t v25 = v33;
  uint64_t v26 = v34;
  char v27 = v35;
  uint64_t v28 = v36;
  uint64_t v8 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v8
    || (uint64_t v9 = swift_retain_n(),
        MEMORY[0x1895F8858](v9),
        swift_retain(),
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v18, (uint64_t *)v29),
        int v11 = (void *)*((void *)&v29[0] + 1),
        id v10 = *(id *)&v29[0],
        swift_release_n(),
        !v11))
  {
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v3);
    id v13 = objc_msgSend(v12, sel_description);

    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    int v11 = v14;
  }

  uint64_t v15 = (uint64_t)v10;
  uint64_t v16 = v11;
  result._unint64_t object = v16;
  result._uint64_t countAndFlagsBits = v15;
  return result;
}

uint64_t Date.VerbatimFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v3 = *(void *)(v2 + 56);
  __int128 v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(_OWORD *)(a2 + 32) = *a1;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 Date.VerbatimFormatStyle.timeZone.setter(__n128 *a1)
{
  __n128 result = *a1;
  *int v1 = *a1;
  return result;
}

uint64_t (*Date.VerbatimFormatStyle.timeZone.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.VerbatimFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

__n128 Date.VerbatimFormatStyle.calendar.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*Date.VerbatimFormatStyle.calendar.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.VerbatimFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 32);
  return swift_unknownObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.locale.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  return result;
}

uint64_t (*Date.VerbatimFormatStyle.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 Date.VerbatimFormatStyle.init(format:locale:timeZone:calendar:)@<Q0>( uint64_t *a1@<X0>, __n128 *a2@<X1>, _OWORD *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  __int128 v7 = *a4;
  *(_OWORD *)a5 = *a3;
  *(_OWORD *)(a5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  __n128 result = *a2;
  *(__n128 *)(a5 + 32) = *a2;
  *(void *)(a5 + 48) = v5;
  *(void *)(a5 + 56) = v6;
  return result;
}

uint64_t Date.VerbatimFormatStyle.attributed.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  __int128 v6 = *(_OWORD *)(v1 + 16);
  v7[0] = *(_OWORD *)v1;
  v7[1] = v6;
  uint64_t v7[2] = *(_OWORD *)(v1 + 32);
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)v7);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, a1);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.VerbatimFormatStyle.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_183286C74 + 4 * byte_1837C71B0[*v0]))( 0x656E6F5A656D6974LL,  0xE800000000000000LL);
}

uint64_t sub_183286C74()
{
  return 0x7261646E656C6163LL;
}

uint64_t sub_183286C88()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_183286C9C()
{
  return 0x615074616D726F66LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.VerbatimFormatStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Date.VerbatimFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.VerbatimFormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.VerbatimFormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.VerbatimFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  Swift::UInt v43;
  Swift::UInt v44;
  Swift::UInt8 v45;
  Swift::UInt8 v46;
  Swift::UInt8 v47;
  _BYTE v48[144];
  _BYTE v49[8];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;
  void v67[18];
  _BYTE v68[144];
  _BYTE v69[152];
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 112);
  swift_unknownObjectRetain();
  v8(a1, ObjectType, v3);
  swift_unknownObjectRelease();
  uint64_t v9 = swift_getObjectType();
  id v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 120);
  swift_unknownObjectRetain();
  v10(a1, v9, v4);
  swift_unknownObjectRelease();
  if (!v5)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }

  Hasher._combine(_:)(1u);
  uint64_t v11 = swift_getObjectType();
  id v12 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain_n();
  if ((v12(v11, v6) & 1) != 0)
  {
    Swift::UInt8 v13 = 1;
LABEL_7:
    Hasher._combine(_:)(v13);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(v11, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v14(v67, v11, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)v68);
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v69) == 1)
  {
    Swift::UInt8 v13 = 0;
    goto LABEL_7;
  }

  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v49);
  Hasher._combine(_:)(1u);
  if (v49[0] == 2)
  {
    uint64_t v16 = 0;
  }

  else
  {
    uint64_t v16 = v49[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v16);
  unint64_t v17 = v50;
  if (!v50)
  {
    Hasher._combine(_:)(0);
    __int128 v22 = v49;
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v17 + 16));
  uint64_t v18 = *(void *)(v17 + 16);
  if (!v18)
  {
    outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v48);
    __int128 v22 = v48;
LABEL_23:
    outlined retain of LocalePreferences(v22);
    if (!v51) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  outlined retain of LocalePreferences?( (uint64_t)v68,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v19 = v17 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v19 += 16LL;
    --v18;
  }

  while (v18);
  swift_bridgeObjectRelease();
  if (!v51)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v52) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }

uint64_t Date.VerbatimFormatStyle.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.VerbatimFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v17 = v3[1];
  uint64_t v9 = *((void *)v3 + 4);
  uint64_t v14 = *((void *)v3 + 5);
  uint64_t v15 = *((void *)v3 + 6);
  uint64_t v16 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v18 = *v3;
  char v19 = 0;
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = v14;
    uint64_t v11 = v16;
    __int128 v18 = v17;
    char v19 = 1;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&__int128 v18 = v11;
    *((void *)&v18 + 1) = v10;
    char v19 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Date.VerbatimFormatStyle.hashValue.getter()
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  Swift::UInt v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  _BYTE v46[144];
  _BYTE v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  void v65[18];
  _BYTE v66[144];
  _BYTE v67[144];
  _BYTE v68[80];
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 112);
  swift_unknownObjectRetain();
  v6(v68, ObjectType, v1);
  swift_unknownObjectRelease();
  uint64_t v7 = swift_getObjectType();
  uint64_t v8 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 120);
  swift_unknownObjectRetain();
  v8(v68, v7, v2);
  swift_unknownObjectRelease();
  if (!v3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }

  Hasher._combine(_:)(1u);
  uint64_t v9 = swift_getObjectType();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if ((v10(v9, v4) & 1) != 0)
  {
    Swift::UInt8 v11 = 1;
LABEL_7:
    Hasher._combine(_:)(v11);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v9, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v12(v65, v9, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v66);
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v67) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_7;
  }

  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v47);
  Hasher._combine(_:)(1u);
  if (v47[0] == 2)
  {
    uint64_t v14 = 0;
  }

  else
  {
    uint64_t v14 = v47[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v14);
  uint64_t v15 = v48;
  if (!v48)
  {
    Hasher._combine(_:)(0);
    __int128 v20 = v47;
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v15 + 16));
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16)
  {
    outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v46);
    __int128 v20 = v46;
LABEL_23:
    outlined retain of LocalePreferences(v20);
    if (!v49) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  outlined retain of LocalePreferences?( (uint64_t)v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v17 = v15 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 += 16LL;
    --v16;
  }

  while (v16);
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v50) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }

uint64_t Date.VerbatimFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.VerbatimFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  else
  {
    char v26 = 0;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __int128 v24 = v25;
    char v26 = 1;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    swift_unknownObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __int128 v23 = v25;
    char v26 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    uint64_t v10 = v23;
    swift_unknownObjectRetain();
    uint64_t v22 = 0LL;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v21 = v10;
    uint64_t v20 = *((void *)&v25 + 1);
    uint64_t v11 = v25;
    LOBYTE(v25) = 3;
    swift_unknownObjectRetain();
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v14 = v13;
    uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v16 = v12;
    v15(v8, v5);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    __int128 v17 = v23;
    *(_OWORD *)a2 = v24;
    *(_OWORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v17;
    uint64_t v18 = v20;
    *(void *)(a2 + 32) = v11;
    *(void *)(a2 + 40) = v18;
    *(void *)(a2 + 48) = v16;
    *(void *)(a2 + 56) = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.VerbatimFormatStyle@<X0>( Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  Swift::String v4 = Date.VerbatimFormatStyle.format(_:)(a2);
  uint64_t result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.VerbatimFormatStyle@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v3 = *(void *)(v2 + 56);
  __int128 v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(_OWORD *)(a2 + 32) = *a1;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.VerbatimFormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.VerbatimFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.VerbatimFormatStyle(void *a1)
{
  return Date.VerbatimFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.VerbatimFormatStyle()
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  Swift::UInt v40;
  Swift::UInt v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  void v63[18];
  _BYTE v64[144];
  _BYTE v65[144];
  _BYTE v66[80];
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  __int128 v6 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 112);
  swift_unknownObjectRetain();
  v6(v66, ObjectType, v1);
  swift_unknownObjectRelease();
  uint64_t v7 = swift_getObjectType();
  uint64_t v8 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 120);
  swift_unknownObjectRetain();
  v8(v66, v7, v2);
  swift_unknownObjectRelease();
  if (!v3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }

  Hasher._combine(_:)(1u);
  uint64_t v9 = swift_getObjectType();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if ((v10(v9, v4) & 1) != 0)
  {
    Swift::UInt8 v11 = 1;
LABEL_7:
    Hasher._combine(_:)(v11);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v9, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v12(v63, v9, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v65);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v65) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_7;
  }

  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)&v45);
  Hasher._combine(_:)(1u);
  if (v45 == 2)
  {
    uint64_t v14 = 0;
  }

  else
  {
    uint64_t v14 = v45 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v14);
  uint64_t v15 = v46;
  if (!v46)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v45);
    if (!v47) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v15 + 16));
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16) {
    goto LABEL_22;
  }
  outlined retain of LocalePreferences?( (uint64_t)v64,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v17 = v15 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 += 16LL;
    --v16;
  }

  while (v16);
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v48) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }

uint64_t static FormatStyle<>.verbatim(_:locale:timeZone:calendar:)@<X0>( uint64_t *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  __int128 v8 = *a4;
  *(_OWORD *)a5 = *a3;
  *(_OWORD *)(a5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v8;
  *(_OWORD *)(a5 + 32) = *a2;
  *(void *)(a5 + 48) = v5;
  *(void *)(a5 + 56) = v6;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *((void *)v1 + 6);
  uint64_t v3 = *((void *)v1 + 7);
  *(_BYTE *)a1 = 0;
  *(void *)(a1 + 8) = 0xC1CD27E440000000LL;
  __int128 v4 = *v1;
  __int128 v6 = v1[1];
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1[2];
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = v2;
  *(void *)(a1 + 72) = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance Date.VerbatimFormatStyle@<X0>( uint64_t a1@<X8>)
{
  uint64_t v2 = *((void *)v1 + 6);
  uint64_t v3 = *((void *)v1 + 7);
  *(_BYTE *)a1 = 0;
  *(void *)(a1 + 8) = 0xC1CD27E440000000LL;
  __int128 v4 = *v1;
  __int128 v6 = v1[1];
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1[2];
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = v2;
  *(void *)(a1 + 72) = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.Attributed.subscript.getter()
{
  return swift_unknownObjectRelease();
}

uint64_t key path getter for Date.VerbatimFormatStyle.Attributed.subscript<A>(dynamicMember:) : <A>Date.VerbatimFormatStyle.AttributedA( uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  Date.VerbatimFormatStyle.Attributed.subscript.getter(v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t Date.VerbatimFormatStyle.Attributed.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  specialized Measurement<>.AttributedStyle.subscript.setter(a1);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x189619628] + v3 + 8) - 8LL) + 8LL))(a1);
}

void (*Date.VerbatimFormatStyle.Attributed.subscript.modify( void *a1, void *a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x78uLL);
  *a1 = v5;
  v5[8] = a2;
  v5[9] = v2;
  uint64_t v6 = *(void *)(*MEMORY[0x189619628] + *a2 + 8LL);
  v5[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[11] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[12] = malloc(v8);
  v5[13] = malloc(v8);
  v5[14] = malloc(v8);
  uint64_t v9 = *(void *)(v2 + 48);
  uint64_t v10 = *(void *)(v2 + 56);
  __int128 v12 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v2;
  *((_OWORD *)v5 + 1) = v12;
  *((_OWORD *)v5 + 2) = *(_OWORD *)(v2 + 32);
  v5[6] = v9;
  v5[7] = v10;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return Date.VerbatimFormatStyle.Attributed.subscript.modify;
}

void Date.VerbatimFormatStyle.Attributed.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  __int128 v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 88LL) + 16LL);
  v4(*(void *)(*(void *)a1 + 104LL), v3[14], v3[10]);
  uint64_t v5 = (void *)v3[13];
  uint64_t v6 = (void *)v3[14];
  uint64_t v8 = v3[11];
  uint64_t v7 = (void *)v3[12];
  uint64_t v9 = v3[10];
  if ((a2 & 1) != 0)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
  }

  else
  {
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }

  v10(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t Date.VerbatimFormatStyle.Attributed.format(_:)@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  double v4 = *a1;
  uint64_t v5 = *(void *)(v2 + 48);
  uint64_t v6 = *(void *)(v2 + 56);
  __int128 v59 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)v2;
  *(_OWORD *)&v65[16] = v59;
  *(_OWORD *)&v65[32] = *(_OWORD *)(v2 + 32);
  *(void *)&v65[48] = v5;
  *(void *)uint64_t v66 = v6;
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain_n();
  ICUDateFormatter.DateFormatInfo.init(_:)(v65, (uint64_t)v71);
  *(_OWORD *)uint64_t v65 = v71[0];
  *(_OWORD *)&v65[16] = v71[1];
  v65[32] = v72;
  *(_OWORD *)&v65[40] = *(_OWORD *)v73;
  v66[0] = v73[16];
  *(_OWORD *)&v66[8] = v74;
  char v67 = v75;
  uint64_t v68 = *((void *)&v75 + 1);
  uint64_t v7 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)v65);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v50 = a2;
  if (!v7) {
    goto LABEL_20;
  }
  *(double *)uint64_t v71 = v4;
  Swift::tuple_String_OpaquePointer_optional v92 = ICUDateFormatter.attributedFormat(_:)(v8);
  if (!v92.value._0._object)
  {
    swift_release();
LABEL_20:
    id v48 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v4);
    id v49 = objc_msgSend(v48, sel_description);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    BigString.init(_:)();
    uint64_t result = AttributedString.init(_:attributes:)(v71, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v65);
    uint64_t v12 = *(void *)v65;
    goto LABEL_21;
  }

  uint64_t countAndFlagsBits = v92.value._0._countAndFlagsBits;
  unint64_t object = v92.value._0._object;
  rawValue = v92.value._1._rawValue;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v69, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v71);
  uint64_t v12 = *(void *)&v71[0];
  uint64_t v13 = rawValue[2];
  unint64_t v54 = object;
  if (!v13)
  {
LABEL_18:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
LABEL_21:
    *char v50 = v12;
    return result;
  }

  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v14 = 0LL;
  uint64_t v15 = (char *)(rawValue + 6);
  uint64_t v53 = countAndFlagsBits;
  while (1)
  {
    uint64_t v16 = *((unsigned int *)v15 - 4);
    unint64_t v60 = v15;
    *(void *)uint64_t v65 = countAndFlagsBits;
    *(void *)&_BYTE v65[8] = v54;
    swift_bridgeObjectRetain();
    unint64_t v17 = String.Index.init<A>(utf16Offset:in:)();
    *(void *)uint64_t v65 = countAndFlagsBits;
    *(void *)&_BYTE v65[8] = v54;
    swift_bridgeObjectRetain();
    unint64_t v18 = String.Index.init<A>(utf16Offset:in:)();
    if (v18 >> 14 < v17 >> 14) {
      break;
    }
    unint64_t v19 = v18;
    uint64_t v57 = v14;
    uint64_t v58 = v13;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v17, v19, (_OWORD *)v12, (unint64_t *)v65);
    uint64_t v20 = *(void *)&v65[24];
    if (*(void *)&v65[24] == 2LL) {
      goto LABEL_24;
    }
    uint64_t v21 = *(void *)v65;
    uint64_t v55 = *(void *)&v65[16];
    uint64_t v56 = *(void *)&v65[8];
    uint64_t v23 = *(void *)&v65[40];
    uint64_t v22 = *(void *)&v65[32];
    uint64_t v25 = *(void *)&v65[48];
    uint64_t v24 = *(void *)v66;
    uint64_t v26 = MEMORY[0x18961AFF0];
    uint64_t v63 = MEMORY[0x18961AFF0];
    uint64_t v27 = MEMORY[0x18961AFF8];
    uint64_t v64 = MEMORY[0x18961AFF8];
    AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(udateFormatField:)(v16, v65);
    if (v65[0] == 17)
    {
      uint64_t v28 = v27;
      uint64_t v29 = v26;
    }

    else
    {
      specialized AttributeContainer.subscript.setter(v65[0]);
      uint64_t v29 = v63;
      uint64_t v28 = v64;
    }

    v62[0] = v29;
    v62[1] = v28;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      __int128 v30 = *(_OWORD *)(v12 + 32);
      v91[0] = *(_OWORD *)(v12 + 16);
      v91[1] = v30;
      v91[2] = *(_OWORD *)(v12 + 48);
      uint64_t v31 = *(void *)(v12 + 64);
      uint64_t v32 = *(void *)(v12 + 72);
      uint64_t v51 = v21;
      uint64_t v52 = v24;
      uint64_t v33 = v22;
      uint64_t v34 = v25;
      uint64_t v35 = *(void *)(v12 + 80);
      uint64_t v36 = *(void *)(v12 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v91);
      swift_unknownObjectRetain();
      uint64_t v37 = v35;
      uint64_t v25 = v34;
      uint64_t v22 = v33;
      uint64_t v38 = v36;
      uint64_t v21 = v51;
      uint64_t v24 = v52;
      uint64_t v39 = AttributedString.Guts.init(string:runs:)(v91, v31, v32, v37, v38);
      swift_release();
      uint64_t v12 = v39;
    }

    __int128 v40 = *(_OWORD *)(v12 + 32);
    __int128 v88 = *(_OWORD *)(v12 + 16);
    __int128 v89 = v40;
    __int128 v90 = *(_OWORD *)(v12 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    uint64_t v80 = v21;
    uint64_t v81 = v56;
    uint64_t v82 = v55;
    uint64_t v83 = v20;
    uint64_t v84 = v22;
    uint64_t v85 = v23;
    uint64_t v86 = v25;
    uint64_t v87 = v24;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v70);
    outlined release of Locale((uint64_t)v71);
    *(_OWORD *)&_BYTE v65[8] = *(_OWORD *)&v73[8];
    *(_OWORD *)&v65[24] = v74;
    *(_OWORD *)&v65[40] = v75;
    *(_OWORD *)uint64_t v66 = v76;
    *(void *)uint64_t v65 = v12;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    uint64_t v41 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    id v42 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v42);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v41, &v61);
    uint64_t v14 = v57;
    os_unfair_lock_unlock(v42);
    swift_release();
    uint64_t v43 = v61;
    *(void *)&v66[16] = v61;
    BigString.init()();
    uint64_t v61 = 0LL;
    MEMORY[0x186E20E78](&v61, 8LL);
    uint64_t v44 = v61;
    type metadata accessor for AttributedString.Guts();
    uint64_t v45 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0) {
      goto LABEL_23;
    }
    __int128 v46 = v78;
    *(_OWORD *)(v45 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v77;
    *(_OWORD *)(v45 + 32) = v46;
    *(_OWORD *)(v45 + 48) = v79;
    *(void *)(v45 + 6os_unfair_lock_unlock(*v0 + 4) = 0LL;
    *(void *)(v45 + 72) = 0LL;
    *(void *)(v45 + 80) = 0LL;
    *(void *)(v45 + 88) = v44;
    swift_release();
    LOBYTE(v61) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)(v62, (char *)&v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)&v66[16] != v43) {
      goto LABEL_25;
    }
    uint64_t v15 = v60 + 24;
    uint64_t v12 = *(void *)v65;
    swift_release();
    uint64_t v13 = v58 - 1;
    uint64_t countAndFlagsBits = v53;
    if (v58 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }

  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Date.VerbatimFormatStyle.Attributed.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v3 = *(void *)(v2 + 56);
  __int128 v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(_OWORD *)(a2 + 32) = *a1;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  Swift::UInt v45;
  Swift::UInt v46;
  Swift::UInt8 v47;
  Swift::UInt8 v48;
  Swift::UInt8 v49;
  void *v50;
  void *v51;
  void *v52;
  _BYTE v53[144];
  _BYTE v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  void v72[18];
  _BYTE v73[144];
  _BYTE v74[152];
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t ObjectType = swift_getObjectType();
  Foundation::Date v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v8(a1, ObjectType, v3);
  swift_unknownObjectRelease();
  uint64_t v9 = swift_getObjectType();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 120);
  swift_unknownObjectRetain();
  v10(a1, v9, v4);
  swift_unknownObjectRelease();
  if (!v5)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }

  Hasher._combine(_:)(1u);
  uint64_t v11 = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain_n();
  if ((v12(v11, v6) & 1) != 0)
  {
    Swift::UInt8 v13 = 1;
LABEL_7:
    Hasher._combine(_:)(v13);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(v11, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v14(v72, v11, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73);
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v74) == 1)
  {
    Swift::UInt8 v13 = 0;
    goto LABEL_7;
  }

  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v54);
  Hasher._combine(_:)(1u);
  if (v54[0] == 2)
  {
    uint64_t v16 = 0;
  }

  else
  {
    uint64_t v16 = v54[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v16);
  unint64_t v17 = v55;
  if (!v55)
  {
    Hasher._combine(_:)(0);
    uint64_t v22 = v54;
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v17 + 16));
  unint64_t v18 = *(void *)(v17 + 16);
  if (!v18)
  {
    outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v53);
    uint64_t v22 = v53;
LABEL_23:
    outlined retain of LocalePreferences(v22);
    if (!v56) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  outlined retain of LocalePreferences?( (uint64_t)v73,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  unint64_t v19 = v17 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v19 += 16LL;
    --v18;
  }

  while (v18);
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v57) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }

uint64_t static Date.VerbatimFormatStyle.Attributed.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  __int128 v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  id v12[2] = *(_OWORD *)(a1 + 32);
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  __int128 v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  v9[2] = *(_OWORD *)(a2 + 32);
  uint64_t v10 = v4;
  uint64_t v11 = v5;
  return specialized static Date.VerbatimFormatStyle.== infix(_:_:)(v12, v9) & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.VerbatimFormatStyle.Attributed.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.VerbatimFormatStyle.Attributed.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.VerbatimFormatStyle.Attributed.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.VerbatimFormatStyle.Attributed.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  __int128 v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v12[0] = *(_OWORD *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 48);
  uint64_t v8 = *(void *)(v2 + 56);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v10 = *(_OWORD *)(v2 + 16);
  v12[1] = *(_OWORD *)v2;
  id v12[2] = v10;
  __int128 v12[3] = v12[0];
  uint64_t v13 = v9;
  uint64_t v14 = v8;
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Date.VerbatimFormatStyle.Attributed.hashValue.getter()
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  Swift::UInt v43;
  Swift::UInt v44;
  Swift::UInt8 v45;
  Swift::UInt8 v46;
  Swift::UInt8 v47;
  void *v48;
  void *v49;
  void *v50;
  _BYTE v51[144];
  _BYTE v52[8];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  void v70[18];
  _BYTE v71[144];
  _BYTE v72[144];
  _BYTE v73[80];
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v6(v73, ObjectType, v1);
  swift_unknownObjectRelease();
  uint64_t v7 = swift_getObjectType();
  uint64_t v8 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 120);
  swift_unknownObjectRetain();
  v8(v73, v7, v2);
  swift_unknownObjectRelease();
  if (!v3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }

  Hasher._combine(_:)(1u);
  uint64_t v9 = swift_getObjectType();
  __int128 v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if ((v10(v9, v4) & 1) != 0)
  {
    Swift::UInt8 v11 = 1;
LABEL_7:
    Hasher._combine(_:)(v11);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v9, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v12(v70, v9, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)v71);
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v72);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v72) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_7;
  }

  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v52);
  Hasher._combine(_:)(1u);
  if (v52[0] == 2)
  {
    uint64_t v14 = 0;
  }

  else
  {
    uint64_t v14 = v52[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v14);
  uint64_t v15 = v53;
  if (!v53)
  {
    Hasher._combine(_:)(0);
    uint64_t v20 = v52;
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v15 + 16));
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16)
  {
    outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v51);
    uint64_t v20 = v51;
LABEL_23:
    outlined retain of LocalePreferences(v20);
    if (!v54) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  outlined retain of LocalePreferences?( (uint64_t)v71,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  unint64_t v17 = v15 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 += 16LL;
    --v16;
  }

  while (v16);
  swift_bridgeObjectRelease();
  if (!v54)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v55) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }

uint64_t Date.VerbatimFormatStyle.Attributed.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.VerbatimFormatStyle.Attributed.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v9 = v15;
    uint64_t v10 = v16;
    __int128 v12 = v14[1];
    __int128 v11 = v14[2];
    *(_OWORD *)a2 = v14[0];
    *(_OWORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v12;
    *(_OWORD *)(a2 + 32) = v11;
    *(void *)(a2 + 48) = v9;
    *(void *)(a2 + 56) = v10;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.VerbatimFormatStyle.Attributed@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.VerbatimFormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.VerbatimFormatStyle.Attributed( void *a1)
{
  return Date.VerbatimFormatStyle.Attributed.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.VerbatimFormatStyle.Attributed()
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  Swift::UInt v42;
  Swift::UInt v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  Swift::UInt8 v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  void v68[18];
  _BYTE v69[144];
  _BYTE v70[144];
  _BYTE v71[80];
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v6(v71, ObjectType, v1);
  swift_unknownObjectRelease();
  uint64_t v7 = swift_getObjectType();
  uint64_t v8 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 120);
  swift_unknownObjectRetain();
  v8(v71, v7, v2);
  swift_unknownObjectRelease();
  if (!v3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }

  Hasher._combine(_:)(1u);
  uint64_t v9 = swift_getObjectType();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if ((v10(v9, v4) & 1) != 0)
  {
    Swift::UInt8 v11 = 1;
LABEL_7:
    Hasher._combine(_:)(v11);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v9, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  __int128 v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v12(v68, v9, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69);
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v70);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v70) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_7;
  }

  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)&v50);
  Hasher._combine(_:)(1u);
  if (v50 == 2)
  {
    uint64_t v14 = 0;
  }

  else
  {
    uint64_t v14 = v50 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v14);
  uint64_t v15 = v51;
  if (!v51)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v50);
    if (!v52) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v15 + 16));
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16) {
    goto LABEL_22;
  }
  outlined retain of LocalePreferences?( (uint64_t)v69,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  unint64_t v17 = v15 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 += 16LL;
    --v16;
  }

  while (v16);
  swift_bridgeObjectRelease();
  if (!v52)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v53) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.VerbatimFormatStyle.Attributed( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  __int128 v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  id v12[2] = *(_OWORD *)(a1 + 32);
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  __int128 v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  v9[2] = *(_OWORD *)(a2 + 32);
  uint64_t v10 = v4;
  uint64_t v11 = v5;
  return specialized static Date.VerbatimFormatStyle.== infix(_:_:)(v12, v9) & 1;
}

uint64_t Date.VerbatimFormatStyle.attributedStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 56);
  __int128 v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v3;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

void Date.VerbatimFormatStyle.consuming(_:startingAt:in:)( unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  if (a1 >> 14 >= a2 >> 14)
  {
    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    *(_BYTE *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    return;
  }

  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = Date.ParseStrategy.formatter.getter();
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = String.subscript.getter();
    if ((v5 ^ v6) < 0x4000
      || (*(_BYTE *)(v4 + 24) & 1) == 0
      && (Substring.subscript.getter(), char v7 = Character.isWhitespace.getter(), swift_bridgeObjectRelease(), (v7 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
LABEL_15:
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }

    lazy protocol witness table accessor for type Substring and conformance Substring();
    swift_bridgeObjectRetain();
    uint64_t v8 = String.init<A>(_:)();
    unint64_t v10 = v9;
    udat_getCalendar();
    ucal_clone();
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _copyCollectionToContiguousArray<A>(_:)(v8, v10);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v12 = String.Index.utf16Offset<A>(in:)();
    if (v12 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else
    {
      uint64_t v13 = v12;
      if (v12 <= 0x7FFFFFFF)
      {
        int v18 = v12;
        if (!(v11[2] >> 31))
        {
          udat_parseCalendar();
          swift_release();
          if (v13 != v18)
          {
            ucal_getMillis();
            double v15 = v14 / 1000.0 + -978307200.0;
            ucal_close();
            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type Substring and conformance Substring();
            uint64_t v16 = String.Index.init<A>(utf16Offset:in:)();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_release();
            *(void *)a3 = v16;
            *(double *)(a3 + 8) = v15;
            *(_BYTE *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
            return;
          }

          ucal_close();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }

void protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance Date.VerbatimFormatStyle( unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance Date.VerbatimFormatStyle()
{
  return CustomConsumingRegexComponent.regex.getter();
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.discreteInput(before:)(Foundation::Date before)
{
  uint64_t v4 = v2;
  *(Foundation::Date *)&v5._Swift::Double time = (Foundation::Date)*v1;
  uint64_t v6 = *((void *)v3 + 6);
  uint64_t v7 = *((void *)v3 + 7);
  __int128 v8 = v3[1];
  __int128 v13 = *v3;
  __int128 v14 = v8;
  __int128 v15 = v3[2];
  uint64_t v16 = v6;
  uint64_t v17 = v7;
  Swift::Double time = v5._time;
  Foundation::Date_optional result = (Foundation::Date_optional)Date.VerbatimFormatStyle.bound(for:isLower:)(v5, (Swift::Bool)&time);
  int v9 = v19;
  if (v19 == 2)
  {
    double v10 = 0.0;
  }

  else
  {
    double v10 = v18;
    if ((v19 & 1) != 0)
    {
      double v11 = 0.0 - v18;
      if (0.0 - v18 < INFINITY) {
        *(void *)&v11 += (*(uint64_t *)&v11 >> 63) | 1;
      }
      double v10 = -v11;
    }
  }

  *(double *)uint64_t v4 = v10;
  *(_BYTE *)(v4 + 8) = v9 == 2;
  result.value = *(Foundation::Date *)&v10;
  return result;
}

Swift::tuple_bound_Foundation_Date_includedInRangeOfInput_Bool_optional __swiftcall Date.VerbatimFormatStyle.bound(for:isLower:)( Foundation::Date a1, Swift::Bool isLower)
{
  char v5 = v2;
  uint64_t v6 = v3;
  uint64_t v7 = *(void *)isLower;
  __int128 v8 = v4[3];
  v22[2] = v4[2];
  v22[3] = v8;
  __int128 v9 = v4[1];
  v22[0] = *v4;
  v22[1] = v9;
  __int128 v20 = v22[0];
  __int128 v21 = v9;
  __int128 v23 = *v4;
  __int128 v24 = v9;
  outlined retain of Locale((uint64_t)&v24);
  outlined retain of Locale((uint64_t)&v23);
  Calendar.timeZone.setter((uint64_t *)&v20);
  __int128 v20 = v21;
  uint64_t v19 = v7;
  uint64_t v10 = one-time initialization token for updateScheduleCache;
  swift_unknownObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  double v11 = (uint64_t *)(static ICUDateFormatter.DateFormatInfo.updateScheduleCache + 16);
  uint64_t v12 = (os_unfair_lock_s *)(static ICUDateFormatter.DateFormatInfo.updateScheduleCache + 24);
  swift_retain();
  os_unfair_lock_lock(v12);
  closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)(v11, (uint64_t)v22, (uint64_t)&v17);
  os_unfair_lock_unlock(v12);
  swift_release();
  uint64_t v15 = v17;
  char v16 = v18;
  Calendar.bound(for:isLower:updateSchedule:)((double *)&v19, v5 & 1, &v15, v6);
  swift_unknownObjectRelease();
  char v13 = swift_unknownObjectRelease();
  result.value.bound._Swift::Double time = v14;
  result.value.includedInRangeOfInput = v13;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.discreteInput(after:)(Foundation::Date after)
{
  uint64_t v4 = v2;
  *(Foundation::Date *)&v5._Swift::Double time = (Foundation::Date)*v1;
  uint64_t v6 = *((void *)v3 + 6);
  uint64_t v7 = *((void *)v3 + 7);
  __int128 v8 = v3[1];
  __int128 v12 = *v3;
  __int128 v13 = v8;
  __int128 v14 = v3[2];
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  Swift::Double time = v5._time;
  Foundation::Date_optional result = (Foundation::Date_optional)Date.VerbatimFormatStyle.bound(for:isLower:)(v5, (Swift::Bool)&time);
  int v9 = v18;
  if (v18 == 2)
  {
    double v10 = 0.0;
  }

  else
  {
    double v10 = v17;
    if ((v18 & 1) != 0)
    {
      double v10 = v17 + 0.0;
      if (v17 + 0.0 < INFINITY) {
        *(void *)&v10 += (*(uint64_t *)&v10 >> 63) | 1;
      }
    }
  }

  *(double *)uint64_t v4 = v10;
  *(_BYTE *)(v4 + 8) = v9 == 2;
  result.value = *(Foundation::Date *)&v10;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.input(before:)(Foundation::Date before)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 1;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v11 >= v4;
  double v8 = v11;
  if (v11 >= v4) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.input(after:)(Foundation::Date after)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 0;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v4 >= v11;
  double v8 = v11;
  if (v4 >= v11) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

double protocol witness for DiscreteFormatStyle.input(before:) in conformance Date.VerbatimFormatStyle( double a1)
{
  *(void *)&double result = (unint64_t)Date.VerbatimFormatStyle.input(before:)(*(Foundation::Date *)&a1);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(after:) in conformance Date.VerbatimFormatStyle( double a1)
{
  *(void *)&double result = (unint64_t)Date.VerbatimFormatStyle.input(after:)(*(Foundation::Date *)&a1);
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.Attributed.discreteInput(before:)( Foundation::Date before)
{
  char v2 = Date.VerbatimFormatStyle.Attributed.discreteInput(before:)( v1,  (uint64_t (*)(uint64_t *))Date.VerbatimFormatStyle.discreteInput(before:));
  result.value = *(Foundation::Date *)&v3;
  result.is_nil = v2;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.Attributed.discreteInput(after:)(Foundation::Date after)
{
  char v2 = Date.VerbatimFormatStyle.Attributed.discreteInput(before:)( v1,  (uint64_t (*)(uint64_t *))Date.VerbatimFormatStyle.discreteInput(after:));
  result.value = *(Foundation::Date *)&v3;
  result.is_nil = v2;
  return result;
}

uint64_t Date.VerbatimFormatStyle.Attributed.discreteInput(before:)( uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)v2 + 6);
  uint64_t v5 = *((void *)v2 + 7);
  __int128 v6 = v2[1];
  __int128 v9 = *v2;
  __int128 v10 = v6;
  __int128 v11 = v2[2];
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  uint64_t v8 = v3;
  return a2(&v8);
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.Attributed.input(before:)(Foundation::Date before)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 1;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v11 >= v4;
  double v8 = v11;
  if (v11 >= v4) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.Attributed.input(after:)(Foundation::Date after)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 0;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v4 >= v11;
  double v8 = v11;
  if (v4 >= v11) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.VerbatimFormatStyle.Attributed( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.VerbatimFormatStyle.Attributed( a1,  a2,  a3,  (uint64_t (*)(uint64_t *))Date.VerbatimFormatStyle.discreteInput(before:));
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Date.VerbatimFormatStyle.Attributed( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.VerbatimFormatStyle.Attributed( a1,  a2,  a3,  (uint64_t (*)(uint64_t *))Date.VerbatimFormatStyle.discreteInput(after:));
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.VerbatimFormatStyle.Attributed( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  uint64_t v5 = *a1;
  uint64_t v6 = *((void *)v4 + 6);
  uint64_t v7 = *((void *)v4 + 7);
  __int128 v8 = v4[1];
  __int128 v11 = *v4;
  __int128 v12 = v8;
  __int128 v13 = v4[2];
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  uint64_t v10 = v5;
  return a4(&v10);
}

double protocol witness for DiscreteFormatStyle.input(before:) in conformance Date.VerbatimFormatStyle.Attributed( double a1)
{
  *(void *)&double result = (unint64_t)Date.VerbatimFormatStyle.Attributed.input(before:)(*(Foundation::Date *)&a1);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(after:) in conformance Date.VerbatimFormatStyle.Attributed( double a1)
{
  *(void *)&double result = (unint64_t)Date.VerbatimFormatStyle.Attributed.input(after:)(*(Foundation::Date *)&a1);
  return result;
}

uint64_t specialized static Date.VerbatimFormatStyle.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  uint64_t v2 = *((void *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 5);
  uint64_t v4 = *((void *)a1 + 6);
  uint64_t v5 = *((void *)a1 + 7);
  uint64_t v6 = *((void *)a2 + 4);
  uint64_t v7 = *((void *)a2 + 5);
  uint64_t v8 = *((void *)a2 + 6);
  uint64_t v9 = *((void *)a2 + 7);
  __int128 v10 = *a1;
  __int128 v13 = a2[1];
  __int128 v14 = a1[1];
  __int128 v15 = *a2;
  __int128 v16 = v10;
  __int128 v15 = v13;
  __int128 v16 = v14;
  if (v2)
  {
    *(void *)&__int128 v16 = v2;
    *((void *)&v16 + 1) = v3;
    if (v6)
    {
      *(void *)&__int128 v15 = v6;
      *((void *)&v15 + 1) = v7;
      swift_unknownObjectRetain_n();
      char v11 = specialized static Locale.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v15);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if ((v11 & 1) != 0) {
        goto LABEL_8;
      }
      return 0LL;
    }

    swift_unknownObjectRetain();
LABEL_12:
    swift_unknownObjectRelease();
    return 0LL;
  }

  if (v6) {
    goto LABEL_12;
  }
LABEL_8:
  if (v4 == v8 && v5 == v9) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

unint64_t lazy protocol witness table accessor for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle.CodingKeys,  &unk_189C87750);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle.CodingKeys,  &unk_189C87750);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle.CodingKeys,  &unk_189C87750);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle.CodingKeys,  &unk_189C87750);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys);
  }

  return result;
}

uint64_t specialized Date.VerbatimFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656E6F5A656D6974LL && a2 == 0xE800000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x7261646E656C6163LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x615074616D726F66LL && a2 == 0xED00006E72657474LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

unint64_t lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed.CodingKeys,  &unk_189C876C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed.CodingKeys,  &unk_189C876C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed.CodingKeys,  &unk_189C876C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed.CodingKeys,  &unk_189C876C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
}

unint64_t lazy protocol witness table accessor for type Date.ParseStrategy and conformance Date.ParseStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ParseStrategy,  &type metadata for Date.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ParseStrategy,  &type metadata for Date.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ParseStrategy,  &type metadata for Date.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ParseStrategy,  &type metadata for Date.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ParseStrategy,  &type metadata for Date.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ParseStrategy,  &type metadata for Date.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ParseStrategy,  &type metadata for Date.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle.Attributed( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
}

unint64_t lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed,  &type metadata for Date.VerbatimFormatStyle.Attributed);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed,  &type metadata for Date.VerbatimFormatStyle.Attributed);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed,  &type metadata for Date.VerbatimFormatStyle.Attributed);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed,  &type metadata for Date.VerbatimFormatStyle.Attributed);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed,  &type metadata for Date.VerbatimFormatStyle.Attributed);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle.Attributed( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_18328C0E8(uint64_t a1)
{
  return swift_release();
}

uint64_t sub_18328C12C()
{
  return 8LL;
}

void *sub_18328C138(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for Date.VerbatimFormatStyle()
{
  return &type metadata for Date.VerbatimFormatStyle;
}

uint64_t destroy for Date.VerbatimFormatStyle()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Date.VerbatimFormatStyle(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Date.VerbatimFormatStyle(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[5] = v6;
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Date.VerbatimFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.VerbatimFormatStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.VerbatimFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2os_unfair_lock_unlock(*v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 6os_unfair_lock_unlock(*v0 + 4) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 6os_unfair_lock_unlock(*v0 + 4) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Date.VerbatimFormatStyle.Attributed()
{
  return &type metadata for Date.VerbatimFormatStyle.Attributed;
}

uint64_t storeEnumTagSinglePayload for Date.VerbatimFormatStyle.Attributed.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(vos_unfair_lock_unlock(*v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_18328C400 + 4 * byte_1837C71B4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_18328C420 + 4 * byte_1837C71B9[v4]))();
  }
}

_BYTE *sub_18328C400(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_18328C420(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_18328C428(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_18328C430(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_18328C438(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_18328C440(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for Date.VerbatimFormatStyle.Attributed.CodingKeys()
{
  return &unk_189C876C0;
}

uint64_t storeEnumTagSinglePayload for Date.VerbatimFormatStyle.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(vos_unfair_lock_unlock(*v0 + 4) = 1;
  }
  else {
    LODWORD(vos_unfair_lock_unlock(*v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_18328C4A8 + 4 * byte_1837C71C3[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18328C4DC + 4 * byte_1837C71BE[v4]))();
}

uint64_t sub_18328C4DC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18328C4E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18328C4ECLL);
  }
  return result;
}

uint64_t sub_18328C4F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18328C500LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_18328C504(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18328C50C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.VerbatimFormatStyle.CodingKeys()
{
  return &unk_189C87750;
}

uint64_t specialized closure #1 in Data.init(capacity:initializingWith:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, void *a7@<X8>)
{
  if (!a1)
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = a3;
    uint64_t v17 = 0LL;
    closure #1 in String.data(using:allowLossyConversion:)((uint64_t)&v15, a4, a5, a6);
    if (!v7)
    {
      uint64_t result = swift_bridgeObjectRelease();
      if (!v17)
      {
        *a7 = 0LL;
        return result;
      }

      goto LABEL_13;
    }

void specialized Data.init(capacity:initializingWith:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_18328C898()
{
  uint64_t v8 = v3;
  LOWORD(v9) = v1;
  BYTE2(v9) = BYTE2(v1);
  HIBYTE(v9) = BYTE3(v1);
  unsigned __int8 v10 = BYTE4(v1);
  unsigned __int8 v11 = BYTE5(v1);
  unsigned __int8 v12 = BYTE6(v1);
  swift_bridgeObjectRetain();
  specialized closure #1 in Data.init(capacity:initializingWith:)( (uint64_t)&v8,  (uint64_t)&v8 + BYTE6(v1),  v6,  v5,  v0,  v4,  &v13);
  if (v2) {
    return swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = v8;
  unint64_t v15 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  if (v12 < v13)
  {
    __break(1u);
    JUMPOUT(0x18328CCC4LL);
  }

  Data._Representation.replaceSubrange(_:with:count:)();
  swift_bridgeObjectRelease_n();
  return v14;
}

void PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

void type metadata accessor for PredicateExpressions.CollectionIndexSubscript()
{
}

uint64_t PredicateExpressions.CollectionIndexSubscript.evaluate(_:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v59 = a3;
  uint64_t v5 = a2[5];
  uint64_t v64 = (void (*)(char *, uint64_t))a2[3];
  uint64_t v65 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v60 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v61 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  double v62 = (char *)v56 - v8;
  MEMORY[0x1895F8858](v9);
  uint64_t v66 = (char *)v56 - v10;
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[2];
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v18 = MEMORY[0x1895F8858](v17);
  __int128 v20 = (char *)v56 - v19;
  uint64_t v21 = *a1;
  uint64_t v67 = v21;
  uint64_t v22 = v69;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v11 + 16))(&v67, v12, v11, v18);
  if (!v22)
  {
    uint64_t v57 = v16;
    uint64_t v58 = v20;
    uint64_t v69 = v14;
    uint64_t v24 = v13;
    uint64_t v25 = AssociatedTypeWitness;
    uint64_t v67 = v21;
    uint64_t v26 = v66;
    (*(void (**)(uint64_t *, void))(v65 + 16))(&v67, v64);
    uint64_t v27 = a2[6];
    uint64_t v28 = v62;
    uint64_t v29 = v58;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v65 = v27;
    uint64_t v30 = v25;
    uint64_t v31 = v24;
    v56[1] = swift_getAssociatedConformanceWitness();
    char v32 = dispatch thunk of static Comparable.>= infix(_:_:)();
    uint64_t v33 = v60;
    uint64_t v64 = *(void (**)(char *, uint64_t))(v60 + 8);
    v64(v28, v30);
    uint64_t v34 = v61;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v61, v26, v30);
    uint64_t v35 = v69;
    uint64_t v36 = v57;
    uint64_t v37 = v29;
    uint64_t v38 = v31;
    (*((void (**)(char *, char *, uint64_t))v69 + 2))(v57, v37, v31);
    if ((v32 & 1) != 0)
    {
      dispatch thunk of Collection.endIndex.getter();
      char v39 = dispatch thunk of static Comparable.< infix(_:_:)();
      __int128 v40 = v64;
      v64(v28, v30);
      uint64_t v41 = (void (*)(char *, uint64_t))*((void *)v35 + 1);
      v41(v36, v38);
      v40(v34, v30);
      id v42 = v58;
      if ((v39 & 1) != 0)
      {
        uint64_t v43 = v66;
        uint64_t v44 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v46 = v45;
        uint64_t v47 = swift_getAssociatedTypeWitness();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16LL))(v59, v46, v47);
        v44(&v67, 0LL);
        v40(v43, v30);
        return ((uint64_t (*)(char *, uint64_t))v41)(v58, v38);
      }

      uint64_t v69 = v41;
    }

    else
    {
      uint64_t v69 = (void (*)(char *, uint64_t))*((void *)v35 + 1);
      v69(v36, v31);
      __int128 v40 = v64;
      v64(v34, v30);
      id v42 = v58;
    }

    uint64_t v67 = 0LL;
    unint64_t v68 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(70LL);
    v48._uint64_t countAndFlagsBits = 0x207865646E49LL;
    v48._unint64_t object = (void *)0xE600000000000000LL;
    String.append(_:)(v48);
    _print_unlocked<A, B>(_:_:)();
    v49._unint64_t object = (void *)0x80000001839CF1E0LL;
    v49._uint64_t countAndFlagsBits = 0xD000000000000034LL;
    String.append(_:)(v49);
    char v50 = v62;
    dispatch thunk of Collection.startIndex.getter();
    _print_unlocked<A, B>(_:_:)();
    v40(v50, v30);
    v51._uint64_t countAndFlagsBits = 0x203C2E2E20LL;
    v51._unint64_t object = (void *)0xE500000000000000LL;
    String.append(_:)(v51);
    dispatch thunk of Collection.endIndex.getter();
    _print_unlocked<A, B>(_:_:)();
    v40(v50, v30);
    v52._uint64_t countAndFlagsBits = 41LL;
    v52._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v52);
    uint64_t v54 = v67;
    unint64_t v53 = v68;
    lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
    swift_allocError();
    *(void *)uint64_t v55 = v54;
    *(void *)(v55 + 8) = v53;
    *(_BYTE *)(v55 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 2;
    swift_willThrow();
    v40(v66, v30);
    return ((uint64_t (*)(char *, uint64_t))v69)(v42, v38);
  }

  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.CollectionIndexSubscript<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_subscript<A, B>(_:_:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

{
  static PredicateExpressions.build_subscript<A, B>(_:_:)( a1,  a2,  a3,  a4,  a5,  a6,  (void (*)(void, void *))type metadata accessor for PredicateExpressions.CollectionRangeSubscript,  a7);
}

uint64_t PredicateExpressions.CollectionIndexSubscript.description.getter(uint64_t a1)
{
  return PredicateExpressions.CollectionIndexSubscript.description.getter( a1,  (void *)0x80000001839CF220LL,  0x3A7865646E69202CLL);
}

uint64_t PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.CollectionIndexSubscript<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void, void *, __n128);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void v43[3];
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v37 = a5;
  uint64_t v38 = a4;
  uint64_t v41 = a3;
  uint64_t v36 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  char v39 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  __int128 v40 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v42 = v13;
  v43[0] = v13;
  v43[1] = v14;
  v43[2] = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v17;
  uint64_t v19 = v18(0LL, v43, v11);
  __int128 v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&v32 - v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  __int128 v23 = (uint64_t)v46;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v23) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v33 = v20;
  uint64_t v34 = v19;
  uint64_t v46 = a1;
  uint64_t v24 = v39;
  uint64_t v25 = a2;
  uint64_t v35 = v22;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v44);
  uint64_t v26 = v40;
  uint64_t v27 = v42;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v35, v26, v27);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v44);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v28 = v34;
  uint64_t v29 = v35;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v35[*(int *)(v34 + 60)], v24, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  uint64_t v30 = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v37, v29, v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v29, v28);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.CollectionIndexSubscript<>.init(from:),  a5,  a6);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.CollectionIndexSubscript.index.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 60));
}

void PredicateExpressions.CollectionRangeSubscript.init(wrapped:range:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

void PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void (*a7)(void, void *)@<X7>, uint64_t a8@<X8>)
{
  v14[0] = a2;
  v14[1] = a3;
  void v14[2] = a4;
  _OWORD v14[3] = a5;
  v14[4] = a6;
  a7(0LL, v14);
  JUMPOUT(0x18328D3B8LL);
}

void type metadata accessor for PredicateExpressions.CollectionRangeSubscript()
{
}

uint64_t PredicateExpressions.CollectionRangeSubscript.evaluate(_:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v94 = a3;
  uint64_t v5 = a2[6];
  uint64_t v6 = a2[4];
  uint64_t v104 = a2[2];
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v96 = *(void (**)(char *, char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unsigned __int16 v100 = (char *)&v88 - v8;
  uint64_t v102 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v101 = type metadata accessor for Range();
  uint64_t v99 = *(void *)(v101 - 8);
  MEMORY[0x1895F8858](v101);
  unsigned __int16 v95 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  unsigned int v97 = (char *)&v88 - v11;
  MEMORY[0x1895F8858](v12);
  uint64_t v103 = (char *)&v88 - v13;
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  __int128 v20 = (char *)&v88 - v19;
  __n128 v22 = MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v88 - v23;
  uint64_t v25 = *a1;
  uint64_t v106 = v25;
  uint64_t v26 = v105;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v6 + 16))(&v106, v104, v6, v22);
  if (!v26)
  {
    Swift::String v91 = v17;
    Swift::tuple_String_OpaquePointer_optional v92 = v20;
    uint64_t v104 = v15;
    BOOL v105 = v24;
    uint64_t v93 = AssociatedTypeWitness;
    uint64_t v28 = v101;
    uint64_t v106 = v25;
    uint64_t v29 = *(void (**)(uint64_t *, uint64_t))(a2[5] + 16LL);
    uint64_t v30 = a2[3];
    uint64_t v31 = v103;
    v29(&v106, v30);
    uint64_t v90 = 0LL;
    char v32 = v100;
    uint64_t v33 = v105;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v34 = v93;
    char v35 = dispatch thunk of static Comparable.>= infix(_:_:)();
    uint64_t v108 = (void (*)(char *, uint64_t))*((void *)v96 + 1);
    v108(v32, v34);
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
    uint64_t v37 = v97;
    uint64_t v38 = v31;
    uint64_t v39 = v28;
    v36(v97, v38, v28);
    uint64_t v40 = v104;
    uint64_t v41 = v92;
    id v42 = v33;
    uint64_t v43 = v14;
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
    v44(v92, v42, v43);
    if ((v35 & 1) != 0)
    {
      __int128 v89 = v44;
      uint64_t v96 = v36;
      uint64_t v45 = v100;
      dispatch thunk of Collection.endIndex.getter();
      char v46 = dispatch thunk of static Comparable.<= infix(_:_:)();
      v108(v45, v34);
      uint64_t v47 = v43;
      uint64_t v104 = *(void *)(v40 + 8);
      ((void (*)(char *, uint64_t))v104)(v41, v43);
      uint64_t v99 = *(void *)(v99 + 8);
      ((void (*)(char *, uint64_t))v99)(v37, v39);
      if ((v46 & 1) != 0)
      {
        Swift::String v48 = v103;
        Swift::String v49 = &v103[*(int *)(v39 + 36)];
        char v50 = v100;
        Swift::String v51 = v105;
        dispatch thunk of Collection.startIndex.getter();
        unsigned int v97 = v49;
        char v52 = dispatch thunk of static Comparable.>= infix(_:_:)();
        unint64_t v53 = v108;
        v108(v50, v34);
        uint64_t v54 = v95;
        v96(v95, v48, v39);
        uint64_t v55 = v91;
        v89(v91, v51, v47);
        if ((v52 & 1) != 0)
        {
          uint64_t v56 = v47;
          uint64_t v57 = v100;
          dispatch thunk of Collection.endIndex.getter();
          char v58 = dispatch thunk of static Comparable.<= infix(_:_:)();
          v53(v57, v34);
          uint64_t v59 = v55;
          uint64_t v60 = (uint64_t (*)(char *, uint64_t))v104;
          ((void (*)(char *, uint64_t))v104)(v59, v56);
          uint64_t v61 = v39;
          uint64_t v62 = v39;
          uint64_t v63 = (void (*)(char *, uint64_t))v99;
          ((void (*)(char *, uint64_t))v99)(v95, v61);
          if ((v58 & 1) != 0)
          {
            uint64_t v64 = v60;
            uint64_t v65 = v103;
            uint64_t v66 = v105;
            dispatch thunk of Collection.subscript.getter();
            v63(v65, v62);
            return v64(v66, v56);
          }
        }

        else
        {
          ((void (*)(char *, uint64_t))v104)(v55, v47);
          ((void (*)(char *, uint64_t))v99)(v54, v39);
          uint64_t v56 = v47;
          uint64_t v57 = v100;
        }

        uint64_t v106 = 0LL;
        unint64_t v107 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(70LL);
        v79._uint64_t countAndFlagsBits = 0x207865646E49LL;
        v79._unint64_t object = (void *)0xE600000000000000LL;
        String.append(_:)(v79);
        _print_unlocked<A, B>(_:_:)();
        v80._unint64_t object = (void *)0x80000001839CF1E0LL;
        v80._uint64_t countAndFlagsBits = 0xD000000000000034LL;
        String.append(_:)(v80);
        uint64_t v81 = v53;
        uint64_t v82 = v105;
        dispatch thunk of Collection.startIndex.getter();
        _print_unlocked<A, B>(_:_:)();
        v81(v57, v34);
        v83._uint64_t countAndFlagsBits = 0x202E2E2E20LL;
        v83._unint64_t object = (void *)0xE500000000000000LL;
        String.append(_:)(v83);
        dispatch thunk of Collection.endIndex.getter();
        _print_unlocked<A, B>(_:_:)();
        v81(v57, v34);
        v84._uint64_t countAndFlagsBits = 41LL;
        v84._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v84);
        uint64_t v86 = v106;
        unint64_t v85 = v107;
        lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
        swift_allocError();
        *(void *)uint64_t v87 = v86;
        *(void *)(v87 + 8) = v85;
        *(_BYTE *)(v87 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 2;
        swift_willThrow();
        ((void (*)(char *, uint64_t))v99)(v103, v101);
        __int128 v78 = v82;
        return ((uint64_t (*)(char *, uint64_t))v104)(v78, v56);
      }

      uint64_t v56 = v43;
      uint64_t v67 = v105;
    }

    else
    {
      uint64_t v104 = *(void *)(v40 + 8);
      ((void (*)(char *, uint64_t))v104)(v41, v43);
      uint64_t v99 = *(void *)(v99 + 8);
      ((void (*)(char *, uint64_t))v99)(v37, v39);
      uint64_t v56 = v43;
      uint64_t v67 = v105;
    }

    uint64_t v106 = 0LL;
    unint64_t v107 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(70LL);
    v68._uint64_t countAndFlagsBits = 0x207865646E49LL;
    v68._unint64_t object = (void *)0xE600000000000000LL;
    String.append(_:)(v68);
    uint64_t v69 = v93;
    _print_unlocked<A, B>(_:_:)();
    v70._unint64_t object = (void *)0x80000001839CF1E0LL;
    v70._uint64_t countAndFlagsBits = 0xD000000000000034LL;
    String.append(_:)(v70);
    uint64_t v71 = v100;
    dispatch thunk of Collection.startIndex.getter();
    _print_unlocked<A, B>(_:_:)();
    char v72 = v108;
    v108(v71, v69);
    v73._uint64_t countAndFlagsBits = 0x202E2E2E20LL;
    v73._unint64_t object = (void *)0xE500000000000000LL;
    String.append(_:)(v73);
    dispatch thunk of Collection.endIndex.getter();
    _print_unlocked<A, B>(_:_:)();
    v72(v71, v69);
    v74._uint64_t countAndFlagsBits = 41LL;
    v74._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v74);
    uint64_t v76 = v106;
    unint64_t v75 = v107;
    lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
    swift_allocError();
    *(void *)uint64_t v77 = v76;
    *(void *)(v77 + 8) = v75;
    *(_BYTE *)(v77 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 2;
    swift_willThrow();
    ((void (*)(char *, uint64_t))v99)(v103, v101);
    __int128 v78 = v67;
    return ((uint64_t (*)(char *, uint64_t))v104)(v78, v56);
  }

  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.CollectionRangeSubscript<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.CollectionRangeSubscript.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_subscript<A, B>(_:_:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void (*a7)(void, void *)@<X7>, uint64_t a8@<X8>)
{
  v14[0] = a2;
  v14[1] = a3;
  void v14[2] = a4;
  _OWORD v14[3] = a5;
  v14[4] = a6;
  a7(0LL, v14);
  JUMPOUT(0x18328DCB0LL);
}

uint64_t PredicateExpressions.CollectionRangeSubscript.description.getter(uint64_t a1)
{
  return PredicateExpressions.CollectionIndexSubscript.description.getter( a1,  (void *)0x80000001839CF250LL,  0x3A65676E6172202CLL);
}

uint64_t PredicateExpressions.CollectionIndexSubscript.description.getter(uint64_t a1, void *a2, uint64_t a3)
{
  v5._uint64_t countAndFlagsBits = 0xD000000000000022LL;
  v5._unint64_t object = a2;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._uint64_t countAndFlagsBits = a3;
  v6._unint64_t object = (void *)0xE900000000000020LL;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 41LL;
  v7._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  return 0LL;
}

uint64_t PredicateExpressions.CollectionRangeSubscript<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.CollectionRangeSubscript<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionRangeSubscript<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.CollectionRangeSubscript<>.init(from:),  a5,  a6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, uint64_t, void, void), uint64_t a5, uint64_t a6)
{
  return a4(a1, a2[2], a2[3], a2[4], *(void *)(a3 - 8), a6, a2[5], *(void *)(a3 - 24));
}

uint64_t PredicateExpressions.CollectionContainsCollection.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.CollectionContainsCollection.other.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 76));
}

void PredicateExpressions.CollectionContainsCollection.init(base:other:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_18328E288(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 76),  v2,  v1);
}

void type metadata accessor for PredicateExpressions.CollectionContainsCollection()
{
}

uint64_t PredicateExpressions.CollectionContainsCollection.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[5];
  uint64_t v24 = a2[3];
  uint64_t v25 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v23 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v26 = (char *)&v22 - v7;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[2];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *a1;
  uint64_t v28 = v15;
  uint64_t v16 = v27;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v8 + 16))(&v28, v9, v8, v12);
  if (!v16)
  {
    uint64_t v27 = v11;
    uint64_t v17 = v10;
    uint64_t v19 = v22;
    uint64_t v18 = v23;
    uint64_t v28 = v15;
    __int128 v20 = v26;
    (*(void (**)(uint64_t *, uint64_t))(v25 + 16))(&v28, v24);
    char v2 = Collection<>.contains<A>(_:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v17);
  }

  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.CollectionContainsCollection<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.CollectionContainsCollection.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

void static PredicateExpressions.build_contains<A, B>(_:_:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, a1);
  type metadata accessor for PredicateExpressions.StringContainsRegex();
}

{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, a1);
  type metadata accessor for PredicateExpressions.SequenceContains();
}

uint64_t sub_18328E534(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v3 + *(int *)(a1 + 76),  v2,  v1);
}

uint64_t PredicateExpressions.CollectionContainsCollection.description.getter()
{
  v0._unint64_t object = (void *)0x80000001839CF280LL;
  v0._uint64_t countAndFlagsBits = 0xD000000000000023LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x3A726568746F202CLL;
  v1._unint64_t object = (void *)0xE900000000000020LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41LL;
  v2._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

uint64_t PredicateExpressions.CollectionContainsCollection<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.CollectionContainsCollection<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  void v14[5] = a5;
  v14[6] = a4;
  v14[9] = a3;
  v14[4] = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  v14[7] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v7 = MEMORY[0x1895F8858](v6);
  v14[8] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[10] = v9;
  v14[11] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  __n128 v15 = v7;
  uint64_t v16 = v13;
  type metadata accessor for PredicateExpressions.CollectionContainsCollection();
}

uint64_t sub_18328E810(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(void *)(v4 - 208) = a1;
  *(void *)(v4 - 72) = v3;
  *(void *)(v4 - 200) = v8;
  uint64_t v10 = v2;
  uint64_t v11 = *(void *)(v4 - 168);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 136, *(void *)(v4 - 112));
  uint64_t v12 = *(void *)(v4 - 160);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v13 = *(void *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, void))(v1 + 32))(v13, v12, *(void *)(v4 - 144));
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 136, *(void *)(v4 - 112));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v14 = *(void *)(v4 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 192) + 32LL))(v13 + *(int *)(v14 + 76), v11, v10);
  __swift_destroy_boxed_opaque_existential_1(v4 - 136);
  uint64_t v15 = *(void *)(v4 - 216);
  (*(void (**)(void, uint64_t, uint64_t))(v15 + 16))(*(void *)(v4 - 184), v13, v14);
  __swift_destroy_boxed_opaque_existential_1(*(void *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionIndexSubscript<A, B>( void *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.CollectionIndexSubscript<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.CollectionIndexSubscript<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.CollectionIndexSubscript<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionRangeSubscript<A, B>( void *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.CollectionRangeSubscript<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.CollectionRangeSubscript<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.CollectionRangeSubscript<A, B>);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>( void *a1)
{
  return PredicateExpressions.CollectionContainsCollection<>.encode(to:)(a1);
}

uint64_t type metadata completion function for PredicateExpressions.CollectionContainsCollection()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.CollectionIndexSubscript( uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_18328EC50 + 4 * byte_1837C7680[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.CollectionIndexSubscript( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.CollectionRangeSubscript<A, B>( void *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1);
}

uint64_t one-time initialization function for idnaTranscoder()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  int v2 = 0;
  uint64_t result = MEMORY[0x186E214C0](60LL, &v2);
  if (v2 <= 0) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = 0LL;
  }
  static UIDNAHookICU.idnaTranscoder = v1;
  byte_18C5C6060 = v2 > 0;
  return result;
}

uint64_t closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (**a3)(uint64_t, uint64_t, uint64_t)@<X2>, char a4@<W3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  *(void *)&v31[7] = *MEMORY[0x1895F89C0];
  if (a2 > 2048) {
    goto LABEL_6;
  }
  uint64_t v12 = result;
  char v13 = *a3;
  uint64_t v14 = one-time initialization token for idnaTranscoder;
  swift_retain();
  if (v14 != -1) {
    swift_once();
  }
  if ((byte_18C5C6060 & 1) != 0)
  {
    uint64_t result = swift_release();
LABEL_6:
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
LABEL_30:
    *a7 = v15;
    a7[1] = v16;
    return result;
  }

  uint64_t v28 = static UIDNAHookICU.idnaTranscoder;
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    uint64_t result = MEMORY[0x1895F8858](isStackAllocationSafe);
    __int16 v30 = 16;
    *(void *)uint64_t v31 = 0LL;
    *(void *)&v31[3] = 0LL;
    int v29 = 0;
    if (v12)
    {
      v27[256] = v18;
      if (a2 >= (uint64_t)0xFFFFFFFF80000000LL)
      {
        int v19 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, uint64_t, __int16 *, int *))v13)( v28,  v12,  a2,  v27,  2048LL,  &v30,  &v29);
        if (v29 <= 0)
        {
          uint64_t v15 = 0LL;
          if ((a4 & 1) != 0) {
            int v23 = -1;
          }
          else {
            int v23 = -64;
          }
          uint64_t v16 = 0LL;
          if ((*(_DWORD *)&v31[1] & v23) == 0 && v19 > 0)
          {
            uint64_t v15 = closure #2 in closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)v27,  v19,  a5,  a6);
            uint64_t v16 = v24;
          }
        }

        else
        {
          uint64_t v15 = 0LL;
          uint64_t v16 = 0LL;
        }

uint64_t closure #2 in closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( uint64_t result, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a2 != a4 || !a2) {
    return static String._tryFromUTF8(_:)();
  }
  uint64_t v4 = (unsigned __int8 *)result;
  uint64_t v6 = a2;
  uint64_t v7 = a2 & ~(a2 >> 63);
  while (v7)
  {
    int v8 = *a3;
    int v9 = *v4;
    if (v8 == v9 || v9 == (((0x3FFE000000000uLL >> ((v8 - 1) >> 1)) & 0x20) + v8))
    {
      --v7;
      ++a3;
      ++v4;
      if (--v6) {
        continue;
      }
    }

    return static String._tryFromUTF8(_:)();
  }

  __break(1u);
  return result;
}

BOOL closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(int a1, char a2)
{
  if ((a2 & 1) != 0) {
    int v2 = -1;
  }
  else {
    int v2 = -64;
  }
  return (v2 & a1) == 0;
}

uint64_t closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)( uint64_t result, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  if (a2 != a4) {
    return specialized String.init(_utf16:)(result, a2);
  }
  if (!a2)
  {
LABEL_10:
    uint64_t result = (uint64_t)a3;
    return specialized String.init(_utf16:)(result, a2);
  }

  uint64_t v4 = (unsigned __int16 *)result;
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = a2 & ~(a2 >> 63);
  while (v7)
  {
    unsigned int v8 = *v5;
    int v9 = *v4;
    --v7;
    ++v5;
    ++v4;
    if (!--v6) {
      goto LABEL_10;
    }
  }

  __break(1u);
  return result;
}

id NSProgress.estimatedTimeRemaining.getter()
{
  id result = objc_msgSend(v0, sel_estimatedTimeRemaining);
  int v2 = result;
  if (result)
  {
    objc_msgSend(result, sel_doubleValue);
    uint64_t v4 = v3;

    return (id)v4;
  }

  return result;
}

void key path getter for NSProgress.estimatedTimeRemaining : NSProgress(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_estimatedTimeRemaining);
  uint64_t v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, sel_doubleValue);
    uint64_t v6 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  *(void *)a2 = v6;
  *(_BYTE *)(a2 + 8) = v4 == 0LL;
}

void key path setter for NSProgress.estimatedTimeRemaining : NSProgress(uint64_t a1, id *a2)
{
  id v2 = *a2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    objc_msgSend(*a2, sel_setEstimatedTimeRemaining_, 0);
  }

  else
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, *(double *)a1);
    objc_msgSend(v2, sel_setEstimatedTimeRemaining_, v3);
  }

void NSProgress.estimatedTimeRemaining.setter(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    objc_msgSend(v2, sel_setEstimatedTimeRemaining_, 0);
  }

  else
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, *(double *)&a1);
    objc_msgSend(v2, sel_setEstimatedTimeRemaining_, v3);
  }

void (*NSProgress.estimatedTimeRemaining.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  id v3 = objc_msgSend(v1, sel_estimatedTimeRemaining);
  uint64_t v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, sel_doubleValue);
    uint64_t v6 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  *(void *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v4 == 0LL;
  return NSProgress.estimatedTimeRemaining.modify;
}

void NSProgress.estimatedTimeRemaining.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 16), sel_setEstimatedTimeRemaining_, 0);
  }

  else
  {
    id v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, *(double *)a1);
    objc_msgSend(v1, sel_setEstimatedTimeRemaining_, v2);
  }

id NSProgress.throughput.getter()
{
  return NSProgress.throughput.getter((SEL *)&selRef_throughput);
}

void NSProgress.throughput.setter(uint64_t a1, char a2)
{
}

void (*NSProgress.throughput.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  id v3 = objc_msgSend(v1, sel_throughput);
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = objc_msgSend(v3, sel_integerValue);
  }

  else
  {
    id v5 = 0LL;
  }

  *(void *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4 == 0LL;
  return NSProgress.throughput.modify;
}

void NSProgress.throughput.modify(uint64_t a1, uint64_t a2)
{
}

id NSProgress.fileTotalCount.getter()
{
  return NSProgress.throughput.getter((SEL *)&selRef_fileTotalCount);
}

void NSProgress.fileTotalCount.setter(uint64_t a1, char a2)
{
}

void (*NSProgress.fileTotalCount.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  id v3 = objc_msgSend(v1, sel_fileTotalCount);
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = objc_msgSend(v3, sel_integerValue);
  }

  else
  {
    id v5 = 0LL;
  }

  *(void *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4 == 0LL;
  return NSProgress.fileTotalCount.modify;
}

void NSProgress.fileTotalCount.modify(uint64_t a1, uint64_t a2)
{
}

id NSProgress.fileCompletedCount.getter()
{
  return NSProgress.throughput.getter((SEL *)&selRef_fileCompletedCount);
}

id NSProgress.throughput.getter(SEL *a1)
{
  id v2 = [v1 *a1];
  id v3 = v2;
  if (!v2) {
    return 0LL;
  }
  id v4 = objc_msgSend(v2, sel_integerValue);

  return v4;
}

void key path getter for NSProgress.throughput : NSProgress(id *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  id v4 = [*a1 *a2];
  id v5 = v4;
  if (v4)
  {
    id v6 = objc_msgSend(v4, sel_integerValue);
  }

  else
  {
    id v6 = 0LL;
  }

  *(void *)a3 = v6;
  *(_BYTE *)(a3 + 8) = v5 == 0LL;
}

void key path setter for NSProgress.throughput : NSProgress( uint64_t a1, id *a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  id v6 = *a2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    objc_msgSend(*a2, *a5, 0);
  }

  else
  {
    id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, *(void *)a1);
    objc_msgSend(v6, *a5, v7);
  }

void NSProgress.fileCompletedCount.setter(uint64_t a1, char a2)
{
}

void NSProgress.throughput.setter(uint64_t a1, char a2, SEL *a3)
{
  if ((a2 & 1) != 0)
  {
    objc_msgSend(v3, *a3, 0);
  }

  else
  {
    id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, a1);
    objc_msgSend(v3, *a3, v5);
  }

void (*NSProgress.fileCompletedCount.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  id v3 = objc_msgSend(v1, sel_fileCompletedCount);
  id v4 = v3;
  if (v3)
  {
    id v5 = objc_msgSend(v3, sel_integerValue);
  }

  else
  {
    id v5 = 0LL;
  }

  *(void *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4 == 0LL;
  return NSProgress.fileCompletedCount.modify;
}

void NSProgress.fileCompletedCount.modify(uint64_t a1, uint64_t a2)
{
}

void NSProgress.throughput.modify(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = *(void **)(a1 + 16);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 16), *a3, 0);
  }

  else
  {
    id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, *(void *)a1);
    objc_msgSend(v4, *a3, v5);
  }

id NSProgress.performAsCurrent<A>(withPendingUnitCount:using:)(uint64_t a1, void (*a2)(id))
{
  return objc_msgSend(v2, sel_resignCurrent);
}

void sub_18328FB10(id *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_18328FB2C(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18328FB48(id *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_18328FB64(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18328FB80(id *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_18328FB9C(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v3 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  id v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Hashable & Sendable)?( v6,  (uint64_t)&v15,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    unsigned int v11 = (uint64_t *)(v3[6] + 16 * result);
    *unsigned int v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v3[2] = v14;
    v6 += 48LL;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return MEMORY[0x18961AFF0];
  }
  if (a2 == MEMORY[0x189617FA8] && a3 == MEMORY[0x18961AFC0] + 8LL)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    int v9 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v9) {
      return (uint64_t)v9;
    }
    id v11 = objc_msgSend(a1, sel_count);
    if (v11)
    {
      uint64_t v12 = (uint64_t)v11;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      int v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
      BOOL v13 = (void *)v9[6];
      uint64_t v14 = v9[7];
      swift_retain();
      uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v13,  v14,  a1,  v12);
      if (result < 0 || v12 < result)
      {
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }

      v9[2] = result;
      if (!result)
      {
LABEL_28:
        uint64_t result = swift_release();
        if (v9) {
          return (uint64_t)v9;
        }
        goto LABEL_46;
      }

      uint64_t v15 = result - 1;
      uint64_t v16 = v9 + 8;
      while (1)
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)(v9[6] + 16 * v15);
          uint64_t v22 = *v21;
          uint64_t v23 = v21[1];
          swift_bridgeObjectRetain();
          unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23);
          char v26 = v25;
          swift_bridgeObjectRelease();
          if ((v26 & 1) == 0) {
            break;
          }
          swift_arrayDestroy();
          uint64_t result = swift_arrayDestroy();
          uint64_t v27 = v9[2];
          BOOL v28 = __OFSUB__(v27, 1LL);
          uint64_t v29 = v27 - 1;
          if (v28) {
            goto LABEL_47;
          }
          v9[2] = v29;
LABEL_20:
          if (--v15 < 0) {
            goto LABEL_28;
          }
        }

        *(void *)((char *)v16 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
        if (v15 < (uint64_t)v24)
        {
          *(_OWORD *)(v9[6] + 16 * v2os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(v9[6] + 16 * v15);
          uint64_t v17 = v9[7];
          uint64_t v18 = (_OWORD *)(v17 + 32 * v15);
          __int128 v19 = v18[1];
          uint64_t v20 = (_OWORD *)(v17 + 32 * v24);
          *uint64_t v20 = *v18;
          v20[1] = v19;
          goto LABEL_20;
        }

        if (v24 == v15) {
          goto LABEL_20;
        }
        uint64_t v30 = v9[6];
        uint64_t v31 = (uint64_t *)(v30 + 16 * v24);
        char v32 = (uint64_t *)(v30 + 16 * v15);
        uint64_t v33 = *v31;
        uint64_t v34 = v31[1];
        uint64_t v35 = v32[1];
        *uint64_t v31 = *v32;
        v31[1] = v35;
        *char v32 = v33;
        v32[1] = v34;
        uint64_t v36 = v9[7];
        uint64_t v37 = (_OWORD *)(v36 + 32 * v24);
        uint64_t v38 = (_OWORD *)(v36 + 32 * v15);
        outlined init with take of Any(v37, &aBlock);
        outlined init with take of Any(v38, v37);
        outlined init with take of Any(&aBlock, v38);
        if (v15 < 0) {
          goto LABEL_28;
        }
      }
    }

    return MEMORY[0x18961AFF0];
  }

  swift_unknownObjectRetain();
  int v9 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v9) {
    return (uint64_t)v9;
  }
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (_swift_isClassOrObjCExistentialType() & 1) != 0)
  {
    uint64_t result = (uint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
    int v9 = (void *)(~((unint64_t)result >> 1) & 0x4000000000000000LL | result);
    if (!v9) {
      goto LABEL_46;
    }
    return (uint64_t)v9;
  }

  if (*(uint64_t *)(*(void *)(a2 - 8) + 72LL) >= 8 && *(void *)(*(void *)(a3 - 8) + 72LL) > 7LL)
  {
    id v42 = objc_msgSend(a1, sel_count);
    if (!v42)
    {
      uint64_t result = Dictionary.init(dictionaryLiteral:)();
      int v9 = (void *)result;
      if (!result) {
        goto LABEL_46;
      }
      return (uint64_t)v9;
    }

    MEMORY[0x1895F8858](v42);
    v49[2] = a2;
    v49[3] = a3;
    v49[4] = a4;
    v49[5] = a1;
    v49[6] = v43;
    uint64_t result = _NativeDictionary.init(_unsafeUninitializedCapacity:allowingDuplicates:initializingWith:)( v43,  v44,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:),  (uint64_t)v49,  a2,  a3);
    int v9 = (void *)result;
    if (result) {
      return (uint64_t)v9;
    }
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }

  id v40 = objc_msgSend(a1, sel_count);
  if (v40)
  {
    type metadata accessor for _DictionaryStorage();
    uint64_t v41 = static _DictionaryStorage.allocate(capacity:)();
  }

  else
  {
    uint64_t v41 = MEMORY[0x18961AFF0];
  }

  uint64_t v55 = (void *)v41;
  id v56 = v40;
  uint64_t v45 = (void *)swift_allocObject();
  v45[2] = a2;
  v45[3] = a3;
  v45[4] = a4;
  v45[5] = &v55;
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = partial apply for closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:);
  *(void *)(v46 + 2os_unfair_lock_unlock(*v0 + 4) = v45;
  unint64_t v53 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  uint64_t v54 = v46;
  *(void *)&__int128 aBlock = MEMORY[0x1895F87A8];
  *((void *)&aBlock + 1) = 1107296256LL;
  Swift::String v51 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  char v52 = &block_descriptor_16;
  uint64_t v47 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_enumerateKeysAndObjectsUsingBlock_, v47);
  _Block_release(v47);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    goto LABEL_49;
  }
  int v9 = v55;
  if ((id)v55[2] == v56)
  {
    uint64_t result = swift_release();
    if (v9) {
      return (uint64_t)v9;
    }
    goto LABEL_46;
  }

id NSDictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    unint64_t v33 = MEMORY[0x18961AFE8];
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t v3 = a1 + 32;
    unint64_t v4 = (unint64_t)v28;
    uint64_t v5 = a1 + 32;
    char v26 = v2;
    uint64_t v6 = v2;
    do
    {
      outlined init with copy of (Hashable & Sendable)?( v5,  (uint64_t)v30,  &demangling cache variable for type metadata for (Any, Any));
      outlined init with copy of Any((uint64_t)v30, (uint64_t)v27);
      outlined init with copy of Any((uint64_t)&v32, (uint64_t)v28);
      uint64_t v7 = v29;
      uint64_t v2 = __swift_project_boxed_opaque_existential_1(v28, v29);
      uint64_t isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      if ((isClassOrObjCExistentialType & 1) != 0)
      {
        if (*(void *)(*(void *)(v7 - 8) + 64LL) != 8LL)
        {
          __break(1u);
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }

        swift_unknownObjectRetain();
      }

      else
      {
        v25[1] = v25;
        __n128 v9 = MEMORY[0x1895F8858](isClassOrObjCExistentialType);
        (*(void (**)(char *, void *, uint64_t, __n128))(v11 + 16))( (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v2,  v7,  v9);
        _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
      outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for (Any, Any));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v5 += 64LL;
      uint64_t v6 = (void *)((char *)v6 - 1);
    }

    while (v6);
    unint64_t v4 = v33;
    v27[0] = MEMORY[0x18961AFE8];
    uint64_t v2 = v26;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v12 = v2;
    do
    {
      outlined init with copy of (Hashable & Sendable)?( v3,  (uint64_t)v30,  &demangling cache variable for type metadata for (Any, Any));
      uint64_t v13 = v31;
      uint64_t v14 = __swift_project_boxed_opaque_existential_1(v30, v31);
      uint64_t v15 = _swift_isClassOrObjCExistentialType();
      if ((v15 & 1) != 0)
      {
        if (*(void *)(*(void *)(v13 - 8) + 64LL) != 8LL) {
          goto LABEL_27;
        }
        swift_unknownObjectRetain();
      }

      else
      {
        __n128 v16 = MEMORY[0x1895F8858](v15);
        (*(void (**)(char *, void *, uint64_t, __n128))(v18 + 16))( (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v14,  v13,  v16);
        _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      }

      outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for (Any, Any));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 64LL;
      uint64_t v12 = (void *)((char *)v12 - 1);
    }

    while (v12);
    unint64_t v3 = v27[0];
    swift_bridgeObjectRelease();
    if (!(v4 >> 62)) {
      goto LABEL_16;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    unint64_t v3 = MEMORY[0x18961AFE8];
    unint64_t v4 = MEMORY[0x18961AFE8];
    if (!(MEMORY[0x18961AFE8] >> 62))
    {
LABEL_16:
      uint64_t v19 = v4 & 0xFFFFFFFFFFFFFF8LL;
      goto LABEL_17;
    }
  }

  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = -8LL;
    if (!(v3 >> 62)) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }

id protocol witness for ExpressibleByDictionaryLiteral.init(dictionaryLiteral:) in conformance NSDictionary@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = NSDictionary.init(dictionaryLiteral:)(a1);
  *a2 = result;
  return result;
}

uint64_t specialized static Dictionary._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t result = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  uint64_t v5 = result;
  if (result) {
    goto LABEL_25;
  }
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_count);
  if (!result)
  {
    uint64_t v5 = MEMORY[0x18961AFF0];
LABEL_25:
    *a2 = v5;
    return result;
  }

  uint64_t v6 = result;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, AnyHashable>);
  uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = *(char **)(v5 + 48);
  uint64_t v8 = *(void *)(v5 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v7, v8, a1, v6);
  if ((result & 0x8000000000000000LL) == 0 && v6 >= result)
  {
    *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
    if (result)
    {
      uint64_t v9 = result - 1;
      uint64_t v10 = v5 + 64;
      while (1)
      {
        outlined init with copy of AnyHashable(*(void *)(v5 + 48) + 40 * v9, (uint64_t)v48);
        Swift::Int v22 = AnyHashable._rawHashValue(seed:)(*(void *)(v5 + 40));
        uint64_t result = outlined destroy of AnyHashable((uint64_t)v48);
        uint64_t v23 = -1LL << *(_BYTE *)(v5 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        if (((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6))) != 0)
        {
          unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v27 = 0;
          unint64_t v28 = (unint64_t)(63 - v23) >> 6;
          do
          {
            if (++v25 == v28 && (v27 & 1) != 0)
            {
              __break(1u);
              goto LABEL_26;
            }

            BOOL v29 = v25 == v28;
            if (v25 == v28) {
              unint64_t v25 = 0LL;
            }
            v27 |= v29;
            uint64_t v30 = *(void *)(v10 + 8 * v25);
          }

          while (v30 == -1);
          unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
        }

        *(void *)(v10 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
        if (v9 < (uint64_t)v26)
        {
          uint64_t v11 = *(void *)(v5 + 48);
          uint64_t v12 = 40 * v26;
          uint64_t v13 = v11 + v12;
          uint64_t v14 = (__int128 *)(v11 + 40 * v9);
          __int128 v15 = *v14;
          __int128 v16 = v14[1];
          *(void *)(v13 + 32) = *((void *)v14 + 4);
          *(_OWORD *)uint64_t v13 = v15;
          *(_OWORD *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v16;
          uint64_t v17 = *(void *)(v5 + 56);
          uint64_t v18 = v17 + v12;
          uint64_t v19 = (__int128 *)(v17 + 40 * v9);
          __int128 v20 = *v19;
          __int128 v21 = v19[1];
          *(void *)(v18 + 32) = *((void *)v19 + 4);
          *(_OWORD *)uint64_t v18 = v20;
          *(_OWORD *)(v18 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
LABEL_8:
          if (--v9 < 0) {
            break;
          }
        }

        else
        {
          if (v26 == v9) {
            goto LABEL_8;
          }
          uint64_t v31 = *(void *)(v5 + 48);
          uint64_t v32 = 40 * v26;
          unint64_t v33 = (__int128 *)(v31 + v32);
          uint64_t v34 = (__int128 *)(v31 + 40 * v9);
          __int128 v35 = *v33;
          __int128 v36 = v33[1];
          uint64_t v37 = *((void *)v33 + 4);
          uint64_t v38 = *((void *)v34 + 4);
          __int128 v39 = v34[1];
          *unint64_t v33 = *v34;
          v33[1] = v39;
          *((void *)v33 + os_unfair_lock_unlock(*v0 + 4) = v38;
          *((void *)v34 + os_unfair_lock_unlock(*v0 + 4) = v37;
          *uint64_t v34 = v35;
          v34[1] = v36;
          uint64_t v40 = *(void *)(v5 + 56);
          uint64_t v41 = (__int128 *)(v40 + v32);
          id v42 = (__int128 *)(v40 + 40 * v9);
          __int128 v43 = *v41;
          __int128 v44 = v41[1];
          uint64_t v45 = *((void *)v41 + 4);
          uint64_t v46 = *((void *)v42 + 4);
          __int128 v47 = v42[1];
          __int128 *v41 = *v42;
          v41[1] = v47;
          *((void *)v41 + os_unfair_lock_unlock(*v0 + 4) = v46;
          *((void *)v42 + os_unfair_lock_unlock(*v0 + 4) = v45;
          *id v42 = v43;
          v42[1] = v44;
          if (v9 < 0) {
            break;
          }
        }
      }
    }

    uint64_t result = swift_release();
    goto LABEL_25;
  }

uint64_t static Dictionary._forceBridgeFromObjectiveC(_:result:)( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = MEMORY[0x189617FA8];
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  if (a3 == v10 && a4 == MEMORY[0x18961AFC0] + 8LL)
  {
    uint64_t result = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (result) {
      goto LABEL_10;
    }
    uint64_t result = (uint64_t)objc_msgSend(a1, sel_count);
    if (!result)
    {
      *a2 = MEMORY[0x18961AFF0];
      return result;
    }

    uint64_t v13 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v14 = (void *)static _DictionaryStorage.allocate(capacity:)();
    __int128 v15 = (void *)v14[6];
    uint64_t v16 = v14[7];
    swift_retain();
    uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v15,  v16,  a1,  v13);
    if (result < 0 || v13 < result)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }

    void v14[2] = result;
    if (!result)
    {
LABEL_26:
      uint64_t result = swift_release();
      *a2 = v14;
      return result;
    }

    uint64_t v17 = result - 1;
    uint64_t v18 = v14 + 8;
    while (1)
    {
      while (1)
      {
        uint64_t v23 = (uint64_t *)(v14[6] + 16 * v17);
        uint64_t v24 = *v23;
        uint64_t v25 = v23[1];
        swift_bridgeObjectRetain();
        unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
        char v28 = v27;
        swift_bridgeObjectRelease();
        if ((v28 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v29 = v14[2];
        BOOL v30 = __OFSUB__(v29, 1LL);
        uint64_t v31 = v29 - 1;
        if (v30)
        {
          __break(1u);
          goto LABEL_43;
        }

        void v14[2] = v31;
LABEL_18:
        if (--v17 < 0) {
          goto LABEL_26;
        }
      }

      *(void *)((char *)v18 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
      if (v17 < (uint64_t)v26)
      {
        *(_OWORD *)(v14[6] + 16 * v26) = *(_OWORD *)(v14[6] + 16 * v17);
        uint64_t v19 = v14[7];
        __int128 v20 = (_OWORD *)(v19 + 32 * v17);
        __int128 v21 = v20[1];
        Swift::Int v22 = (_OWORD *)(v19 + 32 * v26);
        *Swift::Int v22 = *v20;
        v22[1] = v21;
        goto LABEL_18;
      }

      if (v26 == v17) {
        goto LABEL_18;
      }
      uint64_t v32 = v14[6];
      unint64_t v33 = (uint64_t *)(v32 + 16 * v26);
      uint64_t v34 = (uint64_t *)(v32 + 16 * v17);
      uint64_t v35 = *v33;
      uint64_t v36 = v33[1];
      uint64_t v37 = v34[1];
      *unint64_t v33 = *v34;
      v33[1] = v37;
      *uint64_t v34 = v35;
      v34[1] = v36;
      uint64_t v38 = v14[7];
      __int128 v39 = (_OWORD *)(v38 + 32 * v26);
      uint64_t v40 = (_OWORD *)(v38 + 32 * v17);
      outlined init with take of Any(v39, &aBlock);
      outlined init with take of Any(v40, v39);
      outlined init with take of Any(&aBlock, v40);
      if (v17 < 0) {
        goto LABEL_26;
      }
    }
  }

  uint64_t result = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (!result)
  {
    if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (_swift_isClassOrObjCExistentialType() & 1) != 0)
    {
      uint64_t result = (uint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
      *a2 = ~((unint64_t)result >> 1) & 0x4000000000000000LL | result;
      return result;
    }

    if (*(uint64_t *)(*(void *)(a3 - 8) + 72LL) >= 8 && *(void *)(*(void *)(a4 - 8) + 72LL) > 7LL)
    {
      id v44 = objc_msgSend(a1, sel_count);
      if (v44)
      {
        MEMORY[0x1895F8858](v44);
        v51[2] = a3;
        v51[3] = a4;
        v51[4] = a5;
        void v51[5] = a1;
        v51[6] = v45;
        uint64_t result = _NativeDictionary.init(_unsafeUninitializedCapacity:allowingDuplicates:initializingWith:)( v45,  v46,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:),  (uint64_t)v51,  a3,  a4);
      }

      else
      {
        uint64_t result = Dictionary.init(dictionaryLiteral:)();
      }

      goto LABEL_10;
    }

    id v42 = objc_msgSend(a1, sel_count);
    if (v42)
    {
      type metadata accessor for _DictionaryStorage();
      uint64_t v43 = static _DictionaryStorage.allocate(capacity:)();
    }

    else
    {
      uint64_t v43 = MEMORY[0x18961AFF0];
    }

    uint64_t v57 = v43;
    id v58 = v42;
    __int128 v47 = (void *)swift_allocObject();
    v47[2] = a3;
    v47[3] = a4;
    v47[4] = a5;
    v47[5] = &v57;
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:)partial apply;
    *(void *)(v48 + 2os_unfair_lock_unlock(*v0 + 4) = v47;
    uint64_t v55 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
    uint64_t v56 = v48;
    *(void *)&__int128 aBlock = MEMORY[0x1895F87A8];
    *((void *)&aBlock + 1) = 1107296256LL;
    unint64_t v53 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    uint64_t v54 = &block_descriptor_15;
    Swift::String v49 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(a1, sel_enumerateKeysAndObjectsUsingBlock_, v49);
    _Block_release(v49);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      if (*(id *)(v57 + 16) == v58)
      {
        *a2 = v57;
        return swift_release();
      }

      goto LABEL_45;
    }

uint64_t closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v27[0] = *(void *)(a6 - 8);
  v27[1] = a7;
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  __int128 v15 = (char *)v27 - v14;
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v18);
  __int128 v20 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)v27 - v22;
  outlined init with copy of Any(v24, (uint64_t)v29);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v28);
  uint64_t result = swift_dynamicCast();
  if (*(void *)(*a4 + 16LL) >= a4[1])
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v23, a5);
    uint64_t v26 = v27[0];
    (*(void (**)(char *, char *, uint64_t))(v27[0] + 16LL))(v12, v15, a6);
    _NativeDictionary._unsafeInsertNew(key:value:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v15, a6);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, a5);
  }

  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(void *, void *, uint64_t))(a1 + 32);
  uint64_t v10[3] = swift_getObjectType();
  v10[0] = a2;
  __int128 v9[3] = swift_getObjectType();
  v9[0] = a3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v7(v10, v9, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

void closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(void *)(a8 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)&double v20 = MEMORY[0x1895F8858](v17).n128_u64[0];
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!v23) {
    goto LABEL_32;
  }
  if (!a3)
  {
LABEL_33:
    __break(1u);
    return;
  }

  uint64_t v36 = v19;
  objc_msgSend(v18, sel__getObjects_andKeys_count_, a3, a1, a6, v20);
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  uint64_t v35 = a3;
  if ((isClassOrObjCExistentialType & 1) != 0)
  {
    if (a6 < 0)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }

    if (a6)
    {
      uint64_t v25 = 0LL;
      do
      {
        uint64_t v37 = *(void *)(a1 + 8 * v25);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a1 + *(void *)(v16 + 72) * v25++, v22, a7);
      }

      while (a6 != v25);
    }
  }

  else
  {
    if (a6 < 0)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    if (a6)
    {
      uint64_t v26 = a6;
      while (v26 <= a6)
      {
        uint64_t v27 = v26 - 1;
        uint64_t v37 = *(void *)(a1 - 8 + 8 * v26);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a1 + *(void *)(v16 + 72) * v27, v22, a7);
        uint64_t v26 = v27;
        if (!v27) {
          goto LABEL_14;
        }
      }

      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
  }

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = MEMORY[0x189617FA8];
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  if (a3 != v10 || a4 != MEMORY[0x18961AFC0] + 8LL)
  {
    uint64_t v12 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (!v12)
    {
      if (*(uint64_t *)(*(void *)(a3 - 8) + 72LL) < 8 || *(void *)(*(void *)(a4 - 8) + 72LL) <= 7LL)
      {
        type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
        lazy protocol witness table accessor for type NSObject and conformance NSObject();
        swift_unknownObjectRetain();
        unint64_t v14 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
        if (!v14)
        {
          unint64_t v15 = (unint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
          unint64_t v14 = ~(v15 >> 1) & 0x4000000000000000LL | v15;
        }

        unint64_t v16 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v14, a3, a4, a5);
        swift_bridgeObjectRelease();
        *a2 = v16;
        return v16 != 0;
      }

      else
      {
        id v21 = objc_msgSend(a1, sel_count);
        LOBYTE(v28[0]) = 1;
        MEMORY[0x1895F8858](v21);
        void v27[2] = a3;
        v27[3] = a4;
        void v27[4] = a5;
        v27[5] = a1;
        v27[6] = v22;
        v27[7] = v28;
        uint64_t v23 = _NativeDictionary.init(_unsafeUninitializedCapacity:allowingDuplicates:initializingWith:)( v22,  a3 == v10,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #1 in static Dictionary._conditionallyBridgeFromObjectiveC(_:result:),  (uint64_t)v27,  a3,  a4);
        uint64_t v17 = LOBYTE(v28[0]);
        if (LOBYTE(v28[0]) != 1)
        {
          swift_release();
          uint64_t v23 = 0LL;
        }

        *a2 = v23;
      }

      return v17;
    }

    goto LABEL_15;
  }

  uint64_t v12 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v12)
  {
LABEL_15:
    *a2 = v12;
    return 1LL;
  }

  uint64_t v19 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v19)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    double v20 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }

  else
  {
    double v20 = (void *)MEMORY[0x18961AFF0];
  }

  uint64_t v24 = v20[6];
  uint64_t v25 = v20[7];
  swift_retain();
  uint64_t result = (uint64_t)objc_msgSend(a1, sel__getObjects_andKeys_count_, v25, v24, v19);
  if (v19 < 1)
  {
    uint64_t v26 = v19;
    if (!v19)
    {
      uint64_t v17 = 1LL;
      goto LABEL_28;
    }
  }

  else
  {
    uint64_t v26 = v19;
    v28[0] = 0LL;
    v28[1] = 0LL;
    swift_unknownObjectRetain();
    _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
    uint64_t result = swift_unknownObjectRelease();
  }

  if (__OFSUB__(v19, v26)) {
    goto LABEL_34;
  }
  uint64_t result = swift_arrayDestroy();
  uint64_t v17 = 0LL;
LABEL_28:
  if (v19 >= 0)
  {
    void v20[2] = 0LL;
    swift_release();
    if ((_DWORD)v17)
    {
      *a2 = v20;
    }

    else
    {
      swift_release();
      *a2 = 0LL;
    }

    return v17;
  }

  __break(1u);
  __break(1u);
LABEL_34:
  __break(1u);
  __break(1u);
  return result;
}

void closure #1 in static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6, _BYTE *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v76 = a7;
  Swift::String v74 = a5;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v70 = *(void *)(v13 - 8);
  uint64_t v71 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v69 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v67 = (char *)&v66 - v16;
  MEMORY[0x1895F8858](v17);
  Swift::String v79 = (char *)&v66 - v18;
  uint64_t v80 = *(void *)(a9 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v77 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  __int128 v78 = (char *)&v66 - v22;
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v72 = *(void *)(v23 - 8);
  uint64_t v73 = v23;
  MEMORY[0x1895F8858](v23);
  uint64_t v25 = (char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v26);
  Swift::String v68 = (char *)&v66 - v27;
  MEMORY[0x1895F8858](v28);
  uint64_t v30 = (char *)&v66 - v29;
  uint64_t v31 = *(void *)(a8 - 8);
  MEMORY[0x1895F8858](v32);
  uint64_t v34 = (char *)&v66 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&double v36 = MEMORY[0x1895F8858](v35).n128_u64[0];
  uint64_t v38 = (char *)&v66 - v37;
  if (!a1) {
    goto LABEL_43;
  }
  if (a3)
  {
    __int128 v39 = v74;
    Swift::String v74 = a3;
    objc_msgSend(v39, sel__getObjects_andKeys_count_, a3, a1, a6, v36);
    char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    uint64_t v75 = a6;
    if ((isClassOrObjCExistentialType & 1) != 0)
    {
      if (a6 >= 1)
      {
        while (1)
        {
          uint64_t v81 = *(void *)(a1 - 8 + 8 * a6);
          swift_unknownObjectRetain();
          int v41 = swift_dynamicCast();
          id v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
          if (!v41) {
            break;
          }
          --a6;
          v42(v25, 0LL, 1LL, a8);
          uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
          v43(v34, v25, a8);
          v43((char *)(a1 + *(void *)(v31 + 72) * a6), v34, a8);
        }

        v42(v25, 1LL, 1LL, a8);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v25, v73);
LABEL_24:
        uint64_t v57 = v75;
        goto LABEL_25;
      }

      goto LABEL_20;
    }

    if (a6 < 1)
    {
LABEL_20:
      uint64_t v57 = a6;
      if (a6)
      {
LABEL_25:
        if (!__OFSUB__(v57, a6))
        {
          swift_arrayDestroy();
          *uint64_t v76 = 0;
          return;
        }

        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }

      *uint64_t v76 = 1;
      _swift_isClassOrObjCExistentialType();
LABEL_36:
      *uint64_t v76 = 1;
      return;
    }

    do
    {
      uint64_t v54 = *(void *)(a1 - 8 + 8 * a6);
      swift_unknownObjectRetain();
      if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
      {
        uint64_t v81 = v54;
        swift_unknownObjectRetain();
        int v55 = swift_dynamicCast();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v30, v55 ^ 1u, 1LL, a8);
      }

      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v68, 1LL, 1LL, a8);
        _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
        (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v30, v68, v73);
      }

      swift_unknownObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v30, 1LL, a8) == 1)
      {
        (*(void (**)(char *, uint64_t))(v72 + 8))(v30, v73);
        goto LABEL_24;
      }

      --a6;
      uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
      v56(v38, v30, a8);
      v56((char *)(a1 + *(void *)(v31 + 72) * a6), v38, a8);
    }

    while ((unint64_t)(a6 + 1) > 1);
LABEL_7:
    *uint64_t v76 = 1;
    if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
    {
      uint64_t v45 = v74;
      uint64_t v44 = v75;
      if (v75 >= 1)
      {
        Swift::String v79 = v74 - 8;
        int v46 = (void *)v80;
        __int128 v47 = v69;
        while (1)
        {
          uint64_t v81 = *(void *)&v79[8 * v44];
          swift_unknownObjectRetain();
          int v48 = swift_dynamicCast();
          Swift::String v49 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v46[7];
          if (!v48) {
            break;
          }
          --v44;
          v49(v47, 0LL, 1LL, a9);
          char v50 = (void (*)(char *, char *, uint64_t))v46[4];
          Swift::String v51 = v45;
          char v52 = v77;
          v50(v77, v47, a9);
          unint64_t v53 = v52;
          uint64_t v45 = v51;
          v50(&v51[v46[9] * v44], v53, a9);
        }

        v49(v47, 1LL, 1LL, a9);
LABEL_38:
        (*(void (**)(char *, uint64_t))(v70 + 8))(v47, v71);
        goto LABEL_39;
      }
    }

    else
    {
      id v58 = v74;
      uint64_t v44 = v75;
      if (v75 >= 1)
      {
        uint64_t v59 = v74 - 8;
        while (1)
        {
          uint64_t v60 = *(void *)&v59[8 * v44];
          swift_unknownObjectRetain();
          if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
          {
            uint64_t v81 = v60;
            swift_unknownObjectRetain();
            __int128 v47 = v79;
            int v61 = swift_dynamicCast();
            uint64_t v62 = v80;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v47, v61 ^ 1u, 1LL, a9);
          }

          else
          {
            uint64_t v62 = v80;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56))(v67, 1LL, 1LL, a9);
            _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
            __int128 v47 = v79;
            (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v79, v67, v71);
          }

          swift_unknownObjectRelease();
          --v44;
          uint64_t v63 = v47;
          uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
          uint64_t v65 = v78;
          v64(v78, v63, a9);
          v64(&v58[*(void *)(v62 + 72) * v44], v65, a9);
        }
      }
    }

    if (!v44) {
      goto LABEL_36;
    }
LABEL_39:
    if (!__OFSUB__(v75, v44))
    {
      swift_arrayDestroy();
      *uint64_t v76 = 0;
      swift_arrayDestroy();
      return;
    }

    goto LABEL_42;
  }

uint64_t NSDictionary._toCustomAnyHashable()()
{
  uint64_t v2 = 0LL;
  uint64_t result = specialized static Dictionary._forceBridgeFromObjectiveC(_:result:)(v0, &v2);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : AnyHashable]);
    lazy protocol witness table accessor for type [AnyHashable : AnyHashable] and conformance <> [A : B]();
    return AnyHashable.init<A>(_:)();
  }

  else
  {
    __break(1u);
  }

  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSDictionary()
{
  uint64_t v1 = *v0;
  uint64_t v2 = 0LL;
  specialized static Dictionary._forceBridgeFromObjectiveC(_:result:)(v1, &v2);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : AnyHashable]);
    lazy protocol witness table accessor for type [AnyHashable : AnyHashable] and conformance <> [A : B]();
    AnyHashable.init<A>(_:)();
  }

  else
  {
    __break(1u);
  }

_OWORD *NSDictionary.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  unint64_t v3 = (void *)(v1 + 16);
  NSFastEnumerationIterator.next()((uint64_t)&v7);
  if (v8)
  {
    outlined init with take of Any(&v7, &v9);
    uint64_t result = (_OWORD *)outlined init with copy of Any((uint64_t)&v9, (uint64_t)a1);
    if (*v3)
    {
      objc_opt_self();
      uint64_t v5 = (void *)swift_dynamicCastObjCClassUnconditional();
      __swift_project_boxed_opaque_existential_1(&v9, v10);
      swift_unknownObjectRetain();
      id v6 = objc_msgSend(v5, sel_objectForKey_, _bridgeAnythingToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      uint64_t result = (_OWORD *)swift_unknownObjectRelease();
      if (v6)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
        return outlined init with take of Any(&v7, a1 + 2);
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  else
  {
    uint64_t result = (_OWORD *)outlined destroy of Any?((uint64_t)&v7, &demangling cache variable for type metadata for Any?);
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }

  return result;
}

_OWORD *NSDictionary.Iterator.deinit()
{
  __int128 v1 = v0[12];
  v8[10] = v0[11];
  v8[11] = v1;
  v9[0] = v0[13];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v0 + 217);
  __int128 v2 = v0[8];
  v8[6] = v0[7];
  v8[7] = v2;
  __int128 v3 = v0[10];
  v8[8] = v0[9];
  _OWORD v8[9] = v3;
  __int128 v4 = v0[4];
  void v8[2] = v0[3];
  uint64_t v8[3] = v4;
  __int128 v5 = v0[6];
  v8[4] = v0[5];
  v8[5] = v5;
  __int128 v6 = v0[2];
  v8[0] = v0[1];
  v8[1] = v6;
  outlined release of Locale((uint64_t)v8);
  return v0;
}

uint64_t NSDictionary.Iterator.__deallocating_deinit()
{
  __int128 v1 = v0[12];
  v8[10] = v0[11];
  v8[11] = v1;
  v9[0] = v0[13];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v0 + 217);
  __int128 v2 = v0[8];
  v8[6] = v0[7];
  v8[7] = v2;
  __int128 v3 = v0[10];
  v8[8] = v0[9];
  _OWORD v8[9] = v3;
  __int128 v4 = v0[4];
  void v8[2] = v0[3];
  uint64_t v8[3] = v4;
  __int128 v5 = v0[6];
  v8[4] = v0[5];
  v8[5] = v5;
  __int128 v6 = v0[2];
  v8[0] = v0[1];
  v8[1] = v6;
  outlined release of Locale((uint64_t)v8);
  return swift_deallocClassInstance();
}

_OWORD *protocol witness for IteratorProtocol.next() in conformance NSDictionary.Iterator@<X0>( _OWORD *a1@<X8>)
{
  return NSDictionary.Iterator.next()(a1);
}

_OWORD *NSDictionary.makeIterator()()
{
  Swift::String v0 = (_OWORD *)swift_allocObject();
  uint64_t v1 = swift_unknownObjectRetain();
  NSFastEnumerationIterator.init(_:)(v1, (uint64_t)v9);
  __int128 v2 = v9[11];
  v0[11] = v9[10];
  v0[12] = v2;
  v0[13] = v10[0];
  *(_OWORD *)((char *)v0 + 217) = *(_OWORD *)((char *)v10 + 9);
  __int128 v3 = v9[7];
  v0[7] = v9[6];
  v0[8] = v3;
  __int128 v4 = v9[9];
  v0[9] = v9[8];
  v0[10] = v4;
  __int128 v5 = v9[3];
  v0[3] = v9[2];
  v0[4] = v5;
  __int128 v6 = v9[5];
  v0[5] = v9[4];
  v0[6] = v6;
  __int128 v7 = v9[1];
  v0[1] = v9[0];
  v0[2] = v7;
  return v0;
}

void protocol witness for Sequence.makeIterator() in conformance NSDictionary(void *a1@<X8>)
{
  __int128 v3 = *v1;
  type metadata accessor for NSDictionary.Iterator();
  __int128 v4 = (_OWORD *)swift_allocObject();
  uint64_t v5 = swift_unknownObjectRetain();
  NSFastEnumerationIterator.init(_:)(v5, (uint64_t)v12);
  __int128 v6 = v12[11];
  v4[11] = v12[10];
  v4[12] = v6;
  v4[13] = v13[0];
  *(_OWORD *)((char *)v4 + 217) = *(_OWORD *)((char *)v13 + 9);
  __int128 v7 = v12[7];
  v4[7] = v12[6];
  v4[8] = v7;
  __int128 v8 = v12[9];
  v4[9] = v12[8];
  v4[10] = v8;
  __int128 v9 = v12[3];
  v4[3] = v12[2];
  v4[4] = v9;
  __int128 v10 = v12[5];
  void v4[5] = v12[4];
  v4[6] = v10;
  __int128 v11 = v12[1];
  v4[1] = v12[0];
  v4[2] = v11;

  *a1 = v4;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSDictionary()
{
  uint64_t v1 = *v0;
  uint64_t v2 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);

  return v2;
}

void protocol witness for Sequence._copyContents(initializing:) in conformance NSDictionary( void *a1, _OWORD *a2, uint64_t a3)
{
}

id @objc NSDictionary.subscript.getter(void *a1)
{
  id v2 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_project_boxed_opaque_existential_1(v13, v13[3]);
  id v3 = objc_msgSend(v2, sel_objectForKey_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v12, 0, sizeof(v12));
  }

  outlined init with take of Any?((uint64_t)v12, (uint64_t)v14);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  uint64_t v4 = v15;
  if (!v15) {
    return 0LL;
  }
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(v14, v15);
  uint64_t v6 = *(void *)(v4 - 8);
  __n128 v7 = MEMORY[0x1895F8858](v5);
  __int128 v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, __n128))(v6 + 16))(v9, v7);
  __int128 v10 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v10;
}

double NSDictionary.subscript.getter@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4 = objc_msgSend(v2, sel_objectForKey_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

void @objc NSMutableDictionary.subscript.setter(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_unknownObjectRetain();
    id v3 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v7, 0, sizeof(v7));
    swift_unknownObjectRetain();
    id v4 = a1;
  }

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  NSMutableDictionary.subscript.setter((uint64_t)v7, v6);
}

uint64_t NSMutableDictionary.subscript.setter(uint64_t a1, void *a2)
{
  id v3 = v2;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v6 = _bridgeAnythingToObjectiveC<A>(_:)();
  outlined init with copy of (Hashable & Sendable)?( a1,  (uint64_t)&v8,  &demangling cache variable for type metadata for Any?);
  if (v9)
  {
    outlined init with take of Any(&v8, &v10);
    __swift_project_boxed_opaque_existential_1(&v10, v11);
    objc_msgSend(v3, sel_setObject_forKey_, _bridgeAnythingToObjectiveC<A>(_:)(), v6);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v8, &demangling cache variable for type metadata for Any?);
    objc_msgSend(v3, sel_removeObjectForKey_, v6);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
    return outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
  }

id NSDictionary.init(dictionary:)(uint64_t a1)
{
  return objc_msgSend( objc_allocWithZone((Class)swift_getObjCClassFromMetadata()),  sel___swiftInitWithDictionary_NSDictionary_,  a1);
}

int64_t NSDictionary.init(dictionary:)(void *a1)
{
  int64_t result = (int64_t)objc_msgSend(a1, sel_count);
  if ((unint64_t)(result - 0x1000000000000000LL) >> 61 == 7)
  {
    int64_t v4 = result;
    uint64_t v5 = 8 * result;
    if (8 * result + 0x4000000000000000LL >= 0)
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = v6 + v5;
      objc_msgSend(a1, sel__getObjects_andKeys_count_, v6, v7, v4);
      id v8 = objc_msgSend(v1, sel_initWithObjects_forKeys_count_, v6, v7, v4);
      MEMORY[0x186E20E60](v6, -1LL, -1LL);
      return (int64_t)v8;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

int64_t @objc NSDictionary.init(dictionary:)(uint64_t a1, uint64_t a2, void *a3)
{
  return NSDictionary.init(dictionary:)(a3);
}

uint64_t NSDictionary.customMirror.getter()
{
  if (!static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()) {
    objc_msgSend(v0, sel_copyWithZone_, 0);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSObject : Swift.AnyObject]);
  return Mirror.init(reflecting:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance NSDictionary()
{
  return NSDictionary.customMirror.getter();
}

uint64_t _NativeDictionary.init(_unsafeUninitializedCapacity:allowingDuplicates:initializingWith:)( uint64_t a1, int a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v72 = a2;
  uint64_t v71 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  Swift::String v68 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = v15;
  uint64_t v70 = v16;
  if (v17)
  {
    type metadata accessor for _DictionaryStorage();
    uint64_t v18 = static _DictionaryStorage.allocate(capacity:)();
  }

  else
  {
    uint64_t v18 = MEMORY[0x18961AFF0];
  }

  uint64_t v19 = *(void *)(v18 + 48);
  uint64_t v20 = *(void *)(v18 + 56);
  swift_retain();
  uint64_t result = a3(v19, a1, v20, a1);
  if (result < 0 || result > a1)
  {
LABEL_47:
    __break(1u);
  }

  else
  {
    *(void *)(v18 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
    if (result)
    {
      uint64_t v22 = result - 1;
      uint64_t v23 = v18 + 64;
      uint64_t v24 = v70;
      uint64_t v67 = v14;
      while (1)
      {
        uint64_t v25 = *(void *)(v11 + 72);
        int64_t v26 = v25 * v22;
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, *(void *)(v18 + 48) + v25 * v22, a5);
        if ((v72 & 1) == 0) {
          break;
        }
        unint64_t v27 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v14, a5, v24);
        char v29 = v28;
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a5);
        if ((v29 & 1) == 0)
        {
          uint64_t v37 = (uint64_t *)(v23 + 8 * (v27 >> 6));
          uint64_t v38 = 1LL << v27;
          uint64_t v39 = *v37;
          uint64_t v24 = v70;
          goto LABEL_28;
        }

        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v30 = *(void *)(v18 + 16);
        BOOL v31 = __OFSUB__(v30, 1LL);
        uint64_t v32 = v30 - 1;
        if (v31)
        {
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }

        *(void *)(v18 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v32;
        --v22;
        uint64_t v24 = v70;
LABEL_10:
        if (v22 < 0) {
          goto LABEL_45;
        }
      }

      uint64_t v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, a5);
      uint64_t v34 = -1LL << *(_BYTE *)(v18 + 32);
      unint64_t v35 = v33 & ~v34;
      unint64_t v36 = v35 >> 6;
      if (((-1LL << v35) & ~*(void *)(v23 + 8 * (v35 >> 6))) != 0)
      {
        unint64_t v27 = __clz(__rbit64((-1LL << v35) & ~*(void *)(v23 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v40 = 0;
        unint64_t v41 = (unint64_t)(63 - v34) >> 6;
        do
        {
          if (++v36 == v41 && (v40 & 1) != 0)
          {
            __break(1u);
            goto LABEL_46;
          }

          BOOL v42 = v36 == v41;
          if (v36 == v41) {
            unint64_t v36 = 0LL;
          }
          v40 |= v42;
          uint64_t v43 = *(void *)(v23 + 8 * v36);
        }

        while (v43 == -1);
        unint64_t v27 = __clz(__rbit64(~v43)) + (v36 << 6);
      }

      uint64_t v37 = (uint64_t *)(v23 + 8 * (v27 >> 6));
      uint64_t v39 = 1LL << v27;
      uint64_t v38 = *v37;
LABEL_28:
      *uint64_t v37 = v39 | v38;
      if (v22 >= (uint64_t)v27)
      {
        if (v27 != v22)
        {
          uint64_t v48 = *(void *)(v18 + 48);
          Swift::String v49 = (char *)(v48 + v25 * v27);
          char v50 = (char *)(v48 + v26);
          Swift::String v51 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
          v51(v14, (uint64_t)v49, a5);
          v51(v49, (uint64_t)v50, a5);
          v51(v50, (uint64_t)v14, a5);
          uint64_t v52 = *(void *)(v18 + 56);
          uint64_t v53 = *(void *)(v71 + 72);
          uint64_t v54 = (char *)(v52 + v53 * v27);
          int v55 = (char *)(v52 + v53 * v22);
          uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 32);
          uint64_t v57 = v11;
          id v58 = v68;
          uint64_t v59 = v69;
          v56(v68, (uint64_t)v54, v69);
          v56(v54, (uint64_t)v55, v59);
          uint64_t v60 = v55;
          uint64_t v24 = v70;
          int v61 = v58;
          uint64_t v11 = v57;
          uint64_t v14 = v67;
          v56(v60, (uint64_t)v61, v59);
          goto LABEL_10;
        }
      }

      else
      {
        uint64_t v44 = *(void *)(v18 + 48);
        unint64_t v45 = v44 + v25 * v27;
        unint64_t v46 = v44 + v26 + v25;
        if ((uint64_t)(v25 * v27) < v26 || v45 >= v46)
        {
          swift_arrayInitWithTakeFrontToBack();
        }

        else if (v25 * v27 != v26)
        {
          swift_arrayInitWithTakeBackToFront();
        }

        uint64_t v62 = *(void *)(v18 + 56);
        uint64_t v63 = *(void *)(v71 + 72);
        unint64_t v64 = v62 + v63 * v27;
        unint64_t v65 = v62 + v63 * v22 + v63;
        if ((uint64_t)(v63 * v27) < v63 * v22 || v64 >= v65)
        {
          swift_arrayInitWithTakeFrontToBack();
        }

        else if (v63 * v27 != v63 * v22)
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }

uint64_t sub_183292E14()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( a1,  a2,  a3,  *(void **)(v3 + 40),  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(void *)(v3 + 32));
}

uint64_t sub_183292E30()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

void *specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( void *result, uint64_t a2, id a3, uint64_t a4)
{
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (a2)
  {
    uint64_t v6 = result;
    uint64_t result = objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000LL) == 0)
    {
      if (!a4) {
        return (void *)a4;
      }
      uint64_t v7 = 0LL;
      id v8 = &v6[2 * a4 - 1];
      do
      {
        if (a4 + v7 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }

        uint64_t v15 = v6[a4 - 1 + v7];
        swift_unknownObjectRetain();
        uint64_t result = (void *)swift_dynamicCast();
        uint64_t v9 = *((void *)&v14 + 1);
        *(v8 - 1) = v14;
        *id v8 = v9;
        --v7;
        v8 -= 2;
      }

      while (a4 + v7);
      uint64_t v10 = a2 - 32;
      uint64_t v11 = 32 * a4;
      uint64_t v12 = a4;
      while (v12 <= a4)
      {
        uint64_t v13 = v12 - 1;
        uint64_t v15 = *(void *)(v10 + 8 * v12 + 24);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t result = outlined init with take of Any(&v14, (_OWORD *)(v10 + v11));
        v11 -= 32LL;
        uint64_t v12 = v13;
        if (!v13) {
          return (void *)a4;
        }
      }

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (a2)
  {
    uint64_t v6 = result;
    uint64_t result = objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000LL) == 0)
    {
      if (!a4) {
        return (void *)a4;
      }
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
      uint64_t v7 = a4;
      do
      {
        *(void *)&uint64_t v12 = *v6;
        swift_unknownObjectRetain();
        uint64_t result = (void *)swift_dynamicCast();
        *v6++ = v13;
        --v7;
      }

      while (v7);
      id v8 = a2 - 32;
      uint64_t v9 = 32 * a4;
      uint64_t v10 = a4;
      while (1)
      {
        uint64_t v11 = v10 - 1;
        if (v10 < 1) {
          break;
        }
        uint64_t v13 = *(void *)(v8 + 8 * v10 + 24);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t result = outlined init with take of Any(&v12, (_OWORD *)(v8 + v9));
        v9 -= 32LL;
        uint64_t v10 = v11;
        if (!v11) {
          return (void *)a4;
        }
      }

      __break(1u);
    }

    __break(1u);
    goto LABEL_13;
  }

void partial apply for closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_183292FE4()
{
  return swift_deallocObject();
}

uint64_t sub_183292FF4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
}

uint64_t type metadata accessor for NSDictionary.Iterator()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type NSDictionary.Iterator and conformance NSDictionary.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDictionary.Iterator and conformance NSDictionary.Iterator;
  if (!lazy protocol witness table cache variable for type NSDictionary.Iterator and conformance NSDictionary.Iterator)
  {
    uint64_t v1 = type metadata accessor for NSDictionary.Iterator();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDictionary.Iterator, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDictionary.Iterator and conformance NSDictionary.Iterator);
  }

  return result;
}

uint64_t method lookup function for NSDictionary.Iterator()
{
  return swift_lookUpClassMethod();
}

char *specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( char *result, uint64_t a2, id a3, uint64_t a4)
{
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (a2)
  {
    uint64_t v6 = result;
    unint64_t result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000LL) == 0)
    {
      if (!a4) {
        return (char *)a4;
      }
      uint64_t v7 = 0LL;
      id v8 = &v6[16 * a4 - 8];
      do
      {
        if (a4 + v7 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }

        swift_unknownObjectRetain();
        unint64_t result = (char *)swift_dynamicCast();
        *((void *)v8 - 1) = v13;
        *(void *)id v8 = v14;
        --v7;
        v8 -= 16;
      }

      while (a4 + v7);
      uint64_t v9 = 16 * a4;
      uint64_t v10 = a4;
      while (v10 <= a4)
      {
        uint64_t v11 = v10 - 1;
        swift_unknownObjectRetain();
        unint64_t result = (char *)swift_dynamicCast();
        uint64_t v12 = a2 + v9;
        *(void *)(v12 - __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v13;
        *(void *)(v12 - 8) = v14;
        v9 -= 16LL;
        uint64_t v10 = v11;
        if (!v11) {
          return (char *)a4;
        }
      }

{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (a2)
  {
    uint64_t v6 = result;
    unint64_t result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000LL) == 0)
    {
      if (!a4) {
        return (char *)a4;
      }
      uint64_t v7 = 40 * a4;
      id v8 = a4;
      do
      {
        if (v8 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }

        uint64_t v9 = v8 - 1;
        swift_unknownObjectRetain();
        unint64_t result = (char *)swift_dynamicCast();
        uint64_t v10 = &v6[v7 - 40];
        uint64_t v11 = v16[0];
        uint64_t v12 = v16[1];
        *((void *)v10 + os_unfair_lock_unlock(*v0 + 4) = v17;
        *(_OWORD *)uint64_t v10 = v11;
        *((_OWORD *)v10 + 1) = v12;
        v7 -= 40LL;
        id v8 = v9;
      }

      while (v9);
      uint64_t v13 = 32 * a4;
      uint64_t v14 = a4;
      while (v14 <= a4)
      {
        uint64_t v15 = v14 - 1;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        unint64_t result = (char *)outlined init with take of Any(v16, (_OWORD *)(a2 - 32 + v13));
        v13 -= 32LL;
        uint64_t v14 = v15;
        if (!v15) {
          return (char *)a4;
        }
      }

{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (a2)
  {
    uint64_t v6 = result;
    unint64_t result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000LL) == 0)
    {
      if (!a4) {
        return (char *)a4;
      }
      uint64_t v7 = &v6[8 * a4 - 8];
      id v8 = a4;
      do
      {
        if (v8 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }

        --v8;
        swift_unknownObjectRetain();
        unint64_t result = (char *)swift_dynamicCast();
        *(void *)uint64_t v7 = v13;
        v7 -= 8;
      }

      while (v8);
      uint64_t v9 = 16 * a4;
      uint64_t v10 = a4;
      while (v10 <= a4)
      {
        uint64_t v11 = v10 - 1;
        swift_unknownObjectRetain();
        unint64_t result = (char *)swift_dynamicCast();
        uint64_t v12 = a2 + v9;
        *(void *)(v12 - __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v13;
        *(void *)(v12 - 8) = v14;
        v9 -= 16LL;
        uint64_t v10 = v11;
        if (!v11) {
          return (char *)a4;
        }
      }

{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (a2)
  {
    uint64_t v6 = result;
    unint64_t result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000LL) == 0)
    {
      if (!a4) {
        return (char *)a4;
      }
      uint64_t v7 = 40 * a4;
      id v8 = a4;
      do
      {
        if (v8 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }

        uint64_t v9 = v8 - 1;
        swift_unknownObjectRetain();
        unint64_t result = (char *)swift_dynamicCast();
        uint64_t v10 = &v6[v7 - 40];
        *((void *)v10 + os_unfair_lock_unlock(*v0 + 4) = v17;
        *(_OWORD *)uint64_t v10 = v15;
        *((_OWORD *)v10 + 1) = v16;
        v7 -= 40LL;
        id v8 = v9;
      }

      while (v9);
      uint64_t v11 = 40 * a4;
      uint64_t v12 = a4;
      while (v12 <= a4)
      {
        uint64_t v13 = v12 - 1;
        swift_unknownObjectRetain();
        unint64_t result = (char *)swift_dynamicCast();
        uint64_t v14 = a2 - 40 + v11;
        *(void *)(v14 + 32) = v17;
        *(_OWORD *)uint64_t v14 = v15;
        *(_OWORD *)(v14 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v16;
        v11 -= 40LL;
        uint64_t v12 = v13;
        if (!v13) {
          return (char *)a4;
        }
      }

char *specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( char *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void))type metadata accessor for NSURLResourceKey);
}

{
  return specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void))type metadata accessor for NSFileAttributeKey);
}

char *specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( char *result, uint64_t a2, id a3, uint64_t a4, uint64_t (*a5)(void))
{
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (a2)
  {
    id v8 = result;
    unint64_t result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000LL) == 0)
    {
      if (!a4) {
        return (char *)a4;
      }
      unint64_t result = (char *)a5(0LL);
      uint64_t v9 = v8 - 8;
      uint64_t v10 = a4;
      do
      {
        if (v10 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }

        uint64_t v11 = v10 - 1;
        uint64_t v12 = 8 * v10;
        uint64_t v18 = *(void *)&v9[8 * v10];
        swift_unknownObjectRetain();
        unint64_t result = (char *)swift_dynamicCast();
        *(void *)&v9[v12] = v17;
        uint64_t v10 = v11;
      }

      while (v11);
      uint64_t v13 = a2 - 32;
      uint64_t v14 = 32 * a4;
      uint64_t v15 = a4;
      while (v15 <= a4)
      {
        uint64_t v16 = v15 - 1;
        uint64_t v18 = *(void *)(v13 + 8 * v15 + 24);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        unint64_t result = (char *)outlined init with take of Any(&v17, (_OWORD *)(v13 + v14));
        v14 -= 32LL;
        uint64_t v15 = v16;
        if (!v16) {
          return (char *)a4;
        }
      }

void specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2, id a3, uint64_t a4)
{
  if (!a1) {
    goto LABEL_15;
  }
  if (!a2)
  {
LABEL_16:
    __break(1u);
    return;
  }

  objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, a1, a4);
  if (a4 < 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (a4)
  {
    type metadata accessor for NSAttributedStringKey(0LL);
    uint64_t v7 = a1 - 8;
    uint64_t v8 = a4;
    do
    {
      if (v8 > a4)
      {
        __break(1u);
        goto LABEL_13;
      }

      uint64_t v9 = v8 - 1;
      uint64_t v10 = 8 * v8;
      uint64_t v16 = *(void *)(v7 + 8 * v8);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *(void *)(v7 + v10) = v15;
      uint64_t v8 = v9;
    }

    while (v9);
    uint64_t v11 = a2 - 32;
    uint64_t v12 = 32 * a4;
    uint64_t v13 = a4;
    while (v13 <= a4)
    {
      uint64_t v14 = v13 - 1;
      uint64_t v16 = *(void *)(v11 + 8 * v13 + 24);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      outlined init with take of Any(&v15, (_OWORD *)(v11 + v12));
      v12 -= 32LL;
      uint64_t v13 = v14;
      if (!v14) {
        return;
      }
    }

uint64_t *PredicateCodableConfiguration._identifier(for:)(uint64_t *result)
{
  int64_t v2 = 0LL;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  uint64_t v6 = v3 + 64;
  unint64_t v7 = v5 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v2 << 6);
      goto LABEL_24;
    }

    int64_t v11 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }

    if (v11 >= v8) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v6 + 8 * v11);
    ++v2;
    if (!v12)
    {
      int64_t v2 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_27;
      }
      unint64_t v12 = *(void *)(v6 + 8 * v2);
      if (!v12)
      {
        int64_t v2 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_27;
        }
        unint64_t v12 = *(void *)(v6 + 8 * v2);
        if (!v12)
        {
          int64_t v2 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_27;
          }
          unint64_t v12 = *(void *)(v6 + 8 * v2);
          if (!v12)
          {
            int64_t v2 = v11 + 4;
            if (v11 + 4 >= v8) {
              goto LABEL_27;
            }
            unint64_t v12 = *(void *)(v6 + 8 * v2);
            if (!v12) {
              break;
            }
          }
        }
      }
    }

uint64_t PredicateCodableConfiguration.allowType(_:identifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  return PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(a1, a2, a3, 1);
}

uint64_t specialized Sequence.first(where:)@<X0>( uint64_t (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v26 = a2 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a2 + 64);
  int64_t v27 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0LL;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v30 = (v5 - 1) & v5;
  int64_t v31 = v7;
  for (unint64_t i = __clz(__rbit64(v5)) | (v7 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v10 << 6))
  {
    int64_t v13 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v14 = v13[1];
    uint64_t v15 = *(void *)(a2 + 56) + 48 * i;
    uint64_t v16 = *(void *)v15;
    uint64_t v17 = *(void *)(v15 + 8);
    uint64_t v19 = *(void *)(v15 + 16);
    uint64_t v18 = *(void *)(v15 + 24);
    uint64_t v20 = *(void *)(v15 + 32);
    char v21 = *(_BYTE *)(v15 + 40);
    uint64_t v22 = *v13;
    v32[0] = *v13;
    v32[1] = v14;
    v32[2] = v16;
    v32[3] = v17;
    v32[4] = v19;
    v32[5] = v18;
    v32[6] = v20;
    char v33 = v21;
    swift_bridgeObjectRetain();
    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v16, v17, v19, v18, v20, v21);
    uint64_t v23 = v34;
    char v24 = a1(v32);
    if (v23)
    {
      swift_bridgeObjectRelease();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v16, v17, v19, v18, v20, v21);
      return swift_release();
    }

    uint64_t v34 = 0LL;
    if ((v24 & 1) != 0)
    {
      uint64_t result = swift_release();
      goto LABEL_29;
    }

    swift_bridgeObjectRelease();
    uint64_t result = outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v16, v17, v19, v18, v20, v21);
    unint64_t v5 = v30;
    int64_t v7 = v31;
    if (v30) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v9 = __OFADD__(v7, 1LL);
    int64_t v10 = v7 + 1;
    if (v9) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(v26 + 8 * v10);
    if (!v11)
    {
      int64_t v12 = v10 + 1;
      if (v10 + 1 >= v27) {
        goto LABEL_28;
      }
      unint64_t v11 = *(void *)(v26 + 8 * v12);
      if (v11) {
        goto LABEL_16;
      }
      int64_t v12 = v10 + 2;
      if (v10 + 2 >= v27) {
        goto LABEL_28;
      }
      unint64_t v11 = *(void *)(v26 + 8 * v12);
      if (v11) {
        goto LABEL_16;
      }
      int64_t v12 = v10 + 3;
      if (v10 + 3 >= v27) {
        goto LABEL_28;
      }
      unint64_t v11 = *(void *)(v26 + 8 * v12);
      if (v11)
      {
LABEL_16:
        int64_t v10 = v12;
        goto LABEL_17;
      }

      int64_t v12 = v10 + 4;
      if (v10 + 4 < v27)
      {
        unint64_t v11 = *(void *)(v26 + 8 * v12);
        if (!v11)
        {
          while (1)
          {
            int64_t v10 = v12 + 1;
            if (__OFADD__(v12, 1LL)) {
              goto LABEL_31;
            }
            if (v10 >= v27) {
              goto LABEL_28;
            }
            unint64_t v11 = *(void *)(v26 + 8 * v10);
            ++v12;
            if (v11) {
              goto LABEL_17;
            }
          }
        }

        goto LABEL_16;
      }

uint64_t PredicateCodableConfiguration._keyPath(for:rootType:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *v3;
  if (!*(void *)(v4 + 16)) {
    return 0LL;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v10 = *(void *)(v4 + 56) + 48 * v8;
  uint64_t v11 = *(void *)v10;
  int64_t v12 = *(uint64_t (**)(uint64_t))(v10 + 8);
  uint64_t v14 = *(void *)(v10 + 16);
  uint64_t v13 = *(void *)(v10 + 24);
  uint64_t v15 = *(void *)(v10 + 32);
  int v16 = *(unsigned __int8 *)(v10 + 40);
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath( *(void *)v10,  (uint64_t)v12,  v14,  v13,  v15,  *(_BYTE *)(v10 + 40));
  swift_bridgeObjectRelease();
  if (v16 == 1)
  {
    uint64_t v17 = *a3;
    if ((unint64_t)*a3 >= 0x800 || (unint64_t)(v17 - 512) < 3 || !v17)
    {
      swift_retain();
      if (TypeMetadata.descriptor.getter() == v11)
      {
        uint64_t v19 = Type.genericArguments.getter();
        uint64_t v20 = v12(v19);
        if (v20)
        {
          uint64_t v21 = v20;
          swift_retain();
          AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
          swift_release();
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v11, (uint64_t)v12, v14, v13, v15, 1);
          return v21;
        }
      }

      swift_release();
    }

    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v11, (uint64_t)v12, v14, v13, v15, 1);
    return 0LL;
  }

  return v11;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PredicateCodableConfiguration.AllowListType( uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void *)a1 == *(void *)a2;
  if ((*(_BYTE *)(a2 + 8) & 1) == 0) {
    BOOL v2 = 0;
  }
  BOOL v3 = *(void *)a1 == *(void *)a2;
  if ((*(_BYTE *)(a2 + 8) & 1) != 0) {
    BOOL v3 = 0;
  }
  if ((*(_BYTE *)(a1 + 8) & 1) != 0) {
    return v2;
  }
  else {
    return v3;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PredicateCodableConfiguration.AllowListKeyPath( uint64_t a1, uint64_t a2)
{
  return specialized static PredicateCodableConfiguration.AllowListKeyPath.== infix(_:_:)((uint64_t)v4, (uint64_t)v5) & 1;
}

Foundation::PredicateCodableConfiguration __swiftcall PredicateCodableConfiguration.init()()
{
  uint64_t v1 = MEMORY[0x18961AFF0];
  *(void *)uint64_t v0 = MEMORY[0x18961AFF0];
  *(void *)(v0 + 8) = v1;
  *(_BYTE *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
  return result;
}

uint64_t PredicateCodableConfiguration.debugDescription.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  int64_t v3 = *(void *)(v2 + 16);
  uint64_t v93 = *v0;
  if (v3)
  {
    uint64_t v105 = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v105;
    uint64_t result = specialized Dictionary.startIndex.getter(v2);
    uint64_t v7 = result;
    uint64_t v8 = 0LL;
    uint64_t v9 = v2 + 64;
    char v10 = *(_BYTE *)(v2 + 32);
    int64_t v95 = v3;
    int v97 = v6;
    uint64_t v99 = v2 + 64;
    while (1)
    {
      if (v7 < 0 || v7 >= 1LL << v10)
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
        return result;
      }

      unint64_t v13 = (unint64_t)v7 >> 6;
      if (*(_DWORD *)(v2 + 36) != v6) {
        goto LABEL_53;
      }
      uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v7);
      uint64_t v15 = *v14;
      int v16 = (void *)v14[1];
      uint64_t v17 = *(void *)(v2 + 56) + 16 * v7;
      uint64_t v103 = 0LL;
      unint64_t v104 = 0xE000000000000000LL;
      if ((*(_BYTE *)(v17 + 8) & 1) != 0)
      {
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(17LL);
        swift_bridgeObjectRelease();
        strcpy((char *)v102, "partial type '");
        HIBYTE(v102[1]) = -18;
        swift_getKeyPath();
        dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        swift_getAtKeyPath();
        swift_release();
        v18._uint64_t countAndFlagsBits = String.init(cString:)();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._uint64_t countAndFlagsBits = 39LL;
        v19._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v19);
        uint64_t v20 = v102[0];
        unint64_t v21 = v102[1];
      }

      else
      {
        swift_bridgeObjectRetain();
        v22._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._uint64_t countAndFlagsBits = 39LL;
        v23._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v23);
        unint64_t v21 = 0xE600000000000000LL;
        uint64_t v20 = 0x272065707974LL;
      }

      unint64_t v24 = v21;
      String.append(_:)(*(Swift::String *)&v20);
      swift_bridgeObjectRelease();
      v25._uint64_t countAndFlagsBits = 10272LL;
      v25._unint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v25);
      v26._uint64_t countAndFlagsBits = v15;
      v26._unint64_t object = v16;
      String.append(_:)(v26);
      v27._uint64_t countAndFlagsBits = 41LL;
      v27._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v27);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v28 = v103;
      unint64_t v29 = v104;
      uint64_t v105 = v4;
      unint64_t v31 = *(void *)(v4 + 16);
      unint64_t v30 = *(void *)(v4 + 24);
      if (v31 >= v30 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v30 > 1,  v31 + 1,  1);
        uint64_t v4 = v105;
      }

      *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v31 + 1;
      uint64_t v32 = v4 + 16 * v31;
      *(void *)(v32 + 32) = v28;
      *(void *)(v32 + 40) = v29;
      char v10 = *(_BYTE *)(v2 + 32);
      unint64_t v11 = 1LL << v10;
      if (v7 >= 1LL << v10) {
        goto LABEL_54;
      }
      uint64_t v9 = v2 + 64;
      uint64_t v33 = *(void *)(v99 + 8 * v13);
      if ((v33 & (1LL << v7)) == 0) {
        goto LABEL_55;
      }
      int v6 = v97;
      if (*(_DWORD *)(v2 + 36) != v97) {
        goto LABEL_56;
      }
      unint64_t v34 = v33 & (-2LL << (v7 & 0x3F));
      if (v34)
      {
        unint64_t v11 = __clz(__rbit64(v34)) | v7 & 0xFFFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v35 = v13 + 1;
        unint64_t v36 = (v11 + 63) >> 6;
        if (v13 + 1 < v36)
        {
          unint64_t v37 = *(void *)(v99 + 8 * v35);
          int64_t v12 = v95;
          if (v37)
          {
LABEL_24:
            unint64_t v11 = __clz(__rbit64(v37)) + (v35 << 6);
          }

          else
          {
            while (v36 - 2 != v13)
            {
              unint64_t v37 = *(void *)(v2 + 80 + 8 * v13++);
              if (v37)
              {
                unint64_t v35 = v13 + 1;
                goto LABEL_24;
              }
            }
          }

          goto LABEL_5;
        }
      }

      int64_t v12 = v95;
LABEL_5:
      ++v8;
      uint64_t v7 = v11;
      if (v8 == v12)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v93;
        break;
      }
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v89 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  int64_t v40 = *(void *)(v1 + 16);
  if (v40)
  {
    uint64_t v87 = v39;
    uint64_t v105 = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
    uint64_t v41 = v105;
    uint64_t result = specialized Dictionary.startIndex.getter(v1);
    uint64_t v43 = result;
    uint64_t v44 = 0LL;
    uint64_t v45 = v1 + 64;
    char v46 = *(_BYTE *)(v1 + 32);
    uint64_t v88 = v1 + 80;
    int64_t v90 = v40;
    int v91 = v42;
    uint64_t v92 = v1 + 64;
    while ((v43 & 0x8000000000000000LL) == 0 && v43 < 1LL << v46)
    {
      unint64_t v49 = (unint64_t)v43 >> 6;
      if (*(_DWORD *)(v1 + 36) != v42) {
        goto LABEL_59;
      }
      uint64_t v94 = v44;
      char v50 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v43);
      uint64_t v51 = *v50;
      uint64_t v52 = (void *)v50[1];
      uint64_t v53 = *(void *)(v1 + 56) + 48 * v43;
      uint64_t v54 = *(void *)v53;
      uint64_t v55 = *(void *)(v53 + 8);
      uint64_t v56 = *(void *)(v53 + 24);
      uint64_t v100 = v41;
      uint64_t v101 = *(void *)(v53 + 16);
      uint64_t v57 = *(void **)(v53 + 32);
      char v58 = *(_BYTE *)(v53 + 40);
      uint64_t v103 = 0LL;
      unint64_t v104 = 0xE000000000000000LL;
      uint64_t v96 = v51;
      uint64_t v98 = v55;
      if ((v58 & 1) != 0)
      {
        v102[0] = 92LL;
        v102[1] = 0xE100000000000000LL;
        swift_getKeyPath();
        swift_bridgeObjectRetain();
        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v54, v55, v101, v56, (uint64_t)v57, 1);
        dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        swift_getAtKeyPath();
        swift_release();
        v59._uint64_t countAndFlagsBits = String.init(cString:)();
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._uint64_t countAndFlagsBits = 46LL;
        v60._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v60);
        v61._uint64_t countAndFlagsBits = v56;
        v61._unint64_t object = v57;
        String.append(_:)(v61);
        uint64_t v62 = 92LL;
        unint64_t v63 = 0xE100000000000000LL;
      }

      else
      {
        swift_bridgeObjectRetain();
        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v54, v55, v101, v56, (uint64_t)v57, 0);
        uint64_t v62 = AnyKeyPath.debugDescription.getter();
        unint64_t v63 = v64;
      }

      unint64_t v65 = v63;
      String.append(_:)(*(Swift::String *)&v62);
      swift_bridgeObjectRelease();
      v66._uint64_t countAndFlagsBits = 10272LL;
      v66._unint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v66);
      v67._uint64_t countAndFlagsBits = v96;
      v67._unint64_t object = v52;
      String.append(_:)(v67);
      v68._uint64_t countAndFlagsBits = 41LL;
      v68._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v68);
      swift_bridgeObjectRelease();
      uint64_t result = outlined consume of PredicateCodableConfiguration.AllowListKeyPath( v54,  v98,  v101,  v56,  (uint64_t)v57,  v58);
      uint64_t v69 = v103;
      unint64_t v70 = v104;
      uint64_t v41 = v100;
      uint64_t v105 = v100;
      unint64_t v72 = *(void *)(v100 + 16);
      unint64_t v71 = *(void *)(v100 + 24);
      if (v72 >= v71 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v71 > 1,  v72 + 1,  1);
        uint64_t v41 = v105;
      }

      *(void *)(v41 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v72 + 1;
      uint64_t v73 = v41 + 16 * v72;
      *(void *)(v73 + 32) = v69;
      *(void *)(v73 + 40) = v70;
      uint64_t v1 = v93;
      char v46 = *(_BYTE *)(v93 + 32);
      unint64_t v47 = 1LL << v46;
      if (v43 >= 1LL << v46) {
        goto LABEL_60;
      }
      uint64_t v45 = v92;
      uint64_t v74 = *(void *)(v92 + 8 * v49);
      if ((v74 & (1LL << v43)) == 0) {
        goto LABEL_61;
      }
      int v42 = v91;
      if (*(_DWORD *)(v93 + 36) != v91) {
        goto LABEL_62;
      }
      unint64_t v75 = v74 & (-2LL << (v43 & 0x3F));
      if (v75)
      {
        unint64_t v47 = __clz(__rbit64(v75)) | v43 & 0xFFFFFFFFFFFFFFC0LL;
        int64_t v48 = v90;
      }

      else
      {
        unint64_t v76 = v49 + 1;
        unint64_t v77 = (v47 + 63) >> 6;
        int64_t v48 = v90;
        if (v49 + 1 < v77)
        {
          unint64_t v78 = *(void *)(v92 + 8 * v76);
          if (v78)
          {
LABEL_48:
            unint64_t v47 = __clz(__rbit64(v78)) + (v76 << 6);
          }

          else
          {
            while (v77 - 2 != v49)
            {
              unint64_t v78 = *(void *)(v88 + 8 * v49++);
              if (v78)
              {
                unint64_t v76 = v49 + 1;
                goto LABEL_48;
              }
            }
          }
        }
      }

      uint64_t v44 = v94 + 1;
      uint64_t v43 = v47;
      if (v94 + 1 == v48)
      {
        swift_bridgeObjectRelease();
        uint64_t v39 = v87;
        goto LABEL_50;
      }
    }

    goto LABEL_57;
  }

uint64_t PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)( uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v6 = v4;
  if (a3)
  {
    uint64_t v8 = a3;
  }

  else
  {
    a2 = _typeName(_:qualified:)();
    uint64_t v8 = v9;
  }

  uint64_t v10 = *(void *)(v4 + 8);
  uint64_t v106 = v10 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(v10 + 32);
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & *(void *)(v10 + 64);
  __src = (void *)((unint64_t)(v11 + 63) >> 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = 0LL;
  while (1)
  {
    do
    {
      if (v13)
      {
        unint64_t v16 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v17 = v16 | (v14 << 6);
        goto LABEL_27;
      }

      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1LL))
      {
        __break(1u);
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }

      unint64_t v19 = *(void *)(v106 + 8 * v18);
      ++v14;
      if (v19) {
        goto LABEL_26;
      }
      uint64_t v14 = v18 + 1;
      unint64_t v19 = *(void *)(v106 + 8 * v14);
      if (v19) {
        goto LABEL_26;
      }
      uint64_t v14 = v18 + 2;
      unint64_t v19 = *(void *)(v106 + 8 * v14);
      if (v19) {
        goto LABEL_26;
      }
      uint64_t v20 = v18 + 3;
      if (v20 >= (uint64_t)__src)
      {
LABEL_74:
        swift_release();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v111 = *(void *)(v6 + 8);
        uint64_t v5 = v111;
        *(void *)(v6 + 8) = 0x8000000000000000LL;
        unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)v8);
        uint64_t v58 = *(void *)(v111 + 16);
        BOOL v59 = (v57 & 1) == 0;
        uint64_t v60 = v58 + v59;
        if (!__OFADD__(v58, v59))
        {
          LOBYTE(v10) = v57;
          if (*(void *)(v111 + 24) < v60)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v60,  isUniquelyReferenced_nonNull_native);
            uint64_t v61 = v111;
            unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)v8);
            if ((v10 & 1) != (v63 & 1)) {
              goto LABEL_127;
            }
            unint64_t v13 = v62;
            uint64_t v64 = a1;
            if ((v10 & 1) == 0) {
              goto LABEL_118;
            }
            goto LABEL_81;
          }

          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            uint64_t v61 = v111;
            uint64_t v64 = a1;
            if ((v57 & 1) == 0) {
              goto LABEL_118;
            }
            goto LABEL_81;
          }

uint64_t PredicateCodableConfiguration.disallowType(_:)(uint64_t *a1)
{
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized _NativeDictionary.filter(_:)(v3, a1);
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)(v1 + 8) = v4;
  return result;
}

uint64_t *PredicateCodableConfiguration.allowPartialType(_:identifier:)( uint64_t *result, uint64_t a2, void *a3)
{
  uint64_t v5 = *result;
  if ((unint64_t)*result > 0x7FF || ((unint64_t)(v5 - 512) >= 3 ? (BOOL v6 = v5 == 0) : (BOOL v6 = 1), v6))
  {
    uint64_t v7 = TypeMetadata.descriptor.getter();
    return (uint64_t *)PredicateCodableConfiguration._allowPartialType(_:identifier:)(v7, a2, a3);
  }

  return result;
}

uint64_t PredicateCodableConfiguration._allowPartialType(_:identifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *(void *)(v3 + 8);
  uint64_t v104 = v8 + 64;
  uint64_t v9 = 1LL << *(_BYTE *)(v8 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v8 + 64);
  __src = (void *)((unint64_t)(v9 + 63) >> 6);
  swift_bridgeObjectRetain();
  uint64_t v12 = 0LL;
  while (1)
  {
    do
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v12 << 6);
        goto LABEL_24;
      }

      uint64_t v17 = v12 + 1;
      if (__OFADD__(v12, 1LL))
      {
        __break(1u);
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }

      unint64_t v18 = *(void *)(v104 + 8 * v17);
      ++v12;
      if (v18) {
        goto LABEL_23;
      }
      uint64_t v12 = v17 + 1;
      unint64_t v18 = *(void *)(v104 + 8 * v12);
      if (v18) {
        goto LABEL_23;
      }
      uint64_t v12 = v17 + 2;
      unint64_t v18 = *(void *)(v104 + 8 * v12);
      if (v18) {
        goto LABEL_23;
      }
      uint64_t v19 = v17 + 3;
      if (v19 >= (uint64_t)__src)
      {
LABEL_70:
        swift_release();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v109 = *(void *)(v5 + 8);
        uint64_t v4 = v109;
        *(void *)(v5 + 8) = 0x8000000000000000LL;
        unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
        uint64_t v57 = *(void *)(v109 + 16);
        BOOL v58 = (v56 & 1) == 0;
        uint64_t v59 = v57 + v58;
        if (!__OFADD__(v57, v58))
        {
          LOBYTE(v8) = v56;
          if (*(void *)(v109 + 24) < v59)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v59,  isUniquelyReferenced_nonNull_native);
            uint64_t v60 = v109;
            unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
            if ((v8 & 1) != (v62 & 1)) {
              goto LABEL_123;
            }
            unint64_t v11 = v61;
            uint64_t v63 = a1;
            if ((v8 & 1) == 0) {
              goto LABEL_114;
            }
            goto LABEL_77;
          }

          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            uint64_t v60 = v109;
            uint64_t v63 = a1;
            if ((v56 & 1) == 0) {
              goto LABEL_114;
            }
            goto LABEL_77;
          }

uint64_t *PredicateCodableConfiguration.disallowPartialType(_:)(uint64_t *result)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result > 0x7FF || ((unint64_t)(v2 - 512) >= 3 ? (BOOL v3 = v2 == 0) : (BOOL v3 = 1), v3))
  {
    uint64_t v4 = TypeMetadata.descriptor.getter();
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = specialized _NativeDictionary.filter(_:)(v5, v4);
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease_n();
    *(void *)(v1 + 8) = v6;
  }

  return result;
}

uint64_t PredicateCodableConfiguration.allowKeyPath(_:identifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  v136._uint64_t countAndFlagsBits = a2;
  v136._unint64_t object = a3;
  AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
  uint64_t v10 = *v3;
  unint64_t v130 = v3;
  __src = (void *)(*v3 + 64);
  uint64_t v11 = 1LL << *(_BYTE *)(*v3 + 32);
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & *(void *)(*v3 + 64);
  int64_t v133 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v14 = 0LL;
  uint64_t v128 = v10;
  if (v13) {
    goto LABEL_8;
  }
LABEL_9:
  int64_t v17 = v14 + 1;
  if (__OFADD__(v14, 1LL))
  {
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }

  unint64_t object = v136._object;
  if (v17 >= v133)
  {
LABEL_73:
    swift_release();
    type metadata accessor for AnyKeyPath();
    swift_bridgeObjectRetain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyKeyPath & Sendable);
    swift_dynamicCast();
    unint64_t v13 = *(void *)v142;
    uint64_t v4 = (uint64_t)v130;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v141 = *v130;
    uint64_t v10 = *v130;
    *unint64_t v130 = 0x8000000000000000LL;
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v136._countAndFlagsBits, (uint64_t)v136._object);
    uint64_t v68 = *(void *)(v10 + 16);
    BOOL v69 = (v67 & 1) == 0;
    uint64_t v70 = v68 + v69;
    if (!__OFADD__(v68, v69))
    {
      uint64_t v4 = v67;
      if (*(void *)(v10 + 24) < v70)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v70,  isUniquelyReferenced_nonNull_native);
        uint64_t v71 = v141;
        uint64_t countAndFlagsBits = v136._countAndFlagsBits;
        unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(v136._countAndFlagsBits, (uint64_t)v136._object);
        if ((v4 & 1) != (v74 & 1)) {
          goto LABEL_127;
        }
        unint64_t v5 = v73;
        goto LABEL_80;
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v71 = v10;
        goto LABEL_79;
      }

uint64_t PredicateCodableConfiguration.disallowKeyPath(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
  swift_retain();
  uint64_t v4 = swift_bridgeObjectRetain();
  unint64_t v5 = specialized _NativeDictionary.filter(_:)(v4, a1);
  swift_bridgeObjectRelease_n();
  uint64_t result = swift_release();
  *uint64_t v2 = v5;
  return result;
}

uint64_t PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a5;
  uint64_t v12 = a4;
  v153[0] = a1;
  v153[1] = a6;
  v153[2] = a7;
  v153[3] = a4;
  v153[4] = a5;
  char v154 = 1;
  uint64_t v15 = *v7;
  uint64_t v143 = v15 + 64;
  uint64_t v16 = 1LL << *(_BYTE *)(v15 + 32);
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & *(void *)(v15 + 64);
  __src = (void *)((unint64_t)(v16 + 63) >> 6);
  swift_retain();
  unint64_t v140 = (void *)v11;
  swift_bridgeObjectRetain();
  uint64_t v147 = v15;
  swift_bridgeObjectRetain();
  uint64_t countAndFlagsBits = a2;
  unint64_t object = (uint64_t *)a3;
  uint64_t v149 = 0LL;
  v151._uint64_t countAndFlagsBits = a2;
  v151._unint64_t object = (void *)a3;
  for (i = v12; ; uint64_t v12 = i)
  {
    while (1)
    {
      do
      {
        if (v18)
        {
          unint64_t v21 = __clz(__rbit64(v18));
          v18 &= v18 - 1;
          unint64_t v22 = v21 | (v149 << 6);
          goto LABEL_21;
        }

        uint64_t v23 = v149 + 1;
        if (__OFADD__(v149, 1LL))
        {
          __break(1u);
LABEL_95:
          __break(1u);
          goto LABEL_96;
        }

        unint64_t v24 = *(void *)(v143 + 8 * v23);
        uint64_t v25 = v149 + 1;
        if (v24) {
          goto LABEL_20;
        }
        uint64_t v25 = v149 + 2;
        unint64_t v24 = *(void *)(v143 + 8 * v25);
        if (v24) {
          goto LABEL_20;
        }
        uint64_t v25 = v149 + 3;
        unint64_t v24 = *(void *)(v143 + 8 * v25);
        if (v24) {
          goto LABEL_20;
        }
        uint64_t v26 = v149 + 4;
        if (v149 + 4 >= (uint64_t)__src)
        {
LABEL_86:
          swift_release();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v9 = v139;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v152 = *v139;
          uint64_t v8 = *v139;
          *int64_t v139 = 0x8000000000000000LL;
          a3 = specialized __RawDictionaryStorage.find<A>(_:)(v151._countAndFlagsBits, (uint64_t)v151._object);
          uint64_t v74 = *(void *)(v8 + 16);
          BOOL v75 = (v73 & 1) == 0;
          uint64_t v76 = v74 + v75;
          if (!__OFADD__(v74, v75))
          {
            uint64_t v11 = v73;
            if (*(void *)(v8 + 24) < v76)
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v76,  isUniquelyReferenced_nonNull_native);
              uint64_t v77 = v152;
              unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v151._countAndFlagsBits, (uint64_t)v151._object);
              if ((v11 & 1) != (v79 & 1)) {
                goto LABEL_139;
              }
              a3 = v78;
              if ((v11 & 1) == 0) {
                goto LABEL_130;
              }
              goto LABEL_93;
            }

            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              uint64_t v77 = v8;
              if ((v73 & 1) == 0) {
                goto LABEL_130;
              }
              goto LABEL_93;
            }

uint64_t PredicateCodableConfiguration.allowKeyPathsForPropertiesProvided<A>(by:recursive:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  uint64_t v6 = result;
  int64_t v7 = 0LL;
  uint64_t v8 = result + 64;
  uint64_t v9 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & *(void *)(result + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
      goto LABEL_21;
    }

    int64_t v15 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v15 >= v12) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v8 + 8 * v15);
    ++v7;
    if (!v16)
    {
      int64_t v7 = v15 + 1;
      if (v15 + 1 >= v12) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v8 + 8 * v7);
      if (!v16)
      {
        int64_t v7 = v15 + 2;
        if (v15 + 2 >= v12) {
          return swift_release();
        }
        unint64_t v16 = *(void *)(v8 + 8 * v7);
        if (!v16) {
          break;
        }
      }
    }

uint64_t PredicateCodableConfiguration.disallowKeyPathsForPropertiesProvided<A>(by:recursive:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  uint64_t v8 = result;
  int64_t v9 = 0LL;
  uint64_t v27 = result + 64;
  uint64_t v10 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(result + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_18;
    }

    if (__OFADD__(v9++, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v9 >= v13) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v27 + 8 * v9);
    if (!v17) {
      break;
    }
LABEL_17:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_18:
    uint64_t v19 = *(void *)(*(void *)(v8 + 56) + 8 * v15);
    swift_retain();
    AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
    swift_retain();
    uint64_t v20 = swift_bridgeObjectRetain();
    uint64_t v21 = specialized _NativeDictionary.filter(_:)(v20, v19);
    swift_bridgeObjectRelease_n();
    swift_release();
    *unint64_t v5 = v21;
    if ((a2 & 1) != 0)
    {
      dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
      uint64_t v23 = v22;
      uint64_t v24 = swift_conformsToProtocol2();
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0LL;
      }
      if (v24) {
        uint64_t v26 = v23;
      }
      else {
        uint64_t v26 = 0LL;
      }
      if (v26) {
        PredicateCodableConfiguration.disallowKeyPathsForPropertiesProvided<A>(by:recursive:)(v26, 1LL, v26, v25);
      }
    }

    uint64_t result = swift_release();
  }

  int64_t v18 = v9 + 1;
  if (v9 + 1 >= v13) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v9 + 2;
  if (v9 + 2 >= v13) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v9 + 3;
  if (v9 + 3 >= v13) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17)
  {
LABEL_16:
    int64_t v9 = v18;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v27 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_17;
    }
  }

Swift::Void __swiftcall PredicateCodableConfiguration.allow(_:)(Foundation::PredicateCodableConfiguration a1)
{
  uint64_t v1 = *((void *)a1.allowedKeyPaths._rawValue + 1);
  uint64_t v39 = *(void *)a1.allowedKeyPaths._rawValue;
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_22;
    }

    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v10 >= v6) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v10);
    ++v7;
    if (v11) {
      goto LABEL_21;
    }
    int64_t v7 = v10 + 1;
    if (v10 + 1 >= v6) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    if (v11) {
      goto LABEL_21;
    }
    int64_t v7 = v10 + 2;
    if (v10 + 2 >= v6) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    if (v11) {
      goto LABEL_21;
    }
    int64_t v12 = v10 + 3;
    if (v12 >= v6)
    {
LABEL_24:
      swift_release();
      uint64_t v37 = v39 + 64;
      uint64_t v19 = 1LL << *(_BYTE *)(v39 + 32);
      uint64_t v20 = -1LL;
      if (v19 < 64) {
        uint64_t v20 = ~(-1LL << v19);
      }
      unint64_t v21 = v20 & *(void *)(v39 + 64);
      int64_t v38 = (unint64_t)(v19 + 63) >> 6;
      swift_bridgeObjectRetain();
      int64_t v22 = 0LL;
      if (v21) {
        goto LABEL_29;
      }
LABEL_30:
      int64_t v25 = v22 + 1;
      if (!__OFADD__(v22, 1LL))
      {
        if (v25 < v38)
        {
          unint64_t v26 = *(void *)(v37 + 8 * v25);
          ++v22;
          if (v26) {
            goto LABEL_43;
          }
          int64_t v22 = v25 + 1;
          if (v25 + 1 < v38)
          {
            unint64_t v26 = *(void *)(v37 + 8 * v22);
            if (v26) {
              goto LABEL_43;
            }
            int64_t v22 = v25 + 2;
            if (v25 + 2 < v38)
            {
              unint64_t v26 = *(void *)(v37 + 8 * v22);
              if (v26) {
                goto LABEL_43;
              }
              int64_t v27 = v25 + 3;
              if (v27 < v38)
              {
                unint64_t v26 = *(void *)(v37 + 8 * v27);
                if (!v26)
                {
                  while (1)
                  {
                    int64_t v22 = v27 + 1;
                    if (__OFADD__(v27, 1LL)) {
                      goto LABEL_51;
                    }
                    if (v22 >= v38) {
                      goto LABEL_47;
                    }
                    unint64_t v26 = *(void *)(v37 + 8 * v22);
                    ++v27;
                    if (v26) {
                      goto LABEL_43;
                    }
                  }
                }

                int64_t v22 = v27;
LABEL_43:
                unint64_t v21 = (v26 - 1) & v26;
                for (unint64_t i = __clz(__rbit64(v26)) + (v22 << 6); ; unint64_t i = v23 | (v22 << 6))
                {
                  uint64_t v28 = (uint64_t *)(*(void *)(v39 + 48) + 16 * i);
                  uint64_t v30 = *v28;
                  uint64_t v29 = (void *)v28[1];
                  uint64_t v31 = *(void *)(v39 + 56) + 48 * i;
                  uint64_t v33 = *(void *)v31;
                  uint64_t v32 = *(void *)(v31 + 8);
                  uint64_t v34 = *(void *)(v31 + 16);
                  uint64_t v35 = *(void *)(v31 + 24);
                  uint64_t v36 = *(void *)(v31 + 32);
                  if ((*(_BYTE *)(v31 + 40) & 1) != 0)
                  {
                    swift_bridgeObjectRetain();
                    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v33, v32, v34, v35, v36, 1);
                    swift_retain();
                    swift_bridgeObjectRetain();
                    PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)( v33,  v30,  (unint64_t)v29,  v35,  v36,  v32,  v34);
                    swift_bridgeObjectRelease();
                    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v33, v32, v34, v35, v36, 1);
                    swift_release();
                    swift_bridgeObjectRelease();
                    if (!v21) {
                      goto LABEL_30;
                    }
                  }

                  else
                  {
                    swift_bridgeObjectRetain();
                    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v33, v32, v34, v35, v36, 0);
                    PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v33, v30, v29);
                    swift_bridgeObjectRelease();
                    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v33, v32, v34, v35, v36, 0);
                    if (!v21) {
                      goto LABEL_30;
                    }
                  }

uint64_t closure #1 in PredicateCodableConfiguration._identifier(for:)(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 56) & 1) != 0) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 16);
  type metadata accessor for AnyKeyPath();
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v8, v7, v6, v5, v4, 0);
  swift_retain();
  char v9 = MEMORY[0x186E1C1A4](v8, a2);
  swift_release();
  outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v8, v7, v6, v5, v4, 0);
  return v9 & 1;
}

uint64_t one-time initialization function for standardConfiguration()
{
  return closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration((uint64_t)&static PredicateCodableConfiguration.standardConfiguration);
}

uint64_t closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration@<X0>( uint64_t a1@<X8>)
{
  *(void *)&__int128 v93 = MEMORY[0x18961AFF0];
  *((void *)&v93 + 1) = MEMORY[0x18961AFF0];
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x189618740], 0LL, 0LL, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x1896184C8], 0LL, 0LL, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x189618560], 0LL, 0LL, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x189617FA8], 0LL, 0LL, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x189618C50], 0LL, 0LL, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x189617AB0], 0LL, 0LL, 1);
  uint64_t v1 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  uint64_t v2 = *v1;
  if ((unint64_t)*v1 > 0x7FF || ((unint64_t)(v2 - 512) >= 3 ? (BOOL v3 = v2 == 0) : (BOOL v3 = 1), v3))
  {
    uint64_t v4 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)( v4,  0x72412E7466697753LL,  (void *)0xEB00000000796172LL);
  }

  uint64_t v5 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : Int]);
  uint64_t v6 = *v5;
  if ((unint64_t)*v5 > 0x7FF || (unint64_t)(v6 - 512) < 3 || !v6)
  {
    uint64_t v7 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)( v7,  0xD000000000000010LL,  (void *)0x80000001839CF450LL);
  }

  uint64_t v8 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Int>);
  uint64_t v9 = *v8;
  if ((unint64_t)*v8 > 0x7FF || (unint64_t)(v9 - 512) < 3 || !v9)
  {
    uint64_t v10 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)( v10,  0x65532E7466697753LL,  (void *)0xE900000000000074LL);
  }

  unint64_t v11 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  if (v11 > 0x7FF || v11 - 512 < 3 || !v11)
  {
    uint64_t v12 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)( v12,  0x704F2E7466697753LL,  (void *)0xEE006C616E6F6974LL);
  }

  unint64_t v13 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<String>);
  if (v13 > 0x7FF || v13 - 512 < 3 || !v13)
  {
    uint64_t v14 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)( v14,  0x6C532E7466697753LL,  (void *)0xEB00000000656369LL);
  }

  unint64_t v15 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Predicate<Pack{Int}>);
  if (v15 > 0x7FF || v15 - 512 < 3 || !v15)
  {
    uint64_t v16 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)( v16,  0xD000000000000014LL,  (void *)0x80000001839CF470LL);
  }

  unint64_t v17 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Pack{Int}, Int>);
  if (v17 > 0x7FF || v17 - 512 < 3 || !v17)
  {
    uint64_t v18 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)( v18,  0xD000000000000015LL,  (void *)0x80000001839CF490LL);
  }

  uint64_t v19 = type metadata accessor for PredicateExpressions.PredicateRegex(0LL);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(v19, 0LL, 0LL, 1);
  unint64_t v20 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Arithmetic<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  if (v20 > 0x7FF || v20 - 512 < 3 || !v20)
  {
    uint64_t v21 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)( v21,  0xD00000000000001FLL,  (void *)0x80000001839CF4B0LL);
  }

  unint64_t v22 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.ClosedRange<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  if (v22 > 0x7FF || v22 - 512 < 3 || !v22)
  {
    uint64_t v23 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)( v23,  0xD000000000000020LL,  (void *)0x80000001839CF4D0LL);
  }

  unint64_t v24 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.RangeExpressionContains<PredicateExpressions.Value<Range<Int>>, PredicateExpressions.Value<Int>>);
  if (v24 > 0x7FF || v24 - 512 < 3 || !v24)
  {
    uint64_t v25 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)( v25,  0xD00000000000002CLL,  (void *)0x80000001839CF500LL);
  }

  unint64_t v26 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.CollectionContainsCollection<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<[Int]>>);
  if (v26 > 0x7FF || v26 - 512 < 3 || !v26)
  {
    uint64_t v27 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)( v27,  0xD000000000000031LL,  (void *)0x80000001839CF530LL);
  }

  uint64_t v92 = v5;
  unint64_t v28 = *(void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.CollectionIndexSubscript<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Int>>);
  if (v28 > 0x7FF || v28 - 512 < 3 || !v28)
  {
    uint64_t v29 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)( v29,  0xD00000000000002DLL,  (void *)0x80000001839CF570LL);
  }

  uint64_t v30 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.CollectionRangeSubscript<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Range<Int>>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v30, 0xD00000000000002DLL, (void *)0x80000001839CF5A0LL);
  uint64_t v31 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Comparison<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v31, 0xD00000000000001FLL, (void *)0x80000001839CF5D0LL);
  uint64_t v32 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Conditional<PredicateExpressions.Value<Bool>, PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v32, 0xD000000000000020LL, (void *)0x80000001839CF5F0LL);
  uint64_t v33 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Conjunction<PredicateExpressions.Value<Bool>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v33, 0xD000000000000020LL, (void *)0x80000001839CF620LL);
  uint64_t v34 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.DictionaryKeyDefaultValueSubscript<PredicateExpressions.Value<[Int : Int]>, PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v34, 0xD000000000000037LL, (void *)0x80000001839CF650LL);
  uint64_t v35 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.DictionaryKeySubscript<PredicateExpressions.Value<[Int : Int]>, PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v35, 0xD00000000000002BLL, (void *)0x80000001839CF690LL);
  uint64_t v36 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Disjunction<PredicateExpressions.Value<Bool>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v36, 0xD000000000000020LL, (void *)0x80000001839CF6C0LL);
  uint64_t v37 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.IntDivision<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v37, 0xD000000000000020LL, (void *)0x80000001839CF6F0LL);
  int64_t v38 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.IntRemainder<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v38, 0xD000000000000021LL, (void *)0x80000001839CF720LL);
  uint64_t v39 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.FloatDivision<PredicateExpressions.Value<Float>, PredicateExpressions.Value<Float>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v39, 0xD000000000000022LL, (void *)0x80000001839CF750LL);
  uint64_t v40 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v40, 0xD00000000000001ALL, (void *)0x80000001839CF780LL);
  uint64_t v41 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Filter<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v41, 0xD00000000000001BLL, (void *)0x80000001839CF7A0LL);
  uint64_t v42 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.NotEqual<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v42, 0xD00000000000001DLL, (void *)0x80000001839CF7C0LL);
  uint64_t v43 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Negation<PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v43, 0xD00000000000001DLL, (void *)0x80000001839CF7E0LL);
  uint64_t v44 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.OptionalFlatMap<PredicateExpressions.Value<Bool?>, Bool, PredicateExpressions.Value<Bool>, Bool>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v44, 0xD000000000000024LL, (void *)0x80000001839CF800LL);
  unint64_t v45 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.NilCoalesce<PredicateExpressions.Value<Bool?>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v45, 0xD000000000000020LL, (void *)0x80000001839CF830LL);
  uint64_t v46 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.ForcedUnwrap<PredicateExpressions.Value<Bool?>, Bool>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v46, 0xD000000000000021LL, (void *)0x80000001839CF860LL);
  unint64_t v47 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Range<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v47, 0xD00000000000001ALL, (void *)0x80000001839CF890LL);
  int64_t v48 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceContains<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v48, 0xD000000000000025LL, (void *)0x80000001839CF8B0LL);
  uint64_t v49 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceContainsWhere<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v49, 0xD00000000000002ALL, (void *)0x80000001839CF8E0LL);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v49, 0xD000000000000027LL, (void *)0x80000001839CF910LL);
  uint64_t v50 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceStartsWith<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<[Int]>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v50, 0xD000000000000027LL, (void *)0x80000001839CF940LL);
  unint64_t v51 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceMaximum<PredicateExpressions.Value<[Int]>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v51, 0xD000000000000024LL, (void *)0x80000001839CF970LL);
  unint64_t v52 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceMinimum<PredicateExpressions.Value<[Int]>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v52, 0xD000000000000024LL, (void *)0x80000001839CF9A0LL);
  uint64_t v53 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.ConditionalCast<PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v53, 0xD000000000000024LL, (void *)0x80000001839CF9D0LL);
  uint64_t v54 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.ForceCast<PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v54, 0xD00000000000001ELL, (void *)0x80000001839CFA00LL);
  uint64_t v55 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.TypeCheck<PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v55, 0xD00000000000001ELL, (void *)0x80000001839CFA20LL);
  uint64_t v56 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.UnaryMinus<PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v56, 0xD00000000000001FLL, (void *)0x80000001839CFA40LL);
  uint64_t v57 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.NilLiteral<Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v57, 0xD00000000000001FLL, (void *)0x80000001839CFA60LL);
  uint64_t v58 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.PredicateEvaluate<PredicateExpressions.Value<Predicate<Pack{Int}>>, Pack{PredicateExpressions.Value<Int>}>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v58, 0xD000000000000026LL, (void *)0x80000001839CFA80LL);
  uint64_t v59 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.StringContainsRegex<PredicateExpressions.Value<String>, PredicateExpressions.Value<PredicateExpressions.PredicateRegex>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v59, 0xD000000000000028LL, (void *)0x80000001839CFAB0LL);
  uint64_t v60 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.StringCaseInsensitiveCompare<PredicateExpressions.Value<String>, PredicateExpressions.Value<String>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v60, 0xD000000000000031LL, (void *)0x80000001839CFAE0LL);
  uint64_t v61 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.StringLocalizedCompare<PredicateExpressions.Value<String>, PredicateExpressions.Value<String>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v61, 0xD00000000000002BLL, (void *)0x80000001839CFB20LL);
  uint64_t v62 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.StringLocalizedStandardContains<PredicateExpressions.Value<String>, PredicateExpressions.Value<String>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v62, 0xD000000000000034LL, (void *)0x80000001839CFB50LL);
  char v63 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.KeyPath<PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v63, 0xD00000000000001CLL, (void *)0x80000001839CFB90LL);
  uint64_t v64 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Variable<Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v64, 0xD00000000000001DLL, (void *)0x80000001839CFBB0LL);
  uint64_t v65 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v65, 0xD00000000000001ALL, (void *)0x80000001839CFBD0LL);
  uint64_t KeyPath = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(KeyPath, 0xD000000000000012LL, (void *)0x80000001839CFBF0LL);
  swift_release();
  uint64_t v67 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v67, 0xD000000000000015LL, (void *)0x80000001839CFC10LL);
  swift_release();
  uint64_t v68 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v68, 0xD000000000000014LL, (void *)0x80000001839CFC30LL);
  swift_release();
  uint64_t v69 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v69, 0xD000000000000017LL, (void *)0x80000001839CFC50LL);
  swift_release();
  uint64_t v70 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v70, 0xD000000000000012LL, (void *)0x80000001839CFC70LL);
  swift_release();
  uint64_t v71 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v71, 0xD000000000000015LL, (void *)0x80000001839CFC90LL);
  swift_release();
  uint64_t v72 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v72, 0xD000000000000011LL, (void *)0x80000001839CFCB0LL);
  swift_release();
  uint64_t v73 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v73, 0xD000000000000014LL, (void *)0x80000001839CFCD0LL);
  uint64_t result = swift_release();
  uint64_t v75 = *v1;
  if ((unint64_t)*v1 <= 0x7FF && (unint64_t)(v75 - 512) >= 3 && v75)
  {
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }

  uint64_t v76 = TypeMetadata.descriptor.getter();
  uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)( v76,  0xD000000000000011LL,  0x80000001839CFCF0LL,  0x746E756F63LL,  0xE500000000000000LL,  (uint64_t)closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration,  0LL);
  uint64_t v77 = *v1;
  uint64_t v78 = TypeMetadata.descriptor.getter();
  uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)( v78,  0xD000000000000013LL,  0x80000001839CFD10LL,  0x7974706D457369LL,  0xE700000000000000LL,  (uint64_t)closure #2 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration,  0LL);
  uint64_t v79 = *v1;
  uint64_t v80 = TypeMetadata.descriptor.getter();
  uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)( v80,  0xD000000000000011LL,  0x80000001839CFD30LL,  0x7473726966LL,  0xE500000000000000LL,  (uint64_t)closure #3 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration,  0LL);
  uint64_t v81 = *v1;
  uint64_t v82 = TypeMetadata.descriptor.getter();
  uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)( v82,  0xD000000000000010LL,  0x80000001839CFD50LL,  1953718636LL,  0xE400000000000000LL,  (uint64_t)closure #4 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration,  0LL);
  uint64_t v83 = *v8;
  uint64_t v84 = TypeMetadata.descriptor.getter();
  uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)( v84,  0x65532E7466697753LL,  0xEF746E756F632E74LL,  0x746E756F63LL,  0xE500000000000000LL,  (uint64_t)closure #5 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration,  0LL);
  uint64_t v85 = *v8;
  uint64_t v86 = TypeMetadata.descriptor.getter();
  uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)( v86,  0xD000000000000011LL,  0x80000001839CFD70LL,  0x7974706D457369LL,  0xE700000000000000LL,  (uint64_t)closure #6 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration,  0LL);
  uint64_t v87 = *v92;
  uint64_t v88 = TypeMetadata.descriptor.getter();
  uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)( v88,  0xD000000000000016LL,  0x80000001839CFD90LL,  0x746E756F63LL,  0xE500000000000000LL,  (uint64_t)closure #7 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration,  0LL);
  uint64_t v89 = *v92;
  if ((unint64_t)*v92 > 0x7FF || (unint64_t)(v89 - 512) < 3 || !v89)
  {
    uint64_t v90 = TypeMetadata.descriptor.getter();
    uint64_t result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)( v90,  0xD000000000000018LL,  0x80000001839CFDB0LL,  0x7974706D457369LL,  0xE700000000000000LL,  (uint64_t)closure #8 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration,  0LL);
    *(_OWORD *)a1 = v93;
    *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    return result;
  }

void *key path getter for Collection.first : Substring@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  if ((result[1] ^ *result) >= 0x4000LL)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = Substring.subscript.getter();
    uint64_t v4 = v5;
    uint64_t result = (void *)swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
  }

  *a2 = v3;
  a2[1] = v4;
  return result;
}

uint64_t key path getter for Collection.first : String@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t v7 = a2(v5, v6);
  uint64_t v9 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v7;
  a3[1] = v9;
  return result;
}

void *key path getter for BidirectionalCollection.last : Substring@<X0>( void *result@<X0>, uint64_t *a2@<X8>)
{
  if ((result[1] ^ *result) >= 0x4000LL)
  {
    swift_bridgeObjectRetain();
    Substring.index(before:)();
    uint64_t v3 = Substring.subscript.getter();
    uint64_t v4 = v5;
    uint64_t result = (void *)swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
  }

  *a2 = v3;
  a2[1] = v4;
  return result;
}

uint64_t closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( uint64_t result, uint64_t a2)
{
  return closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( result,  a2);
}

{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 1)
  {
    __break(1u);
  }

  else
  {
    MEMORY[0x1895F8858](result);
    return swift_getKeyPath();
  }

  return result;
}

uint64_t closure #2 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( uint64_t result, uint64_t a2)
{
  return closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( result,  a2);
}

uint64_t key path getter for Collection.isEmpty : <A>[A]@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Array();
  MEMORY[0x186E20D4C](MEMORY[0x189618488], v2);
  uint64_t result = Collection.isEmpty.getter();
  *a1 = result & 1;
  return result;
}

uint64_t closure #3 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( uint64_t result, uint64_t a2)
{
  return closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( result,  a2);
}

uint64_t closure #4 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( uint64_t result, uint64_t a2)
{
  return closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( result,  a2);
}

uint64_t key path getter for Collection.first : <A>[A]( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = type metadata accessor for Array();
  uint64_t v8 = MEMORY[0x186E20D4C](a4, v7);
  return a5(v7, v8);
}

uint64_t *closure #5 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( uint64_t *result, uint64_t a2)
{
  return closure #5 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( result,  a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  if (a2)
  {
    if (a2 < 1)
    {
      __break(1u);
      return result;
    }

    uint64_t v2 = *result;
    uint64_t v3 = swift_conformsToProtocol2();
    if (v3) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = 0LL;
    }
    if (v4)
    {
      MEMORY[0x1895F8858](v3);
      return (uint64_t *)swift_getKeyPath();
    }
  }

  return 0LL;
}

uint64_t *closure #6 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( uint64_t *result, uint64_t a2)
{
  return closure #5 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( result,  a2);
}

uint64_t *closure #7 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( uint64_t *result, uint64_t a2)
{
  return closure #7 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( result,  a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  if (a2 < 0)
  {
    __break(1u);
  }

  else if (a2 == 2)
  {
    uint64_t v2 = *result;
    uint64_t v3 = swift_conformsToProtocol2();
    if (v3) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = 0LL;
    }
    if (v4)
    {
      MEMORY[0x1895F8858](v3);
      return (uint64_t *)swift_getKeyPath();
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    return 0LL;
  }

  return result;
}

uint64_t *closure #8 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( uint64_t *result, uint64_t a2)
{
  return closure #7 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration( result,  a2);
}

uint64_t static PredicateCodableConfiguration.standardConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for standardConfiguration != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C5CFE70;
  char v3 = byte_18C5CFE78;
  *(void *)a1 = static PredicateCodableConfiguration.standardConfiguration;
  *(void *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }

        else if (v10 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::Int v9 = *(void *)(a2 + 48);
        unint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        uint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            unint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            unint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1LL << result) - 1;
  }

  *uint64_t v18 = v20 & v19;
  BOOL v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::Int v9 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        uint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }

        else if (v10 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_BYTE *)(v11 + v3);
          unint64_t v13 = (_BYTE *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        unint64_t v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }

        else if (v11 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          unint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *unint64_t v13 = *v14;
          }
          unint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            Swift::Int v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }

        else if (v10 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (16 * v3 != 16 * v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v11 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }

        else if (v12 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          unint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          unint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = (__int128 *)(v16 + 48 * v3);
          uint64_t v18 = (__int128 *)(v16 + 48 * v6);
          if (48 * v3 < (uint64_t)(48 * v6) || v17 >= v18 + 3 || (v19 = v3 == v6, int64_t v3 = v6, !v19))
          {
            Swift::Int v9 = *v18;
            unint64_t v10 = v18[2];
            v17[1] = v18[1];
            _OWORD v17[2] = v10;
            *unint64_t v17 = v9;
            int64_t v3 = v6;
          }
        }

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }

        else if (v10 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t result = v14 + 72 * v3;
          unint64_t v15 = (const void *)(v14 + 72 * v6);
          if (v3 != v6 || (int64_t v3 = v6, result >= (unint64_t)v15 + 72))
          {
            uint64_t result = (unint64_t)memmove((void *)result, v15, 0x48uLL);
            int64_t v3 = v6;
          }
        }

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::Int v9 = *(void *)(a2 + 48);
        unint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        uint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            unint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
            unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1LL << result) - 1;
  }

  *uint64_t v18 = v20 & v19;
  BOOL v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }

        else if (v10 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t result = v14 + 80 * v3;
          unint64_t v15 = (const void *)(v14 + 80 * v6);
          if (v3 != v6 || (int64_t v3 = v6, result >= (unint64_t)v15 + 80))
          {
            uint64_t result = (unint64_t)memmove((void *)result, v15, 0x50uLL);
            int64_t v3 = v6;
          }
        }

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::Int v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        uint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }

        else if (v10 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (void *)(v11 + 8 * v3);
          unint64_t v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        Hasher.init(_seed:)();
        uint64_t v11 = v10;
        String.hash(into:)();
        uint64_t v12 = Hasher._finalize()();

        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *unint64_t v15 = *v16;
          }
          unint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_OWORD *)(v17 + 32 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 2))
          {
            Swift::Int v9 = v19[1];
            *uint64_t v18 = *v19;
            v18[1] = v9;
            int64_t v3 = v6;
          }
        }

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::UInt8 v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Swift::Int v9 = 24 * v6;
        unint64_t v10 = *(_BYTE *)(*(void *)(a2 + 48) + 24 * v6 + 16);
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Hasher._combine(_:)(v10);
        uint64_t v11 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v12 = v11 & v7;
        if (v12 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        unint64_t v13 = *(void *)(a2 + 48);
        uint64_t v14 = v13 + 24 * v3;
        unint64_t v15 = (__int128 *)(v13 + v9);
        if (24 * v3 < v9 || v14 >= (unint64_t)v15 + 24 || v3 != v6)
        {
          uint64_t v16 = *v15;
          *(void *)(v14 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *((void *)v15 + 2);
          *(_OWORD *)uint64_t v14 = v16;
        }

        unint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>)
                                    - 8)
                        + 72LL);
        uint64_t v19 = v18 * v3;
        uint64_t result = v17 + v18 * v3;
        uint64_t v20 = v18 * v6;
        BOOL v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }

        else
        {
          int64_t v3 = v6;
          if (v19 == v20) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_22;
        }
      }

      if (v12 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  uint64_t v35 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  unint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a2 + 64;
  uint64_t v8 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1LL << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v11 = _HashTable.previousHole(before:)();
    if ((*(void *)(v7 + 8 * (v9 >> 6)) & (1LL << v9)) != 0)
    {
      unint64_t v34 = (v11 + 1) & v10;
      uint64_t v12 = *(void *)(v35 + 72);
      uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      uint64_t v13 = v10;
      do
      {
        uint64_t v14 = v7;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v9;
        uint64_t v17 = v13;
        v33(v6, *(void *)(a2 + 48) + v12 * v9, v4);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v4);
        uint64_t v13 = v17;
        unint64_t v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            uint64_t v7 = v14;
            if (v15 * a1 < v16
              || (uint64_t v12 = v15, *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v16 + v15)))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v12 = v15;
              uint64_t v13 = v17;
            }

            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }

            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (_OWORD *)(v22 + 32 * a1);
            unint64_t v24 = (_OWORD *)(v22 + 32 * v9);
            if (a1 != v9 || (a1 = v9, v23 >= v24 + 2))
            {
              __int128 v25 = v24[1];
              *uint64_t v23 = *v24;
              v23[1] = v25;
              a1 = v9;
            }

            goto LABEL_5;
          }
        }

        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }

        uint64_t v7 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v13;
      }

      while (((*(void *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0);
    }

    unint64_t v26 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1LL << a1) - 1;
  }

  else
  {
    unint64_t v26 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1LL << a1) - 1;
  }

  *unint64_t v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1LL);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v4 = type metadata accessor for CombineIdentifier();
  BOOL v30 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  unint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = -1LL << *(_BYTE *)(a2 + 32);
  uint64_t v8 = (a1 + 1) & ~v7;
  if (((1LL << v8) & *(void *)(a2 + 64 + 8 * (v8 >> 6))) != 0)
  {
    unint64_t v9 = ~v7;
    uint64_t v31 = a2 + 64;
    uint64_t v10 = _HashTable.previousHole(before:)();
    uint64_t v11 = v31;
    if ((*(void *)(v31 + 8 * (v8 >> 6)) & (1LL << v8)) != 0)
    {
      uint64_t v12 = (v10 + 1) & v9;
      uint64_t v13 = *(void *)(v30 + 72);
      uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
      do
      {
        uint64_t v14 = v13 * v8;
        v29(v6, *(void *)(a2 + 48) + v13 * v8, v4);
        lazy protocol witness table accessor for type CombineIdentifier and conformance CombineIdentifier();
        uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v4);
        int64_t v16 = v15 & v9;
        if (a1 >= (uint64_t)v12)
        {
          if (v16 >= v12 && a1 >= (uint64_t)v16)
          {
LABEL_17:
            if (v13 * a1 < v14
              || *(void *)(a2 + 48) + v13 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v14 + v13))
            {
              swift_arrayInitWithTakeFrontToBack();
            }

            else if (v13 * a1 != v14)
            {
              swift_arrayInitWithTakeBackToFront();
            }

            unint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 16 * a1);
            BOOL v21 = (_OWORD *)(v19 + 16 * v8);
            uint64_t v11 = v31;
            if (a1 != v8 || (a1 = v8, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              a1 = v8;
            }

            goto LABEL_5;
          }
        }

        else if (v16 >= v12 || a1 >= (uint64_t)v16)
        {
          goto LABEL_17;
        }

        uint64_t v11 = v31;
LABEL_5:
        uint64_t v8 = (v8 + 1) & v9;
      }

      while (((*(void *)(v11 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0);
    }

    uint64_t v22 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v23 = *v22;
    unint64_t v24 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v24 = *v22;
    uint64_t v23 = (-1LL << a1) - 1;
  }

  *uint64_t v22 = v24 & v23;
  __int128 v25 = *(void *)(a2 + 16);
  unint64_t v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t *a2)
{
  uint64_t v3 = isStackAllocationSafe;
  uint64_t v118 = *MEMORY[0x1895F89C0];
  char v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  int64_t v113 = (unint64_t)((1LL << v4) + 63) >> 6;
  size_t v5 = 8 * v113;
  uint64_t v117 = isStackAllocationSafe;
  if ((v4 & 0x3Fu) > 0xD)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      Swift::String v114 = (unint64_t *)swift_slowAlloc();
      bzero(v114, v5);
      int64_t v28 = 0LL;
      uint64_t v29 = v3 + 64;
      uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
      if (v30 < 64) {
        uint64_t v31 = ~(-1LL << v30);
      }
      else {
        uint64_t v31 = -1LL;
      }
      unint64_t v32 = v31 & *(void *)(v3 + 64);
      uint64_t v115 = 0LL;
      int64_t v116 = (unint64_t)(v30 + 63) >> 6;
      while (1)
      {
        while (1)
        {
          if (v32)
          {
            unint64_t v33 = __clz(__rbit64(v32));
            v32 &= v32 - 1;
            unint64_t v34 = v33 | (v28 << 6);
          }

          else
          {
            int64_t v35 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_154;
            }
            if (v35 >= v116) {
              goto LABEL_80;
            }
            unint64_t v36 = *(void *)(v29 + 8 * v35);
            ++v28;
            if (!v36)
            {
              int64_t v28 = v35 + 1;
              if (v35 + 1 >= v116) {
                goto LABEL_80;
              }
              unint64_t v36 = *(void *)(v29 + 8 * v28);
              if (!v36)
              {
                int64_t v28 = v35 + 2;
                if (v35 + 2 >= v116) {
                  goto LABEL_80;
                }
                unint64_t v36 = *(void *)(v29 + 8 * v28);
                if (!v36)
                {
                  int64_t v28 = v35 + 3;
                  if (v35 + 3 >= v116) {
                    goto LABEL_80;
                  }
                  unint64_t v36 = *(void *)(v29 + 8 * v28);
                  if (!v36)
                  {
                    int64_t v37 = v35 + 4;
                    if (v37 >= v116) {
                      goto LABEL_80;
                    }
                    unint64_t v36 = *(void *)(v29 + 8 * v37);
                    if (!v36)
                    {
                      while (1)
                      {
                        int64_t v28 = v37 + 1;
                        if (__OFADD__(v37, 1LL)) {
                          goto LABEL_158;
                        }
                        if (v28 >= v116) {
                          break;
                        }
                        unint64_t v36 = *(void *)(v29 + 8 * v28);
                        ++v37;
                        if (v36) {
                          goto LABEL_65;
                        }
                      }

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = isStackAllocationSafe;
  uint64_t v126 = *MEMORY[0x1895F89C0];
  char v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  int64_t v117 = (unint64_t)((1LL << v4) + 63) >> 6;
  size_t v5 = 8 * v117;
  uint64_t v122 = a2;
  uint64_t v123 = isStackAllocationSafe;
  if ((v4 & 0x3Fu) > 0xD)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v118 = (unint64_t *)swift_slowAlloc();
      bzero(v118, v5);
      int64_t v31 = 0LL;
      uint64_t v32 = *(void *)(v3 + 64);
      uint64_t v119 = 0LL;
      uint64_t v120 = v3 + 64;
      uint64_t v33 = 1LL << *(_BYTE *)(v3 + 32);
      if (v33 < 64) {
        uint64_t v34 = ~(-1LL << v33);
      }
      else {
        uint64_t v34 = -1LL;
      }
      unint64_t v35 = v34 & v32;
      int64_t v121 = (unint64_t)(v33 + 63) >> 6;
      uint64_t v36 = MEMORY[0x189611E48];
      while (1)
      {
        while (1)
        {
          if (v35)
          {
            unint64_t v37 = __clz(__rbit64(v35));
            v35 &= v35 - 1;
            unint64_t v38 = v37 | (v31 << 6);
          }

          else
          {
            int64_t v39 = v31 + 1;
            if (__OFADD__(v31, 1LL)) {
              goto LABEL_156;
            }
            if (v39 >= v121) {
              goto LABEL_82;
            }
            unint64_t v40 = *(void *)(v120 + 8 * v39);
            ++v31;
            if (!v40)
            {
              int64_t v31 = v39 + 1;
              if (v39 + 1 >= v121) {
                goto LABEL_82;
              }
              unint64_t v40 = *(void *)(v120 + 8 * v31);
              if (!v40)
              {
                int64_t v31 = v39 + 2;
                if (v39 + 2 >= v121) {
                  goto LABEL_82;
                }
                unint64_t v40 = *(void *)(v120 + 8 * v31);
                if (!v40)
                {
                  int64_t v31 = v39 + 3;
                  if (v39 + 3 >= v121) {
                    goto LABEL_82;
                  }
                  unint64_t v40 = *(void *)(v120 + 8 * v31);
                  if (!v40)
                  {
                    int64_t v41 = v39 + 4;
                    if (v41 >= v121) {
                      goto LABEL_82;
                    }
                    unint64_t v40 = *(void *)(v120 + 8 * v41);
                    if (!v40)
                    {
                      while (1)
                      {
                        int64_t v31 = v41 + 1;
                        if (__OFADD__(v41, 1LL)) {
                          goto LABEL_161;
                        }
                        if (v31 >= v121) {
                          break;
                        }
                        unint64_t v40 = *(void *)(v120 + 8 * v31);
                        ++v41;
                        if (v40) {
                          goto LABEL_66;
                        }
                      }

uint64_t outlined consume of PredicateCodableConfiguration.AllowListKeyPath( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0) {
    return swift_release();
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t outlined assign with take of PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t specialized PredicateCodableConfiguration._identifier(for:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)( (uint64_t (*)(void *))partial apply for closure #1 in PredicateCodableConfiguration._identifier(for:),  v3,  (uint64_t)v34);
  swift_bridgeObjectRelease();
  outlined init with take of (key: String, value: PredicateCodableConfiguration.AllowListKeyPath)?( (uint64_t)v34,  (uint64_t)v35);
  if (v35[1])
  {
    uint64_t v4 = v35[0];
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v35[2], v35[3], v35[4], v35[5], v35[6], v36);
    return v4;
  }

  unint64_t v5 = *(void *)dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
  if (v5 < 0x800 && v5 - 512 >= 3 && v5 != 0) {
    return 0LL;
  }
  uint64_t v28 = a1;
  uint64_t v31 = TypeMetadata.descriptor.getter();
  uint64_t v32 = v3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(v3 + 64);
  int64_t v33 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v11 = 0LL;
  uint64_t v30 = v3;
  while (v9)
  {
    unint64_t v18 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v19 = v18 | (v11 << 6);
LABEL_41:
    uint64_t v27 = *(void *)(v3 + 56) + 48 * v19;
    if (*(_BYTE *)(v27 + 40) == 1)
    {
      uint64_t v12 = *(void *)(*(void *)(v3 + 48) + 16 * v19);
      uint64_t v14 = *(void *)v27;
      unint64_t v13 = *(uint64_t (**)(uint64_t))(v27 + 8);
      uint64_t v15 = *(void *)(v27 + 16);
      uint64_t v16 = *(void *)(v27 + 24);
      uint64_t v17 = *(void *)(v27 + 32);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(*(void *)v27, (uint64_t)v13, v15, v16, v17, 1);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v14, (uint64_t)v13, v15, v16, v17, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v31 == v14)
      {
        uint64_t v29 = v12;
        uint64_t v23 = Type.genericArguments.getter();
        uint64_t v24 = v13(v23);
        if (v24)
        {
          uint64_t v25 = v24;
          type metadata accessor for AnyKeyPath();
          char v26 = MEMORY[0x186E1C1A4](v25, v28);
          swift_release();
          swift_release();
          if ((v26 & 1) != 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v14, (uint64_t)v13, v15, v16, v17, 1);
            return v29;
          }

          swift_bridgeObjectRelease();
          uint64_t v3 = v30;
        }

        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v3 = v30;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_release();
      }

      uint64_t result = outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v14, (uint64_t)v13, v15, v16, v17, 1);
    }
  }

  int64_t v20 = v11 + 1;
  if (__OFADD__(v11, 1LL))
  {
    __break(1u);
    goto LABEL_48;
  }

  if (v20 >= v33) {
    goto LABEL_43;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  ++v11;
  if (v21) {
    goto LABEL_40;
  }
  int64_t v11 = v20 + 1;
  if (v20 + 1 >= v33) {
    goto LABEL_43;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v11);
  if (v21) {
    goto LABEL_40;
  }
  int64_t v11 = v20 + 2;
  if (v20 + 2 >= v33) {
    goto LABEL_43;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v11);
  if (v21) {
    goto LABEL_40;
  }
  int64_t v11 = v20 + 3;
  if (v20 + 3 >= v33) {
    goto LABEL_43;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v11);
  if (v21) {
    goto LABEL_40;
  }
  int64_t v11 = v20 + 4;
  if (v20 + 4 >= v33) {
    goto LABEL_43;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v11);
  if (v21) {
    goto LABEL_40;
  }
  int64_t v11 = v20 + 5;
  if (v20 + 5 >= v33) {
    goto LABEL_43;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v11);
  if (v21)
  {
LABEL_40:
    unint64_t v9 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v11 << 6);
    goto LABEL_41;
  }

  int64_t v22 = v20 + 6;
  if (v22 >= v33)
  {
LABEL_43:
    swift_release();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  unint64_t v21 = *(void *)(v32 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_40;
  }

  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v33) {
      goto LABEL_43;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_40;
    }
  }

uint64_t specialized static PredicateCodableConfiguration.AllowListKeyPath.== infix(_:_:)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v12[0];
  if ((v13 & 1) == 0)
  {
    outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a2, (uint64_t)v10);
    if ((v11 & 1) == 0)
    {
      uint64_t v8 = v10[0];
      type metadata accessor for AnyKeyPath();
      outlined retain of PredicateCodableConfiguration.AllowListKeyPath( a1,  (void (*)(void, void, void, void, void, void))outlined copy of PredicateCodableConfiguration.AllowListKeyPath);
      outlined retain of PredicateCodableConfiguration.AllowListKeyPath( a2,  (void (*)(void, void, void, void, void, void))outlined copy of PredicateCodableConfiguration.AllowListKeyPath);
      char v7 = MEMORY[0x186E1C1A4](v4, v8);
      outlined retain of PredicateCodableConfiguration.AllowListKeyPath( a2,  (void (*)(void, void, void, void, void, void))outlined consume of PredicateCodableConfiguration.AllowListKeyPath);
      outlined retain of PredicateCodableConfiguration.AllowListKeyPath( a1,  (void (*)(void, void, void, void, void, void))outlined consume of PredicateCodableConfiguration.AllowListKeyPath);
      return v7 & 1;
    }

    goto LABEL_8;
  }

  uint64_t v5 = v12[3];
  uint64_t v6 = v12[4];
  outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a2, (uint64_t)v10);
  if (v11 != 1 || v4 != v10[0])
  {
LABEL_8:
    char v7 = 0;
    return v7 & 1;
  }

  if (v5 == v10[3] && v6 == v10[4]) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return v7 & 1;
}

uint64_t dispatch thunk of static PredicateCodableKeyPathProviding.predicateCodableKeyPaths.getter( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t destroy for PredicateCodableConfiguration()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for PredicateCodableConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PredicateCodableConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PredicateCodableConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateCodableConfiguration(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PredicateCodableConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PredicateCodableConfiguration()
{
  return &type metadata for PredicateCodableConfiguration;
}

ValueMetadata *type metadata accessor for PredicateCodableConfiguration.AllowListType()
{
  return &type metadata for PredicateCodableConfiguration.AllowListType;
}

uint64_t destroy for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1)
{
  return outlined consume of PredicateCodableConfiguration.AllowListKeyPath( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(_BYTE *)(a2 + 40);
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = v6;
  *(void *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(_BYTE *)(a2 + 40);
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  char v14 = *(_BYTE *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = v6;
  *(void *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(_BYTE *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(_BYTE *)(a1 + 40);
  __int128 v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v11;
  *(void *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = v4;
  outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateCodableConfiguration.AllowListKeyPath( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PredicateCodableConfiguration.AllowListKeyPath( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 2os_unfair_lock_unlock(*v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 40) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t destructiveInjectEnumTag for PredicateCodableConfiguration.AllowListKeyPath(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PredicateCodableConfiguration.AllowListKeyPath()
{
  return &type metadata for PredicateCodableConfiguration.AllowListKeyPath;
}

unint64_t lazy protocol witness table accessor for type CombineIdentifier and conformance CombineIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier;
  if (!lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier)
  {
    uint64_t v1 = type metadata accessor for CombineIdentifier();
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x1896021C0], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier);
  }

  return result;
}

uint64_t outlined retain of PredicateCodableConfiguration.AllowListKeyPath( uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t partial apply for closure #1 in PredicateCodableConfiguration._identifier(for:)(uint64_t a1)
{
  return closure #1 in PredicateCodableConfiguration._identifier(for:)(a1, v1) & 1;
}

uint64_t outlined init with take of (key: String, value: PredicateCodableConfiguration.AllowListKeyPath)?( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: PredicateCodableConfiguration.AllowListKeyPath)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_18329E3C0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for Collection.first : String( a1,  (uint64_t (*)(uint64_t, uint64_t))specialized Collection.first.getter,  a2);
}

uint64_t sub_18329E428@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for Collection.first : String( a1,  (uint64_t (*)(uint64_t, uint64_t))specialized BidirectionalCollection.last.getter,  a2);
}

uint64_t sub_18329E44C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_18329E454@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result = MEMORY[0x186E1B37C](*a1, *(void *)(a3 + a2 - 24), *(void *)(a3 + a2 - 16), *(void *)(a3 + a2 - 8));
  *a4 = result & 1;
  return result;
}

uint64_t sub_18329E48C()
{
  return 24LL;
}

__n128 sub_18329E498(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_18329E4AC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = MEMORY[0x186E1B370](*a1, *(void *)(a3 + a2 - 24), *(void *)(a3 + a2 - 16), *(void *)(a3 + a2 - 8));
  *a4 = result;
  return result;
}

uint64_t sub_18329E4E0()
{
  return 24LL;
}

__n128 sub_18329E4EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_18329E500(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_18329E508@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = Set.isEmpty.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18329E53C()
{
  return 16LL;
}

__n128 sub_18329E548(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18329E554@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Set.count.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18329E584()
{
  return 16LL;
}

__n128 sub_18329E590(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_18329E59C()
{
}

uint64_t sub_18329E5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Collection.first : <A>[A]( a1,  a2,  a3,  MEMORY[0x189618458],  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x189617AF8]);
}

uint64_t sub_18329E5E8()
{
  return 8LL;
}

void *sub_18329E5F4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_18329E600()
{
}

uint64_t sub_18329E628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Collection.first : <A>[A]( a1,  a2,  a3,  MEMORY[0x189618488],  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1896188D0]);
}

uint64_t sub_18329E64C()
{
  return 8LL;
}

uint64_t sub_18329E65C()
{
  return 8LL;
}

uint64_t sub_18329E668@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = MEMORY[0x186E1BB20](*a1, *(void *)(a3 + a2 - 8));
  *a4 = result;
  return result;
}

uint64_t sub_18329E698()
{
  return 8LL;
}

Swift::String __swiftcall BinaryInteger.formatted()()
{
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for IntegerFormatStyle(0LL, v0, v1, v2);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (uint64_t *)((char *)&v24 - v7);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v9 = static LocaleCache.cache + 16;
  char v10 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v9, &v25);
  os_unfair_lock_unlock(v10);
  swift_release_n();
  uint64_t v11 = v25;
  unint64_t v12 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  uint64_t v13 = (char *)v8 + *(int *)(v5 + 36);
  *(void *)uint64_t v13 = 0LL;
  v13[8] = 1;
  *((void *)v13 + 2) = 0LL;
  *((void *)v13 + 3) = 0LL;
  *((void *)v13 + os_unfair_lock_unlock(*v0 + 4) = 0LL;
  *((void *)v13 + 5) = 0x1FFFFFFFELL;
  *((void *)v13 + 7) = 0LL;
  *((void *)v13 + 8) = 0LL;
  *((void *)v13 + 6) = 0LL;
  *((_DWORD *)v13 + 18) = 131584;
  *((_WORD *)v13 + 38) = 512;
  char v14 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v15 = &v13[v14[9]];
  uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
  uint64_t v17 = &v13[v14[10]];
  *(void *)uint64_t v17 = 0LL;
  v17[8] = -1;
  v13[v14[11]] = 3;
  *uint64_t v8 = v11;
  v8[1] = v12;
  uint64_t v18 = IntegerFormatStyle.format(_:)(v4, v5);
  int64_t v20 = v19;
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v21 = v18;
  int64_t v22 = v20;
  result._unint64_t object = v22;
  result._uint64_t countAndFlagsBits = v21;
  return result;
}

uint64_t BinaryInteger.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(v5, a3, a5);
}

uint64_t BinaryInteger.formatted<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v19[2] = a5;
  v19[3] = a1;
  v19[1] = a6;
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v15 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v17 = (char *)v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v12, v6, a2, v15);
  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 48))(v17, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
}

uint64_t BinaryInteger.init<A>(_:strategy:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  void v25[2] = a7;
  v25[3] = a5;
  v25[0] = a8;
  v25[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v18 = MEMORY[0x1895F8858](v17);
  int64_t v20 = (char *)v25 - v19;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(a6 + 48);
  uint64_t v26 = a1;
  v21(a1, a4, a6, v18);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(a2, a4);
    uint64_t v22 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL))(v26, v22);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v20, AssociatedTypeWitness);
    dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(a2, a4);
    uint64_t v24 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8LL))(v26, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v20, AssociatedTypeWitness);
  }

uint64_t BinaryInteger.init<A>(_:strategy:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( a1,  AssociatedTypeWitness);
}

uint64_t BinaryInteger.init(_:format:lenient:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return BinaryInteger.init(_:format:lenient:)( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>,  a7,  0);
}

{
  return BinaryInteger.init(_:format:lenient:)( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Percent,  (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent,  a7,  1);
}

uint64_t BinaryInteger.init(_:format:lenient:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, uint64_t, uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10)
{
  uint64_t v41 = a1;
  int v38 = a4;
  unint64_t v37 = a2;
  v36[1] = a9;
  int v40 = a10;
  uint64_t v14 = a7(0LL, a5, a6);
  uint64_t v15 = *(void *)(v14 - 8);
  __n128 v16 = MEMORY[0x1895F8858](v14);
  __n128 v18 = (_OWORD *)((char *)v36 - v17);
  uint64_t v19 = MEMORY[0x186E20D4C](a8, v14, v16);
  void v36[2] = a6;
  int64_t v20 = (int *)type metadata accessor for IntegerParseStrategy(0LL, v14, v19, a6);
  uint64_t v39 = *((void *)v20 - 1);
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)v36 - v21;
  v36[0] = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v25 = (char *)v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v27 = MEMORY[0x1895F8858](v26);
  uint64_t v29 = (char *)v36 - v28;
  uint64_t v43 = v15;
  uint64_t v30 = *(void (**)(_OWORD *, uint64_t, uint64_t, __n128))(v15 + 16);
  uint64_t v44 = a3;
  uint64_t v31 = a3;
  uint64_t v32 = v37;
  v30(v18, v31, v14, v27);
  ((void (*)(char *, _OWORD *, uint64_t))v30)(v22, v18, v14);
  v22[v20[11]] = v38;
  *(_OWORD *)&v22[v20[13]] = *v18;
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v18 + *(int *)(v14 + 36),  (uint64_t)&v22[v20[12]],  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = v42;
  IntegerParseStrategy.parse(_:)(v41, v32, (uint64_t)v20, (uint64_t)v29);
  if (v33)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v14);
    return (*(uint64_t (**)(char *, int *))(v39 + 8))(v22, v20);
  }

  else
  {
    (*(void (**)(char *, int *))(v39 + 8))(v22, v20);
    swift_bridgeObjectRelease();
    uint64_t v35 = v36[0];
    (*(void (**)(char *, char *, uint64_t))(v36[0] + 16LL))(v25, v29, a5);
    dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v29, a5);
  }

uint64_t BinaryInteger.init(_:format:lenient:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, __int128 *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v50 = a1;
  LODWORD(v48) = a4;
  char v52 = a3;
  char v47 = a2;
  uint64_t v43 = a7;
  uint64_t v49 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v49);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for IntegerFormatStyle.Currency(0LL, a5, a6, v11);
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = MEMORY[0x1895F8858](v12);
  __n128 v16 = (__int128 *)((char *)&v40 - v15);
  uint64_t v17 = MEMORY[0x186E20D4C](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, v12, v14);
  uint64_t v44 = a6;
  __n128 v18 = (int *)type metadata accessor for IntegerParseStrategy(0LL, v12, v17, a6);
  uint64_t v46 = *((void *)v18 - 1);
  MEMORY[0x1895F8858](v18);
  int64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v45 = a5;
  uint64_t v42 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v24);
  uint64_t v41 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v27 = MEMORY[0x1895F8858](v26);
  uint64_t v29 = (char *)&v40 - v28;
  uint64_t v30 = *(void (**)(__int128 *, uint64_t, uint64_t, __n128))(v13 + 16);
  v30(v16, (uint64_t)v52, v12, v27);
  ((void (*)(char *, __int128 *, uint64_t))v30)(v20, v16, v12);
  uint64_t v31 = v47;
  v20[v18[11]] = v48;
  uint64_t v32 = v18[13];
  __int128 v48 = *v16;
  *(_OWORD *)&v20[v32] = v48;
  outlined init with copy of CurrencyFormatStyleConfiguration.Collection( (uint64_t)v16 + *(int *)(v12 + 40),  (uint64_t)v10);
  uint64_t v33 = *(void (**)(__int128 *, uint64_t))(v13 + 8);
  swift_unknownObjectRetain();
  v33(v16, v12);
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = (uint64_t)v10;
  uint64_t v35 = v46;
  outlined init with take of ICUNumberFormatter.Signature( v34,  (uint64_t)&v20[v18[12]],  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  (*(void (**)(char *, char *, int *))(v35 + 32))(v23, v20, v18);
  uint64_t v36 = v51;
  IntegerParseStrategy.parse(_:)(v50, v31, (uint64_t)v18, (uint64_t)v29);
  if (v36)
  {
    swift_bridgeObjectRelease();
    v33(v52, v12);
    return (*(uint64_t (**)(char *, int *))(v35 + 8))(v23, v18);
  }

  else
  {
    (*(void (**)(char *, int *))(v35 + 8))(v23, v18);
    swift_bridgeObjectRelease();
    uint64_t v38 = v42;
    uint64_t v39 = v45;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v41, v29, v45);
    dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
    v33(v52, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v29, v39);
  }

uint64_t outlined init with copy of CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t PredicateExpressions.IntDivision.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

void PredicateExpressions.IntDivision.init(lhs:rhs:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

void type metadata accessor for PredicateExpressions.IntDivision()
{
}

uint64_t PredicateExpressions.IntDivision.evaluate(_:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntDivision.evaluate(_:)(a1, a2, MEMORY[0x189618E30], a3);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.IntDivision<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntDivision.evaluate(_:)(a1, a2, a3);
}

void PredicateExpressions.IntRemainder.init(lhs:rhs:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

void type metadata accessor for PredicateExpressions.IntRemainder()
{
}

uint64_t PredicateExpressions.IntRemainder.evaluate(_:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntDivision.evaluate(_:)(a1, a2, MEMORY[0x189618E40], a3);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.IntRemainder<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntRemainder.evaluate(_:)(a1, a2, a3);
}

void PredicateExpressions.FloatDivision.init(lhs:rhs:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

void type metadata accessor for PredicateExpressions.FloatDivision()
{
}

uint64_t PredicateExpressions.FloatDivision.evaluate(_:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntDivision.evaluate(_:)(a1, a2, MEMORY[0x189617960], a3);
}

uint64_t PredicateExpressions.IntDivision.evaluate(_:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, void (*a3)(char *, char *, uint64_t, void)@<X2>, uint64_t a4@<X8>)
{
  v22[1] = a4;
  uint64_t v23 = a3;
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v24 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v13 = MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)v22 - v14;
  uint64_t v16 = *a1;
  uint64_t v25 = v16;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v7 + 16))(&v25, v8, v7, v13);
  if (!v4)
  {
    uint64_t v18 = v10;
    uint64_t v19 = v23;
    uint64_t v25 = v16;
    int64_t v20 = v24;
    (*(void (**)(uint64_t *, void))(a2[5] + 16LL))(&v25, a2[3]);
    v19(v15, v20, AssociatedTypeWitness, a2[6]);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v18 + 8);
    v21(v20, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, uint64_t))v21)(v15, AssociatedTypeWitness);
  }

  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.FloatDivision<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.FloatDivision.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_Division<A, B>(lhs:rhs:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

{
  static PredicateExpressions.build_subscript<A, B>(_:_:)( a1,  a2,  a3,  a4,  a5,  a6,  (void (*)(void, void *))type metadata accessor for PredicateExpressions.FloatDivision,  a7);
}

void static PredicateExpressions.build_Remainder<A, B>(lhs:rhs:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
}

uint64_t PredicateExpressions.FloatDivision.description.getter(int a1)
{
  return PredicateExpressions.FloatDivision.description.getter( a1,  31LL,  0xD000000000000013LL,  (void *)0x80000001839CFDD0LL);
}

uint64_t PredicateExpressions.IntDivision.description.getter(int a1)
{
  return PredicateExpressions.FloatDivision.description.getter( a1,  29LL,  0xD000000000000011LL,  (void *)0x80000001839CFDF0LL);
}

uint64_t PredicateExpressions.IntRemainder.description.getter(int a1)
{
  return PredicateExpressions.FloatDivision.description.getter( a1,  30LL,  0xD000000000000012LL,  (void *)0x80000001839CFE10LL);
}

uint64_t PredicateExpressions.FloatDivision.description.getter(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  v6._uint64_t countAndFlagsBits = a3;
  v6._unint64_t object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 0x203A736872202CLL;
  v7._unint64_t object = (void *)0xE700000000000000LL;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._uint64_t countAndFlagsBits = 41LL;
  v8._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  return 0LL;
}

uint64_t PredicateExpressions.FloatDivision<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.FloatDivision<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.FloatDivision<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.FloatDivision<>.init(from:),  a5,  a6);
}

uint64_t PredicateExpressions.IntRemainder<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.IntRemainder<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.IntRemainder<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.IntRemainder<>.init(from:),  a5,  a6);
}

uint64_t PredicateExpressions.IntDivision<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.IntDivision<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.FloatDivision<A, B>( void *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.FloatDivision<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.FloatDivision<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.FloatDivision<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.IntRemainder<A, B>( void *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.IntRemainder<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.IntRemainder<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.IntRemainder<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.IntDivision<A, B>( void *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.IntDivision<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.IntDivision<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.IntDivision<A, B>);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.IntDivision<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.IntDivision<>.init(from:),  a5,  a6);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.IntDivision<A, B>( void *a1)
{
  return PredicateExpressions.IntDivision<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.IntDivision( uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_18329F8C0 + 4 * byte_1837C81D8[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.IntDivision( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.FloatDivision<A, B>( void *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.IntDivision<A, B>(a1);
}

uint64_t AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)@<X0>( uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  else {
    *a2 = byte_1837C85F0[(int)result];
  }
  return result;
}

void specialized String.withFileSystemRepresentation<A>(_:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  v21[1] = *MEMORY[0x1895F89C0];
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v12 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }

  if (v12 < -1) {
    goto LABEL_21;
  }
  uint64_t v13 = v12 + 1;
  if (v12 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    unsigned int v15 = (char *)v21 - v14;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v15, v13, 1, a1, a2);
    char v17 = v16;
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))4,  a3,  a4,  0LL,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))v21,  0LL,  0LL);
      swift_willThrow();
    }

    else
    {
      specialized static _FileOperations._removeFile(_:_:with:)(v15, a3, a4, a5);
      if (!v5) {
        goto LABEL_18;
      }
    }

    swift_willThrow();
  }

  else
  {
    uint64_t v18 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v18, v13, 1, a1, a2);
    char v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))4,  a3,  a4,  0LL,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))v21,  0LL,  0LL);
      swift_willThrow();
    }

    else
    {
      specialized static _FileOperations._removeFile(_:_:with:)(v18, a3, a4, a5);
    }

    MEMORY[0x186E20E60](v18, -1LL, -1LL);
  }

uint64_t _sSS10FoundationE28withFileSystemRepresentationyxxSPys4Int8VGSgKXEKlFyt_Tg5031_s10Foundation3URLV34withUnsafecd22RepresentationyxxSPys4F25VGSgKXEKlFxAHKXEfU_yt_Tg5AFxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n( uint64_t a1, unint64_t a2, uint64_t (*a3)(char *))
{
  v20[1] = *MEMORY[0x1895F89C0];
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v8 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }

  if (v8 < -1) {
    goto LABEL_21;
  }
  uint64_t v9 = v8 + 1;
  if (v8 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    unsigned int v11 = (char *)v20 - v10;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v11, v9, 1, a1, a2);
    char v13 = v12;
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0) {
      uint64_t v14 = 0LL;
    }
    else {
      uint64_t v14 = v11;
    }
    uint64_t result = a3(v14);
    if (v3) {
      return swift_willThrow();
    }
  }

  else
  {
    uint64_t v16 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v16, v9, 1, a1, a2);
    char v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0) {
      uint64_t v19 = 0LL;
    }
    else {
      uint64_t v19 = v16;
    }
    a3((char *)v19);
    return MEMORY[0x186E20E60](v16, -1LL, -1LL);
  }

  return result;
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)( uint64_t a1, unint64_t a2, uint64_t *a3, void *a4, unint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9, void *a10, uint64_t a11, void *a12, void *a13, int *a14)
{
  unsigned int v15 = v14;
  unint64_t v22 = a2;
  uint64_t v23 = a1;
  uint64_t v142 = *MEMORY[0x1895F89C0];
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v25 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_80;
  }

  if (v25 < -1)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    Swift::Int v30 = String.UTF8View._foreignCount()();
    goto LABEL_14;
  }

  uint64_t v135 = a8;
  uint64_t v136 = v14;
  uint64_t v141 = a4;
  unsigned int v138 = a7 & 1;
  a4 = a13;
  unsigned int v15 = a14;
  unint64_t v139 = a5;
  unint64_t v140 = a12;
  a8 = a10;
  uint64_t v26 = v25 + 1;
  uint64_t v133 = a11;
  int64_t v134 = a9;
  if (v25 >= 1024)
  {
    Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v51 = (char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      unint64_t v137 = v51;
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v51, v26, 1, v23, v22);
      char v53 = v52;
      swift_bridgeObjectRelease();
      if ((v53 & 1) != 0)
      {
        uint64_t v74 = a6;
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v75 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v76 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v77 = objc_msgSend(v75, sel_initWithDomain_code_userInfo_, v76, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v78 = objc_msgSend(v77, sel_domain);
        id v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
        uint64_t v81 = v80;

        if (v79 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v81 == v82)
        {
          swift_bridgeObjectRelease_n();
          a6 = v74;
          unint64_t v64 = v137;
        }

        else
        {
          char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a6 = v74;
          unint64_t v64 = v137;
          if ((v92 & 1) == 0)
          {
LABEL_89:
            __break(1u);
            goto LABEL_90;
          }
        }

        swift_willThrow();
        uint64_t v40 = v139;
        uint64_t v39 = v141;
        char v41 = v138;
LABEL_76:
        MEMORY[0x186E20E60](v64, -1LL, -1LL);
        goto LABEL_77;
      }

      a7 = *a3;
      unint64_t v22 = a3[1];
      if ((v22 & 0x1000000000000000LL) == 0)
      {
        if ((v22 & 0x2000000000000000LL) != 0) {
          uint64_t v54 = HIBYTE(v22) & 0xF;
        }
        else {
          uint64_t v54 = a7 & 0xFFFFFFFFFFFFLL;
        }
LABEL_29:
        uint64_t v55 = 3 * v54;
        if ((unsigned __int128)(v54 * (__int128)3LL) >> 64 != (3 * v54) >> 63)
        {
          __break(1u);
LABEL_87:
          __break(1u);
          goto LABEL_88;
        }

        if (v55 < -1)
        {
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }

        uint64_t v56 = v55 + 1;
        outlined copy of PathOrURL(v141, v139, a6, v138);
        swift_bridgeObjectRetain();
        uint64_t v57 = swift_bridgeObjectRetain();
        if (v55 >= 1024)
        {
          uint64_t v57 = swift_stdlib_isStackAllocationSafe();
          if ((v57 & 1) == 0)
          {
            uint64_t v110 = swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, v110, v56, 1, a7, v22);
            char v112 = v111;
            swift_bridgeObjectRelease();
            if ((v112 & 1) != 0)
            {
              uint64_t v115 = v110;
              uint64_t v118 = a6;
              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
              id v119 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
              uint64_t v120 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v121 = objc_msgSend(v119, sel_initWithDomain_code_userInfo_, v120, 514, _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              id v122 = objc_msgSend(v121, sel_domain);
              id v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
              uint64_t v125 = v124;

              if (v123 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
                && v125 == v126)
              {
                swift_bridgeObjectRelease_n();
                unint64_t v64 = v137;
              }

              else
              {
                char v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t v64 = v137;
                if ((v127 & 1) == 0) {
                  goto LABEL_92;
                }
              }

              swift_willThrow();
              a6 = v118;
              uint64_t v40 = v139;
              uint64_t v39 = v141;
              char v41 = v138;
            }

            else
            {
              uint64_t v130 = (uint64_t)a8;
              unint64_t v113 = (char *)v110;
              unint64_t v64 = v137;
              BOOL v114 = a3;
              uint64_t v39 = v141;
              uint64_t v40 = v139;
              uint64_t v115 = v110;
              char v41 = v138;
              closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( v113,  v137,  v114,  v141,  v139,  a6,  v138,  v135,  v134,  v130,  v133,  v140,  (uint64_t)a4,  v15);
            }

            MEMORY[0x186E20E60](v115, -1LL, -1LL);
            goto LABEL_75;
          }
        }

        uint64_t v131 = (uint64_t)&v131;
        MEMORY[0x1895F8858](v57);
        uint64_t v59 = (char *)&v131 - v58;
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v59, v56, 1, a7, v22);
        char v61 = v60;
        swift_bridgeObjectRelease();
        if ((v61 & 1) != 0)
        {
          uint64_t v93 = a6;
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v94 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v95 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v96 = objc_msgSend(v94, sel_initWithDomain_code_userInfo_, v95, 514, _NativeDictionary.bridged()(), v131);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v97 = objc_msgSend(v96, sel_domain);
          id v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
          uint64_t v100 = v99;

          if (v98 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
            && v100 == v101)
          {
            swift_bridgeObjectRelease_n();
            unint64_t v64 = v137;
          }

          else
          {
            char v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v64 = v137;
            if ((v116 & 1) == 0)
            {
LABEL_90:
              __break(1u);
              goto LABEL_91;
            }
          }

          swift_willThrow();
          a6 = v93;
          uint64_t v40 = v139;
          uint64_t v39 = v141;
          char v41 = v138;
        }

        else
        {
          uint64_t v129 = (uint64_t)a8;
          unint64_t v62 = v59;
          uint64_t v63 = v136;
          unint64_t v64 = v137;
          uint64_t v39 = v141;
          uint64_t v40 = v139;
          char v41 = v138;
          closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( v62,  v137,  a3,  v141,  v139,  a6,  v138,  v135,  v134,  v129,  v133,  v140,  (uint64_t)a4,  v15);
          if (!v63) {
            goto LABEL_75;
          }
        }

        swift_willThrow();
LABEL_75:
        outlined consume of PathOrURL(v39, v40, a6, v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_76;
      }

const char *specialized String.withFileSystemRepresentation<A>(_:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v169 = *MEMORY[0x1895F89C0];
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v11 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
  }

  if (v11 < -1) {
    goto LABEL_134;
  }
  uint64_t v12 = v11 + 1;
  if (v11 >= 1024)
  {
    Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v71 = (const char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v71, v12, 1, a1, a2);
      char v73 = v72;
      swift_bridgeObjectRelease();
      if ((v73 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))4,  a3,  a4,  0LL,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v165,  0LL,  0LL);
        swift_willThrow();
LABEL_129:
        MEMORY[0x186E20E60](v71, -1LL, -1LL);
        goto LABEL_130;
      }

      uint64_t v156 = v4;
      unint64_t v157 = a4;
      type metadata accessor for _FTSSequence.Iterator();
      swift_initStackObject();
      uint64_t v160 = _FTSSequence.Iterator.init(_:_:)(v71, 28);
      uint64_t v74 = _FTSSequence.Iterator.next()();
      if (v77 == 0xFF)
      {
        uint64_t v5 = (const char *)MEMORY[0x18961AFE8];
LABEL_94:
        swift_release();
        swift_bridgeObjectRelease();
        MEMORY[0x186E20E60](v71, -1LL, -1LL);
        swift_bridgeObjectRelease();
        return v5;
      }

      uint64_t v21 = v74;
      uint64_t v78 = v75;
      unint64_t v79 = v76;
      unsigned __int8 v80 = v77;
      unint64_t v158 = v71;
      uint64_t v81 = 0LL;
      uint64_t v82 = 0LL;
      uint64_t v5 = (const char *)MEMORY[0x18961AFE8];
LABEL_47:
      id v159 = v5;
      while (1)
      {
        if ((v80 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_111;
        }

        unsigned int v86 = *(unsigned __int16 *)(v21 + 88);
        if (v86 > 0xD) {
          goto LABEL_49;
        }
        int v87 = 1 << v86;
        if ((v87 & 0x390A) == 0) {
          break;
        }
        if (!*(void *)(v21 + 48))
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          unint64_t v165 = 0LL;
          unint64_t v166 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(22LL);
          swift_bridgeObjectRelease();
          unint64_t v165 = 0xD000000000000014LL;
          unint64_t v166 = 0x80000001839C9190LL;
          LODWORD(v163) = v21;
          v154._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v154);
          swift_bridgeObjectRelease();
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1832A2058LL);
        }

        uint64_t v88 = String.init(cString:)();
        uint64_t v90 = v89;
        outlined consume of _FTSSequence.Element?(v21, v78, v79, v80);
        if (!v81)
        {
          uint64_t v21 = _FTSSequence.Iterator.next()();
          uint64_t v78 = v118;
          unint64_t v79 = v119;
          unsigned __int8 v80 = v120;
          uint64_t v81 = v90;
          uint64_t v82 = v88;
          if (v120 == 0xFF)
          {
LABEL_93:
            uint64_t v71 = v158;
            goto LABEL_94;
          }

          goto LABEL_47;
        }

        uint64_t v163 = v88;
        uint64_t v164 = v90;
        uint64_t v161 = v82;
        uint64_t v162 = v81;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        Collection<>.trimmingPrefix<A>(_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v166 >> 14 != v165 >> 14)
        {
          swift_bridgeObjectRetain();
          uint64_t v155 = v167;
          uint64_t v91 = Substring.subscript.getter();
          uint64_t v93 = v92;
          swift_bridgeObjectRelease();
          if (v91 == 47 && v93 == 0xE100000000000000LL)
          {
            swift_bridgeObjectRelease();
            goto LABEL_62;
          }

          char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v94 & 1) != 0)
          {
LABEL_62:
            unint64_t v95 = Substring.index(_:offsetBy:limitedBy:)();
            if ((v96 & 1) != 0) {
              unint64_t v95 = v166;
            }
            if (v166 >> 14 < v95 >> 14) {
              goto LABEL_136;
            }
            uint64_t v97 = Substring.subscript.getter();
            uint64_t v99 = v98;
            uint64_t v101 = v100;
            uint64_t v103 = v102;
            swift_bridgeObjectRelease();
            uint64_t v104 = MEMORY[0x186E1B610](v97, v99, v101, v103);
            uint64_t v106 = v105;
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              id v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v159[2] + 1LL,  1,  v159);
            }
            unint64_t v108 = v159[2];
            unint64_t v107 = v159[3];
            if (v108 >= v107 >> 1) {
              id v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v107 > 1),  v108 + 1,  1,  v159);
            }
            uint64_t v109 = v159;
            v159[2] = v108 + 1;
            uint64_t v110 = &v109[2 * v108];
            v110[4] = v104;
            char v111 = v110 + 4;
          }

          else
          {
            uint64_t v112 = MEMORY[0x186E1B610](v165, v166, v155, v168);
            uint64_t v106 = v113;
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              id v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v159[2] + 1LL,  1,  v159);
            }
            unint64_t v115 = v159[2];
            unint64_t v114 = v159[3];
            if (v115 >= v114 >> 1) {
              id v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v114 > 1),  v115 + 1,  1,  v159);
            }
            char v116 = v159;
            v159[2] = v115 + 1;
            char v117 = &v116[2 * v115];
            v117[4] = v112;
            char v111 = v117 + 4;
          }

          v111[1] = v106;
          goto LABEL_50;
        }

        swift_bridgeObjectRelease();
LABEL_50:
        uint64_t v21 = _FTSSequence.Iterator.next()();
        uint64_t v78 = v83;
        unint64_t v79 = v84;
        unsigned __int8 v80 = v85;
        if (v85 == 0xFF)
        {
          uint64_t v5 = (const char *)v159;
          goto LABEL_93;
        }
      }

      if ((v87 & 0x490) == 0)
      {
LABEL_49:
        outlined consume of _FTSSequence.Element?(v21, v78, v79, v80);
        goto LABEL_50;
      }

      if (!*(void *)(v21 + 48)) {
        goto LABEL_140;
      }
      uint64_t v137 = String.init(cString:)();
      unint64_t v139 = v138;
      int v140 = *(_DWORD *)(v21 + 56);
      outlined consume of _FTSSequence.Element?(v21, v78, v79, v80);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LODWORD(v21) = v140;
      uint64_t v78 = v137;
      unint64_t v79 = v139;
LABEL_111:
      uint64_t v71 = v158;
      uint64_t v141 = 263LL;
      switch((int)v21)
      {
        case 1:
        case 13:
          uint64_t v141 = 257LL;
          goto LABEL_119;
        case 2:
          uint64_t v141 = 260LL;
          goto LABEL_119;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_116;
        case 27:
          goto LABEL_119;
        default:
          if ((_DWORD)v21 == 63)
          {
            uint64_t v141 = 258LL;
          }

          else
          {
            if ((_DWORD)v21 == 102)
            {
              id v142 = 0LL;
              uint64_t v143 = 256LL;
LABEL_128:
              swift_bridgeObjectRetain();
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v143,  v78,  v79,  v142,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v165,  0LL,  0LL);
              swift_willThrow();
              outlined consume of SubpathElement();
              swift_release();
              goto LABEL_129;
            }

size_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2)
{
  return specialized String.withFileSystemRepresentation<A>(_:)(a1, a2, 0x100uLL);
}

{
  return specialized String.withFileSystemRepresentation<A>(_:)(a1, a2, 0x401uLL);
}

size_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2, size_t a3)
{
  v18[1] = *MEMORY[0x1895F89C0];
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v7 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_19:
    __break(1u);
  }

  if (v7 < -1) {
    goto LABEL_19;
  }
  uint64_t v8 = v7 + 1;
  if (v7 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v10 = (char *)v18 - v9;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v10, v8, 1, a1, a2);
    char v12 = v11;
    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0) {
      return 0LL;
    }
    else {
      return strnlen(v10, a3);
    }
  }

  else
  {
    uint64_t v14 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v8, 1, a1, a2);
    char v16 = v15;
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0) {
      size_t v13 = 0LL;
    }
    else {
      size_t v13 = strnlen(v14, a3);
    }
    MEMORY[0x186E20E60](v14, -1LL, -1LL);
  }

  return v13;
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2)
{
  v34[1] = *MEMORY[0x1895F89C0];
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v5 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_25;
  }

  if (v5 < -1)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }

  uint64_t v6 = v5 + 1;
  if (v5 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v8 = (char *)v34 - v7;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v8, v6, 1, a1, a2);
    char v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return open(_:_:_:)();
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v12 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v13 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 258, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v15 = objc_msgSend(v14, sel_domain);
    id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;

    if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19)
    {
      swift_bridgeObjectRelease_n();
LABEL_17:
      swift_willThrow();
      return swift_willThrow();
    }

    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0) {
      goto LABEL_17;
    }
    goto LABEL_26;
  }

  uint64_t v20 = swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, v20, v6, 1, a1, a2);
  char v22 = v21;
  swift_bridgeObjectRelease();
  if ((v22 & 1) == 0)
  {
    uint64_t v23 = open(_:_:_:)();
    MEMORY[0x186E20E60](v20, -1LL, -1LL);
    return v23;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v25 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v26 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v27 = objc_msgSend(v25, sel_initWithDomain_code_userInfo_, v26, 258, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v28 = objc_msgSend(v27, sel_domain);
  id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  uint64_t v31 = v30;

  if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v31 == v32)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0) {
      goto LABEL_27;
    }
  }

  swift_willThrow();
  return MEMORY[0x186E20E60](v20, -1LL, -1LL);
}

{
  Swift::Int isStackAllocationSafe;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  void v16[2];
  v16[1] = *MEMORY[0x1895F89C0];
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v5 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_19:
    __break(1u);
  }

  if (v5 < -1) {
    goto LABEL_19;
  }
  uint64_t v6 = v5 + 1;
  if (v5 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v8 = (char *)v16 - v7;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v8, v6, 1, a1, a2);
    char v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0) {
      return 0xFFFFFFFFLL;
    }
    else {
      return foundation_sandbox_check_path();
    }
  }

  else
  {
    id v12 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v12, v6, 1, a1, a2);
    id v14 = v13;
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0) {
      char v11 = 0xFFFFFFFFLL;
    }
    else {
      char v11 = foundation_sandbox_check_path();
    }
    MEMORY[0x186E20E60](v12, -1LL, -1LL);
  }

  return v11;
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  void v22[2] = *MEMORY[0x1895F89C0];
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v10 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_23:
    __break(1u);
  }

  if (v10 < -1) {
    goto LABEL_23;
  }
  uint64_t v11 = v10 + 1;
  if (v10 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v13 = (char *)&v20 - v12;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v13, v11, 1, a1, a2);
    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
    {
      a3 = 0LL;
    }

    else
    {
      closure #1 in String._resolvingSymlinksInPath()((uint64_t)v13, a3, a4, (size_t *)&v21);
      if (v4) {
        swift_willThrow();
      }
      else {
        a3 = v21;
      }
    }
  }

  else
  {
    uint64_t v16 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v16, v11, 1, a1, a2);
    char v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      a3 = 0LL;
    }

    else
    {
      closure #1 in String._resolvingSymlinksInPath()(v16, a3, a4, v22);
      if (!v4) {
        a3 = v22[0];
      }
    }

    MEMORY[0x186E20E60](v16, -1LL, -1LL);
  }

  swift_bridgeObjectRelease();
  return a3;
}

uint64_t String.withFileSystemRepresentation<A>(_:)@<X0>( void (*a1)(char *)@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v36 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  char v15 = (char *)&v33 - v14;
  if ((v16 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a3 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a3) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a2 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v18 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }

  if (v18 < -1) {
    goto LABEL_21;
  }
  uint64_t v35 = a4;
  uint64_t v19 = a1;
  uint64_t v20 = v18 + 1;
  if (v18 <= 1023 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    uint64_t v34 = a5;
    unint64_t v37 = &v33;
    MEMORY[0x1895F8858](isStackAllocationSafe);
    char v22 = (char *)&v33 - v21;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v22, v20, 1, a2, a3);
    char v24 = v23;
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0) {
      id v25 = 0LL;
    }
    else {
      id v25 = v22;
    }
    v19(v25);
    if (v5)
    {
      return swift_willThrow();
    }

    else
    {
      uint64_t v27 = v35;
      id v28 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
      v28(v15, v12, v35);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v34, v15, v27);
    }
  }

  else
  {
    uint64_t v29 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v29, v20, 1, a2, a3);
    char v31 = v30;
    swift_bridgeObjectRelease();
    if ((v31 & 1) != 0) {
      uint64_t v32 = 0LL;
    }
    else {
      uint64_t v32 = v29;
    }
    v19((char *)v32);
    return MEMORY[0x186E20E60](v29, -1LL, -1LL);
  }

Swift::String __swiftcall String._trimmingWhitespace()()
{
  unint64_t v2 = v1;
  unint64_t v3 = v0;
  swift_bridgeObjectRetain();
  specialized BidirectionalCollection._trimmingCharacters(while:)(v3, v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = String.init(_:)();
  result._unint64_t object = v5;
  result._uint64_t countAndFlagsBits = v4;
  return result;
}

size_t specialized UnsafeMutableBufferPointer.initialize<A>(from:)( char **a1, char *__src, int64_t a3, char *__dst, int64_t a5)
{
  uint64_t v6 = __src;
  if (!a3 || !a5)
  {
    size_t v8 = 0LL;
    char v9 = &__src[a3];
    if (!__src) {
      char v9 = 0LL;
    }
    goto LABEL_12;
  }

  if (a3 >= a5) {
    size_t v8 = a5;
  }
  else {
    size_t v8 = a3;
  }
  if ((v8 & 0x8000000000000000LL) == 0 && (&__dst[v8] <= __src || &__src[v8] <= __dst))
  {
    memcpy(__dst, __src, v8);
    char v9 = &v6[a3];
    v6 += v8;
LABEL_12:
    *a1 = v6;
    a1[1] = v9;
    return v8;
  }

  size_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t String.init(_utf16:count:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000LL) == 0) {
    return specialized String.init(_utf16:)(result, a3);
  }
  __break(1u);
  return result;
}

_BYTE *closure #1 in String.init(_utf16:)@<X0>( _BYTE *result@<X0>, unsigned __int16 *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = result;
  unsigned int v7 = 0;
  unsigned __int8 v8 = 0;
  uint64_t v9 = 0LL;
  if (a2) {
    uint64_t v10 = &a2[a3];
  }
  else {
    uint64_t v10 = 0LL;
  }
  unsigned int v34 = 0;
  unsigned __int8 v35 = 0;
  while (1)
  {
    if (v8)
    {
      if ((v7 & 0xF800) != 0xD800)
      {
        uint64_t v32 = a4;
        lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
        size_t result = Locale.Language.components.modify();
        char v25 = *(_BYTE *)(v24 + 4);
        if (!v25) {
          goto LABEL_60;
        }
        *(_DWORD *)uint64_t v24 = *(unsigned __int16 *)(v24 + 2);
        *(_BYTE *)(v24 + os_unfair_lock_unlock(*v0 + 4) = v25 - 16;
        size_t result = (_BYTE *)((uint64_t (*)(char *, void))result)(v33, 0LL);
        unsigned int v7 = (unsigned __int16)v7;
        char v16 = 1;
        a4 = v32;
        goto LABEL_35;
      }

      if (!v4) {
        goto LABEL_27;
      }
      uint64_t v12 = v4;
      unsigned __int8 v13 = v8;
      if (v4 == v10) {
        goto LABEL_26;
      }
    }

    else
    {
      if (!v4 || v4 == v10)
      {
LABEL_55:
        if (v9 < 0)
        {
          __break(1u);
LABEL_60:
          __break(1u);
        }

        else
        {
          char v30 = a4;
          size_t result = (_BYTE *)static String._tryFromUTF8(_:)();
          *char v30 = result;
          v30[1] = v31;
        }

        return result;
      }

      unsigned int v11 = *v4;
      uint64_t v12 = v4 + 1;
      if ((v11 & 0xF800) != 0xD800)
      {
        char v16 = 1;
        ++v4;
        unsigned int v7 = v11;
        goto LABEL_35;
      }

      unsigned int v7 = v7 & 0xFFFF0000 | v11;
      unsigned int v34 = v7;
      unsigned __int8 v13 = 16;
      ++v4;
      if (v12 == v10)
      {
LABEL_26:
        unsigned __int8 v8 = v13;
        goto LABEL_27;
      }
    }

    uint64_t v4 = v12 + 1;
    unsigned int v7 = (*v12 << v13) | ((-65535 << v13) - 1) & v7;
    unsigned __int8 v8 = v13 + 16;
    if ((v13 + 16) <= 0x1Fu)
    {
      if (v4 == v10)
      {
        if (v13 == 0xF0) {
          goto LABEL_55;
        }
        goto LABEL_27;
      }

      uint64_t v4 = v12 + 2;
      unsigned int v7 = ((-65535 << v8) - 1) & v7 | (v12[1] << v8);
      unsigned __int8 v8 = v13 + 32;
      if (v13 < 0xF0u)
      {
        unsigned __int8 v15 = v13 + 32;
LABEL_22:
        unsigned __int8 v8 = v15;
        goto LABEL_27;
      }

      BOOL v14 = v4 == v10;
      uint64_t v4 = v10;
      if (!v14)
      {
        unsigned int v7 = ((-65535 << v13) - 1) & v7 | (v12[2] << v13);
        unsigned __int8 v15 = v13 + 48;
        if (v8 >= 0x10u)
        {
          uint64_t v4 = v12 + 3;
          goto LABEL_22;
        }

        unsigned __int8 v8 = v15;
        uint64_t v4 = v10;
      }
    }

uint64_t String._decomposed(_:into:nullTerminated:)( char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  char v11 = a1 & 1;
  swift_bridgeObjectRetain();
  if ((a6 & 0x1000000000000000LL) != 0)
  {
    a5 = static String._copying(_:)();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    a6 = v16;
    if ((v16 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v13 = HIBYTE(a6) & 0xF;
    v20[0] = a5;
    v20[1] = a6 & 0xFFFFFFFFFFFFFFLL;
    int v14 = a4 & 1;
    uint64_t v12 = (unsigned __int8 *)v20;
    goto LABEL_8;
  }

  if ((a6 & 0x2000000000000000LL) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v12 = (unsigned __int8 *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v13 = a5 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    uint64_t v13 = v19;
  }

  int v14 = a4 & 1;
LABEL_8:
  uint64_t v17 = specialized UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v11, a2, a3, v14, v12, v13);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)( char a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  int v81 = a4;
  uint64_t v98 = a2;
  uint64_t v132 = *MEMORY[0x1895F89C0];
  uint64_t v12 = type metadata accessor for Unicode._NFD();
  MEMORY[0x1895F8858](v12);
  uint64_t v83 = &v80[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v91 = *(void *)(v14 - 8);
  uint64_t v92 = v14;
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v90 = &v80[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v15);
  uint64_t v89 = &v80[-v17];
  uint64_t v18 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v87 = *(void *)(v18 - 8);
  uint64_t v88 = v18;
  MEMORY[0x1895F8858](v18);
  unsigned int v86 = &v80[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v99 = (uint64_t *)swift_allocObject();
  v99[2] = 0LL;
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = a3;
  uint64_t v22 = v20;
  *(void *)(v20 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFE8];
  uint64_t v97 = (char **)(v20 + 16);
  if (a5) {
    int v23 = (char *)&a5[a6];
  }
  else {
    int v23 = 0LL;
  }
  if (a3 < 1)
  {
    uint64_t v24 = 0LL;
    LOBYTE(v29) = 1;
    char v30 = v99;
LABEL_9:
    char v31 = v29;
    uint64_t v32 = v24;
    uint64_t v33 = v21;
    specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)( v22,  v98,  (uint64_t)v30,  v21);
    if (!v7)
    {
      if (a5 && a5 != (unsigned __int8 *)v23)
      {
LABEL_12:
        char v30 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError( &lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError,  &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        swift_allocError();
        *unsigned int v34 = 0;
LABEL_91:
        swift_willThrow();
        goto LABEL_92;
      }

      if ((v31 & 1) != 0)
      {
        if ((v81 & 1) != 0)
        {
          unsigned __int8 v77 = v30;
          uint64_t v78 = v30[2];
          if (v78 < v33)
          {
            *(_BYTE *)(v98 + v78) = 0;
            swift_release();
            char v30 = (uint64_t *)(v78 + 1);
            v77[2] = (uint64_t)v30;
            goto LABEL_93;
          }

          goto LABEL_12;
        }

        swift_release();
        char v30 = (uint64_t *)v30[2];
LABEL_93:
        swift_release();
        return (uint64_t)v30;
      }

      swift_release();
      swift_release();
      char v30 = (uint64_t *)(v32 + 1);
      if (!__OFADD__(v32, 1LL)) {
        return (uint64_t)v30;
      }
      __break(1u);
    }

uint64_t *specialized UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)( char a1, uint64_t a2, uint64_t a3, int a4, unsigned __int16 *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  int v75 = a4;
  uint64_t v90 = a2;
  uint64_t v125 = *MEMORY[0x1895F89C0];
  uint64_t v12 = type metadata accessor for Unicode._NFD();
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v83 = *(void *)(v15 - 8);
  uint64_t v84 = v15;
  MEMORY[0x1895F8858](v15);
  uint64_t v82 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  int v81 = (char *)&v74 - v18;
  uint64_t v19 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v79 = *(void *)(v19 - 8);
  uint64_t v80 = v19;
  MEMORY[0x1895F8858](v19);
  uint64_t v78 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = (uint64_t *)swift_allocObject();
  v91[2] = 0LL;
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = a3;
  uint64_t v92 = v21;
  *(void *)(v21 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFE8];
  uint64_t v89 = (char **)(v21 + 16);
  if (a5) {
    int v23 = &a5[a6];
  }
  else {
    int v23 = 0LL;
  }
  unsigned int v86 = v23;
  if (v22 < 1)
  {
    uint64_t v24 = 0LL;
    LOBYTE(v29) = 1;
    char v30 = v91;
LABEL_58:
    char v65 = v29;
    uint64_t v66 = v90;
    uint64_t v67 = v22;
    specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)( v92,  v90,  (uint64_t)v30,  v22);
    if (v7)
    {
LABEL_69:
      swift_release();
      swift_release();
      return v30;
    }

    uint64_t v68 = v67;
    if (a5 && a5 != v86)
    {
LABEL_61:
      char v30 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError( &lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError,  &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      swift_allocError();
      _BYTE *v69 = 0;
LABEL_68:
      swift_willThrow();
      goto LABEL_69;
    }

    if ((v65 & 1) == 0)
    {
      swift_release();
      swift_release();
      char v30 = (uint64_t *)(v24 + 1);
      if (!__OFADD__(v24, 1LL)) {
        return v30;
      }
      __break(1u);
      goto LABEL_69;
    }

    if ((v75 & 1) != 0)
    {
      char v70 = v30;
      uint64_t v71 = v30[2];
      if (v71 >= v68) {
        goto LABEL_61;
      }
      *(_BYTE *)(v66 + v71) = 0;
      swift_release();
      char v30 = (uint64_t *)(v71 + 1);
      v70[2] = (uint64_t)v30;
    }

    else
    {
      swift_release();
      char v30 = (uint64_t *)v30[2];
    }

    swift_release();
    return v30;
  }

  int v74 = v14;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  unsigned int v26 = 0;
  int v27 = 0;
  uint64_t v28 = 24LL;
  if ((a1 & 1) == 0) {
    uint64_t v28 = 10LL;
  }
  unsigned __int8 v77 = &v98[v28];
  char v76 = &v98[v28 + 1];
  int v29 = 1;
  char v30 = v91;
  uint64_t v87 = v22;
  while (1)
  {
    int v95 = v29;
    unsigned int v96 = v26;
    unsigned __int8 v97 = v27;
    if ((_BYTE)v27)
    {
      if ((v26 & 0xF800) != 0xD800)
      {
        LOWORD(v31) = v26;
        uint64_t v61 = v22;
        lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
        uint64_t result = (uint64_t *)Locale.Language.components.modify();
        char v63 = *(_BYTE *)(v62 + 4);
        if (!v63) {
          goto LABEL_79;
        }
        *(_DWORD *)uint64_t v62 = *(unsigned __int16 *)(v62 + 2);
        *(_BYTE *)(v62 + os_unfair_lock_unlock(*v0 + 4) = v63 - 16;
        ((void (*)(void *, void))result)(v98, 0LL);
        unsigned int v31 = (unsigned __int16)v31;
        LOBYTE(v29) = v95;
        unsigned int v26 = v96;
        uint64_t v34 = v97;
        char v30 = v91;
        uint64_t v22 = v61;
        goto LABEL_26;
      }

      if (!a5) {
        goto LABEL_24;
      }
      uint64_t v32 = a5;
      if (a5 == v23) {
        goto LABEL_24;
      }
    }

    else
    {
      if (!a5 || a5 == v23) {
        goto LABEL_58;
      }
      unsigned int v31 = *a5;
      uint64_t v32 = a5 + 1;
      if ((v31 & 0xF800) != 0xD800)
      {
        uint64_t v34 = 0LL;
        ++a5;
        goto LABEL_26;
      }

      unsigned int v26 = v26 & 0xFFFF0000 | v31;
      int v27 = 16;
      ++a5;
      if (v32 == v23) {
        goto LABEL_24;
      }
    }

    a5 = v32 + 1;
    unsigned int v26 = (*v32 << v27) | ((-65535 << v27) - 1) & v26;
    int v33 = v27 + 16;
    if (a5 == v23) {
      goto LABEL_20;
    }
    a5 = v32 + 2;
    unsigned int v26 = (v32[1] << v33) | ((-65535 << v33) - 1) & v26;
    int v33 = v27 + 32;
    if (v27 < 0xE0u)
    {
LABEL_23:
      int v27 = v33;
    }

    else if (a5 == v23 {
           || (a5 = v32 + 3,
    }
               unsigned int v26 = (v32[2] << v27) | ((-65535 << v27) - 1) & v26,
               int v33 = v27 + 48,
               v27 += 48,
               v27 < 0x20u))
    {
LABEL_20:
      int v27 = v33;
      if (!(_BYTE)v33) {
        goto LABEL_58;
      }
    }

uint64_t String.withMutableFileSystemRepresentation<A>(_:)@<X0>( void (*a1)(char *)@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v36 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v33 - v14;
  if ((v16 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a3 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a3) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a2 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v18 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }

  if (v18 < -1) {
    goto LABEL_21;
  }
  uint64_t v35 = a4;
  uint64_t v19 = a1;
  uint64_t v20 = v18 + 1;
  if (v18 <= 1023 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    uint64_t v34 = a5;
    int v37 = &v33;
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v22 = (char *)&v33 - v21;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v22, v20, 1, a2, a3);
    char v24 = v23;
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0) {
      uint64_t v25 = 0LL;
    }
    else {
      uint64_t v25 = v22;
    }
    v19(v25);
    if (v5)
    {
      return swift_willThrow();
    }

    else
    {
      uint64_t v27 = v35;
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
      v28(v15, v12, v35);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v34, v15, v27);
    }
  }

  else
  {
    uint64_t v29 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v29, v20, 1, a2, a3);
    char v31 = v30;
    swift_bridgeObjectRelease();
    if ((v31 & 1) != 0) {
      uint64_t v32 = 0LL;
    }
    else {
      uint64_t v32 = v29;
    }
    v19((char *)v32);
    return MEMORY[0x186E20E60](v29, -1LL, -1LL);
  }

Swift::Int specialized MutableCollection<>.sort(by:)(char **a1)
{
  unint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

BOOL NSString.__swiftFillFileSystemRepresentation(pointer:maxLength:)(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (void *)MEMORY[0x186E1F27C]();
  id v7 = v3;
  unsigned __int8 v8 = (unsigned __int16 *)objc_msgSend(v7, sel__fastCharacterContents);
  if (!v8)
  {
    if (objc_msgSend(v7, sel_fastestEncoding) != (id)1
      || (id v10 = v7, (v11 = (char *)objc_msgSend(v10, sel__fastCStringContents_, 0)) == 0))
    {
LABEL_15:
      id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)a1, a2, 1, (uint64_t)v17, v18);
      char v20 = v19;
      swift_bridgeObjectRelease();
      BOOL v9 = (v20 & 1) == 0;
      goto LABEL_16;
    }

    uint64_t v12 = v11;
    uint64_t v13 = (char *)objc_msgSend(v10, sel_length);
    if (!v13) {
      goto LABEL_23;
    }
    if (*v12)
    {
      if (v12[1])
      {
        uint64_t v14 = 2LL;
        while (v13 != (char *)v14)
        {
          if (!v12[v14++])
          {
            uint64_t v16 = v14 - 1;
            __break(1u);
            goto LABEL_15;
          }
        }

        goto LABEL_23;
      }

      uint64_t v16 = 1LL;
    }

    else
    {
      uint64_t v16 = 0LL;
    }

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v30 = a1;
  uint64_t v7 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  int v37 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v36 = (char *)&v28 - v10;
  uint64_t v11 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v35 = v11;
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v33 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = MEMORY[0x1895F8858](v12);
  uint64_t v32 = (char *)&v28 - v15;
  uint64_t v29 = a2;
  if (a3 != a2)
  {
    uint64_t v40 = *a4;
    uint64_t v16 = (_DWORD *)(v40 + 4 * a3 - 4);
    uint64_t v17 = v35;
LABEL_5:
    uint64_t v18 = v30;
    char v31 = v16;
    while (1)
    {
      char v19 = v32;
      Unicode.Scalar.properties.getter();
      char v20 = v36;
      Unicode.Scalar.Properties.canonicalCombiningClass.getter();
      uint64_t v21 = *(void (**)(char *, uint64_t))(v34 + 8);
      v21(v19, v17);
      LOBYTE(v41) = Unicode.CanonicalCombiningClass.rawValue.getter();
      unsigned int v41 = v41;
      uint64_t v22 = *(void (**)(char *, uint64_t))(v38 + 8);
      char v23 = v20;
      uint64_t v24 = v39;
      v22(v23, v39);
      uint64_t v25 = v33;
      Unicode.Scalar.properties.getter();
      int64_t v26 = v37;
      Unicode.Scalar.Properties.canonicalCombiningClass.getter();
      v21(v25, v17);
      LOBYTE(v25) = Unicode.CanonicalCombiningClass.rawValue.getter();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v22)(v26, v24);
      if (v41 >= v25)
      {
LABEL_4:
        ++a3;
        uint64_t v16 = v31 + 1;
        if (a3 == v29) {
          return result;
        }
        goto LABEL_5;
      }

      if (!v40) {
        break;
      }
      int v27 = *v16;
      uint64_t result = v16[1];
      *uint64_t v16 = result;
      v16[1] = v27;
      --v16;
      if (a3 == ++v18) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v8 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v61 = *(void *)(v8 - 8);
  uint64_t v62 = v8;
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v60 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  unint64_t v59 = (char *)&v48 - v11;
  uint64_t v12 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v57 = *(void *)(v12 - 8);
  uint64_t v58 = v12;
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  uint64_t v56 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v55 = (char *)&v48 - v15;
  uint64_t v16 = a2 - a1;
  uint64_t v17 = a2 - a1 + 3;
  if (a2 - a1 >= 0) {
    uint64_t v17 = a2 - a1;
  }
  uint64_t v18 = v17 >> 2;
  int v53 = a3;
  uint64_t v19 = a3 - a2;
  uint64_t v20 = v19 / 4;
  char v65 = a1;
  int v64 = a4;
  if (v17 >> 2 >= v19 / 4)
  {
    if (v19 >= -3)
    {
      if (a4 != a2 || &a2[4 * v20] <= a4) {
        memmove(a4, a2, 4 * v20);
      }
      uint64_t v34 = &a4[4 * v20];
      char v63 = v34;
      char v65 = a2;
      if (v19 >= 4 && a1 < a2)
      {
        uint64_t v35 = v53 - 4;
        uint64_t v36 = a2;
        uint64_t v49 = a1;
        uint64_t v50 = a4;
        uint64_t v37 = v58;
        do
        {
          uint64_t v54 = a2;
          int v52 = v34;
          int v53 = v35 + 4;
          uint64_t v38 = v34 - 4;
          v36 -= 4;
          uint64_t v39 = v55;
          Unicode.Scalar.properties.getter();
          uint64_t v40 = v59;
          Unicode.Scalar.Properties.canonicalCombiningClass.getter();
          unsigned int v41 = *(void (**)(char *, uint64_t))(v57 + 8);
          v41(v39, v37);
          LOBYTE(v51) = Unicode.CanonicalCombiningClass.rawValue.getter();
          unsigned int v51 = v51;
          uint64_t v42 = *(void (**)(char *, uint64_t))(v61 + 8);
          int v43 = v40;
          uint64_t v44 = v62;
          v42(v43, v62);
          uint64_t v45 = v56;
          Unicode.Scalar.properties.getter();
          uint64_t v46 = v60;
          Unicode.Scalar.Properties.canonicalCombiningClass.getter();
          v41(v45, v37);
          LOBYTE(v45) = Unicode.CanonicalCombiningClass.rawValue.getter();
          v42(v46, v44);
          if (v51 >= v45)
          {
            char v63 = v38;
            uint64_t v36 = v54;
            if (v53 < v52 || v35 >= v52 || v53 != v52) {
              *(_DWORD *)uint64_t v35 = *(_DWORD *)v38;
            }
            uint64_t v34 = v38;
          }

          else
          {
            uint64_t v34 = v52;
            if (v53 != v54 || v35 >= v54) {
              *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
            }
            char v65 = v36;
          }

          if (v34 <= v50) {
            break;
          }
          v35 -= 4;
          a2 = v36;
        }

        while (v36 > v49);
      }

      goto LABEL_41;
    }
  }

  else if (v16 >= -3)
  {
    if (a4 != a1 || &a1[4 * v18] <= a4) {
      memmove(a4, a1, 4 * v18);
    }
    int v52 = &a4[4 * v18];
    char v63 = v52;
    if (v16 >= 4 && a2 < v53)
    {
      do
      {
        uint64_t v21 = v55;
        Unicode.Scalar.properties.getter();
        uint64_t v22 = v59;
        Unicode.Scalar.Properties.canonicalCombiningClass.getter();
        char v23 = *(void (**)(char *, uint64_t))(v57 + 8);
        uint64_t v24 = a4;
        uint64_t v25 = a2;
        uint64_t v26 = v58;
        v23(v21, v58);
        LOBYTE(v5os_unfair_lock_unlock(*v0 + 4) = Unicode.CanonicalCombiningClass.rawValue.getter();
        LODWORD(v5os_unfair_lock_unlock(*v0 + 4) = v54;
        int v27 = *(void (**)(char *, uint64_t))(v61 + 8);
        uint64_t v28 = v22;
        uint64_t v29 = v62;
        v27(v28, v62);
        uint64_t v30 = v56;
        Unicode.Scalar.properties.getter();
        char v31 = v60;
        Unicode.Scalar.Properties.canonicalCombiningClass.getter();
        v23(v30, v26);
        LOBYTE(v30) = Unicode.CanonicalCombiningClass.rawValue.getter();
        v27(v31, v29);
        if (v54 >= v30)
        {
          uint64_t v33 = v25;
          if (a1 != v24) {
            *(_DWORD *)a1 = *(_DWORD *)v24;
          }
          a4 = v24 + 4;
          int v64 = v24 + 4;
          uint64_t v32 = v33;
        }

        else
        {
          uint64_t v32 = v25 + 4;
          if (a1 < v25 || a1 >= v32 || a1 != v25) {
            *(_DWORD *)a1 = *(_DWORD *)v25;
          }
          a4 = v24;
        }

        a1 += 4;
        char v65 = a1;
        if (a4 >= v52) {
          break;
        }
        a2 = v32;
      }

      while (v32 < v53);
    }

uint64_t specialized RangeReplaceableCollection.remove(at:)(uint64_t result)
{
  char v2 = *(_BYTE *)(v1 + 4);
  if (v2)
  {
    if (result <= 0xEFu)
    {
      uint64_t v3 = (*(_DWORD *)v1 >> result);
      *(_DWORD *)uint64_t v1 = (*(_DWORD *)v1 >> (((result + 16) >> 1) & 0x18) >> (((result + 16) >> 1) & 0x18) << ((result + 16 - ((((((result + 16) - result) & 0xF000u) >> 12) + 16) & 0x10)) & 0x10)) | *(_DWORD *)v1 & ((1 << ((result >> 1) & 0x18) << ((result >> 1) & 0x18)) - 1);
      *(_BYTE *)(v1 + os_unfair_lock_unlock(*v0 + 4) = v2
                         - ((((((result + 16) - result) & 0xF000u) >> 12) + 16) & 0xF0);
      return v3;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v2 = *(_BYTE *)(v1 + 4);
  if (v2)
  {
    if (result <= 0xF7u)
    {
      uint64_t v3 = (*(_DWORD *)v1 >> result);
      *(_DWORD *)uint64_t v1 = (*(_DWORD *)v1 >> (((result + 8) >> 1) & 0x1C) >> (((result + 8) >> 1) & 0x1C) << ((result + 8 - ((((((result + 8) - result) & 0xE000u) >> 13) + 8) & 0x18)) & 0x18)) | *(_DWORD *)v1 & ((1 << ((result >> 1) & 0x1C) << ((result >> 1) & 0x1C)) - 1);
      *(_BYTE *)(v1 + os_unfair_lock_unlock(*v0 + 4) = v2
                         - ((((((result + 8) - result) & 0xE000u) >> 13) + 8) & 0xF8);
      return v3;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (uint64_t *)(result + 16);
  if (*(void *)(*(void *)(result + 16) + 16LL))
  {
    specialized MutableCollection<>.sort(by:)((char **)(result + 16));
    uint64_t result = *v4;
    uint64_t v8 = *(void *)(*v4 + 16);
    if (v8)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = result + 32;
      while (1)
      {
        unsigned int v11 = *(_DWORD *)(v10 + 4 * v9);
        if (v11 > 0x7F)
        {
          int v19 = (*(_DWORD *)(v10 + 4 * v9) & 0x3F) << 8;
          if (v11 >= 0x800)
          {
            unsigned int v20 = v11 >> 12;
            int v21 = (v19 | (v11 >> 6) & 0x3F) << 8;
            unsigned int v22 = HIWORD(v11);
            uint64_t result = (v21 | (v11 >> 12) & 0x3F) << 8;
            int v23 = (result | (v11 >> 18)) - 2122219023;
            int v24 = (v21 | v20) + 8487393;
            unsigned int v12 = v22 ? v23 : v24;
          }

          else
          {
            unsigned int v12 = (v19 | (v11 >> 6)) + 33217;
          }
        }

        else
        {
          unsigned int v12 = v11 + 1;
        }

        if (!a2) {
          break;
        }
        uint64_t v13 = *(void *)(a3 + 16);
        uint64_t v14 = a4 - v13;
        if (__OFSUB__(a4, v13))
        {
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          break;
        }

        if (v14 < 4 - (__clz(v12) >> 3))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
          lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError( &lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError,  &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
          swift_allocError();
          *uint64_t v25 = 0;
          return swift_willThrow();
        }

        if (!v14) {
          goto LABEL_34;
        }
        uint64_t v15 = 0LL;
        ++v9;
        uint64_t result = a2 + v13;
        do
        {
          if (v14 == v15)
          {
            __break(1u);
            goto LABEL_31;
          }

          unsigned int v16 = v12;
          if (!v12)
          {
            uint64_t v14 = v15;
            goto LABEL_17;
          }

          *(_BYTE *)(result + v15) = v12 - 1;
          v12 >>= 8;
          ++v15;
        }

        while (v14 != v15);
        if (v16 > 0xFF) {
          goto LABEL_34;
        }
LABEL_17:
        BOOL v17 = __OFADD__(v13, v14);
        uint64_t v18 = v13 + v14;
        if (v17) {
          goto LABEL_32;
        }
        *(void *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v18;
        if (v9 == v8) {
          goto LABEL_26;
        }
      }

      __break(1u);
LABEL_34:
      __break(1u);
    }

    else
    {
LABEL_26:
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v27 = *v4;
      if (isUniquelyReferenced_nonNull_native)
      {
        return (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v27 + 16));
      }

      else
      {
        *uint64_t v4 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v27 + 24) >> 1);
        return swift_bridgeObjectRelease();
      }
    }
  }

  return result;
}

{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  _BYTE *v25;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v4 = (uint64_t *)(result + 16);
  if (*(void *)(*(void *)(result + 16) + 16LL))
  {
    specialized MutableCollection<>.sort(by:)((char **)(result + 16));
    uint64_t result = *v4;
    uint64_t v8 = *(void *)(*v4 + 16);
    if (v8)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = result + 32;
      while (1)
      {
        unsigned int v11 = *(_DWORD *)(v10 + 4 * v9);
        if (v11 > 0x7F)
        {
          int v19 = (*(_DWORD *)(v10 + 4 * v9) & 0x3F) << 8;
          if (v11 >= 0x800)
          {
            unsigned int v20 = v11 >> 12;
            int v21 = (v19 | (v11 >> 6) & 0x3F) << 8;
            unsigned int v22 = HIWORD(v11);
            uint64_t result = (v21 | (v11 >> 12) & 0x3F) << 8;
            int v23 = (result | (v11 >> 18)) - 2122219023;
            int v24 = (v21 | v20) + 8487393;
            unsigned int v12 = v22 ? v23 : v24;
          }

          else
          {
            unsigned int v12 = (v19 | (v11 >> 6)) + 33217;
          }
        }

        else
        {
          unsigned int v12 = v11 + 1;
        }

        if (!a2) {
          break;
        }
        uint64_t v13 = *(void *)(a3 + 16);
        uint64_t v14 = a4 - v13;
        if (__OFSUB__(a4, v13))
        {
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          break;
        }

        if (v14 < 4 - (__clz(v12) >> 3))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
          lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError( &lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError,  &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
          swift_allocError();
          *uint64_t v25 = 0;
          return swift_willThrow();
        }

        if (!v14) {
          goto LABEL_36;
        }
        uint64_t result = v12 >> 8;
        *(_BYTE *)(a2 + v13) = v12 - 1;
        if (v14 == 1)
        {
LABEL_15:
          if ((_DWORD)result) {
            goto LABEL_36;
          }
          BOOL v17 = __OFADD__(v13, v14);
          uint64_t v18 = a4;
          if (v17) {
            goto LABEL_34;
          }
        }

        else
        {
          uint64_t v15 = 1LL;
          while (1)
          {
            if (v14 == v15)
            {
              __break(1u);
              goto LABEL_33;
            }

            if (v12 < 0x100) {
              break;
            }
            unsigned int v16 = result;
            *(_BYTE *)(a2 + v13 + v15) = result - 1;
            uint64_t result = result >> 8;
            ++v15;
            unsigned int v12 = v16;
            if (v14 == v15) {
              goto LABEL_15;
            }
          }

          BOOL v17 = __OFADD__(v13, v15);
          uint64_t v18 = v13 + v15;
          if (v17) {
            goto LABEL_34;
          }
        }

        ++v9;
        *(void *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v18;
        if (v9 == v8) {
          goto LABEL_28;
        }
      }

      __break(1u);
LABEL_36:
      __break(1u);
    }

    else
    {
LABEL_28:
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v27 = *v4;
      if (isUniquelyReferenced_nonNull_native)
      {
        return (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v27 + 16));
      }

      else
      {
        *uint64_t v4 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v27 + 24) >> 1);
        return swift_bridgeObjectRelease();
      }
    }
  }

  return result;
}

uint64_t specialized String.init(_utf16:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  _OWORD v9[2] = *MEMORY[0x1895F89C0];
  uint64_t v2 = 3 * a2;
  if ((unsigned __int128)(a2 * (__int128)3LL) >> 64 != (3 * a2) >> 63)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }

  if (v2 < 0) {
    goto LABEL_9;
  }
  uint64_t v4 = (unsigned __int16 *)isStackAllocationSafe;
  if (v2 <= 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    closure #1 in String.init(_utf16:)((_BYTE *)&v9[-1] - v5, v4, a2, v9);
    return v9[0];
  }

  else
  {
    uint64_t v7 = (_BYTE *)swift_slowAlloc();
    closure #1 in String.init(_utf16:)(v7, v4, a2, v9);
    MEMORY[0x186E20E60](v7, -1LL, -1LL);
    return v9[0];
  }

unint64_t lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser;
  if (!lazy protocol witness table cache variable for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961ABF0], MEMORY[0x18961ABE8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser);
  }

  return result;
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, _DWORD *a9@<X8>, void *a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v64 = a3;
  uint64_t v76 = *MEMORY[0x1895F89C0];
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v23 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_31;
  }

  if (v23 < -1)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }

  uint64_t v61 = a4;
  uint64_t v62 = a6;
  uint64_t v63 = a7;
  uint64_t v65 = a5;
  id v60 = a10;
  char v24 = a11 & 1;
  uint64_t v25 = v23 + 1;
  if (v23 >= 1024)
  {
    Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      unint64_t v59 = v13;
      uint64_t v44 = (char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v44, v25, 1, a1, a2);
      char v46 = v45;
      swift_bridgeObjectRelease();
      if ((v46 & 1) != 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v49 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v50 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v51 = objc_msgSend(v49, sel_initWithDomain_code_userInfo_, v50, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v52 = objc_msgSend(v51, sel_domain);
        id v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        uint64_t v55 = v54;

        if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v55 == v56)
        {
          swift_bridgeObjectRelease_n();
        }

        else
        {
          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v57 & 1) == 0) {
            goto LABEL_33;
          }
        }

        swift_willThrow();
      }

      else
      {
        closure #1 in createProtectedTemporaryFile(at:inPath:options:variant:)( v44,  v64,  v61,  v65,  v62,  v63,  a8,  v60,  (uint64_t)&v71,  v24,  a12,  a13);
        if (!v59)
        {
          uint64_t v58 = a9;
          MEMORY[0x186E20E60](v44, -1LL, -1LL);
          uint64_t result = swift_bridgeObjectRelease();
          int v30 = v71;
          uint64_t v31 = v72;
          uint64_t v32 = v73;
          uint64_t v33 = v74;
          uint64_t v34 = v75;
          goto LABEL_18;
        }
      }

      MEMORY[0x186E20E60](v44, -1LL, -1LL);
      return swift_bridgeObjectRelease();
    }
  }

  uint64_t v58 = a9;
  unint64_t v59 = &v58;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  uint64_t v27 = (char *)&v58 - v26;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v27, v25, 1, a1, a2);
  char v29 = v28;
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0)
  {
    closure #1 in createProtectedTemporaryFile(at:inPath:options:variant:)( v27,  v64,  v61,  v65,  v62,  v63,  a8,  v60,  (uint64_t)&v66,  v24,  a12,  a13);
    if (!v13)
    {
      int v30 = v66;
      uint64_t v31 = v67;
      uint64_t v32 = v68;
      uint64_t v33 = v69;
      uint64_t v34 = v70;
      uint64_t result = swift_bridgeObjectRelease();
LABEL_18:
      uint64_t v47 = v58;
      *uint64_t v58 = v30;
      v47[1] = v31;
      v47[2] = v32;
      v47[3] = v33;
      v47[4] = v34;
      return result;
    }

    goto LABEL_21;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v36 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v37 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v38 = objc_msgSend(v36, sel_initWithDomain_code_userInfo_, v37, 514, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v39 = objc_msgSend(v38, sel_domain);
  id v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  uint64_t v42 = v41;

  if (v40 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v42 != v43)
  {
    char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v48 & 1) != 0) {
      goto LABEL_20;
    }
    goto LABEL_32;
  }

  swift_bridgeObjectRelease_n();
LABEL_20:
  swift_willThrow();
LABEL_21:
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1832A686C()
{
  return swift_deallocObject();
}

uint64_t sub_1832A687C()
{
  return swift_deallocObject();
}

uint64_t outlined consume of SubpathElement()
{
  return swift_bridgeObjectRelease();
}

uint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError( unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for UnsafeBufferPointer<A>.DecompositionError, v4);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser;
  if (!lazy protocol witness table cache variable for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961AB90], MEMORY[0x18961AB88]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for UnsafeBufferPointer.DecompositionError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(vos_unfair_lock_unlock(*v0 + 4) = 1;
  }
  else {
    LODWORD(vos_unfair_lock_unlock(*v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1832A6BAC + 4 * byte_1837C8605[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1832A6BE0 + 4 * byte_1837C8600[v4]))();
}

uint64_t sub_1832A6BE0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832A6BE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1832A6BF0LL);
  }
  return result;
}

uint64_t sub_1832A6BFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1832A6C04LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1832A6C08(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832A6C10(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for UnsafeBufferPointer.DecompositionError( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for UnsafeBufferPointer.DecompositionError);
}

void base witness table accessor for Equatable in UnsafeBufferPointer<A>.DecompositionError()
{
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)( a1,  a2,  (void (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)( a1,  a2,  (void (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  char v2;
  if (*(void *)(*(void *)a1 + 16LL) && (specialized __RawDictionaryStorage.find<A>(_:)(a2), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0LL;
  }
}

{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)( a1,  a2,  (void (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)( a1,  a2,  (void (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, unsigned __int8 *a2)
{
  if (*(void *)(*(void *)a1 + 16LL) && (specialized __RawDictionaryStorage.find<A>(_:)(a2), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 1LL;
  }
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)( uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (*(void *)(*(void *)a1 + 16LL) && (a3(a2), (v3 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 1LL;
  }
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)( uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4, Swift::UInt a5)
{
  if (*(void *)(*(void *)a1 + 16LL)
    && (specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a5), (v5 & 1) != 0))
  {
    return swift_retain();
  }

  else
  {
    return 0LL;
  }

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, double *a2)
{
  if (*(void *)(*(void *)a1 + 16LL) && (specialized __RawDictionaryStorage.find<A>(_:)(a2), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 1LL;
  }
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (*(void *)(*(void *)a1 + 16LL)
    && (specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 | ((HIDWORD(a4) & 1) << 32), a5),
        (v5 & 1) != 0))
  {
    return swift_retain();
  }

  else
  {
    return 1LL;
  }

void *specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (!*(void *)(*a1 + 16)) {
    return 0LL;
  }
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  char v5 = *(void **)(*(void *)(v2 + 56) + 8 * v3);
  id v6 = v5;
  return v5;
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (*(void *)(*(void *)a1 + 16LL) && (specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4), (v4 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 1LL;
  }
}

uint64_t static Locale.legacyKey(forKey:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a1 == 0x7261646E656C6163LL && a2 == 0xE800000000000000LL) {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_35;
  }
  unint64_t v7 = 0xEC0000006574616ELL;
  uint64_t v8 = 0x7265746C616C6F63LL;
  if (a1 == 0x7265746C616C6F63LL && a2 == 0xEC0000006574616ELL) {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x776B6361626C6F63LL && a2 == 0xEC00000073647261LL)
  {
    goto LABEL_35;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x66657361636C6F63LL && a2 == 0xEC00000074737269LL)
  {
    goto LABEL_35;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6C657361636C6F63LL && a2 == 0xEC0000006C657665LL)
  {
    goto LABEL_35;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000015LL && a2 == 0x80000001839D0050LL)
  {
    goto LABEL_35;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6F6974616C6C6F63LL && a2 == 0xE90000000000006ELL)
  {
    goto LABEL_35;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000010LL && a2 == 0x80000001839D0070LL)
  {
    goto LABEL_35;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x72656D756E6C6F63LL && a2 == 0xEA00000000006369LL)
  {
    goto LABEL_35;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x64726F65726C6F63LL && a2 == 0xEA00000000007265LL)
  {
    goto LABEL_35;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6E657274736C6F63LL && a2 == 0xEB00000000687467LL)
  {
    goto LABEL_35;
  }

  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v11 = a1 == 0x79636E6572727563LL && a2 == 0xE800000000000000LL;
  BOOL v12 = v11;
  if ((v10 & 1) != 0
    || v12
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x7372756F68LL && a2 == 0xE500000000000000LL)
  {
    goto LABEL_35;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6572757361656DLL && a2 == 0xE700000000000000LL)
  {
    goto LABEL_35;
  }

  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v14 = a1 == 0x737265626D756ELL && a2 == 0xE700000000000000LL;
  BOOL v15 = v14;
  if ((v13 & 1) != 0 || v15) {
    goto LABEL_35;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v17 = a1 == 0x656E6F7A656D6974LL && a2 == 0xE800000000000000LL;
  BOOL v18 = v17;
  if ((v16 & 1) != 0
    || v18
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x656C626169726176LL && a2 == 0xEB00000000706F74LL)
  {
    goto LABEL_35;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 26211 && a2 == 0xE200000000000000LL) {
    goto LABEL_35;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v20 = a1 == 12388 && a2 == 0xE200000000000000LL;
  BOOL v21 = v20;
  if ((v19 & 1) != 0 || v21) {
    goto LABEL_35;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v23 = a1 == 30820 && a2 == 0xE200000000000000LL;
  BOOL v24 = v23;
  if ((v22 & 1) != 0 || v24) {
    goto LABEL_35;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v26 = a1 == 28005 && a2 == 0xE200000000000000LL;
  BOOL v27 = v26;
  if ((v25 & 1) != 0 || v27) {
    goto LABEL_35;
  }
  char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v29 = a1 == 30566 && a2 == 0xE200000000000000LL;
  BOOL v30 = v29;
  if ((v28 & 1) != 0 || v30) {
    goto LABEL_35;
  }
  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v32 = a1 == 12392 && a2 == 0xE200000000000000LL;
  BOOL v33 = v32;
  if ((v31 & 1) != 0 || v33) {
    goto LABEL_35;
  }
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v35 = a1 == 12393 && a2 == 0xE200000000000000LL;
  BOOL v36 = v35;
  if ((v34 & 1) != 0 || v36) {
    goto LABEL_35;
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v38 = a1 == 12395 && a2 == 0xE200000000000000LL;
  BOOL v39 = v38;
  if ((v37 & 1) != 0 || v39) {
    goto LABEL_35;
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v41 = a1 == 30315 && a2 == 0xE200000000000000LL;
  BOOL v42 = v41;
  if ((v40 & 1) != 0 || v42) {
    goto LABEL_35;
  }
  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v44 = a1 == 25196 && a2 == 0xE200000000000000LL;
  BOOL v45 = v44;
  if ((v43 & 1) != 0 || v45) {
    goto LABEL_35;
  }
  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v47 = a1 == 30572 && a2 == 0xE200000000000000LL;
  BOOL v48 = v47;
  if ((v46 & 1) != 0 || v48) {
    goto LABEL_35;
  }
  char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v50 = a1 == 12397 && a2 == 0xE200000000000000LL;
  BOOL v51 = v50;
  if ((v49 & 1) != 0 || v51) {
    goto LABEL_35;
  }
  char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v53 = a1 == 26482 && a2 == 0xE200000000000000LL;
  BOOL v54 = v53;
  if ((v52 & 1) != 0 || v54) {
    goto LABEL_35;
  }
  char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v56 = a1 == 12403 && a2 == 0xE200000000000000LL;
  BOOL v57 = v56;
  if ((v55 & 1) != 0 || v57) {
    goto LABEL_35;
  }
  char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v59 = a1 == 25715 && a2 == 0xE200000000000000LL;
  BOOL v60 = v59;
  if ((v58 & 1) != 0 || v60) {
    goto LABEL_35;
  }
  char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v62 = a1 == 29555 && a2 == 0xE200000000000000LL;
  BOOL v63 = v62;
  if ((v61 & 1) != 0 || v63) {
    goto LABEL_35;
  }
  char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v65 = a1 == 12404 && a2 == 0xE200000000000000LL;
  BOOL v66 = v65;
  if ((v64 & 1) != 0
    || v66
    || ((char v67 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 24950)
      ? (BOOL v68 = a2 == 0xE200000000000000LL)
      : (BOOL v68 = 0),
        !v68 ? (char v69 = 0) : (char v69 = 1),
        (v67 & 1) != 0
     || (v69 & 1) != 0
     || ((char v70 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 12408)
       ? (BOOL v71 = a2 == 0xE200000000000000LL)
       : (BOOL v71 = 0),
         !v71 ? (char v72 = 0) : (char v72 = 1),
         (v70 & 1) != 0 || (v72 & 1) != 0 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))))
  {
LABEL_35:
    uint64_t result = swift_bridgeObjectRetain();
LABEL_36:
    uint64_t v8 = a1;
    unint64_t v7 = a2;
LABEL_37:
    *a3 = v8;
    a3[1] = v7;
    return result;
  }

  if (a1 == 24931 && a2 == 0xE200000000000000LL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    unint64_t v7 = 0xE800000000000000LL;
    uint64_t v8 = 0x7261646E656C6163LL;
    goto LABEL_37;
  }

  if (a1 == 24939 && a2 == 0xE200000000000000LL) {
    goto LABEL_37;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0) {
    goto LABEL_37;
  }
  if (a1 == 25195 && a2 == 0xE200000000000000LL)
  {
    uint64_t v8 = 0x776B6361626C6F63LL;
    unint64_t v7 = 0xEC00000073647261LL;
    goto LABEL_37;
  }

  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x776B6361626C6F63LL;
  unint64_t v7 = 0xEC00000073647261LL;
  if ((result & 1) != 0) {
    goto LABEL_37;
  }
  if (a1 == 26219 && a2 == 0xE200000000000000LL)
  {
    uint64_t v8 = 0x66657361636C6F63LL;
    unint64_t v7 = 0xEC00000074737269LL;
    goto LABEL_37;
  }

  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x66657361636C6F63LL;
  unint64_t v7 = 0xEC00000074737269LL;
  if ((result & 1) != 0) {
    goto LABEL_37;
  }
  if (a1 == 25451 && a2 == 0xE200000000000000LL)
  {
    uint64_t v8 = 0x6C657361636C6F63LL;
    unint64_t v7 = 0xEC0000006C657665LL;
    goto LABEL_37;
  }

  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x6C657361636C6F63LL;
  unint64_t v7 = 0xEC0000006C657665LL;
  if ((result & 1) != 0) {
    goto LABEL_37;
  }
  uint64_t v8 = 0xD000000000000015LL;
  unint64_t v7 = 0x80000001839D0050LL;
  if (a1 == 26731 && a2 == 0xE200000000000000LL) {
    goto LABEL_37;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0) {
    goto LABEL_37;
  }
  if (a1 == 28515 && a2 == 0xE200000000000000LL)
  {
    uint64_t v8 = 0x6F6974616C6C6F63LL;
    unint64_t v7 = 0xE90000000000006ELL;
    goto LABEL_37;
  }

  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x6F6974616C6C6F63LL;
  unint64_t v7 = 0xE90000000000006ELL;
  if ((result & 1) != 0) {
    goto LABEL_37;
  }
  unint64_t v7 = 0x80000001839D0070LL;
  if (a1 == 27499 && a2 == 0xE200000000000000LL)
  {
    uint64_t v8 = 0xD000000000000010LL;
    goto LABEL_37;
  }

  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0xD000000000000010LL;
  if ((result & 1) != 0) {
    goto LABEL_37;
  }
  if (a1 == 28267 && a2 == 0xE200000000000000LL)
  {
    uint64_t v8 = 0x72656D756E6C6F63LL;
    unint64_t v7 = 0xEA00000000006369LL;
    goto LABEL_37;
  }

  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x72656D756E6C6F63LL;
  unint64_t v7 = 0xEA00000000006369LL;
  if ((result & 1) != 0) {
    goto LABEL_37;
  }
  unint64_t v7 = 0xEA00000000007265LL;
  if (a1 == 29291 && a2 == 0xE200000000000000LL)
  {
    uint64_t v8 = 0x64726F65726C6F63LL;
    goto LABEL_37;
  }

  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x64726F65726C6F63LL;
  if ((result & 1) != 0) {
    goto LABEL_37;
  }
  if (a1 == 29547 && a2 == 0xE200000000000000LL)
  {
    uint64_t v8 = 0x6E657274736C6F63LL;
    unint64_t v7 = 0xEB00000000687467LL;
    goto LABEL_37;
  }

  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x6E657274736C6F63LL;
  unint64_t v7 = 0xEB00000000687467LL;
  if ((result & 1) != 0) {
    goto LABEL_37;
  }
  if (a1 == 30051 && a2 == 0xE200000000000000LL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    unint64_t v7 = 0xE800000000000000LL;
    uint64_t v8 = 0x79636E6572727563LL;
    goto LABEL_37;
  }

  if (a1 == 25448 && a2 == 0xE200000000000000LL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    unint64_t v7 = 0xE500000000000000LL;
    uint64_t v8 = 0x7372756F68LL;
    goto LABEL_37;
  }

  if (a1 == 29549 && a2 == 0xE200000000000000LL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    unint64_t v7 = 0xE700000000000000LL;
    uint64_t v8 = 0x6572757361656DLL;
    goto LABEL_37;
  }

  if (a1 == 30062 && a2 == 0xE200000000000000LL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    unint64_t v7 = 0xE700000000000000LL;
    uint64_t v8 = 0x737265626D756ELL;
    goto LABEL_37;
  }

  if (a1 == 31348 && a2 == 0xE200000000000000LL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    unint64_t v7 = 0xE800000000000000LL;
    uint64_t v8 = 0x656E6F7A656D6974LL;
    goto LABEL_37;
  }

  if (a1 == 29814 && a2 == 0xE200000000000000LL)
  {
    uint64_t v8 = 0x656C626169726176LL;
    unint64_t v7 = 0xEB00000000706F74LL;
    goto LABEL_37;
  }

  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v8 = 0x656C626169726176LL;
  unint64_t v7 = 0xEB00000000706F74LL;
  if ((result & 1) != 0) {
    goto LABEL_37;
  }
  uint64_t v73 = String.utf8CString.getter() + 32;
  uint64_t v74 = uloc_toLegacyKey();
  if (v74)
  {
    if (v74 != v73)
    {
      uint64_t v8 = String.init(cString:)();
      unint64_t v7 = v75;
      uint64_t result = swift_release();
      goto LABEL_37;
    }

    swift_bridgeObjectRetain();
    uint64_t result = swift_release();
    goto LABEL_36;
  }

  uint64_t result = swift_release();
  *a3 = 0LL;
  a3[1] = 0LL;
  return result;
}

void *_LocaleICU.State.NumberFormattersBox.formatter(for:identifier:numberSymbols:)( int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v64[5] = *MEMORY[0x1895F89C0];
  uint64_t v8 = *v4;
  if (*(void *)(v8 + 16))
  {
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v10 & 1) != 0) {
      return *(void **)(*(void *)(v8 + 56) + 8 * v9);
    }
  }

  String.utf8CString.getter();
  BOOL v12 = (void *)unum_open();
  swift_release();
  if (!v12) {
    return 0LL;
  }
  int64_t v13 = a1;
  unum_setAttribute();
  unum_setContext();
  uint64_t v63 = (uint64_t)v12;
  if (!a4)
  {
LABEL_43:
    BOOL v12 = v61;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v64[0] = *v61;
    a2 = v64[0];
    *char v61 = 0x8000000000000000LL;
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    uint64_t v34 = *(void *)(a2 + 16);
    BOOL v35 = (v33 & 1) == 0;
    BOOL v36 = __OFADD__(v34, v35);
    uint64_t v37 = v34 + v35;
    if (v36) {
      goto LABEL_56;
    }
    LOBYTE(aos_unfair_lock_unlock(*v0 + 4) = v33;
    if (*(void *)(a2 + 24) < v37)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v37,  isUniquelyReferenced_nonNull_native);
      uint64_t v38 = v64[0];
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
      if ((a4 & 1) == (v39 & 1)) {
        goto LABEL_49;
      }
      unint64_t v18 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }

    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_57;
    }
    uint64_t v38 = a2;
LABEL_49:
    if ((a4 & 1) == 0)
    {
LABEL_90:
      specialized _NativeDictionary._insert(at:key:value:)(v18, v13, v63, (void *)v38);
      goto LABEL_91;
    }

Swift::Void __swiftcall _LocaleICU.State.NumberFormattersBox.cleanup()()
{
  uint64_t v1 = *(void *)v0 + 64LL;
  uint64_t v2 = 1LL << *(_BYTE *)(*(void *)v0 + 32LL);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  uint64_t v4 = v3 & *(void *)(*(void *)v0 + 64LL);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0LL;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }

    int64_t v7 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v7 >= v5) {
      goto LABEL_23;
    }
    uint64_t v8 = *(void *)(v1 + 8 * v7);
    ++v6;
    if (!v8)
    {
      int64_t v6 = v7 + 1;
      if (v7 + 1 >= v5) {
        goto LABEL_23;
      }
      uint64_t v8 = *(void *)(v1 + 8 * v6);
      if (!v8)
      {
        int64_t v6 = v7 + 2;
        if (v7 + 2 >= v5) {
          goto LABEL_23;
        }
        uint64_t v8 = *(void *)(v1 + 8 * v6);
        if (!v8)
        {
          int64_t v6 = v7 + 3;
          if (v7 + 3 >= v5) {
            goto LABEL_23;
          }
          uint64_t v8 = *(void *)(v1 + 8 * v6);
          if (!v8) {
            break;
          }
        }
      }
    }

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _LocaleICU.State.NumberFormattersBox()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _LocaleICU.State.NumberFormattersBox( uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _LocaleICU.State.NumberFormattersBox()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _LocaleICU.State.NumberFormattersBox( unint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t _LocaleICU.State.hash(into:)(uint64_t a1)
{
  Swift::UInt v3 = *(unsigned __int8 *)(v1 + 96);
  uint64_t v4 = *(void *)(v1 + 112);
  uint64_t v21 = *(void *)(v1 + 136);
  uint64_t v30 = *(void *)(v1 + 144);
  uint64_t v28 = *(void *)(v1 + 168);
  uint64_t v31 = *(void *)(v1 + 176);
  uint64_t v27 = *(void *)(v1 + 104);
  uint64_t v50 = *(void *)(v1 + 200);
  int v38 = *(char *)(v1 + 208);
  int v39 = *(unsigned __int8 *)(v1 + 265);
  Swift::UInt v22 = *(void *)(v1 + 272);
  int v40 = *(unsigned __int8 *)(v1 + 280);
  int v32 = *(char *)(v1 + 281);
  uint64_t v29 = *(void *)(v1 + 288);
  uint64_t v51 = *(void *)(v1 + 296);
  int v33 = *(unsigned __int8 *)(v1 + 320);
  uint64_t v23 = *(void *)(v1 + 328);
  uint64_t v52 = *(void *)(v1 + 336);
  uint64_t v42 = *(void *)(v1 + 368);
  uint64_t v24 = *(void *)(v1 + 360);
  uint64_t v34 = *(void *)(v1 + 392);
  uint64_t v25 = *(void *)(v1 + 400);
  uint64_t v26 = *(void *)(v1 + 408);
  uint64_t v53 = *(void *)(v1 + 416);
  uint64_t v43 = *(void *)(v1 + 448);
  uint64_t v44 = *(void *)(v1 + 456);
  uint64_t v45 = *(void *)(v1 + 464);
  uint64_t v46 = *(void *)(v1 + 472);
  uint64_t v47 = *(void *)(v1 + 480);
  uint64_t v5 = *(void *)(v1 + 504);
  uint64_t v48 = *(void *)(v1 + 488);
  uint64_t v49 = *(void *)(v1 + 496);
  uint64_t v6 = *(void *)(v1 + 520);
  uint64_t v7 = *(void *)(v1 + 528);
  uint64_t v35 = *(void *)(v1 + 512);
  uint64_t v36 = *(void *)(v1 + 536);
  if (*(void *)(v1 + 8) == 1LL)
  {
    Hasher._combine(_:)(0);
    if ((_DWORD)v3 != 16)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v3);
      goto LABEL_6;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    Locale.Language.Components.hash(into:)();
    if ((_DWORD)v3 != 16) {
      goto LABEL_3;
    }
  }

  Hasher._combine(_:)(0);
LABEL_6:
  uint64_t v41 = v6;
  uint64_t v37 = v5;
  if (v4)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v27, v4);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v27, v4);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v8 = v51;
  if (v30 != 1)
  {
    Hasher._combine(_:)(1u);
    if (v30)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v21, v30);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v8 = v51;
      outlined consume of Locale.Subdivision??(v21, v30);
      if (!v31) {
        goto LABEL_18;
      }
    }

    else
    {
      Hasher._combine(_:)(0);
      outlined consume of Locale.Subdivision??(v21, 0LL);
      if (!v31) {
        goto LABEL_18;
      }
    }

Swift::Int _LocaleICU.State.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v41 = *(void *)(v0 + 144);
  uint64_t v27 = *(void *)(v0 + 136);
  uint64_t v34 = *(void *)(v0 + 168);
  uint64_t v42 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v33 = *(void *)(v0 + 104);
  int v43 = *(char *)(v0 + 208);
  int v45 = *(unsigned __int8 *)(v0 + 280);
  int v44 = *(unsigned __int8 *)(v0 + 265);
  int v46 = *(char *)(v0 + 281);
  uint64_t v36 = *(void *)(v0 + 296);
  uint64_t v35 = *(void *)(v0 + 288);
  int v37 = *(unsigned __int8 *)(v0 + 320);
  Swift::UInt v28 = *(void *)(v0 + 272);
  uint64_t v29 = *(void *)(v0 + 328);
  uint64_t v56 = *(void *)(v0 + 336);
  uint64_t v57 = *(void *)(v0 + 368);
  uint64_t v30 = *(void *)(v0 + 360);
  uint64_t v31 = *(void *)(v0 + 400);
  uint64_t v58 = *(void *)(v0 + 416);
  uint64_t v32 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 448);
  uint64_t v47 = *(void *)(v0 + 392);
  uint64_t v48 = *(void *)(v0 + 456);
  uint64_t v49 = *(void *)(v0 + 464);
  uint64_t v50 = *(void *)(v0 + 472);
  uint64_t v51 = *(void *)(v0 + 480);
  uint64_t v52 = *(void *)(v0 + 488);
  uint64_t v53 = *(void *)(v0 + 504);
  uint64_t v54 = *(void *)(v0 + 512);
  uint64_t v55 = *(void *)(v0 + 520);
  uint64_t v38 = *(void *)(v0 + 496);
  uint64_t v39 = *(void *)(v0 + 528);
  uint64_t v40 = *(void *)(v0 + 536);
  Hasher.init(_seed:)();
  if (v1 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Locale.Language.Components.hash(into:)();
  }

  uint64_t v6 = v58;
  uint64_t v7 = v56;
  if ((_DWORD)v2 == 16)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }

  uint64_t v8 = v57;
  if (v3)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v33, v3);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v33, v3);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  if (v41 == 1)
  {
    Hasher._combine(_:)(0);
    uint64_t v9 = v42;
    if (!v42) {
      goto LABEL_12;
    }
LABEL_18:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v34, v9);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v34, v9);
    if (!v4) {
      goto LABEL_13;
    }
    goto LABEL_19;
  }

  Hasher._combine(_:)(1u);
  if (v41)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.Subdivision??(v27, v41);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v10 = v27;
    uint64_t v11 = v41;
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v10 = v27;
    uint64_t v11 = 0LL;
  }

  outlined consume of Locale.Subdivision??(v10, v11);
  uint64_t v9 = v42;
  if (v42) {
    goto LABEL_18;
  }
LABEL_12:
  Hasher._combine(_:)(0);
  if (!v4)
  {
LABEL_13:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _LocaleICU.State()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v40 = *(void *)(v0 + 144);
  uint64_t v26 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v33 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v32 = *(void *)(v0 + 104);
  int v41 = *(char *)(v0 + 208);
  int v43 = *(unsigned __int8 *)(v0 + 280);
  int v42 = *(unsigned __int8 *)(v0 + 265);
  int v44 = *(char *)(v0 + 281);
  uint64_t v35 = *(void *)(v0 + 296);
  uint64_t v34 = *(void *)(v0 + 288);
  int v36 = *(unsigned __int8 *)(v0 + 320);
  Swift::UInt v27 = *(void *)(v0 + 272);
  uint64_t v28 = *(void *)(v0 + 328);
  uint64_t v54 = *(void *)(v0 + 336);
  uint64_t v55 = *(void *)(v0 + 368);
  uint64_t v29 = *(void *)(v0 + 360);
  uint64_t v30 = *(void *)(v0 + 400);
  uint64_t v57 = *(void *)(v0 + 416);
  uint64_t v31 = *(void *)(v0 + 408);
  uint64_t v6 = *(void *)(v0 + 448);
  uint64_t v45 = *(void *)(v0 + 392);
  uint64_t v46 = *(void *)(v0 + 456);
  uint64_t v47 = *(void *)(v0 + 464);
  uint64_t v48 = *(void *)(v0 + 472);
  uint64_t v49 = *(void *)(v0 + 480);
  uint64_t v50 = *(void *)(v0 + 488);
  uint64_t v51 = *(void *)(v0 + 504);
  uint64_t v52 = *(void *)(v0 + 512);
  uint64_t v53 = *(void *)(v0 + 520);
  uint64_t v37 = *(void *)(v0 + 496);
  uint64_t v38 = *(void *)(v0 + 528);
  uint64_t v39 = *(void *)(v0 + 536);
  Hasher.init(_seed:)();
  if (v1 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Locale.Language.Components.hash(into:)();
  }

  uint64_t v56 = v6;
  uint64_t v8 = v54;
  uint64_t v7 = v55;
  if ((_DWORD)v2 == 16)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }

  if (v3)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v32, v3);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v32, v3);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  if (v40 == 1)
  {
    Hasher._combine(_:)(0);
    if (!v4) {
      goto LABEL_12;
    }
LABEL_18:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v33, v4);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v33, v4);
    if (!v5) {
      goto LABEL_13;
    }
    goto LABEL_19;
  }

  Hasher._combine(_:)(1u);
  if (v40)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.Subdivision??(v26, v40);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = v26;
    uint64_t v10 = v40;
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v9 = v26;
    uint64_t v10 = 0LL;
  }

  outlined consume of Locale.Subdivision??(v9, v10);
  if (v4) {
    goto LABEL_18;
  }
LABEL_12:
  Hasher._combine(_:)(0);
  if (!v5)
  {
LABEL_13:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }

uint64_t _LocaleICU.init(components:)(void *__src)
{
  uint64_t v2 = v1;
  memcpy(__dst, __src, 0x160uLL);
  memcpy(v82, __src, sizeof(v82));
  Locale.Components.icuIdentifier.getter();
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(void *)(v2 + 2os_unfair_lock_unlock(*v0 + 4) = v5;
  _s10Foundation17LocalePreferencesVSgWOi0_(v82);
  uint64_t v67 = v2;
  outlined init with take of LocalePreferences?((uint64_t)v82, v2 + 32);
  uint64_t v6 = 1LL;
  uint64_t v7 = __dst[18];
  if (__dst[18])
  {
    uint64_t v66 = __dst[20];
    uint64_t v63 = __dst[19];
    uint64_t v6 = __dst[18];
    uint64_t v59 = __dst[17];
  }

  else
  {
    uint64_t v66 = 0LL;
    uint64_t v63 = 0LL;
    uint64_t v59 = 0LL;
  }

  if (__dst[31])
  {
    uint64_t v64 = __dst[32];
    uint64_t v65 = __dst[30];
    uint64_t v60 = __dst[31];
    uint64_t v61 = __dst[33];
  }

  else
  {
    uint64_t v64 = 0LL;
    uint64_t v65 = 0LL;
    uint64_t v60 = 1LL;
    uint64_t v61 = 0LL;
  }

  uint64_t v80 = __dst[14];
  uint64_t v8 = __dst[15];
  uint64_t v9 = __dst[16];
  uint64_t v51 = __dst[21];
  uint64_t v79 = __dst[22];
  uint64_t v10 = __dst[23];
  uint64_t v11 = __dst[24];
  uint64_t v81 = __dst[27];
  uint64_t v12 = __dst[28];
  uint64_t v13 = __dst[29];
  uint64_t v42 = __dst[31];
  uint64_t v44 = __dst[30];
  uint64_t v38 = __dst[17];
  uint64_t v37 = __dst[26];
  uint64_t v35 = __dst[35];
  uint64_t v36 = __dst[34];
  uint64_t v14 = __dst[13];
  if (__dst[35])
  {
    uint64_t v56 = __dst[36];
    uint64_t v57 = __dst[34];
    uint64_t v54 = __dst[35];
    uint64_t v55 = __dst[37];
  }

  else
  {
    uint64_t v56 = 0LL;
    uint64_t v57 = 0LL;
    uint64_t v54 = 1LL;
    uint64_t v55 = 0LL;
  }

  uint64_t v62 = v6;
  uint64_t v77 = __dst[5];
  uint64_t v78 = __dst[4];
  uint64_t v75 = __dst[7];
  uint64_t v76 = __dst[6];
  uint64_t v73 = __dst[9];
  uint64_t v74 = __dst[8];
  uint64_t v71 = __dst[11];
  uint64_t v72 = __dst[10];
  char v46 = __dst[12];
  char v50 = __dst[25];
  char v53 = BYTE1(__dst[25]);
  unint64_t v15 = __dst[38];
  uint64_t v16 = __dst[39];
  uint64_t v70 = __dst[41];
  uint64_t v58 = __dst[0];
  uint64_t v48 = __dst[2];
  uint64_t v49 = __dst[1];
  uint64_t v47 = __dst[3];
  uint64_t v34 = __dst[13];
  if (__dst[41])
  {
    uint64_t v68 = __dst[42];
    uint64_t v69 = __dst[43];
    uint64_t v33 = __dst[39];
    uint64_t v17 = __dst[40];
    outlined copy of Locale.LanguageCode?(__dst[0], __dst[1]);
    outlined copy of Locale.LanguageCode?(v78, v77);
    outlined copy of Locale.LanguageCode?(v74, v73);
    outlined copy of Locale.LanguageCode?(v14, v80);
    outlined copy of Locale.LanguageCode?(v38, v7);
    uint64_t v18 = v51;
    outlined copy of Locale.LanguageCode?(v51, v79);
    uint64_t v19 = v37;
    outlined copy of Locale.LanguageCode?(v37, v81);
    outlined copy of Locale.LanguageCode?(v44, v42);
    outlined copy of Locale.LanguageCode?(v36, v35);
    swift_unknownObjectRetain();
    uint64_t v45 = v17;
    uint64_t v20 = v17;
    uint64_t v16 = v33;
    outlined copy of Locale.LanguageCode?(v20, v70);
  }

  else
  {
    outlined copy of Locale.LanguageCode?(__dst[0], __dst[1]);
    outlined copy of Locale.LanguageCode?(v78, v77);
    outlined copy of Locale.LanguageCode?(v74, v73);
    outlined copy of Locale.LanguageCode?(v14, v80);
    outlined copy of Locale.LanguageCode?(v38, v7);
    uint64_t v18 = v51;
    outlined copy of Locale.LanguageCode?(v51, v79);
    uint64_t v19 = v37;
    outlined copy of Locale.LanguageCode?(v37, v81);
    outlined copy of Locale.LanguageCode?(v44, v42);
    outlined copy of Locale.LanguageCode?(v36, v35);
    swift_unknownObjectRetain();
    uint64_t v45 = 0LL;
    uint64_t v68 = 0LL;
    uint64_t v69 = 0LL;
    uint64_t v70 = 1LL;
  }

  outlined release of Locale.Components(__dst);
  if (v15) {
    uint64_t v21 = v16;
  }
  else {
    uint64_t v21 = 0LL;
  }
  uint64_t v52 = v21;
  if (v15 <= 1) {
    uint64_t v22 = 1LL;
  }
  else {
    uint64_t v22 = v15;
  }
  if (v81) {
    uint64_t v23 = v13;
  }
  else {
    uint64_t v23 = 0LL;
  }
  uint64_t v41 = v23;
  uint64_t v43 = v22;
  if (v81) {
    uint64_t v24 = v12;
  }
  else {
    uint64_t v24 = 0LL;
  }
  if (v81) {
    uint64_t v25 = v19;
  }
  else {
    uint64_t v25 = 0LL;
  }
  uint64_t v39 = v25;
  uint64_t v40 = v24;
  if (v79) {
    uint64_t v26 = v18;
  }
  else {
    uint64_t v26 = 0LL;
  }
  if (v79)
  {
    uint64_t v27 = v11;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v27 = 0LL;
  }

  if (v80) {
    uint64_t v28 = v34;
  }
  else {
    uint64_t v28 = 0LL;
  }
  if (v80) {
    uint64_t v29 = v8;
  }
  else {
    uint64_t v29 = 0LL;
  }
  if (!v80) {
    uint64_t v9 = 0LL;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_LocaleICU.State>._Buffer);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 2os_unfair_lock_unlock(*v0 + 4) = v49;
  *(void *)(v30 + 32) = v48;
  *(void *)(v30 + 40) = v47;
  *(void *)(v30 + 48) = v78;
  *(void *)(v30 + 56) = v77;
  *(void *)(v30 + 6os_unfair_lock_unlock(*v0 + 4) = v76;
  *(void *)(v30 + 72) = v75;
  *(void *)(v30 + 80) = v74;
  *(void *)(v30 + 88) = v73;
  *(void *)(v30 + 96) = v72;
  *(void *)(v30 + 10os_unfair_lock_unlock(*v0 + 4) = v71;
  *(_BYTE *)(v30 + 112) = v46;
  *(void *)(v30 + 120) = v28;
  *(void *)(v30 + 128) = v80;
  *(void *)(v30 + 136) = v29;
  *(void *)(v30 + 14os_unfair_lock_unlock(*v0 + 4) = v9;
  *(void *)(v30 + 152) = v59;
  *(void *)(v30 + 160) = v62;
  *(_DWORD *)(v30 + 560) = 0;
  *(void *)(v30 + 168) = v63;
  *(void *)(v30 + 176) = v66;
  *(void *)(v30 + 18os_unfair_lock_unlock(*v0 + 4) = v26;
  *(void *)(v30 + 192) = v79;
  *(void *)(v30 + 200) = v10;
  *(void *)(v30 + 208) = v27;
  *(void *)(v30 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(_BYTE *)(v30 + 22os_unfair_lock_unlock(*v0 + 4) = v50;
  *(_BYTE *)(v30 + 280) = 0;
  *(_OWORD *)(v30 + 248) = 0u;
  *(_OWORD *)(v30 + 232) = 0u;
  *(_BYTE *)(v30 + 281) = 1;
  *(void *)(v30 + 288) = 0LL;
  *(_BYTE *)(v30 + 296) = 1;
  *(_BYTE *)(v30 + 297) = v53;
  *(void *)(v30 + 30os_unfair_lock_unlock(*v0 + 4) = v39;
  *(void *)(v30 + 312) = v81;
  *(void *)(v30 + 320) = v40;
  *(void *)(v30 + 328) = v41;
  *(_BYTE *)(v30 + 336) = 2;
  *(void *)(v30 + 34os_unfair_lock_unlock(*v0 + 4) = v65;
  *(void *)(v30 + 352) = v60;
  *(void *)(v30 + 360) = v64;
  *(void *)(v30 + 368) = v61;
  *(void *)(v30 + 376) = v57;
  *(void *)(v30 + 38os_unfair_lock_unlock(*v0 + 4) = v54;
  *(void *)(v30 + 392) = v56;
  *(void *)(v30 + 400) = v55;
  *(void *)(v30 + 408) = v43;
  *(void *)(v30 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v52;
  *(void *)(v30 + 42os_unfair_lock_unlock(*v0 + 4) = v45;
  *(void *)(v30 + 432) = v70;
  *(void *)(v30 + 440) = v68;
  *(void *)(v30 + 448) = v69;
  uint64_t v31 = MEMORY[0x18961AFF0];
  *(void *)(v30 + 456) = 0LL;
  *(void *)(v30 + 46os_unfair_lock_unlock(*v0 + 4) = 0LL;
  *(void *)(v30 + 472) = v31;
  *(void *)(v30 + 480) = v31;
  *(void *)(v30 + 488) = v31;
  *(void *)(v30 + 496) = v31;
  *(void *)(v30 + 50os_unfair_lock_unlock(*v0 + 4) = v31;
  *(void *)(v30 + 512) = v31;
  *(void *)(v30 + 520) = v31;
  *(void *)(v30 + 528) = v31;
  *(void *)(v30 + 536) = v31;
  *(void *)(v30 + 54os_unfair_lock_unlock(*v0 + 4) = v31;
  *(void *)(v30 + 552) = v31;
  *(void *)(v67 + 176) = v30;
  *(void *)(v30 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v58;
  *(_OWORD *)(v30 + 26os_unfair_lock_unlock(*v0 + 4) = 0u;
  return v67;
}

uint64_t _LocaleICU.init(name:prefs:disableBundleMatching:)( uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v173 = *(void *)(v7 - 8);
  uint64_t v174 = v7;
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v172 = (char *)&v168 - v12;
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  unint64_t v15 = (char *)&v168 - v14;
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v168 - v17;
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v168 - v19;
  uint64_t v176 = *a3;
  uint64_t v21 = a3[1];
  unint64_t v22 = a3[3];
  uint64_t v180 = a3[2];
  __int128 v23 = *((_OWORD *)a3 + 5);
  __int128 v201 = *((_OWORD *)a3 + 4);
  __int128 v202 = v23;
  __int128 v203 = *((_OWORD *)a3 + 6);
  uint64_t v24 = a3[14];
  uint64_t v178 = a3[15];
  uint64_t v204 = v24;
  __int128 v25 = *((_OWORD *)a3 + 3);
  __int128 v199 = *((_OWORD *)a3 + 2);
  __int128 v200 = v25;
  uint64_t v181 = (void *)a3[16];
  uint64_t v182 = v21;
  int v175 = *((_DWORD *)a3 + 34);
  unint64_t v179 = v22;
  if (a2)
  {
    uint64_t v26 = (const __CFAllocator *)*MEMORY[0x189604DD0];
    uint64_t v27 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v26, v27);
    swift_unknownObjectRelease();
    if (CanonicalLocaleIdentifierFromString)
    {
      id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);
      unint64_t v31 = v30;
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      id v29 = 0LL;
      unint64_t v31 = 0xE000000000000000LL;
    }

    uint64_t v39 = v180;
    uint64_t v37 = v182;
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v40 = (void *)static _LocaleICU.log;
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled((os_log_t)v40, v41))
    {
      swift_bridgeObjectRetain_n();
      Locale.Components.init(identifier:)((uint64_t)v29, v31, &v184);
      if (*((void *)&v189 + 1))
      {
        swift_bridgeObjectRelease();
        outlined release of Locale.Components((uint64_t *)&v184);
      }

      else
      {
        id v64 = v40;
        Logger.init(_:)();
        swift_bridgeObjectRetain();
        uint64_t v65 = (os_log_s *)Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v67 = (uint8_t *)swift_slowAlloc();
          uint64_t v68 = swift_slowAlloc();
          *(void *)&v198[0] = v68;
          *(_DWORD *)uint64_t v67 = 136446210;
          uint64_t v172 = (char *)(v67 + 4);
          swift_bridgeObjectRetain();
          *(void *)&__int128 v196 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( (uint64_t)v29,  v31,  (uint64_t *)v198);
          uint64_t v39 = v180;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl( &dword_182EB1000,  v65,  v66,  "Current locale fetched with overriding locale identifier '%{public}s' which does not have a country code",  v67,  0xCu);
          swift_arrayDestroy();
          MEMORY[0x186E20E60](v68, -1LL, -1LL);
          MEMORY[0x186E20E60](v67, -1LL, -1LL);

          outlined release of Locale.Components((uint64_t *)&v184);
        }

        else
        {
          swift_bridgeObjectRelease_n();
          outlined release of Locale.Components((uint64_t *)&v184);
        }

        (*(void (**)(char *, uint64_t))(v173 + 8))(v20, v174);
        uint64_t v37 = v182;
      }
    }

    uint64_t v70 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    uint64_t v71 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v26, v70);
    swift_unknownObjectRelease();
    if (v71)
    {
      uint64_t v72 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
      unint64_t v74 = v73;
      swift_bridgeObjectRelease();

      unint64_t v38 = v179;
LABEL_114:
      uint64_t v151 = HIBYTE(v74) & 0xF;
      if ((v74 & 0x2000000000000000LL) == 0) {
        uint64_t v151 = v72 & 0xFFFFFFFFFFFFLL;
      }
      if (!v151) {
        swift_bridgeObjectRelease();
      }
      goto LABEL_118;
    }

uint64_t _LocaleICU.__deallocating_deinit()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  _LocaleICU.State.NumberFormattersBox.cleanup()();
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v0 + 32, (uint64_t)v3);
  outlined retain of LocalePreferences?( (uint64_t)v3,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_release();
  return swift_deallocClassInstance();
}

void *_LocaleICU.copy(newCalendarIdentifier:)(char *a1)
{
  uint64_t v2 = v1;
  char v3 = *a1;
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(v4, v5, v14);
  __src[0] = *(_OWORD *)v14;
  __src[1] = *(_OWORD *)&v14[2];
  __src[2] = *(_OWORD *)&v14[4];
  __src[3] = *(_OWORD *)&v14[6];
  __src[4] = *(_OWORD *)&v14[8];
  __src[5] = *(_OWORD *)&v14[10];
  LOBYTE(__src[6]) = v3;
  *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)&v14[13];
  *(_OWORD *)((char *)&__src[7] + 8) = *(_OWORD *)&v14[15];
  *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)&v14[17];
  *(_OWORD *)((char *)&__src[9] + 8) = *(_OWORD *)&v14[19];
  *(_OWORD *)((char *)&__src[10] + 8) = *(_OWORD *)&v14[21];
  *(_OWORD *)((char *)&__src[11] + 8) = *(_OWORD *)&v14[23];
  WORD4(__src[12]) = v15;
  __src[13] = v16;
  __src[14] = v17;
  __src[15] = v18;
  __src[16] = v19;
  __src[17] = v20;
  __src[18] = v21;
  __src[19] = v22;
  __src[20] = v23;
  __src[21] = v24;
  memcpy(__dst, __src, sizeof(__dst));
  Locale.Components.icuIdentifier.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  outlined init with take of LocalePreferences?(v2 + 32, (uint64_t)__dst);
  outlined init with take of LocalePreferences?((uint64_t)__dst, (uint64_t)v12);
  swift_allocObject();
  outlined retain of LocalePreferences?( (uint64_t)__dst,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  uint64_t v10 = specialized _LocaleICU.init(identifier:prefs:)(v7, v9, (uint64_t)v12);
  swift_bridgeObjectRelease();
  outlined release of Locale.Components((uint64_t *)__src);
  lazy protocol witness table accessor for type _LocaleICU and conformance _LocaleICU( &lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU,  (uint64_t)&protocol conformance descriptor for _LocaleICU);
  return v10;
}

uint64_t _LocaleICU.pref(for:)@<X0>(unint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v34);
  if ((_DWORD)result == 1) {
    goto LABEL_7;
  }
  unint64_t v9 = 0xD000000000000010LL;
  if (a1 != 0xD000000000000010LL || a2 != 0x80000001839CFEA0LL)
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0)
    {
      uint64_t v11 = 0xD000000000000015LL;
      if (a1 == 0xD000000000000015LL && a2 == 0x80000001839CFEC0LL
        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if (v42 == 2) {
          goto LABEL_7;
        }
        BOOL v12 = (v42 & 1) == 0;
        uint64_t v13 = 0x736568636E49LL;
        if ((v42 & 1) == 0) {
          uint64_t v13 = 0x74656D69746E6543LL;
        }
        unint64_t v14 = 0xE600000000000000LL;
        unint64_t v15 = 0xEB00000000737265LL;
        goto LABEL_16;
      }

      uint64_t result = 0xD000000000000014LL;
      if (a1 == 0xD000000000000014LL && a2 == 0x80000001839CFEE0LL
        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if (v43 == 2) {
          goto LABEL_7;
        }
        BOOL v12 = (v43 & 1) == 0;
        uint64_t v13 = 0x737569736C6543LL;
        if ((v43 & 1) == 0) {
          uint64_t v13 = 0x65686E6572686146LL;
        }
        unint64_t v14 = 0xE700000000000000LL;
        unint64_t v15 = 0xEA00000000007469LL;
LABEL_16:
        *(void *)(a3 + 2os_unfair_lock_unlock(*v0 + 4) = MEMORY[0x189617FA8];
        if (v12) {
          unint64_t v14 = v15;
        }
        *(void *)a3 = v13;
        *(void *)(a3 + 8) = v14;
        return result;
      }

      uint64_t result = 0xD000000000000011LL;
      if (a1 != 0xD000000000000011LL || a2 != 0x80000001839CFF00LL)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if (a1 != 0xD000000000000017LL || a2 != 0x80000001839CFF20LL)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
            {
              if (a1 == 0xD000000000000017LL && a2 == 0x80000001839CFF40LL
                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                uint64_t result = (uint64_t)v37;
                if (!v37) {
                  goto LABEL_7;
                }
                id v32 = v37;
                goto LABEL_78;
              }

              if (a1 == 0xD000000000000017LL && a2 == 0x80000001839CFF60LL
                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                int v10 = v44;
                goto LABEL_6;
              }

              unint64_t v9 = a1;
              unint64_t v4 = 0xD000000000000017LL;
              if (a1 == 0xD000000000000017LL && a2 == 0x80000001839CFF80LL
                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                int v10 = v45;
                goto LABEL_6;
              }

uint64_t closure #1 in _LocaleICU.identifierDisplayName(for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 456);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v11 & 1) != 0)
    {
      BOOL v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }

    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3, MEMORY[0x189615980]);
  uint64_t v53 = v17;
  uint64_t v13 = v18;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *(void *)(a1 + 456);
  *(void *)(a1 + 456) = 0x8000000000000000LL;
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v22 = *(void *)(v54 + 16);
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }

  else
  {
    char v4 = v20;
    if (*(void *)(v54 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v24,  isUniquelyReferenced_nonNull_native);
      uint64_t v25 = v54;
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v27 & 1)) {
        goto LABEL_52;
      }
      unint64_t v21 = v26;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      uint64_t v28 = (void *)(*(void *)(v25 + 56) + 16 * v21);
      swift_bridgeObjectRelease();
      uint64_t v14 = v53;
      *uint64_t v28 = v53;
      v28[1] = v13;
LABEL_48:
      *(void *)(a1 + 456) = v25;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v25 = v54;
      if ((v20 & 1) != 0) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v48 = a2;
      uint64_t v14 = v53;
      specialized _NativeDictionary._insert(at:key:value:)(v21, v48, a3, v53, v13, v25);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }

  unint64_t v49 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v29 = static _DictionaryStorage.copy(original:)();
  uint64_t v25 = v29;
  if (!*(void *)(v54 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v21 = v49;
    if ((v4 & 1) != 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }

  unint64_t v30 = (void *)(v29 + 64);
  unint64_t v31 = (unint64_t)((1LL << *(_BYTE *)(v25 + 32)) + 63) >> 6;
  uint64_t v50 = v54 + 64;
  int64_t v32 = 0LL;
  *(void *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v54 + 16);
  uint64_t v33 = 1LL << *(_BYTE *)(v54 + 32);
  uint64_t v34 = -1LL;
  if (v33 < 64) {
    uint64_t v34 = ~(-1LL << v33);
  }
  unint64_t v35 = v34 & *(void *)(v54 + 64);
  int64_t v51 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      unint64_t v36 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      int64_t v52 = v32;
      unint64_t v37 = v36 | (v32 << 6);
      goto LABEL_22;
    }

    int64_t v44 = v32 + 1;
    if (__OFADD__(v32, 1LL))
    {
      __break(1u);
      goto LABEL_51;
    }

    if (v44 >= v51) {
      goto LABEL_46;
    }
    unint64_t v45 = *(void *)(v50 + 8 * v44);
    int64_t v46 = v32 + 1;
    if (!v45)
    {
      int64_t v46 = v32 + 2;
      if (v32 + 2 >= v51) {
        goto LABEL_46;
      }
      unint64_t v45 = *(void *)(v50 + 8 * v46);
      if (!v45)
      {
        int64_t v46 = v32 + 3;
        if (v32 + 3 >= v51) {
          goto LABEL_46;
        }
        unint64_t v45 = *(void *)(v50 + 8 * v46);
        if (!v45)
        {
          int64_t v46 = v32 + 4;
          if (v32 + 4 >= v51) {
            goto LABEL_46;
          }
          unint64_t v45 = *(void *)(v50 + 8 * v46);
          if (!v45)
          {
            int64_t v46 = v32 + 5;
            if (v32 + 5 >= v51) {
              goto LABEL_46;
            }
            unint64_t v45 = *(void *)(v50 + 8 * v46);
            if (!v45)
            {
              int64_t v46 = v32 + 6;
              if (v32 + 6 >= v51) {
                goto LABEL_46;
              }
              unint64_t v45 = *(void *)(v50 + 8 * v46);
              if (!v45)
              {
                int64_t v46 = v32 + 7;
                if (v32 + 7 >= v51) {
                  goto LABEL_46;
                }
                unint64_t v45 = *(void *)(v50 + 8 * v46);
                if (!v45) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t closure #1 in _LocaleICU.identifier(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 464);
  if (*(void *)(v8 + 16))
  {
    uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v10 & 1) != 0)
    {
      char v11 = (uint64_t *)(*(void *)(v8 + 56) + 16 * v9);
      uint64_t v12 = v11[1];
      *a4 = *v11;
      a4[1] = v12;
      return swift_bridgeObjectRetain();
    }
  }

  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v83 = a4;
  if ((_BYTE)a2)
  {
    if (a2 != 1)
    {
      swift_bridgeObjectRetain();
      specialized _withFixedCharBuffer(size:_:)(257LL);
      uint64_t v18 = v19;
      swift_bridgeObjectRelease();
      if (v18)
      {
        lazy protocol witness table accessor for type String and conformance String();
        LOBYTE(v13) = lazy protocol witness table accessor for type String and conformance String();
        RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
        swift_bridgeObjectRelease();
        uint64_t v17 = v79;
        uint64_t v18 = v82;
        if (v79 == 6581877 && v82 == 0xE300000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
          swift_bridgeObjectRelease();
          uint64_t v17 = v79;
          uint64_t v18 = v82;
        }

        goto LABEL_15;
      }

uint64_t closure #1 in _LocaleICU.identifierCapturingPreferences.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a1 + 448);
  if (v7)
  {
    *a3 = *(void *)(a1 + 440);
    a3[1] = v7;
    return swift_bridgeObjectRetain();
  }

  outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v35);
  outlined init with take of LocalePreferences?((uint64_t)v35, (uint64_t)v36);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v36) == 1)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 24);
    *(void *)(a1 + 440) = v10;
    *(void *)(a1 + 448) = v9;
    *a3 = v10;
    a3[1] = v9;
    swift_bridgeObjectRetain_n();
    return swift_bridgeObjectRetain();
  }

  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?( (uint64_t)v35,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  Locale.Components.init(identifier:)(v11, v12, __src);
  uint64_t v13 = *((void *)&v37 + 1);
  if (*((void *)&v37 + 1))
  {
    uint64_t v14 = v37;
    Swift::String v15 = String.lowercased()();
    uint64_t v16 = __src[13];
    uint64_t v43 = v4;
    uint64_t v17 = __src[14];
    swift_bridgeObjectRetain();
    outlined consume of Locale.LanguageCode?(v16, v17);
    __src[13] = v14;
    __src[14] = v13;
    *(Swift::String *)&__src[15] = v15;
  }

  uint64_t v18 = v38;
  if (!(void)v38)
  {
LABEL_17:
    __dst[6] = v41;
    __dst[7] = *(_OWORD *)v42;
    *(_OWORD *)((char *)&__dst[7] + 12) = *(_OWORD *)&v42[12];
    __dst[2] = v37;
    __dst[3] = v38;
    __dst[4] = v39;
    __dst[5] = v40;
    __dst[0] = v36[0];
    __dst[1] = v36[1];
    LocalePreferences.measurementSystem.getter((uint64_t)v32);
    uint64_t v23 = v32[1];
    if (v32[1])
    {
      uint64_t v25 = v32[2];
      uint64_t v24 = v32[3];
      uint64_t v26 = v32[0];
      outlined consume of Locale.LanguageCode?(__src[26], __src[27]);
      __src[26] = v26;
      __src[27] = v23;
      __src[28] = v25;
      __src[29] = v24;
    }

    if ((v42[26] & 1) != 0)
    {
      char v27 = 2;
    }

    else
    {
      if ((v42[27] & 1) == 0)
      {
LABEL_24:
        memcpy(__dst, __src, sizeof(__dst));
        memcpy(v32, __src, sizeof(v32));
        outlined retain of Locale.Components((uint64_t *)__dst);
        Locale.Components.icuIdentifier.getter();
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        outlined retain of LocalePreferences?( (uint64_t)v35,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        outlined release of Locale.Components((uint64_t *)__dst);
        swift_bridgeObjectRetain();
        outlined release of Locale.Components((uint64_t *)__dst);
        *(void *)(a1 + 440) = v29;
        *(void *)(a1 + 448) = v31;
        *a3 = v29;
        a3[1] = v31;
        return swift_bridgeObjectRetain();
      }

      char v27 = 1;
    }

    BYTE1(__src[25]) = v27;
    goto LABEL_24;
  }

  swift_bridgeObjectRetain();
  _LocaleICU._lockedCalendarIdentifier(_:)(a1, __dst);
  if (!*(void *)(v18 + 16)
    || (uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(LOBYTE(__dst[0])), (v20 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }

  uint64_t v21 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
  uint64_t result = swift_bridgeObjectRelease();
  if (v21 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_27;
  }

  if (v21 > 0x7FFFFFFF)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    uint64_t result = swift_once();
    goto LABEL_14;
  }

  if (one-time initialization token for weekdays != -1) {
    goto LABEL_28;
  }
LABEL_14:
  if ((unint64_t)v21 <= *((void *)static Locale.Weekday.weekdays + 2))
  {
    LOBYTE(__src[25]) = *((_BYTE *)static Locale.Weekday.weekdays + v21 + 31);
    goto LABEL_17;
  }

  __break(1u);
  return result;
}

char _LocaleICU._lockedCalendarIdentifier(_:)@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 != 16) {
    goto LABEL_10;
  }
  uint64_t v4 = a1;
  uint64_t v5 = specialized static Locale.keywordValue(identifier:key:)();
  if (v6)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
  }

  else
  {
    char v13 = 0;
    String.utf8CString.getter();
    uint64_t KeywordValuesForLocale = ucal_getKeywordValuesForLocale();
    swift_release();
    if (!KeywordValuesForLocale || !uenum_next())
    {
      *(_BYTE *)(v4 + 96) = 0;
      *a2 = 0;
      LOBYTE(a1) = uenum_close();
      return a1;
    }

    uint64_t v7 = String.init(cString:)();
    uint64_t v8 = v11;
    uenum_close();
  }

  v9._uint64_t countAndFlagsBits = v7;
  v9._unint64_t object = v8;
  LOBYTE(a1) = Calendar.Identifier.init(identifierString:)(v9);
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v13;
  if (v13 != 16)
  {
    *(_BYTE *)(v4 + 96) = v13;
LABEL_10:
    *a2 = v3;
    return a1;
  }

  *(_BYTE *)(v4 + 96) = 0;
  *a2 = 0;
  return a1;
}

uint64_t closure #1 in _LocaleICU.languageCode.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  uint64_t result = *(void *)(a1 + 8);
  if (!result)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    return result;
  }

  if (result != 1)
  {
    *a2 = *(void *)a1;
    a2[1] = result;
    return swift_bridgeObjectRetain();
  }

  int64_t v56 = a2;
  uint64_t v4 = swift_bridgeObjectRetain();
  MEMORY[0x1895F8858](v4);
  LODWORD(v6os_unfair_lock_unlock(*v0 + 4) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  swift_release();
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  if (Language > 0)
  {
    v40[Language] = 0;
    uint64_t v6 = MEMORY[0x186E1B634](v40, 0LL);
  }

  uint64_t v8 = v6;
  uint64_t v55 = v7;
  MEMORY[0x1895F8858](v6);
  LODWORD(v6os_unfair_lock_unlock(*v0 + 4) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  uint64_t v10 = swift_release();
  uint64_t v11 = 0LL;
  if ((int)v64 > 0)
  {
    uint64_t v63 = 0LL;
  }

  else
  {
    uint64_t v63 = 0LL;
    if (Script > 0)
    {
      v40[Script] = 0;
      uint64_t v10 = MEMORY[0x186E1B634](v40);
      uint64_t v11 = v10;
      uint64_t v63 = v12;
    }
  }

  MEMORY[0x1895F8858](v10);
  LODWORD(v6os_unfair_lock_unlock(*v0 + 4) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  if ((int)v64 <= 0 && Country > 0)
  {
    v40[Country] = 0;
    uint64_t v14 = MEMORY[0x186E1B634](v40);
    uint64_t v15 = v16;
  }

  swift_bridgeObjectRelease();
  uint64_t v17 = v55;
  if (v55)
  {
    uint64_t v18 = v8;
    Swift::String v20 = String.lowercased()();
    unint64_t object = v20._object;
    uint64_t countAndFlagsBits = v20._countAndFlagsBits;
  }

  else
  {
    uint64_t v18 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    unint64_t object = 0LL;
  }

  unint64_t v60 = object;
  if (v63)
  {
    uint64_t v64 = v11;
    uint64_t v65 = v63;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v22 = String._capitalized()();
    int64_t v61 = v22._object;
    uint64_t v62 = v22._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v15)
    {
LABEL_19:
      uint64_t v59 = v14;
      Swift::String v23 = String.uppercased()();
      uint64_t v57 = v23._object;
      uint64_t v58 = v23._countAndFlagsBits;
      uint64_t v24 = v15;
      goto LABEL_22;
    }
  }

  else
  {
    uint64_t v11 = 0LL;
    int64_t v61 = 0LL;
    uint64_t v62 = 0LL;
    if (v15) {
      goto LABEL_19;
    }
  }

  uint64_t v24 = v15;
  uint64_t v58 = 0LL;
  uint64_t v59 = 0LL;
  uint64_t v57 = 0LL;
LABEL_22:
  uint64_t v25 = *(void *)a1;
  uint64_t v50 = *(void *)(a1 + 8);
  uint64_t v51 = v25;
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v48 = *(void *)(a1 + 24);
  uint64_t v49 = v26;
  uint64_t v47 = *(void *)(a1 + 32);
  uint64_t v46 = *(void *)(a1 + 40);
  uint64_t v45 = *(void *)(a1 + 48);
  uint64_t v44 = *(void *)(a1 + 56);
  __int128 v43 = *(_OWORD *)(a1 + 64);
  uint64_t v42 = *(void *)(a1 + 80);
  uint64_t v41 = *(void *)(a1 + 88);
  uint64_t v27 = v18;
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v17;
  uint64_t v28 = countAndFlagsBits;
  uint64_t v30 = v59;
  uint64_t v29 = v60;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = countAndFlagsBits;
  *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = v29;
  uint64_t v31 = v11;
  uint64_t v33 = v62;
  uint64_t v32 = v63;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v32;
  char v34 = v61;
  *(void *)(a1 + 48) = v33;
  *(void *)(a1 + 56) = v34;
  *(void *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = v30;
  *(void *)(a1 + 72) = v24;
  uint64_t v35 = v57;
  *(void *)(a1 + 80) = v58;
  *(void *)(a1 + 88) = v35;
  uint64_t v53 = v27;
  uint64_t v54 = v28;
  uint64_t v36 = v24;
  outlined copy of Locale.LanguageCode?(v27, v17);
  uint64_t v52 = v31;
  uint64_t v62 = v33;
  uint64_t v63 = v32;
  int64_t v61 = v34;
  outlined copy of Locale.LanguageCode?(v31, v32);
  outlined copy of Locale.LanguageCode?(v30, v36);
  outlined consume of Locale.Language?( v51,  v50,  v49,  v48,  v47,  v46,  v45,  v44,  v43,  *((uint64_t *)&v43 + 1),  v42,  v41,  (void (*)(void))outlined consume of Locale.LanguageCode?);
  if (v17)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v37 = v53;
    outlined consume of Locale.LanguageCode?(v53, v17);
    outlined consume of Locale.LanguageCode?(v52, v63);
    outlined consume of Locale.LanguageCode?(v59, v36);
    swift_bridgeObjectRetain();
    uint64_t result = outlined consume of Locale.LanguageCode?(v37, v17);
    __int128 v38 = v56;
    *int64_t v56 = v37;
    v38[1] = v17;
  }

  else
  {
    outlined consume of Locale.LanguageCode?(v53, 0LL);
    outlined consume of Locale.LanguageCode?(v52, v63);
    uint64_t result = outlined consume of Locale.LanguageCode?(v59, v36);
    __int128 v39 = v56;
    *int64_t v56 = 0LL;
    v39[1] = 0LL;
  }

  return result;
}

uint64_t closure #1 in _LocaleICU.languageCodeDisplayName(for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 472);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v11 & 1) != 0)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }

    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3, MEMORY[0x189615978]);
  uint64_t v53 = v17;
  uint64_t v13 = v18;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *(void *)(a1 + 472);
  *(void *)(a1 + 472) = 0x8000000000000000LL;
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v22 = *(void *)(v54 + 16);
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }

  else
  {
    char v4 = v20;
    if (*(void *)(v54 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v24,  isUniquelyReferenced_nonNull_native);
      uint64_t v25 = v54;
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v27 & 1)) {
        goto LABEL_52;
      }
      unint64_t v21 = v26;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      uint64_t v28 = (void *)(*(void *)(v25 + 56) + 16 * v21);
      swift_bridgeObjectRelease();
      uint64_t v14 = v53;
      *uint64_t v28 = v53;
      v28[1] = v13;
LABEL_48:
      *(void *)(a1 + 472) = v25;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v25 = v54;
      if ((v20 & 1) != 0) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v48 = a2;
      uint64_t v14 = v53;
      specialized _NativeDictionary._insert(at:key:value:)(v21, v48, a3, v53, v13, v25);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }

  unint64_t v49 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v29 = static _DictionaryStorage.copy(original:)();
  uint64_t v25 = v29;
  if (!*(void *)(v54 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v21 = v49;
    if ((v4 & 1) != 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }

  uint64_t v30 = (void *)(v29 + 64);
  unint64_t v31 = (unint64_t)((1LL << *(_BYTE *)(v25 + 32)) + 63) >> 6;
  uint64_t v50 = v54 + 64;
  int64_t v32 = 0LL;
  *(void *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v54 + 16);
  uint64_t v33 = 1LL << *(_BYTE *)(v54 + 32);
  uint64_t v34 = -1LL;
  if (v33 < 64) {
    uint64_t v34 = ~(-1LL << v33);
  }
  unint64_t v35 = v34 & *(void *)(v54 + 64);
  int64_t v51 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      unint64_t v36 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      int64_t v52 = v32;
      unint64_t v37 = v36 | (v32 << 6);
      goto LABEL_22;
    }

    int64_t v44 = v32 + 1;
    if (__OFADD__(v32, 1LL))
    {
      __break(1u);
      goto LABEL_51;
    }

    if (v44 >= v51) {
      goto LABEL_46;
    }
    unint64_t v45 = *(void *)(v50 + 8 * v44);
    int64_t v46 = v32 + 1;
    if (!v45)
    {
      int64_t v46 = v32 + 2;
      if (v32 + 2 >= v51) {
        goto LABEL_46;
      }
      unint64_t v45 = *(void *)(v50 + 8 * v46);
      if (!v45)
      {
        int64_t v46 = v32 + 3;
        if (v32 + 3 >= v51) {
          goto LABEL_46;
        }
        unint64_t v45 = *(void *)(v50 + 8 * v46);
        if (!v45)
        {
          int64_t v46 = v32 + 4;
          if (v32 + 4 >= v51) {
            goto LABEL_46;
          }
          unint64_t v45 = *(void *)(v50 + 8 * v46);
          if (!v45)
          {
            int64_t v46 = v32 + 5;
            if (v32 + 5 >= v51) {
              goto LABEL_46;
            }
            unint64_t v45 = *(void *)(v50 + 8 * v46);
            if (!v45)
            {
              int64_t v46 = v32 + 6;
              if (v32 + 6 >= v51) {
                goto LABEL_46;
              }
              unint64_t v45 = *(void *)(v50 + 8 * v46);
              if (!v45)
              {
                int64_t v46 = v32 + 7;
                if (v32 + 7 >= v51) {
                  goto LABEL_46;
                }
                unint64_t v45 = *(void *)(v50 + 8 * v46);
                if (!v45) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t _LocaleICU.language.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  swift_bridgeObjectRetain();
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v3 = swift_release();
  if (Language <= 0)
  {
    uint64_t v27 = 0LL;
    uint64_t v5 = 0LL;
  }

  else
  {
    v33[Language] = 0;
    uint64_t v3 = MEMORY[0x186E1B634](v33);
    uint64_t v27 = v3;
    uint64_t v5 = v4;
  }

  MEMORY[0x1895F8858](v3);
  LODWORD(v31) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v7 = 0LL;
  uint64_t v29 = v5;
  uint64_t v8 = 0LL;
  if (Script > 0)
  {
    v25[Script] = 0;
    uint64_t v7 = MEMORY[0x186E1B634](v25);
    uint64_t v8 = v9;
  }

  uint64_t v30 = v7;
  MEMORY[0x1895F8858](v7);
  LODWORD(v31) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  if ((int)v31 <= 0 && Country > 0)
  {
    v25[Country] = 0;
    uint64_t v11 = MEMORY[0x186E1B634](v25);
    uint64_t v12 = v13;
  }

  swift_bridgeObjectRelease();
  uint64_t v14 = v29;
  if (v29)
  {
    uint64_t v15 = v27;
    Swift::String v16 = String.lowercased()();
    uint64_t countAndFlagsBits = v16._countAndFlagsBits;
    unint64_t object = v16._object;
  }

  else
  {
    uint64_t v15 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    unint64_t object = 0LL;
  }

  uint64_t v28 = v8;
  if (!v8)
  {
    uint64_t v30 = 0LL;
    unint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    if (v12) {
      goto LABEL_14;
    }
LABEL_16:
    uint64_t v11 = 0LL;
    uint64_t result = 0LL;
    unint64_t v21 = 0LL;
    goto LABEL_17;
  }

  uint64_t v31 = v30;
  uint64_t v32 = v8;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v19 = String._capitalized()();
  unint64_t v26 = v19._object;
  uint64_t v27 = v19._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_16;
  }
LABEL_14:
  Swift::String v22 = String.uppercased()();
  unint64_t v21 = v22._object;
  uint64_t result = v22._countAndFlagsBits;
LABEL_17:
  uint64_t v23 = v28;
  *a1 = v15;
  a1[1] = v14;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  a1[4] = v30;
  a1[5] = v23;
  uint64_t v24 = (uint64_t)v26;
  a1[6] = v27;
  a1[7] = v24;
  a1[8] = v11;
  a1[9] = v12;
  a1[10] = result;
  a1[11] = (uint64_t)v21;
  return result;
}

uint64_t closure #1 in _LocaleICU.countryCodeDisplayName(for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 480);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
    if ((v11 & 1) != 0)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }

    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  uint64_t v53 = v17;
  uint64_t v13 = v18;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *(void *)(a1 + 480);
  *(void *)(a1 + 480) = 0x8000000000000000LL;
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
  uint64_t v22 = *(void *)(v54 + 16);
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }

  else
  {
    char v4 = v20;
    if (*(void *)(v54 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v24,  isUniquelyReferenced_nonNull_native);
      uint64_t v25 = v54;
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
      if ((v4 & 1) != (v27 & 1)) {
        goto LABEL_52;
      }
      unint64_t v21 = v26;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      uint64_t v28 = (void *)(*(void *)(v25 + 56) + 16 * v21);
      swift_bridgeObjectRelease();
      uint64_t v14 = v53;
      *uint64_t v28 = v53;
      v28[1] = v13;
LABEL_48:
      *(void *)(a1 + 480) = v25;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v25 = v54;
      if ((v20 & 1) != 0) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v48 = a2;
      uint64_t v14 = v53;
      specialized _NativeDictionary._insert(at:key:value:)(v21, v48, a3, v53, v13, v25);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }

  unint64_t v49 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v29 = static _DictionaryStorage.copy(original:)();
  uint64_t v25 = v29;
  if (!*(void *)(v54 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v21 = v49;
    if ((v4 & 1) != 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }

  uint64_t v30 = (void *)(v29 + 64);
  unint64_t v31 = (unint64_t)((1LL << *(_BYTE *)(v25 + 32)) + 63) >> 6;
  uint64_t v50 = v54 + 64;
  int64_t v32 = 0LL;
  *(void *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v54 + 16);
  uint64_t v33 = 1LL << *(_BYTE *)(v54 + 32);
  uint64_t v34 = -1LL;
  if (v33 < 64) {
    uint64_t v34 = ~(-1LL << v33);
  }
  unint64_t v35 = v34 & *(void *)(v54 + 64);
  int64_t v51 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      unint64_t v36 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      int64_t v52 = v32;
      unint64_t v37 = v36 | (v32 << 6);
      goto LABEL_22;
    }

    int64_t v44 = v32 + 1;
    if (__OFADD__(v32, 1LL))
    {
      __break(1u);
      goto LABEL_51;
    }

    if (v44 >= v51) {
      goto LABEL_46;
    }
    unint64_t v45 = *(void *)(v50 + 8 * v44);
    int64_t v46 = v32 + 1;
    if (!v45)
    {
      int64_t v46 = v32 + 2;
      if (v32 + 2 >= v51) {
        goto LABEL_46;
      }
      unint64_t v45 = *(void *)(v50 + 8 * v46);
      if (!v45)
      {
        int64_t v46 = v32 + 3;
        if (v32 + 3 >= v51) {
          goto LABEL_46;
        }
        unint64_t v45 = *(void *)(v50 + 8 * v46);
        if (!v45)
        {
          int64_t v46 = v32 + 4;
          if (v32 + 4 >= v51) {
            goto LABEL_46;
          }
          unint64_t v45 = *(void *)(v50 + 8 * v46);
          if (!v45)
          {
            int64_t v46 = v32 + 5;
            if (v32 + 5 >= v51) {
              goto LABEL_46;
            }
            unint64_t v45 = *(void *)(v50 + 8 * v46);
            if (!v45)
            {
              int64_t v46 = v32 + 6;
              if (v32 + 6 >= v51) {
                goto LABEL_46;
              }
              unint64_t v45 = *(void *)(v50 + 8 * v46);
              if (!v45)
              {
                int64_t v46 = v32 + 7;
                if (v32 + 7 >= v51) {
                  goto LABEL_46;
                }
                unint64_t v45 = *(void *)(v50 + 8 * v46);
                if (!v45) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t closure #1 in _LocaleICU.region.getter@<X0>(void *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v73 = *MEMORY[0x1895F89C0];
  uint64_t result = a1[41];
  uint64_t v6 = a1[42];
  uint64_t v7 = a1[43];
  uint64_t v8 = (void *)a1[44];
  if (v6)
  {
    if (v6 == 1)
    {
      specialized static Locale.keywordValue(identifier:key:)();
      if (v9)
      {
        if (String.count.getter() > 2)
        {
          uint64_t v10 = specialized Collection.prefix(_:)(2LL);
          uint64_t v12 = v11;
          uint64_t v14 = v13;
          uint64_t v16 = v15;
          swift_bridgeObjectRelease();
          MEMORY[0x186E1B610](v10, v12, v14, v16);
          swift_bridgeObjectRelease();
          Swift::String v17 = String.uppercased()();
          swift_bridgeObjectRelease();
          Swift::String v18 = String.uppercased()();
          *(Swift::String *)(a1 + 41) = v17;
          *(Swift::String *)(a1 + 43) = v18;
          *a2 = v17;
          a2[1] = v18;
          swift_bridgeObjectRetain();
          return swift_bridgeObjectRetain();
        }

        swift_bridgeObjectRelease();
      }

      uint64_t v19 = swift_bridgeObjectRetain();
      MEMORY[0x1895F8858](v19);
      LODWORD(v63) = 0;
      String.utf8CString.getter();
      int Language = uloc_getLanguage();
      swift_release();
      uint64_t v21 = 0LL;
      uint64_t v22 = 0LL;
      if (Language > 0)
      {
        v50[Language] = 0;
        uint64_t v21 = MEMORY[0x186E1B634](v50, 0LL);
      }

      uint64_t v58 = v22;
      uint64_t v61 = v21;
      MEMORY[0x1895F8858](v21);
      LODWORD(v63) = 0;
      String.utf8CString.getter();
      int Script = uloc_getScript();
      swift_release();
      uint64_t v24 = 0LL;
      if ((int)v63 > 0)
      {
        uint64_t v60 = 0LL;
      }

      else
      {
        uint64_t v60 = 0LL;
        if (Script > 0)
        {
          v50[Script] = 0;
          uint64_t v24 = MEMORY[0x186E1B634](v50);
          uint64_t v60 = v25;
        }
      }

      uint64_t v62 = v24;
      MEMORY[0x1895F8858](v24);
      LODWORD(v63) = 0;
      String.utf8CString.getter();
      int Country = uloc_getCountry();
      swift_release();
      uint64_t v27 = 0LL;
      uint64_t v53 = a2;
      uint64_t v28 = 0LL;
      if ((int)v63 <= 0)
      {
        uint64_t v29 = v60;
        if (Country > 0)
        {
          v50[Country] = 0;
          uint64_t v27 = MEMORY[0x186E1B634](v50, 0LL);
        }
      }

      else
      {
        uint64_t v29 = v60;
      }

      uint64_t v30 = v27;
      uint64_t v57 = v28;
      swift_bridgeObjectRelease();
      uint64_t v31 = v58;
      if (v58)
      {
        uint64_t v32 = v61;
        Swift::String v34 = String.lowercased()();
        uint64_t countAndFlagsBits = v34._countAndFlagsBits;
        unint64_t object = v34._object;
      }

      else
      {
        uint64_t v32 = 0LL;
        uint64_t countAndFlagsBits = 0LL;
        unint64_t object = 0LL;
      }

      uint64_t v52 = countAndFlagsBits;
      if (v29)
      {
        uint64_t v63 = v62;
        uint64_t v64 = v29;
        swift_bridgeObjectRetain_n();
        String.init<A>(_:)();
        Swift::String v36 = String._capitalized()();
        uint64_t v56 = v36._countAndFlagsBits;
        uint64_t v59 = v36._object;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v62 = 0LL;
        uint64_t v56 = 0LL;
        uint64_t v59 = 0LL;
      }

      uint64_t v37 = v57;
      uint64_t v54 = v2;
      uint64_t v61 = v32;
      int64_t v51 = object;
      if (v57)
      {
        Swift::String v38 = String.uppercased()();
        uint64_t v39 = v38._countAndFlagsBits;
        uint64_t v40 = v38._object;
        uint64_t v55 = v37;
        uint64_t v41 = v30;
        uint64_t v42 = v37;
      }

      else
      {
        uint64_t v63 = v32;
        uint64_t v64 = v31;
        uint64_t v65 = v52;
        uint64_t v66 = object;
        uint64_t v43 = v62;
        uint64_t v67 = v62;
        uint64_t v68 = v29;
        uint64_t v69 = v56;
        uint64_t v70 = v59;
        __int128 v71 = 0u;
        __int128 v72 = 0u;
        outlined copy of Locale.LanguageCode?(v32, v31);
        outlined copy of Locale.LanguageCode?(v43, v29);
        outlined copy of Locale.LanguageCode?(0LL, 0LL);
        uint64_t v30 = specialized _withFixedCharBuffer(size:_:)(257LL, &v63);
        uint64_t v40 = v44;
        outlined consume of Locale.LanguageCode?(v32, v31);
        outlined consume of Locale.LanguageCode?(v62, v29);
        outlined consume of Locale.LanguageCode?(0LL, 0LL);
        uint64_t v55 = (uint64_t)v40;
        if (v40)
        {
          Swift::String v45 = String.uppercased()();
          uint64_t v39 = v45._countAndFlagsBits;
          uint64_t v40 = v45._object;
        }

        else
        {
          uint64_t v30 = 0LL;
          uint64_t v55 = 0LL;
          uint64_t v39 = 0LL;
        }

        uint64_t v41 = 0LL;
        uint64_t v42 = v57;
      }

      outlined copy of Locale.LanguageCode?(v41, v42);
      outlined consume of Locale.LanguageCode?(v61, v58);
      outlined consume of Locale.LanguageCode?(v62, v60);
      outlined consume of Locale.LanguageCode?(v41, v42);
      uint64_t v46 = a1[41];
      uint64_t v47 = a1[42];
      uint64_t v48 = v55;
      outlined copy of Locale.LanguageCode?(v30, v55);
      uint64_t result = outlined consume of Locale.Subdivision??(v46, v47);
      a1[41] = v30;
      a1[42] = v48;
      a1[43] = v39;
      a1[44] = v40;
      unint64_t v49 = v53;
      v53->_uint64_t countAndFlagsBits = v30;
      v49->_unint64_t object = (void *)v48;
      v49[1]._uint64_t countAndFlagsBits = v39;
      v49[1]._unint64_t object = v40;
    }

    else
    {
      a2->_uint64_t countAndFlagsBits = result;
      a2->_unint64_t object = (void *)v6;
      a2[1]._uint64_t countAndFlagsBits = v7;
      a2[1]._unint64_t object = v8;
      return outlined copy of Locale.LanguageCode?(result, v6);
    }
  }

  else
  {
    a2->_uint64_t countAndFlagsBits = result;
    a2->_unint64_t object = 0LL;
    a2[1]._uint64_t countAndFlagsBits = v7;
    a2[1]._unint64_t object = v8;
  }

  return result;
}

uint64_t closure #1 in _LocaleICU.subdivision.getter@<X0>(void *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v4 = a1[45];
  uint64_t v3 = a1[46];
  uint64_t v5 = a1[47];
  uint64_t v6 = (void *)a1[48];
  if (v3 == 1)
  {
    uint64_t v8 = specialized static Locale.keywordValue(identifier:key:)();
    if (v9)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v9;
      Swift::String v12 = String.lowercased()();
      a1[45] = v10;
      a1[46] = v11;
      *(Swift::String *)(a1 + 47) = v12;
      a2->_uint64_t countAndFlagsBits = v10;
      a2->_unint64_t object = v11;
      a2[1] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      *(_OWORD *)(a1 + 45) = 0u;
      *(_OWORD *)(a1 + 47) = 0u;
      *a2 = 0u;
      a2[1] = 0u;
    }
  }

  else
  {
    a2->_uint64_t countAndFlagsBits = v4;
    a2->_unint64_t object = (void *)v3;
    a2[1]._uint64_t countAndFlagsBits = v5;
    a2[1]._unint64_t object = v6;
  }

  return outlined copy of Locale.Subdivision??(v4, v3);
}

uint64_t closure #1 in _LocaleICU.variant.getter@<X0>(void *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v4 = a1[51];
  uint64_t v3 = a1[52];
  uint64_t v5 = a1[53];
  uint64_t v6 = (void *)a1[54];
  if (v3 == 1)
  {
    swift_retain();
    uint64_t v8 = specialized _withFixedCharBuffer(size:_:)(257LL);
    uint64_t v10 = v9;
    swift_release();
    if (v10)
    {
      Swift::String v11 = String.lowercased()();
      a1[51] = v8;
      a1[52] = v10;
      *(Swift::String *)(a1 + 53) = v11;
      a2->_uint64_t countAndFlagsBits = v8;
      a2->_unint64_t object = v10;
      a2[1] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      *(_OWORD *)(a1 + 51) = 0u;
      *(_OWORD *)(a1 + 53) = 0u;
      *a2 = 0u;
      a2[1] = 0u;
    }
  }

  else
  {
    a2->_uint64_t countAndFlagsBits = v4;
    a2->_unint64_t object = (void *)v3;
    a2[1]._uint64_t countAndFlagsBits = v5;
    a2[1]._unint64_t object = v6;
  }

  return outlined copy of Locale.Subdivision??(v4, v3);
}

uint64_t closure #1 in _LocaleICU.scriptCode.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v70 = *MEMORY[0x1895F89C0];
  if (*(void *)(a1 + 8) == 1LL)
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    MEMORY[0x1895F8858](v4);
    LODWORD(v68) = 0;
    String.utf8CString.getter();
    int Language = uloc_getLanguage();
    swift_release();
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    if (Language > 0)
    {
      v46[Language] = 0;
      uint64_t v6 = MEMORY[0x186E1B634](v46, 0LL);
    }

    uint64_t v67 = v7;
    uint64_t v65 = v6;
    MEMORY[0x1895F8858](v6);
    LODWORD(v68) = 0;
    String.utf8CString.getter();
    int Script = uloc_getScript();
    swift_release();
    uint64_t v9 = 0LL;
    uint64_t v50 = a2;
    uint64_t v10 = 0LL;
    if ((int)v68 <= 0 && Script > 0)
    {
      v46[Script] = 0;
      uint64_t v9 = MEMORY[0x186E1B634](v46);
      uint64_t v10 = v11;
    }

    uint64_t v66 = v9;
    MEMORY[0x1895F8858](v9);
    LODWORD(v68) = 0;
    String.utf8CString.getter();
    int Country = uloc_getCountry();
    swift_release();
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    if ((int)v68 > 0)
    {
      uint64_t v15 = v67;
    }

    else
    {
      uint64_t v15 = v67;
      if (Country > 0)
      {
        v46[Country] = 0;
        uint64_t v13 = MEMORY[0x186E1B634](v46);
        uint64_t v14 = v16;
      }
    }

    swift_bridgeObjectRelease();
    if (v15)
    {
      Swift::String v19 = String.lowercased()();
      uint64_t countAndFlagsBits = v19._countAndFlagsBits;
      unint64_t object = v19._object;
      uint64_t v21 = v66;
      if (v10) {
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v65 = 0LL;
      uint64_t countAndFlagsBits = 0LL;
      unint64_t object = 0LL;
      uint64_t v21 = v66;
      if (v10)
      {
LABEL_16:
        uint64_t v68 = v21;
        uint64_t v69 = v10;
        uint64_t v22 = countAndFlagsBits;
        swift_bridgeObjectRetain_n();
        String.init<A>(_:)();
        Swift::String v23 = String._capitalized()();
        unint64_t v49 = v23._object;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v22;
        uint64_t v24 = v23._countAndFlagsBits;
        if (v14)
        {
LABEL_17:
          uint64_t v25 = object;
          uint64_t v26 = countAndFlagsBits;
          uint64_t v27 = v21;
          Swift::String v28 = String.uppercased()();
          uint64_t v63 = v28._object;
          uint64_t v64 = v28._countAndFlagsBits;
          uint64_t v29 = v14;
          uint64_t v62 = v13;
          goto LABEL_21;
        }

uint64_t closure #1 in _LocaleICU.scriptCodeDisplayName(for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 488);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
    if ((v11 & 1) != 0)
    {
      Swift::String v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }

    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  uint64_t v52 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  uint64_t v13 = v17;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v53 = *(void *)(a1 + 488);
  *(void *)(a1 + 488) = 0x8000000000000000LL;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
  uint64_t v21 = *(void *)(v53 + 16);
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
  }

  else
  {
    char v4 = v19;
    if (*(void *)(v53 + 24) < v23)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v23,  isUniquelyReferenced_nonNull_native);
      uint64_t v24 = v53;
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
      if ((v4 & 1) != (v26 & 1)) {
        goto LABEL_52;
      }
      unint64_t v20 = v25;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      uint64_t v27 = (uint64_t *)(*(void *)(v24 + 56) + 16 * v20);
      swift_bridgeObjectRelease();
      uint64_t v14 = v52;
      *uint64_t v27 = v52;
      v27[1] = v13;
LABEL_48:
      *(void *)(a1 + 488) = v24;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v24 = v53;
      if ((v19 & 1) != 0) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v47 = a2;
      uint64_t v14 = v52;
      specialized _NativeDictionary._insert(at:key:value:)(v20, v47, a3, v52, v13, v24);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }

  unint64_t v48 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v24 = v28;
  if (!*(void *)(v53 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v20 = v48;
    if ((v4 & 1) != 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }

  uint64_t v29 = (void *)(v28 + 64);
  unint64_t v30 = (unint64_t)((1LL << *(_BYTE *)(v24 + 32)) + 63) >> 6;
  uint64_t v49 = v53 + 64;
  int64_t v31 = 0LL;
  *(void *)(v24 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v53 + 16);
  uint64_t v32 = 1LL << *(_BYTE *)(v53 + 32);
  uint64_t v33 = -1LL;
  if (v32 < 64) {
    uint64_t v33 = ~(-1LL << v32);
  }
  unint64_t v34 = v33 & *(void *)(v53 + 64);
  int64_t v50 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      unint64_t v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      int64_t v51 = v31;
      unint64_t v36 = v35 | (v31 << 6);
      goto LABEL_22;
    }

    int64_t v43 = v31 + 1;
    if (__OFADD__(v31, 1LL))
    {
      __break(1u);
      goto LABEL_51;
    }

    if (v43 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v43);
    int64_t v45 = v31 + 1;
    if (!v44)
    {
      int64_t v45 = v31 + 2;
      if (v31 + 2 >= v50) {
        goto LABEL_46;
      }
      unint64_t v44 = *(void *)(v49 + 8 * v45);
      if (!v44)
      {
        int64_t v45 = v31 + 3;
        if (v31 + 3 >= v50) {
          goto LABEL_46;
        }
        unint64_t v44 = *(void *)(v49 + 8 * v45);
        if (!v44)
        {
          int64_t v45 = v31 + 4;
          if (v31 + 4 >= v50) {
            goto LABEL_46;
          }
          unint64_t v44 = *(void *)(v49 + 8 * v45);
          if (!v44)
          {
            int64_t v45 = v31 + 5;
            if (v31 + 5 >= v50) {
              goto LABEL_46;
            }
            unint64_t v44 = *(void *)(v49 + 8 * v45);
            if (!v44)
            {
              int64_t v45 = v31 + 6;
              if (v31 + 6 >= v50) {
                goto LABEL_46;
              }
              unint64_t v44 = *(void *)(v49 + 8 * v45);
              if (!v44)
              {
                int64_t v45 = v31 + 7;
                if (v31 + 7 >= v50) {
                  goto LABEL_46;
                }
                unint64_t v44 = *(void *)(v49 + 8 * v45);
                if (!v44) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t _LocaleICU.variantCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  closure #1 in _LocaleICU.variant.getter((void *)(v1 + 16), &v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  unint64_t object = v5._object;
  if (!v5._object) {
    return 0LL;
  }
  uint64_t countAndFlagsBits = v5._countAndFlagsBits;
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(countAndFlagsBits, (uint64_t)object);
  return countAndFlagsBits;
}

uint64_t closure #1 in _LocaleICU.variantCodeDisplayName(for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 496);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
    if ((v11 & 1) != 0)
    {
      Swift::String v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }

    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  uint64_t v53 = v17;
  uint64_t v13 = v18;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *(void *)(a1 + 496);
  *(void *)(a1 + 496) = 0x8000000000000000LL;
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
  uint64_t v22 = *(void *)(v54 + 16);
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }

  else
  {
    char v4 = v20;
    if (*(void *)(v54 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v24,  isUniquelyReferenced_nonNull_native);
      uint64_t v25 = v54;
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
      if ((v4 & 1) != (v27 & 1)) {
        goto LABEL_52;
      }
      unint64_t v21 = v26;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      uint64_t v28 = (void *)(*(void *)(v25 + 56) + 16 * v21);
      swift_bridgeObjectRelease();
      uint64_t v14 = v53;
      *uint64_t v28 = v53;
      v28[1] = v13;
LABEL_48:
      *(void *)(a1 + 496) = v25;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v25 = v54;
      if ((v20 & 1) != 0) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v48 = a2;
      uint64_t v14 = v53;
      specialized _NativeDictionary._insert(at:key:value:)(v21, v48, a3, v53, v13, v25);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }

  unint64_t v49 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v29 = static _DictionaryStorage.copy(original:)();
  uint64_t v25 = v29;
  if (!*(void *)(v54 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v21 = v49;
    if ((v4 & 1) != 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }

  unint64_t v30 = (void *)(v29 + 64);
  unint64_t v31 = (unint64_t)((1LL << *(_BYTE *)(v25 + 32)) + 63) >> 6;
  uint64_t v50 = v54 + 64;
  int64_t v32 = 0LL;
  *(void *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v54 + 16);
  uint64_t v33 = 1LL << *(_BYTE *)(v54 + 32);
  uint64_t v34 = -1LL;
  if (v33 < 64) {
    uint64_t v34 = ~(-1LL << v33);
  }
  unint64_t v35 = v34 & *(void *)(v54 + 64);
  int64_t v51 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      unint64_t v36 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      int64_t v52 = v32;
      unint64_t v37 = v36 | (v32 << 6);
      goto LABEL_22;
    }

    int64_t v44 = v32 + 1;
    if (__OFADD__(v32, 1LL))
    {
      __break(1u);
      goto LABEL_51;
    }

    if (v44 >= v51) {
      goto LABEL_46;
    }
    unint64_t v45 = *(void *)(v50 + 8 * v44);
    int64_t v46 = v32 + 1;
    if (!v45)
    {
      int64_t v46 = v32 + 2;
      if (v32 + 2 >= v51) {
        goto LABEL_46;
      }
      unint64_t v45 = *(void *)(v50 + 8 * v46);
      if (!v45)
      {
        int64_t v46 = v32 + 3;
        if (v32 + 3 >= v51) {
          goto LABEL_46;
        }
        unint64_t v45 = *(void *)(v50 + 8 * v46);
        if (!v45)
        {
          int64_t v46 = v32 + 4;
          if (v32 + 4 >= v51) {
            goto LABEL_46;
          }
          unint64_t v45 = *(void *)(v50 + 8 * v46);
          if (!v45)
          {
            int64_t v46 = v32 + 5;
            if (v32 + 5 >= v51) {
              goto LABEL_46;
            }
            unint64_t v45 = *(void *)(v50 + 8 * v46);
            if (!v45)
            {
              int64_t v46 = v32 + 6;
              if (v32 + 6 >= v51) {
                goto LABEL_46;
              }
              unint64_t v45 = *(void *)(v50 + 8 * v46);
              if (!v45)
              {
                int64_t v46 = v32 + 7;
                if (v32 + 7 >= v51) {
                  goto LABEL_46;
                }
                unint64_t v45 = *(void *)(v50 + 8 * v46);
                if (!v45) {
                  break;
                }
              }
            }
          }
        }
      }
    }

CFMutableCharacterSetRef _LocaleICU.exemplarCharacterSet.getter@<X0>(uint64_t *a1@<X8>)
{
  CFMutableCharacterSetRef result = CFCharacterSetCreateMutable(0LL);
  if (!result) {
    goto LABEL_36;
  }
  CFMutableCharacterSetRef v3 = result;
  type metadata accessor for __CharacterSetStorage();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  *(_BYTE *)(v4 + 2os_unfair_lock_unlock(*v0 + 4) = 1;
  uint64_t v5 = swift_slowAlloc();
  int ItemCount = uset_getItemCount();
  if (ItemCount < 0) {
LABEL_31:
  }
    __break(1u);
  int v7 = ItemCount;
  int64_t v32 = a1;
  if (!ItemCount)
  {
LABEL_29:
    *int64_t v32 = v4;
    swift_retain();
    MEMORY[0x186E20E60](v5, -1LL, -1LL);
    swift_release();
    uset_close();
    return (CFMutableCharacterSetRef)ulocdata_close();
  }

  int v8 = 0;
  int v33 = ItemCount;
  while (1)
  {
    if (v7 == v8)
    {
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      goto LABEL_31;
    }

    int Item = uset_getItem();
    if (Item > 0) {
      break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      char v16 = *(_BYTE *)(v4 + 24);
      uint64_t v17 = (const __CFCharacterSet *)*(id *)(v4 + 16);
      CFMutableCharacterSetRef result = CFCharacterSetCreateMutableCopy(0LL, v17);
      CFMutableCharacterSetRef v18 = result;
      if ((v16 & 1) != 0)
      {
        if (!result) {
          goto LABEL_37;
        }
      }

      else if (!result)
      {
        goto LABEL_38;
      }

      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v18;
      *(_BYTE *)(v26 + 2os_unfair_lock_unlock(*v0 + 4) = 1;
      swift_release();
      uint64_t v4 = v26;
      int v7 = v33;
    }

    char v27 = *(__CFCharacterSet **)(v4 + 16);
    if ((*(_BYTE *)(v4 + 24) & 1) != 0)
    {
      v34.location = 0LL;
      v34.length = 1LL;
      CFCharacterSetAddCharactersInRange(v27, v34);
      goto LABEL_7;
    }

    uint64_t v28 = v27;
    CFMutableCharacterSetRef result = CFCharacterSetCreateMutableCopy(0LL, v28);
    if (!result) {
      goto LABEL_33;
    }
    CFMutableCharacterSetRef v29 = result;
    unint64_t v30 = result;
    v35.location = 0LL;
    v35.length = 1LL;
    CFCharacterSetAddCharactersInRange(v30, v35);

    unint64_t v31 = *(void **)(v4 + 16);
    *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v29;
    *(_BYTE *)(v4 + 2os_unfair_lock_unlock(*v0 + 4) = 1;

LABEL_6:
    int v7 = v33;
LABEL_7:
    if (v7 == ++v8) {
      goto LABEL_29;
    }
  }

  id v12 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithCharacters_length_,  v5,  Item);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

  String.init<A>(_:)();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    char v13 = *(_BYTE *)(v4 + 24);
    uint64_t v14 = (const __CFCharacterSet *)*(id *)(v4 + 16);
    CFMutableCharacterSetRef result = CFCharacterSetCreateMutableCopy(0LL, v14);
    CFMutableCharacterSetRef v15 = result;
    if ((v13 & 1) != 0)
    {
      if (!result) {
        goto LABEL_34;
      }
    }

    else if (!result)
    {
      goto LABEL_35;
    }

    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v15;
    *(_BYTE *)(v19 + 2os_unfair_lock_unlock(*v0 + 4) = 1;
    swift_release();
    uint64_t v4 = v19;
  }

  char v20 = *(void **)(v4 + 16);
  if ((*(_BYTE *)(v4 + 24) & 1) != 0)
  {
    uint64_t v9 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    unint64_t v10 = v20;
    CFCharacterSetAddCharactersInString(v10, v9);
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    goto LABEL_6;
  }

  unint64_t v21 = v20;
  CFMutableCharacterSetRef result = CFCharacterSetCreateMutableCopy(0LL, v21);
  if (result)
  {
    CFMutableCharacterSetRef v22 = result;
    BOOL v23 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    uint64_t v24 = v22;
    CFCharacterSetAddCharactersInString(v24, v23);

    swift_unknownObjectRelease();
    uint64_t v25 = *(void **)(v4 + 16);
    *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v22;
    *(_BYTE *)(v4 + 2os_unfair_lock_unlock(*v0 + 4) = 1;
    swift_bridgeObjectRelease();

    goto LABEL_6;
  }

  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t closure #1 in _LocaleICU.calendarIdentifierDisplayName(for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 504);
  if (*(void *)(v7 + 16))
  {
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v9 & 1) != 0)
    {
      unint64_t v10 = (uint64_t *)(*(void *)(v7 + 56) + 16 * v8);
      uint64_t v11 = v10[1];
      *a3 = *v10;
      a3[1] = v11;
      return swift_bridgeObjectRetain();
    }
  }

  uint64_t v13 = swift_retain();
  uint64_t v14 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v13, a2);
  uint64_t v16 = v15;
  swift_release();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = *(void *)(a1 + 504);
  *(void *)(a1 + 50os_unfair_lock_unlock(*v0 + 4) = 0x8000000000000000LL;
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v20 = *(void *)(v43 + 16);
  BOOL v21 = (v18 & 1) == 0;
  uint64_t v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
  }

  else
  {
    char v3 = v18;
    if (*(void *)(v43 + 24) < v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v22,  isUniquelyReferenced_nonNull_native);
      uint64_t v23 = v43;
      uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v25 & 1)) {
        goto LABEL_50;
      }
      unint64_t v19 = v24;
      if ((v3 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_11:
      uint64_t v26 = (uint64_t *)(*(void *)(v23 + 56) + 16 * v19);
      swift_bridgeObjectRelease();
      *uint64_t v26 = v14;
      v26[1] = v16;
LABEL_47:
      *(void *)(a1 + 50os_unfair_lock_unlock(*v0 + 4) = v23;
      uint64_t result = swift_bridgeObjectRelease();
      *a3 = v14;
      a3[1] = v16;
      return result;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v23 = v43;
      if ((v18 & 1) != 0) {
        goto LABEL_11;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v19, a2, v14, v16, (void *)v23);
      goto LABEL_47;
    }
  }

  unint64_t v40 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, String?>);
  uint64_t v27 = static _DictionaryStorage.copy(original:)();
  uint64_t v23 = v27;
  if (!*(void *)(v43 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    unint64_t v19 = v40;
    if ((v3 & 1) != 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }

  uint64_t v28 = (void *)(v27 + 64);
  unint64_t v29 = (unint64_t)((1LL << *(_BYTE *)(v23 + 32)) + 63) >> 6;
  __src = (void *)(v43 + 64);
  int64_t v30 = 0LL;
  *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v43 + 16);
  uint64_t v31 = 1LL << *(_BYTE *)(v43 + 32);
  uint64_t v32 = -1LL;
  if (v31 < 64) {
    uint64_t v32 = ~(-1LL << v31);
  }
  unint64_t v33 = v32 & *(void *)(v43 + 64);
  int64_t v42 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    if (v33)
    {
      unint64_t v34 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      unint64_t v35 = v34 | (v30 << 6);
      goto LABEL_21;
    }

    int64_t v37 = v30 + 1;
    if (__OFADD__(v30, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v37 >= v42) {
      goto LABEL_45;
    }
    unint64_t v38 = *((void *)__src + v37);
    ++v30;
    if (!v38)
    {
      int64_t v30 = v37 + 1;
      if (v37 + 1 >= v42) {
        goto LABEL_45;
      }
      unint64_t v38 = *((void *)__src + v30);
      if (!v38)
      {
        int64_t v30 = v37 + 2;
        if (v37 + 2 >= v42) {
          goto LABEL_45;
        }
        unint64_t v38 = *((void *)__src + v30);
        if (!v38)
        {
          int64_t v30 = v37 + 3;
          if (v37 + 3 >= v42) {
            goto LABEL_45;
          }
          unint64_t v38 = *((void *)__src + v30);
          if (!v38)
          {
            int64_t v30 = v37 + 4;
            if (v37 + 4 >= v42) {
              goto LABEL_45;
            }
            unint64_t v38 = *((void *)__src + v30);
            if (!v38)
            {
              int64_t v30 = v37 + 5;
              if (v37 + 5 >= v42) {
                goto LABEL_45;
              }
              unint64_t v38 = *((void *)__src + v30);
              if (!v38)
              {
                int64_t v30 = v37 + 6;
                if (v37 + 6 >= v42) {
                  goto LABEL_45;
                }
                unint64_t v38 = *((void *)__src + v30);
                if (!v38) {
                  break;
                }
              }
            }
          }
        }
      }
    }

void closure #1 in _LocaleICU.calendar.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = v33[0];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v7 = static CalendarCache.cache + 16;
  uint64_t v8 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in CalendarCache.fixed(_:)(v7, v6, &v36);
  if (!v3)
  {
    os_unfair_lock_unlock(v8);
    swift_release_n();
    uint64_t v10 = *((void *)&v36 + 1);
    uint64_t v9 = v36;
    uint64_t ObjectType = swift_getObjectType();
    outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v32);
    outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)v33);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v33) == 1)
    {
LABEL_22:
      *a3 = v9;
      a3[1] = v10;
      return;
    }

    uint64_t v12 = v34;
    if (v34 && *(void *)(v34 + 16) && (uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v14 & 1) != 0))
    {
      int v15 = 0;
      uint64_t v37 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
      uint64_t v16 = v35;
      if (!v35) {
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v37 = 0LL;
      int v15 = 1;
      uint64_t v16 = v35;
      if (!v35) {
        goto LABEL_16;
      }
    }

    if (*(void *)(v16 + 16))
    {
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
      if ((v18 & 1) != 0)
      {
        char v19 = 0;
        uint64_t v20 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
        if (v15)
        {
LABEL_17:
          outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)v31);
          outlined retain of LocalePreferences(v31);
LABEL_18:
          if ((v19 & 1) == 0)
          {
            uint64_t v25 = swift_getObjectType();
            if (v20 != (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 72))(v25, v10))
            {
              v31[0] = 0LL;
              v31[1] = 0LL;
              uint64_t v29 = 0LL;
              uint64_t v30 = 0LL;
              uint64_t v26 = (*(uint64_t (**)(void *, uint64_t *, void, uint64_t, uint64_t, void, uint64_t, uint64_t))(v10 + 112))( v31,  &v29,  0LL,  1LL,  v20,  0LL,  v25,  v10);
              uint64_t v10 = v27;
              swift_unknownObjectRelease();
              uint64_t v9 = v26;
            }
          }

          outlined retain of LocalePreferences?( (uint64_t)v32,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
          goto LABEL_22;
        }

void closure #1 in _LocaleICU.timeZone.getter(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 392);
  uint64_t v5 = *(void *)(a1 + 400);
  if (v4 != 1)
  {
    *a2 = v4;
    a2[1] = v5;
    goto LABEL_12;
  }

  uint64_t v7 = (void *)(a1 + 392);
  uint64_t v8 = specialized static Locale.keywordValue(identifier:key:)();
  if (!v9)
  {
    void *v7 = 0LL;
    v7[1] = 0LL;
    goto LABEL_11;
  }

  unint64_t v10 = v9;
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  v18[3] = (uint64_t)&v16;
  uint64_t v11 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in TimeZoneCache.fixed(_:)(v17, v10, v18);
  if (!v2)
  {
    os_unfair_lock_unlock(v11);
    swift_release_n();
    uint64_t v12 = v18[0];
    uint64_t v13 = v18[1];
    swift_bridgeObjectRelease();
    if (v12)
    {
      uint64_t v14 = *(void *)(a1 + 392);
      swift_unknownObjectRetain();
      outlined consume of TimeZone??(v14);
      *(void *)(a1 + 392) = v12;
      *(void *)(a1 + 400) = v13;
      *a2 = v12;
      a2[1] = v13;
LABEL_12:
      outlined copy of TimeZone??(v4);
      return;
    }

    outlined consume of TimeZone??(*(void *)(a1 + 392));
    int v15 = v16;
    *uint64_t v16 = 0LL;
    v15[1] = 0LL;
LABEL_11:
    *a2 = 0LL;
    a2[1] = 0LL;
    goto LABEL_12;
  }

  os_unfair_lock_unlock(v11);
  __break(1u);
}

uint64_t closure #1 in _LocaleICU.collationIdentifierDisplayName(for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 512);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
    if ((v11 & 1) != 0)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }

    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  v54._uint64_t countAndFlagsBits = a2;
  v54._unint64_t object = a3;
  uint64_t v52 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, v54);
  uint64_t v13 = v17;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v53 = *(void *)(a1 + 512);
  *(void *)(a1 + 512) = 0x8000000000000000LL;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
  uint64_t v21 = *(void *)(v53 + 16);
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
  }

  else
  {
    char v4 = v19;
    if (*(void *)(v53 + 24) < v23)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v23,  isUniquelyReferenced_nonNull_native);
      uint64_t v24 = v53;
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
      if ((v4 & 1) != (v26 & 1)) {
        goto LABEL_52;
      }
      unint64_t v20 = v25;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      uint64_t v27 = (uint64_t *)(*(void *)(v24 + 56) + 16 * v20);
      swift_bridgeObjectRelease();
      uint64_t v14 = v52;
      *uint64_t v27 = v52;
      v27[1] = v13;
LABEL_48:
      *(void *)(a1 + 512) = v24;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v24 = v53;
      if ((v19 & 1) != 0) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v47 = a2;
      uint64_t v14 = v52;
      specialized _NativeDictionary._insert(at:key:value:)(v20, v47, a3, v52, v13, v24);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }

  unint64_t v48 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v24 = v28;
  if (!*(void *)(v53 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v20 = v48;
    if ((v4 & 1) != 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }

  uint64_t v29 = (void *)(v28 + 64);
  unint64_t v30 = (unint64_t)((1LL << *(_BYTE *)(v24 + 32)) + 63) >> 6;
  uint64_t v49 = v53 + 64;
  int64_t v31 = 0LL;
  *(void *)(v24 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v53 + 16);
  uint64_t v32 = 1LL << *(_BYTE *)(v53 + 32);
  uint64_t v33 = -1LL;
  if (v32 < 64) {
    uint64_t v33 = ~(-1LL << v32);
  }
  unint64_t v34 = v33 & *(void *)(v53 + 64);
  int64_t v50 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      unint64_t v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      int64_t v51 = v31;
      unint64_t v36 = v35 | (v31 << 6);
      goto LABEL_22;
    }

    int64_t v43 = v31 + 1;
    if (__OFADD__(v31, 1LL))
    {
      __break(1u);
      goto LABEL_51;
    }

    if (v43 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v43);
    int64_t v45 = v31 + 1;
    if (!v44)
    {
      int64_t v45 = v31 + 2;
      if (v31 + 2 >= v50) {
        goto LABEL_46;
      }
      unint64_t v44 = *(void *)(v49 + 8 * v45);
      if (!v44)
      {
        int64_t v45 = v31 + 3;
        if (v31 + 3 >= v50) {
          goto LABEL_46;
        }
        unint64_t v44 = *(void *)(v49 + 8 * v45);
        if (!v44)
        {
          int64_t v45 = v31 + 4;
          if (v31 + 4 >= v50) {
            goto LABEL_46;
          }
          unint64_t v44 = *(void *)(v49 + 8 * v45);
          if (!v44)
          {
            int64_t v45 = v31 + 5;
            if (v31 + 5 >= v50) {
              goto LABEL_46;
            }
            unint64_t v44 = *(void *)(v49 + 8 * v45);
            if (!v44)
            {
              int64_t v45 = v31 + 6;
              if (v31 + 6 >= v50) {
                goto LABEL_46;
              }
              unint64_t v44 = *(void *)(v49 + 8 * v45);
              if (!v44)
              {
                int64_t v45 = v31 + 7;
                if (v31 + 7 >= v50) {
                  goto LABEL_46;
                }
                unint64_t v44 = *(void *)(v49 + 8 * v45);
                if (!v44) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t closure #1 in _LocaleICU.collation.getter@<X0>(void *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v4 = a1[13];
  uint64_t v3 = a1[14];
  uint64_t v5 = a1[15];
  uint64_t v6 = (void *)a1[16];
  if (v3)
  {
    a2->_uint64_t countAndFlagsBits = v4;
    a2->_unint64_t object = (void *)v3;
    a2[1]._uint64_t countAndFlagsBits = v5;
    a2[1]._unint64_t object = v6;
  }

  else
  {
    uint64_t v8 = specialized static Locale.keywordValue(identifier:key:)();
    if (v9)
    {
      uint64_t v10 = v8;
      char v11 = v9;
      Swift::String v12 = String.lowercased()();
      a1[13] = v10;
      a1[14] = v11;
      *(Swift::String *)(a1 + 15) = v12;
      a2->_uint64_t countAndFlagsBits = v10;
      a2->_unint64_t object = v11;
      a2[1] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      if (one-time initialization token for standard != -1) {
        swift_once();
      }
      uint64_t v14 = static Locale.Collation.standard;
      uint64_t v13 = *(void **)algn_18C5D40D8;
      __int128 v15 = xmmword_18C5D40E0;
      a1[13] = static Locale.Collation.standard;
      a1[14] = v13;
      *(_OWORD *)(a1 + 15) = v15;
      a2->_uint64_t countAndFlagsBits = v14;
      a2->_unint64_t object = v13;
      a2[1] = (Swift::String)v15;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }
  }

  return outlined copy of Locale.LanguageCode?(v4, v3);
}

uint64_t _LocaleICU.usesMetricSystem.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  closure #1 in _LocaleICU.measurementSystem.getter((void *)(v1 + 16), v0, (uint64_t)v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  uint64_t v2 = v8;
  uint64_t v3 = v9;
  if (one-time initialization token for us != -1) {
    swift_once();
  }
  if (v2 == (void)xmmword_18C5C6138 && v3 == *((void *)&xmmword_18C5C6138 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0) {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t _LocaleICU.forceMeasurementSystem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v10);
  if ((_DWORD)result == 1) {
    goto LABEL_11;
  }
  if (v10[0] != 2)
  {
    if ((v10[0] & 1) == 0)
    {
      outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v8);
      outlined retain of LocalePreferences(v8);
      if (one-time initialization token for us != -1) {
        swift_once();
      }
      uint64_t v4 = &static Locale.MeasurementSystem.us;
      goto LABEL_19;
    }

    if (v11 != 2)
    {
      if ((v11 & 1) != 0)
      {
        outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v8);
        outlined retain of LocalePreferences(v8);
        if (one-time initialization token for uk != -1) {
          swift_once();
        }
        uint64_t v4 = &static Locale.MeasurementSystem.uk;
        goto LABEL_19;
      }

      goto LABEL_13;
    }

uint64_t closure #1 in _LocaleICU.measurementSystem.getter@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1[36];
  uint64_t v7 = a1[37];
  uint64_t v6 = a1[38];
  uint64_t v8 = a1[39];
  if (!v7)
  {
    uint64_t v30 = v5;
    uint64_t v10 = specialized static Locale.keywordValue(identifier:key:)();
    if (v11)
    {
      uint64_t v12 = v10;
      uint64_t v13 = v11;
      BOOL v14 = v10 == 0x6C61697265706D69LL && v11 == 0xE800000000000000LL;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        if (one-time initialization token for uk != -1) {
          swift_once();
        }
        uint64_t v21 = static Locale.MeasurementSystem.uk;
        uint64_t v20 = *(void *)algn_18C5D4118;
        __int128 v22 = xmmword_18C5D4120;
        a1[36] = static Locale.MeasurementSystem.uk;
        a1[37] = v20;
        *((_OWORD *)a1 + 19) = v22;
        *(void *)a3 = v21;
        *(void *)(a3 + 8) = v20;
        *(_OWORD *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v22;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        goto LABEL_30;
      }

      Swift::String v23 = String.lowercased()();
      a1[36] = v12;
      a1[37] = v13;
      *((Swift::String *)a1 + 19) = v23;
      *(void *)a3 = v12;
      *(void *)(a3 + 8) = v13;
      *(Swift::String *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v23;
    }

    else
    {
      outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v35);
      outlined init with take of LocalePreferences?((uint64_t)v35, (uint64_t)v36);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v36) == 1
        || (LocalePreferences.measurementSystem.getter((uint64_t)&v31), (uint64_t v15 = v32) == 0))
      {
        String.utf8CString.getter();
        int MeasurementSystem = ulocdata_getMeasurementSystem();
        swift_release();
        if (MeasurementSystem == 2)
        {
          if (one-time initialization token for uk != -1) {
            swift_once();
          }
          uint64_t v24 = &static Locale.MeasurementSystem.uk;
        }

        else if (MeasurementSystem == 1)
        {
          if (one-time initialization token for us != -1) {
            swift_once();
          }
          uint64_t v24 = &static Locale.MeasurementSystem.us;
        }

        else
        {
          if (one-time initialization token for metric != -1) {
            swift_once();
          }
          uint64_t v24 = &static Locale.MeasurementSystem.metric;
        }

        uint64_t v25 = v24[2];
        uint64_t v26 = v24[3];
        uint64_t v28 = *v24;
        uint64_t v27 = v24[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a1[36] = v28;
        a1[37] = v27;
        a1[38] = v25;
        a1[39] = v26;
        *(void *)a3 = v28;
        *(void *)(a3 + 8) = v27;
        *(void *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
        *(void *)(a3 + 2os_unfair_lock_unlock(*v0 + 4) = v26;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_30;
      }

      uint64_t v16 = v33;
      uint64_t v17 = v34;
      uint64_t v18 = v31;
      a1[36] = v31;
      a1[37] = v15;
      a1[38] = v16;
      a1[39] = v17;
      *(void *)a3 = v18;
      *(void *)(a3 + 8) = v15;
      *(void *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v16;
      *(void *)(a3 + 2os_unfair_lock_unlock(*v0 + 4) = v17;
    }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_30:
    uint64_t v5 = v30;
    return outlined copy of Locale.LanguageCode?(v5, v7);
  }

  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(void *)(a3 + 2os_unfair_lock_unlock(*v0 + 4) = v8;
  return outlined copy of Locale.LanguageCode?(v5, v7);
}

uint64_t _LocaleICU.temperatureUnit.getter@<X0>(char *a1@<X8>)
{
  uint64_t result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v8);
  if ((_DWORD)result == 1 || v9 == 2)
  {
    uint64_t v4 = *(os_unfair_lock_s **)(v1 + 176);
    swift_retain();
    os_unfair_lock_lock(v4 + 140);
    closure #1 in _LocaleICU.temperatureUnit.getter((uint64_t)&v4[4], &v6);
    os_unfair_lock_unlock(v4 + 140);
    uint64_t result = swift_release();
    char v5 = v6;
  }

  else
  {
    char v5 = v9 & 1;
  }

  *a1 = v5;
  return result;
}

uint64_t closure #1 in _LocaleICU.temperatureUnit.getter@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(result + 320);
  if (v3 != 2)
  {
    char v6 = v3 & 1;
    goto LABEL_5;
  }

  uint64_t v4 = result;
  String.utf8CString.getter();
  int UnitsForUsage = uameasfmt_getUnitsForUsage();
  uint64_t result = swift_release();
  if (UnitsForUsage >= 1)
  {
    char v6 = 1;
    *(_BYTE *)(v4 + 320) = 1;
LABEL_5:
    *a2 = v6;
    return result;
  }

  *(_BYTE *)(v4 + 320) = 1;
  *a2 = 1;
  return result;
}

uint64_t closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)@<X0>( UChar *a1@<X0>, uint64_t *a2@<X8>)
{
  if (!a1) {
    __break(1u);
  }
  uint64_t v4 = String.utf8CString.getter();
  u_charsToUChars((const char *)(v4 + 32), a1, 3);
  swift_release();
  a1[3] = 0;
  String.utf8CString.getter();
  uint64_t Name = ucurr_getName();
  uint64_t result = swift_release();
  if (Name)
  {
    uint64_t result = specialized String.init(_utf16:)(Name, 0LL);
    *a2 = result;
    if (v7) {
      a2[1] = v7;
    }
    else {
      a2[1] = 0LL;
    }
  }

  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  return result;
}

uint64_t closure #1 in _LocaleICU.decimalSeparator.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v12[18] = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v11);
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v12);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v12) == 1)
  {
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = v12[14];
    swift_bridgeObjectRetain();
  }

  char v6 = _LocaleICU.State.NumberFormattersBox.formatter(for:identifier:numberSymbols:)(1LL, v4, v3, v5);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6)
  {
    MEMORY[0x1895F8858](result);
    v10[19] = 0;
    int Symbol = unum_getSymbol();
    uint64_t result = 0LL;
    uint64_t v9 = 0LL;
    if (Symbol <= 32 && Symbol > 0) {
      uint64_t result = specialized String.init(_utf16:)((uint64_t)v10, Symbol);
    }
    *a2 = result;
    a2[1] = v9;
  }

  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  return result;
}

uint64_t closure #1 in _LocaleICU.currencySymbolDisplayName(for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 520);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v11 & 1) != 0)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }

    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  uint64_t v52 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  uint64_t v13 = v17;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v53 = *(void *)(a1 + 520);
  *(void *)(a1 + 520) = 0x8000000000000000LL;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v21 = *(void *)(v53 + 16);
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
  }

  else
  {
    char v4 = v19;
    if (*(void *)(v53 + 24) < v23)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v23,  isUniquelyReferenced_nonNull_native);
      uint64_t v24 = v53;
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v26 & 1)) {
        goto LABEL_52;
      }
      unint64_t v20 = v25;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      uint64_t v27 = (uint64_t *)(*(void *)(v24 + 56) + 16 * v20);
      swift_bridgeObjectRelease();
      uint64_t v14 = v52;
      *uint64_t v27 = v52;
      v27[1] = v13;
LABEL_48:
      *(void *)(a1 + 520) = v24;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v24 = v53;
      if ((v19 & 1) != 0) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v47 = a2;
      uint64_t v14 = v52;
      specialized _NativeDictionary._insert(at:key:value:)(v20, v47, a3, v52, v13, v24);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }

  unint64_t v48 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v24 = v28;
  if (!*(void *)(v53 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v20 = v48;
    if ((v4 & 1) != 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }

  uint64_t v29 = (void *)(v28 + 64);
  unint64_t v30 = (unint64_t)((1LL << *(_BYTE *)(v24 + 32)) + 63) >> 6;
  uint64_t v49 = v53 + 64;
  int64_t v31 = 0LL;
  *(void *)(v24 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v53 + 16);
  uint64_t v32 = 1LL << *(_BYTE *)(v53 + 32);
  uint64_t v33 = -1LL;
  if (v32 < 64) {
    uint64_t v33 = ~(-1LL << v32);
  }
  unint64_t v34 = v33 & *(void *)(v53 + 64);
  int64_t v50 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      unint64_t v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      int64_t v51 = v31;
      unint64_t v36 = v35 | (v31 << 6);
      goto LABEL_22;
    }

    int64_t v43 = v31 + 1;
    if (__OFADD__(v31, 1LL))
    {
      __break(1u);
      goto LABEL_51;
    }

    if (v43 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v43);
    int64_t v45 = v31 + 1;
    if (!v44)
    {
      int64_t v45 = v31 + 2;
      if (v31 + 2 >= v50) {
        goto LABEL_46;
      }
      unint64_t v44 = *(void *)(v49 + 8 * v45);
      if (!v44)
      {
        int64_t v45 = v31 + 3;
        if (v31 + 3 >= v50) {
          goto LABEL_46;
        }
        unint64_t v44 = *(void *)(v49 + 8 * v45);
        if (!v44)
        {
          int64_t v45 = v31 + 4;
          if (v31 + 4 >= v50) {
            goto LABEL_46;
          }
          unint64_t v44 = *(void *)(v49 + 8 * v45);
          if (!v44)
          {
            int64_t v45 = v31 + 5;
            if (v31 + 5 >= v50) {
              goto LABEL_46;
            }
            unint64_t v44 = *(void *)(v49 + 8 * v45);
            if (!v44)
            {
              int64_t v45 = v31 + 6;
              if (v31 + 6 >= v50) {
                goto LABEL_46;
              }
              unint64_t v44 = *(void *)(v49 + 8 * v45);
              if (!v44)
              {
                int64_t v45 = v31 + 7;
                if (v31 + 7 >= v50) {
                  goto LABEL_46;
                }
                unint64_t v44 = *(void *)(v49 + 8 * v45);
                if (!v44) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t closure #1 in _LocaleICU.currencyCode.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v12[18] = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v11);
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v12);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v12) == 1)
  {
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = v12[14];
    swift_bridgeObjectRetain();
  }

  char v6 = _LocaleICU.State.NumberFormattersBox.formatter(for:identifier:numberSymbols:)(2LL, v4, v3, v5);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6)
  {
    MEMORY[0x1895F8858](result);
    v10[133] = 0;
    int TextAttribute = unum_getTextAttribute();
    uint64_t result = 0LL;
    uint64_t v9 = 0LL;
    if (TextAttribute <= 257 && TextAttribute > 0) {
      uint64_t result = specialized String.init(_utf16:)((uint64_t)v10, TextAttribute);
    }
    *a2 = result;
    a2[1] = v9;
  }

  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  return result;
}

uint64_t closure #1 in _LocaleICU.currencyCodeDisplayName(for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 528);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v11 & 1) != 0)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }

    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  uint64_t v52 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  uint64_t v13 = v17;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v53 = *(void *)(a1 + 528);
  *(void *)(a1 + 528) = 0x8000000000000000LL;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v21 = *(void *)(v53 + 16);
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
  }

  else
  {
    char v4 = v19;
    if (*(void *)(v53 + 24) < v23)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v23,  isUniquelyReferenced_nonNull_native);
      uint64_t v24 = v53;
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v26 & 1)) {
        goto LABEL_52;
      }
      unint64_t v20 = v25;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      uint64_t v27 = (uint64_t *)(*(void *)(v24 + 56) + 16 * v20);
      swift_bridgeObjectRelease();
      uint64_t v14 = v52;
      *uint64_t v27 = v52;
      v27[1] = v13;
LABEL_48:
      *(void *)(a1 + 528) = v24;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v24 = v53;
      if ((v19 & 1) != 0) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v47 = a2;
      uint64_t v14 = v52;
      specialized _NativeDictionary._insert(at:key:value:)(v20, v47, a3, v52, v13, v24);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }

  unint64_t v48 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v24 = v28;
  if (!*(void *)(v53 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v20 = v48;
    if ((v4 & 1) != 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }

  uint64_t v29 = (void *)(v28 + 64);
  unint64_t v30 = (unint64_t)((1LL << *(_BYTE *)(v24 + 32)) + 63) >> 6;
  uint64_t v49 = v53 + 64;
  int64_t v31 = 0LL;
  *(void *)(v24 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v53 + 16);
  uint64_t v32 = 1LL << *(_BYTE *)(v53 + 32);
  uint64_t v33 = -1LL;
  if (v32 < 64) {
    uint64_t v33 = ~(-1LL << v32);
  }
  unint64_t v34 = v33 & *(void *)(v53 + 64);
  int64_t v50 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      unint64_t v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      int64_t v51 = v31;
      unint64_t v36 = v35 | (v31 << 6);
      goto LABEL_22;
    }

    int64_t v43 = v31 + 1;
    if (__OFADD__(v31, 1LL))
    {
      __break(1u);
      goto LABEL_51;
    }

    if (v43 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v43);
    int64_t v45 = v31 + 1;
    if (!v44)
    {
      int64_t v45 = v31 + 2;
      if (v31 + 2 >= v50) {
        goto LABEL_46;
      }
      unint64_t v44 = *(void *)(v49 + 8 * v45);
      if (!v44)
      {
        int64_t v45 = v31 + 3;
        if (v31 + 3 >= v50) {
          goto LABEL_46;
        }
        unint64_t v44 = *(void *)(v49 + 8 * v45);
        if (!v44)
        {
          int64_t v45 = v31 + 4;
          if (v31 + 4 >= v50) {
            goto LABEL_46;
          }
          unint64_t v44 = *(void *)(v49 + 8 * v45);
          if (!v44)
          {
            int64_t v45 = v31 + 5;
            if (v31 + 5 >= v50) {
              goto LABEL_46;
            }
            unint64_t v44 = *(void *)(v49 + 8 * v45);
            if (!v44)
            {
              int64_t v45 = v31 + 6;
              if (v31 + 6 >= v50) {
                goto LABEL_46;
              }
              unint64_t v44 = *(void *)(v49 + 8 * v45);
              if (!v44)
              {
                int64_t v45 = v31 + 7;
                if (v31 + 7 >= v50) {
                  goto LABEL_46;
                }
                unint64_t v44 = *(void *)(v49 + 8 * v45);
                if (!v44) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t closure #1 in _LocaleICU.currency.getter@<X0>(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v7 = a1 + 136;
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void **)(v7 + 24);
  if (v6 == 1)
  {
    uint64_t v15 = v5;
    swift_retain();
    uint64_t v10 = specialized _withFixedUCharBuffer(size:defaultIsError:_:)(257LL, 0);
    uint64_t v12 = v11;
    swift_release();
    if (v12)
    {
      Swift::String v13 = String.lowercased()();
      *(void *)(a1 + 136) = v10;
      *(void *)(a1 + 14os_unfair_lock_unlock(*v0 + 4) = v12;
      *(Swift::String *)(a1 + 152) = v13;
      a2->_uint64_t countAndFlagsBits = v10;
      a2->_unint64_t object = v12;
      a2[1] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      *(_OWORD *)uint64_t v7 = 0u;
      *(_OWORD *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
      *a2 = 0u;
      a2[1] = 0u;
    }

    uint64_t v5 = v15;
  }

  else
  {
    a2->_uint64_t countAndFlagsBits = v5;
    a2->_unint64_t object = (void *)v6;
    a2[1]._uint64_t countAndFlagsBits = v8;
    a2[1]._unint64_t object = v9;
  }

  return outlined copy of Locale.Subdivision??(v5, v6);
}

id _LocaleICU.collatorIdentifier.getter()
{
  if (v12)
  {
    uint64_t v2 = (const __CFAllocator *)*MEMORY[0x189604DD0];
    uint64_t v3 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    outlined retain of LocalePreferences?( (uint64_t)v9,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    swift_bridgeObjectRetain();
    CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v2, v3);
    swift_unknownObjectRelease();
    if (CanonicalLanguageIdentifierFromString)
    {
      id v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
      swift_bridgeObjectRelease();

      outlined retain of LocalePreferences?( (uint64_t)v9,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      return v1;
    }

    swift_bridgeObjectRelease();
    outlined retain of LocalePreferences?( (uint64_t)v9,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    return 0LL;
  }

  if (v11 && *(void *)(v11 + 16))
  {
    uint64_t v5 = (const __CFAllocator *)*MEMORY[0x189604DD0];
    uint64_t v6 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    outlined retain of LocalePreferences?( (uint64_t)v9,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    swift_bridgeObjectRetain();
    uint64_t v7 = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v5, v6);
    swift_unknownObjectRelease();
    if (v7)
    {
      id v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

      outlined retain of LocalePreferences?( (uint64_t)v9,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      swift_bridgeObjectRelease();
      return v1;
    }

    outlined retain of LocalePreferences?( (uint64_t)v9,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    swift_bridgeObjectRelease();
    return 0LL;
  }

uint64_t _LocaleICU.delimiterString(_:)()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  v5[69] = 0;
  String.utf8CString.getter();
  ulocdata_open();
  uint64_t v0 = swift_release();
  MEMORY[0x1895F8858](v0);
  v5[68] = 0;
  int Delimiter = ulocdata_getDelimiter();
  uint64_t v2 = 0LL;
  if (Delimiter <= 130 && Delimiter > 0) {
    uint64_t v2 = specialized String.init(_utf16:)((uint64_t)v5, Delimiter);
  }
  ulocdata_close();
  return v2;
}

uint64_t _LocaleICU.forceHourCycle.getter@<X0>(char *a1@<X8>)
{
  uint64_t result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v6);
  if ((_DWORD)result == 1)
  {
    char v4 = 4;
  }

  else if ((v6[138] & 1) != 0)
  {
    char v4 = 2;
  }

  else if ((v6[139] & 1) != 0)
  {
    char v4 = 1;
  }

  else
  {
    char v4 = 4;
  }

  *a1 = v4;
  return result;
}

uint64_t closure #1 in _LocaleICU.hourCycle.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v181 = *MEMORY[0x1895F89C0];
  int v6 = *(unsigned __int8 *)(result + 281);
  if (v6 != 4)
  {
    *a3 = v6;
    return result;
  }

  uint64_t v8 = result;
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  v11._uint64_t countAndFlagsBits = specialized static Locale.keywordValue(identifier:key:)();
  if (v11._object)
  {
    uint64_t result = Locale.HourCycle.init(rawValue:)(v11, (char *)v167);
    char v12 = v167[0];
    if (LOBYTE(v167[0]) != 4) {
      goto LABEL_17;
    }
  }

  outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v169);
  outlined init with take of LocalePreferences?((uint64_t)v169, (uint64_t)v170);
  uint64_t result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v170);
  if ((_DWORD)result == 1) {
    goto LABEL_5;
  }
  if ((v170[138] & 1) != 0)
  {
    char v12 = 2;
    goto LABEL_17;
  }

  if ((v170[139] & 1) != 0)
  {
    char v12 = 1;
LABEL_17:
    *(_BYTE *)(v8 + 281) = v12;
    *a3 = v12;
    return result;
  }

uint64_t _LocaleICU.forceFirstWeekday(_:)@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = *a1;
  outlined init with take of LocalePreferences?(v2 + 32, (uint64_t)v8);
  outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v9);
  uint64_t result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v9);
  if ((_DWORD)result != 1
    && (uint64_t v6 = v10) != 0
    && *(void *)(v10 + 16)
    && (uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v7 & 1) != 0))
  {
    uint64_t result = *(void *)(*(void *)(v6 + 56) + 8 * result);
    if (result < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else if (result <= 0x7FFFFFFF)
    {
      return Locale.Weekday.init(_:)(result, a2);
    }

    __break(1u);
  }

  else
  {
    *a2 = 7;
  }

  return result;
}

uint64_t closure #1 in _LocaleICU.firstDayOfWeek.getter@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  int v4 = *(unsigned __int8 *)(result + 208);
  if (v4 != 7) {
    goto LABEL_25;
  }
  uint64_t v6 = result;
  v7._uint64_t countAndFlagsBits = specialized static Locale.keywordValue(identifier:key:)();
  if (!v7._object || (uint64_t result = Locale.Weekday.init(rawValue:)(v7, v19), LOBYTE(v4) = v19[0], v19[0] == 7))
  {
    outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v18);
    outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v19);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v19) != 1)
    {
      if (v20)
      {
        _LocaleICU._lockedCalendarIdentifier(_:)(v6, &v15);
        uint64_t v8 = v15;
        outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v16);
        uint64_t v9 = v17;
        if (v17)
        {
          if (*(void *)(v17 + 16))
          {
            uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v8);
            if ((v10 & 1) != 0)
            {
              uint64_t v11 = *(void *)(*(void *)(v9 + 56) + 8 * result);
              if (v11 < (uint64_t)0xFFFFFFFF80000000LL)
              {
LABEL_27:
                __break(1u);
                goto LABEL_28;
              }

              if (v11 > 0x7FFFFFFF)
              {
LABEL_28:
                __break(1u);
                goto LABEL_29;
              }

              if ((int)v11 > 0 && v11 < 8)
              {
                if (one-time initialization token for weekdays == -1)
                {
LABEL_22:
                  LOBYTE(vos_unfair_lock_unlock(*v0 + 4) = *((_BYTE *)static Locale.Weekday.weekdays + v11 + 31);
                  goto LABEL_24;
                }

uint64_t _LocaleICU.weekendRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  closure #1 in _LocaleICU.firstDayOfWeek.getter((uint64_t)&v3[4], v1, &v6);
  os_unfair_lock_unlock(v3 + 140);
  swift_release();
  char v4 = v6;
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  closure #1 in _LocaleICU.weekendRange.getter((uint64_t)&v3[4], v4, a1);
  os_unfair_lock_unlock(v3 + 140);
  return swift_release();
}

uint64_t closure #1 in _LocaleICU.weekendRange.getter@<X0>( uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5 = v3;
  if ((*(_BYTE *)(result + 265) & 1) == 0)
  {
    char v29 = *(_BYTE *)(result + 264);
    __int128 v30 = *(_OWORD *)(result + 232);
    *(_OWORD *)a3 = *(_OWORD *)(result + 216);
    *(_OWORD *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v30;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 248);
    *(_BYTE *)(a3 + 48) = v29 & 1;
    return result;
  }

  LOBYTE(v6) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 0LL;
  uint64_t v45 = inited + 32;
  *(void *)(inited + 40) = 0LL;
  *(void *)(inited + 48) = 0LL;
  *(_DWORD *)(inited + 56) = 0;
  if (one-time initialization token for weekdays != -1) {
    goto LABEL_122;
  }
LABEL_3:
  uint64_t v8 = static Locale.Weekday.weekdays;
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized Collection<>.firstIndex(of:)(v6, (uint64_t)v8);
  char v11 = v10;
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
    __break(1u);
LABEL_129:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  unint64_t v12 = v9 + 1;
  if (__OFADD__(v9, 1LL))
  {
    __break(1u);
    goto LABEL_124;
  }

  if ((v12 & 0x8000000000000000LL) != 0 || HIDWORD(v12)) {
    goto LABEL_129;
  }
  unsigned int v13 = v12 % 7;
  *(_DWORD *)(inited + 32) = v12;
  *(_DWORD *)(inited + 36) = v12 % 7 + 1;
  unsigned int v14 = v12 % 7 + 2;
  if (v13 == 6) {
    unsigned int v14 = 1;
  }
  unsigned int v15 = v14 % 7;
  *(_DWORD *)(inited + 40) = v14;
  *(_DWORD *)(inited + 4os_unfair_lock_unlock(*v0 + 4) = v14 % 7 + 1;
  unsigned int v16 = v14 % 7 + 2;
  if (v15 == 6) {
    unsigned int v16 = 1;
  }
  unsigned int v17 = v16 % 7;
  *(_DWORD *)(inited + 48) = v16;
  *(_DWORD *)(inited + 52) = v16 % 7 + 1;
  unsigned int v18 = v16 % 7 + 2;
  if (v17 == 6) {
    unsigned int v18 = 1;
  }
  *(_DWORD *)(inited + 56) = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UCalendarWeekdayType>);
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183729DF0;
  *(void *)(v6 + 32) = 0LL;
  Swift::String v44 = (_DWORD *)(v6 + 32);
  *(void *)(v6 + 40) = 0LL;
  *(void *)(v6 + 48) = 0LL;
  *(_DWORD *)(v6 + 56) = 0;
  unsigned int v19 = String.utf8CString.getter();
  ucal_open();
  swift_release();
  if ((*(_DWORD *)(inited + 32) & 0x80000000) != 0)
  {
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    if (v22 != 5)
    {
      if (*(_DWORD *)(v6 + 52) == 1)
      {
LABEL_83:
        uint64_t v32 = 5LL;
        goto LABEL_87;
      }

      if (v22 != 6)
      {
        if (*(_DWORD *)(v6 + 56) != 1) {
          goto LABEL_98;
        }
LABEL_86:
        uint64_t v32 = 6LL;
LABEL_87:
        unsigned int v24 = *(_DWORD *)(v45 + 4 * v32);
        int v35 = 1;
        if ((v21 & 1) == 0)
        {
          int64x2_t v39 = (int64x2_t)*(unint64_t *)&v20;
          unsigned int v21 = 1;
          goto LABEL_118;
        }

        char v36 = 0;
        if ((_DWORD)inited == 1) {
          goto LABEL_89;
        }
LABEL_100:
        if (v5 >= 7)
        {
LABEL_101:
          if (*(_DWORD *)(v6 + 56) == 1)
          {
            uint64_t v42 = 6LL;
            goto LABEL_115;
          }

          if (*(_DWORD *)(v6 + 52) == 1)
          {
            uint64_t v42 = 5LL;
            goto LABEL_115;
          }

          if (*(_DWORD *)(v6 + 48) == 1)
          {
LABEL_106:
            uint64_t v42 = 4LL;
            goto LABEL_115;
          }

          if (*(_DWORD *)(v6 + 44) == 1)
          {
LABEL_108:
            uint64_t v42 = 3LL;
            goto LABEL_115;
          }

          if (*(_DWORD *)(v6 + 40) == 1)
          {
LABEL_110:
            uint64_t v42 = 2LL;
            goto LABEL_115;
          }

          if (*(_DWORD *)(v6 + 36) == 1)
          {
LABEL_112:
            uint64_t v42 = 1LL;
            goto LABEL_115;
          }

          if (*v44 == 1)
          {
LABEL_114:
            uint64_t v42 = 0LL;
LABEL_115:
            if ((v36 & 1) != 0) {
              goto LABEL_116;
            }
            unsigned int v19 = *(_DWORD *)(v45 + 4 * v42);
            int64x2_t v39 = vdupq_n_s64(1uLL);
            *(double *)v39.i64 = v20;
            unsigned int v21 = v35;
LABEL_118:
            *(double *)a3 = v4;
            *(void *)(a3 + 8) = v21;
            *(int64x2_t *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v39;
            *(void *)(a3 + 32) = v24;
            *(void *)(a3 + 40) = v19;
            *(_BYTE *)(a3 + 48) = 0;
LABEL_119:
            ucal_close();
            swift_setDeallocating();
            return swift_setDeallocating();
          }

uint64_t closure #1 in _LocaleICU.minimumDaysInFirstWeek.getter@<X0>(__int128 a1@<X1:X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 280) == 1)
  {
    double v4 = (_BYTE *)(a1 + 280);
    outlined init with take of LocalePreferences?(*((void *)&a1 + 1) + 32LL, (uint64_t)v8);
    outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v9);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v9) == 1
      || (_LocaleICU._lockedCalendarIdentifier(_:)(v2, &v7),
          *(Swift::Int_optional *)&a1 = _LocaleICU.forceMinDaysInFirstWeek(_:)((Foundation::Calendar::Identifier)&v7),
          (BYTE8(a1) & 1) != 0))
    {
      int v7 = 0;
      String.utf8CString.getter();
      ucal_open();
      swift_release();
      if (v7 <= 0) {
        uint64_t Attribute = (int)ucal_getAttribute();
      }
      else {
        uint64_t Attribute = 1LL;
      }
      *(void *)(v2 + 272) = Attribute;
      *double v4 = 0;
      *a2 = Attribute;
      *(void *)&a1 = ucal_close();
    }

    else
    {
      *(void *)(v2 + 272) = a1;
      *double v4 = 0;
      *a2 = a1;
    }
  }

  else
  {
    *a2 = *(void *)(a1 + 272);
  }

  return a1;
}

Swift::Int_optional __swiftcall _LocaleICU.forceMinDaysInFirstWeek(_:)(Foundation::Calendar::Identifier a1)
{
  uint64_t v2 = *(unsigned __int8 *)a1;
  outlined init with take of LocalePreferences?(v1 + 32, (uint64_t)v8);
  outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v9);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v9) != 1
    && (uint64_t v3 = v10) != 0
    && *(void *)(v10 + 16)
    && (uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    Swift::Bool v6 = 0;
    Swift::Int v7 = *(void *)(*(void *)(v3 + 56) + 8 * v4);
  }

  else
  {
    Swift::Int v7 = 0LL;
    Swift::Bool v6 = 1;
  }

  result.value = v7;
  result.is_nil = v6;
  return result;
}

uint64_t _LocaleICU._lockedNumberingSystem(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1[21];
  uint64_t v4 = a1[22];
  uint64_t v6 = a1[23];
  uint64_t v7 = a1[24];
  if (v4)
  {
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v6;
    a2[3] = v7;
  }

  else
  {
    uint64_t v9 = *(void *)(v2 + 16);
    uint64_t v10 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    Locale.Components.init(identifier:)(v9, v10, v16);
    uint64_t v11 = v17;
    if (v17)
    {
      uint64_t v13 = v18;
      uint64_t v12 = v19;
      uint64_t v14 = v16[21];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined release of Locale.Components(v16);
      a1[21] = v14;
      a1[22] = v11;
      a1[23] = v13;
      a1[24] = v12;
      *a2 = v14;
      a2[1] = v11;
      a2[2] = v13;
      a2[3] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_bridgeObjectRetain();
      Locale.NumberingSystem.init(localeIdentifier:)(a2);
      outlined release of Locale.Components(v16);
    }
  }

  return outlined copy of Locale.LanguageCode?(v5, v4);
}

uint64_t closure #1 in _LocaleICU.numberingSystem.getter@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a1[21];
  uint64_t v5 = a1[22];
  uint64_t v7 = a1[23];
  uint64_t v8 = a1[24];
  if (v5)
  {
    *a3 = v6;
    a3[1] = v5;
    a3[2] = v7;
    a3[3] = v8;
  }

  else
  {
    uint64_t v21 = v3;
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    Locale.Components.init(identifier:)(v11, v10, v17);
    uint64_t v12 = v18;
    if (v18)
    {
      uint64_t v13 = v20;
      uint64_t v16 = v19;
      uint64_t v14 = v17[21];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined release of Locale.Components(v17);
      a1[21] = v14;
      a1[22] = v12;
      a1[23] = v16;
      a1[24] = v13;
      *a3 = v14;
      a3[1] = v12;
      a3[2] = v16;
      a3[3] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_bridgeObjectRetain();
      Locale.NumberingSystem.init(localeIdentifier:)(a3);
      outlined release of Locale.Components(v17);
    }
  }

  return outlined copy of Locale.LanguageCode?(v6, v5);
}

void closure #1 in _LocaleICU.availableNumberingSystems.getter( void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  __dst[44] = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1[25];
  if (v5)
  {
    *a3 = v5;
    swift_bridgeObjectRetain();
    return;
  }

  uint64_t v64 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.NumberingSystem>);
  unint64_t v7 = swift_allocObject();
  uint64_t v59 = v7 + 32;
  if (one-time initialization token for latn != -1) {
LABEL_36:
  }
    swift_once();
  uint64_t v8 = qword_18C5D40F8;
  unint64_t v10 = *((void *)&xmmword_18C5D4100 + 1);
  unint64_t v9 = xmmword_18C5D4100;
  *(void *)(v7 + 32) = static Locale.NumberingSystem.latn;
  *(void *)(v7 + 40) = v8;
  *(_OWORD *)(v7 + 48) = __PAIR128__(v10, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v56 = v4;
  uint64_t v58 = a2;
  _LocaleICU._lockedNumberingSystem(_:)(v4, (uint64_t *)(v7 + 64));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Locale.NumberingSystem>);
  uint64_t v11 = static _SetStorage.allocate(capacity:)();
  char v12 = 0;
  uint64_t v13 = 0LL;
  uint64_t v62 = v11 + 56;
  do
  {
    char v14 = v12;
    unsigned int v15 = (uint64_t *)(v59 + 32 * v13);
    a2 = v15[1];
    uint64_t v60 = *v15;
    uint64_t v16 = v15[2];
    uint64_t v17 = v15[3];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1LL << *(_BYTE *)(v11 + 32);
    unint64_t v7 = v18 & ~v19;
    unint64_t v20 = v7 >> 6;
    uint64_t v21 = *(void *)(v62 + 8 * (v7 >> 6));
    uint64_t v22 = 1LL << v7;
    if (((1LL << v7) & v21) != 0)
    {
      uint64_t v4 = *(void **)(v11 + 48);
      unint64_t v23 = &v4[4 * v7];
      BOOL v24 = v23[2] == v16 && v23[3] == v17;
      if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_5:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }

      uint64_t v25 = ~v19;
      while (1)
      {
        unint64_t v7 = (v7 + 1) & v25;
        unint64_t v20 = v7 >> 6;
        uint64_t v21 = *(void *)(v62 + 8 * (v7 >> 6));
        uint64_t v22 = 1LL << v7;
        if ((v21 & (1LL << v7)) == 0) {
          break;
        }
        char v26 = &v4[4 * v7];
        BOOL v27 = v26[2] == v16 && v26[3] == v17;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_5;
        }
      }
    }

    *(void *)(v62 + 8 * v20) = v22 | v21;
    uint64_t v28 = (void *)(*(void *)(v11 + 48) + 32 * v7);
    *uint64_t v28 = v60;
    v28[1] = a2;
    void v28[2] = v16;
    void v28[3] = v17;
    uint64_t v29 = *(void *)(v11 + 16);
    BOOL v30 = __OFADD__(v29, 1LL);
    uint64_t v31 = v29 + 1;
    if (v30)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }

    *(void *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v31;
LABEL_6:
    char v12 = 1;
    uint64_t v13 = 1LL;
  }

  while ((v14 & 1) == 0);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v66 = v11;
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183729E20;
  Swift::String v33 = String.lowercased()();
  *(void *)(v32 + 32) = 0x746C7561666564LL;
  *(void *)(v32 + 40) = 0xE700000000000000LL;
  *(Swift::String *)(v32 + 48) = v33;
  int v34 = (uint64_t *)(v32 + 56);
  Swift::String v35 = String.lowercased()();
  *(void *)(v32 + 6os_unfair_lock_unlock(*v0 + 4) = 0x65766974616ELL;
  *(void *)(v32 + 72) = 0xE600000000000000LL;
  *(Swift::String *)(v32 + 80) = v35;
  Swift::String v36 = String.lowercased()();
  *(void *)(v32 + 96) = 0x6F69746964617274LL;
  *(void *)(v32 + 10os_unfair_lock_unlock(*v0 + 4) = 0xEB000000006C616ELL;
  *(Swift::String *)(v32 + 112) = v36;
  Swift::String v37 = String.lowercased()();
  uint64_t v4 = 0LL;
  *(void *)(v32 + 128) = 0x65636E616E6966LL;
  *(void *)(v32 + 136) = 0xE700000000000000LL;
  *(Swift::String *)(v32 + 14os_unfair_lock_unlock(*v0 + 4) = v37;
  uint64_t v63 = *(void *)(v58 + 16);
  uint64_t v59 = v32;
  uint64_t v61 = *(void *)(v58 + 24);
  while (1)
  {
    uint64_t v39 = *(v34 - 1);
    uint64_t v38 = *v34;
    uint64_t v41 = *(v34 - 3);
    uint64_t v40 = *(v34 - 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Locale.Components.init(identifier:)(v63, v61, v68);
    outlined consume of Locale.LanguageCode?(*((uint64_t *)&v68[10] + 1), *(uint64_t *)&v68[11]);
    *((void *)&v68[10] + 1) = v41;
    *(void *)&v68[11] = v40;
    *((void *)&v68[11] + 1) = v39;
    *(void *)&v68[12] = v38;
    __src[0] = v68[0];
    __src[1] = v68[1];
    __src[2] = v68[2];
    __src[3] = v68[3];
    __src[4] = v68[4];
    __src[5] = v68[5];
    LOBYTE(__src[6]) = v68[6];
    *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)((char *)&v68[6] + 8);
    *(_OWORD *)((char *)&__src[7] + 8) = *(_OWORD *)((char *)&v68[7] + 8);
    *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)((char *)&v68[8] + 8);
    *(_OWORD *)((char *)&__src[9] + 8) = *(_OWORD *)((char *)&v68[9] + 8);
    *((void *)&__src[10] + 1) = v41;
    *(void *)&__src[11] = v40;
    *((void *)&__src[11] + 1) = v39;
    *(void *)&__src[12] = v38;
    WORD4(__src[12]) = WORD4(v68[12]);
    __src[13] = v68[13];
    __src[14] = v68[14];
    __src[15] = v68[15];
    __src[16] = v68[16];
    __src[17] = v68[17];
    __src[18] = v68[18];
    __src[19] = v68[19];
    __src[20] = v68[20];
    __src[21] = v68[21];
    memcpy(__dst, __src, 0x160uLL);
    outlined retain of Locale.Components((uint64_t *)__src);
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v42 = static LocaleCache.cache + 16;
    os_unfair_lock_t v43 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
    swift_retain_n();
    os_unfair_lock_lock(v43);
    closure #1 in LocaleCache.fixedComponents(_:)(v42, __dst, v67);
    Swift::String v44 = v43;
    if (v64) {
      break;
    }
    os_unfair_lock_unlock(v43);
    swift_release_n();
    outlined release of Locale.Components((uint64_t *)__src);
    uint64_t v45 = *((void *)&v67[0] + 1);
    a2 = *(void *)&v67[0];
    uint64_t ObjectType = swift_getObjectType();
    Swift::String v47 = *(void (**)(uint64_t, uint64_t))(v45 + 64);
    swift_unknownObjectRetain();
    v47(ObjectType, v45);
    swift_unknownObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v48 = unumsys_open();
    swift_release();
    if (v48)
    {
      Swift::String v44 = (os_unfair_lock_s *)MEMORY[0x186E21754](v48);
      if (!v44)
      {
        __break(1u);
        break;
      }

      unint64_t v49 = String.init(cString:)();
      unint64_t v51 = v50;
      Swift::String v52 = String.lowercased()();
      unint64_t countAndFlagsBits = v52._countAndFlagsBits;
      unint64_t object = v52._object;
    }

    else
    {
      unint64_t v49 = static Locale.NumberingSystem.latn;
      unint64_t v51 = qword_18C5D40F8;
      unint64_t object = (void *)*((void *)&xmmword_18C5D4100 + 1);
      unint64_t countAndFlagsBits = xmmword_18C5D4100;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    unumsys_close();
    specialized Set._Variant.insert(_:)(v65, v49, v51, countAndFlagsBits, (unint64_t)object);
    swift_unknownObjectRelease();
    unint64_t v7 = v65[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    memcpy(v67, v68, sizeof(v67));
    outlined release of Locale.Components((uint64_t *)v67);
    if (v4 == (void *)3)
    {
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      uint64_t v55 = specialized _copyCollectionToContiguousArray<A>(_:)(v66);
      swift_bridgeObjectRelease();
      swift_retain();
      swift_bridgeObjectRelease();
      v56[25] = v55;
      *a3 = v55;
      return;
    }

    uint64_t v4 = (void *)((char *)v4 + 1);
    v34 += 4;
    if ((unint64_t)v4 >= *(void *)(v59 + 16))
    {
      __break(1u);
      goto LABEL_35;
    }
  }

  os_unfair_lock_unlock(v44);
  __break(1u);
}

uint64_t _LocaleICU.customDateFormat(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  outlined init with take of LocalePreferences?(v1 + 32, (uint64_t)v8);
  outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v9);
  uint64_t v4 = v10;
  if (!v10) {
    return 0LL;
  }
  if (!*(void *)(v10 + 16)) {
    return 0LL;
  }
  uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
  if ((v6 & 1) == 0) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(*(void *)(v4 + 56) + 16 * v5);
  swift_bridgeObjectRetain();
  return v3;
}

void *protocol witness for _LocaleProtocol.init(identifier:prefs:) in conformance _LocaleICU( uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = specialized _LocaleICU.init(identifier:prefs:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t protocol witness for _LocaleProtocol.init(name:prefs:disableBundleMatching:) in conformance _LocaleICU( uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 a4)
{
  uint64_t v8 = swift_allocObject();
  _LocaleICU.init(name:prefs:disableBundleMatching:)(a1, a2, a3, a4);
  return v8;
}

uint64_t protocol witness for _LocaleProtocol.init(components:) in conformance _LocaleICU(void *a1)
{
  uint64_t v2 = swift_allocObject();
  _LocaleICU.init(components:)(a1);
  return v2;
}

uint64_t protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.identifierDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.languageCodeDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.languageCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.countryCodeDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.countryCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.scriptCodeDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.scriptCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.variantCodeDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.variantCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.calendarIdentifierDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.calendarIdentifierDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencyCodeDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.currencyCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencySymbolDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.currencySymbolDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifierDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.collationIdentifierDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.languageCode.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.languageCode.getter((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.scriptCode.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.scriptCode.getter((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.calendar.getter in conformance _LocaleICU@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.calendar.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.calendarIdentifier.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.calendarIdentifier.getter(&v1[4]);
  os_unfair_lock_unlock(v1 + 140);
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifier.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  partial apply for closure #1 in _LocaleICU.collation.getter((void *)(v1 + 16), &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  uint64_t countAndFlagsBits = v4._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t protocol witness for _LocaleProtocol.decimalSeparator.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.decimalSeparator.getter(&v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.groupingSeparator.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.groupingSeparator.getter(&v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencySymbol.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.currencySymbol.getter(&v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencyCode.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.currencyCode.getter(&v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.quotationBeginDelimiter.getter in conformance _LocaleICU()
{
  return _LocaleICU.delimiterString(_:)();
}

uint64_t protocol witness for _LocaleProtocol.quotationEndDelimiter.getter in conformance _LocaleICU()
{
  return _LocaleICU.delimiterString(_:)();
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationBeginDelimiter.getter in conformance _LocaleICU()
{
  return _LocaleICU.delimiterString(_:)();
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationEndDelimiter.getter in conformance _LocaleICU()
{
  return _LocaleICU.delimiterString(_:)();
}

uint64_t protocol witness for _LocaleProtocol.measurementSystem.getter in conformance _LocaleICU@<X0>( uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.measurementSystem.getter((void *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.currency.getter in conformance _LocaleICU@<X0>( Swift::String *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.currency.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.numberingSystem.getter in conformance _LocaleICU@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.numberingSystem.getter((void *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.availableNumberingSystems.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  partial apply for closure #1 in _LocaleICU.availableNumberingSystems.getter((void *)(v1 + 16), &v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.firstDayOfWeek.getter in conformance _LocaleICU@<X0>( _BYTE *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  closure #1 in _LocaleICU.firstDayOfWeek.getterpartial apply((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.minimumDaysInFirstWeek.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.minimumDaysInFirstWeek.getter((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.hourCycle.getter in conformance _LocaleICU@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.hourCycle.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.collation.getter in conformance _LocaleICU@<X0>( Swift::String *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.collation.getter((void *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.region.getter in conformance _LocaleICU@<X0>( Swift::String *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.region.getter((void *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.timeZone.getter in conformance _LocaleICU@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.timeZone.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.subdivision.getter in conformance _LocaleICU@<X0>( Swift::String *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.subdivision.getter((void *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.variant.getter in conformance _LocaleICU@<X0>( Swift::String *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.variant.getter((void *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.identifier(_:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.identifier(_:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

unint64_t protocol witness for _LocaleProtocol.forceMinDaysInFirstWeek(_:) in conformance _LocaleICU( Foundation::Calendar::Identifier a1)
{
  return (unint64_t)_LocaleICU.forceMinDaysInFirstWeek(_:)(a1);
}

uint64_t protocol witness for _LocaleProtocol.forceTemperatureUnit.getter in conformance _LocaleICU@<X0>( char *a1@<X8>)
{
  uint64_t result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v6);
  char v4 = v6[137];
  if ((_DWORD)result == 1) {
    char v4 = 2;
  }
  *a1 = v4;
  return result;
}

uint64_t protocol witness for _LocaleProtocol.prefs.getter in conformance _LocaleICU@<X0>(uint64_t a1@<X8>)
{
  return outlined retain of LocalePreferences?( (uint64_t)v4,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
}

uint64_t protocol witness for _LocaleProtocol.identifierCapturingPreferences.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.identifierCapturingPreferences.getter((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.bridgeToNSLocale() in conformance _LocaleICU()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static LocaleCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  partial apply for closure #1 in LocaleCache.fixedNSLocale(_:)(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  uint64_t v2 = *(void **)(*(void *)v0 + 24LL);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._unint64_t object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0x206465786966LL;
}

uint64_t static Locale.windowsLocaleCode(fromIdentifier:)()
{
  unsigned int LCID = uloc_getLCID();
  swift_release();
  return LCID;
}

uint64_t static Locale.identifier(_:from:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5 = *a1;
  uint64_t v6 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = static LocaleCache.cache + 16;
  uint64_t v8 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in LocaleCache.fixed(_:)(v7, a2, a3, &v13);
  os_unfair_lock_unlock(v8);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v9 = *((void *)&v13 + 1);
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v13) = v5;
  uint64_t v11 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v9 + 416))(&v13, ObjectType, v9);
  swift_unknownObjectRelease();
  return v11;
}

uint64_t closure #1 in static Locale.identifierWithKeywordValue(_:key:value:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  if (result)
  {
    uint64_t v9 = (char *)result;
    uint64_t v10 = String.utf8CString.getter();
    strlcpy(v9, (const char *)(v10 + 32), 0x9DuLL);
    swift_release();
    String.utf8CString.getter();
    String.utf8CString.getter();
    int v11 = uloc_setKeywordValue();
    swift_release();
    uint64_t result = swift_release();
    if (v11 >= 1)
    {
      v9[v11] = 0;
      *a9 = String.init(cString:)();
      a9[1] = v12;
      return swift_bridgeObjectRelease();
    }
  }

  return result;
}

unint64_t specialized static _LocaleICU.State.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v350 = *(void *)(a1 + 32);
  uint64_t v352 = *(void *)(a1 + 40);
  uint64_t v354 = *(void *)(a1 + 48);
  uint64_t v351 = *(void *)(a1 + 56);
  uint64_t v349 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v355 = *(void *)(a1 + 72);
  uint64_t v353 = *(void *)(a1 + 88);
  int v278 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v270 = *(void *)(a1 + 104);
  uint64_t v276 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v274 = *(void *)(a1 + 120);
  uint64_t v264 = *(void *)(a1 + 136);
  uint64_t v271 = *(void *)(a1 + 144);
  uint64_t v268 = *(void *)(a1 + 152);
  uint64_t v266 = *(void *)(a1 + 160);
  uint64_t v256 = *(void *)(a1 + 168);
  uint64_t v262 = *(void *)(a1 + 176);
  uint64_t v259 = *(void *)(a1 + 184);
  uint64_t v260 = *(void *)(a1 + 192);
  uint64_t v258 = *(void *)(a1 + 200);
  int v254 = *(unsigned __int8 *)(a1 + 208);
  __int128 v8 = *(_OWORD *)(a1 + 216);
  __int128 v9 = *(_OWORD *)(a1 + 232);
  __int128 v10 = *(_OWORD *)(a1 + 248);
  char v248 = *(_BYTE *)(a1 + 264);
  char v249 = *(_BYTE *)(a1 + 280);
  char v252 = *(_BYTE *)(a1 + 265);
  uint64_t v244 = *(void *)(a1 + 272);
  int v246 = *(unsigned __int8 *)(a1 + 281);
  uint64_t v230 = *(void *)(a1 + 288);
  uint64_t v242 = *(void *)(a1 + 296);
  uint64_t v239 = *(void *)(a1 + 304);
  uint64_t v240 = *(void *)(a1 + 312);
  int v232 = *(unsigned __int8 *)(a1 + 320);
  uint64_t v221 = *(void *)(a1 + 328);
  uint64_t v224 = *(void *)(a1 + 352);
  uint64_t v225 = *(void *)(a1 + 344);
  uint64_t v212 = *(void *)(a1 + 360);
  uint64_t v219 = *(void *)(a1 + 368);
  uint64_t v215 = *(void *)(a1 + 384);
  uint64_t v216 = *(void *)(a1 + 392);
  uint64_t v217 = *(void *)(a1 + 376);
  uint64_t v11 = *(void *)(a1 + 408);
  uint64_t v209 = *(void *)(a1 + 400);
  uint64_t v12 = *(void *)(a1 + 424);
  uint64_t v227 = *(void *)(a1 + 336);
  uint64_t v228 = *(void *)(a1 + 416);
  uint64_t v13 = *(void *)(a1 + 432);
  uint64_t v201 = *(void *)(a1 + 440);
  uint64_t v204 = *(void *)(a1 + 448);
  uint64_t v198 = *(void *)(a1 + 456);
  uint64_t v199 = *(void *)(a1 + 464);
  uint64_t v15 = *(void *)(a1 + 472);
  uint64_t v14 = *(void *)(a1 + 480);
  uint64_t v17 = *(void *)(a1 + 488);
  uint64_t v16 = *(void *)(a1 + 496);
  uint64_t v19 = *(void *)(a1 + 504);
  uint64_t v18 = *(void *)(a1 + 512);
  uint64_t v20 = *(void *)(a1 + 520);
  uint64_t v21 = *(void *)(a1 + 528);
  unint64_t v22 = *(void *)(a1 + 536);
  __int128 v23 = *(_OWORD *)(a2 + 248);
  int v250 = *(unsigned __int8 *)(a2 + 280);
  uint64_t v24 = *(void *)(a2 + 8);
  uint64_t v309 = *(void *)a2;
  uint64_t v316 = *(void *)(a2 + 16);
  uint64_t v302 = *(void *)(a2 + 24);
  uint64_t v295 = *(void *)(a2 + 32);
  uint64_t v324 = *(void *)(a2 + 40);
  uint64_t v332 = *(void *)(a2 + 48);
  uint64_t v340 = *(void *)(a2 + 56);
  uint64_t v279 = *(void *)(a2 + 64);
  uint64_t v284 = *(void *)(a2 + 72);
  uint64_t v289 = *(void *)(a2 + 80);
  uint64_t v281 = *(void *)(a2 + 88);
  int v277 = *(unsigned __int8 *)(a2 + 96);
  uint64_t v269 = *(void *)(a2 + 104);
  uint64_t v275 = *(void *)(a2 + 112);
  uint64_t v273 = *(void *)(a2 + 120);
  uint64_t v272 = *(void *)(a2 + 128);
  uint64_t v25 = *(void *)(a2 + 144);
  uint64_t v263 = *(void *)(a2 + 136);
  uint64_t v267 = *(void *)(a2 + 152);
  uint64_t v265 = *(void *)(a2 + 160);
  uint64_t v255 = *(void *)(a2 + 168);
  uint64_t v26 = *(void *)(a2 + 184);
  uint64_t v261 = *(void *)(a2 + 176);
  uint64_t v27 = *(void *)(a2 + 192);
  uint64_t v257 = *(void *)(a2 + 200);
  int v253 = *(unsigned __int8 *)(a2 + 208);
  uint64_t v234 = *(void *)(a2 + 216);
  uint64_t v235 = *(void *)(a2 + 224);
  uint64_t v236 = *(void *)(a2 + 232);
  uint64_t v237 = *(void *)(a2 + 240);
  char v247 = *(_BYTE *)(a2 + 264);
  char v251 = *(_BYTE *)(a2 + 265);
  uint64_t v243 = *(void *)(a2 + 272);
  int v245 = *(unsigned __int8 *)(a2 + 281);
  uint64_t v229 = *(void *)(a2 + 288);
  uint64_t v241 = *(void *)(a2 + 296);
  uint64_t v238 = *(void *)(a2 + 304);
  uint64_t v233 = *(void *)(a2 + 312);
  int v231 = *(unsigned __int8 *)(a2 + 320);
  uint64_t v220 = *(void *)(a2 + 328);
  uint64_t v226 = *(void *)(a2 + 336);
  uint64_t v223 = *(void *)(a2 + 344);
  uint64_t v222 = *(void *)(a2 + 352);
  uint64_t v211 = *(void *)(a2 + 360);
  uint64_t v218 = *(void *)(a2 + 368);
  uint64_t v214 = *(void *)(a2 + 376);
  uint64_t v213 = *(void *)(a2 + 384);
  uint64_t v210 = *(void *)(a2 + 392);
  uint64_t v208 = *(void *)(a2 + 400);
  uint64_t v203 = *(void *)(a2 + 408);
  uint64_t v207 = *(void *)(a2 + 416);
  uint64_t v205 = *(void *)(a2 + 424);
  uint64_t v206 = *(void *)(a2 + 432);
  uint64_t v200 = *(void *)(a2 + 440);
  uint64_t v202 = *(void *)(a2 + 448);
  uint64_t v196 = *(void *)(a2 + 456);
  uint64_t v197 = *(void *)(a2 + 464);
  uint64_t v191 = *(void *)(a2 + 472);
  uint64_t v192 = *(void *)(a2 + 480);
  uint64_t v193 = *(void *)(a2 + 488);
  uint64_t v194 = *(void *)(a2 + 496);
  uint64_t v28 = *(void *)(a2 + 512);
  uint64_t v195 = *(void *)(a2 + 504);
  uint64_t v29 = *(void *)(a2 + 520);
  uint64_t v30 = *(void *)(a2 + 528);
  uint64_t v31 = *(void *)(a2 + 536);
  uint64_t v348 = v3;
  if (v3 == 1)
  {
    uint64_t v186 = v11;
    uint64_t v187 = *(void *)(a2 + 192);
    uint64_t v189 = *(void *)(a2 + 144);
    uint64_t v190 = v7;
    uint64_t v32 = v353;
    uint64_t v33 = v6;
    uint64_t v34 = v349;
    uint64_t v35 = v2;
    uint64_t v36 = v4;
    uint64_t v37 = v5;
    uint64_t v38 = v350;
    uint64_t v188 = *(void *)(a2 + 184);
    uint64_t v39 = v352;
    uint64_t v40 = v354;
    uint64_t v41 = v351;
    uint64_t v184 = *(void *)(a2 + 512);
    uint64_t v185 = *(void *)(a2 + 520);
    uint64_t v42 = *(void *)(a2 + 8);
    if (v24 == 1) {
      goto LABEL_9;
    }
LABEL_6:
    *(void *)&__int128 v368 = v35;
    *((void *)&v368 + 1) = v348;
    *(void *)&__int128 v369 = v36;
    *((void *)&v369 + 1) = v37;
    *(void *)&__int128 v370 = v38;
    *((void *)&v370 + 1) = v39;
    uint64_t v371 = v40;
    uint64_t v372 = v41;
    uint64_t v373 = v34;
    uint64_t v374 = v355;
    uint64_t v375 = v33;
    uint64_t v376 = v32;
    uint64_t v377 = v309;
    uint64_t v378 = v42;
    uint64_t v379 = v316;
    uint64_t v380 = v302;
    uint64_t v381 = v295;
    uint64_t v382 = v324;
    uint64_t v383 = v332;
    uint64_t v384 = v340;
    uint64_t v385 = v279;
    uint64_t v386 = v284;
    uint64_t v387 = v289;
    uint64_t v388 = v281;
    outlined consume of Locale.Language?( v309,  v42,  v316,  v302,  v295,  v324,  v332,  v340,  v279,  v284,  v289,  v281,  (void (*)(void))outlined copy of Locale.LanguageCode?);
    outlined release of (Locale.Language?, Locale.Language?)((uint64_t)&v368);
    return 0LL;
  }

  *(void *)&__int128 v368 = v2;
  *((void *)&v368 + 1) = v3;
  *(void *)&__int128 v369 = v4;
  *((void *)&v369 + 1) = v5;
  *(void *)&__int128 v370 = v350;
  *((void *)&v370 + 1) = v352;
  uint64_t v371 = v354;
  uint64_t v372 = v351;
  uint64_t v373 = v349;
  uint64_t v374 = v355;
  uint64_t v375 = v6;
  uint64_t v376 = v353;
  if (v24 == 1)
  {
    uint64_t v43 = v4;
    uint64_t v44 = v5;
    outlined copy of Locale.LanguageCode?(v2, v3);
    outlined copy of Locale.LanguageCode?(v350, v352);
    uint64_t v45 = v6;
    outlined copy of Locale.LanguageCode?(v349, v355);
    outlined copy of Locale.LanguageCode?(v2, v3);
    outlined copy of Locale.LanguageCode?(v350, v352);
    outlined copy of Locale.LanguageCode?(v349, v355);
    uint64_t v35 = v2;
    uint64_t v46 = v3;
    uint64_t v36 = v43;
    uint64_t v37 = v44;
    outlined consume of Locale.LanguageCode?(v2, v46);
    uint64_t v38 = v350;
    uint64_t v39 = v352;
    uint64_t v40 = v354;
    uint64_t v41 = v351;
    outlined consume of Locale.LanguageCode?(v350, v352);
    uint64_t v34 = v349;
    uint64_t v33 = v45;
    uint64_t v32 = v353;
    outlined consume of Locale.LanguageCode?(v349, v355);
    uint64_t v42 = 1LL;
    goto LABEL_6;
  }

  uint64_t v189 = v25;
  uint64_t v190 = v7;
  uint64_t v187 = v27;
  uint64_t v188 = v26;
  uint64_t v184 = v28;
  uint64_t v185 = v29;
  uint64_t v357 = v309;
  uint64_t v358 = v24;
  uint64_t v359 = v316;
  uint64_t v360 = v302;
  *(void *)&__int128 v361 = v295;
  *((void *)&v361 + 1) = v324;
  uint64_t v362 = v332;
  uint64_t v363 = v340;
  uint64_t v364 = v279;
  uint64_t v365 = v284;
  uint64_t v366 = v289;
  uint64_t v367 = v281;
  uint64_t v158 = v2;
  uint64_t v159 = v4;
  uint64_t v303 = v12;
  uint64_t v296 = v14;
  uint64_t v310 = v13;
  uint64_t v168 = v30;
  uint64_t v174 = v31;
  uint64_t v161 = v5;
  uint64_t v162 = v16;
  uint64_t v186 = v11;
  uint64_t v163 = v15;
  uint64_t v165 = v21;
  uint64_t v290 = v20;
  uint64_t v280 = v18;
  uint64_t v285 = v19;
  uint64_t v282 = v17;
  __int128 v333 = v9;
  __int128 v341 = v8;
  __int128 v317 = v23;
  __int128 v325 = v10;
  outlined consume of Locale.Language?( v2,  v3,  v4,  v5,  v350,  v352,  v354,  v351,  v349,  v355,  v6,  v353,  (void (*)(void))outlined copy of Locale.LanguageCode?);
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v350, v352);
  outlined copy of Locale.LanguageCode?(v349, v355);
  BOOL v160 = specialized static Locale.Language.Components.== infix(_:_:)((uint64_t *)&v368, &v357);
  uint64_t v48 = v6;
  __int128 v49 = v370;
  uint64_t v50 = v373;
  uint64_t v51 = v374;
  uint64_t v52 = v48;
  outlined consume of Locale.LanguageCode?(v368, *((uint64_t *)&v368 + 1));
  outlined consume of Locale.LanguageCode?(v49, *((uint64_t *)&v49 + 1));
  outlined consume of Locale.LanguageCode?(v50, v51);
  outlined consume of Locale.Language?( v158,  v348,  v159,  v161,  v350,  v352,  v354,  v351,  v349,  v355,  v52,  v353,  (void (*)(void))outlined consume of Locale.LanguageCode?);
  __int128 v23 = v317;
  __int128 v10 = v325;
  __int128 v9 = v333;
  __int128 v8 = v341;
  uint64_t v16 = v162;
  uint64_t v15 = v163;
  uint64_t v30 = v168;
  uint64_t v31 = v174;
  uint64_t v14 = v296;
  uint64_t v12 = v303;
  uint64_t v13 = v310;
  uint64_t v17 = v282;
  uint64_t v19 = v285;
  uint64_t v18 = v280;
  uint64_t v20 = v290;
  uint64_t v21 = v165;
  if (!v160) {
    return 0LL;
  }
LABEL_9:
  if (v278 == 16)
  {
    if (v277 != 16) {
      return 0LL;
    }
  }

  else if (v277 == 16 || v278 != v277)
  {
    return 0LL;
  }

  if (!v276)
  {
    if (!v275) {
      goto LABEL_21;
    }
LABEL_30:
    uint64_t v69 = v269;
    uint64_t v70 = v275;
    outlined copy of Locale.LanguageCode?(v269, v275);
    uint64_t v71 = v270;
    uint64_t v72 = v276;
LABEL_31:
    outlined consume of Locale.LanguageCode?(v71, v72);
    outlined consume of Locale.LanguageCode?(v69, v70);
    return 0LL;
  }

  if (!v275)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_30;
  }

  if (v274 != v273 || v190 != v272)
  {
    uint64_t v304 = v12;
    uint64_t v297 = v14;
    uint64_t v311 = v13;
    uint64_t v169 = v30;
    uint64_t v175 = v31;
    uint64_t v53 = v21;
    uint64_t v54 = v20;
    uint64_t v55 = v18;
    uint64_t v56 = v19;
    uint64_t v57 = v16;
    uint64_t v58 = v17;
    uint64_t v59 = v15;
    __int128 v334 = v9;
    __int128 v342 = v8;
    __int128 v318 = v23;
    __int128 v326 = v10;
    char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
    __int128 v23 = v318;
    __int128 v10 = v326;
    __int128 v9 = v334;
    __int128 v8 = v342;
    uint64_t v15 = v59;
    uint64_t v30 = v169;
    uint64_t v31 = v175;
    uint64_t v14 = v297;
    uint64_t v12 = v304;
    uint64_t v13 = v311;
    uint64_t v17 = v58;
    uint64_t v16 = v57;
    uint64_t v19 = v56;
    uint64_t v18 = v55;
    uint64_t v20 = v54;
    uint64_t v21 = v53;
    if ((v60 & 1) == 0) {
      return 0LL;
    }
  }

void *specialized static Locale.canonicalizeLocalizations(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  uint64_t v2 = (const __CFAllocator *)*MEMORY[0x189604DD0];
  uint64_t v3 = swift_bridgeObjectRetain() + 40;
  uint64_t v4 = (void *)MEMORY[0x18961AFE8];
  do
  {
    uint64_t v5 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v2, v5);
    swift_unknownObjectRelease();
    if (CanonicalLanguageIdentifierFromString)
    {
      id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
      unint64_t v9 = v8;
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      id v7 = 0LL;
      unint64_t v9 = 0xE000000000000000LL;
    }

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v4[2] + 1LL,  1,  v4);
    }
    unint64_t v11 = v4[2];
    unint64_t v10 = v4[3];
    if (v11 >= v10 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v10 > 1),  v11 + 1,  1,  v4);
    }
    v3 += 16LL;
    v4[2] = v11 + 1;
    uint64_t v12 = &v4[2 * v11];
    _OWORD v12[4] = v7;
    void v12[5] = v9;
    --v1;
  }

  while (v1);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized static Locale.keywordValue(identifier:key:)()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  String.utf8CString.getter();
  String.utf8CString.getter();
  int KeywordValue = uloc_getKeywordValue();
  swift_release();
  swift_release();
  if (KeywordValue < 1) {
    return 0LL;
  }
  v2[KeywordValue] = 0;
  return MEMORY[0x186E1B634](v2);
}

uint64_t specialized static Locale.identifierWithKeywordValue(_:key:value:)(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  swift_bridgeObjectRetain();
  uint64_t v2 = String.utf8CString.getter();
  strlcpy(__dst, (const char *)(v2 + 32), 0x9DuLL);
  swift_release();
  String.utf8CString.getter();
  String.utf8CString.getter();
  int v3 = uloc_setKeywordValue();
  swift_release();
  swift_release();
  if (v3 < 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
  }

  else
  {
    __dst[v3] = 0;
    a1 = String.init(cString:)();
    swift_bridgeObjectRelease();
  }

  return a1;
}

uint64_t specialized static Locale.localeIdentifierByReplacingLanguageCodeAndScriptCode(localeIDWithDesiredLangCode:localeIDWithDesiredComponents:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __dst[44] = *MEMORY[0x1895F89C0];
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized _withFixedCharBuffer(size:_:)(257LL, a1, a2);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  if (!v10) {
    return v8;
  }
  Locale.Components.init(identifier:)(v8, v10, __src);
  memcpy(__dst, __src, 0x160uLL);
  if (!__dst[1] || (unint64_t v11 = (void *)__dst[5]) == 0LL)
  {
    uint64_t v30 = (Swift::String *)__dst;
LABEL_12:
    outlined release of Locale.Components(&v30->_countAndFlagsBits);
    return 0LL;
  }

  uint64_t v12 = __dst[4];
  __src[0] = __dst[0];
  __src[1] = __dst[1];
  swift_bridgeObjectRetain();
  outlined copy of Locale.LanguageCode?(v12, (uint64_t)v11);
  v13._uint64_t countAndFlagsBits = 45LL;
  v13._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(v12, (uint64_t)v11);
  v14._uint64_t countAndFlagsBits = v12;
  v14._unint64_t object = v11;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  outlined release of Locale.Components(__dst);
  uint64_t v15 = __src[0];
  uint64_t v16 = __src[1];
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized _withFixedCharBuffer(size:_:)(257LL, a3, a4);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (!v18)
  {
    swift_bridgeObjectRelease();
    return v8;
  }

  Locale.Components.init(identifier:)(v8, v18, v45);
  Locale.Components.init(identifier:)(v15, v16, __src);
  if (!__src[1])
  {
    outlined release of Locale.Components(__src);
    memcpy(v44, v45, sizeof(v44));
    uint64_t v30 = v44;
    goto LABEL_12;
  }

  uint64_t v8 = __src[5];
  if (!__src[5])
  {
    outlined release of Locale.Components(__src);
    memcpy(v44, v45, sizeof(v44));
    outlined release of Locale.Components(&v44[0]._countAndFlagsBits);
    return v8;
  }

  uint64_t v19 = __src[4];
  uint64_t v20 = __src[6];
  uint64_t v21 = __src[7];
  uint64_t v22 = v45[0];
  uint64_t v23 = v45[1];
  v45[0] = __src[0];
  v45[1] = __src[1];
  v45[2] = __src[2];
  v45[3] = __src[3];
  outlined copy of Locale.LanguageCode?(__src[0], __src[1]);
  outlined copy of Locale.LanguageCode?(v19, v8);
  outlined consume of Locale.LanguageCode?(v22, v23);
  outlined consume of Locale.LanguageCode?(v45[4], v45[5]);
  v45[4] = v19;
  v45[5] = v8;
  v45[6] = v20;
  v45[7] = v21;
  swift_bridgeObjectRetain();
  specialized static Locale.keywordValue(identifier:key:)();
  if (!v24)
  {
    swift_bridgeObjectRelease();
    static Locale.NumberingSystem.defaultNumberingSystem(for:)(a3, a4, v44);
    if (v44[0]._object)
    {
      uint64_t countAndFlagsBits = v44[1]._countAndFlagsBits;
      unint64_t object = v44[1]._object;
    }

    else
    {
      if (one-time initialization token for latn != -1) {
        swift_once();
      }
      unint64_t object = (void *)*((void *)&xmmword_18C5D4100 + 1);
      uint64_t countAndFlagsBits = xmmword_18C5D4100;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

void *specialized _LocaleICU.init(identifier:prefs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (const __CFAllocator *)*MEMORY[0x189604DD0];
  uint64_t v5 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v4, v5);
  swift_unknownObjectRelease();
  if (CanonicalLocaleIdentifierFromString)
  {
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);
    unint64_t v9 = v8;
  }

  else
  {
    id v7 = 0LL;
    unint64_t v9 = 0xE000000000000000LL;
  }

  void v3[2] = v7;
  double v3[3] = v9;
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)(v3 + 4));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_LocaleICU.State>._Buffer);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 560) = 0;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 6os_unfair_lock_unlock(*v0 + 4) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_BYTE *)(v10 + 112) = 16;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(void *)(v10 + 152) = 0LL;
  *(void *)(v10 + 160) = 1LL;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 18os_unfair_lock_unlock(*v0 + 4) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  *(void *)(v10 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(_BYTE *)(v10 + 22os_unfair_lock_unlock(*v0 + 4) = 7;
  *(_OWORD *)(v10 + 232) = 0u;
  *(_OWORD *)(v10 + 248) = 0u;
  *(_BYTE *)(v10 + 280) = 0;
  *(_BYTE *)(v10 + 281) = 1;
  *(void *)(v10 + 288) = 0LL;
  *(_BYTE *)(v10 + 296) = 1;
  *(_BYTE *)(v10 + 297) = 4;
  *(_OWORD *)(v10 + 30os_unfair_lock_unlock(*v0 + 4) = 0u;
  *(_OWORD *)(v10 + 320) = 0u;
  *(_BYTE *)(v10 + 336) = 2;
  *(void *)(v10 + 34os_unfair_lock_unlock(*v0 + 4) = 0LL;
  *(void *)(v10 + 352) = 1LL;
  *(void *)(v10 + 360) = 0LL;
  *(void *)(v10 + 368) = 0LL;
  *(void *)(v10 + 376) = 0LL;
  *(void *)(v10 + 38os_unfair_lock_unlock(*v0 + 4) = 1LL;
  *(void *)(v10 + 392) = 0LL;
  *(void *)(v10 + 400) = 0LL;
  *(void *)(v10 + 408) = 1LL;
  *(void *)(v10 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(void *)(v10 + 42os_unfair_lock_unlock(*v0 + 4) = 0LL;
  *(void *)(v10 + 432) = 1LL;
  uint64_t v11 = MEMORY[0x18961AFF0];
  *(void *)(v10 + 472) = MEMORY[0x18961AFF0];
  *(void *)(v10 + 480) = v11;
  *(void *)(v10 + 488) = v11;
  *(void *)(v10 + 496) = v11;
  *(void *)(v10 + 50os_unfair_lock_unlock(*v0 + 4) = v11;
  *(void *)(v10 + 512) = v11;
  *(void *)(v10 + 520) = v11;
  *(void *)(v10 + 528) = v11;
  *(void *)(v10 + 536) = v11;
  *(void *)(v10 + 54os_unfair_lock_unlock(*v0 + 4) = v11;
  *(void *)(v10 + 552) = v11;
  v3[22] = v10;
  *(_OWORD *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183723F60;
  *(_OWORD *)(v10 + 26os_unfair_lock_unlock(*v0 + 4) = 0u;
  *(_OWORD *)(v10 + 440) = 0u;
  *(_OWORD *)(v10 + 456) = 0u;
  return v3;
}

uint64_t specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, unsigned __int8 a2)
{
  v4._uint64_t countAndFlagsBits = Calendar.Identifier.cfCalendarIdentifier.getter();
  uint64_t v15 = 0x61634053555F6E65LL;
  unint64_t v16 = 0xEF3D7261646E656CLL;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized _withFixedUCharBuffer(size:defaultIsError:_:)(257LL, 1u);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v7)
  {
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v14);
    outlined init with take of LocalePreferences?((uint64_t)v14, (uint64_t)&v15);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v15) == 1 || !v16)
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v8 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }

    else
    {
      uint64_t v8 = swift_bridgeObjectRetain();
    }

    if (*(void *)(v8 + 16))
    {
      unint64_t v9 = (const __CFAllocator *)*MEMORY[0x189604DD0];
      uint64_t v10 = a2;
      uint64_t v11 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v9, v11);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      __asm { BR              X8 }
    }

    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v5;
}

void specialized _LocaleICU.displayNameIncludingFallbacks(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *, uint64_t, int *))
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v38 = 0;
  uint64_t v31 = a2;
  uint64_t v7 = String.utf8CString.getter() + 32;
  uint64_t v8 = String.utf8CString.getter();
  uint64_t v32 = a4;
  int v9 = a4(v7, v8 + 32, (uint64_t *)v35, 257LL, &v38);
  swift_release();
  swift_release();
  if (v38 > 0 || v38 == -127 || (v9 <= 257 ? (BOOL v10 = v9 <= 0) : (BOOL v10 = 1), v10))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    specialized String.init(_utf16:)((uint64_t)v35, v9);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v12) {
      return;
    }
  }

  outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v37);
  outlined init with take of LocalePreferences?((uint64_t)v37, (uint64_t)&v38);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v38) == 1 || !v39)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v13 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
  }

  else
  {
    uint64_t v13 = swift_bridgeObjectRetain();
  }

  uint64_t v28 = v13;
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v30 = 0LL;
    CFAllocatorRef v29 = (CFAllocatorRef)*MEMORY[0x189604DD0];
    uint64_t v15 = v28 + 40;
    do
    {
      unint64_t v16 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString( v29,  v16);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRetain();
      uint64_t v18 = swift_bridgeObjectRetain();
      uint64_t v33 = &v28;
      MEMORY[0x1895F8858](v18);
      int v34 = 0;
      uint64_t v19 = String.utf8CString.getter() + 32;
      uint64_t v20 = String.utf8CString.getter();
      int v21 = v32(v19, v20 + 32, &v28 - 66, 257LL, &v34);
      swift_release();
      uint64_t v22 = swift_release();
      if (v34 > 0 || v34 == -127 || v21 > 257 || v21 <= 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
      }

      else
      {
        MEMORY[0x1895F8858](v22);
        uint64_t v24 = v30;
        closure #1 in String.init(_utf16:)((_BYTE *)&v28 - v23, (unsigned __int16 *)&v28 - 264, v25, v36);
        uint64_t v30 = v24;
        if (v24)
        {
          Swift::String v27 = v30;
          swift_willThrow();

          __break(1u);
          return;
        }

        uint64_t v26 = v36[1];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v26)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }

      v15 += 16LL;
      --v14;
    }

    while (v14);
  }

  swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in closure #1 in _LocaleICU.countryCodeDisplayName(for:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v11[69] = *MEMORY[0x1895F89C0];
  if (String.count.getter() > 153) {
    return 0LL;
  }
  v11[68] = 0xE300000000000000LL;
  v6._uint64_t countAndFlagsBits = a3;
  v6._unint64_t object = a4;
  String.append(_:)(v6);
  uint64_t v7 = swift_bridgeObjectRetain();
  MEMORY[0x1895F8858](v7);
  v11[67] = 0LL;
  String.utf8CString.getter();
  String.utf8CString.getter();
  Displayint Country = uloc_getDisplayCountry();
  swift_release();
  swift_release();
  uint64_t v9 = 0LL;
  if (DisplayCountry <= 257 && DisplayCountry > 0) {
    uint64_t v9 = specialized String.init(_utf16:)((uint64_t)v11, DisplayCountry);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

void specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  int v3 = a3;
  uint64_t v4 = a2;
  v32[18] = *MEMORY[0x1895F89C0];
  specialized closure #1 in closure #1 in _LocaleICU.countryCodeDisplayName(for:)( *(void *)(a1 + 16),  *(void *)(a1 + 24),  a2,  a3);
  if (!v6)
  {
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v31);
    outlined init with take of LocalePreferences?((uint64_t)v31, (uint64_t)v32);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v32) == 1 || !v32[1])
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v7 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }

    else
    {
      uint64_t v7 = swift_bridgeObjectRetain();
    }

    uint64_t v22 = v7;
    uint64_t v8 = *(void *)(v7 + 16);
    if (!v8)
    {
LABEL_23:
      swift_bridgeObjectRelease();
      return;
    }

    uint64_t v24 = 0LL;
    uint64_t v9 = (const __CFAllocator *)*MEMORY[0x189604DD0];
    uint64_t v10 = v22 + 40;
    uint64_t v25 = v4;
    uint64_t v26 = v3;
    uint64_t v23 = v9;
    while (1)
    {
      uint64_t v11 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v9, v11);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      if (String.count.getter() > 153) {
        goto LABEL_11;
      }
      uint64_t v29 = 6254181LL;
      unint64_t v30 = 0xE300000000000000LL;
      v13._uint64_t countAndFlagsBits = v4;
      v13._unint64_t object = v3;
      String.append(_:)(v13);
      uint64_t v14 = swift_bridgeObjectRetain();
      Swift::String v27 = &v22;
      MEMORY[0x1895F8858](v14);
      int v28 = 0;
      String.utf8CString.getter();
      String.utf8CString.getter();
      Displayint Country = uloc_getDisplayCountry();
      swift_release();
      uint64_t v16 = swift_release();
      if (v28 > 0 || v28 == -127 || DisplayCountry > 257 || DisplayCountry <= 0) {
        break;
      }
      MEMORY[0x1895F8858](v16);
      uint64_t v18 = v24;
      closure #1 in String.init(_utf16:)((_BYTE *)&v22 - v17, (unsigned __int16 *)&v22 - 264, v19, &v29);
      uint64_t v24 = v18;
      uint64_t v9 = v23;
      if (v18)
      {
        int v21 = v24;
        swift_willThrow();

        __break(1u);
        return;
      }

      unint64_t v20 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v4 = v25;
      int v3 = v26;
      if (v20) {
        goto LABEL_23;
      }
LABEL_12:
      v10 += 16LL;
      if (!--v8) {
        goto LABEL_23;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v25;
    int v3 = v26;
    uint64_t v9 = v23;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFAllocatorRef v9;
  uint64_t v10;
  CFStringRef v11;
  __CFString *CanonicalLanguageIdentifierFromString;
  Swift::String v13;
  uint64_t v14;
  int DisplayVariant;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  CFAllocatorRef v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE v31[144];
  void v32[20];
  int v3 = a3;
  uint64_t v4 = a2;
  v32[18] = *MEMORY[0x1895F89C0];
  specialized closure #1 in closure #1 in _LocaleICU.variantCodeDisplayName(for:)( *(void *)(a1 + 16),  *(void *)(a1 + 24),  a2,  a3);
  if (!v6)
  {
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v31);
    outlined init with take of LocalePreferences?((uint64_t)v31, (uint64_t)v32);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v32) == 1 || !v32[1])
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v7 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }

    else
    {
      uint64_t v7 = swift_bridgeObjectRetain();
    }

    uint64_t v22 = v7;
    uint64_t v8 = *(void *)(v7 + 16);
    if (!v8)
    {
LABEL_23:
      swift_bridgeObjectRelease();
      return;
    }

    uint64_t v24 = 0LL;
    uint64_t v9 = (const __CFAllocator *)*MEMORY[0x189604DD0];
    uint64_t v10 = v22 + 40;
    uint64_t v25 = v4;
    uint64_t v26 = v3;
    uint64_t v23 = v9;
    while (1)
    {
      uint64_t v11 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v9, v11);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      if (String.count.getter() > 250) {
        goto LABEL_11;
      }
      uint64_t v29 = 0x5F53555F6E65LL;
      unint64_t v30 = 0xE600000000000000LL;
      v13._uint64_t countAndFlagsBits = v4;
      v13._unint64_t object = v3;
      String.append(_:)(v13);
      uint64_t v14 = swift_bridgeObjectRetain();
      Swift::String v27 = &v22;
      MEMORY[0x1895F8858](v14);
      int v28 = 0;
      String.utf8CString.getter();
      String.utf8CString.getter();
      DisplayVariant = uloc_getDisplayVariant();
      swift_release();
      uint64_t v16 = swift_release();
      if (v28 > 0 || v28 == -127 || DisplayVariant > 257 || DisplayVariant <= 0) {
        break;
      }
      MEMORY[0x1895F8858](v16);
      uint64_t v18 = v24;
      closure #1 in String.init(_utf16:)((_BYTE *)&v22 - v17, (unsigned __int16 *)&v22 - 264, v19, &v29);
      uint64_t v24 = v18;
      uint64_t v9 = v23;
      if (v18)
      {
        int v21 = v24;
        swift_willThrow();

        __break(1u);
        return;
      }

      unint64_t v20 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v4 = v25;
      int v3 = v26;
      if (v20) {
        goto LABEL_23;
      }
LABEL_12:
      v10 += 16LL;
      if (!--v8) {
        goto LABEL_23;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v25;
    int v3 = v26;
    uint64_t v9 = v23;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

uint64_t specialized closure #1 in closure #1 in _LocaleICU.scriptCodeDisplayName(for:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v12[69] = *MEMORY[0x1895F89C0];
  if (String.count.getter() != 4) {
    return 0LL;
  }
  v12[68] = 0xE300000000000000LL;
  v6._uint64_t countAndFlagsBits = a3;
  v6._unint64_t object = a4;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = 5461343LL;
  v7._unint64_t object = (void *)0xE300000000000000LL;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_bridgeObjectRetain();
  MEMORY[0x1895F8858](v8);
  v12[67] = 0LL;
  String.utf8CString.getter();
  String.utf8CString.getter();
  Displayint Script = uloc_getDisplayScript();
  swift_release();
  swift_release();
  uint64_t v10 = 0LL;
  if (DisplayScript <= 257 && DisplayScript > 0) {
    uint64_t v10 = specialized String.init(_utf16:)((uint64_t)v12, DisplayScript);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  int v3 = a3;
  uint64_t v4 = a2;
  void v31[18] = *MEMORY[0x1895F89C0];
  uint64_t v6 = specialized closure #1 in closure #1 in _LocaleICU.scriptCodeDisplayName(for:)( *(void *)(a1 + 16),  *(void *)(a1 + 24),  a2,  a3);
  if (!v7)
  {
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v30);
    outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)v31);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v31) == 1 || !v31[1])
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v9 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }

    else
    {
      uint64_t v9 = swift_bridgeObjectRetain();
    }

    uint64_t v23 = v9;
    uint64_t v10 = *(void *)(v9 + 16);
    if (!v10)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      return 0LL;
    }

    uint64_t v11 = (const __CFAllocator *)*MEMORY[0x189604DD0];
    uint64_t v12 = v23 + 40;
    uint64_t v25 = v4;
    uint64_t v26 = v3;
    uint64_t v24 = v11;
    while (1)
    {
      Swift::String v13 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString( v11,  v13);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      if (String.count.getter() != 4) {
        goto LABEL_12;
      }
      uint64_t v28 = 6254181LL;
      unint64_t v29 = 0xE300000000000000LL;
      v15._uint64_t countAndFlagsBits = v4;
      v15._unint64_t object = v3;
      String.append(_:)(v15);
      swift_bridgeObjectRetain();
      v16._uint64_t countAndFlagsBits = 5461343LL;
      v16._unint64_t object = (void *)0xE300000000000000LL;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      uint64_t v17 = swift_bridgeObjectRetain();
      Swift::String v27 = &v22;
      MEMORY[0x1895F8858](v17);
      LODWORD(v28) = 0;
      String.utf8CString.getter();
      String.utf8CString.getter();
      Displayint Script = uloc_getDisplayScript();
      swift_release();
      swift_release();
      uint64_t v8 = specialized String.init(_utf16:)((uint64_t)(&v22 - 66), DisplayScript);
      uint64_t v20 = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v4 = v25;
      int v3 = v26;
      uint64_t v11 = v24;
      if (v20)
      {
        swift_bridgeObjectRelease();
        return v8;
      }

uint64_t specialized closure #1 in closure #1 in _LocaleICU.variantCodeDisplayName(for:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v11[69] = *MEMORY[0x1895F89C0];
  if (String.count.getter() > 250) {
    return 0LL;
  }
  v11[68] = 0xE600000000000000LL;
  v6._uint64_t countAndFlagsBits = a3;
  v6._unint64_t object = a4;
  String.append(_:)(v6);
  uint64_t v7 = swift_bridgeObjectRetain();
  MEMORY[0x1895F8858](v7);
  v11[67] = 0x5F5300000000LL;
  String.utf8CString.getter();
  String.utf8CString.getter();
  int DisplayVariant = uloc_getDisplayVariant();
  swift_release();
  swift_release();
  uint64_t v9 = 0LL;
  if (DisplayVariant <= 257 && DisplayVariant > 0) {
    uint64_t v9 = specialized String.init(_utf16:)((uint64_t)v11, DisplayVariant);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, Swift::String a2)
{
  unint64_t object = a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  unint64_t v19 = 0xD000000000000010LL;
  unint64_t v20 = 0x80000001839D0030LL;
  String.append(_:)(a2);
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized _withFixedUCharBuffer(size:defaultIsError:_:)(257LL, 1u);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v7)
  {
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v18);
    outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)&v19);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v19) == 1 || !v20)
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v8 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }

    else
    {
      uint64_t v8 = swift_bridgeObjectRetain();
    }

    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      uint64_t v10 = (const __CFAllocator *)*MEMORY[0x189604DD0];
      uint64_t v11 = v8 + 40;
      while (1)
      {
        uint64_t v12 = (const __CFString *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRetain();
        CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString( v10,  v12);
        swift_unknownObjectRelease();
        if (CanonicalLanguageIdentifierFromString)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
          swift_bridgeObjectRelease();
        }

        else
        {
          swift_bridgeObjectRelease();
        }

        v14._uint64_t countAndFlagsBits = countAndFlagsBits;
        v14._unint64_t object = object;
        String.append(_:)(v14);
        swift_bridgeObjectRetain();
        uint64_t v5 = specialized _withFixedUCharBuffer(size:defaultIsError:_:)(257LL, 1u);
        uint64_t v16 = v15;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v16) {
          break;
        }
        v11 += 16LL;
        if (!--v9) {
          goto LABEL_15;
        }
      }

      swift_bridgeObjectRelease();
    }

    else
    {
LABEL_15:
      swift_bridgeObjectRelease();
      return 0LL;
    }
  }

  return v5;
}

uint64_t specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (String.count.getter() != 3
    || (MEMORY[0x1895F8858](3LL),
        closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)(v15, &v20),
        !v21))
  {
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v19);
    outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v20);
    int v6 = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v20);
    uint64_t v17 = a3;
    if (v6 == 1 || !v21)
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v7 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }

    else
    {
      uint64_t v7 = swift_bridgeObjectRetain();
    }

    uint64_t v16 = v7;
    uint64_t v8 = *(void *)(v7 + 16);
    if (!v8)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      return 0LL;
    }

    uint64_t v9 = (const __CFAllocator *)*MEMORY[0x189604DD0];
    uint64_t v10 = v16 + 40;
    while (1)
    {
      uint64_t v11 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v9, v11);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      if (String.count.getter() == 3)
      {
        MEMORY[0x1895F8858](3LL);
        closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)(v15, v18);
        uint64_t v5 = v18[0];
        uint64_t v13 = v18[1];
        swift_bridgeObjectRelease();
        if (v13)
        {
          swift_bridgeObjectRelease();
          return v5;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      v10 += 16LL;
      if (!--v8) {
        goto LABEL_20;
      }
    }
  }

  return v20;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  CFAllocatorRef v9;
  uint64_t v10;
  CFStringRef v11;
  __CFString *CanonicalLanguageIdentifierFromString;
  uint64_t v13;
  UChar v15[12];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];
  _BYTE v19[144];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (String.count.getter() != 3
    || (MEMORY[0x1895F8858](3LL),
        closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)(v15, &v20),
        !v21))
  {
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v19);
    outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v20);
    int v6 = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v20);
    uint64_t v17 = a3;
    if (v6 == 1 || !v21)
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v7 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }

    else
    {
      uint64_t v7 = swift_bridgeObjectRetain();
    }

    uint64_t v16 = v7;
    uint64_t v8 = *(void *)(v7 + 16);
    if (!v8)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      return 0LL;
    }

    uint64_t v9 = (const __CFAllocator *)*MEMORY[0x189604DD0];
    uint64_t v10 = v16 + 40;
    while (1)
    {
      uint64_t v11 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v9, v11);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      if (String.count.getter() == 3)
      {
        MEMORY[0x1895F8858](3LL);
        closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)(v15, v18);
        uint64_t v5 = v18[0];
        uint64_t v13 = v18[1];
        swift_bridgeObjectRelease();
        if (v13)
        {
          swift_bridgeObjectRelease();
          return v5;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      v10 += 16LL;
      if (!--v8) {
        goto LABEL_20;
      }
    }
  }

  return v20;
}

uint64_t specialized static Locale.identifier(fromWindowsLocaleCode:)(unint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (HIDWORD(a1)) {
    return 0LL;
  }
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    __n128 v4 = MEMORY[0x1895F8858](isStackAllocationSafe);
    int v11 = 0;
    int v5 = MEMORY[0x186E21580](a1, v10, 1024LL, &v11, v4);
    if (v11 > 0 || v5 <= 0)
    {
      return 0LL;
    }

    else
    {
      v10[v5] = 0;
      return MEMORY[0x186E1B634](v10);
    }
  }

  else
  {
    uint64_t v7 = swift_slowAlloc();
    int v11 = 0;
    int v8 = MEMORY[0x186E21580](a1, v7, 1024LL, &v11);
    uint64_t v1 = 0LL;
    if (v11 <= 0 && v8 > 0)
    {
      *(_BYTE *)(v7 + v8) = 0;
      uint64_t v1 = MEMORY[0x186E1B634](v7);
    }

    MEMORY[0x186E20E60](v7, -1LL, -1LL);
  }

  return v1;
}

uint64_t specialized static Locale.availableIdentifiers.getter()
{
  uint64_t v8 = MEMORY[0x18961AFF8];
  uint64_t result = uloc_countAvailable();
  if ((result & 0x80000000) != 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  int v1 = result;
  if ((_DWORD)result)
  {
    int v2 = 0;
    while (v1 != v2)
    {
      uint64_t result = uloc_getAvailable();
      if (!result) {
        goto LABEL_12;
      }
      ++v2;
      unint64_t v3 = String.init(cString:)();
      specialized Set._Variant.insert(_:)(&v7, v3, v4);
      uint64_t result = swift_bridgeObjectRelease();
      if (v1 == v2)
      {
        uint64_t v5 = v8;
        goto LABEL_9;
      }
    }

    __break(1u);
    goto LABEL_11;
  }

  uint64_t v5 = MEMORY[0x18961AFF8];
LABEL_9:
  int v6 = specialized _copyCollectionToContiguousArray<A>(_:)(v5);
  swift_bridgeObjectRelease();
  return (uint64_t)v6;
}

uint64_t type metadata accessor for _LocaleICU()
{
  return objc_opt_self();
}

uint64_t destroy for _LocaleICU.State(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    if (v2 == 1) {
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[9])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

uint64_t initializeWithCopy for _LocaleICU.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    if (v4 == 1)
    {
      __int128 v5 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v5;
      __int128 v6 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v6;
      __int128 v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
      goto LABEL_10;
    }

    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v13 = *(void *)(a2 + 24);
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = *(void *)(a2 + 40);
    if (!v9)
    {
LABEL_8:
      __int128 v14 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v14;
      uint64_t v11 = *(void *)(a2 + 72);
      if (!v11) {
        goto LABEL_9;
      }
LABEL_6:
      *(void *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v11;
      uint64_t v12 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
  }

  else
  {
    __int128 v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v8;
    uint64_t v9 = *(void *)(a2 + 40);
    if (!v9) {
      goto LABEL_8;
    }
  }

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = *(void *)(a2 + 72);
  if (v11) {
    goto LABEL_6;
  }
LABEL_9:
  __int128 v15 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v15;
LABEL_10:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v16 = *(void *)(a2 + 112);
  if (v16)
  {
    *(void *)(a1 + 10os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v16;
    uint64_t v17 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v18 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 10os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v18;
  }

  unint64_t v19 = *(void *)(a2 + 144);
  if (v19 > 1)
  {
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 14os_unfair_lock_unlock(*v0 + 4) = v19;
    uint64_t v23 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v21 = *(void *)(a2 + 176);
    if (v21) {
      goto LABEL_15;
    }
  }

  else
  {
    __int128 v20 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v20;
    uint64_t v21 = *(void *)(a2 + 176);
    if (v21)
    {
LABEL_15:
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v21;
      uint64_t v22 = *(void *)(a2 + 192);
      *(void *)(a1 + 18os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_18;
    }
  }

  __int128 v24 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 18os_unfair_lock_unlock(*v0 + 4) = v24;
LABEL_18:
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_OWORD *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_WORD *)(a1 + 26os_unfair_lock_unlock(*v0 + 4) = *(_WORD *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 280);
  uint64_t v25 = *(void *)(a2 + 296);
  swift_bridgeObjectRetain();
  if (v25)
  {
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = v25;
    uint64_t v26 = *(void *)(a2 + 312);
    *(void *)(a1 + 30os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 304);
    *(void *)(a1 + 312) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v27 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 30os_unfair_lock_unlock(*v0 + 4) = v27;
  }

  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  unint64_t v28 = *(void *)(a2 + 336);
  if (v28 > 1)
  {
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(void *)(a1 + 336) = v28;
    uint64_t v30 = *(void *)(a2 + 352);
    *(void *)(a1 + 34os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 344);
    *(void *)(a1 + 352) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v29 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 34os_unfair_lock_unlock(*v0 + 4) = v29;
  }

  unint64_t v31 = *(void *)(a2 + 368);
  if (v31 > 1)
  {
    *(void *)(a1 + 360) = *(void *)(a2 + 360);
    *(void *)(a1 + 368) = v31;
    uint64_t v33 = *(void *)(a2 + 384);
    *(void *)(a1 + 376) = *(void *)(a2 + 376);
    *(void *)(a1 + 38os_unfair_lock_unlock(*v0 + 4) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v32 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v32;
  }

  uint64_t v34 = *(void *)(a2 + 392);
  if (v34 == 1)
  {
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  }

  else
  {
    uint64_t v35 = *(void *)(a2 + 400);
    *(void *)(a1 + 392) = v34;
    *(void *)(a1 + 400) = v35;
    swift_unknownObjectRetain();
  }

  unint64_t v36 = *(void *)(a2 + 416);
  if (v36 > 1)
  {
    *(void *)(a1 + 408) = *(void *)(a2 + 408);
    *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v36;
    uint64_t v38 = *(void *)(a2 + 432);
    *(void *)(a1 + 42os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 424);
    *(void *)(a1 + 432) = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v37 = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 42os_unfair_lock_unlock(*v0 + 4) = v37;
  }

  uint64_t v39 = *(void *)(a2 + 448);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = v39;
  uint64_t v40 = *(void *)(a2 + 464);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a1 + 46os_unfair_lock_unlock(*v0 + 4) = v40;
  uint64_t v41 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v41;
  uint64_t v42 = *(void *)(a2 + 496);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(void *)(a1 + 496) = v42;
  uint64_t v43 = *(void *)(a2 + 512);
  *(void *)(a1 + 50os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 504);
  *(void *)(a1 + 512) = v43;
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _LocaleICU.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4 == 1)
  {
    if (v5 == 1)
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
      __int128 v7 = *(_OWORD *)(a2 + 32);
      __int128 v8 = *(_OWORD *)(a2 + 48);
      __int128 v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a1 + 48) = v8;
      goto LABEL_34;
    }

    if (v5)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (*(void *)(a2 + 40)) {
        goto LABEL_8;
      }
    }

    else
    {
      __int128 v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v14;
      if (*(void *)(a2 + 40))
      {
LABEL_8:
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (!*(void *)(a2 + 72)) {
          goto LABEL_15;
        }
        goto LABEL_31;
      }
    }

    __int128 v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v15;
    if (!*(void *)(a2 + 72))
    {
LABEL_15:
      __int128 v16 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v16;
      goto LABEL_34;
    }

    goto LABEL_31;
  }

  if (v5 == 1)
  {
    outlined destroy of Locale.Language.Components(a1);
    __int128 v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
    __int128 v11 = *(_OWORD *)(a2 + 80);
    __int128 v13 = *(_OWORD *)(a2 + 32);
    __int128 v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = v12;
    goto LABEL_34;
  }

  if (v4)
  {
    if (v5)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.LanguageCode(a1);
      __int128 v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v17;
    }
  }

  else if (v5)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v18;
  }

  unint64_t v19 = (_OWORD *)(a1 + 32);
  __int128 v20 = (_OWORD *)(a2 + 32);
  uint64_t v21 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v21)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.Script(a1 + 32);
      __int128 v22 = *(_OWORD *)(a2 + 48);
      *unint64_t v19 = *v20;
      *(_OWORD *)(a1 + 48) = v22;
    }
  }

  else if (v21)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v23 = *(_OWORD *)(a2 + 48);
    *unint64_t v19 = *v20;
    *(_OWORD *)(a1 + 48) = v23;
  }

  __int128 v24 = (_OWORD *)(a1 + 64);
  uint64_t v25 = (_OWORD *)(a2 + 64);
  uint64_t v26 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v26)
    {
      *(void *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.Region(a1 + 64);
      __int128 v27 = *(_OWORD *)(a2 + 80);
      _OWORD *v24 = *v25;
      *(_OWORD *)(a1 + 80) = v27;
    }

    goto LABEL_34;
  }

  if (v26)
  {
LABEL_31:
    *(void *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_34;
  }

  __int128 v28 = *(_OWORD *)(a2 + 80);
  _OWORD *v24 = *v25;
  *(_OWORD *)(a1 + 80) = v28;
LABEL_34:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  __int128 v29 = (_OWORD *)(a1 + 104);
  uint64_t v30 = (_OWORD *)(a2 + 104);
  uint64_t v31 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112))
  {
    if (v31)
    {
      *(void *)(a1 + 10os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.Collation(a1 + 104);
      __int128 v32 = *(_OWORD *)(a2 + 120);
      *__int128 v29 = *v30;
      *(_OWORD *)(a1 + 120) = v32;
    }
  }

  else if (v31)
  {
    *(void *)(a1 + 10os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v33 = *(_OWORD *)(a2 + 120);
    *__int128 v29 = *v30;
    *(_OWORD *)(a1 + 120) = v33;
  }

  uint64_t v34 = (_OWORD *)(a1 + 136);
  uint64_t v35 = (_OWORD *)(a2 + 136);
  uint64_t v36 = *(void *)(a1 + 144);
  unint64_t v37 = *(void *)(a2 + 144);
  if (v36 == 1)
  {
    if (v37 <= 1)
    {
LABEL_43:
      __int128 v38 = *(_OWORD *)(a2 + 152);
      *uint64_t v34 = *v35;
      *(_OWORD *)(a1 + 152) = v38;
      goto LABEL_52;
    }

    goto LABEL_51;
  }

  if (v37 == 1)
  {
    outlined destroy of Any?(a1 + 136, &demangling cache variable for type metadata for Locale.Currency?);
    goto LABEL_46;
  }

  if (v36)
  {
    if (v37)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 14os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_52;
    }

    outlined destroy of Locale.Currency(a1 + 136);
LABEL_46:
    __int128 v39 = *(_OWORD *)(a2 + 152);
    *uint64_t v34 = *v35;
    *(_OWORD *)(a1 + 152) = v39;
    goto LABEL_52;
  }

  if (!v37) {
    goto LABEL_43;
  }
LABEL_51:
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 14os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_52:
  uint64_t v40 = (_OWORD *)(a1 + 168);
  uint64_t v41 = (_OWORD *)(a2 + 168);
  uint64_t v42 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176))
  {
    if (v42)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 18os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.NumberingSystem(a1 + 168);
      __int128 v43 = *(_OWORD *)(a2 + 184);
      *uint64_t v40 = *v41;
      *(_OWORD *)(a1 + 18os_unfair_lock_unlock(*v0 + 4) = v43;
    }
  }

  else if (v42)
  {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 18os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v44 = *(_OWORD *)(a2 + 184);
    *uint64_t v40 = *v41;
    *(_OWORD *)(a1 + 18os_unfair_lock_unlock(*v0 + 4) = v44;
  }

  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  __int128 v45 = *(_OWORD *)(a2 + 216);
  __int128 v46 = *(_OWORD *)(a2 + 232);
  __int128 v47 = *(_OWORD *)(a2 + 248);
  *(_WORD *)(a1 + 26os_unfair_lock_unlock(*v0 + 4) = *(_WORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v47;
  *(_OWORD *)(a1 + 232) = v46;
  *(_OWORD *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v45;
  uint64_t v48 = *(void *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(void *)(a1 + 272) = v48;
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  __int128 v49 = (_OWORD *)(a1 + 288);
  uint64_t v50 = (_OWORD *)(a2 + 288);
  uint64_t v51 = *(void *)(a2 + 296);
  if (*(void *)(a1 + 296))
  {
    if (v51)
    {
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 30os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 304);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.MeasurementSystem(a1 + 288);
      __int128 v52 = *(_OWORD *)(a2 + 304);
      *__int128 v49 = *v50;
      *(_OWORD *)(a1 + 30os_unfair_lock_unlock(*v0 + 4) = v52;
    }
  }

  else if (v51)
  {
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(void *)(a1 + 30os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 304);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v53 = *(_OWORD *)(a2 + 304);
    *__int128 v49 = *v50;
    *(_OWORD *)(a1 + 30os_unfair_lock_unlock(*v0 + 4) = v53;
  }

  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  uint64_t v54 = (_OWORD *)(a1 + 328);
  uint64_t v55 = (_OWORD *)(a2 + 328);
  uint64_t v56 = *(void *)(a1 + 336);
  unint64_t v57 = *(void *)(a2 + 336);
  if (v56 == 1)
  {
    if (v57 <= 1)
    {
LABEL_68:
      __int128 v58 = *(_OWORD *)(a2 + 344);
      *uint64_t v54 = *v55;
      *(_OWORD *)(a1 + 34os_unfair_lock_unlock(*v0 + 4) = v58;
      goto LABEL_77;
    }

    goto LABEL_76;
  }

  if (v57 == 1)
  {
    outlined destroy of Any?(a1 + 328, (uint64_t *)&demangling cache variable for type metadata for Locale.Region?);
    goto LABEL_71;
  }

  if (v56)
  {
    if (v57)
    {
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 34os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 344);
      *(void *)(a1 + 352) = *(void *)(a2 + 352);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_77;
    }

    outlined destroy of Locale.Region(a1 + 328);
LABEL_71:
    __int128 v59 = *(_OWORD *)(a2 + 344);
    *uint64_t v54 = *v55;
    *(_OWORD *)(a1 + 34os_unfair_lock_unlock(*v0 + 4) = v59;
    goto LABEL_77;
  }

  if (!v57) {
    goto LABEL_68;
  }
LABEL_76:
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 34os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_77:
  char v60 = (_OWORD *)(a1 + 360);
  uint64_t v61 = (_OWORD *)(a2 + 360);
  uint64_t v62 = *(void *)(a1 + 368);
  unint64_t v63 = *(void *)(a2 + 368);
  if (v62 == 1)
  {
    if (v63 <= 1)
    {
LABEL_79:
      __int128 v64 = *(_OWORD *)(a2 + 376);
      *char v60 = *v61;
      *(_OWORD *)(a1 + 376) = v64;
      goto LABEL_88;
    }

    goto LABEL_87;
  }

  if (v63 == 1)
  {
    outlined destroy of Any?(a1 + 360, &demangling cache variable for type metadata for Locale.Subdivision?);
    goto LABEL_82;
  }

  if (v62)
  {
    if (v63)
    {
      *(void *)(a1 + 360) = *(void *)(a2 + 360);
      *(void *)(a1 + 368) = *(void *)(a2 + 368);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 376) = *(void *)(a2 + 376);
      *(void *)(a1 + 38os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 384);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_88;
    }

    outlined destroy of Locale.Subdivision(a1 + 360);
LABEL_82:
    __int128 v65 = *(_OWORD *)(a2 + 376);
    *char v60 = *v61;
    *(_OWORD *)(a1 + 376) = v65;
    goto LABEL_88;
  }

  if (!v63) {
    goto LABEL_79;
  }
LABEL_87:
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 38os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 384);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_88:
  uint64_t v66 = *(void *)(a2 + 392);
  if (*(void *)(a1 + 392) == 1LL)
  {
    if (v66 != 1)
    {
      uint64_t v67 = *(void *)(a2 + 400);
      *(void *)(a1 + 392) = v66;
      *(void *)(a1 + 400) = v67;
      swift_unknownObjectRetain();
      goto LABEL_95;
    }

    goto LABEL_93;
  }

  if (v66 == 1)
  {
    outlined destroy of Any?(a1 + 392, &demangling cache variable for type metadata for TimeZone?);
LABEL_93:
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    goto LABEL_95;
  }

  uint64_t v68 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = v66;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 400) = v68;
LABEL_95:
  uint64_t v69 = (_OWORD *)(a1 + 408);
  uint64_t v70 = (_OWORD *)(a2 + 408);
  uint64_t v71 = *(void *)(a1 + 416);
  unint64_t v72 = *(void *)(a2 + 416);
  if (v71 != 1)
  {
    if (v72 == 1)
    {
      outlined destroy of Any?(a1 + 408, &demangling cache variable for type metadata for Locale.Variant?);
    }

    else
    {
      if (!v71)
      {
        if (!v72) {
          goto LABEL_97;
        }
LABEL_105:
        *(void *)(a1 + 408) = *(void *)(a2 + 408);
        *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 416);
        *(void *)(a1 + 42os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 424);
        *(void *)(a1 + 432) = *(void *)(a2 + 432);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_106;
      }

      if (v72)
      {
        *(void *)(a1 + 408) = *(void *)(a2 + 408);
        *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 416);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 42os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 424);
        *(void *)(a1 + 432) = *(void *)(a2 + 432);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_106;
      }

      outlined destroy of Locale.Variant(a1 + 408);
    }

    __int128 v74 = *(_OWORD *)(a2 + 424);
    _OWORD *v69 = *v70;
    *(_OWORD *)(a1 + 42os_unfair_lock_unlock(*v0 + 4) = v74;
    goto LABEL_106;
  }

  if (v72 > 1) {
    goto LABEL_105;
  }
LABEL_97:
  __int128 v73 = *(_OWORD *)(a2 + 424);
  _OWORD *v69 = *v70;
  *(_OWORD *)(a1 + 42os_unfair_lock_unlock(*v0 + 4) = v73;
LABEL_106:
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 46os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 464);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 50os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 504);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Locale.Language.Components(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy544_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x220uLL);
}

uint64_t assignWithTake for _LocaleICU.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 == 1) {
    goto LABEL_4;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5 == 1)
  {
    outlined destroy of Locale.Language.Components(a1);
LABEL_4:
    __int128 v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    __int128 v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    __int128 v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v8;
    goto LABEL_5;
  }

  if (v4)
  {
    if (v5)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 24);
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }

    outlined destroy of Locale.LanguageCode(a1);
  }

  __int128 v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v16;
LABEL_21:
  if (*(void *)(a1 + 40))
  {
    uint64_t v17 = *(void *)(a2 + 40);
    if (v17)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v17;
      swift_bridgeObjectRelease();
      uint64_t v18 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v18;
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }

    outlined destroy of Locale.Script(a1 + 32);
  }

  __int128 v29 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v29;
LABEL_44:
  if (*(void *)(a1 + 72))
  {
    uint64_t v30 = *(void *)(a2 + 72);
    if (v30)
    {
      *(void *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v30;
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v31;
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }

    outlined destroy of Locale.Region(a1 + 64);
  }

  __int128 v36 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 6os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v36;
LABEL_5:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  if (*(void *)(a1 + 112))
  {
    uint64_t v9 = *(void *)(a2 + 112);
    if (v9)
    {
      *(void *)(a1 + 10os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = v9;
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = v10;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }

    outlined destroy of Locale.Collation(a1 + 104);
  }

  __int128 v12 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 10os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v12;
LABEL_13:
  uint64_t v13 = *(void *)(a1 + 144);
  uint64_t v14 = *(void *)(a2 + 144);
  if (v13 != 1)
  {
    if (v14 == 1)
    {
      outlined destroy of Any?(a1 + 136, &demangling cache variable for type metadata for Locale.Currency?);
    }

    else if (v13)
    {
      if (v14)
      {
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        *(void *)(a1 + 14os_unfair_lock_unlock(*v0 + 4) = v14;
        swift_bridgeObjectRelease();
        uint64_t v15 = *(void *)(a2 + 160);
        *(void *)(a1 + 152) = *(void *)(a2 + 152);
        *(void *)(a1 + 160) = v15;
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }

      outlined destroy of Locale.Currency(a1 + 136);
    }
  }

  __int128 v19 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v19;
LABEL_26:
  if (*(void *)(a1 + 176))
  {
    uint64_t v20 = *(void *)(a2 + 176);
    if (v20)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v20;
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(a2 + 192);
      *(void *)(a1 + 18os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v21;
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }

    outlined destroy of Locale.NumberingSystem(a1 + 168);
  }

  __int128 v22 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 18os_unfair_lock_unlock(*v0 + 4) = v22;
LABEL_31:
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_OWORD *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_WORD *)(a1 + 26os_unfair_lock_unlock(*v0 + 4) = *(_WORD *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 280);
  if (*(void *)(a1 + 296))
  {
    uint64_t v23 = *(void *)(a2 + 296);
    if (v23)
    {
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = v23;
      swift_bridgeObjectRelease();
      uint64_t v24 = *(void *)(a2 + 312);
      *(void *)(a1 + 30os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 304);
      *(void *)(a1 + 312) = v24;
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }

    outlined destroy of Locale.MeasurementSystem(a1 + 288);
  }

  __int128 v25 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 30os_unfair_lock_unlock(*v0 + 4) = v25;
LABEL_36:
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  uint64_t v26 = *(void *)(a1 + 336);
  uint64_t v27 = *(void *)(a2 + 336);
  if (v26 != 1)
  {
    if (v27 == 1)
    {
      outlined destroy of Any?(a1 + 328, (uint64_t *)&demangling cache variable for type metadata for Locale.Region?);
    }

    else if (v26)
    {
      if (v27)
      {
        *(void *)(a1 + 328) = *(void *)(a2 + 328);
        *(void *)(a1 + 336) = v27;
        swift_bridgeObjectRelease();
        uint64_t v28 = *(void *)(a2 + 352);
        *(void *)(a1 + 34os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 344);
        *(void *)(a1 + 352) = v28;
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }

      outlined destroy of Locale.Region(a1 + 328);
    }
  }

  __int128 v32 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 34os_unfair_lock_unlock(*v0 + 4) = v32;
LABEL_49:
  uint64_t v33 = *(void *)(a1 + 368);
  uint64_t v34 = *(void *)(a2 + 368);
  if (v33 != 1)
  {
    if (v34 == 1)
    {
      outlined destroy of Any?(a1 + 360, &demangling cache variable for type metadata for Locale.Subdivision?);
    }

    else if (v33)
    {
      if (v34)
      {
        *(void *)(a1 + 360) = *(void *)(a2 + 360);
        *(void *)(a1 + 368) = v34;
        swift_bridgeObjectRelease();
        uint64_t v35 = *(void *)(a2 + 384);
        *(void *)(a1 + 376) = *(void *)(a2 + 376);
        *(void *)(a1 + 38os_unfair_lock_unlock(*v0 + 4) = v35;
        swift_bridgeObjectRelease();
        goto LABEL_59;
      }

      outlined destroy of Locale.Subdivision(a1 + 360);
    }
  }

  __int128 v37 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v37;
LABEL_59:
  if (*(void *)(a1 + 392) == 1LL)
  {
LABEL_62:
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    goto LABEL_64;
  }

  uint64_t v38 = *(void *)(a2 + 392);
  if (v38 == 1)
  {
    outlined destroy of Any?(a1 + 392, &demangling cache variable for type metadata for TimeZone?);
    goto LABEL_62;
  }

  uint64_t v39 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = v38;
  swift_unknownObjectRelease();
  *(void *)(a1 + 400) = v39;
LABEL_64:
  uint64_t v40 = *(void *)(a1 + 416);
  uint64_t v41 = *(void *)(a2 + 416);
  if (v40 == 1)
  {
LABEL_71:
    __int128 v43 = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 42os_unfair_lock_unlock(*v0 + 4) = v43;
    goto LABEL_72;
  }

  if (v41 == 1)
  {
    outlined destroy of Any?(a1 + 408, &demangling cache variable for type metadata for Locale.Variant?);
    goto LABEL_71;
  }

  if (!v40) {
    goto LABEL_71;
  }
  if (!v41)
  {
    outlined destroy of Locale.Variant(a1 + 408);
    goto LABEL_71;
  }

  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v41;
  swift_bridgeObjectRelease();
  uint64_t v42 = *(void *)(a2 + 432);
  *(void *)(a1 + 42os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = v42;
  swift_bridgeObjectRelease();
LABEL_72:
  uint64_t v44 = *(void *)(a2 + 448);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = v44;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 46os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 464);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 50os_unfair_lock_unlock(*v0 + 4) = *(void *)(a2 + 504);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _LocaleICU.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 544)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 456);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _LocaleICU.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 536) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 18os_unfair_lock_unlock(*v0 + 4) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 10os_unfair_lock_unlock(*v0 + 4) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2os_unfair_lock_unlock(*v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 50os_unfair_lock_unlock(*v0 + 4) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 42os_unfair_lock_unlock(*v0 + 4) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 34os_unfair_lock_unlock(*v0 + 4) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 26os_unfair_lock_unlock(*v0 + 4) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 54os_unfair_lock_unlock(*v0 + 4) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 456) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 54os_unfair_lock_unlock(*v0 + 4) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _LocaleICU.State()
{
  return &type metadata for _LocaleICU.State;
}

unint64_t lazy protocol witness table accessor for type _LocaleICU.State and conformance _LocaleICU.State()
{
  unint64_t result = lazy protocol witness table cache variable for type _LocaleICU.State and conformance _LocaleICU.State;
  if (!lazy protocol witness table cache variable for type _LocaleICU.State and conformance _LocaleICU.State)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for _LocaleICU.State,  &type metadata for _LocaleICU.State);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _LocaleICU.State and conformance _LocaleICU.State);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for _LocaleICU(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type _LocaleICU and conformance _LocaleICU( &lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU,  (uint64_t)&protocol conformance descriptor for _LocaleICU);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in LocaleCache.fixedNSLocale(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in LocaleCache.fixedNSLocale(_:)(a1, v2, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.identifierCapturingPreferences.getter@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _LocaleICU.identifierCapturingPreferences.getter(a1, v2, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.identifier(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.identifier(_:)(a1, *(unsigned __int8 *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.variant.getter@<X0>( void *a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.variant.getter(a1, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.subdivision.getter@<X0>( void *a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.subdivision.getter(a1, a2);
}

uint64_t outlined copy of Locale.Subdivision??(uint64_t result, uint64_t a2)
{
  if (a2 != 1) {
    return outlined copy of Locale.LanguageCode?(result, a2);
  }
  return result;
}

void partial apply for closure #1 in _LocaleICU.timeZone.getter(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t outlined copy of TimeZone??(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t outlined consume of TimeZone??(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in _LocaleICU.region.getter@<X0>( void *a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.region.getter(a1, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.collation.getter@<X0>( void *a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.collation.getter(a1, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.hourCycle.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in _LocaleICU.hourCycle.getter(a1, v2, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.minimumDaysInFirstWeek.getter@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  return closure #1 in _LocaleICU.minimumDaysInFirstWeek.getter(*(__int128 *)&a1, a2);
}

uint64_t closure #1 in _LocaleICU.firstDayOfWeek.getterpartial apply@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return closure #1 in _LocaleICU.firstDayOfWeek.getter(a1, v2, a2);
}

void partial apply for closure #1 in _LocaleICU.availableNumberingSystems.getter( void *a1@<X0>, void *a2@<X8>)
{
}

uint64_t partial apply for closure #1 in _LocaleICU.numberingSystem.getter@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.numberingSystem.getter(a1, v2, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.currency.getter@<X0>( uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.currency.getter(a1, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.measurementSystem.getter@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in _LocaleICU.measurementSystem.getter(a1, v2, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.currencyCode.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _LocaleICU.currencyCode.getter(v1, a1);
}

uint64_t partial apply for closure #1 in _LocaleICU.currencySymbol.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _LocaleICU.decimalSeparator.getter(v1, a1);
}

uint64_t partial apply for closure #1 in _LocaleICU.groupingSeparator.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _LocaleICU.decimalSeparator.getter(v1, a1);
}

uint64_t partial apply for closure #1 in _LocaleICU.decimalSeparator.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _LocaleICU.decimalSeparator.getter(v1, a1);
}

void partial apply for closure #1 in _LocaleICU.calendar.getter(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t partial apply for closure #1 in _LocaleICU.scriptCode.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.scriptCode.getter(a1, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.languageCode.getter@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.languageCode.getter(a1, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.collationIdentifierDisplayName(for:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.collationIdentifierDisplayName(for:)( a1,  *(void *)(v2 + 16),  *(void **)(v2 + 24),  a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.currencySymbolDisplayName(for:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.currencySymbolDisplayName(for:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.currencyCodeDisplayName(for:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.currencyCodeDisplayName(for:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.calendarIdentifierDisplayName(for:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.calendarIdentifierDisplayName(for:)(a1, *(unsigned __int8 *)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.variantCodeDisplayName(for:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _LocaleICU.variantCodeDisplayName(for:)(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.scriptCodeDisplayName(for:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.scriptCodeDisplayName(for:)(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.countryCodeDisplayName(for:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _LocaleICU.countryCodeDisplayName(for:)(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.languageCodeDisplayName(for:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _LocaleICU.languageCodeDisplayName(for:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.identifierDisplayName(for:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _LocaleICU.identifierDisplayName(for:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t lazy protocol witness table accessor for type _LocaleICU and conformance _LocaleICU( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for _LocaleICU();
    uint64_t result = MEMORY[0x186E20D4C](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t outlined consume of Locale.Subdivision??(uint64_t result, uint64_t a2)
{
  if (a2 != 1) {
    return outlined consume of Locale.LanguageCode?(result, a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for _LocaleICU.State.NumberFormattersBox()
{
  return &type metadata for _LocaleICU.State.NumberFormattersBox;
}

unint64_t lazy protocol witness table accessor for type _LocaleICU.State.NumberFormattersBox and conformance _LocaleICU.State.NumberFormattersBox()
{
  unint64_t result = lazy protocol witness table cache variable for type _LocaleICU.State.NumberFormattersBox and conformance _LocaleICU.State.NumberFormattersBox;
  if (!lazy protocol witness table cache variable for type _LocaleICU.State.NumberFormattersBox and conformance _LocaleICU.State.NumberFormattersBox)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for _LocaleICU.State.NumberFormattersBox,  &type metadata for _LocaleICU.State.NumberFormattersBox);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _LocaleICU.State.NumberFormattersBox and conformance _LocaleICU.State.NumberFormattersBox);
  }

  return result;
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)( uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  v21[1] = *MEMORY[0x1895F89C0];
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a4 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a4) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a3 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v9 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }

  if (v9 < -1) {
    goto LABEL_21;
  }
  uint64_t v10 = v9 + 1;
  if (v9 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    __int128 v12 = (char *)v21 - v11;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v12, v10, 1, a3, a4);
    char v14 = v13;
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0) {
      uint64_t v15 = 0LL;
    }
    else {
      uint64_t v15 = v12;
    }
    uint64_t result = a1(v15);
    if (v4) {
      return swift_willThrow();
    }
  }

  else
  {
    uint64_t v17 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v17, v10, 1, a3, a4);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0) {
      uint64_t v20 = 0LL;
    }
    else {
      uint64_t v20 = v17;
    }
    a1((char *)v20);
    return MEMORY[0x186E20E60](v17, -1LL, -1LL);
  }

  return result;
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)( void (*a1)(char *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  v21[3] = *MEMORY[0x1895F89C0];
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a4 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a4) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a3 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v9 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_23:
    __break(1u);
  }

  if (v9 < -1) {
    goto LABEL_23;
  }
  uint64_t v10 = v9 + 1;
  if (v9 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    __int128 v12 = (char *)v21 - v11;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v12, v10, 1, a3, a4);
    char v14 = v13;
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0) {
      uint64_t v15 = 0LL;
    }
    else {
      uint64_t v15 = v12;
    }
    a1(v15);
    if (v4) {
      return swift_willThrow();
    }
    else {
      return v21[1];
    }
  }

  else
  {
    uint64_t v17 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v17, v10, 1, a3, a4);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0) {
      uint64_t v20 = 0LL;
    }
    else {
      uint64_t v20 = v17;
    }
    a1((char *)v20);
    if (v4)
    {
      return MEMORY[0x186E20E60](v17, -1LL, -1LL);
    }

    else
    {
      MEMORY[0x186E20E60](v17, -1LL, -1LL);
      return v21[2];
    }
  }

{
  uint64_t v4;
  Swift::Int isStackAllocationSafe;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  char *v15;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  void v21[6];
  v21[5] = *MEMORY[0x1895F89C0];
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a4 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a4) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a3 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v9 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_23:
    __break(1u);
  }

  if (v9 < -1) {
    goto LABEL_23;
  }
  uint64_t v10 = v9 + 1;
  if (v9 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    __int128 v12 = (char *)v21 - v11;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v12, v10, 1, a3, a4);
    char v14 = v13;
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0) {
      uint64_t v15 = 0LL;
    }
    else {
      uint64_t v15 = v12;
    }
    a1(v15);
    if (v4) {
      return swift_willThrow();
    }
    else {
      return v21[1];
    }
  }

  else
  {
    uint64_t v17 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v17, v10, 1, a3, a4);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0) {
      uint64_t v20 = 0LL;
    }
    else {
      uint64_t v20 = v17;
    }
    a1((char *)v20);
    if (v4)
    {
      return MEMORY[0x186E20E60](v17, -1LL, -1LL);
    }

    else
    {
      MEMORY[0x186E20E60](v17, -1LL, -1LL);
      return v21[3];
    }
  }

uint64_t specialized String.withFileSystemRepresentation<A>(_:)( void (*a1)(_BYTE *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a4 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a4) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a3 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v9 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_23:
    __break(1u);
  }

  if (v9 < -1) {
    goto LABEL_23;
  }
  uint64_t v10 = v9 + 1;
  if (v9 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    __int128 v12 = &v22[-v11];
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v12, v10, 1, a3, a4);
    char v14 = v13;
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0) {
      uint64_t v15 = 0LL;
    }
    else {
      uint64_t v15 = v12;
    }
    a1(v15);
    if (v4) {
      swift_willThrow();
    }
    else {
      char v16 = v22[6];
    }
  }

  else
  {
    uint64_t v17 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v17, v10, 1, a3, a4);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0) {
      uint64_t v20 = 0LL;
    }
    else {
      uint64_t v20 = v17;
    }
    a1((_BYTE *)v20);
    MEMORY[0x186E20E60](v17, -1LL, -1LL);
    if (!v4) {
      char v16 = v22[7];
    }
  }

  return v16 & 1;
}

id @nonobjc NSProgress.__allocating_init(totalUnitCount:)(uint64_t a1)
{
  return objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_progressWithTotalUnitCount_, a1);
}

void specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *(*a9)(void *__return_ptr, void *, uint64_t)@<X8>, uint64_t a10, uint64_t a11)
{
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
}

{
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  (void (*)(uint64_t))lazy protocol witness table accessor for type CocoaError and conformance CocoaError,  (uint64_t)&type metadata for CocoaError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
}

void specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *(*a9)(void *__return_ptr, void *, uint64_t)@<X8>, uint64_t a10, uint64_t a11, void (*a12)(uint64_t), uint64_t a13, uint64_t (*a14)(void *), uint64_t (*a15)(void *), void *(*a16)(void *__return_ptr, void *, uint64_t), void *(*a17)(void *__return_ptr, void, void), uint64_t (*a18)(void), uint64_t (*a19)(uint64_t, void), uint64_t a20, uint64_t (*a21)(void), uint64_t (*a22)(uint64_t, void))
{
  void *(*v67)(__int128 *__return_ptr, void *, uint64_t);
  uint64_t v68;
  void *v69;
  unint64_t v70;
  Swift::Int v71;
  unint64_t v72;
  uint64_t (*v73)();
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t (**v79)(uint64_t, uint64_t, uint64_t);
  __int128 *v80;
  uint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  id v86;
  id v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t (**v99)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  unint64_t v118;
  void *(*v119)(void *__return_ptr, void *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  Swift::String v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  Swift::Int v126;
  __int16 v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t (**v140)(uint64_t, uint64_t, uint64_t);
  __int128 *v141;
  uint64_t v142;
  unsigned __int8 *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  id v150;
  id v151;
  void *v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  Swift::Int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t (*v175)(void);
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  void *v179;
  void *v180;
  void *v181;
  unint64_t v182;
  uint64_t v183;
  unsigned __int8 *v184;
  uint64_t v185;
  uint64_t (**v186)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  __int128 v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  Swift::String v197;
  Swift::String v198;
  unint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  void *v209;
  void *(*v210)(void *__return_ptr, void *, uint64_t);
  unint64_t v211;
  void *v212;
  unsigned __int16 *v213;
  id v214;
  void *v215;
  id v216;
  unsigned __int16 *v217;
  char v218;
  Swift::Int v219;
  char v220;
  Swift::Int v221;
  uint64_t v222;
  uint64_t (*v223)(void);
  uint64_t (*v224)(void);
  _BYTE *v225;
  _BYTE *v226;
  uint64_t v227;
  id v228;
  id v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t (*v239)(void);
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *(*v244)(void *__return_ptr, void *, uint64_t);
  void *v245;
  uint64_t v246;
  uint64_t v247;
  void v248[3];
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  _OWORD v257[2];
  uint64_t v258[3];
  __int128 v259;
  _OWORD v260[5];
  __int128 v261;
  _OWORD v262[3];
  __int128 v263;
  uint64_t v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;
  char v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int16 v274;
  unint64_t v275;
  unint64_t v276;
  __int128 v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  char v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int16 v288;
  __int128 v25 = a4;
  char v247 = a2;
  if (!a3)
  {
    uint64_t v35 = 0LL;
LABEL_208:
    int v231 = a13;
    specialized CocoaError.init<A>(_:path:url:underlying:variant:source:destination:)( (uint64_t)a1,  a3,  v35,  v25,  &v263,  a6,  a7,  a8,  a10,  a11,  a12);
    *(void *)a9 = v263;
    return;
  }

  int v245 = a4;
  int v246 = a5;
  swift_bridgeObjectRetain();
  if (!_foundation_swift_url_feature_enabled())
  {
    uint64_t v244 = a9;
    __int128 v36 = a1;
    uint64_t v37 = a7;
    uint64_t v38 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v38 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v38) {
      swift_bridgeObjectRetain();
    }
    BOOL v45 = (specialized BidirectionalCollection.last.getter(a2, a3) & 0x1FF) == 47;
    id v46 = objc_allocWithZone(MEMORY[0x189604030]);
    uint64_t v47 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v48 = objc_msgSend(v46, sel_initFileURLWithPath_isDirectory_, v47, v45);
    swift_unknownObjectRelease();
    uint64_t v44 = static URL._converted(from:)(v48);

    swift_bridgeObjectRelease();
    uint64_t v35 = 0LL;
    a7 = v37;
    a1 = v36;
    a9 = v244;
    __int128 v25 = v245;
    if (!v44) {
      goto LABEL_208;
    }
    goto LABEL_207;
  }

  uint64_t v243 = a7;
  swift_bridgeObjectRetain();
  char v30 = _foundation_swift_url_feature_enabled();
  uint64_t v31 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0x2000000000000000LL) != 0) {
    uint64_t v32 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v32 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if ((v30 & 1) == 0)
  {
    if (!v32) {
      swift_bridgeObjectRelease();
    }
    v39._uint64_t countAndFlagsBits = 47LL;
    v39._unint64_t object = (void *)0xE100000000000000LL;
    Swift::Bool v40 = String.hasSuffix(_:)(v39);
    id v41 = objc_allocWithZone(MEMORY[0x189604030]);
    uint64_t v42 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v43 = objc_msgSend(v41, sel_initFileURLWithPath_isDirectory_relativeToURL_, v42, v40, 0);
    swift_unknownObjectRelease();
    uint64_t v44 = static URL._converted(from:)(v43);
    swift_bridgeObjectRelease();

    a7 = v243;
    __int128 v25 = v245;
    goto LABEL_207;
  }

  uint64_t v241 = a6;
  uint64_t v242 = a8;
  if (!v32)
  {
    uint64_t v239 = a1;
    swift_bridgeObjectRelease();
    static URL.currentDirectoryOrNil()(&v277);
    __int128 v49 = (void *)v277;
    uint64_t v263 = v277;
    uint64_t v264 = v278;
    outlined copy of URL?(v277);
    URL.init(string:relativeTo:)(0LL, 0xE000000000000000LL, (id *)&v263, (uint64_t *)&v277);
    outlined consume of URL?(v49);
    uint64_t v44 = (void *)v277;
    if (!(void)v277)
    {
      __break(1u);
      goto LABEL_235;
    }

    outlined consume of URL?(v49);
    swift_bridgeObjectRelease();
    __int128 v25 = v245;
    a8 = v242;
    a7 = v243;
LABEL_206:
    a6 = v241;
    a1 = v239;
LABEL_207:
    uint64_t v35 = v44;
    goto LABEL_208;
  }

  uint64_t v275 = a2;
  uint64_t v276 = a3;
  uint64_t v33 = a1;
  if ((specialized Collection.first.getter(a2, a3) & 0x1FF) == 0x2F
    || (specialized Collection.first.getter(a2, a3) & 0x1FF) == 0x7E)
  {
    uint64_t v237 = 0LL;
    uint64_t v238 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v240 = 1;
  }

  else
  {
    static URL.currentDirectoryOrNil()(&v277);
    uint64_t v240 = 0;
    uint64_t v34 = *((void *)&v277 + 1);
    uint64_t v237 = (void *)v277;
    uint64_t v238 = v278;
  }

  __int16 v50 = specialized BidirectionalCollection.last.getter(a2, a3);
  if ((v50 & 0x100) != 0)
  {
    BOOL v51 = 0;
    if ((a3 & 0x2000000000000000LL) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }

  BOOL v51 = v50 == 47;
  if ((a3 & 0x2000000000000000LL) != 0) {
LABEL_28:
  }
    uint64_t v31 = HIBYTE(a3) & 0xF;
LABEL_29:
  if (!v31) {
    goto LABEL_38;
  }
  __int16 v52 = specialized BidirectionalCollection.last.getter(v247, a3);
  if ((v52 & 0x100) != 0)
  {
    if (!v51) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }

  if (v52 != 47 && v51)
  {
LABEL_37:
    v54._uint64_t countAndFlagsBits = 47LL;
    v54._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v54);
  }

LABEL_216:
      uint64_t v114 = (char *)_StringObject.sharedUTF8.getter();
LABEL_109:
      uint64_t v116 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v114, v115, 4u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v116) {
        goto LABEL_110;
      }
      goto LABEL_100;
    }

    uint64_t v233 = v68;
    uint64_t v239 = a1;
    uint64_t v210 = a9;
    *(void *)&uint64_t v259 = v76;
    *((void *)&v259 + 1) = v77;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    uint64_t v211 = v77;
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v212 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v213 = (unsigned __int16 *)objc_msgSend(v212, sel__fastCharacterContents);
    uint64_t v214 = v212;
    if (v213)
    {
      *(void *)&uint64_t v259 = v235;
      *((void *)&v259 + 1) = v211;
      StringProtocol._ephemeralString.getter();
      uint64_t v215 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v216 = objc_msgSend(v215, sel_length);
      swift_unknownObjectRelease();
      uint64_t v217 = v213;
      uint64_t v77 = v211;
      uint64_t v218 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v217,  (uint64_t)v216,  4u,  1);
    }

    else
    {
      uint64_t v77 = v211;
      uint64_t v218 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v235, v211, 4u, 1);
    }

    uint64_t v220 = v218;
    swift_bridgeObjectRelease_n();
    a9 = v210;
    a1 = v239;
    uint64_t v68 = v233;
    if ((v220 & 1) != 0)
    {
LABEL_110:
      swift_bridgeObjectRetain();
      uint64_t v117 = swift_bridgeObjectRelease();
      *(void *)&uint64_t v268 = v235;
      *((void *)&v268 + 1) = v77;
      LOBYTE(v259) = 37;
      MEMORY[0x1895F8858](v117);
      int v231 = (uint64_t)&v259;
      specialized Sequence.contains(where:)(a14, (uint64_t)&v230, v118, v77);
      swift_bridgeObjectRelease();
      goto LABEL_193;
    }

      uint64_t v221 = (4 * *(_BYTE *)(v220 + 18) + 8) & 0x3C;
      a3 = ((-15LL << v221) - 1) & a3 | (v222 << v221);
      uint64_t v42 = *(void *)(v220 + 24 + 24 * v222);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v220 = v42;
      if (!*(_BYTE *)(v42 + 18)) {
        goto LABEL_325;
      }
    }
  }

  swift_unknownObjectRetain_n();
  uint64_t result = swift_retain_n();
  uint64_t v219 = v32;
  uint64_t v42 = v16;
LABEL_325:
  uint64_t v104 = *(unsigned __int16 *)(v42 + 16);
  if (*(_WORD *)(v42 + 16))
  {
    uint64_t v312 = *(void *)(v42 + 24);
    char v56 = v219 - v312;
    if (__OFSUB__(v219, v312)) {
      goto LABEL_417;
    }
    if (__OFADD__(v56, 1LL)) {
      goto LABEL_418;
    }
    if (v56 + 1 <= 0)
    {
      uint64_t v104 = 0LL;
      goto LABEL_362;
    }

    if ((_DWORD)v104 != 1) {
      goto LABEL_347;
    }
    v219 -= v312;
  }

  __break(1u);
LABEL_217:
  __break(1u);
LABEL_218:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

                                swift_willThrow();
                                goto LABEL_217;
                              }

                    if (v89 != 1)
                    {
                      if (v89 != 2)
                      {
                        if (v89 != 3) {
                          return v7;
                        }
                        uint64_t v158 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v90 + 2);
                        if ((v158 | 0x20) == 0x65) {
                          return v7;
                        }
                      }

                      uint64_t v159 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v90 + 1);
                      if ((v159 | 0x20) == 0x65) {
                        return v7;
                      }
                    }

                    if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v90)
                                         - 49) >= 9u)
                      return v7;
                    goto LABEL_180;
                  }

                  break;
                case 'E':
                  goto LABEL_207;
                default:
                  if (v157 != 101) {
                    goto LABEL_256;
                  }
LABEL_207:
                  if (v153 != 1 && (v153 || v109 < 1)) {
                    goto LABEL_256;
                  }
                  uint64_t v154 = 0;
                  v11 += v109 + 1;
                  uint64_t v153 = 2;
                  uint64_t v152 = 1;
                  if (v11 < v12) {
                    continue;
                  }
                  goto LABEL_301;
              }
            }
          }

          goto LABEL_314;
        }

        uint64_t v165 = v11 + 2;
        if ((uint64_t)(v12 - (v11 + 2)) < 1 || v165 >= v12 || ((v165 - v145) & 0x8000000000000000LL) != 0)
        {
LABEL_243:
          __break(1u);
        }

        else
        {
          uint64_t v166 = v146 + v145 - v11 - 3;
          uint64_t v167 = v11 - v145 + 3;
          while (1)
          {
            uint64_t v168 = v167;
            uint64_t v169 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v165);
            if (!UInt8.isValidHexDigit.getter(v169)) {
              break;
            }
            uint64_t v105 = v166-- < 1;
            if (!v105 && ++v165 < v12)
            {
              uint64_t v167 = v168 + 1;
              if ((v168 & 0x8000000000000000LL) == 0) {
                continue;
              }
            }

            goto LABEL_243;
          }
        }

        LOBYTE(v107) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v165);
        __int16 v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v165, a3, v218);
        __int16 v52 = v170;
        Swift::String v54 = v171;
        uint64_t v172 = 0xED00007265626D75LL;
        uint64_t v173 = 0x6E20786568206E69LL;
        goto LABEL_258;
      }

      uint64_t v130 = v129;
      if (!specialized static Comparable.<= infix(_:_:)(a3, v12 + v11 - 1)) {
        goto LABEL_296;
      }
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, a3 + v218)) {
        goto LABEL_297;
      }
      uint64_t v131 = specialized min<A>(_:_:)(v12 + v11, a3 + v218);
      uint64_t v214 = a3;
      if (v131 <= a3)
      {
        a3 = 0LL;
        uint64_t v11 = 1LL;
        goto LABEL_182;
      }

      __int128 v8 = v131;
      uint64_t v211 = v130;
      uint64_t v132 = v218 + a3;
      uint64_t v133 = -(uint64_t)a3;
      uint64_t v11 = 1LL;
      uint64_t v134 = a3;
      uint64_t v216 = v218 + a3;
      uint64_t v219 = -(uint64_t)a3;
      do
      {
        uint64_t v31 = 0LL;
        __int128 v12 = 0LL;
        a4 = v132 - v134;
        uint64_t v135 = v133 + v134;
        while (1)
        {
          if ((uint64_t)(v135 + v12) < 0 || (uint64_t)(a4 + v31) < 1)
          {
            __break(1u);
LABEL_281:
            __break(1u);
LABEL_282:
            uint64_t v191 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v12, v11);
            specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v191, v192, a3, a4);
            if (v8) {
              return v7;
            }
LABEL_265:
            uint64_t v218 = a4;
            char v18 = 0;
            goto LABEL_151;
          }

          char v136 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v134 + v12);
          if (v136 == 10)
          {
            uint64_t v86 = __OFADD__(v11++, 1LL);
            uint64_t v133 = v219;
            if (!v86)
            {
              v134 += v12 + 1;
              goto LABEL_173;
            }

                            swift_bridgeObjectRelease();
                            uint64_t v4 = v190;
                            uint64_t v0 = &unk_18C5D1000;
                            uint64_t v138 = v199;
                            if ((v197 & 1) != 0)
                            {
LABEL_136:
                              uint64_t v141 = (uint64_t *)(v83[7] + 16 * v134);
                              *uint64_t v141 = v14;
                              v141[1] = v82;
                              goto LABEL_141;
                            }

                            swift_bridgeObjectRelease();
                            uint64_t v4 = v190;
                            uint64_t v0 = &unk_18C5D1000;
                            uint64_t v138 = v199;
                            if ((v197 & 1) != 0)
                            {
LABEL_136:
                              uint64_t v141 = (uint64_t *)(v83[7] + 16 * v134);
                              *uint64_t v141 = v14;
                              v141[1] = v82;
                              goto LABEL_141;
                            }

  __break(1u);
LABEL_217:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized CocoaError.init<A>(_:path:url:underlying:variant:source:destination:)( uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X6>, void *a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t))
{
  uint64_t v13 = a1;
  if (a2)
  {
    char v14 = (void *)String._bridgeToObjectiveCImpl()();
    a1 = swift_bridgeObjectRelease();
    if (a3) {
      goto LABEL_3;
    }
  }

  else
  {
    char v14 = 0LL;
    if (a3)
    {
LABEL_3:
      id v15 = a3;
      a1 = (uint64_t)outlined consume of URL?(a3);
      uint64_t v16 = a6;
      if (a4) {
        goto LABEL_4;
      }
LABEL_8:
      char v18 = 0LL;
      uint64_t v19 = a8;
      if (v16) {
        goto LABEL_14;
      }
LABEL_9:
      uint64_t v20 = 0LL;
      uint64_t v21 = a10;
      if (v19) {
        goto LABEL_15;
      }
      goto LABEL_10;
    }
  }

  id v15 = 0LL;
  uint64_t v16 = a6;
  if (!a4) {
    goto LABEL_8;
  }
LABEL_4:
  a11(a1);
  id v17 = a4;
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
  }

  else
  {
    swift_allocError();
    void *v24 = v17;
  }

  char v18 = (void *)_swift_stdlib_bridgeErrorToNSError();
  uint64_t v19 = a8;
  if (!v16) {
    goto LABEL_9;
  }
LABEL_14:
  uint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v21 = a10;
  if (v19)
  {
LABEL_15:
    __int128 v22 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }

void specialized _BridgedStoredNSError.errorUserInfo.getter(void *a1)
{
  uint64_t v1 = MEMORY[0x18961AFF0];
  uint64_t v54 = MEMORY[0x18961AFF0];
  id v2 = objc_msgSend(a1, sel_userInfo);
  if (!v2) {
    goto LABEL_20;
  }
  uint64_t v3 = v2;
  swift_unknownObjectRetain();
  uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (!v4)
  {
    id v5 = objc_msgSend(v3, sel_count);
    if (!v5) {
      goto LABEL_19;
    }
    uint64_t v6 = (uint64_t)v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v1 = static _DictionaryStorage.allocate(capacity:)();
    __int128 v7 = *(void **)(v1 + 48);
    uint64_t v8 = *(void *)(v1 + 56);
    swift_retain();
    uint64_t v9 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v7, v8, v3, v6);
    if (v9 < 0 || v6 < v9) {
      goto LABEL_52;
    }
    *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v9;
    if (!v9)
    {
LABEL_18:
      swift_release();
      goto LABEL_19;
    }

    int64_t v10 = v9 - 1;
    uint64_t v11 = v1 + 64;
    while (1)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v10);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      swift_bridgeObjectRetain();
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18);
      char v21 = v20;
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v22 = *(void *)(v1 + 16);
        BOOL v23 = __OFSUB__(v22, 1LL);
        uint64_t v24 = v22 - 1;
        if (v23) {
          goto LABEL_51;
        }
        *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v24;
        goto LABEL_10;
      }

      *(void *)(v11 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      if (v10 < (uint64_t)v19)
      {
        *(_OWORD *)(*(void *)(v1 + 48) + 16 * v19) = *(_OWORD *)(*(void *)(v1 + 48) + 16 * v10);
        uint64_t v12 = *(void *)(v1 + 56);
        uint64_t v13 = (_OWORD *)(v12 + 32 * v10);
        __int128 v14 = v13[1];
        id v15 = (_OWORD *)(v12 + 32 * v19);
        *id v15 = *v13;
        v15[1] = v14;
LABEL_10:
        if (--v10 < 0) {
          goto LABEL_18;
        }
      }

      else
      {
        if (v19 == v10) {
          goto LABEL_10;
        }
        uint64_t v25 = *(void *)(v1 + 48);
        uint64_t v26 = (uint64_t *)(v25 + 16 * v19);
        uint64_t v27 = (uint64_t *)(v25 + 16 * v10);
        uint64_t v28 = *v26;
        uint64_t v29 = v26[1];
        uint64_t v30 = v27[1];
        *uint64_t v26 = *v27;
        v26[1] = v30;
        *uint64_t v27 = v28;
        v27[1] = v29;
        uint64_t v31 = *(void *)(v1 + 56);
        uint64_t v32 = (_OWORD *)(v31 + 32 * v19);
        uint64_t v33 = (_OWORD *)(v31 + 32 * v10);
        outlined init with take of Any(v32, &v52);
        outlined init with take of Any(v33, v32);
        outlined init with take of Any(&v52, v33);
        if (v10 < 0) {
          goto LABEL_18;
        }
      }
    }
  }

  uint64_t v1 = v4;
LABEL_19:

LABEL_20:
  int64_t v34 = 0LL;
  uint64_t v35 = v1 + 64;
  uint64_t v36 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v37 = -1LL;
  if (v36 < 64) {
    uint64_t v37 = ~(-1LL << v36);
  }
  unint64_t v38 = v37 & *(void *)(v1 + 64);
  int64_t v39 = (unint64_t)(v36 + 63) >> 6;
  if (!v38) {
    goto LABEL_27;
  }
LABEL_25:
  unint64_t v41 = __clz(__rbit64(v38));
  v38 &= v38 - 1;
  unint64_t v42 = v41 | (v34 << 6);
LABEL_26:
  uint64_t v43 = *(void *)(v1 + 56);
  uint64_t v44 = (void *)(*(void *)(v1 + 48) + 16 * v42);
  uint64_t v45 = v44[1];
  *(void *)&__int128 v50 = *v44;
  *((void *)&v50 + 1) = v45;
  outlined init with copy of Any(v43 + 32 * v42, (uint64_t)v51);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of (key: String, value: Any)?((uint64_t)&v50, (uint64_t)&v52);
    uint64_t v49 = *((void *)&v52 + 1);
    if (!*((void *)&v52 + 1))
    {
      swift_release();
      return;
    }

    uint64_t v40 = v52;
    outlined init with take of Any(&v53, &v50);
    specialized Dictionary.subscript.setter((uint64_t)&v50, v40, v49);
    if (v38) {
      goto LABEL_25;
    }
LABEL_27:
    int64_t v46 = v34 + 1;
    if (__OFADD__(v34, 1LL)) {
      break;
    }
    if (v46 < v39)
    {
      unint64_t v47 = *(void *)(v35 + 8 * v46);
      if (v47) {
        goto LABEL_30;
      }
      int64_t v48 = v34 + 2;
      ++v34;
      if (v46 + 1 < v39)
      {
        unint64_t v47 = *(void *)(v35 + 8 * v48);
        if (v47) {
          goto LABEL_33;
        }
        int64_t v34 = v46 + 1;
        if (v46 + 2 < v39)
        {
          unint64_t v47 = *(void *)(v35 + 8 * (v46 + 2));
          if (v47)
          {
            v46 += 2LL;
            goto LABEL_30;
          }

          int64_t v34 = v46 + 2;
          if (v46 + 3 < v39)
          {
            unint64_t v47 = *(void *)(v35 + 8 * (v46 + 3));
            if (v47)
            {
              v46 += 3LL;
              goto LABEL_30;
            }

            int64_t v48 = v46 + 4;
            int64_t v34 = v46 + 3;
            if (v46 + 4 < v39)
            {
              unint64_t v47 = *(void *)(v35 + 8 * v48);
              if (!v47)
              {
                while (1)
                {
                  int64_t v46 = v48 + 1;
                  if (__OFADD__(v48, 1LL)) {
                    goto LABEL_53;
                  }
                  if (v46 >= v39)
                  {
                    int64_t v34 = v39 - 1;
                    goto LABEL_47;
                  }

                  unint64_t v47 = *(void *)(v35 + 8 * v46);
                  ++v48;
                  if (v47) {
                    goto LABEL_30;
                  }
                }
              }

void cleanupTemporaryDirectory(at:)(uint64_t a1, unint64_t a2)
{
  v21[1] = *(id *)MEMORY[0x1895F89C0];
  if (a2)
  {
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
    }

    else
    {
      Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
    }

    uint64_t v5 = 3 * isStackAllocationSafe;
    if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 == (3 * isStackAllocationSafe) >> 63)
    {
      if (v5 >= -1)
      {
        uint64_t v6 = v5 + 1;
        if (v5 < 1024
          || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1895F8858](isStackAllocationSafe);
          uint64_t v8 = (char *)v21 - v7;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v8, v6, 1, a1, a2);
          char v10 = v9;
          swift_bridgeObjectRelease();
          if ((v10 & 1) == 0 && !rmdir(v8)) {
            return;
          }
        }

        else
        {
          uint64_t v11 = (const char *)swift_slowAlloc();
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v11, v6, 1, a1, a2);
          char v13 = v12;
          swift_bridgeObjectRelease();
          if ((v13 & 1) != 0)
          {
            MEMORY[0x186E20E60](v11, -1LL, -1LL);
          }

          else
          {
            int v14 = rmdir(v11);
            MEMORY[0x186E20E60](v11, -1LL, -1LL);
            if (!v14) {
              return;
            }
          }
        }

        id v15 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
        uint64_t v16 = String._bridgeToObjectiveCImpl()();
        v21[0] = 0LL;
        unsigned int v17 = objc_msgSend(v15, sel_removeItemAtPath_error_, v16, v21);

        swift_unknownObjectRelease();
        if (v17)
        {
          id v18 = v21[0];
          return;
        }

        if (v21[0])
        {
          id v20 = v21[0];
          id v19 = v21[0];
          swift_willThrow();

          return;
        }

        if (one-time initialization token for _nilObjCError == -1)
        {
LABEL_23:
          swift_willThrow();
          return;
        }

uint64_t createTemporaryFile(at:inPath:prefix:options:variant:)( uint64_t a1, unint64_t a2, uint64_t a3, char *a4, void *a5, id a6, uint64_t a7, uint64_t a8)
{
  char v9 = v8;
  uint64_t v330 = a8;
  int v14 = (void *)a2;
  uint64_t v15 = a1;
  uint64_t v342 = *MEMORY[0x1895F89C0];
  uint64_t v16 = *(void **)a3;
  __int128 v331 = *(void **)(a3 + 8);
  uint64_t v332 = *(void *)(a3 + 16);
  id v333 = v16;
  uint64_t v17 = *(unsigned __int8 *)(a3 + 24);
  uint64_t v338 = a1;
  __int128 v339 = (void *)a2;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v18 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v18 = a1 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  uint64_t v328 = a7;
  uint64_t v329 = (uint64_t)v9;
  if (v18)
  {
    uint64_t v19 = specialized BidirectionalCollection.last.getter(v15, (unint64_t)v14);
    if (!v20)
    {
      __break(1u);
      goto LABEL_303;
    }

    if (v19 == 47 && v20 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0)
      {
        v22._uint64_t countAndFlagsBits = 47LL;
        v22._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v22);
        uint64_t v15 = v338;
        int v14 = v339;
      }
    }
  }

  id v23 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  objc_msgSend(v23, sel_processIdentifier);

  lazy protocol witness table accessor for type Int32 and conformance Int32();
  uint64_t v24 = String.init<A>(_:radix:uppercase:)();
  uint64_t v26 = v25;
  v340._uint64_t countAndFlagsBits = v15;
  v340._unint64_t object = v14;
  swift_bridgeObjectRetain();
  v27._uint64_t countAndFlagsBits = (uint64_t)a4;
  v27._unint64_t object = a5;
  String.append(_:)(v27);
  swift_bridgeObjectRetain();
  v28._uint64_t countAndFlagsBits = v24;
  v28._unint64_t object = v26;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = (uint64_t)v14;
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = 0x5858585858582ELL;
  v30._unint64_t object = (void *)0xE700000000000000LL;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  uint64_t v31 = v15;
  unint64_t v334 = v29;
  if ((v29 & 0x2000000000000000LL) != 0) {
    id v32 = (id)(((unint64_t)v340._object >> 56) & 0xF);
  }
  else {
    id v32 = (id)(v15 & 0xFFFFFFFFFFFFLL);
  }
  uint64_t v33 = 8LL;
  while (1)
  {
    while (1)
    {
      Swift::Int isStackAllocationSafe = (Swift::Int)v32;
      if ((v334 & 0x1000000000000000LL) != 0) {
        Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
      }
      uint64_t v35 = 3 * isStackAllocationSafe;
      if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
      {
        __break(1u);
LABEL_222:
        uint64_t v85 = 512LL;
LABEL_229:
        uint64_t v327 = v85;
        swift_retain_n();
        id v257 = v32;
        swift_retain_n();
        id v258 = v257;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
          goto LABEL_303;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v259 = (int)POSIXErrorCode.rawValue.getter();
        id v260 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v261 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v255 = objc_msgSend(v260, sel_initWithDomain_code_userInfo_, v261, v259, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v262 = objc_msgSend(v255, sel_domain);
        id v263 = static String._unconditionallyBridgeFromObjectiveC(_:)(v262);
        uint64_t v265 = v264;

        if (v263 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v265 == v266)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v84 = v332;
          id v32 = v333;
        }

        else
        {
          char v267 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v84 = v332;
          if ((v267 & 1) == 0) {
            goto LABEL_298;
          }
          id v32 = v333;
        }

LABEL_303:
    v340._uint64_t countAndFlagsBits = 0LL;
    v340._unint64_t object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    v340._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    v340._unint64_t object = (void *)0x80000001839C9190LL;
    LODWORD(v337._countAndFlagsBits) = (_DWORD)a6;
    goto LABEL_304;
  }

  CocoaError.Code.init(fileErrno:reading:)(v62, 0);
  id v326 = (id)v336;
  uint64_t v63 = v332;
  swift_retain_n();
  id v59 = v333;
  id v64 = v333;
  uint64_t v65 = v331;
  swift_retain_n();
  id v66 = v64;
  uint64_t v327 = (uint64_t)v66;
  if ((_DWORD)a6 == 102)
  {
    id v67 = v66;
    id v68 = 0LL;
    goto LABEL_78;
  }

  if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
    goto LABEL_303;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
  uint64_t v89 = (int)POSIXErrorCode.rawValue.getter();
  id v90 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v91 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v68 = objc_msgSend(v90, sel_initWithDomain_code_userInfo_, v91, v89, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v92 = objc_msgSend(v68, sel_domain);
  id v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
  uint64_t v95 = v94;

  if (v93 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v95 != v96)
  {
    char v106 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v63 = v332;
    if ((v106 & 1) != 0) {
      goto LABEL_77;
    }
    goto LABEL_297;
  }

  swift_bridgeObjectRelease_n();
  uint64_t v63 = v332;
LABEL_77:
  id v59 = v333;
  id v67 = (id)v327;
LABEL_78:
  swift_bridgeObjectRetain();
  outlined copy of PathOrURL(v59, (uint64_t)v65, v63, 1);
  if (_foundation_swift_url_feature_enabled())
  {
    unint64_t object = v68;
    v340._uint64_t countAndFlagsBits = (uint64_t)v67;
    v340._unint64_t object = v65;
    uint64_t v341 = v63;
    swift_retain();
    id v107 = v67;
    swift_retain();
    Swift::String v108 = URL.path(percentEncoded:)(1);
    Swift::String v340 = v108;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v108._countAndFlagsBits, (unint64_t)v108._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v337._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v109 = specialized Set._Variant.insert(_:)(&v335, 0x2FuLL);
    uint64_t v110 = v337._countAndFlagsBits;
    uint64_t v111 = v340._countAndFlagsBits;
    uint64_t v112 = v340._object;
    unint64_t v113 = ((unint64_t)v340._object >> 56) & 0xF;
    if (v113)
    {
      Swift::String v337 = v340;
      MEMORY[0x1895F8858](v109);
      uint64_t v322 = (uint64_t)&v337;
      uint64_t v323 = v110;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v321,  v111,  (unint64_t)v112);
      if (v114 == 1)
      {
        unint64_t v116 = (unint64_t)v337._object;
        Swift::Int v115 = v337._countAndFlagsBits;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v115, v116, v110);
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v65 = v331;
      id v59 = v333;
      id v68 = object;
    }

    else
    {
      swift_bridgeObjectRelease();
      id v59 = v333;
      id v68 = object;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(v59, (uint64_t)v65, v63, 1);
    outlined consume of PathOrURL(v59, (uint64_t)v65, v63, 1);
LABEL_119:
    id v67 = (id)v327;
  }

  else
  {
    id v117 = objc_msgSend(v67, sel__parameterString);
    if (v117)
    {
      char v118 = v117;
      id v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
      uint64_t v121 = v120;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v122 = objc_msgSend((id)v327, sel_path)) != 0)
      {
        uint64_t v123 = v122;
        id v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
        char v126 = v125;

        v340._uint64_t countAndFlagsBits = (uint64_t)v124;
        v340._unint64_t object = v126;
        swift_bridgeObjectRetain();
        v127._uint64_t countAndFlagsBits = 59LL;
        v127._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v127);
        uint64_t v63 = v332;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v128._uint64_t countAndFlagsBits = (uint64_t)v119;
        v128._unint64_t object = v121;
        String.append(_:)(v128);
        swift_bridgeObjectRelease();
        id v59 = v333;
      }

      else
      {
        v340._uint64_t countAndFlagsBits = 59LL;
        v340._unint64_t object = (void *)0xE100000000000000LL;
        v129._uint64_t countAndFlagsBits = (uint64_t)v119;
        v129._unint64_t object = v121;
        String.append(_:)(v129);
      }

      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v59, (uint64_t)v65, v63, 1);
      goto LABEL_119;
    }

    id v130 = objc_msgSend(v67, sel_path);
    if (v130)
    {
      uint64_t v131 = v130;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
    }

    uint64_t v63 = v332;
    outlined consume of PathOrURL(v59, (uint64_t)v65, v332, 1);
  }

  uint64_t v151 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v152 = v67;
  outlined consume of PathOrURL(v59, (uint64_t)v65, v63, 1);
  if (!v68)
  {
    uint64_t v153 = 0LL;
    uint64_t v15 = 0LL;
    if (v330) {
      goto LABEL_127;
    }
    goto LABEL_124;
  }

  v340._uint64_t countAndFlagsBits = (uint64_t)v68;
  lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  uint64_t v153 = v68;
  id v154 = v68;
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
  }

  else
  {
    swift_allocError();
    *uint64_t v156 = v154;
  }

  uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
  uint64_t v63 = v332;
  if (!v330)
  {
LABEL_124:
    uint64_t v155 = 0LL;
    goto LABEL_128;
  }

      id v154 = v254;
      uint64_t result = swift_release();
      uint64_t v56 = v249;
      if ((v246 & 1) == 0)
      {
        specialized Rope.update<A>(at:by:)(&v283, v248, &v281);
        goto LABEL_347;
      }

      uint64_t v271 = v254;
      uint64_t v155 = v283;
      *((void *)&v272 + 1) = *((void *)&v283 + 1);
      if ((void)v283 != v249[11]) {
        goto LABEL_472;
      }
      if (!*v248) {
        goto LABEL_505;
      }
      specialized Rope._Node._prepareModify(at:)(*((unint64_t *)&v283 + 1), (uint64_t)&v276);
      uint64_t result = specialized closure #1 in AttributedString._InternalRuns.updateAndCoalesce(at:with:)( (uint64_t)&v276 + 8,  &v281,  v270);
      v249[11] = v155 + 1;
      *(void *)&uint64_t v272 = v155 + 1;
      if (!v249[8]) {
        goto LABEL_506;
      }
      uint64_t v156 = specialized Rope._Node._finalizeModify(_:)(&v269, &v276);
      uint64_t v273 = v156;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v157 = v270[0];
      id v263 = v270[1];
      id v158 = v249[8];
      id v159 = v249[9];
      id v161 = v249[10];
      uint64_t v160 = v249[11];
      *(void *)&Swift::Int v276 = v155 + 1;
      *((void *)&v276 + 1) = *((void *)&v155 + 1);
      *(void *)&unint64_t v277 = v156;
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v276, v158, v159, v161, v160);
      swift_unknownObjectRelease();
      uint64_t v162 = v276;
      id v163 = v277;
      id v164 = v249[9];
      uint64_t v166 = v249[10];
      uint64_t v165 = v249[11];
      uint64_t v167 = swift_unknownObjectRetain();
      specialized Rope.endIndex.getter(v167, v164, v166, v165);
      id v169 = v168;
      swift_unknownObjectRelease();
      if (*((void *)&v162 + 1) < v169)
      {
        specialized Rope.subscript.getter( v162,  *((unint64_t *)&v162 + 1),  v163,  v249[8],  v249[9],  v249[10],  v249[11]);
        uint64_t v171 = v170;
        if ((specialized static Dictionary<>.== infix(_:_:)(v172, v157) & 1) != 0)
        {
          uint64_t v173 = specialized static Set.== infix(_:_:)(v171, v263);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v173 & 1) != 0)
          {
            uint64_t v174 = specialized Rope.remove(at:)((uint64_t *)&v272);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            specialized Rope.update<A>(at:by:)(&v272, v248, v174);
          }
        }

        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }

      id v186 = v272;
      uint64_t v187 = (uint64_t)v273;
      uint64_t v188 = v249[9];
      Swift::String v189 = v249[10];
      Swift::String v190 = v249[11];
      Swift::String v191 = swift_unknownObjectRetain();
      specialized Rope.startIndex.getter(v191, v188, v189, v190);
      uint64_t v193 = v192;
      swift_unknownObjectRelease();
      if (v193 < *((void *)&v186 + 1))
      {
        uint64_t v194 = v249[8];
        uint64_t v195 = v249[9];
        uint64_t v196 = v249[10];
        id v197 = v249[11];
        swift_unknownObjectRetain();
        uint64_t v198 = specialized Rope.index(before:)(v186, *((unint64_t *)&v186 + 1), v187, v194, v195, v196, v197);
        id v200 = v199;
        uint64_t v202 = v201;
        swift_unknownObjectRelease();
        specialized Rope.subscript.getter(v198, v200, v202, v249[8], v249[9], v249[10], v249[11]);
        char v204 = v203;
        if ((specialized static Dictionary<>.== infix(_:_:)(v205, v157) & 1) != 0)
        {
          uint64_t v206 = specialized static Set.== infix(_:_:)(v204, v263);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v206 & 1) == 0) {
            goto LABEL_341;
          }
          id v207 = specialized Rope.remove(at:)((uint64_t *)&v272);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v208 = v249[8];
          id v209 = v249[9];
          id v210 = v249[10];
          uint64_t v211 = v249[11];
          swift_unknownObjectRetain();
          specialized Rope.formIndex(before:)((uint64_t)&v272, v208, v209, v210, v211);
          swift_unknownObjectRelease();
          uint64_t result = (uint64_t)specialized Rope.update<A>(at:by:)(&v272, v248, &v271, v207);
          if (!__OFSUB__(v251, 1LL))
          {
            --v251;
            goto LABEL_341;
          }

      __break(1u);
LABEL_304:
      __break(1u);
      goto LABEL_305;
    }

    uint64_t v57 = v56;
    int v58 = v222;
    if (!specialized static Comparable.<= infix(_:_:)(v222, v12 + v11 - 1)) {
      goto LABEL_296;
    }
    if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, v222 + a4)) {
      goto LABEL_297;
    }
    id v59 = specialized min<A>(_:_:)(v12 + v11, v222 + a4);
    if (v59 <= v222)
    {
      id v70 = 0LL;
      uint64_t v63 = 1LL;
      goto LABEL_103;
    }

    uint64_t v60 = v59;
    uint64_t v211 = v57;
    uint64_t v61 = a4 + v222;
    Swift::Int32 v62 = -(uint64_t)v222;
    uint64_t v63 = 1LL;
    id v64 = v222;
LABEL_59:
    uint64_t v65 = 0LL;
    id v66 = 0LL;
    id v67 = v61 - v64;
    id v68 = v62 + v64;
    while ((uint64_t)(v68 + v66) >= 0 && (uint64_t)(v67 + v65) >= 1)
    {
      char v69 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v64 + v66);
      if (v69 == 10)
      {
        uint64_t v71 = __OFADD__(v63++, 1LL);
        if (!v71)
        {
          v64 += v66 + 1;
          goto LABEL_76;
        }

        goto LABEL_304;
      }

      if (v69 == 13)
      {
        uint64_t v72 = v64 + v66;
        if (!specialized static Comparable.<= infix(_:_:)(v64 + v66 + 1, v55)) {
          goto LABEL_74;
        }
        if (((v64 - v222 + v66 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v66 + v67) >= 1)
        {
LABEL_74:
          uint64_t v71 = __OFADD__(v63++, 1LL);
          if (!v71)
          {
            id v64 = v72 + 1;
LABEL_76:
            uint64_t v61 = v215 + v222;
            Swift::Int32 v62 = -(uint64_t)v222;
            if (v64 >= v60)
            {
              id v70 = 0LL;
LABEL_78:
              int v58 = v222;
              uint64_t v57 = v211;
LABEL_103:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)id v92 = 0xD000000000000010LL;
              *(void *)(v92 + 8) = 0x80000001839CB4F0LL;
              *(void *)(v92 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v57;
              *(void *)(v92 + 2os_unfair_lock_unlock(*v0 + 4) = v63;
              *(void *)(v92 + 32) = v70;
              *(void *)(v92 + 40) = v55 - v58;
              *(_BYTE *)(v92 + 48) = 1;
              goto LABEL_249;
            }

            goto LABEL_59;
          }

      __break(1u);
LABEL_304:
      __break(1u);
      goto LABEL_305;
    }

    uint64_t v57 = v56;
    int v58 = v224;
    if (!specialized static Comparable.<= infix(_:_:)(v224, v12 + v11 - 1)) {
      goto LABEL_296;
    }
    if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, v224 + a4)) {
      goto LABEL_297;
    }
    id v59 = specialized min<A>(_:_:)(v12 + v11, v224 + a4);
    if (v59 <= v224)
    {
      id v70 = 0LL;
      uint64_t v63 = 1LL;
      goto LABEL_103;
    }

    uint64_t v60 = v59;
    uint64_t v213 = v57;
    uint64_t v61 = a4 + v224;
    Swift::Int32 v62 = -(uint64_t)v224;
    uint64_t v63 = 1LL;
    id v64 = v224;
LABEL_59:
    uint64_t v65 = 0LL;
    id v66 = 0LL;
    id v67 = v61 - v64;
    id v68 = v62 + v64;
    while ((uint64_t)(v68 + v66) >= 0 && (uint64_t)(v67 + v65) >= 1)
    {
      char v69 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v64 + v66);
      if (v69 == 10)
      {
        uint64_t v71 = __OFADD__(v63++, 1LL);
        if (!v71)
        {
          v64 += v66 + 1;
          goto LABEL_76;
        }

        goto LABEL_304;
      }

      if (v69 == 13)
      {
        uint64_t v72 = v64 + v66;
        if (!specialized static Comparable.<= infix(_:_:)(v64 + v66 + 1, v55)) {
          goto LABEL_74;
        }
        if (((v64 - v224 + v66 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v66 + v67) >= 1)
        {
LABEL_74:
          uint64_t v71 = __OFADD__(v63++, 1LL);
          if (!v71)
          {
            id v64 = v72 + 1;
LABEL_76:
            uint64_t v61 = v217 + v224;
            Swift::Int32 v62 = -(uint64_t)v224;
            if (v64 >= v60)
            {
              id v70 = 0LL;
LABEL_78:
              int v58 = v224;
              uint64_t v57 = v213;
LABEL_103:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)uint64_t v94 = 0xD000000000000010LL;
              *(void *)(v94 + 8) = 0x80000001839CB4F0LL;
              *(void *)(v94 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v57;
              *(void *)(v94 + 2os_unfair_lock_unlock(*v0 + 4) = v63;
              *(void *)(v94 + 32) = v70;
              *(void *)(v94 + 40) = v55 - v58;
              *(_BYTE *)(v94 + 48) = 1;
              goto LABEL_249;
            }

            goto LABEL_59;
          }

            __break(1u);
LABEL_304:
            __break(1u);
            goto LABEL_305;
          }

          if (v136 == 13) {
            break;
          }
          a3 = v12 + 1;
          if (__OFADD__(v12, 1LL)) {
            goto LABEL_281;
          }
          ++v12;
          --v31;
          if (v134 + v12 >= v8) {
            goto LABEL_175;
          }
        }

        uint64_t v137 = v134 + v12;
        a3 = v134 + v12 + 1;
        id v133 = v219;
        if (!specialized static Comparable.<= infix(_:_:)(a3, v128)) {
          goto LABEL_171;
        }
LABEL_171:
        Swift::Int32 v86 = __OFADD__(v11++, 1LL);
        if (v86) {
          goto LABEL_304;
        }
        uint64_t v134 = v137 + 1;
LABEL_173:
        uint64_t v132 = v216;
      }

      while (v134 < v8);
      a3 = 0LL;
LABEL_175:
      id v130 = v211;
LABEL_182:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v142 = 0xD000000000000010LL;
      *(void *)(v142 + 8) = 0x80000001839CB4F0LL;
      *(void *)(v142 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v130;
      *(void *)(v142 + 2os_unfair_lock_unlock(*v0 + 4) = v11;
      *(void *)(v142 + 32) = a3;
      *(void *)(v142 + 40) = v128 - v214;
      *(_BYTE *)(v142 + 48) = 1;
LABEL_262:
      swift_willThrow();
      return v7;
    case '.':
      char v126 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(1LL, v12, v11);
      specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v126, v127, a3, a4);
      if (!v6) {
        goto LABEL_148;
      }
      return v7;
    case 'I':
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)((char *)v12, v11, a3, a4);
      goto LABEL_143;
    case 'N':
      specialized static JSON5Scanner.validateNaN(from:fullSource:)((char *)v12, v11, a3, a4);
LABEL_143:
      if (v6) {
        return v7;
      }
      Swift::String v218 = a4;
      uint64_t v18 = 1;
      goto LABEL_150;
    default:
      goto LABEL_316;
  }

uint64_t closure #1 in createProtectedTemporaryFile(at:inPath:options:variant:)@<X0>( char *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, id a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  if (a1)
  {
    int v19 = _NSOpenFileDescriptor_Protected(a1, 2562, a2, 438LL);
    if ((v19 & 0x80000000) == 0)
    {
      *(_DWORD *)a9 = v19;
      *(void *)(a9 + 8) = a3;
      *(void *)(a9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a4;
      uint64_t v20 = a5[1];
      *(void *)(a9 + 2os_unfair_lock_unlock(*v0 + 4) = *a5;
      *(void *)(a9 + 32) = v20;
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    }

id write(buffer:toFileDescriptor:path:parentProgress:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, id a5)
{
  uint64_t v6 = v5;
  uint64_t v7 = (uint64_t)a5;
  LODWORD(v175) = a3;
  uint64_t v8 = a2;
  int64_t v10 = *(void *)(a4 + 8);
  id v172 = *(id *)a4;
  uint64_t v11 = *(void *)(a4 + 16);
  LODWORD(v12) = *(unsigned __int8 *)(a4 + 24);
  char v13 = (char *)(a2 - a1);
  if (a1) {
    uint64_t v14 = a2 - a1;
  }
  else {
    uint64_t v14 = 0LL;
  }
  if (a5) {
    objc_msgSend(a5, sel_becomeCurrentWithPendingUnitCount_, v14);
  }
  uint64_t v174 = (char *)v14;
  if (v14 < 1) {
    goto LABEL_62;
  }
  uint64_t v170 = v5;
  uint64_t v171 = v11;
  int v181 = v12;
  uint64_t v169 = v8;
  if (!a1)
  {
    int64_t v15 = v10;
    uint64_t v16 = 0LL;
    id v17 = 0LL;
    if (!v7) {
      goto LABEL_56;
    }
    goto LABEL_11;
  }

  if (v7)
  {
    int64_t v15 = v10;
    uint64_t v16 = (uint64_t)v13;
LABEL_11:
    uint64_t v18 = (void *)objc_opt_self();
    id v19 = objc_msgSend(v18, sel_currentProgress);

    if (v19)
    {
      uint64_t v20 = v16;
      uint64_t v21 = v16 / 100;
      if (v16 / 100 <= 4096) {
        uint64_t v21 = 4096LL;
      }
      uint64_t v176 = v21;
      id v17 = objc_msgSend(v18, sel_progressWithTotalUnitCount_, v16);
    }

    else
    {
      id v17 = 0LL;
      uint64_t v20 = v16;
      uint64_t v176 = v16;
    }

    int64_t v10 = v15;
    goto LABEL_18;
  }

  id v17 = 0LL;
  uint64_t v176 = (uint64_t)v13;
  uint64_t v20 = (uint64_t)v13;
LABEL_18:
  if (v20 < 0)
  {
LABEL_204:
    __break(1u);
    goto LABEL_205;
  }

  if (!v20) {
    goto LABEL_55;
  }
  int64_t v167 = v10;
  uint64_t v168 = v7;
  int64_t v10 = 0LL;
  if (v176 >= 0x7FFFFFFF) {
    uint64_t v22 = 0x7FFFFFFFLL;
  }
  else {
    uint64_t v22 = v176;
  }
  uint64_t v173 = (char *)v20;
  uint64_t v12 = v20;
  uint64_t v23 = v174;
  while (1)
  {
    if (!v17) {
      goto LABEL_28;
    }
    id v24 = v17;

LABEL_28:
    if (v12 >= v22) {
      unint64_t v25 = v22;
    }
    else {
      unint64_t v25 = v12;
    }
    uint64_t v7 = v10 + v25;
    if (__OFADD__(v10, v25))
    {
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
      goto LABEL_204;
    }

    if (v7 < v10) {
      goto LABEL_199;
    }
    if (v17)
    {
      id v26 = v17;

      uint64_t v23 = v174;
    }

    if (!a1) {
      goto LABEL_209;
    }
    ssize_t v27 = write((int)v175, (const void *)(a1 + v10), v7 - v10);
    uint64_t v7 = 0x7FFFFFFFLL;
    if (v27 > 0x7FFFFFFF) {
      goto LABEL_53;
    }
    if ((v27 & 0x80000000) != 0)
    {
LABEL_57:
      uint64_t v29 = MEMORY[0x186E1B0E8]();
      v30._uint64_t countAndFlagsBits = 0x6574697277LL;
      v30._unint64_t object = (void *)0xE500000000000000LL;
      logFileIOErrno(_:at:)(v29, v30);
      MEMORY[0x186E1B0F4](v29);

      int64_t v10 = v167;
      uint64_t v7 = v168;
      uint64_t v11 = v171;
      LOBYTE(v12) = v181;
      goto LABEL_66;
    }

    uint64_t v7 = v27;
    if ((_DWORD)v27)
    {
LABEL_53:
      uint64_t v12 = (v12 - v7) & ~((v12 - v7) >> 63);
      if (v17)
      {
        if (__OFSUB__(v173, v12)) {
          goto LABEL_202;
        }
        objc_msgSend(v17, sel_setCompletedUnitCount_, &v173[-v12]);
      }

      if (v176 < (uint64_t)0xFFFFFFFF80000000LL || (int)v7 >= (int)v22)
      {
        BOOL v28 = __OFADD__(v10, v7);
        v10 += v7;
        if (v28) {
          goto LABEL_203;
        }
        if ((uint64_t)v13 < v10)
        {
          __break(1u);
LABEL_55:
          int64_t v15 = v10;
LABEL_56:
          char v13 = 0LL;
          uint64_t v12 = 0LL;
          uint64_t v23 = v174;
          int64_t v10 = v15;
          uint64_t v11 = v171;
LABEL_59:

          if (!__OFSUB__(v13, v12))
          {
            BOOL v46 = &v13[-v12] == v23;
            uint64_t v8 = v169;
            uint64_t v6 = v170;
            LOBYTE(v12) = v181;
            if (!v46)
            {
LABEL_66:
              int v32 = MEMORY[0x186E1B0E8]();
              LODWORD(v13) = v32;
              if ((v12 & 1) != 0)
              {
                uint64_t v33 = 4LL;
                id v34 = v172;
                switch(v32)
                {
                  case 1:
                  case 13:
                    uint64_t v33 = 513LL;
                    goto LABEL_100;
                  case 2:
                    goto LABEL_100;
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 14:
                  case 15:
                  case 16:
                  case 18:
                  case 19:
                  case 20:
                  case 21:
                  case 22:
                  case 23:
                  case 24:
                  case 25:
                  case 26:
                  case 27:
                  case 29:
                  case 31:
                  case 32:
                  case 33:
                  case 34:
                  case 35:
                  case 36:
                  case 37:
                  case 38:
                  case 39:
                  case 40:
                  case 41:
                  case 42:
                  case 43:
                  case 44:
                  case 45:
                  case 46:
                  case 47:
                  case 48:
                  case 49:
                  case 50:
                  case 51:
                  case 52:
                  case 53:
                  case 54:
                  case 55:
                  case 56:
                  case 57:
                  case 58:
                  case 59:
                  case 60:
                  case 61:
                  case 62:
                  case 64:
                  case 65:
                  case 66:
                  case 67:
                  case 68:
                    goto LABEL_96;
                  case 17:
                    uint64_t v33 = 516LL;
                    goto LABEL_100;
                  case 28:
                  case 69:
                    uint64_t v33 = 640LL;
                    goto LABEL_100;
                  case 30:
                    uint64_t v33 = 642LL;
                    goto LABEL_100;
                  case 63:
                    uint64_t v33 = 514LL;
                    goto LABEL_100;
                  default:
                    id v34 = v172;
                    if (v32 == 102)
                    {
                      swift_retain_n();
                      id v58 = v172;
                      swift_retain_n();
                      id v59 = v58;
                      uint64_t v60 = 0LL;
                      uint64_t v176 = 512LL;
LABEL_106:
                      id v72 = v34;
                      swift_retain();
                      swift_retain();
                      if (_foundation_swift_url_feature_enabled())
                      {
                        uint64_t v168 = v7;
                        uint64_t v180 = v11;
                        id v73 = v72;
                        int64_t v167 = v10;
                        swift_retain();
                        swift_retain();
                        Swift::String v74 = URL.path(percentEncoded:)(1);
                        uint64_t countAndFlagsBits = v74._countAndFlagsBits;
                        Swift::String v179 = v74;
                        swift_bridgeObjectRetain();
                        id v175 = v72;
                        if (String.count.getter() <= 1)
                        {
                          unint64_t object = (unint64_t)v74._object;
                        }

                        else
                        {
                          unint64_t object = (unint64_t)v74._object;
                          if ((specialized BidirectionalCollection.last.getter( v74._countAndFlagsBits,  (unint64_t)v74._object) & 0x1FF) == 0x2F)
                          {
                            specialized RangeReplaceableCollection<>.popLast()();
                            swift_bridgeObjectRelease();
                            uint64_t countAndFlagsBits = v179._countAndFlagsBits;
                            unint64_t object = (unint64_t)v179._object;
                          }
                        }

                        uint64_t v177 = Set.init(minimumCapacity:)();
                        uint64_t v90 = specialized Set._Variant.insert(_:)(&v182, 0x2FuLL);
                        uint64_t v91 = v177;
                        uint64_t v92 = HIBYTE(object) & 0xF;
                        if ((object & 0x2000000000000000LL) == 0) {
                          uint64_t v92 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                        }
                        if (v92)
                        {
                          uint64_t v177 = countAndFlagsBits;
                          unint64_t v178 = object;
                          MEMORY[0x1895F8858](v90);
                          uint64_t v165 = (uint64_t)&v177;
                          uint64_t v166 = v91;
                          swift_bridgeObjectRetain();
                          specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v164,  countAndFlagsBits,  object);
                          if (v93 == 1)
                          {
                            Swift::Int v94 = v177;
                            unint64_t v95 = v178;
                            swift_bridgeObjectRetain();
                            specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v94,  v95,  v91);
                            swift_bridgeObjectRelease();
                          }

                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          int64_t v10 = v167;
                          uint64_t v7 = v168;
                          id v34 = v172;
                          id v72 = v175;
                        }

                        else
                        {
                          swift_bridgeObjectRelease();
                          int64_t v10 = v167;
                          uint64_t v7 = v168;
                          id v34 = v172;
                          id v72 = v175;
                        }

                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v97 = v171;
                        outlined consume of PathOrURL(v34, v10, v171, 1);
                        outlined consume of PathOrURL(v34, v10, v97, 1);
                      }

                      else
                      {
                        id v77 = objc_msgSend(v72, sel__parameterString);
                        if (v77)
                        {
                          unint64_t v78 = v77;
                          uint64_t v174 = v60;
                          uint64_t v79 = v11;
                          id v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
                          uint64_t v82 = v81;

                          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                            && (id v83 = objc_msgSend(v72, sel_path)) != 0)
                          {
                            uint64_t v84 = v83;
                            id v175 = v72;
                            id v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
                            id v87 = v86;

                            v179._uint64_t countAndFlagsBits = (uint64_t)v85;
                            v179._unint64_t object = v87;
                            swift_bridgeObjectRetain();
                            v88._uint64_t countAndFlagsBits = 59LL;
                            v88._unint64_t object = (void *)0xE100000000000000LL;
                            String.append(_:)(v88);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRetain();
                            v89._uint64_t countAndFlagsBits = (uint64_t)v80;
                            v89._unint64_t object = v82;
                            String.append(_:)(v89);
                            swift_bridgeObjectRelease();
                            id v72 = v175;
                          }

                          else
                          {
                            v179._uint64_t countAndFlagsBits = 59LL;
                            v179._unint64_t object = (void *)0xE100000000000000LL;
                            v96._uint64_t countAndFlagsBits = (uint64_t)v80;
                            v96._unint64_t object = v82;
                            String.append(_:)(v96);
                          }

                          swift_bridgeObjectRelease();
                          uint64_t v97 = v79;
                          outlined consume of PathOrURL(v34, v10, v79, 1);
                          uint64_t v60 = v174;
                        }

                        else
                        {
                          id v98 = objc_msgSend(v72, sel_path);
                          if (v98)
                          {
                            Swift::String v99 = v98;
                            static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
                          }

                          outlined consume of PathOrURL(v34, v10, v11, 1);
                          uint64_t v97 = v11;
                        }
                      }

                      uint64_t v108 = String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      id v109 = v72;
                      uint64_t v110 = v97;
                      outlined consume of PathOrURL(v34, v10, v97, 1);
                      if (v60)
                      {
                        v179._uint64_t countAndFlagsBits = (uint64_t)v60;
                        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
                        uint64_t v60 = v60;
                        if (_getErrorEmbeddedNSError<A>(_:)()) {
                          goto LABEL_191;
                        }
                        goto LABEL_193;
                      }

                      uint64_t v111 = 0LL;
                      goto LABEL_195;
                    }

uint64_t @objc static NSData._writeData(toPath:data:options:reportProgress:)( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, char a6)
{
  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v11 = v10;
  id v12 = a4;
  specialized static NSData._writeData(toPath:data:options:reportProgress:)((uint64_t)v9, v11, v12, a5, a6);
  swift_bridgeObjectRelease();

  return 1LL;
}

uint64_t @objc static NSData._writeData(toPath:data:options:stringEncodingAttributeData:reportProgress:)( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, int a7)
{
  id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v13 = v12;
  id v14 = a4;
  id v15 = a6;
  id v16 = specialized Data.init(referencing:)(v15);
  unint64_t v18 = v17;

  specialized static NSData._writeData(toPath:data:options:stringEncodingAttributeData:reportProgress:)( (uint64_t)v11,  v13,  v14,  a5,  (uint64_t)v16,  v18,  a7);
  outlined consume of Data._Representation((uint64_t)v16, v18);
  swift_bridgeObjectRelease();
  return 1LL;
}

uint64_t closure #1 in writeToFile(path:data:options:attributes:reportProgress:)( void *a1, uint64_t a2, void *a3, unint64_t a4, void *a5, char a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  unint64_t v10 = (void *)a8;
  uint64_t v92 = *MEMORY[0x1895F89C0];
  LODWORD(v1os_unfair_lock_unlock(*v0 + 4) = a6 & 1;
  if ((a7 & 1) == 0)
  {
    v89._uint64_t countAndFlagsBits = (uint64_t)a3;
    v89._unint64_t object = (void *)a4;
    uint64_t v90 = a5;
    BOOL v91 = (_DWORD)v14 != 0;
    return writeToFileNoAux(path:buffer:options:attributes:reportProgress:)( (uint64_t)&v89,  (uint64_t)a1,  a2,  a7,  a8,  a9 & 1);
  }

  int v80 = a9;
  uint64_t v81 = a2;
  uint64_t v82 = a1;
  int v85 = a6 & 1;
  id v83 = (void *)a7;
  uint64_t v84 = v9;
  if ((a6 & 1) == 0)
  {
    outlined copy of PathOrURL(a3, a4, (uint64_t)a5, 0);
    outlined copy of PathOrURL(a3, a4, (uint64_t)a5, 0);
    swift_bridgeObjectRetain();
    uint64_t v20 = (uint64_t)a3;
    unint64_t v21 = a4;
    if ((a4 & 0x1000000000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_58;
  }

  outlined copy of PathOrURL(a3, a4, (uint64_t)a5, 1);
  swift_retain();
  id v14 = a3;
  swift_retain();
  outlined copy of PathOrURL(a3, a4, (uint64_t)a5, 1);
  outlined copy of PathOrURL(a3, a4, (uint64_t)a5, 1);
  swift_bridgeObjectRetain();
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
  {
    uint64_t v90 = a5;
    id v16 = (void **)v14;
    swift_retain();
    swift_retain();
    Swift::String v17 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v17._countAndFlagsBits;
    Swift::String v89 = v17;
    swift_bridgeObjectRetain();
    uint64_t v79 = v16;
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v17._object;
    }

    else
    {
      unint64_t object = (unint64_t)v17._object;
      if ((specialized BidirectionalCollection.last.getter(v17._countAndFlagsBits, (unint64_t)v17._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v89._countAndFlagsBits;
        unint64_t object = (unint64_t)v89._object;
      }
    }

    uint64_t v86 = Set.init(minimumCapacity:)();
    uint64_t v34 = specialized Set._Variant.insert(_:)(&v88, 0x2FuLL);
    uint64_t v35 = v86;
    uint64_t v36 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000LL) == 0) {
      uint64_t v36 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v36)
    {
      unint64_t v78 = v10;
      uint64_t v86 = countAndFlagsBits;
      unint64_t v87 = object;
      MEMORY[0x1895F8858](v34);
      v77[2] = &v86;
      v77[3] = v35;
      swift_bridgeObjectRetain();
      uint64_t v37 = v84;
      id v38 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v77,  countAndFlagsBits,  object);
      uint64_t v84 = v37;
      if (v39 == 1)
      {
        Swift::Int v40 = v86;
        unint64_t v41 = v87;
        swift_bridgeObjectRetain();
        uint64_t v20 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v40, v41, v35);
        unint64_t v21 = v42;
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v20 = (uint64_t)v38;
        unint64_t v21 = v39;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v10 = v78;
      char v47 = v79;
      if (!v21)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
        outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
        swift_release();
        swift_release();

        uint64_t v20 = 0LL;
        unint64_t v21 = 0xE000000000000000LL;
LABEL_31:
        swift_release();
        swift_release();

        LOBYTE(v1os_unfair_lock_unlock(*v0 + 4) = v85;
        if ((v21 & 0x1000000000000000LL) == 0) {
          goto LABEL_32;
        }
LABEL_58:
        Swift::Int v48 = String.UTF8View._foreignCount()();
        goto LABEL_35;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v20 = 0LL;
      unint64_t v21 = 0xE000000000000000LL;
      char v47 = v79;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
    outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
    swift_release();
    swift_release();

    goto LABEL_31;
  }

  id v22 = objc_msgSend(v14, sel__parameterString);
  if (v22)
  {
    uint64_t v23 = v22;
    id v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    id v26 = v25;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v27 = objc_msgSend(v14, sel_path)) != 0)
    {
      BOOL v28 = v27;
      id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      unint64_t v78 = v10;
      uint64_t v31 = v30;

      v89._uint64_t countAndFlagsBits = (uint64_t)v29;
      v89._unint64_t object = v31;
      swift_bridgeObjectRetain();
      v32._uint64_t countAndFlagsBits = 59LL;
      v32._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v32);
      unint64_t v10 = v78;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v33._uint64_t countAndFlagsBits = (uint64_t)v24;
      v33._unint64_t object = v26;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
    }

    else
    {
      v89._uint64_t countAndFlagsBits = 59LL;
      v89._unint64_t object = (void *)0xE100000000000000LL;
      v43._uint64_t countAndFlagsBits = (uint64_t)v24;
      v43._unint64_t object = v26;
      String.append(_:)(v43);
    }

    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
    outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
    swift_release();
    swift_release();

    uint64_t v20 = v89._countAndFlagsBits;
    unint64_t v21 = (unint64_t)v89._object;
    LOBYTE(v1os_unfair_lock_unlock(*v0 + 4) = v85;
    goto LABEL_58;
  }

  id v44 = objc_msgSend(v14, sel_path);
  if (v44)
  {
    uint64_t v45 = v44;
    uint64_t v20 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    unint64_t v21 = v46;

    outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
    outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
    swift_release();
    swift_release();

    LOBYTE(v1os_unfair_lock_unlock(*v0 + 4) = v85;
    if ((v21 & 0x1000000000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_58;
  }

  outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
  outlined consume of PathOrURL(a3, a4, (uint64_t)a5, 1);
  swift_release();
  swift_release();

  uint64_t v20 = 0LL;
  unint64_t v21 = 0xE000000000000000LL;
  LOBYTE(v1os_unfair_lock_unlock(*v0 + 4) = v85;
LABEL_32:
  if ((v21 & 0x2000000000000000LL) != 0) {
    Swift::Int v48 = HIBYTE(v21) & 0xF;
  }
  else {
    Swift::Int v48 = v20 & 0xFFFFFFFFFFFFLL;
  }
LABEL_35:
  uint64_t v49 = 3 * v48;
  if ((unsigned __int128)(v48 * (__int128)3LL) >> 64 != (3 * v48) >> 63)
  {
    __break(1u);
    goto LABEL_60;
  }

  if (v49 < -1)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
  }

  uint64_t v50 = v49 + 1;
  outlined copy of PathOrURL(a3, a4, (uint64_t)a5, (char)v14);
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
  if (v49 >= 1024)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      id v14 = (id)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v49 + 1, 1, v20, v21);
      char v66 = v65;
      swift_bridgeObjectRelease();
      if ((v66 & 1) != 0)
      {
        unint64_t v78 = v10;
        uint64_t v84 = @"NSCocoaErrorDomain";
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v68 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v69 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v70 = objc_msgSend(v68, sel_initWithDomain_code_userInfo_, v69, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v71 = objc_msgSend(v70, sel_domain);
        id v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
        uint64_t v74 = v73;

        if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(v84) && v74 == v75)
        {
          swift_bridgeObjectRelease_n();
        }

        else
        {
          char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v76 & 1) == 0) {
            goto LABEL_62;
          }
        }

        swift_willThrow();
      }

      else
      {
        closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( (const char *)v14,  a3,  a4,  a5,  v85,  v83,  v80 & 1,  v82,  v81,  v10);
      }

      MEMORY[0x186E20E60](v14, -1LL, -1LL);
      LOBYTE(v1os_unfair_lock_unlock(*v0 + 4) = v85;
      goto LABEL_56;
    }
  }

  uint64_t v79 = &v78;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  uint64_t v53 = (char *)&v78 - v52;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v53, v50, 1, v20, v21);
  char v55 = v54;
  swift_bridgeObjectRelease();
  if ((v55 & 1) == 0)
  {
    char v56 = v84;
    closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( v53,  a3,  a4,  a5,  (char)v14,  v83,  v80 & 1,  v82,  v81,  v10);
    if (!v56) {
      goto LABEL_56;
    }
    goto LABEL_49;
  }

  unint64_t v78 = v10;
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v57 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v58 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v59 = objc_msgSend(v57, sel_initWithDomain_code_userInfo_, v58, 514, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v60 = objc_msgSend(v59, sel_domain);
  id v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
  uint64_t v63 = v62;

  if (v61 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v63 != v64)
  {
    char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v67 & 1) != 0) {
      goto LABEL_48;
    }
    goto LABEL_61;
  }

  swift_bridgeObjectRelease_n();
LABEL_48:
  swift_willThrow();
  LOBYTE(v1os_unfair_lock_unlock(*v0 + 4) = v85;
LABEL_49:
  swift_willThrow();
LABEL_56:
  outlined consume of PathOrURL(a3, a4, (uint64_t)a5, (char)v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PathOrURL(a3, a4, (uint64_t)a5, (char)v14);
  return swift_bridgeObjectRelease();
}

uint64_t writeToFileNoAux(path:buffer:options:attributes:reportProgress:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v417 = a5;
  uint64_t v411 = a2;
  v412 = (char *)a3;
  uint64_t v424 = *MEMORY[0x1895F89C0];
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  LODWORD(v413) = *(unsigned __int8 *)(a1 + 24);
  LODWORD(v410) = a6;
  uint64_t v416 = a4;
  if ((v413 & 1) != 0)
  {
    swift_retain_n();
    id v9 = v6;
    swift_retain_n();
    id v10 = v9;
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      v409 = v6;
      uint64_t v422 = v8;
      id v11 = v10;
      swift_retain();
      swift_retain();
      Swift::String v12 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v12._countAndFlagsBits;
      Swift::String v421 = v12;
      swift_bridgeObjectRetain();
      uint64_t v14 = v8;
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v12._object;
      }

      else
      {
        unint64_t object = (unint64_t)v12._object;
        if ((specialized BidirectionalCollection.last.getter(v12._countAndFlagsBits, (unint64_t)v12._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v421._countAndFlagsBits;
          unint64_t object = (unint64_t)v421._object;
        }
      }

      v418._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v76 = specialized Set._Variant.insert(_:)(&v420, 0x2FuLL);
      uint64_t v77 = v418._countAndFlagsBits;
      uint64_t v78 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000LL) == 0) {
        uint64_t v78 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v78)
      {
        id v415 = v11;
        v418._uint64_t countAndFlagsBits = countAndFlagsBits;
        v418._unint64_t object = (void *)object;
        MEMORY[0x1895F8858](v76);
        uint64_t v404 = (uint64_t)&v418;
        uint64_t v405 = v77;
        swift_bridgeObjectRetain();
        int64_t v79 = v414;
        int v80 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v403,  countAndFlagsBits,  object);
        int64_t v414 = v79;
        if (v81 == 1)
        {
          unint64_t v83 = (unint64_t)v418._object;
          Swift::Int v82 = v418._countAndFlagsBits;
          swift_bridgeObjectRetain();
          uint64_t v16 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v82, v83, v77);
          unint64_t v85 = v84;
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v16 = (uint64_t)v80;
          unint64_t v85 = v81;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v6 = v409;
        uint64_t v8 = v14;
        if (!v85)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of PathOrURL(v6, v7, v14, 1);
          outlined consume of PathOrURL(v6, v7, v14, 1);
          swift_release();
          swift_release();
          id v11 = v415;

          uint64_t v16 = 0LL;
          unint64_t v102 = 0xE000000000000000LL;
LABEL_103:
          swift_release();
          swift_release();

          unint64_t v17 = v102;
          id v415 = (id)v102;
          if ((v102 & 0x1000000000000000LL) != 0) {
            goto LABEL_104;
          }
          goto LABEL_7;
        }

        unint64_t v102 = v85;
        id v11 = v415;
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v16 = 0LL;
        unint64_t v102 = 0xE000000000000000LL;
        uint64_t v6 = v409;
        uint64_t v8 = v14;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v6, v7, v8, 1);
      outlined consume of PathOrURL(v6, v7, v8, 1);
      swift_release();
      swift_release();

      goto LABEL_103;
    }

    id v39 = objc_msgSend(v10, sel__parameterString);
    if (v39)
    {
      Swift::Int v40 = v39;
      id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      Swift::String v43 = v42;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v44 = objc_msgSend(v10, sel_path)) != 0)
      {
        uint64_t v45 = v44;
        id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        uint64_t v47 = v8;
        uint64_t v49 = v48;

        v421._uint64_t countAndFlagsBits = (uint64_t)v46;
        v421._unint64_t object = v49;
        swift_bridgeObjectRetain();
        v50._uint64_t countAndFlagsBits = 59LL;
        v50._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v50);
        uint64_t v8 = v47;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v51._uint64_t countAndFlagsBits = (uint64_t)v41;
        v51._unint64_t object = v43;
        String.append(_:)(v51);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v6, v7, v47, 1);
        uint64_t v16 = (uint64_t)v46;
        unint64_t v17 = (unint64_t)v421._object;
        outlined consume of PathOrURL(v6, v7, v47, 1);
      }

      else
      {
        v421._uint64_t countAndFlagsBits = 59LL;
        v421._unint64_t object = (void *)0xE100000000000000LL;
        v98._uint64_t countAndFlagsBits = (uint64_t)v41;
        v98._unint64_t object = v43;
        String.append(_:)(v98);
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v6, v7, v8, 1);
        outlined consume of PathOrURL(v6, v7, v8, 1);
        uint64_t v16 = 59LL;
        unint64_t v17 = 0xE100000000000000LL;
      }
    }

    else
    {
      id v99 = objc_msgSend(v10, sel_path);
      if (!v99)
      {
        outlined consume of PathOrURL(v6, v7, v8, 1);
        outlined consume of PathOrURL(v6, v7, v8, 1);
        swift_release();
        swift_release();

        uint64_t v16 = 0LL;
        unint64_t v17 = 0xE000000000000000LL;
        id v415 = (id)0xE000000000000000LL;
        goto LABEL_7;
      }

      uint64_t v100 = v99;
      uint64_t v16 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
      unint64_t v17 = v101;

      outlined consume of PathOrURL(v6, v7, v8, 1);
      outlined consume of PathOrURL(v6, v7, v8, 1);
    }

    swift_release();
    swift_release();

    id v415 = (id)v17;
    if ((v17 & 0x1000000000000000LL) != 0) {
      goto LABEL_104;
    }
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = (uint64_t)v6;
    unint64_t v17 = v7;
    id v415 = (id)v7;
    if ((v7 & 0x1000000000000000LL) != 0)
    {
LABEL_104:
      Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
      goto LABEL_10;
    }
  }

LABEL_192:
        uint64_t v75 = 512LL;
LABEL_210:
        uint64_t v416 = v75;
        uint64_t v216 = v8;
        swift_retain_n();
        id v243 = v6;
        swift_retain_n();
        id v244 = v243;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v245 = (int)POSIXErrorCode.rawValue.getter();
          id v246 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v247 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v219 = objc_msgSend(v246, sel_initWithDomain_code_userInfo_, v247, v245, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v248 = objc_msgSend(v219, sel_domain);
          id v249 = static String._unconditionallyBridgeFromObjectiveC(_:)(v248);
          uint64_t v251 = v250;

          if (v249 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v251 == v252)
          {
            swift_bridgeObjectRelease_n();
          }

          else
          {
            char v253 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v253 & 1) == 0) {
              goto LABEL_350;
            }
          }

                            swift_bridgeObjectRelease();
                            uint64_t v0 = &unk_18C5D1000;
                            uint64_t v6 = v197;
                            if ((v199 & 1) != 0) {
                              goto LABEL_107;
                            }
LABEL_193:
                            *(void *)(v6 + 8 * (v81 >> 6) + 64) |= 1LL << v81;
                            unint64_t v148 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v81);
                            *unint64_t v148 = v201;
                            v148[1] = v77;
                            Swift::String v149 = (uint64_t *)(*(void *)(v6 + 56) + 16 * v81);
                            *Swift::String v149 = v21;
                            v149[1] = v20;
                            unint64_t v150 = *(void *)(v6 + 16);
                            Swift::String v50 = __OFADD__(v150, 1LL);
                            int64_t v151 = v150 + 1;
                            if (v50) {
                              goto LABEL_262;
                            }
                            *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v151;
                            swift_bridgeObjectRetain();
LABEL_195:
                            uint64_t v5 = v16 + 1;
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            uint64_t v152 = swift_conformsToProtocol2();
                            if (v152) {
                              id v153 = v152;
                            }
                            else {
                              id v153 = 0LL;
                            }
                            if (!v152) {
                              uint64_t v21 = 0LL;
                            }
                            if (!v21) {
                              goto LABEL_4;
                            }
                            Swift::String v196 = v6;
                            __src = v16;
                            uint64_t v154 = (*(uint64_t (**)(uint64_t, uint64_t))(v153 + 24))(v21, v153);
                            id v156 = v155;
                            id v10 = v204;
                            uint64_t v157 = swift_isUniquelyReferenced_nonNull_native();
                            uint64_t v159 = specialized __RawDictionaryStorage.find<A>(_:)(v154, v156);
                            uint64_t v160 = *(void *)(v204 + 16);
                            id v161 = (v158 & 1) == 0;
                            uint64_t v162 = v160 + v161;
                            if (__OFADD__(v160, v161)) {
                              goto LABEL_265;
                            }
                            if (*(void *)(v204 + 24) < v162)
                            {
                              id v202 = v158;
                              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v162, v157);
                              id v89 = v204;
                              id v10 = v204;
                              id v163 = specialized __RawDictionaryStorage.find<A>(_:)(v154, v156);
                              if ((v202 & 1) != (v164 & 1)) {
                                goto LABEL_271;
                              }
                              uint64_t v159 = v163;
                              if ((v202 & 1) == 0) {
                                goto LABEL_208;
                              }
                              goto LABEL_205;
                            }

                            if ((v157 & 1) != 0)
                            {
                              id v89 = v204;
                              if ((v158 & 1) == 0) {
                                goto LABEL_208;
                              }
                              goto LABEL_205;
                            }

                            id v203 = v158;
                            id v200 = v154;
                            id v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
                            id v170 = static _DictionaryStorage.copy(original:)();
                            id v89 = v170;
                            if (!*(void *)(v204 + 16)) {
                              goto LABEL_247;
                            }
                            char v171 = (void *)(v170 + 64);
                            id v10 = v204 + 64;
                            id v172 = (unint64_t)((1LL << *(_BYTE *)(v89 + 32)) + 63) >> 6;
                            id v173 = 0LL;
                            *(void *)(v89 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v204 + 16);
                            char v174 = 1LL << *(_BYTE *)(v204 + 32);
                            if (v174 < 64) {
                              id v175 = ~(-1LL << v174);
                            }
                            else {
                              id v175 = -1LL;
                            }
                            id v176 = v175 & *(void *)(v204 + 64);
                            Swift::String v177 = (unint64_t)(v174 + 63) >> 6;
                            while (2)
                            {
                              if (v176)
                              {
                                uint64_t v178 = __clz(__rbit64(v176));
                                v176 &= v176 - 1;
                                uint64_t v179 = v178 | (v173 << 6);
LABEL_220:
                                uint64_t v180 = 16 * v179;
                                int v181 = (uint64_t *)(*(void *)(v204 + 48) + v180);
                                uint64_t v183 = *v181;
                                unint64_t v182 = v181[1];
                                Swift::Int v184 = *(_OWORD *)(*(void *)(v204 + 56) + v180);
                                unint64_t v185 = (void *)(*(void *)(v89 + 48) + v180);
                                *unint64_t v185 = v183;
                                v185[1] = v182;
                                *(_OWORD *)(*(void *)(v89 + 56) + v180) = v184;
                                swift_bridgeObjectRetain();
                                continue;
                              }

                              break;
                            }

                            Swift::String v50 = __OFADD__(v173++, 1LL);
                            if (v50) {
                              goto LABEL_270;
                            }
                            if (v173 >= v177) {
                              goto LABEL_247;
                            }
                            id v186 = *(void *)(v10 + 8 * v173);
                            if (v186)
                            {
LABEL_242:
                              id v176 = (v186 - 1) & v186;
                              uint64_t v179 = __clz(__rbit64(v186)) + (v173 << 6);
                              goto LABEL_220;
                            }

                            uint64_t v187 = v173 + 1;
                            if (v173 + 1 >= v177) {
                              goto LABEL_247;
                            }
                            id v186 = *(void *)(v10 + 8 * v187);
                            if (v186) {
                              goto LABEL_241;
                            }
                            uint64_t v187 = v173 + 2;
                            if (v173 + 2 >= v177) {
                              goto LABEL_247;
                            }
                            id v186 = *(void *)(v10 + 8 * v187);
                            if (v186) {
                              goto LABEL_241;
                            }
                            uint64_t v187 = v173 + 3;
                            if (v173 + 3 >= v177) {
                              goto LABEL_247;
                            }
                            id v186 = *(void *)(v10 + 8 * v187);
                            if (v186) {
                              goto LABEL_241;
                            }
                            uint64_t v187 = v173 + 4;
                            if (v173 + 4 >= v177) {
                              goto LABEL_247;
                            }
                            id v186 = *(void *)(v10 + 8 * v187);
                            if (v186) {
                              goto LABEL_241;
                            }
                            uint64_t v187 = v173 + 5;
                            if (v173 + 5 >= v177) {
                              goto LABEL_247;
                            }
                            id v186 = *(void *)(v10 + 8 * v187);
                            if (v186) {
                              goto LABEL_241;
                            }
                            uint64_t v187 = v173 + 6;
                            if (v173 + 6 >= v177) {
                              goto LABEL_247;
                            }
                            id v186 = *(void *)(v10 + 8 * v187);
                            if (v186) {
                              goto LABEL_241;
                            }
                            uint64_t v187 = v173 + 7;
                            if (v173 + 7 >= v177) {
                              goto LABEL_247;
                            }
                            id v186 = *(void *)(v10 + 8 * v187);
                            if (v186) {
                              goto LABEL_241;
                            }
                            uint64_t v187 = v173 + 8;
                            if (v173 + 8 >= v177) {
                              goto LABEL_247;
                            }
                            id v186 = *(void *)(v10 + 8 * v187);
                            if (v186)
                            {
LABEL_241:
                              id v173 = v187;
                              goto LABEL_242;
                            }

                            while (1)
                            {
                              id v173 = v187 + 1;
                              if (__OFADD__(v187, 1LL)) {
                                goto LABEL_273;
                              }
                              if (v173 >= v177) {
                                break;
                              }
                              id v186 = *(void *)(v10 + 8 * v173);
                              ++v187;
                              if (v186) {
                                goto LABEL_242;
                              }
                            }

LABEL_215:
          v409 = v6;
          id v254 = v6;
          swift_retain();
          uint64_t v255 = v216;
          swift_retain();
          int v256 = _foundation_swift_url_feature_enabled();
          v408 = &v406;
          if (!v256)
          {
            uint64_t v269 = v216;
            id v270 = objc_msgSend(v254, sel__parameterString);
            if (v270)
            {
              uint64_t v271 = v270;
              id v272 = static String._unconditionallyBridgeFromObjectiveC(_:)(v270);
              unint64_t v274 = v273;

              if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                && (id v275 = objc_msgSend(v254, sel_path)) != 0)
              {
                Swift::Int v276 = v275;
                id v277 = static String._unconditionallyBridgeFromObjectiveC(_:)(v275);
                uint64_t v278 = v7;
                id v280 = v279;

                v421._uint64_t countAndFlagsBits = (uint64_t)v277;
                v421._unint64_t object = v280;
                swift_bridgeObjectRetain();
                v281._uint64_t countAndFlagsBits = 59LL;
                v281._unint64_t object = (void *)0xE100000000000000LL;
                String.append(_:)(v281);
                uint64_t v7 = v278;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v282._uint64_t countAndFlagsBits = (uint64_t)v272;
                v282._unint64_t object = v274;
                String.append(_:)(v282);
                swift_bridgeObjectRelease();
              }

              else
              {
                v421._uint64_t countAndFlagsBits = 59LL;
                v421._unint64_t object = (void *)0xE100000000000000LL;
                v283._uint64_t countAndFlagsBits = (uint64_t)v272;
                v283._unint64_t object = v274;
                String.append(_:)(v283);
              }

              swift_bridgeObjectRelease();
              uint64_t v284 = v409;
              uint64_t v285 = v269;
              outlined consume of PathOrURL(v409, v7, v269, 1);
            }

            else
            {
              id v286 = objc_msgSend(v254, sel_path);
              if (v286)
              {
                uint64_t v287 = v286;
                static String._unconditionallyBridgeFromObjectiveC(_:)(v286);

                uint64_t v284 = v409;
                uint64_t v285 = v269;
                outlined consume of PathOrURL(v409, v7, v269, 1);
              }

              else
              {
                uint64_t v284 = v409;
                uint64_t v285 = v255;
                outlined consume of PathOrURL(v409, v7, v255, 1);
              }
            }

            goto LABEL_238;
          }

          v421._uint64_t countAndFlagsBits = (uint64_t)v254;
          v421._unint64_t object = (void *)v7;
          uint64_t v422 = v216;
          id v257 = v254;
          uint64_t v417 = v7;
          swift_retain();
          uint64_t v406 = v216;
          swift_retain();
          Swift::String v258 = URL.path(percentEncoded:)(1);
          Swift::String v421 = v258;
          swift_bridgeObjectRetain();
          if (String.count.getter() > 1
            && (specialized BidirectionalCollection.last.getter(v258._countAndFlagsBits, (unint64_t)v258._object) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
          }

          v418._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
          uint64_t v259 = specialized Set._Variant.insert(_:)(&v420, 0x2FuLL);
          uint64_t v260 = v418._countAndFlagsBits;
          uint64_t v261 = v421._countAndFlagsBits;
          id v262 = v421._object;
          unint64_t v263 = ((unint64_t)v421._object >> 56) & 0xF;
          if (v263)
          {
            Swift::String v418 = v421;
            MEMORY[0x1895F8858](v259);
            uint64_t v404 = (uint64_t)&v418;
            uint64_t v405 = v260;
            swift_bridgeObjectRetain();
            specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v403,  v261,  (unint64_t)v262);
            if (v264 == 1)
            {
              unint64_t v266 = (unint64_t)v418._object;
              Swift::Int v265 = v418._countAndFlagsBits;
              swift_bridgeObjectRetain();
              specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v265, v266, v260);
              uint64_t v268 = v267;
              swift_bridgeObjectRelease();
            }

            else
            {
              uint64_t v268 = v264;
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v7 = v417;
            if (!v268)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              Swift::String v290 = v409;
              uint64_t v291 = v406;
              outlined consume of PathOrURL(v409, v7, v406, 1);
              outlined consume of PathOrURL(v290, v7, v291, 1);
              goto LABEL_237;
            }
          }

          else
          {
            swift_bridgeObjectRelease();
            uint64_t v7 = v417;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          Swift::String v288 = v409;
          uint64_t v289 = v406;
          outlined consume of PathOrURL(v409, v7, v406, 1);
          outlined consume of PathOrURL(v288, v7, v289, 1);
LABEL_237:
          uint64_t v284 = v409;
          uint64_t v285 = v406;
LABEL_238:
          uint64_t v292 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v293 = v254;
          outlined consume of PathOrURL(v284, v7, v285, 1);
          if (v219)
          {
            v421._uint64_t countAndFlagsBits = (uint64_t)v219;
            lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
            id v219 = v219;
            if (_getErrorEmbeddedNSError<A>(_:)())
            {
            }

            else
            {
              swift_allocError();
              *uint64_t v295 = v219;
            }

            uint64_t v294 = (void *)_swift_stdlib_bridgeErrorToNSError();
          }

          else
          {
            uint64_t v294 = 0LL;
          }

           objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v416,  v292,  v293,  v294,  0,  0,  0);

          swift_unknownObjectRelease();
          outlined consume of PathOrURL(v284, v7, v285, 1);
          goto LABEL_252;
        }

        break;
    }

            unint64_t v102 = v122 + 7;
            id v15 = v117;
            if (__OFADD__(v122, 7LL))
            {
LABEL_266:
              __break(1u);
              goto LABEL_267;
            }

            id v39 = __OFSUB__(v102, v89);
            uint64_t v103 = v102 - v89;
            if (v39)
            {
LABEL_267:
              __break(1u);
              goto LABEL_268;
            }

            uint64_t v104 = v6 < v103;
            uint64_t v6 = v113;
            if (v104) {
              uint64_t v6 = 1LL;
            }
            if (v104) {
              uint64_t v105 = v7 + 1;
            }
            else {
              uint64_t v105 = v7;
            }
            id v119 = v105;
            goto LABEL_224;
          }

          if (*(void *)(v10 + 88))
          {
            uint64_t v100 = *(void *)(v10 + 96);
            uint64_t v108 = swift_getObjectType();
            uint64_t v116 = *(uint64_t (**)(void, void))(v100 + 344);
            swift_unknownObjectRetain();
            unint64_t v101 = v116(v108, v100);
            swift_unknownObjectRelease();
            id v89 = v120 % 7;
            goto LABEL_207;
          }

      id v218 = (4 * *(_BYTE *)(v217 + 18) + 8) & 0x3C;
      uint64_t v3 = ((-15LL << v218) - 1) & v3 | (v219 << v218);
      id v2 = *(void *)(v217 + 24 + 24 * v219);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      id v217 = v2;
      if (!*(_BYTE *)(v2 + 18)) {
        goto LABEL_324;
      }
    }
  }

  swift_unknownObjectRetain_n();
  uint64_t result = swift_retain_n();
  uint64_t v216 = v13;
  id v2 = v15;
LABEL_324:
  Swift::String v98 = *(unsigned __int16 *)(v2 + 16);
  if (*(_WORD *)(v2 + 16))
  {
    id v308 = *(void *)(v2 + 24);
    char v54 = v216 - v308;
    if (__OFSUB__(v216, v308)) {
      goto LABEL_416;
    }
    if (__OFADD__(v54, 1LL)) {
      goto LABEL_417;
    }
    if (v54 + 1 <= 0)
    {
      Swift::String v98 = 0LL;
      goto LABEL_361;
    }

    if ((_DWORD)v98 != 1) {
      goto LABEL_346;
    }
    v216 -= v308;
  }

                          swift_release();
                          uint64_t v159 = v162;
                          char v114 = *((_OWORD *)v3 + 2);
                          id v164 = *((_OWORD *)v3 + 1);
                          uint64_t v165 = v114;
                          uint64_t v166 = *((_OWORD *)v3 + 3);
                          BigString.utf8.getter();
                          unint64_t v53 = BigString.UTF8View.count.getter();
                          uint64_t result = outlined release of Locale((uint64_t)&v162);
                          if (v53 >= a2)
                          {
                            uint64_t v49 = v3[8];
                            if (v49) {
                              id v115 = v3[10];
                            }
                            else {
                              id v115 = 0LL;
                            }
                            if ((a2 & 0x8000000000000000LL) == 0 && v115 >= a2)
                            {
                              id v9 = v3[9];
                              Swift::String v43 = v3[11];
                              id v153 = v100;
                              if (v49 && v3[10] > a2 && *(_WORD *)(v49 + 16))
                              {
                                uint64_t v152 = v3[9];
                                uint64_t v4 = *(unsigned __int8 *)(v49 + 18);
                                if (!*(_BYTE *)(v49 + 18)) {
                                  goto LABEL_248;
                                }
                                swift_unknownObjectRetain_n();
                                uint64_t result = swift_retain();
                                id v9 = -15LL;
                                uint64_t v116 = a2;
                                id v117 = v49;
                                while (2)
                                {
                                  id v119 = *(unsigned __int16 *)(v117 + 16);
                                  if (*(_WORD *)(v117 + 16))
                                  {
                                    id v120 = *(void *)(v117 + 40);
                                    uint64_t v32 = __OFSUB__(v116, v120);
                                    uint64_t v121 = v116 - v120;
                                    if (v32) {
                                      goto LABEL_358;
                                    }
                                    if (__OFADD__(v121, 1LL))
                                    {
LABEL_359:
                                      __break(1u);
LABEL_360:
                                      __break(1u);
LABEL_361:
                                      __break(1u);
                                      goto LABEL_362;
                                    }

                                    if (v121 + 1 < 1)
                                    {
                                      id v119 = 0LL;
                                      goto LABEL_228;
                                    }

                                    if ((_DWORD)v119 != 1)
                                    {
                                      id v122 = (uint64_t *)(v117 + 64);
                                      id v123 = 1LL;
                                      while (1)
                                      {
                                        id v124 = *v122;
                                        v122 += 3;
                                        uint64_t v116 = v121 - v124;
                                        if (__OFSUB__(v121, v124)) {
                                          goto LABEL_337;
                                        }
                                        if (__OFADD__(v116, 1LL)) {
                                          goto LABEL_338;
                                        }
                                        if (v116 + 1 < 1) {
                                          break;
                                        }
                                        ++v123;
                                        uint64_t v121 = v116;
                                        if (v119 == v123) {
                                          goto LABEL_227;
                                        }
                                      }

                                      id v119 = v123;
                                      uint64_t v116 = v121;
LABEL_228:
                                      uint64_t v118 = (4 * *(_BYTE *)(v117 + 18) + 8) & 0x3C;
                                      uint64_t v4 = ((-15LL << v118) - 1) & v4 | (v119 << v118);
                                      int v26 = *(void *)(v117 + 24 + 24 * v119);
                                      swift_unknownObjectRetain();
                                      uint64_t result = swift_unknownObjectRelease();
                                      id v117 = v26;
                                      if (!*(_BYTE *)(v26 + 18)) {
                                        goto LABEL_249;
                                      }
                                      continue;
                                    }

                                    uint64_t v116 = v121;
                                  }

                                  break;
                                }

    __break(1u);
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
    goto LABEL_218;
  }

  swift_retain_n();
  int v26 = swift_unknownObjectRetain_n();
  id v27 = specialized Rope._endPath.getter(v26);
  swift_unknownObjectRelease();
  unint64_t v17 = 0LL;
  uint64_t v14 = 0LL;
  if (!v11) {
    goto LABEL_195;
  }
  while (1)
  {
    swift_unknownObjectRetain();
    id v28 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v147, v27, v17, v11, v13);
    swift_release();
    swift_unknownObjectRelease_n();
    id v30 = v9 - v14;
    if (!__OFSUB__(v9, v14)) {
      break;
    }
    while (1)
    {
      __break(1u);
LABEL_198:
      uint64_t v121 = v29;
      uint64_t v14 = v30;
LABEL_194:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v27 = v1 & 0xFFFFFFFFFFFFF0FFLL | (v121 << 8);
      unint64_t v13 = v145;
      id v10 = v146;
      if (v11) {
        break;
      }
LABEL_195:
      swift_release();
      id v28 = 0LL;
      id v30 = v9 - v14;
      if (!__OFSUB__(v9, v14)) {
        goto LABEL_36;
      }
    }
  }

                                        __break(1u);
                                        goto LABEL_216;
                                      }

                                      id v136 = v149;
                                    }
                                  }
                                }
                              }
                            }
                          }

                          __dst[0] = *(_OWORD *)&v337._nsError._domain;
                          __dst[1] = v338;
                          *(void *)&__dst[2] = v339;
                          v315._Swift::Double time = static Date.now.getter((double *)&__tp.tv_sec);
                          uint64_t v316 = Date.ISO8601FormatStyle.format(_:)(v315);
                          v317._uint64_t countAndFlagsBits = a1;
                          v317._unint64_t object = a2;
                          parseError(_:exampleFormattedString:)( (Foundation::CocoaError *)&__tp,  v317,  (Swift::String_optional)v316);
                          swift_bridgeObjectRelease();
                          goto LABEL_216;
                        }

                        goto LABEL_287;
                      }

                      goto LABEL_120;
                    }

                    char v171 = specialized == infix<A>(_:_:)(SBYTE3(v337._nsError._domain), 1);
                    id v172 = 2LL;
                    if ((v171 & 1) == 0) {
                      id v172 = 0LL;
                    }
                    id v173 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)( v172,  (v171 & 1) == 0,  0,  (unint64_t *)&v337._nsError._reserved,  0x30u,  0x39u,  a1,  a2);
                    if (v7) {
                      goto LABEL_217;
                    }
                    char v174 = v173;
                    LOBYTE(__dst[0]) = 7;
                    _CalendarGregorian.maximumRange(of:)((uint64_t)__dst);
                    if ((v177 & 1) == 0)
                    {
                      uint64_t v178 = v174 % 7 + 1;
                      if (!specialized Range.contains(_:)(v178, v175, v176)) {
                        goto LABEL_215;
                      }
                      DateComponents.weekday.setter(v178, 0);
                      goto LABEL_127;
                    }

                    goto LABEL_285;
                  }

                    if (v85 != 1)
                    {
                      if (v85 != 2)
                      {
                        if (v85 != 3) {
                          return v7;
                        }
                        id v163 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 2);
                        if ((v163 | 0x20) == 0x65) {
                          return v7;
                        }
                      }

                      id v164 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 1);
                      if ((v164 | 0x20) == 0x65) {
                        return v7;
                      }
                    }

                    if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86)
                                         - 49) >= 9u)
                      return v7;
                    goto LABEL_179;
                  }

                  break;
                case 'E':
                  goto LABEL_206;
                default:
                  uint64_t v116 = a3;
                  if (v162 != 101) {
                    goto LABEL_243;
                  }
LABEL_206:
                  uint64_t v159 = 0;
                  v11 += v76 + 1;
                  uint64_t v158 = 2;
                  uint64_t v157 = 1;
                  if (v11 < v12) {
                    continue;
                  }
                  goto LABEL_298;
              }
            }
          }

          goto LABEL_312;
        }

        uint64_t v165 = v11 + 2;
        if ((uint64_t)(v12 - (v11 + 2)) < 1 || v165 >= v12 || ((v165 - v150) & 0x8000000000000000LL) != 0)
        {
LABEL_232:
          __break(1u);
        }

        else
        {
          uint64_t v166 = v151 + v150 - v11 - 3;
          uint64_t v167 = v11 - v150 + 3;
          while (1)
          {
            uint64_t v168 = v167;
            uint64_t v169 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v165);
            if (!UInt8.isValidHexDigit.getter(v169)) {
              break;
            }
            Swift::Int v82 = v166-- < 1;
            if (!v82 && ++v165 < v12)
            {
              uint64_t v167 = v168 + 1;
              if ((v168 & 0x8000000000000000LL) == 0) {
                continue;
              }
            }

            goto LABEL_232;
          }
        }

        LOBYTE(v8os_unfair_lock_unlock(*v0 + 4) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v165);
        uint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v165, v224, v215);
        id v95 = v170;
        id v97 = v171;
        id v172 = 0xED00007265626D75LL;
        id v173 = 0x6E20786568206E69LL;
        goto LABEL_245;
      }

      id v134 = v133;
      if (!specialized static Comparable.<= infix(_:_:)(a3, v12 + v11 - 1)) {
        goto LABEL_294;
      }
      a4 = v215;
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, a3 + v215)) {
        goto LABEL_295;
      }
      id v135 = specialized min<A>(_:_:)(v12 + v11, a3 + v215);
      if (v135 <= a3)
      {
        a4 = 0LL;
        id v11 = 1LL;
        goto LABEL_181;
      }

      uint64_t v8 = v135;
      uint64_t v213 = v134;
      id v136 = v215 + a3;
      id v137 = -(uint64_t)a3;
      id v11 = 1LL;
      id v220 = -(uint64_t)a3;
      unint64_t v223 = a3;
      uint64_t v138 = a3;
      id v217 = v215 + a3;
      do
      {
        Swift::Int v40 = 0LL;
        Swift::String v12 = 0LL;
        a3 = v136 - v138;
        uint64_t v139 = v137 + v138;
        while (1)
        {
          if ((uint64_t)(v139 + v12) < 0 || (uint64_t)(a3 + v40) < 1)
          {
            __break(1u);
LABEL_279:
            __break(1u);
LABEL_280:
            uint64_t v195 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v12, v11);
            specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v195, v196, a3, a4);
            if (v8) {
              return v7;
            }
LABEL_252:
            uint64_t v215 = a4;
            unint64_t v18 = 0;
            goto LABEL_151;
          }

          uint64_t v140 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v138 + v12);
          if (v140 == 10)
          {
            uint64_t v71 = __OFADD__(v11++, 1LL);
            id v137 = v220;
            if (!v71)
            {
              v138 += v12 + 1;
              goto LABEL_173;
            }

                    if (v85 != 1)
                    {
                      if (v85 != 2)
                      {
                        if (v85 != 3) {
                          return v7;
                        }
                        id v163 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 2);
                        if ((v163 | 0x20) == 0x65) {
                          return v7;
                        }
                      }

                      id v164 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86 + 1);
                      if ((v164 | 0x20) == 0x65) {
                        return v7;
                      }
                    }

                    if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v86)
                                         - 49) > 8u)
                      return v7;
                    goto LABEL_179;
                  }

                  break;
                case 'E':
                  goto LABEL_206;
                default:
                  uint64_t v116 = a3;
                  if (v162 != 101) {
                    goto LABEL_243;
                  }
LABEL_206:
                  uint64_t v159 = 0;
                  v11 += v76 + 1;
                  uint64_t v158 = 2;
                  uint64_t v157 = 1;
                  if (v11 < v12) {
                    continue;
                  }
                  goto LABEL_299;
              }
            }
          }

          goto LABEL_313;
        }

        uint64_t v165 = v11 + 2;
        if ((uint64_t)(v12 - (v11 + 2)) < 1 || v165 >= v12 || ((v165 - v150) & 0x8000000000000000LL) != 0)
        {
LABEL_232:
          __break(1u);
        }

        else
        {
          uint64_t v166 = v151 + v150 - v11 - 3;
          uint64_t v167 = v11 - v150 + 3;
          while (1)
          {
            uint64_t v168 = v167;
            uint64_t v169 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v165);
            if (!UInt8.isValidHexDigit.getter(v169)) {
              break;
            }
            Swift::Int v82 = v166-- < 1;
            if (!v82 && ++v165 < v12)
            {
              uint64_t v167 = v168 + 1;
              if ((v168 & 0x8000000000000000LL) == 0) {
                continue;
              }
            }

            goto LABEL_232;
          }
        }

        LOBYTE(v8os_unfair_lock_unlock(*v0 + 4) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v165);
        uint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v165, v224, v215);
        id v95 = v170;
        id v97 = v171;
        id v172 = 0xED00007265626D75LL;
        id v173 = 0x6E20786568206E69LL;
        goto LABEL_245;
      }

      id v134 = v133;
      if (!specialized static Comparable.<= infix(_:_:)(a3, v12 + v11 - 1)) {
        goto LABEL_295;
      }
      a4 = v215;
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, a3 + v215)) {
        goto LABEL_296;
      }
      id v135 = specialized min<A>(_:_:)(v12 + v11, a3 + v215);
      if (v135 <= a3)
      {
        a4 = 0LL;
        id v11 = 1LL;
        goto LABEL_181;
      }

      uint64_t v8 = v135;
      uint64_t v213 = v134;
      id v136 = v215 + a3;
      id v137 = -(uint64_t)a3;
      id v11 = 1LL;
      id v220 = -(uint64_t)a3;
      unint64_t v223 = a3;
      uint64_t v138 = a3;
      id v217 = v215 + a3;
      do
      {
        Swift::Int v40 = 0LL;
        Swift::String v12 = 0LL;
        a3 = v136 - v138;
        uint64_t v139 = v137 + v138;
        while (1)
        {
          if ((uint64_t)(v139 + v12) < 0 || (uint64_t)(a3 + v40) < 1)
          {
            __break(1u);
LABEL_280:
            __break(1u);
LABEL_281:
            uint64_t v195 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v12, v11);
            specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v195, v196, a3, a4);
            if (v8) {
              return v7;
            }
LABEL_252:
            uint64_t v215 = a4;
LABEL_253:
            unint64_t v18 = 0;
            goto LABEL_151;
          }

          uint64_t v140 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v138 + v12);
          if (v140 == 10)
          {
            uint64_t v71 = __OFADD__(v11++, 1LL);
            id v137 = v220;
            if (!v71)
            {
              v138 += v12 + 1;
              goto LABEL_173;
            }

                    if (v75 != 1)
                    {
                      if (v75 != 2)
                      {
                        if (v75 != 3) {
                          return v7;
                        }
                        uint64_t v165 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v76 + 2);
                        if ((v165 | 0x20) == 0x65) {
                          return v7;
                        }
                      }

                      uint64_t v166 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v76 + 1);
                      if ((v166 | 0x20) == 0x65) {
                        return v7;
                      }
                    }

                    if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v76)
                                         - 49) >= 9u)
                      return v7;
                    goto LABEL_179;
                  }

                  break;
                case 'E':
                  goto LABEL_206;
                default:
                  uint64_t v118 = a3;
                  if (v164 != 101) {
                    goto LABEL_243;
                  }
LABEL_206:
                  id v161 = 0;
                  v11 += v85 + 1;
                  uint64_t v160 = 2;
                  uint64_t v159 = 1;
                  if (v11 < v12) {
                    continue;
                  }
                  goto LABEL_298;
              }
            }
          }

          goto LABEL_312;
        }

        uint64_t v167 = v11 + 2;
        if ((uint64_t)(v12 - (v11 + 2)) < 1 || v167 >= v12 || ((v167 - v152) & 0x8000000000000000LL) != 0)
        {
LABEL_232:
          __break(1u);
        }

        else
        {
          uint64_t v168 = v153 + v152 - v11 - 3;
          uint64_t v169 = v11 - v152 + 3;
          while (1)
          {
            id v170 = v169;
            char v171 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v167);
            if (!UInt8.isValidHexDigit.getter(v171)) {
              break;
            }
            uint64_t v91 = v168-- < 1;
            if (!v91 && ++v167 < v12)
            {
              uint64_t v169 = v170 + 1;
              if ((v170 & 0x8000000000000000LL) == 0) {
                continue;
              }
            }

            goto LABEL_232;
          }
        }

        LOBYTE(v93) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v167);
        id v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v167, v226, v217);
        id v97 = v172;
        id v99 = v173;
        char v174 = 0xED00007265626D75LL;
        id v175 = 0x6E20786568206E69LL;
        goto LABEL_245;
      }

      id v136 = v135;
      if (!specialized static Comparable.<= infix(_:_:)(a3, v12 + v11 - 1)) {
        goto LABEL_294;
      }
      a4 = v217;
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, a3 + v217)) {
        goto LABEL_295;
      }
      id v137 = specialized min<A>(_:_:)(v12 + v11, a3 + v217);
      if (v137 <= a3)
      {
        a4 = 0LL;
        id v11 = 1LL;
        goto LABEL_181;
      }

      uint64_t v8 = v137;
      uint64_t v215 = v136;
      uint64_t v138 = v217 + a3;
      uint64_t v139 = -(uint64_t)a3;
      id v11 = 1LL;
      id v222 = -(uint64_t)a3;
      uint64_t v225 = a3;
      uint64_t v140 = a3;
      id v219 = v217 + a3;
      do
      {
        Swift::Int v40 = 0LL;
        Swift::String v12 = 0LL;
        a3 = v138 - v140;
        unint64_t v141 = v139 + v140;
        while (1)
        {
          if ((uint64_t)(v141 + v12) < 0 || (uint64_t)(a3 + v40) < 1)
          {
            __break(1u);
LABEL_279:
            __break(1u);
LABEL_280:
            Swift::String v197 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v12, v11);
            specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v197, v198, a3, a4);
            if (v8) {
              return v7;
            }
LABEL_252:
            id v217 = a4;
            unint64_t v18 = 0;
            goto LABEL_151;
          }

          int64_t v142 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v140 + v12);
          if (v142 == 10)
          {
            uint64_t v71 = __OFADD__(v11++, 1LL);
            uint64_t v139 = v222;
            if (!v71)
            {
              v140 += v12 + 1;
              goto LABEL_173;
            }

LABEL_348:
                    __break(1u);
LABEL_349:
                    __break(1u);
LABEL_350:
                    __break(1u);
LABEL_351:
                    __break(1u);
LABEL_352:
                    __break(1u);
LABEL_353:
                    __break(1u);
LABEL_354:
                    __break(1u);
LABEL_355:
                    __break(1u);
LABEL_356:
                    __break(1u);
LABEL_357:
                    __break(1u);
LABEL_358:
                    __break(1u);
LABEL_359:
                    __break(1u);
                  }
                }
              }

              int64_t v143 = v151;
            }

  __break(1u);
LABEL_349:
  __break(1u);
LABEL_350:
  __break(1u);
LABEL_351:
  __break(1u);
LABEL_352:
  __break(1u);
LABEL_353:
  __break(1u);
LABEL_354:
  __break(1u);
LABEL_355:
  __break(1u);
LABEL_356:
  __break(1u);
LABEL_357:
  __break(1u);
LABEL_358:
  __break(1u);
LABEL_359:
  __break(1u);
LABEL_360:
  __break(1u);
LABEL_361:
  __break(1u);
LABEL_362:
  __break(1u);
LABEL_363:
  __break(1u);
LABEL_364:
  __break(1u);
LABEL_365:
  __break(1u);
LABEL_366:
  __break(1u);
LABEL_367:
  __break(1u);
LABEL_368:
  __break(1u);
LABEL_369:
  __break(1u);
LABEL_370:
  __break(1u);
LABEL_371:
  __break(1u);
LABEL_372:
  __break(1u);
LABEL_373:
  __break(1u);
LABEL_374:
  __break(1u);
LABEL_375:
  __break(1u);
LABEL_376:
  __break(1u);
LABEL_377:
  __break(1u);
LABEL_378:
  __break(1u);
LABEL_379:
  __break(1u);
LABEL_380:
  __break(1u);
LABEL_381:
  __break(1u);
LABEL_382:
  __break(1u);
LABEL_383:
  __break(1u);
LABEL_384:
  __break(1u);
LABEL_385:
  __break(1u);
LABEL_386:
  __break(1u);
LABEL_387:
  __break(1u);
LABEL_388:
  __break(1u);
LABEL_389:
  __break(1u);
LABEL_390:
  __break(1u);
LABEL_391:
  __break(1u);
LABEL_392:
  __break(1u);
LABEL_393:
  __break(1u);
LABEL_394:
  __break(1u);
LABEL_395:
  __break(1u);
LABEL_396:
  __break(1u);
LABEL_397:
  __break(1u);
LABEL_398:
  __break(1u);
LABEL_399:
  __break(1u);
LABEL_400:
  __break(1u);
LABEL_401:
  __break(1u);
LABEL_402:
  __break(1u);
LABEL_403:
  __break(1u);
LABEL_404:
  __break(1u);
LABEL_405:
  __break(1u);
LABEL_406:
  __break(1u);
LABEL_407:
  __break(1u);
LABEL_408:
  __break(1u);
LABEL_409:
  __break(1u);
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_349:
  __break(1u);
LABEL_350:
  __break(1u);
LABEL_351:
  __break(1u);
LABEL_352:
  __break(1u);
LABEL_353:
  __break(1u);
LABEL_354:
  __break(1u);
LABEL_355:
  __break(1u);
LABEL_356:
  __break(1u);
LABEL_357:
  __break(1u);
LABEL_358:
  __break(1u);
LABEL_359:
  __break(1u);
LABEL_360:
  __break(1u);
LABEL_361:
  __break(1u);
LABEL_362:
  __break(1u);
LABEL_363:
  __break(1u);
LABEL_364:
  __break(1u);
LABEL_365:
  __break(1u);
LABEL_366:
  __break(1u);
LABEL_367:
  __break(1u);
LABEL_368:
  __break(1u);
LABEL_369:
  __break(1u);
LABEL_370:
  __break(1u);
LABEL_371:
  __break(1u);
LABEL_372:
  __break(1u);
LABEL_373:
  __break(1u);
LABEL_374:
  __break(1u);
LABEL_375:
  __break(1u);
LABEL_376:
  __break(1u);
LABEL_377:
  __break(1u);
LABEL_378:
  __break(1u);
LABEL_379:
  __break(1u);
LABEL_380:
  __break(1u);
LABEL_381:
  __break(1u);
LABEL_382:
  __break(1u);
LABEL_383:
  __break(1u);
LABEL_384:
  __break(1u);
LABEL_385:
  __break(1u);
LABEL_386:
  __break(1u);
LABEL_387:
  __break(1u);
LABEL_388:
  __break(1u);
LABEL_389:
  __break(1u);
LABEL_390:
  __break(1u);
LABEL_391:
  __break(1u);
LABEL_392:
  __break(1u);
LABEL_393:
  __break(1u);
LABEL_394:
  __break(1u);
LABEL_395:
  __break(1u);
LABEL_396:
  __break(1u);
LABEL_397:
  __break(1u);
LABEL_398:
  __break(1u);
LABEL_399:
  __break(1u);
LABEL_400:
  __break(1u);
LABEL_401:
  __break(1u);
LABEL_402:
  __break(1u);
LABEL_403:
  __break(1u);
LABEL_404:
  __break(1u);
LABEL_405:
  __break(1u);
LABEL_406:
  __break(1u);
LABEL_407:
  __break(1u);
LABEL_408:
  __break(1u);
LABEL_409:
  __break(1u);
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
  return result;
}

uint64_t closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( const char *a1, void *a2, unint64_t a3, void *a4, char a5, void *a6, int a7, void *a8, uint64_t a9, void *a10)
{
  uint64_t v418 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v20 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v21 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v20, sel_initWithDomain_code_userInfo_, v21, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v10 = objc_msgSend(v14, sel_domain);
    id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v24 = v23;

    if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v24 == v25)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
        __break(1u);
        goto LABEL_13;
      }
    }

    return swift_willThrow();
  }

  id v14 = a4;
  unint64_t v13 = a3;
  id v11 = a2;
  Swift::String v12 = a1;
  uint64_t v269 = a8;
  __int16 v283 = 0;
  char v284 = 1;
  id v274 = a4;
  id v275 = a2;
  LODWORD(v273) = a5 & 1;
  uint64_t v271 = a6;
  LODWORD(v268) = a7;
  if ((a5 & 1) == 0)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v28 = (uint64_t)v11;
    unint64_t v29 = v13;
    goto LABEL_36;
  }

  swift_retain_n();
  id v15 = v11;
  swift_retain_n();
  id v16 = v15;
  if (_foundation_swift_url_feature_enabled())
  {
    id v353 = v14;
    id v16 = v16;
    unint64_t v270 = v13;
    swift_retain();
    swift_retain();
    Swift::String v17 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v17._countAndFlagsBits;
    LODWORD(v10) = v17._object;
    Swift::String v352 = v17;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v17._object;
    }

    else
    {
      unint64_t object = (unint64_t)v17._object;
      if ((specialized BidirectionalCollection.last.getter(v17._countAndFlagsBits, (unint64_t)v17._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v352._countAndFlagsBits;
        unint64_t object = (unint64_t)v352._object;
      }
    }

    v285._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v42 = specialized Set._Variant.insert(_:)(&v278, 0x2FuLL);
    uint64_t v43 = v285._countAndFlagsBits;
    uint64_t v44 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000LL) == 0) {
      uint64_t v44 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v44)
    {
      id v267 = v16;
      v285._uint64_t countAndFlagsBits = countAndFlagsBits;
      v285._unint64_t object = (void *)object;
      MEMORY[0x1895F8858](v42);
      uint64_t v262 = (uint64_t)&v285;
      uint64_t v263 = v43;
      swift_bridgeObjectRetain();
      uint64_t v45 = v272;
      id v46 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v261,  countAndFlagsBits,  object);
      uint64_t v272 = v45;
      if (v47 == (void *)1)
      {
        Swift::String v48 = v285;
        swift_bridgeObjectRetain();
        uint64_t v28 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v48._countAndFlagsBits,  (unint64_t)v48._object,  v43);
        unint64_t v29 = v49;
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v28 = (uint64_t)v46;
        unint64_t v29 = (unint64_t)v47;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v14 = v274;
      id v11 = v275;
      id v16 = v267;
      if (!v29)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v13 = v270;
        outlined consume of PathOrURL(v11, v270, (uint64_t)v14, 1);
        outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
        swift_release();
        swift_release();

        uint64_t v28 = 0LL;
        unint64_t v29 = 0xE000000000000000LL;
        goto LABEL_35;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v28 = 0LL;
      unint64_t v29 = 0xE000000000000000LL;
      id v14 = v274;
      id v11 = v275;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v13 = v270;
    outlined consume of PathOrURL(v11, v270, (uint64_t)v14, 1);
    outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
    swift_release();
    swift_release();

LABEL_35:
    swift_release();
    swift_release();

    goto LABEL_36;
  }

  id v31 = objc_msgSend(v16, sel__parameterString);
  if (v31)
  {
    uint64_t v32 = v31;
    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    id v34 = v33;

    if (!getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      || (id v35 = objc_msgSend(v16, sel_path)) == 0)
    {
      v352._uint64_t countAndFlagsBits = 59LL;
      v352._unint64_t object = (void *)0xE100000000000000LL;
      v50._uint64_t countAndFlagsBits = (uint64_t)v10;
      v50._unint64_t object = v34;
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
      outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
      uint64_t v28 = 59LL;
      unint64_t v29 = 0xE100000000000000LL;
      goto LABEL_35;
    }

    uint64_t v36 = v35;
    id v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    id v39 = v38;

    v352._uint64_t countAndFlagsBits = (uint64_t)v37;
    v352._unint64_t object = v39;
    swift_bridgeObjectRetain();
    v40._uint64_t countAndFlagsBits = 59LL;
    v40._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v40);
    id v11 = v275;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v41._uint64_t countAndFlagsBits = (uint64_t)v10;
    v41._unint64_t object = v34;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    id v14 = v274;
    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(v275, v13, (uint64_t)v274, 1);
    uint64_t v28 = v352._countAndFlagsBits;
    unint64_t v29 = (unint64_t)v352._object;
LABEL_29:
    outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
    goto LABEL_35;
  }

  id v51 = objc_msgSend(v16, sel_path);
  if (v51)
  {
    id v10 = v51;
    uint64_t v28 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    unint64_t v29 = v52;

    outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
    goto LABEL_29;
  }

  outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
  outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
  swift_release();
  swift_release();

  uint64_t v28 = 0LL;
  unint64_t v29 = 0xE000000000000000LL;
LABEL_36:
  uint64_t v281 = v28;
  unint64_t v282 = v29;
  bzero(&v352, 0x418uLL);
  int v278 = 5;
  __int128 v279 = xmmword_1838148E0;
  int v280 = 0;
  if (getattrlist(v12, &v278, &v352, 0x418uLL, 1u))
  {
    if (MEMORY[0x186E1B0E8]() != 2 && MEMORY[0x186E1B0E8]() != 63)
    {
      int v53 = MEMORY[0x186E1B0E8]();
      LODWORD(v10) = v53;
      if ((_DWORD)v273)
      {
        uint64_t v54 = 4LL;
        switch(v53)
        {
          case 1:
          case 13:
            uint64_t v54 = 513LL;
            goto LABEL_98;
          case 2:
            goto LABEL_98;
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 14:
          case 15:
          case 16:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 29:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
            goto LABEL_91;
          case 17:
            uint64_t v54 = 516LL;
            goto LABEL_98;
          case 28:
          case 69:
            uint64_t v54 = 640LL;
            goto LABEL_98;
          case 30:
            uint64_t v54 = 642LL;
            goto LABEL_98;
          case 63:
            uint64_t v54 = 514LL;
            goto LABEL_98;
          default:
            if (v53 == 102)
            {
              swift_retain_n();
              id v134 = v11;
              swift_retain_n();
              id v135 = v134;
              id v136 = 0LL;
              uint64_t v54 = 512LL;
              goto LABEL_104;
            }

uint64_t writeExtendedAttributes(fd:attributes:)(uint64_t a1, uint64_t a2)
{
  id v11 = (void *)(a2 + 64);
  uint64_t v3 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a2 + 64);
  int64_t v12 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v5)
  {
    unint64_t v6 = __clz(__rbit64(v5));
    goto LABEL_18;
  }

  if (v12 > 1)
  {
    unint64_t v7 = v11[1];
    uint64_t v8 = 1LL;
    if (v7) {
      goto LABEL_17;
    }
    uint64_t v8 = 2LL;
    if (v12 <= 2) {
      return swift_release();
    }
    unint64_t v7 = v11[2];
    if (v7) {
      goto LABEL_17;
    }
    uint64_t v8 = 3LL;
    if (v12 <= 3) {
      return swift_release();
    }
    unint64_t v7 = v11[3];
    if (v7)
    {
LABEL_17:
      unint64_t v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_18:
      __asm { BR              X9 }
    }

    uint64_t v9 = 4LL;
    if (v12 > 4)
    {
      unint64_t v7 = v11[4];
      if (v7)
      {
        uint64_t v8 = 4LL;
        goto LABEL_17;
      }

      while (1)
      {
        uint64_t v8 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          JUMPOUT(0x1832CE2D4LL);
        }

        if (v8 >= v12) {
          break;
        }
        unint64_t v7 = v11[v8];
        ++v9;
        if (v7) {
          goto LABEL_17;
        }
      }
    }
  }

  return swift_release();
}

uint64_t closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( char *__new, char *__old, uint64_t *a3, void *a4, unint64_t a5, uint64_t a6, unint64_t Path, void *a8, uint64_t *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int *a14)
{
  uint64_t v341 = *MEMORY[0x1895F89C0];
  if (!__new)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v43 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v44 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v17 = (uint64_t)objc_msgSend(v43, sel_initWithDomain_code_userInfo_, v44, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t Path = (unint64_t)objc_msgSend((id)v17, sel_domain);
    id v45 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)Path);
    id v22 = v46;

    if (v45 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v22 == v47)
    {
      swift_bridgeObjectRelease_n();
      return swift_willThrow();
    }

    a6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = swift_bridgeObjectRelease();
    if ((a6 & 1) != 0) {
      return swift_willThrow();
    }
    __break(1u);
LABEL_15:
    unint64_t v49 = v22;
    if (MEMORY[0x186E1B0E8](v23) == 16)
    {
      id v209 = a12;
      unlink((const char *)v210);
      uint64_t v50 = *v22;
      uint64_t v51 = a6;
      unint64_t v52 = v22[1];
      swift_bridgeObjectRetain();
      cleanupTemporaryDirectory(at:)(v50, v52);
      swift_bridgeObjectRelease();
      uint64_t v277 = (uint64_t)v15;
      *(void *)int v278 = v16;
      *(void *)&v278[8] = v51;
      v278[16] = (_DWORD)Path != 0;
      return writeToFileNoAux(path:buffer:options:attributes:reportProgress:)( (uint64_t)&v277,  a10,  a11,  0LL,  (uint64_t)a12,  0);
    }

    int v54 = MEMORY[0x186E1B0E8]();
    unlink((const char *)v210);
    uint64_t v56 = *v49;
    unint64_t v55 = v49[1];
    swift_bridgeObjectRetain();
    cleanupTemporaryDirectory(at:)(v56, v55);
    swift_bridgeObjectRelease();
    if ((_DWORD)Path)
    {
      id v206 = (id)a6;
      uint64_t v57 = 4LL;
      switch(v54)
      {
        case 1:
        case 13:
          uint64_t v57 = 513LL;
          goto LABEL_93;
        case 2:
          goto LABEL_93;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_85;
        case 17:
          uint64_t v57 = 516LL;
          goto LABEL_93;
        case 28:
        case 69:
          uint64_t v57 = 640LL;
          goto LABEL_93;
        case 30:
          uint64_t v57 = 642LL;
          goto LABEL_93;
        case 63:
          uint64_t v57 = 514LL;
          goto LABEL_93;
        default:
          if (v54 == 102)
          {
            swift_retain_n();
            id v120 = v15;
            swift_retain_n();
            id v121 = v120;
            id v122 = 0LL;
            uint64_t v210 = 512LL;
            goto LABEL_99;
          }

void closure #1 in closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( const char *a1, const char *a2, const char *a3, uint64_t *a4, uint64_t a5, unint64_t a6, void *a7, unint64_t a8, uint64_t a9, char a10)
{
  if (a1)
  {
    int64_t v12 = v10;
    unlink(a1);
    if (!rename(a2, a1) && !rename(a3, a2))
    {
      unlink(a1);
      cleanupTemporaryDirectory(at:)(a5, a6);
      return;
    }

    id v99 = a7;
    LODWORD(v11) = MEMORY[0x186E1B0E8]();
    unlink(a1);
    unlink(a3);
    uint64_t v21 = *a4;
    unint64_t v22 = a4[1];
    swift_bridgeObjectRetain();
    cleanupTemporaryDirectory(at:)(v21, v22);
    swift_bridgeObjectRelease();
    cleanupTemporaryDirectory(at:)(a5, a6);
    if ((a10 & 1) == 0)
    {
      uint64_t v23 = 4LL;
      uint64_t v24 = (uint64_t)v99;
      switch((int)v11)
      {
        case 1:
        case 13:
          uint64_t v23 = 513LL;
          goto LABEL_28;
        case 2:
          goto LABEL_28;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_23;
        case 17:
          uint64_t v23 = 516LL;
          goto LABEL_28;
        case 28:
        case 69:
          uint64_t v23 = 640LL;
          goto LABEL_28;
        case 30:
          uint64_t v23 = 642LL;
          goto LABEL_28;
        case 63:
          uint64_t v23 = 514LL;
          goto LABEL_28;
        default:
          uint64_t v24 = (uint64_t)v99;
          if ((_DWORD)v11 == 102)
          {
            id v38 = 0LL;
            uint64_t v23 = 512LL;
LABEL_33:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v23,  v24,  a8,  v38,  0LL,  0LL,  0LL,  0LL,  &v102,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
            goto LABEL_71;
          }

uint64_t specialized RandomAccessCollection<>.distance(from:to:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 - a3;
  if (!a3) {
    uint64_t v4 = 0LL;
  }
  if (result < 0 || v4 < result)
  {
    __break(1u);
  }

  else if ((a2 & 0x8000000000000000LL) == 0 && v4 >= a2)
  {
    return a2 - result;
  }

  __break(1u);
  return result;
}

void specialized static NSData._writeData(toPath:data:options:reportProgress:)( uint64_t a1, unint64_t a2, void *a3, void *a4, char a5)
{
  unint64_t v7 = v5;
  unint64_t v190 = a2;
  uint64_t v196 = *MEMORY[0x1895F89C0];
  unint64_t v187 = (void *)MEMORY[0x186E1F27C]();
  id v12 = a3;
  id v13 = objc_msgSend(v12, sel_bytes);
  id v14 = v12;
  int64_t v15 = (int64_t)objc_msgSend(v14, sel_length);
  if (((unint64_t)objc_msgSend(v14, sel_length) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_204:
    __break(1u);
    __break(1u);
LABEL_205:
    int64_t v16 = String.UTF8View._foreignCount()();
    goto LABEL_12;
  }

  uint64_t v189 = a1;
  id v6 = objc_msgSend(v14, sel_length);

  if (v13) {
    a1 = (uint64_t)v13 + v15;
  }
  else {
    a1 = 0LL;
  }
  if ((a4 & 1) != 0)
  {
    id v6 = (id)v189;
    int64_t v17 = v190;
    if ((v190 & 0x1000000000000000LL) == 0)
    {
      if ((v190 & 0x2000000000000000LL) != 0) {
        int64_t v31 = HIBYTE(v190) & 0xF;
      }
      else {
        int64_t v31 = v189 & 0xFFFFFFFFFFFFLL;
      }
LABEL_31:
      uint64_t v32 = 3 * v31;
      if ((unsigned __int128)(v31 * (__int128)3LL) >> 64 != (3 * v31) >> 63)
      {
        __break(1u);
        JUMPOUT(0x1832D2F78LL);
      }

      if (v32 >= -1)
      {
        uint64_t v188 = v13;
        uint64_t v33 = v32 + 1;
        uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
        if (v32 < 1024
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1895F8858](isStackAllocationSafe);
          unsigned __int128 v36 = (char *)&v183 - v35;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v36, v33, 1, (uint64_t)v6, v17);
          char v38 = v37;
          swift_bridgeObjectRelease();
          if ((v38 & 1) != 0)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
            id v47 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
            uint64_t v48 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v49 = objc_msgSend(v47, sel_initWithDomain_code_userInfo_, v48, 514, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v50 = objc_msgSend(v49, sel_domain);
            id v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
            uint64_t v53 = v52;

            if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
              && v53 == v54)
            {
              swift_bridgeObjectRelease_n();
            }

            else
            {
              char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v70 & 1) == 0)
              {
LABEL_213:
                __break(1u);
LABEL_214:
                __break(1u);
LABEL_215:
                __break(1u);
                goto LABEL_216;
              }
            }

            swift_willThrow();
          }

          else
          {
            closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( v36,  v6,  v17,  0LL,  0,  a4,  a5 & 1,  v188,  a1,  MEMORY[0x18961AFF0]);
            if (!v5) {
              goto LABEL_202;
            }
          }

          swift_willThrow();
          goto LABEL_202;
        }

        id v66 = (const char *)swift_slowAlloc();
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v66, v33, 1, (uint64_t)v6, v17);
        char v68 = v67;
        swift_bridgeObjectRelease();
        if ((v68 & 1) != 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v82 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v83 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v84 = objc_msgSend(v82, sel_initWithDomain_code_userInfo_, v83, 514, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v85 = objc_msgSend(v84, sel_domain);
          id v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
          uint64_t v88 = v87;

          if (v86 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v88 == v89)
          {
            swift_bridgeObjectRelease_n();
          }

          else
          {
            char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v92 & 1) == 0)
            {
LABEL_217:
              __break(1u);
              goto LABEL_218;
            }
          }

          swift_willThrow();
        }

        else
        {
          closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( v66,  v6,  v17,  0LL,  0,  a4,  a5 & 1,  v188,  a1,  MEMORY[0x18961AFF0]);
        }

        char v91 = (void *)v66;
        goto LABEL_77;
      }

LABEL_226:
        v182._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v182);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1832D311CLL);
      }

      uint64_t v108 = 1LL << *(_BYTE *)(MEMORY[0x18961AFF0] + 32LL);
      uint64_t v109 = -1LL;
      if (v108 < 64) {
        uint64_t v109 = ~(-1LL << v108);
      }
      unint64_t v110 = v109 & *(void *)(MEMORY[0x18961AFF0] + 64LL);
      uint64_t v189 = (unint64_t)(v108 + 63) >> 6;
      if (v110)
      {
        unint64_t v111 = __clz(__rbit64(v110));
        goto LABEL_104;
      }

      uint64_t v112 = 1LL;
      if (v189 > 1)
      {
        unint64_t v113 = *(void *)(MEMORY[0x18961AFF0] + 72LL);
        if (v113)
        {
LABEL_103:
          unint64_t v111 = __clz(__rbit64(v113)) + (v112 << 6);
LABEL_104:
          __asm { BR              X9 }
        }

        uint64_t v114 = 2LL;
        if (v189 > 2)
        {
          unint64_t v113 = *(void *)(MEMORY[0x18961AFF0] + 80LL);
          if (v113) {
            goto LABEL_102;
          }
          uint64_t v114 = 3LL;
          if (v189 > 3)
          {
            unint64_t v113 = *(void *)(MEMORY[0x18961AFF0] + 88LL);
            if (!v113)
            {
              uint64_t v114 = 4LL;
              if (v189 > 4)
              {
                unint64_t v113 = *(void *)(MEMORY[0x18961AFF0] + 96LL);
                if (v113) {
                  goto LABEL_102;
                }
                while (1)
                {
                  uint64_t v112 = v114 + 1;
                  if (__OFADD__(v114, 1LL)) {
                    break;
                  }
                  if (v112 >= v189) {
                    goto LABEL_109;
                  }
                  unint64_t v113 = *(void *)(MEMORY[0x18961AFF0] + 8 * v112 + 64);
                  ++v114;
                  if (v113) {
                    goto LABEL_103;
                  }
                }

void specialized static NSData._writeData(toPath:data:options:stringEncodingAttributeData:reportProgress:)( uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7)
{
  int v40 = a7;
  uint64_t v41 = a1;
  uint64_t v12 = MEMORY[0x186E1F27C]();
  id v13 = a3;
  id v14 = objc_msgSend(v13, sel_bytes);
  id v15 = v13;
  int64_t v16 = (int64_t)objc_msgSend(v15, sel_length);
  if (((unint64_t)objc_msgSend(v15, sel_length) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  id v17 = objc_msgSend(v15, sel_length);

  id v39 = (void *)v12;
  if (v14) {
    uint64_t v18 = (uint64_t)v14 + v16;
  }
  else {
    uint64_t v18 = 0LL;
  }
  id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"com.apple.TextEncoding");
  uint64_t v21 = v20;
  id v44 = v19;
  uint64_t v45 = v20;
  uint64_t v46 = a5;
  unint64_t v47 = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  unint64_t v22 = (void *)static _DictionaryStorage.allocate(capacity:)();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a5, a6);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a5, a6);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19, v21);
  if ((v24 & 1) != 0) {
    goto LABEL_15;
  }
  v22[(v23 >> 6) + 8] |= 1LL << v23;
  int v25 = (void *)(v22[6] + 16 * v23);
  *int v25 = v19;
  v25[1] = v21;
  uint64_t v26 = (uint64_t *)(v22[7] + 16 * v23);
  *uint64_t v26 = a5;
  v26[1] = a6;
  uint64_t v27 = v22[2];
  BOOL v28 = __OFADD__(v27, 1LL);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    return;
  }

  void v22[2] = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Data));
  uint64_t v30 = swift_arrayDestroy();
  if ((a4 & 1) != 0)
  {
    MEMORY[0x1895F8858](v30);
    v32[2] = v41;
    v32[3] = a2;
    v32[4] = 0LL;
    char v33 = 0;
    uint64_t v34 = a4;
    char v35 = v40 & 1;
    id v36 = v14;
    uint64_t v37 = v18;
    char v38 = v22;
    swift_bridgeObjectRetain();
    specialized String.withFileSystemRepresentation<A>(_:)( (uint64_t (*)(char *))partial apply for closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:),  (uint64_t)v32,  v41,  a2);
    int64_t v31 = v39;
    swift_release();
    swift_bridgeObjectRelease_n();
  }

  else
  {
    v42[0] = v41;
    v42[1] = a2;
    v42[2] = 0LL;
    char v43 = 0;
    writeToFileNoAux(path:buffer:options:attributes:reportProgress:)( (uint64_t)v42,  (uint64_t)v14,  v18,  a4,  (uint64_t)v22,  v40 & 1);
    int64_t v31 = v39;
    swift_release();
    swift_bridgeObjectRelease();
  }

  objc_autoreleasePoolPop(v31);
}

uint64_t partial apply for closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( const char *a1)
{
  return closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( a1,  *(void **)(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32),  *(_BYTE *)(v1 + 40),  *(void **)(v1 + 48),  *(unsigned __int8 *)(v1 + 56),  *(void **)(v1 + 64),  *(void *)(v1 + 72),  *(void **)(v1 + 80));
}

uint64_t _foundation_sandbox_check()
{
  return sandbox_check();
}

void static URLError.Code.unknown.getter(void *a1@<X8>)
{
  *a1 = -1LL;
}

id URLError._nsError.getter()
{
  return *v0;
}

void __swiftcall URLError.init(_nsError:)(Foundation::URLError *__return_ptr retstr, NSError *_nsError)
{
  uint64_t v4 = -[NSError domain](_nsError, sel_domain);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain") && v7 == v8) {
    goto LABEL_7;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_bridgeObjectRelease_n();
  }

  retstr->_nsError.super.Class isa = (Class)_nsError;
}

id static URLError.errorDomain.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain");
}

uint64_t URLError.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t URLError.Code.rawValue.getter()
{
  return *(void *)v0;
}

Foundation::URLError::Code __swiftcall URLError.Code.init(rawValue:)(Foundation::URLError::Code rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

id protocol witness for static CustomNSError.errorDomain.getter in conformance URLError()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain");
}

void static URLError.Code.cancelled.getter(void *a1@<X8>)
{
  *a1 = -999LL;
}

void static URLError.Code.badURL.getter(void *a1@<X8>)
{
  *a1 = -1000LL;
}

void static URLError.Code.timedOut.getter(void *a1@<X8>)
{
  *a1 = -1001LL;
}

Foundation::URLError::NetworkUnavailableReason_optional __swiftcall URLError.NetworkUnavailableReason.init(rawValue:)( Swift::Int rawValue)
{
  char v2 = 3;
  *uint64_t v1 = v2;
  return (Foundation::URLError::NetworkUnavailableReason_optional)rawValue;
}

uint64_t URLError.NetworkUnavailableReason.rawValue.getter()
{
  return *v0;
}

Foundation::URLError::NetworkUnavailableReason_optional protocol witness for RawRepresentable.init(rawValue:) in conformance URLError.NetworkUnavailableReason( Swift::Int *a1)
{
  return URLError.NetworkUnavailableReason.init(rawValue:)(*a1);
}

uint64_t URLError.failingURL.getter@<X0>(void *a1@<X8>)
{
  id v2 = *v1;
  id v3 = *v1;
  id v64 = v2;
  id v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v4)
  {
LABEL_22:
    uint64_t v6 = MEMORY[0x18961AFF0];
    if (*(void *)(MEMORY[0x18961AFF0] + 16LL)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v36 = MEMORY[0x18961AFF0];
    goto LABEL_24;
  }

  swift_unknownObjectRetain();
  uint64_t v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v5)
  {
    uint64_t v6 = v5;
    goto LABEL_19;
  }

  id v7 = objc_msgSend(v4, sel_count);
  if (!v7)
  {

    goto LABEL_22;
  }

  uint64_t v8 = (uint64_t)v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = *(void **)(v6 + 48);
  uint64_t v10 = *(void *)(v6 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v4, v8);
  if (result < 0 || v8 < result) {
    goto LABEL_69;
  }
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
  if (result)
  {
    uint64_t v12 = result - 1;
    uint64_t v13 = v6 + 64;
    do
    {
      while (1)
      {
        uint64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v19 = *v18;
        uint64_t v20 = v18[1];
        swift_bridgeObjectRetain();
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v24 = *(void *)(v6 + 16);
        BOOL v25 = __OFSUB__(v24, 1LL);
        uint64_t v26 = v24 - 1;
        if (v25)
        {
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
          return result;
        }

        *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v26;
LABEL_10:
        if (--v12 < 0) {
          goto LABEL_18;
        }
      }

      *(void *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
      if (v12 < (uint64_t)v21)
      {
        *(_OWORD *)(*(void *)(v6 + 48) + 16 * v21) = *(_OWORD *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v14 = *(void *)(v6 + 56);
        id v15 = (_OWORD *)(v14 + 32 * v12);
        __int128 v16 = v15[1];
        id v17 = (_OWORD *)(v14 + 32 * v21);
        *id v17 = *v15;
        v17[1] = v16;
        goto LABEL_10;
      }

      if (v21 == v12) {
        goto LABEL_10;
      }
      uint64_t v27 = *(void *)(v6 + 48);
      BOOL v28 = (uint64_t *)(v27 + 16 * v21);
      uint64_t v29 = (uint64_t *)(v27 + 16 * v12);
      uint64_t v30 = *v28;
      uint64_t v31 = v28[1];
      uint64_t v32 = v29[1];
      *BOOL v28 = *v29;
      v28[1] = v32;
      *uint64_t v29 = v30;
      v29[1] = v31;
      uint64_t v33 = *(void *)(v6 + 56);
      uint64_t v34 = (_OWORD *)(v33 + 32 * v21);
      char v35 = (_OWORD *)(v33 + 32 * v12);
      outlined init with take of Any(v34, &v71);
      outlined init with take of Any(v35, v34);
      outlined init with take of Any(&v71, v35);
    }

    while ((v12 & 0x8000000000000000LL) == 0);
  }

uint64_t URLError.failureURLString.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  id v62 = v1;
  id v3 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v3)
  {
LABEL_22:
    uint64_t v5 = MEMORY[0x18961AFF0];
    if (*(void *)(MEMORY[0x18961AFF0] + 16LL)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v35 = MEMORY[0x18961AFF0];
    goto LABEL_24;
  }

  swift_unknownObjectRetain();
  uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4)
  {
    uint64_t v5 = v4;
    goto LABEL_19;
  }

  id v6 = objc_msgSend(v3, sel_count);
  if (!v6)
  {

    goto LABEL_22;
  }

  uint64_t v7 = (uint64_t)v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = *(void **)(v5 + 48);
  uint64_t v9 = *(void *)(v5 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v8, v9, v3, v7);
  if (result < 0 || v7 < result) {
    goto LABEL_70;
  }
  *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
  if (result)
  {
    uint64_t v11 = result - 1;
    uint64_t v12 = v5 + 64;
    do
    {
      while (1)
      {
        id v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        swift_bridgeObjectRetain();
        unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        char v22 = v21;
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v23 = *(void *)(v5 + 16);
        BOOL v24 = __OFSUB__(v23, 1LL);
        uint64_t v25 = v23 - 1;
        if (v24)
        {
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
          return result;
        }

        *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
LABEL_10:
        if (--v11 < 0) {
          goto LABEL_18;
        }
      }

      *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      if (v11 < (uint64_t)v20)
      {
        *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20) = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v13 = *(void *)(v5 + 56);
        uint64_t v14 = (_OWORD *)(v13 + 32 * v11);
        __int128 v15 = v14[1];
        __int128 v16 = (_OWORD *)(v13 + 32 * v20);
        *__int128 v16 = *v14;
        v16[1] = v15;
        goto LABEL_10;
      }

      if (v20 == v11) {
        goto LABEL_10;
      }
      uint64_t v26 = *(void *)(v5 + 48);
      uint64_t v27 = (uint64_t *)(v26 + 16 * v20);
      BOOL v28 = (uint64_t *)(v26 + 16 * v11);
      uint64_t v29 = *v27;
      uint64_t v30 = v27[1];
      uint64_t v31 = v28[1];
      *uint64_t v27 = *v28;
      v27[1] = v31;
      *BOOL v28 = v29;
      v28[1] = v30;
      uint64_t v32 = *(void *)(v5 + 56);
      uint64_t v33 = (_OWORD *)(v32 + 32 * v20);
      uint64_t v34 = (_OWORD *)(v32 + 32 * v11);
      outlined init with take of Any(v33, &v69);
      outlined init with take of Any(v34, v33);
      outlined init with take of Any(&v69, v34);
    }

    while ((v11 & 0x8000000000000000LL) == 0);
  }

uint64_t URLError.failureURLPeerTrust.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  id v62 = v1;
  id v3 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v3)
  {
LABEL_22:
    uint64_t v5 = MEMORY[0x18961AFF0];
    if (*(void *)(MEMORY[0x18961AFF0] + 16LL)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v35 = MEMORY[0x18961AFF0];
    goto LABEL_24;
  }

  swift_unknownObjectRetain();
  uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4)
  {
    uint64_t v5 = v4;
    goto LABEL_19;
  }

  id v6 = objc_msgSend(v3, sel_count);
  if (!v6)
  {

    goto LABEL_22;
  }

  uint64_t v7 = (uint64_t)v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = *(void **)(v5 + 48);
  uint64_t v9 = *(void *)(v5 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v8, v9, v3, v7);
  if (result < 0 || v7 < result) {
    goto LABEL_68;
  }
  *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
  if (result)
  {
    uint64_t v11 = result - 1;
    uint64_t v12 = v5 + 64;
    do
    {
      while (1)
      {
        id v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        swift_bridgeObjectRetain();
        unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        char v22 = v21;
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v23 = *(void *)(v5 + 16);
        BOOL v24 = __OFSUB__(v23, 1LL);
        uint64_t v25 = v23 - 1;
        if (v24)
        {
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          return result;
        }

        *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
LABEL_10:
        if (--v11 < 0) {
          goto LABEL_18;
        }
      }

      *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      if (v11 < (uint64_t)v20)
      {
        *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20) = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v13 = *(void *)(v5 + 56);
        uint64_t v14 = (_OWORD *)(v13 + 32 * v11);
        __int128 v15 = v14[1];
        __int128 v16 = (_OWORD *)(v13 + 32 * v20);
        *__int128 v16 = *v14;
        v16[1] = v15;
        goto LABEL_10;
      }

      if (v20 == v11) {
        goto LABEL_10;
      }
      uint64_t v26 = *(void *)(v5 + 48);
      uint64_t v27 = (uint64_t *)(v26 + 16 * v20);
      BOOL v28 = (uint64_t *)(v26 + 16 * v11);
      uint64_t v29 = *v27;
      uint64_t v30 = v27[1];
      uint64_t v31 = v28[1];
      *uint64_t v27 = *v28;
      v27[1] = v31;
      *BOOL v28 = v29;
      v28[1] = v30;
      uint64_t v32 = *(void *)(v5 + 56);
      uint64_t v33 = (_OWORD *)(v32 + 32 * v20);
      uint64_t v34 = (_OWORD *)(v32 + 32 * v11);
      outlined init with take of Any(v33, &v69);
      outlined init with take of Any(v34, v33);
      outlined init with take of Any(&v69, v34);
    }

    while ((v11 & 0x8000000000000000LL) == 0);
  }

uint64_t URLError.backgroundTaskCancelledReason.getter@<X0>(char *a1@<X8>)
{
  return URLError.backgroundTaskCancelledReason.getter((void **)&NSURLErrorBackgroundTaskCancelledReasonKey, a1);
}

uint64_t URLError.networkUnavailableReason.getter@<X0>(char *a1@<X8>)
{
  return URLError.backgroundTaskCancelledReason.getter((void **)&NSURLErrorNetworkUnavailableReasonKey, a1);
}

uint64_t URLError.backgroundTaskCancelledReason.getter@<X0>(void **a1@<X0>, char *a2@<X8>)
{
  id v3 = *v2;
  id v4 = *v2;
  id v66 = v3;
  id v5 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v5)
  {
LABEL_22:
    uint64_t v7 = MEMORY[0x18961AFF0];
    if (*(void *)(MEMORY[0x18961AFF0] + 16LL)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v37 = MEMORY[0x18961AFF0];
    goto LABEL_24;
  }

  swift_unknownObjectRetain();
  uint64_t v6 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v6)
  {
    uint64_t v7 = v6;
    goto LABEL_19;
  }

  id v8 = objc_msgSend(v5, sel_count);
  if (!v8)
  {

    goto LABEL_22;
  }

  uint64_t v9 = (uint64_t)v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v10 = *(void **)(v7 + 48);
  uint64_t v11 = *(void *)(v7 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v10, v11, v5, v9);
  if (result < 0 || v9 < result) {
    goto LABEL_73;
  }
  *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
  if (result)
  {
    uint64_t v13 = result - 1;
    uint64_t v14 = v7 + 64;
    while (1)
    {
      uint64_t v19 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v13);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      swift_bridgeObjectRetain();
      unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      char v24 = v23;
      swift_bridgeObjectRelease();
      if ((v24 & 1) != 0)
      {
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v25 = *(void *)(v7 + 16);
        BOOL v26 = __OFSUB__(v25, 1LL);
        uint64_t v27 = v25 - 1;
        if (v26) {
          goto LABEL_72;
        }
        *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v27;
        goto LABEL_10;
      }

      *(void *)(v14 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
      if (v13 < (uint64_t)v22)
      {
        *(_OWORD *)(*(void *)(v7 + 48) + 16 * v22) = *(_OWORD *)(*(void *)(v7 + 48) + 16 * v13);
        uint64_t v15 = *(void *)(v7 + 56);
        __int128 v16 = (_OWORD *)(v15 + 32 * v13);
        __int128 v17 = v16[1];
        uint64_t v18 = (_OWORD *)(v15 + 32 * v22);
        *uint64_t v18 = *v16;
        v18[1] = v17;
LABEL_10:
        if (--v13 < 0) {
          break;
        }
      }

      else
      {
        if (v22 == v13) {
          goto LABEL_10;
        }
        uint64_t v28 = *(void *)(v7 + 48);
        uint64_t v29 = (uint64_t *)(v28 + 16 * v22);
        uint64_t v30 = (uint64_t *)(v28 + 16 * v13);
        uint64_t v31 = *v29;
        uint64_t v32 = v29[1];
        uint64_t v33 = v30[1];
        *uint64_t v29 = *v30;
        v29[1] = v33;
        *uint64_t v30 = v31;
        v30[1] = v32;
        uint64_t v34 = *(void *)(v7 + 56);
        uint64_t v35 = (_OWORD *)(v34 + 32 * v22);
        uint64_t v36 = (_OWORD *)(v34 + 32 * v13);
        outlined init with take of Any(v35, &v75);
        outlined init with take of Any(v36, v35);
        outlined init with take of Any(&v75, v36);
        if (v13 < 0) {
          break;
        }
      }
    }
  }

  swift_release();
LABEL_19:

  if (!*(void *)(v7 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v37 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  uint64_t v68 = v7 + 64;
  uint64_t v38 = -1LL << *(_BYTE *)(v7 + 32);
  if (-v38 < 64) {
    uint64_t v39 = ~(-1LL << -(char)v38);
  }
  else {
    uint64_t v39 = -1LL;
  }
  unint64_t v40 = v39 & *(void *)(v7 + 64);
  int64_t v69 = (unint64_t)(63 - v38) >> 6;
  uint64_t v41 = v37 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v42 = 0LL;
  while (1)
  {
    if (v40)
    {
      unint64_t v45 = __clz(__rbit64(v40));
      v40 &= v40 - 1;
      unint64_t v46 = v45 | (v42 << 6);
      goto LABEL_48;
    }

    int64_t v47 = v42 + 1;
    if (__OFADD__(v42, 1LL))
    {
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }

    if (v47 >= v69) {
      goto LABEL_57;
    }
    unint64_t v48 = *(void *)(v68 + 8 * v47);
    int64_t v49 = v42 + 1;
    if (!v48)
    {
      int64_t v49 = v42 + 2;
      if (v42 + 2 >= v69) {
        goto LABEL_57;
      }
      unint64_t v48 = *(void *)(v68 + 8 * v49);
      if (!v48)
      {
        int64_t v49 = v42 + 3;
        if (v42 + 3 >= v69) {
          goto LABEL_57;
        }
        unint64_t v48 = *(void *)(v68 + 8 * v49);
        if (!v48)
        {
          int64_t v49 = v42 + 4;
          if (v42 + 4 >= v69) {
            goto LABEL_57;
          }
          unint64_t v48 = *(void *)(v68 + 8 * v49);
          if (!v48) {
            break;
          }
        }
      }
    }

uint64_t URLError.downloadTaskResumeData.getter()
{
  return URLError.downloadTaskResumeData.getter(MEMORY[0x189601E68]);
}

uint64_t URLError.uploadTaskResumeData.getter()
{
  return URLError.downloadTaskResumeData.getter(MEMORY[0x189601E80]);
}

uint64_t URLError.downloadTaskResumeData.getter(void **a1)
{
  id v2 = *v1;
  id v3 = *v1;
  id v63 = v2;
  id v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v4)
  {
LABEL_22:
    uint64_t v6 = MEMORY[0x18961AFF0];
    if (*(void *)(MEMORY[0x18961AFF0] + 16LL)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v36 = MEMORY[0x18961AFF0];
    goto LABEL_24;
  }

  swift_unknownObjectRetain();
  uint64_t v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v5)
  {
    uint64_t v6 = v5;
    goto LABEL_19;
  }

  id v7 = objc_msgSend(v4, sel_count);
  if (!v7)
  {

    goto LABEL_22;
  }

  uint64_t v8 = (uint64_t)v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = *(void **)(v6 + 48);
  uint64_t v10 = *(void *)(v6 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v4, v8);
  if (result < 0 || v8 < result) {
    goto LABEL_69;
  }
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
  if (result)
  {
    uint64_t v12 = result - 1;
    uint64_t v13 = v6 + 64;
    do
    {
      while (1)
      {
        uint64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v19 = *v18;
        uint64_t v20 = v18[1];
        swift_bridgeObjectRetain();
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v24 = *(void *)(v6 + 16);
        BOOL v25 = __OFSUB__(v24, 1LL);
        uint64_t v26 = v24 - 1;
        if (v25)
        {
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
          return result;
        }

        *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v26;
LABEL_10:
        if (--v12 < 0) {
          goto LABEL_18;
        }
      }

      *(void *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
      if (v12 < (uint64_t)v21)
      {
        *(_OWORD *)(*(void *)(v6 + 48) + 16 * v21) = *(_OWORD *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v14 = *(void *)(v6 + 56);
        uint64_t v15 = (_OWORD *)(v14 + 32 * v12);
        __int128 v16 = v15[1];
        __int128 v17 = (_OWORD *)(v14 + 32 * v21);
        *__int128 v17 = *v15;
        v17[1] = v16;
        goto LABEL_10;
      }

      if (v21 == v12) {
        goto LABEL_10;
      }
      uint64_t v27 = *(void *)(v6 + 48);
      uint64_t v28 = (uint64_t *)(v27 + 16 * v21);
      uint64_t v29 = (uint64_t *)(v27 + 16 * v12);
      uint64_t v30 = *v28;
      uint64_t v31 = v28[1];
      uint64_t v32 = v29[1];
      *uint64_t v28 = *v29;
      v28[1] = v32;
      *uint64_t v29 = v30;
      v29[1] = v31;
      uint64_t v33 = *(void *)(v6 + 56);
      uint64_t v34 = (_OWORD *)(v33 + 32 * v21);
      uint64_t v35 = (_OWORD *)(v33 + 32 * v12);
      outlined init with take of Any(v34, &v71);
      outlined init with take of Any(v35, v34);
      outlined init with take of Any(&v71, v35);
    }

    while ((v12 & 0x8000000000000000LL) == 0);
  }

void static URLError.unsupportedURL.getter(void *a1@<X8>)
{
  *a1 = -1002LL;
}

void static URLError.cannotFindHost.getter(void *a1@<X8>)
{
  *a1 = -1003LL;
}

void static URLError.cannotConnectToHost.getter(void *a1@<X8>)
{
  *a1 = -1004LL;
}

void static URLError.networkConnectionLost.getter(void *a1@<X8>)
{
  *a1 = -1005LL;
}

void static URLError.dnsLookupFailed.getter(void *a1@<X8>)
{
  *a1 = -1006LL;
}

void static URLError.httpTooManyRedirects.getter(void *a1@<X8>)
{
  *a1 = -1007LL;
}

void static URLError.resourceUnavailable.getter(void *a1@<X8>)
{
  *a1 = -1008LL;
}

void static URLError.notConnectedToInternet.getter(void *a1@<X8>)
{
  *a1 = -1009LL;
}

void static URLError.redirectToNonExistentLocation.getter(void *a1@<X8>)
{
  *a1 = -1010LL;
}

void static URLError.badServerResponse.getter(void *a1@<X8>)
{
  *a1 = -1011LL;
}

void static URLError.userCancelledAuthentication.getter(void *a1@<X8>)
{
  *a1 = -1012LL;
}

void static URLError.userAuthenticationRequired.getter(void *a1@<X8>)
{
  *a1 = -1013LL;
}

void static URLError.zeroByteResource.getter(void *a1@<X8>)
{
  *a1 = -1014LL;
}

void static URLError.cannotDecodeRawData.getter(void *a1@<X8>)
{
  *a1 = -1015LL;
}

void static URLError.cannotDecodeContentData.getter(void *a1@<X8>)
{
  *a1 = -1016LL;
}

void static URLError.cannotParseResponse.getter(void *a1@<X8>)
{
  *a1 = -1017LL;
}

void static URLError.appTransportSecurityRequiresSecureConnection.getter(void *a1@<X8>)
{
  *a1 = -1022LL;
}

void static URLError.fileDoesNotExist.getter(void *a1@<X8>)
{
  *a1 = -1100LL;
}

void static URLError.fileIsDirectory.getter(void *a1@<X8>)
{
  *a1 = -1101LL;
}

void static URLError.noPermissionsToReadFile.getter(void *a1@<X8>)
{
  *a1 = -1102LL;
}

void static URLError.dataLengthExceedsMaximum.getter(void *a1@<X8>)
{
  *a1 = -1103LL;
}

void static URLError.secureConnectionFailed.getter(void *a1@<X8>)
{
  *a1 = -1200LL;
}

void static URLError.serverCertificateHasBadDate.getter(void *a1@<X8>)
{
  *a1 = -1201LL;
}

void static URLError.serverCertificateUntrusted.getter(void *a1@<X8>)
{
  *a1 = -1202LL;
}

void static URLError.serverCertificateHasUnknownRoot.getter(void *a1@<X8>)
{
  *a1 = -1203LL;
}

void static URLError.serverCertificateNotYetValid.getter(void *a1@<X8>)
{
  *a1 = -1204LL;
}

void static URLError.clientCertificateRejected.getter(void *a1@<X8>)
{
  *a1 = -1205LL;
}

void static URLError.clientCertificateRequired.getter(void *a1@<X8>)
{
  *a1 = -1206LL;
}

void static URLError.cannotLoadFromNetwork.getter(void *a1@<X8>)
{
  *a1 = -2000LL;
}

void static URLError.cannotCreateFile.getter(void *a1@<X8>)
{
  *a1 = -3000LL;
}

void static URLError.cannotOpenFile.getter(void *a1@<X8>)
{
  *a1 = -3001LL;
}

void static URLError.cannotCloseFile.getter(void *a1@<X8>)
{
  *a1 = -3002LL;
}

void static URLError.cannotWriteToFile.getter(void *a1@<X8>)
{
  *a1 = -3003LL;
}

void static URLError.cannotRemoveFile.getter(void *a1@<X8>)
{
  *a1 = -3004LL;
}

void static URLError.cannotMoveFile.getter(void *a1@<X8>)
{
  *a1 = -3005LL;
}

void static URLError.downloadDecodingFailedMidStream.getter(void *a1@<X8>)
{
  *a1 = -3006LL;
}

void static URLError.downloadDecodingFailedToComplete.getter(void *a1@<X8>)
{
  *a1 = -3007LL;
}

void static URLError.internationalRoamingOff.getter(void *a1@<X8>)
{
  *a1 = -1018LL;
}

void static URLError.callIsActive.getter(void *a1@<X8>)
{
  *a1 = -1019LL;
}

void static URLError.dataNotAllowed.getter(void *a1@<X8>)
{
  *a1 = -1020LL;
}

void static URLError.requestBodyStreamExhausted.getter(void *a1@<X8>)
{
  *a1 = -1021LL;
}

void static URLError.backgroundSessionRequiresSharedContainer.getter(void *a1@<X8>)
{
  *a1 = -995LL;
}

void static URLError.backgroundSessionInUseByAnotherProcess.getter(void *a1@<X8>)
{
  *a1 = -996LL;
}

void static URLError.backgroundSessionWasDisconnected.getter(void *a1@<X8>)
{
  *a1 = -997LL;
}

unint64_t lazy protocol witness table accessor for type URLError.Code and conformance URLError.Code()
{
  unint64_t result = lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code;
  if (!lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLError.Code, &type metadata for URLError.Code);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code;
  if (!lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLError.Code, &type metadata for URLError.Code);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code;
  if (!lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLError.Code, &type metadata for URLError.Code);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for URLError.Code(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type URLError.Code and conformance URLError.Code();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for URLError(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type URLError and conformance URLError();
  a1[2] = lazy protocol witness table accessor for type URLError and conformance URLError();
  unint64_t result = lazy protocol witness table accessor for type URLError and conformance URLError();
  a1[3] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for URLError(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type URLError and conformance URLError();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type URLError.BackgroundTaskCancelledReason and conformance URLError.BackgroundTaskCancelledReason()
{
  unint64_t result = lazy protocol witness table cache variable for type URLError.BackgroundTaskCancelledReason and conformance URLError.BackgroundTaskCancelledReason;
  if (!lazy protocol witness table cache variable for type URLError.BackgroundTaskCancelledReason and conformance URLError.BackgroundTaskCancelledReason)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URLError.BackgroundTaskCancelledReason,  &type metadata for URLError.BackgroundTaskCancelledReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLError.BackgroundTaskCancelledReason and conformance URLError.BackgroundTaskCancelledReason);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URLError.NetworkUnavailableReason and conformance URLError.NetworkUnavailableReason()
{
  unint64_t result = lazy protocol witness table cache variable for type URLError.NetworkUnavailableReason and conformance URLError.NetworkUnavailableReason;
  if (!lazy protocol witness table cache variable for type URLError.NetworkUnavailableReason and conformance URLError.NetworkUnavailableReason)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URLError.NetworkUnavailableReason,  &type metadata for URLError.NetworkUnavailableReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLError.NetworkUnavailableReason and conformance URLError.NetworkUnavailableReason);
  }

  return result;
}

ValueMetadata *type metadata accessor for URLError()
{
  return &type metadata for URLError;
}

ValueMetadata *type metadata accessor for URLError.Code()
{
  return &type metadata for URLError.Code;
}

ValueMetadata *type metadata accessor for URLError.BackgroundTaskCancelledReason()
{
  return &type metadata for URLError.BackgroundTaskCancelledReason;
}

uint64_t storeEnumTagSinglePayload for URLError.BackgroundTaskCancelledReason( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(vos_unfair_lock_unlock(*v0 + 4) = 1;
  }
  else {
    LODWORD(vos_unfair_lock_unlock(*v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1832D6314 + 4 * byte_1838148F5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1832D6348 + 4 * byte_1838148F0[v4]))();
}

uint64_t sub_1832D6348(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832D6350(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1832D6358LL);
  }
  return result;
}

uint64_t sub_1832D6364(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1832D636CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1832D6370(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832D6378(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for URLError.NetworkUnavailableReason()
{
  return &type metadata for URLError.NetworkUnavailableReason;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOG_SSs5NeverOTg506_sSS10d3E17ef31V4fromACs7Decoder_p_tKcfcSSAC14gh3V14iJ54Ocfu_33_3c0eda9a63dc724d562b3e4a722c2209AISSTf3nnnpk_nTf1cn_n( uint64_t a1)
{
  uint64_t v10 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
  uint64_t v3 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    v9[1] = v1;
    uint64_t v11 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    outlined init with copy of ICUNumberFormatter.Signature( a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)),  (uint64_t)v5,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    id v7 = (char *)&loc_1832D654C + 4 * byte_183814C80[swift_getEnumCaseMultiPayload()];
    __asm { BR              X9 }
  }

  return MEMORY[0x18961AFE8];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg5( void (*a1)(_OWORD *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x18961AFE8];
  if (v5)
  {
    uint64_t v19 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v19;
    for (uint64_t i = a3 + 32; ; i += 120LL)
    {
      a1(v17, i);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      uint64_t v19 = v6;
      unint64_t v11 = *(void *)(v6 + 16);
      unint64_t v10 = *(void *)(v6 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v6 = v19;
      }

      *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v11 + 1;
      uint64_t v12 = (_OWORD *)(v6 + (v11 << 6));
      __int128 v13 = v17[0];
      __int128 v14 = v17[1];
      __int128 v15 = v18[0];
      *(_OWORD *)((char *)v12 + 73) = *(_OWORD *)((char *)v18 + 9);
      __int128 v12[3] = v14;
      _OWORD v12[4] = v15;
      _OWORD v12[2] = v13;
      if (!--v5) {
        return v6;
      }
    }

    swift_release();
  }

  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTm( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a5();
  swift_unknownObjectRelease();
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverO10Foundation23LocalizedStringResourceVIsgnrzr_xSayAJGAGSlRzAJRsd__AGRsd_0_r_0_lIetMgnozo_Tp5( void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2)
{
  void (*v32)(uint64_t *__return_ptr, char *);
  uint64_t v33;
  _BYTE v34[32];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v4 = v3;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  id v7 = (char *)&v27 - v6;
  uint64_t v28 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v28 - 8);
  MEMORY[0x1895F8858](v28);
  uint64_t v9 = (char *)&v27 - v8;
  uint64_t v10 = dispatch thunk of Collection.count.getter();
  uint64_t result = MEMORY[0x18961AFE8];
  if (v10)
  {
    unint64_t v44 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v10 & ~(v10 >> 63),  0);
    uint64_t result = dispatch thunk of Collection.startIndex.getter();
    if (v10 < 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v30 = v2;
      uint64_t v29 = AssociatedTypeWitness;
      while (1)
      {
        uint64_t v12 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v13 = v31;
        (*(void (**)(char *))(v31 + 16))(v7);
        v12(v34, 0LL);
        v32(&v35, v7);
        if (v4) {
          break;
        }
        uint64_t v4 = 0LL;
        (*(void (**)(char *, uint64_t))(v13 + 8))(v7, AssociatedTypeWitness);
        uint64_t v14 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v14 + 16) + 1LL,  1);
          uint64_t v14 = v44;
        }

        unint64_t v16 = *(void *)(v14 + 16);
        unint64_t v15 = *(void *)(v14 + 24);
        if (v16 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v15 > 1,  v16 + 1,  1);
          uint64_t v14 = v44;
        }

        uint64_t v17 = v35;
        uint64_t v18 = v37;
        uint64_t v19 = v38;
        uint64_t v20 = v41;
        uint64_t v21 = v14 + 112 * v16;
        __int128 v22 = v36;
        __int128 v24 = v39;
        __int128 v23 = v40;
        __int128 v25 = v42;
        __int128 v26 = v43;
        *(void *)(v14 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v16 + 1;
        *(void *)(v21 + 32) = v17;
        *(_OWORD *)(v21 + 40) = v22;
        *(void *)(v21 + 56) = v18;
        *(void *)(v21 + 6os_unfair_lock_unlock(*v0 + 4) = v19;
        *(_OWORD *)(v21 + 72) = v24;
        *(_OWORD *)(v21 + 88) = v23;
        *(void *)(v21 + 10os_unfair_lock_unlock(*v0 + 4) = v20;
        *(_OWORD *)(v21 + 112) = v25;
        *(_OWORD *)(v21 + 128) = v26;
        dispatch thunk of Collection.formIndex(after:)();
        --v10;
        uint64_t AssociatedTypeWitness = v29;
        if (!v10)
        {
          (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
          return v44;
        }
      }

      (*(void (**)(char *, uint64_t))(v13 + 8))(v7, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
      return swift_release();
    }
  }

  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayyXlG_SnySS5IndexVGs5NeverOTg5( void (*a1)(__int128 *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t v7 = MEMORY[0x18961AFE8];
    if (!v6) {
      return v7;
    }
    uint64_t v16 = MEMORY[0x18961AFE8];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v6 & ~(v6 >> 63),  0);
    if (v6 < 0) {
      break;
    }
    uint64_t v9 = 0LL;
    uint64_t v7 = v16;
    while (v6 != v9)
    {
      if ((a3 & 0xC000000000000001LL) != 0)
      {
        uint64_t v10 = MEMORY[0x186E1C36C](v9, a3);
      }

      else
      {
        uint64_t v10 = *(void *)(a3 + 8 * v9 + 32);
        swift_unknownObjectRetain();
      }

      uint64_t v14 = v10;
      a1(&v15, &v14);
      if (v4)
      {
        swift_release();
        swift_unknownObjectRelease();
        return v7;
      }

      uint64_t v4 = 0LL;
      swift_unknownObjectRelease();
      uint64_t v16 = v7;
      unint64_t v12 = *(void *)(v7 + 16);
      unint64_t v11 = *(void *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        uint64_t v7 = v16;
      }

      ++v9;
      *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v12 + 1;
      *(_OWORD *)(v7 + 16 * v12 + 32) = v15;
      if (v6 == v9) {
        return v7;
      }
    }

    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  __break(1u);
  return result;
}

uint64_t specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v20 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0LL);
  MEMORY[0x1895F8858](v20);
  __int128 v22 = (uint64_t *)((char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of ICUNumberFormatter.Signature( a3,  (uint64_t)v19,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      __int128 v24 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
      outlined init with take of LocalePreferences?( (uint64_t)v19,  (uint64_t)v10,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v10,  (uint64_t)v22,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v25 = v40;
      *__int128 v22 = a1;
      v22[1] = v25;
      swift_storeEnumTagMultiPayload();
      uint64_t v26 = (uint64_t)v10;
    }

    else
    {
      __int128 v24 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      outlined init with take of LocalePreferences?( (uint64_t)v19,  (uint64_t)v7,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v7,  (uint64_t)v22,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v28 = v40;
      *__int128 v22 = a1;
      v22[1] = v28;
      swift_storeEnumTagMultiPayload();
      uint64_t v26 = (uint64_t)v7;
    }
  }

  else
  {
    __int128 v24 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    outlined init with take of LocalePreferences?( (uint64_t)v19,  (uint64_t)v13,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v13,  (uint64_t)v22,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v27 = v40;
    *__int128 v22 = a1;
    v22[1] = v27;
    swift_storeEnumTagMultiPayload();
    uint64_t v26 = (uint64_t)v13;
  }

  outlined destroy of Any?(v26, v24);
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v22,  (uint64_t)v16,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  int v29 = swift_getEnumCaseMultiPayload();
  if (!v29)
  {
    uint64_t v35 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    outlined init with take of LocalePreferences?( (uint64_t)v16,  (uint64_t)v13,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v30 = specialized FloatingPointFormatStyle.format(_:)();
    uint64_t v32 = v36;
    uint64_t v33 = (uint64_t)v13;
LABEL_11:
    uint64_t v34 = v35;
    goto LABEL_12;
  }

  if (v29 != 1)
  {
    uint64_t v35 = (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
    outlined init with take of LocalePreferences?( (uint64_t)v16,  (uint64_t)v7,  (uint64_t *)&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
    uint64_t v30 = specialized FloatingPointFormatStyle.Percent.format(_:)();
    uint64_t v32 = v37;
    uint64_t v33 = (uint64_t)v7;
    goto LABEL_11;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v16,  (uint64_t)v10,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  uint64_t v30 = specialized FloatingPointFormatStyle.Currency.format(_:)();
  uint64_t v32 = v31;
  uint64_t v33 = (uint64_t)v10;
  uint64_t v34 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
LABEL_12:
  outlined destroy of Any?(v33, v34);
  uint64_t v41 = v30;
  uint64_t v42 = v32;
  outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v22,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  return String.init<A>(_:)();
}

uint64_t specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v51)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v52;
  int *v53;
  void *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  os_unfair_lock_s *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t ObjectType;
  uint64_t (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t isStackAllocationSafe;
  int v108;
  uint64_t v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  char *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  char *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t result;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int *v169;
  char *v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void v176[18];
  void *v177;
  void v178[18];
  void v179[20];
  uint64_t v173 = a2;
  id v174 = a4;
  v179[18] = *MEMORY[0x1895F89C0];
  uint64_t v166 = type metadata accessor for ICUPercentNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v166);
  id v167 = (uint64_t)&v161 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v169 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0LL);
  uint64_t v162 = *((void *)v169 - 1);
  MEMORY[0x1895F8858](v169);
  id v163 = (uint64_t)&v161 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v171 = (uint64_t)&v161 - v9;
  id v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1895F8858](v165);
  uint64_t v170 = (char *)&v161 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v161 - v12;
  uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1895F8858](v164);
  char v172 = (uint64_t *)((char *)&v161 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)&v161 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1895F8858](v18);
  id v168 = (uint64_t)&v161 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  __int128 v22 = (char *)&v161 - v21;
  uint64_t v23 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
  MEMORY[0x1895F8858](v23);
  uint64_t v25 = (char *)&v161 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v26);
  uint64_t v28 = (char *)&v161 - v27;
  uint64_t v29 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0LL);
  MEMORY[0x1895F8858](v29);
  uint64_t v175 = (uint64_t *)((char *)&v161 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of ICUNumberFormatter.Signature( a3,  (uint64_t)v28,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
      outlined init with take of LocalePreferences?( (uint64_t)v28,  (uint64_t)v17,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      uint64_t v33 = v175;
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v17,  (uint64_t)v175,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v34 = v173;
      *uint64_t v33 = a1;
      v33[1] = v34;
      swift_storeEnumTagMultiPayload();
      uint64_t v35 = (uint64_t)v17;
    }

    else
    {
      uint64_t v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      outlined init with take of LocalePreferences?( (uint64_t)v28,  (uint64_t)v13,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      uint64_t v38 = v175;
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v13,  (uint64_t)v175,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v39 = v173;
      *uint64_t v38 = a1;
      v38[1] = v39;
      swift_storeEnumTagMultiPayload();
      uint64_t v35 = (uint64_t)v13;
      uint64_t v33 = v38;
    }

    uint64_t v37 = v32;
  }

  else
  {
    outlined init with take of LocalePreferences?( (uint64_t)v28,  (uint64_t)v22,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    uint64_t v33 = v175;
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v22,  (uint64_t)v175,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v36 = v173;
    *uint64_t v33 = a1;
    v33[1] = v36;
    swift_storeEnumTagMultiPayload();
    uint64_t v35 = (uint64_t)v22;
    uint64_t v37 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
  }

  outlined destroy of Any?(v35, v37);
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v33,  (uint64_t)v25,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  int v40 = swift_getEnumCaseMultiPayload();
  if (!v40)
  {
    uint64_t v69 = (uint64_t)v25;
    __int128 v70 = v168;
    outlined init with take of LocalePreferences?( v69,  v168,  (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    __int128 v71 = specialized static ICUNumberFormatter.create<A>(for:)(v70);
    __int128 v72 = v174;
    if (!v71)
    {
LABEL_17:
      v179[0] = v72;
      lazy protocol witness table accessor for type Int and conformance Int();
      id v74 = String.init<A>(_:radix:uppercase:)();
      __int128 v76 = v75;
LABEL_18:
      __int128 v77 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
LABEL_71:
      uint64_t v128 = v70;
LABEL_133:
      outlined destroy of Any?(v128, v77);
      v179[0] = v74;
      v179[1] = v76;
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v33,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
      return String.init<A>(_:)();
    }

    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    uint64_t v73 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
    MEMORY[0x1895F8858](v73);
    LODWORD(v179[0]) = 0;
    uint64_t isStackAllocationSafe = unumf_resultToString();
    if (LODWORD(v179[0]) == 15)
    {
      uint64_t v108 = isStackAllocationSafe + 1;
      if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
      {
        __break(1u);
        goto LABEL_135;
      }

      if (v108 < 0)
      {
LABEL_137:
        __break(1u);
        goto LABEL_138;
      }

      if (v108 < 513
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        MEMORY[0x1895F8858](isStackAllocationSafe);
        unint64_t v110 = (char *)&v161 - v109;
        LODWORD(v178[0]) = 0;
        unint64_t v111 = unumf_resultToString();
        if (SLODWORD(v178[0]) <= 0 && v111 > 0)
        {
          id v74 = specialized String.init(_utf16:)((uint64_t)v110, v111);
          __int128 v76 = v112;
          uint64_t v33 = v175;
          goto LABEL_50;
        }

        swift_release();
        uint64_t v33 = v175;
        goto LABEL_16;
      }

      int v121 = swift_slowAlloc();
      LODWORD(v178[0]) = 0;
      id v122 = unumf_resultToString();
      if (SLODWORD(v178[0]) <= 0 && v122 > 0)
      {
        id v74 = specialized String.init(_utf16:)(v121, v122);
        __int128 v76 = v123;
        MEMORY[0x186E20E60](v121, -1LL, -1LL);
LABEL_50:
        swift_release();
        swift_release();
        if (v76) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }

      MEMORY[0x186E20E60](v121, -1LL, -1LL);
    }

    else if (SLODWORD(v179[0]) <= 0 && (int)isStackAllocationSafe > 0)
    {
      id v74 = specialized String.init(_utf16:)((uint64_t)(&v161 - 8), isStackAllocationSafe);
      __int128 v76 = v119;
      goto LABEL_50;
    }

    swift_release();
LABEL_16:
    swift_release();
    goto LABEL_17;
  }

  if (v40 != 1)
  {
    id v78 = (uint64_t)v25;
    __int128 v70 = (uint64_t)v170;
    outlined init with take of LocalePreferences?( v78,  (uint64_t)v170,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
    type metadata accessor for ICUPercentNumberFormatter();
    __int128 v79 = v70 + *(int *)(v165 + 36);
    __int128 v80 = *(void *)(v70 + 8);
    uint64_t ObjectType = swift_getObjectType();
    id v82 = *(uint64_t (**)(uint64_t, uint64_t))(v80 + 472);
    swift_unknownObjectRetain();
    __int128 v83 = v82(ObjectType, v80);
    id v85 = v84;
    swift_unknownObjectRelease();
    id v86 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v80 + 464);
    swift_unknownObjectRetain();
    v86(v178, ObjectType, v80);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v178,  (uint64_t)v179,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v87 = v79;
    uint64_t v88 = v167;
    outlined init with copy of ICUNumberFormatter.Signature( v87,  v167,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
    uint64_t v89 = v166;
    char v90 = (uint64_t *)(v88 + *(int *)(v166 + 20));
    void *v90 = v83;
    v90[1] = v85;
    outlined init with take of LocalePreferences?( (uint64_t)v179,  v88 + *(int *)(v89 + 24),  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    char v91 = static ICUPercentNumberFormatter._create(with:)(v88);
    outlined destroy of ICUNumberFormatter.Signature( v88,  type metadata accessor for ICUPercentNumberFormatter.Signature);
    char v92 = v174;
    if (!v91) {
      goto LABEL_69;
    }
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    int v93 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
    MEMORY[0x1895F8858](v93);
    LODWORD(v178[0]) = 0;
    unint64_t v113 = unumf_resultToString();
    if (LODWORD(v178[0]) != 15)
    {
      id v74 = specialized String.init(_utf16:)((uint64_t)(&v161 - 8), v113);
      __int128 v76 = v120;
      goto LABEL_55;
    }

    uint64_t v114 = v113 + 1;
    if (!__OFADD__((_DWORD)v113, 1))
    {
      if (v114 < 0)
      {
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }

      if (v114 < 513 || (unint64_t v113 = swift_stdlib_isStackAllocationSafe(), (v113 & 1) != 0))
      {
        MEMORY[0x1895F8858](v113);
        uint64_t v116 = (char *)&v161 - v115;
        LODWORD(v176[0]) = 0;
        id v117 = unumf_resultToString();
        if (SLODWORD(v176[0]) <= 0 && v117 > 0)
        {
          id v74 = specialized String.init(_utf16:)((uint64_t)v116, v117);
          __int128 v76 = v118;
          goto LABEL_55;
        }

uint64_t specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  void (*v22)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t (*v24)(uint64_t, int64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  UErrorCode v34;
  UErrorCode isUniquelyReferenced_nonNull_native;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  unint64_t v45;
  os_unfair_lock_s *v46;
  uint64_t v47;
  os_log_s *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_unfair_lock_s *v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  const void *v88;
  uint64_t v89;
  uint64_t v90;
  int64_t v91;
  unint64_t v92;
  int64_t v93;
  int64_t v94;
  uint64_t *v95;
  uint64_t isStackAllocationSafe;
  int v97;
  uint64_t v98;
  _BYTE *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  Swift::String v113;
  id v114;
  id v115;
  id v116;
  void *v117;
  void *v118;
  Swift::String v119;
  uint64_t result;
  _BYTE v121[64];
  void v122[2];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  os_unfair_lock_s *v165;
  uint64_t v166;
  uint64_t v167;
  os_unfair_lock_s *v168;
  uint64_t v169;
  int64_t v170;
  char *v171;
  uint64_t v172;
  os_unfair_lock_t v173;
  uint64_t v174;
  int64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  __int128 v179;
  uint64_t v180;
  int v181;
  __int16 v182;
  uint64_t v183[49];
  void v184[49];
  uint64_t v185[44];
  uint64_t v186[49];
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int16 v190;
  char v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  __int16 v195;
  int v196;
  __int16 v197;
  uint64_t v198;
  __int16 v199;
  uint64_t v200[52];
  v200[49] = *MEMORY[0x1895F89C0];
  __int128 v9 = *(_OWORD *)(a3 + 64);
  unint64_t v187 = *(_OWORD *)(a3 + 48);
  uint64_t v188 = v9;
  uint64_t v189 = *(_OWORD *)(a3 + 80);
  unint64_t v190 = *(_WORD *)(a3 + 96);
  uint64_t v179 = *(_OWORD *)a3;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v175 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(a3 + 40);
  id v176 = *(void *)(a3 + 32);
  id v177 = v10;
  outlined retain of Date.IntervalFormatStyle(a3);
  swift_unknownObjectRetain();
  outlined release of Locale((uint64_t)&v179);
  v200[0] = a1;
  v200[1] = a2;
  Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)();
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000LL) == 0) {
    uint64_t v14 = (unint64_t)v12 & 0xFFFFFFFFFFFFLL;
  }
  if (!v14)
  {
    swift_bridgeObjectRelease();
    int v191 = 3;
    Swift::String v192 = 0LL;
    unint64_t v193 = 50332931;
    uint64_t v194 = 0LL;
    char v195 = 1;
    uint64_t v196 = 591363;
    uint64_t v197 = 513;
    int v198 = 0LL;
    unint64_t v199 = 3327;
    v200[0] = a1;
    v200[1] = a2;
    Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)();
  }

  uint64_t v15 = v12;
  uint64_t v16 = v13;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 64);
  swift_unknownObjectRetain();
  uint64_t v19 = v18(ObjectType, a2);
  Locale.Components.init(identifier:)(v19, v20, v200);
  v186[0] = a1;
  v186[1] = a2;
  Locale.Components.applyPreferencesOverride(_:)(v186);
  id v174 = a1;
  swift_unknownObjectRelease();
  memcpy(v185, v200, sizeof(v185));
  uint64_t v21 = swift_getObjectType();
  __int128 v22 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v11 + 24);
  outlined retain of Locale.Components(v185);
  swift_unknownObjectRetain();
  v22(v200, v21, v11);
  swift_unknownObjectRelease();
  LODWORD(v18) = LOBYTE(v200[0]);
  uint64_t v23 = swift_getObjectType();
  uint64_t v24 = *(uint64_t (**)(uint64_t, int64_t))(v175 + 32);
  swift_unknownObjectRetain();
  uint64_t v25 = v24(v23, v175);
  uint64_t v27 = v26;
  swift_unknownObjectRelease();
  memcpy(v186, v185, 0x160uLL);
  LODWORD(v175) = (_DWORD)v18;
  LOBYTE(v186[44]) = (_BYTE)v18;
  v186[45] = v25;
  v186[46] = v27;
  v186[47] = (uint64_t)v15;
  v186[48] = v16;
  uint64_t v28 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  uint64_t v29 = (uint64_t *)v16;
  if (v28 != -1) {
    swift_once();
  }
  uint64_t v30 = *(os_unfair_lock_s **)algn_18C5D62F8;
  id v167 = static ICUDateIntervalFormatter.cache;
  memcpy(v184, v186, sizeof(v184));
  swift_retain_n();
  os_unfair_lock_lock(v30 + 6);
  memcpy(v200, v184, 0x188uLL);
  id v168 = v30 + 4;
  uint64_t v173 = v30 + 6;
  uint64_t v31 = specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)&v30[4], (unsigned __int8 *)v200);
  os_unfair_lock_unlock(v30 + 6);
  swift_release();
  if (v31 != 1) {
    goto LABEL_77;
  }
  id v165 = v30;
  v122[1] = type metadata accessor for ICUDateIntervalFormatter();
  id v163 = (uint64_t)v15;
  uint64_t v164 = swift_allocObject();
  uint64_t v166 = v16;
  id v161 = v27;
  uint64_t v162 = v25;
  uint64_t v169 = v185[26];
  uint64_t v170 = v185[27];
  uint64_t v171 = (char *)v185[28];
  char v172 = v185[29];
  id v123 = v185[0];
  uint64_t v124 = v185[1];
  v200[0] = v185[0];
  v200[1] = v185[1];
  id v125 = v185[2];
  id v126 = v185[3];
  v200[2] = v185[2];
  v200[3] = v185[3];
  uint64_t v15 = &v191;
  uint64_t v128 = v185[4];
  uint64_t v129 = v185[5];
  v200[4] = v185[4];
  v200[5] = v185[5];
  uint64_t v130 = v185[6];
  uint64_t v131 = v185[7];
  v200[6] = v185[6];
  v200[7] = v185[7];
  uint64_t v134 = v185[8];
  unint64_t v135 = v185[9];
  v200[8] = v185[8];
  v200[9] = v185[9];
  unint64_t v138 = v185[10];
  uint64_t v139 = v185[11];
  v200[10] = v185[10];
  v200[11] = v185[11];
  LOBYTE(v200[12]) = v175;
  uint64_t v142 = v185[14];
  id v143 = v185[13];
  v200[13] = v185[13];
  v200[14] = v185[14];
  uint64_t v149 = v185[15];
  uint64_t v150 = v185[16];
  v200[15] = v185[15];
  v200[16] = v185[16];
  id v151 = v185[17];
  uint64_t v152 = v185[18];
  v200[17] = v185[17];
  v200[18] = v185[18];
  id v153 = v185[19];
  id v154 = v185[20];
  v200[19] = v185[19];
  v200[20] = v185[20];
  uint64_t v155 = v185[21];
  uint64_t v156 = v185[22];
  v200[21] = v185[21];
  v200[22] = v185[22];
  uint64_t v157 = v185[23];
  char v158 = v185[24];
  v200[23] = v185[23];
  v200[24] = v185[24];
  char v159 = LOBYTE(v185[25]);
  LOWORD(v200[25]) = v185[25];
  uint64_t v160 = BYTE1(v185[25]);
  v200[26] = v185[26];
  v200[27] = v185[27];
  v200[28] = v185[28];
  v200[29] = v185[29];
  uint64_t v32 = v185[31];
  id v127 = v185[30];
  v200[30] = v185[30];
  v200[31] = v185[31];
  uint64_t v33 = v185[32];
  v200[32] = v185[32];
  v200[33] = v185[33];
  uint64_t v132 = v185[33];
  uint64_t v133 = v185[34];
  v200[34] = v185[34];
  v200[35] = v185[35];
  unint64_t v136 = v185[35];
  uint64_t v137 = v185[36];
  v200[36] = v185[36];
  v200[37] = v185[37];
  uint64_t v140 = v185[37];
  id v141 = v185[38];
  v200[38] = v185[38];
  v200[39] = v185[39];
  id v144 = v185[39];
  uint64_t v145 = v185[40];
  uint64_t v146 = v185[41];
  v200[40] = v185[40];
  v200[41] = v185[41];
  uint64_t v147 = v185[42];
  char v148 = v185[43];
  v200[42] = v185[42];
  v200[43] = v185[43];
  outlined retain of Locale.Components(v185);
  outlined retain of ICUDateIntervalFormatter.Signature(v186);
  Locale.Components.icuIdentifier.getter();
  char isUniquelyReferenced_nonNull_native = v34;
  swift_bridgeObjectRetain();
  uint64_t v36 = specialized _copyCollectionToContiguousArray<A>(_:)(v162, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v37 = specialized _copyCollectionToContiguousArray<A>(_:)(v163, (unint64_t)v29);
  swift_bridgeObjectRelease();
  outlined release of ICUDateIntervalFormatter.Signature(v186);
  uint64_t v178 = 0;
  if (v37[2] >> 31)
  {
    __break(1u);
    goto LABEL_36;
  }

  if (v36[2] >> 31)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v162 = v32;
  id v163 = v33;
  String.utf8CString.getter();
  uint64_t v29 = (uint64_t *)udtitvfmt_open();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v31 = v164;
  uint64_t v46 = v165;
  if (!v29) {
    goto LABEL_23;
  }
  *(void *)(v164 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v29;
  udtitvfmt_setAttribute();
  LODWORD(v27) = v178;
  if (v178 > 0)
  {
    if (one-time initialization token for logger != -1) {
LABEL_101:
    }
      swift_once();
    unint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static ICUError.logger);
    uint64_t v48 = (os_log_s *)Logger.logObject.getter();
    uint64_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *((void *)v15 + 7) = v51;
      *(_DWORD *)uint64_t v50 = 136315394;
      v183[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD00000000000001ELL,  0x80000001839CE9F0LL,  v200);
      uint64_t v29 = &v183[1];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 12) = 2080;
      uint64_t v52 = ICUError.debugDescription.getter((UErrorCode)v27);
      v183[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v52, v53, v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_182EB1000, v48, v49, "%s. Error: %s", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186E20E60](v51, -1LL, -1LL);
      unint64_t v54 = v50;
      uint64_t v31 = v164;
      MEMORY[0x186E20E60](v54, -1LL, -1LL);
    }

    uint64_t v46 = v165;
  }

  unint64_t v55 = v124;
  *((void *)v15 + 7) = v123;
  *((void *)v15 + 8) = v55;
  char v56 = v126;
  *((void *)v15 + 9) = v125;
  *((void *)v15 + 10) = v56;
  unint64_t v57 = v129;
  *((void *)v15 + 11) = v128;
  *((void *)v15 + 12) = v57;
  BOOL v58 = v131;
  *((void *)v15 + 13) = v130;
  *((void *)v15 + 1os_unfair_lock_unlock(*v0 + 4) = v58;
  uint64_t v59 = v135;
  *((void *)v15 + 15) = v134;
  *((void *)v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v59;
  uint64_t v60 = v139;
  *((void *)v15 + 17) = v138;
  *((void *)v15 + 18) = v60;
  LOBYTE(v200[12]) = v175;
  unint64_t v61 = v142;
  *((void *)v15 + 20) = v143;
  *((void *)v15 + 21) = v61;
  char v62 = v150;
  *((void *)v15 + 22) = v149;
  *((void *)v15 + 23) = v62;
  *(_DWORD *)(v15 + 153) = v180;
  HIDWORD(v200[12]) = *(_DWORD *)((char *)&v180 + 3);
  id v63 = v152;
  *((void *)v15 + 2os_unfair_lock_unlock(*v0 + 4) = v151;
  *((void *)v15 + 25) = v63;
  int64_t v64 = v154;
  *((void *)v15 + 26) = v153;
  *((void *)v15 + 27) = v64;
  uint64_t v65 = v156;
  *((void *)v15 + 28) = v155;
  *((void *)v15 + 29) = v65;
  int64_t v66 = v158;
  *((void *)v15 + 30) = v157;
  *((void *)v15 + 31) = v66;
  LOBYTE(v200[25]) = v159;
  BYTE1(v200[25]) = v160;
  HIWORD(v200[25]) = v182;
  *(_DWORD *)((char *)&v200[25] + 2) = v181;
  v200[26] = v169;
  v200[27] = v170;
  v200[28] = (uint64_t)v171;
  v200[29] = v172;
  v200[30] = v127;
  v200[31] = v162;
  v200[32] = v163;
  v200[33] = v132;
  v200[34] = v133;
  v200[35] = v136;
  v200[36] = v137;
  v200[37] = v140;
  v200[38] = v141;
  v200[39] = v144;
  v200[40] = v145;
  v200[41] = v146;
  v200[42] = v147;
  v200[43] = v148;
  outlined release of Locale.Components(v200);
  while (1)
  {
    swift_retain();
    os_unfair_lock_lock(v173);
    uint64_t v15 = *(char **)&v46[4]._os_unfair_lock_opaque;
    memcpy(v200, v184, 0x188uLL);
    __int128 v67 = v168;
    if (v167 >= *((void *)v15 + 2)) {
      swift_bridgeObjectRetain();
    }
    else {
      *(void *)&v168->_os_unfair_lock_opaque = MEMORY[0x18961AFF0];
    }
    outlined retain of ICUDateIntervalFormatter.Signature(v200);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v180 = *(void *)&v67->_os_unfair_lock_opaque;
    __int128 v68 = v180;
    *(void *)&v67->_os_unfair_lock_opaque = 0x8000000000000000LL;
    uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)v200);
    __int128 v70 = *(void *)(v68 + 16);
    __int128 v71 = (v69 & 1) == 0;
    __int128 v72 = v70 + v71;
    if (!__OFADD__(v70, v71)) {
      break;
    }
LABEL_37:
    __break(1u);
    swift_once();
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static ICUError.logger);
    uint64_t v39 = (void *)Logger.logObject.getter();
    int v40 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v39, v40))
    {

      uint64_t v46 = v165;
      if (!v29) {
        goto LABEL_23;
      }
LABEL_22:
      udtitvfmt_close();
      goto LABEL_23;
    }

    uint64_t v41 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *((void *)v15 + 7) = v42;
    uint64_t v43 = v42;
    *(_DWORD *)uint64_t v41 = 136315394;
    v183[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000016LL,  0x80000001839C9570LL,  v200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v41 + 12) = 2080;
    uint64_t v44 = ICUError.debugDescription.getter(isUniquelyReferenced_nonNull_native);
    v183[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v44, v45, v200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_182EB1000, (os_log_t)v39, v40, "%s. Error: %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186E20E60](v43, -1LL, -1LL);
    MEMORY[0x186E20E60](v41, -1LL, -1LL);

    uint64_t v46 = v165;
    if (v29) {
      goto LABEL_22;
    }
LABEL_23:
    v200[0] = v123;
    v200[1] = v124;
    v200[2] = v125;
    v200[3] = v126;
    v200[4] = v128;
    v200[5] = v129;
    v200[6] = v130;
    v200[7] = v131;
    v200[8] = v134;
    v200[9] = v135;
    v200[10] = v138;
    v200[11] = v139;
    LOBYTE(v200[12]) = v175;
    v200[13] = v143;
    v200[14] = v142;
    *(_DWORD *)((char *)&v200[12] + 1) = v180;
    HIDWORD(v200[12]) = *(_DWORD *)((char *)&v180 + 3);
    v200[15] = v149;
    v200[16] = v150;
    v200[17] = v151;
    v200[18] = v152;
    v200[19] = v153;
    v200[20] = v154;
    v200[21] = v155;
    v200[22] = v156;
    v200[23] = v157;
    v200[24] = v158;
    LOBYTE(v200[25]) = v159;
    BYTE1(v200[25]) = v160;
    HIWORD(v200[25]) = v182;
    *(_DWORD *)((char *)&v200[25] + 2) = v181;
    v200[26] = v169;
    v200[27] = v170;
    v200[28] = (uint64_t)v171;
    v200[29] = v172;
    v200[30] = v127;
    v200[31] = v162;
    v200[32] = v163;
    v200[33] = v132;
    v200[34] = v133;
    v200[35] = v136;
    v200[36] = v137;
    v200[37] = v140;
    v200[38] = v141;
    v200[39] = v144;
    v200[40] = v145;
    v200[41] = v146;
    v200[42] = v147;
    v200[43] = v148;
    outlined release of Locale.Components(v200);
    swift_deallocPartialClassInstance();
    uint64_t v31 = 0LL;
  }

  uint64_t v73 = v69;
  if (*(void *)(v68 + 24) < v72)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v72, isUniquelyReferenced_nonNull_native);
    id v74 = v180;
    __int128 v75 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)v200);
    if ((v73 & 1) != (v76 & 1)) {
      goto LABEL_104;
    }
    uint64_t v27 = v75;
    if ((v73 & 1) == 0)
    {
LABEL_75:
      specialized _NativeDictionary._insert(at:key:value:)(v27, v200, v31, (void *)v74);
      outlined retain of ICUDateIntervalFormatter.Signature(v200);
LABEL_76:
      *(void *)&v46[4]._os_unfair_lock_opaque = v74;
      swift_bridgeObjectRelease();
      outlined release of ICUDateIntervalFormatter.Signature(v200);
      os_unfair_lock_unlock(v173);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1LL);
LABEL_77:
      outlined release of Locale.Components(v185);
      swift_release();
      swift_bridgeObjectRelease();
      id v95 = outlined release of ICUDateIntervalFormatter.Signature(v186);
      if (!v31) {
        goto LABEL_97;
      }
      uint64_t v29 = v122;
      MEMORY[0x1895F8858](v95);
      LODWORD(v184[0]) = 0;
      uint64_t isStackAllocationSafe = udtitvfmt_format();
      if (LODWORD(v184[0]) == 15)
      {
        int v97 = isStackAllocationSafe + 1;
        if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
        {
          __break(1u);
LABEL_100:
          __break(1u);
          goto LABEL_101;
        }

        if (v97 < 0) {
          goto LABEL_100;
        }
        if (v97 < 513
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1895F8858](isStackAllocationSafe);
          uint64_t v99 = &v121[-v98];
          LODWORD(v183[0]) = 0;
          id v100 = udtitvfmt_format();
          if (SLODWORD(v183[0]) <= 0 && v100 >= 1)
          {
            id v101 = specialized String.init(_utf16:)((uint64_t)v99, v100);
            uint64_t v103 = v102;
            goto LABEL_89;
          }

void specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3 = a3[5];
  v8[25] = a3[4];
  v8[26] = v3;
  v9[0] = a3[6];
  *(_OWORD *)((char *)v9 + 10) = *(__int128 *)((char *)a3 + 106);
  __int128 v4 = a3[1];
  v8[21] = *a3;
  v8[22] = v4;
  __int128 v5 = a3[3];
  v8[23] = a3[2];
  v8[24] = v5;
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a3, v7);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v8);
  uint64_t v6 = (char *)sub_1832D97D0
     + 4
     * algn_183814C97[_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v8)];
  __asm { BR              X10 }

uint64_t sub_1832D97D0()
{
  uint64_t v5 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)&v40);
  __int128 v25 = *(_OWORD *)(v5 + 16);
  __int128 v26 = *(_OWORD *)v5;
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v24 = *(void *)(v5 + 32);
  __int16 v7 = *(_WORD *)(v5 + 48);
  uint64_t v8 = *(void *)(v5 + 56);
  char v9 = *(_BYTE *)(v5 + 64);
  v4[33] = *(_OWORD *)(v5 + 65);
  *(void *)(v3 + 15) = *(void *)(v5 + 80);
  char v23 = *(_BYTE *)(v5 + 120);
  char v10 = *(_BYTE *)(v5 + 121) & 1;
  *(_OWORD *)(v3 + 6os_unfair_lock_unlock(*v0 + 4) = *(_OWORD *)(v3 + 7);
  __int128 v21 = *(_OWORD *)(v5 + 104);
  __int128 v22 = *(_OWORD *)(v5 + 88);
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( v2,  outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  swift_unknownObjectRetain();
  outlined release of Locale((uint64_t)&v41);
  v27[0] = v26;
  v27[1] = v25;
  uint64_t v28 = v24;
  uint64_t v29 = v6;
  __int16 v30 = v7;
  uint64_t v31 = v8;
  char v32 = v9 & 1;
  uint64_t v33 = v1;
  uint64_t v34 = v0;
  __int128 v35 = v22;
  __int128 v36 = v21;
  char v37 = v23;
  char v38 = v10;
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)v27);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v27, &v39);
  __int128 v11 = v4[4];
  __int128 v12 = v4[5];
  v4[12] = v11;
  v4[13] = v12;
  __int128 v13 = v4[6];
  v4[14] = v13;
  __int128 v14 = *(__int128 *)((char *)v4 + 106);
  *(__int128 *)((char *)v4 + 23os_unfair_lock_unlock(*v0 + 4) = v14;
  __int128 v15 = *v4;
  __int128 v16 = v4[1];
  v4[8] = *v4;
  v4[9] = v16;
  __int128 v17 = v4[2];
  __int128 v18 = v4[3];
  v4[10] = v17;
  v4[11] = v18;
  *(_OWORD *)(v3 + 186) = v14;
  *(_OWORD *)(v3 + 160) = v12;
  *(_OWORD *)(v3 + 176) = v13;
  *(_OWORD *)(v3 + 128) = v18;
  *(_OWORD *)(v3 + 14os_unfair_lock_unlock(*v0 + 4) = v11;
  *(_OWORD *)(v3 + 96) = v16;
  *(_OWORD *)(v3 + 112) = v17;
  *(_OWORD *)(v3 + 80) = v15;
  Swift::String v19 = String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.format(_:)((Foundation::Date)v11);
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)&v42,  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  Swift::String v39 = v19;
  return String.init<A>(_:)();
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle?);
  MEMORY[0x1895F8858](v10);
  __int128 v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  __int128 v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of Any(a1 + 64, (uint64_t)v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
  int v17 = swift_dynamicCast();
  __int128 v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v17)
  {
    v18(v12, 0LL, 1LL, v13);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v12,  (uint64_t)v16,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
    char v19 = specialized static String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.== infix(_:_:)( a2,  (uint64_t)v16);
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v16,  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
    char v20 = 0;
    if ((v19 & 1) == 0) {
      return v20 & 1;
    }
  }

  else
  {
    v18(v12, 1LL, 1LL, v13);
    outlined destroy of Any?( (uint64_t)v12,  &demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle?);
  }

  type metadata accessor for NSDecimal(0LL);
  uint64_t v29 = v21;
  v27[0] = a3;
  v27[1] = a4;
  int v28 = a5;
  uint64_t v22 = *(void *)(a1 + 56);
  char v23 = __swift_project_boxed_opaque_existential_1((void *)(a1 + 32), v22);
  void v26[3] = v22;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v26);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v22 - 8) + 16LL))( boxed_opaque_existential_1,  v23,  v22);
  char v20 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)( (uint64_t)v27,  (uint64_t)v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return v20 & 1;
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  __int128 v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of Any(a1 + 64, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
  int v13 = swift_dynamicCast();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v13)
  {
    v14(v8, 0LL, 1LL, v9);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v8,  (uint64_t)v12,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
    char v15 = specialized static String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.== infix(_:_:)( a2,  (uint64_t)v12);
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v12,  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
    char v16 = 0;
    if ((v15 & 1) == 0) {
      return v16 & 1;
    }
  }

  else
  {
    v14(v8, 1LL, 1LL, v9);
    outlined destroy of Any?( (uint64_t)v8,  &demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle?);
  }

  v23[3] = MEMORY[0x189618560];
  *(double *)char v23 = a3;
  int v17 = (void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 56);
  char v19 = __swift_project_boxed_opaque_existential_1(v17, v18);
  size_t v22[3] = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v18 - 8) + 16LL))( boxed_opaque_existential_1,  v19,  v18);
  char v16 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)( (uint64_t)v23,  (uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v16 & 1;
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  __int128 v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of Any(a1 + 64, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
  int v13 = swift_dynamicCast();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v13)
  {
    v14(v8, 0LL, 1LL, v9);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v8,  (uint64_t)v12,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
    char v15 = specialized static String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.== infix(_:_:)( a2,  (uint64_t)v12);
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v12,  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
    char v16 = 0;
    if ((v15 & 1) == 0) {
      return v16 & 1;
    }
  }

  else
  {
    v14(v8, 1LL, 1LL, v9);
    outlined destroy of Any?( (uint64_t)v8,  &demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle?);
  }

  v23[3] = MEMORY[0x189618740];
  v23[0] = a3;
  int v17 = (void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 56);
  char v19 = __swift_project_boxed_opaque_existential_1(v17, v18);
  size_t v22[3] = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v18 - 8) + 16LL))( boxed_opaque_existential_1,  v19,  v18);
  char v16 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)( (uint64_t)v23,  (uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v16 & 1;
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( uint64_t a1, uint64_t a2, double a3, double a4)
{
  __int128 v7 = *(_OWORD *)(a2 + 80);
  v46[4] = *(_OWORD *)(a2 + 64);
  v46[5] = v7;
  __int16 v47 = *(_WORD *)(a2 + 96);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  v46[0] = *(_OWORD *)a2;
  v46[1] = v8;
  __int128 v9 = *(_OWORD *)(a2 + 48);
  v46[2] = *(_OWORD *)(a2 + 32);
  v46[3] = v9;
  outlined init with copy of Any(a1 + 64, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
  if (!(void)v17) {
    goto LABEL_4;
  }
  __int128 v32 = v17;
  uint64_t v33 = v18;
  uint64_t v34 = v19;
  uint64_t v35 = v20;
  uint64_t v36 = v21;
  char v37 = v22;
  uint64_t v38 = v23;
  int v39 = v24;
  uint64_t v40 = v25;
  __int16 v41 = v26 & 0x1FF;
  int v42 = v27;
  __int16 v43 = v28;
  uint64_t v44 = v29;
  __int16 v45 = v30;
  BOOL v10 = specialized static Date.IntervalFormatStyle.== infix(_:_:)(v46, &v32);
  outlined consume of Date.IntervalFormatStyle?(v17);
  if (!v10)
  {
    char v15 = 0;
  }

  else
  {
LABEL_4:
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
    *(double *)&__int128 v32 = a3;
    *((double *)&v32 + 1) = a4;
    uint64_t v11 = (void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 56);
    int v13 = __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v19 = v12;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v12 - 8) + 16LL))( boxed_opaque_existential_1,  v13,  v12);
    char v15 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)( (uint64_t)&v32,  (uint64_t)&v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
  }

  return v15 & 1;
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)( uint64_t a1, __int128 *a2, double a3)
{
  if (_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleVSgWOg((uint64_t)v19) == 1
    || (outlined init with take of LocalePreferences?( (uint64_t)v18,  (uint64_t)v17,  (uint64_t *)&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle?),  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a2, v22),  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v22, v16),  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v17, v15),  specialized static String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.== infix(_:_:)( v16,  v15),  char v8 = v7,  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v18,  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle?),  (v8 & 1) != 0))
  {
LABEL_4:
    v20[3] = &type metadata for Date;
    *(double *)uint64_t v20 = a3;
    __int128 v9 = (void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = __swift_project_boxed_opaque_existential_1(v9, v10);
    v19[3] = v10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v10 - 8) + 16LL))( boxed_opaque_existential_1,  v11,  v10);
    char v13 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)( (uint64_t)v20,  (uint64_t)v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }

  else
  {
    char v13 = 0;
  }

  return v13 & 1;
}

BOOL static String.LocalizationValue.Placeholder.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void specialized String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(void *)(v1 + 2os_unfair_lock_unlock(*v0 + 4) = 0LL;
  *(_BYTE *)(v1 + 32) = -2;
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v0, (uint64_t)v2);
  __asm { BR              X10 }

uint64_t sub_1832DA48C()
{
  return swift_release();
}

void sub_1832DB004()
{
}

uint64_t AttributedString.init<A>(localized:including:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[9];
  uint64_t v19 = *a1;
  __int128 v20 = *(_OWORD *)(a1 + 1);
  uint64_t v21 = v6;
  uint64_t v22 = v7;
  __int128 v9 = *(_OWORD *)(a1 + 7);
  __int128 v23 = *(_OWORD *)(a1 + 5);
  __int128 v24 = v9;
  uint64_t v25 = v8;
  __int128 v10 = *((_OWORD *)a1 + 6);
  __int128 v26 = *((_OWORD *)a1 + 5);
  __int128 v27 = v10;
  __int128 v12 = 0uLL;
  __int16 v13 = 1;
  uint64_t v14 = 0LL;
  __int16 v15 = 256;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  char v18 = 0;
  uint64_t result = AttributedString.init<A>(localized:options:including:)((__int128 *)&v19, &v12, a2, a3, a4, &v28);
  *a5 = v28;
  return result;
}

void *String.init(localized:)(uint64_t *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[9];
  uint64_t v11 = *a1;
  __int128 v12 = *(_OWORD *)(a1 + 1);
  uint64_t v13 = v1;
  uint64_t v14 = v2;
  __int128 v15 = *(_OWORD *)(a1 + 5);
  __int128 v16 = *(_OWORD *)(a1 + 7);
  uint64_t v17 = v3;
  __int128 v4 = *((_OWORD *)a1 + 6);
  __int128 v18 = *((_OWORD *)a1 + 5);
  __int128 v19 = v4;
  __int128 v6 = 0uLL;
  __int16 v7 = 256;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v10 = 0;
  return specialized String.init(localized:options:)((__int128 *)&v11, &v6);
}

uint64_t *specialized PropertyListEncoder._encodeBPlist<A>(_:)(_OWORD *a1)
{
  __int128 v4 = specialized PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:)(a1);
  if (!v2)
  {
    uint64_t v5 = (uint64_t)v4;
    unsigned int v6 = *((unsigned __int8 *)v4 + 40);
    uint64_t v7 = *((void *)v4 + 2);
    unint64_t v8 = *((void *)v4 + 3);
    uint64_t v9 = *((void *)v4 + 4);
    switch(v6 >> 4)
    {
      case 0u:
        goto LABEL_18;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
        uint64_t v10 = type metadata accessor for EncodingError();
        swift_allocError();
        __int128 v12 = v11;
        uint64_t v59 = (char *)v11
        __int128 v12[3] = &type metadata for LocalizedStringResource;
        uint64_t v13 = (_OWORD *)swift_allocObject();
        *__int128 v12 = v13;
        __int128 v14 = a1[1];
        v13[1] = *a1;
        _OWORD v13[2] = v14;
        __int128 v15 = a1[3];
        uint64_t v13[3] = a1[2];
        void v13[4] = v15;
        __int128 v16 = a1[5];
        v13[5] = a1[4];
        void v13[6] = v16;
        v13[7] = a1[6];
        uint64_t v54 = 0LL;
        unint64_t v55 = 0xE000000000000000LL;
        outlined retain of LocalizedStringResource((uint64_t)a1);
        outlined copy of _BPlistEncodingFormat.Reference.Backing(v7, v8, v9, v6);
        _StringGuts.grow(_:)(54LL);
        v17._uint64_t countAndFlagsBits = 0x6576656C2D706F54LL;
        v17._unint64_t object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v17);
        v18._unint64_t object = (void *)0x80000001838158E0LL;
        v18._uint64_t countAndFlagsBits = 0xD000000000000017LL;
        String.append(_:)(v18);
        unint64_t v19 = 0xD00000000000002ALL;
        __int128 v20 = " encoded as number property list fragment.";
        goto LABEL_4;
      case 7u:
        uint64_t v22 = type metadata accessor for EncodingError();
        swift_allocError();
        __int128 v24 = v23;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
        v24[3] = &type metadata for LocalizedStringResource;
        uint64_t v25 = (_OWORD *)swift_allocObject();
        void *v24 = v25;
        __int128 v26 = a1[1];
        v25[1] = *a1;
        void v25[2] = v26;
        __int128 v27 = a1[3];
        v25[3] = a1[2];
        void v25[4] = v27;
        __int128 v28 = a1[5];
        v25[5] = a1[4];
        v25[6] = v28;
        v25[7] = a1[6];
        uint64_t v54 = 0LL;
        unint64_t v55 = 0xE000000000000000LL;
        outlined retain of LocalizedStringResource((uint64_t)a1);
        _StringGuts.grow(_:)(52LL);
        v29._uint64_t countAndFlagsBits = 0x6576656C2D706F54LL;
        v29._unint64_t object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v29);
        v30._unint64_t object = (void *)0x80000001838158E0LL;
        v30._uint64_t countAndFlagsBits = 0xD000000000000017LL;
        String.append(_:)(v30);
        unint64_t v31 = 0xD000000000000028LL;
        __int128 v32 = " encoded as date property list fragment.";
        goto LABEL_19;
      case 9u:
        unint64_t v33 = v9 | v8;
        if (!(v9 | v8 | v7) && v6 == 144
          || (v6 == 144 ? (BOOL v34 = v7 == 1) : (BOOL v34 = 0), v34 ? (v35 = v33 == 0) : (v35 = 0), v35))
        {
          uint64_t v10 = type metadata accessor for EncodingError();
          swift_allocError();
          __int128 v12 = v47;
          uint64_t v59 = (char *)v47
          __int128 v12[3] = &type metadata for LocalizedStringResource;
          uint64_t v48 = (_OWORD *)swift_allocObject();
          *__int128 v12 = v48;
          __int128 v49 = a1[1];
          v48[1] = *a1;
          v48[2] = v49;
          __int128 v50 = a1[3];
          v48[3] = a1[2];
          v48[4] = v50;
          __int128 v51 = a1[5];
          v48[5] = a1[4];
          v48[6] = v51;
          v48[7] = a1[6];
          uint64_t v54 = 0LL;
          unint64_t v55 = 0xE000000000000000LL;
          outlined retain of LocalizedStringResource((uint64_t)a1);
          outlined copy of _BPlistEncodingFormat.Reference.Backing(v7, v8, v9, v6);
          _StringGuts.grow(_:)(55LL);
          v52._uint64_t countAndFlagsBits = 0x6576656C2D706F54LL;
          v52._unint64_t object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v52);
          v53._unint64_t object = (void *)0x80000001838158E0LL;
          v53._uint64_t countAndFlagsBits = 0xD000000000000017LL;
          String.append(_:)(v53);
          unint64_t v19 = 0xD00000000000002BLL;
          __int128 v20 = " encoded as BOOLean property list fragment.";
LABEL_4:
          unint64_t v21 = (unint64_t)(v20 - 32) | 0x8000000000000000LL;
          uint64_t v1 = &v54;
          String.append(_:)(*(Swift::String *)&v19);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(void *, void, uint64_t))(*(void *)(v10 - 8) + 104LL))( v12,  *MEMORY[0x1896193B8],  v10);
          goto LABEL_20;
        }

        if (v6 == 144 && v7 == 2 && !v33)
        {
LABEL_18:
          uint64_t v22 = type metadata accessor for EncodingError();
          swift_allocError();
          __int128 v24 = v36;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
          v24[3] = &type metadata for LocalizedStringResource;
          char v37 = (_OWORD *)swift_allocObject();
          void *v24 = v37;
          __int128 v38 = a1[1];
          v37[1] = *a1;
          v37[2] = v38;
          __int128 v39 = a1[3];
          v37[3] = a1[2];
          v37[4] = v39;
          __int128 v40 = a1[5];
          v37[5] = a1[4];
          v37[6] = v40;
          v37[7] = a1[6];
          uint64_t v54 = 0LL;
          unint64_t v55 = 0xE000000000000000LL;
          outlined retain of LocalizedStringResource((uint64_t)a1);
          _StringGuts.grow(_:)(54LL);
          v41._uint64_t countAndFlagsBits = 0x6576656C2D706F54LL;
          v41._unint64_t object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v41);
          v42._unint64_t object = (void *)0x80000001838158E0LL;
          v42._uint64_t countAndFlagsBits = 0xD000000000000017LL;
          String.append(_:)(v42);
          unint64_t v31 = 0xD00000000000002ALL;
          __int128 v32 = " encoded as string property list fragment.";
LABEL_19:
          unint64_t v43 = (unint64_t)(v32 - 32) | 0x8000000000000000LL;
          uint64_t v1 = &v54;
          String.append(_:)(*(Swift::String *)&v31);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(void *, void, uint64_t))(*(void *)(v22 - 8) + 104LL))( v24,  *MEMORY[0x1896193B8],  v22);
LABEL_20:
          swift_willThrow();
          swift_release();
          return v1;
        }

_OWORD *specialized PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:)(_OWORD *a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  type metadata accessor for __PlistEncoderBPlist();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = MEMORY[0x18961AFE8];
  *(void *)(v6 + 2os_unfair_lock_unlock(*v0 + 4) = v5;
  *(void *)(v6 + 32) = v4;
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_OWORD *)(v6 + 40) = xmmword_18372C9E0;
  specialized _BPlistEncodingFormat.init()((uint64_t *)v24);
  __int128 v8 = v24[1];
  *(_OWORD *)(v6 + 56) = v24[0];
  *(_OWORD *)(v6 + 72) = v8;
  *(void *)(v6 + 88) = v25;
  __int128 v9 = a1[5];
  void v23[4] = a1[4];
  v23[5] = v9;
  v23[6] = a1[6];
  __int128 v10 = a1[1];
  v23[0] = *a1;
  v23[1] = v10;
  __int128 v11 = a1[3];
  v23[2] = a1[2];
  v23[3] = v11;
  void v22[2] = v23;
  swift_bridgeObjectRetain();
  __int128 v12 = (_OWORD *)v6;
  uint64_t v13 = specialized __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)( (void (*)(void *))partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:),  (uint64_t)v22,  0x8000000000000000LL,  0LL,  0LL,  0LL,  255);
  if (!v2)
  {
    __int128 v12 = (_OWORD *)v13;
    if (!v13)
    {
      uint64_t v15 = type metadata accessor for EncodingError();
      swift_allocError();
      Swift::String v17 = v16;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
      uint64_t v17[3] = &type metadata for LocalizedStringResource;
      Swift::String v18 = (_OWORD *)swift_allocObject();
      *Swift::String v17 = v18;
      __int128 v19 = a1[1];
      v18[1] = *a1;
      _OWORD v18[2] = v19;
      __int128 v20 = a1[3];
      v18[3] = a1[2];
      uint64_t v18[4] = v20;
      __int128 v21 = a1[5];
      v18[5] = a1[4];
      v18[6] = v21;
      v18[7] = a1[6];
      *(void *)&v23[0] = 0LL;
      *((void *)&v23[0] + 1) = 0xE000000000000000LL;
      outlined retain of LocalizedStringResource((uint64_t)a1);
      __int128 v12 = v23;
      _StringGuts.grow(_:)(39LL);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x1896193B8],  v15);
      swift_willThrow();
    }
  }

  swift_release();
  return v12;
}

uint64_t specialized NSCoder.decodeObject<A>(of:forKey:)(uint64_t a1, uint64_t a2)
{
  return specialized NSCoder.decodeObject<A>(of:forKey:)( a1,  a2,  (unint64_t *)&lazy cache variable for type metadata for NSString);
}

{
  return specialized NSCoder.decodeObject<A>(of:forKey:)(a1, a2, &lazy cache variable for type metadata for NSLocale);
}

{
  return specialized NSCoder.decodeObject<A>(of:forKey:)( a1,  a2,  (unint64_t *)&lazy cache variable for type metadata for NSTimeZone);
}

{
  return specialized NSCoder.decodeObject<A>(of:forKey:)(a1, a2, &lazy cache variable for type metadata for NSDate);
}

uint64_t specialized NSCoder.decodeObject<A>(of:forKey:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
  uint64_t v5 = String._bridgeToObjectiveCImpl()();
  id v6 = (id)__NSCoderDecodeObjectOfClassForKey(v3, ObjCClassFromMetadata, v5, 0LL);
  swift_unknownObjectRelease();
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
  }

  outlined init with take of LocalePreferences?( (uint64_t)&v9,  (uint64_t)v11,  &demangling cache variable for type metadata for Any?);
  outlined init with take of LocalePreferences?( (uint64_t)v11,  (uint64_t)&v9,  &demangling cache variable for type metadata for Any?);
  if (*((void *)&v10 + 1))
  {
    else {
      return 0LL;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v9, &demangling cache variable for type metadata for Any?);
    return 0LL;
  }

uint64_t specialized AttributedString.subscript.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = *(void **)v1;
    __int128 v5 = *(_OWORD *)(*(void *)v1 + 16LL);
    __int128 v6 = *(_OWORD *)(*(void *)v1 + 48LL);
    v37[1] = *(_OWORD *)(*(void *)v1 + 32LL);
    v37[2] = v6;
    v37[0] = v5;
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v37);
    swift_unknownObjectRetain();
    *(void *)uint64_t v2 = AttributedString.Guts.init(string:runs:)(v37, v7, v8, v9, v10);
    swift_release();
  }

  if (a1)
  {
    __int128 v11 = *(_OWORD **)v2;
    __int128 v12 = v11[2];
    __int128 v34 = v11[1];
    __int128 v35 = v12;
    __int128 v36 = v11[3];
    *(void *)&__int128 v29 = BigString.startIndex.getter();
    *((void *)&v29 + 1) = v13;
    *(void *)&__int128 v30 = v14;
    *((void *)&v30 + 1) = v15;
    *(void *)&__int128 v31 = BigString.endIndex.getter();
    *((void *)&v31 + 1) = v16;
    uint64_t v32 = v17;
    uint64_t v33 = v18;
    uint64_t v19 = swift_retain();
    specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(v19);
    return swift_release_n();
  }

  else
  {
    __int128 v21 = *(_OWORD **)v2;
    __int128 v22 = *(_OWORD *)(*(void *)v2 + 32LL);
    __int128 v29 = *(_OWORD *)(*(void *)v2 + 16LL);
    __int128 v30 = v22;
    __int128 v31 = v21[3];
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    BigString.unicodeScalars.getter();
    unint64_t v23 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)&v27);
    __int128 v24 = v21[2];
    __int128 v34 = v21[1];
    __int128 v35 = v24;
    __int128 v36 = v21[3];
    BigString.unicodeScalars.getter();
    unint64_t v25 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v28);
    __int128 v26 = (void *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v26, v23 >> 11, (void *)(v25 >> 11));
    return swift_release();
  }

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  void *v28;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[48];
  void v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _BYTE v62[112];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD v79[3];
  _OWORD v80[4];
  uint64_t v2 = v1;
  outlined init with take of LocalePreferences?( a1,  (uint64_t)v55,  (uint64_t *)&demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition?);
  uint64_t v4 = v55[0];
  __int128 v5 = v55[1];
  Swift::String v52 = v55[3];
  Swift::String v53 = v55[2];
  __int128 v50 = v55[5];
  __int128 v51 = v55[4];
  __int128 v6 = v56;
  uint64_t v48 = v55[7];
  __int128 v49 = v55[6];
  uint64_t v7 = v57;
  uint64_t v8 = v58;
  uint64_t v9 = v59;
  uint64_t v10 = v60;
  __int128 v11 = v61;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v12 = *(void **)v2;
    uint64_t v13 = *(_OWORD *)(*(void *)v2 + 16LL);
    uint64_t v14 = *(_OWORD *)(*(void *)v2 + 48LL);
    v80[1] = *(_OWORD *)(*(void *)v2 + 32LL);
    _OWORD v80[2] = v14;
    v80[0] = v13;
    uint64_t v46 = v10;
    __int16 v47 = v7;
    uint64_t v44 = v9;
    uint64_t v45 = v8;
    uint64_t v15 = v12[8];
    uint64_t v16 = v12[9];
    uint64_t v17 = v12[10];
    uint64_t v18 = v12[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v80);
    swift_unknownObjectRetain();
    uint64_t v19 = v16;
    __int128 v20 = v17;
    uint64_t v9 = v44;
    uint64_t v8 = v45;
    __int128 v21 = v18;
    uint64_t v10 = v46;
    __int128 v22 = AttributedString.Guts.init(string:runs:)(v80, v15, v19, v20, v21);
    uint64_t v7 = v47;
    *(void *)uint64_t v2 = v22;
    swift_release();
  }

  outlined init with take of LocalePreferences?( a1,  (uint64_t)v62,  (uint64_t *)&demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition?);
  if ((v62[105] & 1) != 0)
  {
    unint64_t v23 = *(_OWORD **)v2;
    __int128 v24 = v23[2];
    id v63 = v23[1];
    int64_t v64 = v24;
    uint64_t v65 = v23[3];
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    BigString.unicodeScalars.getter();
    unint64_t v25 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v54);
    __int128 v26 = v23[2];
    id v74 = v23[1];
    __int128 v75 = v26;
    __int128 v76 = v23[3];
    BigString.unicodeScalars.getter();
    uint64_t v27 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v79);
    __int128 v28 = (void *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v28, v25 >> 11, (void *)(v27 >> 11));
    return swift_release();
  }

  else
  {
    *(void *)&id v63 = v4;
    *((void *)&v63 + 1) = v5;
    *(void *)&int64_t v64 = v53;
    *((void *)&v64 + 1) = v52;
    *(void *)&uint64_t v65 = v51;
    *((void *)&v65 + 1) = v50;
    int64_t v66 = v49;
    __int128 v67 = v48;
    __int128 v68 = v6 & 1;
    uint64_t v69 = v7;
    __int128 v70 = v8;
    __int128 v71 = v9;
    __int128 v72 = v10;
    uint64_t v73 = v11 & 1;
    __int128 v30 = *(_OWORD **)v2;
    __int128 v31 = v30[1];
    uint64_t v32 = v30[3];
    v79[1] = v30[2];
    v79[2] = v32;
    v79[0] = v31;
    uint64_t v33 = BigString.startIndex.getter();
    __int128 v35 = v34;
    char v37 = v36;
    __int128 v39 = v38;
    __int128 v40 = BigString.endIndex.getter();
    *(void *)&id v74 = v33;
    *((void *)&v74 + 1) = v35;
    *(void *)&__int128 v75 = v37;
    *((void *)&v75 + 1) = v39;
    *(void *)&__int128 v76 = v40;
    *((void *)&v76 + 1) = v41;
    __int128 v77 = v42;
    id v78 = v43;
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(&v63);
  }

uint64_t specialized AttributedString.subscript.setter(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v6 = (void *)*v2;
    __int128 v7 = *(_OWORD *)(*v2 + 16);
    __int128 v8 = *(_OWORD *)(*v2 + 48);
    v37[1] = *(_OWORD *)(*v2 + 32);
    v37[2] = v8;
    v37[0] = v7;
    uint64_t v9 = v6[8];
    uint64_t v10 = v6[9];
    uint64_t v11 = v6[10];
    uint64_t v12 = v6[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v37);
    swift_unknownObjectRetain();
    *uint64_t v3 = AttributedString.Guts.init(string:runs:)(v37, v9, v10, v11, v12);
    swift_release();
  }

  uint64_t v13 = (_OWORD *)*v3;
  uint64_t v14 = v13 + 1;
  __int128 v15 = v13[2];
  if ((a2 & 1) != 0)
  {
    __int128 v29 = *v14;
    __int128 v30 = v15;
    __int128 v31 = v13[3];
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    BigString.unicodeScalars.getter();
    unint64_t v23 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v27);
    __int128 v24 = v13[2];
    __int128 v34 = *v14;
    __int128 v35 = v24;
    __int128 v36 = v13[3];
    BigString.unicodeScalars.getter();
    unint64_t v25 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v28);
    __int128 v26 = (void *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v26, v23 >> 11, v25 >> 11);
    return swift_release();
  }

  else
  {
    __int128 v34 = *v14;
    __int128 v35 = v15;
    __int128 v36 = v13[3];
    *(void *)&__int128 v29 = BigString.startIndex.getter();
    *((void *)&v29 + 1) = v16;
    *(void *)&__int128 v30 = v17;
    *((void *)&v30 + 1) = v18;
    *(void *)&__int128 v31 = BigString.endIndex.getter();
    *((void *)&v31 + 1) = v19;
    uint64_t v32 = v20;
    uint64_t v33 = v21;
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(a1);
  }

uint64_t specialized AttributedString.subscript.setter(char a1)
{
  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = (void *)*v1;
    __int128 v5 = *(_OWORD *)(*v1 + 16);
    __int128 v6 = *(_OWORD *)(*v1 + 48);
    v27[1] = *(_OWORD *)(*v1 + 32);
    void v27[2] = v6;
    v27[0] = v5;
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v27);
    swift_unknownObjectRetain();
    *uint64_t v2 = AttributedString.Guts.init(string:runs:)(v27, v7, v8, v9, v10);
    swift_release();
  }

  uint64_t v11 = (_OWORD *)*v2;
  uint64_t v12 = v11 + 1;
  __int128 v13 = v11[2];
  if (a1 == 8)
  {
    __int128 v21 = *v12;
    __int128 v22 = v13;
    __int128 v23 = v11[3];
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    BigString.unicodeScalars.getter();
    unint64_t v14 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v19);
    __int128 v15 = v11[2];
    __int128 v24 = *v12;
    __int128 v25 = v15;
    __int128 v26 = v11[3];
    BigString.unicodeScalars.getter();
    unint64_t v16 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v20);
    uint64_t v17 = (void *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v17, v14 >> 11, v16 >> 11);
    return swift_release();
  }

  else
  {
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(a1);
  }

unint64_t specialized BufferView.subscript.getter(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 + a3 < result)
  {
    __break(1u);
    goto LABEL_6;
  }

  if ((uint64_t)(result - a2) < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if ((uint64_t)(a2 + a3 - result) < 0) {
LABEL_7:
  }
    __break(1u);
  return result;
}

void specialized PropertyListDecoder.decode<A>(_:from:format:)(uint64_t a1, uint64_t a2)
{
}

uint64_t specialized closure #1 in PropertyListDecoder.decode<A>(_:from:format:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  uint64_t v3 = *(uint64_t (**)(ValueMetadata *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v2 + 8);
  unint64_t v4 = lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource();
  return v3(&type metadata for LocalizedStringResource, &type metadata for LocalizedStringResource, v4, v1, v2);
}

void specialized closure #1 in PropertyListDecoder._decode<A>(_:from:format:)( _DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t *__return_ptr, void *)@<X3>, void *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11 = specialized static BPlistScanner.scanBinaryPropertyList(from:)(a1, a2);
  if (!v6)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(a3 + 16);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_BPlistDecodingFormat>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    v48[3] = v14;
    v48[4] = &protocol witness table for _PlistDecoder<A>;
    v48[0] = specialized _PlistDecoder.init(referencing:options:codingPathNode:)(v12, v13, 0x8000000000000000LL);
    swift_retain();
    a4(&v49, v48);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    swift_retain();
    specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(isUniquelyReferenced_nonNull_native);
    swift_release_n();
    *a5 = 200LL;
    uint64_t v43 = v51;
    uint64_t v44 = v52;
    uint64_t v45 = v55;
    *(void *)a6 = v49;
    *(_OWORD *)(a6 + 8) = v50;
    *(void *)(a6 + 2os_unfair_lock_unlock(*v0 + 4) = v43;
    *(void *)(a6 + 32) = v44;
    *(_OWORD *)(a6 + 40) = v53;
    *(_OWORD *)(a6 + 56) = v54;
    *(void *)(a6 + 72) = v45;
    __int128 v46 = v57;
    *(_OWORD *)(a6 + 80) = v56;
    *(_OWORD *)(a6 + 96) = v46;
    return;
  }

  id v58 = v6;
  id v15 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);

  uint64_t v17 = v48[0];
  unint64_t v16 = (void *)v48[1];
  uint64_t v18 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v47 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 40) = v21;
  uint64_t v22 = BPlistError.debugDescription.getter(v17, v16);
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 48) = v22;
  *(void *)(inited + 56) = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  __int128 v24 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?( inited + 32,  (uint64_t)&v49,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
  uint64_t v25 = v49;
  uint64_t v26 = v50;
  swift_retain();
  unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26);
  if ((v28 & 1) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  v24[(v27 >> 6) + 8] |= 1LL << v27;
  __int128 v29 = (uint64_t *)(v24[6] + 16 * v27);
  *__int128 v29 = v25;
  v29[1] = v26;
  outlined init with take of Any((__int128 *)((char *)&v50 + 8), (_OWORD *)(v24[7] + 32 * v27));
  uint64_t v30 = v24[2];
  BOOL v31 = __OFADD__(v30, 1LL);
  uint64_t v32 = v30 + 1;
  if (v31)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  _OWORD v24[2] = v32;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v33 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v34 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v35 = objc_msgSend(v33, sel_initWithDomain_code_userInfo_, v34, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v36 = objc_msgSend(v35, sel_domain);
  id v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  uint64_t v39 = v38;

  if (v37 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v39 == v40)
  {
    swift_bridgeObjectRelease_n();
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v17, (unint64_t)v16);
LABEL_10:
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 104LL))( v47,  *MEMORY[0x189619360],  v18);
    swift_willThrow();
LABEL_11:

    return;
  }

  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v17, (unint64_t)v16);
  if ((v41 & 1) != 0) {
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
}

void specialized closure #2 in PropertyListDecoder._decode<A>(_:from:format:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t *__return_ptr, void *)@<X3>, void *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v28 = a1;
  *(void *)&__int128 v29 = a2;
  *((void *)&v29 + 1) = a1;
  uint64_t v30 = a1;
  uint64_t v31 = a1 + a2;
  __int128 v32 = MEMORY[0x18961AFE8];
  XMLPlistScanner.scanXMLPropertyList()();
  if (v6)
  {
    swift_bridgeObjectRelease();
    id v37 = v6;
    id v15 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {

      uint64_t v16 = v27;
      type metadata accessor for DecodingError();
      swift_allocError();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(inited + 40) = v18;
      __asm { BR              X11 }
    }
  }

  else
  {
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(a3 + 16);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_XMLPlistDecodingFormat>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    specialized _PlistDecoder.init(referencing:options:codingPathNode:)(v12, v13, 0x8000000000000000LL);
    uint64_t v20 = v19;
    swift_release();
    void v26[3] = v14;
    unint64_t v27 = &protocol witness table for _PlistDecoder<A>;
    v26[0] = v20;
    swift_retain();
    a4(&v28, v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    swift_retain();
    specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(isUniquelyReferenced_nonNull_native);
    swift_release_n();
    *a5 = 100LL;
    uint64_t v22 = v30;
    uint64_t v23 = v31;
    uint64_t v24 = v34;
    *(void *)a6 = v28;
    *(_OWORD *)(a6 + 8) = v29;
    *(void *)(a6 + 2os_unfair_lock_unlock(*v0 + 4) = v22;
    *(void *)(a6 + 32) = v23;
    *(_OWORD *)(a6 + 40) = v32;
    *(_OWORD *)(a6 + 56) = v33;
    *(void *)(a6 + 72) = v24;
    __int128 v25 = v36;
    *(_OWORD *)(a6 + 80) = v35;
    *(_OWORD *)(a6 + 96) = v25;
  }

void specialized closure #3 in PropertyListDecoder._decode<A>(_:from:format:)( unint64_t a1, unint64_t a2, uint64_t a3, void *a4, void (*a5)(__int128 *))
{
  if (!v5)
  {
    outlined init with take of Any(&v36, v41);
    outlined init with copy of Any((uint64_t)v41, (uint64_t)&v36);
    uint64_t v32 = *(void *)(a3 + 16);
    uint64_t v33 = type metadata accessor for __PlistDictionaryDecoder();
    swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v34 = __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)&v36, MEMORY[0x18961AFE8], v32);
    *a4 = 1LL;
    *((void *)&v37 + 1) = v33;
    uint64_t v38 = &protocol witness table for __PlistDictionaryDecoder;
    *(void *)&__int128 v36 = v34;
    swift_retain();
    a5(&v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    return;
  }

  id v42 = v5;
  id v9 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_11;
  }

  uint64_t v10 = v39;
  uint64_t v11 = v40;
  uint64_t v12 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v14 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 40) = v16;
  *(void *)(inited + 48) = v10;
  *(void *)(inited + 56) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v17 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?( inited + 32,  (uint64_t)&v36,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
  __int128 v18 = v36;
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v18, *((uint64_t *)&v18 + 1));
  if ((v20 & 1) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  v17[(v19 >> 6) + 8] |= 1LL << v19;
  *(_OWORD *)(v17[6] + 16 * v19) = v18;
  outlined init with take of Any(&v37, (_OWORD *)(v17[7] + 32 * v19));
  uint64_t v21 = v17[2];
  BOOL v22 = __OFADD__(v21, 1LL);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  _OWORD v17[2] = v23;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v24 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v25 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v26 = objc_msgSend(v24, sel_initWithDomain_code_userInfo_, v25, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v27 = objc_msgSend(v26, sel_domain);
  id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  uint64_t v30 = v29;

  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v30 == v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_10:
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104LL))( v14,  *MEMORY[0x189619360],  v12);
    swift_willThrow();
LABEL_11:

    return;
  }

  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v35 & 1) != 0) {
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
}

void specialized static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)( uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_1832DD75C( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, void *(*a6)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))
{
  uint64_t v11 = v7;
  __int16 v12 = v9;
  char v13 = BYTE2(v9);
  char v14 = BYTE3(v9);
  char v15 = BYTE4(v9);
  char v16 = BYTE5(v9);
  return _s10Foundation4DataV14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_AA23LocalizedStringResourceV_Tg50102_s10Foundation19PropertyListDecoderC30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4b7V_xAA10de4Vys5f45VGKXExAOKXExSS05UTF16Q0VKXEtKlFZxAOKXEfU_AA23ghI5V_Tg5AIxs5Error_pRi_zRi0_zlyAKIsgyrzo_AA0lmN0CXMTAIxsAM_pRi_zRi0_zlyAKIsgyrzo_SS05UTF16E0VxsAM_pRi_zRi0_zlyAKIsggrzo_AOXDXMTTf1nnc_n( (uint64_t)&v11,  (uint64_t)&v11 + BYTE6(v9),  a3,  a6,  v6,  v8);
}

uint64_t specialized closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, void *(*a4)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t)@<X5>, void (*a5)(id)@<X7>, uint64_t a6@<X8>)
{
  if (a2 >= 41 && *(_DWORD *)a1 == 1768714338 && *(_DWORD *)(a1 + 3) == 812938089) {
    return a3(a1, a2);
  }
  uint64_t result = static PropertyListDecoder.detectEncoding(of:)((uint64_t *)&v27, (unsigned __int8 *)a1, a2);
  if (!v6)
  {
    if (result > a2)
    {
      __break(1u);
    }

    else
    {
      uint64_t v14 = v27;
      char v15 = (char *)(a1 + result);
      __int128 v30 = 0u;
      __int128 v31 = 0u;
      uint64_t v16 = a2 - result;
      __int128 v28 = 0u;
      memset(v29, 0, sizeof(v29));
      __int128 v27 = 0u;
      uint64_t result = (uint64_t)_s10Foundation19PropertyListDecoderC22withUTF8Representation2of14sourceEncoding_xAA10BufferViewVys5UInt8VG_SSAAE0J0VxAKKXEtKlFZyt_TBm5016_s10Foundation19bcd78C30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4DataV_xAA10kl4Vys5M82VGKXExAOKXExSS05UTF16Q0VKXEtKlFZxAOKXEfU_yAOKXEfU_AA23LocalizedStringResourceV_Tg5AA23LocalizedStringResourceVSgAKxs5Error_pRi_zRi0_zlyAPIsgyrzo_Tf1nnnc_n( (unsigned __int8 *)(a1 + result),  v16,  v14,  (uint64_t)&v27,  a4);
      uint64_t v17 = *((void *)&v27 + 1);
      if (*((void *)&v27 + 1))
      {
        uint64_t v18 = *((void *)&v29[2] + 1);
        uint64_t v19 = *(void *)&v29[0];
        __int128 v20 = v28;
        *(void *)a6 = v27;
        *(void *)(a6 + 8) = v17;
        *(_OWORD *)(a6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v20;
        *(void *)(a6 + 32) = v19;
        *(_OWORD *)(a6 + 40) = *(_OWORD *)((char *)v29 + 8);
        *(_OWORD *)(a6 + 56) = *(_OWORD *)((char *)&v29[1] + 8);
        *(void *)(a6 + 72) = v18;
        __int128 v21 = v31;
        *(_OWORD *)(a6 + 80) = v30;
        *(_OWORD *)(a6 + 96) = v21;
      }

      else
      {
        id v22 = specialized String.init<A>(bytes:encoding:)(v15, v16, v14);
        if (v23)
        {
          a5(v22);
          return swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v24 = type metadata accessor for DecodingError();
          swift_allocError();
          uint64_t v26 = v25;
          _CodingPathNode.path.getter(0x8000000000000000LL);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 104LL))( v26,  *MEMORY[0x189619360],  v24);
          swift_willThrow();
          return outlined consume of LocalizedStringResource?( v27,  0LL,  v28,  *((uint64_t *)&v28 + 1),  *(uint64_t *)&v29[0],  *((uint64_t *)&v29[0] + 1),  *(uint64_t *)&v29[1],  *((uint64_t *)&v29[1] + 1),  *(uint64_t *)&v29[2],  *((void **)&v29[2] + 1));
        }
      }
    }
  }

  return result;
}

uint64_t one-time initialization function for localizedStringLogger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, localizedStringLogger);
  __swift_project_value_buffer(v0, (uint64_t)localizedStringLogger);
  return Logger.init(subsystem:category:)();
}

uint64_t String.LocalizationOptions.replacements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t String.LocalizationOptions.replacements.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*String.LocalizationOptions.replacements.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t String.LocalizationOptions._PluralizationNumber.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys>);
  uint64_t v17 = *(void *)(v4 - 8);
  uint64_t v18 = v4;
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys>);
  uint64_t v16 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationOptions._PluralizationNumber.CodingKeys>);
  uint64_t v19 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  __int16 v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *v2;
  char v13 = *((_BYTE *)v2 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v13 & 1) != 0)
  {
    char v21 = 1;
    lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v18);
  }

  else
  {
    char v20 = 0;
    lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v7);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v12, v10);
}

uint64_t String.LocalizationOptions._PluralizationNumber.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v28 = a2;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys>);
  uint64_t v25 = *(void *)(v27 - 8);
  MEMORY[0x1895F8858](v27);
  uint64_t v29 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys>);
  uint64_t v4 = *(void *)(v26 - 8);
  MEMORY[0x1895F8858](v26);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationOptions._PluralizationNumber.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys();
  uint64_t v11 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11) {
    goto LABEL_7;
  }
  __int16 v12 = v29;
  uint64_t v23 = v4;
  uint64_t v24 = v8;
  __int128 v30 = a1;
  uint64_t v13 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v13 + 16) != 1LL)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v18 = &type metadata for String.LocalizationOptions._PluralizationNumber;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v18,  *MEMORY[0x189619358],  v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
    a1 = v30;
LABEL_7:
    uint64_t v19 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v19);
  }

  char v14 = *(_BYTE *)(v13 + 32);
  if ((v14 & 1) != 0)
  {
    char v32 = 1;
    lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
    uint64_t v15 = 0LL;
  }

  else
  {
    char v31 = 0;
    lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v21 = v26;
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
  }

  id v22 = v28;
  *__int128 v28 = v15;
  *((_BYTE *)v22 + 8) = v14;
  uint64_t v19 = (uint64_t)v30;
  return __swift_destroy_boxed_opaque_existential_1(v19);
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationOptions._PluralizationNumber@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return String.LocalizationOptions._PluralizationNumber.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationOptions._PluralizationNumber( void *a1)
{
  return String.LocalizationOptions._PluralizationNumber.encode(to:)(a1);
}

void String.LocalizationOptions._pluralizationNumber.getter(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 16);
  char v3 = *(_BYTE *)(v1 + 17);
  *(void *)a1 = *(void *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 9) = v3;
}

uint64_t String.LocalizationOptions._pluralizationNumber.setter(uint64_t result)
{
  char v2 = *(_BYTE *)(result + 8);
  char v3 = *(_BYTE *)(result + 9);
  *(void *)(v1 + 8) = *(void *)result;
  *(_BYTE *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v2;
  *(_BYTE *)(v1 + 17) = v3;
  return result;
}

uint64_t (*String.LocalizationOptions._pluralizationNumber.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t String.LocalizationOptions._localization.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t String.LocalizationOptions._localization.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 2os_unfair_lock_unlock(*v0 + 4) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*String.LocalizationOptions._localization.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void String.LocalizationOptions.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_WORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 256;
  *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 0;
}

void String.LocalizationOptions.init(nsOptions:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_pluralizationNumber);
  uint64_t v5 = v4;
  if (v4)
  {
    if (objc_msgSend(v4, sel_integerValue) == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      id v6 = 0LL;
      char v7 = 1;
    }

    else
    {
      id v6 = objc_msgSend(v5, sel_integerValue);
      char v7 = 0;
    }
  }

  else
  {
    id v6 = 0LL;
    char v7 = 0;
  }

  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(a2 + 17) = v5 == 0LL;
  *(void *)(a2 + 2os_unfair_lock_unlock(*v0 + 4) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(_BYTE *)(a2 + 40) = 0;
}

id String.LocalizationOptions._nsOptions.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  char v2 = *(_BYTE *)(v0 + 16);
  char v3 = *(_BYTE *)(v0 + 17);
  id result = objc_msgSend(objc_allocWithZone((Class)_NSStringFormattingOptions), sel_init);
  if (result)
  {
    uint64_t v5 = result;
    if ((v3 & 1) != 0)
    {
      objc_msgSend(result, sel_setPluralizationNumber_, 0);
    }

    else
    {
      id v6 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
      if ((v2 & 1) != 0) {
        uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v7 = v1;
      }
      id v8 = objc_msgSend(v6, sel_initWithInteger_, v7);
      objc_msgSend(v5, sel_setPluralizationNumber_, v8);
    }

    return v5;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void String.LocalizationValue.Placeholder.hash(into:)()
{
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.Placeholder.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1832DE55C + 4 * byte_183814CBE[*v0]))( 7630441LL,  0xE300000000000000LL);
}

uint64_t sub_1832DE55C()
{
  return 1953393013LL;
}

uint64_t sub_1832DE56C()
{
  return 0x74616F6C66LL;
}

uint64_t sub_1832DE580()
{
  return 0x656C62756F64LL;
}

uint64_t sub_1832DE594()
{
  return 0x7463656A626FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.Placeholder.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationValue.Placeholder.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.DoubleCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.DoubleCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.FloatCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.FloatCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.IntCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.IntCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.ObjectCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.ObjectCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.UintCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.UintCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

void String.LocalizationValue.Placeholder.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.ObjectCodingKeys>);
  v14[11] = *(void *)(v3 - 8);
  v14[12] = v3;
  MEMORY[0x1895F8858](v3);
  v14[10] = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.DoubleCodingKeys>);
  v14[8] = *(void *)(v5 - 8);
  v14[9] = v5;
  MEMORY[0x1895F8858](v5);
  v14[7] = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.FloatCodingKeys>);
  void v14[5] = *(void *)(v7 - 8);
  v14[6] = v7;
  MEMORY[0x1895F8858](v7);
  v14[4] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.UintCodingKeys>);
  void v14[2] = *(void *)(v9 - 8);
  void v14[3] = v9;
  MEMORY[0x1895F8858](v9);
  v14[1] = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.IntCodingKeys>);
  MEMORY[0x1895F8858](v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.CodingKeys>);
  v14[14] = *(void *)(v12 - 8);
  void v14[15] = v12;
  MEMORY[0x1895F8858](v12);
  uint64_t v13 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }

uint64_t sub_1832DE9A0()
{
  *(_BYTE *)(v4 - 69) = 0;
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys();
  uint64_t v5 = *(void *)(v4 - 88);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 96) + 8LL))(v1, v5);
}

Swift::Int String.LocalizationValue.Placeholder.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t String.LocalizationValue.Placeholder.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.ObjectCodingKeys>);
  uint64_t v34 = *(void *)(v41 - 8);
  MEMORY[0x1895F8858](v41);
  uint64_t v40 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.DoubleCodingKeys>);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  MEMORY[0x1895F8858](v4);
  uint64_t v39 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.FloatCodingKeys>);
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v38 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.UintCodingKeys>);
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  MEMORY[0x1895F8858](v8);
  __int128 v37 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.IntCodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.CodingKeys>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = a1[3];
  uint64_t v43 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys();
  uint64_t v19 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v19)
  {
    void v27[2] = v10;
    v27[3] = v13;
    v27[1] = v11;
    uint64_t v44 = v15;
    __int128 v28 = v17;
    uint64_t v29 = v14;
    uint64_t v20 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v20 + 16) == 1LL) {
      __asm { BR              X9 }
    }

    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v23 = &type metadata for String.LocalizationValue.Placeholder;
    uint64_t v24 = v28;
    uint64_t v25 = v29;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v23,  *MEMORY[0x189619358],  v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v25);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.Placeholder@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.Placeholder.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.Placeholder( void *a1)
{
}

uint64_t String.LocalizationValue.init(key:arguments:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  a4[1] = result;
  a4[2] = a2;
  return result;
}

uint64_t String.LocalizationValue.init(stringLiteral:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = MEMORY[0x18961AFE8];
  a3[1] = result;
  a3[2] = a2;
  return result;
}

__n128 String.LocalizationValue.init(stringInterpolation:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  *a2 = *a1;
  a2[1].n128_u64[0] = v3;
  return result;
}

void *String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)@<X0>( void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[1] = 0LL;
  a3[2] = 0xE000000000000000LL;
  if (a2 + 0x4000000000000000LL < 0)
  {
    __break(1u);
  }

  else
  {
    BOOL v5 = __OFADD__(result, 2 * a2);
    __n128 result = (void *)((char *)result + 2 * a2);
    if (!v5)
    {
      MEMORY[0x186E1B64C](result);
      __n128 result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a2 & ~(a2 >> 63),  0,  MEMORY[0x18961AFE8]);
      *a3 = result;
      return result;
    }
  }

  __break(1u);
  return result;
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  Swift::UInt v1 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v2 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v3 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v4 =  objc_msgSend( v1,  sel_stringByReplacingOccurrencesOfString_withString_,  v2,  v3,  a1._countAndFlagsBits,  a1._object,  9509,  0xE200000000000000,  37,  0xE100000000000000);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  v8._uint64_t countAndFlagsBits = (uint64_t)v5;
  v8._unint64_t object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
  uint64_t v2 = v1;
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  v5._uint64_t countAndFlagsBits = 16421LL;
  v5._unint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  uint64_t v6 = MEMORY[0x189617FA8];
  size_t v22[3] = MEMORY[0x189617FA8];
  void v22[4] = lazy protocol witness table accessor for type String and conformance String();
  v22[0] = countAndFlagsBits;
  v22[1] = object;
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(v22, v6);
  uint64_t v20 = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))( boxed_opaque_existential_1,  v7,  v6);
  char v21 = 0;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v19, (uint64_t)v23);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  uint64_t v9 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
  }
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v10 > 1),  v11 + 1,  1,  v9);
  }
  void v9[2] = v11 + 1;
  uint64_t v12 = &v9[15 * v11];
  __int128 v13 = v23[0];
  __int128 v14 = v23[1];
  __int128 v15 = v23[3];
  *((_OWORD *)v12 + os_unfair_lock_unlock(*v0 + 4) = v23[2];
  *((_OWORD *)v12 + 5) = v15;
  *((_OWORD *)v12 + 2) = v13;
  *((_OWORD *)v12 + 3) = v14;
  __int128 v16 = v23[4];
  __int128 v17 = v23[5];
  __int128 v18 = v23[6];
  *((_BYTE *)v12 + 14os_unfair_lock_unlock(*v0 + 4) = v24;
  *((_OWORD *)v12 + 7) = v17;
  *((_OWORD *)v12 + 8) = v18;
  *((_OWORD *)v12 + 6) = v16;
  *uint64_t v2 = v9;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v6._uint64_t countAndFlagsBits = 16421LL;
  v6._unint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v6);
  *((void *)&v29 + 1) = a2;
  *(void *)&__int128 v30 = MEMORY[0x186E20D4C](MEMORY[0x18961BB20], a2);
  *(void *)&__int128 v28 = a1;
  uint64_t v7 = one-time initialization token for cache;
  id v8 = a1;
  if (v7 != -1) {
    swift_once();
  }
  *(void *)&__int128 v23 = LocaleCache.current.getter();
  *((void *)&v23 + 1) = v9;
  _convertObjectToSendableArgument(_:locale:)((uint64_t)&v28, v26);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  uint64_t v10 = v27;
  unint64_t v11 = __swift_project_boxed_opaque_existential_1(v26, v27);
  uint64_t v24 = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v10 - 8) + 16LL))( boxed_opaque_existential_1,  v11,  v10);
  char v25 = 0;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v23, (uint64_t)&v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  __int128 v13 = *v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __int128 v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v13[2] + 1LL,  1,  v13);
  }
  unint64_t v15 = v13[2];
  unint64_t v14 = v13[3];
  if (v15 >= v14 >> 1) {
    __int128 v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v14 > 1),  v15 + 1,  1,  v13);
  }
  _OWORD v13[2] = v15 + 1;
  __int128 v16 = &v13[15 * v15];
  __int128 v17 = v28;
  __int128 v18 = v29;
  __int128 v19 = v31;
  *((_OWORD *)v16 + os_unfair_lock_unlock(*v0 + 4) = v30;
  *((_OWORD *)v16 + 5) = v19;
  *((_OWORD *)v16 + 2) = v17;
  *((_OWORD *)v16 + 3) = v18;
  __n128 result = v32;
  __int128 v21 = v33;
  __int128 v22 = v34;
  *((_BYTE *)v16 + 14os_unfair_lock_unlock(*v0 + 4) = v35;
  *((_OWORD *)v16 + 7) = v21;
  *((_OWORD *)v16 + 8) = v22;
  *((__n128 *)v16 + 6) = result;
  *uint64_t v3 = v13;
  return result;
}

unint64_t _convertObjectToSendableArgument(_:locale:)@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  uint64_t v4 = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if (swift_dynamicCast())
  {
    Swift::String v5 = v16;
    a2[3] = (char *)v4;
    Swift::String v6 = (unint64_t *)&lazy protocol witness table cache variable for type NSNumber and conformance NSObject;
    uint64_t v7 = (unint64_t *)&lazy cache variable for type metadata for NSNumber;
  }

  else
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( a1,  (uint64_t)v17);
    uint64_t v8 = type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSDate);
    if (swift_dynamicCast())
    {
      Swift::String v5 = v16;
      a2[3] = (char *)v8;
      Swift::String v6 = (unint64_t *)&lazy protocol witness table cache variable for type NSDate and conformance NSObject;
      uint64_t v7 = &lazy cache variable for type metadata for NSDate;
    }

    else
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( a1,  (uint64_t)v17);
      uint64_t v9 = type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSURL);
      if (!swift_dynamicCast())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v12 = outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( a1,  inited + 32);
        MEMORY[0x1895F8858](v12);
        swift_unknownObjectRetain();
        __int128 v13 = specialized withVaList<A>(_:_:)( inited,  (void (*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in String.init(format:locale:arguments:));
        unint64_t v15 = v14;
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_unknownObjectRelease();
        a2[3] = (char *)MEMORY[0x189617FA8];
        unint64_t result = lazy protocol witness table accessor for type String and conformance String();
        a2[4] = (char *)result;
        *a2 = v13;
        a2[1] = v15;
        return result;
      }

      Swift::String v5 = v16;
      a2[3] = (char *)v9;
      Swift::String v6 = (unint64_t *)&lazy protocol witness table cache variable for type NSURL and conformance NSObject;
      uint64_t v7 = &lazy cache variable for type metadata for NSURL;
    }
  }

  unint64_t result = lazy protocol witness table accessor for type NSNumber and conformance NSObject(v6, v7);
  a2[4] = (char *)result;
  *a2 = v5;
  return result;
}

uint64_t String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:)( int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 1684827173LL;
  if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype()) {
    goto LABEL_3;
  }
  if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
    uint64_t v7 = (void *)0xE200000000000000LL;
    uint64_t v6 = 25637LL;
    goto LABEL_4;
  }

  uint64_t v6 = 1970039845LL;
  if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
LABEL_3:
    uint64_t v7 = (void *)0xE400000000000000LL;
  }

  else if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
    uint64_t v7 = (void *)0xE200000000000000LL;
    uint64_t v6 = 29989LL;
  }

  else if (swift_dynamicCastMetatype())
  {
    uint64_t v7 = (void *)0xE200000000000000LL;
    uint64_t v6 = 26149LL;
  }

  else
  {
    uint64_t v6 = 6712357LL;
    uint64_t v7 = (void *)0xE300000000000000LL;
    if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
    {
      uint64_t v6 = 16421LL;
      uint64_t v7 = (void *)0xE200000000000000LL;
    }
  }

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)( int a1, Swift::String a2, uint64_t a3, uint64_t a4)
{
  Swift::String v5 = v4;
  String.append(_:)(a2);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v25);
  v8(a3, a4);
  uint64_t v9 = AssociatedTypeWitness;
  uint64_t v10 = __swift_project_boxed_opaque_existential_1(v25, AssociatedTypeWitness);
  uint64_t v23 = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v22);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v9 - 8) + 16LL))( boxed_opaque_existential_1,  v10,  v9);
  char v24 = 0;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v22, (uint64_t)v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  uint64_t v12 = *v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
  }
  unint64_t v14 = v12[2];
  unint64_t v13 = v12[3];
  if (v14 >= v13 >> 1) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v13 > 1),  v14 + 1,  1,  v12);
  }
  _OWORD v12[2] = v14 + 1;
  unint64_t v15 = &v12[15 * v14];
  __int128 v16 = v28[0];
  __int128 v17 = v28[1];
  __int128 v18 = v28[3];
  *((_OWORD *)v15 + os_unfair_lock_unlock(*v0 + 4) = v28[2];
  *((_OWORD *)v15 + 5) = v18;
  *((_OWORD *)v15 + 2) = v16;
  *((_OWORD *)v15 + 3) = v17;
  __n128 result = (__n128)v28[4];
  __int128 v20 = v28[5];
  __int128 v21 = v28[6];
  *((_BYTE *)v15 + 14os_unfair_lock_unlock(*v0 + 4) = v29;
  *((_OWORD *)v15 + 7) = v20;
  *((_OWORD *)v15 + 8) = v21;
  *((__n128 *)v15 + 6) = result;
  *Swift::String v5 = v12;
  return result;
}

uint64_t String.LocalizationValue.StringInterpolation.appendInterpolation(placeholder:)(char *a1)
{
  Swift::UInt v1 = (void *)0xE400000000000000LL;
  v2._uint64_t countAndFlagsBits = 1684827173LL;
  switch(*a1)
  {
    case 0:
      break;
    case 1:
      v2._uint64_t countAndFlagsBits = 1970039845LL;
      break;
    case 2:
      Swift::UInt v1 = (void *)0xE200000000000000LL;
      v2._uint64_t countAndFlagsBits = 26149LL;
      break;
    case 3:
      Swift::UInt v1 = (void *)0xE300000000000000LL;
      v2._uint64_t countAndFlagsBits = 6712357LL;
      break;
    default:
      Swift::UInt v1 = (void *)0xE200000000000000LL;
      v2._uint64_t countAndFlagsBits = 16421LL;
      break;
  }

  v2._unint64_t object = v1;
  String.LocalizationValue.StringInterpolation.appendInterpolation(placeholder:specifier:)(a1, v2);
  return swift_bridgeObjectRelease();
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation(placeholder:specifier:)( char *a1, Swift::String a2)
{
  uint64_t v3 = v2;
  char v4 = *a1;
  String.append(_:)(a2);
  Swift::String v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v5[2] + 1LL,  1,  v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    Swift::String v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v6 > 1),  v7 + 1,  1,  v5);
  }
  uint64_t v5[2] = v7 + 1;
  uint64_t v8 = &v5[15 * v7];
  *((_BYTE *)v8 + 32) = v4;
  *(_OWORD *)((char *)v8 + 65) = v12;
  *(_OWORD *)((char *)v8 + 49) = v11;
  *(_OWORD *)((char *)v8 + 33) = v10;
  __n128 result = v13;
  *((_OWORD *)v8 + 8) = *(_OWORD *)&v15[15];
  *(_OWORD *)((char *)v8 + 113) = *(_OWORD *)v15;
  *(_OWORD *)((char *)v8 + 97) = v14;
  *(__n128 *)((char *)v8 + 81) = v13;
  *((_BYTE *)v8 + 14os_unfair_lock_unlock(*v0 + 4) = 6;
  *uint64_t v3 = v5;
  return result;
}

double String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&double result = String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)( a1,  a2,  a3,  a4,  a5,  a6,  (void (*)(__int128 *__return_ptr, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:),  2).n128_u64[0];
  return result;
}

{
  double result;
  *(void *)&double result = String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)( a1,  a2,  a3,  a4,  a5,  a6,  (void (*)(__int128 *__return_ptr, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:),  3).n128_u64[0];
  return result;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(__int128 *__return_ptr, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t), int a8)
{
  void (*v44)(__int128 *__return_ptr, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  int v45;
  __int128 v46[7];
  char v47;
  _OWORD v48[7];
  char v49;
  uint64_t v45 = a8;
  uint64_t v44 = a7;
  uint64_t v43 = a6;
  uint64_t v42 = a5;
  uint64_t v41 = a2;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  __n128 v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  __int128 v16 = (char *)v40 - v15;
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v19);
  __int128 v21 = (char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v22);
  char v24 = (char *)v40 - v23;
  v25._uint64_t countAndFlagsBits = 16421LL;
  v25._unint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v25);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v26(v24, a1, a3);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v27(v16, v41, a4);
  v26(v21, (uint64_t)v24, a3);
  v27(v13, (uint64_t)v16, a4);
  v44(v46, v21, v13, a3, a4, v42, v43);
  uint64_t v28 = a4;
  char v29 = (void **)v40[1];
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v28);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v24, a3);
  uint64_t v47 = v45;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(v46, (uint64_t)v48);
  __int128 v30 = *v29;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __int128 v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v30[2] + 1LL,  1,  v30);
  }
  unint64_t v32 = v30[2];
  unint64_t v31 = v30[3];
  if (v32 >= v31 >> 1) {
    __int128 v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v31 > 1),  v32 + 1,  1,  v30);
  }
  v30[2] = v32 + 1;
  __int128 v33 = &v30[15 * v32];
  __int128 v34 = v48[0];
  __int128 v35 = v48[1];
  __int128 v36 = v48[3];
  *((_OWORD *)v33 + os_unfair_lock_unlock(*v0 + 4) = v48[2];
  *((_OWORD *)v33 + 5) = v36;
  *((_OWORD *)v33 + 2) = v34;
  *((_OWORD *)v33 + 3) = v35;
  __n128 result = (__n128)v48[4];
  __int128 v38 = v48[5];
  __int128 v39 = v48[6];
  *((_BYTE *)v33 + 14os_unfair_lock_unlock(*v0 + 4) = v49;
  *((_OWORD *)v33 + 7) = v38;
  *((_OWORD *)v33 + 8) = v39;
  *((__n128 *)v33 + 6) = result;
  *char v29 = v30;
  return result;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  v6._uint64_t countAndFlagsBits = 16421LL;
  v6._unint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v6);
  unint64_t v7 = *v2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v7[2] + 1LL,  1,  v7);
  }
  unint64_t v9 = v7[2];
  unint64_t v8 = v7[3];
  if (v9 >= v8 >> 1) {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v7);
  }
  _OWORD v7[2] = v9 + 1;
  __int128 v10 = &v7[15 * v9];
  void v10[4] = v4;
  void v10[5] = v5;
  *((_OWORD *)v10 + 3) = v12;
  *((_OWORD *)v10 + os_unfair_lock_unlock(*v0 + 4) = v13;
  __n128 result = v14;
  *((_OWORD *)v10 + 7) = v16;
  *((_OWORD *)v10 + 8) = v17;
  *((__n128 *)v10 + 5) = v14;
  *((_OWORD *)v10 + 6) = v15;
  *((_BYTE *)v10 + 14os_unfair_lock_unlock(*v0 + 4) = 1;
  *uint64_t v3 = v7;
  return result;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v7._uint64_t countAndFlagsBits = 16421LL;
  v7._unint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 8))(&v25, a2, a3);
  uint64_t v8 = v27;
  uint64_t v9 = v28;
  uint64_t v10 = v29;
  uint64_t v11 = v30;
  __n128 v23 = v31;
  __int128 v24 = v26;
  uint64_t v12 = v32;
  uint64_t v13 = v33;
  uint64_t v21 = v34;
  uint64_t v22 = v25;
  uint64_t v19 = v36;
  uint64_t v20 = v35;
  __n128 v14 = *v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __n128 v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v14[2] + 1LL,  1,  v14);
  }
  unint64_t v16 = v14[2];
  unint64_t v15 = v14[3];
  if (v16 >= v15 >> 1) {
    __n128 v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v15 > 1),  v16 + 1,  1,  v14);
  }
  void v14[2] = v16 + 1;
  __int128 v17 = &v14[15 * v16];
  v17[4] = v22;
  *(_OWORD *)(v17 + 5) = v24;
  v17[7] = v8;
  __int128 v17[8] = v9;
  v17[9] = v10;
  v17[10] = v11;
  __n128 result = v23;
  *(__n128 *)(v17 + 11) = v23;
  v17[13] = v12;
  v17[14] = v13;
  v17[15] = v21;
  v17[16] = v20;
  v17[17] = v19;
  *((_BYTE *)v17 + 14os_unfair_lock_unlock(*v0 + 4) = 4;
  *uint64_t v4 = v14;
  return result;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:format:)( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::String v6 = v5;
  char v10 = *a2;
  char v11 = a2[1];
  __int128 v22 = *(_OWORD *)(a2 + 8);
  v12._uint64_t countAndFlagsBits = 16421LL;
  v12._unint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v12);
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverO10Foundation23LocalizedStringResourceVIsgnrzr_xSayAJGAGSlRzAJRsd__AGRsd_0_r_0_lIetMgnozo_Tp5( (void (*)(uint64_t *__return_ptr, char *))partial apply for implicit closure #1 in String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:format:),  (uint64_t)v23);
  swift_release();
  __n128 v14 = *v5;
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __n128 v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v14[2] + 1LL,  1,  v14);
  }
  unint64_t v16 = v14[2];
  unint64_t v15 = v14[3];
  if (v16 >= v15 >> 1) {
    __n128 v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v15 > 1),  v16 + 1,  1,  v14);
  }
  void v14[2] = v16 + 1;
  __int128 v17 = &v14[15 * v16];
  v17[4] = v13;
  *((_BYTE *)v17 + 40) = v10;
  *((_BYTE *)v17 + 41) = v11;
  __int16 v18 = v37;
  *(_DWORD *)((char *)v17 + 42) = v36;
  *((_WORD *)v17 + 23) = v18;
  *((_OWORD *)v17 + 3) = v22;
  *((_OWORD *)v17 + os_unfair_lock_unlock(*v0 + 4) = v31;
  __n128 result = v32;
  __int128 v20 = v33;
  __int128 v21 = v35;
  *((_OWORD *)v17 + 7) = v34;
  *((_OWORD *)v17 + 8) = v21;
  *((__n128 *)v17 + 5) = result;
  *((_OWORD *)v17 + 6) = v20;
  *((_BYTE *)v17 + 14os_unfair_lock_unlock(*v0 + 4) = 5;
  *Swift::String v6 = v14;
  return result;
}

double key path getter for CustomLocalizedStringResourceConvertible.localizedStringResource : <A>A.Element@<D0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void (*v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v4 = *(void *)(a2 + a1 - 8);
  uint64_t v5 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5(&v12, AssociatedTypeWitness, v4);
  Swift::String v7 = v14;
  uint64_t v8 = v15;
  uint64_t v9 = v18;
  *(void *)a3 = v12;
  *(_OWORD *)(a3 + 8) = v13;
  *(void *)(a3 + 2os_unfair_lock_unlock(*v0 + 4) = v7;
  *(void *)(a3 + 32) = v8;
  *(_OWORD *)(a3 + 40) = v16;
  *(_OWORD *)(a3 + 56) = v17;
  *(void *)(a3 + 72) = v9;
  __n128 result = *(double *)&v19;
  char v11 = v20;
  *(_OWORD *)(a3 + 80) = v19;
  *(_OWORD *)(a3 + 96) = v11;
  return result;
}

void *protocol witness for StringInterpolationProtocol.init(literalCapacity:interpolationCount:) in conformance String.LocalizationValue.StringInterpolation@<X0>( void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[1] = 0LL;
  a3[2] = 0xE000000000000000LL;
  if (a2 + 0x4000000000000000LL < 0)
  {
    __break(1u);
  }

  else
  {
    BOOL v5 = __OFADD__(result, 2 * a2);
    __n128 result = (void *)((char *)result + 2 * a2);
    if (!v5)
    {
      MEMORY[0x186E1B64C](result);
      __n128 result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a2 & ~(a2 >> 63),  0,  MEMORY[0x18961AFE8]);
      *a3 = result;
      return result;
    }
  }

  __break(1u);
  return result;
}

void protocol witness for StringInterpolationProtocol.appendLiteral(_:) in conformance String.LocalizationValue.StringInterpolation( Swift::String *a1)
{
}

uint64_t static String.LocalizationValue.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0LL;
  }
  if (v2 == v4 && v3 == v5) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.LocalizationValue( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0LL;
  }
  if (v2 == v4 && v3 == v5) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

__n128 protocol witness for ExpressibleByStringInterpolation.init(stringInterpolation:) in conformance String.LocalizationValue@<Q0>( __n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  *a2 = *a1;
  a2[1].n128_u64[0] = v3;
  return result;
}

uint64_t *protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance String.LocalizationValue@<X0>( uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  *a2 = MEMORY[0x18961AFE8];
  a2[1] = v2;
  a2[2] = v3;
  return result;
}

void *String.init(localized:table:bundle:locale:comment:)( uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *a5;
  uint64_t v9 = a5[1];
  __int16 v24 = 256;
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  char v27 = 0;
  v23[0] = MEMORY[0x18961AFE8];
  memset(&v23[1], 0, 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v21 = v9;
  uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n( v7,  v23,  v8,  v9);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a4) {
    id v11 = a4;
  }
  else {
    id v11 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  }
  uint64_t v12 = String._bridgeToObjectiveCImpl()();
  id v22 = a4;
  swift_bridgeObjectRelease();
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  if (a3) {
    __n128 v14 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    __n128 v14 = 0LL;
  }
  id v15 = objc_msgSend(v11, sel_localizedStringForKey_value_table_localizations_, v12, v13, v14, 0);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  unint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (*(void *)(v10 + 16))
  {
    swift_unknownObjectRetain();
    uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v10);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v16 = specialized withVaList<A>(_:_:)(v19, (uint64_t)v16, v18, v8, v21);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
  }

  else
  {

    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v16;
}

void *String.LocalizationValue.resolve(key:options:table:bundle:locale:performLocalization:)( void *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t *a7, char a8)
{
  __int128 v12 = a3[1];
  __int128 v43 = *a3;
  *(_OWORD *)uint64_t v44 = v12;
  *(_OWORD *)&v44[9] = *(__int128 *)((char *)a3 + 25);
  uint64_t v13 = *a7;
  uint64_t v14 = a7[1];
  uint64_t v15 = a2;
  if (!a2)
  {
    a1 = *(void **)(v8 + 8);
    uint64_t v15 = swift_bridgeObjectRetain();
  }

  if ((void)v43) {
    unint64_t v16 = v43;
  }
  else {
    unint64_t v16 = MEMORY[0x18961AFE8];
  }
  __int128 v48 = v16;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n( v17,  &v48,  v13,  v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if ((a8 & 1) != 0)
  {
    if (a6) {
      id v19 = a6;
    }
    else {
      id v19 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    }
    outlined init with take of LocalePreferences?( (uint64_t)&v44[8],  (uint64_t)v46,  &demangling cache variable for type metadata for String?);
    char v20 = v44[24];
    outlined init with take of LocalePreferences?( (uint64_t)v46,  (uint64_t)&v47,  &demangling cache variable for type metadata for String?);
    if (*((void *)&v47 + 1))
    {
      __int128 v48 = v47;
      if ((v20 & 1) != 0)
      {
        id v25 = a6;
        outlined retain of String?((uint64_t)v46);
        id v26 = objc_msgSend(v19, sel_localizations);
        if (!v26) {
          id v26 = (id)_ContiguousArrayBuffer._asCocoaArray()();
        }
        char v27 = (void *)objc_opt_self();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v28 = swift_allocObject();
        __int128 v29 = v48;
        *(_OWORD *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(_OWORD *)(v28 + 32) = v29;
        id v30 =  objc_msgSend( v27,  sel_preferredLocalizationsFromArray_forPreferences_,  v26,  _ContiguousArrayBuffer._asCocoaArray()());

        swift_unknownObjectRelease();
        if (v30)
        {
          type metadata accessor for __SwiftDeferredNSArray();
          swift_unknownObjectRetain();
          if (swift_dynamicCastClass())
          {
            swift_retain();
          }

          uint64_t v31 = swift_dynamicCastClass();
          if (v31)
          {
            uint64_t v21 = (_OWORD *)v31;
          }

          else
          {
            swift_unknownObjectRelease();
            objc_msgSend(v30, sel_copy);
            unint64_t v32 = _bridgeCocoaArray<A>(_:)();
            swift_unknownObjectRelease();
            uint64_t v21 = (_OWORD *)specialized _arrayForceCast<A, B>(_:)(v32);

            swift_bridgeObjectRelease();
          }
        }

        else
        {
          uint64_t v21 = (_OWORD *)MEMORY[0x18961AFE8];
        }
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v21 = (_OWORD *)swift_allocObject();
        __int128 v22 = v47;
        v21[1] = xmmword_183720D90;
        id v21[2] = v22;
        id v23 = a6;
        outlined retain of String?((uint64_t)v46);
      }
    }

    else
    {
      id v24 = a6;
      uint64_t v21 = 0LL;
    }

    uint64_t v33 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v34 = String._bridgeToObjectiveCImpl()();
    if (a5)
    {
      __int128 v35 = (void *)String._bridgeToObjectiveCImpl()();
      if (!v21)
      {
LABEL_26:
        id v36 = objc_msgSend(v19, sel_localizedStringForKey_value_table_localizations_, v33, v34, v35, v21);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        uint64_t v15 = v37;

        goto LABEL_27;
      }
    }

    else
    {
      __int128 v35 = 0LL;
      if (!v21) {
        goto LABEL_26;
      }
    }

    uint64_t v21 = (_OWORD *)_ContiguousArrayBuffer._asCocoaArray()();
    goto LABEL_26;
  }

void *String.init(localized:defaultValue:table:bundle:locale:comment:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v10 = *a4;
  uint64_t v12 = *a8;
  uint64_t v11 = a8[1];
  StaticString.description.getter();
  __int16 v28 = 256;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  char v31 = 0;
  v27[0] = MEMORY[0x18961AFE8];
  memset(&v27[1], 0, 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v25 = v11;
  uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n( v10,  v27,  v12,  v11);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a7) {
    id v14 = a7;
  }
  else {
    id v14 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  }
  uint64_t v15 = String._bridgeToObjectiveCImpl()();
  id v26 = a7;
  swift_bridgeObjectRelease();
  uint64_t v16 = String._bridgeToObjectiveCImpl()();
  if (a6) {
    uint64_t v17 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    uint64_t v17 = 0LL;
  }
  id v18 = objc_msgSend(v14, sel_localizedStringForKey_value_table_localizations_, v15, v16, v17, 0, a5);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  if (*(void *)(v13 + 16))
  {
    swift_unknownObjectRetain();
    uint64_t v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v13);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    id v19 = specialized withVaList<A>(_:_:)(v22, (uint64_t)v19, v21, v12, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return v19;
}

void *String.init(localized:table:bundle:localization:locale:comment:)( uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v11 = *a1;
  uint64_t v12 = *a7;
  uint64_t v13 = a7[1];
  __int16 v29 = 256;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  char v32 = 0;
  v28[0] = MEMORY[0x18961AFE8];
  memset(&v28[1], 0, 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v25 = v13;
  uint64_t v27 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n( v11,  v28,  v12,  v13);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a4)
  {
    id v14 = a4;
    if (a6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(v15 + 32) = a5;
      *(void *)(v15 + 40) = a6;
      goto LABEL_6;
    }
  }

  else
  {
    id v14 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    if (a6) {
      goto LABEL_3;
    }
  }

  uint64_t v15 = 0LL;
LABEL_6:
  uint64_t v16 = String._bridgeToObjectiveCImpl()();
  id v26 = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = String._bridgeToObjectiveCImpl()();
  if (a3)
  {
    id v18 = (void *)String._bridgeToObjectiveCImpl()();
    if (!v15) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  id v18 = 0LL;
  if (v15) {
LABEL_8:
  }
    uint64_t v15 = _ContiguousArrayBuffer._asCocoaArray()();
LABEL_9:
  id v19 = objc_msgSend(v14, sel_localizedStringForKey_value_table_localizations_, v16, v17, v18, v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v22 = v21;

  if (*(void *)(v27 + 16))
  {
    swift_unknownObjectRetain();
    uint64_t v23 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v27);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = specialized withVaList<A>(_:_:)(v23, (uint64_t)v20, v22, v12, v25);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return v20;
}

void *String.init(localized:options:table:bundle:locale:comment:)( uint64_t *a1, __int128 *a2, uint64_t a3, void *a4, void *a5, uint64_t *a6)
{
  uint64_t v8 = *a1;
  __int128 v9 = a2[1];
  __int128 v40 = *a2;
  *(_OWORD *)uint64_t v41 = v9;
  *(_OWORD *)&v41[9] = *(__int128 *)((char *)a2 + 25);
  uint64_t v11 = *a6;
  uint64_t v10 = a6[1];
  if ((void)v40) {
    unint64_t v12 = v40;
  }
  else {
    unint64_t v12 = MEMORY[0x18961AFE8];
  }
  __int128 v45 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v37 = v10;
  uint64_t v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n( v8,  &v45,  v11,  v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a5) {
    id v13 = a5;
  }
  else {
    id v13 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  }
  outlined init with take of LocalePreferences?( (uint64_t)&v41[8],  (uint64_t)v43,  &demangling cache variable for type metadata for String?);
  char v14 = v41[24];
  outlined init with take of LocalePreferences?( (uint64_t)v43,  (uint64_t)&v44,  &demangling cache variable for type metadata for String?);
  id v39 = a5;
  if (*((void *)&v44 + 1))
  {
    __int128 v45 = v44;
    if ((v14 & 1) != 0)
    {
      id v36 = a4;
      id v19 = a5;
      outlined retain of String?((uint64_t)v43);
      id v20 = objc_msgSend(v13, sel_localizations);
      if (!v20) {
        id v20 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      }
      uint64_t v21 = (void *)objc_opt_self();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v22 = swift_allocObject();
      __int128 v23 = v45;
      *(_OWORD *)(v22 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(_OWORD *)(v22 + 32) = v23;
      id v24 =  objc_msgSend( v21,  sel_preferredLocalizationsFromArray_forPreferences_,  v20,  _ContiguousArrayBuffer._asCocoaArray()());

      swift_unknownObjectRelease();
      if (v24)
      {
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }

        uint64_t v25 = swift_dynamicCastClass();
        if (v25)
        {
          uint64_t v15 = (_OWORD *)v25;
        }

        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v24, sel_copy);
          unint64_t v26 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          uint64_t v15 = (_OWORD *)specialized _arrayForceCast<A, B>(_:)(v26);

          swift_bridgeObjectRelease();
        }
      }

      else
      {
        uint64_t v15 = (_OWORD *)MEMORY[0x18961AFE8];
      }

      a4 = v36;
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v15 = (_OWORD *)swift_allocObject();
      __int128 v16 = v44;
      v15[1] = xmmword_183720D90;
      void v15[2] = v16;
      id v17 = a5;
      outlined retain of String?((uint64_t)v43);
    }
  }

  else
  {
    id v18 = a5;
    uint64_t v15 = 0LL;
  }

  uint64_t v27 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v28 = String._bridgeToObjectiveCImpl()();
  if (a4)
  {
    a4 = (void *)String._bridgeToObjectiveCImpl()();
    if (!v15) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  if (v15) {
LABEL_23:
  }
    uint64_t v15 = (_OWORD *)_ContiguousArrayBuffer._asCocoaArray()();
LABEL_24:
  id v29 = objc_msgSend(v13, sel_localizedStringForKey_value_table_localizations_, v27, v28, a4, v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v32 = v31;

  if (!*(void *)(v38 + 16))
  {
    outlined init with take of LocalePreferences?( (uint64_t)&v40 + 8,  (uint64_t)v42,  &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    outlined init with take of LocalePreferences?( (uint64_t)v42,  (uint64_t)&v46,  &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    if ((v47 & 1) != 0
      || (outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber(&v46, (uint64_t)v48),
          String._bridgeToObjectiveCImpl()(),
          id v34 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v34))
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
  }

  swift_unknownObjectRetain();
  uint64_t v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v38);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of String.LocalizationOptions((uint64_t)&v40);
  uint64_t v30 = specialized withVaList<A>(_:_:)(v33, (uint64_t)v30, v32, v11, v37);
  outlined release of String.LocalizationOptions((uint64_t)&v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
LABEL_32:

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  outlined release of String.LocalizationOptions((uint64_t)&v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v30;
}

void *String.init(localized:defaultValue:options:table:bundle:locale:comment:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, __int128 *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9)
{
  uint64_t v11 = *a4;
  __int128 v12 = a5[1];
  __int128 v43 = *a5;
  *(_OWORD *)__int128 v44 = v12;
  *(_OWORD *)&v44[9] = *(__int128 *)((char *)a5 + 25);
  uint64_t v14 = *a9;
  uint64_t v13 = a9[1];
  StaticString.description.getter();
  if ((void)v43) {
    unint64_t v15 = v43;
  }
  else {
    unint64_t v15 = MEMORY[0x18961AFE8];
  }
  __int128 v48 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v40 = v13;
  uint64_t v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n( v11,  &v48,  v14,  v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a8) {
    id v16 = a8;
  }
  else {
    id v16 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  }
  outlined init with take of LocalePreferences?( (uint64_t)&v44[8],  (uint64_t)v46,  &demangling cache variable for type metadata for String?);
  char v17 = v44[24];
  outlined init with take of LocalePreferences?( (uint64_t)v46,  (uint64_t)&v47,  &demangling cache variable for type metadata for String?);
  uint64_t v42 = a8;
  if (*((void *)&v47 + 1))
  {
    __int128 v48 = v47;
    if ((v17 & 1) != 0)
    {
      id v22 = a8;
      outlined retain of String?((uint64_t)v46);
      id v23 = objc_msgSend(v16, sel_localizations);
      if (!v23) {
        id v23 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      }
      id v24 = (void *)objc_opt_self();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v25 = swift_allocObject();
      __int128 v26 = v48;
      *(_OWORD *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(_OWORD *)(v25 + 32) = v26;
      id v27 =  objc_msgSend( v24,  sel_preferredLocalizationsFromArray_forPreferences_,  v23,  _ContiguousArrayBuffer._asCocoaArray()());

      swift_unknownObjectRelease();
      if (v27)
      {
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }

        uint64_t v28 = swift_dynamicCastClass();
        if (v28)
        {
          id v18 = (_OWORD *)v28;
        }

        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v27, sel_copy);
          unint64_t v29 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          id v18 = (_OWORD *)specialized _arrayForceCast<A, B>(_:)(v29);

          swift_bridgeObjectRelease();
        }
      }

      else
      {
        id v18 = (_OWORD *)MEMORY[0x18961AFE8];
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      id v18 = (_OWORD *)swift_allocObject();
      __int128 v19 = v47;
      v18[1] = xmmword_183720D90;
      _OWORD v18[2] = v19;
      id v20 = a8;
      outlined retain of String?((uint64_t)v46);
    }
  }

  else
  {
    id v21 = a8;
    id v18 = 0LL;
  }

  uint64_t v30 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v31 = String._bridgeToObjectiveCImpl()();
  if (a7)
  {
    uint64_t v32 = (void *)String._bridgeToObjectiveCImpl()();
    if (!v18) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }

  uint64_t v32 = 0LL;
  if (v18) {
LABEL_22:
  }
    id v18 = (_OWORD *)_ContiguousArrayBuffer._asCocoaArray()();
LABEL_24:
  id v33 = objc_msgSend(v16, sel_localizedStringForKey_value_table_localizations_, v30, v31, v32, v18);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  uint64_t v36 = v35;

  if (!*(void *)(v41 + 16))
  {
    outlined init with take of LocalePreferences?( (uint64_t)&v43 + 8,  (uint64_t)v45,  &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    outlined init with take of LocalePreferences?( (uint64_t)v45,  (uint64_t)&v49,  &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    if ((v50 & 1) != 0
      || (outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber(&v49, (uint64_t)v51),
          String._bridgeToObjectiveCImpl()(),
          id v38 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v38))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }

  swift_unknownObjectRetain();
  uint64_t v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v41);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of String.LocalizationOptions((uint64_t)&v43);
  id v34 = specialized withVaList<A>(_:_:)(v37, (uint64_t)v34, v36, v14, v40);
  outlined release of String.LocalizationOptions((uint64_t)&v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
LABEL_30:

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of String.LocalizationOptions((uint64_t)&v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v34;
}

void *String.init(localized:options:table:bundle:localization:locale:comment:)( uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  char v11 = *((_BYTE *)a2 + 16);
  char v42 = *((_BYTE *)a2 + 17);
  uint64_t v12 = a2[4];
  char v13 = *((_BYTE *)a2 + 40);
  uint64_t v14 = *a8;
  uint64_t v43 = a8[1];
  if (a7)
  {
    uint64_t v15 = a7;
  }

  else
  {
    a6 = a2[3];
    swift_bridgeObjectRetain();
    uint64_t v15 = v12;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46[2] = v9;
  v46[3] = v10;
  char v47 = v11;
  char v48 = v42;
  uint64_t v49 = a6;
  uint64_t v50 = v15;
  char v51 = v13;
  if (v9) {
    uint64_t v17 = v9;
  }
  else {
    uint64_t v17 = MEMORY[0x18961AFE8];
  }
  v46[0] = v17;
  v46[1] = 0LL;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n( v8,  v46,  v14,  v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a5)
  {
    id v18 = a5;
    if (v15) {
      goto LABEL_9;
    }
LABEL_18:
    id v26 = a5;
    uint64_t v25 = 0LL;
    goto LABEL_22;
  }

  id v18 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  if (!v15) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v13 & 1) != 0)
  {
    id v19 = a5;
    swift_bridgeObjectRetain();
    id v20 = objc_msgSend(v18, sel_localizations);
    if (!v20) {
      id v20 = (id)_ContiguousArrayBuffer._asCocoaArray()();
    }
    id v21 = (void *)objc_opt_self();
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    *(void *)(v22 + 32) = a6;
    *(void *)(v22 + 40) = v15;
    id v23 =  objc_msgSend( v21,  sel_preferredLocalizationsFromArray_forPreferences_,  v20,  _ContiguousArrayBuffer._asCocoaArray()());

    swift_unknownObjectRelease();
    if (v23)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      uint64_t v24 = swift_dynamicCastClass();
      if (v24)
      {
        uint64_t v25 = v24;
      }

      else
      {
        swift_unknownObjectRelease();
        objc_msgSend(v23, sel_copy);
        unint64_t v28 = _bridgeCocoaArray<A>(_:)();
        swift_unknownObjectRelease();
        uint64_t v25 = specialized _arrayForceCast<A, B>(_:)(v28);

        swift_bridgeObjectRelease();
      }
    }

    else
    {
      uint64_t v25 = MEMORY[0x18961AFE8];
    }
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    *(void *)(v25 + 32) = a6;
    *(void *)(v25 + 40) = v15;
    id v27 = a5;
    swift_bridgeObjectRetain();
  }

void InflectionConcept.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0LL);
    specialized Array<A>.hash(into:)(a1, v3);
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InflectionConcept.CodingKeys()
{
  if (*v0) {
    return 0x657A696C61636F6CLL;
  }
  else {
    return 0x41664F736D726574LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InflectionConcept.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized InflectionConcept.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InflectionConcept.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InflectionConcept.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InflectionConcept.LocalizedPhraseCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InflectionConcept.LocalizedPhraseCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InflectionConcept.TermsOfAddressCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InflectionConcept.TermsOfAddressCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t InflectionConcept.encode(to:)(void *a1)
{
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InflectionConcept.LocalizedPhraseCodingKeys>);
  uint64_t v15 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InflectionConcept.TermsOfAddressCodingKeys>);
  uint64_t v16 = *(void *)(v18 - 8);
  MEMORY[0x1895F8858](v18);
  Swift::String v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InflectionConcept.CodingKeys>);
  uint64_t v20 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *v1;
  v14[1] = v1[1];
  char v10 = *((_BYTE *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v10 & 1) != 0)
  {
    char v23 = 1;
    lazy protocol witness table accessor for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v11 = v17;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v4, v11);
  }

  else
  {
    char v22 = 0;
    lazy protocol witness table accessor for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v21 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TermOfAddress]);
    lazy protocol witness table accessor for type [TermOfAddress] and conformance <A> [A]( &lazy protocol witness table cache variable for type [TermOfAddress] and conformance <A> [A],  (uint64_t (*)(void))lazy protocol witness table accessor for type TermOfAddress and conformance TermOfAddress,  MEMORY[0x189618448]);
    uint64_t v12 = v18;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v12);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v9, v7);
}

Swift::Int InflectionConcept.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0LL);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }

  return Hasher._finalize()();
}

uint64_t InflectionConcept.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InflectionConcept.LocalizedPhraseCodingKeys>);
  uint64_t v43 = *(void *)(v41 - 8);
  MEMORY[0x1895F8858](v41);
  char v42 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InflectionConcept.TermsOfAddressCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InflectionConcept.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  __int128 v44 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys();
  uint64_t v13 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    uint64_t v38 = v5;
    uint64_t v39 = v4;
    uint64_t v14 = v42;
    uint64_t v15 = v43;
    uint64_t v45 = v9;
    uint64_t v16 = v11;
    uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v18 = v17;
    uint64_t v19 = v8;
    if (*(void *)(v17 + 16) == 1LL)
    {
      char v20 = *(_BYTE *)(v17 + 32);
      if ((v20 & 1) != 0)
      {
        char v48 = 1;
        lazy protocol witness table accessor for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys();
        uint64_t v21 = v14;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v39 = v18;
        uint64_t v22 = v41;
        uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v24 = v45;
        uint64_t v31 = v23;
        uint64_t v32 = *(void (**)(char *, uint64_t))(v15 + 8);
        uint64_t v34 = v33;
        v32(v21, v22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v19);
        uint64_t v35 = v34;
      }

      else
      {
        char v47 = 0;
        lazy protocol witness table accessor for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys();
        uint64_t v29 = v16;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TermOfAddress]);
        lazy protocol witness table accessor for type [TermOfAddress] and conformance <A> [A]( &lazy protocol witness table cache variable for type [TermOfAddress] and conformance <A> [A],  (uint64_t (*)(void))lazy protocol witness table accessor for type TermOfAddress and conformance TermOfAddress,  MEMORY[0x189618478]);
        uint64_t v30 = v39;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v30);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v29, v19);
        uint64_t v35 = 0LL;
        uint64_t v31 = v46;
      }

      uint64_t v36 = v40;
      *uint64_t v40 = v31;
      v36[1] = v35;
      *((_BYTE *)v36 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v20;
    }

    else
    {
      uint64_t v25 = type metadata accessor for DecodingError();
      swift_allocError();
      id v27 = v26;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *id v27 = &type metadata for InflectionConcept;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  *MEMORY[0x189619358],  v25);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v8);
    }
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InflectionConcept()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0LL);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance InflectionConcept(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0LL);
    specialized Array<A>.hash(into:)(a1, v3);
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InflectionConcept()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0LL);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }

  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance InflectionConcept@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return InflectionConcept.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InflectionConcept(void *a1)
{
  return InflectionConcept.encode(to:)(a1);
}

uint64_t AttributedString.LocalizationOptions.replacements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttributedString.LocalizationOptions.replacements.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions.replacements.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.LocalizationOptions.concepts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttributedString.LocalizationOptions.concepts.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions.concepts.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.LocalizationOptions.inflect.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t AttributedString.LocalizationOptions.inflect.setter(uint64_t result)
{
  *(_BYTE *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions.inflect.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.LocalizationOptions.applyReplacementIndexAttribute.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t AttributedString.LocalizationOptions.applyReplacementIndexAttribute.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions.applyReplacementIndexAttribute.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void String.LocalizationOptions._PluralizationNumber.hash(into:)()
{
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    Swift::UInt v1 = 1LL;
  }

  else
  {
    Swift::UInt v1 = *(void *)v0;
    Hasher._combine(_:)(0LL);
  }

  Hasher._combine(_:)(v1);
}

BOOL static String.LocalizationOptions._PluralizationNumber.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 8) & 1) != 0) {
    return (*(_BYTE *)(a2 + 8) & 1) != 0;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) != 0) {
    return 0LL;
  }
  return *(void *)a1 == *(void *)a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  if (*v0) {
    return 0x6E776F6E6B6E75LL;
  }
  else {
    return 0x6369666963657073LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationOptions._PluralizationNumber.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t AttributedString.LocalizationOptions._PluralizationNumber.encode(to:)(void *a1)
{
  char v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys>);
  uint64_t v17 = *(void *)(v4 - 8);
  uint64_t v18 = v4;
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys>);
  uint64_t v16 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys>);
  uint64_t v19 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *v2;
  char v13 = *((_BYTE *)v2 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v13 & 1) != 0)
  {
    char v21 = 1;
    lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v18);
  }

  else
  {
    char v20 = 0;
    lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v7);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v12, v10);
}

Swift::Int String.LocalizationOptions._PluralizationNumber.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0) {
    Swift::UInt v1 = 1LL;
  }
  else {
    Hasher._combine(_:)(0LL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AttributedString.LocalizationOptions._PluralizationNumber.init(from:)@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v28 = a2;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys>);
  uint64_t v25 = *(void *)(v27 - 8);
  MEMORY[0x1895F8858](v27);
  uint64_t v29 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys>);
  uint64_t v4 = *(void *)(v26 - 8);
  MEMORY[0x1895F8858](v26);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys();
  uint64_t v11 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11) {
    goto LABEL_7;
  }
  uint64_t v12 = v29;
  uint64_t v23 = v4;
  uint64_t v24 = v8;
  uint64_t v30 = a1;
  uint64_t v13 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v13 + 16) != 1LL)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v18 = &type metadata for AttributedString.LocalizationOptions._PluralizationNumber;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v18,  *MEMORY[0x189619358],  v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
    a1 = v30;
LABEL_7:
    uint64_t v19 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v19);
  }

  char v14 = *(_BYTE *)(v13 + 32);
  if ((v14 & 1) != 0)
  {
    char v32 = 1;
    lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
    uint64_t v15 = 0LL;
  }

  else
  {
    char v31 = 0;
    lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v21 = v26;
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
  }

  uint64_t v22 = v28;
  *unint64_t v28 = v15;
  *((_BYTE *)v22 + 8) = v14;
  uint64_t v19 = (uint64_t)v30;
  return __swift_destroy_boxed_opaque_existential_1(v19);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationOptions._PluralizationNumber()
{
  Swift::UInt v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0) {
    Swift::UInt v1 = 1LL;
  }
  else {
    Hasher._combine(_:)(0LL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributedString.LocalizationOptions._PluralizationNumber@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return AttributedString.LocalizationOptions._PluralizationNumber.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributedString.LocalizationOptions._PluralizationNumber( void *a1)
{
  return AttributedString.LocalizationOptions._PluralizationNumber.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.LocalizationOptions._PluralizationNumber( uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a1 + 8);
  uint64_t result = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 1) == 0) {
    return (*(void *)a1 == *(void *)a2) & ~(_DWORD)result;
  }
  return result;
}

void AttributedString.LocalizationOptions._pluralizationNumber.getter(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 32);
  char v3 = *(_BYTE *)(v1 + 33);
  *(void *)a1 = *(void *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 9) = v3;
}

uint64_t AttributedString.LocalizationOptions._pluralizationNumber.setter(uint64_t result)
{
  char v2 = *(_BYTE *)(result + 8);
  char v3 = *(_BYTE *)(result + 9);
  *(void *)(v1 + 2os_unfair_lock_unlock(*v0 + 4) = *(void *)result;
  *(_BYTE *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 33) = v3;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions._pluralizationNumber.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.LocalizationOptions._localization.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttributedString.LocalizationOptions._localization.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions._localization.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void AttributedString.LocalizationOptions.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_WORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
  *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = 0LL;
  *(_WORD *)(a1 + 32) = 256;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(_BYTE *)(a1 + 56) = 0;
}

uint64_t static AttributedString.LocalizationOptions.termsOfAddressConcept(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(_WORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
  *(void *)(a2 + 2os_unfair_lock_unlock(*v0 + 4) = 0LL;
  *(_WORD *)(a2 + 32) = 256;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 48) = 0LL;
  *(_BYTE *)(a2 + 56) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InflectionConcept>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = 0LL;
  *(_BYTE *)(v4 + 48) = 0;
  *(void *)(a2 + 8) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t static AttributedString.LocalizationOptions.localizedPhraseConcept(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0LL;
  *(_WORD *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
  *(void *)(a3 + 2os_unfair_lock_unlock(*v0 + 4) = 0LL;
  *(_WORD *)(a3 + 32) = 256;
  *(void *)(a3 + 40) = 0LL;
  *(void *)(a3 + 48) = 0LL;
  *(_BYTE *)(a3 + 56) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InflectionConcept>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = a2;
  *(_BYTE *)(v6 + 48) = 1;
  *(void *)(a3 + 8) = v6;
  return swift_bridgeObjectRetain();
}

uint64_t AttributedString.LocalizationOptions._nsOptions.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 17);
  uint64_t v2 = *(void *)(v0 + 24);
  char v3 = *(_BYTE *)(v0 + 32);
  char v4 = *(_BYTE *)(v0 + 33);
  uint64_t result = (uint64_t)objc_msgSend(objc_allocWithZone((Class)_NSStringFormattingOptions), sel_init);
  if (result)
  {
    uint64_t v6 = (void *)result;
    if ((v4 & 1) != 0)
    {
      objc_msgSend((id)result, sel_setPluralizationNumber_, 0);
    }

    else
    {
      id v7 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
      if ((v3 & 1) != 0) {
        uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v8 = v2;
      }
      id v9 = objc_msgSend(v7, sel_initWithInteger_, v8);
      objc_msgSend(v6, sel_setPluralizationNumber_, v9);
    }

    if (v1) {
      return 2LL;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t AttributedString.FormattingOptions.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t AttributedString.FormattingOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static AttributedString.FormattingOptions.applyReplacementIndexAttribute.getter(void *a1@<X8>)
{
  *a1 = 1LL;
}

uint64_t AttributedString.InterpolationOptions.rawValue.getter()
{
  return *(void *)v0;
}

void AttributedString.init(localized:options:table:bundle:locale:comment:)( uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v11 = *a1;
  uint64_t v12 = (void *)a1[1];
  uint64_t v13 = (void *)a1[2];
  char v14 = *a2;
  uint64_t v16 = *a6;
  uint64_t v15 = a6[1];
  v19[0] = 0LL;
  v19[1] = 0LL;
  char v20 = 1;
  char v21 = v14 & 1;
  uint64_t v22 = 0LL;
  __int16 v23 = 256;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  char v26 = 0;
  if (!v16)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v18 = static LocaleCache.cache;
    uint64_t v16 = LocaleCache.current.getter();
    uint64_t v15 = v17;
  }

  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( 0LL,  0LL,  (uint64_t)v19,  a3,  a4,  (uint64_t)a5,  v16,  v15,  1u,  v11,  v12,  v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a7 = v18;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)@<X0>( __int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, __int128 *a6@<X5>, void *a7@<X8>, uint64_t a8, uint64_t a9, _OWORD *a10, void *a11)
{
  uint64_t v12 = *((void *)a1 + 2);
  char v13 = *((_BYTE *)a2 + 16);
  char v14 = *((_BYTE *)a2 + 17);
  uint64_t v15 = *((void *)a2 + 3);
  char v16 = *((_BYTE *)a2 + 32);
  char v17 = *((_BYTE *)a2 + 33);
  char v18 = *((_BYTE *)a2 + 56);
  __int128 v31 = *a1;
  uint64_t v32 = v12;
  __int128 v19 = *a2;
  char v24 = v13;
  char v25 = v14;
  uint64_t v26 = v15;
  char v27 = v16;
  char v28 = v17;
  __int128 v29 = *(__int128 *)((char *)a2 + 40);
  char v30 = v18;
  __int128 v22 = *a6;
  __int128 v23 = v19;
  AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)( (uint64_t *)&v31,  (uint64_t *)&v23,  a3,  a4,  a5,  (uint64_t *)&v22,  &v33,  v21,  (uint64_t)a10,  a10,  a11);
  uint64_t result = swift_release();
  *a7 = v33;
  return result;
}

void AttributedString.init(localized:defaultValue:options:table:bundle:locale:comment:)( uint64_t *a1@<X3>, char *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, uint64_t *a6@<X8>, uint64_t *a7)
{
  uint64_t v11 = *a1;
  uint64_t v10 = (void *)a1[1];
  uint64_t v12 = (void *)a1[2];
  char v13 = *a2;
  uint64_t v14 = *a7;
  uint64_t v15 = a7[1];
  v22[0] = 0LL;
  v22[1] = 0LL;
  char v23 = 1;
  char v24 = v13 & 1;
  uint64_t v25 = 0LL;
  __int16 v26 = 256;
  uint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  char v29 = 0;
  uint64_t v16 = StaticString.description.getter();
  uint64_t v18 = v17;
  if (!v14)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v21 = static LocaleCache.cache;
    uint64_t v14 = LocaleCache.current.getter();
    uint64_t v15 = v19;
  }

  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( v16,  v18,  (uint64_t)v22,  a3,  a4,  (uint64_t)a5,  v14,  v15,  1u,  v11,  v10,  v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *a6 = v21;
}

uint64_t AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)@<X0>( __int128 *a1@<X3>, __int128 *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, void *a6@<X8>, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, void *a13)
{
  uint64_t v14 = *((void *)a1 + 2);
  char v15 = *((_BYTE *)a2 + 16);
  char v16 = *((_BYTE *)a2 + 17);
  uint64_t v17 = *((void *)a2 + 3);
  char v18 = *((_BYTE *)a2 + 32);
  char v19 = *((_BYTE *)a2 + 33);
  char v20 = *((_BYTE *)a2 + 56);
  __int128 v35 = *a1;
  uint64_t v36 = v14;
  __int128 v21 = *a2;
  char v28 = v15;
  char v29 = v16;
  uint64_t v30 = v17;
  char v31 = v18;
  char v32 = v19;
  __int128 v33 = *(__int128 *)((char *)a2 + 40);
  char v34 = v20;
  __int128 v26 = *a7;
  __int128 v27 = v21;
  AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)( (uint64_t *)&v35,  (uint64_t *)&v27,  a3,  a4,  a5,  &v37,  (uint64_t *)&v26,  v23,  v24,  v25,  (uint64_t)a12,  a12,  a13);
  uint64_t result = swift_release();
  *a6 = v37;
  return result;
}

uint64_t AttributedString.init(localized:options:table:bundle:locale:comment:)@<X0>( uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v11 = *a1;
  uint64_t v12 = (void *)a1[1];
  char v13 = (void *)a1[2];
  __int128 v14 = a2[1];
  v20[0] = *a2;
  v20[1] = v14;
  v21[0] = a2[2];
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)((char *)a2 + 41);
  uint64_t v15 = *a6;
  if (*a6)
  {
    uint64_t v16 = a6[1];
  }

  else
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v19 = static LocaleCache.cache;
    uint64_t v15 = LocaleCache.current.getter();
    uint64_t v16 = v17;
  }

  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( 0LL,  0LL,  (uint64_t)v20,  a3,  a4,  (uint64_t)a5,  v15,  v16,  1u,  v11,  v12,  v13);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  outlined release of AttributedString.LocalizationOptions((uint64_t)v20);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a7 = v19;
  return result;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X5>, void *a7@<X8>, uint64_t a8, uint64_t a9, _OWORD *a10, void *a11)
{
  uint64_t v13 = a3;
  __int128 v14 = a10;
  uint64_t v15 = a9;
  uint64_t v16 = a1[1];
  uint64_t v17 = a1[2];
  uint64_t v19 = *a2;
  uint64_t v18 = a2[1];
  char v20 = *((_BYTE *)a2 + 16);
  char v21 = *((_BYTE *)a2 + 17);
  uint64_t v22 = a2[3];
  char v23 = *((_BYTE *)a2 + 32);
  char v24 = *((_BYTE *)a2 + 33);
  uint64_t v25 = a2[5];
  uint64_t v26 = a2[6];
  char v27 = *((_BYTE *)a2 + 56);
  uint64_t v29 = *a6;
  uint64_t v28 = a6[1];
  uint64_t v43 = *a1;
  uint64_t v44 = v16;
  uint64_t v45 = v17;
  v34[0] = v19;
  v34[1] = v18;
  char v35 = v20;
  char v36 = v21;
  uint64_t v37 = v22;
  char v38 = v23;
  char v39 = v24;
  uint64_t v40 = v25;
  uint64_t v41 = v26;
  char v42 = v27;
  if (!v29)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v33[0] = static LocaleCache.cache;
    uint64_t v29 = LocaleCache.current.getter();
    uint64_t v15 = a9;
    uint64_t v13 = a3;
    __int128 v14 = a10;
  }

  v33[0] = v29;
  v33[1] = v28;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( 0LL,  0LL,  (uint64_t)v34,  v13,  a4,  (uint64_t)a5,  (uint64_t)v33,  v15,  1u,  v14,  a11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a7 = v46;
  return result;
}

uint64_t AttributedString.init(localized:defaultValue:options:table:bundle:locale:comment:)@<X0>( uint64_t *a1@<X3>, _OWORD *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, uint64_t *a6@<X8>, uint64_t *a7)
{
  uint64_t v11 = *a1;
  uint64_t v10 = (void *)a1[1];
  uint64_t v12 = (void *)a1[2];
  __int128 v13 = a2[1];
  v23[0] = *a2;
  v23[1] = v13;
  v24[0] = a2[2];
  *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)a2 + 41);
  uint64_t v14 = *a7;
  uint64_t v15 = a7[1];
  uint64_t v16 = StaticString.description.getter();
  uint64_t v18 = v17;
  if (!v14)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v22 = static LocaleCache.cache;
    uint64_t v14 = LocaleCache.current.getter();
    uint64_t v15 = v19;
  }

  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( v16,  v18,  (uint64_t)v23,  a3,  a4,  (uint64_t)a5,  v14,  v15,  1u,  v11,  v10,  v12);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined release of AttributedString.LocalizationOptions((uint64_t)v23);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a6 = v22;
  return result;
}

uint64_t AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)@<X0>( uint64_t *a1@<X3>, uint64_t *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, void *a6@<X8>, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, void *a13)
{
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  char v17 = *((_BYTE *)a2 + 16);
  char v33 = *((_BYTE *)a2 + 17);
  uint64_t v18 = a2[3];
  char v19 = *((_BYTE *)a2 + 32);
  char v20 = *((_BYTE *)a2 + 33);
  uint64_t v22 = a2[5];
  uint64_t v21 = a2[6];
  char v23 = *((_BYTE *)a2 + 56);
  uint64_t v24 = *a7;
  uint64_t v32 = a7[1];
  uint64_t v48 = *a1;
  uint64_t v49 = v13;
  uint64_t v50 = v14;
  uint64_t v25 = StaticString.description.getter();
  v39[0] = v15;
  v39[1] = v16;
  char v40 = v17;
  char v41 = v33;
  uint64_t v42 = v18;
  char v43 = v19;
  char v44 = v20;
  uint64_t v45 = v22;
  uint64_t v46 = v21;
  char v47 = v23;
  if (v24)
  {
    uint64_t v27 = v32;
  }

  else
  {
    uint64_t v28 = v25;
    uint64_t v29 = v26;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v38[0] = static LocaleCache.cache;
    uint64_t v24 = LocaleCache.current.getter();
    uint64_t v27 = v30;
    uint64_t v26 = v29;
    uint64_t v25 = v28;
  }

  v38[0] = v24;
  v38[1] = v27;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( v25,  v26,  (uint64_t)v39,  a3,  a4,  (uint64_t)a5,  (uint64_t)v38,  a11,  1u,  a12,  a13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a6 = v51;
  return result;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)@<X0>( __int128 *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, __int128 *a6@<X5>, void *a7@<X8>, uint64_t a8, uint64_t a9, _OWORD *a10, void *a11)
{
  uint64_t v12 = *((void *)a1 + 2);
  char v13 = *a2;
  __int128 v25 = *a1;
  uint64_t v26 = v12;
  v17[0] = 0LL;
  v17[1] = 0LL;
  char v18 = 1;
  char v19 = v13 & 1;
  uint64_t v20 = 0LL;
  __int16 v21 = 256;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  char v24 = 0;
  __int128 v16 = *a6;
  AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)( (uint64_t *)&v25,  v17,  a3,  a4,  a5,  (uint64_t *)&v16,  &v27,  v15,  (uint64_t)a10,  a10,  a11);
  uint64_t result = swift_release();
  *a7 = v27;
  return result;
}

uint64_t AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)@<X0>( __int128 *a1@<X3>, char *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, void *a6@<X8>, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, void *a13)
{
  uint64_t v14 = *((void *)a1 + 2);
  char v15 = *a2;
  __int128 v29 = *a1;
  uint64_t v30 = v14;
  v21[0] = 0LL;
  v21[1] = 0LL;
  char v22 = 1;
  char v23 = v15 & 1;
  uint64_t v24 = 0LL;
  __int16 v25 = 256;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  char v28 = 0;
  __int128 v20 = *a7;
  AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)( (uint64_t *)&v29,  v21,  a3,  a4,  a5,  &v31,  (uint64_t *)&v20,  v17,  v18,  v19,  (uint64_t)a12,  a12,  a13);
  uint64_t result = swift_release();
  *a6 = v31;
  return result;
}

void AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)( uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X5>, void *a7@<X8>, uint64_t a8, uint64_t a9, _OWORD *a10, void *a11)
{
  uint64_t v14 = a1[1];
  uint64_t v15 = a1[2];
  char v16 = *a2;
  uint64_t v18 = *a6;
  uint64_t v17 = a6[1];
  uint64_t v29 = *a1;
  uint64_t v30 = v14;
  uint64_t v31 = v15;
  v21[0] = 0LL;
  v21[1] = 0LL;
  char v22 = 1;
  char v23 = v16 & 1;
  uint64_t v24 = 0LL;
  __int16 v25 = 256;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  char v28 = 0;
  if (!v18)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v20[0] = static LocaleCache.cache;
    uint64_t v18 = LocaleCache.current.getter();
  }

  v20[0] = v18;
  v20[1] = v17;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( 0LL,  0LL,  (uint64_t)v21,  a3,  a4,  (uint64_t)a5,  (uint64_t)v20,  a9,  1u,  a10,  a11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a7 = v32;
}

void specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, id a11, void *a12)
{
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  unint64_t v20 = v19;
  uint64_t v22 = v21;
  id v674 = (id)v23;
  v641 = v24;
  uint64_t v1093 = *MEMORY[0x1895F89C0];
  v675 = v26;
  v650 = v12;
  if (!v26)
  {
    a12 = (void *)swift_bridgeObjectRetain();
    uint64_t v12 = v650;
    id v674 = a11;
    v675 = a12;
  }

  v669 = a11;
  v671 = a12;
  if (*v12) {
    unint64_t v27 = *v12;
  }
  else {
    unint64_t v27 = MEMORY[0x18961AFE8];
  }
  v744[0] = v27;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v640 = v14;
  v673 = (uint64_t *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n( a10,  v744,  v16,  v14);
  unint64_t v28 = 0LL;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v639 = v16;
  swift_unknownObjectRelease();
  if (v18) {
    id v648 = v18;
  }
  else {
    id v648 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  }
  unint64_t v29 = v20;
  uint64_t v30 = v22;
  id v31 = v18;
  swift_bridgeObjectRetain();
  uint64_t v32 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v32 < 1)
  {
    unint64_t v29 = 0xEB00000000656C62LL;
    uint64_t v30 = 0x617A696C61636F4CLL;
  }

  else
  {
    if (!v29)
    {
      __break(1u);
LABEL_343:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1832E9800LL);
    }

    swift_bridgeObjectRetain();
  }

  LODWORD(v672) = a9;
  uint64_t v33 = v650[6];
  if (v33)
  {
    uint64_t v34 = v650[5];
    if ((v650[7] & 1) != 0)
    {
      swift_bridgeObjectRetain();
      id v36 = objc_msgSend(v648, sel_localizations);
      if (!v36) {
        id v36 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      }
      uint64_t v37 = (void *)objc_opt_self();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(v38 + 32) = v34;
      *(void *)(v38 + 40) = v33;
      id v39 =  objc_msgSend( v37,  sel_preferredLocalizationsFromArray_forPreferences_,  v36,  _ContiguousArrayBuffer._asCocoaArray()());

      swift_unknownObjectRelease();
      if (v39)
      {
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }

        uint64_t v40 = swift_dynamicCastClass();
        unint64_t v28 = 0LL;
        if (v40)
        {
          uint64_t v41 = v40;

          uint64_t v35 = v41;
        }

        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v39, sel_copy);
          unint64_t v42 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          uint64_t v43 = specialized _arrayForceCast<A, B>(_:)(v42);

          uint64_t v35 = v43;
          swift_bridgeObjectRelease();
        }
      }

      else
      {
        uint64_t v35 = MEMORY[0x18961AFE8];
        unint64_t v28 = 0LL;
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(v35 + 32) = v34;
      *(void *)(v35 + 40) = v33;
      swift_bridgeObjectRetain();
    }
  }

  else
  {
    uint64_t v35 = 0LL;
  }

  swift_bridgeObjectRetain();
  id v44 = objc_msgSend(v648, sel_preferredLocalizations);
  uint64_t v45 = (void *)MEMORY[0x18961AFE8];
  v670 = (_OWORD *)v29;
  if (v44)
  {
    uint64_t v46 = v44;
    uint64_t v47 = v35;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v48 = swift_dynamicCastClass();
    if (!v48)
    {
      swift_unknownObjectRelease();
      objc_msgSend(v46, sel_copy);
      unint64_t v49 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      uint64_t v45 = (void *)specialized _arrayForceCast<A, B>(_:)(v49);

      swift_bridgeObjectRelease();
      uint64_t v35 = v47;
      if (!v47)
      {
        swift_bridgeObjectRelease();
        unint64_t v28 = 0LL;
        goto LABEL_38;
      }

      unint64_t v28 = 0LL;
LABEL_35:
      char v50 = specialized static Array<A>.== infix(_:_:)((void *)v35, v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v50 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v35 = 0LL;
      }

      goto LABEL_38;
    }

    uint64_t v45 = (void *)v48;

    unint64_t v28 = 0LL;
  }

  if (v35) {
    goto LABEL_35;
  }
  swift_bridgeObjectRelease();
LABEL_38:
  uint64_t v647 = v35;
  v667 = (void *)v30;
  if ((v672 & 1) != 0)
  {
    uint64_t v51 = String._bridgeToObjectiveCImpl()();
    uint64_t v52 = String._bridgeToObjectiveCImpl()();
    uint64_t v53 = v35;
    uint64_t v54 = String._bridgeToObjectiveCImpl()();
    if (v53)
    {
      swift_bridgeObjectRetain();
      uint64_t v55 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
    }

    else
    {
      uint64_t v55 = 0LL;
    }

    *(void *)&v744[0] = 0LL;
    *(void *)&v743[0] = 0LL;
    id v56 =  objc_msgSend( v648,  sel__localizedStringNoCacheNoMarkdownParsingForKey_value_table_localizations_actualTableURL_formatSpecifierConfiguration_,  v51,  v52,  v54,  v55,  v744,  v743);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    __int128 v57 = *(void **)&v744[0];
    if (!v56)
    {
      id v64 = *(id *)&v743[0];
      id v65 = v57;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v744, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v743);

      swift_bridgeObjectRelease();
      unint64_t *v641 = *(void *)&v743[0];
      return;
    }

    id v58 = *(_OWORD **)&v743[0];
    id v59 = *(id *)&v743[0];
    v643 = v57;
    id v60 = v57;
    swift_bridgeObjectRelease();
    objc_opt_self();
    unint64_t v61 = (void *)swift_dynamicCastObjCClassUnconditional();
    id v674 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v675 = v62;

    uint64_t v35 = v647;
    if (v673[2])
    {
      *(void *)&v826[0] = MEMORY[0x18961AFF0];
      LODWORD(v671) = 1;
      unint64_t v28 = 0LL;
      if (!v59)
      {
        v669 = 0LL;
        goto LABEL_56;
      }

void String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, _OWORD *a10, void *a11)
{
  v682 = (void *)v12;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v688 = v17;
  unint64_t v19 = v18;
  unint64_t v649 = v20;
  uint64_t v1109 = *MEMORY[0x1895F89C0];
  uint64_t v22 = *(void **)v21;
  uint64_t v644 = *(void *)(v21 + 8);
  LODWORD(v653) = *(unsigned __int8 *)(v21 + 16);
  int v648 = *(unsigned __int8 *)(v21 + 17);
  v675 = *(__int128 **)(v21 + 24);
  LODWORD(v67os_unfair_lock_unlock(*v0 + 4) = *(unsigned __int8 *)(v21 + 32);
  LODWORD(v677) = *(unsigned __int8 *)(v21 + 33);
  id v686 = *(id *)(v21 + 40);
  unint64_t v679 = *(_OWORD **)(v21 + 48);
  LODWORD(v678) = *(unsigned __int8 *)(v21 + 56);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  uint64_t v26 = *v11;
  v685 = (_OWORD *)v11[1];
  uint64_t v689 = v27;
  id v684 = (id)v11[2];
  if (!v27)
  {
    unint64_t v19 = v685;
    uint64_t v689 = swift_bridgeObjectRetain();
  }

  if (v22) {
    unint64_t v28 = (unint64_t)v22;
  }
  else {
    unint64_t v28 = MEMORY[0x18961AFE8];
  }
  v756[0] = v28;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v676 = v22;
  swift_bridgeObjectRetain();
  uint64_t v642 = v24;
  v687 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n( v26,  v756,  v25,  v24);
  v660 = 0LL;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v641 = v25;
  swift_unknownObjectRelease();
  if (v14) {
    id v659 = v14;
  }
  else {
    id v659 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  }
  unint64_t v29 = v19;
  id v30 = v686;
  id v31 = v14;
  swift_bridgeObjectRetain();
  uint64_t v32 = String.count.getter();
  swift_bridgeObjectRelease();
  LOBYTE(v19) = (_BYTE)v677;
  if (v32 < 1)
  {
    uint64_t v16 = (void *)0xEB00000000656C62LL;
    uint64_t v688 = 0x617A696C61636F4CLL;
    id v33 = v679;
  }

  else
  {
    id v33 = v679;
    if (!v16)
    {
      __break(1u);
LABEL_330:
      LODWORD(v608) = 0;
      uint64_t v607 = 347LL;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1832EEB50LL);
    }

    swift_bridgeObjectRetain();
  }

  LODWORD(v686) = a9;
  uint64_t v680 = v16;
  if (v33)
  {
    if ((_DWORD)v678)
    {
      swift_bridgeObjectRetain();
      id v34 = objc_msgSend(v659, sel_localizations);
      if (!v34) {
        id v34 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      }
      uint64_t v35 = (void *)objc_opt_self();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v36 = swift_allocObject();
      *(_OWORD *)(v36 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(v36 + 32) = v30;
      *(void *)(v36 + 40) = v33;
      id v37 =  objc_msgSend( v35,  sel_preferredLocalizationsFromArray_forPreferences_,  v34,  _ContiguousArrayBuffer._asCocoaArray()());

      swift_unknownObjectRelease();
      if (v37)
      {
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }

        uint64_t v38 = swift_dynamicCastClass();
        if (v38)
        {
          uint64_t v39 = v38;

          uint64_t v40 = v39;
        }

        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v37, sel_copy);
          unint64_t v41 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          uint64_t v40 = specialized _arrayForceCast<A, B>(_:)(v41);

          swift_bridgeObjectRelease();
        }
      }

      else
      {
        uint64_t v40 = MEMORY[0x18961AFE8];
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v40 = swift_allocObject();
      *(_OWORD *)(v40 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(v40 + 32) = v30;
      *(void *)(v40 + 40) = v33;
      swift_bridgeObjectRetain();
    }
  }

  else
  {
    uint64_t v40 = 0LL;
  }

  swift_bridgeObjectRetain();
  id v42 = objc_msgSend(v659, sel_preferredLocalizations);
  uint64_t v43 = (void *)MEMORY[0x18961AFE8];
  if (!v42)
  {
LABEL_31:
    if (v40) {
      goto LABEL_32;
    }
    goto LABEL_35;
  }

  id v44 = v42;
  uint64_t v45 = v40;
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v46 = swift_dynamicCastClass();
  if (v46)
  {
    uint64_t v43 = (void *)v46;

    goto LABEL_31;
  }

  swift_unknownObjectRelease();
  objc_msgSend(v44, sel_copy);
  unint64_t v48 = _bridgeCocoaArray<A>(_:)();
  swift_unknownObjectRelease();
  uint64_t v43 = (void *)specialized _arrayForceCast<A, B>(_:)(v48);

  swift_bridgeObjectRelease();
  uint64_t v40 = v45;
  if (v45)
  {
LABEL_32:
    char v47 = specialized static Array<A>.== infix(_:_:)((void *)v40, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v47 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v40 = 0LL;
    }

    goto LABEL_36;
  }

void AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)( uint64_t *a1@<X3>, char *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, void *a6@<X8>, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, void *a13)
{
  uint64_t v15 = a1[1];
  uint64_t v16 = a1[2];
  char v17 = *a2;
  uint64_t v19 = *a7;
  uint64_t v18 = a7[1];
  uint64_t v35 = *a1;
  uint64_t v36 = v15;
  uint64_t v37 = v16;
  uint64_t v20 = StaticString.description.getter();
  uint64_t v22 = v21;
  v27[0] = 0LL;
  v27[1] = 0LL;
  char v28 = 1;
  char v29 = v17 & 1;
  uint64_t v30 = 0LL;
  __int16 v31 = 256;
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  char v34 = 0;
  if (!v19)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v26[0] = static LocaleCache.cache;
    uint64_t v19 = LocaleCache.current.getter();
    uint64_t v18 = v23;
  }

  v26[0] = v19;
  v26[1] = v18;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( v20,  v22,  (uint64_t)v27,  a3,  a4,  (uint64_t)a5,  (uint64_t)v26,  a11,  1u,  a12,  a13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *a6 = v38;
}

void AttributedString.init(localized:options:table:bundle:localization:locale:comment:)( uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v13 = *a1;
  uint64_t v14 = (void *)a1[1];
  uint64_t v15 = (void *)a1[2];
  char v16 = *a2;
  uint64_t v17 = *a8;
  uint64_t v18 = a8[1];
  v22[0] = 0LL;
  v22[1] = 0LL;
  char v23 = 1;
  char v24 = v16 & 1;
  uint64_t v25 = 0LL;
  __int16 v26 = 256;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  char v29 = 0;
  if (v17)
  {
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v19 = one-time initialization token for cache;
    swift_bridgeObjectRetain();
    if (v19 != -1) {
      swift_once();
    }
    uint64_t v21 = static LocaleCache.cache;
    uint64_t v17 = LocaleCache.current.getter();
    uint64_t v18 = v20;
  }

  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( 0LL,  0LL,  (uint64_t)v22,  a3,  a4,  (uint64_t)a5,  v17,  v18,  1u,  v13,  v14,  v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a9 = v21;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)@<X0>( __int128 *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int128 *a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _OWORD *a14, void *a15)
{
  uint64_t v19 = *((void *)a1 + 2);
  char v20 = *a2;
  __int128 v32 = *a1;
  uint64_t v33 = v19;
  v24[0] = 0LL;
  v24[1] = 0LL;
  char v25 = 1;
  char v26 = v20 & 1;
  uint64_t v27 = 0LL;
  __int16 v28 = 256;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  char v31 = 0;
  __int128 v23 = *a8;
  swift_bridgeObjectRetain();
  AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)( (uint64_t *)&v32,  v24,  a3,  a4,  a5,  (uint64_t *)&v23,  &v34,  v22,  (uint64_t)a14,  a14,  a15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t result = swift_release();
  *a9 = v34;
  return result;
}

void AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)( uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _OWORD *a14, void *a15)
{
  uint64_t v17 = a1[1];
  uint64_t v18 = a1[2];
  char v19 = *a2;
  uint64_t v21 = *a8;
  uint64_t v20 = a8[1];
  uint64_t v35 = *a1;
  uint64_t v36 = v17;
  uint64_t v37 = v18;
  v27[0] = 0LL;
  v27[1] = 0LL;
  char v28 = 1;
  char v29 = v19 & 1;
  uint64_t v30 = 0LL;
  __int16 v31 = 256;
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  char v34 = 0;
  if (v21)
  {
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v22 = one-time initialization token for cache;
    swift_bridgeObjectRetain();
    if (v22 != -1) {
      swift_once();
    }
    v26[0] = static LocaleCache.cache;
    uint64_t v21 = LocaleCache.current.getter();
    uint64_t v20 = v23;
  }

  v26[0] = v21;
  v26[1] = v20;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( 0LL,  0LL,  (uint64_t)v27,  a3,  a4,  (uint64_t)a5,  (uint64_t)v26,  a13,  1u,  a14,  a15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a9 = v38;
}

void AttributedString.init(localized:options:table:bundle:localization:locale:comment:)( uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, void *a9@<X8>)
{
  uint64_t v12 = *a1;
  uint64_t v13 = (void *)a1[1];
  uint64_t v14 = (void *)a1[2];
  __int128 v15 = a2[1];
  v17[0] = *a2;
  v17[1] = v15;
  v18[0] = a2[2];
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)a2 + 41);
  specialized AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)( v12,  v13,  v14,  (uint64_t *)v17,  a3,  a4,  a5,  a6,  &v16,  a7,  *a8,  a8[1]);
  *a9 = v16;
}

void specialized AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)( uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a10;
  uint64_t v14 = a4[6];
  if (!a10)
  {
    a8 = a4[5];
    swift_bridgeObjectRetain();
    uint64_t v13 = v14;
  }

  uint64_t v16 = *a4;
  uint64_t v15 = a4[1];
  char v17 = *((_BYTE *)a4 + 16);
  char v18 = *((_BYTE *)a4 + 17);
  uint64_t v19 = a4[3];
  char v20 = *((_BYTE *)a4 + 32);
  char v21 = *((_BYTE *)a4 + 33);
  char v22 = *((_BYTE *)a4 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35[0] = v16;
  v35[1] = v15;
  char v36 = v17;
  char v37 = v18;
  uint64_t v38 = v19;
  char v39 = v20;
  char v40 = v21;
  uint64_t v41 = a8;
  uint64_t v42 = v13;
  char v43 = v22;
  uint64_t v23 = a11;
  if (!a11)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v34 = static LocaleCache.cache;
    uint64_t v23 = LocaleCache.current.getter();
    a12 = v25;
  }

  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( 0LL,  0LL,  (uint64_t)v35,  a5,  a6,  (uint64_t)a7,  v23,  a12,  1u,  a1,  a2,  a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a9 = v34;
}

void AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _OWORD *a14, void *a15)
{
  uint64_t v15 = *a1;
  uint64_t v28 = a1[1];
  uint64_t v35 = *a2;
  uint64_t v33 = a1[2];
  uint64_t v34 = a2[1];
  char v27 = *((_BYTE *)a2 + 16);
  char v16 = *((_BYTE *)a2 + 17);
  uint64_t v26 = a2[3];
  char v17 = *((_BYTE *)a2 + 32);
  char v25 = *((_BYTE *)a2 + 33);
  uint64_t v18 = a2[6];
  char v19 = *((_BYTE *)a2 + 56);
  uint64_t v20 = *a8;
  uint64_t v24 = a8[1];
  if (a7)
  {
    uint64_t v21 = a7;
  }

  else
  {
    a6 = a2[5];
    swift_bridgeObjectRetain();
    uint64_t v21 = v18;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = v15;
  uint64_t v47 = v28;
  uint64_t v48 = v33;
  v37[0] = v35;
  v37[1] = v34;
  char v38 = v27;
  char v39 = v16;
  uint64_t v40 = v26;
  char v41 = v17;
  char v42 = v25;
  uint64_t v43 = a6;
  uint64_t v44 = v21;
  char v45 = v19;
  if (v20)
  {
    uint64_t v23 = v24;
  }

  else
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v36[0] = static LocaleCache.cache;
    uint64_t v20 = LocaleCache.current.getter();
  }

  v36[0] = v20;
  v36[1] = v23;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( 0LL,  0LL,  (uint64_t)v37,  a3,  a4,  (uint64_t)a5,  (uint64_t)v36,  a13,  1u,  a14,  a15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a9 = v49;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)@<X0>( __int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int128 *a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _OWORD *a14, void *a15)
{
  uint64_t v16 = *((void *)a1 + 2);
  char v17 = *((_BYTE *)a2 + 16);
  char v18 = *((_BYTE *)a2 + 17);
  uint64_t v19 = *((void *)a2 + 3);
  char v20 = *((_BYTE *)a2 + 32);
  char v21 = *((_BYTE *)a2 + 33);
  char v22 = *((_BYTE *)a2 + 56);
  __int128 v37 = *a1;
  uint64_t v38 = v16;
  __int128 v23 = *a2;
  char v30 = v17;
  char v31 = v18;
  uint64_t v32 = v19;
  char v33 = v20;
  char v34 = v21;
  __int128 v35 = *(__int128 *)((char *)a2 + 40);
  char v36 = v22;
  __int128 v28 = *a8;
  __int128 v29 = v23;
  AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)( (uint64_t *)&v37,  (uint64_t *)&v29,  a3,  a4,  a5,  a6,  a7,  (uint64_t *)&v28,  &v39,  v25,  v26,  v27,  (uint64_t)a14,  a14,  a15);
  uint64_t result = swift_release();
  *a9 = v39;
  return result;
}

uint64_t one-time initialization function for formatSpecifierConfiguration()
{
  uint64_t result = String._bridgeToObjectiveCImpl()();
  static NSAttributedStringKey.formatSpecifierConfiguration = result;
  return result;
}

uint64_t closure #1 in String.LocalizationValue.argumentsWithReplacements(_:locale:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (v31 == 6)
  {
    int v10 = v29;
    unint64_t v11 = a2[1];
    unint64_t v12 = *(void *)(*a2 + 16LL);
    if (v11 == v12) {
      __asm { BR              X9 }
    }

    if (v11 >= v12)
    {
      __break(1u);
      JUMPOUT(0x1832EF970LL);
    }

    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( *a2 + 40 * v11 + 32,  (uint64_t)&v29);
    a2[1] = v11 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v29, (uint64_t)&v28);
    *(void *)&__int128 v29 = a3;
    *((void *)&v29 + 1) = a4;
    uint64_t v14 = processPlaceholderReplacement(_:locale:)((uint64_t)v27, (uint64_t)&v28, &v29);
    uint64_t v16 = v15;
    unint64_t v17 = 0xE400000000000000LL;
    uint64_t v18 = 1684827173LL;
    switch(v10)
    {
      case 0:
        goto LABEL_12;
      case 1:
        if (v14 != 1970039845) {
          goto LABEL_16;
        }
        goto LABEL_13;
      case 2:
        unint64_t v17 = 0xE200000000000000LL;
        uint64_t v18 = 26149LL;
LABEL_12:
        if (v14 == v18) {
          goto LABEL_13;
        }
        goto LABEL_16;
      case 3:
        unint64_t v17 = 0xE300000000000000LL;
        if (v14 != 6712357) {
          goto LABEL_16;
        }
        goto LABEL_13;
      default:
        while (2)
        {
          unint64_t v17 = 0xE200000000000000LL;
          if (v14 != 16421) {
            goto LABEL_16;
          }
LABEL_13:
          if (v16 == v17)
          {
            swift_bridgeObjectRelease_n();
LABEL_17:
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v27,  (uint64_t)v24);
            uint64_t v20 = v25;
            break;
          }

uint64_t processPlaceholderReplacement(_:locale:)(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v22 = *a3;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a2, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _FormatSpecifiable);
  if (!swift_dynamicCast())
  {
    uint64_t v26 = 0LL;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    outlined destroy of Any?((uint64_t)&v24, &demangling cache variable for type metadata for _FormatSpecifiable?);
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    uint64_t AssociatedConformanceWitness = 0LL;
    goto LABEL_6;
  }

  uint64_t v5 = *((void *)&v25 + 1);
  uint64_t v6 = v26;
  __swift_project_boxed_opaque_existential_1(&v24, *((uint64_t *)&v25 + 1));
  id v7 = *(void (**)(uint64_t, uint64_t))(v6 + 32);
  *((void *)&v28 + 1) = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v27);
  v7(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  if (!*((void *)&v28 + 1))
  {
LABEL_6:
    outlined destroy of Any?((uint64_t)&v27, &demangling cache variable for type metadata for (CVarArg & Sendable)?);
    v30[0] = v22;
    _convertObjectToSendableArgument(_:locale:)(a2, (char **)a1);
    return 16421LL;
  }

  outlined init with take of any PredicateExpression<Self.Output == B1>(&v27, (uint64_t)v30);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v30,  (uint64_t)&v27);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CVarArg & Sendable);
  uint64_t v8 = MEMORY[0x18961A4C0];
  if (swift_dynamicCast())
  {
    uint64_t v9 = 1684827173LL;
    uint64_t v10 = v24;
LABEL_9:
    uint64_t v11 = MEMORY[0x18961A510];
LABEL_10:
    *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = v8;
    *(void *)(a1 + 32) = v11;
    *(void *)a1 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return v9;
  }

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v30,  (uint64_t)&v27);
  if (swift_dynamicCast())
  {
    uint64_t v9 = 1684827173LL;
    uint64_t v10 = (int)v24;
    goto LABEL_9;
  }

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v30,  (uint64_t)&v27);
  uint64_t v8 = MEMORY[0x18961A8C8];
  if (swift_dynamicCast())
  {
    uint64_t v9 = 1970039845LL;
    uint64_t v10 = v24;
LABEL_16:
    uint64_t v11 = MEMORY[0x18961A910];
    goto LABEL_10;
  }

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v30,  (uint64_t)&v27);
  if (swift_dynamicCast())
  {
    uint64_t v9 = 1970039845LL;
    uint64_t v10 = v24;
    goto LABEL_16;
  }

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v30,  (uint64_t)&v27);
  uint64_t v13 = MEMORY[0x189618620];
  if (swift_dynamicCast())
  {
    int v14 = v24;
    uint64_t v15 = MEMORY[0x189618658];
    *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = v13;
    *(void *)(a1 + 32) = v15;
    *(_DWORD *)a1 = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return 26149LL;
  }

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v30,  (uint64_t)&v27);
  uint64_t v16 = MEMORY[0x189618560];
  if (swift_dynamicCast())
  {
    uint64_t v9 = 6712357LL;
    uint64_t v17 = v24;
    uint64_t v18 = MEMORY[0x1896185C0];
    *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = v16;
    *(void *)(a1 + 32) = v18;
    *(void *)a1 = v17;
LABEL_23:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return v9;
  }

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v30,  (uint64_t)&v27);
  uint64_t v19 = MEMORY[0x18961B530];
  if (swift_dynamicCast())
  {
    uint64_t v9 = 6712357LL;
    uint64_t v20 = v24;
    *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = v19;
    *(void *)(a1 + 32) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(void *)a1 = v20;
    goto LABEL_23;
  }

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v30,  (uint64_t)&v27);
  *(void *)&__int128 v24 = 0LL;
  *((void *)&v24 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(41LL);
  swift_bridgeObjectRelease();
  *(void *)&__int128 v24 = 0xD000000000000027LL;
  *((void *)&v24 + 1) = 0x80000001839D06B0LL;
  __swift_project_boxed_opaque_existential_1(&v27, *((uint64_t *)&v28 + 1));
  swift_getDynamicType();
  v21._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t one-time initialization function for attributedStringsCacheLock()
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 2os_unfair_lock_unlock(*v0 + 4) = 0;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFF0];
  static String.LocalizationValue.attributedStringsCacheLock = result;
  return result;
}

uint64_t specialized closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)result;
  if (!*(void *)(*(void *)result + 16LL)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v11 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  uint64_t v12 = *(void *)(v6 + 56) + 32 * v10;
  uint64_t v13 = *(void *)v12;
  char v14 = *(_BYTE *)(v12 + 8);
  uint64_t v15 = *(ValueMetadata **)(v12 + 16);
  int v16 = *(unsigned __int8 *)(v12 + 24);
  swift_retain();
  uint64_t result = swift_bridgeObjectRelease();
  if (v15 != &type metadata for AttributeScopes.FoundationAttributes || ((v16 ^ a4) & 1) != 0)
  {
    uint64_t result = swift_release();
LABEL_7:
    uint64_t v13 = 0LL;
    char v14 = 0;
  }

  *(void *)a5 = v13;
  *(_BYTE *)(a5 + 8) = v14;
  return result;
}

uint64_t closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7 = *(void *)result;
  if (!*(void *)(*(void *)result + 16LL)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v13 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  uint64_t v14 = *(void *)(v7 + 56) + 32 * v12;
  uint64_t v15 = *(void *)v14;
  char v16 = *(_BYTE *)(v14 + 8);
  uint64_t v17 = *(void *)(v14 + 16);
  int v18 = *(unsigned __int8 *)(v14 + 24);
  swift_retain();
  uint64_t result = swift_bridgeObjectRelease();
  if (v17 != a4 || v18 != (a5 & 1))
  {
    uint64_t result = swift_release();
LABEL_7:
    uint64_t v15 = 0LL;
    char v16 = 0;
  }

  *(void *)a6 = v15;
  *(_BYTE *)(a6 + 8) = v16;
  return result;
}

uint64_t specialized closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v52 = *a1;
  uint64_t v12 = *a1;
  *a1 = 0x8000000000000000LL;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v6 = v13;
    if (*(void *)(v12 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v17,  isUniquelyReferenced_nonNull_native);
      uint64_t v18 = v52;
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v6 & 1) != (v20 & 1)) {
        goto LABEL_47;
      }
      unint64_t v14 = v19;
      goto LABEL_7;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v18 = v12;
LABEL_7:
      if ((v6 & 1) != 0)
      {
        uint64_t v21 = *(void *)(v18 + 56) + 32 * v14;
        swift_release();
        *(void *)uint64_t v21 = a4;
        *(_BYTE *)(v21 + 8) = a5 & 1;
        *(void *)(v21 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = &type metadata for AttributeScopes.FoundationAttributes;
        *(_BYTE *)(v21 + 2os_unfair_lock_unlock(*v0 + 4) = a6 & 1;
      }

      else
      {
        specialized _NativeDictionary._insert(at:key:value:)( v14,  a2,  a3,  a4,  a5 & 1,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes,  a6 & 1,  (void *)v18);
        swift_bridgeObjectRetain();
      }

      *a1 = v18;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  uint64_t v23 = static _DictionaryStorage.copy(original:)();
  uint64_t v18 = v23;
  if (!*(void *)(v12 + 16))
  {
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  __int128 v24 = (void *)(v23 + 64);
  unint64_t v25 = (unint64_t)((1LL << *(_BYTE *)(v18 + 32)) + 63) >> 6;
  uint64_t v47 = v12 + 64;
  int64_t v26 = 0LL;
  *(void *)(v18 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v12 + 16);
  uint64_t v27 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v28 = -1LL;
  if (v27 < 64) {
    uint64_t v28 = ~(-1LL << v27);
  }
  unint64_t v29 = v28 & *(void *)(v12 + 64);
  int64_t v48 = (unint64_t)(v27 + 63) >> 6;
  while (1)
  {
    if (v29)
    {
      unint64_t v30 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      int64_t v49 = v26;
      unint64_t v31 = v30 | (v26 << 6);
      goto LABEL_20;
    }

    int64_t v43 = v26 + 1;
    if (__OFADD__(v26, 1LL))
    {
      __break(1u);
      goto LABEL_46;
    }

    if (v43 >= v48) {
      goto LABEL_44;
    }
    unint64_t v44 = *(void *)(v47 + 8 * v43);
    int64_t v45 = v26 + 1;
    if (!v44)
    {
      int64_t v45 = v26 + 2;
      if (v26 + 2 >= v48) {
        goto LABEL_44;
      }
      unint64_t v44 = *(void *)(v47 + 8 * v45);
      if (!v44)
      {
        int64_t v45 = v26 + 3;
        if (v26 + 3 >= v48) {
          goto LABEL_44;
        }
        unint64_t v44 = *(void *)(v47 + 8 * v45);
        if (!v44)
        {
          int64_t v45 = v26 + 4;
          if (v26 + 4 >= v48) {
            goto LABEL_44;
          }
          unint64_t v44 = *(void *)(v47 + 8 * v45);
          if (!v44)
          {
            int64_t v45 = v26 + 5;
            if (v26 + 5 >= v48) {
              goto LABEL_44;
            }
            unint64_t v44 = *(void *)(v47 + 8 * v45);
            if (!v44)
            {
              int64_t v45 = v26 + 6;
              if (v26 + 6 >= v48) {
                goto LABEL_44;
              }
              unint64_t v44 = *(void *)(v47 + 8 * v45);
              if (!v44)
              {
                int64_t v45 = v26 + 7;
                if (v26 + 7 >= v48) {
                  goto LABEL_44;
                }
                unint64_t v44 = *(void *)(v47 + 8 * v45);
                if (!v44) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *a1;
  uint64_t v13 = *a1;
  *a1 = 0x8000000000000000LL;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }

  else
  {
    char v7 = v14;
    if (*(void *)(v13 + 24) < v18)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v18,  isUniquelyReferenced_nonNull_native);
      uint64_t v19 = v54;
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v7 & 1) != (v21 & 1)) {
        goto LABEL_47;
      }
      unint64_t v15 = v20;
      goto LABEL_7;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v19 = v13;
LABEL_7:
      if ((v7 & 1) != 0)
      {
        uint64_t v22 = *(void *)(v19 + 56) + 32 * v15;
        swift_release();
        *(void *)uint64_t v22 = a4;
        *(_BYTE *)(v22 + 8) = a5 & 1;
        *(void *)(v22 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a6;
        *(_BYTE *)(v22 + 2os_unfair_lock_unlock(*v0 + 4) = a7 & 1;
      }

      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v15, a2, a3, a4, a5 & 1, a6, a7 & 1, (void *)v19);
        swift_bridgeObjectRetain();
      }

      *a1 = v19;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  uint64_t v24 = static _DictionaryStorage.copy(original:)();
  uint64_t v19 = v24;
  if (!*(void *)(v13 + 16))
  {
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  unint64_t v25 = (void *)(v24 + 64);
  unint64_t v26 = (unint64_t)((1LL << *(_BYTE *)(v19 + 32)) + 63) >> 6;
  uint64_t v48 = v13 + 64;
  int64_t v27 = 0LL;
  *(void *)(v19 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v13 + 16);
  uint64_t v28 = 1LL << *(_BYTE *)(v13 + 32);
  uint64_t v29 = -1LL;
  if (v28 < 64) {
    uint64_t v29 = ~(-1LL << v28);
  }
  unint64_t v30 = v29 & *(void *)(v13 + 64);
  int64_t v49 = (unint64_t)(v28 + 63) >> 6;
  while (1)
  {
    if (v30)
    {
      unint64_t v31 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      int64_t v50 = v27;
      unint64_t v32 = v31 | (v27 << 6);
      goto LABEL_20;
    }

    int64_t v44 = v27 + 1;
    if (__OFADD__(v27, 1LL))
    {
      __break(1u);
      goto LABEL_46;
    }

    if (v44 >= v49) {
      goto LABEL_44;
    }
    unint64_t v45 = *(void *)(v48 + 8 * v44);
    int64_t v46 = v27 + 1;
    if (!v45)
    {
      int64_t v46 = v27 + 2;
      if (v27 + 2 >= v49) {
        goto LABEL_44;
      }
      unint64_t v45 = *(void *)(v48 + 8 * v46);
      if (!v45)
      {
        int64_t v46 = v27 + 3;
        if (v27 + 3 >= v49) {
          goto LABEL_44;
        }
        unint64_t v45 = *(void *)(v48 + 8 * v46);
        if (!v45)
        {
          int64_t v46 = v27 + 4;
          if (v27 + 4 >= v49) {
            goto LABEL_44;
          }
          unint64_t v45 = *(void *)(v48 + 8 * v46);
          if (!v45)
          {
            int64_t v46 = v27 + 5;
            if (v27 + 5 >= v49) {
              goto LABEL_44;
            }
            unint64_t v45 = *(void *)(v48 + 8 * v46);
            if (!v45)
            {
              int64_t v46 = v27 + 6;
              if (v27 + 6 >= v49) {
                goto LABEL_44;
              }
              unint64_t v45 = *(void *)(v48 + 8 * v46);
              if (!v45)
              {
                int64_t v46 = v27 + 7;
                if (v27 + 7 >= v49) {
                  goto LABEL_44;
                }
                unint64_t v45 = *(void *)(v48 + 8 * v46);
                if (!v45) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t specialized closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)( uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v48 = *a1;
  uint64_t v9 = *a1;
  *a1 = 0x8000000000000000LL;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }

  else
  {
    char v4 = v10;
    if (*(void *)(v9 + 24) < v14)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v14,  isUniquelyReferenced_nonNull_native);
      uint64_t v15 = v48;
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v17 & 1)) {
        goto LABEL_47;
      }
      unint64_t v11 = v16;
      if ((v4 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      uint64_t v18 = *(void *)(v15 + 56) + 32 * v11;
      swift_release();
      *(void *)uint64_t v18 = 0LL;
      *(_BYTE *)(v18 + 8) = 0;
      *(void *)(v18 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = &type metadata for AttributeScopes.FoundationAttributes;
      *(_BYTE *)(v18 + 2os_unfair_lock_unlock(*v0 + 4) = a4 & 1;
LABEL_44:
      *a1 = v15;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v15 = v9;
      if ((v10 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)( v11,  a2,  a3,  0LL,  0,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes,  a4 & 1,  (void *)v15);
      swift_bridgeObjectRetain();
      goto LABEL_44;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  uint64_t v19 = static _DictionaryStorage.copy(original:)();
  uint64_t v15 = v19;
  if (!*(void *)(v9 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }

  unint64_t v20 = (void *)(v19 + 64);
  unint64_t v21 = (unint64_t)((1LL << *(_BYTE *)(v15 + 32)) + 63) >> 6;
  uint64_t v44 = v9 + 64;
  int64_t v22 = 0LL;
  *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v9 + 16);
  uint64_t v23 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v24 = -1LL;
  if (v23 < 64) {
    uint64_t v24 = ~(-1LL << v23);
  }
  unint64_t v25 = v24 & *(void *)(v9 + 64);
  int64_t v45 = (unint64_t)(v23 + 63) >> 6;
  while (1)
  {
    if (v25)
    {
      unint64_t v26 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      int64_t v46 = v22;
      unint64_t v27 = v26 | (v22 << 6);
      goto LABEL_18;
    }

    int64_t v39 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
      goto LABEL_46;
    }

    if (v39 >= v45) {
      goto LABEL_42;
    }
    unint64_t v40 = *(void *)(v44 + 8 * v39);
    int64_t v41 = v22 + 1;
    if (!v40)
    {
      int64_t v41 = v22 + 2;
      if (v22 + 2 >= v45) {
        goto LABEL_42;
      }
      unint64_t v40 = *(void *)(v44 + 8 * v41);
      if (!v40)
      {
        int64_t v41 = v22 + 3;
        if (v22 + 3 >= v45) {
          goto LABEL_42;
        }
        unint64_t v40 = *(void *)(v44 + 8 * v41);
        if (!v40)
        {
          int64_t v41 = v22 + 4;
          if (v22 + 4 >= v45) {
            goto LABEL_42;
          }
          unint64_t v40 = *(void *)(v44 + 8 * v41);
          if (!v40)
          {
            int64_t v41 = v22 + 5;
            if (v22 + 5 >= v45) {
              goto LABEL_42;
            }
            unint64_t v40 = *(void *)(v44 + 8 * v41);
            if (!v40)
            {
              int64_t v41 = v22 + 6;
              if (v22 + 6 >= v45) {
                goto LABEL_42;
              }
              unint64_t v40 = *(void *)(v44 + 8 * v41);
              if (!v40)
              {
                int64_t v41 = v22 + 7;
                if (v22 + 7 >= v45) {
                  goto LABEL_42;
                }
                unint64_t v40 = *(void *)(v44 + 8 * v41);
                if (!v40) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v50 = *a1;
  uint64_t v11 = *a1;
  *a1 = 0x8000000000000000LL;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }

  else
  {
    char v5 = v12;
    if (*(void *)(v11 + 24) < v16)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v16,  isUniquelyReferenced_nonNull_native);
      uint64_t v17 = v50;
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v5 & 1) != (v19 & 1)) {
        goto LABEL_47;
      }
      unint64_t v13 = v18;
      if ((v5 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      uint64_t v20 = *(void *)(v17 + 56) + 32 * v13;
      swift_release();
      *(void *)uint64_t v20 = 0LL;
      *(_BYTE *)(v20 + 8) = 0;
      *(void *)(v20 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a4;
      *(_BYTE *)(v20 + 2os_unfair_lock_unlock(*v0 + 4) = a5 & 1;
LABEL_44:
      *a1 = v17;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v17 = v11;
      if ((v12 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v13, a2, a3, 0LL, 0, a4, a5 & 1, (void *)v17);
      swift_bridgeObjectRetain();
      goto LABEL_44;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v17 = v21;
  if (!*(void *)(v11 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }

  int64_t v22 = (void *)(v21 + 64);
  unint64_t v23 = (unint64_t)((1LL << *(_BYTE *)(v17 + 32)) + 63) >> 6;
  uint64_t v46 = v11 + 64;
  int64_t v24 = 0LL;
  *(void *)(v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v11 + 16);
  uint64_t v25 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v26 = -1LL;
  if (v25 < 64) {
    uint64_t v26 = ~(-1LL << v25);
  }
  unint64_t v27 = v26 & *(void *)(v11 + 64);
  int64_t v47 = (unint64_t)(v25 + 63) >> 6;
  while (1)
  {
    if (v27)
    {
      unint64_t v28 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      int64_t v48 = v24;
      unint64_t v29 = v28 | (v24 << 6);
      goto LABEL_18;
    }

    int64_t v41 = v24 + 1;
    if (__OFADD__(v24, 1LL))
    {
      __break(1u);
      goto LABEL_46;
    }

    if (v41 >= v47) {
      goto LABEL_42;
    }
    unint64_t v42 = *(void *)(v46 + 8 * v41);
    int64_t v43 = v24 + 1;
    if (!v42)
    {
      int64_t v43 = v24 + 2;
      if (v24 + 2 >= v47) {
        goto LABEL_42;
      }
      unint64_t v42 = *(void *)(v46 + 8 * v43);
      if (!v42)
      {
        int64_t v43 = v24 + 3;
        if (v24 + 3 >= v47) {
          goto LABEL_42;
        }
        unint64_t v42 = *(void *)(v46 + 8 * v43);
        if (!v42)
        {
          int64_t v43 = v24 + 4;
          if (v24 + 4 >= v47) {
            goto LABEL_42;
          }
          unint64_t v42 = *(void *)(v46 + 8 * v43);
          if (!v42)
          {
            int64_t v43 = v24 + 5;
            if (v24 + 5 >= v47) {
              goto LABEL_42;
            }
            unint64_t v42 = *(void *)(v46 + 8 * v43);
            if (!v42)
            {
              int64_t v43 = v24 + 6;
              if (v24 + 6 >= v47) {
                goto LABEL_42;
              }
              unint64_t v42 = *(void *)(v46 + 8 * v43);
              if (!v42)
              {
                int64_t v43 = v24 + 7;
                if (v24 + 7 >= v47) {
                  goto LABEL_42;
                }
                unint64_t v42 = *(void *)(v46 + 8 * v43);
                if (!v42) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t String.LocalizationValue.restoreAttributedStringArguments(_:in:)(uint64_t a1)
{
  uint64_t v208 = v1;
  uint64_t v231 = v2;
  __int128 v3 = *(_OWORD *)(*v2 + 16);
  __int128 v4 = *(_OWORD *)(*v2 + 48);
  __int128 v508 = *(_OWORD *)(*v2 + 32);
  __int128 v509 = v4;
  __int128 v507 = v3;
  unint64_t v5 = BigString.startIndex.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  unint64_t v12 = BigString.endIndex.getter();
  if (v12 >> 10 < v5 >> 10) {
    goto LABEL_181;
  }
  unint64_t v499 = v5;
  uint64_t v500 = v7;
  uint64_t v501 = v9;
  uint64_t v502 = v11;
  unint64_t v503 = v12;
  uint64_t v504 = v13;
  uint64_t v505 = v14;
  uint64_t v506 = v15;
  uint64_t v16 = swift_retain();
  AttributedString.Runs.init(_:in:)(v16, &v311);
  __int128 v331 = v316;
  __int128 v332 = v317;
  __int128 v333 = v318;
  __int128 v334 = v319;
  __int128 v327 = v312;
  __int128 v328 = v313;
  __int128 v329 = v314;
  __int128 v330 = v315;
  uint64_t v225 = v322;
  uint64_t v226 = v321;
  uint64_t v224 = v323;
  unint64_t v227 = v320;
  unint64_t v17 = v320 >> 10;
  __int128 v217 = v325;
  unint64_t v218 = v324;
  uint64_t v219 = v311;
  uint64_t v216 = v326;
  unint64_t v214 = v324 >> 10;
  if (v320 >> 10 == v324 >> 10)
  {
LABEL_3:
    __int128 v298 = v331;
    __int128 v299 = v332;
    __int128 v300 = v333;
    __int128 v301 = v334;
    __int128 v294 = v327;
    __int128 v295 = v328;
    __int128 v296 = v329;
    __int128 v297 = v330;
    uint64_t v293 = v219;
    unint64_t v302 = v227;
    uint64_t v303 = v226;
    uint64_t v304 = v225;
    uint64_t v305 = v224;
    unint64_t v306 = v218;
    __int128 v307 = v217;
    uint64_t v308 = v216;
    __int128 v309 = &outlined read-only object #0 of String.LocalizationValue.restoreAttributedStringArguments(_:in:);
    uint64_t v310 = MEMORY[0x18961AFE8];
    return outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v293);
  }

  uint64_t v20 = v322;
  uint64_t v19 = v321;
  uint64_t v21 = v323;
  unint64_t v22 = v320;
  while (1)
  {
    *(_OWORD *)&v283[72] = v331;
    *(_OWORD *)&v283[88] = v332;
    *(_OWORD *)&v283[104] = v333;
    *(_OWORD *)&v283[120] = v334;
    *(_OWORD *)&v283[8] = v327;
    *(_OWORD *)&v283[24] = v328;
    *(_OWORD *)&v283[40] = v329;
    *(_OWORD *)&v283[56] = v330;
    *(_OWORD *)&v288[72] = v331;
    *(_OWORD *)&v288[88] = v332;
    *(_OWORD *)&v288[104] = v333;
    *(_OWORD *)&v288[120] = v334;
    *(_OWORD *)&v288[8] = v327;
    *(_OWORD *)&v288[24] = v328;
    unint64_t v237 = v17;
    uint64_t v239 = v19;
    *((void *)&v240 + 1) = v21;
    unint64_t v241 = v22;
    *(void *)&__int128 v240 = v20;
    *(_OWORD *)&v288[40] = v329;
    *(_OWORD *)&v288[56] = v330;
    *(void *)uint64_t v288 = v219;
    *(void *)&v288[136] = v227;
    *(void *)&__int128 v289 = v226;
    *((void *)&v289 + 1) = v225;
    *(void *)&__int128 v290 = v224;
    *((void *)&v290 + 1) = v218;
    __int128 v291 = v217;
    uint64_t v292 = v216;
    *(void *)&__int128 v257 = v22;
    *((void *)&v257 + 1) = v19;
    *(void *)&__int128 v258 = v20;
    *((void *)&v258 + 1) = v21;
    AttributedString.Runs.subscript.getter((unint64_t *)&v257, &v270);
    uint64_t v233 = v270;
    __int128 v298 = v331;
    __int128 v299 = v332;
    __int128 v300 = v333;
    __int128 v301 = v334;
    __int128 v294 = v327;
    __int128 v295 = v328;
    __int128 v296 = v329;
    __int128 v297 = v330;
    uint64_t v293 = v219;
    unint64_t v302 = v227;
    uint64_t v303 = v226;
    uint64_t v304 = v225;
    uint64_t v305 = v224;
    unint64_t v306 = v218;
    __int128 v307 = v217;
    uint64_t v308 = v216;
    __int128 v309 = &outlined read-only object #0 of String.LocalizationValue.restoreAttributedStringArguments(_:in:);
    uint64_t v23 = MEMORY[0x18961AFE8];
    uint64_t v310 = MEMORY[0x18961AFE8];
    *(void *)uint64_t v283 = v219;
    *(void *)&v283[136] = v227;
    *(void *)&__int128 v284 = v226;
    *((void *)&v284 + 1) = v225;
    *(void *)&__int128 v285 = v224;
    *((void *)&v285 + 1) = v218;
    __int128 v286 = v217;
    uint64_t v287 = v216;
    *(void *)&__int128 v270 = v22;
    *((void *)&v270 + 1) = v19;
    __int128 v271 = v240;
    swift_retain();
    outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v293);
    AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)( (unint64_t *)&v270,  (uint64_t)&outlined read-only object #0 of String.LocalizationValue.restoreAttributedStringArguments(_:in:),  v23,  (uint64_t *)v288);
    swift_release();
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v293);
    unint64_t v22 = *(void *)v288;
    unint64_t v17 = *(void *)v288 >> 10;
    if (*(void *)v288 >> 10 < v237)
    {
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
      goto LABEL_171;
    }

    uint64_t v19 = *(void *)&v288[8];
    uint64_t v21 = *(void *)&v288[24];
    uint64_t v20 = *(void *)&v288[16];
    if (*(void *)(v233 + 16)
      && (unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012LL, 0x80000001839C8020LL),
          (v25 & 1) != 0))
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v233 + 56) + 72 * v24, (uint64_t)v288);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v288,  (uint64_t)v283);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      swift_dynamicCast();
      outlined destroy of AttributedString._AttributeValue((uint64_t)v288);
      char v26 = 0;
      BYTE8(v270) = 0;
      uint64_t v27 = v270;
    }

    else
    {
      uint64_t v27 = 0LL;
      *(void *)&__int128 v270 = 0LL;
      char v26 = 1;
      BYTE8(v270) = 1;
    }

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0) {
      break;
    }
LABEL_6:
    if (v17 == v214) {
      goto LABEL_3;
    }
  }

  unint64_t v28 = v27 - 1;
  if (__OFSUB__(v27, 1LL)) {
    goto LABEL_156;
  }
  if ((v28 & 0x8000000000000000LL) != 0) {
    goto LABEL_157;
  }
  if (v28 >= *(void *)(v208 + 16)) {
    goto LABEL_158;
  }
  uint64_t v29 = v208 + 32 + 24 * v28;
  int v30 = *(unsigned __int8 *)(v29 + 16);
  if (v30 == 255) {
    goto LABEL_6;
  }
  uint64_t v32 = *(_OWORD **)v29;
  uint64_t v31 = *(void *)(v29 + 8);
  uint64_t v209 = v21;
  unsigned __int8 v220 = *(_BYTE *)(v29 + 16);
  uint64_t v213 = *(void *)v29;
  if ((v30 & 1) != 0)
  {
    *(void *)uint64_t v283 = *(void *)v29;
    *(void *)&v283[8] = v31;
    outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup((uint64_t)v32, v31, 1);
    uint64_t v154 = (uint64_t)v32;
    uint64_t v155 = v31;
    outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup(v154, v31, 1);
    uint64_t v156 = v231;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      __int128 v157 = (void *)*v231;
      __int128 v158 = *(_OWORD *)(*v231 + 16);
      __int128 v159 = *(_OWORD *)(*v231 + 48);
      v498[1] = *(_OWORD *)(*v231 + 32);
      v498[2] = v159;
      v498[0] = v158;
      uint64_t v160 = v157[8];
      uint64_t v161 = v157[9];
      uint64_t v162 = v157[10];
      uint64_t v163 = v157[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v498);
      swift_unknownObjectRetain();
      uint64_t v164 = v160;
      uint64_t v156 = v231;
      *uint64_t v231 = AttributedString.Guts.init(string:runs:)(v498, v164, v161, v162, v163);
      swift_release();
    }

    uint64_t v165 = (_OWORD *)*v156;
    __int128 v166 = v165[2];
    __int128 v495 = v165[1];
    __int128 v496 = v166;
    __int128 v497 = v165[3];
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    unint64_t v488 = v241;
    uint64_t v489 = v239;
    __int128 v490 = v240;
    unint64_t v491 = v22;
    uint64_t v492 = v19;
    uint64_t v493 = v20;
    uint64_t v494 = v21;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v366);
    outlined release of Locale((uint64_t)v367);
    *(_OWORD *)&v288[8] = v368;
    *(_OWORD *)&v288[24] = v369;
    *(_OWORD *)&v288[40] = v370;
    *(_OWORD *)&v288[56] = v371;
    *(void *)uint64_t v288 = v165;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    uint64_t v167 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v168 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v168);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v167, (uint64_t *)&v270);
    os_unfair_lock_unlock(v168);
    swift_release();
    uint64_t v169 = v270;
    *(void *)&v288[72] = v270;
    BigString.init()();
    *(void *)&__int128 v270 = 0LL;
    MEMORY[0x186E20E78](&v270, 8LL);
    uint64_t v170 = v270;
    type metadata accessor for AttributedString.Guts();
    uint64_t v171 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0) {
      goto LABEL_178;
    }
    __int128 v172 = v373;
    *(_OWORD *)(v171 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v372;
    *(_OWORD *)(v171 + 32) = v172;
    *(_OWORD *)(v171 + 48) = v374;
    *(void *)(v171 + 6os_unfair_lock_unlock(*v0 + 4) = 0LL;
    *(void *)(v171 + 72) = 0LL;
    *(void *)(v171 + 80) = 0LL;
    *(void *)(v171 + 88) = v170;
    *uint64_t v231 = v171;
    swift_release();
    LOBYTE(v270) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)v283, (char *)&v270);
    if (*(void *)&v288[72] != v169) {
      goto LABEL_194;
    }
    *uint64_t v231 = *(void *)v288;
    swift_release();
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v213, v155, v220);
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v213, v155, v220);
    goto LABEL_6;
  }

  __int128 v33 = v32[2];
  __int128 v485 = v32[1];
  __int128 v486 = v33;
  __int128 v487 = v32[3];
  uint64_t v34 = BigString.startIndex.getter();
  uint64_t v35 = (_OWORD *)*v231;
  __int128 v36 = *(_OWORD *)(*v231 + 32);
  __int128 v482 = *(_OWORD *)(*v231 + 16);
  __int128 v483 = v36;
  __int128 v484 = v35[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  unint64_t v475 = v241;
  uint64_t v476 = v239;
  __int128 v477 = v240;
  unint64_t v478 = v22;
  uint64_t v205 = v20;
  uint64_t v206 = v19;
  uint64_t v479 = v19;
  uint64_t v480 = v20;
  uint64_t v481 = v21;
  BigString.unicodeScalars.getter();
  uint64_t v215 = v31;
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v31, v220);
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v31, v220);
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v335);
  outlined release of Locale((uint64_t)v336);
  __int128 v375 = v337;
  __int128 v376 = v338;
  __int128 v377 = v339;
  __int128 v378 = v340;
  __int128 v37 = v35[2];
  __int128 v472 = v35[1];
  __int128 v473 = v37;
  __int128 v474 = v35[3];
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v341);
  outlined release of Locale((uint64_t)v342);
  swift_release();
  __int128 v456 = v343;
  __int128 v457 = v344;
  __int128 v458 = v345;
  __int128 v459 = v346;
  __int128 v455 = v35;
  uint64_t v460 = 0LL;
  __int128 v38 = v32[2];
  __int128 v469 = v32[1];
  __int128 v470 = v38;
  __int128 v207 = v32 + 1;
  __int128 v471 = v32[3];
  uint64_t v39 = BigString.startIndex.getter();
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v46 = BigString.endIndex.getter();
  uint64_t v461 = v39;
  uint64_t v462 = v41;
  uint64_t v463 = v43;
  uint64_t v464 = v45;
  uint64_t v465 = v46;
  uint64_t v466 = v47;
  uint64_t v467 = v48;
  uint64_t v468 = v49;
  BigString.unicodeScalars.getter();
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup((uint64_t)v32, v215, 0);
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v347);
  outlined release of Locale((uint64_t)v348);
  outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v215, v220);
  __int128 v450 = v349;
  __int128 v451 = v350;
  __int128 v452 = v351;
  __int128 v453 = v352;
  uint64_t v449 = v32;
  uint64_t v454 = 0LL;
  LOBYTE(v39) = specialized Sequence<>.elementsEqual<A>(_:)(&v449);
  outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v215, v220);
  swift_release();
  if ((v39 & 1) == 0)
  {
    __int128 v173 = v32[2];
    __int128 v446 = *v207;
    __int128 v447 = v173;
    __int128 v448 = v32[3];
    unint64_t v174 = BigString.startIndex.getter();
    uint64_t v176 = v175;
    uint64_t v178 = v177;
    uint64_t v180 = v179;
    unint64_t v181 = BigString.endIndex.getter();
    if (v181 >> 10 < v174 >> 10) {
      goto LABEL_185;
    }
    unint64_t v438 = v174;
    uint64_t v439 = v176;
    uint64_t v440 = v178;
    uint64_t v441 = v180;
    unint64_t v442 = v181;
    uint64_t v443 = v182;
    uint64_t v444 = v183;
    uint64_t v445 = v184;
    outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup((uint64_t)v32, v215, 0);
    AttributedString.Runs.init(_:in:)((uint64_t)v32, &v270);
    __int128 v285 = v280;
    __int128 v286 = v281;
    uint64_t v287 = v282;
    *(_OWORD *)&v283[96] = v276;
    *(_OWORD *)&v283[112] = v277;
    __int128 v284 = v279;
    *(_OWORD *)&v283[128] = v278;
    *(_OWORD *)&v283[32] = v272;
    *(_OWORD *)&v283[48] = v273;
    *(_OWORD *)&v283[80] = v275;
    *(_OWORD *)&v283[64] = v274;
    *(_OWORD *)&v283[16] = v271;
    *(_OWORD *)uint64_t v283 = v270;
    __int128 v185 = v32[2];
    __int128 v435 = *v207;
    __int128 v436 = v185;
    __int128 v437 = v32[3];
    unint64_t v186 = BigString.startIndex.getter();
    uint64_t v188 = v187;
    uint64_t v190 = v189;
    uint64_t v192 = v191;
    unint64_t v193 = BigString.endIndex.getter();
    if (v193 >> 10 < v186 >> 10) {
      goto LABEL_187;
    }
    unint64_t v427 = v186;
    uint64_t v428 = v188;
    uint64_t v429 = v190;
    uint64_t v430 = v192;
    unint64_t v431 = v193;
    uint64_t v432 = v194;
    uint64_t v433 = v195;
    uint64_t v434 = v196;
    outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup((uint64_t)v32, v215, 0);
    AttributedString.Runs.init(_:in:)((uint64_t)v32, &v257);
    __int128 v290 = v267;
    __int128 v291 = v268;
    uint64_t v292 = v269;
    *(_OWORD *)&v288[96] = v263;
    *(_OWORD *)&v288[112] = v264;
    __int128 v289 = v266;
    *(_OWORD *)&v288[128] = v265;
    *(_OWORD *)&v288[32] = v259;
    *(_OWORD *)&v288[48] = v260;
    *(_OWORD *)&v288[80] = v262;
    *(_OWORD *)&v288[64] = v261;
    *(_OWORD *)&v288[16] = v258;
    *(_OWORD *)uint64_t v288 = v257;
    outlined release of AttributedString.Runs((uint64_t)v288);
    __int128 v253 = v285;
    __int128 v254 = v286;
    uint64_t v255 = v287;
    __int128 v249 = *(_OWORD *)&v283[96];
    __int128 v250 = *(_OWORD *)&v283[112];
    __int128 v251 = *(_OWORD *)&v283[128];
    __int128 v252 = v284;
    __int128 v245 = *(_OWORD *)&v283[32];
    __int128 v246 = *(_OWORD *)&v283[48];
    __int128 v247 = *(_OWORD *)&v283[64];
    __int128 v248 = *(_OWORD *)&v283[80];
    __int128 v243 = *(_OWORD *)v283;
    __int128 v244 = *(_OWORD *)&v283[16];
    v242[0] = *(_OWORD *)&v288[8];
    v242[1] = *(_OWORD *)&v288[24];
    v242[2] = *(_OWORD *)&v288[40];
    v242[3] = *(_OWORD *)&v288[56];
    AttributedString.Runs.subscript.getter(v242, v256);
    outlined release of AttributedString.Runs((uint64_t)v283);
    uint64_t v197 = v256[0];
    uint64_t v198 = v256[1];
    swift_release();
    *(void *)&v242[0] = v197;
    *((void *)&v242[0] + 1) = v198;
    *(void *)&__int128 v243 = v241;
    *((void *)&v243 + 1) = v239;
    __int128 v244 = v240;
    *(void *)&__int128 v245 = v22;
    uint64_t v20 = v205;
    *((void *)&v245 + 1) = v19;
    *(void *)&__int128 v246 = v205;
    uint64_t v21 = v209;
    *((void *)&v246 + 1) = v209;
    closure #1 in String.LocalizationValue.restoreAttributedStringArguments(_:in:)( (uint64_t *)v242,  v231,  (uint64_t *)&v243,  v215);
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v215, v220);
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v215, v220);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }

  __int128 v50 = v32[2];
  __int128 v424 = *v207;
  __int128 v425 = v50;
  __int128 v426 = v32[3];
  unint64_t v51 = BigString.startIndex.getter();
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  unint64_t v58 = BigString.endIndex.getter();
  if (v58 >> 10 < v51 >> 10) {
    goto LABEL_186;
  }
  unint64_t v416 = v51;
  uint64_t v417 = v53;
  uint64_t v418 = v55;
  uint64_t v419 = v57;
  unint64_t v420 = v58;
  uint64_t v421 = v59;
  uint64_t v422 = v60;
  uint64_t v423 = v61;
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup((uint64_t)v32, v215, 0);
  AttributedString.Runs.init(_:in:)((uint64_t)v32, v283);
  __int128 v290 = v285;
  __int128 v291 = v286;
  uint64_t v292 = v287;
  *(_OWORD *)&v288[96] = *(_OWORD *)&v283[96];
  *(_OWORD *)&v288[112] = *(_OWORD *)&v283[112];
  __int128 v289 = v284;
  *(_OWORD *)&v288[128] = *(_OWORD *)&v283[128];
  *(_OWORD *)&v288[32] = *(_OWORD *)&v283[32];
  *(_OWORD *)&v288[48] = *(_OWORD *)&v283[48];
  *(_OWORD *)&v288[80] = *(_OWORD *)&v283[80];
  *(_OWORD *)&v288[64] = *(_OWORD *)&v283[64];
  *(_OWORD *)&v288[16] = *(_OWORD *)&v283[16];
  *(_OWORD *)uint64_t v288 = *(_OWORD *)v283;
  uint64_t v62 = *(void *)&v283[8];
  uint64_t v63 = *(void *)&v283[72];
  if (*(void *)&v283[8] == *(void *)&v283[72])
  {
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v215, v220);
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v215, v220);
    outlined release of AttributedString.Runs((uint64_t)v288);
    uint64_t v20 = v205;
    uint64_t v21 = v209;
    goto LABEL_6;
  }

  unint64_t v228 = *(void *)&v288[40];
  uint64_t v64 = *(void *)&v288[32];
  uint64_t v222 = *(void *)&v288[48];
  unint64_t v223 = *(void *)&v288[24];
  uint64_t v221 = *(void *)&v288[56];
  uint64_t v238 = *(void *)&v288[64];
  unint64_t v204 = *(void *)&v288[136];
  uint64_t v65 = *(void *)&v288[16];
  unint64_t v201 = v17;
  int64_t v202 = *((void *)&v290 + 1) >> 11;
  uint64_t v236 = *(void **)v288;
  id v212 = (__int128 *)(*(void *)v288 + 16LL);
  unint64_t v203 = *(void *)&v288[136] >> 10;
  uint64_t v199 = *(void *)&v283[72];
  unint64_t v200 = v22;
  while (2)
  {
    if (v62 >= v63) {
      goto LABEL_159;
    }
    __int128 v285 = v290;
    __int128 v286 = v291;
    uint64_t v287 = v292;
    *(_OWORD *)&v283[96] = *(_OWORD *)&v288[96];
    *(_OWORD *)&v283[112] = *(_OWORD *)&v288[112];
    __int128 v284 = v289;
    *(_OWORD *)&v283[128] = *(_OWORD *)&v288[128];
    *(_OWORD *)&v283[32] = *(_OWORD *)&v288[32];
    *(_OWORD *)&v283[48] = *(_OWORD *)&v288[48];
    *(_OWORD *)&v283[80] = *(_OWORD *)&v288[80];
    *(_OWORD *)&v283[64] = *(_OWORD *)&v288[64];
    *(_OWORD *)&v283[16] = *(_OWORD *)&v288[16];
    *(_OWORD *)uint64_t v283 = *(_OWORD *)v288;
    *(void *)&__int128 v257 = v62;
    uint64_t v66 = v65;
    *((void *)&v257 + 1) = v65;
    *(void *)&__int128 v258 = v223;
    *((void *)&v258 + 1) = v64;
    *(void *)&__int128 v259 = v228;
    *((void *)&v259 + 1) = v222;
    *(void *)&__int128 v260 = v221;
    *((void *)&v260 + 1) = v238;
    AttributedString.Runs._resolve(_:)((uint64_t *)&v257, (uint64_t *)&v270);
    if ((void)v270 != v236[11]) {
      goto LABEL_160;
    }
    unint64_t v67 = *((void *)&v270 + 1);
    unint64_t v68 = *((void *)&v272 + 1);
    if ((void)v271)
    {
      id v69 = (void *)(v271 + 24 * ((*((void *)&v270 + 1) >> ((4 * *(_BYTE *)(v271 + 18) + 8) & 0x3C)) & 0xFLL));
      unint64_t v70 = v69[3];
      uint64_t v71 = v69[4];
      uint64_t v72 = v69[5];
      outlined retain of AttributedString.Runs((uint64_t)v288);
      uint64_t v211 = v71;
      swift_bridgeObjectRetain();
      uint64_t v210 = v72;
      swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v73 = v236[8];
      outlined retain of AttributedString.Runs((uint64_t)v288);
      swift_unknownObjectRetain();
      unint64_t v70 = specialized Rope._Node.subscript.getter(v67, v73);
      uint64_t v210 = v75;
      uint64_t v211 = v74;
      swift_unknownObjectRelease();
    }

    if (v203 >= v68 >> 10) {
      unint64_t v76 = v204;
    }
    else {
      unint64_t v76 = v68;
    }
    if (__OFADD__(v70, v68 >> 11)) {
      goto LABEL_161;
    }
    else {
      unint64_t v77 = v202;
    }
    __int128 v78 = v212[1];
    __int128 v413 = *v212;
    __int128 v414 = v78;
    __int128 v415 = v212[2];
    BigString.utf8.getter();
    if (__OFSUB__(v77, v76 >> 11)) {
      goto LABEL_162;
    }
    unint64_t v79 = BigString.UTF8View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v353);
    unint64_t v80 = v79 >> 10;
    unint64_t v81 = v76 >> 10;
    if (v79 >> 10 < v76 >> 10) {
      goto LABEL_163;
    }
    uint64_t v82 = v236[8];
    uint64_t v83 = v236[9];
    uint64_t v232 = v236[10];
    uint64_t v234 = v236[11];
    if (v64 != 1 && v66 == v236[11])
    {
      if (v238 == 2)
      {
        unint64_t v84 = v223;
        if (v82)
        {
          outlined retain of AttributedString.Runs((uint64_t)v288);
          swift_unknownObjectRetain();
          uint64_t v85 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v66, v223, v64, v82, v83, v232);
        }

        else
        {
          swift_retain();
          uint64_t v85 = 0LL;
        }
      }

      else
      {
        uint64_t v85 = v228 >> 11;
        outlined retain of AttributedString.Runs((uint64_t)v288);
        swift_unknownObjectRetain();
        unint64_t v84 = v223;
      }

uint64_t specialized Range<>.init<A>(_:in:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if ((v21 & 1) == 0)
  {
    unint64_t v6 = v20[0];
    outlined init with take of LocalePreferences?( a1 + 72,  (uint64_t)v18,  &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    uint64_t result = outlined init with take of LocalePreferences?( (uint64_t)v18,  (uint64_t)v22,  &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    if ((v23 & 1) == 0) {
      goto LABEL_17;
    }
  }

  specialized AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)((uint64_t)v14);
  outlined init with take of LocalePreferences?( (uint64_t)v14,  (uint64_t)v15,  &demangling cache variable for type metadata for (start: AttributedString.MarkdownSourcePosition.Offsets, end: AttributedString.MarkdownSourcePosition.Offsets)?);
  if ((v17 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  unint64_t v6 = v15[0];
  uint64_t v8 = v16;
  if ((a3 & 0x1000000000000000LL) != 0)
  {
    uint64_t v13 = MEMORY[0x186E1B838](15LL, v15[0], a2, a3);
    if (!__OFADD__(v8, 1LL))
    {
      unint64_t v6 = v13;
      a2 = MEMORY[0x186E1B838](15LL, v8 + 1, a2, a3);
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_15;
    }

    goto LABEL_34;
  }

  if ((v15[0] & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  if ((a3 & 0x2000000000000000LL) != 0) {
    unint64_t v9 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v9 < v15[0]) {
    goto LABEL_32;
  }
  a2 = v16 + 1;
  if (__OFADD__(v16, 1LL))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  uint64_t result = swift_bridgeObjectRelease();
  if ((a2 & 0x8000000000000000LL) != 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  if (v9 < a2)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    uint64_t result = MEMORY[0x186E1B838](15LL, v6, a2, a3);
    if (!__OFADD__(v8, 1LL))
    {
      unint64_t v6 = result;
      unint64_t v12 = MEMORY[0x186E1B838](15LL, v8 + 1, a2, a3);
      uint64_t result = swift_bridgeObjectRelease();
LABEL_27:
      if (v12 >> 14 >= v6 >> 14) {
        return v6;
      }
      goto LABEL_42;
    }

    goto LABEL_43;
  }

  unint64_t v6 = (v6 << 16) | 4;
  a2 = (a2 << 16) | 4;
LABEL_15:
  if (a2 >> 14 >= v6 >> 14) {
    return v6;
  }
  __break(1u);
LABEL_17:
  uint64_t v8 = v22[0];
  if ((a3 & 0x1000000000000000LL) != 0) {
    goto LABEL_36;
  }
  if ((v6 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  if ((a3 & 0x2000000000000000LL) != 0) {
    unint64_t v10 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v6) {
    goto LABEL_39;
  }
  unint64_t v11 = v22[0] + 1LL;
  if (!__OFADD__(v22[0], 1LL))
  {
    uint64_t result = swift_bridgeObjectRelease();
    if ((v11 & 0x8000000000000000LL) == 0)
    {
      if (v10 >= v11)
      {
        unint64_t v6 = (v6 << 16) | 4;
        unint64_t v12 = (v11 << 16) | 4;
        goto LABEL_27;
      }

uint64_t closure #1 in String.LocalizationValue.restoreAttributedStringArguments(_:in:)( uint64_t *a1, uint64_t *a2, uint64_t *a3, char a4)
{
  uint64_t v5 = a1[1];
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  uint64_t v9 = a3[2];
  uint64_t v8 = a3[3];
  uint64_t v10 = a3[4];
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  if ((a4 & 1) != 0)
  {
    uint64_t v52 = a1[1];
    uint64_t v54 = a3[5];
    uint64_t v51 = *a1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      unint64_t v28 = (void *)*a2;
      __int128 v29 = *(_OWORD *)(*a2 + 16);
      __int128 v30 = *(_OWORD *)(*a2 + 48);
      __int128 v80 = *(_OWORD *)(*a2 + 32);
      __int128 v81 = v30;
      __int128 v79 = v29;
      uint64_t v31 = v28[8];
      uint64_t v50 = v28[9];
      uint64_t v48 = v28[10];
      uint64_t v46 = v28[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v79);
      swift_unknownObjectRetain();
      *a2 = AttributedString.Guts.init(string:runs:)(&v79, v31, v50, v48, v46);
      swift_release();
    }

    uint64_t v11 = *a2;
    __int128 v32 = *(_OWORD *)(*a2 + 32);
    __int128 v76 = *(_OWORD *)(*a2 + 16);
    __int128 v77 = v32;
    __int128 v78 = *(_OWORD *)(v11 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    uint64_t v56 = v6;
    *(void *)&__int128 v57 = v7;
    *((void *)&v57 + 1) = v9;
    *(void *)&__int128 v58 = v8;
    *((void *)&v58 + 1) = v10;
    *(void *)&__int128 v59 = v54;
    *((void *)&v59 + 1) = v12;
    *(void *)&__int128 v60 = v13;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v62);
    outlined release of Locale((uint64_t)v64);
    __int128 v53 = v65;
    __int128 v47 = v67;
    __int128 v49 = v66;
    __int128 v45 = v68;
    if (one-time initialization token for currentIdentity == -1) {
      goto LABEL_12;
    }
  }

  else
  {
    *(void *)&__int128 v53 = a3[6];
    v62[0] = *a1;
    v62[1] = v5;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v14 = (void *)*a2;
      __int128 v15 = *(_OWORD *)(*a2 + 16);
      __int128 v16 = *(_OWORD *)(*a2 + 48);
      __int128 v80 = *(_OWORD *)(*a2 + 32);
      __int128 v81 = v16;
      __int128 v79 = v15;
      uint64_t v17 = v14[8];
      uint64_t v51 = v14[9];
      uint64_t v52 = v13;
      uint64_t v18 = v14[11];
      *(void *)&__int128 v49 = v14[10];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v79);
      swift_unknownObjectRetain();
      uint64_t v19 = v18;
      uint64_t v13 = v52;
      *a2 = AttributedString.Guts.init(string:runs:)(&v79, v17, v51, v49, v19);
      swift_release();
    }

    uint64_t v20 = *a2;
    __int128 v21 = *(_OWORD *)(*a2 + 32);
    __int128 v76 = *(_OWORD *)(*a2 + 16);
    __int128 v77 = v21;
    __int128 v78 = *(_OWORD *)(v20 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    *(void *)&__int128 v72 = v6;
    *((void *)&v72 + 1) = v7;
    *(void *)&__int128 v73 = v9;
    *((void *)&v73 + 1) = v8;
    *(void *)&__int128 v74 = v10;
    *((void *)&v74 + 1) = v11;
    *(void *)&__int128 v75 = v53;
    *((void *)&v75 + 1) = v13;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v63);
    outlined release of Locale((uint64_t)v64);
    __int128 v57 = v65;
    __int128 v58 = v66;
    __int128 v59 = v67;
    __int128 v60 = v68;
    uint64_t v56 = v20;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    unint64_t v22 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    char v23 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v23);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v22, (uint64_t *)&v69);
    os_unfair_lock_unlock(v23);
    swift_release();
    uint64_t v24 = v69;
    uint64_t v61 = v69;
    BigString.init()();
    *(void *)uint64_t v55 = 0LL;
    MEMORY[0x186E20E78](v55, 8LL);
    uint64_t v25 = *(void *)v55;
    type metadata accessor for AttributedString.Guts();
    uint64_t v26 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      __int128 v27 = v70;
      *(_OWORD *)(v26 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v69;
      *(_OWORD *)(v26 + 32) = v27;
      *(_OWORD *)(v26 + 48) = v71;
      *(void *)(v26 + 6os_unfair_lock_unlock(*v0 + 4) = 0LL;
      *(void *)(v26 + 72) = 0LL;
      *(void *)(v26 + 80) = 0LL;
      *(void *)(v26 + 88) = v25;
      *a2 = v26;
      swift_release();
      v55[0] = 0;
      AttributedSubstring.mergeAttributes(_:mergePolicy:)(v62, v55);
      if (v61 == v24)
      {
        *a2 = v56;
        return swift_release();
      }

      goto LABEL_20;
    }

    __break(1u);
  }

  swift_once();
LABEL_12:
  __int128 v33 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  uint64_t v34 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v34);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v33, (uint64_t *)&v72);
  os_unfair_lock_unlock(v34);
  swift_release();
  BigString.init()();
  *(void *)&__int128 v72 = 0LL;
  MEMORY[0x186E20E78](&v72, 8LL);
  uint64_t v35 = v72;
  type metadata accessor for AttributedString.Guts();
  uint64_t v36 = swift_allocObject();
  if ((BigString.isEmpty.getter() & 1) != 0)
  {
    __int128 v37 = v63[1];
    *(_OWORD *)(v36 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v63[0];
    *(_OWORD *)(v36 + 32) = v37;
    *(_OWORD *)(v36 + 48) = v63[2];
    *(void *)(v36 + 6os_unfair_lock_unlock(*v0 + 4) = 0LL;
    *(void *)(v36 + 72) = 0LL;
    *(void *)(v36 + 80) = 0LL;
    *(void *)(v36 + 88) = v35;
    *a2 = v36;
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      __int128 v38 = *(_OWORD *)(v11 + 32);
      __int128 v69 = *(_OWORD *)(v11 + 16);
      __int128 v70 = v38;
      __int128 v71 = *(_OWORD *)(v11 + 48);
      uint64_t v39 = *(void *)(v11 + 64);
      uint64_t v40 = *(void *)(v11 + 72);
      uint64_t v41 = *(void *)(v11 + 80);
      uint64_t v42 = *(void *)(v11 + 88);
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v69);
      swift_unknownObjectRetain();
      uint64_t v43 = AttributedString.Guts.init(string:runs:)(&v69, v39, v40, v41, v42);
      swift_release();
      uint64_t v11 = v43;
    }

    __int128 v72 = v53;
    __int128 v73 = v49;
    __int128 v74 = v47;
    __int128 v75 = v45;
    AttributedString.Guts.setAttributes(_:in:)(v51, v52);
    *a2 = v11;
    return swift_release();
  }

  __break(1u);
LABEL_20:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.CodingKeys()
{
  if (*v0) {
    return 0x746E656D75677261LL;
  }
  else {
    return 7955819LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationValue.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t String.LocalizationValue.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.CodingKeys>);
  uint64_t v13 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v12[1] = *v1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v16 = static LocaleCache.cache;
  uint64_t v6 = LocaleCache.current.getter();
  v12[0] = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
  uint64_t v8 = v14;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v3);
    return swift_unknownObjectRelease();
  }

  else
  {
    swift_unknownObjectRetain();
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJ14CodableStorageOs5NeverOTg506_sSS10d3E17ef90V6encode33_6BD3BCCACE0AF34AB8D7E61AF16B4164LL2to14fallbackLocaleys7Encoder_p_AA0O0VtKFAC14gh3V14iJ8OALXEfU_AF6LocaleVTf1cn_nTf4ng_n( v10,  v6,  v12[0]);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v16 = v11;
    char v15 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String.LocalizationValue.FormatArgument.CodableStorage]);
    lazy protocol witness table accessor for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A]( &lazy protocol witness table cache variable for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A],  &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage and conformance String.LocalizationValue.FormatArgument.CodableStorage,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage,  MEMORY[0x189618448]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v3);
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }

uint64_t String.LocalizationValue.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v91 = a2;
  uint64_t v85 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0LL);
  uint64_t v92 = *(void *)(v85 - 8);
  MEMORY[0x1895F8858](v85);
  unint64_t v84 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v95 = (char *)&v60 - v5;
  MEMORY[0x1895F8858](v6);
  uint64_t v94 = (char *)&v60 - v7;
  uint64_t v77 = v8;
  MEMORY[0x1895F8858](v9);
  unint64_t v90 = (char *)&v60 - v10;
  uint64_t v83 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0LL);
  uint64_t v98 = *(void *)(v83 - 8);
  uint64_t v11 = *(void *)(v98 + 64);
  MEMORY[0x1895F8858](v83);
  uint64_t v82 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  __int128 v81 = (char *)&v60 - v13;
  MEMORY[0x1895F8858](v14);
  char v89 = (char *)&v60 - v15;
  MEMORY[0x1895F8858](v16);
  uint64_t v88 = (char *)&v60 - v17;
  uint64_t v80 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0LL);
  uint64_t v97 = *(void *)(v80 - 8);
  uint64_t v18 = *(void *)(v97 + 64);
  MEMORY[0x1895F8858](v80);
  __int128 v79 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  __int128 v78 = (char *)&v60 - v20;
  MEMORY[0x1895F8858](v21);
  uint64_t v87 = (char *)&v60 - v22;
  MEMORY[0x1895F8858](v23);
  uint64_t v86 = (char *)&v60 - v24;
  uint64_t v96 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0LL);
  uint64_t v76 = *(void *)(v96 - 8);
  MEMORY[0x1895F8858](v96);
  uint64_t v93 = (char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v26);
  uint64_t v99 = (uint64_t)&v60 - v27;
  MEMORY[0x1895F8858](v28);
  uint64_t v101 = (uint64_t)&v60 - v29;
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.CodingKeys>);
  uint64_t v30 = *(void *)(v100 - 8);
  MEMORY[0x1895F8858](v100);
  __int128 v32 = (char *)&v60 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys();
  uint64_t v33 = v106;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v33) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __int128 v75 = a1;
  uint64_t v72 = v18;
  uint64_t v73 = v11;
  uint64_t v106 = v30;
  LOBYTE(v102) = 0;
  uint64_t v34 = v100;
  uint64_t v36 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v38 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String.LocalizationValue.FormatArgument.CodableStorage]);
  v104[64] = 1;
  lazy protocol witness table accessor for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A]( &lazy protocol witness table cache variable for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A],  (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage and conformance String.LocalizationValue.FormatArgument.CodableStorage,  (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage,  MEMORY[0x189618478]);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (!*(void *)(v102 + 16))
  {
    uint64_t v47 = MEMORY[0x18961AFE8];
    uint64_t v48 = v106;
LABEL_15:
    (*(void (**)(char *, uint64_t))(v48 + 8))(v32, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    __int128 v59 = v91;
    *uint64_t v91 = v47;
    v59[1] = v36;
    v59[2] = v38;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  uint64_t v69 = v36;
  __int128 v70 = v32;
  uint64_t v68 = v102;
  uint64_t v39 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOG_SSs5NeverOTg506_sSS10d3E17ef31V4fromACs7Decoder_p_tKcfcSSAC14gh3V14iJ54Ocfu_33_3c0eda9a63dc724d562b3e4a722c2209AISSTf3nnnpk_nTf1cn_n(v102);
  int64_t v74 = 0LL;
  uint64_t v40 = *(void *)(v39 + 16);
  uint64_t v67 = v38;
  if (v40)
  {
    swift_bridgeObjectRetain();
    uint64_t v41 = 0LL;
    uint64_t v42 = (void **)(v39 + 40);
    unint64_t v43 = 0xE000000000000000LL;
    do
    {
      uint64_t v44 = (uint64_t)*(v42 - 1);
      __int128 v45 = *v42;
      uint64_t v102 = v41;
      unint64_t v103 = v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v46._uint64_t countAndFlagsBits = v44;
      v46._unint64_t object = v45;
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v41 = v102;
      unint64_t v43 = v103;
      v42 += 2;
      --v40;
    }

    while (v40);
    swift_bridgeObjectRelease();
    uint64_t v34 = v100;
  }

  swift_bridgeObjectRelease();
  __int128 v49 = v70;
  KeyedDecodingContainer.codingPath.getter();
  int64_t v50 = v74;
  _assertValidDecodedFormat(_:validFormatSpecifiers:codingPath:)();
  int64_t v66 = v50;
  if (!v50)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v51 = v68;
    int64_t v52 = *(void *)(v68 + 16);
    uint64_t v47 = MEMORY[0x18961AFE8];
    if (v52)
    {
      uint64_t v105 = MEMORY[0x18961AFE8];
      int64_t v74 = v52;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52, 0);
      uint64_t v53 = v51 + ((*(unsigned __int8 *)(v76 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
      uint64_t v54 = (uint64_t)v93;
      uint64_t v63 = v77 + 3;
      uint64_t v64 = v93 + 8;
      __int128 v65 = v104;
      uint64_t v61 = v72 + 7;
      uint64_t v62 = v73 + 7;
      uint64_t v71 = *(void *)(v76 + 72);
      *(void *)&__int128 v55 = &type metadata for Date;
      __int128 v60 = v55;
      uint64_t v77 = v53;
      uint64_t v56 = v101;
      outlined init with copy of ICUNumberFormatter.Signature( v53,  v101,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      uint64_t v57 = v99;
      outlined init with copy of ICUNumberFormatter.Signature( v56,  v99,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      outlined init with copy of ICUNumberFormatter.Signature( v57,  v54,  type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      __int128 v58 = (char *)&loc_1832F3C54 + 4 * word_183814CD2[swift_getEnumCaseMultiPayload()];
      __asm { BR              X9 }
    }

    uint64_t v38 = v67;
    uint64_t v48 = v106;
    uint64_t v36 = v69;
    __int128 v32 = v70;
    goto LABEL_15;
  }

  (*(void (**)(char *, uint64_t))(v106 + 8))(v49, v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  return swift_bridgeObjectRelease();
}

void _assertValidDecodedFormat(_:validFormatSpecifiers:codingPath:)()
{
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return String.LocalizationValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue(void *a1)
{
  return String.LocalizationValue.encode(to:)(a1);
}

uint64_t Int8._arg.getter(char a1)
{
  return a1;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance Int8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t Int16._arg.getter(__int16 a1)
{
  return a1;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance Int16(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t UInt8._arg.getter(uint64_t result)
{
  return result;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance UInt8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t UInt16._arg.getter(uint64_t result)
{
  return (unsigned __int16)result;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance UInt16(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

float protocol witness for _FormatSpecifiable._arg.getter in conformance Float@<S0>(_DWORD *a1@<X8>)
{
  float result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t LocalizedStringResource.key.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocalizedStringResource.defaultValue.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t LocalizedStringResource.table.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocalizedStringResource.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 56);
  return swift_unknownObjectRetain();
}

__n128 LocalizedStringResource.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 56) = *a1;
  return result;
}

uint64_t (*LocalizedStringResource.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalizedStringResource.bundle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)v1[9];
  uint64_t v2 = v1[10];
  uint64_t v4 = v1[11];
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(_BYTE *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = 1;
  swift_retain();
  id v5 = v3;
  return swift_retain();
}

void LocalizedStringResource.BundleDescription.resolvedURL.getter(void *a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(_BYTE *)(v1 + 24) == 1)
    {
      uint64_t v6 = v1 + 8;
      uint64_t v5 = *(void *)(v1 + 8);
      uint64_t v4 = *(void *)(v6 + 8);
      *a1 = v3;
      a1[1] = v5;
      a1[2] = v4;
      swift_retain();
      id v7 = v3;
      swift_retain();
      return;
    }
  }

  else
  {
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v9 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    id v10 = objc_msgSend(v9, sel_bundleURL);

    if (v10)
    {
LABEL_7:
      URL.init(reference:)(v10, &v13);

      __int128 v12 = v14;
      *a1 = v13;
      *(_OWORD *)(a1 + 1) = v12;
      return;
    }

    __break(1u);
  }

  id v11 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  id v10 = objc_msgSend(v11, sel_bundleURL);

  if (v10) {
    goto LABEL_7;
  }
  __break(1u);
}

void LocalizedStringResource.init(key:defaultValue:table:locale:bundleURL:sandboxExtensionToken:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15 = a11;
  __int128 v30 = *a7;
  uint64_t v16 = *(void **)a8;
  uint64_t v17 = *(void *)(a8 + 8);
  uint64_t v18 = *(void *)(a8 + 16);
  swift_retain();
  id v19 = v16;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v22 = objc_msgSend(v19, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v22 & 1) != 0) {
      goto LABEL_9;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }

  URL.scheme.getter();
  if (!v20)
  {
    swift_release();
    swift_release();

    goto LABEL_14;
  }

  Swift::String v21 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v21._countAndFlagsBits != 1701603686 || v21._object != (void *)0xE400000000000000LL)
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t v15 = a11;
    if ((v23 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v15 = a11;
LABEL_9:
  if (a4)
  {
    uint64_t v24 = a5;
    uint64_t v26 = a3;
    uint64_t v25 = a1;
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = a1;
    uint64_t v26 = a1;
    a4 = a2;
    uint64_t v24 = a5;
  }

  uint64_t v27 = MEMORY[0x18961AFE8];
  *(void *)a9 = v25;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v27;
  *(void *)(a9 + 2os_unfair_lock_unlock(*v0 + 4) = v26;
  *(void *)(a9 + 32) = a4;
  *(void *)(a9 + 40) = v24;
  *(void *)(a9 + 48) = a6;
  *(_OWORD *)(a9 + 56) = v30;
  *(void *)(a9 + 72) = v19;
  *(void *)(a9 + 80) = v17;
  *(void *)(a9 + 88) = v18;
  *(void *)(a9 + 96) = a10;
  *(void *)(a9 + 10os_unfair_lock_unlock(*v0 + 4) = v15;
}

void LocalizedStringResource.init(_:table:locale:bundle:comment:)( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9 = a1[1];
  uint64_t v23 = *a1;
  uint64_t v10 = a1[2];
  __int128 v24 = *a4;
  id v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8);
  uint64_t v13 = *(void *)(a5 + 16);
  char v14 = *(_BYTE *)(a5 + 24);
  swift_bridgeObjectRetain();
  LocalizedStringResource.BundleDescription.resolvedURL.getter(v25);
  outlined consume of LocalizedStringResource.BundleDescription(v11, v12, v13, v14);
  uint64_t v15 = (void *)v25[0];
  uint64_t v16 = v25[1];
  uint64_t v17 = v25[2];
  swift_retain();
  id v18 = v15;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    URL.scheme.getter();
    if (v19)
    {
      Swift::String v20 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v20._countAndFlagsBits == 1701603686 && v20._object == (void *)0xE400000000000000LL)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
LABEL_9:
        *(void *)a6 = v9;
        *(void *)(a6 + 8) = v10;
        *(void *)(a6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v23;
        *(void *)(a6 + 2os_unfair_lock_unlock(*v0 + 4) = v9;
        *(void *)(a6 + 32) = v10;
        *(void *)(a6 + 40) = a2;
        *(void *)(a6 + 48) = a3;
        *(_OWORD *)(a6 + 56) = v24;
        *(void *)(a6 + 72) = v18;
        *(void *)(a6 + 80) = v16;
        *(void *)(a6 + 96) = 0LL;
        *(void *)(a6 + 10os_unfair_lock_unlock(*v0 + 4) = 0LL;
        *(void *)(a6 + 88) = v17;
        return;
      }

      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0) {
        goto LABEL_9;
      }
    }

    else
    {
      swift_release();
      swift_release();
    }
  }

  else
  {
    unsigned __int8 v21 = objc_msgSend(v18, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v21 & 1) != 0) {
      goto LABEL_9;
    }
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)( uint64_t *a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, __int128 *a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v25 = a1[1];
  uint64_t v26 = *a1;
  uint64_t v24 = a1[2];
  __int128 v27 = *a4;
  uint64_t v9 = *(void **)a5;
  uint64_t v10 = *(void *)(a5 + 8);
  uint64_t v11 = *(void *)(a5 + 16);
  char v12 = *(_BYTE *)(a5 + 24);
  uint64_t v13 = StaticString.description.getter();
  uint64_t v15 = v14;
  LocalizedStringResource.BundleDescription.resolvedURL.getter(v28);
  outlined consume of LocalizedStringResource.BundleDescription(v9, v10, v11, v12);
  uint64_t v16 = (void *)v28[0];
  uint64_t v17 = v28[1];
  uint64_t v18 = v28[2];
  swift_retain();
  id v19 = v16;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    URL.scheme.getter();
    if (v20)
    {
      Swift::String v21 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v21._countAndFlagsBits == 1701603686 && v21._object == (void *)0xE400000000000000LL)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
LABEL_9:
        *(void *)a6 = v13;
        *(void *)(a6 + 8) = v15;
        *(void *)(a6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v26;
        *(void *)(a6 + 2os_unfair_lock_unlock(*v0 + 4) = v25;
        *(void *)(a6 + 32) = v24;
        *(void *)(a6 + 40) = a2;
        *(void *)(a6 + 48) = a3;
        *(_OWORD *)(a6 + 56) = v27;
        *(void *)(a6 + 72) = v19;
        *(void *)(a6 + 80) = v17;
        *(void *)(a6 + 96) = 0LL;
        *(void *)(a6 + 10os_unfair_lock_unlock(*v0 + 4) = 0LL;
        *(void *)(a6 + 88) = v18;
        return;
      }

      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0) {
        goto LABEL_9;
      }
    }

    else
    {
      swift_release();
      swift_release();
    }
  }

  else
  {
    unsigned __int8 v22 = objc_msgSend(v19, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v22 & 1) != 0) {
      goto LABEL_9;
    }
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

__n128 LocalizedStringResource.init(stringLiteral:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v16[0] = MEMORY[0x18961AFE8];
  v16[1] = a1;
  void v16[2] = a2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v17 = static LocaleCache.cache;
  *(void *)&__int128 v15 = LocaleCache.current.getter();
  *((void *)&v15 + 1) = v4;
  memset(v13, 0, sizeof(v13));
  char v14 = 2;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v16, 0LL, 0LL, &v15, (uint64_t)v13, (uint64_t)&v17);
  uint64_t v5 = v19;
  uint64_t v6 = v20;
  uint64_t v7 = v23;
  __n128 result = v18;
  __int128 v9 = v22;
  __int128 v10 = v21;
  __int128 v11 = v24;
  __int128 v12 = v25;
  *(void *)a3 = v17;
  *(__n128 *)(a3 + 8) = result;
  *(void *)(a3 + 2os_unfair_lock_unlock(*v0 + 4) = v5;
  *(void *)(a3 + 32) = v6;
  *(_OWORD *)(a3 + 40) = v10;
  *(_OWORD *)(a3 + 56) = v9;
  *(void *)(a3 + 72) = v7;
  *(_OWORD *)(a3 + 80) = v11;
  *(_OWORD *)(a3 + 96) = v12;
  return result;
}

__n128 LocalizedStringResource.init(stringInterpolation:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 2);
  __int128 v16 = *a1;
  uint64_t v17 = v3;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v18 = static LocaleCache.cache;
  *(void *)&__int128 v15 = LocaleCache.current.getter();
  *((void *)&v15 + 1) = v4;
  memset(v13, 0, sizeof(v13));
  char v14 = 2;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)( (uint64_t *)&v16,  0LL,  0LL,  &v15,  (uint64_t)v13,  (uint64_t)&v18);
  uint64_t v5 = v20;
  uint64_t v6 = v21;
  uint64_t v7 = v24;
  __n128 result = v19;
  __int128 v9 = v23;
  __int128 v10 = v22;
  __int128 v11 = v25;
  __int128 v12 = v26;
  *(void *)a2 = v18;
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 2os_unfair_lock_unlock(*v0 + 4) = v5;
  *(void *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 40) = v10;
  *(_OWORD *)(a2 + 56) = v9;
  *(void *)(a2 + 72) = v7;
  *(_OWORD *)(a2 + 80) = v11;
  *(_OWORD *)(a2 + 96) = v12;
  return result;
}

uint64_t LocalizedStringResource.localizedStringResource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  __int128 v9 = *(void **)(v1 + 72);
  uint64_t v8 = *(void *)(v1 + 80);
  uint64_t v10 = *(void *)(v1 + 104);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(void *)(a1 + 2os_unfair_lock_unlock(*v0 + 4) = v3;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 88);
  *(void *)(a1 + 10os_unfair_lock_unlock(*v0 + 4) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v11 = v9;
  swift_retain();
  return swift_retain();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LocalizedStringResource.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1832F5A10 + 4 * byte_183814CF6[*v0]))( 7955819LL,  0xE300000000000000LL);
}

uint64_t sub_1832F5A10()
{
  return 0x56746C7561666564LL;
}

uint64_t sub_1832F5A30()
{
  return 0x656C626174LL;
}