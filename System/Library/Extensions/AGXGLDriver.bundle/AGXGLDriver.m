BOOL sub_3F88(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  v1 = *(void **)(a1 + 816);
  if (v1)
  {
    if (*v1)
    {
LABEL_3:
      if (!*(_BYTE *)(*(void *)(a1 + 24) + 15713LL)) {
        return *(__int16 *)(*(void *)(a1 + 24) + 15714LL) != -1;
      }
    }

    else
    {
      v3 = 1LL;
      while (v3 != 4)
      {
        v4 = v3;
        if (v1[v3++])
        {
          return 0LL;
        }
      }
    }
  }

  return 0LL;
}

uint64_t sub_3FEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 3952);
  uint64_t result = gpusLoadTransformFeedbackBuffers();
  uint64_t v4 = *(void *)(a1 + 816);
  if (v4)
  {
    if (*(void *)v4)
    {
LABEL_3:
      uint64_t v5 = ***(void ***)(v4 + 32);
      *(void *)(v2 + 8) = v5;
      v6 = (_BYTE *)(*(void *)(a1 + 24) + 15713LL);
      unsigned int v7 = *(_DWORD *)(a1 + 2996) & 0xFFFFC7FF;
      if (*(__int16 *)(*(void *)(a1 + 24) + 15714LL) == -1)
      {
        *(_DWORD *)(a1 + 2996) = v7 | 0x2000;
        if (*v6) {
          *(void *)(v5 + 32) = 1LL;
        }
      }

      else
      {
        *(_DWORD *)(a1 + 2996) = v7 | 0x1800;
        *(_DWORD *)(a1 + 2988) |= 2u;
        if (*(void *)(v5 + 32)) {
          *(void *)(a1 + 4904) |= 0x2000uLL;
        }
        else {
          *(void *)(v5 + 24) = 0LL;
        }
        *(void *)(v5 + 32) = 0LL;
      }

      return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2536) + 32LL))(*(void *)(a1 + 2536), a1);
    }

    else
    {
      uint64_t v8 = 1LL;
      while (v8 != 4)
      {
        uint64_t v9 = v8;
        if (*(void *)(v4 + 8 * v8++))
        {
          return result;
        }
      }
    }
  }

  return result;
}

uint64_t sub_40E4(uint64_t a1)
{
  *(void *)a1 = off_7A800;
  *(void *)(a1 + 56) = 0LL;
  return sub_693E4(a1);
}

void sub_40F8(void *a1)
{
  *a1 = off_7A800;
  a1[7] = 0LL;
  v1 = (void *)sub_693E4((uint64_t)a1);
  operator delete(v1);
}

uint64_t sub_411C(uint64_t result, int a2, int a3, uint64_t a4, int a5)
{
  unint64_t v5 = a2 & 0xFFFFFFFC;
  if (a3) {
    unint64_t v5 = a2 & 0xFFFFFFFC | ((unint64_t)((a3 + 3) >> 2) << 35);
  }
  unint64_t v6 = v5 | (a4 << 33);
  if (a5) {
    v6 |= 0x20000000000uLL;
  }
  **(void **)(result + 56) = v6;
  return result;
}

void sub_4154(uint64_t a1)
{
  v1 = (void *)sub_6947C(a1);
  operator delete(v1);
}

uint64_t sub_4168(uint64_t result, int a2, int a3, uint64_t a4, int a5)
{
  unint64_t v5 = a2 & 0xFFFFFFFC;
  if (a3) {
    unint64_t v5 = a2 & 0xFFFFFFFC | ((unint64_t)((a3 + 3) >> 2) << 35);
  }
  unint64_t v6 = v5 | (a4 << 33);
  if (a5) {
    v6 |= 0x20000000000uLL;
  }
  **(void **)(result + 56) = v6;
  return result;
}

uint64_t sub_41A0(uint64_t a1)
{
  *(void *)a1 = off_7A800;
  *(void *)(a1 + 56) = 0LL;
  return sub_693E4(a1);
}

void sub_41B4(void *a1)
{
  *a1 = off_7A800;
  a1[7] = 0LL;
  v1 = (void *)sub_693E4((uint64_t)a1);
  operator delete(v1);
}

uint64_t sub_41D8(uint64_t result, int a2, int a3, uint64_t a4, int a5)
{
  unint64_t v5 = a2 & 0xFFFFFFFC;
  if (a3) {
    unint64_t v5 = a2 & 0xFFFFFFFC | ((unint64_t)((a3 + 3) >> 2) << 35);
  }
  unint64_t v6 = v5 | (a4 << 33);
  if (a5) {
    v6 |= 0x20000000000uLL;
  }
  **(void **)(result + 56) = v6;
  return result;
}

void sub_4210(void *a1)
{
  v1 = (void *)sub_4248(a1);
  operator delete(v1);
}

uint64_t sub_4224(uint64_t result, int a2, int a3)
{
  unint64_t v3 = a2 & 0xFFFFFFFC;
  if (a3) {
    unint64_t v3 = a2 & 0xFFFFFFFC | ((unint64_t)((a3 + 3) >> 2) << 35);
  }
  **(void **)(result + 56) = v3;
  return result;
}

uint64_t sub_4248(void *a1)
{
  *a1 = off_784B0;
  uint64_t v2 = (void *)a1[8];
  if (v2) {
    malloc_zone_free((malloc_zone_t *)qword_7C218, v2);
  }
  unint64_t v3 = (void *)a1[9];
  if (v3) {
    malloc_zone_free((malloc_zone_t *)qword_7C218, v3);
  }
  *a1 = off_7A800;
  a1[7] = 0LL;
  return sub_693E4((uint64_t)a1);
}

void sub_42AC(uint64_t a1)
{
  v1 = (void *)sub_694D8(a1);
  operator delete(v1);
}

uint64_t sub_42C0(uint64_t result, int a2, int a3, uint64_t a4, int a5)
{
  unint64_t v5 = a2 & 0xFFFFFFFC;
  if (a3) {
    unint64_t v5 = a2 & 0xFFFFFFFC | ((unint64_t)((a3 + 3) >> 2) << 35);
  }
  unint64_t v6 = v5 | (a4 << 33);
  if (a5) {
    v6 |= 0x20000000000uLL;
  }
  **(void **)(result + 56) = v6;
  return result;
}

uint64_t sub_42F8(uint64_t a1)
{
  *(void *)a1 = off_78508;
  uint64_t v1 = *(void *)(a1 + 24) + *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0LL;
  return sub_693E4(a1);
}

void sub_4318(void *a1)
{
  *a1 = off_78508;
  uint64_t v1 = a1[3] + a1[2];
  a1[2] = 0LL;
  a1[3] = v1;
  a1[4] = 0LL;
  uint64_t v2 = (void *)sub_693E4((uint64_t)a1);
  operator delete(v2);
}

uint64_t sub_4348(uint64_t result, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (*(_BYTE *)(result + 64)) {
    a3 = 1;
  }
  if (a3) {
    int v6 = 2;
  }
  else {
    int v6 = 0;
  }
  if (a5) {
    int v6 = 0;
  }
  unint64_t v7 = *(void *)(result + 56);
  if (v7)
  {
    uint64_t v8 = *(void *)(result + 40);
    do
    {
      unint64_t v9 = __clz(__rbit64(v7));
      *(void *)(v8 + 8 * v9) = *(void *)(v8 + 8 * v9) & 0xFFFFFFFFFCFC0000LL | dword_76240[*(unsigned __int8 *)(a2 + 4 * v9 + 3)] | (*(unsigned __int8 *)(a2 + 4 * v9) << 17) | (v6 + *(unsigned __int8 *)(a2 + 4 * v9 + 1)) | ((v6 + *(unsigned __int8 *)(a2 + 4 * v9 + 2)) << 8);
      v7 &= ~(1LL << v9);
    }

    while (v7);
  }

  return result;
}

void sub_43E0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_69524(a1);
  operator delete(v1);
}

uint64_t sub_43F4(void *a1, uint64_t a2)
{
  uint64_t v15 = 0LL;
  __int128 v14 = 0u;
  __int128 v13 = 0u;
  __int128 v12 = 0u;
  LODWORD(v11) = 1;
  HIDWORD(v11) = (*(unsigned int (**)(void *))(*a1 + 24LL))(a1) >> 2;
  *(void *)&__int128 v13 = off_7C2C0(a2);
  sub_4574((unsigned int *)&v11, 0LL, 0);
  uint64_t v4 = v15;
  size_t v5 = 4LL * (HIDWORD(v15) + v15);
  a1[3] = v5;
  a1[5] = 4 * v4;
  int v6 = (unsigned int *)malloc_zone_calloc(*(malloc_zone_t **)(qword_7C220 + 8), 1uLL, v5);
  a1[1] = v6;
  sub_4574((unsigned int *)&v11, v6, 2);
  sub_4574((unsigned int *)&v11, (unsigned int *)(a1[1] + 4LL * v15), 1);
  uint64_t v11 = 0LL;
  __int128 v12 = 0uLL;
  LODWORD(v11) = (*(unsigned int (**)(void *))(*a1 + 24LL))(a1) >> 2;
  *(void *)&__int128 v12 = off_7C2C8(a2);
  sub_4674((uint64_t)&v11, 0LL, 0);
  uint64_t v7 = DWORD2(v12);
  size_t v8 = 4LL * (HIDWORD(v12) + DWORD2(v12));
  a1[4] = v8;
  a1[6] = 4 * v7;
  unint64_t v9 = (unsigned int *)malloc_zone_calloc(*(malloc_zone_t **)(qword_7C220 + 8), 1uLL, v8);
  a1[2] = v9;
  sub_4674((uint64_t)&v11, v9, 2);
  sub_4674((uint64_t)&v11, (unsigned int *)(a1[2] + 4LL * DWORD2(v12)), 1);
  return 1LL;
}

uint64_t sub_456C()
{
  return 128LL;
}

unsigned int *sub_4574(unsigned int *result, unsigned int *a2, int a3)
{
  uint64_t v4 = a2;
  size_t v5 = result;
  uint64_t v12 = 0LL;
  int v11 = 1;
  if (a2 && a3 == 1)
  {
    *a2 = -746586096;
    uint64_t v4 = a2 + 1;
  }

  unint64_t v6 = *result;
  if ((_DWORD)v6)
  {
    unint64_t v7 = 0LL;
    unsigned int v8 = 32;
    do
    {
      uint64_t v9 = *(void *)&v5[2 * v7 + 6];
      if (v9)
      {
        uint64_t result = sub_470C(1, v8, v9, v5[v7 + 1], (unsigned int *)&v12 + 1, &v12, &v11, v4, a3);
        if (v4) {
          uint64_t v4 = result;
        }
        else {
          uint64_t v4 = 0LL;
        }
        unint64_t v6 = *v5;
      }

      v8 += v5[++v7];
    }

    while (v7 < v6);
    int v10 = v11 + 2;
  }

  else
  {
    int v10 = 3;
  }

  if (a3 == 1 && v4) {
    *(void *)uint64_t v4 = 0xD3000000D1000000LL;
  }
  v5[14] = (v12 + 3) & 0xFFFFFFFC;
  v5[15] = v10;
  return result;
}

unsigned int *sub_4674(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t v10 = 0LL;
  uint64_t result = sub_470C(0, 0x20u, *(void *)(a1 + 8), *(_DWORD *)a1, (unsigned int *)&v10 + 1, &v10, &v9, a2, a3);
  if (a2) {
    unint64_t v7 = result;
  }
  else {
    unint64_t v7 = 0LL;
  }
  int v8 = v9;
  if (a3 == 1 && v7) {
    *(void *)unint64_t v7 = 0xD3000000D1000000LL;
  }
  *(_DWORD *)(a1 + 16) = (v10 + 3) & 0xFFFFFFFC;
  *(_DWORD *)(a1 + 20) = v8 + 2;
  return result;
}

unsigned int *sub_470C( int a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int *a5, _DWORD *a6, _DWORD *a7, unsigned int *a8, int a9)
{
  if (a1)
  {
    unsigned int v9 = a4 >> 1;
    unsigned int v10 = a2 >> 1;
    if (a4 >= 0x10) {
      unsigned int v11 = a4 / 0xC + 1;
    }
    else {
      unsigned int v11 = 1;
    }
    if (a4 >= 0x10) {
      int v12 = 6;
    }
    else {
      int v12 = 0;
    }
    if (a4 >= 0x10) {
      unsigned int v9 = (a4 >> 1) - 6 * (a4 / 0xC);
    }
    unsigned int v13 = v11;
    do
    {
      if (!v9 && v13 == 1) {
        break;
      }
      int v14 = *a5 + 1;
      unsigned int v15 = (v14 & 0xFFFFFFFE) + 2;
      *a6 = *a6 - *a5 + v15;
      *a5 = v15;
      if (a9 == 2)
      {
        char v16 = v13 == 1 ? v9 : v12;
        a8[v14 & 0xFFFFFFFE] = a3 & 0xFFFFFFFC;
        a8[v14 | 1] = (((unint64_t)(v16 & 7) << 41) & 0xFFF07F0000000000LL | ((unint64_t)(v10 & 0x1F) << 47) | a3 & 0xFFFFFFFFFFLL) >> 32;
        v10 += v12;
        a3 += (8 * v12);
      }

      else if (a9 == 1 && a8)
      {
        *a8++ = (v14 >> 1) | 0xD0000000;
      }

      --v13;
    }

    while (v13);
  }

  else
  {
    unsigned int v11 = a4 / 0xF;
    if (a4 % 0xF) {
      ++v11;
    }
    if (v11)
    {
      unsigned int v17 = v11;
      do
      {
        int v18 = *a5 + 1;
        unsigned int v19 = (v18 & 0xFFFFFFFE) + 2;
        *a6 = *a6 - *a5 + v19;
        *a5 = v19;
        if (a9 == 2)
        {
          if (a4 >= 0xF) {
            uint64_t v20 = 15LL;
          }
          else {
            uint64_t v20 = a4;
          }
          a8[v18 & 0xFFFFFFFE] = a3 & 0xFFFFFFFC;
          a8[v18 | 1] = (((unint64_t)(a2 & 0x3F) << 46) | (v20 << 40) | a3 & 0xFFFFFFFFFFLL) >> 32;
          a2 += v20;
          a4 -= v20;
          a3 += 4LL * v20;
        }

        else if (a9 == 1 && a8)
        {
          *a8++ = (v18 >> 1) | 0xD0800000;
        }

        --v17;
      }

      while (v17);
    }
  }

  *a7 += v11;
  if (a9) {
    return a8;
  }
  else {
    return 0LL;
  }
}

void sub_48B8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_5CE0(a1);
  operator delete(v1);
}

void sub_48CC(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  *(_DWORD *)(a1 + 312) = 1;
  *(_DWORD *)(a1 + 144) = a4;
  uint64_t v6 = a4;
  if (!a4) {
    goto LABEL_5;
  }
  unsigned int v9 = (void *)(a1 + 88);
  uint64_t v10 = a4;
  do
  {
    uint64_t v11 = *a2++;
    *(v9 - 1) = off_7C2C8(v11);
    uint64_t v12 = *a3++;
    *unsigned int v9 = v12;
    v9 += 2;
    --v10;
  }

  while (v10);
  if (a4 <= 3) {
LABEL_5:
  }
    bzero((void *)(a1 + 16 * v6 + 80), 16LL * (3 - a4) + 16);
}

char *sub_4984(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v3 = *a2;
  *(_DWORD *)(a1 + 272) = v3;
  if ((_DWORD)v3)
  {
    *(_OWORD *)(a1 + 152) = 0u;
    uint64_t v7 = a1 + 152;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_DWORD *)(a1 + 252) = a3 != 1;
    malloc_zone_free(*(malloc_zone_t **)(qword_7C220 + 8), *(void **)(a1 + 280));
    uint64_t result = (char *)malloc_zone_calloc(*(malloc_zone_t **)(qword_7C220 + 8), 1uLL, 40LL * *(unsigned int *)(v7 + 120));
    *(void *)(v7 + 128) = result;
    if (!result) {
      return result;
    }
    int v9 = 0;
    uint64_t v10 = 0LL;
    uint64_t v11 = (void *)(a1 + 152);
    do
    {
      uint64_t v12 = a2[v10 + 1];
      unsigned int v13 = (char *)&a2[v10] + v12;
      int v14 = &result[4 * (v9 & 0xFFFFFFFE)];
      *(_DWORD *)int v14 = 1;
      unsigned int v15 = (char *)&a2[v10] + v12 - *((int *)v13 + 1);
      if (*((unsigned __int16 *)v15 + 2) < 5u)
      {
        LODWORD(v16) = 0;
      }

      else
      {
        uint64_t v16 = *((unsigned __int16 *)v15 + 4);
        if (v16) {
          LODWORD(v16) = *(unsigned int *)((char *)&a2[v10 + 1] + v12 + v16);
        }
      }

      *((_DWORD *)v14 + 2) = v16;
      *((_DWORD *)v14 + 3) = 1;
      uint64_t v17 = v12 - *((int *)v13 + 1);
      if (*(unsigned __int16 *)((char *)&a2[v10 + 1] + v17) >= 7u
        && (uint64_t v18 = *(unsigned __int16 *)((char *)&a2[v10 + 2] + v17 + 2)) != 0)
      {
        int v19 = *(unsigned int *)((char *)&a2[v10 + 1] + v12 + v18);
      }

      else
      {
        int v19 = 0;
      }

      *((_DWORD *)v14 + 5) = v19;
      *((_DWORD *)v14 + 6) = 1;
      uint64_t v20 = (char *)&a2[v10] + v12 - *((int *)v13 + 1);
      if (*((unsigned __int16 *)v20 + 2) < 5u)
      {
        LODWORD(v21) = 0;
      }

      else
      {
        uint64_t v21 = *((unsigned __int16 *)v20 + 4);
        if (v21) {
          LODWORD(v21) = *(unsigned int *)((char *)&a2[v10 + 1] + v12 + v21);
        }
      }

      *((_DWORD *)v14 + 7) = v21;
      *((_DWORD *)v14 + 8) = 1;
      uint64_t v22 = v12 - *((int *)v13 + 1);
      unsigned int v23 = *(unsigned __int16 *)((char *)&a2[v10 + 1] + v22);
      if (a3 < 2)
      {
        else {
          uint64_t v27 = 0LL;
        }
        *(void *)v7 += 4 * v27;
      }

      else
      {
        else {
          uint64_t v25 = 0LL;
        }
        *uint64_t v11 = 4 * v25;
      }

      ++v10;
      ++v11;
      v9 += 10;
    }

    while (v3 != v10);
  }

  return (_BYTE *)(&dword_0 + 1);
}

uint64_t sub_4BA0(uint64_t result, int a2)
{
  switch(a2)
  {
    case 4:
      int v2 = 3;
      goto LABEL_7;
    case 1:
      int v2 = 2;
      goto LABEL_7;
    case 0:
      int v2 = 1;
LABEL_7:
      *(_DWORD *)(result + 256) = v2;
      return result;
  }

  printf("%s: Unsupported primitive mode: %x\n", "updatePrimitiveMode", a2);
  return putchar(10);
}

uint64_t sub_4C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9 = a1 + 248;
  int v10 = 1;
  if (*(_DWORD *)(a1 + 252) == 1) {
    int v10 = *(_DWORD *)(a1 + 272);
  }
  *(_DWORD *)(a1 + 144) = v10;
  malloc_zone_free(*(malloc_zone_t **)(qword_7C220 + 8), *(void **)(a1 + 8));
  sub_4EB4(v9, 0LL);
  *(_DWORD *)(a1 + 184) = 1;
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a1 + 288);
  *(void *)(a1 + 208) = off_7C2C8(a3);
  sub_4574((unsigned int *)(a1 + 184), 0LL, 0);
  unsigned int v11 = (*(_DWORD *)(a1 + 240) + 3) & 0xFFFFFFFC;
  uint64_t v12 = 4LL * *(unsigned int *)(a1 + 244);
  *(void *)(a1 + 24) = 4LL * v11;
  *(void *)(a1 + 32) = v12;
  size_t v13 = v12 + 4LL * v11;
  *(void *)(a1 + 40) = v13;
  int v14 = (unsigned int *)malloc_zone_calloc(*(malloc_zone_t **)(qword_7C220 + 8), 1uLL, v13);
  *(void *)(a1 + 8) = v14;
  if (!v14) {
    return 0LL;
  }
  sub_4574((unsigned int *)(a1 + 184), v14, 2);
  sub_4574((unsigned int *)(a1 + 184), (unsigned int *)(*(void *)(a1 + 8) + 4LL * *(unsigned int *)(a1 + 240)), 1);
  malloc_zone_free(*(malloc_zone_t **)(qword_7C220 + 8), *(void **)(a1 + 264));
  unsigned int v15 = malloc_zone_calloc(*(malloc_zone_t **)(qword_7C220 + 8), 1uLL, 16LL * *(unsigned int *)(a1 + 144));
  *(void *)(a1 + 264) = v15;
  if (!v15) {
    return 0LL;
  }
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  if (*(_DWORD *)(a1 + 144))
  {
    uint64_t v16 = 0LL;
    unint64_t v17 = 0LL;
    uint64_t v18 = a1 + 152;
    do
    {
      int v19 = (uint64_t *)(*(void *)(a1 + 264) + 8LL * (v16 & 0xFFFFFFFE));
      uint64_t v20 = *(void *)(v18 + 8 * v17) * (*(_DWORD *)(a1 + 256) * a5);
      uint64_t v21 = v18 + 8 * v16;
      uint64_t v22 = off_7C2C8(*(void *)(v21 - 72) + v20);
      uint64_t v23 = *(void *)(v21 - 64) - v20;
      *int v19 = v22;
      v19[1] = v23;
      ++v17;
      v16 += 2LL;
    }

    while (v17 < *(unsigned int *)(a1 + 144));
  }

  sub_51E8(v9, 0LL, v32, 0);
  unsigned int v24 = (*(_DWORD *)(a1 + 292) + 3) & 0xFFFFFFFC;
  uint64_t v25 = 4LL * *(unsigned int *)(a1 + 300);
  *(void *)(a1 + 48) = 4LL * v24;
  *(void *)(a1 + 56) = v25;
  uint64_t v26 = *(unsigned int *)(a1 + 296);
  *(void *)(a1 + 64) = v25 + 4LL * v24;
  *(void *)(a1 + 72) = v26;
  malloc_zone_free(*(malloc_zone_t **)(qword_7C220 + 8), *(void **)(a1 + 16));
  uint64_t v27 = malloc_zone_calloc(*(malloc_zone_t **)(qword_7C220 + 8), 1uLL, *(void *)(a1 + 64));
  *(void *)(a1 + 16) = v27;
  if (!v27) {
    return 0LL;
  }
  sub_4EB4(v9, v31);
  sub_51E8(v9, *(int **)(a1 + 16), v32, 2);
  v28 = (int *)(*(void *)(a1 + 16) + 4LL * *(unsigned int *)(a1 + 292));
  uint64_t v29 = 1LL;
  sub_51E8(v9, v28, v32, 1);
  return v29;
}

uint64_t sub_4E88()
{
  return 1LL;
}

uint64_t sub_4E90()
{
  return 128LL;
}

uint64_t sub_4E98(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 256);
  if (v1 == 3) {
    return 4LL;
  }
  else {
    return v1 == 2;
  }
}

uint64_t sub_4EB4(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if (*(_DWORD *)(result + 4))
    {
      if (*(_DWORD *)(result + 24))
      {
        int v2 = 0;
        int v3 = 0;
        unint64_t v4 = 0LL;
        unsigned int v5 = *(_DWORD *)(result + 40);
        uint64_t v6 = *(void *)(result + 16);
        uint64_t v7 = *(void *)(result + 32);
        do
        {
          int v8 = (int *)(v7 + 4LL * (v3 & 0xFFFFFFFE));
          else {
            int v9 = *v8;
          }
          int v10 = v8[2];
          int v11 = v8[3];
          int v12 = v9 * v8[6];
          if (*v8 < 2 || v10 == v12)
          {
            uint64_t v16 = v8 + 7;
            int v14 = v8[7];
            int v15 = v16[1];
            BOOL v19 = v11 != 1 && v15 != 1 && v10 != v14;
          }

          else
          {
            BOOL v19 = 1;
          }

          uint64_t v20 = (uint64_t *)(v6 + 8LL * (v2 & 0xFFFFFFFE));
          uint64_t v21 = (v11 * v10);
          uint64_t v22 = *v20;
          uint64_t v23 = v20[1] + *v20;
          int v24 = v23 & 0xFFFFFFFC;
          int v25 = ((((unint64_t)*(unsigned int *)(result + 8) << 53) | (v21 << 44) | v23) >> 32) & 0x3FFFF7FF;
          if (v19)
          {
            *(_DWORD *)(a2 + 4LL * (v5 - 1)) = v25;
            v5 -= 2;
            *(_DWORD *)(a2 + 4LL * v5) = v24;
          }

          *(_DWORD *)(a2 + 4LL * (v5 - 1)) = v25 | 0x800;
          *(_DWORD *)(a2 + 4LL * (v5 - 2)) = v24;
          *(_DWORD *)(a2 + 4LL * (v5 - 3)) = 0;
          *(_DWORD *)(a2 + 4LL * (v5 - 4)) = 0;
          unint64_t v26 = ((unint64_t)((v5 - 4) >> 1) << 45) | ((unint64_t)(((v5 - 4) >> 1) - 1) << 40) | v22;
          *(_DWORD *)(a2 + 4LL * (v5 - 5)) = HIDWORD(v26) & 0x3FFFFFFF;
          v5 -= 6;
          *(_DWORD *)(a2 + 4LL * v5) = v26 & 0xFFFFFFFC;
          ++v4;
          v3 += 10;
          v2 += 2;
        }

        while (v4 < *(unsigned int *)(result + 24));
      }
    }

    else
    {
      v39 = *(uint64_t **)(result + 16);
      uint64_t v40 = *v39;
      uint64_t v41 = *v39 & 0x3FFFDFFFFFFFFFFCLL;
      *(_DWORD *)a2 = v41;
      *(_DWORD *)(a2 + 4) = HIDWORD(v41) | 0x2000;
      *(void *)(a2 + 8) = 0LL;
      unint64_t v42 = (((unint64_t)*(unsigned int *)(result + 68) << 44) | ((unint64_t)*(unsigned int *)(result + 8) << 53) | (v39[1] + v40)) & 0x3FFFF7FFFFFFFFFCLL;
      *(_DWORD *)(a2 + 16) = v42;
      *(_DWORD *)(a2 + 20) = HIDWORD(v42) | 0x800;
      if (!*(_DWORD *)(result + 64)) {
        *(void *)(a2 + 24) = v42;
      }
    }

    return result;
  }

  *(_DWORD *)(result + 40) = 0;
  if (*(_DWORD *)(result + 4))
  {
    uint64_t v27 = *(unsigned int *)(result + 24);
    if ((_DWORD)v27)
    {
      uint64_t v28 = 0LL;
      int v29 = 0;
      uint64_t v30 = *(void *)(result + 32);
      uint64_t v31 = 10 * v27;
      do
      {
        uint64_t v32 = (int *)(v30 + 4LL * (v28 & 0xFFFFFFFE));
        else {
          int v33 = *v32;
        }
        int v34 = v32[2];
        int v35 = v33 * v32[6];
        BOOL v36 = *v32 < 2 || v34 == v35;
        if (v36 && (v32[3] != 1 ? (BOOL v37 = v32[8] == 1) : (BOOL v37 = 1), v37 || v34 == v32[7])) {
          int v38 = 6;
        }
        else {
          int v38 = 8;
        }
        v29 += v38;
        *(_DWORD *)(result + 40) = v29;
        v28 += 10LL;
      }

      while (v31 != v28);
    }

    return result;
  }

  uint64_t v43 = *(unsigned int *)(result + 24);
  if (!(_DWORD)v43)
  {
    *(void *)(result + 64) = 1LL;
    int v66 = 6;
    goto LABEL_80;
  }

  uint64_t v44 = 0LL;
  int v45 = 0;
  uint64_t v46 = *(void *)(result + 32);
  int v47 = 10 * v43;
  uint64_t v48 = 10 * v43;
  int v49 = 1;
  do
  {
    v50 = (int *)(v46 + 4LL * v44);
    int v51 = v50[1];
    else {
      int v52 = *v50;
    }
    int v53 = v50[2];
    int v54 = v50[3];
    if (!v49) {
      goto LABEL_74;
    }
    if (v53 == v50[7] && v54 == v50[8])
    {
      if (*v50 < 2)
      {
        if (!v51) {
          goto LABEL_65;
        }
      }

      else if (v53 == v52 * v50[6] && v51 == 0)
      {
LABEL_65:
        int v49 = 1;
        if (!v44) {
          goto LABEL_74;
        }
        goto LABEL_69;
      }
    }

    int v49 = 0;
    if (!v44) {
      goto LABEL_74;
    }
LABEL_69:
    int v57 = v50[5];
    int v58 = v50[9];
    v59 = (_DWORD *)(v46 + 4LL * (v44 - 10));
    int v60 = v59[7];
    int v61 = v59[8];
    int v62 = v59[5];
    int v63 = v59[9];
    if (v57 != v62 + v61 * v60 || v58 != v63) {
      int v49 = 0;
    }
LABEL_74:
    v45 += v54 * v53;
    v44 += 10LL;
  }

  while (v48 != v44);
  int v65 = v45 + v51 + *(_DWORD *)(v46 + 4LL * (v47 - 10) + 16);
  *(_DWORD *)(result + 64) = v49;
  *(_DWORD *)(result + 68) = v65;
  if (v49) {
    int v66 = 6;
  }
  else {
    int v66 = 8;
  }
LABEL_80:
  *(_DWORD *)(result + 40) = v66;
  return result;
}

unsigned int *sub_51E8(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    int v7 = *(_DWORD *)(a1 + 56);
  }

  else
  {
    int v7 = 0;
    *(void *)(a1 + 56) = 0LL;
  }

  int v56 = v7;
  int v57 = v7;
  int v55 = 0;
  if (*(_DWORD *)a1)
  {
    int v8 = *(_DWORD *)(a1 + 24);
    if (*(_DWORD *)(a1 + 4))
    {
      if (v8)
      {
        unsigned int v9 = 0;
        int v10 = 0;
        int v11 = v7;
        do
        {
          a2 = sub_59A4(a1, a2, a4, v9, 1, 0, v11, &v54, &v53);
          v11 += v54;
          v7 += v54;
          v10 += v53;
          ++v9;
        }

        while (v9 < *(_DWORD *)(a1 + 24));
      }

      else
      {
        int v10 = 0;
        int v11 = v7;
      }

      int v56 = v7;
      int v57 = v11;
      int v7 = v11;
      int v55 = v10;
    }

    else
    {
      sub_5750(a1, v8 - 1, (uint64_t)v59, (uint64_t)v58);
      a2 = sub_592C( a2,  a4,  *(_DWORD *)(*(void *)(a1 + 32) + 36LL),  1,  *(_DWORD *)(*(void *)(a1 + 32) + 20LL),  *(_DWORD *)(a1 + 68),  0,  v7,  v59,  &v54,  &v53);
      v7 += v54;
      int v56 = v7;
      int v57 = v7;
      int v55 = v53;
    }
  }

  if (*(_DWORD *)(a1 + 4))
  {
    if (*(_DWORD *)(a1 + 24))
    {
      unsigned int v12 = 0;
      do
      {
        a2 = sub_59A4(a1, a2, a4, v12, 0, 0, v7, &v54, &v53);
        int v7 = v57 + v54;
        v56 += v54;
        v57 += v54;
        v55 += v53;
        ++v12;
      }

      while (v12 < *(_DWORD *)(a1 + 24));
    }
  }

  else if (*(_DWORD *)(a1 + 64))
  {
    sub_5750(a1, 0, (uint64_t)v59, (uint64_t)v58);
    a2 = sub_592C( a2,  a4,  *(_DWORD *)(*(void *)(a1 + 32) + 36LL),  0,  *(_DWORD *)(*(void *)(a1 + 32) + 20LL),  *(_DWORD *)(a1 + 68),  0,  v7,  v59,  &v54,  &v53);
    v57 += v54;
    v56 += v54;
    v55 += v53;
  }

  else
  {
    unsigned int v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      unint64_t v17 = 0LL;
      int v18 = 0;
      int v19 = 0;
      unsigned int v45 = 0;
      uint64_t v50 = 0LL;
      uint64_t v51 = 0LL;
      uint64_t v46 = 0LL;
      int v48 = 0;
      uint64_t v49 = 0LL;
      int v20 = 1;
      unsigned int v21 = 10;
      do
      {
        int v52 = v18;
        uint64_t v22 = *(void *)(a1 + 32);
        uint64_t v23 = (unsigned int *)(v22 + 4LL * (v21 - 10));
        unsigned int v24 = *v23;
        if (*v23 <= 1) {
          unsigned int v24 = 1;
        }
        unint64_t v25 = v16 - 1;
        if (v17 < v25)
        {
          unint64_t v26 = (int *)(v22 + 4LL * v21);
          int v27 = *v26;
          HIDWORD(v50) = v27;
          HIDWORD(v49) = v26[7];
          LODWORD(v49) = v26[8];
          LODWORD(v51) = v26[2];
          int v48 = v26[3];
          LODWORD(v50) = v26[6];
          LODWORD(v46) = v26[5];
          HIDWORD(v46) = v26[1];
          HIDWORD(v51) = v26[9];
        }

        unsigned int v28 = v23[7];
        unsigned int v29 = v23[8];
        unsigned int v30 = v23[1];
        unsigned int v31 = v23[2];
        unsigned int v32 = v23[3];
        unsigned int v33 = v23[9];
        if (v17 != v25
          && v33 == HIDWORD(v51)
          && (v31 != v24 * v23[6] ? (BOOL v34 = v24 >= 2) : (BOOL v34 = 0),
              !v34 ? (BOOL v35 = v28 == v31) : (BOOL v35 = 0),
              v35 ? (BOOL v36 = v29 == v32) : (BOOL v36 = 0),
              v36
           && ((_DWORD)v51 != (_DWORD)v50 * HIDWORD(v50) ? (BOOL v37 = HIDWORD(v50) >= 2) : (BOOL v37 = 0),
               !v37
            && v49 == __PAIR64__(v51, v48)
            && (v23[5] + v29 * v28 == (_DWORD)v46 ? (BOOL v38 = v30 == HIDWORD(v46)) : (BOOL v38 = 0), v38))))
        {
          BOOL v35 = v20 == 0;
          unsigned int v44 = v45;
          if (!v35) {
            unsigned int v44 = v23[5];
          }
          unsigned int v45 = v44;
          v19 += v29 * v28;
          int v20 = 0;
          int v18 = v52;
        }

        else
        {
          if (v20)
          {
            int v39 = v52;
            a2 = sub_59A4(a1, a2, a4, v17, 0, v52, v7, &v54, &v53);
            int v7 = v57 + v54;
            int v40 = v56 + v54;
            int v41 = v55 + v53;
            int v42 = v32 * v31;
          }

          else
          {
            int v42 = v19 + v29 * v28;
            sub_5750(a1, 0, (uint64_t)v59, (uint64_t)v58);
            __int16 v43 = v30 + v52;
            int v39 = v52;
            a2 = sub_592C(a2, a4, v33, 0, v45, v42, v43, v7, v59, &v54, &v53);
            int v7 = v57 + v54;
            int v40 = v56 + v54;
            int v41 = v55 + v53;
          }

          int v19 = 0;
          int v56 = v40;
          int v57 = v7;
          int v55 = v41;
          int v18 = v42 + v39;
          int v20 = 1;
          unsigned int v16 = *(_DWORD *)(a1 + 24);
        }

        ++v17;
        v21 += 10;
      }

      while (v17 < v16);
    }
  }

  uint64_t result = sub_470C(1, 0, a3, 2u, (unsigned int *)&v57, &v56, &v55, (unsigned int *)a2, a4);
  if (a4 == 1 && result)
  {
    *(void *)uint64_t result = 0xD3000000D1000000LL;
  }

  else if (!a4)
  {
    int v14 = v55 + 2;
    unsigned int v15 = *(_DWORD *)(a1 + 60);
    if (v15 <= 1) {
      unsigned int v15 = 1;
    }
    *(_DWORD *)(a1 + 44) = (v56 + 3) & 0xFFFFFFFC;
    *(_DWORD *)(a1 + 48) = v15;
    *(_DWORD *)(a1 + 52) = v14;
  }

  return result;
}

uint64_t sub_5750(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!*(_DWORD *)(a1 + 4))
  {
    if (*(_DWORD *)(a1 + 64))
    {
      uint64_t result = 0LL;
      *(void *)a3 = 0x1100000010LL;
      int v22 = 18;
      goto LABEL_28;
    }

    unsigned int v24 = (int *)(*(void *)(a1 + 32) + 40LL * a2);
    else {
      int v25 = *v24;
    }
    int v26 = v24[2];
    int v27 = v25 * v24[6];
    if (*v24 < 2 || v26 == v27)
    {
      int v29 = v24[3];
      unsigned int v32 = v24 + 7;
      int v30 = v24[7];
      int v31 = v32[1];
      *(void *)a3 = 0x1100000010LL;
      if (*(_DWORD *)(a1 + 24) - 1 == a2) {
        int v33 = 18;
      }
      else {
        int v33 = 19;
      }
      *(_DWORD *)(a3 + 8) = v33;
      if (v29 == 1 || v31 == 1 || v26 == v30) {
        return 0LL;
      }
    }

    else
    {
      *(void *)a3 = 0x1100000010LL;
      if (*(_DWORD *)(a1 + 24) - 1 == a2) {
        int v36 = 18;
      }
      else {
        int v36 = 19;
      }
      *(_DWORD *)(a3 + 8) = v36;
    }

    *(void *)a4 = 0x1100000010LL;
    uint64_t result = 1LL;
    int v22 = 19;
    goto LABEL_55;
  }

  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v4) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  unsigned int v6 = (*(_DWORD *)(a1 + 40) >> 1) + 16;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = 10 * v4;
  uint64_t v9 = 10LL * a2;
  while (1)
  {
    int v10 = (_DWORD *)(v7 + 4LL * (v5 & 0xFFFFFFFE));
    int v11 = *v10 <= 1u ? 1 : *v10;
    int v12 = v10[2];
    int v13 = v11 * v10[6];
    if (*v10 < 2u || v12 == v13)
    {
      int v15 = v10[3];
      int v17 = v10[7];
      int v16 = v10[8];
      BOOL v18 = v15 == 1 || v16 == 1;
      if (v18 || v12 == v17) {
        break;
      }
    }

    if (v9 == v5)
    {
      *(_DWORD *)a3 = v6 - 4;
      int32x2_t v23 = vadd_s32(vdup_n_s32(v6), (int32x2_t)0xFFFFFFFEFFFFFFFDLL);
      *(int32x2_t *)(a3 + 4) = v23;
      *(_DWORD *)a4 = v6 - 4;
      *(_DWORD *)(a4 + 4) = v23.i32[0];
      int v22 = v6 - 1;
      uint64_t result = 1LL;
      goto LABEL_55;
    }

    uint64_t result = 1LL;
    int v21 = -4;
LABEL_24:
    v6 += v21;
    v5 += 10LL;
    if (v8 == v5) {
      return result;
    }
  }

  if (v9 != v5)
  {
    uint64_t result = 0LL;
    int v21 = -3;
    goto LABEL_24;
  }

  uint64_t result = 0LL;
  *(int32x2_t *)a3 = vadd_s32(vdup_n_s32(v6), (int32x2_t)0xFFFFFFFEFFFFFFFDLL);
  int v22 = v6 - 1;
LABEL_28:
  a4 = a3;
LABEL_55:
  *(_DWORD *)(a4 + 8) = v22;
  return result;
}

int *sub_592C( int *result, int a2, char a3, int a4, char a5, unsigned __int8 a6, __int16 a7, int a8, _DWORD *a9, _DWORD *a10, _DWORD *a11)
{
  if (a2 == 2)
  {
    result[a8] = ((a5 & 0x7F) << 24) | (a6 << 9) | a7 & 0x1FF;
  }

  else if (result && a2 == 1)
  {
    *result++ = ((a4 != 0) << 25) | ((a3 & 3) << 23) | (32 * a8) & 0x1FE0 | ((*a9 & 0x1F) << 18) | ((a9[1] & 0x1F) << 13) | a9[2] & 0x1F | 0x70000000;
  }

  *a10 = 1;
  *a11 = 1;
  if (!a2) {
    return 0LL;
  }
  return result;
}

int *sub_59A4(uint64_t a1, int *a2, int a3, unsigned int a4, int a5, int a6, int a7, _DWORD *a8, _DWORD *a9)
{
  int v16 = sub_5750(a1, a4, (uint64_t)v61, (uint64_t)v60);
  int v17 = (unsigned int *)(*(void *)(a1 + 32) + 40LL * a4);
  unsigned int v18 = v17[1];
  if (*v17 <= 1) {
    uint64_t v19 = 1LL;
  }
  else {
    uint64_t v19 = *v17;
  }
  unsigned int v21 = v17[2];
  unsigned int v20 = v17[3];
  unsigned int v22 = v17[5];
  unsigned int v23 = v17[9];
  int v56 = a3;
  if (a5)
  {
    unsigned int v24 = sub_592C( a2,  a3,  v23,  1,  v22,  v20 * v21,  (unsigned __int16)v18 + (unsigned __int16)a6,  a7,  v61,  &v59,  &v58);
LABEL_6:
    a2 = v24;
    int v26 = v58;
    int v25 = v59;
    goto LABEL_7;
  }

  if (!v17[7])
  {
    unsigned int v24 = sub_592C(a2, a3, v23, 0, v22, 0, (unsigned __int16)v18 + (unsigned __int16)a6, a7, v61, &v59, &v58);
    goto LABEL_6;
  }

  unsigned int v28 = v17[8];
  unsigned int v29 = v17[5];
  if (!v16)
  {
    if (v20 >= v28) {
      char v38 = v17[8];
    }
    else {
      char v38 = v17[3];
    }
    unsigned int v24 = sub_592C( a2,  a3,  v23,  0,  v22,  v38 * v21,  (unsigned __int16)v18 + (unsigned __int16)a6,  a7,  v61,  &v59,  &v58);
    goto LABEL_6;
  }

  unsigned int v30 = v17[6];
  BOOL v31 = v19 < 2 || v21 == (_DWORD)v19 * v30;
  unsigned int v54 = v17[9];
  unsigned int v55 = v17[2];
  unsigned int v52 = v17[7];
  if (v31)
  {
    if (v28)
    {
      int v25 = 0;
      int v26 = 0;
      int v32 = v18 + a6;
      do
      {
        unsigned int v33 = v28 - 1;
        if (v33) {
          BOOL v34 = v60;
        }
        else {
          BOOL v34 = v61;
        }
        BOOL v35 = a2;
        unsigned int v36 = v33;
        BOOL v37 = sub_592C(v35, a3, v54, 0, v29, v55, v32, a7, v34, &v59, &v58);
        unsigned int v28 = v36;
        a2 = v37;
        a7 += v59;
        v25 += v59;
        v26 += v58;
        v32 += v55;
        v29 += v52;
      }

      while (v28);
      goto LABEL_7;
    }

LABEL_41:
    int v26 = 0;
    int v25 = 0;
    goto LABEL_7;
  }

  if (!v28) {
    goto LABEL_41;
  }
  int v57 = 0;
  int v25 = 0;
  int v26 = 0;
  unsigned int v39 = v28 - 1;
  __int16 v48 = v18 + a6;
  unsigned int v49 = v17[8];
  unsigned int v40 = v21 / v19;
  do
  {
    unsigned int v41 = 0;
    __int16 v53 = v48 + v57 * v21;
    unsigned int v51 = v29;
    int v42 = v19;
    do
    {
      if (--v42) {
        BOOL v43 = 0;
      }
      else {
        BOOL v43 = v57 == v39;
      }
      if (v43) {
        unsigned int v44 = v61;
      }
      else {
        unsigned int v44 = v60;
      }
      unsigned int v45 = a2;
      uint64_t v46 = v19;
      int v47 = sub_592C(v45, v56, v54, 0, v29, v40, v53 + (unsigned __int16)(v41 / v19), a7, v44, &v59, &v58);
      uint64_t v19 = v46;
      LOWORD(v21) = v55;
      a2 = v47;
      a7 += v59;
      v25 += v59;
      v26 += v58;
      v41 += v55;
      v29 += v30;
    }

    while (v42);
    unsigned int v29 = v51 + v52;
    ++v57;
  }

  while (v57 != v49);
LABEL_7:
  *a8 = v25;
  *a9 = v26;
  if (v56) {
    return a2;
  }
  else {
    return 0LL;
  }
}

    v17 += 4LL;
  }

  while (4 * v16 != v17);
  BOOL v34 = (unsigned __int16 *)((char *)v13 - *v13);
  BOOL v35 = *v34;
  if (v35 < 0xF)
  {
    LODWORD(v36) = 0;
    goto LABEL_50;
  }

uint64_t sub_5CE0(uint64_t a1)
{
  *(void *)a1 = off_78560;
  malloc_zone_free(*(malloc_zone_t **)(qword_7C220 + 8), *(void **)(a1 + 280));
  malloc_zone_free(*(malloc_zone_t **)(qword_7C220 + 8), *(void **)(a1 + 264));
  return sub_69574(a1);
}

unsigned int *sub_5D30(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)(a1 + 216) = a2;
  unint64_t v4 = a3 & 0xFFFFFFFC;
  if (a4) {
    unint64_t v4 = a3 & 0xFFFFFFFC | ((unint64_t)((a4 + 3) >> 2) << 35);
  }
  uint64_t v5 = a1 + 48;
  *(void *)(a1 + 56) = v4;
  sub_5E00(a1 + 48, *(unsigned int **)(a1 + 24), 2);
  return sub_5E00(v5, 0LL, 0);
}

void sub_5D8C(void *a1)
{
  int v1 = sub_5DA0(a1);
  operator delete(v1);
}

void *sub_5DA0(void *a1)
{
  *a1 = off_785B8;
  int v2 = (void *)a1[3];
  if (v2)
  {
    malloc_zone_free(*(malloc_zone_t **)(qword_7C220 + 8), v2);
    a1[3] = 0LL;
  }

  int v3 = (void *)a1[4];
  if (v3)
  {
    malloc_zone_free(*(malloc_zone_t **)(qword_7C220 + 8), v3);
    a1[4] = 0LL;
  }

  return a1;
}

unsigned int *sub_5E00(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v3)
  {
    int v9 = 0;
    unsigned int v11 = 0;
    BOOL v7 = 0;
    int v13 = (_DWORD *)(a1 + 68);
    int v12 = *(_DWORD *)(a1 + 68);
    BOOL v14 = v12 == 0;
    if (v12) {
      int v15 = 131;
    }
    else {
      int v15 = 130;
    }
    if (v12) {
      int v19 = 3;
    }
    else {
      int v19 = 2;
    }
LABEL_24:
    unsigned int v11 = ((v11 + 1) & 0xFFFFFFFE) + 2;
    unsigned int v10 = v9 + v11;
    goto LABEL_25;
  }

  uint64_t v4 = v3 - 1;
  uint64_t v5 = (int *)(a1 + 148);
  do
  {
    int v6 = *v5;
    v5 += 60;
    BOOL v7 = v6 != 0;
    if (v6) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v4 == 0;
    }
    --v4;
  }

  while (!v8);
  int v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  int v13 = (_DWORD *)(a1 + 68);
  int v12 = *(_DWORD *)(a1 + 68);
  BOOL v14 = v12 == 0;
  if (v12) {
    int v15 = 131;
  }
  else {
    int v15 = 130;
  }
  int v16 = (int *)(a1 + 184);
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  do
  {
    int v18 = *v16;
    v16 += 60;
    unsigned int v11 = ((v11 + 1) & 0xFFFFFFFE) + 8 * v18;
    v10 += v9 + v11;
    int v9 = -v11;
    --v17;
  }

  while (v17);
  if (v12) {
    int v19 = 3;
  }
  else {
    int v19 = 2;
  }
  if (!v10) {
    goto LABEL_24;
  }
LABEL_25:
  int v20 = *(_DWORD *)(a1 + 36);
  v131 = v13;
  if (!v20)
  {
    int v31 = *(_DWORD *)(a1 + 20);
    if (v31)
    {
      if (v11 == 128)
      {
        unsigned int v22 = 0;
        int v32 = *(_DWORD *)(a1 + 48);
        BOOL v8 = v32 == 0;
        BOOL v33 = v32 != 0;
        if (v8) {
          int v34 = 16;
        }
        else {
          int v34 = 24;
        }
        if (v14) {
          int v34 = 0;
        }
        unsigned int v130 = v34;
        int v30 = 1;
        LODWORD(v129) = 8;
        if (v7)
        {
          unsigned int v29 = 16 * v33;
          uint64_t v128 = 0LL;
          HIDWORD(v129) = 0;
          goto LABEL_116;
        }

        uint64_t v128 = 0LL;
        HIDWORD(v129) = 0;
LABEL_308:
        LOBYTE(v20) = 0;
        goto LABEL_123;
      }

      int v30 = 1;
      LODWORD(v129) = v11;
    }

    else
    {
      int v30 = v12 != 0;
      if (v12) {
        char v44 = 1;
      }
      else {
        char v44 = v7;
      }
      if ((v44 & 1) == 0)
      {
        int v30 = 0;
        uint64_t v128 = 0LL;
        uint64_t v129 = 0LL;
        unsigned int v22 = 0;
        unsigned int v29 = 0;
        goto LABEL_112;
      }

      if (v11 == 128)
      {
        unsigned int v22 = 0;
        int v45 = *(_DWORD *)(a1 + 48);
        BOOL v8 = v45 == 0;
        BOOL v46 = v45 != 0;
        if (v8) {
          int v47 = 8;
        }
        else {
          int v47 = 16;
        }
        if (v14) {
          int v47 = 0;
        }
        unsigned int v130 = v47;
        if (v7)
        {
          unsigned int v29 = 8 * v46;
          uint64_t v128 = 0LL;
          uint64_t v129 = 0LL;
          goto LABEL_116;
        }

        uint64_t v128 = 0LL;
        uint64_t v129 = 0LL;
        goto LABEL_308;
      }

      LODWORD(v129) = 0;
    }

    HIDWORD(v129) = 0;
    HIDWORD(v128) = 0;
    BOOL v48 = v31 == 0;
    if (v31) {
      unsigned int v41 = v11 + 1;
    }
    else {
      unsigned int v41 = v11;
    }
    if (!v48) {
      ++v10;
    }
    goto LABEL_96;
  }

  int v21 = *(_DWORD *)(a1 + 20);
  if (v11 == 128)
  {
    unsigned int v22 = 0;
    LODWORD(v129) = 8 * (v21 != 0);
    if (v21) {
      int v23 = 16;
    }
    else {
      int v23 = 8;
    }
    HIDWORD(v129) = v23 | 1;
    int v24 = *(_DWORD *)(a1 + 48);
    if (*(_DWORD *)(a1 + 44)) {
      int v25 = v23;
    }
    else {
      int v25 = 0;
    }
    LODWORD(v128) = 0;
    HIDWORD(v128) = v25;
    unsigned int v26 = v23 + 8;
    unsigned int v27 = v23 + 16;
    BOOL v28 = v24 == 0;
    if (v24) {
      unsigned int v29 = v26;
    }
    else {
      unsigned int v29 = 0;
    }
    if (v28) {
      unsigned int v27 = v26;
    }
    if (v14) {
      unsigned int v27 = 0;
    }
    unsigned int v130 = v27;
    int v30 = 1;
    goto LABEL_116;
  }

  if (v21) {
    unsigned int v35 = v11 + 1;
  }
  else {
    unsigned int v35 = v11;
  }
  if (v21)
  {
    ++v10;
    unsigned int v36 = v11;
  }

  else
  {
    unsigned int v36 = 0;
  }

  LODWORD(v129) = v36;
  int v37 = *(_DWORD *)(a1 + 44);
  if ((v35 & 1) != 0) {
    unsigned int v38 = v35;
  }
  else {
    unsigned int v38 = v35 + 1;
  }
  if ((v35 & 1) != 0) {
    unsigned int v39 = v35 + 1;
  }
  else {
    unsigned int v39 = v35;
  }
  BOOL v40 = v37 == 0;
  int v30 = 1;
  if (v37) {
    unsigned int v41 = v35 + 2;
  }
  else {
    unsigned int v41 = v35 + 1;
  }
  if (v37) {
    v10 += 2;
  }
  else {
    ++v10;
  }
  if (v37) {
    unsigned int v42 = v38;
  }
  else {
    unsigned int v42 = v35;
  }
  HIDWORD(v129) = v42;
  if (v40) {
    unsigned int v43 = 0;
  }
  else {
    unsigned int v43 = v39;
  }
  HIDWORD(v128) = v43;
LABEL_96:
  int v49 = *(_DWORD *)(a1 + 60);
  BOOL v50 = v49 == 0;
  if (v49) {
    unsigned int v51 = v41 + 1;
  }
  else {
    unsigned int v51 = v41;
  }
  if (v50)
  {
    unsigned int v22 = 0;
  }

  else
  {
    ++v10;
    unsigned int v22 = v41;
  }

  int v53 = *(_DWORD *)(a1 + 48);
  int v52 = *(_DWORD *)(a1 + 52);
  BOOL v54 = v52 == 0;
  if (v52) {
    unsigned int v55 = v51 + 1;
  }
  else {
    unsigned int v55 = v51;
  }
  if (v54) {
    unsigned int v51 = 0;
  }
  else {
    ++v10;
  }
  LODWORD(v128) = v51;
  BOOL v8 = v53 == 0;
  BOOL v56 = v53 != 0;
  if (v8)
  {
    unsigned int v29 = 0;
  }

  else
  {
    ++v10;
    unsigned int v29 = v55;
  }

  if (!v14)
  {
    BOOL v14 = 0;
    unsigned int v57 = v55 + v56;
    unsigned int v130 = (v57 + 1) & 0xFFFFFFFE;
    unsigned int v10 = v10 - v57 + v130 + 2;
    if (!v7) {
      goto LABEL_115;
    }
LABEL_116:
    unsigned int v58 = *(_DWORD *)(a1 + 48);
    if (v58)
    {
      if (a3 == 2)
      {
        a2[v29] = v58;
        LODWORD(v3) = *(_DWORD *)(a1 + 16);
      }
    }

    else
    {
      LOBYTE(v29) = 0;
    }

    if (*(_DWORD *)(a1 + 132)) {
      LOBYTE(v20) = -63;
    }
    else {
      LOBYTE(v20) = v29;
    }
    goto LABEL_123;
  }

LABEL_112:
  unsigned int v130 = 0;
  if (v7) {
    goto LABEL_116;
  }
LABEL_115:
  if (v20) {
    goto LABEL_116;
  }
LABEL_123:
  BOOL v127 = v14;
  if (!(_DWORD)v3)
  {
    int v60 = 0;
    goto LABEL_237;
  }

  unint64_t v59 = 0LL;
  int v60 = 0;
  unsigned int v61 = 0;
  int v62 = v20 << 14;
  int v63 = (_WORD *)(a1 + 198);
  int v64 = 2;
  int v132 = v62;
  unsigned int v126 = v62 | 0x90002040;
  do
  {
    uint64_t v65 = a1 + 240 * v59;
    int v67 = *(_DWORD *)(v65 + 148);
    int v66 = (_DWORD *)(v65 + 148);
    if (v67)
    {
      if (*(_DWORD *)(a1 + 48)) {
        BOOL v68 = 1;
      }
      else {
        BOOL v68 = *(_DWORD *)(a1 + 132) != 0;
      }
    }

    else
    {
      BOOL v68 = 0;
    }

    unsigned int v69 = (v64 + 1) & 0xFFFFFFFE;
    if (v59)
    {
      unsigned int v61 = v69;
      int v70 = 8;
    }

    else
    {
      int v70 = 6;
    }

    if (v59) {
      unsigned int v71 = v69 + 2;
    }
    else {
      unsigned int v71 = v69;
    }
    if (a3 == 2)
    {
      uint64_t v72 = a1 + 240 * v59;
      a2[v71] = *(_DWORD *)(v72 + 176);
      unsigned int v73 = *(_DWORD *)(v72 + 156);
      if (v73) {
        a2[v71 | 1] = v73;
      }
    }

    if (!*(v66 - 1))
    {
      int v76 = *(_DWORD *)(a1 + 240 * v59 + 156);
      if (v76)
      {
        int v77 = *(_DWORD *)(a1 + 240 * v59 + 160);
        if (v77)
        {
          if (v77 <= 0) {
            int v78 = 4;
          }
          else {
            int v78 = 5;
          }
          v60 += v78;
        }

        else
        {
          v60 += 3;
        }

        int v80 = 2;
      }

      else
      {
        int v79 = *(_DWORD *)(a1 + 240 * v59 + 160);
        if (v79) {
          int v77 = *(_DWORD *)(a1 + 240 * v59 + 160);
        }
        else {
          int v77 = 0;
        }
        if (v79)
        {
          ++v60;
          int v80 = 1;
        }

        else
        {
          int v80 = v68;
        }
      }

      if ((v80 & 1) != 0) {
        unsigned int v81 = v15;
      }
      else {
        unsigned int v81 = (v15 + 1) & 0xFFFFFFFE;
      }
      int v74 = v81 + v80;
      v19 += v74 - v15;
      if (v68) {
        int v82 = v60 + 1;
      }
      else {
        int v82 = v60;
      }
      if (a3 != 1 || !a2)
      {
        BOOL v75 = a3 == 1;
LABEL_187:
        int v60 = v82;
LABEL_188:
        LOBYTE(v15) = v81;
        goto LABEL_189;
      }

      int v82 = v60 + 1;
      if (v76)
      {
        *a2 = (v81 << 18) & 0x7C0000 | 0xD1800000;
        a2[1] = ((v81 << 18) + 0x40000) & 0x7C0000 | 0xD1800000;
        if (*v66) {
          int v83 = 264192;
        }
        else {
          int v83 = 0x40000;
        }
        int v84 = ((v71 | 1) << 19) | (v81 >> 1) & 0xF | (16 * (v81 >> 1)) | v83;
        v85 = a2 + 3;
        a2[2] = v84;
        int v86 = *(_DWORD *)(a1 + 240 * v59 + 160);
        if (v86)
        {
          int v87 = (((v81 >> 1) & 0x1F) << 18) | (v81 >> 1) & 0x1F;
          if (v86 < 1)
          {
            char v88 = -31;
          }

          else
          {
            char v88 = 0;
            v85 = a2 + 4;
            a2[3] = v87 | 0xA0801C20;
          }

          *v85++ = v87 | 0xA0800000 | (32 * (v88 - v86));
        }

        a2 = v85;
        if (!v68)
        {
          BOOL v75 = 1;
          goto LABEL_188;
        }

        unsigned int v90 = v81 & 0x3F | (v81 << 6) | v132 | 0x90000000;
      }

      else
      {
        if (v77)
        {
          if (*v66) {
            int v89 = 786432;
          }
          else {
            int v89 = 0x40000;
          }
          *a2 = (-32 * v77) & 0x7E0 | v81 & 0x1F | 0x50000000 | v89;
          if (!v68)
          {
            BOOL v75 = 1;
            LOBYTE(v15) = v81;
            ++a2;
            goto LABEL_189;
          }

          a2[1] = v81 & 0x3F | (v81 << 6) | v132 | 0x90000000;
          a2 += 2;
          goto LABEL_186;
        }

        if (!v68)
        {
          if (*v66) {
            LOBYTE(v15) = -127;
          }
          else {
            LOBYTE(v15) = 0x80;
          }
          goto LABEL_143;
        }

        unsigned int v90 = v126 | v81 & 0x3F;
      }

      *a2++ = v90;
LABEL_186:
      BOOL v75 = 1;
      goto LABEL_187;
    }

    ++v60;
    int v74 = v15 + 1;
    ++v19;
    if (a3 != 1 || !a2)
    {
      BOOL v75 = a3 == 1;
      goto LABEL_189;
    }

    *a2++ = ((v15 & 0x1F) << 18) | 0xD1800000;
LABEL_143:
    BOOL v75 = 1;
LABEL_189:
    int v64 = v69 + v70;
    uint64_t v91 = a1 + 240 * v59;
    int v94 = *(_DWORD *)(v91 + 184);
    v93 = (unsigned int *)(v91 + 184);
    LODWORD(v92) = v94;
    if (!v94) {
      goto LABEL_227;
    }
    unint64_t v95 = 0LL;
    v96 = (void *)(a1 + 240 * v59 + 168);
    int v97 = (v71 << 18) & 0x3F80000 | ((v15 & 0x1F) << 13);
    v98 = v63;
    do
    {
      BOOL v99 = v95 != (_DWORD)v92 - 1 || ((v59 == *(_DWORD *)(a1 + 16) - 1) & ~v30) == 0;
      if (v95)
      {
        unsigned int v61 = (v64 + 1) & 0xFFFFFFFE;
        int v64 = v61 + 8;
      }

      unsigned int v100 = v61 + 4;
      unsigned int v101 = v61 + 6;
      int v102 = (unsigned __int16)*v98;
      if (*v98)
      {
        if (a3 == 2)
        {
          uint64_t v103 = *v96 + *(unsigned int *)(v98 - 5);
          a2[v100] = v103;
          a2[v61 + 5] = HIDWORD(v103);
          int v104 = *(_DWORD *)(v98 - 3) | ((unsigned __int16)*(v98 - 1) << 13);
          switch(v102)
          {
            case 2:
              v104 |= 0x20000000u;
              break;
            case 3:
              v104 |= 0x40000000u;
              break;
            case 4:
              v104 |= 0x60000000u;
              break;
          }

          if (v99) {
            int v110 = 4096;
          }
          else {
            int v110 = -2147479552;
          }
          a2[v101] = v104 | v110;
          a2[v61 + 7] = 0;
        }

        if (a2) {
          BOOL v111 = v75;
        }
        else {
          BOOL v111 = 0;
        }
        if (v111) {
          goto LABEL_224;
        }
      }

      else
      {
        if (a3 == 2)
        {
          uint64_t v105 = *v96 + *(unsigned int *)(v98 - 5);
          a2[v100] = v105;
          a2[v61 + 5] = HIDWORD(v105);
          uint64_t v106 = *(void *)(a1 + 104);
          if (v106)
          {
            uint64_t v107 = *(unsigned int *)(a1 + 112);
            *(_DWORD *)(a1 + 112) = v107 + 1;
            *(_DWORD *)(v106 + 4 * v107) = ((_DWORD)v59 << 16) | (v100 >> 1);
          }

          unsigned int v108 = ((unsigned __int16)*(v98 - 1) << 13) | ((*(_DWORD *)(v98 - 3) + 3) >> 2);
          if (!v99) {
            v108 |= 0x80000000;
          }
          a2[v101] = v108;
          a2[v61 + 7] = 0;
        }

        if (a2) {
          BOOL v109 = v75;
        }
        else {
          BOOL v109 = 0;
        }
        if (v109) {
LABEL_224:
        }
          *a2++ = (32 * v100) & 0x1FC0 | (v101 >> 1) & 0x3F | v97 | 0xE0000000;
      }

      ++v95;
      unint64_t v92 = *v93;
      v98 += 6;
    }

    while (v95 < v92);
    v60 += v95;
LABEL_227:
    ++v59;
    v63 += 120;
    int v15 = v74;
  }

  while (v59 < *(unsigned int *)(a1 + 16));
LABEL_237:
  if (*(_DWORD *)(a1 + 20))
  {
    if (*(_DWORD *)(a1 + 132))
    {
      if (a3 == 1 && a2) {
        *a2++ = -1860161536;
      }
      v112 = v131;
      ++v60;
    }

    else
    {
      v112 = v131;
    }

    if (a3 == 2)
    {
      unsigned int v114 = *(_DWORD *)(a1 + 24) << 13;
      unsigned int v113 = v22;
      if (!*(_DWORD *)(a1 + 52) && !*(_DWORD *)(a1 + 36) && !*v112) {
        v114 |= 0x80000000;
      }
      a2[v129] = v114;
      if (*(_DWORD *)(a1 + 52))
      {
        unsigned int v115 = *(_DWORD *)(a1 + 56) << 13;
        if (!*(_DWORD *)(a1 + 36) && !*v112) {
          v115 |= 0x80000000;
        }
        a2[v128] = v115;
      }
    }

    else
    {
      unsigned int v113 = v22;
      if (a3 == 1 && a2)
      {
        *a2 = (v129 << 16) | 0xF0004001;
        if (*(_DWORD *)(a1 + 52))
        {
          a2[1] = (v128 << 16) | 0xF0004001;
          a2 += 2;
        }

        else
        {
          ++a2;
        }
      }
    }

    if (*(_DWORD *)(a1 + 52)) {
      int v116 = 2;
    }
    else {
      int v116 = 1;
    }
    v60 += v116;
  }

  else
  {
    v112 = v131;
    unsigned int v113 = v22;
  }

  if (!*(_DWORD *)(a1 + 36)) {
    goto LABEL_289;
  }
  unsigned int v117 = *(_DWORD *)(a1 + 44);
  if (!v117)
  {
    if (a3 == 2) {
      goto LABEL_269;
    }
    goto LABEL_280;
  }

  ++v60;
  if (a3 != 2)
  {
    if (a3 == 1 && a2) {
      *a2++ = (BYTE4(v128) << 14) | 0x90002041;
    }
LABEL_280:
    if (a3 == 1 && a2)
    {
      *a2 = (BYTE4(v129) << 16) | 0xF0004001;
      if (*(_DWORD *)(a1 + 60))
      {
        a2[1] = (v113 << 16) | 0xF0004001;
        a2 += 2;
      }

      else
      {
        ++a2;
      }
    }

    goto LABEL_285;
  }

  a2[HIDWORD(v128)] = v117;
LABEL_269:
  int v118 = *(_DWORD *)(a1 + 40);
  int v119 = (v118 << 13) | 1;
  if (!*(_DWORD *)(a1 + 60))
  {
    unsigned int v120 = (v118 << 13) | 0x80000001;
    if (!*v112) {
      int v119 = v120;
    }
  }

  a2[HIDWORD(v129)] = v119;
  if (*(_DWORD *)(a1 + 60))
  {
    if (*(_DWORD *)(a1 + 68)) {
      int v121 = 1;
    }
    else {
      int v121 = -2147483647;
    }
    a2[v113] = v121 | (*(_DWORD *)(a1 + 64) << 13);
  }

    sub_260F0(a1);
    if (*(void *)(a1 + 2688)) {
      goto LABEL_95;
    }
LABEL_96:
    sub_26DA0(a1, v94);
  }

  int v62 = *(void *)(a1 + 48);
  if (((unsigned __int16)i & (unsigned __int16)v51 & 0x100) != 0)
  {
    uint64_t v65 = *(void **)(*(void *)(v62 + 8) + 64LL);
    int v66 = *(void *)(v62 + 576);
    int v67 = *(float *)(a1 + 3156);
    if (v65
      && (xmmword_7C350(*(unsigned __int16 *)(*v65 + 192LL)),
          BOOL v68 = *(_DWORD *)(v65[49] + 92LL),
          (v68 - 2) >= 2))
    {
      if (v68 == 1) {
        *(_DWORD *)(v66 + 12) = (v67 * 65535.0);
      }
    }

    else
    {
      *(float *)(v66 + 12) = v67;
    }

    unsigned int v69 = *(void *)(v62 + 576);
    int v70 = *(void *)(a1 + 2696);
    *(_DWORD *)(v70 + 828) = *(_DWORD *)(v69 + 8);
    *(_DWORD *)(v70 + 824) = *(_DWORD *)(v69 + 12);
    LOWORD(v61) = v61 & 0xFEFF;
    if ((v61 & 0x400) == 0)
    {
LABEL_100:
      if ((v61 & 0x4000) == 0) {
        goto LABEL_124;
      }
      goto LABEL_110;
    }
  }

  else if (((unsigned __int16)i & (unsigned __int16)v51 & 0x400) == 0)
  {
    goto LABEL_100;
  }

  unsigned int v71 = *(void *)(v62 + 576);
  uint64_t v72 = *(_DWORD *)(v71 + 8) & 0xFFFFFF00 | *(_DWORD *)(a1 + 3160);
  *(_DWORD *)(v71 + 8) = v72;
  unsigned int v73 = *(void *)(a1 + 2696);
  *(_DWORD *)(v73 + 828) = v72;
  *(_DWORD *)(v73 + 824) = *(_DWORD *)(v71 + 12);
  if ((v61 & 0x4000) == 0) {
    goto LABEL_124;
  }
LABEL_110:
  int v74 = *(__int128 **)(v62 + 32);
  BOOL v75 = **(void **)(v62 + 40);
  int v76 = *(unsigned __int8 *)(a1 + 3152);
  int v77 = (_DWORD)v74[2] & (v76 ^ 0xFF);
  *(void *)&__s1 = 0x1000000009LL;
  *((void *)&__s1 + 1) = 0x43200000109LL;
  int v97 = v75 & 0xFFFFFF | (v76 << 24) | (v77 << 32) | v75 & 0xFFFFFF0000000000LL;
  v98 = 3888;
  int v78 = *v74;
  int v79 = v74[1];
  unsigned int v100 = *((void *)v74 + 4);
  v99[0] = v78;
  v99[1] = v79;
  int v102 = v99;
  unsigned int v101 = 68;
  int v80 = sub_CA1C(a1 + 3728, &__s1);
  *(void *)(a1 + 3752) = v80;
  if (!v80) {
    goto LABEL_112;
  }
  unsigned int v81 = *(void *)(v62 + 576);
  int v82 = *(int32x2_t **)(a1 + 2696);
  if (!(**(unsigned int (***)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v81)( v81,  a1,  (uint64_t)&v82[55],  a1 + 2728,  v80)) {
    goto LABEL_112;
  }
  v82[103] = vrev64_s32(*(int32x2_t *)(v81 + 8));
  if (!*(_DWORD *)(a1 + 2720))
  {
    sub_6EE74((uint64_t)v95, a1, *(void **)(a1 + 48), 17, 0);
    sub_27D14(*(float **)(a1 + 2728), *(void *)(a1 + 3752), (unsigned __int8 *)v95, a1 + 3208);
  }

  int v83 = *(void *)(a1 + 3752);
  if (*(_DWORD *)(v83 + 88) && (_DWORD)v76)
  {
    int v84 = *(void *)(a1 + 2728);
    do
    {
      v85 = __clz(__rbit32(v76));
      int v86 = *(unsigned int *)(v83 + 4LL * v85 + 164);
      if ((_DWORD)v86 != -1)
      {
        int v87 = (_DWORD *)(v84 + 4 * v86);
        char v88 = (_DWORD *)(a1 + 3024 + 16 * v85);
        *int v87 = *v88;
        v87[1] = v88[1];
        v87[2] = v88[2];
        v87[3] = v88[3];
      }

      LODWORD(v76) = (1 << v85) ^ v76;
    }

    while ((_DWORD)v76);
  }

  v133 = 0;
  if (v7) {
    goto LABEL_116;
  }
LABEL_115:
  if (v20) {
    goto LABEL_116;
  }
LABEL_123:
  unsigned int v130 = v14;
  if (!(_DWORD)v3)
  {
    int v60 = 0;
    goto LABEL_237;
  }

  unint64_t v59 = 0LL;
  int v60 = 0;
  unsigned int v61 = 0;
  int v62 = v20 << 14;
  int v63 = (_WORD *)(a1 + 198);
  int v64 = 2;
  v135 = v62;
  uint64_t v129 = v62 | 0x90002040;
  do
  {
    uint64_t v65 = a1 + 240 * v59;
    int v67 = *(_DWORD *)(v65 + 148);
    int v66 = (_DWORD *)(v65 + 148);
    if (v67)
    {
      if (*(_DWORD *)(a1 + 48)) {
        BOOL v68 = 1;
      }
      else {
        BOOL v68 = *(_DWORD *)(a1 + 132) != 0;
      }
    }

    else
    {
      BOOL v68 = 0;
    }

    unsigned int v69 = (v64 + 1) & 0xFFFFFFFE;
    if (v59)
    {
      unsigned int v61 = v69;
      int v70 = 8;
    }

    else
    {
      int v70 = 6;
    }

    if (v59) {
      unsigned int v71 = v69 + 2;
    }
    else {
      unsigned int v71 = v69;
    }
    if (a3 == 2)
    {
      uint64_t v72 = a1 + 240 * v59;
      a2[v71] = *(_DWORD *)(v72 + 176);
      unsigned int v73 = *(_DWORD *)(v72 + 156);
      if (v73) {
        a2[v71 | 1] = v73;
      }
    }

    if (!*(v66 - 1))
    {
      int v76 = *(_DWORD *)(a1 + 240 * v59 + 156);
      if (v76)
      {
        int v77 = *(_DWORD *)(a1 + 240 * v59 + 160);
        if (v77)
        {
          if (v77 <= 0) {
            int v78 = 4;
          }
          else {
            int v78 = 5;
          }
          v60 += v78;
        }

        else
        {
          v60 += 3;
        }

        int v80 = 2;
      }

      else
      {
        int v79 = *(_DWORD *)(a1 + 240 * v59 + 160);
        if (v79) {
          int v77 = *(_DWORD *)(a1 + 240 * v59 + 160);
        }
        else {
          int v77 = 0;
        }
        if (v79)
        {
          ++v60;
          int v80 = 1;
        }

        else
        {
          int v80 = v68;
        }
      }

      if ((v80 & 1) != 0) {
        unsigned int v81 = v15;
      }
      else {
        unsigned int v81 = (v15 + 1) & 0xFFFFFFFE;
      }
      int v74 = v81 + v80;
      v19 += v74 - v15;
      if (v68) {
        int v82 = v60 + 1;
      }
      else {
        int v82 = v60;
      }
      if (a3 != 1 || !a2)
      {
        BOOL v75 = a3 == 1;
LABEL_187:
        int v60 = v82;
LABEL_188:
        LOBYTE(v15) = v81;
        goto LABEL_189;
      }

      int v82 = v60 + 1;
      if (v76)
      {
        *a2 = (v81 << 18) & 0x7C0000 | 0xD1800000;
        a2[1] = ((v81 << 18) + 0x40000) & 0x7C0000 | 0xD1800000;
        if (*v66) {
          int v83 = 264192;
        }
        else {
          int v83 = 0x40000;
        }
        int v84 = a2 + 3;
        a2[2] = ((v71 | 1) << 19) | (v81 >> 1) & 0xF | (16 * (v81 >> 1)) | v83;
        v85 = *(_DWORD *)(a1 + 240 * v59 + 160);
        if (v85)
        {
          int v86 = (((v81 >> 1) & 0x1F) << 18) | (v81 >> 1) & 0x1F;
          if (v85 < 1)
          {
            int v87 = -31;
          }

          else
          {
            int v87 = 0;
            int v84 = a2 + 4;
            a2[3] = v86 | 0xA0801C20;
          }

          *v84++ = v86 | 0xA0800000 | (32 * (v87 - v85));
        }

        a2 = v84;
        if (!v68)
        {
          BOOL v75 = 1;
          goto LABEL_188;
        }

        int v89 = v81 & 0x3F | (v81 << 6) | v135 | 0x90000000;
      }

      else
      {
        if (v77)
        {
          if (*v66) {
            char v88 = 786432;
          }
          else {
            char v88 = 0x40000;
          }
          *a2 = (-32 * v77) & 0x7E0 | v81 & 0x1F | 0x50000000 | v88;
          if (!v68)
          {
            BOOL v75 = 1;
            LOBYTE(v15) = v81;
            ++a2;
            goto LABEL_189;
          }

          a2[1] = v81 & 0x3F | (v81 << 6) | v135 | 0x90000000;
          a2 += 2;
          goto LABEL_186;
        }

        if (!v68)
        {
          if (*v66) {
            LOBYTE(v15) = -127;
          }
          else {
            LOBYTE(v15) = 0x80;
          }
          goto LABEL_143;
        }

        int v89 = v129 | v81 & 0x3F;
      }

      *a2++ = v89;
LABEL_186:
      BOOL v75 = 1;
      goto LABEL_187;
    }

    ++v60;
    int v74 = v15 + 1;
    ++v19;
    if (a3 != 1 || !a2)
    {
      BOOL v75 = a3 == 1;
      goto LABEL_189;
    }

    *a2++ = ((v15 & 0x1F) << 18) | 0xD1800000;
LABEL_143:
    BOOL v75 = 1;
LABEL_189:
    int v64 = v69 + v70;
    unsigned int v90 = a1 + 240 * v59;
    v93 = *(_DWORD *)(v90 + 184);
    unint64_t v92 = (unsigned int *)(v90 + 184);
    LODWORD(v91) = v93;
    if (!v93) {
      goto LABEL_227;
    }
    int v94 = 0LL;
    unint64_t v95 = (void *)(a1 + 240 * v59 + 168);
    v96 = (v71 << 18) & 0x3F80000 | ((v15 & 0x1F) << 13);
    int v97 = v63;
    do
    {
      v98 = v94 != (_DWORD)v91 - 1 || ((v59 == *(_DWORD *)(a1 + 16) - 1) & ~v30) == 0;
      if (v94)
      {
        unsigned int v61 = (v64 + 1) & 0xFFFFFFFE;
        int v64 = v61 + 8;
      }

      BOOL v99 = v61 + 4;
      unsigned int v100 = v61 + 6;
      unsigned int v101 = (unsigned __int16)*v97;
      if (*v97)
      {
        if (a3 == 2)
        {
          int v102 = *v95 + *(unsigned int *)(v97 - 5);
          a2[v99] = v102;
          a2[v61 + 5] = HIDWORD(v102) | 0x40000000;
          uint64_t v103 = *(_DWORD *)(v97 - 3) | ((unsigned __int16)*(v97 - 1) << 13);
          switch(v101)
          {
            case 2:
              v103 |= 0x20000000u;
              break;
            case 3:
              v103 |= 0x40000000u;
              break;
            case 4:
              v103 |= 0x60000000u;
              break;
          }

          if (v98) {
            BOOL v109 = 4096;
          }
          else {
            BOOL v109 = -2147479552;
          }
          a2[v100] = v103 | v109;
          a2[v61 + 7] = 0;
        }

        if (a2) {
          int v110 = v75;
        }
        else {
          int v110 = 0;
        }
        if (v110) {
          goto LABEL_224;
        }
      }

      else
      {
        if (a3 == 2)
        {
          int v104 = *v95 + *(unsigned int *)(v97 - 5);
          a2[v99] = v104;
          a2[v61 + 5] = HIDWORD(v104) | 0x40000000;
          uint64_t v105 = *(void *)(a1 + 104);
          if (v105)
          {
            uint64_t v106 = *(unsigned int *)(a1 + 112);
            *(_DWORD *)(a1 + 112) = v106 + 1;
            *(_DWORD *)(v105 + 4 * v106) = ((_DWORD)v59 << 16) | (v99 >> 1);
          }

          uint64_t v107 = ((unsigned __int16)*(v97 - 1) << 13) | ((*(_DWORD *)(v97 - 3) + 3) >> 2);
          if (!v98) {
            v107 |= 0x80000000;
          }
          a2[v100] = v107;
          a2[v61 + 7] = 0;
        }

        if (a2) {
          unsigned int v108 = v75;
        }
        else {
          unsigned int v108 = 0;
        }
        if (v108) {
LABEL_224:
        }
          *a2++ = (32 * v99) & 0x1FC0 | (v100 >> 1) & 0x3F | v96 | 0xE0000000;
      }

      ++v94;
      uint64_t v91 = *v92;
      v97 += 6;
    }

    while (v94 < v91);
    v60 += v94;
LABEL_227:
    ++v59;
    v63 += 120;
    int v15 = v74;
  }

  while (v59 < *(unsigned int *)(a1 + 16));
LABEL_237:
  if (*(_DWORD *)(a1 + 20))
  {
    if (*(_DWORD *)(a1 + 132))
    {
      if (a3 == 1 && a2) {
        *a2++ = -1860161536;
      }
      BOOL v111 = v134;
      ++v60;
    }

    else
    {
      BOOL v111 = v134;
    }

    if (a3 == 2)
    {
      unsigned int v113 = *(_DWORD *)(a1 + 24) << 13;
      unsigned int v114 = v113 | 0x4000000;
      v112 = v22;
      if (!*(_DWORD *)(a1 + 52) && !*(_DWORD *)(a1 + 36))
      {
        unsigned int v115 = v113 | 0x84000000;
        if (!*v111) {
          unsigned int v114 = v115;
        }
      }

      a2[v132] = v114;
      if (*(_DWORD *)(a1 + 52))
      {
        int v116 = *(_DWORD *)(a1 + 56) << 13;
        unsigned int v117 = v116 | 0x4000000;
        if (!*(_DWORD *)(a1 + 36))
        {
          int v118 = v116 | 0x84000000;
          if (!*v111) {
            unsigned int v117 = v118;
          }
        }

        a2[v131] = v117;
      }
    }

    else
    {
      v112 = v22;
      if (a3 == 1 && a2)
      {
        *a2 = (v132 << 16) | 0xF0004001;
        if (*(_DWORD *)(a1 + 52))
        {
          a2[1] = (v131 << 16) | 0xF0004001;
          a2 += 2;
        }

        else
        {
          ++a2;
        }
      }
    }

    if (*(_DWORD *)(a1 + 52)) {
      int v119 = 2;
    }
    else {
      int v119 = 1;
    }
    v60 += v119;
  }

  else
  {
    BOOL v111 = v134;
    v112 = v22;
  }

  if (!*(_DWORD *)(a1 + 36)) {
    goto LABEL_289;
  }
  unsigned int v120 = *(_DWORD *)(a1 + 44);
  if (!v120)
  {
    if (a3 == 2) {
      goto LABEL_269;
    }
    goto LABEL_280;
  }

  ++v60;
  if (a3 != 2)
  {
    if (a3 == 1 && a2) {
      *a2++ = (BYTE4(v131) << 14) | 0x90002041;
    }
LABEL_280:
    if (a3 == 1 && a2)
    {
      *a2 = (BYTE4(v132) << 16) | 0xF0004001;
      if (*(_DWORD *)(a1 + 60))
      {
        a2[1] = (v112 << 16) | 0xF0004001;
        a2 += 2;
      }

      else
      {
        ++a2;
      }
    }

    goto LABEL_285;
  }

  a2[HIDWORD(v131)] = v120;
LABEL_269:
  int v121 = *(_DWORD *)(a1 + 40);
  int v122 = (v121 << 13) | 1;
  if (!*(_DWORD *)(a1 + 60))
  {
    int v123 = (v121 << 13) | 0x80000001;
    if (!*v111) {
      int v122 = v123;
    }
  }

  a2[HIDWORD(v132)] = v122;
  if (*(_DWORD *)(a1 + 60))
  {
    if (*(_DWORD *)(a1 + 68)) {
      v124 = 1;
    }
    else {
      v124 = -2147483647;
    }
    a2[v112] = v124 | (*(_DWORD *)(a1 + 64) << 13);
  }

LABEL_285:
  if (*(_DWORD *)(a1 + 60)) {
    int v122 = 2;
  }
  else {
    int v122 = 1;
  }
  v60 += v122;
LABEL_289:
  if (*v112)
  {
    if (a3 == 2)
    {
      *(void *)&a2[v130] = 0x80000000LL;
    }

    else if (a3 == 1 && a2)
    {
      if (v127) {
        int v123 = -268435455;
      }
      else {
        int v123 = -268418815;
      }
      *a2++ = v123 & 0xFF00FFFF | (v130 << 16);
    }

    ++v60;
  }

  if (a3 == 2)
  {
    *(void *)a2 = *(void *)(a1 + 8);
    v124 = *(_DWORD **)(a1 + 104);
    if (v124) {
      _DWORD *v124 = 0;
    }
    *(void *)a1 = a2;
    a2 += v10;
  }

  else if (a3 == 1 && a2)
  {
    *(void *)a2 = 0xD3000000FC000002LL;
    a2 += 2;
  }

  *(_DWORD *)(a1 + 120) = v60 + 2;
  *(_DWORD *)(a1 + 124) = v19;
  *(_DWORD *)(a1 + 116) = v10;
  return a2;
}

  if (*(_DWORD *)(a1 + 60)) {
    v125 = 2;
  }
  else {
    v125 = 1;
  }
  v60 += v125;
LABEL_289:
  if (*v111)
  {
    if (a3 == 2)
    {
      *(void *)&a2[v133] = 2214592512LL;
    }

    else if (a3 == 1 && a2)
    {
      if (v130) {
        unsigned int v126 = -268435455;
      }
      else {
        unsigned int v126 = -268418815;
      }
      *a2++ = v126 & 0xFF00FFFF | (v133 << 16);
    }

    ++v60;
  }

  if (a3 == 2)
  {
    *(void *)a2 = *(void *)(a1 + 8);
    BOOL v127 = *(_DWORD **)(a1 + 104);
    if (v127) {
      *BOOL v127 = 0;
    }
    *(void *)a1 = a2;
    a2 += v10;
  }

  else if (a3 == 1 && a2)
  {
    *(void *)a2 = 0xD3000000FC000002LL;
    a2 += 2;
  }

  *(_DWORD *)(a1 + 120) = v60 + 2;
  *(_DWORD *)(a1 + 124) = v19;
  *(_DWORD *)(a1 + 116) = v10;
  return a2;
}

char *sub_6950()
{
  v0 = (char *)operator new(0x40uLL);
  *(void *)v0 = off_78430;
  *((void *)v0 + 3) = 32LL;
  *(_OWORD *)(v0 + 8) = xmmword_70130;
  int v1 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, 0x10uLL);
  if (!v1
    || (int v2 = v1, *((void *)v0 + 4) = v1, (v3 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, 0x20uLL)) == 0LL))
  {
    abort();
  }

  *((void *)v0 + 5) = v3;
  *int v2 = -201326590;
  *uint64_t v3 = 0LL;
  *((_DWORD *)v0 + 12) = 0;
  *((void *)v0 + 7) = v3;
  return v0;
}

uint64_t sub_69EC(uint64_t result, void *a2, int a3)
{
  int v3 = *(_DWORD *)(result + 1184);
  unsigned int v4 = 2 * (v3 != 0);
  unsigned int v5 = *(_DWORD *)(result + 792);
  unsigned int v6 = v5;
  unsigned int v7 = v4 + 2 * v5;
  if (a3 == 2)
  {
    if (v3)
    {
      *a2 = *(void *)(result + 1192);
      unsigned int v6 = *(_DWORD *)(result + 792);
    }

    if (v6)
    {
      if (v6 == 1)
      {
        uint64_t v8 = *(void *)(result + 800);
        LODWORD(a2[v4 / 2]) = v8;
        *((_DWORD *)a2 + (v4 | 1)) = HIDWORD(v8);
        *((_DWORD *)a2 + v7) = *(_DWORD *)(result + 1056) | 0x80000000;
        goto LABEL_27;
      }

      unint64_t v11 = 0LL;
      uint64_t v12 = result + 800;
      unsigned int v13 = v4;
      do
      {
        uint64_t v9 = v7 + v11;
        uint64_t v14 = *(void *)(v12 + 8 * v11);
        *((_DWORD *)a2 + v13) = v14;
        *((_DWORD *)a2 + v13 + 1) = HIDWORD(v14);
        int v10 = *(_DWORD *)(v12 + 4 * v11 + 256);
        *((_DWORD *)a2 + v9) = v10;
        v13 += 2;
        ++v11;
      }

      while (v11 < *(unsigned int *)(result + 792));
    }

    else
    {
      uint64_t v9 = v7 - 1;
      int v10 = *((_DWORD *)a2 + v9);
    }

    *((_DWORD *)a2 + v9) = v10 | 0x80000000;
  }

  else if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *(_DWORD *)a2 = (v7 << 16) & 0xFE0000 | ((v3 == 0) << 26) | ((v3 != 0) << 8) | 0xF0000000;
        a2 = (void *)((char *)a2 + 4);
      }

      else
      {
        unsigned int v15 = 0;
        int v16 = (v5 << 17) + ((v3 != 0) << 17);
        unsigned int v17 = v4 << 7;
        do
        {
          if (++v15 == v6 && *(_DWORD *)(result + 1184) == 0) {
            int v19 = 0x4000000;
          }
          else {
            int v19 = 0;
          }
          *(_DWORD *)a2 = v17 & 0x7F00 | v16 & 0xFF0000 | v19 | 0xF0000000;
          a2 = (void *)((char *)a2 + 4);
          unsigned int v6 = *(_DWORD *)(result + 792);
          v16 += 0x10000;
          v17 += 256;
        }

        while (v15 < v6);
      }
    }

    if (!*(_DWORD *)(result + 1184)
      || (*(_DWORD *)a2 = -201326590, a2 = (void *)((char *)a2 + 4), !*(_DWORD *)(result + 1184)))
    {
      if (!*(_DWORD *)(result + 792)) {
        *(_DWORD *)a2 = -754974720;
      }
    }
  }

LABEL_27:
  int v20 = v4 + v5 + 2 * v5;
  unsigned int v21 = *(_DWORD *)(result + 792);
  if (*(_DWORD *)(result + 1184)) {
    ++v21;
  }
  if (v21 <= 1) {
    unsigned int v21 = 1;
  }
  *(_DWORD *)(result + 1224) = v20;
  *(_DWORD *)(result + 1228) = v21;
  return result;
}

  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 844) = 1;
  *(_DWORD *)(result + 836) = v5;
  return result;
}

  *(_DWORD *)(v6 + 72) = 0;
  return result;
}

  int v20 = v4 + v5 + 2 * v5;
  unsigned int v21 = *(_DWORD *)(result + 792);
  if (*(_DWORD *)(result + 1184)) {
    ++v21;
  }
  if (v21 <= 1) {
    unsigned int v21 = 1;
  }
  *(_DWORD *)(result + 1224) = v20;
  *(_DWORD *)(result + 1228) = v21;
  return result;
}

  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 844) = 1;
  *(_DWORD *)(result + 836) = v5;
  return result;
}

char *sub_6B90(unsigned int *a1, unsigned int a2)
{
  unsigned int v4 = (char *)operator new(0x50uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 36) = 0u;
  *((void *)v4 + 7) = 0LL;
  *((void *)v4 + 8) = 0LL;
  *((_DWORD *)v4 + 18) = 0;
  *(void *)unsigned int v4 = &off_78458;
  uint64_t v5 = *a1;
  if ((_DWORD)v5) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = a2 == 0;
  }
  if (v6) {
    return v4;
  }
  bzero(v37, 0x4C8uLL);
  *((_DWORD *)v4 + 18) = 0;
  if ((_DWORD)v5)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    while (1)
    {
      uint64_t v9 = a1[v7 + 1];
      uint64_t v10 = v9 - *(int *)((char *)&a1[v7 + 1] + v9);
      unint64_t v11 = (char *)&a1[v7] + v10;
      unsigned int v12 = *((unsigned __int16 *)v11 + 2);
      if (v12 >= 0xB) {
        break;
      }
      LODWORD(v13) = 0;
      int v14 = 0;
      if (v12 >= 9) {
        goto LABEL_11;
      }
LABEL_14:
      v37[v7 + 264] = v14 | ((_DWORD)v13 << 13) | 0x10000000;
      *(void *)&v37[2 * v8++ + 200] = 0LL;
      if (v5 == ++v7)
      {
        *((_DWORD *)v4 + 18) = v8;
        goto LABEL_17;
      }
    }

    uint64_t v13 = *((unsigned __int16 *)v11 + 7);
    if (v13) {
      LODWORD(v13) = *(unsigned int *)((char *)&a1[v7 + 1] + v9 + v13);
    }
LABEL_11:
    uint64_t v15 = *(unsigned __int16 *)((char *)&a1[v7 + 3] + v10);
    if (v15) {
      int v14 = *(unsigned int *)((char *)&a1[v7 + 1] + v9 + v15);
    }
    else {
      int v14 = 0;
    }
    goto LABEL_14;
  }

  LODWORD(v8) = 0;
LABEL_17:
  v37[2] = v8;
  v37[100] = 0;
  v37[198] = v8;
  v37[296] = a2;
  if (a2) {
    int v16 = 2;
  }
  else {
    int v16 = 0;
  }
  int v17 = v8 + v16 + 2 * v8;
  int v18 = v8 + a2;
  v37[306] = v17;
  v37[307] = v18;
  size_t v19 = 4LL * ((v17 + 3) & 0xFFFFFFFC);
  size_t v20 = 4LL * ((v18 + 3) & 0xFFFFFFFC);
  *((void *)v4 + 2) = v20;
  *((void *)v4 + 3) = v19;
  *((void *)v4 + 1) = v19 + v20;
  unsigned int v21 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, v20);
  if (!v21) {
    goto LABEL_39;
  }
  unsigned int v22 = v21;
  *((void *)v4 + 4) = v21;
  int v23 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, v19);
  if (!v23) {
    goto LABEL_39;
  }
  int v24 = v23;
  *((void *)v4 + 5) = v23;
  if ((_DWORD)v8)
  {
    int v25 = (char *)malloc_zone_malloc((malloc_zone_t *)qword_7C218, 8LL * v8);
    if (v25)
    {
      unsigned int v26 = v25;
      *((void *)v4 + 8) = v25;
      goto LABEL_28;
    }

LABEL_39:
    abort();
  }

  unsigned int v26 = 0LL;
LABEL_28:
  sub_69EC((uint64_t)v37, v22, 1);
  sub_69EC((uint64_t)v37, v24, 2);
  *((_DWORD *)v4 + 12) = 0;
  if (a2) {
    unsigned int v27 = v24;
  }
  else {
    unsigned int v27 = 0LL;
  }
  *((void *)v4 + 7) = v27;
  if ((_DWORD)v8)
  {
    uint64_t v28 = (v8 + 1LL) & 0x1FFFFFFFELL;
    uint64x2_t v29 = (uint64x2_t)vdupq_n_s64((unint64_t)v8 - 1);
    int64x2_t v30 = vdupq_n_s64(a2);
    int64x2_t v31 = (int64x2_t)xmmword_70140;
    int v32 = v26 + 8;
    int64x2_t v33 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v34 = vmovn_s64((int64x2_t)vcgeq_u64(v29, (uint64x2_t)v31));
      int64x2_t v35 = vaddq_s64(v31, v30);
      if ((v34.i8[0] & 1) != 0) {
        *(v32 - 1) = &v24[v35.i64[0]];
      }
      if ((v34.i8[4] & 1) != 0) {
        *int v32 = &v24[v35.i64[1]];
      }
      int64x2_t v31 = vaddq_s64(v31, v33);
      v32 += 2;
      v28 -= 2LL;
    }

    while (v28);
  }

  return v4;
}

      v14 += 4LL * (v31 + 1);
      int v16 = v17 + 1;
      v12 += 4LL;
      if (4 * v11 == v12)
      {
        int32x2_t v34 = v17 - 23;
        goto LABEL_42;
      }
    }
  }

  int32x2_t v34 = 0;
  int v14 = 0LL;
  uint64_t v13 = 0LL;
LABEL_42:
  int64x2_t v35 = *((unsigned __int16 *)v7 + 3);
  unsigned int v36 = *(unsigned int *)((char *)a2 + v35);
  int v37 = (unsigned int *)((char *)a2 + v35 + v36);
  unsigned int v130 = *v37;
  if ((_DWORD)v130)
  {
    unsigned int v38 = 0LL;
    unsigned int v39 = *((unsigned __int16 *)v7 + 3);
    BOOL v40 = *(unsigned int *)((char *)a2 + v39);
    unsigned int v41 = *(unsigned int *)((char *)a2 + v39 + v40);
    unsigned int v42 = a2 + 2;
    unsigned int v43 = *(unsigned int *)((char *)a2 + v35);
    char v44 = v35;
    do
    {
      int v45 = v44;
      BOOL v46 = v43 + v44;
      int v47 = *(unsigned int *)((char *)v42 + v46 - 4);
      BOOL v48 = v46 + v47;
      int v49 = *(int *)((char *)v42 + v48 - 4);
      BOOL v50 = *(unsigned __int16 *)((char *)v42 + v48 - v49 - 4);
      if (v50 < 0xB)
      {
        BOOL v54 = v34;
        v6[v34 + 24] = v13;
        unsigned int v55 = v50 > 6;
        if (v50 < 7)
        {
          unint64_t v59 = 0;
          if (v50 < 5) {
            goto LABEL_64;
          }
          goto LABEL_58;
        }
      }

      else
      {
        unsigned int v51 = v45 + v43 + v47;
        if (*(_WORD *)((char *)v42 + v51 - v49 + 6))
        {
          int v52 = *((char *)v42 + v51 + *(unsigned __int16 *)((char *)v42 + v51 - v49 + 6) - 4);
          if (v52 == 2 || v52 == 4) {
            goto LABEL_92;
          }
        }

        BOOL v54 = v34;
        v6[v34 + 24] = v13;
        unsigned int v55 = v50 > 6;
      }

      BOOL v56 = v45 + v43 + v47;
      unsigned int v57 = (char *)v42 + v56 - v49;
      if (*((_WORD *)v57 + 1)) {
        unsigned int v58 = *(int *)((char *)v42 + v56 + *((unsigned __int16 *)v57 + 1) - 4);
      }
      else {
        LOBYTE(v58) = 0;
      }
      unint64_t v59 = (v58 & 0x3F) << 14;
LABEL_58:
      int v60 = v45 + v43 + v47;
      else {
        unsigned int v61 = 0LL;
      }
      v59 |= (dword_70C78[v61] & 7) << 11;
      if (v50 >= 9)
      {
        int v62 = v45 + v43 + v47;
        if (*(_WORD *)((char *)v42 + v62 - v49 + 4))
        {
          int v63 = *(unsigned int *)((char *)v42 + v62 + *(unsigned __int16 *)((char *)v42 + v62 - v49 + 4) - 4);
          goto LABEL_65;
        }
      }

    abort();
  }

  unsigned int v26 = 0LL;
LABEL_28:
  sub_6B628((uint64_t)v37, v22, 1);
  sub_6B628((uint64_t)v37, v24, 2);
  *((_DWORD *)v4 + 12) = 0;
  if (a2) {
    unsigned int v27 = v24;
  }
  else {
    unsigned int v27 = 0LL;
  }
  *((void *)v4 + 7) = v27;
  if ((_DWORD)v8)
  {
    uint64_t v28 = (v8 + 1LL) & 0x1FFFFFFFELL;
    uint64x2_t v29 = (uint64x2_t)vdupq_n_s64((unint64_t)v8 - 1);
    int64x2_t v30 = vdupq_n_s64(a2);
    int64x2_t v31 = (int64x2_t)xmmword_70140;
    int v32 = v26 + 8;
    int64x2_t v33 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v34 = vmovn_s64((int64x2_t)vcgeq_u64(v29, (uint64x2_t)v31));
      int64x2_t v35 = vaddq_s64(v31, v30);
      if ((v34.i8[0] & 1) != 0) {
        *(v32 - 1) = &v24[v35.i64[0]];
      }
      if ((v34.i8[4] & 1) != 0) {
        *int v32 = &v24[v35.i64[1]];
      }
      int64x2_t v31 = vaddq_s64(v31, v33);
      v32 += 2;
      v28 -= 2LL;
    }

    while (v28);
  }

  return v4;
}

unsigned int *sub_6E3C(int *a1, unsigned int *a2, int a3)
{
  unint64_t v3 = a1[1];
  if ((_DWORD)v3)
  {
    int v4 = 0;
    unsigned int v5 = 0;
    BOOL v6 = v32;
    uint64_t v7 = v33;
    uint64_t v8 = a1[1];
    do
    {
      unsigned int v9 = (v5 + 1) & 0xFFFFFFFE;
      *v7++ = v9;
      unsigned int v10 = (v9 + 3) & 0xFFFFFFFE;
      uint64_t v11 = v10 + 2;
      int v4 = v4 - v5 + v11;
      *v6++ = v10;
      unsigned int v5 = v10 + 2;
      --v8;
    }

    while (v8);
    if (a3 == 2)
    {
      int v12 = 0;
      unint64_t v13 = 0LL;
      *((void *)a1 + 6) = a2;
      int v14 = *a1;
      do
      {
        uint64_t v15 = v33[v13];
        uint64_t v16 = *(void *)&a1[2 * v13 + 2];
        a2[v15] = HIDWORD(v16);
        a2[(v15 + 1)] = v16;
        int v17 = v12 | 0x10000000;
        if (v14) {
          int v17 = v12;
        }
        uint64_t v18 = v32[v13];
        unint64_t v19 = v13 + 1;
        if (v13 + 1 == a1[1]) {
          int v20 = -2147483646;
        }
        else {
          int v20 = 2;
        }
        a2[v18] = v20 | v17;
        a2[(v18 + 1)] = 0;
        v12 += 0x4000;
        unint64_t v13 = v19;
      }

      while (v19 < a1[1]);
      goto LABEL_15;
    }

    if (!a2) {
      return a2;
    }
    unsigned int v21 = v33;
    unsigned int v22 = v32;
    uint64_t v23 = 1LL;
    do
    {
      unint64_t v24 = v23;
      BOOL v25 = v23 != v3 || a1[10] == 0;
      int v27 = *v22++;
      unsigned __int8 v26 = v27;
      unsigned int v28 = *v21++;
      unsigned int v29 = v28 >> 1;
      if (v25) {
        int v30 = 0;
      }
      else {
        int v30 = 0x4000000;
      }
      *a2++ = v30 & 0xFF0080FF | (v26 << 16) | ((v29 & 0x7F) << 8) | 0xF0000001;
      unint64_t v3 = a1[1];
      uint64_t v23 = v24 + 1;
    }

    while (v24 < v3);
  }

  else
  {
    if (a3 == 2)
    {
      uint64_t v11 = 0LL;
      int v4 = 0;
      *((void *)a1 + 6) = a2;
LABEL_15:
      a1[14] = v4;
      a2 += v11;
      return a2;
    }

    if (!a2) {
      return a2;
    }
    LODWORD(v24) = 0;
  }

  if (a1[10])
  {
    *a2++ = -754974720;
    LODWORD(v24) = v24 + 1;
  }

  a1[15] = v24;
  return a2;
}

char *sub_6FF8(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v6 = (char *)operator new(0x40uLL);
  *((_DWORD *)v6 + 12) = 0;
  *((void *)v6 + 7) = 0LL;
  *(void *)BOOL v6 = off_78488;
  bzero(v15, 0x70uLL);
  v15[0] = 0x200000001LL;
  v15[1] = a1;
  v15[2] = a2;
  int v16 = 0;
  int v21 = a3;
  *((void *)v6 + 3) = 64LL;
  *(_OWORD *)(v6 + 8) = xmmword_70150;
  uint64_t v7 = (unsigned int *)malloc_zone_malloc((malloc_zone_t *)qword_7C218, 0x20uLL);
  if (!v7
    || (uint64_t v8 = v7,
        *((void *)v6 + 4) = v7,
        (unsigned int v9 = (unsigned int *)malloc_zone_malloc((malloc_zone_t *)qword_7C218, 0x40uLL)) == 0LL))
  {
    abort();
  }

  unsigned int v10 = v9;
  *((void *)v6 + 5) = v9;
  uint64_t v11 = sub_6E3C((int *)v15, v9, 2);
  int v12 = v17;
  uint64_t v20 = 0x100000008LL;
  uint64_t v18 = v11;
  *(void *)uint64_t v11 = v19;
  int v22 = v12 + 8;
  if (a3)
  {
    *(void *)uint64_t v8 = 0xDB000000C1100001LL;
    v8[2] = -1056440319;
    v8 += 3;
  }

  unint64_t v13 = sub_6E3C((int *)v15, v8, 1);
  if (v13) {
    *unint64_t v13 = (v17 << 7) & 0x7F00 | (v21 << 27) | 0xF4000002;
  }
  *((_DWORD *)v6 + 12) = 0;
  *((void *)v6 + 7) = v10 + 8;
  return v6;
}

uint64_t sub_7160(uint64_t a1, int *a2, unsigned int *a3)
{
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(_WORD *)(a1 + 80) = 0;
  *(void *)a1 = off_784B0;
  bzero(v63, 0x1E90uLL);
  BOOL v6 = 0LL;
  uint64_t v7 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v7 >= 7u)
  {
    BOOL v6 = (unsigned int *)v7[3];
    if (v7[3]) {
      BOOL v6 = (unsigned int *)((char *)v6 + (void)a2 + *(unsigned int *)((char *)v6 + (void)a2));
    }
  }

  uint64_t v8 = *v6;
  if ((_DWORD)v8)
  {
    unint64_t v9 = 0LL;
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    int v18 = 0;
    int v19 = 0;
    uint64_t v20 = 4 * v8;
    do
    {
      uint64_t v21 = v6[v9 / 4 + 1];
      uint64_t v22 = v21 - *(int *)((char *)&v6[v9 / 4 + 1] + v21);
      uint64_t v23 = (char *)&v6[v9 / 4] + v22;
      unsigned int v24 = *((unsigned __int16 *)v23 + 2);
      if (v24 >= 0xB)
      {
        uint64_t v25 = *((unsigned __int16 *)v23 + 7);
        if (v25)
        {
          int v26 = *((char *)&v6[v9 / 4 + 1] + v21 + v25);
          if ((v26 - 1) < 2)
          {
            if (v19)
            {
              if (v24 >= 0xD && *(_WORD *)((char *)&v6[v9 / 4 + 4] + v22)) {
                int v16 = *(unsigned int *)((char *)&v6[v9 / 4 + 1]
              }
                                      + v21
                                      + *(unsigned __int16 *)((char *)&v6[v9 / 4 + 4] + v22));
              else {
                int v16 = 0;
              }
              int v17 = 1;
            }

            else
            {
              if (v24 >= 0xD && *(_WORD *)((char *)&v6[v9 / 4 + 4] + v22)) {
                int v14 = *(unsigned int *)((char *)&v6[v9 / 4 + 1]
              }
                                      + v21
                                      + *(unsigned __int16 *)((char *)&v6[v9 / 4 + 4] + v22));
              else {
                int v14 = 0;
              }
              int v15 = 1;
            }

            int v19 = 1;
          }

          else if ((v26 - 3) <= 1)
          {
            if (v18)
            {
              if (v24 >= 0xD && *(_WORD *)((char *)&v6[v9 / 4 + 4] + v22)) {
                int v12 = *(unsigned int *)((char *)&v6[v9 / 4 + 1]
              }
                                      + v21
                                      + *(unsigned __int16 *)((char *)&v6[v9 / 4 + 4] + v22));
              else {
                int v12 = 0;
              }
              int v13 = 1;
            }

            else
            {
              if (v24 >= 0xD && *(_WORD *)((char *)&v6[v9 / 4 + 4] + v22)) {
                int v10 = *(unsigned int *)((char *)&v6[v9 / 4 + 1]
              }
                                      + v21
                                      + *(unsigned __int16 *)((char *)&v6[v9 / 4 + 4] + v22));
              else {
                int v10 = 0;
              }
              int v11 = 1;
            }

            int v18 = 1;
          }
        }
      }

      v9 += 4LL;
    }

    while (v20 != v9);
    v63[15] = v17;
    v63[16] = v16;
    v63[9] = v15;
    v63[10] = v14;
    v63[13] = v13;
    v63[14] = v12;
    v63[5] = v11;
    v63[6] = v10;
  }

  if (!dword_7C464)
  {
    unsigned int v27 = a3[49];
    if (v27)
    {
      unsigned int v28 = &v66;
      unsigned int v29 = a3 + 51;
      uint64_t v30 = a3[49];
      do
      {
        v28[9] = 0;
        *(void *)(v28 + 5) = 0LL;
        v28[7] = *(v29 - 1);
        unint64_t v31 = *v29;
        if ((_DWORD)v31)
        {
          LODWORD(v32) = 0;
          unsigned int v33 = 0;
          if ((_DWORD)v31 != 1)
          {
            unsigned int v34 = __clz(v31 - 1);
            unsigned int v33 = 32 - v34;
            unint64_t v32 = (v31 + (1LL << (v34 ^ 0x3F)) - 1) / v31;
          }

          int *v28 = 1;
          v28[2] = v32;
          v28[3] = v33;
        }

        else
        {
          int *v28 = 0;
          *((void *)v28 + 1) = 0LL;
        }

        v29 += 2;
        v28 += 60;
        --v30;
      }

      while (v30);
    }

    v63[4] = v27;
    uint64_t v35 = *a3;
    if ((_DWORD)v35)
    {
      unsigned int v36 = (unsigned __int8 *)a3 + 5;
      do
      {
        int v37 = v36[3];
        unsigned int v38 = &v63[60 * v36[3]];
        int v39 = v38[46];
        BOOL v40 = &v38[3 * v39];
        v38[46] = v39 + 1;
        v40[47] = 0;
        *((_WORD *)v40 + 98) = *(_WORD *)(v36 + 5);
        unint64_t v41 = v36[1];
        if (v41 > 0xA) {
          int v42 = -4;
        }
        else {
          int v42 = ((unsigned __int16)dword_76250[v41] + (unsigned __int16)dword_76250[v41] * *v36 + 3) & 0x1FFC;
        }
        unsigned int v43 = &v63[60 * v37 + 3 * v39];
        v43[48] = v42;
        *((_WORD *)v43 + 99) = 0;
        v36 += 12;
        --v35;
      }

      while (v35);
    }
  }

  sub_5E00((uint64_t)v63, 0LL, 0);
  int64x2_t v44 = (int64x2_t)vshll_n_u32( (uint32x2_t)(*(void *)&vadd_s32(v64, (int32x2_t)0x300000003LL) & 0xFFFFFFFCFFFFFFFCLL),  2uLL);
  *(int8x16_t *)(a1 + 16) = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL);
  *(void *)(a1 + 8) = vaddvq_s64(v44);
  int v45 = malloc_zone_calloc((malloc_zone_t *)qword_7C218, 1uLL, v44.u64[1]);
  if (!v45) {
    goto LABEL_62;
  }
  *(void *)(a1 + 32) = v45;
  BOOL v46 = malloc_zone_calloc((malloc_zone_t *)qword_7C218, 1uLL, *(void *)(a1 + 24));
  if (!v46) {
    goto LABEL_62;
  }
  *(void *)(a1 + 40) = v46;
  sub_5E00((uint64_t)v63, *(unsigned int **)(a1 + 32), 1);
  *(_DWORD *)(a1 + 48) = v65;
  sub_5E00((uint64_t)v63, *(unsigned int **)(a1 + 40), 2);
  if (dword_7C464) {
    goto LABEL_61;
  }
  int v47 = *a3;
  *(_WORD *)(a1 + 80) = *a3;
  BOOL v48 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, 8LL * (unsigned __int16)v47);
  if (!v48) {
LABEL_62:
  }
    abort();
  *(void *)(a1 + 64) = v48;
  __chkstk_darwin();
  unsigned int v51 = (char *)&v63[-2] - ((v50 + 15) & 0x7FFFFFFF0LL);
  if ((_DWORD)v49)
  {
    int v52 = 0;
    int v53 = (int *)&v67;
    BOOL v54 = v51;
    do
    {
      *v54++ = v52;
      int v55 = *v53;
      v53 += 60;
      v52 += v55;
      --v49;
    }

    while (v49);
  }

  if (*(_WORD *)(a1 + 80))
  {
    uint64_t v56 = 0LL;
    uint64_t v57 = 8LL * *(unsigned __int16 *)(a1 + 80);
    unsigned int v58 = (unsigned __int8 *)a3 + 9;
    do
    {
      uint64_t v59 = *(v58 - 1);
      int v60 = *v58;
      v58 += 12;
      *(void *)(*(void *)(a1 + 64) + v56) = *(void *)(a1 + 40)
                                              + 8LL * ((4 * (*(_DWORD *)&v51[4 * v59] + v60)) | 2u);
      v56 += 8LL;
    }

    while (v57 != v56);
  }

LABEL_61:
  *(void *)(a1 + 56) = *(void *)(a1 + 40);
  return a1;
}

  *(void *)(a1 + 56) = *(void *)(a1 + 40);
  return a1;
}

char *sub_7644(uint64_t a1)
{
  int v2 = (char *)operator new(0x58uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 36) = 0u;
  *((void *)v2 + 8) = 0LL;
  *((void *)v2 + 9) = 0LL;
  *((void *)v2 + 7) = 0LL;
  *((_WORD *)v2 + 40) = 0;
  *(void *)int v2 = off_784B0;
  bzero(v63, 0x1E90uLL);
  unint64_t v3 = *(int **)(a1 + 8);
  int v4 = (unsigned __int16 *)((char *)v3 - *v3);
  unsigned int v5 = *v4;
  if (v5 < 7)
  {
    BOOL v6 = 0LL;
    uint64_t v7 = 0LL;
    if (v5 < 5) {
      goto LABEL_8;
    }
  }

  else
  {
    BOOL v6 = (unsigned int *)v4[3];
    if (v4[3]) {
      BOOL v6 = (unsigned int *)((char *)v6 + (void)v3 + *(unsigned int *)((char *)v6 + (void)v3));
    }
  }

  uint64_t v8 = v4[2];
  if (v8) {
    uint64_t v7 = (unsigned int *)((char *)v3 + v8 + *(unsigned int *)((char *)v3 + v8));
  }
  else {
    uint64_t v7 = 0LL;
  }
LABEL_8:
  uint64_t v9 = *v7;
  if ((_DWORD)v9)
  {
    uint64_t v10 = 0LL;
    int v11 = 0;
    int v12 = 0;
    int v13 = dword_7C464;
    int v14 = (unsigned __int8 *)(a1 + 16);
    while (v13)
    {
LABEL_28:
      ++v14;
      if (v9 == ++v10) {
        goto LABEL_33;
      }
    }

    uint64_t v15 = v7[v10 + 1];
    uint64_t v16 = v15 - *(int *)((char *)&v7[v10 + 1] + v15);
    int v17 = (char *)&v7[v10] + v16;
    unsigned int v18 = *((unsigned __int16 *)v17 + 2);
    if (v18 < 5)
    {
      LODWORD(v19) = 0;
    }

    else
    {
      uint64_t v19 = *((unsigned __int16 *)v17 + 4);
      if (v19) {
        LODWORD(v19) = *(unsigned int *)((char *)&v7[v10 + 1] + v15 + v19);
      }
      if (v18 >= 9 && *(_WORD *)((char *)&v7[v10 + 3] + v16))
      {
        unsigned int v20 = *(unsigned int *)((char *)&v7[v10 + 1] + v15 + *(unsigned __int16 *)((char *)&v7[v10 + 3] + v16));
        if (v20 > 0xA)
        {
          LODWORD(v23) = -1;
          goto LABEL_23;
        }

        int v21 = 1 << v20;
        if ((v21 & 0x1B) == 0)
        {
          if ((v21 & 0x780) != 0) {
            unsigned int v22 = 1;
          }
          else {
            unsigned int v22 = 2;
          }
          goto LABEL_22;
        }
      }
    }

    unsigned int v22 = 4;
LABEL_22:
    unint64_t v23 = (v22 * (unint64_t)(v19 + 1) + 3) >> 2;
LABEL_23:
    LOWORD(v24) = 0;
    uint64_t v25 = &v63[3 * v12];
    v25[47] = *v14;
    *((_WORD *)v25 + 99) = 0;
    if (v18 >= 0xB)
    {
      uint64_t v26 = *(unsigned __int16 *)((char *)&v7[v10 + 3] + v16 + 2);
      if (v26) {
        int v24 = *(unsigned int *)((char *)&v7[v10 + 1] + v15 + v26);
      }
      else {
        LOWORD(v24) = 0;
      }
    }

    unsigned int v27 = &v63[3 * v12];
    *((_WORD *)v27 + 98) = v24;
    v27[48] = 4 * v23;
    int v68 = ++v11;
    ++v12;
    goto LABEL_28;
  }

  int v12 = 0;
LABEL_33:
  uint64_t v28 = *v6;
  if ((_DWORD)v28)
  {
    unint64_t v29 = 0LL;
    int v30 = 0;
    uint64_t v31 = 4 * v28;
    do
    {
      uint64_t v32 = v6[v29 / 4 + 1];
      unsigned int v33 = (char *)&v6[v29 / 4] + v32;
      uint64_t v34 = v32 - *((int *)v33 + 1);
      uint64_t v35 = (char *)&v6[v29 / 4] + v34;
      unsigned int v36 = *((unsigned __int16 *)v35 + 2);
      if (v36 >= 0xB && *((_WORD *)v35 + 7))
      {
        int v37 = *((char *)&v6[v29 / 4 + 1] + v32 + *((unsigned __int16 *)v35 + 7));
        if (v37 == 4 || v37 == 2)
        {
          if (v30)
          {
            v63[13] = 1;
            int v39 = (char *)&v6[v29 / 4] + v32 - *((int *)v33 + 1);
            if (*((unsigned __int16 *)v39 + 2) < 0xDu)
            {
              LODWORD(v40) = 0;
            }

            else
            {
              uint64_t v40 = *((unsigned __int16 *)v39 + 8);
              if (v40) {
                LODWORD(v40) = *(unsigned int *)((char *)&v6[v29 / 4 + 1] + v32 + v40);
              }
            }

            v63[14] = v40;
          }

          else
          {
            v63[5] = 1;
            int v42 = (char *)&v6[v29 / 4] + v32 - *((int *)v33 + 1);
            if (*((unsigned __int16 *)v42 + 2) < 0xDu)
            {
              LODWORD(v43) = 0;
            }

            else
            {
              uint64_t v43 = *((unsigned __int16 *)v42 + 8);
              if (v43) {
                LODWORD(v43) = *(unsigned int *)((char *)&v6[v29 / 4 + 1] + v32 + v43);
              }
            }

            v63[6] = v43;
          }

          int v30 = 1;
          goto LABEL_65;
        }

        if ((v37 & 0xFFFFFFFD) == 1)
        {
          if (v36 < 0xD)
          {
            LOWORD(v41) = 0;
          }

          else
          {
            uint64_t v41 = *(unsigned __int16 *)((char *)&v6[v29 / 4 + 4] + v34);
          }

          int64x2_t v44 = &v63[3 * v12];
          *((_WORD *)v44 + 98) = v41;
          if (*((unsigned __int16 *)v35 + 2) >= 5u
            && (uint64_t v45 = *(unsigned __int16 *)((char *)&v6[v29 / 4 + 2] + v34)) != 0)
          {
            int v46 = *(unsigned int *)((char *)&v6[v29 / 4 + 1] + v32 + v45);
          }

          else
          {
            int v46 = 0;
          }

          int v47 = &v63[3 * v12];
          v47[48] = 4 * v46 + 4;
          v44[47] = *(unsigned __int8 *)(a1 + v9 + 16);
          *((_WORD *)v47 + 99) = 0;
          ++v12;
        }
      }

      LODWORD(v9) = v9 + 1;
LABEL_65:
      v29 += 4LL;
    }

    while (v31 != v29);
  }

  uint64_t v66 = 0LL;
  int v67 = 4 * *(unsigned __int8 *)(a1 + 34);
  int v68 = v12;
  v63[4] = 1;
  sub_5E00((uint64_t)v63, 0LL, 0);
  int64x2_t v48 = (int64x2_t)vshll_n_u32( (uint32x2_t)(*(void *)&vadd_s32(v64, (int32x2_t)0x300000003LL) & 0xFFFFFFFCFFFFFFFCLL),  2uLL);
  *((int8x16_t *)v2 + 1) = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL);
  size_t v62 = v48.i64[0];
  *((void *)v2 + 1) = vaddvq_s64(v48);
  uint64_t v49 = (unsigned int *)malloc_zone_calloc((malloc_zone_t *)qword_7C218, 1uLL, v48.u64[1]);
  if (!v49) {
    goto LABEL_74;
  }
  uint64_t v50 = v49;
  *((void *)v2 + 4) = v49;
  unsigned int v51 = (unsigned int *)malloc_zone_calloc((malloc_zone_t *)qword_7C218, 1uLL, v62);
  if (!v51) {
    goto LABEL_74;
  }
  int v52 = v51;
  *((void *)v2 + 5) = v51;
  sub_5E00((uint64_t)v63, v50, 1);
  *((_DWORD *)v2 + 12) = v65;
  sub_5E00((uint64_t)v63, v52, 2);
  unsigned __int16 v53 = v68;
  *((_WORD *)v2 + 40) = v68;
  BOOL v54 = (unsigned int **)malloc_zone_malloc((malloc_zone_t *)qword_7C218, 8LL * v53);
  if (!v54
    || (int v55 = v54,
        *((void *)v2 + 8) = v54,
        uint64_t v56 = v53,
        (uint64_t v57 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, 2LL * v53)) == 0LL))
  {
LABEL_74:
    abort();
  }

  *((void *)v2 + 9) = v57;
  if (v53)
  {
    unsigned int v58 = &v69;
    uint64_t v59 = v52 + 4;
    do
    {
      *v55++ = v59;
      int v60 = *v58;
      v58 += 3;
      *v57++ = v60;
      v59 += 8;
      --v56;
    }

    while (v56);
  }

  *((void *)v2 + 7) = v52;
  return v2;
}

uint64_t sub_7B68(int *a1, unsigned int *a2)
{
  int v4 = operator new(0x58uLL);
  return sub_7160((uint64_t)v4, a1, a2);
}

uint64_t sub_7B98(uint64_t result, uint64_t a2, int a3)
{
  if (*(_DWORD *)(result + 816))
  {
    if ((*(_BYTE *)(result + 832) & 1) != 0)
    {
      if (a3 == 2)
      {
        uint64_t v9 = *(void *)(result + 824);
        *(_DWORD *)a2 = *(_DWORD *)v9;
        *(void *)(a2 + 8) = *(void *)(v9 + 4);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(v9 + 12);
        *(_DWORD *)(a2 + 24) = (*(_DWORD *)(result + 832) << 13) | 0x10000000;
        *(_DWORD *)(a2 + 28) = 0;
        *(_DWORD *)(a2 + 32) = ((*(_DWORD *)(result + 832) << 13) + 0x2000) | 0x10000002;
        *(_DWORD *)(a2 + 36) = 0;
        unsigned int v4 = ((*(_DWORD *)(result + 832) << 13) + 24576) | 0x90000000;
        unsigned int v5 = 12;
        uint64_t v6 = 11LL;
        uint64_t v7 = 10LL;
LABEL_11:
        *(_DWORD *)(a2 + 4 * v7) = v4;
        *(_DWORD *)(a2 + 4 * v6) = 0;
        if (*(_DWORD *)(result + 792))
        {
          uint64_t v10 = *(void *)(result + 808);
          *(_DWORD *)(a2 + 4LL * v5) = v10;
          unsigned int v11 = v5 | 1;
          v5 |= 2u;
          *(_DWORD *)(a2 + 4LL * v11) = HIDWORD(v10);
        }

        goto LABEL_27;
      }

      unsigned int v5 = 12;
    }

    else
    {
      if (a3 == 2)
      {
        unint64_t v3 = *(void **)(result + 824);
        *(void *)a2 = *v3;
        *(void *)(a2 + 8) = v3[1];
        LODWORD(v3) = (*(_DWORD *)(result + 832) << 13) | 0x10000002;
        *(_DWORD *)(a2 + 16) = (_DWORD)v3;
        *(_DWORD *)(a2 + 20) = 0;
        unsigned int v4 = v3 & 0xFC001FFF | ((*(_DWORD *)(result + 832) << 13) + 0x4000) | 0x80000000;
        unsigned int v5 = 8;
        uint64_t v6 = 7LL;
        uint64_t v7 = 6LL;
        goto LABEL_11;
      }

      unsigned int v5 = 8;
    }

    if (*(_DWORD *)(result + 792)) {
      v5 |= 2u;
    }
  }

  else
  {
    if (*(_DWORD *)(result + 792))
    {
      if (a3 == 2) {
        *(void *)a2 = *(void *)(result + 808);
      }
      unsigned int v8 = 2;
    }

    else
    {
      unsigned int v8 = 0;
    }

    LODWORD(v12) = *(_DWORD *)(result + 8);
    if ((_DWORD)v12)
    {
      unint64_t v13 = 0LL;
      unsigned int v14 = v8 + 2 * v12;
      unsigned int v5 = v14 + v12;
      do
      {
        unsigned int v15 = v14;
        unint64_t v16 = v13;
        while (a3 != 2)
        {
        }

        uint64_t v17 = *(void *)(result + 8 * v13 + 16);
        *(_DWORD *)(a2 + 4LL * v8) = v17;
        *(_DWORD *)(a2 + 4LL * (v8 | 1)) = HIDWORD(v17);
        int v18 = *(_DWORD *)(result + 4 * v13 + 272);
        *(_DWORD *)(a2 + 4LL * v15) = v18;
        unint64_t v12 = *(unsigned int *)(result + 8);
        v8 += 2;
        unsigned int v14 = v15 + 1;
        ++v13;
      }

      while (v13 < v12);
      *(_DWORD *)(a2 + 4LL * v15) = v18 | 0x80000000;
    }

    else
    {
      unsigned int v5 = v8;
    }
  }

uint64_t sub_7D7C(uint64_t result, unsigned int *a2, int a3)
{
  if (!*(_DWORD *)(result + 816))
  {
    if (a2 && a3 == 1)
    {
      int v8 = *(_DWORD *)(result + 400);
      else {
        int v9 = 2;
      }
      *a2++ = v9 & 0x7FFFF | 0xC1400000;
    }

    unsigned int v10 = *(_DWORD *)(result + 400);
    if (v10)
    {
      int v11 = 0;
      unsigned int v12 = 0;
      int v13 = 2 * v10;
      do
      {
        if (a3 == 1 && a2)
        {
          *a2++ = (v11 << 7) & 0x7F00 | (v13 << 16) | ((v12 == v10 - 1) << 26) | 0xF0000000;
          v11 += 2;
          ++v13;
          unsigned int v10 = *(_DWORD *)(result + 400);
        }

        ++v12;
      }

      while (v12 < v10);
      int v14 = v12 + 1;
    }

    else
    {
      int v14 = 2;
      if (a3 == 1 && a2)
      {
        *a2++ = -754974720;
        int v14 = 2;
      }
    }

    unsigned int v16 = *(_DWORD *)(result + 8);
    int v17 = *(_DWORD *)(result + 792);
    if (v16)
    {
      unsigned int v18 = 0;
      int v19 = 2 * (v17 != 0);
      int v20 = v19 + 2 * v16;
      do
      {
        if (a3 == 1 && a2)
        {
          unsigned int v21 = v16 - 1;
          if (*(_DWORD *)(result + 792)) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v18 == v21;
          }
          if (v22) {
            int v23 = 0x4000000;
          }
          else {
            int v23 = 0;
          }
          *a2++ = (v19 << 7) & 0x7F00 | (v20 << 16) | v23 | 0xF0000000;
          v19 += 2;
          ++v20;
          unsigned int v16 = *(_DWORD *)(result + 8);
        }

        ++v18;
      }

      while (v18 < v16);
      v14 += v18;
      if (!*(_DWORD *)(result + 792))
      {
        if (v16) {
          goto LABEL_70;
        }
        goto LABEL_65;
      }
    }

    else if (!v17)
    {
LABEL_65:
      if (a3 != 1 || !a2) {
        goto LABEL_69;
      }
      int v24 = -754974720;
LABEL_68:
      *a2 = v24;
LABEL_69:
      ++v14;
      goto LABEL_70;
    }

    if (a3 != 1 || !a2) {
      goto LABEL_69;
    }
    int v24 = -201326590;
    goto LABEL_68;
  }

  int v3 = -201325566;
  if (a2) {
    BOOL v4 = a3 == 1;
  }
  else {
    BOOL v4 = 0;
  }
  int v5 = v4;
  if ((*(_BYTE *)(result + 832) & 1) != 0)
  {
    int v3 = -201325054;
    if (v5)
    {
      *(void *)a2 = 0xF8080101F8060001LL;
      if (*(_DWORD *)(result + 792)) {
        int v15 = -133561855;
      }
      else {
        int v15 = -66452991;
      }
      a2[2] = v15;
      a2 += 3;
    }

    int v7 = 3;
  }

  else
  {
    if (v5)
    {
      *a2 = -133955583;
      if (*(_DWORD *)(result + 792)) {
        int v6 = -133824255;
      }
      else {
        int v6 = -66715391;
      }
      a2[1] = v6;
      a2 += 2;
    }

    int v7 = 2;
  }

  if (*(_DWORD *)(result + 792))
  {
    if (a3 == 1 && a2) {
      *a2++ = v3;
    }
    ++v7;
  }

  if (a3 == 1 && a2) {
    *a2 = -754974720;
  }
  int v14 = v7 + 1;
LABEL_70:
  *(_DWORD *)(result + 844) = 1;
  *(_DWORD *)(result + 840) = v14;
  return result;
}

char *sub_7FCC(unsigned int *a1, unsigned int a2)
{
  BOOL v4 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 36) = 0u;
  *((void *)v4 + 10) = 0LL;
  *((void *)v4 + 11) = 0LL;
  *((void *)v4 + 7) = 0LL;
  *((void *)v4 + 8) = 0LL;
  *((_DWORD *)v4 + 18) = 0;
  *(void *)BOOL v4 = &off_784D8;
  uint64_t v5 = *a1;
  if (!(_DWORD)v5 && !a2) {
    return v4;
  }
  bzero(v34, 0x350uLL);
  *((_DWORD *)v4 + 18) = 0;
  if (!(_DWORD)v5)
  {
    LODWORD(v7) = 0;
    goto LABEL_15;
  }

  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  do
  {
    uint64_t v8 = a1[v6 + 1];
    uint64_t v9 = v8 - *(int *)((char *)&a1[v6 + 1] + v8);
    unsigned int v10 = (char *)&a1[v6] + v9;
    unsigned int v11 = *((unsigned __int16 *)v10 + 2);
    if (v11 < 0xB)
    {
      LODWORD(v12) = 0;
      int v13 = 0;
      if (v11 < 9) {
        goto LABEL_12;
      }
    }

    else
    {
      uint64_t v12 = *((unsigned __int16 *)v10 + 7);
      if (v12) {
        LODWORD(v12) = *(unsigned int *)((char *)&a1[v6 + 1] + v8 + v12);
      }
    }

    uint64_t v14 = *(unsigned __int16 *)((char *)&a1[v6 + 3] + v9);
    if (v14) {
      int v13 = *(unsigned int *)((char *)&a1[v6 + 1] + v8 + v14);
    }
    else {
      int v13 = 0;
    }
LABEL_12:
    v34[v6 + 68] = v13 | ((_DWORD)v12 << 13) | 0x10000000;
    *(void *)&v34[2 * v7++ + 4] = 0LL;
    ++v6;
  }

  while (v5 != v6);
  *((_DWORD *)v4 + 18) = v7;
LABEL_15:
  v34[2] = v7;
  v34[100] = 0;
  v34[198] = a2;
  sub_7B98((uint64_t)v34, 0LL, 0);
  sub_7D7C((uint64_t)v34, 0LL, 0);
  unsigned int v15 = (v34[209] + 3) & 0xFFFFFFFC;
  size_t v16 = 4LL * v15;
  *((void *)v4 + 10) = 0LL;
  size_t v17 = 4LL * ((v34[210] + 3) & 0xFFFFFFFC);
  *((void *)v4 + 2) = v17;
  *((void *)v4 + 3) = v16;
  *((void *)v4 + 1) = v17 + v16;
  unsigned int v18 = (unsigned int *)malloc_zone_malloc((malloc_zone_t *)qword_7C218, v17);
  if (!v18) {
    goto LABEL_32;
  }
  int v19 = v18;
  *((void *)v4 + 4) = v18;
  int v20 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, v16);
  if (!v20) {
    goto LABEL_32;
  }
  uint64_t v21 = (uint64_t)v20;
  *((void *)v4 + 5) = v20;
  *((void *)v4 + 11) = 0LL;
  if (!(_DWORD)v7)
  {
    int v23 = 0LL;
    goto LABEL_21;
  }

  BOOL v22 = (char *)malloc_zone_malloc((malloc_zone_t *)qword_7C218, 8LL * v7);
  if (!v22) {
LABEL_32:
  }
    abort();
  int v23 = v22;
  *((void *)v4 + 8) = v22;
LABEL_21:
  sub_7D7C((uint64_t)v34, v19, 1);
  sub_7B98((uint64_t)v34, v21, 2);
  *((_DWORD *)v4 + 12) = v34[211];
  if (a2) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = 0LL;
  }
  *((void *)v4 + 7) = v24;
  if ((_DWORD)v7)
  {
    uint64_t v25 = (v7 + 1LL) & 0x1FFFFFFFELL;
    uint64x2_t v26 = (uint64x2_t)vdupq_n_s64((unint64_t)v7 - 1);
    int64x2_t v27 = vdupq_n_s64(a2);
    int64x2_t v28 = (int64x2_t)xmmword_70140;
    unint64_t v29 = v23 + 8;
    int64x2_t v30 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v31 = vmovn_s64((int64x2_t)vcgeq_u64(v26, (uint64x2_t)v28));
      int64x2_t v32 = vaddq_s64(v28, v27);
      if ((v31.i8[0] & 1) != 0) {
        *(v29 - 1) = v21 + 8 * v32.i64[0];
      }
      if ((v31.i8[4] & 1) != 0) {
        *unint64_t v29 = v21 + 8 * v32.i64[1];
      }
      int64x2_t v28 = vaddq_s64(v28, v30);
      v29 += 2;
      v25 -= 2LL;
    }

    while (v25);
  }

  return v4;
}

uint64_t sub_8280(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + a2) = -754974720;
  return result;
}

char *sub_828C(unsigned int *a1)
{
  int v2 = (char *)operator new(0x48uLL);
  int v3 = v2;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 36) = 0u;
  *(void *)int v2 = off_78508;
  *((void *)v2 + 7) = 0LL;
  v2[64] = 0;
  unint64_t v4 = *a1;
  if (!(_DWORD)v4)
  {
    *((void *)v2 + 2) = 16LL;
    int64x2_t v32 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, 0x10uLL);
    if (v32)
    {
      *((void *)v3 + 4) = v32;
      *((void *)v3 + 5) = v32;
      *int64x2_t v32 = -754974720;
      *((void *)v3 + 1) = 16LL;
      *((_DWORD *)v3 + 12) = 0;
      return v3;
    }

LABEL_31:
    abort();
  }

  bzero(v34, 0x408uLL);
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  char v7 = 0;
  uint64_t v8 = 4 * v4;
  do
  {
    uint64_t v9 = v5;
    unsigned int v10 = (char *)a1 + v5;
    uint64_t v11 = *(unsigned int *)((char *)a1 + v5 + 4);
    uint64_t v12 = v11 - *(int *)&v10[v11 + 4];
    int v13 = &v10[v12];
    unsigned int v14 = *(unsigned __int16 *)&v10[v12 + 4];
    if (v14 < 9)
    {
      int v16 = -262144;
      if (v14 < 5) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v15 = *((unsigned __int16 *)v13 + 6);
      if (v15) {
        LODWORD(v15) = *(unsigned int *)((char *)a1 + v9 + v11 + v15 + 4);
      }
      int v16 = ((_DWORD)v15 << 18) - 0x40000;
    }

    if (!*(_WORD *)((char *)a1 + v9 + v12 + 8)
      || (int v17 = *((char *)a1 + v9 + v11 + *(unsigned __int16 *)((char *)a1 + v9 + v12 + 8) + 4),
          !*((_BYTE *)a1 + v9 + v11 + *(unsigned __int16 *)((char *)a1 + v9 + v12 + 8) + 4)))
    {
LABEL_13:
      v16 |= 0x3000000u;
      goto LABEL_14;
    }

    if (v17 == 6)
    {
      v16 |= 0x3000202u;
      v3[64] = 1;
    }

    else if (v17 == 5)
    {
      v16 |= 0x3800000u;
    }

    else
    {
      v6 |= 1LL << v7;
      *((void *)v3 + 7) = v6;
    }

  unsigned int v25 = v8[91] + 1;
  v8[91] = v25;
  *(_DWORD *)(a2 + 64) = v25;
  if ((v7 & 8) != 0)
  {
LABEL_5:
    unsigned int v10 = v8[92] + 1;
    v8[92] = v10;
    *(_DWORD *)(a2 + 68) = v10;
  }

  if (a6)
  {
    if ((*v20 & 0x800) != 0)
    {
      sub_132A0((void *)a1);
      v19 += (uint64_t)sub_17BC4(*(__IOSurface **)(*(void *)a1 + 256LL), a6);
    }
  }

  return IOAccelResourceGetGPUVirtualAddress(v17) + v19;
}

    abort();
  }

  bzero(v34, 0x408uLL);
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  char v7 = 0;
  uint64_t v8 = 4 * v4;
  do
  {
    uint64_t v9 = v5;
    unsigned int v10 = (char *)a1 + v5;
    uint64_t v11 = *(unsigned int *)((char *)a1 + v5 + 4);
    uint64_t v12 = v11 - *(int *)&v10[v11 + 4];
    int v13 = &v10[v12];
    unsigned int v14 = *(unsigned __int16 *)&v10[v12 + 4];
    if (v14 < 9)
    {
      int v16 = -262144;
      if (v14 < 5) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v15 = *((unsigned __int16 *)v13 + 6);
      if (v15) {
        LODWORD(v15) = *(unsigned int *)((char *)a1 + v9 + v11 + v15 + 4);
      }
      int v16 = ((_DWORD)v15 << 18) - 0x40000;
    }

    if (!*(_WORD *)((char *)a1 + v9 + v12 + 8)
      || (int v17 = *((char *)a1 + v9 + v11 + *(unsigned __int16 *)((char *)a1 + v9 + v12 + 8) + 4),
          !*((_BYTE *)a1 + v9 + v11 + *(unsigned __int16 *)((char *)a1 + v9 + v12 + 8) + 4)))
    {
LABEL_13:
      v16 |= 0x3000000u;
      goto LABEL_14;
    }

    if (v17 == 6)
    {
      v16 |= 0x3000202u;
      v3[64] = 1;
    }

    else if (v17 == 5)
    {
      v16 |= 0x3800000u;
    }

    else
    {
      v6 |= 1LL << v7;
      *((void *)v3 + 7) = v6;
    }

LABEL_14:
    *(_DWORD *)((char *)&v34[1] + v9) = v16;
    else {
      unsigned int v19 = 0;
    }
    *(_DWORD *)((char *)&v34[129] + v9) = v19 >> 2;
    ++v7;
    uint64_t v5 = v9 + 4;
  }

  while (v8 != v9 + 4);
  uint64_t v20 = (2 * (_DWORD)v4 + 3) & 0xFFFFFFFC;
  v34[259] = 1;
  v34[257] = (2 * v4 + 3) & 0xFFFFFFFC;
  v34[258] = v4;
  uint64_t v21 = (v9 + 16) & 0x3FFFFFFF0LL;
  size_t v22 = v21 + 4LL * v20;
  *((void *)v3 + 2) = v21;
  *((void *)v3 + 3) = 4 * v20;
  *((void *)v3 + 1) = v22;
  int v23 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, v22);
  if (!v23) {
    goto LABEL_31;
  }
  unint64_t v24 = 0LL;
  unsigned int v25 = 0;
  uint64x2_t v26 = (char *)&v23[v20];
  *((void *)v3 + 4) = v26;
  *((void *)v3 + 5) = v23;
  unint64_t v27 = 1LL;
  do
  {
    unsigned int v28 = v25 + 1;
    unsigned int v29 = (v25 + 1) >> 1;
    unsigned int v30 = (v25 + 1) & 0xFFFFFFFE;
    unint64_t v31 = v34[v24 / 4 + 1] | ((unint64_t)v34[v24 / 4 + 129] << 54);
    if (v27 >= v4) {
      v31 |= 0x8000000000000000LL;
    }
    v23[v30] = v31;
    unsigned int v25 = v30 + 2;
    v23[v28 | 1] = HIDWORD(v31);
    *(_DWORD *)&v26[v24] = ((v29 & 0x7F) << 8) | 0xF0000004;
    v24 += 4LL;
    ++v27;
  }

  while (v8 != v24);
  *(_DWORD *)&v26[v24 - 4] = (v28 << 7) & 0x7F00 | 0xF4000004;
  *((_DWORD *)v3 + 12) = 1;
  return v3;
}

  uint64_t v20 = v9[91] + 1;
  v9[91] = v20;
  *(_DWORD *)(a2 + 64) = v20;
  if ((v11 & 8) != 0)
  {
LABEL_9:
    unsigned int v14 = v9[92] + 1;
    v9[92] = v14;
    *(_DWORD *)(a2 + 68) = v14;
  }

      unsigned int v25 = 0LL;
LABEL_15:
      *(_DWORD *)&v6[v12 + 44] = v23 | ((v13 & 0xFC) >> 2) | ((dword_70C88[v25] & 7) << 8);
      if (v21 < 7)
      {
        unint64_t v27 = 0;
        if (v21 < 5) {
          goto LABEL_24;
        }
      }

      else
      {
        if (*(_WORD *)&v15[v12 + 10 + v19]) {
          uint64x2_t v26 = *(_DWORD *)&v15[v12 + 4 + v18 + *(unsigned __int16 *)&v15[v12 + 10 + v19]];
        }
        else {
          LOBYTE(v26) = 0;
        }
        unint64_t v27 = (v26 & 0x3F) << 14;
      }

      if (*(_WORD *)&v15[v12 + 8 + v19])
      {
        unsigned int v28 = *(unsigned int *)&v15[v12 + 4 + v18 + *(unsigned __int16 *)&v15[v12 + 8 + v19]];
        goto LABEL_25;
      }

  uint64_t v8 = v2[1];
LABEL_15:
  *(_BYTE *)(v8 + 81) = 1;
LABEL_16:
  uint64_t result = 0LL;
  unsigned int v10 = v2[4];
  *(void *)(v10 + 32) = 0LL;
  *(_OWORD *)unsigned int v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)v2[5] = 0LL;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *unint64_t v4 = 0u;
  *((_DWORD *)v2 + 115) = 0;
  return result;
}

      uint64_t result = sub_FBF8(v15, v16, v17, v18, a4, v5);
      goto LABEL_15;
    }
  }

  *(_DWORD *)(result + 48) = 234881024;
LABEL_15:
  v4[9] |= 0x3Fu;
  return result;
}

      uint64_t result = sub_1E0D0(v15, v16, v17, v18, a4, v5);
      goto LABEL_15;
    }
  }

  *(_DWORD *)(result + 48) = 234881024;
LABEL_15:
  v4[9] |= 0x3Fu;
  return result;
}

  unint64_t v31 = v28 + 1;
  DWORD1(__src[0]) = v28 + 1;
  *((_DWORD *)__src + v28 + 2) = 68;
  int64x2_t v32 = *((void *)v10 + 5);
  unsigned int v33 = *(void **)v32;
  if (*(void *)v32)
  {
    uint64_t v34 = 0LL;
    uint64_t v35 = *(_DWORD **)v32;
    while (1)
    {
      unsigned int v36 = v34;
      uint64_t v34 = v35;
      uint64_t v35 = (_DWORD *)v34[43];
      if (!v35) {
        goto LABEL_20;
      }
    }

    if (v34 == v33)
    {
      uint64_t v34 = v33;
    }

    else
    {
      v36[43] = v34[43];
      v34[43] = v33;
      *(void *)int64x2_t v32 = v34;
    }
  }

  else
  {
LABEL_20:
    uint64_t v34 = operator new(0x160uLL);
    int v37 = (*(uint64_t (**)(void, _OWORD *))(**(void **)(v32 + 8) + 16LL))(*(void *)(v32 + 8), __src);
    memcpy(v34, __src, 0x150uLL);
    v34[42] = v37;
    v34[43] = *(void *)v32;
    *(void *)int64x2_t v32 = v34;
    unsigned int v38 = *(_DWORD *)(v32 + 16);
    int v39 = *(_DWORD *)(v32 + 20) + 1;
    *(_DWORD *)(v32 + 20) = v39;
    if (v39 > v38)
    {
      uint64_t v40 = v34;
      do
      {
        uint64_t v41 = v40;
        uint64_t v40 = v34;
        uint64_t v34 = (void *)v34[43];
      }

      while (v34);
      v41[43] = 0LL;
      (*(void (**)(void, void))(**(void **)(v32 + 8) + 24LL))(*(void *)(v32 + 8), v40[42]);
      operator delete(v40);
      --*(_DWORD *)(v32 + 20);
      uint64_t v34 = *(void **)v32;
    }
  }

  int v42 = v34[42];
  if (v42)
  {
    if (v42 == *((void *)v10 + 6)) {
      goto LABEL_31;
    }
  }

  else
  {
    *((_DWORD *)v10 + 5) = 2;
  }

  *((void *)v10 + 6) = v42;
  *((_DWORD *)v10 + 4) |= 1u;
LABEL_31:
  if (*((_DWORD *)v10 + 5) == 2) {
    return 0LL;
  }
  if (a2 && ((*((_DWORD *)v10 + 4) | v5) & 9) != 0) {
    sub_66264(v42, *a2);
  }
  return v10;
}

    *(_DWORD *)((char *)&v34[1] + v9) = v16;
    else {
      unsigned int v19 = 0;
    }
    *(_DWORD *)((char *)&v34[129] + v9) = v19 >> 2;
    ++v7;
    uint64_t v5 = v9 + 4;
  }

  while (v8 != v9 + 4);
  uint64_t v20 = (2 * (_DWORD)v4 + 3) & 0xFFFFFFFC;
  v34[259] = 1;
  v34[257] = (2 * v4 + 3) & 0xFFFFFFFC;
  v34[258] = v4;
  uint64_t v21 = (v9 + 16) & 0x3FFFFFFF0LL;
  size_t v22 = v21 + 4LL * v20;
  *((void *)v3 + 2) = v21;
  *((void *)v3 + 3) = 4 * v20;
  *((void *)v3 + 1) = v22;
  int v23 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, v22);
  if (!v23) {
    goto LABEL_31;
  }
  unint64_t v24 = 0LL;
  unsigned int v25 = 0;
  uint64x2_t v26 = (char *)&v23[v20];
  *((void *)v3 + 4) = v26;
  *((void *)v3 + 5) = v23;
  unint64_t v27 = 1LL;
  do
  {
    unsigned int v28 = v25 + 1;
    unsigned int v29 = (v25 + 1) >> 1;
    unsigned int v30 = (v25 + 1) & 0xFFFFFFFE;
    unint64_t v31 = v34[v24 / 4 + 1] | ((unint64_t)v34[v24 / 4 + 129] << 54);
    if (v27 >= v4) {
      v31 |= 0x8000000000000000LL;
    }
    v23[v30] = v31;
    unsigned int v25 = v30 + 2;
    v23[v28 | 1] = HIDWORD(v31);
    *(_DWORD *)&v26[v24] = ((v29 & 0x7F) << 8) | 0xF0000004;
    v24 += 4LL;
    ++v27;
  }

  while (v8 != v24);
  *(_DWORD *)&v26[v24 - 4] = (v28 << 7) & 0x7F00 | 0xF4000004;
  *((_DWORD *)v3 + 12) = 1;
  return v3;
}

uint64_t sub_8540()
{
  return 0LL;
}

_DWORD *sub_8548(_DWORD *result, int a2, int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(a4 + 64) + 8LL);
  result[44] = a3 & 0xFFFFFFF0;
  result[45] = a2 & 0xFFFFFFF0;
  result[46] = (8 * *(_DWORD *)(v4 + 48) + 24) & 0xFFFFFFE0 | (32 * *(_DWORD *)(a4 + 48) + 480) & 0xFFFFFE00 | ((unint64_t)((*(void *)(v4 + 24) >> 2) + 3LL) >> 2);
  return result;
}

double sub_859C()
{
  v0 = (char *)operator new(0x38uLL);
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(void *)v0 = &off_78530;
  return result;
}

double sub_85D0()
{
  v0 = (char *)operator new(0x140uLL);
  double result = 0.0;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 132) = 0u;
  *(void *)v0 = off_78560;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  *((void *)v0 + 39) = 0LL;
  *((_DWORD *)v0 + 78) = 1;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  return result;
}

char *sub_8658(uint64_t a1, int a2)
{
  uint64_t v4 = (char *)operator new(0x1EC0uLL);
  *(void *)uint64_t v4 = off_785B8;
  bzero(v4 + 48, 0x1E90uLL);
  *((void *)v4 + 3) = 0LL;
  *((void *)v4 + 4) = 0LL;
  *((_DWORD *)v4 + 16) = 1;
  *((_DWORD *)v4 + 30) = 1;
  *((_DWORD *)v4 + 58) = 2;
  *((_DWORD *)v4 + 60) = 16;
  *((_WORD *)v4 + 128) = 4;
  *((void *)v4 + 31) = 0x1000000010LL;
  *((void *)v4 + 27) = a1;
  *((_DWORD *)v4 + 56) = a2;
  sub_5E00((uint64_t)(v4 + 48), 0LL, 0);
  uint64x2_t v5 = vshll_n_u32( (uint32x2_t)(*(void *)&vadd_s32(*(int32x2_t *)(v4 + 164), (int32x2_t)0x300000003LL) & 0xFFFFFFFCFFFFFFFCLL),  2uLL);
  *(uint64x2_t *)(v4 + 8) = v5;
  *((void *)v4 + 3) = malloc_zone_calloc(*(malloc_zone_t **)(qword_7C220 + 8), 1uLL, v5.u64[0]);
  uint64_t v6 = (unsigned int *)malloc_zone_calloc(*(malloc_zone_t **)(qword_7C220 + 8), 1uLL, *((void *)v4 + 2));
  *((void *)v4 + 4) = v6;
  sub_5E00((uint64_t)(v4 + 48), v6, 1);
  *((_DWORD *)v4 + 10) = *((_DWORD *)v4 + 43);
  return v4;
}

unint64_t sub_8758(unsigned int *a1, unsigned int *a2, int a3, uint64_t a4, int a5, int a6)
{
  int v16 = 1;
  int v17 = 1;
  int v18 = 0;
  int v22 = a5;
  uint64_t v19 = a4;
  int v21 = 1;
  int v20 = a5;
  unint64_t v12 = a3 & 0xFFFFFFFC;
  if (a6) {
    unint64_t v12 = a3 & 0xFFFFFFFC | ((unint64_t)((a6 + 3) >> 2) << 35);
  }
  v15[1] = v12;
  unint64_t v13 = (((unint64_t)sub_5E00((uint64_t)v15, a2, 2) + 15) & 0xFFFFFFFFFFFFFFF0LL) - (void)a2;
  sub_5E00((uint64_t)v15, a1, 1);
  return v13;
}

uint64_t gldCreateComputeContext()
{
  return 0xFFFFFFFFLL;
}

uint64_t gldDestroyComputeContext()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompOpenDevice()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompCloseDevice()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompGetDeviceConfig()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompCreateStream()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompDeleteStream()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompFinishStream()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompReadStream()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompWriteStream()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompCopyStream()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompGetImageFormats()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompCreateProgram()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompDeleteProgram()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompBuildProgram()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompLoadBinary()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompGetKernelNames()
{
  return 0LL;
}

uint64_t glrCompGetKernelArgInfo()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompCreateKernel()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompGetKernelInfo()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompDeleteKernel()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompExecuteKernel()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompExecuteNativeKernel()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompEnqueueMarker()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompGetEventStatus()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompWaitForEvent()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompDeleteEvent()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompCreateContext()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompFlush()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompFinish()
{
  return 0xFFFFFFFFLL;
}

uint64_t glrCompSetContextProperties()
{
  return 0xFFFFFFFFLL;
}

uint64_t gldCreateDevicePartitionGroup()
{
  return 0LL;
}

uint64_t gldDestroyDevicePartitionGroup()
{
  return 0LL;
}

uint64_t gldCreateDevicePartition()
{
  return 0LL;
}

uint64_t gldDestroyDevicePartition()
{
  return 0LL;
}

uint64_t gldGetDevicePartitionInfo()
{
  return 0LL;
}

uint64_t gldCompileComputeModule()
{
  return 0LL;
}

uint64_t gldLinkComputeModules()
{
  return 0LL;
}

uint64_t gldWriteComputeModuleBinary()
{
  return 0LL;
}

uint64_t gldLinkComputeProgram()
{
  return 0LL;
}

uint64_t gldBuildComputeProgram()
{
  return 0LL;
}

uint64_t gldWriteComputeProgramBinary()
{
  return 0LL;
}

uint64_t gldExecuteKernel()
{
  return 0LL;
}

uint64_t gldExecuteNativeKernel()
{
  return 0LL;
}

uint64_t gldCopyBufferDataWithQueue()
{
  return 0LL;
}

uint64_t gldCopyTextureDataWithQueue()
{
  return 0LL;
}

uint64_t gldCopyBufferDataToTextureWithQueue()
{
  return 0LL;
}

uint64_t gldCopyTextureDataToBufferWithQueue()
{
  return 0LL;
}

uint64_t sub_89C0()
{
  return 0LL;
}

uint64_t gldFinishQueue()
{
  return 0LL;
}

double gldCreateDevice(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a3 + 7) = 1;
  if (gpumCreateDevice())
  {
    *a1 = 0LL;
  }

  else
  {
    uint64_t v5 = *a1;
    *(void *)(v5 + 16) = sub_21E2C;
    *(void *)(v5 + 24) = sub_21FC4;
    *(void *)(v5 + 32) = sub_22420;
    *(void *)(v5 + 40) = sub_228A4;
    *(void *)(v5 + 48) = 0LL;
    *(void *)(v5 + 56) = 0LL;
    *(void *)(v5 + 64) = sub_B3B8;
    *(void *)(v5 + 72) = sub_B4C4;
    *(void *)(v5 + 80) = nullsub_20;
    *(void *)(v5 + 88) = nullsub_21;
    *(void *)(v5 + 96) = sub_19C74;
    *(void *)(v5 + 104) = sub_19CB8;
    *(void *)(v5 + 112) = sub_20DF8;
    *(void *)(v5 + 120) = sub_20E24;
    *(void *)(v5 + 128) = sub_D6F4;
    *(void *)(v5 + 136) = sub_D6FC;
    *(void *)(v5 + 144) = nullsub_9;
    *(void *)(v5 + 152) = nullsub_10;
    double result = 0.0;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_OWORD *)(v5 + 208) = 0u;
    *(void *)(v5 + 224) = nullsub_43;
    *(void *)(v5 + 232) = nullsub_44;
    *(void *)(v5 + 240) = sub_221FC;
    *(void *)(v5 + 248) = sub_22338;
    *(void *)(v5 + 256) = sub_E238;
    *(void *)(v5 + 264) = sub_BEAC;
    *(void *)(v5 + 272) = sub_209F8;
    *(void *)(v5 + 280) = sub_200A0;
    *(void *)(v5 + 288) = sub_1FFFC;
    *(void *)(v5 + 296) = sub_1A4EC;
    *(void *)(v5 + 304) = sub_1C6C8;
    *(void *)(v5 + 312) = sub_20E40;
    *(void *)(v5 + 320) = sub_D750;
    *(void *)(v5 + 328) = sub_BD94;
    *(void *)(v5 + 336) = sub_3FEC;
    *(void *)(v5 + 344) = sub_20140;
    *(void *)(v5 + 352) = sub_B614;
    *(void *)(v5 + 360) = nullsub_7;
    *(void *)(v5 + 368) = sub_1FFBC;
    *(void *)(v5 + 376) = sub_1A2F8;
    *(void *)(v5 + 384) = sub_20E70;
    *(void *)(v5 + 392) = sub_1B5F4;
    *(void *)(v5 + 400) = sub_B718;
    *(void *)(v5 + 408) = sub_1B0B4;
    *(void *)(v5 + 416) = sub_D73C;
    *(void *)(v5 + 424) = sub_19CF8;
    *(void *)(v5 + 432) = sub_D820;
    *(void *)(v5 + 440) = sub_D818;
    *(void *)(v5 + 448) = sub_B720;
    *(void *)(v5 + 456) = sub_2207C;
    *(void *)(v5 + 464) = sub_89C0;
    *(void *)(v5 + 472) = sub_22168;
    *(void *)(v5 + 480) = 0LL;
    *(void *)(v5 + 488) = sub_D888;
    *(void *)(v5 + 496) = sub_DB18;
    *(void *)(v5 + 504) = sub_25430;
    *(_OWORD *)(v5 + 512) = 0u;
    *(_OWORD *)(v5 + 528) = 0u;
  }

  return result;
}

uint64_t gldChoosePixelFormat(uint64_t a1, uint64_t a2)
{
  return gpumChoosePixelFormat(a1, a2, &xmmword_7C130, sub_22284);
}

uint64_t gldDestroyPixelFormat(uint64_t a1)
{
  return gpumDestroyPixelFormat(a1, &xmmword_7C130);
}

uint64_t gldInitializeLibrary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  xmmword_7C150 = 0u;
  unk_7C210 = 0u;
  *(_OWORD *)&qword_7C220 = 0u;
  xmmword_7C1F0 = 0u;
  *(_OWORD *)&qword_7C200 = 0u;
  *(_OWORD *)&xmmword_7C130 = 0u;
  xmmword_7C170 = xmmword_70160;
  unk_7C180 = xmmword_70170;
  xmmword_7C190 = xmmword_70180;
  unk_7C1A0 = xmmword_70190;
  xmmword_7C1B0 = xmmword_701A0;
  unk_7C1C0 = xmmword_701B0;
  xmmword_7C1D0 = xmmword_701C0;
  unk_7C1E0 = xmmword_701D0;
  *(void *)&xmmword_7C1F0 = 16LL;
  qword_7C140 = (uint64_t)sub_62EE0;
  unk_7C148 = sub_63748;
  *((void *)&xmmword_7C150 + 1) = sub_64E9C;
  unk_7C160 = glrCompFlush;
  qword_7C168 = (uint64_t)sub_8E7C;
  byte_7C217 = 1;
  zone = malloc_create_zone(0LL, 0);
  qword_7C218 = (uint64_t)zone;
  if (zone)
  {
    malloc_set_zone_name(zone, "GPUSupport_mallocZone");
    zone = (malloc_zone_t *)qword_7C218;
  }

  unint64_t v13 = (malloc_zone_t **)malloc_zone_malloc(zone, 0x18uLL);
  if (!v13) {
    abort();
  }
  unsigned int v14 = v13;
  uint64_t v15 = malloc_create_zone(0LL, 0);
  *unsigned int v14 = v15;
  if (v15) {
    malloc_set_zone_name(v15, "AGX_glrAGXUShaderMallocZone");
  }
  int v16 = malloc_create_zone(0LL, 0);
  v14[1] = v16;
  if (v16) {
    malloc_set_zone_name(v16, "AGX_glrUSCMallocZone");
  }
  qword_7C220 = (uint64_t)v14;
  dword_7C228 = 3;
  return gpumInitializeIOData(a1, a2, a3, a4, a5, a6, &xmmword_7C130, sub_22250);
}

void gldTerminateLibrary()
{
  v0 = (malloc_zone_t **)qword_7C220;
  malloc_destroy_zone(*(malloc_zone_t **)qword_7C220);
  malloc_destroy_zone(v0[1]);
  malloc_zone_free((malloc_zone_t *)qword_7C218, v0);
  malloc_destroy_zone((malloc_zone_t *)qword_7C218);
}

uint64_t gldGetVersion(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  if (!qword_7C200) {
    return 0LL;
  }
  *a1 = 4;
  uint64_t result = 1LL;
  *a2 = 1;
  *a3 = 16;
  *a4 = 28928;
  return result;
}

uint64_t sub_8E7C(uint64_t result)
{
  *(void *)uint64_t result = 0LL;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t gldCreatePipelineProgram(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = malloc_zone_calloc((malloc_zone_t *)qword_7C218, 1uLL, *(void *)(*(void *)a1 + 144LL));
  if (!v8) {
    abort();
  }
  uint64_t v9 = v8;
  *uint64_t v8 = a3;
  v8[1] = a4;
  v8[7] = 0LL;
  v8[8] = 0LL;
  *((_DWORD *)v8 + 18) = 0;
  if (*(_BYTE *)(a1 + 288)) {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  }
  uint64_t v10 = *(void *)(a1 + 24);
  if (v10) {
    *(void *)(v10 + 40) = v9;
  }
  v9[4] = v10;
  *(void *)(a1 + 24) = v9;
  if (*(_BYTE *)(a1 + 288)) {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 48));
  }
  *a2 = v9;
  return 0LL;
}

uint64_t gldModifyPipelineProgram()
{
  return 0LL;
}

uint64_t gldGetPipelineProgramInfo(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)a2 + 2LL);
  if (!*(void *)(*(void *)a2 + 8LL) && !*(void *)(*(void *)a2 + 16LL))
  {
LABEL_43:
    *a4 = 0;
    return 0LL;
  }

  uint64_t v9 = *(_DWORD **)(a1 + 16);
  if (*(_BYTE *)(v7 + 288))
  {
    pthread_mutex_lock((pthread_mutex_t *)(v7 + 48));
    uint64_t v9 = *(_DWORD **)(a1 + 16);
  }

  uint64_t v10 = *(int **)(a2 + 8);
  int v11 = *v10;
  *uint64_t v10 = 0;
  int v12 = dword_70AB8[v8];
  unint64_t v13 = (int *)(a2 + 56);
  if ((v11 & 1) != 0)
  {
    int v18 = v9[89] + 1;
    v9[89] = v18;
    *unint64_t v13 = v18;
    if ((v11 & 2) == 0)
    {
LABEL_7:
      if ((v11 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
  }

  else if ((v11 & 2) == 0)
  {
    goto LABEL_7;
  }

  int v19 = v9[90] + 1;
  v9[90] = v19;
  *(_DWORD *)(a2 + 60) = v19;
  if ((v11 & 4) == 0)
  {
LABEL_8:
    if ((v11 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

LABEL_10:
  uint64_t CachedProgram = gpumGetCachedProgram(a1, a2);
  uint64_t v16 = CachedProgram;
  if ((v8 & 0xFFFFFFFB) != 0)
  {
    int v17 = *(_DWORD *)(a2 + 72);
  }

  else
  {
    int v17 = *(_DWORD *)(a1 + 4 * v8 + 2500);
    *(_DWORD *)(a2 + 72) = v17;
  }

  int v21 = (_OWORD *)(CachedProgram + 32);
  int v22 = *(_DWORD *)(a2 + 56) != *(_DWORD *)(CachedProgram + 32);
  if (*(_DWORD *)(a2 + 60) != *(_DWORD *)(CachedProgram + 36)) {
    v22 |= 2u;
  }
  if (*(_DWORD *)(a2 + 64) != *(_DWORD *)(CachedProgram + 40)) {
    v22 |= 4u;
  }
  if (*(_DWORD *)(a2 + 68) != *(_DWORD *)(CachedProgram + 44)) {
    v22 |= 8u;
  }
  if (v17 == *(_DWORD *)(CachedProgram + 48)) {
    int v23 = v22;
  }
  else {
    int v23 = v22 | 0x10;
  }
  uint64_t v24 = *(void *)(CachedProgram + 24);
  if (v24) {
    BOOL v25 = 0;
  }
  else {
    BOOL v25 = (v8 & 0xFFFFFFFB) == 0;
  }
  if (v25) {
    int v26 = v23 & 0xF;
  }
  else {
    int v26 = v23;
  }
  if ((v26 & v12) != 0)
  {
    uint64_t v24 = ((uint64_t (*)(uint64_t, void, uint64_t, void))off_785F8[v8])( a1,  0LL,  a2,  *(void *)(CachedProgram + 24));
    unint64_t v27 = *(_DWORD **)(v16 + 24);
    if ((_DWORD *)v24 != v27)
    {
      if (v24)
      {
        ++*(_DWORD *)(v24 + 12);
        unint64_t v27 = *(_DWORD **)(v16 + 24);
      }

      if (v27)
      {
        int v28 = v27[3] - 1;
        v27[3] = v28;
        if (!v28) {
          (*(void (**)(_DWORD *))(*(void *)v27 + 24LL))(v27);
        }
      }

      *(void *)(v16 + 24) = v24;
    }
  }

  __int128 v29 = *(_OWORD *)v13;
  *(_DWORD *)(v16 + 48) = *(_DWORD *)(a2 + 72);
  *int v21 = v29;
  if (*(_BYTE *)(v7 + 288)) {
    pthread_mutex_unlock((pthread_mutex_t *)(v7 + 48));
  }
  if (!v24) {
    goto LABEL_43;
  }
  return 0LL;
}

  if (v5) {
    dispatch_release(v5);
  }
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v9 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v9;
}

  if (v5) {
    dispatch_release(v5);
  }
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v9 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v9;
}

  if (v5) {
    dispatch_release(v5);
  }
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v9 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v9;
}

  if (v5) {
    dispatch_release(v5);
  }
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v9 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v9;
}

  if (v5) {
    dispatch_release(v5);
  }
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v9 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v9;
}

  if (v5) {
    dispatch_release(v5);
  }
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v9 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v9;
}

  if (v5) {
    dispatch_release(v5);
  }
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v9 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v9;
}

  if (v5) {
    dispatch_release(v5);
  }
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v9 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v9;
}

  if (v5) {
    dispatch_release(v5);
  }
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v9 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v9;
}

  if (v5) {
    dispatch_release(v5);
  }
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v9 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v9;
}

      uint64_t v8 = (unint64_t *)(a1 + 8 * v6 + 848);
      do
        uint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      return result;
    }

    switch(v5)
    {
      case 32848:
      case 32854:
      case 32855:
        goto LABEL_61;
      case 32849:
LABEL_44:
        uint64_t v6 = 2LL;
        goto LABEL_10;
      case 32856:
LABEL_80:
        uint64_t v6 = 3LL;
        goto LABEL_10;
      case 32857:
        goto LABEL_89;
      default:
        return result;
    }
  }

  else
  {
    switch(v5)
    {
      case 33321:
        goto LABEL_10;
      case 33322:
      case 33324:
        return result;
      case 33323:
        goto LABEL_71;
      case 33325:
LABEL_81:
        uint64_t v6 = 11LL;
        goto LABEL_10;
      case 33326:
LABEL_56:
        uint64_t v6 = 14LL;
        goto LABEL_10;
      case 33327:
LABEL_86:
        uint64_t v6 = 12LL;
        goto LABEL_10;
      case 33328:
LABEL_85:
        uint64_t v6 = 15LL;
        goto LABEL_10;
      case 33329:
        uint64_t v6 = 34LL;
        goto LABEL_10;
      case 33330:
        uint64_t v6 = 24LL;
        goto LABEL_10;
      case 33331:
        uint64_t v6 = 38LL;
        goto LABEL_10;
      case 33332:
        uint64_t v6 = 28LL;
        goto LABEL_10;
      case 33333:
        uint64_t v6 = 41LL;
        goto LABEL_10;
      case 33334:
        uint64_t v6 = 31LL;
        goto LABEL_10;
      case 33335:
        uint64_t v6 = 35LL;
        goto LABEL_10;
      case 33336:
        uint64_t v6 = 25LL;
        goto LABEL_10;
      case 33337:
        uint64_t v6 = 39LL;
        goto LABEL_10;
      case 33338:
        uint64_t v6 = 29LL;
        goto LABEL_10;
      case 33339:
        uint64_t v6 = 42LL;
        goto LABEL_10;
      case 33340:
        uint64_t v6 = 32LL;
        goto LABEL_10;
      default:
        switch(v5)
        {
          case 34836:
            uint64_t v6 = 16LL;
            goto LABEL_10;
          case 34837:
          case 34839:
          case 34843:
          case 34845:
            return result;
          case 34838:
          case 34840:
            goto LABEL_56;
          case 34841:
            goto LABEL_85;
          case 34842:
            uint64_t v6 = 13LL;
            goto LABEL_10;
          case 34844:
          case 34846:
            goto LABEL_81;
          case 34847:
            goto LABEL_86;
          default:
            if (v5 != 35056) {
              return result;
            }
            uint64_t v6 = 21LL;
            break;
        }

        goto LABEL_10;
    }
  }

  return result;
}

    int v26 = sub_13ED4((void *)a2);
    unint64_t v27 = a7;
    if (!v26) {
      unint64_t v27 = *(unsigned __int16 *)(*(void *)a2 + 248LL);
    }
    BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v18, v27);
    if (IOSurfaceIsTiled(v18))
    {
      __int128 v29 = (256 << -(char)__clz((BytesPerRowOfPlane >> 8) - 1));
      else {
        BytesPerRowOfPlane = 4096LL;
      }
    }

    LODWORD(v25) = off_7C398(BytesPerRowOfPlane, v19, 1LL, a7);
    goto LABEL_30;
  }

  if ((_BYTE)xmmword_7C430)
  {
    LODWORD(v25) = 0;
    goto LABEL_30;
  }

  xmmword_7C350(*(unsigned __int16 *)(v17 + 192));
  int v19 = *v16;
  if ((**(_WORD **)a2 & 0x800) != 0) {
    goto LABEL_10;
  }
  int v20 = *(_DWORD *)(a2 + 368);
  int v21 = *(unsigned __int16 *)(*(void *)a2 + 32LL * a4 + 268);
  if ((v20 - 1) < 2)
  {
LABEL_9:
    int v23 = *(unsigned __int8 *)(v19 + 57);
    uint64_t v24 = off_7C388(v23 * *(unsigned __int16 *)(*(void *)a2 + 32LL * a4 + 268));
    BOOL v25 = off_7C3A0(v24, v23) / v23;
    goto LABEL_30;
  }

  unint64_t v31 = 1 << -(char)__clz(v21 - 1);
  if (v21 < 2) {
    int64x2_t v32 = 1;
  }
  else {
    int64x2_t v32 = v31;
  }
  if (v32 <= 4) {
    unsigned int v33 = 4;
  }
  else {
    unsigned int v33 = v32;
  }
  if (v20 == 10) {
    LODWORD(v25) = v33;
  }
  else {
    LODWORD(v25) = v32;
  }
LABEL_30:
  *(void *)(a1 + 112) = v25;
  uint64_t result = xmmword_7C350(*(unsigned __int16 *)(*(void *)a2 + 192LL));
  *(void *)(a1 + 104) = *(unsigned __int8 *)(*v16 + 57);
  if (a8) {
    *(_DWORD *)(a1 + 180) = 0;
  }
  return result;
}

uint64_t gldDestroyPipelineProgram(uint64_t a1, void *ptr)
{
  if (*(_BYTE *)(a1 + 288)) {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  }
  while (*((_DWORD *)ptr + 12))
    gpumDeleteCachedProgram(a1, ptr, ptr[2]);
  uint64_t v4 = ptr[4];
  if (*(void **)(a1 + 24) != ptr)
  {
    if (!v4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  *(void *)(a1 + 24) = v4;
  if (v4) {
LABEL_7:
  }
    *(void *)(v4 + 40) = ptr[5];
LABEL_8:
  uint64_t v5 = ptr[5];
  if (v5) {
    *(void *)(v5 + 32) = v4;
  }
  if (*(_BYTE *)(a1 + 288)) {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 48));
  }
  malloc_zone_free((malloc_zone_t *)qword_7C218, ptr);
  return 0LL;
}

uint64_t gldUnbindPipelineProgram(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = 0LL;
  for (i = (void *)(result + 160); *i != a2; ++i)
  {
    if (++v3 == 5) {
      return result;
    }
  }

  uint64_t v5 = result + 8 * v3;
  if (*(void *)(v5 + 2256))
  {
    uint64_t v6 = (uint64_t *)(v5 + 2256);
    uint64_t v7 = dword_70AA4[v3];
    uint64_t v8 = *(void *)(result + 16);
    if (*(_BYTE *)(v8 + 288)) {
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 48));
    }
    ((void (*)(uint64_t, void, void, void, void, uint64_t))off_785D0[v3])(v2, 0LL, 0LL, 0LL, 0LL, v7);
    uint64_t result = *v6;
    int v9 = *(_DWORD *)(*v6 + 12) - 1;
    *(_DWORD *)(result + 12) = v9;
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
    }
    uint64_t v11 = v2 + 20 * v3;
    *(void *)(v11 + 2408) = 0LL;
    *(void *)(v11 + 2400) = 0LL;
    *(_DWORD *)(v11 + 2416) = 0;
    uint64_t *v6 = 0LL;
    uint64_t v12 = *(void *)(v2 + 16);
    if (*(_BYTE *)(v12 + 288)) {
      uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v12 + 48));
    }
  }

  void *i = 0LL;
  return result;
}

char *sub_92FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(int **)(a2 + 8);
  int v7 = *v6;
  int *v6 = 0;
  uint64_t v8 = *(_DWORD **)(a1 + 16);
  int v9 = (int *)(a2 + 56);
  if ((v7 & 1) != 0)
  {
    int v23 = v8[89] + 1;
    v8[89] = v23;
    *int v9 = v23;
    if ((v7 & 2) == 0)
    {
LABEL_3:
      if ((v7 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }

  else if ((v7 & 2) == 0)
  {
    goto LABEL_3;
  }

  int v24 = v8[90] + 1;
  v8[90] = v24;
  *(_DWORD *)(a2 + 60) = v24;
  if ((v7 & 4) == 0)
  {
LABEL_4:
    if ((v7 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

LABEL_6:
  uint64_t CachedProgram = gpumGetCachedProgram(a1, a2);
  int v12 = *(_DWORD *)(a1 + 2500);
  *(_DWORD *)(a2 + 72) = v12;
  uint64_t v13 = CachedProgram + 32;
  int v14 = *(_DWORD *)(a2 + 56) != *(_DWORD *)(CachedProgram + 32);
  if (*(_DWORD *)(a2 + 60) != *(_DWORD *)(CachedProgram + 36)) {
    v14 |= 2u;
  }
  if (*(_DWORD *)(a2 + 64) != *(_DWORD *)(CachedProgram + 40)) {
    v14 |= 4u;
  }
  if (*(_DWORD *)(a2 + 68) != *(_DWORD *)(CachedProgram + 44)) {
    v14 |= 8u;
  }
  if (v12 == *(_DWORD *)(CachedProgram + 48)) {
    int v15 = v14;
  }
  else {
    int v15 = v14 | 0x10;
  }
  uint64_t v16 = *(char **)(CachedProgram + 24);
  if (v16) {
    int v17 = v15;
  }
  else {
    int v17 = v15 & 0xF;
  }
  if ((v17 & 0x1D) != 0)
  {
    uint64_t v18 = CachedProgram;
    uint64_t v16 = sub_644B4(a1, 0LL, a2, v16, v17);
    int v19 = *(char **)(v18 + 24);
    if (v16 != v19)
    {
      if (v16)
      {
        ++*((_DWORD *)v16 + 3);
        int v19 = *(char **)(v18 + 24);
      }

      if (v19)
      {
        int v20 = *((_DWORD *)v19 + 3) - 1;
        *((_DWORD *)v19 + 3) = v20;
        if (!v20) {
          (*(void (**)(char *))(*(void *)v19 + 24LL))(v19);
        }
      }

      *(void *)(v18 + 24) = v16;
    }
  }

  __int128 v21 = *(_OWORD *)v9;
  *(_DWORD *)(v13 + 16) = v9[4];
  *(_OWORD *)uint64_t v13 = v21;
  if (!v16) {
    uint64_t v13 = *(void *)(a1 + 16) + 336LL;
  }
  *a3 = v13;
  return v16;
}

uint64_t gldCreateQuery(uint64_t a1, uint64_t a2)
{
  return gpumCreateQuery(a1, a2, 144LL, 0LL);
}

uint64_t gldModifyQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return gpumModifyQuery(a1, a2, a3, a4, sub_31FC4, sub_320D8);
}

uint64_t gldGetQueryInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return gpumGetQueryInfo(a1, a2, a3, a4, sub_31F1C, sub_31FC4, sub_31FFC);
}

uint64_t gldDestroyQuery(uint64_t a1, uint64_t a2)
{
  return gpumDestroyQuery(a1, a2, sub_31FC4);
}

uint64_t gldGetTextureLevelInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return gpumGetTextureLevelInfo(a1, a2, a3, a4, a5, a6, sub_1C6F8);
}

uint64_t gldRestoreTextureData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return gpumRestoreTextureData(a1, a2, a3, a4, a5, sub_1C4E8);
}

uint64_t gldReadTextureData(uint64_t a1)
{
  return gpumReadTextureData(a1);
}

void *sub_9538(void *a1)
{
  *a1 = &off_78630;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_9578(void *__p)
{
  *__p = &off_78630;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

uint64_t sub_95B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = off_7C2C0(a3);
  **(void **)(*(void *)(v4 + 64) + 8LL * a2) = result;
  return result;
}

void *sub_95F4(void *a1)
{
  *a1 = &off_78658;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_9634(void *__p)
{
  *__p = &off_78658;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

uint64_t sub_9674(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16LL))(*(void *)(a1 + 8));
}

void sub_9688(void *a1)
{
  int v1 = sub_969C(a1);
  operator delete(v1);
}

void *sub_969C(void *a1)
{
  *a1 = off_78680;
  uint64_t v2 = a1[52];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  if (dword_7C464)
  {
    uint64_t v3 = a1[53];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  uint64_t v4 = (void **)a1[49];
  if (v4)
  {
    for (i = *v4; i; *uint64_t v4 = i)
    {
      uint64_t v6 = i[2];
      i = (void *)i[3];
      (*(void (**)(void *, uint64_t))(*v4[1] + 24LL))(v4[1], v6);
      int v7 = *v4;
      if (*v4)
      {
        if (*((_BYTE *)v7 + 8) && *v7) {
          operator delete((void *)*v7);
        }
        operator delete(v7);
      }
    }

    operator delete(v4);
  }

  return a1;
}

uint64_t sub_9764(uint64_t a1, void *a2)
{
  return off_7C280(*(void *)(a1 + 8), *a2);
}

uint64_t sub_9778(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
  }
  return result;
}

void *sub_9790()
{
  uint64_t v0 = off_7C268();
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_78630;
  result[1] = v0;
  return result;
}

void *sub_97CC(uint64_t a1)
{
  int v1 = *(int **)(a1 + 24);
  uint64_t v2 = (unsigned __int16 *)((char *)v1 - *v1);
  if (*v2 >= 5u && (uint64_t v3 = v2[2]) != 0) {
    uint64_t v4 = (int *)((char *)v1 + v3 + *(unsigned int *)((char *)v1 + v3));
  }
  else {
    uint64_t v4 = 0LL;
  }
  uint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 9u && (uint64_t v6 = v5[4]) != 0) {
    int v7 = (char *)v4 + v6 + *(unsigned int *)((char *)v4 + v6);
  }
  else {
    int v7 = 0LL;
  }
  uint64_t v8 = off_7C288(v7);
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_78630;
  result[1] = v8;
  return result;
}

void *sub_986C(uint64_t a1)
{
  uint64_t v1 = off_7C268(a1, 1LL);
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_78630;
  result[1] = v1;
  return result;
}

void *sub_98AC(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = &off_78658;
  v2[1] = qword_7C290(a1);
  return v2;
}

char *sub_98F8(unsigned int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x1B0uLL);
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 292) = 0u;
  *(void *)uint64_t v6 = &off_78810;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 2) = a2;
  int v7 = (char *)a2 - *a2;
  uint64_t v8 = *((unsigned __int16 *)v7 + 2);
  uint64_t v9 = *(unsigned int *)((char *)a2 + v8);
  int v10 = (unsigned int *)((char *)a2 + v8 + v9);
  uint64_t v11 = *v10;
  uint64_t v134 = a3;
  uint64_t v132 = v8;
  uint64_t v133 = v11;
  uint64_t v131 = v9;
  if ((_DWORD)v11)
  {
    unint64_t v12 = 0LL;
    unint64_t v13 = 0LL;
    unint64_t v14 = 0LL;
    int v15 = (char *)a2 + v8 + v9;
    uint64_t v16 = 24LL;
    while (1)
    {
      uint64_t v17 = v16;
      v6[v16] = v13;
      uint64_t v18 = *(unsigned int *)&v15[v12 + 4];
      uint64_t v19 = v18 - *(int *)((char *)&v10[v12 / 4 + 1] + v18);
      int v20 = &v15[v12 + v19];
      unsigned int v21 = *((unsigned __int16 *)v20 + 2);
      if (v21 < 7)
      {
        int v23 = 0;
        if (v21 < 5) {
          goto LABEL_14;
        }
      }

      else
      {
        uint64_t v22 = *((unsigned __int16 *)v20 + 5);
        if (v22) {
          LODWORD(v22) = *(_DWORD *)&v15[v12 + 4 + v18 + v22];
        }
        int v23 = (v22 & 0x3F) << 14;
      }

      if (*(_WORD *)&v15[v12 + 8 + v19]) {
        uint64_t v24 = *(unsigned int *)&v15[v12 + 4 + v18 + *(unsigned __int16 *)&v15[v12 + 8 + v19]];
      }
      else {
        uint64_t v24 = 0LL;
      }
      v23 |= (dword_70C78[v24] & 7) << 11;
      if (v21 >= 9 && *(_WORD *)&v15[v12 + 12 + v19])
      {
        uint64_t v25 = *(unsigned int *)&v15[v12 + 4 + v18 + *(unsigned __int16 *)&v15[v12 + 12 + v19]];
        goto LABEL_15;
      }

LABEL_24:
      uint64_t v28 = 0LL;
LABEL_25:
      *(_DWORD *)&v6[v12 + 112] = v27 | (v14 >> 2) | ((dword_70C78[v28] & 7) << 11);
      if (v21 < 5)
      {
        int v31 = 0;
        v13 += 4LL;
      }

      else
      {
        uint64_t v29 = *(unsigned __int16 *)&v15[v12 + 8 + v19];
        if (*(_WORD *)&v15[v12 + 8 + v19]) {
          int v30 = *(_DWORD *)&v15[v12 + 4 + v18 + v29];
        }
        else {
          int v30 = 0;
        }
        if (v21 >= 9 && (uint64_t v32 = *(unsigned __int16 *)&v15[v12 + 12 + v19]) != 0)
        {
          uint64_t v33 = *(unsigned int *)&v15[v12 + 4 + v18 + v32];
          if (v33 >= 0xB)
          {
            v13 += 0x3FFFFFFFCLL;
            if (!(_DWORD)v29)
            {
LABEL_38:
              int v31 = 0;
              goto LABEL_39;
            }
          }

          else
          {
            v13 += (qword_70CB8[v33] * (v30 + 1) + 3LL) & 0x3FFFFFFFCLL;
            if (!(_DWORD)v29) {
              goto LABEL_38;
            }
          }
        }

        else
        {
          v13 += 4LL * (v30 + 1);
          if (!(_DWORD)v29) {
            goto LABEL_38;
          }
        }

        int v31 = *(_DWORD *)&v15[v12 + 4 + v18 + v29];
      }

  if (*(_BYTE *)(a1 + 3004))
  {
    bzero((void *)(a1 + 3000), 0xD0uLL);
    uint64_t v6 = *(void *)(a1 + 24);
  }

  if ((a2 & 0x4000) != 0)
  {
    int v20 = 0LL;
    unsigned int v21 = 0;
    uint64_t v22 = *(unsigned __int16 *)(v6 + 13070);
    do
    {
      if (((1LL << v21) & v22) != 0)
      {
        int v23 = (_DWORD *)(a1 + v20);
        a4.i32[0] = *(_DWORD *)(v6 + 13064);
        uint64_t v24 = (int16x8_t)vmovl_u8(a4);
        *(int8x8_t *)v24.i8 = vand_s8(*(int8x8_t *)v24.i8, (int8x8_t)vdup_n_s16(1LL << v21));
        v25.i32[0] = v24.u16[1];
        v25.i32[1] = v24.u16[0];
        int v26 = vceqz_s32((int32x2_t)vand_s8(v25, (int8x8_t)0xFF000000FFLL));
        if ((v26.i8[4] & 1) != 0) {
          int v27 = (_DWORD *)(a1 + v20 + 3024);
        }
        else {
          int v27 = (_DWORD *)(v6 + 12880);
        }
        v23[756] = *v27;
        if ((v26.i8[0] & 1) != 0) {
          uint64_t v28 = (_DWORD *)(a1 + v20 + 3028);
        }
        else {
          uint64_t v28 = (_DWORD *)(v6 + 12884);
        }
        v23[757] = *v28;
        v29.i32[0] = v24.u16[3];
        v29.i32[1] = v24.u16[2];
        int v30 = (uint8x8_t)vceqz_s32((int32x2_t)vand_s8(v29, (int8x8_t)0xFF000000FFLL));
        if ((v30.i8[4] & 1) != 0) {
          int v31 = (_DWORD *)(a1 + v20 + 3032);
        }
        else {
          int v31 = (_DWORD *)(v6 + 12888);
        }
        v23[758] = *v31;
        if ((v30.i8[0] & 1) != 0) {
          uint64_t v32 = (_DWORD *)(a1 + v20 + 3036);
        }
        else {
          uint64_t v32 = (_DWORD *)(v6 + 12892);
        }
        v23[759] = *v32;
        v30.i32[0] = *(_DWORD *)(a1 + 3152);
        *(int8x8_t *)v24.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8(v30), *(int8x8_t *)v24.i8);
        a4 = (uint8x8_t)vmovn_s16(v24);
        *(_DWORD *)(a1 + 3152) = a4.i32[0];
      }

      ++v21;
      v20 += 16LL;
    }

    while (v20 != 128);
  }

  if ((a2 & 0x100) != 0)
  {
    uint64_t v33 = *(double *)(v6 + 12856);
    *(float *)(a1 + 3156) = v33;
  }

  if ((a2 & 0x400) != 0)
  {
    *(_DWORD *)(a1 + 3160) = *(_DWORD *)(a1 + 3160) & ~*(_DWORD *)(v6 + 13052) | *(_DWORD *)(v6 + 12900) & *(_DWORD *)(v6 + 13052);
    *(_DWORD *)(a1 + 3164) |= *(_DWORD *)(v6 + 13052);
  }

  *(_OWORD *)(a1 + 3188) = *(_OWORD *)(v6 + 13288);
  unsigned int v34 = *(_DWORD *)(v6 + 13304);
  *(_DWORD *)(a1 + 3204) = v34;
  uint64_t v35 = *(_DWORD *)(a1 + 3000);
  if (v35) {
    goto LABEL_78;
  }
  if (v34)
  {
    uint64_t v36 = *(_DWORD *)(a1 + 3188);
    int v37 = *(_DWORD *)(a1 + 3196);
    unint64_t v38 = v37 + v36;
    uint64_t v39 = *(_DWORD *)(a1 + 3192);
    if (v36 < 0)
    {
      uint64_t v40 = 0;
    }

    else if (v36 >= *(_DWORD *)(a1 + 104))
    {
      uint64_t v40 = *(_DWORD *)(a1 + 104);
    }

    else
    {
      uint64_t v40 = *(_DWORD *)(a1 + 3188);
    }

    unint64_t v41 = *(_DWORD *)(a1 + 3200);
    int v42 = v40;
    if (v38 >= v40)
    {
      int v42 = *(_DWORD *)(a1 + 104);
      if (v38 < v42) {
        int v42 = v37 + v36;
      }
    }

    uint64_t v43 = v41 + v39;
    if (v39 < 0)
    {
      unsigned int v44 = 0;
    }

    else
    {
      unsigned int v44 = *(_DWORD *)(a1 + 108);
      if (v39 < v44) {
        unsigned int v44 = *(_DWORD *)(a1 + 3192);
      }
    }

    uint64_t v45 = v44;
    if (v43 >= v44)
    {
      uint64_t v45 = *(_DWORD *)(a1 + 108);
      if (v43 < v45) {
        uint64_t v45 = v41 + v39;
      }
    }

    uint64_t v46 = *(void *)(a1 + 48);
    if (v46)
    {
      uint64_t v47 = *(_DWORD *)(*(void *)v46 + 192LL) ? 16 : 32;
      if ((**(_DWORD **)(a1 + 32) & v47) != 0)
      {
        uint64_t v48 = *(_DWORD *)(a1 + 108);
        uint64_t v49 = v48 - v45;
        uint64_t v45 = v48 - v44;
        unsigned int v44 = v49;
      }
    }

    *(_DWORD *)(a1 + 3168) = v40;
    *(_DWORD *)(a1 + 3172) = v44;
    *(_DWORD *)(a1 + 3176) = v42 - v40;
    *(_DWORD *)(a1 + 3180) = v45 - v44;
    if (v36 | v39 || v37 != *(_DWORD *)(a1 + 104) || v41 != *(_DWORD *)(a1 + 108))
    {
      unsigned int v50 = 0;
      goto LABEL_77;
    }
  }

  else
  {
    *(void *)(a1 + 3168) = 0LL;
    *(void *)(a1 + 3176) = *(void *)(a1 + 104);
  }

  unsigned int v50 = 1;
LABEL_77:
  *(_BYTE *)(a1 + 3184) = v50;
LABEL_78:
  uint64_t v51 = v35 | a2;
  *(_DWORD *)(a1 + 3000) = v35 | a2;
  int v52 = *(void *)(a1 + 2688);
  unsigned __int16 v53 = *(unsigned __int8 *)(a1 + 3184);
  if (v52)
  {
    uint64_t v54 = 0;
  }

  else if (*(_BYTE *)(a1 + 3184))
  {
    uint64_t v54 = v16;
  }

  else
  {
    uint64_t v54 = 0;
  }

  if (*(_BYTE *)(a1 + 3005)) {
    uint64_t v54 = 1;
  }
  *(_BYTE *)(a1 + 3005) = v54;
  BOOL v55 = *(_DWORD *)(a1 + 3376);
  *(_DWORD *)(a1 + 3376) = *(_DWORD *)(a1 + 3152);
  uint64_t v92 = v55;
  if (v53)
  {
    if (*(_BYTE *)(a1 + 3164) == 0xFF) {
      uint64_t v56 = -16385;
    }
    else {
      uint64_t v56 = -17409;
    }
    uint64_t v57 = v56 & v51;
  }

  else
  {
    uint64_t v57 = 0;
  }

  unsigned int v90 = v57 & 0x100;
  else {
    int v58 = 0;
  }
  uint64_t v91 = v57 & 0x400;
  uint64_t v93 = v53;
  int v94 = v58 | (v91 >> 9) & 0xFE | BYTE1(v57) & 1 | (8 * v53);
  int v59 = ~v57;
  if (!v52) {
    goto LABEL_96;
  }
LABEL_95:
  for (uint64_t i = -1; ; uint64_t i = v59)
  {
    uint64_t v61 = i & v51;
    if (*(_BYTE *)(a1 + 3005)) {
      break;
    }
    if (sub_25A80(a1, 0LL, 48LL, 4LL, 0LL, v95, 0))
    {
      uint64_t v63 = v95[0];
      uint64_t v64 = *(_DWORD *)(a1 + 3156);
      *(float *)v95[0] = (float)*(int *)(a1 + 3168);
      *(float *)(v63 + 4) = (float)*(int *)(a1 + 3172);
      *(_DWORD *)(v63 + 8) = v64;
      *(float *)(v63 + 12) = (float)(*(_DWORD *)(a1 + 3176) + *(_DWORD *)(a1 + 3168));
      *(float *)(v63 + 16) = (float)*(int *)(a1 + 3172);
      *(_DWORD *)(v63 + 20) = v64;
      *(float *)(v63 + 24) = (float)*(int *)(a1 + 3168);
      *(float *)(v63 + 28) = (float)(*(_DWORD *)(a1 + 3180) + *(_DWORD *)(a1 + 3172));
      *(_DWORD *)(v63 + 32) = v64;
      *(float *)(v63 + 36) = (float)(*(_DWORD *)(a1 + 3176) + *(_DWORD *)(a1 + 3168));
      *(float *)(v63 + 40) = (float)(*(_DWORD *)(a1 + 3180) + *(_DWORD *)(a1 + 3172));
      *(_DWORD *)(v63 + 44) = v64;
      if ((*(unsigned int (**)(void, uint64_t, BOOL, uint64_t))(**(void **)(a1 + 2536) + 56LL))( *(void *)(a1 + 2536),  v61,  v93 != 0,  v95[1]))
      {
        goto LABEL_127;
      }
    }

    *(_DWORD *)(*v4 + 4LL) = 1;
    goto LABEL_25;
  }

LABEL_64:
      uint64_t v63 = 0LL;
LABEL_65:
      *(_DWORD *)&v6[4 * v54 + 44] = v59 | ((v13 & 0xFC) >> 2) | ((dword_70C88[v63] & 7) << 8);
      if (v55)
      {
        uint64_t v64 = v45 + v43 + v47;
        else {
          LOBYTE(v65) = 0;
        }
        int v66 = (v65 & 0x3F) << 14;
      }

      else
      {
        int v66 = 0;
        if (v50 < 5) {
          goto LABEL_78;
        }
      }

      uint64_t v67 = v45 + v43 + v47;
      else {
        uint64_t v68 = 0LL;
      }
      v66 |= (dword_70C78[v68] & 7) << 11;
      if (v50 >= 9)
      {
        uint64_t v69 = v45 + v43 + v47;
        if (*(_WORD *)((char *)v42 + v69 - v49 + 4))
        {
          uint64_t v70 = *(unsigned int *)((char *)v42 + v69 + *(unsigned __int16 *)((char *)v42 + v69 - v49 + 4) - 4);
          goto LABEL_79;
        }
      }

  uint64_t v18 = *(unsigned __int8 *)(v7 + 212);
  if (*(_BYTE *)(v7 + 212))
  {
    if (v18 == 1)
    {
      uint64_t v19 = 1;
    }

    else if (v18 == 2)
    {
      uint64_t v19 = 2;
    }

    else
    {
      uint64_t v19 = 4;
      if (v18 >= 5)
      {
        if (dword_7C428 < v18 || v18 > 8) {
          uint64_t v19 = 4;
        }
        else {
          uint64_t v19 = 8;
        }
      }
    }
  }

  else
  {
    uint64_t v19 = 0;
  }

  *((_WORD *)a5 + 14) = v19;
}

LABEL_78:
      uint64_t v70 = 0LL;
LABEL_79:
      *(_DWORD *)&v6[4 * v54 + 112] = v66 | (v14 >> 2) | ((dword_70C88[v70] & 7) << 8);
      if (v50 < 5)
      {
        LODWORD(v72) = 0;
        v13 += 4LL;
      }

      else
      {
        uint64_t v71 = v45 + v43 + v47;
        uint64_t v72 = *(unsigned __int16 *)((char *)v42 + v71 - v49);
        else {
          int v73 = 0;
        }
        if (v50 >= 9)
        {
          uint64_t v74 = v45 + v43 + v47;
          BOOL v75 = (char *)v42 + v74 - v49;
          if (*((_WORD *)v75 + 2))
          {
            uint64_t v76 = *(unsigned int *)((char *)v42 + v74 + *((unsigned __int16 *)v75 + 2) - 4);
            if (v76 >= 0xB)
            {
              v13 += 0x3FFFFFFFCLL;
              if (!(_DWORD)v72) {
                goto LABEL_91;
              }
            }

            else
            {
              v13 += (qword_70CB8[v76] * (v73 + 1) + 3LL) & 0x3FFFFFFFCLL;
              if (!(_DWORD)v72) {
                goto LABEL_91;
              }
            }

  if (v32 > *(void *)(a1 + 2168) + 24LL) {
    sub_260F0(a1);
  }
  return 0LL;
}

LABEL_90:
            LODWORD(v72) = *(int *)((char *)v42 + v45 + v43 + v47 + v72 - 4);
            goto LABEL_91;
          }
        }

        v13 += 4LL * (v73 + 1);
        if ((_DWORD)v72) {
          goto LABEL_90;
        }
      }

LABEL_91:
      v14 += 4LL * (v72 + 1);
      ++v34;
LABEL_92:
      ++v38;
      ++v42;
      uint64_t v43 = v40;
      unsigned int v44 = v39;
    }

    while (v38 < v41);
  }

  if (!v34)
  {
    v6[24] = 0;
    *((_DWORD *)v6 + 11) = 0;
    *((_DWORD *)v6 + 28) = (v14 >> 2);
    v13 += 8LL;
    v14 += 8LL;
    LOBYTE(v34) = 1;
  }

  v6[40] = v34;
  v6[42] = v13 >> 2;
  v6[108] = v34;
  v6[110] = v14 >> 2;
  if (!dword_7C464) {
    goto LABEL_156;
  }
  int __pattern4 = -1;
  memset_pattern4(v6 + 308, &__pattern4, 0x40uLL);
  uint64_t v77 = *a1;
  if (!(_DWORD)v77) {
    goto LABEL_156;
  }
  uint64_t v78 = 0LL;
  int v79 = a1 + 1;
  int v80 = v6[177];
  unsigned int v81 = (char *)a2 + v132 + v131;
  int v82 = (char *)a2 + v35 + v36;
  do
  {
    int v83 = (int *)((char *)&v79[v78] + v79[v78]);
    int v84 = (unsigned __int16 *)((char *)v83 - *v83);
    unsigned int v85 = *v84;
    if (v85 < 5 || !v84[2] || *((_BYTE *)v83 + v84[2]) != 22) {
      goto LABEL_135;
    }
    if (v85 < 7)
    {
      uint64_t v86 = 0LL;
      if ((_DWORD)v133) {
        goto LABEL_110;
      }
    }

    else
    {
      uint64_t v86 = v84[3];
      if (v84[3]) {
        uint64_t v86 = *(unsigned int *)((char *)v83 + v86);
      }
      if ((_DWORD)v133)
      {
LABEL_110:
        uint64_t v87 = 0LL;
        int v88 = 0;
        while (1)
        {
          uint64_t v89 = *(unsigned int *)&v81[v87 * 4 + 4];
          unsigned int v90 = &v81[v87 * 4 + v89 - *(int *)((char *)&v10[v87 + 1] + v89)];
          else {
            uint64_t v92 = 0LL;
          }
          if (v92 == v86) {
            break;
          }
          ++v88;
          if (v133 == ++v87) {
            goto LABEL_117;
          }
        }

        if (((*(void *)(v134 + 64) >> v86) & 1) != 0)
        {
          v80 += 16;
          v6[177] = v80;
          *((_WORD *)v6 + 89) |= 1 << v6[176];
        }

        goto LABEL_130;
      }
    }

  uint64_t v69 = v9 == 0;
  *a5 = v60;
LABEL_92:
  *a6 = v69;
  return result;
}

LABEL_117:
    if ((_DWORD)v130)
    {
      uint64_t v93 = 0LL;
      int v94 = 0;
      while (1)
      {
        uint64_t v95 = *(unsigned int *)&v82[v93 * 4 + 4];
        v96 = &v82[v93 * 4 + v95 - *(int *)((char *)&v37[v93 + 1] + v95)];
        else {
          uint64_t v98 = 0LL;
        }
        if (v98 == v86) {
          break;
        }
        ++v94;
        if (v130 == ++v93)
        {
          int v88 = v130;
          goto LABEL_130;
        }
      }

      int v88 = v133 + v94;
    }

    else
    {
      int v88 = 0;
    }

LABEL_130:
    __int16 v99 = v6[v88 + 24];
    uint64_t v100 = v6[176];
    unsigned int v101 = &v6[8 * v100];
    *((_WORD *)v101 + 93) = v99;
    if (v85 >= 9 && (uint64_t v102 = v84[4]) != 0) {
      int v103 = *(int *)((char *)v83 + v102);
    }
    else {
      int v103 = 0;
    }
    *((_DWORD *)v101 + 45) = v103;
    *((_WORD *)v101 + 92) = v86;
    v6[176] = v100 + 1;
LABEL_135:
    ++v78;
  }

  while (v78 != v77);
  for (uint64_t i = 0LL; i != v77; ++i)
  {
    uint64_t v105 = (int *)((char *)&v79[i] + v79[i]);
    uint64_t v106 = (unsigned __int16 *)((char *)v105 - *v105);
    unsigned int v107 = *v106;
    if (v107 >= 5 && v106[2] && *((_BYTE *)v105 + v106[2]) == 23)
    {
      if (v107 >= 7 && v106[3]) {
        int v108 = *(int *)((char *)v105 + v106[3]);
      }
      else {
        int v108 = 0;
      }
      if (v6[176])
      {
        uint64_t v109 = 0LL;
        int v110 = (unsigned __int16 *)(v6 + 184);
        while (1)
        {
          int v111 = *v110;
          v110 += 4;
          if (v108 == v111) {
            break;
          }
          if (v6[176] == ++v109)
          {
            LODWORD(v109) = v6[176];
            break;
          }
        }
      }

      else
      {
        LODWORD(v109) = 0;
      }

      if (v107 >= 9 && (uint64_t v112 = v106[4]) != 0) {
        int v113 = *(int *)((char *)v105 + v112);
      }
      else {
        int v113 = 0;
      }
      *(_DWORD *)&v6[4 * v109 + 308] = v113;
    }
  }

  int v104 = 0;
LABEL_131:
  v12[1472] = v104;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v12;
  uint64_t v106 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v106 + 16LL))(v106);
  if ((result & 1) == 0)
  {
    unsigned int v107 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t result = *(void *)(v107 + 24);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
      unsigned int v107 = *(void *)(*(void *)(a1 + 32) + 8LL);
    }

    *(void *)(v107 + 24) = 0LL;
  }

  return result;
}

LABEL_156:
  if (dword_7C468)
  {
    int v135 = -1;
    memset_pattern4(v6 + 376, &v135, 0x10uLL);
    *((_DWORD *)v6 + 93) = -1;
    uint64_t v114 = *a1;
    if ((_DWORD)v114)
    {
      unint64_t v115 = 0LL;
      uint64_t v116 = 4 * v114;
      while (2)
      {
        uint64_t v117 = a1[v115 / 4 + 1];
        uint64_t v118 = v117 - *(int *)((char *)&a1[v115 / 4 + 1] + v117);
        int v119 = (char *)&a1[v115 / 4] + v118;
        unsigned int v120 = *((unsigned __int16 *)v119 + 2);
        if (v120 < 5) {
          goto LABEL_178;
        }
        uint64_t v121 = *((unsigned __int16 *)v119 + 4);
        if (!v121) {
          goto LABEL_178;
        }
        int v122 = *((unsigned __int8 *)&a1[v115 / 4 + 1] + v117 + v121);
        if (v122 != 50)
        {
          if (v122 == 49)
          {
            else {
              int v124 = 0;
            }
            *((_DWORD *)v6 + 93) = v124;
          }

          goto LABEL_178;
        }

        if (v120 < 9)
        {
          int v125 = 0;
          if (v120 >= 7) {
            goto LABEL_174;
          }
        }

        else
        {
          if (*(_WORD *)((char *)&a1[v115 / 4 + 3] + v118)) {
            int v125 = *(unsigned int *)((char *)&a1[v115 / 4 + 1]
          }
                                   + v117
                                   + *(unsigned __int16 *)((char *)&a1[v115 / 4 + 3] + v118));
          else {
            int v125 = 0;
          }
LABEL_174:
          uint64_t v126 = *(unsigned __int16 *)((char *)&a1[v115 / 4 + 2] + v118 + 2);
          if (v126)
          {
            uint64_t v127 = *(unsigned int *)((char *)&a1[v115 / 4 + 1] + v117 + v126);
            goto LABEL_177;
          }
        }

        uint64_t v127 = 0LL;
LABEL_177:
        *(_DWORD *)&v6[4 * v127 + 376] = v125;
LABEL_178:
        v115 += 4LL;
        if (v116 == v115) {
          break;
        }
        continue;
      }
    }
  }

  *(void *)uint64_t v6 = off_78680;
  *((void *)v6 + 50) = &off_786A0;
  *((void *)v6 + 51) = a2;
  *((void *)v6 + 52) = off_7C278(v6 + 8);
  if (dword_7C464)
  {
    *((void *)v6 + 53) = off_7C280(a2, 0LL);
  }

  else
  {
    uint64_t v128 = operator new(0x18uLL);
    *uint64_t v128 = 0LL;
    v128[1] = v6 + 400;
    v128[2] = 8LL;
    *((void *)v6 + 49) = v128;
  }

  return v6;
}

uint64_t gldBlitFramebufferData( uint64_t a1, int a2, int a3, int a4, int a5, __int16 a6, int a7, float a8, float a9, float a10, float a11)
{
  uint64_t result = 1LL;
  if ((a3 | a2) < 0 || a8 < 0.0 || a9 < 0.0) {
    return result;
  }
  int v66 = a2;
  int v67 = a3;
  int v68 = a4;
  int v69 = a5;
  int v62 = (int)a8;
  int v63 = (int)a9;
  int v64 = a4;
  int v65 = a5;
  uint64_t v14 = *(void *)(a1 + 24);
  BOOL v15 = *(_DWORD *)(v14 + 13304) != 0;
  __int128 v53 = *(_OWORD *)(v14 + 13288);
  BOOL v54 = v15;
  int v55 = a7;
  int v56 = a7;
  int v57 = 1;
  char v58 = 0;
  float v59 = a10;
  float v60 = a11;
  char v61 = 0;
  uint64_t v16 = *(void **)(a1 + 56);
  uint64_t v17 = *v16;
  if (*(_BYTE *)(*v16 + 182LL))
  {
    if ((a6 & 0x4000) != 0)
    {
      int v18 = **(_DWORD **)(a1 + 32);
      if (*(_DWORD *)(v17 + 192)) {
        int v19 = 16;
      }
      else {
        int v19 = 32;
      }
      int v20 = v18 & v19;
      if (*(_DWORD *)(**(void **)(a1 + 48) + 192LL)) {
        int v21 = 16;
      }
      else {
        int v21 = 32;
      }
      int v22 = v21 & v18;
      if (v18) {
        int v23 = 0;
      }
      else {
        int v23 = *(_BYTE *)(**(void **)(v16[1] + 8LL * (*(unsigned __int16 *)(v17 + 176) - 36064)) + 24LL) & 1;
      }
      BOOL v24 = v22 != 0;
      BOOL v25 = v20 != 0;
      if (*(void *)(a1 + 2688))
      {
        sub_26240(a1, *(void *)(a1 + 3968));
        if (*(void *)(a1 + 2688))
        {
LABEL_55:
          *(void *)(a1 + 4904) |= 0x40000uLL;
          printf("%s:%d agxuResolve failed\n", "gldBlitFramebufferData", 452);
          putchar(10);
          return 0LL;
        }
      }

      uint64_t v26 = v25 ^ v24 | v23;
      while (1)
      {
        sub_26DA0(a1, 0x10u);
        if (*(_DWORD *)(a1 + 4900) == 1)
        {
          int v27 = 0;
          int v28 = 0;
          int v29 = 1;
          int v30 = 1;
        }

        else
        {
          int v31 = *(_DWORD **)(a1 + 24);
          if (v31[3326])
          {
            unsigned int v32 = v31[3322];
            if ((v32 & 0x80000000) != 0)
            {
              int v30 = 0;
            }

            else if (v32 >= *(unsigned __int16 *)(**(void **)(a1 + 56) + 178LL))
            {
              int v30 = *(unsigned __int16 *)(**(void **)(a1 + 56) + 178LL);
            }

            else
            {
              int v30 = v31[3322];
            }

            int v34 = v31[3324] + v32;
            int v35 = v30;
            if (v34 >= v30)
            {
              int v35 = *(unsigned __int16 *)(**(void **)(a1 + 56) + 178LL);
              if (v34 < v35) {
                int v35 = v34;
              }
            }

            unsigned int v36 = v31[3323];
            if ((v36 & 0x80000000) != 0)
            {
              int v29 = 0;
            }

            else if (v36 >= *(unsigned __int16 *)(**(void **)(a1 + 56) + 180LL))
            {
              int v29 = *(unsigned __int16 *)(**(void **)(a1 + 56) + 180LL);
            }

            else
            {
              int v29 = v31[3323];
            }

            int v37 = v31[3325] + v36;
            int v38 = v29;
            if (v37 >= v29)
            {
              int v38 = *(unsigned __int16 *)(**(void **)(a1 + 56) + 180LL);
              if (v37 < v38) {
                int v38 = v37;
              }
            }

            uint64_t v39 = *(void *)(a1 + 48);
            if (v39)
            {
              int v40 = *(_DWORD *)(*(void *)v39 + 192LL) ? 16 : 32;
              if ((**(_DWORD **)(a1 + 32) & v40) != 0)
              {
                int v41 = *(unsigned __int16 *)(**(void **)(a1 + 56) + 180LL);
                int v42 = v41 - v38;
                int v38 = v41 - v29;
                int v29 = v42;
              }
            }

            int v27 = v35 - v30;
            int v28 = v38 - v29;
          }

          else
          {
            int v29 = 0;
            int v30 = 0;
            uint64_t v33 = **(void **)(a1 + 56);
            int v27 = *(unsigned __int16 *)(v33 + 178);
            int v28 = *(unsigned __int16 *)(v33 + 180);
          }
        }

        uint64_t v43 = *(void *)(a1 + 2696);
        *(_DWORD *)(v43 + 1536) = v30;
        *(_DWORD *)(v43 + 1540) = v29;
        int v44 = v27 + v30;
        *(_DWORD *)(v43 + 1544) = v27 + v30;
        int v45 = v28 + v29;
        *(_DWORD *)(v43 + 1548) = v28 + v29;
        *(_BYTE *)(v43 + 1553) = v26;
        *(_DWORD *)(v43 + 1556) = 0;
        if (sub_25A80(a1, 0LL, 48LL, 4LL, 0LL, v52, 0))
        {
          uint64_t v46 = v52[0];
          *(float *)v52[0] = (float)v30;
          *(float *)(v46 + 4) = (float)v29;
          *(_DWORD *)(v46 + 8) = 1065353216;
          *(float *)(v46 + 12) = (float)v44;
          *(float *)(v46 + 16) = (float)v29;
          *(_DWORD *)(v46 + 20) = 1065353216;
          *(float *)(v46 + 24) = (float)v30;
          *(float *)(v46 + 28) = (float)v45;
          *(_DWORD *)(v46 + 32) = 1065353216;
          *(float *)(v46 + 36) = (float)v44;
          *(float *)(v46 + 40) = (float)v45;
          *(_DWORD *)(v46 + 44) = 1065353216;
          if ((*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 2536) + 48LL))( *(void *)(a1 + 2536),  v52[1],  v26,  0LL))
          {
            break;
          }
        }

        sub_260F0(a1);
        if (*(void *)(a1 + 2688)) {
          goto LABEL_55;
        }
      }

      *(void *)(a1 + 4904) |= 0x40000uLL;
      *(_DWORD *)(a1 + 4800) = *(_DWORD *)(*(void *)(a1 + 56) + 16LL);
      uint64_t v47 = *(void **)(a1 + 4824);
      if (v47) {
        operator delete(v47);
      }
      uint64_t v48 = operator new(0x8E0uLL);
      *(void *)(a1 + 4824) = sub_6EE74((uint64_t)v48, a1, *(void **)(a1 + 48), 17, 0);
      uint64_t v49 = *(void **)(a1 + 4816);
      if (v49) {
        operator delete(v49);
      }
      unsigned int v50 = operator new(0x8E0uLL);
      *(void *)(a1 + 4816) = sub_6EE74((uint64_t)v50, a1, *(void **)(a1 + 56), 9, 0);
      if ((a6 & 0x100) == 0) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }

  else if ((a6 & 0x4000) != 0)
  {
    sub_6EE74((uint64_t)v52, a1, v16, 9, 0);
    sub_6EE74((uint64_t)v51, a1, *(void **)(a1 + 48), 17, 0);
    sub_6DE0C(a1, (uint64_t)v52, (uint64_t)v51, (uint64_t)&v53);
  }

  if ((a6 & 0x100) != 0)
  {
LABEL_17:
    sub_6EE74((uint64_t)v52, a1, *(void **)(a1 + 56), 10, 0);
    sub_6EE74((uint64_t)v51, a1, *(void **)(a1 + 48), 18, 0);
    sub_6DE0C(a1, (uint64_t)v52, (uint64_t)v51, (uint64_t)&v53);
  }

LABEL_18:
  if ((a6 & 0x400) != 0)
  {
    sub_6EE74((uint64_t)v52, a1, *(void **)(a1 + 56), 12, 0);
    sub_6EE74((uint64_t)v51, a1, *(void **)(a1 + 48), 20, 0);
    sub_6DE0C(a1, (uint64_t)v52, (uint64_t)v51, (uint64_t)&v53);
  }

  *(void *)(a1 + 4904) |= 0x8000uLL;
  return 1LL;
}

  if ((v3 & 1) != 0)
  {
    v12 &= sub_25A80(*(void *)(a1 + 8), 3LL, *(void *)(v9 + 16), 16LL, 64LL, (uint64_t *)v115, 0);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void, void, void *))(*(void *)v5 + 112LL))( v5,  *(unsigned int *)(v9 + 48),  *(void *)(v9 + 24),  v115[1]);
  }

  if ((v3 & 3) != 0)
  {
    v12 &= sub_25A80(*(void *)(a1 + 8), 3LL, *(void *)(v9 + 24), 16LL, 64LL, (uint64_t *)v114, 0);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 120LL))(v5, v114[1]);
  }

  uint64_t v89 = v9;
  unsigned int v90 = v5;
  *(void *)uint64_t v95 = v7;
  if ((v3 & 0x800) != 0)
  {
    BOOL v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56LL))(*(void *)(a1 + 16));
    uint64_t v16 = sub_25A80(*(void *)(a1 + 8), 0LL, v15, 16LL, 0LL, (uint64_t *)&v101, 0);
    LODWORD(v15) = (*(uint64_t (**)(void, void *, uint64_t, uint64_t, void))(**(void **)(a1 + 16) + 40LL))( *(void *)(a1 + 16),  v101,  v102,  v15,  *(unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 3952LL) + 8LL) + 24LL));
    uint64_t v17 = *(void *)(*(void *)(a1 + 16) + 40LL);
    int v18 = sub_25A80(*(void *)(a1 + 8), 3LL, v17, 16LL, 64LL, (uint64_t *)__dst, 0);
    memcpy(__dst[0], *(const void **)(*(void *)(a1 + 16) + 8LL), v17);
    int v19 = *(void *)(a1 + 8);
    int v20 = (*(uint64_t (**)(_BYTE *))(*(void *)v6 + 336LL))(v6);
    LODWORD(v19) = sub_25E10(v19, v20, 16LL, v109);
    uint64_t v11 = sub_25F38(*(void *)(a1 + 8), 8LL, v108);
    int v21 = v16 & v18;
    int v7 = *(void *)v95;
    v12 &= v15 & v21 & v19 & v11;
    if ((v3 & 0x1000) == 0)
    {
LABEL_24:
      if ((v3 & 0x2000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
  }

  else if ((v3 & 0x1000) == 0)
  {
    goto LABEL_24;
  }

  int v22 = *(void **)(a1 + 16);
  int v23 = v22[6];
  BOOL v24 = v22[8];
  BOOL v25 = v22[9];
  uint64_t v26 = (*(uint64_t (**)(void *))(*v22 + 64LL))(v22);
  int v27 = *(void *)(a1 + 8);
  if ((*(_BYTE *)(v27 + 2944) & 0x40) != 0)
  {
    v12 &= (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v27 + 3968) + 256LL))( *(void *)(v27 + 3968),  v27,  0LL);
    int v27 = *(void *)(a1 + 8);
  }

  int v28 = v12 & sub_25A80(v27, 3LL, v24, 16LL, 64LL, (uint64_t *)v110, 0);
  memcpy(v110[0], *(const void **)(*(void *)(a1 + 16) + 16LL), v24);
  LOWORD(v3) = v3 | 0x400;
  *(void *)(v2 + 4904) |= (unint64_t)(*(_BYTE *)(*(void *)(v2 + 24) + 15712LL) != 0) << 6;
  (*(void (**)(_BYTE *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 328LL))( v6,  v110[1],  v23,  v25,  v26,  1LL);
  uint64_t v11 = sub_20BFC(a1 + 24, *(void *)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 2696LL), 1);
  unint64_t v12 = v28 & v11;
  *(_DWORD *)(*(void *)(a1 + 8) + 2944LL) |= 0x40u;
  int v7 = *(void *)v95;
  if ((v3 & 0x2000) != 0)
  {
LABEL_30:
    LOWORD(v3) = v3 | 0x400;
    if ((*(_BYTE *)(*(void *)(a1 + 8) + 2944LL) & 0x40) != 0)
    {
      v12 &= (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48LL))(*(void *)(a1 + 16));
      *(_DWORD *)(*(void *)(a1 + 8) + 2944LL) &= ~0x40u;
    }

    uint64_t v11 = (*(uint64_t (**)(_BYTE *, void, void, void, uint64_t, void, void))(*(void *)v6 + 328LL))( v6,  0LL,  0LL,  0LL,  4LL,  0LL,  0LL);
  }

_DWORD *gldDiscardFramebuffer(uint64_t a1, void *a2, uint64_t a3, int *a4)
{
  if (a3)
  {
    uint64_t v6 = a3;
    int v7 = 0;
    uint64_t v37 = 0LL;
    do
    {
      int v9 = *a4++;
      int v8 = v9;
      if ((v9 - 36064) >= 8)
      {
        if (v8 == 36096)
        {
          BYTE4(v37) = 1;
        }

        else if (v8 == 36128)
        {
          LOBYTE(v37) = 1;
        }

        else
        {
          printf("%s:%d Unsupported attachment: 0x%x\n", "gldDiscardFramebuffer", 560, v8);
          putchar(10);
          int v7 = 0;
        }
      }

      else
      {
        v7 |= 1 << v8;
      }

      --v6;
    }

    while (v6);
  }

  else
  {
    uint64_t v37 = 0LL;
    int v7 = 0;
  }

  uint64_t v10 = *(void *)(a1 + 2688);
  uint64_t v11 = (uint64_t)a2;
  if (*(void **)(a1 + 48) == a2)
  {
    if (v10)
    {
      if (*(_DWORD *)(v10 + 44) == 1) {
        *(_DWORD *)(a1 + 2840) |= v7;
      }
      goto LABEL_26;
    }
  }

  else if (v10)
  {
LABEL_26:
    uint64_t result = (_DWORD *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 2536) + 120LL))( *(void *)(a1 + 2536),  0LL);
    goto LABEL_27;
  }

  int v12 = *((_DWORD *)a2 + 4);
  if (v12 != *(_DWORD *)(a1 + 4800)) {
    goto LABEL_26;
  }
  if (v12 != *(_DWORD *)(a1 + 4808)) {
    goto LABEL_26;
  }
  uint64_t v13 = *(void *)(a1 + 4784);
  if (!v13) {
    goto LABEL_26;
  }
  uint64_t v14 = *(_DWORD **)(a1 + 4792);
  if (!v14) {
    goto LABEL_26;
  }
  if (*(_DWORD *)(v13 + 4)) {
    goto LABEL_26;
  }
  if (v14[1]) {
    goto LABEL_26;
  }
  if (!*(void *)(a1 + 4824)) {
    goto LABEL_26;
  }
  if (v14[11] != 1) {
    goto LABEL_26;
  }
  uint64_t v19 = v13 + *(unsigned int *)(v13 + 40);
  if (!*(_BYTE *)(v19 + 1552) || *(_BYTE *)(v19 + 1553) && **(_DWORD **)(a1 + 32)) {
    goto LABEL_26;
  }
  int v20 = (char *)v14 + v14[10];
  memcpy(v20 + 1276, (const void *)(v19 + 1276), 0x11CuLL);
  int v21 = *(unsigned __int8 **)(a1 + 4824);
  if ((!DWORD1(xmmword_7C450) || v21[160])
    && (*(_DWORD *)(v19 + 1536)
     || *(_DWORD *)(v19 + 1540)
     || *(_DWORD *)(v19 + 1544) != *(unsigned __int16 *)(*a2 + 178LL)
     || *(_DWORD *)(v19 + 1548) != *(unsigned __int16 *)(*a2 + 180LL)))
  {
    goto LABEL_26;
  }

  if ((v37 & 0x100000000LL) != 0 && *(_DWORD *)(v19 + 1556))
  {
    if (*(_DWORD *)(*(void *)(a2[1] + 64LL) + 56LL) == *(_DWORD *)(a1 + 4860))
    {
      uint64_t v22 = *(void *)(a1 + 4832);
      if (v22)
      {
        (*(void (**)(void, void, char *))(**(void **)(a1 + 3992) + 24LL))( *(void *)(a1 + 3992),  *(void *)(v22 + 32),  v20 + 312);
        *(_DWORD *)(a1 + 2944) |= 2u;
        if (sub_63C40( a1 + 4768,  *(int32x2_t **)(a1 + 4792),  *(_DWORD *)(v22 + 200),  *(void *)(v22 + 184),  12,  *(unsigned int **)(v22 + 192),  0,  0LL))
        {
          goto LABEL_66;
        }

        printf("%s:%d Couldn't bind resolve fbo for discard\n", "doMsaaDiscard", 137);
        putchar(10);
      }
    }

    (*(void (**)(void, void))(**(void **)(a1 + 2536) + 120LL))(*(void *)(a1 + 2536), 0LL);
    uint64_t v11 = (uint64_t)a2;
    goto LABEL_28;
  }

LABEL_66:
  if (!v21)
  {
LABEL_87:
    uint64_t v32 = 0LL;
    BOOL v33 = 1;
    do
    {
      while (!v33)
      {
        if (++v32 == 11) {
          goto LABEL_95;
        }
      }

      BOOL v33 = sub_63C40( a1 + 4768,  *(int32x2_t **)(a1 + 4792),  *(_DWORD *)(*(void *)(a1 + (v32 << 6) + 1136) + 256LL),  *(void *)(a1 + (v32 << 6) + 1152),  *((_WORD *)&unk_7C070 + 8 * v32 + 4),  (unsigned int *)(*(void *)(a1 + (v32 << 6) + 1144) + 24LL),  0,  0LL);
      ++v32;
    }

    while (v32 != 11);
    if (v33)
    {
      v20[1089] = 1;
      v20[1137] = 1;
      uint64_t result = (_DWORD *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2536) + 120LL))( *(void *)(a1 + 2536),  1LL);
      *(_DWORD *)(*(void *)(a1 + 4784) + 4LL) = 1;
      *(_DWORD *)(a1 + 2392) |= 0x4000400u;
      goto LABEL_103;
    }

LABEL_95:
    printf("%s:%d Couldn't bind data buffers for discard\n");
LABEL_97:
    putchar(10);
LABEL_98:
    uint64_t v34 = *(void *)(a1 + 2536);
    goto LABEL_102;
  }

  *(void *)&__int128 v44 = 0LL;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  int v23 = *((_DWORD *)v21 + 1);
  *((void *)&v44 + 1) = ~(-1 << v23) | ((unint64_t)(v23 & 0x1F) << 43) | ((unint64_t)(*v21 & 0xF) << 32) | ((unint64_t)(*((_DWORD *)v21 + 39) & 0x7F) << 36);
  if (v23)
  {
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    unint64_t v26 = 0LL;
    do
    {
      uint64_t v27 = *(unsigned int *)&v21[v25 + 88];
      if (dword_7C494)
      {
        int v28 = *(_DWORD *)(*(void *)(a1 + 4816) + v25 + 88);
        if ((_DWORD)v27 != v28)
        {
          switch((int)v27)
          {
            case 19:
              LODWORD(v27) = 9;
              break;
            case 20:
              goto LABEL_75;
            case 21:
            case 22:
              LODWORD(v27) = 13;
              break;
            default:
              if ((_DWORD)v27 == 2)
              {
                LODWORD(v27) = 14;
              }

              else if ((_DWORD)v27 == 3)
              {
LABEL_75:
                LODWORD(v27) = 15;
              }

              break;
          }

          BOOL v29 = (_DWORD)v27 == v28;
          uint64_t v27 = *(unsigned int *)(*(void *)(a1 + 4816) + v25 + 88);
          if (!v29) {
            goto LABEL_98;
          }
        }
      }

      *((_BYTE *)&v40 + v24) = *(_DWORD *)&v21[v25 + 152] / ((*((void *)&v44 + 1) >> 36) & 0x7F);
      if (off_7C2A8) {
        off_7C2A8((char *)&v40 + v24, *(unsigned int *)&v21[v25 + 168], *(unsigned int *)&v21[v25 + 212], v27, *v21);
      }
      if (!sub_63C40( a1 + 4768,  *(int32x2_t **)(a1 + 4792),  *(_DWORD *)&v21[v25 + 200],  *(void *)&v21[v25 + 184],  12,  *(unsigned int **)&v21[v25 + 192],  0,  0LL))
      {
        printf("%s:%d Couldn't bind resolve fbo for discard\n");
        goto LABEL_97;
      }

      ++v26;
      v25 += 280LL;
      v24 += 4LL;
    }

    while (v26 < *((unsigned int *)v21 + 1));
  }

  __s1[2] = v41;
  __s1[3] = v42;
  __s1[4] = v43;
  __s1[5] = v44;
  int v39 = 68;
  __s1[0] = xmmword_701E0;
  __s1[1] = v40;
  uint64_t v30 = sub_B164((uint64_t)(a2 + 45), __s1);
  if (v30)
  {
    uint64_t v31 = v30;
    if ((*(unsigned int (**)(void, uint64_t, char *, void, void, uint64_t))(**(void **)(a1 + 2536)
                                                                                          + 160LL))( *(void *)(a1 + 2536),  v30,  v20 + 312,  *((unsigned int *)v20 + 311),  **(unsigned __int8 **)(a1 + 4816),  1LL))
    {
      sub_280F4( a1,  v31,  v20 + 312,  v20 + 1276,  *(unsigned __int8 **)(a1 + 4824),  1,  1,  *(_BYTE *)(*(void *)(a1 + 24) + 12952LL) != 0);
      goto LABEL_87;
    }

    int v35 = (uint64_t *)(a1 + 2536);
    printf("%s:%d Couldn't Generate PBE state/reg words for discard\n", "doMsaaDiscard", 224);
    putchar(10);
  }

  else
  {
    printf("%s:%d Couldn't generate EOT program for discard\n", "doMsaaDiscard", 215);
    putchar(10);
    int v35 = (uint64_t *)(a1 + 2536);
  }

  uint64_t v34 = *v35;
LABEL_102:
  uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t, void))(*(void *)v34 + 120LL))(v34, 0LL);
LABEL_103:
  uint64_t v11 = (uint64_t)a2;
LABEL_27:
  if ((v37 & 0x100000000LL) == 0)
  {
    uint64_t v16 = 0LL;
    goto LABEL_34;
  }

  if (v26 < 0x19)
  {
    float v59 = 0LL;
  }

  else
  {
    float v59 = (unsigned int *)*(unsigned __int16 *)((char *)v23 + v44 + 24);
  }

  float v60 = *v59;
  if ((_DWORD)v60)
  {
    char v61 = 0LL;
    while (1)
    {
      int v62 = v59[v61 + 1];
      int v63 = v62 - *(int *)((char *)&v59[v61 + 1] + v62);
      int v64 = (char *)&v59[v61] + v63;
      int v65 = *((unsigned __int16 *)v64 + 2);
      if (v65 < 5) {
        goto LABEL_137;
      }
      int v66 = *((unsigned __int16 *)v64 + 4);
      if (!v66) {
        goto LABEL_137;
      }
      int v67 = *((unsigned __int8 *)&v59[v61 + 1] + v62 + v66);
      if (v67 == 11) {
        break;
      }
      if (v67 == 19)
      {
        if (v65 < 7)
        {
          int v69 = 0;
        }

        else
        {
          else {
            int v69 = 0;
          }
          if (v65 >= 9)
          {
            uint64_t v74 = *(unsigned __int16 *)((char *)&v59[v61 + 3] + v63);
            if (v74)
            {
              BOOL v75 = *(unsigned int *)((char *)&v59[v61 + 1] + v62 + v74);
LABEL_136:
              *(_DWORD *)(a1 + 4LL * v69 + 1312) = v75;
              *(_DWORD *)(a1 + 120) |= 0x10000 << v69;
              goto LABEL_137;
            }
          }
        }

        BOOL v75 = 0;
        goto LABEL_136;
      }

      if (v67 == 12)
      {
        if (v65 < 7)
        {
          int v68 = 0LL;
        }

        else
        {
          else {
            int v68 = 0LL;
          }
          if (v65 >= 9)
          {
            uint64_t v70 = *(unsigned __int16 *)((char *)&v59[v61 + 3] + v63);
            if (v70)
            {
              uint64_t v71 = *(unsigned int *)((char *)&v59[v61 + 1] + v62 + v70);
              goto LABEL_123;
            }
          }
        }

        uint64_t v71 = 0;
LABEL_123:
        *(_DWORD *)(a1 + 4 * v68 + 1184) = v71;
LABEL_130:
        *(_DWORD *)(a1 + 108) |= 1LL << v68;
      }

LABEL_28:
  uint64_t result = sub_B2C0((void *)a1, v11, *(void *)(*(void *)(v11 + 8) + 64LL), (_DWORD *)(a1 + 4856));
  uint64_t v16 = result;
  if (result == *(_DWORD **)(a1 + 2688))
  {
    *(int8x8_t *)(a1 + 2940) = vand_s8(*(int8x8_t *)(a1 + 2940), (int8x8_t)0xFFFFFFFDFFFFFFFELL);
  }

  else if (result)
  {
    uint64_t v17 = (char *)result + result[10];
    if (!*((_DWORD *)v17 + 389)) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(void, char *))(**(void **)(a1 + 3992) + 80LL))( *(void *)(a1 + 3992),  v17 + 528);
    }
  }

          LODWORD(v26) = 0;
          goto LABEL_79;
        }
      }

      uint64_t v19 = v17[4];
      if (v17[4]) {
        LODWORD(v19) = *(int *)((char *)v16 + v19);
      }
      int v20 = &a2[(v13 * v19)];
LABEL_15:
      int v21 = v17[3];
      if (v21)
      {
        uint64_t v22 = *(int *)((char *)v16 + v21);
        if (a4) {
          goto LABEL_21;
        }
      }

      else
      {
        uint64_t v22 = 0;
        if (a4) {
          goto LABEL_21;
        }
      }

      goto LABEL_23;
    }

LABEL_34:
  if ((v37 & 1) == 0) {
    goto LABEL_39;
  }
  uint64_t result = sub_B2C0((void *)a1, v11, *(void *)(*(void *)(v11 + 8) + 72LL), (_DWORD *)(a1 + 4864));
  uint64_t v16 = result;
  if (result == *(_DWORD **)(a1 + 2688))
  {
    *(int8x8_t *)(a1 + 2940) = vand_s8(*(int8x8_t *)(a1 + 2940), (int8x8_t)0xFFFFFFF7FFFFFFFBLL);
LABEL_39:
    if (!v16) {
      return result;
    }
    goto LABEL_40;
  }

  if (!result) {
    return result;
  }
  uint64_t result = (_DWORD *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 3992) + 88LL))( *(void *)(a1 + 3992),  (uint64_t)result + result[10] + 528);
LABEL_40:
  if (v16 != *(_DWORD **)(a1 + 2688))
  {
    int v18 = (void *)((char *)v16 + v16[10] + 528);
    if (((*(uint64_t (**)(void, void))(**(void **)(a1 + 3992) + 64LL))(*(void *)(a1 + 3992), *v18) & 1) == 0
      && ((*(uint64_t (**)(void, void))(**(void **)(a1 + 3992) + 72LL))(*(void *)(a1 + 3992), *v18) & 1) == 0)
    {
      (*(void (**)(void, void *))(**(void **)(a1 + 3992) + 96LL))(*(void *)(a1 + 3992), v18);
    }

    if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 3992) + 64LL))( *(void *)(a1 + 3992),  *v18))
    {
      *(_DWORD *)(a1 + 2392) |= 0x800u;
    }

    uint64_t result = (_DWORD *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 3992) + 72LL))( *(void *)(a1 + 3992),  *v18);
    if ((_DWORD)result) {
      *(_DWORD *)(a1 + 2392) |= 0x1000u;
    }
  }

  return result;
}

              if (v36 >= 9)
              {
                if (*(_WORD *)&v31[v27 + 12 + v34]) {
                  int v38 = *(_DWORD *)&v31[v27 + 4 + *(unsigned __int16 *)&v31[v27 + 12 + v34] + v32];
                }
                else {
                  int v38 = 0;
                }
                int v39 = v38 + v28;
LABEL_53:
                __int128 v44 = &v31[v27];
                int v45 = *(unsigned __int16 *)&v44[v34 + 10];
                if (v45) {
                  __int128 v40 = *(unsigned int *)&v44[v45 + 4 + v32];
                }
                else {
                  __int128 v40 = 0LL;
                }
                goto LABEL_39;
              }

              int v39 = v28;
              if (v36 >= 7) {
                goto LABEL_53;
              }
            }

            __int128 v40 = 0LL;
            int v39 = v28;
LABEL_39:
            *(_DWORD *)&v10[4 * v40 + 164] = v39;
LABEL_40:
            v27 += 4LL;
          }

          while (4 * v26 != v27);
        }

        sub_6682C(*(void *)(v11 + 72), *((int **)v10 + 9), *((int **)v10 + 10), (int *)v10 + 67, &v86, &v85);
        float v59 = *((_DWORD *)v10 + 66);
        if (v59 != -1)
        {
          float v60 = (int *)*((void *)v10 + 5);
          char v61 = (unsigned __int16 *)((char *)v60 - *v60);
          if (*v61 >= 0xFu && (int v62 = v61[7]) != 0) {
            int v63 = *(unsigned int *)((char *)v60 + v62) >> 2;
          }
          else {
            int v63 = 0;
          }
          *((_DWORD *)v10 + 66) = v63 + v59;
        }

        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v10;
        int v64 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v64 + 16LL))(v64);
        if ((result & 1) == 0)
        {
          int v65 = *(void *)(*(void *)(a1 + 32) + 8LL);
          uint64_t result = *(void *)(v65 + 24);
          if (result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
            int v65 = *(void *)(*(void *)(a1 + 32) + 8LL);
          }

          *(void *)(v65 + 24) = 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t sub_B164(uint64_t a1, _OWORD *__s1)
{
  uint64_t v4 = *(_DWORD **)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = 0LL;
    int v6 = *(_DWORD *)__s1;
    int v7 = *(_DWORD **)a1;
    while (1)
    {
      int v8 = v5;
      uint64_t v5 = v7;
      if (v6 == *v7)
      {
        uint64_t v9 = *((unsigned int *)__s1 + 1);
      }

      int v7 = (_DWORD *)*((void *)v5 + 14);
      if (!v7) {
        goto LABEL_7;
      }
    }

    if (v5 == v4)
    {
      uint64_t v5 = v4;
    }

    else
    {
      *((void *)v8 + 14) = *((void *)v5 + 14);
      *((void *)v5 + 14) = v4;
      *(void *)a1 = v5;
    }
  }

  else
  {
LABEL_7:
    uint64_t v5 = operator new(0x78uLL);
    uint64_t v10 = (*(uint64_t (**)(void, _OWORD *))(**(void **)(a1 + 8) + 16LL))(*(void *)(a1 + 8), __s1);
    __int128 v11 = __s1[5];
    *((_OWORD *)v5 + 4) = __s1[4];
    *((_OWORD *)v5 + 5) = v11;
    v5[24] = *((_DWORD *)__s1 + 24);
    __int128 v12 = __s1[1];
    *(_OWORD *)uint64_t v5 = *__s1;
    *((_OWORD *)v5 + 1) = v12;
    __int128 v13 = __s1[3];
    *((_OWORD *)v5 + 2) = __s1[2];
    *((_OWORD *)v5 + 3) = v13;
    uint64_t v14 = *(_DWORD **)a1;
    *((void *)v5 + 13) = v10;
    *((void *)v5 + 14) = v14;
    *(void *)a1 = v5;
    unsigned int v15 = *(_DWORD *)(a1 + 16);
    LODWORD(v14) = *(_DWORD *)(a1 + 20) + 1;
    *(_DWORD *)(a1 + 20) = (_DWORD)v14;
    if (v14 > v15)
    {
      uint64_t v16 = v5;
      do
      {
        uint64_t v17 = v16;
        uint64_t v16 = v5;
        uint64_t v5 = (_DWORD *)*((void *)v5 + 14);
      }

      while (v5);
      v17[14] = 0LL;
      (*(void (**)(void, void))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8), v16[13]);
      operator delete(v16);
      --*(_DWORD *)(a1 + 20);
      uint64_t v5 = *(_DWORD **)a1;
    }
  }

  return *((void *)v5 + 13);
}

_DWORD *sub_B2C0(void *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (!a3) {
    return 0LL;
  }
  sub_132A0((void *)a3);
  int v8 = *(_DWORD *)(*(void *)(a3 + 32) + 256LL);
  uint64_t result = (_DWORD *)a1[336];
  if (result)
  {
    if (a1[6] == a2) {
      return result;
    }
    uint64_t v10 = result[2];
    if ((_DWORD)v10)
    {
      __int128 v11 = (_DWORD *)((char *)result + result[4]);
      do
      {
        int v12 = *v11;
        v11 += 2;
        if (v12 == v8) {
          return 0LL;
        }
      }

      while (--v10);
    }
  }

  uint64_t result = (_DWORD *)a1[598];
  if (result && !result[1])
  {
    if (*(_DWORD *)(a3 + 56) == *a4) {
      return result;
    }
    uint64_t v14 = result[2];
    if ((_DWORD)v14)
    {
      unsigned int v15 = (_DWORD *)((char *)result + result[4]);
      do
      {
        int v16 = *v15;
        v15 += 2;
        if (v16 == v8) {
          return 0LL;
        }
      }

      while (--v14);
    }
  }

  uint64_t v13 = a1[599];
  if (!v13 || *(_DWORD *)(v13 + 4)) {
    return 0LL;
  }
  if (*(_DWORD *)(a3 + 56) == a4[1]) {
    return (_DWORD *)a1[599];
  }
  else {
    return 0LL;
  }
}

double sub_B3B8(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 248) = &off_79228;
  uint64_t v2 = a2 + 248;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(void *)(a2 + 200) = &off_793E0;
  *(void *)(a2 + 208) = a1;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(void *)(a2 + 256) = a1;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(void *)(a2 + 296) = a2 + 248;
  *(void *)(a2 + 304) = 8LL;
  *(void *)(a2 + 312) = 0LL;
  *(void *)(a2 + 320) = &off_79280;
  *(void *)(a2 + 328) = a1;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(void *)(a2 + 368) = a2 + 320;
  *(void *)(a2 + 376) = 8LL;
  *(void *)(a2 + 384) = 0LL;
  *(void *)(a2 + 392) = &off_79388;
  *(void *)(a2 + 400) = a1;
  *(_OWORD *)(a2 + 408) = 0u;
  *(_OWORD *)(a2 + 424) = 0u;
  *(void *)(a2 + 440) = a2 + 392;
  *(void *)(a2 + 448) = 8LL;
  *(_DWORD *)(a2 + 464) = 0;
  *(void *)(a2 + 576) = off_7C308();
  uint64_t v3 = operator new(0x28uLL);
  *(void *)(v2 - 216) = v3;
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  *((void *)v3 + 4) = 0LL;
  uint64_t v4 = operator new(8uLL);
  *(void *)(v2 - 208) = v4;
  *uint64_t v4 = 0LL;
  *(void *)(v2 + 208) = 0LL;
  double result = 0.0;
  *(_OWORD *)(v2 + 220) = 0u;
  *(_OWORD *)(v2 + 236) = 0u;
  *(_OWORD *)(v2 + 252) = 0u;
  *(_OWORD *)(v2 + 268) = 0u;
  *(_OWORD *)(v2 + 284) = 0u;
  *(_OWORD *)(v2 + 300) = 0u;
  *(void *)(v2 + 316) = 0LL;
  return result;
}

void sub_B4C4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 32);
    if (v3) {
      operator delete(v3);
    }
    *(void *)(a2 + 32) = 0LL;
    uint64_t v4 = *(void **)(a2 + 40);
    if (v4) {
      operator delete(v4);
    }
    *(void *)(a2 + 40) = 0LL;
    uint64_t v5 = *(void *)(a2 + 240);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    *(void *)(a2 + 240) = 0LL;
    uint64_t v6 = *(void *)(a2 + 576);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 16LL))(v6);
    }
    *(void *)(a2 + 576) = 0LL;
    for (uint64_t i = *(void *)(a2 + 432); i; *(void *)(a2 + 432) = i)
    {
      uint64_t v8 = *(void *)(i + 72);
      uint64_t i = *(void *)(i + 80);
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 440) + 24LL))(*(void *)(a2 + 440), v8);
      uint64_t v9 = *(void **)(a2 + 432);
      if (v9) {
        operator delete(v9);
      }
    }

    sub_B574(a2 + 360);
    sub_B5C4(a2 + 288);
  }
}

uint64_t sub_B574(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    do
    {
      uint64_t v3 = v2[13];
      uint64_t v2 = (void *)v2[14];
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8), v3);
      if (*(void *)a1) {
        operator delete(*(void **)a1);
      }
      *(void *)a1 = v2;
    }

    while (v2);
  }

  return a1;
}

uint64_t sub_B5C4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    do
    {
      uint64_t v3 = v2[10];
      uint64_t v2 = (void *)v2[11];
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8), v3);
      if (*(void *)a1) {
        operator delete(*(void **)a1);
      }
      *(void *)a1 = v2;
    }

    while (v2);
  }

  return a1;
}

uint64_t sub_B614(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  if (*(void *)(result + 2688)) {
    double result = sub_26240(result, *(void *)(result + 3968));
  }
  if (a2)
  {
    int v4 = *(unsigned __int16 *)(*a2 + 180LL);
    *(_DWORD *)(v3 + 104) = *(unsigned __int16 *)(*a2 + 178LL);
    *(_DWORD *)(v3 + 108) = v4;
    __int128 v5 = *(_OWORD *)(a2 + 19);
    __int128 v6 = *(_OWORD *)(a2 + 21);
    __int128 v7 = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(v3 + 2864) = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(v3 + 2912) = v7;
    *(_OWORD *)(v3 + 2896) = v6;
    *(_OWORD *)(v3 + 2880) = v5;
    *(_OWORD *)(v3 + 2848) = *(_OWORD *)(a2 + 15);
    *(void *)(v3 + 2928) = a2[6];
    ++*(_DWORD *)(v3 + 2516);
    *(_DWORD *)(v3 + 2984) |= 2u;
    *(_DWORD *)(v3 + 836) |= 0x80u;
    uint64_t v8 = *(_DWORD **)(v3 + 3968);
    uint64_t v9 = *a2;
    double result = (*(uint64_t (**)(_DWORD *, void))(*(void *)v8 + 104LL))(v8, *a2);
    if (*(_DWORD *)(*a2 + 192LL)) {
      int v10 = 16;
    }
    else {
      int v10 = 32;
    }
    v8[7] = (**(_DWORD **)(v3 + 32) & v10) != 0;
    v8[8] = *(_DWORD *)(v9 + 200);
    *(_DWORD *)(v3 + 832) |= 0x40000000u;
  }

  return result;
}

uint64_t sub_B718()
{
  return 0LL;
}

uint64_t sub_B720( uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t **a10)
{
  uint64_t v10 = a7;
  uint64_t v16 = *(void *)(a1 + 24);
  if (a10)
  {
    _ZF = (a6 - 6401) < 2 || (_DWORD)a6 == 34041;
    if (_ZF || (_DWORD)a6 == 35056) {
      return 0LL;
    }
LABEL_17:
    uint64_t v20 = *(unsigned __int16 *)(**(void **)(a1 + 56) + 176LL) - 36064;
    goto LABEL_19;
  }

  uint64_t v20 = 8LL;
  if ((int)a6 > 34040)
  {
    if ((_DWORD)a6 == 34041) {
      goto LABEL_19;
    }
    int v21 = 35056;
LABEL_16:
    if ((_DWORD)a6 == v21) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }

  if ((_DWORD)a6 != 6401)
  {
    int v21 = 6402;
    goto LABEL_16;
  }

  uint64_t v20 = 9LL;
LABEL_19:
  uint64_t v22 = *(void **)(a1 + 56);
  uint64_t v23 = *v22;
  uint64_t v24 = *(void **)(v22[1] + 8 * v20);
  int v25 = *(_DWORD *)(*v22 + 192LL);
  int v26 = **(_DWORD **)(a1 + 32);
  if (v25) {
    int v27 = 16;
  }
  else {
    int v27 = 32;
  }
  if ((v26 & v27) != 0)
  {
    char v28 = 1;
  }

  else if (v26)
  {
    char v28 = 0;
  }

  else
  {
    char v28 = *(_BYTE *)(*v24 + 24LL) & 1;
  }

  BOOL v29 = (_DWORD *)(v23 + 16 * v20);
  if ((a6 - 6401) < 2 || (_DWORD)a6 == 35056 || (_DWORD)a6 == 34041)
  {
    if (v26) {
      char v28 = *((_BYTE *)v24 + 386) != 0;
    }
    else {
      char v28 = 0;
    }
  }

  unsigned int v74 = v29[1];
  uint64_t v75 = v29[2];
  int v69 = v29[3];
  char v70 = v28;
  uint64_t v30 = *v24;
  if (v24[23])
  {
    sub_19544((uint64_t)v24, a1);
    uint64_t v10 = a7;
    uint64_t v23 = **(void **)(a1 + 56);
  }

  int v32 = *(_DWORD *)(v23 + 196);
  if ((*(_WORD *)*v24 & 0x800) != 0)
  {
    unsigned int v33 = *(_DWORD *)(*v24 + 100LL);
    if ((~v33 & 3) != 0) {
      int v34 = (v33 >> 2) & 1;
    }
    else {
      int v34 = (v33 >> 2) & 1 | 2;
    }
    int v68 = v34;
  }

  else
  {
    int v68 = 0;
  }

  if (a9 == 2) {
    uint64_t v35 = 0LL;
  }
  else {
    uint64_t v35 = v16 + 16176;
  }
  unsigned int v71 = v10;
  gpusPixelSettings(a6, v10, a4, a5, v99, &v98, &v97, v35, 3);
  if (v32 == 35453 || v32 == 35451)
  {
    uint64_t v36 = v30 + 480LL * v74 + 32 * v75;
    int v37 = *(unsigned __int16 *)(v36 + 268);
    else {
      uint64_t v38 = (v37 - a3);
    }
    int v39 = a2;
    int v40 = a4 + a2;
    int v41 = *(unsigned __int16 *)(v36 + 270);
  }

  else
  {
    uint64_t v42 = v30 + 480LL * v74 + 32 * v75;
    int v43 = *(unsigned __int16 *)(v42 + 270);
    else {
      uint64_t v38 = (v43 - a3);
    }
    int v39 = a2;
    int v40 = a4 + a2;
    int v41 = *(unsigned __int16 *)(v42 + 268);
  }

  BOOL v44 = v40 > v41;
  LODWORD(v45) = v41 - v39;
  if (v44) {
    uint64_t v45 = v45;
  }
  else {
    uint64_t v45 = a4;
  }
  uint64_t v66 = v45;
  uint64_t v67 = v38;
  int v73 = (char *)(a8 + v97);
  if (a10)
  {
    uint64_t v65 = **a10;
    unint64_t v47 = v98;
    int v48 = v99[0] % v98;
    int v49 = off_7C3A8();
    uint64_t GPUVirtualAddress = IOAccelResourceGetGPUVirtualAddress(*a10[2]);
    uint64_t v51 = off_7C380(0LL, 1LL);
    if (!v48)
    {
      if (v49)
      {
        if (!((unint64_t)&v73[-v65] % v47) && ((v51 - 1) & (unint64_t)&v73[GPUVirtualAddress - v65]) == 0)
        {
          sub_6E8F0((uint64_t)v87, (uint64_t)v24, v74, v75, v69, 0, 0, 0, 0, 0LL);
          LOBYTE(v88) = v70;
          int v54 = v98;
          int v53 = v99[0];
          v77[0] = 0LL;
          if ((_DWORD)a6 == 6408 && v71 == 5121)
          {
            uint64_t v55 = off_7C340(1LL, 5121LL, 32856LL, 0LL, v77, 0LL, 0LL, 0LL);
          }

          else if ((_DWORD)a6 == 6408 && v71 == 5124)
          {
            uint64_t v55 = off_7C340(1LL, 5124LL, 36226LL, 0LL, v77, 0LL, 0LL, 0LL);
          }

          else
          {
            if ((_DWORD)a6 != 6408 || v71 != 5125)
            {
              _ZF = (_DWORD)a6 == 6408;
              uint64_t v58 = v66;
              uint64_t v57 = v67;
              if (_ZF && v71 == 5126)
              {
                uint64_t v56 = off_7C340(1LL, 5126LL, 34836LL, 0LL, v77, 0LL, 0LL, 0LL);
              }

              else
              {
                int v64 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL)
                                 + 8LL * (*(unsigned __int16 *)(**(void **)(a1 + 56) + 176LL) - 36064));
                xmmword_7C350(*(unsigned __int16 *)(*v64 + 192LL));
                uint64_t v56 = v64[49];
              }

              goto LABEL_80;
            }

            uint64_t v55 = off_7C340(1LL, 5125LL, 36208LL, 0LL, v77, 0LL, 0LL, 0LL);
          }

          uint64_t v56 = v55;
          uint64_t v58 = v66;
          uint64_t v57 = v67;
LABEL_80:
          uint64_t v59 = IOAccelResourceGetGPUVirtualAddress(*a10[2]);
          sub_6E1B0( (uint64_t)v84,  v56,  (uint64_t)&v73[v59 - v65],  *a10[2],  a10[2][2] + 24,  *(_DWORD *)(a10[2][1] + 256),  v58,  v57,  (v53 / v54),  1,  *(_DWORD *)(v56 + 84),  1,  0,  0,  0LL,  0LL);
          v77[0] = 0LL;
          v77[1] = v58 | (v57 << 32);
          char v78 = 0;
          uint64_t v79 = 0x260000002600LL;
          int v80 = 1;
          char v81 = 0;
          __asm { FMOV            V0.2S, #1.0 }

          uint64_t v82 = _D0;
          char v83 = 0;
          sub_6DE0C(a1, (uint64_t)v87, (uint64_t)v84, (uint64_t)v77);
          goto LABEL_81;
        }
      }
    }
  }

  sub_132A0(v24);
  sub_21FF0((void *)a1, v24[3], 0);
  v84[0] = a6;
  v84[1] = v71;
  uint64_t v85 = v99[0];
  uint64_t v86 = sub_18014(a6, v71, v99[0], v67);
  int v90 = v67;
  int v91 = 1;
  v87[0] = a2;
  v87[1] = a3;
  int v89 = v66;
  int v88 = v69;
  unsigned int v92 = v74;
  int v93 = v75;
  char v94 = v70;
  int v95 = v32 - 35450;
  int v96 = v68;
  sub_10954((uint64_t)v24, *(void *)(a1 + 16), v73, v84, (uint64_t)v87);
LABEL_81:
  *(void *)(a1 + 4904) |= 0x4000uLL;
  return 1LL;
}

uint64_t sub_BD94(uint64_t result, int a2)
{
  uint64_t v2 = result;
  if ((a2 & 0x40000000) != 0)
  {
    *(_DWORD *)(result + 2984) |= 0x11u;
    *(_DWORD *)(result + 836) |= 0x10C04200u;
    if ((a2 & 0x4000000) == 0)
    {
LABEL_3:
      if ((a2 & 0x100000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((a2 & 0x4000000) == 0)
  {
    goto LABEL_3;
  }

  *(_DWORD *)(result + 2984) |= 0x10u;
  if ((a2 & 0x100000) == 0)
  {
LABEL_4:
    if ((a2 & 0x80000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    *(_DWORD *)(result + 2984) |= 4u;
    if ((a2 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }

LABEL_9:
  *(_DWORD *)(result + 2984) |= 8u;
  if ((a2 & 0x80000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((a2 & 0x40000) == 0) {
    goto LABEL_16;
  }
LABEL_11:
  __int128 v4 = *(_OWORD *)(result + 3368);
  uint64_t v5 = *(void *)(result + 3384);
  DWORD2(v4) = *(_DWORD *)(*(void *)(result + 24) + 13064LL);
  if (*(void *)(result + 3368) != (void)v4 || *(void *)(result + 3376) != *((void *)&v4 + 1))
  {
    *(_DWORD *)(result + 2984) |= 2u;
    ++*(_DWORD *)(result + 2516);
    *(_OWORD *)(result + 3368) = v4;
    *(_DWORD *)(result + 3384) = v5;
  }

  bzero((void *)(a1 + 4016), 0x20uLL);
  *(void *)&__int128 v11 = -1LL;
  *((void *)&v11 + 1) = -1LL;
  *(_OWORD *)(a1 + 4096) = v11;
  *(_OWORD *)(a1 + 4080) = v11;
  *(_OWORD *)(a1 + 4064) = v11;
  *(_OWORD *)(a1 + 4048) = v11;
  *(_OWORD *)(a1 + 4432) = 0u;
  *(_OWORD *)(a1 + 4448) = 0u;
  *(_OWORD *)(a1 + 4136) = 0u;
  *(_OWORD *)(a1 + 4152) = 0u;
  *(_DWORD *)(a1 + 4168) = 0;
  *(void *)(a1 + 2536) = qword_7C230(a1);
  int v12 = operator new(0x18uLL);
  uint64_t v13 = 0LL;
  v12[1] = 0LL;
  *((_DWORD *)v12 + 4) = -1;
  *(void *)(a1 + 3952) = v12;
  do
  {
    int v12 = (void *)off_7C318(v12);
    *(void *)(a1 + 4176 + v13) = v12;
    v13 += 8LL;
  }

  while (v13 != 256);
  *(_OWORD *)(a1 + 4744) = 0u;
  *(_BYTE *)(v2 + 28) = 1;
  *(void *)(a1 + 4768) = 0LL;
  *(_BYTE *)(v2 + 44) = 1;
  *(void *)uint64_t v5 = 0LL;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_DWORD *)(v5 + 24) = 0;
  *(_OWORD *)(a1 + 4816) = 0u;
  *(_OWORD *)(a1 + 4832) = 0u;
  *(void *)(a1 + 4888) = 0LL;
  *(_OWORD *)(a1 + 4856) = 0u;
  *(_OWORD *)(a1 + 4872) = 0u;
  *(_DWORD *)(a1 + 4896) = 65537;
  *(_DWORD *)(a1 + 4900) = 0;
  *(void *)(a1 + 3960) = off_7C300();
  *(void *)(a1 + 3968) = off_7C328();
  double result = off_7C3B8();
  *(void *)(a1 + 3992) = result;
  *(void *)(a1 + 4848) = 0LL;
  return result;
}

LABEL_16:
  if ((a2 & 0x400) != 0 && *(void *)(result + 2688)) {
    double result = sub_26240(result, *(void *)(result + 3968));
  }
  *(_DWORD *)(v2 + 836) |= 0x80u;
  return result;
}

      v4 |= 1LL << v12;
      v3 += 4LL;
      if (v7 == v3) {
        return v4;
      }
    }

    else {
LABEL_13:
    }
      uint64_t v14 = 0;
    unsigned int v15 = v6 * v14;
LABEL_15:
    *(_DWORD *)(a2 + 4 * v12) = v15;
    goto LABEL_16;
  }

  return 0LL;
}

uint64_t sub_BEAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a2[4];
  *(void *)(v3 + 32) = 0LL;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(void *)a2[5] = 0LL;
  *(_OWORD *)(a2 + 15) = 0u;
  __int128 v4 = (__int128 *)(a2 + 15);
  *(_OWORD *)(a2 + 23) = 0u;
  *(_OWORD *)(a2 + 21) = 0u;
  *(_OWORD *)(a2 + 19) = 0u;
  *(_OWORD *)(a2 + 17) = 0u;
  *(_BYTE *)(a2[1] + 80) = 0;
  a2[57] = 0LL;
  unsigned int v5 = *(unsigned __int8 *)(*a2 + 182);
  if (v5 >= 2)
  {
    if (v5 == 2)
    {
      int v6 = 512;
    }

    else
    {
      int v6 = 1024;
      if (v5 >= 5)
      {
        BOOL v7 = dword_7C428 < v5 || v5 > 8;
        if (v7) {
          int v6 = 1024;
        }
        else {
          int v6 = 2048;
        }
      }
    }
  }

  else
  {
    int v6 = 256;
  }

  *(_DWORD *)(a2[4] + 32) = *(_DWORD *)(a2[4] + 32) & 0xFFFFF0FF | v6;
  *(_DWORD *)(a2[4] + 32) = *(_DWORD *)(a2[4] + 32) & 0xFFFF0FFF | (((*(_DWORD *)(a2[4] + 32) >> 8) & 0xF) << 12);
  a2[24] = a2[24] & 0xFFFFFFF0FFFFFFFFLL | ((unint64_t)(BYTE1(*(_DWORD *)(a2[4] + 32)) & 0xF) << 32);
  *((_DWORD *)a2 + 116) = 0;
  if (xmmword_7C450 < *(unsigned __int16 *)(*a2 + 178)
    || xmmword_7C450 < *(unsigned __int16 *)(*a2 + 180))
  {
    goto LABEL_14;
  }

  unint64_t v11 = 0LL;
  int v12 = 0;
  BOOL v13 = 0;
  unint64_t v93 = dword_7C3F8;
  char v94 = (__int128 *)(a2 + 15);
  unint64_t v89 = dword_7C3F4;
  uint64_t v14 = 8LL;
  do
  {
    uint64_t v15 = *v2;
    if (((*(_DWORD *)(*v2 + 200) >> v11) & 1) != 0 && v11 <= 7)
    {
      uint64_t v16 = *(unsigned int **)(v2[1] + 8 * v11);
      if (v16)
      {
        xmmword_7C350(*(unsigned __int16 *)(*(void *)v16 + 192LL));
        if ((*(_BYTE *)(*((void *)v16 + 49) + 64LL) & 2) == 0
          || (unsigned int v17 = v16[92]) == 0
          || v17 <= 2 && (*(_BYTE *)(*(void *)v16 + 24LL) & 8) != 0 && (sub_17940(v16) & 1) == 0
          || (int v18 = (uint64_t (*)(uint64_t))qword_7C3B0,
              uint64_t v19 = sub_18314((uint64_t *)v16, *(_DWORD *)(v15 + v14), 0),
              (v18(v19) & 1) == 0))
        {
          *(_BYTE *)(v2[1] + 81) = 1;
          __int128 v4 = v94;
          goto LABEL_16;
        }

        if (*(_WORD *)(*v2 + 176) && v11 == *(unsigned __int16 *)(*v2 + 176) - 36064)
        {
          xmmword_7C350(*(unsigned __int16 *)(*(void *)v16 + 192LL));
          *(_WORD *)(v2[1] + 84) = *(_DWORD *)(*((void *)v16 + 49) + 24LL);
          xmmword_7C350(*(unsigned __int16 *)(*(void *)v16 + 192LL));
          *(_WORD *)(v2[1] + 86) = *(_DWORD *)(*((void *)v16 + 49) + 28LL);
        }

        xmmword_7C350(*(unsigned __int16 *)(*(void *)v16 + 192LL));
        BOOL v13 = *(_DWORD *)(*((void *)v16 + 49) + 84LL) != 0;
        int v12 = 1;
      }
    }

    ++v11;
    v14 += 16LL;
  }

  while (v11 != 10);
  int v86 = v12;
  unint64_t v20 = 0LL;
  int v21 = 0;
  __int16 v99 = v2;
  unsigned __int8 v100 = 0;
  int v22 = 0;
  *(_BYTE *)(v2[1] + 82) = v13;
  unsigned int v23 = 32 - __clz(dword_7C488 - 1);
  else {
    char v24 = 0;
  }
  char v95 = v24;
  __int128 v4 = v94;
  unint64_t v25 = v93 - 1;
  while (1)
  {
    if (*(_WORD *)(*v2 + 2LL * v22 + 160))
    {
      uint64_t v101 = *(unsigned __int16 *)(*v2 + 2LL * v22 + 160) - 36064;
      int v26 = *(void **)(v2[1] + 8LL * v101);
      if (v26) {
        break;
      }
    }

LABEL_86:
    BOOL v7 = v22++ < 7;
    if (!v7)
    {
      v2[24] = v2[24] & 0xFFFF07FFFFFF0000LL | ((unint64_t)(v100 & 0x1F) << 43) | ~(-1 << v100);
      unsigned int v57 = off_7C3E0(v20);
      else {
        unsigned int v58 = v57;
      }
      unsigned int v59 = v58 >> v95;
      if (v59 <= dword_7C484) {
        LOBYTE(v59) = dword_7C484;
      }
      *(_BYTE *)(v2[4] + 34) = v59;
      v2[24] = v2[24] & 0xFFFFF80FFFFFFFFFLL | ((unint64_t)(v59 & 0x7F) << 36);
      uint64_t v8 = v2[1];
      float v60 = *(void **)(v8 + 64);
      if (v60)
      {
        xmmword_7C350(*(unsigned __int16 *)(*v60 + 192LL));
        uint64_t v61 = v60[49];
        if ((*(_BYTE *)(v61 + 64) & 4) == 0)
        {
          printf("%s: depth buffer format not supported");
LABEL_104:
          putchar(10);
          goto LABEL_14;
        }

        *((_DWORD *)v2 + 116) = *(_DWORD *)(v61 + 92);
        uint64_t v8 = v2[1];
      }

      int v62 = *(void **)(v8 + 72);
      if (v62)
      {
        int v63 = xmmword_7C350(*(unsigned __int16 *)(*v62 + 192LL));
        xmmword_7C350(*(unsigned __int16 *)(*v62 + 192LL));
        uint64_t v64 = 49LL;
        if (v63) {
          uint64_t v64 = 50LL;
        }
        if ((*(_BYTE *)(v62[v64] + 64LL) & 8) == 0)
        {
          printf("%s: stencil buffer format not supported");
          goto LABEL_104;
        }

        BOOL v65 = v86 != 0;
      }

      else
      {
        BOOL v65 = v86 != 0;
        if (!v86 && !v60) {
          goto LABEL_15;
        }
      }

      if ((*((_BYTE *)v2 + 197) & 0xF8) == 0 && off_7C2A8 && !HIDWORD(xmmword_7C470)) {
        off_7C2A8(v4, 5LL, 0LL, 18LL, 1LL);
      }
      uint64_t v8 = v2[1];
      if (v60 && v62 && v62 != v60) {
        goto LABEL_15;
      }
      *(_BYTE *)(v8 + 81) = 0;
      int v66 = !v65;
      if (!v60) {
        int v66 = 0;
      }
      *((_DWORD *)v2 + 115) = v66;
      int v67 = *(unsigned __int16 *)(*v2 + 178);
      int v68 = *(unsigned __int16 *)(*v2 + 180);
      uint64_t v69 = v2[4];
      if (!(byte_7C005 | byte_7C006))
      {
        int v70 = (*(_DWORD *)(v69 + 32) >> 8) & 0xF;
        goto LABEL_124;
      }

      int v67 = (v67 + 15) & 0x1FFF0;
      int v70 = (*(_DWORD *)(v69 + 32) >> 8) & 0xF;
      if (v70 != 4)
      {
        if (v70 != 8)
        {
LABEL_124:
          *((_DWORD *)v2 + 119) = v70;
          unsigned int v71 = v2 + 60;
          unsigned int v72 = v70 - 2;
          if ((v70 - 2) > 6)
          {
            int v73 = &unk_70E9C;
            goto LABEL_127;
          }

LABEL_125:
          int v73 = *(&off_79E10 + v72);
LABEL_127:
          memcpy(v71, v73, (8 * v70));
          *((_DWORD *)v2 + 117) = v67;
          *((_DWORD *)v2 + 118) = v68;
          uint64_t v74 = v2[4];
          *((_DWORD *)v2 + 136) = (*(unsigned __int8 *)(v74 + 34) * dword_7C488 + 3) >> 2;
          if (off_7C3D8)
          {
            off_7C3D8();
            uint64_t v74 = v2[4];
          }

          *(_BYTE *)(v2[5] + 4) = *(_DWORD *)(v74 + 32) & ~*(_BYTE *)(v2[5] + 3);
          uint64_t v76 = v2[4];
          uint64_t v75 = (uint64_t *)v2[5];
          *(void *)&__int128 v107 = 0x1000000009LL;
          *((void *)&v107 + 1) = 0x43200000109LL;
          uint64_t v108 = *v75;
          int v109 = 3888;
          uint64_t v77 = *(void *)(v76 + 32);
          __int128 v78 = *(_OWORD *)(v76 + 16);
          v110[0] = *(_OWORD *)v76;
          v110[1] = v78;
          uint64_t v111 = v77;
          int v113 = v110;
          int v112 = 68;
          uint64_t v79 = sub_CA1C((uint64_t)(v2 + 36), &v107);
          v2[39] = v79;
          if (!v79) {
            goto LABEL_16;
          }
          __int128 v80 = v4[2];
          __int128 v81 = v4[3];
          __int128 v82 = *v4;
          __s1[2] = v4[1];
          __s1[3] = v80;
          __int128 v83 = v4[4];
          __s1[4] = v81;
          __s1[5] = v83;
          __s1[0] = xmmword_701E0;
          __s1[1] = v82;
          int v106 = 68;
          uint64_t v84 = sub_B164((uint64_t)(v2 + 45), __s1);
          v2[48] = v84;
          if (!v84) {
            goto LABEL_16;
          }
          if (!v2[30])
          {
            __int128 v104 = xmmword_701F0;
            uint64_t v85 = sub_305FC(v2 + 25, &v104);
            v2[30] = v85;
            if (!v85) {
              goto LABEL_16;
            }
          }

          return 1LL;
        }

        int v67 = (v67 + 31) & 0x3FFE0;
      }

      int v68 = (v68 + 31) & 0x1FFE0;
      *((_DWORD *)v2 + 119) = v70;
      unsigned int v71 = v2 + 60;
      unsigned int v72 = v70 - 2;
      goto LABEL_125;
    }
  }

  uint64_t v27 = v2[4];
  xmmword_7C350(*(unsigned __int16 *)(*v26 + 192LL));
  uint64_t v28 = *(unsigned int *)(v26[49] + 40LL);
  int v92 = v21;
  BOOL v29 = (unsigned int *)(v27 + 4LL * v22);
  xmmword_7C350(*(unsigned __int16 *)(*v26 + 192LL));
  uint64_t v30 = v26[49];
  unsigned int v103 = v28;
  if ((_DWORD)v28 == 3)
  {
    if (*(_DWORD *)(v30 + 84)) {
      *v29 |= 0x100u;
    }
    xmmword_7C350(*(unsigned __int16 *)(*v26 + 192LL));
    int v31 = *(_DWORD *)(v26[49] + 36LL);
    int v32 = v31;
  }

  else
  {
    int v31 = *(_DWORD *)(v30 + 36);
    int v32 = v31;
    switch((int)v28)
    {
      case 2:
      case 4:
      case 5:
        break;
      case 6:
      case 7:
      case 8:
      case 9:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
        int v32 = 2 * v31;
        break;
      case 10:
      case 11:
      case 12:
      case 18:
        int v32 = 4 * v31;
        break;
      case 19:
      case 20:
      case 21:
      case 22:
        int v32 = 4;
        break;
      default:
        int v32 = 0;
        break;
    }
  }

  int v97 = v31;
  int v33 = v32 + dword_7C48C - 1;
  if ((v33 & -dword_7C48C) == 0) {
    goto LABEL_14;
  }
  int v88 = v22;
  uint64_t v91 = v33 & -dword_7C48C;
  unint64_t v34 = (v20 + v91 - 1) / v93;
  else {
    unint64_t v35 = (v25 + v20) & -(uint64_t)v93;
  }
  *((_DWORD *)v2 + 114) |= 1 << v34;
  unint64_t v90 = v35;
  *BOOL v29 = *v29 & 0xFF807FFF | ((v35 / dword_7C488) << 15);
  uint64_t v102 = v26;
  if (dword_7C44C)
  {
    xmmword_7C350(*(unsigned __int16 *)(*v26 + 192LL));
    uint64_t v36 = *(unsigned int *)(v26[49] + 32LL);
    if ((_DWORD)v36) {
      goto LABEL_57;
    }
    char v37 = v28;
    unint64_t v38 = v93;
LABEL_73:
    unint64_t v20 = v90 + v91;
    if (dword_7C448) {
      BOOL v51 = v20 > v38;
    }
    else {
      BOOL v51 = 0;
    }
    int v52 = !v51;
    if (((v52 | v21) & 1) != 0)
    {
      if (v20 > v89) {
        goto LABEL_14;
      }
      v100 += v36;
      *BOOL v29 = *v29 & 0xFFFFFFE0 | v37 & 0x1F;
      xmmword_7C350(*(unsigned __int16 *)(*v102 + 192LL));
      *BOOL v29 = *v29 & 0xFFFFFF1F | (32 * (*(_DWORD *)(v102[49] + 36LL) & 7));
      xmmword_7C350(*(unsigned __int16 *)(*v102 + 192LL));
      *BOOL v29 = *v29 & 0xFFFF8FFF | ((*(_DWORD *)(v102[49] + 80LL) & 7) << 12);
      off_7C378(v29, v102);
      int v22 = v88;
      *(_DWORD *)(v2[4] + 32) |= (1 << v88);
      int v53 = (unsigned int *)v2[5];
      uint64_t v54 = *v53;
      unint64_t v55 = v54 & 0xFFFFFFFFFFFF0000LL | ((unint64_t)*((unsigned __int8 *)v53 + 4) << 32);
      if (*((_DWORD *)v102 + 92) == 10) {
        int v56 = 3;
      }
      else {
        int v56 = 2;
      }
      *((_BYTE *)v53 + 4) = BYTE4(v55);
      *int v53 = v55 | (unsigned __int16)((v56 << (2 * v88)) | v54);
    }

    else
    {
      unsigned __int8 v100 = 0;
      unint64_t v20 = 0LL;
      *((_DWORD *)v2 + 114) = 0;
      int v21 = 1;
      int v22 = -1;
    }

    goto LABEL_86;
  }

  uint64_t v36 = 1LL;
LABEL_57:
  uint64_t v87 = v29;
  uint64_t v39 = 0LL;
  int v40 = 0;
  char v96 = (v20 + v91 - 1) / v93;
  int v41 = (char *)v2 + v101 + 48;
  LODWORD(v42) = 8 - v100;
  if (v100 <= 8u) {
    uint64_t v42 = v42;
  }
  else {
    uint64_t v42 = 0LL;
  }
  uint64_t v98 = v42;
  uint64_t v43 = 101LL;
  while (v98 != v39)
  {
    uint64_t v44 = (v100 + v39);
    uint64_t v45 = (char *)v4 + 4 * v44;
    *uint64_t v45 = v96;
    uint64_t v46 = (void (*)(_BYTE *, uint64_t, void, void, void))off_7C2A8;
    if (off_7C2A8)
    {
      uint64_t v47 = *((unsigned int *)v102 + 92);
      xmmword_7C350(*(unsigned __int16 *)(*v102 + 192LL));
      uint64_t v2 = v99;
      uint64_t v48 = v47;
      __int128 v4 = v94;
      v46(v45, v48, *(unsigned int *)(v102[49] + 84LL), v103, (*(_DWORD *)(v99[4] + 32) >> 8) & 0xF);
    }

    int v49 = &v2[v44];
    *((_BYTE *)v49 + 56) = v101;
    *((_BYTE *)v49 + 57) = v39;
    *((_BYTE *)v49 + 58) = v40 >> v95;
    *((_DWORD *)v49 + 15) = 0;
    *v41 |= 1 << v44;
    int v50 = v97;
    if (v36 != 1)
    {
      xmmword_7C350(*(unsigned __int16 *)(*v102 + 192LL));
      uint64_t v2 = v99;
      int v50 = *(unsigned __int8 *)(v102[49] + v43);
    }

    switch(v103)
    {
      case 2u:
      case 3u:
      case 4u:
      case 5u:
        break;
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
        v50 *= 2;
        break;
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0x12u:
        v50 *= 4;
        break;
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
        int v50 = 4;
        break;
      default:
        int v50 = 0;
        break;
    }

    v40 += (v50 + dword_7C48C - 1) & -dword_7C48C;
    ++v39;
    v43 += 8LL;
    if (v36 == v39)
    {
      unint64_t v38 = v93;
      int v21 = v92;
      unint64_t v25 = v93 - 1;
      BOOL v29 = v87;
      char v37 = v103;
      goto LABEL_73;
    }
  }

uint64_t sub_CA1C(uint64_t a1, _OWORD *__s1)
{
  __int128 v4 = *(_DWORD **)a1;
  if (*(void *)a1)
  {
    unsigned int v5 = 0LL;
    int v6 = *(_DWORD *)__s1;
    BOOL v7 = *(_DWORD **)a1;
    while (1)
    {
      uint64_t v8 = v5;
      unsigned int v5 = v7;
      if (v6 == *v7)
      {
        uint64_t v9 = *((unsigned int *)__s1 + 1);
      }

      BOOL v7 = (_DWORD *)*((void *)v5 + 11);
      if (!v7) {
        goto LABEL_7;
      }
    }

    if (v5 == v4)
    {
      unsigned int v5 = v4;
    }

    else
    {
      *((void *)v8 + 11) = *((void *)v5 + 11);
      *((void *)v5 + 11) = v4;
      *(void *)a1 = v5;
    }
  }

  else
  {
LABEL_7:
    unsigned int v5 = operator new(0x60uLL);
    uint64_t v10 = (*(uint64_t (**)(void, _OWORD *))(**(void **)(a1 + 8) + 16LL))(*(void *)(a1 + 8), __s1);
    __int128 v11 = __s1[3];
    *((_OWORD *)v5 + 2) = __s1[2];
    *((_OWORD *)v5 + 3) = v11;
    *((_OWORD *)v5 + 4) = __s1[4];
    __int128 v12 = __s1[1];
    *(_OWORD *)unsigned int v5 = *__s1;
    *((_OWORD *)v5 + 1) = v12;
    BOOL v13 = *(_DWORD **)a1;
    *((void *)v5 + 10) = v10;
    *((void *)v5 + 11) = v13;
    *(void *)a1 = v5;
    unsigned int v14 = *(_DWORD *)(a1 + 16);
    LODWORD(v13) = *(_DWORD *)(a1 + 20) + 1;
    *(_DWORD *)(a1 + 20) = (_DWORD)v13;
    if (v13 > v14)
    {
      uint64_t v15 = v5;
      do
      {
        uint64_t v16 = v15;
        uint64_t v15 = v5;
        unsigned int v5 = (_DWORD *)*((void *)v5 + 11);
      }

      while (v5);
      v16[11] = 0LL;
      (*(void (**)(void, void))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8), v15[10]);
      operator delete(v15);
      --*(_DWORD *)(a1 + 20);
      unsigned int v5 = *(_DWORD **)a1;
    }
  }

  return *((void *)v5 + 10);
}

uint64_t sub_CB70(unsigned int a1)
{
  if (a1 <= 4) {
    int v1 = 4;
  }
  else {
    int v1 = a1;
  }
  return 8LL * (1024 << -(char)__clz(v1 - 1));
}

BOOL sub_CB98(uint64_t a1, int a2, unsigned int a3)
{
  if (a3 <= 4) {
    int v3 = 4;
  }
  else {
    int v3 = a3;
  }
  unint64_t v4 = 8LL * (1024 << -(char)__clz(v3 - 1));
  if (a2) {
    uint64_t v5 = 4880LL;
  }
  else {
    uint64_t v5 = 4888LL;
  }
  unint64_t v6 = *(void *)(a1 + v5);
  if (v4 <= v6) {
    return 1LL;
  }
  *(void *)(a1 + v5) = 0LL;
  if (a2) {
    uint64_t v8 = 4LL;
  }
  else {
    uint64_t v8 = 7LL;
  }
  BOOL result = sub_26024(a1, v8, v4, xmmword_7C410, 0LL);
  if (result) {
    unint64_t v10 = v4;
  }
  else {
    unint64_t v10 = v6;
  }
  *(void *)(a1 + v5) = v10;
  return result;
}

uint64_t sub_CC34(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 4880);
  *(void *)(result + 4880) = 0LL;
  if (v2)
  {
    BOOL result = sub_25A80(result, 4LL, v2, xmmword_7C410, 0LL, &v8, 0);
    uint64_t v3 = *(void *)(v1 + 2696);
    *(void *)(v3 + 176) = v9;
    unsigned int v4 = 32 - __clz((v2 >> 15) - 1);
    *(_DWORD *)(v3 + 184) = v2 >> 3;
    *(_DWORD *)(v3 + 188) = v4;
  }

  uint64_t v5 = *(void *)(v1 + 4888);
  *(void *)(v1 + 4888) = 0LL;
  if (v5)
  {
    BOOL result = sub_25A80(v1, 7LL, v5, xmmword_7C410, 0LL, &v8, 0);
    uint64_t v6 = *(void *)(v1 + 2696);
    *(void *)(v6 + 720) = v9;
    *(_DWORD *)(v6 + 728) = v5 >> 3;
    unsigned int v7 = 32 - __clz((v5 >> 15) - 1);
    *(_DWORD *)(v6 + 732) = v7;
  }

  return result;
}

void *sub_CD20(void *a1)
{
  uint64_t v2 = 0LL;
  *a1 = &off_786D0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = (void *)a1[v2 + 2];
    if (v5) {
      malloc_zone_free((malloc_zone_t *)qword_7C218, v5);
    }
    char v3 = 0;
    uint64_t v2 = 1LL;
  }

  while ((v4 & 1) != 0);
  *a1 = off_78770;
  return a1;
}

void sub_CD90(void *__p)
{
  uint64_t v2 = 0LL;
  *__p = &off_786D0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = (void *)__p[v2 + 2];
    if (v5) {
      malloc_zone_free((malloc_zone_t *)qword_7C218, v5);
    }
    char v3 = 0;
    uint64_t v2 = 1LL;
  }

  while ((v4 & 1) != 0);
  operator delete(__p);
}

float sub_CDF4(uint64_t a1, float a2)
{
  float result = (float)(a2 * 256.0) + 4095.0;
  char v3 = *(unint64_t **)(a1 + 24);
  **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFFE000LL | (unint64_t)result;
  *char v3 = *v3 & 0xFFFFFFFFFFFFE000LL | (unint64_t)result;
  return result;
}

uint64_t sub_CE34(uint64_t result, int a2, int a3)
{
  uint64_t v3 = result;
  uint64_t v4 = 0LL;
  BOOL v5 = a2 == 35416 || a3 == 35416;
  if (v5) {
    int v6 = 35416;
  }
  else {
    int v6 = a3;
  }
  if (v5) {
    int v7 = 35416;
  }
  else {
    int v7 = a2;
  }
  *(_BYTE *)(result + 32) = 1;
  int v8 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = v8 & 0xFFBFFFFF;
  if (v7 <= 9986)
  {
    if (v7 != 9729 && v7 != 9985) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v4 = 0x4000000000LL;
    goto LABEL_17;
  }

  if (v7 == 35416)
  {
    *(_DWORD *)(result + 36) = v8 & 0xFF9FFFFF | 0x200000;
    uint64_t v4 = 0x8000000000LL;
    goto LABEL_25;
  }

  if (v7 == 9987) {
    goto LABEL_16;
  }
LABEL_17:
  if ((v7 - 9728) >= 2)
  {
    char v10 = 0;
    else {
      uint64_t v11 = 0x10000000000LL;
    }
    goto LABEL_26;
  }

LABEL_25:
  uint64_t v11 = 0LL;
  *(_BYTE *)(result + 32) = 0;
  char v10 = 1;
LABEL_26:
  __int128 v12 = *(unint64_t **)(result + 16);
  BOOL v13 = *(unint64_t **)(result + 24);
  *__int128 v12 = *v12 & 0xFFFFFF3FFFFFFFFFLL | v4;
  *BOOL v13 = *v13 & 0xFFFFFF3FFFFFFFFFLL | v4;
  *__int128 v12 = *v12 & 0xFFFFFEFFFFFFFFFFLL | v11;
  *BOOL v13 = *v13 & 0xFFFFFEFFFFFFFFFFLL | v11;
  if ((v10 & 1) != 0)
  {
    *v12 &= 0xFFFFFFFFFF801FFFLL;
    *v13 &= 0xFFFFFFFFFF801FFFLL;
    *v12 &= 0xFFFFFFFE007FFFFFLL;
    *v13 &= 0xFFFFFFFE007FFFFFLL;
  }

  else
  {
    float result = (*(uint64_t (**)(uint64_t))(*(void *)result + 80LL))(result);
  }

  if (v6 == 35416)
  {
    *(_DWORD *)(v3 + 36) |= 0x200000u;
    uint64_t v14 = 0x2000000000LL;
  }

  else if (v6 == 9729)
  {
    uint64_t v14 = 0x1000000000LL;
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  uint64_t v15 = *(unint64_t **)(v3 + 24);
  **(void **)(v3 + 16) = **(void **)(v3 + 16) & 0xFFFFFFCFFFFFFFFFLL | v14;
  *uint64_t v15 = *v15 & 0xFFFFFFCFFFFFFFFFLL | v14;
  return result;
}

  if (*(unsigned __int8 *)(*a1 + 208) + a2 <= *(unsigned __int8 *)(*a1 + 208))
  {
    unint64_t v20 = 0LL;
  }

  else
  {
    unint64_t v20 = 0LL;
    do
    {
      v20 += v7 * (unint64_t)(v9 * v10) * v15;
      int v21 = v9 > 1;
      int v22 = v10 > 1;
      if (*((_DWORD *)a1 + 92) == 10)
      {
        int v22 = v10 > 4;
        int v21 = v9 > 4;
        v15 >>= v15 > 4;
      }

      v10 >>= v22;
      v9 >>= v21;
      --a2;
    }

    while (a2);
  }

  else {
    unsigned int v23 = *((unsigned __int8 *)a1 + 384);
  }
  return v20 * v23;
}

      ++v24;
      v27 += 3LL;
    }

    while (v24 < v23);
  }

  sub_2CDF0( *(void *)(a1 + 176),  **(void **)(v3 + 808),  *(void *)(*(void *)(v3 + 808) + 8LL),  *(unsigned int **)(*(void *)(a1 + 8) + 4128LL),  v52);
  int v18 = *(void *)(a1 + 8);
  uint64_t v19 = *(_DWORD *)(v18 + 2996) | 0x22;
LABEL_27:
  *(_DWORD *)(v18 + 2996) = v19;
LABEL_29:
  float result = 1LL;
  if ((v19 & 4) != 0 && dword_7C464)
  {
    uint64_t v30 = *(void **)(v3 + 808);
    int v31 = *(unsigned int *)(v4 + 1460);
    int v32 = *(void *)(v4 + 128);
    if ((_DWORD)v31 != -1) {
      *(_DWORD *)(v32 + 4 * v31) = 0;
    }
    int v33 = *(void *)(v4 + 1464);
    unint64_t v34 = *(unsigned __int8 *)(v33 + 176);
    if (*(_BYTE *)(v33 + 176))
    {
      int v49 = a1;
      int v50 = v4;
      unint64_t v35 = *v30;
      uint64_t v36 = v30[1];
      char v37 = *(void *)(*v30 + 768LL);
      unint64_t v38 = (unsigned int *)(v33 + 308);
      uint64_t v39 = (unsigned __int16 *)(v33 + 184);
      do
      {
        int v40 = *v39;
        if (((v37 >> v40) & 0x10000) != 0)
        {
          int v41 = v35 + 24LL * *v39;
          uint64_t v42 = v32 + 4LL * *((unsigned int *)v39 - 1);
          *(void *)uint64_t v42 = IOAccelResourceGetGPUVirtualAddress(**(void **)(*(void *)(v36 + 8 * v40) + 16LL))
                         + *(void *)v41;
          *(_DWORD *)(v42 + 8) = *(_DWORD *)(v41 + 16);
          uint64_t v43 = *v38;
          if ((_DWORD)v43 != -1)
          {
            uint64_t v44 = *(unsigned int *)(v35 + 24LL * v40 + 8);
            if ((_DWORD)v44 == 1)
            {
              uint64_t v45 = 0;
              LODWORD(v46) = 0;
            }

            else
            {
              uint64_t v47 = __clz(v44 - 1);
              uint64_t v45 = v47 ^ 0x1F;
              uint64_t v46 = (v44 + (1LL << (v47 ^ 0x3F)) - 1) / v44;
            }

            uint64_t v48 = (_DWORD *)(v32 + 4 * v43);
            *uint64_t v48 = v46 - 1;
            v48[1] = v45;
          }
        }

        ++v38;
        v39 += 4;
        --v34;
      }

      while (v34);
      uint64_t v4 = v50;
      int v18 = *(void *)(v49 + 8);
    }

    *(_DWORD *)(v4 + 72) |= 1u;
    *(_DWORD *)(v18 + 2996) |= 0x10u;
    return 1LL;
  }

  return result;
}

uint64_t sub_D000(void **a1, float a2)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[15])(a1);
  if (result <= a2)
  {
    uint64_t v6 = 0x800000000LL;
  }

  else if (result < 2 || a2 <= 1.0)
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    LODWORD(v7) = 0;
    unsigned int v8 = 1;
    do
    {
      v8 *= 2;
      uint64_t v7 = (v7 + 1);
    }

    while (v8 < result && (float)v8 < a2);
    uint64_t v6 = v7 << 33;
  }

  uint64_t v9 = a1[3];
  *a1[2] = *a1[2] & 0xFFFFFFF1FFFFFFFFLL | v6;
  *uint64_t v9 = *v9 & 0xFFFFFFF1FFFFFFFFLL | v6;
  return result;
}

uint64_t sub_D0AC(uint64_t result, int a2)
{
  uint64_t v2 = 0x40000000000LL;
  if (a2 != 33071) {
    uint64_t v2 = 0LL;
  }
  if (a2 == 33648) {
    uint64_t v3 = 0x20000000000LL;
  }
  else {
    uint64_t v3 = v2;
  }
  if (a2 == 37905) {
    uint64_t v4 = 0x80000000000LL;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t v5 = 0x80000000000LL;
  if (a2 != 33069) {
    uint64_t v5 = 0LL;
  }
  if (a2 == 10496) {
    uint64_t v6 = 0xA0000000000LL;
  }
  else {
    uint64_t v6 = v5;
  }
  if (a2 <= 33070) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v4;
  }
  unsigned int v8 = *(unint64_t **)(result + 24);
  **(void **)(result + 16) = **(void **)(result + 16) & 0xFFFFF1FFFFFFFFFFLL | v7;
  *unsigned int v8 = *v8 & 0xFFFFF1FFFFFFFFFFLL | v7;
  return result;
}

uint64_t sub_D130(uint64_t result, int a2)
{
  uint64_t v2 = 0x200000000000LL;
  if (a2 != 33071) {
    uint64_t v2 = 0LL;
  }
  if (a2 == 33648) {
    uint64_t v3 = 0x100000000000LL;
  }
  else {
    uint64_t v3 = v2;
  }
  if (a2 == 37905) {
    uint64_t v4 = 0x400000000000LL;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t v5 = 0x400000000000LL;
  if (a2 != 33069) {
    uint64_t v5 = 0LL;
  }
  if (a2 == 10496) {
    uint64_t v6 = 0x500000000000LL;
  }
  else {
    uint64_t v6 = v5;
  }
  if (a2 <= 33070) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v4;
  }
  unsigned int v8 = *(unint64_t **)(result + 24);
  **(void **)(result + 16) = **(void **)(result + 16) & 0xFFFF8FFFFFFFFFFFLL | v7;
  *unsigned int v8 = *v8 & 0xFFFF8FFFFFFFFFFFLL | v7;
  return result;
}

uint64_t sub_D1B4(uint64_t result, int a2)
{
  uint64_t v2 = 0x200000000000000LL;
  if (a2 != 33071) {
    uint64_t v2 = 0LL;
  }
  if (a2 == 33648) {
    uint64_t v3 = 0x100000000000000LL;
  }
  else {
    uint64_t v3 = v2;
  }
  if (a2 == 37905) {
    uint64_t v4 = 0x400000000000000LL;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t v5 = 0x400000000000000LL;
  if (a2 != 33069) {
    uint64_t v5 = 0LL;
  }
  if (a2 == 10496) {
    uint64_t v6 = 0x500000000000000LL;
  }
  else {
    uint64_t v6 = v5;
  }
  if (a2 <= 33070) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v4;
  }
  **(void **)(result + 16) = **(void **)(result + 16) & 0xF8FFFFFFFFFFFFFFLL | v7;
  return result;
}

uint64_t sub_D228(uint64_t result, int a2)
{
  uint64_t v2 = *(unint64_t **)(result + 24);
  uint64_t v3 = 0x2000000000000LL;
  if (a2) {
    uint64_t v3 = 0LL;
  }
  **(void **)(result + 16) = **(void **)(result + 16) & 0xFFFDFFFFFFFFFFFFLL | v3;
  *uint64_t v2 = *v2 & 0xFFFDFFFFFFFFFFFFLL | v3;
  return result;
}

uint64_t sub_D25C(uint64_t a1, float *a2)
{
  *(_DWORD *)(a1 + 36) = 0;
  if (*((unsigned __int16 *)a2 + 3) == 34894)
  {
    *(_DWORD *)(a1 + 36) = 0x10000;
    int v4 = *((unsigned __int16 *)a2 + 2) | 0x10000;
    *(_DWORD *)(a1 + 36) = v4;
    int v5 = v4 | ((*((_WORD *)a2 + 1) == 9729) << 20);
    int v6 = v5 | 0x20000;
    *(_DWORD *)(a1 + 36) = v5 | 0x20000;
    int v7 = *(unsigned __int16 *)a2;
    switch(*(_WORD *)a2)
    {
      case 0x2700:
        goto LABEL_7;
      case 0x2701:
        goto LABEL_10;
      case 0x2702:
        unsigned int v8 = v5 | 0x60000;
        goto LABEL_11;
      case 0x2703:
        unsigned int v8 = v5 | 0xE0000;
        goto LABEL_11;
      default:
        if (v7 == 9729)
        {
          int v6 = v5;
LABEL_10:
          unsigned int v8 = v6 & 0xFFF3FFFF | 0x80000;
        }

        else
        {
          if (v7 != 9728) {
            break;
          }
          int v6 = v5;
LABEL_7:
          unsigned int v8 = v6 & 0xFFF3FFFF;
        }

LABEL_11:
        *(_DWORD *)(a1 + 36) = v8;
        break;
    }
  }

  (*(void (**)(uint64_t, float))(*(void *)a1 + 16LL))(a1, a2[7]);
  (*(void (**)(uint64_t, void, void, float, float))(*(void *)a1 + 24LL))( a1,  *(unsigned __int16 *)a2,  *((unsigned __int16 *)a2 + 1),  a2[5],  a2[6]);
  v9.n128_u32[0] = 1.0;
  if ((*(_BYTE *)(a1 + 38) & 1) == 0) {
    v9.n128_f32[0] = a2[4];
  }
  (*(void (**)(uint64_t, __n128))(*(void *)a1 + 32LL))(a1, v9);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 40LL))(a1, *((unsigned __int16 *)a2 + 4));
  (*(void (**)(uint64_t, void))(*(void *)a1 + 48LL))(a1, *((unsigned __int16 *)a2 + 5));
  (*(void (**)(uint64_t, void))(*(void *)a1 + 56LL))(a1, *((unsigned __int16 *)a2 + 6));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 64LL))(a1, 1LL);
}

    if (!sub_13ED4((void *)a1)) {
      a3 = *(unsigned __int16 *)(*(void *)a1 + 248LL);
    }
    BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(a2, a3);
    if (IOSurfaceIsTiled(a2))
    {
      else {
        return 4096LL;
      }
    }

    return BytesPerRowOfPlane;
  }

  xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
  if ((**(_WORD **)a1 & 0x800) != 0) {
    goto LABEL_11;
  }
  char v10 = *(void *)(a1 + 392);
  unsigned int v8 = *(unsigned __int16 *)(*(void *)a1 + 268LL);
  if ((*(_DWORD *)(a1 + 368) - 1) < 2)
  {
    __n128 v9 = *(unsigned __int8 *)(v10 + 57);
    goto LABEL_10;
  }

  uint64_t v14 = 32 - __clz(v8 - 1);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 57);
  if (v8 >= 2) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = 0;
  }
  return v15 << v16;
}

        v8 &= ~(1 << v13);
        unsigned int v17 = v10 + 4LL * *(unsigned int *)(v14 + 180);
        *(void *)unsigned int v17 = v11;
        *(_DWORD *)(v17 + 8) = 0;
        v11 += 16LL;
        if (!v8) {
          goto LABEL_12;
        }
      }

      uint64_t v16 = (_OWORD *)(v9 + 6160 + 16 * v15);
LABEL_10:
      *v12++ = *v16;
      goto LABEL_11;
    }

    *a9 |= a7;
  }

  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_D3C8(uint64_t result, float a2, float a3)
{
  if (*(_BYTE *)(result + 32))
  {
    float v3 = a2 * 64.0;
    unint64_t v4 = vcvts_n_u32_f32(a3, 6uLL) << 23;
    BOOL v5 = a2 < 0.0;
    float v6 = 0.0;
    if (!v5) {
      float v6 = v3;
    }
    unint64_t v7 = (unint64_t)v6;
    if (v4 >= 0x1DF800000LL) {
      unint64_t v4 = 0x1DF800000LL;
    }
    unsigned int v8 = *(unint64_t **)(result + 16);
    __n128 v9 = *(unint64_t **)(result + 24);
    *unsigned int v8 = *v8 & 0xFFFFFFFFFF801FFFLL | (v7 << 13);
    *__n128 v9 = *v9 & 0xFFFFFFFFFF801FFFLL | (v7 << 13);
    *unsigned int v8 = *v8 & 0xFFFFFFFE007FFFFFLL | v4;
    *__n128 v9 = *v9 & 0xFFFFFFFE007FFFFFLL | v4;
  }

  else
  {
    char v10 = *(void **)(result + 16);
    uint64_t v11 = *(void **)(result + 24);
    *v10 &= 0xFFFFFFFFFF801FFFLL;
    *v11 &= 0xFFFFFFFFFF801FFFLL;
    *v10 &= 0xFFFFFFFE007FFFFFLL;
    *v11 &= 0xFFFFFFFE007FFFFFLL;
  }

  return result;
}

int8x16_t sub_D484(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(int8x16_t **)(a1 + 24);
  v3.i64[0] = (a2 << 48) & 0xFFFC000000000000LL;
  v3.i64[1] = a2 >> 16;
  int8x16_t result = vorrq_s8(vandq_s8(*v2, (int8x16_t)xmmword_70200), v3);
  *uint64_t v2 = result;
  return result;
}

BOOL sub_D4BC(uint64_t a1, const void **a2)
{
  size_t v4 = 8LL * *(unsigned int *)(a1 + 8);
  return memcmp(*(const void **)(a1 + 16), *a2, v4) || memcmp(*(const void **)(a1 + 24), a2[1], v4) != 0;
}

uint64_t sub_D520(uint64_t a1, _DWORD *a2)
{
  if (*(_DWORD *)(a1 + 36) == a2[9]) {
    return (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 104LL))(a2, a1 + 16);
  }
  else {
    return 3LL;
  }
}

uint64_t sub_D560()
{
  return 16LL;
}

void *sub_D568(unsigned int *a1, void *a2)
{
  size_t v4 = (const void *)(*(uint64_t (**)(unsigned int *))(*(void *)a1 + 136LL))(a1);
  return memcpy(a2, v4, 8LL * a1[2]);
}

void *sub_D5A4(uint64_t a1)
{
  int8x16_t result = *(void **)(a1 + 24);
  if (*result >> 50) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = (result[1] & 0xFFFFFFLL) == 0;
  }
  if (v3) {
    return *(void **)(a1 + 16);
  }
  return result;
}

uint64_t sub_D5D4(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

_BYTE *sub_D5DC()
{
  uint64_t v0 = operator new(0x28uLL);
  v0[32] = 0;
  *((_DWORD *)v0 + 9) = -1;
  *(void *)uint64_t v0 = &off_786D0;
  *((_DWORD *)v0 + 2) = 2;
  uint64_t v1 = malloc_zone_calloc((malloc_zone_t *)qword_7C218, 2uLL, 8uLL);
  if (!v1 || (*((void *)v0 + 2) = v1, (uint64_t v2 = malloc_zone_calloc((malloc_zone_t *)qword_7C218, 2uLL, 8uLL)) == 0LL)) {
    abort();
  }
  *((void *)v0 + 3) = v2;
  sub_CDF4((uint64_t)v0, 0.0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, float, float))(*(void *)v0 + 24LL))(v0, 9728LL, 9728LL, 0.0, 0.0);
  (*(void (**)(_BYTE *, float))(*(void *)v0 + 32LL))(v0, 0.0);
  (*(void (**)(_BYTE *, uint64_t))(*(void *)v0 + 40LL))(v0, 33071LL);
  (*(void (**)(_BYTE *, uint64_t))(*(void *)v0 + 48LL))(v0, 33071LL);
  (*(void (**)(_BYTE *, uint64_t))(*(void *)v0 + 56LL))(v0, 33071LL);
  (*(void (**)(_BYTE *, uint64_t))(*(void *)v0 + 64LL))(v0, 1LL);
  *((_DWORD *)v0 + 9) = -1;
  return v0;
}

void sub_D6F4(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0LL;
}

void sub_D6FC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    BOOL v3 = *(dispatch_group_s **)(a2 + 32);
    if (v3)
    {
      dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(*(dispatch_object_t *)(a2 + 32));
    }
  }

dispatch_group_s *sub_D73C(uint64_t a1)
{
  int8x16_t result = *(dispatch_group_s **)(a1 + 32);
  if (result) {
    return (dispatch_group_s *)dispatch_group_wait(result, 0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

uint64_t sub_D750(uint64_t a1, void *a2, char a3)
{
  BOOL v3 = (void *)*a2;
  if (!*(void *)*a2) {
    return 0LL;
  }
  if ((a3 & 1) != 0)
  {
    uint64_t result = gpusGetKernelBufferResource(a1);
    if (!(_DWORD)result) {
      return result;
    }
    *(_BYTE *)(*(void *)(a2[2] + 16LL) + 28LL) = 1;
  }

  uint64_t result = 1LL;
  if ((a3 & 4) != 0 && (*(_DWORD *)(*(void *)(a1 + 8) + 764LL) & 0x80) != 0 && !*((_BYTE *)v3 + 30))
  {
    gpusFlushMemoryForOut(*v3, v3[2]);
    return 1LL;
  }

  return result;
}

uint64_t sub_D818()
{
  return 0LL;
}

dispatch_group_s *sub_D820(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)*a2 + a3 == a5)
  {
    if ((*(_BYTE *)(*(void *)(a1 + 8) + 764LL) & 0x80) != 0 && !*(_BYTE *)(*a2 + 30LL)) {
      gpusFlushMemoryForOut(a5, a4);
    }
    return (dispatch_group_s *)(&dword_0 + 1);
  }

  else
  {
    uint64_t result = (dispatch_group_s *)a2[4];
    if (result)
    {
      dispatch_group_wait(result, 0xFFFFFFFFFFFFFFFFLL);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_D888(void *a1, int a2, uint64_t a3)
{
  if (a2 <= 1402)
  {
    if (a2 > 605)
    {
      if (a2 != 606)
      {
        if (a2 != 680) {
          goto LABEL_38;
        }
        ShaderCacheKeys = (void *)CompilerFSCacheGetShaderCacheKeys(*(void *)(*(void *)(*(void *)(a1[2] + 8LL)
                                                                                          + 816LL)
                                                                              + 80LL));
        uint64_t result = 0LL;
LABEL_30:
        *(void *)a3 = ShaderCacheKeys;
        return result;
      }
    }

    else if (a2 != 603)
    {
      if (a2 == 604)
      {
        if (*(_DWORD *)(a3 + 4) > 0x800u || *(_DWORD *)a3 > 0x800u) {
          int v6 = 1;
        }
        else {
          int v6 = 3;
        }
        if ((*(_DWORD *)(a3 + 8) & 7) != 0)
        {
          int v7 = *(_DWORD *)(a3 + 8) & 3;
          if (v7)
          {
            if (v7 != 3) {
              v6 &= 2u;
            }
          }
        }

        uint64_t result = 0LL;
        *(_DWORD *)a3 = v6;
        return result;
      }

LABEL_38:
      printf( "%s: Unimplemented - pname 0x%04X, params %p",  "enum32_t glrGetPrivateInteger(GLDContext, enum32_t, int32_t *)",  a2,  (const void *)a3);
      putchar(10);
      return 10010LL;
    }

    uint64_t result = 0LL;
    ShaderCacheKeys = &unk_70ACC;
    goto LABEL_30;
  }

  if (a2 > 1406)
  {
    if (a2 == 1407)
    {
      uint64_t v16 = a1[438];
      if (v16)
      {
        unsigned int v17 = *(int **)(v16 + 32);
        int v18 = (unsigned __int16 *)((char *)v17 - *v17);
        if (*v18 >= 5u && (uint64_t v19 = v18[2]) != 0) {
          unint64_t v20 = (char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19);
        }
        else {
          unint64_t v20 = 0LL;
        }
        *(void *)a3 = v20 + 4;
        *(void *)(a3 + 8) = *(unsigned int *)((char *)v21 + *v21);
      }

      uint64_t v22 = a1[439];
      if (v22)
      {
        unsigned int v23 = *(int **)(v22 + 32);
        char v24 = (unsigned __int16 *)((char *)v23 - *v23);
        if (*v24 >= 5u && (uint64_t v25 = v24[2]) != 0) {
          int v26 = (char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25);
        }
        else {
          int v26 = 0LL;
        }
        uint64_t result = 0LL;
        *(void *)(a3 + 64) = v26 + 4;
        *(void *)(a3 + 72) = *(unsigned int *)((char *)v27 + *v27);
        return result;
      }
    }

    else
    {
      if (a2 != 1415) {
        goto LABEL_38;
      }
      *(void *)a3 = 0LL;
      uint64_t v11 = a1[438];
      if (v11) {
        *(_DWORD *)a3 = *(_DWORD *)(v11 + 48);
      }
      uint64_t v12 = a1[439];
      if (v12)
      {
        uint64_t result = 0LL;
        *(_DWORD *)(a3 + 4) = *(_DWORD *)(v12 + 48);
        return result;
      }
    }

    return 0LL;
  }

  if (a2 != 1403)
  {
    if (a2 == 1404)
    {
      unint64_t v9 = sub_69370(a1[593]);
      uint64_t result = 0LL;
      *(void *)a3 = v9;
      a1[593] = 0LL;
      return result;
    }

    goto LABEL_38;
  }

  uint64_t v13 = a1[6];
  if (v13 && (uint64_t v14 = **(void **)(v13 + 8)) != 0)
  {
    unint64_t v15 = sub_69370(*(void *)(v14 + 208));
    uint64_t result = 0LL;
    *(void *)a3 = v15;
    *(void *)(**(void **)(a1[6] + 8LL) + 208LL) = 0LL;
  }

  else
  {
    uint64_t result = 0LL;
    *(void *)a3 = 0LL;
  }

  return result;
}

uint64_t sub_DB18(uint64_t a1, int a2, void *a3)
{
  BOOL v5 = (_BYTE *)(a1 + 4732);
  if (a2 > 704)
  {
    switch(a2)
    {
      case 1411:
        size_t outputStructCnt = 24LL;
        uint64_t v6 = a3[2];
        if (v6)
        {
          int v7 = (void *)*a3;
          uint64_t v8 = a3[1];
          uint64_t v9 = a3[4];
          *(void *)(a1 + 4704) = *a3;
          *(_DWORD *)(a1 + 4712) = v8;
          *(void *)(a1 + 4720) = v6;
          *(_DWORD *)(a1 + 4728) = v9;
          *(_DWORD *)(a1 + 4736) = 0;
          *(void *)(a1 + 4696) = -1LL;
          *BOOL v5 = 0;
          memset(v7, 255, 40LL * v8);
          memset(*(void **)(a1 + 4720), 255, *(unsigned int *)(a1 + 4728));
          LODWORD(outputStruct) = 0;
          BYTE4(outputStruct) = 1;
          DWORD2(outputStruct) = 0;
          mach_port_t Connect = IOAccelSharedGetConnect(*(void *)(*(void *)(a1 + 16) + 40LL));
          if (!IOConnectCallStructMethod(Connect, 0xFu, &outputStruct, 0x18uLL, &outputStruct, &outputStructCnt))
          {
            *((void *)&outputStruct + 1) = *(void *)(a1 + 4720);
            int v11 = *(_DWORD *)(a1 + 4728);
            LODWORD(outputStruct) = 1;
            DWORD1(outputStruct) = v11;
            mach_port_t v12 = IOAccelSharedGetConnect(*(void *)(*(void *)(a1 + 16) + 40LL));
            if (!IOConnectCallStructMethod(v12, 0xFu, &outputStruct, outputStructCnt, &outputStruct, &outputStructCnt)) {
              return 0LL;
            }
          }

          LODWORD(outputStruct) = 0;
          BYTE4(outputStruct) = 0;
          DWORD2(outputStruct) = 0;
          mach_port_t v13 = IOAccelSharedGetConnect(*(void *)(*(void *)(a1 + 16) + 40LL));
          IOConnectCallStructMethod(v13, 0xFu, &outputStruct, outputStructCnt, &outputStruct, &outputStructCnt);
        }

        else
        {
          *(void *)(a1 + 4704) = 0LL;
          *(_DWORD *)(a1 + 4712) = 0;
          *(void *)(a1 + 4720) = 0LL;
          *(_DWORD *)(a1 + 4728) = 0;
          *(_DWORD *)(a1 + 4736) = 0;
          *(void *)(a1 + 4696) = -1LL;
          *BOOL v5 = 0;
          __int128 outputStruct = 1uLL;
          mach_port_t v29 = IOAccelSharedGetConnect(*(void *)(*(void *)(a1 + 16) + 40LL));
          IOConnectCallStructMethod(v29, 0xFu, &outputStruct, 0x18uLL, &outputStruct, &outputStructCnt);
          LODWORD(outputStruct) = 0;
          BYTE4(outputStruct) = 0;
          DWORD2(outputStruct) = 0;
          mach_port_t v30 = IOAccelSharedGetConnect(*(void *)(*(void *)(a1 + 16) + 40LL));
          if (!IOConnectCallStructMethod(v30, 0xFu, &outputStruct, outputStructCnt, &outputStruct, &outputStructCnt)) {
            return 0LL;
          }
        }

        return 10016LL;
      case 1412:
        *BOOL v5 = 1;
        __int128 outputStruct = xmmword_70AD0;
        uint64_t v38 = 0LL;
        size_t outputStructCnt = 24LL;
        mach_port_t v23 = IOAccelSharedGetConnect(*(void *)(*(void *)(a1 + 16) + 40LL));
        if (IOConnectCallStructMethod(v23, 0xFu, &outputStruct, 0x18uLL, &outputStruct, &outputStructCnt)) {
          return 10007LL;
        }
        LODWORD(outputStruct) = 8;
        mach_port_t v24 = IOAccelSharedGetConnect(*(void *)(*(void *)(a1 + 16) + 40LL));
        size_t v25 = outputStructCnt;
LABEL_41:
        if (!IOConnectCallStructMethod(v24, 0xFu, &outputStruct, v25, &outputStruct, &outputStructCnt)) {
          return 0LL;
        }
        return 10007LL;
      case 1413:
        *BOOL v5 = 0;
        __int128 outputStruct = xmmword_70AE8;
        uint64_t v38 = 0LL;
        size_t outputStructCnt = 24LL;
        mach_port_t v24 = IOAccelSharedGetConnect(*(void *)(*(void *)(a1 + 16) + 40LL));
        size_t v25 = 24LL;
        goto LABEL_41;
      case 1414:
      case 1415:
      case 1416:
      case 1417:
      case 1418:
      case 1419:
        goto LABEL_19;
      case 1420:
        *(void *)&__int128 outputStruct = *(_DWORD *)a3 != 0;
        mach_port_t v26 = IOAccelContextGetConnect(*(void *)(a1 + 64));
        return 10016LL;
      case 1421:
        return 0LL;
      default:
        if (a2 != 705)
        {
          if (a2 != 707)
          {
LABEL_19:
            printf( "%s: Unimplemented - pname 0x%04X, params %p",  "enum32_t glrSetPrivateInteger(GLDContext, enum32_t, const int32_t *)",  a2,  a3);
            putchar(10);
            return 10010LL;
          }

          if (a3[23]) {
            sub_19544((uint64_t)a3, a1);
          }
          return 0LL;
        }

        if (*(void *)(a1 + 2688)) {
          sub_26240(a1, *(void *)(a1 + 3968));
        }
        uint64_t v27 = *(void **)(a1 + 2152);
        unint64_t v28 = *(void *)(a1 + 2160);
        if (v5[164])
        {
          *v27++ = 164096LL;
          *(void *)(a1 + 2152) = v27;
          v5[164] = 0;
        }

        if ((unint64_t)v27 + 28 <= v28)
        {
          unint64_t v35 = (void *)((char *)v27 + 20);
          *(void *)(a1 + 2152) = (char *)v27 + 20;
          unint64_t v32 = (unint64_t)v27 + 20;
          if (v27)
          {
LABEL_77:
            *uint64_t v27 = 344320LL;
            *((_DWORD *)v27 + 2) = *(_DWORD *)a3;
            *((_DWORD *)v27 + 3) = *((_DWORD *)a3 + 1);
            *((_DWORD *)v27 + 4) = *((_DWORD *)a3 + 2);
            goto LABEL_78;
          }
        }

        else
        {
          unint64_t v35 = v27;
        }

        if ((unint64_t)v35 > *(void *)(a1 + 2168) + 24LL)
        {
          sub_260F0(a1);
          unint64_t v35 = *(void **)(a1 + 2152);
          if (v5[164])
          {
            *v35++ = 164096LL;
            v5[164] = 0;
          }
        }

        unint64_t v32 = (unint64_t)v35 + 20;
        *(void *)(a1 + 2152) = (char *)v35 + 20;
        uint64_t v27 = v35;
        goto LABEL_77;
    }
  }

  switch(a2)
  {
    case 601:
      if (*(void *)(a1 + 2688)) {
        sub_26240(a1, *(void *)(a1 + 3968));
      }
      v5[167] = *(_DWORD *)a3 != 0;
      return 0LL;
    case 602:
      if (*(void *)(a1 + 2688)) {
        sub_26240(a1, *(void *)(a1 + 3968));
      }
      if (*(_DWORD *)a3 <= 3u) {
        *(_DWORD *)(a1 + 4900) = *(_DWORD *)a3;
      }
      return 0LL;
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 610:
      goto LABEL_19;
    case 608:
      if (*(void *)(a1 + 2688)) {
        sub_26240(a1, *(void *)(a1 + 3968));
      }
      int v18 = *(void **)(a1 + 2152);
      unint64_t v19 = *(void *)(a1 + 2160);
      if (v5[164])
      {
        *v18++ = 164096LL;
        *(void *)(a1 + 2152) = v18;
        v5[164] = 0;
      }

      if ((unint64_t)v18 + 20 <= v19)
      {
        int v31 = (void *)((char *)v18 + 12);
        *(void *)(a1 + 2152) = (char *)v18 + 12;
        unint64_t v32 = (unint64_t)v18 + 12;
        if (v18) {
          goto LABEL_60;
        }
      }

      else
      {
        int v31 = v18;
      }

      if ((unint64_t)v31 > *(void *)(a1 + 2168) + 24LL)
      {
        sub_260F0(a1);
        int v31 = *(void **)(a1 + 2152);
        if (v5[164])
        {
          *v31++ = 164096LL;
          v5[164] = 0;
        }
      }

      unint64_t v32 = (unint64_t)v31 + 12;
      *(void *)(a1 + 2152) = (char *)v31 + 12;
      int v18 = v31;
LABEL_60:
      unsigned __int16 v33 = -31744;
      goto LABEL_69;
    case 609:
      if (*(void *)(a1 + 2688)) {
        sub_26240(a1, *(void *)(a1 + 3968));
      }
      int v18 = *(void **)(a1 + 2152);
      unint64_t v20 = *(void *)(a1 + 2160);
      if (v5[164])
      {
        *v18++ = 164096LL;
        *(void *)(a1 + 2152) = v18;
        v5[164] = 0;
      }

      if ((unint64_t)v18 + 20 <= v20)
      {
        unint64_t v34 = (void *)((char *)v18 + 12);
        *(void *)(a1 + 2152) = (char *)v18 + 12;
        unint64_t v32 = (unint64_t)v18 + 12;
        if (v18) {
          goto LABEL_68;
        }
      }

      else
      {
        unint64_t v34 = v18;
      }

      if ((unint64_t)v34 > *(void *)(a1 + 2168) + 24LL)
      {
        sub_260F0(a1);
        unint64_t v34 = *(void **)(a1 + 2152);
        if (v5[164])
        {
          *v34++ = 164096LL;
          v5[164] = 0;
        }
      }

      unint64_t v32 = (unint64_t)v34 + 12;
      *(void *)(a1 + 2152) = (char *)v34 + 12;
      int v18 = v34;
LABEL_68:
      unsigned __int16 v33 = -31488;
LABEL_69:
      *int v18 = v33 | 0x30000u;
      *((_DWORD *)v18 + 2) = *(_DWORD *)a3;
      break;
    case 611:
      *(void *)(a1 + 4840) = a3;
      return 0LL;
    case 612:
      if (!*(void *)(a1 + 4840)) {
        return 10007LL;
      }
      if (*(void *)(a1 + 2688)) {
        sub_26240(a1, *(void *)(a1 + 3968));
      }
      int v21 = *(void **)(a1 + 2152);
      unint64_t v22 = *(void *)(a1 + 2160);
      if (v5[164])
      {
        *v21++ = 164096LL;
        *(void *)(a1 + 2152) = v21;
        v5[164] = 0;
      }

      *(void *)(a1 + 2152) = v21 + 3;
      if (!v21)
      {
        int v21 = (void *)&dword_18;
LABEL_83:
        if ((unint64_t)v21 > *(void *)(a1 + 2168) + 24LL)
        {
          sub_260F0(a1);
          int v21 = *(void **)(a1 + 2152);
          if (v5[164])
          {
            *v21++ = 164096LL;
            v5[164] = 0;
          }
        }

        *(void *)(a1 + 2152) = v21 + 3;
      }

      *int v21 = 393984LL;
      IOAccelContextSetBlockFenceOnQueue(v21 + 1, *(void *)(a1 + 64), a3, *(void *)(a1 + 4840));
      return 0LL;
    default:
      if (a2 != 703) {
        goto LABEL_19;
      }
      uint64_t v14 = (unsigned int *)(*(void *)(a1 + 8) + 1376LL);
      int v15 = 1 << *(_DWORD *)a3;
      do
        unsigned int v16 = __ldxr(v14);
      while (__stxr(v16 | v15, v14));
      return 0LL;
  }

uint64_t sub_E238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 64;
  *(_WORD *)(a2 + 26) = 7361;
  *(_BYTE *)(a2 + 25) = *(_BYTE *)(a2 + 25) & 0x80 | 1;
  *(_WORD *)(a2 + 100) = 257;
  *(_BYTE *)(a2 + 107) = 1;
  *(_WORD *)(a2 + 104) = 257;
  *(void *)(a2 + 32) = 0x6000000010000LL;
  *(_BYTE *)(a2 + 174) = 1;
  *(void *)(a2 + 124) = 0x8000000080LL;
  gpusColorSizes(*(unsigned int *)(a3 + 20), &v16);
  int v6 = *(_DWORD *)(a3 + 20);
  *(_BYTE *)(a2 + 40) = (v6 & 0x3FFFFFFC) != 0;
  *(_BYTE *)(a2 + 41) = (*(_BYTE *)(a3 + 16) & 8) != 0;
  *(_BYTE *)(a2 + 42) = 0;
  *(_BYTE *)(a2 + 43) = (v6 & 0x3F000000) != 0;
  *(_BYTE *)(a2 + 44) = (*(_DWORD *)(a3 + 12) & 0x800) != 0;
  v7.i64[0] = v16;
  *(_DWORD *)(a2 + 48) = vmovn_s16(v7).u32[0];
  *(_BYTE *)(a2 + 46) = v17;
  *(_BYTE *)(a2 + 56) = gpusDepthSize(*(unsigned int *)(a3 + 28));
  *(_BYTE *)(a2 + 57) = gpusDepthSize(*(unsigned int *)(a3 + 32));
  *(_BYTE *)(a2 + 47) = *(_BYTE *)(a3 + 38);
  *(_BYTE *)(a2 + 58) = *(_BYTE *)(a3 + 40);
  *(_BYTE *)(a2 + 59) = *(_BYTE *)(a3 + 42);
  *(void *)(a2 + 112) = 0x400000000LL;
  *(int8x16_t *)(a2 + 560) = vorrq_s8(*(int8x16_t *)(a2 + 560), (int8x16_t)xmmword_70210);
  *(int8x8_t *)(a2 + 576) = vorr_s8(*(int8x8_t *)(a2 + 576), (int8x8_t)0x1C0F173FDFLL);
  *(void *)(a2 + 584) = 0x800FC010800FFF0LL;
  *(_DWORD *)(a2 + 592) = 134282254;
  *(_DWORD *)(*(void *)(a1 + 8) + 824LL) = *(_DWORD *)(a2 + 620);
  __int16 v8 = xmmword_7C450;
  int v9 = (unsigned __int16)xmmword_7C450;
  *(_DWORD *)(a2 + 4) = (unsigned __int16)xmmword_7C450;
  *(_DWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 20) = 4;
  *(_OWORD *)(a2 + 60) = xmmword_70220;
  *(_OWORD *)(a2 + 76) = xmmword_70230;
  *(void *)(a2 + 92) = 0x3F80000041800000LL;
  *(_BYTE *)(a2 + 175) = 16;
  __asm { FMOV            V1.2S, #16.0 }

  *(void *)(a2 + 144) = _D1;
  *(void *)(a2 + 152) = 0x8001000200008LL;
  *(_WORD *)(a2 + 160) = v8;
  *(_WORD *)(a2 + 166) = v8;
  *(_WORD *)(a2 + 168) = v8;
  *(_WORD *)(a2 + 164) = 2048;
  *(_WORD *)(a2 + 162) = 2048;
  *(_BYTE *)(a2 + 170) = dword_7C428;
  *(_WORD *)(a2 + 171) = 0;
  *(_BYTE *)(a2 + 173) = 0;
  *(_WORD *)(a2 + 352) = 12;
  *(void *)(a2 + 344) = 0x4000000800LL;
  *(_DWORD *)(a2 + 332) = 787328;
  *(_WORD *)(a2 + 446) = 24;
  *(void *)(a2 + 448) = 0x40000000003CLL;
  *(void *)(a2 + 428) = 0x7FFFFFFF8LL;
  *(_WORD *)(a2 + 504) = 64;
  *(_BYTE *)(a2 + 506) = 24;
  *(void *)(a2 + 464) = 0xF001F000F000FLL;
  *(_BYTE *)(a2 + 476) = 10;
  *(_WORD *)(a2 + 472) = 15;
  *(_BYTE *)(a2 + 477) = 10;
  *(_WORD *)(a2 + 474) = 127;
  *(_BYTE *)(a2 + 478) = 23;
  *(_OWORD *)(a2 + 480) = xmmword_70240;
  *(void *)(a2 + 496) = 0x100000020LL;
  return off_7C338(a2);
}

double sub_E4BC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 6) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  return result;
}

_DWORD *sub_E500(_DWORD *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 2976);
  if ((v2 & 0x70) != 0)
  {
    int v3 = 0;
  }

  else if ((v2 & 0xE) != 0)
  {
    int v3 = 0x10000000;
  }

  else
  {
    uint64_t v4 = *(void *)(a2 + 3512);
    if (v4 && *(_BYTE *)(v4 + 1456))
    {
      if (result[7]) {
        int v3 = 0x40000000;
      }
      else {
        int v3 = 0x20000000;
      }
    }

    else
    {
      int v3 = 805306368;
    }
  }

  result[11] = v3 | result[11] & 0xFFFFFFF;
  result[9] |= 0x3Fu;
  return result;
}

uint64_t sub_E570(uint64_t result, _DWORD *a2, int a3, int a4, unsigned int a5, int a6, BOOL *a7)
{
  BOOL v8 = a3 == a4 || a5 == a6;
  *(void *)(result + 92) = 0x80000000LL;
  BOOL v9 = !(a5 | a3) && *a2 == a4 && a2[1] == a6;
  *a7 = v9;
  if (v8)
  {
    unsigned int v10 = *(_DWORD *)(result + 40) & 0xFFFEFFFF;
LABEL_18:
    *(_DWORD *)(result + 40) = v10 | 0x10000;
    *(void *)(result + 160) = a4 | (a3 << 16) | ((unint64_t)(a6 | (a5 << 16)) << 32);
    int v11 = 1;
    goto LABEL_19;
  }

  *(_DWORD *)(result + 92) = (a3 << 11) & 0x7FFF0000 | ((a4 - 1) >> 5) | 0x80000000;
  *(_DWORD *)(result + 96) = ((a6 - 1) >> 5) | (a5 >> 5 << 16);
  unsigned int v10 = *(_DWORD *)(result + 40) & 0xFFFEFFFF;
  *(_DWORD *)(result + 40) = v10;
  int v11 = 0;
  if ((a6 & 0x1F) != 0 && a2[1] > a6) {
    goto LABEL_18;
  }
LABEL_19:
  *(_DWORD *)(result + 16) = v11;
  *(_DWORD *)(result + 36) |= 0xC3Fu;
  return result;
}

uint64_t sub_E660(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)(a3 + 13032);
  float v4 = roundf(fmaxf(v3, 1.0));
  if (!*(_BYTE *)(*(void *)a2 + 182LL)) {
    float v3 = v4;
  }
  float v5 = v3 * 16.0;
  float v6 = v5 + 0.5;
  if (v5 > 255.0) {
    float v6 = 255.5;
  }
  unsigned int v7 = v6;
  if (v5 < 0.0) {
    unsigned int v7 = 0;
  }
  if (byte_7C001) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  int v9 = !v8;
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFF00FF | ((v7 - v9) << 8);
  *(_DWORD *)(result + 36) |= 0x3Fu;
  return result;
}

uint64_t sub_E6EC(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 144) = v2 & 0xFFFFFFBF;
  if (*(_WORD *)(a2 + 4)) {
    *(_DWORD *)(result + 144) = v2 | 0x40;
  }
  *(_DWORD *)(result + 36) |= 0x200000u;
  return result;
}

uint64_t sub_E718(uint64_t result, uint64_t a2, char a3, _DWORD *a4)
{
  float v4 = (_DWORD *)result;
  *(_BYTE *)(result + 193) = 0;
  float v5 = (_BYTE *)(result + 193);
  *(_DWORD *)(result + 40) &= ~0x80000u;
  *a4 &= 0xFFFFFFF3;
  if ((*(_BYTE *)(result + 33) & 2) != 0)
  {
    int v7 = *(_DWORD *)(a2 + 13372);
    if ((v7 & 1) != 0)
    {
      if ((a3 & 0x70) == 0) {
        goto LABEL_13;
      }
      if ((v7 & 0x74) != 0)
      {
        int v9 = *(unsigned __int16 *)(a2 + 13256) == 2305;
        int v10 = *(_DWORD *)(result + 28);
        BOOL v11 = v10 == v9;
        BOOL v12 = v10 != v9;
        int v13 = v11;
        *(_DWORD *)(result + 40) |= 0x80000u;
        int v14 = 2 * v12;
        sub_FBF8(a2, 2 * v13, (_DWORD *)(result + 44), (_DWORD *)(result + 48), a4, v5);
        uint64_t v15 = a2;
        unsigned int v16 = v14;
        char v17 = v4 + 13;
        int v18 = v4 + 14;
        goto LABEL_14;
      }

      if (*(_BYTE *)(a2 + 13262) && *(_WORD *)(a2 + 13258) == 1029)
      {
        char v17 = (_DWORD *)(result + 44);
        int v18 = (_DWORD *)(result + 48);
        uint64_t v15 = a2;
        unsigned int v16 = 2;
      }

      else
      {
LABEL_13:
        char v17 = (_DWORD *)(result + 44);
        int v18 = (_DWORD *)(result + 48);
        uint64_t v15 = a2;
        unsigned int v16 = 0;
      }

_DWORD *sub_E860(_DWORD *result, uint64_t a2)
{
  unsigned int v2 = result[36] & 0xFFFFFFFC;
  result[36] = v2;
  if (*(_BYTE *)(a2 + 13262))
  {
    int v3 = *(unsigned __int16 *)(a2 + 13258);
    if (v3 != 1032)
    {
      if (result[7] == ((v3 != 1028) ^ (*(_WORD *)(a2 + 13256) == 2305))) {
        int v4 = 2;
      }
      else {
        int v4 = 1;
      }
      result[36] = v4 | v2;
    }
  }

  result[9] |= 0x200000u;
  return result;
}

_DWORD *sub_E8C8(_DWORD *result, uint64_t a2, uint64_t a3, char a4)
{
  int v4 = result[10];
  result[10] = v4 & 0xFFFDFFFF;
  if ((a4 & 0x70) != 0 && *(_BYTE *)(a3 + 13265)
    || (a4 & 1) != 0 && *(_BYTE *)(a3 + 13263)
    || (a4 & 0xE) != 0 && *(_BYTE *)(a3 + 13264))
  {
    result[10] = v4 | 0x20000;
    int v5 = *(_DWORD *)(a3 + 13244);
    result[42] = *(_DWORD *)(a3 + 13248);
    result[43] = v5;
    result[44] = 0;
    result[5] = 1;
  }

  result[9] |= 0x3Fu;
  return result;
}

uint64_t sub_E938(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[32] = 0;
  int v5 = *(int **)(a3 + 1440);
  float v6 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v7 = *v6;
  if (*(_BYTE *)(a4 + 52))
  {
    int v8 = 1;
  }

  else
  {
    if (v7 >= 0x15)
    {
      if (v6[10]) {
        int v8 = *((unsigned __int8 *)v5 + v6[10]) != 0;
      }
      else {
        int v8 = 0;
      }
      goto LABEL_8;
    }

    int v8 = 0;
  }

  if (v7 < 0xB)
  {
    LODWORD(v9) = 0;
    goto LABEL_11;
  }

LABEL_8:
  uint64_t v9 = v6[5];
  if (v9) {
    LODWORD(v9) = *(int *)((char *)v5 + v9) << 24;
  }
LABEL_11:
  a1[32] = v9;
  int v10 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v10 < 9u)
  {
    LODWORD(v11) = 0;
  }

  else
  {
    uint64_t v11 = v10[4];
    if (v11) {
      LODWORD(v11) = (*((_BYTE *)v5 + v11) != 0) << 18;
    }
  }

  int v12 = v11 | v9;
  a1[32] = v12;
  int v13 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v13 < 7u)
  {
    LODWORD(v14) = 0;
  }

  else
  {
    uint64_t v14 = v13[3];
    if (v14) {
      LODWORD(v14) = (*((_BYTE *)v5 + v14) != 0) << 16;
    }
  }

  int v15 = v14 | (v8 << 21) | v12;
  a1[32] = v15;
  unsigned int v16 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v16 < 0xFu)
  {
    LOBYTE(v17) = 0;
  }

  else
  {
    uint64_t v17 = v16[7];
    if (v17) {
      LODWORD(v17) = *(int *)((char *)v5 + v17);
    }
  }

  *((void *)a1 + 16) = v15 | ~(-1 << v17);
  int v18 = sub_F9D0(v5);
  a1[33] = v18;
  unsigned int v19 = v18 | (sub_FA2C(v5) << 8);
  a1[33] = v19;
  *(void *)(a1 + 33) = v19 | (sub_FA88(v5) << 16);
  unsigned int v20 = sub_FAE4(v5) << 8;
  a1[34] = v20;
  unsigned int v21 = v20 | (sub_FB40(v5) << 16);
  a1[34] = v21;
  a1[34] = v21 | (sub_FB9C(v5) << 24);
  a1[9] |= 0x1E0000u;
  int v22 = sub_F9D0(v5);
  int v23 = sub_FA2C(v5);
  int v24 = sub_FA88(v5);
  int v25 = sub_FAE4(v5);
  int v26 = sub_FB40(v5);
  uint64_t result = sub_FB9C(v5);
  LODWORD(v28) = 0;
  mach_port_t v29 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v29 >= 7u)
  {
    uint64_t v28 = v29[3];
    if (v29[3]) {
      LODWORD(v28) = *((unsigned __int8 *)v5 + v28) != 0;
    }
  }

  a1[47] = v22 + v8 + v23 + v24 + v25 + v26 + result + v28;
  return result;
}

  uint64_t v9 = v6[5];
  if (v9) {
    LODWORD(v9) = *(int *)((char *)v5 + v9) << 24;
  }
LABEL_11:
  a1[32] = v9;
  int v10 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v10 < 9u)
  {
    LODWORD(v11) = 0;
  }

  else
  {
    uint64_t v11 = v10[4];
    if (v11) {
      LODWORD(v11) = (*((_BYTE *)v5 + v11) != 0) << 18;
    }
  }

  int v12 = v11 | v9;
  a1[32] = v12;
  int v13 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v13 < 7u)
  {
    LODWORD(v14) = 0;
  }

  else
  {
    uint64_t v14 = v13[3];
    if (v14) {
      LODWORD(v14) = (*((_BYTE *)v5 + v14) != 0) << 16;
    }
  }

  int v15 = v14 | (v8 << 21) | v12;
  a1[32] = v15;
  unsigned int v16 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v16 < 0xFu)
  {
    LOBYTE(v17) = 0;
  }

  else
  {
    uint64_t v17 = v16[7];
    if (v17) {
      LODWORD(v17) = *(int *)((char *)v5 + v17);
    }
  }

  *((void *)a1 + 16) = v15 | ~(-1 << v17);
  int v18 = sub_F9D0(v5);
  a1[33] = v18;
  unsigned int v19 = v18 | (sub_FA2C(v5) << 8);
  a1[33] = v19;
  *(void *)(a1 + 33) = v19 | (sub_FA88(v5) << 16);
  unsigned int v20 = sub_FAE4(v5) << 8;
  a1[34] = v20;
  unsigned int v21 = v20 | (sub_FB40(v5) << 16);
  a1[34] = v21;
  a1[34] = v21 | (sub_FB9C(v5) << 24);
  a1[9] |= 0x1E0000u;
  int v22 = sub_F9D0(v5);
  int v23 = sub_FA2C(v5);
  int v24 = sub_FA88(v5);
  int v25 = sub_FAE4(v5);
  int v26 = sub_FB40(v5);
  uint64_t result = sub_FB9C(v5);
  LODWORD(v28) = 0;
  mach_port_t v29 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v29 >= 7u)
  {
    uint64_t v28 = v29[3];
    if (v29[3]) {
      LODWORD(v28) = *((unsigned __int8 *)v5 + v28) != 0;
    }
  }

  a1[47] = v22 + v8 + v23 + v24 + v25 + v26 + result + v28;
  return result;
}

float sub_EB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 6944);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 6960);
  float v3 = *(float *)(a2 + 6948);
  if (*(_DWORD *)(a1 + 28))
  {
    *(float *)(a1 + 112) = -v3;
    float v4 = (float)*(int *)(a3 + 4) - *(float *)(a2 + 6964);
  }

  else
  {
    *(float *)(a1 + 112) = v3;
    float v4 = *(float *)(a2 + 6964);
  }

  *(float *)(a1 + 108) = v4;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 6952);
  float result = *(float *)(a2 + 6968);
  *(float *)(a1 + 116) = result;
  *(_DWORD *)(a1 + 36) |= 0xC00u;
  return result;
}

uint64_t sub_EBF4(uint64_t result, uint64_t a2, int *a3)
{
  *(_BYTE *)(result + 192) = 0;
  if (*(_BYTE *)(a2 + 12932)) {
    int v3 = *(_BYTE *)(result + 33) & 1;
  }
  else {
    int v3 = 0;
  }
  unsigned int v4 = *(_DWORD *)(result + 44) & 0xFFD1FFFF;
  int v5 = v3 & ((unsigned __int16)(*(_WORD *)(a2 + 13070) & 0x100) >> 8);
  if (v3)
  {
    switch(*(_WORD *)(a2 + 12928))
    {
      case 0x200:
        int v6 = 0;
        char v7 = 1;
        break;
      case 0x201:
        char v7 = 0;
        int v6 = 0x20000;
        break;
      case 0x202:
        char v7 = 0;
        int v6 = 0x40000;
        break;
      case 0x203:
        char v7 = 0;
        int v6 = 393216;
        break;
      case 0x204:
        char v7 = 0;
        int v6 = 0x80000;
        break;
      case 0x205:
        char v7 = 0;
        *(_BYTE *)(result + 192) = 1;
        int v6 = 655360;
        break;
      case 0x206:
        char v7 = 0;
        int v6 = 786432;
        break;
      case 0x207:
        goto LABEL_7;
      default:
        char v7 = 0;
        goto LABEL_8;
    }
  }

  else
  {
LABEL_7:
    char v7 = 1;
LABEL_8:
    int v6 = 917504;
  }

  if (v5) {
    int v8 = 0;
  }
  else {
    int v8 = 0x200000;
  }
  *(_DWORD *)(result + 44) = v8 | v6 | v4;
  int v9 = *a3;
  unsigned int v10 = *a3 & 0xFFFFFFFC;
  *a3 = v10;
  if (v5)
  {
    int v11 = v9 | 3;
LABEL_16:
    *a3 = v11;
    goto LABEL_17;
  }

  if ((v7 & 1) == 0)
  {
    int v11 = v10 | 1;
    goto LABEL_16;
  }

LABEL_17:
  *(_DWORD *)(result + 36) |= 0x3Fu;
  return result;
}

      int v13 = *(unsigned __int8 *)(v6 + 57);
      uint64_t v14 = off_7C388(v13 * v8);
      return off_7C3A0(v14, v13) / v13;
    }
  }

  if (sub_13ED4(a1)) {
    int v15 = 0LL;
  }
  else {
    int v15 = *(unsigned __int16 *)(*(void *)a1 + 248LL);
  }
  BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(a2, v15);
  return off_7C398(BytesPerRowOfPlane, v6, 0LL, 0LL);
}

  *(_DWORD *)(result + 36) |= 0x3Fu;
  return result;
}

uint64_t sub_ED14(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(result + 42) << 16;
  *(_DWORD *)(result + 40) = v2;
  if (*(_DWORD *)(a2 + 4464) == -1)
  {
    int v3 = 0;
  }

  else
  {
    *(_DWORD *)(result + 40) = v2 | 0xC000;
    int v3 = 1;
  }

  *(_DWORD *)(result + 24) = v3;
  *(_DWORD *)(result + 36) |= 0x3Fu;
  return result;
}

_DWORD *sub_ED54(_DWORD *result, uint64_t a2, char a3, unsigned int *a4)
{
  unsigned int v4 = *(_DWORD *)(a2 + 1460);
  int v5 = result[11];
  result[10] = (*(_DWORD *)(a2 + 1468) << 21) | (*(_DWORD *)(a2 + 1464) << 22) | result[10] & 0xFC1FFFFF;
  unsigned int v6 = v5 & 0xF8FFFFFF;
  if (v4 <= 6)
  {
    if (((1 << v4) & 0x1A) != 0)
    {
      result[11] = v6 | (v4 << 24);
      unsigned int v8 = *a4;
      goto LABEL_6;
    }

    if (((1 << v4) & 0x60) != 0)
    {
      int v7 = 83886080;
LABEL_9:
      result[11] = v6 | v7;
      unsigned int v8 = *a4;
LABEL_10:
      unsigned int v9 = v8 | 0x20;
      goto LABEL_11;
    }

    if (v4 == 2)
    {
      int v7 = 0x2000000;
      goto LABEL_9;
    }
  }

  result[11] = v6;
  unsigned int v8 = *a4;
  if (v4 - 5 < 2) {
    goto LABEL_10;
  }
LABEL_6:
  unsigned int v9 = v8 & 0xFFFFFFDF;
LABEL_11:
  *a4 = v9;
  uint64_t v10 = *(void *)(*(void *)(a2 + 64) + 8LL);
  uint64_t v11 = *(void *)(v10 + 24);
  uint64_t v12 = *(void *)(v10 + 80);
  int v13 = *(int **)(a2 + 1448);
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0) {
    unsigned int v16 = (*(int *)((char *)v13 + v15) + 15) & 0xFFFFFFF0;
  }
  else {
    unsigned int v16 = 0;
  }
  unsigned int v17 = ((*(_DWORD *)(a2 + 48) << 19) + 7864320) & 0xFF800000;
  result[18] = (((_DWORD)v12 << 12) + 49152) & 0xFFFF0000 | (((_DWORD)v11 << 19) + 6291456) & 0xFF800000 | ((*(void *)(*(void *)(*(void *)(a2 + 1568) + 8LL) + 24LL) << 6) + 768) & 0xFFFFFC00 | v16 | ((*(_DWORD *)(*(void *)(*(void *)(a2 + 1568) + 8LL) + 48LL) + 3) >> 2);
  result[19] = v17;
  if ((a3 & 0xF) != 0 || v4 <= 6 && ((0x74u >> v4) & 1) != 0 || *(_BYTE *)(a2 + 1458)) {
    result[19] = v17 | 0x4000;
  }
  result[9] |= 0x3FFu;
  return result;
}

uint64_t sub_EED0(uint64_t result)
{
  if ((*(_BYTE *)(result + 36) & 2) != 0) {
    *(_DWORD *)(result + 52) = *(_DWORD *)(result + 44) & 0xFFFFFF00 | *(unsigned __int8 *)(result + 52);
  }
  return result;
}

uint64_t sub_EEF0(uint64_t result, uint64_t a2)
{
  return result;
}

BOOL sub_EF20(uint64_t a1)
{
  return *(_DWORD *)(a1 + 36) != 0;
}

uint64_t sub_EF38(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20)) {
    return 12LL;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_EF4C(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 168);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(result + 176);
  *(void *)a3 = v3;
  *(_WORD *)(result + 62) = a2 / 0xC;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_EF78(uint64_t a1)
{
  return 8LL * (*(_DWORD *)(a1 + 16) != 0);
}

uint64_t sub_EF8C(uint64_t result, void *a2)
{
  *a2 = *(void *)(result + 160);
  return result;
}

uint64_t sub_EF98(uint64_t result, unsigned int a2)
{
  *(_WORD *)(result + 60) = a2 >> 3;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_EFA8()
{
  return 1LL;
}

uint64_t sub_EFB0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_EFB8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 4468) | *(_DWORD *)(result + 40) & 0xFFFFC000;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_EFD4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36);
  if ((v1 & 0x3F) != 0) {
    uint64_t v2 = (4LL * (v1 != 0)) | 0x18;
  }
  else {
    uint64_t v2 = 4LL * (v1 != 0);
  }
  if ((v1 & 0x3C0) != 0) {
    v2 += 28LL;
  }
  if ((v1 & 0xC00) != 0) {
    v2 += 32LL;
  }
  if ((v1 & 0x1E0000) != 0) {
    v2 += 16LL;
  }
  if ((v1 & 0x200000) != 0) {
    v2 += 4LL;
  }
  if ((v1 & 0xC00000) != 0) {
    v2 += 12LL;
  }
  if ((v1 & 0x10000) != 0) {
    return v2 + 4;
  }
  else {
    return v2;
  }
}

uint64_t sub_F040(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 36);
  if ((v2 & 0x3F) != 0) {
    v2 |= 0x3Fu;
  }
  if ((v2 & 0x3C0) != 0) {
    v2 |= 0x3C0u;
  }
  if ((v2 & 0xC00) != 0) {
    v2 |= 0xC00u;
  }
  int v3 = v2 | 0x1E0000;
  if ((v2 & 0x1E0000) == 0) {
    int v3 = v2;
  }
  *(_DWORD *)a2 = v3;
  uint64_t v4 = a2 + 4;
  if ((v3 & 0x3F) != 0)
  {
    __int128 v5 = *(_OWORD *)(result + 40);
    *(void *)(a2 + 20) = *(void *)(result + 56);
    *(_OWORD *)uint64_t v4 = v5;
    uint64_t v4 = a2 + 28;
  }

  if ((v3 & 0x3C0) != 0)
  {
    __int128 v6 = *(_OWORD *)(result + 64);
    *(_OWORD *)(v4 + 12) = *(_OWORD *)(result + 76);
    *(_OWORD *)uint64_t v4 = v6;
    v4 += 28LL;
  }

  if ((v3 & 0xC00) != 0)
  {
    __int128 v7 = *(_OWORD *)(result + 108);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(result + 92);
    *(_OWORD *)(v4 + 16) = v7;
    v4 += 32LL;
  }

  if ((v3 & 0x10000) != 0)
  {
    *(_DWORD *)uint64_t v4 = *(_DWORD *)(result + 124);
    v4 += 4LL;
  }

  if ((v3 & 0x1E0000) != 0)
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(result + 128);
    v4 += 16LL;
  }

  if ((v3 & 0x200000) != 0)
  {
    *(_DWORD *)uint64_t v4 = *(_DWORD *)(result + 144);
    v4 += 4LL;
  }

  if ((v3 & 0xC00000) != 0)
  {
    uint64_t v8 = *(void *)(result + 148);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(result + 156);
    *(void *)uint64_t v4 = v8;
  }

  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_F10C()
{
  return 28LL;
}

uint64_t sub_F114()
{
  return 0LL;
}

_DWORD *sub_F11C(_DWORD *a1, _DWORD *a2)
{
  *a2 = a1[16];
  a2[1] = a1[17];
  a2[2] = a1[18];
  a2[3] = a1[20];
  a2[4] = a1[21];
  a2[5] = a1[22];
  int v2 = a1[19];
  float result = a2 + 7;
  a2[6] = v2;
  return result;
}

uint64_t sub_F15C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if ((v1 & 0x80000) != 0) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  int v3 = v2 << ((v1 & 0x40000) != 0);
  if ((v1 & 0x30000) != 0) {
    int v4 = 2;
  }
  else {
    int v4 = 1;
  }
  return (4 * (v4 + v3));
}

_DWORD *sub_F188(_DWORD *a1, _DWORD *a2)
{
  int v2 = a1[10];
  int v3 = v2 & 0x30000;
  *a2 = v2;
  a2[1] = a1[11];
  if ((v2 & 0x40000) != 0)
  {
    a2[2] = a1[12];
    if ((v2 & 0x80000) == 0)
    {
      int v4 = a2 + 3;
      goto LABEL_8;
    }

    int v4 = a2 + 4;
    a2[3] = a1[13];
    __int128 v5 = a1 + 14;
    uint64_t v6 = 5LL;
  }

  else
  {
    int v4 = a2 + 2;
    if ((v2 & 0x80000) == 0) {
      goto LABEL_8;
    }
    __int128 v5 = a1 + 13;
    uint64_t v6 = 3LL;
  }

  *int v4 = *v5;
  int v4 = &a2[v6];
LABEL_8:
  if (v3) {
    *v4++ = a1[15];
  }
  return v4;
}

uint64_t sub_F1FC()
{
  return 1LL;
}

uint64_t sub_F204()
{
  return 12LL;
}

uint64_t sub_F20C(uint64_t result, _DWORD *a2)
{
  *a2 = 0x2000000;
  a2[1] = *(_DWORD *)(result + 180);
  a2[2] = *(_DWORD *)(result + 184);
  return result;
}

_DWORD *sub_F228(_DWORD *result)
{
  int v1 = result[10];
  result[9] |= 0x3F0FFFu;
  result[5] = 1;
  if ((v1 & 0x10000) == 0)
  {
    if ((v1 & 0x8000) == 0) {
      return result;
    }
LABEL_5:
    result[6] = 1;
    return result;
  }

  result[4] = 1;
  if ((v1 & 0x8000) != 0) {
    goto LABEL_5;
  }
  return result;
}

double sub_F264(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5, uint64_t a6, int a7)
{
  int v7 = *(_DWORD *)(a6 + 136);
  int v8 = *(_DWORD *)(a6 + 140);
  unsigned int v9 = *(int **)(a6 + 80);
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 5u && (uint64_t v11 = v10[2]) != 0) {
    unsigned int v12 = *(int *)((char *)v9 + v11);
  }
  else {
    unsigned int v12 = 0;
  }
  int v13 = *(_DWORD *)(a6 + 48);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_DWORD *)(a1 + 40) = ((a3 << 8) & 0x40000 | (((a3 >> 14) & 1) << 21) | (v8 << 22)) ^ 0x200000;
  unsigned int v14 = v7 - 1;
  if (v14 > 5) {
    int v15 = 0;
  }
  else {
    int v15 = dword_70BA0[v14];
  }
  unsigned int v16 = v13 << 19;
  int v17 = *(unsigned __int8 *)(a2 + 3164) | 0xE92FF00;
  *(_DWORD *)(a1 + 44) = ((a3 << 13) & 0x200000 | v15) ^ 0x2E0000 | *(_DWORD *)(a2 + 3160);
  *(_DWORD *)(a1 + 48) = v17;
  v18.i32[1] = 1;
  v18.i32[0] = ((a4 << 21) + 6291456) & 0xFF800000 | ((a5 + 3) >> 2) | ((a7 << 6) + 768) & 0xFFFFFC00;
  *(int8x8_t *)(a1 + 72) = vorr_s8( vand_s8( (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v16, v12), (int32x2_t)0x7800000000000FLL),  (int8x8_t)0xFF800000FFFFFFF0LL),  v18);
  *(void *)(a1 + 124) = 0x40100001E3CE508LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)&double result = 0x100000060LL;
  *(void *)(a1 + 144) = 0x100000060LL;
  *(_DWORD *)(a1 + 36) = 15074403;
  *(_DWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  return result;
}

double sub_F3B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(a1 + 152) = 0LL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  int v4 = *(_DWORD *)(a3 + 136);
  int v5 = *(_DWORD *)(a3 + 140) << 22;
  *(_DWORD *)(a1 + 36) = 2491491;
  *(_DWORD *)(a1 + 40) = v5;
  unsigned int v6 = v4 - 1;
  if (v6 > 5) {
    int v7 = 3014656;
  }
  else {
    int v7 = dword_70BB8[v6];
  }
  uint64_t v8 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 12900) | v7;
  *(_DWORD *)(a1 + 48) = 244514560;
  *(_DWORD *)(a1 + 48) = *(unsigned __int8 *)(v8 + 13052) | 0xE92FF00;
  uint64_t v9 = *(void *)(*(void *)(a3 + 64) + 8LL);
  uint64_t v10 = *(void *)(v9 + 24);
  uint64_t v11 = *(void *)(v9 + 80);
  int v12 = *(_DWORD *)(a3 + 48);
  int v13 = *(int **)(a3 + 80);
  unsigned int v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0) {
    unsigned int v16 = (*(int *)((char *)v13 + v15) + 15) & 0xFFFFFFF0;
  }
  else {
    unsigned int v16 = 0;
  }
  *(_DWORD *)(a1 + 72) = ((a4 << 6) + 768) & 0xFFFFFC00 | (((_DWORD)v10 << 19) + 6291456) & 0xFF800000 | (((_DWORD)v11 << 12) + 49152) & 0xFFFF0000 | v16 | 1;
  *(_DWORD *)(a1 + 76) = ((v12 << 19) + 7864320) & 0xFF800000;
  *(void *)(a1 + 124) = 0x40100001E3CE508LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)&double result = 0x100000060LL;
  *(void *)(a1 + 144) = 0x100000060LL;
  *(_DWORD *)(a1 + 36) = 15074403;
  *(void *)(a1 + 180) = (((*(unsigned __int16 *)(**(void **)(a2 + 56) + 180LL) + 31) >> 5) - 1) | ((((*(unsigned __int16 *)(**(void **)(a2 + 56) + 178LL) << 13) + 253952) & 0x3FFC0000) - 0x40000);
  return result;
}

double sub_F518(uint64_t a1)
{
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_DWORD *)(a1 + 76) = 1;
  *(void *)(a1 + 124) = 0x40100001E3CE508LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 144) = 0x100000060LL;
  double result = 1.60333469e-290;
  *(_OWORD *)(a1 + 36) = xmmword_70250;
  *(_DWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  return result;
}

uint64_t sub_F56C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(int **)(a3 + 72);
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 < 0xBu)
  {
    LODWORD(v11) = 0;
  }

  else
  {
    uint64_t v11 = v10[5];
    if (v11) {
      LODWORD(v11) = *(int *)((char *)v9 + v11) << 24;
    }
  }

  int v12 = a1[32] | v11;
  a1[32] = v12;
  int v13 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v13 < 9u)
  {
    LODWORD(v14) = 0;
  }

  else
  {
    uint64_t v14 = v13[4];
    if (v14) {
      LODWORD(v14) = (*((_BYTE *)v9 + v14) != 0) << 18;
    }
  }

  int v15 = v14 | v12;
  a1[32] = v15;
  unsigned int v16 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v16 < 7u)
  {
    LODWORD(v17) = 0;
  }

  else
  {
    uint64_t v17 = v16[3];
    if (v17) {
      LODWORD(v17) = (*((_BYTE *)v9 + v17) != 0) << 16;
    }
  }

  a1[32] = v17 | v15;
  int v18 = a1[33] | sub_F9D0(v9);
  a1[33] = v18;
  unsigned int v19 = v18 | (sub_FA2C(v9) << 8);
  a1[33] = v19;
  a1[33] = v19 | (sub_FA88(v9) << 16);
  unsigned int v20 = a1[34] | (sub_FAE4(v9) << 8);
  a1[34] = v20;
  unsigned int v21 = v20 | (sub_FB40(v9) << 16);
  a1[34] = v21;
  a1[34] = v21 | (sub_FB9C(v9) << 24);
  uint64_t v25 = 0LL;
  int v22 = *(_DWORD *)(a2 + 248);
  int v26 = *(_DWORD *)(a2 + 244);
  int v27 = v22;
  v24[0] = v26;
  v24[1] = v22;
  return sub_30FC8((uint64_t)a1, a5, (uint64_t)&v25, (uint64_t)v24);
}

uint64_t sub_F70C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 152) = 0LL;
  *(_OWORD *)(result + 136) = 0u;
  *(_OWORD *)(result + 120) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  int v3 = *(_DWORD *)(a3 + 148);
  int v4 = *(_DWORD *)(a3 + 152) << 22;
  *(_DWORD *)(result + 36) = 2493539;
  *(_DWORD *)(result + 40) = v4;
  unsigned int v5 = v3 - 1;
  if (v5 > 5) {
    int v6 = 3014656;
  }
  else {
    int v6 = dword_70BB8[v5];
  }
  *(_DWORD *)(result + 44) = v6;
  *(_DWORD *)(result + 48) = 244514560;
  unsigned int v7 = ((*(_DWORD *)(a3 + 48) << 19) + 7864320) & 0xFF800000;
  unsigned int v8 = ((*(_DWORD *)(*(void *)(*(void *)(a3 + 64) + 8LL) + 80LL) << 12) + 49152) & 0xFFFF0000 | ((*(_DWORD *)(*(void *)(*(void *)(a3 + 64) + 8LL) + 24LL) << 19) + 6291456) & 0xFF800000;
  *(_DWORD *)(result + 72) = v8;
  *(_DWORD *)(result + 76) = v7;
  uint64_t v9 = *(void *)(*(void *)(a3 + 136) + 8LL);
  uint64_t v10 = *(void *)(v9 + 24);
  int v11 = *(_DWORD *)(v9 + 48);
  int v12 = *(int **)(a3 + 80);
  int v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 5u && (uint64_t v14 = v13[2]) != 0) {
    unsigned int v15 = (*(int *)((char *)v12 + v14) + 15) & 0xFFFFFFF0;
  }
  else {
    unsigned int v15 = 0;
  }
  *(_DWORD *)(result + 72) = (((_DWORD)v10 << 6) + 768) & 0xFFFFFC00 | ((v11 + 3) >> 2) | v15 | v8;
  *(void *)(result + 128) = 0LL;
  *(_DWORD *)(result + 136) = 0;
  *(void *)(result + 152) = 0LL;
  *(void *)(result + 144) = 0x100000040LL;
  *(_DWORD *)(result + 36) = 15076451;
  *(void *)(result + 180) = 0LL;
  unsigned int v16 = (((*(_DWORD *)(a2 + 244) << 13) + 253952) & 0xFFFC0000) - 0x40000;
  *(_DWORD *)(result + 180) = v16;
  *(_DWORD *)(result + 180) = (((*(_DWORD *)(a2 + 248) + 31) >> 5) - 1) | v16;
  return result;
}

_DWORD *sub_F86C(_DWORD *result, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  if (a6) {
    int v7 = 2;
  }
  else {
    int v7 = 0;
  }
  result[37] = v7 | a7 ^ 1;
  result[38] = ((a3 & 0xFFFFFFFC) + 15) & 0xFFFFFFF0 | ((unint64_t)(4 * a4 + 15) >> 4);
  result[39] = a2 & 0xFFFFFFF0;
  result[9] |= 0xC00000u;
  return result;
}

uint64_t sub_F8B8()
{
  return 12LL;
}

void sub_F8C0(uint64_t a1, unsigned int *a2, int a3, int a4)
{
  *a2 = (a3 + 15) & 0xFFFFFBF0 | 0x400;
  a2[1] = (a4 + 15) & 0xFFFFFFF0;
}

uint64_t sub_F8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, int a6)
{
  int v12 = *(_DWORD **)a3;
  size_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336LL))(a1);
  bzero(v12, v13);
  int v14 = v12[2];
  unsigned int v15 = ((a6 & 0xFFFFFFFC) + 15) & 0xFFFFFFF0 | v12[1] | 0x400;
  *int v12 = 0x800000;
  v12[1] = v15;
  v12[2] = v14 | a5 & 0xFFFFFFF0;
  uint64_t v16 = *(void *)(a2 + 3960);
  uint64_t v17 = *a4;
  uint64_t v18 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 336LL))(a1) >> 2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v16 + 72LL))( v16,  v17,  v18,  *(void *)(a3 + 8));
}

uint64_t sub_F99C(uint64_t result)
{
  *(_DWORD *)(result + 36) |= 0x3C0u;
  return result;
}

_DWORD *sub_F9AC(_DWORD *result, int a2, int a3, int a4, int a5, int a6)
{
  result[16] = a2 & 0xFFFFFFF0;
  result[17] = a3 & 0xFFFFFFF0;
  result[20] = a6 & 0xFFFFFFF0;
  result[21] = a4 & 0xFFFFFFF0;
  result[22] = a5 & 0xFFFFFFF0;
  return result;
}

uint64_t sub_F9D0(int *a1)
{
  int v1 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v1 < 0x11u)
  {
    int v2 = 0LL;
  }

  else
  {
    int v2 = (int *)v1[8];
    if (v2) {
      int v2 = (int *)((char *)v2 + (void)a1 + *(unsigned int *)((char *)v2 + (void)a1));
    }
  }

  int v3 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v3 >= 0xBu && (uint64_t v4 = v3[5]) != 0) {
    return *(unsigned int *)((char *)v2 + v4);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_FA2C(int *a1)
{
  int v1 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v1 < 0x11u)
  {
    int v2 = 0LL;
  }

  else
  {
    int v2 = (int *)v1[8];
    if (v2) {
      int v2 = (int *)((char *)v2 + (void)a1 + *(unsigned int *)((char *)v2 + (void)a1));
    }
  }

  int v3 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v3 >= 0xDu && (uint64_t v4 = v3[6]) != 0) {
    return *(unsigned int *)((char *)v2 + v4);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_FA88(int *a1)
{
  int v1 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v1 < 0x11u)
  {
    int v2 = 0LL;
  }

  else
  {
    int v2 = (int *)v1[8];
    if (v2) {
      int v2 = (int *)((char *)v2 + (void)a1 + *(unsigned int *)((char *)v2 + (void)a1));
    }
  }

  int v3 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v3 >= 0xFu && (uint64_t v4 = v3[7]) != 0) {
    return *(unsigned int *)((char *)v2 + v4);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_FAE4(int *a1)
{
  int v1 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v1 < 0x11u)
  {
    int v2 = 0LL;
  }

  else
  {
    int v2 = (int *)v1[8];
    if (v2) {
      int v2 = (int *)((char *)v2 + (void)a1 + *(unsigned int *)((char *)v2 + (void)a1));
    }
  }

  int v3 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v3 >= 5u && (uint64_t v4 = v3[2]) != 0) {
    return *(unsigned int *)((char *)v2 + v4);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_FB40(int *a1)
{
  int v1 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v1 < 0x11u)
  {
    int v2 = 0LL;
  }

  else
  {
    int v2 = (int *)v1[8];
    if (v2) {
      int v2 = (int *)((char *)v2 + (void)a1 + *(unsigned int *)((char *)v2 + (void)a1));
    }
  }

  int v3 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v3 >= 7u && (uint64_t v4 = v3[3]) != 0) {
    return *(unsigned int *)((char *)v2 + v4);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_FB9C(int *a1)
{
  int v1 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v1 < 0x11u)
  {
    int v2 = 0LL;
  }

  else
  {
    int v2 = (int *)v1[8];
    if (v2) {
      int v2 = (int *)((char *)v2 + (void)a1 + *(unsigned int *)((char *)v2 + (void)a1));
    }
  }

  int v3 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v3 >= 9u && (uint64_t v4 = v3[4]) != 0) {
    return *(unsigned int *)((char *)v2 + v4);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_FBF8(uint64_t result, unsigned int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _BYTE *a6)
{
  uint64_t v9 = result + 13324;
  *a3 &= 0xFFFFFF00;
  int v10 = *(unsigned __int16 *)(result + 13324 + 16LL * a2 + 10);
  if (v10 != 7680 || *(_WORD *)(v9 + 16LL * a2 + 12) != 7680) {
    *a6 = 1;
  }
  int v11 = 0;
  int v12 = 0;
  uint64_t v13 = v9 + 16LL * a2;
  int v14 = (unsigned __int16 *)(v13 + 14);
  unsigned int v15 = (unsigned __int16 *)(v13 + 12);
  do
  {
    switch(v11)
    {
      case 2:
        int v6 = *v14;
        char v7 = 16;
        break;
      case 1:
        int v6 = *v15;
        char v7 = 19;
        break;
      case 0:
        int v6 = v10;
        char v7 = 22;
        break;
    }

    if (v6 <= 7679)
    {
      if (v6 == 5386) {
        int v8 = 5;
      }
      if (!v6) {
        int v8 = 1;
      }
    }

    else
    {
      switch(v6)
      {
        case 7680:
          int v8 = 0;
          break;
        case 7681:
          int v8 = 2;
          break;
        case 7682:
          int v8 = 3;
          break;
        case 7683:
          int v8 = 4;
          break;
        default:
          if (v6 == 34056) {
            int v8 = 7;
          }
          if (v6 == 34055) {
            int v8 = 6;
          }
          break;
      }
    }

    v12 |= v8 << v7;
    ++v11;
  }

  while (v11 != 3);
  switch(*(_WORD *)(v9 + 16LL * a2 + 8))
  {
    case 0x200:
      int v16 = 0;
      goto LABEL_38;
    case 0x201:
      char v17 = 0;
      int v16 = 0x2000000;
      break;
    case 0x202:
      char v17 = 0;
      int v16 = 0x4000000;
      break;
    case 0x203:
      char v17 = 0;
      int v16 = 100663296;
      break;
    case 0x204:
      char v17 = 0;
      int v16 = 0x8000000;
      break;
    case 0x205:
      char v17 = 0;
      int v16 = 167772160;
      break;
    case 0x206:
      char v17 = 0;
      int v16 = 201326592;
      break;
    case 0x207:
      int v16 = 234881024;
LABEL_38:
      char v17 = 1;
      break;
    default:
      char v17 = 0;
      int v16 = 0;
      break;
  }

  *a4 = v12 | v16;
  if ((v12 & 0x1FF0000) == 0)
  {
    if ((v17 & 1) != 0) {
      goto LABEL_48;
    }
    int v18 = 4;
LABEL_47:
    *a5 |= v18;
    goto LABEL_48;
  }

  if (*(_BYTE *)(result + 4LL * a2 + 13052))
  {
    char v17 = 0;
    int v18 = 12;
  }

  else
  {
    int v18 = 4;
  }

  if ((v17 & 1) == 0) {
    goto LABEL_47;
  }
LABEL_48:
  uint64_t v19 = v9 + 16LL * a2;
  *a3 |= *(unsigned __int8 *)(v19 + 4);
  LODWORD(v19) = (*(_DWORD *)v19 << 8) | *a4;
  *a4 = v19;
  *a4 = *(unsigned __int8 *)(result + 4LL * a2 + 13052) | v19;
  return result;
}

uint64_t sub_FE74(uint64_t result, int a2, int a3, int a4)
{
  unsigned int v4 = a3 + 5;
  if (a4) {
    unsigned int v4 = a3 + 1;
  }
  if (v4 > 0x20)
  {
    if (v4 > 0x30)
    {
      if (v4 > 0x40)
      {
        int v5 = 0x20000000;
        int v6 = 1920;
      }

      else
      {
        int v5 = (dword_7C444 < 0x120) << 29;
        int v6 = 3968;
      }
    }

    else
    {
      int v5 = (dword_7C444 < 0x120) << 29;
      int v6 = 8064;
    }
  }

  else
  {
    int v5 = 0;
    else {
      int v6 = 8064;
    }
  }

  if (a4) {
    int v7 = 64;
  }
  else {
    int v7 = 0;
  }
  unsigned int v8 = v6 | v7 | *(_DWORD *)(result + 12) & 0xFFFF803F;
  unsigned int v9 = *(_DWORD *)(result + 32) & 0xC1FF03FF;
  *(_DWORD *)(result + 28) = a3;
  *(_DWORD *)(result + 32) = ((a2 << 8) + 960) & 0xFFFFFC00 | v5 | v9;
  *(_DWORD *)(result + 12) = v8 | 0x4000000;
  *(_BYTE *)(result + 8) = 1;
  return result;
}

BOOL sub_FF58(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  uint64_t v4 = *(void *)(a2 + 24);
  BOOL v5 = a3 == 5375 || *(_BYTE *)(v4 + 15444) == 0;
  int v6 = !v5;
  int v7 = (v3 >> 5) & 1;
  unsigned int v8 = *(_DWORD *)(a1 + 12);
  BOOL v5 = v7 == v6;
  BOOL v9 = v7 != v6;
  if (!v5)
  {
    if (v6) {
      int v10 = 32;
    }
    else {
      int v10 = 0;
    }
    unsigned int v8 = v10 | v3 & 0xFFFFFFDF;
    *(_DWORD *)(a1 + 12) = v8;
    *(_BYTE *)(a1 + 8) = 1;
  }

  if (v6)
  {
    int v11 = *(_DWORD *)(v4 + 15448);
    int v12 = (unsigned __int16)v11;
    if (a3 == 5121) {
      int v11 = v11;
    }
    if (a3 == 5123) {
      int v11 = v12;
    }
    if ((v3 & 0x20) == 0 || v11 != *(_DWORD *)(a1 + 16))
    {
      *(_DWORD *)(a1 + 12) = v8 | 0x10000000;
      *(_DWORD *)(a1 + 16) = v11;
      BOOL v9 = 1LL;
      *(_BYTE *)(a1 + 8) = 1;
    }
  }

  return v9;
}

uint64_t sub_FFFC(uint64_t result)
{
  *(_DWORD *)(result + 12) |= 0x1C000000u;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t sub_10014(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 8)) {
    return 0LL;
  }
  int v1 = *(_DWORD *)(a1 + 12);
  uint64_t v2 = 8LL;
  if ((v1 & 0x10000000) == 0) {
    uint64_t v2 = 4LL;
  }
  if ((v1 & 0x8000000) != 0) {
    v2 += 4LL;
  }
  if ((v1 & 0x4000000) != 0) {
    return v2 + 12;
  }
  else {
    return v2;
  }
}

uint64_t sub_10054(uint64_t result, _DWORD *a2)
{
  int v2 = *(_DWORD *)(result + 12);
  *a2 = v2;
  unsigned int v3 = a2 + 1;
  if ((v2 & 0x10000000) == 0)
  {
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    *v3++ = *(_DWORD *)(result + 20);
    *(_DWORD *)(result + 12) &= ~0x8000000u;
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  unsigned int v3 = a2 + 2;
  a2[1] = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 12) &= ~0x10000000u;
  if ((v2 & 0x8000000) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v2 & 0x4000000) != 0)
  {
LABEL_4:
    uint64_t v4 = *(void *)(result + 24);
    v3[2] = *(_DWORD *)(result + 32);
    *(void *)unsigned int v3 = v4;
    *(_DWORD *)(result + 12) &= ~0x4000000u;
  }

LABEL_5:
  *(_BYTE *)(result + 8) = 0;
  return result;
}

  a1[60] = v5;
  if ((*v2 & 0x800) == 0) {
    return result;
  }
  double result = sub_17C10(a1);
  else {
    int v6 = result;
  }
LABEL_10:
  a1[60] = v6;
  return result;
}

  *(_BYTE *)(result + 8) = 0;
  return result;
}

void sub_100C8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *a2 = HIDWORD(a3) | 0x80000000;
  a2[1] = a3 & 0xFFFFFFFC;
}

void sub_100DC(uint64_t a1, int *a2, int a3)
{
  if (a3) {
    int v3 = -536805376;
  }
  else {
    int v3 = -536870912;
  }
  *a2 = v3;
}

void sub_100F4(uint64_t a1, int *a2, int a3, uint64_t a4)
{
  *a2 = HIDWORD(a4) | (a3 << 8);
  a2[1] = a4 & 0xFFFFFFFC;
}

void sub_10108(uint64_t a1, _DWORD *a2)
{
  *a2 = -1073741824;
}

uint64_t sub_10114(uint64_t a1, unsigned int a2)
{
  if (a2 > 6) {
    return 0LL;
  }
  else {
    return dword_70BD0[a2];
  }
}

void sub_10134(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  if (a5) {
    int v6 = 234881024;
  }
  else {
    int v6 = 167772160;
  }
  *a2 = v6 | (a3 << 8) | 0x60000000;
  a2[1] = a4;
  if (a5)
  {
    a2[2] = a5 - 1;
    uint64_t v7 = 3LL;
  }

  else
  {
    uint64_t v7 = 2LL;
  }

  a2[v7] = a6;
}

void sub_10170(uint64_t a1, int *a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  if (a8 == 5123) {
    int v8 = 503447552;
  }
  else {
    int v8 = 503316480;
  }
  if (a8 == 5125) {
    int v8 = 503578624;
  }
  *a2 = HIDWORD(a5) | (a3 << 8) | v8 | 0x60000000;
  a2[1] = a5;
  a2[2] = a4;
  a2[3] = a6 - 1;
  a2[4] = a7;
}

uint64_t sub_101B8(uint64_t result, int a2, int a3, int a4)
{
  *(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 32) = (16 * a2 + 60) & 0xFFFFFFC0 | ((a3 + 15) >> 4) | *(_DWORD *)(result + 32) & 0xFFFFFC00;
  *(_DWORD *)(result + 12) |= 0x4000000u;
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t sub_101F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  *(_DWORD *)(result + 12) |= 0x8000000u;
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t sub_10214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 12) = 1073741828LL;
  int v8 = *(int **)(a2 + 80);
  BOOL v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 5u && (uint64_t v10 = v9[2]) != 0) {
    uint64_t v11 = *(unsigned int *)((char *)v8 + v10);
  }
  else {
    uint64_t v11 = 0LL;
  }
  int v12 = *(int **)(a2 + 72);
  uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 0xBu && (uint64_t v14 = v13[5]) != 0) {
    uint64_t v15 = *(unsigned int *)((char *)v12 + v14);
  }
  else {
    uint64_t v15 = 0LL;
  }
  (**(void (***)(uint64_t, uint64_t, uint64_t, void))a1)(a1, v11, v15, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 112LL))(a1, 1LL, 32LL, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a4);
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t sub_102F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 12) = 1073741828LL;
  uint64_t v9 = *(unsigned int *)(a3 + 40);
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t v11 = *(int **)(a2 + 80);
  int v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 5u && (uint64_t v13 = v12[2]) != 0) {
    uint64_t v14 = *(unsigned int *)((char *)v11 + v13);
  }
  else {
    uint64_t v14 = 0LL;
  }
  uint64_t v15 = *(int **)(a2 + 72);
  int v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 0xBu && (uint64_t v17 = v16[5]) != 0) {
    uint64_t v18 = *(unsigned int *)((char *)v15 + v17);
  }
  else {
    uint64_t v18 = 0LL;
  }
  (**(void (***)(uint64_t, uint64_t, uint64_t, void))a1)(a1, v14, v18, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 112LL))(a1, v9, v10, a4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a5);
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

void sub_103E4(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  *a2 = ((a4 << 12) + 64512) & 0xFFFF03FF | ((unint64_t)(a3 + 15) >> 4) | 0x20000000;
  a2[1] = (a6 + 15) & 0xFFFFFFF0;
  a2[2] = (a5 + 15) & 0xFFFFFFF0;
}

void sub_1041C(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  *a2 = ((a4 << 6) + 960) & 0xFFFFFC3F | ((unint64_t)(a3 + 15) >> 4) | 0x22000000;
  a2[1] = (a6 + 15) & 0xFFFFFFF0 | 5;
  a2[2] = (a5 + 15) & 0xFFFFFFF0;
}

void sub_1045C(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  *a2 = ((a4 << 6) + 960) & 0xFFFFFC3F | ((unint64_t)(a3 + 15) >> 4) | 0x20800000;
  a2[1] = (a6 + 15) & 0xFFFFFFF0 | 1;
  a2[2] = (a5 + 15) & 0xFFFFFFF0;
}

void sub_1049C(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  *a2 = ((a4 << 6) + 960) & 0xFFFFFC3F | ((unint64_t)(a3 + 15) >> 4) | 0x20000000;
  a2[1] = (a6 + 15) & 0xFFFFFFF0 | 5;
  a2[2] = (a5 + 15) & 0xFFFFFFF0;
}

void sub_104D8(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, int a5)
{
  *a2 = ((unint64_t)(a3 + 15) >> 4) | 0x22000040;
  a2[1] = (a5 + 15) & 0xFFFFFFF0 | 5;
  a2[2] = (a4 + 15) & 0xFFFFFFF0;
}

void sub_1050C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(a3 + 8);
  a2[6] = *(void *)a3;
  a2[7] = v4;
  uint64_t v5 = *(unsigned int *)(a4 + 8);
  a2[9] = *(void *)a4;
  a2[10] = v5;
}

void sub_10528(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  *(void *)(a2 + 64) = *a3;
  *(void *)(a2 + 88) = *a4;
}

void sub_1053C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  *a2 = (a4 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  *a3 = (a5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
}

void sub_10558(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  *a2 = (4 * a4 + 60) & 0xFFFFFFC3 | ((unint64_t)(a3 + 15) >> 4) | 0x20000000;
  a2[1] = (a6 + 15) & 0xFFFFFFF0 | 5;
  a2[2] = (a5 + 15) & 0xFFFFFFF0;
}

uint64_t sub_10594(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a5 + 56);
  int v10 = sub_25A80( a2,  6LL,  (*(void *)(a5 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)__dst,  0);
  uint64_t result = 0LL;
  if (v10)
  {
    memcpy(__dst[0], *(const void **)(a5 + 16), *(void *)(a5 + 24));
    uint64_t v12 = *(void *)(*(void *)(a5 + 64) + 8LL);
    uint64_t v14 = *(void *)(v12 + 16);
    uint64_t v13 = *(void *)(v12 + 24);
    uint64_t v15 = *(unsigned int *)(a5 + 88);
    v30[0] = 0LL;
    v30[1] = 0LL;
    uint64_t v28 = 0LL;
    unint64_t v29 = 0LL;
    int v26 = 0LL;
    uint64_t v27 = 0LL;
    if (!v14 || (v16 = sub_25A80(a2, 6LL, v14, 16LL, 0LL, (uint64_t *)&v28, 0), uint64_t result = 0LL, v16))
    {
      if (!v13 || (v17 = sub_25A80(a2, 6LL, v13, 16LL, 0LL, (uint64_t *)&v26, 0), uint64_t result = 0LL, v17))
      {
        if (!(_DWORD)v15 || (v18 = sub_25A80(a2, 5LL, v15, 4LL, 0LL, v30, 0), uint64_t result = 0LL, v18))
        {
          sub_67420(a5);
          if (v14) {
            memcpy(v28, *(const void **)(v12 + 32), *(void *)(v12 + 16));
          }
          if (v13) {
            memcpy(v26, *(const void **)(v12 + 40), *(void *)(v12 + 24));
          }
          if (a4) {
            *a4 = v30[0];
          }
          uint64_t v19 = *(void *)(*(void *)(a2 + 2536) + 168LL);
          int v20 = sub_25A80(a2, 6LL, *(void *)(v19 + 8), 16LL, 0LL, (uint64_t *)v31, 0);
          uint64_t result = 0LL;
          if (v20)
          {
            unsigned int v21 = *(int **)(a5 + 40);
            int v22 = (unsigned __int16 *)((char *)v21 - *v21);
            if (*v22 >= 5u && (uint64_t v23 = v22[2]) != 0) {
              uint64_t v24 = *(unsigned int *)((char *)v21 + v23);
            }
            else {
              uint64_t v24 = 0LL;
            }
            (*(void (**)(uint64_t, void *, uint64_t, uint64_t, void))(*(void *)v19 + 16LL))( v19,  __dst[1],  v24,  v9,  0LL);
            uint64_t v25 = (char *)v31[0];
            memcpy(v31[0], *(const void **)(v19 + 40), *(void *)(v19 + 24));
            memcpy(&v25[*(void *)(v19 + 24)], *(const void **)(v19 + 32), *(void *)(v19 + 16));
            *a3 = (unint64_t)v31[1] & 0xFFFFFFFFFFFFFFF0LL | (v29 >> 4 << 36);
            a3[1] = 0LL;
            a3[2] = v27 & 0xFFFFFFFFFFFFFFF0LL;
            a3[3] = ((*(void *)(v12 + 24) << 19) + 6291456LL) & 0xFFFFFFFFFF800000LL | ((*(_DWORD *)(v12 + 48) + 3) >> 2) | ((unint64_t)((*(_DWORD *)(a5 + 48) + 15) >> 4) << 55);
            return 1LL;
          }
        }
      }
    }
  }

  return result;
}

double sub_10824()
{
  uint64_t v0 = operator new(0x10uLL);
  double result = 0.0078125;
  v0[1] = 0x3F80000000000300LL;
  void *v0 = off_78AA0;
  return result;
}

double sub_10854()
{
  uint64_t v0 = (char *)operator new(0xC8uLL);
  *(void *)uint64_t v0 = off_78830;
  *(void *)(v0 + 36) = 0x400000020003FLL;
  double result = 0.0;
  *(_OWORD *)(v0 + 44) = 0u;
  *(_OWORD *)(v0 + 60) = 0u;
  *(_OWORD *)(v0 + 76) = 0u;
  *(_OWORD *)(v0 + 92) = 0u;
  *(_OWORD *)(v0 + 108) = 0u;
  *((_DWORD *)v0 + 31) = 507307272;
  *((void *)v0 + 16) = 0LL;
  *((void *)v0 + 17) = 0LL;
  *((_DWORD *)v0 + 36) = 1440;
  *(void *)(v0 + 148) = 0LL;
  *((_DWORD *)v0 + 39) = 0;
  *((_DWORD *)v0 + 47) = 0;
  *((_WORD *)v0 + 96) = 0;
  *((void *)v0 + 2) = 0LL;
  *((_DWORD *)v0 + 6) = 0;
  return result;
}

uint64_t sub_108CC(int a1, _DWORD *a2, int *a3, unsigned int *a4, _DWORD *a5)
{
  *a2 = 16;
  if (byte_7C00B) {
    int v5 = 24592;
  }
  else {
    int v5 = 12304;
  }
  *a3 = v5;
  unsigned int v6 = v5 + ((a1 + 15) & 0xFFFFFFF0);
  *a4 = v6;
  *a5 = v6 + 496;
  return v6 + 652;
}

double sub_10910()
{
  uint64_t v0 = (char *)operator new(0x30uLL);
  v0[8] = 1;
  *(void *)uint64_t v0 = off_789B8;
  *(void *)(v0 + 28) = 0LL;
  *(void *)(v0 + 20) = 0LL;
  *(void *)&double result = 1073741828LL;
  *(void *)(v0 + 12) = 1073741828LL;
  *((_DWORD *)v0 + 9) = 0;
  *((_DWORD *)v0 + 10) = 0;
  return result;
}

uint64_t sub_10954(uint64_t result, uint64_t a2, char *a3, unsigned int *a4, uint64_t a5)
{
  int v8 = (unsigned __int8 *)result;
  uint64_t v521 = result;
  if (xmmword_7C430 == 2)
  {
    uint64_t v10 = *(void *)result;
    if ((**(_WORD **)result & 0x800) != 0)
    {
      sub_132A0((void *)result);
      uint64_t v13 = *(__IOSurface **)(*(void *)v8 + 256LL);
      int PlaneCount = IOSurfaceGetPlaneCount(v13);
      if (PlaneCount)
      {
        double result = IOSurfaceLockPlane(v13, *(unsigned __int16 *)(*(void *)v8 + 248LL), 1LL, 0LL);
        if ((_DWORD)result) {
          return result;
        }
      }

      else
      {
        double result = IOSurfaceLock(v13, 1u, 0LL);
        if ((_DWORD)result) {
          return result;
        }
      }

      buffer = v13;
      uint64_t v10 = *(void *)v8;
    }

    else
    {
      int PlaneCount = 0;
      buffer = 0LL;
    }

    xmmword_7C350(*(unsigned __int16 *)(v10 + 192));
    char v142 = 0;
    uint64_t v143 = 0LL;
    char v531 = 1;
    v464 = a4;
    uint64_t v447 = a2 + 32;
    uint64_t v534 = a5;
    while (1)
    {
      xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL));
      uint64_t v144 = *(void *)&v8[8 * v143 + 392];
      glgConvertType(*a4, a4[1], v549, &v547);
      glgConvertType(*(unsigned int *)(v144 + 24), *(unsigned int *)(v144 + 28), &v548, &v546);
      if (xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL))
        && (((v549[0] == 13) & v142) != 0 || ((v549[0] == 14) & v531) != 0))
      {
        goto LABEL_401;
      }

      char v467 = v142;
      BOOL v145 = *a4 != *(_DWORD *)(v144 + 24) || a4[1] != *(_DWORD *)(v144 + 28);
      uint64_t v491 = v144;
      int v146 = *(_DWORD *)(a5 + 36);
      int v147 = *(_DWORD *)(a5 + 40);
      unsigned int v149 = *(_DWORD *)(a5 + 24);
      uint64_t v148 = *(unsigned int *)(a5 + 28);
      uint64_t v150 = *(void *)v521 + 480LL * v149 + 32 * v148;
      v151 = (unsigned __int16 *)(v150 + 270);
      v152 = (unsigned __int16 *)(v150 + 268);
      if ((v147 & 1) != 0) {
        v153 = v152;
      }
      else {
        v153 = v151;
      }
      if ((v147 & 1) != 0) {
        v152 = v151;
      }
      uint64_t v154 = *v152;
      unsigned int v497 = *v153;
      uint64_t v509 = *(void *)v521;
      BOOL v155 = (*(_DWORD *)(v521 + 368) - 1) > 1 || IOSurfaceIsTiled(buffer) != 0;
      int v156 = ((_BYTE)v147 + (_BYTE)v146) & 3;
      int v157 = *(unsigned __int8 *)(a5 + 32);
      uint64_t v494 = *(unsigned __int8 *)(v491 + 57);
      if (v156) {
        int v158 = v145;
      }
      else {
        int v158 = 1;
      }
      if (v155 || v145) {
        int v159 = v145;
      }
      else {
        int v159 = v158;
      }
      int v488 = v159;
      int v476 = v156;
      if (*(_BYTE *)(a5 + 32))
      {
        int v8 = (unsigned __int8 *)v521;
        switch(v156)
        {
          case 1:
            goto LABEL_239;
          case 2:
LABEL_241:
            int v160 = *(_DWORD *)(a5 + 12);
            unsigned int v470 = v154 - (*(_DWORD *)a5 + v160);
            int v479 = *(_DWORD *)(a5 + 16);
            int v161 = *(_DWORD *)(a5 + 4) + v479;
            goto LABEL_242;
          case 3:
            goto LABEL_240;
        }
      }

      else
      {
        int v8 = (unsigned __int8 *)v521;
        switch(v156)
        {
          case 1:
LABEL_240:
            unsigned int v162 = *(_DWORD *)a5;
            int v160 = *(_DWORD *)(a5 + 16);
            int v479 = *(_DWORD *)(a5 + 12);
            unsigned int v470 = v154 - (*(_DWORD *)(a5 + 4) + v160);
            goto LABEL_244;
          case 2:
            goto LABEL_241;
          case 3:
LABEL_239:
            unsigned int v470 = *(_DWORD *)(a5 + 4);
            int v160 = *(_DWORD *)(a5 + 16);
            int v479 = *(_DWORD *)(a5 + 12);
            int v161 = *(_DWORD *)a5 + v479;
LABEL_242:
            unsigned int v162 = v497 - v161;
            goto LABEL_244;
        }
      }

      unsigned int v162 = *(_DWORD *)(a5 + 4);
      unsigned int v470 = *(_DWORD *)a5;
      int v160 = *(_DWORD *)(a5 + 12);
      int v479 = *(_DWORD *)(a5 + 16);
LABEL_244:
      vImagePixelCount v473 = v160 * v8[384];
      v163 = (char *)sub_13374(v8, *(_DWORD *)(a5 + 28), *(_DWORD *)(a5 + 24), 0, v143);
      if (v155)
      {
        uint64_t v503 = (uint64_t)v163;
        int v164 = v476;
        int v165 = v488;
        if (v476) {
          int v165 = 1;
        }
        unsigned int v459 = v154;
        if (v165 == 1)
        {
          v166 = (char *)malloc_zone_malloc( (malloc_zone_t *)qword_7C218,  v494 * (unint64_t)(v473 * v479)
                         * *(unsigned int *)(a5 + 20));
          unsigned int v167 = v497;
          if (!v166) {
            goto LABEL_602;
          }
          unint64_t v526 = v494 * (unint64_t)(v473 * v479);
          unint64_t v168 = v494 * (unint64_t)v473;
          ptrb = v166;
          v169 = v166;
          int v164 = v476;
          unsigned int v170 = v479;
          uint64_t v154 = v154;
        }

        else
        {
          ptrb = 0LL;
          unint64_t v168 = *((void *)a4 + 1);
          unint64_t v526 = *((void *)a4 + 2);
          v169 = a3;
          unsigned int v167 = v497;
          unsigned int v170 = v479;
        }

        unsigned int v179 = v167 - v170 - v162;
        unsigned int v180 = v162;
        if (v157) {
          int64_t v181 = -(uint64_t)v168;
        }
        else {
          int64_t v181 = v168;
        }
        if (v157) {
          v182 = &v169[v168 * (v170 - 1)];
        }
        else {
          v182 = v169;
        }
        if (v157) {
          unsigned int v183 = v179;
        }
        else {
          unsigned int v183 = v180;
        }
        if (dword_7C420 == 1) {
          unsigned int v184 = *(_DWORD *)(v491 + 48);
        }
        else {
          unsigned int v184 = *(_DWORD *)(v491 + 48) & 0xFFFF7FFF;
        }
        int v185 = *((_DWORD *)v8 + 92);
        if ((v185 - 3) < 7)
        {
          unsigned int v453 = v183;
          v186 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v491 + 60));
          unsigned int v187 = *v186;
          uint64_t v188 = v186[1];
          BOOL v440 = sub_13624(v8);
          if (v440)
          {
            int v510 = *(unsigned __int16 *)(*(void *)v8 + 194LL);
            int v435 = *(unsigned __int16 *)(*(void *)v8 + 196LL);
            int64_t v517 = v181;
            unsigned __int16 v189 = sub_138D8(v8);
            unsigned __int8 v429 = v8[384] * *(_BYTE *)(v491 + 57);
            unsigned __int8 v190 = v8[385];
            unsigned int v191 = v184;
            char v192 = *(_BYTE *)(v491 + 56);
            char v193 = sub_1393C(v8);
            char v412 = v192;
            unsigned int v184 = v191;
            unsigned __int16 v194 = v189;
            int64_t v181 = v517;
            unsigned __int8 v195 = v190;
            LODWORD(v154) = v459;
            sub_139BC( (uint64_t)&src,  v510,  v435,  v187,  v188,  v194,  v429,  v195,  v412,  v193,  (*((_DWORD *)v8 + 92) & 0xFFFFFFFE) == 8,  dword_7C4B8,  xmmword_7C430);
          }

          v196 = sub_3F3D0(v548, v546, v8[384], v494, v184);
          if (sub_1393C(v8))
          {
            uint64_t v197 = *(void *)v8;
            unsigned int v198 = 1 << -(char)__clz( (v188 + *(unsigned __int16 *)(*(void *)v8 + 196LL) - 1)
                               / v188
                               - 1);
            int v199 = *(_DWORD *)(a5 + 28);
            unsigned int v200 = (1 << -(char)__clz((v187 + *(unsigned __int16 *)(*(void *)v8 + 194LL) - 1) / v187 - 1)) >> v199;
            if (v200 <= 1) {
              uint64_t v201 = 1LL;
            }
            else {
              uint64_t v201 = v200;
            }
            LODWORD(v202) = v198 >> v199;
            if (v198 >> v199 <= 1) {
              uint64_t v202 = 1LL;
            }
            else {
              uint64_t v202 = v202;
            }
          }

          else
          {
            unsigned int v205 = 1 << -(char)__clz(v154 - 1);
            else {
              uint64_t v201 = v205;
            }
            unsigned int v206 = 1 << -(char)__clz(v497 - 1);
            if (v497 < 2) {
              uint64_t v202 = 1LL;
            }
            else {
              uint64_t v202 = v206;
            }
            v181 *= v188;
            uint64_t v197 = *(void *)v8;
          }

          v207 = v182;
          uint64_t v208 = v202;
          uint64_t v209 = v201;
          int64_t v210 = v181;
          if ((*(_WORD *)(v197 + 214) & 0x2000) != 0) {
            uint64_t v211 = sub_13BA8((uint64_t)v8, v143);
          }
          else {
            uint64_t v211 = 0LL;
          }
          uint64_t v212 = v470;
          uint64_t v213 = v459;
          uint64_t v214 = v453;
          if (*(_DWORD *)(a5 + 20))
          {
            v215 = v196;
            uint64_t v216 = v209;
            uint64_t v217 = v208;
            v218 = v207;
            unsigned int v219 = 0;
            uint64_t v220 = v503 + v211 * *(unsigned int *)(v534 + 8);
            p_vImage_Buffer src = &src;
            if (!v440) {
              p_vImage_Buffer src = 0LL;
            }
            v504 = p_src;
            uint64_t v511 = v211;
            do
            {
              int64_t v417 = v210;
              uint64_t v222 = v213;
              uint64_t v223 = v212;
              uint64_t v224 = v214;
              ((void (*)(uint64_t, char *, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void, int64_t, vImage_Buffer *, void))v215)( v220,  v218,  v213,  v497,  v216,  v217,  v212,  v214,  *(void *)(v534 + 12),  v417,  v504,  0LL);
              uint64_t v214 = v224;
              uint64_t v213 = v222;
              uint64_t v212 = v223;
              int64_t v210 = v181;
              v220 += v511;
              v218 += v526;
              ++v219;
            }

            while (v219 < *(_DWORD *)(v534 + 20));
          }

          int v8 = (unsigned __int8 *)v521;
          a5 = v534;
          int v164 = v476;
          unsigned int v170 = v479;
          vImagePixelCount v178 = v473;
          goto LABEL_336;
        }

        unsigned int v460 = v184;
        vImagePixelCount v178 = v473;
        if ((v185 - 1) < 2)
        {
          int v203 = *(unsigned __int8 *)(v491 + 57);
          unint64_t v204 = sub_13498(v8, buffer, v143);
          if (v203 == 1)
          {
            sub_688D8(v182, v181 / v494, v503, v204, 0, v470, v183, v473, v479);
          }

          else if (v203 == 4)
          {
            sub_6862C(v182, v181 / v494, v503, v204, 0, v470, v183, v473, v479);
          }

          else
          {
            sub_68380(v182, v181 / v494, v503, v204, 0, v470, v183, v473, v479);
          }

          goto LABEL_335;
        }

        if (v185 == 10)
        {
          int64_t v518 = v181;
          unsigned int v454 = v183;
          v225 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v491 + 60));
          unsigned int v226 = *v225;
          unsigned int v227 = v225[1];
          BOOL v228 = sub_13624(v8);
          if (v228)
          {
            int v430 = *(unsigned __int16 *)(*(void *)v8 + 196LL);
            int v436 = *(unsigned __int16 *)(*(void *)v8 + 194LL);
            unsigned __int16 v441 = *(_WORD *)(*(void *)v8 + 198LL);
            unsigned __int8 v424 = v8[384] * *(_BYTE *)(v491 + 57);
            unsigned __int8 v421 = v8[385];
            char v229 = *(_BYTE *)(v491 + 56);
            char v230 = sub_1393C(v8);
            char v413 = v229;
            vImagePixelCount v178 = v473;
            sub_139BC( (uint64_t)&src,  v436,  v430,  v226,  v227,  v441,  v424,  v421,  v413,  v230,  0,  dword_7C4B8,  xmmword_7C430);
          }

          if (sub_1393C(v8))
          {
            unsigned int v231 = 1 << -(char)__clz((v227 + *(unsigned __int16 *)(*(void *)v8 + 196LL) - 1) / v227 - 1);
            int v232 = *(_DWORD *)(a5 + 28);
            unsigned int v233 = (1 << -(char)__clz((v226 + *(unsigned __int16 *)(*(void *)v8 + 194LL) - 1) / v226 - 1)) >> v232;
            if (v233 <= 1) {
              unsigned int v233 = 1;
            }
            unsigned int v442 = v233;
            unsigned int v234 = v231 >> v232;
            if (v234 <= 1) {
              uint64_t v235 = 1LL;
            }
            else {
              uint64_t v235 = v234;
            }
          }

          else
          {
            int v236 = 1 << -(char)__clz(v154 - 1);
            unsigned int v442 = v236;
            unsigned int v237 = 1 << -(char)__clz(v497 - 1);
            if (v497 >= 2) {
              uint64_t v235 = v237;
            }
            else {
              uint64_t v235 = 1LL;
            }
          }

          uint64_t v238 = v546;
          if ((v460 & 0x8000) != 0)
          {
            if ((_DWORD)v494 == 4)
            {
              v243 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_62094;
              if ((v460 & 0x100000) == 0)
              {
                v244 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_61E84;
                if (v546 != 1) {
                  v244 = 0LL;
                }
                if (v546) {
                  v243 = v244;
                }
                else {
                  v243 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_61F8C;
                }
              }
            }

            else
            {
              if ((_DWORD)v494 == 8)
              {
                BOOL v240 = (v460 & 0x100000) == 0;
                v241 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_61D7C;
                v242 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_61C74;
              }

              else
              {
                if ((_DWORD)v494 != 16) {
                  goto LABEL_321;
                }
                BOOL v240 = (v460 & 0x100000) == 0;
                v241 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_61B6C;
                v242 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_61A64;
              }

              if (v240) {
                v243 = v242;
              }
              else {
                v243 = v241;
              }
            }
          }

          else if (v548 == 20)
          {
            if (v546 < 0x10)
            {
              v239 = off_79CF0;
              goto LABEL_320;
            }

LABEL_321:
            v243 = 0LL;
          }

          else
          {
            uint64_t v238 = v494 - 1;
            v239 = off_79D70;
LABEL_320:
            v243 = v239[v238];
          }

          uint64_t v245 = *(unsigned __int16 *)(v509 + 480LL * v149 + 32 * v148 + 272);
          uint64_t v246 = sub_13C1C((uint64_t)v8);
          v247 = &src;
          if (!v228) {
            v247 = 0LL;
          }
          ((void (*)(uint64_t, char *, uint64_t, void, uint64_t, void, uint64_t, uint64_t, unint64_t, void, void, int64_t, unint64_t, vImage_Buffer *, void))v243)( v503,  v182,  v154,  v497,  v245,  v442,  v235,  v246,  __PAIR64__(v454, v470),  *(void *)(a5 + 8),  *(void *)(a5 + 16),  v518,  v526,  v247,  0LL);
LABEL_335:
          int v164 = v476;
          unsigned int v170 = v479;
        }

LABEL_336:
        BOOL v176 = 0;
        unsigned int v162 = 0;
        unsigned int v177 = 0;
        v175 = ptrb;
        if (ptrb) {
          v173 = ptrb;
        }
        else {
          v173 = a3;
        }
        unint64_t v174 = v494 * (unint64_t)v178;
        a4 = v464;
        goto LABEL_340;
      }

      v171 = v163;
      sub_132A0(v8);
      uint64_t v172 = sub_13C90((uint64_t)v8, *(__IOSurface **)(*(void *)v8 + 256LL), v143);
      v173 = v171;
      unint64_t v174 = v172;
      v175 = 0LL;
      BOOL v176 = v157 != 0;
      int v164 = v476;
      unsigned int v170 = v479;
      unsigned int v177 = v470;
      vImagePixelCount v178 = v473;
LABEL_340:
      ptrc = v175;
      if (v164)
      {
        if (v164 == 2) {
          vImagePixelCount v248 = v178;
        }
        else {
          vImagePixelCount v248 = v170;
        }
        if (v164 == 2) {
          vImagePixelCount v249 = v170;
        }
        else {
          vImagePixelCount v249 = v178;
        }
        if (v488)
        {
          unsigned int v250 = v162;
          v251 = v173;
          unsigned int v252 = v177;
          size_t v253 = v494 * (unint64_t)v248;
          v254 = (char *)malloc_zone_malloc((malloc_zone_t *)qword_7C218, (v249 * v253));
          if (!v254) {
            goto LABEL_602;
          }
          int v164 = v476;
          unsigned int v170 = v479;
          unsigned int v177 = v252;
          vImagePixelCount v178 = v473;
          v173 = v251;
          unsigned int v162 = v250;
          v255 = v254;
        }

        else
        {
          v254 = 0LL;
          size_t v253 = *((void *)a4 + 1);
          v255 = a3;
        }

        unint64_t v256 = v174 * (v497 - 1);
        if (!v176) {
          unint64_t v256 = 0LL;
        }
        v257 = &v173[v256];
        if (v176) {
          size_t v258 = -(uint64_t)v174;
        }
        else {
          size_t v258 = v174;
        }
        src.data = &v257[v258 * v162 + v494 * (unint64_t)v177];
        src.height = v170;
        src.width = v178;
        src.rowBytes = v258;
        dest.data = v255;
        dest.height = v249;
        dest.width = v248;
        dest.rowBytes = v253;
        if ((v164 | 2) == 3) {
          LOBYTE(v164) = 4 - v164;
        }
        v527 = v254;
        switch((_DWORD)v494)
        {
          case 4:
            *(_DWORD *)backColor = 0;
            vImageRotate90_ARGB8888(&src, &dest, v164, backColor, 0x10u);
            break;
          case 2:
            vImageRotate90_Planar16U(&src, &dest, v164, 0, 0x10u);
            break;
          case 1:
            vImageRotate90_Planar8(&src, &dest, v164, 0, 0x10u);
            break;
        }

        BOOL v176 = 0;
        unsigned int v162 = 0;
        unsigned int v177 = 0;
        unint64_t v174 = (int)v253;
        unsigned int v170 = v249;
        LODWORD(v178) = v248;
        int v8 = (unsigned __int8 *)v521;
        v175 = ptrc;
      }

      else
      {
        v527 = 0LL;
        v255 = v173;
      }

      if (v488)
      {
        unsigned int v259 = a4[2];
        if ((v467 & 1) != 0)
        {
          unsigned int v260 = v170;
          int v261 = v178;
          unsigned int v262 = v177;
          v263 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, v170 * v259);
          unsigned int v177 = v262;
          LODWORD(v178) = v261;
          unsigned int v170 = v260;
          v264 = v263;
          vImagePixelCount v265 = (vImagePixelCount)v263;
          v266 = a3;
          if (!v263) {
LABEL_602:
          }
            abort();
        }

        else
        {
          v264 = 0LL;
          v266 = 0LL;
          vImagePixelCount v265 = (vImagePixelCount)a3;
        }

        int v267 = *(_DWORD *)(v491 + 48);
        int v541 = 2147479551;
        int v542 = v178;
        unsigned int v543 = v170;
        int v537 = v549[0];
        int v538 = v547;
        int v540 = v267;
        int v539 = 2;
        src.rowBytes = __PAIR64__(v259, v546);
        v268 = &v255[(int)v174 * (unint64_t)(v497 - 1)];
        if (v176) {
          int v269 = -(int)v174;
        }
        else {
          int v269 = v174;
        }
        if (!v176) {
          v268 = v255;
        }
        src.width = __PAIR64__(v548, v269);
        src.data = &v268[v269 * (unint64_t)v162 + v494 * (unint64_t)v177];
        src.height = v265;
        int v8 = (unsigned __int8 *)v521;
        if (*(_DWORD *)(a5 + 20))
        {
          unsigned int v270 = 0;
          unint64_t v271 = v174 * v170;
          do
          {
            glgProcessPixelsWithProcessor(v447, 0LL, &src);
            src.data = (char *)src.data + v271;
            if ((v531 & 1) != 0)
            {
              src.height += *((void *)a4 + 2);
            }

            else
            {
              if (v547 == 25)
              {
                unint64_t v272 = *((void *)a4 + 2);
                if (v272)
                {
                  for (unint64_t i = 0LL; i < v272; i += 4LL)
                  {
                    v266[i] = v264[i];
                    unint64_t v272 = *((void *)a4 + 2);
                  }
                }
              }

              else if (v547 == 27)
              {
                unint64_t v272 = *((void *)a4 + 2);
                if (v272)
                {
                  for (unint64_t j = 0LL; j < v272; j += 8LL)
                  {
                    v266[j + 4] = v264[j + 4];
                    unint64_t v272 = *((void *)a4 + 2);
                  }
                }
              }

              else
              {
                unint64_t v272 = *((void *)a4 + 2);
              }

              v266 += v272;
            }

            ++v270;
          }

          while (v270 < *(_DWORD *)(a5 + 20));
        }

        v175 = ptrc;
      }

      else
      {
        v264 = 0LL;
      }

      if (v175) {
        malloc_zone_free((malloc_zone_t *)qword_7C218, v175);
      }
      if (v527) {
        malloc_zone_free((malloc_zone_t *)qword_7C218, v527);
      }
      if (v264) {
        malloc_zone_free((malloc_zone_t *)qword_7C218, v264);
      }
LABEL_401:
      char v275 = xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL)) & v531;
      char v142 = 1;
      uint64_t v143 = 1LL;
      char v531 = 0;
      if ((v275 & 1) == 0)
      {
LABEL_597:
        uint64_t v141 = *(void *)v8;
        double result = (uint64_t)buffer;
        if ((**(_WORD **)v8 & 0x800) != 0) {
          goto LABEL_598;
        }
        return result;
      }
    }
  }

  if (xmmword_7C430 == 1)
  {
    uint64_t v11 = *(void *)result;
    if ((**(_WORD **)result & 0x800) != 0)
    {
      sub_132A0((void *)result);
      uint64_t v14 = *(__IOSurface **)(*(void *)v8 + 256LL);
      int PlaneCount = IOSurfaceGetPlaneCount(v14);
      if (PlaneCount)
      {
        double result = IOSurfaceLockPlane(v14, *(unsigned __int16 *)(*(void *)v8 + 248LL), 1LL, 0LL);
        if ((_DWORD)result) {
          return result;
        }
      }

      else
      {
        double result = IOSurfaceLock(v14, 1u, 0LL);
        if ((_DWORD)result) {
          return result;
        }
      }

      buffer = v14;
      uint64_t v11 = *(void *)v8;
    }

    else
    {
      int PlaneCount = 0;
      buffer = 0LL;
    }

    xmmword_7C350(*(unsigned __int16 *)(v11 + 192));
    char v276 = 0;
    uint64_t v277 = 0LL;
    char v532 = 1;
    v465 = a4;
    uint64_t v448 = a2 + 32;
    uint64_t v535 = a5;
    while (1)
    {
      xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL));
      uint64_t v278 = *(void *)&v8[8 * v277 + 392];
      glgConvertType(*a4, a4[1], v549, &v547);
      glgConvertType(*(unsigned int *)(v278 + 24), *(unsigned int *)(v278 + 28), &v548, &v546);
      if (!xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL))
        || ((v549[0] == 13) & v276) == 0 && ((v549[0] == 14) & v532) == 0)
      {
        break;
      }

LABEL_596:
      char v409 = xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL)) & v532;
      char v276 = 1;
      uint64_t v277 = 1LL;
      char v532 = 0;
      if ((v409 & 1) == 0) {
        goto LABEL_597;
      }
    }

    char v468 = v276;
    BOOL v279 = *a4 != *(_DWORD *)(v278 + 24) || a4[1] != *(_DWORD *)(v278 + 28);
    uint64_t v492 = v278;
    int v280 = *(_DWORD *)(a5 + 36);
    int v281 = *(_DWORD *)(a5 + 40);
    unsigned int v283 = *(_DWORD *)(a5 + 24);
    uint64_t v282 = *(unsigned int *)(a5 + 28);
    uint64_t v284 = *(void *)v521 + 480LL * v283 + 32 * v282;
    v285 = (unsigned __int16 *)(v284 + 270);
    v286 = (unsigned __int16 *)(v284 + 268);
    if ((v281 & 1) != 0) {
      v287 = v286;
    }
    else {
      v287 = v285;
    }
    if ((v281 & 1) != 0) {
      v286 = v285;
    }
    uint64_t v288 = *v286;
    unsigned int v498 = *v287;
    uint64_t v512 = *(void *)v521;
    BOOL v289 = (*(_DWORD *)(v521 + 368) - 1) > 1 || IOSurfaceIsTiled(buffer) != 0;
    int v290 = ((_BYTE)v281 + (_BYTE)v280) & 3;
    int v291 = *(unsigned __int8 *)(a5 + 32);
    uint64_t v495 = *(unsigned __int8 *)(v492 + 57);
    if (v290) {
      int v292 = v279;
    }
    else {
      int v292 = 1;
    }
    if (v289 || v279) {
      int v293 = v279;
    }
    else {
      int v293 = v292;
    }
    int v489 = v293;
    int v477 = v290;
    if (*(_BYTE *)(a5 + 32))
    {
      int v8 = (unsigned __int8 *)v521;
      if (v290 != 1)
      {
        if (v290 != 2)
        {
          if (v290 == 3) {
            goto LABEL_435;
          }
          goto LABEL_438;
        }

        goto LABEL_436;
      }
    }

    else
    {
      int v8 = (unsigned __int8 *)v521;
      if (v290 == 1)
      {
LABEL_435:
        unsigned int v296 = *(_DWORD *)a5;
        int v294 = *(_DWORD *)(a5 + 16);
        int v480 = *(_DWORD *)(a5 + 12);
        unsigned int v471 = v288 - (*(_DWORD *)(a5 + 4) + v294);
        goto LABEL_439;
      }

      if (v290 == 2)
      {
LABEL_436:
        int v294 = *(_DWORD *)(a5 + 12);
        unsigned int v471 = v288 - (*(_DWORD *)a5 + v294);
        int v480 = *(_DWORD *)(a5 + 16);
        int v295 = *(_DWORD *)(a5 + 4) + v480;
        goto LABEL_437;
      }

      if (v290 != 3)
      {
LABEL_438:
        unsigned int v296 = *(_DWORD *)(a5 + 4);
        unsigned int v471 = *(_DWORD *)a5;
        int v294 = *(_DWORD *)(a5 + 12);
        int v480 = *(_DWORD *)(a5 + 16);
LABEL_439:
        vImagePixelCount v474 = v294 * v8[384];
        v297 = (char *)sub_14BF8(v8, *(_DWORD *)(a5 + 28), *(_DWORD *)(a5 + 24), 0, v277);
        if (!v289)
        {
          v305 = v297;
          sub_132A0(v8);
          uint64_t v306 = sub_13C90((uint64_t)v8, *(__IOSurface **)(*(void *)v8 + 256LL), v277);
          v307 = v305;
          unint64_t v308 = v306;
          v309 = 0LL;
          BOOL v310 = v291 != 0;
          int v298 = v477;
          unsigned int v304 = v480;
          unsigned int v311 = v471;
          vImagePixelCount v312 = v474;
LABEL_535:
          ptre = v309;
          if (v298)
          {
            if (v298 == 2) {
              vImagePixelCount v382 = v312;
            }
            else {
              vImagePixelCount v382 = v304;
            }
            if (v298 == 2) {
              vImagePixelCount v383 = v304;
            }
            else {
              vImagePixelCount v383 = v312;
            }
            if (v489)
            {
              unsigned int v384 = v296;
              v385 = v307;
              unsigned int v386 = v311;
              size_t v387 = v495 * (unint64_t)v382;
              v388 = (char *)malloc_zone_malloc((malloc_zone_t *)qword_7C218, (v383 * v387));
              if (!v388) {
                goto LABEL_602;
              }
              int v298 = v477;
              unsigned int v304 = v480;
              unsigned int v311 = v386;
              vImagePixelCount v312 = v474;
              v307 = v385;
              unsigned int v296 = v384;
              v389 = v388;
            }

            else
            {
              v388 = 0LL;
              size_t v387 = *((void *)a4 + 1);
              v389 = a3;
            }

            unint64_t v390 = v308 * (v498 - 1);
            if (!v310) {
              unint64_t v390 = 0LL;
            }
            v391 = &v307[v390];
            if (v310) {
              size_t v392 = -(uint64_t)v308;
            }
            else {
              size_t v392 = v308;
            }
            src.data = &v391[v392 * v296 + v495 * (unint64_t)v311];
            src.height = v304;
            src.width = v312;
            src.rowBytes = v392;
            dest.data = v389;
            dest.height = v383;
            dest.width = v382;
            dest.rowBytes = v387;
            if ((v298 | 2) == 3) {
              LOBYTE(v298) = 4 - v298;
            }
            v529 = v388;
            switch((_DWORD)v495)
            {
              case 4:
                *(_DWORD *)backColor = 0;
                vImageRotate90_ARGB8888(&src, &dest, v298, backColor, 0x10u);
                break;
              case 2:
                vImageRotate90_Planar16U(&src, &dest, v298, 0, 0x10u);
                break;
              case 1:
                vImageRotate90_Planar8(&src, &dest, v298, 0, 0x10u);
                break;
            }

            BOOL v310 = 0;
            unsigned int v296 = 0;
            unsigned int v311 = 0;
            unint64_t v308 = (int)v387;
            unsigned int v304 = v383;
            LODWORD(v312) = v382;
            int v8 = (unsigned __int8 *)v521;
            v309 = ptre;
          }

          else
          {
            v529 = 0LL;
            v389 = v307;
          }

          if (v489)
          {
            unsigned int v393 = a4[2];
            if ((v468 & 1) != 0)
            {
              unsigned int v394 = v304;
              int v395 = v312;
              unsigned int v396 = v311;
              v397 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, v304 * v393);
              unsigned int v311 = v396;
              LODWORD(v312) = v395;
              unsigned int v304 = v394;
              v398 = v397;
              vImagePixelCount v399 = (vImagePixelCount)v397;
              v400 = a3;
              if (!v397) {
                goto LABEL_602;
              }
            }

            else
            {
              v398 = 0LL;
              v400 = 0LL;
              vImagePixelCount v399 = (vImagePixelCount)a3;
            }

            int v401 = *(_DWORD *)(v492 + 48);
            int v541 = 2147479551;
            int v542 = v312;
            unsigned int v543 = v304;
            int v537 = v549[0];
            int v538 = v547;
            int v540 = v401;
            int v539 = 2;
            src.rowBytes = __PAIR64__(v393, v546);
            v402 = &v389[(int)v308 * (unint64_t)(v498 - 1)];
            if (v310) {
              int v403 = -(int)v308;
            }
            else {
              int v403 = v308;
            }
            if (!v310) {
              v402 = v389;
            }
            src.width = __PAIR64__(v548, v403);
            src.data = &v402[v403 * (unint64_t)v296 + v495 * (unint64_t)v311];
            src.height = v399;
            int v8 = (unsigned __int8 *)v521;
            if (*(_DWORD *)(a5 + 20))
            {
              unsigned int v404 = 0;
              unint64_t v405 = v308 * v304;
              do
              {
                glgProcessPixelsWithProcessor(v448, 0LL, &src);
                src.data = (char *)src.data + v405;
                if ((v532 & 1) != 0)
                {
                  src.height += *((void *)a4 + 2);
                }

                else
                {
                  if (v547 == 25)
                  {
                    unint64_t v406 = *((void *)a4 + 2);
                    if (v406)
                    {
                      for (unint64_t k = 0LL; k < v406; k += 4LL)
                      {
                        v400[k] = v398[k];
                        unint64_t v406 = *((void *)a4 + 2);
                      }
                    }
                  }

                  else if (v547 == 27)
                  {
                    unint64_t v406 = *((void *)a4 + 2);
                    if (v406)
                    {
                      for (unint64_t m = 0LL; m < v406; m += 8LL)
                      {
                        v400[m + 4] = v398[m + 4];
                        unint64_t v406 = *((void *)a4 + 2);
                      }
                    }
                  }

                  else
                  {
                    unint64_t v406 = *((void *)a4 + 2);
                  }

                  v400 += v406;
                }

                ++v404;
              }

              while (v404 < *(_DWORD *)(a5 + 20));
            }

            v309 = ptre;
          }

          else
          {
            v398 = 0LL;
          }

          if (v309) {
            malloc_zone_free((malloc_zone_t *)qword_7C218, v309);
          }
          if (v529) {
            malloc_zone_free((malloc_zone_t *)qword_7C218, v529);
          }
          if (v398) {
            malloc_zone_free((malloc_zone_t *)qword_7C218, v398);
          }
          goto LABEL_596;
        }

        uint64_t v505 = (uint64_t)v297;
        int v298 = v477;
        int v299 = v489;
        if (v477) {
          int v299 = 1;
        }
        unsigned int v461 = v288;
        if (v299 == 1)
        {
          v300 = (char *)malloc_zone_malloc( (malloc_zone_t *)qword_7C218,  v495 * (unint64_t)(v474 * v480)
                         * *(unsigned int *)(a5 + 20));
          unsigned int v301 = v498;
          if (!v300) {
            goto LABEL_602;
          }
          unint64_t v528 = v495 * (unint64_t)(v474 * v480);
          unint64_t v302 = v495 * (unint64_t)v474;
          ptrd = v300;
          v303 = v300;
          int v298 = v477;
          unsigned int v304 = v480;
          uint64_t v288 = v288;
        }

        else
        {
          ptrd = 0LL;
          unint64_t v302 = *((void *)a4 + 1);
          unint64_t v528 = *((void *)a4 + 2);
          v303 = a3;
          unsigned int v301 = v498;
          unsigned int v304 = v480;
        }

        unsigned int v313 = v301 - v304 - v296;
        unsigned int v314 = v296;
        if (v291) {
          int64_t v315 = -(uint64_t)v302;
        }
        else {
          int64_t v315 = v302;
        }
        if (v291) {
          v316 = &v303[v302 * (v304 - 1)];
        }
        else {
          v316 = v303;
        }
        if (v291) {
          unsigned int v317 = v313;
        }
        else {
          unsigned int v317 = v314;
        }
        if (dword_7C420 == 1) {
          unsigned int v318 = *(_DWORD *)(v492 + 48);
        }
        else {
          unsigned int v318 = *(_DWORD *)(v492 + 48) & 0xFFFF7FFF;
        }
        int v319 = *((_DWORD *)v8 + 92);
        if ((v319 - 3) < 7)
        {
          unsigned int v455 = v317;
          v320 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v492 + 60));
          unsigned int v321 = *v320;
          uint64_t v322 = v320[1];
          BOOL v443 = sub_13624(v8);
          if (v443)
          {
            int v513 = *(unsigned __int16 *)(*(void *)v8 + 194LL);
            int v437 = *(unsigned __int16 *)(*(void *)v8 + 196LL);
            int64_t v519 = v315;
            unsigned __int16 v323 = sub_138D8(v8);
            unsigned __int8 v431 = v8[384] * *(_BYTE *)(v492 + 57);
            unsigned __int8 v324 = v8[385];
            unsigned int v325 = v318;
            char v326 = *(_BYTE *)(v492 + 56);
            char v327 = sub_1393C(v8);
            char v414 = v326;
            unsigned int v318 = v325;
            unsigned __int16 v328 = v323;
            int64_t v315 = v519;
            unsigned __int8 v329 = v324;
            LODWORD(v288) = v461;
            sub_139BC( (uint64_t)&src,  v513,  v437,  v321,  v322,  v328,  v431,  v329,  v414,  v327,  (*((_DWORD *)v8 + 92) & 0xFFFFFFFE) == 8,  dword_7C4B8,  xmmword_7C430);
          }

          v330 = sub_3F3D0(v548, v546, v8[384], v495, v318);
          if (sub_1393C(v8))
          {
            uint64_t v331 = *(void *)v8;
            unsigned int v332 = 1 << -(char)__clz( (v322 + *(unsigned __int16 *)(*(void *)v8 + 196LL) - 1)
                               / v322
                               - 1);
            int v333 = *(_DWORD *)(a5 + 28);
            unsigned int v334 = (1 << -(char)__clz((v321 + *(unsigned __int16 *)(*(void *)v8 + 194LL) - 1) / v321 - 1)) >> v333;
            if (v334 <= 1) {
              uint64_t v335 = 1LL;
            }
            else {
              uint64_t v335 = v334;
            }
            LODWORD(v336) = v332 >> v333;
            if (v332 >> v333 <= 1) {
              uint64_t v336 = 1LL;
            }
            else {
              uint64_t v336 = v336;
            }
          }

          else
          {
            unsigned int v339 = 1 << -(char)__clz(v288 - 1);
            else {
              uint64_t v335 = v339;
            }
            unsigned int v340 = 1 << -(char)__clz(v498 - 1);
            if (v498 < 2) {
              uint64_t v336 = 1LL;
            }
            else {
              uint64_t v336 = v340;
            }
            v315 *= v322;
            uint64_t v331 = *(void *)v8;
          }

          v341 = v316;
          uint64_t v342 = v336;
          uint64_t v343 = v335;
          int64_t v344 = v315;
          if ((*(_WORD *)(v331 + 214) & 0x2000) != 0) {
            uint64_t v345 = sub_14D1C((uint64_t)v8, v277);
          }
          else {
            uint64_t v345 = 0LL;
          }
          uint64_t v346 = v471;
          uint64_t v347 = v461;
          uint64_t v348 = v455;
          if (*(_DWORD *)(a5 + 20))
          {
            v349 = v330;
            uint64_t v350 = v343;
            uint64_t v351 = v342;
            v352 = v341;
            unsigned int v353 = 0;
            uint64_t v354 = v505 + v345 * *(unsigned int *)(v535 + 8);
            v355 = &src;
            if (!v443) {
              v355 = 0LL;
            }
            v506 = v355;
            uint64_t v514 = v345;
            do
            {
              int64_t v418 = v344;
              uint64_t v356 = v347;
              uint64_t v357 = v346;
              uint64_t v358 = v348;
              ((void (*)(uint64_t, char *, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void, int64_t, vImage_Buffer *, void))v349)( v354,  v352,  v347,  v498,  v350,  v351,  v346,  v348,  *(void *)(v535 + 12),  v418,  v506,  0LL);
              uint64_t v348 = v358;
              uint64_t v347 = v356;
              uint64_t v346 = v357;
              int64_t v344 = v315;
              v354 += v514;
              v352 += v528;
              ++v353;
            }

            while (v353 < *(_DWORD *)(v535 + 20));
          }

          int v8 = (unsigned __int8 *)v521;
          a5 = v535;
          int v298 = v477;
          unsigned int v304 = v480;
          vImagePixelCount v312 = v474;
          goto LABEL_531;
        }

        unsigned int v462 = v318;
        vImagePixelCount v312 = v474;
        if ((v319 - 1) < 2)
        {
          int v337 = *(unsigned __int8 *)(v492 + 57);
          unint64_t v338 = sub_13498(v8, buffer, v277);
          if (v337 == 1)
          {
            sub_688D8(v316, v315 / v495, v505, v338, 0, v471, v317, v474, v480);
          }

          else if (v337 == 4)
          {
            sub_6862C(v316, v315 / v495, v505, v338, 0, v471, v317, v474, v480);
          }

          else
          {
            sub_68380(v316, v315 / v495, v505, v338, 0, v471, v317, v474, v480);
          }

LABEL_530:
          int v298 = v477;
          unsigned int v304 = v480;
          goto LABEL_531;
        }

        if (v319 != 10)
        {
LABEL_531:
          BOOL v310 = 0;
          unsigned int v296 = 0;
          unsigned int v311 = 0;
          v309 = ptrd;
          if (ptrd) {
            v307 = ptrd;
          }
          else {
            v307 = a3;
          }
          unint64_t v308 = v495 * (unint64_t)v312;
          a4 = v465;
          goto LABEL_535;
        }

        int64_t v520 = v315;
        unsigned int v456 = v317;
        v359 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v492 + 60));
        unsigned int v360 = *v359;
        unsigned int v361 = v359[1];
        BOOL v362 = sub_13624(v8);
        if (v362)
        {
          int v432 = *(unsigned __int16 *)(*(void *)v8 + 196LL);
          int v438 = *(unsigned __int16 *)(*(void *)v8 + 194LL);
          unsigned __int16 v444 = *(_WORD *)(*(void *)v8 + 198LL);
          unsigned __int8 v425 = v8[384] * *(_BYTE *)(v492 + 57);
          unsigned __int8 v422 = v8[385];
          char v363 = *(_BYTE *)(v492 + 56);
          char v364 = sub_1393C(v8);
          char v415 = v363;
          vImagePixelCount v312 = v474;
          sub_139BC((uint64_t)&src, v438, v432, v360, v361, v444, v425, v422, v415, v364, 0, dword_7C4B8, xmmword_7C430);
        }

        if (sub_1393C(v8))
        {
          unsigned int v365 = 1 << -(char)__clz((v361 + *(unsigned __int16 *)(*(void *)v8 + 196LL) - 1) / v361 - 1);
          int v366 = *(_DWORD *)(a5 + 28);
          unsigned int v367 = (1 << -(char)__clz((v360 + *(unsigned __int16 *)(*(void *)v8 + 194LL) - 1) / v360 - 1)) >> v366;
          if (v367 <= 1) {
            unsigned int v367 = 1;
          }
          unsigned int v445 = v367;
          unsigned int v368 = v365 >> v366;
          if (v368 <= 1) {
            uint64_t v369 = 1LL;
          }
          else {
            uint64_t v369 = v368;
          }
        }

        else
        {
          int v370 = 1 << -(char)__clz(v288 - 1);
          unsigned int v445 = v370;
          unsigned int v371 = 1 << -(char)__clz(v498 - 1);
          if (v498 >= 2) {
            uint64_t v369 = v371;
          }
          else {
            uint64_t v369 = 1LL;
          }
        }

        uint64_t v372 = v546;
        if ((v462 & 0x8000) == 0)
        {
          if (v548 == 20)
          {
            if (v546 < 0x10)
            {
              v373 = off_79CF0;
LABEL_515:
              v377 = v373[v372];
LABEL_527:
              uint64_t v379 = *(unsigned __int16 *)(v512 + 480LL * v283 + 32 * v282 + 272);
              uint64_t v380 = sub_14D90((uint64_t)v8);
              v381 = &src;
              if (!v362) {
                v381 = 0LL;
              }
              ((void (*)(uint64_t, char *, uint64_t, void, uint64_t, void, uint64_t, uint64_t, unint64_t, void, void, int64_t, unint64_t, vImage_Buffer *, void))v377)( v505,  v316,  v288,  v498,  v379,  v445,  v369,  v380,  __PAIR64__(v456, v471),  *(void *)(a5 + 8),  *(void *)(a5 + 16),  v520,  v528,  v381,  0LL);
              goto LABEL_530;
            }
          }

          else
          {
            uint64_t v372 = v495 - 1;
            if ((unint64_t)(v495 - 1) < 0x10)
            {
              v373 = off_79C70;
              goto LABEL_515;
            }
          }

LABEL_516:
          v377 = 0LL;
          goto LABEL_527;
        }

        switch((_DWORD)v495)
        {
          case 4:
            v377 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_6111C;
            if ((v462 & 0x100000) == 0)
            {
              v378 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_60F0C;
              if (v546 != 1) {
                v378 = 0LL;
              }
              if (v546) {
                v377 = v378;
              }
              else {
                v377 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_61014;
              }
            }

            goto LABEL_527;
          case 8:
            BOOL v374 = (v462 & 0x100000) == 0;
            v375 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_60E04;
            v376 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_60CFC;
            break;
          case 0x10:
            BOOL v374 = (v462 & 0x100000) == 0;
            v375 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_60BF4;
            v376 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_60AEC;
            break;
          default:
            goto LABEL_516;
        }

        if (v374) {
          v377 = v376;
        }
        else {
          v377 = v375;
        }
        goto LABEL_527;
      }
    }

    unsigned int v471 = *(_DWORD *)(a5 + 4);
    int v294 = *(_DWORD *)(a5 + 16);
    int v480 = *(_DWORD *)(a5 + 12);
    int v295 = *(_DWORD *)a5 + v480;
LABEL_437:
    unsigned int v296 = v498 - v295;
    goto LABEL_439;
  }

  if ((_BYTE)xmmword_7C430) {
    return result;
  }
  uint64_t v9 = *(void *)result;
  if ((**(_WORD **)result & 0x800) != 0)
  {
    sub_132A0((void *)result);
    uint64_t v12 = *(__IOSurface **)(*(void *)v8 + 256LL);
    int PlaneCount = IOSurfaceGetPlaneCount(v12);
    if (PlaneCount)
    {
      double result = IOSurfaceLockPlane(v12, *(unsigned __int16 *)(*(void *)v8 + 248LL), 1LL, 0LL);
      if ((_DWORD)result) {
        return result;
      }
    }

    else
    {
      double result = IOSurfaceLock(v12, 1u, 0LL);
      if ((_DWORD)result) {
        return result;
      }
    }

    v446 = v12;
    uint64_t v9 = *(void *)v8;
  }

  else
  {
    int PlaneCount = 0;
    v446 = 0LL;
  }

  xmmword_7C350(*(unsigned __int16 *)(v9 + 192));
  char v15 = 0;
  uint64_t v16 = 0LL;
  char v530 = 1;
  v463 = a4;
  uint64_t v439 = a2 + 32;
  uint64_t v533 = a5;
  do
  {
    xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL));
    uint64_t v17 = *(void *)&v8[8 * v16 + 392];
    glgConvertType(*a4, a4[1], v549, &v547);
    glgConvertType(*(unsigned int *)(v17 + 24), *(unsigned int *)(v17 + 28), &v548, &v546);
    if (xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL))
      && (((v549[0] == 13) & v15) != 0 || ((v549[0] == 14) & v530) != 0))
    {
      goto LABEL_205;
    }

    char v466 = v15;
    BOOL v18 = *a4 != *(_DWORD *)(v17 + 24) || a4[1] != *(_DWORD *)(v17 + 28);
    uint64_t v490 = v17;
    int v19 = *(_DWORD *)(a5 + 36);
    int v20 = *(_DWORD *)(a5 + 40);
    unsigned int v22 = *(_DWORD *)(a5 + 24);
    uint64_t v21 = *(unsigned int *)(a5 + 28);
    uint64_t v23 = *(void *)v521 + 480LL * v22 + 32 * v21;
    uint64_t v24 = (unsigned __int16 *)(v23 + 270);
    uint64_t v25 = (unsigned __int16 *)(v23 + 268);
    if ((v20 & 1) != 0) {
      int v26 = v25;
    }
    else {
      int v26 = v24;
    }
    if ((v20 & 1) != 0) {
      uint64_t v25 = v24;
    }
    uint64_t v27 = *v25;
    unsigned int v496 = *v26;
    uint64_t v522 = *(void *)v521;
    BOOL v28 = (*(_DWORD *)(v521 + 368) - 1) > 1 || IOSurfaceIsTiled(v446) != 0;
    int v29 = ((_BYTE)v20 + (_BYTE)v19) & 3;
    int v30 = *(unsigned __int8 *)(a5 + 32);
    uint64_t v493 = *(unsigned __int8 *)(v490 + 57);
    if (v29) {
      int v31 = v18;
    }
    else {
      int v31 = 1;
    }
    if (v28 || v18) {
      int v32 = v18;
    }
    else {
      int v32 = v31;
    }
    int v487 = v32;
    int v475 = v29;
    if (*(_BYTE *)(a5 + 32))
    {
      int v8 = (unsigned __int8 *)v521;
      switch(v29)
      {
        case 1:
          goto LABEL_50;
        case 2:
LABEL_52:
          int v33 = *(_DWORD *)(a5 + 12);
          unsigned int v469 = v27 - (*(_DWORD *)a5 + v33);
          int v478 = *(_DWORD *)(a5 + 16);
          int v34 = *(_DWORD *)(a5 + 4) + v478;
          goto LABEL_53;
        case 3:
          goto LABEL_51;
      }
    }

    else
    {
      int v8 = (unsigned __int8 *)v521;
      switch(v29)
      {
        case 1:
LABEL_51:
          unsigned int v35 = *(_DWORD *)a5;
          int v33 = *(_DWORD *)(a5 + 16);
          int v478 = *(_DWORD *)(a5 + 12);
          unsigned int v469 = v27 - (*(_DWORD *)(a5 + 4) + v33);
          goto LABEL_55;
        case 2:
          goto LABEL_52;
        case 3:
LABEL_50:
          unsigned int v469 = *(_DWORD *)(a5 + 4);
          int v33 = *(_DWORD *)(a5 + 16);
          int v478 = *(_DWORD *)(a5 + 12);
          int v34 = *(_DWORD *)a5 + v478;
LABEL_53:
          unsigned int v35 = v496 - v34;
          goto LABEL_55;
      }
    }

    unsigned int v35 = *(_DWORD *)(a5 + 4);
    unsigned int v469 = *(_DWORD *)a5;
    int v33 = *(_DWORD *)(a5 + 12);
    int v478 = *(_DWORD *)(a5 + 16);
LABEL_55:
    vImagePixelCount v472 = v33 * v8[384];
    uint64_t v36 = (char *)sub_153F0(v8, *(_DWORD *)(a5 + 28), *(_DWORD *)(a5 + 24), 0, v16);
    if (v28)
    {
      uint64_t v507 = (uint64_t)v36;
      int v37 = v475;
      int v38 = v487;
      if (v475) {
        int v38 = 1;
      }
      unsigned int v457 = v27;
      if (v38 == 1)
      {
        unint64_t v452 = v493 * (unint64_t)(v472 * v478);
        uint64_t v39 = (char *)malloc_zone_malloc((malloc_zone_t *)qword_7C218, v452 * *(unsigned int *)(a5 + 20));
        unsigned int v40 = v496;
        if (!v39) {
          goto LABEL_602;
        }
        unint64_t v41 = v493 * (unint64_t)v472;
        ptr = v39;
        uint64_t v42 = v39;
        int v37 = v475;
        unsigned int v43 = v478;
        uint64_t v27 = v27;
      }

      else
      {
        ptr = 0LL;
        unint64_t v41 = *((void *)a4 + 1);
        unint64_t v452 = *((void *)a4 + 2);
        uint64_t v42 = a3;
        unsigned int v40 = v496;
        unsigned int v43 = v478;
      }

      unsigned int v52 = v40 - v43 - v35;
      unsigned int v53 = v35;
      if (v30) {
        int64_t v54 = -(uint64_t)v41;
      }
      else {
        int64_t v54 = v41;
      }
      if (v30) {
        unint64_t v55 = &v42[v41 * (v43 - 1)];
      }
      else {
        unint64_t v55 = v42;
      }
      if (v30) {
        unsigned int v53 = v52;
      }
      if (dword_7C420 == 1) {
        unsigned int v56 = *(_DWORD *)(v490 + 48);
      }
      else {
        unsigned int v56 = *(_DWORD *)(v490 + 48) & 0xFFFF7FFF;
      }
      int v57 = *((_DWORD *)v8 + 92);
      if ((v57 - 3) < 7)
      {
        unsigned int buffera = v53;
        unsigned int v58 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v490 + 60));
        unsigned int v59 = *v58;
        uint64_t v60 = v58[1];
        BOOL v523 = sub_13624(v8);
        if (v523)
        {
          int v500 = *(unsigned __int16 *)(*(void *)v8 + 194LL);
          int v433 = *(unsigned __int16 *)(*(void *)v8 + 196LL);
          int64_t v515 = v54;
          unsigned __int16 v61 = sub_138D8(v8);
          unsigned __int8 v427 = v8[384] * *(_BYTE *)(v490 + 57);
          unsigned __int8 v62 = v8[385];
          unsigned int v63 = v56;
          char v64 = *(_BYTE *)(v490 + 56);
          char v65 = sub_1393C(v8);
          char v410 = v64;
          unsigned int v56 = v63;
          unsigned __int16 v66 = v61;
          int64_t v54 = v515;
          unsigned __int8 v67 = v62;
          LODWORD(v27) = v457;
          sub_139BC( (uint64_t)&src,  v500,  v433,  v59,  v60,  v66,  v427,  v67,  v410,  v65,  (*((_DWORD *)v8 + 92) & 0xFFFFFFFE) == 8,  dword_7C4B8,  xmmword_7C430);
        }

        int v68 = sub_3F3D0(v548, v546, v8[384], v493, v56);
        if (sub_1393C(v8))
        {
          uint64_t v69 = *(void *)v8;
          unsigned int v70 = 1 << -(char)__clz( (v60 + *(unsigned __int16 *)(*(void *)v8 + 196LL) - 1) / v60 - 1);
          int v71 = *(_DWORD *)(a5 + 28);
          unsigned int v72 = (1 << -(char)__clz((v59 + *(unsigned __int16 *)(*(void *)v8 + 194LL) - 1) / v59 - 1)) >> v71;
          if (v72 <= 1) {
            uint64_t v73 = 1LL;
          }
          else {
            uint64_t v73 = v72;
          }
          LODWORD(v74) = v70 >> v71;
          if (v70 >> v71 <= 1) {
            uint64_t v74 = 1LL;
          }
          else {
            uint64_t v74 = v74;
          }
        }

        else
        {
          unsigned int v78 = 1 << -(char)__clz(v27 - 1);
          else {
            uint64_t v73 = v78;
          }
          unsigned int v79 = 1 << -(char)__clz(v496 - 1);
          if (v496 < 2) {
            uint64_t v74 = 1LL;
          }
          else {
            uint64_t v74 = v79;
          }
          v54 *= v60;
          uint64_t v69 = *(void *)v8;
        }

        uint64_t v80 = v74;
        uint64_t v81 = v73;
        int64_t v82 = v54;
        if ((*(_WORD *)(v69 + 214) & 0x2000) != 0) {
          unint64_t v83 = sub_15514((uint64_t)v8, v16);
        }
        else {
          unint64_t v83 = 0LL;
        }
        uint64_t v84 = v469;
        uint64_t v85 = v457;
        unint64_t v86 = v452;
        if (*(_DWORD *)(a5 + 20))
        {
          uint64_t v87 = v81;
          uint64_t v88 = v80;
          unsigned int v89 = 0;
          unint64_t v90 = v507 + v83 * *(unsigned int *)(v533 + 8);
          uint64_t v91 = &src;
          if (!v523) {
            uint64_t v91 = 0LL;
          }
          v502 = v91;
          unint64_t v508 = v83;
          do
          {
            v524 = v55;
            int64_t v416 = v82;
            int v92 = v55;
            uint64_t v93 = v85;
            uint64_t v94 = v84;
            unint64_t v95 = v86;
            ((void (*)(unint64_t, char *, uint64_t, void, uint64_t, uint64_t, uint64_t, void, void, int64_t, vImage_Buffer *, void))v68)( v90,  v92,  v85,  v496,  v87,  v88,  v84,  buffera,  *(void *)(v533 + 12),  v416,  v502,  0LL);
            unint64_t v86 = v95;
            uint64_t v85 = v93;
            uint64_t v84 = v94;
            int64_t v82 = v54;
            v90 += v508;
            unint64_t v55 = &v524[v95];
            ++v89;
          }

          while (v89 < *(_DWORD *)(v533 + 20));
        }

        int v8 = (unsigned __int8 *)v521;
        a5 = v533;
        int v37 = v475;
        unsigned int v43 = v478;
        vImagePixelCount v51 = v472;
        a4 = v463;
        goto LABEL_140;
      }

      unsigned int v501 = v56;
      vImagePixelCount v51 = v472;
      if ((v57 - 1) < 2)
      {
        unsigned int v75 = v53;
        int v76 = *(unsigned __int8 *)(v490 + 57);
        unint64_t v77 = sub_13498(v8, v446, v16);
        if (v76 == 1)
        {
          sub_688D8(v55, v54 / v493, v507, v77, 0, v469, v75, v472, v478);
        }

        else if (v76 == 4)
        {
          sub_6862C(v55, v54 / v493, v507, v77, 0, v469, v75, v472, v478);
        }

        else
        {
          sub_68380(v55, v54 / v493, v507, v77, 0, v469, v75, v472, v478);
        }

LABEL_139:
        int v37 = v475;
        unsigned int v43 = v478;
        goto LABEL_140;
      }

      if (v57 != 10)
      {
LABEL_140:
        BOOL v49 = 0;
        unsigned int v35 = 0;
        unsigned int v50 = 0;
        uint64_t v48 = ptr;
        if (ptr) {
          uint64_t v46 = ptr;
        }
        else {
          uint64_t v46 = a3;
        }
        unint64_t v47 = v493 * (unint64_t)v51;
        goto LABEL_144;
      }

      int64_t v516 = v54;
      unsigned int bufferb = v53;
      char v96 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v490 + 60));
      unsigned int v97 = *v96;
      unsigned int v98 = v96[1];
      BOOL v458 = sub_13624(v8);
      if (v458)
      {
        int v428 = *(unsigned __int16 *)(*(void *)v8 + 194LL);
        int v423 = *(unsigned __int16 *)(*(void *)v8 + 196LL);
        unsigned __int16 v434 = *(_WORD *)(*(void *)v8 + 198LL);
        unsigned __int8 v420 = v8[384] * *(_BYTE *)(v490 + 57);
        unsigned __int8 v419 = v8[385];
        char v99 = *(_BYTE *)(v490 + 56);
        char v100 = sub_1393C(v8);
        char v411 = v99;
        vImagePixelCount v51 = v472;
        sub_139BC((uint64_t)&src, v428, v423, v97, v98, v434, v420, v419, v411, v100, 0, dword_7C4B8, xmmword_7C430);
      }

      if (sub_1393C(v8))
      {
        unsigned int v101 = 1 << -(char)__clz((v98 + *(unsigned __int16 *)(*(void *)v8 + 196LL) - 1) / v98 - 1);
        int v102 = *(_DWORD *)(a5 + 28);
        unsigned int v103 = (1 << -(char)__clz((v97 + *(unsigned __int16 *)(*(void *)v8 + 194LL) - 1) / v97 - 1)) >> v102;
        if (v103 <= 1) {
          uint64_t v104 = 1LL;
        }
        else {
          uint64_t v104 = v103;
        }
        unsigned int v105 = v101 >> v102;
        if (v105 <= 1) {
          uint64_t v106 = 1LL;
        }
        else {
          uint64_t v106 = v105;
        }
      }

      else
      {
        unsigned int v107 = 1 << -(char)__clz(v27 - 1);
        else {
          uint64_t v104 = v107;
        }
        unsigned int v108 = 1 << -(char)__clz(v496 - 1);
        if (v496 >= 2) {
          uint64_t v106 = v108;
        }
        else {
          uint64_t v106 = 1LL;
        }
      }

      if ((v501 & 0x8000) == 0)
      {
        if (v548 == 20) {
          int v109 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t))off_79CF0[v546];
        }
        else {
          int v109 = off_79BF0[v493 - 1];
        }
        goto LABEL_136;
      }

      if ((_DWORD)v493 == 4)
      {
        int v109 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t))sub_5E990;
        if ((v501 & 0x100000) != 0)
        {
LABEL_136:
          int v112 = &src;
          if (!v458) {
            int v112 = 0LL;
          }
          ((void (*)(uint64_t, char *, uint64_t, void, void, uint64_t, uint64_t, void, unint64_t, void, void, int64_t, unint64_t, vImage_Buffer *, void))v109)( v507,  v55,  v27,  v496,  *(unsigned __int16 *)(v522 + 480LL * v22 + 32 * v21 + 272),  v104,  v106,  0LL,  __PAIR64__(bufferb, v469),  *(void *)(a5 + 8),  *(void *)(a5 + 16),  v516,  v452,  v112,  0LL);
          goto LABEL_139;
        }

        int v109 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t))sub_5E610;
        if (v546 != 1) {
          int v109 = 0LL;
        }
        BOOL v110 = v546 == 0;
        uint64_t v111 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t))sub_5E7D0;
      }

      else
      {
        BOOL v110 = (v501 & 0x100000) == 0;
        if ((_DWORD)v493 == 8)
        {
          int v109 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t))sub_5E450;
          uint64_t v111 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t))sub_5E290;
        }

        else
        {
          int v109 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t))sub_5E0D4;
          uint64_t v111 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t))sub_5DF18;
        }
      }

      if (v110) {
        int v109 = v111;
      }
      goto LABEL_136;
    }

    uint64_t v44 = v36;
    sub_132A0(v8);
    uint64_t v45 = sub_13C90((uint64_t)v8, *(__IOSurface **)(*(void *)v8 + 256LL), v16);
    uint64_t v46 = v44;
    unint64_t v47 = v45;
    uint64_t v48 = 0LL;
    BOOL v49 = v30 != 0;
    int v37 = v475;
    unsigned int v43 = v478;
    unsigned int v50 = v469;
    vImagePixelCount v51 = v472;
LABEL_144:
    ptra = v48;
    if (v37)
    {
      if (v37 == 2) {
        vImagePixelCount v113 = v51;
      }
      else {
        vImagePixelCount v113 = v43;
      }
      if (v37 == 2) {
        vImagePixelCount v114 = v43;
      }
      else {
        vImagePixelCount v114 = v51;
      }
      if (v487)
      {
        unsigned int v115 = v35;
        uint64_t v116 = v46;
        unsigned int v117 = v50;
        size_t v118 = v493 * (unint64_t)v113;
        int v119 = (char *)malloc_zone_malloc((malloc_zone_t *)qword_7C218, (v114 * v118));
        if (!v119) {
          goto LABEL_602;
        }
        int v37 = v475;
        unsigned int v43 = v478;
        unsigned int v50 = v117;
        vImagePixelCount v51 = v472;
        uint64_t v46 = v116;
        unsigned int v35 = v115;
        unsigned int v120 = v119;
      }

      else
      {
        int v119 = 0LL;
        size_t v118 = *((void *)a4 + 1);
        unsigned int v120 = a3;
      }

      unint64_t v121 = v47 * (v496 - 1);
      if (!v49) {
        unint64_t v121 = 0LL;
      }
      int v122 = &v46[v121];
      if (v49) {
        size_t v123 = -(uint64_t)v47;
      }
      else {
        size_t v123 = v47;
      }
      src.data = &v122[v123 * v35 + v493 * (unint64_t)v50];
      src.height = v43;
      src.width = v51;
      src.rowBytes = v123;
      dest.data = v120;
      dest.height = v114;
      dest.width = v113;
      dest.rowBytes = v118;
      if ((v37 | 2) == 3) {
        LOBYTE(v37) = 4 - v37;
      }
      v525 = v119;
      switch((_DWORD)v493)
      {
        case 4:
          *(_DWORD *)backColor = 0;
          vImageRotate90_ARGB8888(&src, &dest, v37, backColor, 0x10u);
          break;
        case 2:
          vImageRotate90_Planar16U(&src, &dest, v37, 0, 0x10u);
          break;
        case 1:
          vImageRotate90_Planar8(&src, &dest, v37, 0, 0x10u);
          break;
      }

      BOOL v49 = 0;
      unsigned int v35 = 0;
      unsigned int v50 = 0;
      unint64_t v47 = (int)v118;
      unsigned int v43 = v114;
      LODWORD(v51) = v113;
      int v8 = (unsigned __int8 *)v521;
      uint64_t v48 = ptra;
    }

    else
    {
      v525 = 0LL;
      unsigned int v120 = v46;
    }

    if (v487)
    {
      unsigned int v124 = a4[2];
      if ((v466 & 1) != 0)
      {
        unsigned int v125 = v43;
        int v126 = v51;
        unsigned int v127 = v50;
        uint64_t v128 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, v43 * v124);
        unsigned int v50 = v127;
        LODWORD(v51) = v126;
        unsigned int v43 = v125;
        uint64_t v129 = v128;
        vImagePixelCount v130 = (vImagePixelCount)v128;
        uint64_t v131 = a3;
        if (!v128) {
          goto LABEL_602;
        }
      }

      else
      {
        uint64_t v129 = 0LL;
        uint64_t v131 = 0LL;
        vImagePixelCount v130 = (vImagePixelCount)a3;
      }

      int v132 = *(_DWORD *)(v490 + 48);
      int v541 = 2147479551;
      int v542 = v51;
      unsigned int v543 = v43;
      int v537 = v549[0];
      int v538 = v547;
      int v540 = v132;
      int v539 = 2;
      src.rowBytes = __PAIR64__(v124, v546);
      uint64_t v133 = &v120[(int)v47 * (unint64_t)(v496 - 1)];
      if (v49) {
        int v134 = -(int)v47;
      }
      else {
        int v134 = v47;
      }
      if (!v49) {
        uint64_t v133 = v120;
      }
      src.width = __PAIR64__(v548, v134);
      src.data = &v133[v134 * (unint64_t)v35 + v493 * (unint64_t)v50];
      src.height = v130;
      int v8 = (unsigned __int8 *)v521;
      if (*(_DWORD *)(a5 + 20))
      {
        unsigned int v135 = 0;
        unint64_t v136 = v47 * v43;
        do
        {
          glgProcessPixelsWithProcessor(v439, 0LL, &src);
          src.data = (char *)src.data + v136;
          if ((v530 & 1) != 0)
          {
            src.height += *((void *)a4 + 2);
          }

          else
          {
            if (v547 == 25)
            {
              unint64_t v137 = *((void *)a4 + 2);
              if (v137)
              {
                for (unint64_t n = 0LL; n < v137; n += 4LL)
                {
                  v131[n] = v129[n];
                  unint64_t v137 = *((void *)a4 + 2);
                }
              }
            }

            else if (v547 == 27)
            {
              unint64_t v137 = *((void *)a4 + 2);
              if (v137)
              {
                for (iunint64_t i = 0LL; ii < v137; ii += 8LL)
                {
                  v131[ii + 4] = v129[ii + 4];
                  unint64_t v137 = *((void *)a4 + 2);
                }
              }
            }

            else
            {
              unint64_t v137 = *((void *)a4 + 2);
            }

            v131 += v137;
          }

          ++v135;
        }

        while (v135 < *(_DWORD *)(a5 + 20));
      }

      uint64_t v48 = ptra;
    }

    else
    {
      uint64_t v129 = 0LL;
    }

    if (v48) {
      malloc_zone_free((malloc_zone_t *)qword_7C218, v48);
    }
    if (v525) {
      malloc_zone_free((malloc_zone_t *)qword_7C218, v525);
    }
    if (v129) {
      malloc_zone_free((malloc_zone_t *)qword_7C218, v129);
    }
LABEL_205:
    char v140 = xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL)) & v530;
    char v15 = 1;
    uint64_t v16 = 1LL;
    char v530 = 0;
  }

  while ((v140 & 1) != 0);
  uint64_t v141 = *(void *)v8;
  double result = (uint64_t)v446;
  if ((**(_WORD **)v8 & 0x800) == 0) {
    return result;
  }
LABEL_598:
  if (PlaneCount) {
    return IOSurfaceUnlockPlane(result, *(unsigned __int16 *)(v141 + 248), 1LL, 0LL);
  }
  else {
    return IOSurfaceUnlock((IOSurfaceRef)result, 1u, 0LL);
  }
}

  if (v26 >= 0x11 && *(_WORD *)((char *)v23 + v44 + 16))
  {
    unint64_t v77 = (unsigned int *)((char *)v23 + *(unsigned __int16 *)((char *)v23 + v44 + 16));
    unsigned int v78 = (unsigned int *)((char *)v77 + *v77);
  }

  else
  {
    unsigned int v78 = 0LL;
  }

  unsigned int v79 = sub_66140(v78, a1 + 768);
  *(_DWORD *)(a1 + 96) = v79;
  uint64_t v80 = *(int **)(a1 + 40);
  uint64_t v81 = (unsigned __int16 *)((char *)v80 - *v80);
  if (*v81 >= 0x15u && (int64_t v82 = v81[10]) != 0) {
    unint64_t v83 = (unsigned int *)((char *)v80 + v82 + *(unsigned int *)((char *)v80 + v82));
  }
  else {
    unint64_t v83 = 0LL;
  }
  *(_DWORD *)(a1 + 100) = 0;
  uint64_t v84 = *v83;
  if ((_DWORD)v84)
  {
    uint64_t v85 = 0LL;
    unint64_t v86 = 4 * v84;
    while (1)
    {
      uint64_t v87 = v83[v85 / 4 + 1];
      uint64_t v88 = (char *)&v83[v85 / 4] + v87;
      unsigned int v89 = v87 - *((int *)v88 + 1);
      unint64_t v90 = (char *)&v83[v85 / 4] + v89;
      uint64_t v91 = *((unsigned __int16 *)v90 + 2);
      if (v91 >= 7) {
        break;
      }
      if (v91 >= 5)
      {
        int v92 = 0LL;
LABEL_154:
        if (*(_WORD *)((char *)&v83[v85 / 4 + 2] + v89))
        {
          uint64_t v93 = *((char *)&v83[v85 / 4 + 1] + v87 + *(unsigned __int16 *)((char *)&v83[v85 / 4 + 2] + v89));
          if (v93 == 3)
          {
            if (v91 < 9)
            {
              LODWORD(v96) = 0;
            }

            else
            {
              char v96 = *(unsigned __int16 *)((char *)&v83[v85 / 4 + 3] + v89);
              if (v96) {
                LODWORD(v96) = *(unsigned int *)((char *)&v83[v85 / 4 + 1] + v87 + v96);
              }
            }

            *(_DWORD *)(a1 + 1024) = DWORD2(xmmword_7C470) * v96;
            unsigned int v97 = (char *)&v83[v85 / 4] + v87 - *((int *)v88 + 1);
            if (*((unsigned __int16 *)v97 + 2) >= 7u && (unsigned int v98 = *((unsigned __int16 *)v97 + 5)) != 0)
            {
              char v99 = *(unsigned int *)((char *)&v83[v85 / 4 + 1] + v87 + v98);
              char v100 = (unsigned int *)off_7C318(v79);
              if (v99 == 1) {
                unsigned int v101 = 9984LL;
              }
              else {
                unsigned int v101 = 9728LL;
              }
            }

            else
            {
              char v100 = (unsigned int *)off_7C318(v79);
              unsigned int v101 = 9728LL;
            }

            (*(void (**)(unsigned int *, uint64_t, uint64_t, float, float))(*(void *)v100 + 24LL))( v100,  v101,  9728LL,  0.0,  1000.0);
            (*(void (**)(unsigned int *, uint64_t))(*(void *)v100 + 64LL))(v100, 1LL);
            int v102 = 8LL * v100[2];
            *(void *)(a1 + 1040) = v102;
            unsigned int v103 = malloc_zone_calloc(*(malloc_zone_t **)qword_7C220, 1uLL, v102);
            *(void *)(a1 + 1032) = v103;
            (*(void (**)(unsigned int *, void *))(*(void *)v100 + 128LL))(v100, v103);
            unsigned int v79 = (*(uint64_t (**)(unsigned int *))(*(void *)v100 + 8LL))(v100);
          }

          else if (v93 == 1)
          {
            else {
              unint64_t v95 = 0;
            }
            *(_DWORD *)(a1 + 4 * v92 + 896) = DWORD2(xmmword_7C470) * v95;
            *(_DWORD *)(a1 + 100) |= 1LL << v92;
          }
        }
      }

      v85 += 4LL;
      if (v86 == v85) {
        goto LABEL_174;
      }
    }

    int v92 = *((unsigned __int16 *)v90 + 5);
    if (v92) {
      int v92 = *(unsigned int *)((char *)&v83[v85 / 4 + 1] + v87 + v92);
    }
    goto LABEL_154;
  }

void *sub_132A0(void *result)
{
  if ((*(_BYTE *)(*result + 24LL) & 8) == 0)
  {
    int v1 = result;
    if (*(_BYTE *)(result[47] + 308LL))
    {
      uint64_t v2 = mach_absolute_time();
      int v3 = (*((uint64_t (**)(void))&xmmword_7C130 + 1))(*(void *)(*v1 + 32LL));
      double result = (void *)mach_absolute_time();
      v1[26] += (char *)result - v2;
      if (v3) {
        return result;
      }
LABEL_6:
      sub_14A48(v1[47], v1);
      uint64_t v4 = v1[29];
      (*(void (**)(uint64_t, void *, void))(*(void *)v4 + 40LL))(v4, v1, 0LL);
      return (void *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 48LL))(v4, v1);
    }

    double result = (void *)(*((uint64_t (**)(void))&xmmword_7C130 + 1))(*(void *)(*result + 32LL));
    if (!(_DWORD)result) {
      goto LABEL_6;
    }
  }

  return result;
}

void *sub_13374(void *a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if ((*(_WORD *)*a1 & 0x800) != 0)
  {
    sub_132A0(a1);
    return IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(*a1 + 256LL), *(unsigned __int16 *)(*a1 + 248LL));
  }

  else
  {
    uint64_t v10 = sub_14680((uint64_t)a1, a2, a5);
    if (a5)
    {
      unsigned int v11 = 0;
      uint64_t v12 = 0LL;
      do
        v12 += sub_14920((uint64_t)a1, v11++);
      while (a5 != v11);
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    uint64_t v14 = v12 + v10;
    if (a3) {
      v14 += sub_13BA8((uint64_t)a1, a5) * a3;
    }
    if (a4)
    {
      if ((*(_WORD *)(*a1 + 214LL) & 0x2000) != 0) {
        v14 += sub_13BA8((uint64_t)a1, a5) * a4;
      }
    }

    sub_132A0(a1);
    return (void *)(a1[6] + v14);
  }

unint64_t sub_13498(_DWORD *a1, __IOSurface *a2, int a3)
{
  if (xmmword_7C430 == 2 || xmmword_7C430 == 1)
  {
    xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
    uint64_t v6 = *(void *)&a1[2 * a3 + 98];
    if ((**(_WORD **)a1 & 0x800) == 0)
    {
      unsigned int v8 = *(unsigned __int16 *)(*(void *)a1 + 268LL);
      if ((a1[92] - 1) >= 2)
      {
        uint64_t v17 = (1 << -(char)__clz(v8 - 1));
        if (v8 < 2) {
          return 1LL;
        }
        else {
          return v17;
        }
      }

      goto LABEL_17;
    }
  }

  else
  {
    if ((_BYTE)xmmword_7C430) {
      return 0LL;
    }
    xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
    uint64_t v6 = *(void *)&a1[2 * a3 + 98];
    if ((**(_WORD **)a1 & 0x800) == 0)
    {
      int v7 = a1[92];
      unsigned int v8 = *(unsigned __int16 *)(*(void *)a1 + 268LL);
      if ((v7 - 1) >= 2)
      {
        int v9 = 1 << -(char)__clz(v8 - 1);
        if (v8 < 2) {
          unsigned int v10 = 1;
        }
        else {
          unsigned int v10 = v9;
        }
        if (v10 <= 4) {
          unsigned int v11 = 4;
        }
        else {
          unsigned int v11 = v10;
        }
        if (v7 == 10) {
          return v11;
        }
        else {
          return v10;
        }
      }

BOOL sub_13624(_DWORD *a1)
{
  BOOL v2 = 0LL;
  if (sub_143D8((uint64_t *)a1, 0, 0, 0) != 1)
  {
    int v3 = *(unsigned __int16 **)a1;
    if (*(_BYTE *)(*(void *)a1 + 208LL) || a1[92] == 10 && !(_BYTE)xmmword_7C430) {
      return 0LL;
    }
    unsigned int v5 = v3[97];
    unsigned int v6 = v3[98];
    if (!xmmword_7C350(v3[96]) || (BOOL v2 = 0LL, v5 >= 0x40) && v6 >= 0x40)
    {
      xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
      unsigned int v8 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(*((void *)a1 + 49) + 60LL));
      unsigned int v9 = *v8;
      unsigned int v10 = v8[1];
      unsigned int v11 = v5 - 1 + *v8;
      if (!__CFADD__(v5 - 1, v9))
      {
        unsigned int v12 = v6 + v10 - 1;
        v7.i32[0] = v12 / v10;
        uint8x8_t v13 = (uint8x8_t)vcnt_s8(v7);
        v13.i16[0] = vaddlv_u8(v13);
        BOOL v14 = ((v11 / v9) & (v11 / v9 - 1)) != 0 || v10 > v12;
        if (!v14 && v13.i32[0] < 2u) {
          return 0LL;
        }
      }

      int v16 = a1[92];
      uint64_t v17 = *(void *)a1;
      unsigned __int16 v18 = *(_WORD *)(*(void *)a1 + 198LL);
      unsigned __int16 v29 = v18;
      int v30 = v6;
      if (v16 != 10) {
        unsigned __int16 v18 = sub_138D8(a1);
      }
      xmmword_7C350(*(unsigned __int16 *)(v17 + 192));
      unsigned __int8 v19 = *((_BYTE *)a1 + 384) * *(_BYTE *)(*((void *)a1 + 49) + 57LL);
      unsigned __int8 v20 = *((_BYTE *)a1 + 385);
      xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
      char v21 = *(_BYTE *)(*((void *)a1 + 49) + 56LL);
      char v22 = sub_1393C(a1);
      BOOL v2 = sub_139BC( (uint64_t)v31,  v5,  v30,  v9,  v10,  v18,  v19,  v20,  v21,  v22,  (a1[92] & 0xFFFFFFFE) == 8,  dword_7C4B8,  xmmword_7C430);
      if (xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL)))
      {
        BOOL v23 = v16 == 10;
        unsigned __int16 v24 = v29;
        if (!v23) {
          unsigned __int16 v24 = sub_138D8(a1);
        }
        unsigned __int8 v25 = *((_BYTE *)a1 + 384);
        unsigned __int8 v26 = *((_BYTE *)a1 + 385);
        xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
        char v27 = *(_BYTE *)(*((void *)a1 + 49) + 56LL);
        char v28 = sub_1393C(a1);
        return v2 & sub_139BC( (uint64_t)v31,  v5,  v30,  v9,  v10,  v24,  v25,  v26,  v27,  v28,  (a1[92] & 0xFFFFFFFE) == 8,  dword_7C4B8,  xmmword_7C430);
      }
    }
  }

  return v2;
}

uint64_t sub_138D8(_DWORD *a1)
{
  unsigned __int16 v1 = 6;
  switch(a1[92])
  {
    case 4:
      unsigned __int16 v1 = *(_WORD *)(*(void *)a1 + 196LL);
      break;
    case 6:
      unsigned __int16 v1 = *(_WORD *)(*(void *)a1 + 198LL);
      break;
    case 8:
      return v1;
    case 9:
      unsigned __int16 v1 = 6 * *(_WORD *)(*(void *)a1 + 198LL);
      break;
    default:
      unsigned __int16 v1 = 1;
      break;
  }

  return v1;
}

BOOL sub_1393C(void *a1)
{
  int v2 = *(_DWORD *)(a1[49] + 24LL);
  unsigned int v5 = v2 - 35420;
  return !v4 || v5 < 4;
}

BOOL sub_139BC( uint64_t a1, int a2, int a3, unsigned __int8 a4, unsigned __int8 a5, unsigned __int16 a6, unsigned __int8 a7, unsigned __int8 a8, char a9, char a10, char a11, unsigned int a12, char a13)
{
  *(_BYTE *)(a1 + 14) = a7;
  *(_WORD *)a1 = a2;
  *(_WORD *)(a1 + 2) = a3;
  *(_WORD *)(a1 + 4) = a6;
  *(_BYTE *)(a1 + 8) = a8;
  *(_WORD *)(a1 + 6) = a12;
  *(_BYTE *)(a1 + 17) = a13;
  *(_BYTE *)(a1 + 15) = a9;
  *(_BYTE *)(a1 + 18) = a4;
  *(_BYTE *)(a1 + 19) = a5;
  *(_BYTE *)(a1 + 20) = 0;
  if (a8 < 2u || a6 < 2u || a12 <= 0x1000 || (uint64_t v13 = 0LL, a13))
  {
    unsigned int v14 = (a2 + a4 - 1) / a4;
    unsigned int v15 = (a3 + a5 - 1) / a5;
    if (vm_page_size <= v14 * a7 * v15 && vm_page_size >= (unsigned __int16)a12)
    {
      if (a11) {
        char v17 = 2;
      }
      else {
        char v17 = 1;
      }
      if (!a10) {
        char v17 = 0;
      }
      *(_BYTE *)(a1 + 16) = v17;
      unsigned int v18 = 3 * (unsigned __int16)a12;
      unsigned int v19 = v18 / a7;
      unsigned int v20 = 32 - __clz(v19 - 1);
      if (v19 >= 2) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = 0;
      }
      unsigned int v22 = v21 >> 1;
      *(_BYTE *)(a1 + 12) = v21 >> 1;
      unsigned int v23 = v21 - (v21 >> 1);
      *(_BYTE *)(a1 + 13) = v21 - (v21 >> 1);
      if (a10)
      {
        unsigned int v23 = (v21 - (v21 >> 1));
        unsigned int v22 = (v21 >> 1);
        if (v22 <= 5) {
          LOBYTE(v22) = 5;
        }
        *(_BYTE *)(a1 + 12) = v22;
        if (v23 <= 5) {
          LOBYTE(v23) = 5;
        }
        *(_BYTE *)(a1 + 13) = v23;
      }

      *(_BYTE *)(a1 + 9) = (a7 << (v23 + v22)) / (unsigned __int16)a12;
      if (v14 < 2) {
        LOBYTE(v24) = 0;
      }
      else {
        unsigned int v24 = 32 - __clz(~(-1 << -(char)__clz(v14 - 1)));
      }
      *(_BYTE *)(a1 + 10) = v24;
      if (v15 < 2) {
        LOBYTE(v25) = 0;
      }
      else {
        unsigned int v25 = 32 - __clz(~(-1 << -(char)__clz(v15 - 1)));
      }
      *(_BYTE *)(a1 + 11) = v25;
      uint64_t v13 = v14 >> v22;
      if ((_DWORD)v13) {
        return v15 >> v23 != 0;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v13;
}

uint64_t sub_13BA8(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = sub_14680(a1, *(unsigned __int8 *)(a1 + 385), a2);
  if (sub_13624((_DWORD *)a1))
  {
    uint64_t v4 = v3 + dword_7C4B8 - 1;
    uint64_t v5 = -(uint64_t)dword_7C4B8;
  }

  else
  {
    uint64_t v5 = -16384LL;
    if (v3 <= 0x4000) {
      uint64_t v5 = -128LL;
    }
    uint64_t v6 = 0x3FFFLL;
    if (v3 <= 0x4000) {
      uint64_t v6 = 127LL;
    }
    uint64_t v4 = v6 + v3;
  }

  return v4 & v5;
}

uint64_t sub_13C1C(uint64_t a1)
{
  unint64_t v2 = sub_13F3C(a1, *(unsigned __int8 *)(a1 + 385), 0);
  if (sub_13624((_DWORD *)a1))
  {
    uint64_t v3 = v2 + dword_7C4B8 - 1;
    uint64_t v4 = -(uint64_t)dword_7C4B8;
  }

  else
  {
    uint64_t v4 = -16384LL;
    if (v2 <= 0x4000) {
      uint64_t v4 = -128LL;
    }
    uint64_t v5 = 0x3FFFLL;
    if (v2 <= 0x4000) {
      uint64_t v5 = 127LL;
    }
    uint64_t v3 = v5 + v2;
  }

  return v3 & v4;
}

uint64_t sub_13C90(uint64_t a1, __IOSurface *a2, unsigned int a3)
{
  if ((_BYTE)xmmword_7C430) {
    return 0LL;
  }
  xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
  if ((**(_WORD **)a1 & 0x800) != 0)
  {
    if (sub_13ED4((void *)a1)) {
      size_t v12 = 0LL;
    }
    else {
      size_t v12 = *(unsigned __int16 *)(*(void *)a1 + 248LL);
    }
    return IOSurfaceGetBytesPerRowOfPlane(a2, v12);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 8LL * a3 + 392);
    int v7 = *(_DWORD *)(a1 + 368);
    unsigned int v8 = *(unsigned __int16 *)(*(void *)a1 + 268LL);
    if ((v7 - 1) >= 2)
    {
      unsigned int v13 = 32 - __clz(v8 - 1);
      uint64_t v14 = *(unsigned __int8 *)(v6 + 57);
      if (v13 <= 2) {
        char v15 = 2;
      }
      else {
        char v15 = v13;
      }
      BOOL v16 = v8 >= 2;
      if (v8 >= 2) {
        char v17 = v15;
      }
      else {
        char v17 = 2;
      }
      if (!v16) {
        LOBYTE(v13) = 0;
      }
      if (v7 != 10) {
        char v17 = v13;
      }
      return v14 << v17;
    }

    else
    {
      uint64_t v9 = *(unsigned __int8 *)(v6 + 57);
      uint64_t v10 = off_7C388(v9 * *(unsigned __int16 *)(*(void *)a1 + 268LL));
      return off_7C3A0(v10, v9);
    }
  }

size_t sub_13DEC(uint64_t a1, __IOSurface *a2, unsigned int a3)
{
  if ((**(_WORD **)a1 & 0x800) != 0)
  {
    if (sub_13ED4((void *)a1)) {
      size_t v11 = 0LL;
    }
    else {
      size_t v11 = *(unsigned __int16 *)(*(void *)a1 + 248LL);
    }
    return IOSurfaceGetBytesPerRowOfPlane(a2, v11);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 8LL * a3 + 392);
    unsigned int v7 = *(unsigned __int16 *)(*(void *)a1 + 268LL);
    if ((*(_DWORD *)(a1 + 368) - 1) >= 2)
    {
      unsigned int v12 = 32 - __clz(v7 - 1);
      uint64_t v13 = *(unsigned __int8 *)(v6 + 57);
      if (v7 >= 2) {
        char v14 = v12;
      }
      else {
        char v14 = 0;
      }
      return v13 << v14;
    }

    else
    {
      uint64_t v8 = *(unsigned __int8 *)(v6 + 57);
      uint64_t v9 = off_7C388(v8 * *(unsigned __int16 *)(*(void *)a1 + 268LL));
      return off_7C3A0(v9, v8);
    }
  }

BOOL sub_13ED4(void *a1)
{
  if (*(_DWORD *)(a1[49] + 32LL) < 2u) {
    return 0LL;
  }
  xmmword_7C350(*(unsigned __int16 *)(*a1 + 192LL));
  return *(_DWORD *)(a1[49] + 92LL) == 0;
}

uint64_t sub_13F3C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 8LL * a3 + 392);
  unsigned int v7 = *(unsigned __int8 *)(v6 + 57);
  uint64_t v8 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v6 + 60));
  unsigned int v10 = *v8;
  unsigned int v9 = v8[1];
  int v11 = *(unsigned __int16 *)(*(void *)a1 + 194LL);
  int v12 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
  unsigned __int16 v13 = *(_WORD *)(*(void *)a1 + 198LL);
  if (sub_13624((_DWORD *)a1))
  {
    if (*(_DWORD *)(a1 + 368) != 10) {
      unsigned __int16 v13 = sub_138D8((_DWORD *)a1);
    }
    unsigned __int8 v14 = *(_BYTE *)(a1 + 384) * v7;
    unsigned __int8 v15 = *(_BYTE *)(a1 + 385);
    char v16 = *(_BYTE *)(v6 + 56);
    char v17 = sub_1393C((void *)a1);
    sub_139BC( (uint64_t)v27,  v11,  v12,  v10,  v9,  v13,  v14,  v15,  v16,  v17,  (*(_DWORD *)(a1 + 368) & 0xFFFFFFFE) == 8,  dword_7C4B8,  xmmword_7C430);
    return sub_14174(v27, a2);
  }

  else
  {
    unsigned int v19 = (v9 + *(unsigned __int16 *)(*(void *)a1 + 196LL) - 1) / v9;
    unsigned int v20 = 1 << -(char)__clz((v10 + *(unsigned __int16 *)(*(void *)a1 + 194LL) - 1) / v10 - 1);
    unsigned int v21 = 1 << -(char)__clz(v19 - 1);
    if ((*(_DWORD *)(a1 + 368) - 3) <= 6
      && *(_BYTE *)(v6 + 56)
      && sub_143D8((uint64_t *)a1, 0, 0, 0) == 1)
    {
      int v22 = -1 << *(_BYTE *)(v6 + 56);
      unsigned int v20 = (v20 + ~v22) & v22;
      unsigned int v21 = (v21 + ~v22) & v22;
    }

    if (*(unsigned __int8 *)(*(void *)a1 + 208LL) + a2 <= *(unsigned __int8 *)(*(void *)a1 + 208LL))
    {
      uint64_t v23 = 0LL;
    }

    else
    {
      uint64_t v23 = 0LL;
      do
      {
        v23 += (v7 * (unint64_t)(v20 * v21) + 127) & 0x1FFFFFFFF80LL;
        v21 >>= v21 > 1;
        v20 >>= v20 > 1;
        --a2;
      }

      while (a2);
    }

    unint64_t v24 = *(unsigned __int8 *)(a1 + 384);
    BOOL v25 = v24 > 1;
    unint64_t v26 = v23 * v24;
    if (v25) {
      return v26;
    }
    else {
      return v23;
    }
  }

uint64_t sub_14174(unsigned __int16 *a1, int a2)
{
  if (a2)
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = 0;
    unsigned int v45 = *((unsigned __int8 *)a1 + 11);
    unsigned int v46 = *((unsigned __int8 *)a1 + 10);
    unsigned int v43 = *a1;
    unsigned int v44 = *((unsigned __int8 *)a1 + 16) - 1;
    int v41 = *((unsigned __int8 *)a1 + 9);
    unsigned int v42 = a1[1];
    int v6 = a1[3];
    while (1)
    {
      char v7 = v46 >= v5 ? v46 - v5 : 0;
      char v8 = v45 >= v5 ? v45 - v5 : 0;
      unsigned int v9 = v43 >> v5;
      unsigned int v10 = v42 >> v5;
      if (v44 > 1)
      {
        if (v9 <= 1) {
          unsigned int v9 = 1;
        }
        unsigned int v12 = (*((unsigned __int8 *)a1 + 18) + v9 - 1) / *((unsigned __int8 *)a1 + 18);
        if (v10 <= 1) {
          unsigned int v10 = 1;
        }
        unsigned int v19 = *((unsigned __int8 *)a1 + 19);
        unsigned int v20 = v19 + v10 - 1;
        char v21 = *((_BYTE *)a1 + 15);
        unsigned int v14 = v20 / v19;
        if (v21)
        {
          unsigned int v22 = 1 << v21;
          int v23 = -1 << v21;
          int v24 = (v12 + ~v23) & v23;
          int v25 = (v14 + ~v23) & v23;
          if (v22 <= v14) {
            unsigned int v26 = v24;
          }
          else {
            unsigned int v26 = v12;
          }
          if (v22 > v14) {
            int v25 = v14;
          }
          if (v22 <= v12)
          {
            unsigned int v12 = v26;
            unsigned int v14 = v25;
          }
        }

        unsigned __int8 v17 = *((_BYTE *)a1 + 13);
        uint64_t v18 = *((unsigned __int8 *)a1 + 12);
        unsigned int v15 = v12;
        unsigned int v16 = v14;
      }

      else
      {
        unsigned int v11 = (*((unsigned __int8 *)a1 + 18) + v9 - 1) / *((unsigned __int8 *)a1 + 18);
        unsigned int v12 = v11 <= 1 ? 1 : v11;
        unsigned int v13 = (*((unsigned __int8 *)a1 + 19) + v10 - 1) / *((unsigned __int8 *)a1 + 19);
        unsigned int v14 = v13 <= 1 ? 1 : v13;
        unsigned int v15 = 1 << v7;
        unsigned int v16 = 1 << v8;
        unsigned __int8 v17 = *((_BYTE *)a1 + 13);
        uint64_t v18 = *((unsigned __int8 *)a1 + 12);
      }

      sub_145BC(v18, v17, v15, v16, &v48, &v47);
      unsigned int v27 = (v12 + ~(-1 << v48)) >> v48;
      unsigned int v28 = (v14 + ~(-1 << v47)) >> v47;
      unint64_t v29 = sub_14554((unsigned __int8 *)a1, v7, v8);
      unint64_t v30 = v28 * v27 * v41 * v6;
      if (v30 >= 4 * v29 / 3) {
        break;
      }
      v4 += v30;
      if (a2 == ++v5) {
        goto LABEL_35;
      }
    }
  }

  else
  {
    unsigned int v5 = 0;
    uint64_t v4 = 0LL;
  }

  int v31 = a2 - v5;
  if (a2 == v5)
  {
LABEL_35:
    uint64_t v32 = 0LL;
  }

  else
  {
    uint64_t v32 = 0LL;
    unsigned int v33 = *((unsigned __int8 *)a1 + 11);
    BOOL v34 = v33 >= v5;
    unsigned int v35 = v33 - v5;
    if (v34) {
      unsigned int v36 = v35;
    }
    else {
      unsigned int v36 = 0;
    }
    unsigned int v37 = *((unsigned __int8 *)a1 + 10);
    BOOL v34 = v37 >= v5;
    unsigned int v38 = v37 - v5;
    if (v34) {
      unsigned int v39 = v38;
    }
    else {
      unsigned int v39 = 0;
    }
    do
    {
      v32 += sub_14554((unsigned __int8 *)a1, v39, v36);
      if (v39) {
        --v39;
      }
      else {
        unsigned int v39 = 0;
      }
      if (v36) {
        --v36;
      }
      else {
        unsigned int v36 = 0;
      }
      --v31;
    }

    while (v31);
  }

  return v32 + v4;
}

uint64_t sub_143D8(uint64_t *a1, unsigned int a2, unsigned int a3, char a4)
{
  uint64_t v8 = *a1;
  xmmword_7C350(*(unsigned __int16 *)(*a1 + 192));
  int v9 = *(_DWORD *)(a1[49] + 24);
  uint64_t v11 = v8 + 480LL * a3 + 32LL * a2;
  if (*(unsigned __int16 *)(v11 + 268) >= 0x20u && *(unsigned __int16 *)(v8 + 480LL * a3 + 32LL * a2 + 270) > 0x1Fu
    || dword_7C424 == 3)
  {
    return 0LL;
  }

  if (dword_7C424 == 2)
  {
    return 0LL;
  }

  if (dword_7C424 == 1 && v9 == 6402)
  {
    char v12 = xmmword_7C350(*(unsigned __int16 *)(*a1 + 192));
    if ((a4 & 0xF) == 0
      && (v12 & 1) == 0
      && *((_BYTE *)a1 + 384) == 1
      && *(unsigned __int16 *)(v11 + 268) >= 3u
      && *(unsigned __int16 *)(v8 + 480LL * a3 + 32LL * a2 + 270) > 2u)
    {
      return 0LL;
    }
  }

LABEL_22:
  if ((*(_WORD *)*a1 & 0x2000) != 0) {
    return 1LL;
  }
  else {
    return 2LL;
  }
}

          unint64_t v29 = __dst[1];
          unint64_t v30 = (unsigned __int16 *)((char *)v14 - v15);
          if (*v30 >= 5u && (int v31 = v30[2]) != 0) {
            uint64_t v32 = *(unsigned int *)((char *)v14 + v31);
          }
          else {
            uint64_t v32 = 0LL;
          }
          unsigned int v33 = off_7C298(v13);
          (*(void (**)(uint64_t, void *, uint64_t, uint64_t, void))(*(void *)v10 + 16LL))( v10,  v29,  v32,  v33,  0LL);
          *(void *)(*(void *)(a1 + 8) + 2744LL) = v34;
          memcpy(v35, *(const void **)(v10 + 40), *(void *)(v10 + 24));
          memcpy(v37, *(const void **)(v10 + 32), *(void *)(v10 + 16));
          off_7C2A0(a3, v38, v36, a2);
          return 1LL;
        }
      }
    }
  }

  return result;
}

      *uint64_t v11 = v10;
    }

    else
    {
      while (v8)
      {
        uint64_t v4 = v8;
        uint64_t v8 = (void *)v8[5];
        if (sub_22184(a2, *v4, 0))
        {
          sub_6F91C((void *)a2, (uint64_t)v4);
          unsigned int v10 = v4[5];
          uint64_t v11 = (void *)v4[6];
          if (v10) {
            goto LABEL_21;
          }
          *((void *)a1 + 4) = v11;
          goto LABEL_22;
        }
      }

      if (a1[12] > 9)
      {
        unsigned int v20 = *((void *)a1 + 3);
        sub_6F91C((void *)a2, v20);
        char v21 = *(void *)(v20 + 40);
        unsigned int v22 = *(void **)(v20 + 48);
        if (v21)
        {
          *(void *)(v21 + 48) = v22;
          unsigned int v22 = *(void **)(v20 + 48);
        }

        else
        {
          *((void *)a1 + 4) = v22;
        }

        double result = 0LL;
        *unsigned int v22 = v21;
        int v25 = *((void *)a1 + 1);
        *(void *)(v20 + 40) = v25;
        if (v25) {
          unsigned int v26 = (void *)(v25 + 48);
        }
        else {
          unsigned int v26 = a1 + 4;
        }
        *unsigned int v26 = v20 + 40;
        *((void *)a1 + 1) = v20;
        *(void *)(v20 + 48) = a1 + 2;
        goto LABEL_43;
      }

      uint64_t v4 = operator new(0x2040uLL);
      *((_DWORD *)v4 + 2062) = 0;
      *(_OWORD *)(v4 + 1) = 0u;
      *(_OWORD *)(v4 + 3) = 0u;
      unsigned int v27 = 0u;
      unsigned int v28 = 0LL;
      unsigned int v36 = 0LL;
      unsigned int v33 = 0LL;
      unsigned int v35 = 0u;
      int v31 = 0u;
      uint64_t v32 = 0u;
      unint64_t v30 = 0u;
      BOOL v34 = (dword_7C4B8 + 0x1FFFLL) & -(uint64_t)dword_7C4B8;
      BYTE3(v30) = 4;
      DWORD1(v27) = 1024;
      LOWORD(v30) = 257;
      WORD4(v27) = (dword_7C4B8 + 0x1FFF) & -(__int16)dword_7C4B8;
      *(_DWORD *)((char *)&v27 + 10) = 65537;
      unint64_t v29 = v34;
      double result = IOAccelResourceCreate( *(void *)(*(void *)(a2 + 16) + 40LL),  &v27,  *(void *)(*(void *)(a2 + 8) + 552LL));
      *uint64_t v4 = result;
      if (!result) {
        goto LABEL_43;
      }
      v4[1] = IOAccelResourceGetClientShared(result, v4 + 2);
      v4[4] = IOAccelResourceGetDataBytes(*v4);
      IOAccelResourceGetClientSharedPrivate(*v4, 0LL);
      v4[3] = IOAccelResourceGetGPUVirtualAddress(*v4);
      bzero((void *)v4[4], 0x2000uLL);
      ++a1[12];
    }

    *((void *)a1 + 5) = v4;
LABEL_24:
    unsigned int v15 = sub_639A8( a2 + 2544,  *(_DWORD **)(a2 + 2688),  *(_DWORD *)(v4[1] + 256LL),  *v4,  12,  (unsigned int *)(v4[2] + 24LL),  0,  0LL);
    double result = 0LL;
    if (!v15) {
      return result;
    }
    unsigned int v16 = *((void *)a1 + 5);
    *(_DWORD *)(v16 + 4LL * *(unsigned int *)(v16 + 8248) + 56) = *a1;
    unsigned __int8 v17 = *(_DWORD *)(v16 + 8248);
    *(_DWORD *)(v16 + 8248) = v17 + 1;
    a1[1] = v17;
    *(void *)(*(void *)(a2 + 2232) + 16LL * *a1 + 8) = v16;
    return 1LL;
  }

  unsigned int v13 = v9[5];
  unsigned int v14 = (uint64_t *)v9[6];
  if (v13)
  {
    *(void *)(v13 + 48) = v14;
    unsigned int v14 = (uint64_t *)v9[6];
  }

  else
  {
    *((void *)a1 + 4) = v14;
  }

  *unsigned int v14 = v13;
  *((void *)a1 + 5) = v9;
  if (sub_639A8( a2 + 2544,  *(_DWORD **)(a2 + 2688),  *(_DWORD *)(v9[1] + 256),  *v9,  12,  (unsigned int *)(v9[2] + 24),  0,  0LL))
  {
    return 1LL;
  }

  double result = 0LL;
  uint64_t v18 = *((void *)a1 + 5);
  *(void *)(v18 + 40) = 0LL;
  unsigned int v19 = (void *)*((void *)a1 + 4);
  *(void *)(v18 + 48) = v19;
  *unsigned int v19 = v18;
  *((void *)a1 + 4) = *((void *)a1 + 5) + 40LL;
LABEL_43:
  *((void *)a1 + 5) = 0LL;
  return result;
}

unint64_t sub_14554(unsigned __int8 *a1, char a2, char a3)
{
  int v3 = a1[17];
  if (a1[16] == 2 && v3 == 0)
  {
    uint64_t v6 = 1LL << a3;
  }

  else
  {
    if (v3 == 3 || v3 == 2) {
      return ((1LL << a2 << a3) * a1[14] + 127) & 0xFFFFFFFFFFFFFF80LL;
    }
    uint64_t v6 = 1LL << a2;
  }

  return (v6 << a3) * a1[14];
}

uint64_t sub_145BC( uint64_t result, unsigned __int8 a2, unsigned int a3, unsigned int a4, unsigned int *a5, int *a6)
{
  *a6 = a2;
  *a5 = result;
  int v6 = *a6;
  if (1 << *a6 < a4 && a3 >> result == 0)
  {
    unsigned int v12 = 32 - __clz(~(-1 << -(char)__clz(a3 - 1)));
    if (a3 < 2) {
      unsigned int v12 = 0;
    }
    *a5 = v12;
    int v11 = result - v12 + *a6;
    goto LABEL_15;
  }

  if (a4 >> v6) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = 1 << result >= a3;
  }
  if (!v8)
  {
    unsigned int v9 = __clz(~(-1 << -(char)__clz(a4 - 1))) - 32;
    if (a4 < 2) {
      unsigned int v9 = 0;
    }
    unsigned int v10 = v9 + v6;
    *a5 = v10 + result;
    int v11 = *a6 - v10;
LABEL_15:
    *a6 = v11;
  }

  return result;
}

uint64_t sub_14680(uint64_t a1, int a2, unsigned int a3)
{
  int v4 = a2;
  if ((*(_WORD *)(*(void *)a1 + 214LL) & 0x1800) != 0) {
    return sub_13F3C(a1, a2, a3);
  }
  xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
  uint64_t v7 = *(void *)(a1 + 8LL * a3 + 392);
  unsigned int v8 = *(unsigned __int8 *)(v7 + 57);
  unsigned int v9 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v7 + 60));
  unsigned int v11 = *v9;
  unsigned int v10 = v9[1];
  int v12 = *(unsigned __int16 *)(*(void *)a1 + 194LL);
  int v13 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
  unsigned int v14 = *(unsigned __int16 *)(*(void *)a1 + 198LL);
  if (sub_13624((_DWORD *)a1))
  {
    if (*(_DWORD *)(a1 + 368) != 10) {
      LOWORD(v14) = sub_138D8((_DWORD *)a1);
    }
    unsigned __int8 v15 = *(_BYTE *)(a1 + 384) * v8;
    unsigned __int8 v16 = *(_BYTE *)(a1 + 385);
    char v17 = *(_BYTE *)(v7 + 56);
    char v18 = sub_1393C((void *)a1);
    sub_139BC( (uint64_t)v31,  v12,  v13,  v11,  v10,  v14,  v15,  v16,  v17,  v18,  (*(_DWORD *)(a1 + 368) & 0xFFFFFFFE) == 8,  dword_7C4B8,  xmmword_7C430);
    return sub_14174(v31, v4);
  }

  else
  {
    unsigned int v19 = (v10 + *(unsigned __int16 *)(*(void *)a1 + 196LL) - 1) / v10;
    unsigned int v20 = 1 << -(char)__clz((v11 + *(unsigned __int16 *)(*(void *)a1 + 194LL) - 1) / v11 - 1);
    unsigned int v21 = 1 << -(char)__clz(v19 - 1);
    int v22 = *(_DWORD *)(a1 + 368);
    if ((v22 - 3) >= 7)
    {
      if (v14) {
        int v25 = v14;
      }
      else {
        int v25 = 1;
      }
      if (v22 == 10) {
        unsigned int v24 = v25;
      }
      else {
        unsigned int v24 = v14;
      }
    }

    else
    {
      if (*(_BYTE *)(v7 + 56) && sub_143D8((uint64_t *)a1, 0, 0, 0) == 1)
      {
        int v23 = -1 << *(_BYTE *)(v7 + 56);
        unsigned int v20 = (v20 + ~v23) & v23;
        unsigned int v21 = (v21 + ~v23) & v23;
      }

      unsigned int v24 = 1;
    }

    if (*(unsigned __int8 *)(*(void *)a1 + 208LL) + v4 <= *(unsigned __int8 *)(*(void *)a1 + 208LL))
    {
      uint64_t v26 = 0LL;
    }

    else
    {
      uint64_t v26 = 0LL;
      do
      {
        v26 += ((v8 * (unint64_t)(v20 * v21) + 127) & 0x1FFFFFFFF80LL) * v24;
        BOOL v27 = *(_DWORD *)(a1 + 368) == 10 && v24 > 1;
        char v28 = v27;
        v24 >>= v28;
        v21 >>= v21 > 1;
        v20 >>= v20 > 1;
        --v4;
      }

      while (v4);
    }

    unint64_t v29 = *(unsigned __int8 *)(a1 + 384);
    BOOL v27 = v29 > 1;
    unint64_t v30 = v26 * v29;
    if (v27) {
      return v30;
    }
    else {
      return v26;
    }
  }

uint64_t sub_14920(uint64_t a1, unsigned int a2)
{
  switch(*(_DWORD *)(a1 + 368))
  {
    case 1:
    case 2:
      uint64_t v5 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
      sub_132A0((void *)a1);
      uint64_t v4 = sub_13C90(a1, *(__IOSurface **)(*(void *)a1 + 256LL), 0) * v5;
      break;
    case 3:
    case 5:
    case 7:
      uint64_t v4 = sub_14680(a1, *(unsigned __int8 *)(a1 + 385), a2);
      break;
    case 4:
      uint64_t v6 = sub_13BA8(a1, a2);
      uint64_t v7 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
      goto LABEL_10;
    case 6:
      uint64_t v6 = sub_13BA8(a1, a2);
      goto LABEL_9;
    case 8:
    case 9:
      uint64_t v6 = sub_13BA8(a1, a2);
      uint64_t v7 = *(unsigned __int8 *)(*(void *)a1 + 211LL);
      goto LABEL_10;
    case 0xA:
      uint64_t v6 = sub_13C1C(a1);
LABEL_9:
      uint64_t v7 = *(unsigned __int16 *)(*(void *)a1 + 198LL);
LABEL_10:
      uint64_t v4 = v6 * v7;
      break;
    default:
      uint64_t v4 = 0LL;
      break;
  }

  int v8 = xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
  if (!a2 && v8) {
    return (v4 + dword_7C4B8 - 1) & -(uint64_t)dword_7C4B8;
  }
  return v4;
}

BOOL sub_14A48(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2;
  if (xmmword_7C450 >= *(unsigned __int16 *)(*a2 + 194LL)
    && xmmword_7C450 >= *(unsigned __int16 *)(v2 + 196))
  {
    xmmword_7C350(*(unsigned __int16 *)(v2 + 192));
    uint64_t v6 = *(unsigned __int8 *)(a2[49] + 57LL);
    uint64_t v24 = 0LL;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v19 = 0u;
    memset(v18, 0, sizeof(v18));
    uint64_t v7 = *a2;
    unsigned int v8 = *(unsigned __int16 *)(*a2 + 194LL);
    unsigned int v9 = *(unsigned __int16 *)(*a2 + 196LL);
    unsigned int v10 = *(unsigned __int16 *)(*a2 + 198LL);
    char v11 = *(_BYTE *)(*a2 + 208LL);
    if (v11)
    {
      LOWORD(v8) = (v8 >> v11) | (v8 >> v11 == 0);
      LOWORD(v9) = (v9 >> v11) | (v9 >> v11 == 0);
      LOWORD(v10) = (v10 >> v11) | (v10 >> v11 == 0);
    }

    uint64_t v12 = 0LL;
    LODWORD(v18[0]) = 130;
    unsigned int v13 = *(unsigned __int16 *)(v7 + 250);
    DWORD1(v21) = *(unsigned __int16 *)(v7 + 248);
    *((void *)&v21 + 1) = v13 | 0x8000000000LL;
    LOBYTE(v19) = *(_BYTE *)(v7 + 211);
    BYTE1(v19) = *(_BYTE *)(v7 + 209);
    BYTE2(v19) = v11;
    BYTE3(v19) = v6;
    WORD4(v18[0]) = v8;
    WORD5(v18[0]) = v9;
    uint64_t v14 = v7 + 48;
    WORD6(v18[0]) = v10;
    while (1)
    {
      unsigned __int8 v15 = *(__IOSurface **)(v14 + v12 * 8);
      if (v15)
      {
        if (!a2[v12 + 14])
        {
          if (IOSurfaceIsTiled(*(void *)(v14 + v12 * 8)))
          {
            size_t AllocSize = IOSurfaceGetAllocSize(v15);
            size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v15, *(unsigned __int16 *)(*a2 + 248LL));
            if (BytesPerRowOfPlane | AllocSize & 0xFFF
              || ((AllocSize / BytesPerRowOfPlane) & 0xF) != 0)
            {
              break;
            }
          }
        }
      }

      if (++v12 == 4) {
        return gpusGetKernelTextureIOSurface(a1, a2, 128LL, v6, v18) != 0;
      }
    }
  }

  return 0LL;
}

void *sub_14BF8(void *a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if ((*(_WORD *)*a1 & 0x800) != 0)
  {
    sub_132A0(a1);
    return IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(*a1 + 256LL), *(unsigned __int16 *)(*a1 + 248LL));
  }

  else
  {
    uint64_t v10 = sub_15030((uint64_t)a1, a2, a5);
    if (a5)
    {
      unsigned int v11 = 0;
      uint64_t v12 = 0LL;
      do
        v12 += sub_152C8((uint64_t)a1, v11++);
      while (a5 != v11);
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    uint64_t v14 = v12 + v10;
    if (a3) {
      v14 += sub_14D1C((uint64_t)a1, a5) * a3;
    }
    if (a4)
    {
      if ((*(_WORD *)(*a1 + 214LL) & 0x2000) != 0) {
        v14 += sub_14D1C((uint64_t)a1, a5) * a4;
      }
    }

    sub_132A0(a1);
    return (void *)(a1[6] + v14);
  }

uint64_t sub_14D1C(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = sub_15030(a1, *(unsigned __int8 *)(a1 + 385), a2);
  if (sub_13624((_DWORD *)a1))
  {
    uint64_t v4 = v3 + dword_7C4B8 - 1;
    uint64_t v5 = -(uint64_t)dword_7C4B8;
  }

  else
  {
    uint64_t v5 = -64LL;
    if (v3 > 0x4000) {
      uint64_t v5 = -16384LL;
    }
    uint64_t v6 = 63LL;
    if (v3 > 0x4000) {
      uint64_t v6 = 0x3FFFLL;
    }
    uint64_t v4 = v6 + v3;
  }

  return v4 & v5;
}

uint64_t sub_14D90(uint64_t a1)
{
  unint64_t v2 = sub_14E04(a1, *(unsigned __int8 *)(a1 + 385), 0);
  if (sub_13624((_DWORD *)a1))
  {
    uint64_t v3 = v2 + dword_7C4B8 - 1;
    uint64_t v4 = -(uint64_t)dword_7C4B8;
  }

  else
  {
    uint64_t v4 = -64LL;
    if (v2 > 0x4000) {
      uint64_t v4 = -16384LL;
    }
    uint64_t v5 = 63LL;
    if (v2 > 0x4000) {
      uint64_t v5 = 0x3FFFLL;
    }
    uint64_t v3 = v5 + v2;
  }

  return v3 & v4;
}

uint64_t sub_14E04(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 8LL * a3 + 392);
  unsigned int v7 = *(unsigned __int8 *)(v6 + 57);
  unsigned int v8 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v6 + 60));
  unsigned int v10 = *v8;
  unsigned int v9 = v8[1];
  int v11 = *(unsigned __int16 *)(*(void *)a1 + 194LL);
  int v12 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
  unsigned __int16 v13 = *(_WORD *)(*(void *)a1 + 198LL);
  if (sub_13624((_DWORD *)a1))
  {
    if (*(_DWORD *)(a1 + 368) != 10) {
      unsigned __int16 v13 = sub_138D8((_DWORD *)a1);
    }
    unsigned __int8 v14 = *(_BYTE *)(a1 + 384) * v7;
    unsigned __int8 v15 = *(_BYTE *)(a1 + 385);
    char v16 = *(_BYTE *)(v6 + 56);
    char v17 = sub_1393C((void *)a1);
    sub_139BC( (uint64_t)v27,  v11,  v12,  v10,  v9,  v13,  v14,  v15,  v16,  v17,  (*(_DWORD *)(a1 + 368) & 0xFFFFFFFE) == 8,  dword_7C4B8,  xmmword_7C430);
    return sub_14174(v27, a2);
  }

  else
  {
    unsigned int v19 = (v9 + *(unsigned __int16 *)(*(void *)a1 + 196LL) - 1) / v9;
    unsigned int v20 = 1 << -(char)__clz((v10 + *(unsigned __int16 *)(*(void *)a1 + 194LL) - 1) / v10 - 1);
    unsigned int v21 = 1 << -(char)__clz(v19 - 1);
    if ((*(_DWORD *)(a1 + 368) - 3) <= 6
      && *(_BYTE *)(v6 + 56)
      && sub_143D8((uint64_t *)a1, 0, 0, 0) == 1)
    {
      int v22 = -1 << *(_BYTE *)(v6 + 56);
      unsigned int v20 = (v20 + ~v22) & v22;
      unsigned int v21 = (v21 + ~v22) & v22;
    }

    if (*(unsigned __int8 *)(*(void *)a1 + 208LL) + a2 <= *(unsigned __int8 *)(*(void *)a1 + 208LL))
    {
      uint64_t v23 = 0LL;
    }

    else
    {
      uint64_t v23 = 0LL;
      do
      {
        v23 += v7 * (unint64_t)(v20 * v21);
        v21 >>= v21 > 1;
        v20 >>= v20 > 1;
        --a2;
      }

      while (a2);
    }

    unint64_t v24 = *(unsigned __int8 *)(a1 + 384);
    BOOL v25 = v24 > 1;
    unint64_t v26 = v23 * v24;
    if (v25) {
      return v26;
    }
    else {
      return v23;
    }
  }

uint64_t sub_15030(uint64_t a1, int a2, unsigned int a3)
{
  int v4 = a2;
  if ((*(_WORD *)(*(void *)a1 + 214LL) & 0x1800) != 0) {
    return sub_14E04(a1, a2, a3);
  }
  xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
  uint64_t v7 = *(void *)(a1 + 8LL * a3 + 392);
  unsigned int v8 = *(unsigned __int8 *)(v7 + 57);
  unsigned int v9 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v7 + 60));
  unsigned int v11 = *v9;
  unsigned int v10 = v9[1];
  int v12 = *(unsigned __int16 *)(*(void *)a1 + 194LL);
  int v13 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
  unsigned int v14 = *(unsigned __int16 *)(*(void *)a1 + 198LL);
  if (sub_13624((_DWORD *)a1))
  {
    if (*(_DWORD *)(a1 + 368) != 10) {
      LOWORD(v14) = sub_138D8((_DWORD *)a1);
    }
    unsigned __int8 v15 = *(_BYTE *)(a1 + 384) * v8;
    unsigned __int8 v16 = *(_BYTE *)(a1 + 385);
    char v17 = *(_BYTE *)(v7 + 56);
    char v18 = sub_1393C((void *)a1);
    sub_139BC( (uint64_t)v31,  v12,  v13,  v11,  v10,  v14,  v15,  v16,  v17,  v18,  (*(_DWORD *)(a1 + 368) & 0xFFFFFFFE) == 8,  dword_7C4B8,  xmmword_7C430);
    return sub_14174(v31, v4);
  }

  else
  {
    unsigned int v19 = (v10 + *(unsigned __int16 *)(*(void *)a1 + 196LL) - 1) / v10;
    unsigned int v20 = 1 << -(char)__clz((v11 + *(unsigned __int16 *)(*(void *)a1 + 194LL) - 1) / v11 - 1);
    unsigned int v21 = 1 << -(char)__clz(v19 - 1);
    int v22 = *(_DWORD *)(a1 + 368);
    if ((v22 - 3) >= 7)
    {
      if (v14) {
        int v25 = v14;
      }
      else {
        int v25 = 1;
      }
      if (v22 == 10) {
        unsigned int v24 = v25;
      }
      else {
        unsigned int v24 = v14;
      }
    }

    else
    {
      if (*(_BYTE *)(v7 + 56) && sub_143D8((uint64_t *)a1, 0, 0, 0) == 1)
      {
        int v23 = -1 << *(_BYTE *)(v7 + 56);
        unsigned int v20 = (v20 + ~v23) & v23;
        unsigned int v21 = (v21 + ~v23) & v23;
      }

      unsigned int v24 = 1;
    }

    if (*(unsigned __int8 *)(*(void *)a1 + 208LL) + v4 <= *(unsigned __int8 *)(*(void *)a1 + 208LL))
    {
      uint64_t v26 = 0LL;
    }

    else
    {
      uint64_t v26 = 0LL;
      do
      {
        v26 += v8 * (unint64_t)(v20 * v21) * v24;
        BOOL v27 = *(_DWORD *)(a1 + 368) == 10 && v24 > 1;
        char v28 = v27;
        v24 >>= v28;
        v21 >>= v21 > 1;
        v20 >>= v20 > 1;
        --v4;
      }

      while (v4);
    }

    unint64_t v29 = *(unsigned __int8 *)(a1 + 384);
    BOOL v27 = v29 > 1;
    unint64_t v30 = v26 * v29;
    if (v27) {
      return v30;
    }
    else {
      return v26;
    }
  }

uint64_t sub_152C8(uint64_t a1, unsigned int a2)
{
  switch(*(_DWORD *)(a1 + 368))
  {
    case 1:
    case 2:
      uint64_t v5 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
      sub_132A0((void *)a1);
      uint64_t v4 = sub_13C90(a1, *(__IOSurface **)(*(void *)a1 + 256LL), 0) * v5;
      break;
    case 3:
    case 5:
    case 7:
      uint64_t v4 = sub_15030(a1, *(unsigned __int8 *)(a1 + 385), a2);
      break;
    case 4:
      uint64_t v6 = sub_14D1C(a1, a2);
      uint64_t v7 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
      goto LABEL_10;
    case 6:
      uint64_t v6 = sub_14D1C(a1, a2);
      goto LABEL_9;
    case 8:
    case 9:
      uint64_t v6 = sub_14D1C(a1, a2);
      uint64_t v7 = *(unsigned __int8 *)(*(void *)a1 + 211LL);
      goto LABEL_10;
    case 0xA:
      uint64_t v6 = sub_14D90(a1);
LABEL_9:
      uint64_t v7 = *(unsigned __int16 *)(*(void *)a1 + 198LL);
LABEL_10:
      uint64_t v4 = v6 * v7;
      break;
    default:
      uint64_t v4 = 0LL;
      break;
  }

  int v8 = xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
  if (!a2 && v8) {
    return (v4 + dword_7C4B8 - 1) & -(uint64_t)dword_7C4B8;
  }
  return v4;
}

void *sub_153F0(void *a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if ((*(_WORD *)*a1 & 0x800) != 0)
  {
    sub_132A0(a1);
    return IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(*a1 + 256LL), *(unsigned __int16 *)(*a1 + 248LL));
  }

  else
  {
    uint64_t v10 = sub_15570((uint64_t)a1, a2, a5);
    if (a5)
    {
      unsigned int v11 = 0;
      uint64_t v12 = 0LL;
      do
        v12 += sub_1584C((uint64_t)a1, v11++);
      while (a5 != v11);
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    uint64_t v14 = v12 + v10;
    if (a3) {
      v14 += sub_15514((uint64_t)a1, a5) * a3;
    }
    if (a4)
    {
      if ((*(_WORD *)(*a1 + 214LL) & 0x2000) != 0) {
        v14 += sub_15514((uint64_t)a1, a5) * a4;
      }
    }

    sub_132A0(a1);
    return (void *)(a1[6] + v14);
  }

unint64_t sub_15514(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = sub_15570(a1, *(unsigned __int8 *)(a1 + 385), a2);
  if (sub_13624((_DWORD *)a1)) {
    return (v3 + dword_7C4B8 - 1) & -(uint64_t)dword_7C4B8;
  }
  else {
    return (v3 + 4095) & 0xFFFFFFFFFFFFF000LL;
  }
}

uint64_t sub_15570(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 8LL * a3 + 392);
  unsigned int v7 = *(unsigned __int8 *)(v6 + 57);
  int v8 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v6 + 60));
  unsigned int v10 = *v8;
  unsigned int v9 = v8[1];
  int v11 = *(unsigned __int16 *)(*(void *)a1 + 194LL);
  int v12 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
  unsigned int v13 = *(unsigned __int16 *)(*(void *)a1 + 198LL);
  if (sub_13624((_DWORD *)a1))
  {
    if (*(_DWORD *)(a1 + 368) != 10) {
      LOWORD(v13) = sub_138D8((_DWORD *)a1);
    }
    unsigned __int8 v14 = *(_BYTE *)(a1 + 384) * v7;
    unsigned __int8 v15 = *(_BYTE *)(a1 + 385);
    char v16 = *(_BYTE *)(v6 + 56);
    char v17 = sub_1393C((void *)a1);
    sub_139BC( (uint64_t)v37,  v11,  v12,  v10,  v9,  v13,  v14,  v15,  v16,  v17,  (*(_DWORD *)(a1 + 368) & 0xFFFFFFFE) == 8,  dword_7C4B8,  xmmword_7C430);
    return sub_14174(v37, a2);
  }

  unsigned int v19 = (v9 + *(unsigned __int16 *)(*(void *)a1 + 196LL) - 1) / v9;
  unsigned int v20 = 1 << -(char)__clz((v10 + *(unsigned __int16 *)(*(void *)a1 + 194LL) - 1) / v10 - 1);
  unsigned int v21 = 1 << -(char)__clz(v19 - 1);
  int v22 = *(_DWORD *)(a1 + 368);
  if ((v22 - 3) >= 5)
  {
    if ((v22 - 8) >= 2)
    {
      if (v20 <= 4) {
        int v27 = 4;
      }
      else {
        int v27 = v20;
      }
      if (v21 <= 4) {
        int v28 = 4;
      }
      else {
        int v28 = v21;
      }
      unsigned int v29 = 1 << -(char)__clz(v13 - 1);
      if (v29 <= 4) {
        unsigned int v29 = 4;
      }
      if (v13 >= 2) {
        int v30 = v29;
      }
      else {
        int v30 = 4;
      }
      if (v22 == 10)
      {
        unsigned int v21 = v28;
        unsigned int v20 = v27;
        unsigned int v26 = v30;
      }

      else
      {
        unsigned int v26 = v13;
      }

      goto LABEL_30;
    }

    BOOL v23 = sub_1393C((void *)a1);
    if (v20 <= v21) {
      unsigned int v24 = v21;
    }
    else {
      unsigned int v24 = v20;
    }
    if (v23)
    {
      unsigned int v21 = v24;
      unsigned int v20 = v24;
    }
  }

  if (*(_BYTE *)(v6 + 56) && sub_143D8((uint64_t *)a1, 0, 0, 0) == 1)
  {
    int v25 = -1 << *(_BYTE *)(v6 + 56);
    unsigned int v20 = (v20 + ~v25) & v25;
    unsigned int v21 = (v21 + ~v25) & v25;
  }

  unsigned int v26 = 1;
LABEL_30:
  if (*(unsigned __int8 *)(*(void *)a1 + 208LL) + a2 <= *(unsigned __int8 *)(*(void *)a1 + 208LL))
  {
    uint64_t v31 = 0LL;
  }

  else
  {
    uint64_t v31 = 0LL;
    do
    {
      v31 += v7 * (unint64_t)(v20 * v21) * v26;
      char v32 = v20 > 1;
      char v33 = v21 > 1;
      if (*(_DWORD *)(a1 + 368) == 10)
      {
        char v33 = v21 > 4;
        char v32 = v20 > 4;
        v26 >>= v26 > 4;
      }

      v21 >>= v33;
      v20 >>= v32;
      --a2;
    }

    while (a2);
  }

  unint64_t v34 = *(unsigned __int8 *)(a1 + 384);
  BOOL v35 = v34 > 1;
  unint64_t v36 = v31 * v34;
  if (v35) {
    return v36;
  }
  else {
    return v31;
  }
}

uint64_t sub_1584C(uint64_t a1, unsigned int a2)
{
  switch(*(_DWORD *)(a1 + 368))
  {
    case 1:
    case 2:
      uint64_t v5 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
      sub_132A0((void *)a1);
      uint64_t v4 = sub_13C90(a1, *(__IOSurface **)(*(void *)a1 + 256LL), 0) * v5;
      break;
    case 3:
    case 5:
    case 7:
    case 0xA:
      uint64_t v4 = sub_15570(a1, *(unsigned __int8 *)(a1 + 385), a2);
      break;
    case 4:
      unint64_t v6 = sub_15514(a1, a2);
      uint64_t v7 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
      goto LABEL_8;
    case 6:
      unint64_t v6 = sub_15514(a1, a2);
      uint64_t v7 = *(unsigned __int16 *)(*(void *)a1 + 198LL);
      goto LABEL_8;
    case 8:
    case 9:
      unint64_t v6 = sub_15514(a1, a2);
      uint64_t v7 = *(unsigned __int8 *)(*(void *)a1 + 211LL);
LABEL_8:
      uint64_t v4 = v6 * v7;
      break;
    default:
      uint64_t v4 = 0LL;
      break;
  }

  int v8 = xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
  if (!a2 && v8) {
    return (v4 + dword_7C4B8 - 1) & -(uint64_t)dword_7C4B8;
  }
  return v4;
}

uint64_t sub_15968(uint64_t result, uint64_t a2, char *a3, int *a4, unsigned int *a5)
{
  unint64_t v6 = a4;
  uint64_t v388 = result;
  uint64_t v7 = a2;
  int v8 = (_DWORD *)result;
  if (xmmword_7C430 == 2)
  {
    unsigned int v105 = (void (**)(void))&unk_7C000;
    xmmword_7C350(*(unsigned __int16 *)(*(void *)result + 192LL));
    char v106 = 0;
    uint64_t v107 = 0LL;
    char v108 = 1;
    unint64_t v406 = a5;
    uint64_t v334 = v7 + 32;
    while (1)
    {
      v105[106](*(unsigned __int16 *)(*(void *)v8 + 192LL));
      uint64_t v109 = *(void *)&v8[2 * v107 + 98];
      glgConvertType(*v6, v6[1], &v408, v421);
LABEL_161:
      double result = ((uint64_t (*)(void))v105[106])(*(unsigned __int16 *)(*(void *)v8 + 192LL));
      char v205 = result & v108;
      char v106 = 1;
      uint64_t v107 = 1LL;
      char v108 = 0;
      if ((v205 & 1) == 0) {
        return result;
      }
    }

    uint64_t v110 = *v6;
    BOOL v111 = *(_DWORD *)(v109 + 24) != (_DWORD)v110 || *(_DWORD *)(v109 + 28) != v6[1];
    int v112 = v8[92];
    if ((v112 - 3) >= 7)
    {
      if (v112 != 10) {
        goto LABEL_95;
      }
      vImagePixelCount v113 = sub_3E8CC(*v6, v6[1], v109);
    }

    else
    {
      vImagePixelCount v113 = sub_3287C(*v6, v6[1], v109);
    }

    unsigned int v386 = (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))v113;
    if (v113) {
      BOOL v111 = 0;
    }
LABEL_95:
    char v371 = v108;
    unsigned int v393 = v107;
    if ((_DWORD)v110 == 6402)
    {
      uint64_t v114 = v6[1];
      char v115 = (_DWORD)v114 == 5126 || v111;
      if ((v115 & 1) == 0) {
        goto LABEL_108;
      }
    }

    else if (!v111)
    {
      uint64_t v114 = v6[1];
LABEL_108:
      *(_DWORD *)(v7 + 304) |= 4u;
      uint64_t v117 = (int)gpusPixelBytes(v110, v114);
      unint64_t v128 = *((void *)v6 + 1);
      unint64_t v123 = *((void *)v6 + 2);
      int v129 = *v6;
      unsigned int v358 = v6[1];
      sub_6D250(*(void *)(v7 + 8), v8);
      int v127 = 0;
      __srca = a3;
      goto LABEL_109;
    }

    uint64_t v116 = v7;
    *(_DWORD *)(v7 + 304) |= 2u;
    uint64_t v117 = *(unsigned __int8 *)(v109 + 57);
    size_t v118 = (char *)malloc_zone_malloc((malloc_zone_t *)qword_7C218, v117 * a5[4] * a5[3] * a5[5]);
    if (!v118) {
LABEL_253:
    }
      abort();
    int v119 = v118;
    unsigned int v120 = a5[3];
    uint64_t v121 = a5[4];
    unint64_t v122 = v120 * (unint64_t)v117;
    unint64_t v123 = v122 * v121;
    uint64_t v124 = *(unsigned int *)(v109 + 24);
    uint64_t v125 = *(unsigned int *)(v109 + 28);
    int v417 = *(_DWORD *)(v109 + 48);
    int v418 = 2147479551;
    unsigned int v419 = v120;
    int v420 = v121;
    int v399 = v124;
    unsigned int v358 = v125;
    glgConvertType(v124, v125, v414, v415);
    int v416 = 2;
    unint64_t v381 = v122;
    int v413 = v122;
    __srca = v119;
    char v409 = v119;
    glgConvertType(*v6, v6[1], v411, v412);
    int v410 = *((void *)v6 + 1);
    v408 = a3;
    if (a5[5])
    {
      unsigned int v126 = 0;
      do
      {
        glgProcessPixelsWithProcessor(v334, 0LL, &v408);
        v408 += *((void *)v6 + 2);
        v409 += v123;
        ++v126;
      }

      while (v126 < a5[5]);
    }

    uint64_t v7 = v116;
    sub_6D250(*(void *)(v116 + 8), v8);
    int v127 = 1;
    unint64_t v128 = v381;
    int v129 = v399;
LABEL_109:
    int v130 = v8[92];
    if ((v130 - 3) >= 7)
    {
      if ((v130 - 1) < 2)
      {
        int v144 = v127;
        BOOL v145 = (char *)sub_13374(v8, a5[7], a5[6], 0, v393);
        size_t v146 = v117 * a5[3];
        size_t v147 = v146 * a5[4];
        sub_132A0(v8);
        size_t v148 = sub_13DEC((uint64_t)v8, *(__IOSurface **)(*(void *)v8 + 256LL), 0);
        uint64_t v149 = a5[4];
        if (v147 == v148 * v149)
        {
          memcpy(v145, __srca, v147);
        }

        else if ((_DWORD)v149)
        {
          size_t v203 = v148;
          unint64_t v204 = __srca;
          do
          {
            memcpy(v145, v204, v146);
            v145 += v203;
            v204 += v146;
            --v149;
          }

          while (v149);
        }

        unsigned int v105 = (void (**)(void))&unk_7C000;
        int v127 = v144;
        goto LABEL_159;
      }

      if (v130 != 10)
      {
LABEL_159:
        char v108 = v371;
        if (v127) {
          malloc_zone_free((malloc_zone_t *)qword_7C218, __srca);
        }
        goto LABEL_161;
      }

      int ptrc = v127;
      vImagePixelCount v178 = v386;
      if (!v386)
      {
        vImagePixelCount v178 = sub_3E8CC(v129, v358, v109);
        if (!v178) {
          vImagePixelCount v178 = sub_3287C(v129, v358, v109);
        }
      }

      unint64_t v401 = v123;
      unsigned int v386 = (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))v178;
      unsigned int v179 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v109 + 60));
      unsigned int v181 = *v179;
      unsigned int v180 = v179[1];
      BOOL v360 = sub_13624(v8);
      if (v360)
      {
        uint64_t v182 = *(void *)v8;
        int v183 = *(unsigned __int16 *)(*(void *)v8 + 194LL);
        int v184 = *(unsigned __int16 *)(*(void *)v8 + 196LL);
        int v348 = v183;
        unsigned __int16 v353 = *(_WORD *)(v182 + 198);
        unint64_t v185 = v128;
        unsigned __int8 v186 = *(_BYTE *)(v388 + 384) * *(_BYTE *)(v109 + 57);
        unsigned __int8 v187 = *(_BYTE *)(v388 + 385);
        char v188 = *(_BYTE *)(v109 + 56);
        char v189 = sub_1393C((void *)v388);
        int v190 = v184;
        int v8 = (_DWORD *)v388;
        unsigned __int8 v191 = v186;
        unint64_t v128 = v185;
        unsigned __int8 v192 = v187;
        uint64_t v7 = a2;
        sub_139BC((uint64_t)&v408, v348, v190, v181, v180, v353, v191, v192, v188, v189, 0, dword_7C4B8, xmmword_7C430);
      }

      BOOL v193 = sub_1393C(v8);
      uint64_t v194 = *(void *)v8;
      unint64_t v383 = v128;
      if (v193)
      {
        char v195 = __clz((v181 + *(unsigned __int16 *)(v194 + 194) - 1) / v181 - 1);
        unsigned int v196 = 1 << -(char)__clz((v180 + *(unsigned __int16 *)(v194 + 196) - 1) / v180 - 1);
        unsigned int v198 = a5[6];
        LODWORD(v197) = a5[7];
        unsigned int v199 = (1 << -v195) >> v197;
        if (v199 <= 1) {
          uint64_t v200 = 1LL;
        }
        else {
          uint64_t v200 = v199;
        }
        unsigned int v201 = v196 >> v197;
        if (v201 <= 1) {
          uint64_t v202 = 1LL;
        }
        else {
          uint64_t v202 = v201;
        }
      }

      else
      {
        unsigned int v198 = a5[6];
        uint64_t v197 = a5[7];
        uint64_t v206 = v194 + 480LL * v198 + 32 * v197;
        unsigned int v207 = (v181 + *(unsigned __int16 *)(v206 + 268) - 1) / v181;
        LODWORD(v206) = (v180 + *(unsigned __int16 *)(v206 + 270) - 1) / v180;
        uint64_t v200 = (1 << -(char)__clz(v207 - 1));
        unsigned int v208 = 1 << -(char)__clz(v206 - 1);
        else {
          uint64_t v202 = 1LL;
        }
      }

      uint64_t v209 = sub_13374(v8, v197, v198, 0, v393);
      int64_t v210 = (unsigned __int16 *)(*(void *)v8 + 480LL * a5[6] + 32LL * a5[7]);
      uint64_t v211 = v210[134];
      uint64_t v212 = v210[135];
      uint64_t v213 = v210[136];
      uint64_t v214 = sub_13C1C(v388);
      v215 = (void **)&v408;
      if (!v360) {
        v215 = 0LL;
      }
      int v8 = (_DWORD *)v388;
      v386( v209,  __srca,  v211,  v212,  v213,  v200,  v202,  v214,  *(void *)a5,  *((void *)a5 + 1),  *((void *)a5 + 2),  v383,  v401,  v215,  0LL);
    }

    else
    {
      unint64_t v400 = v123;
      int ptrc = v127;
      uint64_t v131 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v109 + 60));
      unsigned int v132 = *v131;
      uint64_t v133 = v131[1];
      int v134 = (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v386;
      if (!v386) {
        int v134 = sub_3287C(v129, v358, v109);
      }
      unsigned int v386 = (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))v134;
      BOOL v135 = sub_1393C((void *)v388);
      unint64_t v136 = *(unsigned __int16 **)v388;
      if (v135)
      {
        char v137 = __clz((v132 + v136[97] - 1) / v132 - 1);
        unsigned int v138 = 1 << -(char)__clz((v133 + v136[98] - 1) / v133 - 1);
        unsigned int v139 = a5[7];
        unsigned int v140 = (1 << -v137) >> v139;
        if (v140 <= 1) {
          uint64_t v141 = 1LL;
        }
        else {
          uint64_t v141 = v140;
        }
        unsigned int v142 = v138 >> v139;
        if (v142 <= 1) {
          int v143 = 1;
        }
        else {
          int v143 = v142;
        }
      }

      else
      {
        uint64_t v150 = (uint64_t)&v136[240 * a5[6] + 16 * a5[7]];
        uint64_t v141 = (1 << -__clz((v132 + *(unsigned __int16 *)(v150 + 268) - 1) / v132 - 1));
        int v143 = 1 << -__clz((v133 + *(unsigned __int16 *)(v150 + 270) - 1) / v133 - 1);
        v128 *= v133;
      }

      BOOL v151 = sub_13624((_DWORD *)v388);
      if (!sub_1393C((void *)v388) || v151)
      {
        v153 = *(unsigned __int16 **)v388;
        uint64_t v155 = *(void *)v388 + 480LL * v406[6] + 32LL * v406[7];
        unsigned int v152 = *(unsigned __int16 *)(v155 + 268);
        uint64_t v154 = *(unsigned __int16 *)(v155 + 270);
      }

      else
      {
        unsigned int v152 = v141 * v132;
        v153 = *(unsigned __int16 **)v388;
        uint64_t v154 = (v143 * v133);
      }

      unint64_t v382 = v128;
      unsigned int v359 = v143;
      BOOL v347 = v151;
      unsigned int v352 = v152;
      if (v151)
      {
        int v156 = v153[97];
        int v157 = v153[98];
        unsigned __int16 v158 = sub_138D8((_DWORD *)v388);
        unsigned __int8 v159 = *(_BYTE *)(v388 + 384) * *(_BYTE *)(v109 + 57);
        unsigned __int8 v339 = *(_BYTE *)(v388 + 385);
        unsigned __int16 v343 = v158;
        char v160 = *(_BYTE *)(v109 + 56);
        char v161 = sub_1393C((void *)v388);
        char v330 = v160;
        unsigned int v162 = (void *)v388;
        sub_139BC( (uint64_t)&v408,  v156,  v157,  v132,  v133,  v343,  v159,  v339,  v330,  v161,  (*(_DWORD *)(v388 + 368) & 0xFFFFFFFE) == 8,  dword_7C4B8,  xmmword_7C430);
        v153 = *(unsigned __int16 **)v388;
      }

      else
      {
        unsigned int v162 = (void *)v388;
      }

      if ((v153[107] & 0x2000) != 0) {
        uint64_t v163 = sub_13BA8((uint64_t)v162, v393);
      }
      else {
        uint64_t v163 = 0LL;
      }
      a5 = v406;
      int v164 = (char *)sub_13374(v162, v406[7], v406[6], v406[2], v393);
      int v165 = (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))v386;
      if (v406[5])
      {
        v166 = v164;
        uint64_t v167 = v141;
        uint64_t v168 = v154;
        uint64_t v169 = v163;
        unsigned int v170 = 0;
        v171 = &v408;
        if (!v347) {
          v171 = 0LL;
        }
        unsigned int v394 = v171;
        uint64_t v172 = __srca;
        do
        {
          uint64_t v173 = *a5;
          uint64_t v174 = a5[1];
          uint64_t v331 = *(void *)(a5 + 3);
          uint64_t v175 = v167;
          BOOL v176 = v165;
          uint64_t v177 = v169;
          v165(v166, v172, v352, v168, v167, v359, v173, v174, v331, v382, v394, 0LL);
          uint64_t v169 = v177;
          a5 = v406;
          uint64_t v167 = v175;
          int v165 = v176;
          v172 += v400;
          v166 += v169;
          ++v170;
        }

        while (v170 < v406[5]);
      }

      unint64_t v6 = a4;
      uint64_t v7 = a2;
      int v8 = (_DWORD *)v388;
    }

    unsigned int v105 = (void (**)(void))&unk_7C000;
    int v127 = ptrc;
    goto LABEL_159;
  }

  if (xmmword_7C430 == 1)
  {
    xmmword_7C350(*(unsigned __int16 *)(*(void *)result + 192LL));
    char v216 = 0;
    uint64_t v217 = 0LL;
    uint64_t v335 = v7 + 32;
    char v218 = 1;
    v407 = a5;
    while (1)
    {
      xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL));
      uint64_t v219 = *(void *)&v8[2 * v217 + 98];
      glgConvertType(*v6, v6[1], &v408, v421);
LABEL_251:
      double result = xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL));
      char v328 = result & v218;
      char v216 = 1;
      uint64_t v217 = 1LL;
      char v218 = 0;
      if ((v328 & 1) == 0) {
        return result;
      }
    }

    uint64_t v220 = *v6;
    BOOL v221 = *(_DWORD *)(v219 + 24) != (_DWORD)v220 || *(_DWORD *)(v219 + 28) != v6[1];
    int v222 = v8[92];
    if ((v222 - 3) >= 7)
    {
      if (v222 != 10) {
        goto LABEL_180;
      }
      uint64_t v223 = sub_3DDC8(*v6, v6[1], v219);
    }

    else
    {
      uint64_t v223 = sub_3287C(*v6, v6[1], v219);
    }

    unsigned int v386 = (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))v223;
    if (v223) {
      BOOL v221 = 0;
    }
LABEL_180:
    char __srcb = v218;
    unsigned int v395 = v217;
    if ((_DWORD)v220 == 6402)
    {
      uint64_t v224 = v6[1];
      char v225 = (_DWORD)v224 == 5126 || v221;
      if ((v225 & 1) == 0) {
        goto LABEL_193;
      }
    }

    else if (!v221)
    {
      uint64_t v224 = v6[1];
LABEL_193:
      *(_DWORD *)(v7 + 304) |= 4u;
      uint64_t v226 = (int)gpusPixelBytes(v220, v224);
      unint64_t v239 = *((void *)v6 + 2);
      unint64_t v384 = *((void *)v6 + 1);
      int v240 = *v6;
      unsigned int v361 = v6[1];
      sub_6D250(*(void *)(v7 + 8), v8);
      int v237 = 0;
      uint64_t v238 = a3;
      goto LABEL_194;
    }

    *(_DWORD *)(v7 + 304) |= 2u;
    uint64_t v226 = *(unsigned __int8 *)(v219 + 57);
    unsigned int v227 = (char *)malloc_zone_malloc((malloc_zone_t *)qword_7C218, v226 * a5[4] * a5[3] * a5[5]);
    if (!v227) {
      goto LABEL_253;
    }
    BOOL v228 = v227;
    unsigned int v229 = a5[3];
    uint64_t v230 = a5[4];
    unint64_t v231 = v229 * (unint64_t)v226;
    unint64_t v232 = v231 * v230;
    uint64_t v233 = *(unsigned int *)(v219 + 24);
    uint64_t v234 = *(unsigned int *)(v219 + 28);
    int v417 = *(_DWORD *)(v219 + 48);
    int v418 = 2147479551;
    unsigned int v419 = v229;
    int v420 = v230;
    int v402 = v233;
    unsigned int v361 = v234;
    glgConvertType(v233, v234, v414, v415);
    int v416 = 2;
    unint64_t v384 = v231;
    int v413 = v231;
    uint64_t v235 = v228;
    char v409 = v228;
    glgConvertType(*v6, v6[1], v411, v412);
    int v410 = *((void *)v6 + 1);
    v408 = a3;
    if (a5[5])
    {
      unsigned int v236 = 0;
      do
      {
        glgProcessPixelsWithProcessor(v335, 0LL, &v408);
        v408 += *((void *)v6 + 2);
        v409 += v232;
        ++v236;
      }

      while (v236 < a5[5]);
    }

    sub_6D250(*(void *)(v7 + 8), v8);
    int v237 = 1;
    uint64_t v238 = v235;
    unint64_t v239 = v232;
    int v240 = v402;
LABEL_194:
    int v241 = v8[92];
    int v372 = v237;
    if ((v241 - 3) < 7)
    {
      v242 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v219 + 60));
      unsigned int v244 = *v242;
      uint64_t v243 = v242[1];
      uint64_t v245 = (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v386;
      if (!v386) {
        uint64_t v245 = sub_3287C(v240, v361, v219);
      }
      unsigned int v386 = (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))v245;
      BOOL v246 = sub_1393C(v8);
      uint64_t v247 = *(void *)v8;
      unint64_t v248 = v384;
      ptrd = v238;
      if (v246)
      {
        char v249 = __clz((v244 + *(unsigned __int16 *)(v247 + 194) - 1) / v244 - 1);
        unsigned int v250 = 1 << -(char)__clz((v243 + *(unsigned __int16 *)(v247 + 196) - 1) / v243 - 1);
        unsigned int v251 = a5[7];
        unsigned int v252 = (1 << -v249) >> v251;
        if (v252 <= 1) {
          int v253 = 1;
        }
        else {
          int v253 = v252;
        }
        unsigned int v254 = v250 >> v251;
        if (v254 <= 1) {
          uint64_t v255 = 1LL;
        }
        else {
          uint64_t v255 = v254;
        }
      }

      else
      {
        uint64_t v262 = v247 + 480LL * a5[6] + 32LL * a5[7];
        int v253 = 1 << -__clz((v244 + *(unsigned __int16 *)(v262 + 268) - 1) / v244 - 1);
        uint64_t v255 = (1 << -__clz( (v243 + *(unsigned __int16 *)(v262 + 270) - 1) / v243 - 1));
        unint64_t v248 = v384 * v243;
      }

      BOOL v263 = sub_13624((_DWORD *)v388);
      BOOL v264 = sub_1393C((void *)v388);
      BOOL v265 = v263;
      unsigned int v362 = v253;
      if (!v264 || v263)
      {
        int v267 = *(unsigned __int16 **)v388;
        uint64_t v269 = *(void *)v388 + 480LL * v407[6] + 32LL * v407[7];
        uint64_t v266 = *(unsigned __int16 *)(v269 + 268);
        uint64_t v268 = *(unsigned __int16 *)(v269 + 270);
      }

      else
      {
        uint64_t v266 = v253 * v244;
        int v267 = *(unsigned __int16 **)v388;
        uint64_t v268 = (v255 * v243);
      }

      unint64_t v385 = v248;
      BOOL v354 = v265;
      if (v265)
      {
        int v344 = v267[98];
        int v349 = v267[97];
        unsigned __int16 v340 = sub_138D8((_DWORD *)v388);
        unsigned __int8 v270 = *(_BYTE *)(v388 + 384) * *(_BYTE *)(v219 + 57);
        unsigned __int8 v337 = *(_BYTE *)(v388 + 385);
        char v271 = *(_BYTE *)(v219 + 56);
        char v272 = sub_1393C((void *)v388);
        sub_139BC( (uint64_t)&v408,  v349,  v344,  v244,  v243,  v340,  v270,  v337,  v271,  v272,  (*(_DWORD *)(v388 + 368) & 0xFFFFFFFE) == 8,  dword_7C4B8,  xmmword_7C430);
        int v267 = *(unsigned __int16 **)v388;
      }

      if ((v267[107] & 0x2000) != 0)
      {
        v274 = (void *)v388;
        uint64_t v273 = sub_14D1C(v388, v395);
      }

      else
      {
        uint64_t v273 = 0LL;
        v274 = (void *)v388;
      }

      char v275 = (char *)sub_14BF8(v274, v407[7], v407[6], v407[2], v395);
      char v276 = v407;
      unint64_t v278 = v385;
      uint64_t v277 = (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))v386;
      uint64_t v279 = v362;
      if (v407[5])
      {
        int v280 = v275;
        unint64_t v281 = v239;
        uint64_t v282 = v255;
        uint64_t v283 = v266;
        uint64_t v284 = v268;
        uint64_t v285 = v273;
        unsigned int v286 = 0;
        v287 = &v408;
        if (!v354) {
          v287 = 0LL;
        }
        unsigned int v396 = v287;
        uint64_t v288 = ptrd;
        unint64_t v403 = v281;
        do
        {
          LODWORD(v332) = v276[3];
          HIDWORD(v332) = v407[4];
          uint64_t v289 = v279;
          int v290 = v277;
          unint64_t v291 = v278;
          v277(v280, v288, v283, v284, v279, v282, *v276, v276[1], v332, v278, v396, 0LL);
          uint64_t v279 = v289;
          unint64_t v278 = v291;
          uint64_t v277 = v290;
          char v276 = v407;
          v288 += v403;
          v280 += v285;
          ++v286;
        }

        while (v286 < v407[5]);
      }

      unint64_t v6 = a4;
      uint64_t v7 = a2;
      int v8 = (_DWORD *)v388;
      uint64_t v238 = ptrd;
      int v237 = v372;
      a5 = v276;
      goto LABEL_249;
    }

    if ((v241 - 1) >= 2)
    {
      if (v241 != 10) {
        goto LABEL_249;
      }
      unint64_t v404 = v239;
      int v292 = v386;
      if (!v386)
      {
        int v292 = sub_3DDC8(v240, v361, v219);
        if (!v292) {
          int v292 = sub_3287C(v240, v361, v219);
        }
      }

      ptre = v238;
      unsigned int v386 = (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))v292;
      int v293 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v219 + 60));
      unsigned int v295 = *v293;
      unsigned int v294 = v293[1];
      BOOL v363 = sub_13624(v8);
      if (v363)
      {
        uint64_t v296 = *(void *)v8;
        int v297 = *(unsigned __int16 *)(*(void *)v8 + 194LL);
        int v298 = *(unsigned __int16 *)(*(void *)v8 + 196LL);
        unsigned __int16 v355 = *(_WORD *)(v296 + 198);
        unsigned __int8 v299 = *(_BYTE *)(v388 + 384) * *(_BYTE *)(v219 + 57);
        unsigned __int8 v300 = *(_BYTE *)(v388 + 385);
        char v301 = *(_BYTE *)(v219 + 56);
        char v302 = sub_1393C((void *)v388);
        int v303 = v298;
        int v8 = (_DWORD *)v388;
        unsigned __int8 v304 = v300;
        uint64_t v7 = a2;
        sub_139BC((uint64_t)&v408, v297, v303, v295, v294, v355, v299, v304, v301, v302, 0, dword_7C4B8, xmmword_7C430);
      }

      BOOL v305 = sub_1393C(v8);
      uint64_t v306 = *(void *)v8;
      if (v305)
      {
        char v307 = __clz((v295 + *(unsigned __int16 *)(v306 + 194) - 1) / v295 - 1);
        unsigned int v308 = 1 << -(char)__clz((v294 + *(unsigned __int16 *)(v306 + 196) - 1) / v294 - 1);
        unsigned int v310 = a5[6];
        LODWORD(v309) = a5[7];
        unsigned int v311 = (1 << -v307) >> v309;
        if (v311 <= 1) {
          uint64_t v312 = 1LL;
        }
        else {
          uint64_t v312 = v311;
        }
        unsigned int v313 = v308 >> v309;
        if (v313 <= 1) {
          uint64_t v314 = 1LL;
        }
        else {
          uint64_t v314 = v313;
        }
      }

      else
      {
        unsigned int v310 = a5[6];
        uint64_t v309 = a5[7];
        uint64_t v317 = v306 + 480LL * v310 + 32 * v309;
        unsigned int v318 = (v295 + *(unsigned __int16 *)(v317 + 268) - 1) / v295;
        LODWORD(v317) = (v294 + *(unsigned __int16 *)(v317 + 270) - 1) / v294;
        uint64_t v312 = (1 << -(char)__clz(v318 - 1));
        unsigned int v319 = 1 << -(char)__clz(v317 - 1);
        else {
          uint64_t v314 = 1LL;
        }
      }

      v320 = sub_14BF8(v8, v309, v310, 0, v395);
      unsigned int v321 = (unsigned __int16 *)(*(void *)v8 + 480LL * a5[6] + 32LL * a5[7]);
      uint64_t v322 = v321[134];
      uint64_t v323 = v321[135];
      uint64_t v324 = v321[136];
      uint64_t v325 = sub_14D90(v388);
      char v326 = (void **)&v408;
      if (!v363) {
        char v326 = 0LL;
      }
      uint64_t v238 = ptre;
      uint64_t v327 = v323;
      int v8 = (_DWORD *)v388;
      v386( v320,  ptre,  v322,  v327,  v324,  v312,  v314,  v325,  *(void *)a5,  *((void *)a5 + 1),  *((void *)a5 + 2),  v384,  v404,  v326,  0LL);
    }

    else
    {
      unint64_t v256 = v238;
      v257 = (char *)sub_14BF8(v8, a5[7], a5[6], 0, v395);
      size_t v258 = v226 * a5[3];
      size_t v259 = v258 * a5[4];
      sub_132A0(v8);
      size_t v260 = sub_13DEC((uint64_t)v8, *(__IOSurface **)(*(void *)v8 + 256LL), 0);
      uint64_t v261 = a5[4];
      if (v259 == v260 * v261)
      {
        uint64_t v238 = v256;
        memcpy(v257, v256, v259);
      }

      else
      {
        if ((_DWORD)v261)
        {
          size_t v315 = v260;
          v316 = v256;
          do
          {
            memcpy(v257, v316, v258);
            v257 += v315;
            v316 += v258;
            --v261;
          }

          while (v261);
        }

        uint64_t v238 = v256;
      }
    }

    int v237 = v372;
LABEL_249:
    char v218 = __srcb;
    if (v237) {
      malloc_zone_free((malloc_zone_t *)qword_7C218, v238);
    }
    goto LABEL_251;
  }

  if (!(_BYTE)xmmword_7C430)
  {
    unsigned int v9 = (void (**)(void))&unk_7C000;
    xmmword_7C350(*(unsigned __int16 *)(*(void *)result + 192LL));
    char v10 = 0;
    uint64_t v11 = 0LL;
    char v12 = 1;
    unint64_t v405 = a5;
    uint64_t v333 = v7 + 32;
    do
    {
      v9[106](*(unsigned __int16 *)(*(void *)v8 + 192LL));
      uint64_t v13 = *(void *)&v8[2 * v11 + 98];
      if (((unsigned int (*)(void))v9[106])(*(unsigned __int16 *)(*(void *)v8 + 192LL)))
      {
        glgConvertType(*v6, v6[1], &v408, v421);
      }

      uint64_t v14 = *v6;
      BOOL v15 = *(_DWORD *)(v13 + 24) != (_DWORD)v14 || *(_DWORD *)(v13 + 28) != v6[1];
      int v16 = v8[92];
      if ((v16 - 3) >= 7)
      {
        if (v16 != 10) {
          goto LABEL_15;
        }
        char v17 = sub_3B9B8(*v6, v6[1], v13);
      }

      else
      {
        char v17 = sub_3287C(*v6, v6[1], v13);
      }

      unsigned int v386 = (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))v17;
      if (v17) {
        BOOL v15 = 0;
      }
LABEL_15:
      char v370 = v12;
      if ((_DWORD)v14 == 6402)
      {
        uint64_t v18 = v6[1];
        char v19 = (_DWORD)v18 == 5126 || v15;
        if ((v19 & 1) == 0) {
          goto LABEL_28;
        }
      }

      else if (!v15)
      {
        uint64_t v18 = v6[1];
LABEL_28:
        *(_DWORD *)(v7 + 304) |= 4u;
        uint64_t v21 = (int)gpusPixelBytes(v14, v18);
        unint64_t v32 = *((void *)v6 + 1);
        unint64_t v27 = *((void *)v6 + 2);
        int v389 = *v6;
        unsigned int ptr = v6[1];
        sub_6D250(*(void *)(v7 + 8), v8);
        int v31 = 0;
        __vImage_Buffer src = a3;
        goto LABEL_29;
      }

      int v20 = v11;
      uint64_t v11 = v7;
      *(_DWORD *)(v7 + 304) |= 2u;
      uint64_t v21 = *(unsigned __int8 *)(v13 + 57);
      int v22 = (char *)malloc_zone_malloc((malloc_zone_t *)qword_7C218, v21 * a5[4] * a5[3] * a5[5]);
      if (!v22) {
        goto LABEL_253;
      }
      BOOL v23 = v22;
      unsigned int v24 = a5[3];
      uint64_t v25 = a5[4];
      unint64_t v26 = v24 * (unint64_t)v21;
      unint64_t v27 = v26 * v25;
      uint64_t v28 = *(unsigned int *)(v13 + 24);
      uint64_t v29 = *(unsigned int *)(v13 + 28);
      int v417 = *(_DWORD *)(v13 + 48);
      int v418 = 2147479551;
      unsigned int v419 = v24;
      int v420 = v25;
      int v389 = v28;
      unsigned int ptr = v29;
      glgConvertType(v28, v29, v414, v415);
      int v416 = 2;
      unint64_t v378 = v26;
      int v413 = v26;
      __vImage_Buffer src = v23;
      char v409 = v23;
      glgConvertType(*v6, v6[1], v411, v412);
      int v410 = *((void *)v6 + 1);
      v408 = a3;
      if (a5[5])
      {
        unsigned int v30 = 0;
        do
        {
          glgProcessPixelsWithProcessor(v333, 0LL, &v408);
          v408 += *((void *)v6 + 2);
          v409 += v27;
          ++v30;
        }

        while (v30 < a5[5]);
      }

      uint64_t v7 = v11;
      sub_6D250(*(void *)(v11 + 8), v8);
      int v31 = 1;
      LODWORD(v11) = v20;
      unint64_t v32 = v378;
      unsigned int v9 = (void (**)(void))&unk_7C000;
LABEL_29:
      int v33 = v8[92];
      if ((v33 - 3) < 7)
      {
        int v356 = v31;
        unsigned int v350 = v11;
        unint64_t v34 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v13 + 60));
        unsigned int v36 = *v34;
        uint64_t v35 = v34[1];
        unsigned int v37 = (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v386;
        if (!v386) {
          unsigned int v37 = sub_3287C(v389, ptr, v13);
        }
        unsigned int v386 = (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))v37;
        BOOL v38 = sub_1393C(v8);
        uint64_t v39 = *(void *)v8;
        if (v38)
        {
          unint64_t v379 = v32;
          char v40 = __clz((v36 + *(unsigned __int16 *)(v39 + 194) - 1) / v36 - 1);
          unsigned int v41 = 1 << -(char)__clz((v35 + *(unsigned __int16 *)(v39 + 196) - 1) / v35 - 1);
          unsigned int v42 = a5[7];
          unsigned int v43 = (1 << -v40) >> v42;
          if (v43 <= 1) {
            uint64_t v44 = 1LL;
          }
          else {
            uint64_t v44 = v43;
          }
          unsigned int v45 = v41 >> v42;
          if (v45 <= 1) {
            int v46 = 1;
          }
          else {
            int v46 = v45;
          }
        }

        else
        {
          uint64_t v50 = v39 + 480LL * a5[6] + 32LL * a5[7];
          uint64_t v44 = (1 << -__clz((v36 + *(unsigned __int16 *)(v50 + 268) - 1) / v36 - 1));
          int v46 = 1 << -__clz((v35 + *(unsigned __int16 *)(v50 + 270) - 1) / v35 - 1);
          unint64_t v379 = v32 * v35;
        }

        ptra = (char *)v27;
        BOOL v390 = sub_13624((_DWORD *)v388);
        if (!sub_1393C((void *)v388) || v390)
        {
          unsigned int v52 = *(unsigned __int16 **)v388;
          uint64_t v54 = *(void *)v388 + 480LL * v405[6] + 32LL * v405[7];
          uint64_t v51 = *(unsigned __int16 *)(v54 + 268);
          uint64_t v53 = *(unsigned __int16 *)(v54 + 270);
        }

        else
        {
          uint64_t v51 = v44 * v36;
          unsigned int v52 = *(unsigned __int16 **)v388;
          uint64_t v53 = (v46 * v35);
        }

        unsigned int v345 = v46;
        if (v390)
        {
          int v55 = v52[97];
          int v341 = v52[98];
          unsigned __int16 v338 = sub_138D8((_DWORD *)v388);
          unsigned __int8 v56 = *(_BYTE *)(v388 + 384) * *(_BYTE *)(v13 + 57);
          unsigned __int8 v336 = *(_BYTE *)(v388 + 385);
          char v57 = *(_BYTE *)(v13 + 56);
          char v58 = sub_1393C((void *)v388);
          sub_139BC( (uint64_t)&v408,  v55,  v341,  v36,  v35,  v338,  v56,  v336,  v57,  v58,  (*(_DWORD *)(v388 + 368) & 0xFFFFFFFE) == 8,  dword_7C4B8,  xmmword_7C430);
          unsigned int v52 = *(unsigned __int16 **)v388;
        }

        unsigned int v59 = ptra;
        if ((v52[107] & 0x2000) != 0)
        {
          unsigned __int16 v61 = (void *)v388;
          unint64_t v60 = sub_15514(v388, v350);
        }

        else
        {
          unint64_t v60 = 0LL;
          unsigned __int16 v61 = (void *)v388;
        }

        unsigned __int8 v62 = (char *)sub_153F0(v61, v405[7], v405[6], v405[2], v350);
        unsigned int v63 = v405;
        char v64 = (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))v386;
        uint64_t v65 = v345;
        if (v405[5])
        {
          unsigned __int16 v66 = v62;
          uint64_t v67 = v44;
          uint64_t v68 = v51;
          uint64_t v69 = v53;
          unsigned int v70 = 0;
          int v71 = &v408;
          if (!v390) {
            int v71 = 0LL;
          }
          v391 = v71;
          unsigned int v72 = __src;
          unint64_t v397 = v60;
          do
          {
            LODWORD(v329) = v63[3];
            HIDWORD(v329) = v405[4];
            uint64_t v73 = v68;
            uint64_t v74 = v67;
            uint64_t v75 = v65;
            int v76 = v59;
            unint64_t v77 = v64;
            v64(v66, v72, v68, v69, v67, v65, *v63, v63[1], v329, v379, v391, 0LL);
            uint64_t v68 = v73;
            unsigned int v63 = v405;
            uint64_t v65 = v75;
            uint64_t v67 = v74;
            char v64 = v77;
            unsigned int v59 = v76;
            unsigned int v72 = &v76[(void)v72];
            v66 += v397;
            ++v70;
          }

          while (v70 < v405[5]);
        }

        unint64_t v6 = a4;
        uint64_t v7 = a2;
        int v47 = (_DWORD *)v388;
        unsigned int v9 = (void (**)(void))&unk_7C000;
        char v12 = v370;
        a5 = v63;
        if (!v356) {
          goto LABEL_74;
        }
        goto LABEL_73;
      }

      if ((v33 - 1) >= 2)
      {
        if (v33 == 10)
        {
          int v357 = v31;
          unsigned int v78 = (uint64_t (*)(uint64_t, __int128 *, int, int, double, int32x2_t, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, uint64_t))v386;
          if (!v386) {
            unsigned int v78 = sub_3B9B8(v389, ptr, v13);
          }
          ptrb = (void *)v27;
          unint64_t v380 = v32;
          unsigned int v386 = (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))v78;
          unsigned int v79 = (unsigned int *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v13 + 60));
          unsigned int v80 = *v79;
          unsigned int v81 = v79[1];
          BOOL v392 = sub_13624((_DWORD *)v388);
          if (v392)
          {
            int v351 = v11;
            int v82 = *(unsigned __int16 *)(*(void *)v388 + 196LL);
            int v342 = *(unsigned __int16 *)(*(void *)v388 + 194LL);
            unsigned __int16 v346 = *(_WORD *)(*(void *)v388 + 198LL);
            unsigned __int8 v83 = *(_BYTE *)(v388 + 384) * *(_BYTE *)(v13 + 57);
            unsigned __int8 v84 = *(_BYTE *)(v388 + 385);
            char v85 = *(_BYTE *)(v13 + 56);
            char v86 = sub_1393C((void *)v388);
            int v87 = v82;
            LODWORD(v11) = v351;
            unsigned __int8 v88 = v84;
            uint64_t v7 = a2;
            sub_139BC((uint64_t)&v408, v342, v87, v80, v81, v346, v83, v88, v85, v86, 0, dword_7C4B8, xmmword_7C430);
          }

          BOOL v89 = sub_1393C((void *)v388);
          unint64_t v90 = *(unsigned __int16 **)v388;
          if (v89)
          {
            char v91 = __clz((v80 + v90[97] - 1) / v80 - 1);
            unsigned int v92 = 1 << -(char)__clz((v81 + v90[98] - 1) / v81 - 1);
            unsigned int v94 = a5[6];
            LODWORD(v93) = a5[7];
            unsigned int v95 = (1 << -v91) >> v93;
            if (v95 <= 1) {
              unsigned int v95 = 1;
            }
            unsigned int v398 = v95;
            unsigned int v96 = v92 >> v93;
            if (v96 <= 1) {
              uint64_t v97 = 1LL;
            }
            else {
              uint64_t v97 = v96;
            }
          }

          else
          {
            unsigned int v94 = a5[6];
            uint64_t v93 = a5[7];
            uint64_t v99 = (uint64_t)&v90[240 * v94 + 16 * v93];
            unsigned int v100 = (v80 + *(unsigned __int16 *)(v99 + 268) - 1) / v80;
            LODWORD(v99) = (v81 + *(unsigned __int16 *)(v99 + 270) - 1) / v81;
            unsigned int v398 = 1 << -(char)__clz(v100 - 1);
            unsigned int v101 = 1 << -(char)__clz(v99 - 1);
            else {
              uint64_t v97 = 1LL;
            }
          }

          char v12 = v370;
          int v102 = sub_153F0((void *)v388, v93, v94, 0, v11);
          int v47 = (_DWORD *)v388;
          uint64_t v104 = (void **)&v408;
          if (!v392) {
            uint64_t v104 = 0LL;
          }
          unsigned int v103 = (unsigned __int16 *)(*(void *)v388 + 480LL * a5[6] + 32LL * a5[7]);
          v386( v102,  __src,  v103[134],  v103[135],  v103[136],  v398,  v97,  0LL,  *(void *)a5,  *((void *)a5 + 1),  *((void *)a5 + 2),  v380,  ptrb,  v104,  0LL);
          unsigned int v9 = (void (**)(void))&unk_7C000;
          if (!v357) {
            goto LABEL_74;
          }
LABEL_73:
          malloc_zone_free((malloc_zone_t *)qword_7C218, __src);
          goto LABEL_74;
        }

        int v47 = v8;
      }

      else
      {
        int v47 = v8;
        int v48 = v31;
        BOOL v49 = sub_153F0(v8, a5[7], a5[6], 0, v11);
        memcpy(v49, __src, v21 * a5[3] * a5[4]);
        int v31 = v48;
      }

      char v12 = v370;
      if (v31) {
        goto LABEL_73;
      }
LABEL_74:
      int v8 = v47;
LABEL_75:
      double result = ((uint64_t (*)(void))v9[106])(*(unsigned __int16 *)(*(void *)v8 + 192LL));
      char v98 = result & v12;
      char v10 = 1;
      uint64_t v11 = 1LL;
      char v12 = 0;
    }

    while ((v98 & 1) != 0);
  }

  return result;
}

uint8x16_t *(*sub_174B4( uint64_t a1, unsigned int a2, unsigned int a3))(uint8x16_t *result, const __int16 *a2, int a3, int a4, int a5)
{
  if (xmmword_7C430 == 2)
  {
    xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
    double result = sub_629DC(*(void *)(a1 + 392));
    if (!result) {
      return result;
    }
    char v10 = result;
    int v11 = *(_DWORD *)(a1 + 368);
    if ((v11 - 9) < 2 || v11 == 6)
    {
      uint64_t v13 = (_WORD *)(*(void *)a1 + 198LL);
    }

    else
    {
      if (v11 != 4)
      {
        int v19 = 1;
        goto LABEL_36;
      }

      uint64_t v13 = (_WORD *)(*(void *)a1 + 196LL);
    }

    int v19 = (unsigned __int16)*v13;
    if (!*v13) {
      return (uint8x16_t *(*)(uint8x16_t *, const __int16 *, int, int, int))(&dword_0 + 1);
    }
LABEL_36:
    unsigned int v21 = 0;
    uint64_t v22 = a3 - 1;
    do
    {
      BOOL v23 = sub_13374((void *)a1, a3, a2, v21, 0);
      unsigned int v24 = sub_13374((void *)a1, a3 - 1, a2, v21, 0);
      uint64_t v25 = *(void *)a1 + 480LL * a2 + 264;
      BOOL v26 = *(_WORD *)(v25 + 32 * v22 + 4) == 1
         || *(unsigned __int16 *)(*(void *)a1 + 480LL * a2 + 32 * v22 + 270) == 1;
      ((void (*)(void *, void *, void, void, BOOL, void))v10)( v23,  v24,  *(unsigned __int16 *)(v25 + 32LL * a3 + 4),  *(unsigned __int16 *)(v25 + 32LL * a3 + 6),  v26,  0LL);
      ++v21;
    }

    while (v19 != v21);
    return (uint8x16_t *(*)(uint8x16_t *, const __int16 *, int, int, int))(&dword_0 + 1);
  }

  if (xmmword_7C430 == 1)
  {
    xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
    double result = sub_629DC(*(void *)(a1 + 392));
    if (!result) {
      return result;
    }
    uint64_t v14 = result;
    int v15 = *(_DWORD *)(a1 + 368);
    if ((v15 - 9) < 2 || v15 == 6)
    {
      char v17 = (_WORD *)(*(void *)a1 + 198LL);
    }

    else
    {
      if (v15 != 4)
      {
        int v20 = 1;
        goto LABEL_43;
      }

      char v17 = (_WORD *)(*(void *)a1 + 196LL);
    }

    int v20 = (unsigned __int16)*v17;
    if (!*v17) {
      return (uint8x16_t *(*)(uint8x16_t *, const __int16 *, int, int, int))(&dword_0 + 1);
    }
LABEL_43:
    unsigned int v27 = 0;
    uint64_t v28 = a3 - 1;
    do
    {
      uint64_t v29 = sub_14BF8((void *)a1, a3, a2, v27, 0);
      unsigned int v30 = sub_14BF8((void *)a1, a3 - 1, a2, v27, 0);
      uint64_t v31 = *(void *)a1 + 480LL * a2 + 264;
      BOOL v32 = *(_WORD *)(v31 + 32 * v28 + 4) == 1
         || *(unsigned __int16 *)(*(void *)a1 + 480LL * a2 + 32 * v28 + 270) == 1;
      ((void (*)(void *, void *, void, void, BOOL, void))v14)( v29,  v30,  *(unsigned __int16 *)(v31 + 32LL * a3 + 4),  *(unsigned __int16 *)(v31 + 32LL * a3 + 6),  v32,  0LL);
      ++v27;
    }

    while (v20 != v27);
    return (uint8x16_t *(*)(uint8x16_t *, const __int16 *, int, int, int))(&dword_0 + 1);
  }

  if ((_BYTE)xmmword_7C430) {
    return 0LL;
  }
  xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
  double result = sub_629DC(*(void *)(a1 + 392));
  if (!result) {
    return result;
  }
  uint64_t v7 = result;
  int v8 = *(_DWORD *)(a1 + 368);
  if ((v8 - 9) < 2 || v8 == 6)
  {
    unsigned int v9 = (_WORD *)(*(void *)a1 + 198LL);
  }

  else
  {
    if (v8 != 4)
    {
      int v18 = 1;
LABEL_50:
      unsigned int v33 = 0;
      uint64_t v34 = a3 - 1;
      do
      {
        uint64_t v35 = sub_153F0((void *)a1, a3, a2, v33, 0);
        unsigned int v36 = sub_153F0((void *)a1, a3 - 1, a2, v33, 0);
        uint64_t v37 = *(void *)a1 + 480LL * a2 + 264;
        BOOL v38 = *(_WORD *)(v37 + 32 * v34 + 4) == 1
           || *(unsigned __int16 *)(*(void *)a1 + 480LL * a2 + 32 * v34 + 270) == 1;
        ((void (*)(void *, void *, void, void, BOOL, void))v7)( v35,  v36,  *(unsigned __int16 *)(v37 + 32LL * a3 + 4),  *(unsigned __int16 *)(v37 + 32LL * a3 + 6),  v38,  0LL);
        ++v33;
      }

      while (v18 != v33);
      return (uint8x16_t *(*)(uint8x16_t *, const __int16 *, int, int, int))(&dword_0 + 1);
    }

    unsigned int v9 = (_WORD *)(*(void *)a1 + 196LL);
  }

  int v18 = (unsigned __int16)*v9;
  if (*v9) {
    goto LABEL_50;
  }
  return (uint8x16_t *(*)(uint8x16_t *, const __int16 *, int, int, int))(&dword_0 + 1);
}

char *sub_17850(void *a1)
{
  if ((*(_WORD *)*a1 & 0x800) == 0) {
    return 0LL;
  }
  sub_132A0(a1);
  unint64_t v2 = *(__IOSurface **)(*a1 + 256LL);
  if ((IOSurfaceGetPlaneCount(v2) & 0xFFFFFFFE) == 0) {
    return 0LL;
  }
  sub_132A0(a1);
  uint64_t v3 = a1[3];
  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(v2, 0LL);
  uint64_t v5 = (char *)((_BYTE *)IOSurfaceGetBaseAddressOfPlane(v2, 1uLL) - BaseAddressOfPlane);
  return &v5[IOAccelResourceGetGPUVirtualAddress(v3)];
}

uint64_t sub_178DC(unsigned __int16 a1)
{
  uint64_t result = 1LL;
  unsigned int v3 = a1 - 35409;
  BOOL v4 = v3 > 0x23;
  uint64_t v5 = (1LL << v3) & 0xFFFF00001LL;
  if (v4 || v5 == 0)
  {
    unsigned int v7 = a1 - 37875;
    if (v7 > 0x1C || ((1 << v7) & 0x1800073F) == 0) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_17940(void *a1)
{
  BOOL v4 = (uint64_t (*)(uint64_t, void))off_7C3A8;
  sub_132A0(a1);
  uint64_t v2 = sub_179BC((uint64_t)a1, *(__IOSurface **)(*a1 + 256LL), 0);
  xmmword_7C350(*(unsigned __int16 *)(*a1 + 192LL));
  return v4(v2, *(unsigned __int8 *)(a1[49] + 57LL));
}

uint64_t sub_179BC(uint64_t a1, __IOSurface *a2, unsigned int a3)
{
  if (xmmword_7C430 != 2 && xmmword_7C430 != 1)
  {
    if ((_BYTE)xmmword_7C430) {
      return 0LL;
    }
    xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
    if ((**(_WORD **)a1 & 0x800) == 0)
    {
      uint64_t v6 = *(void *)(a1 + 392);
      int v7 = *(_DWORD *)(a1 + 368);
      unsigned int v8 = *(unsigned __int16 *)(*(void *)a1 + 268LL);
      if ((v7 - 1) < 2)
      {
        uint64_t v9 = *(unsigned __int8 *)(v6 + 57);
LABEL_10:
        uint64_t v11 = off_7C388(v9 * (unint64_t)v8);
        return off_7C3A0(v11, v9);
      }

      unsigned int v17 = 32 - __clz(v8 - 1);
      uint64_t v18 = *(unsigned __int8 *)(v6 + 57);
      if (v17 <= 2) {
        char v19 = 2;
      }
      else {
        char v19 = v17;
      }
      BOOL v20 = v8 >= 2;
      if (v8 >= 2) {
        char v21 = v19;
      }
      else {
        char v21 = 2;
      }
      if (!v20) {
        LOBYTE(v17) = 0;
      }
      if (v7 != 10) {
        char v21 = v17;
      }
      return v18 << v21;
    }

uint64_t sub_17B70(uint64_t a1, unsigned int a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = (__IOSurface **)(*(void *)a1 + 8LL * *(unsigned int *)(a1 + 408) + 48);
  }

  else
  {
    sub_132A0((void *)a1);
    uint64_t v5 = (__IOSurface **)(*(void *)a1 + 256LL);
  }

  return sub_179BC(a1, *v5, a2);
}

char *sub_17BC4(__IOSurface *a1, unsigned int a2)
{
  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(a1, 0LL);
  return (char *)((_BYTE *)IOSurfaceGetBaseAddressOfPlane(a1, a2) - BaseAddressOfPlane);
}

uint64_t sub_17C10(void *a1)
{
  if ((*(_WORD *)*a1 & 0x800) == 0) {
    return 0LL;
  }
  int v1 = *(unsigned __int16 *)(*a1 + 192LL);
  sub_132A0(a1);
  uint64_t v5 = *(__IOSurface **)(*a1 + 256LL);
  signed int PixelFormat = IOSurfaceGetPixelFormat(v5);
  int v7 = 1;
  if (PixelFormat > 2019963441)
  {
    if (PixelFormat > 2021077553)
    {
      if (PixelFormat > 2021078127)
      {
        BOOL v8 = PixelFormat == 2037741158;
        unsigned __int16 v11 = 13424;
      }

      else
      {
        BOOL v8 = PixelFormat == 2021077554;
        unsigned __int16 v11 = 13364;
      }
    }

    else
    {
      if (PixelFormat <= 2019964015)
      {
        BOOL v8 = PixelFormat == 2019963442;
        unsigned __int16 v10 = 13364;
LABEL_27:
        int v9 = v10 | 0x78660000;
        goto LABEL_30;
      }

      BOOL v8 = PixelFormat == 2019964016;
      unsigned __int16 v11 = 12848;
    }

    int v9 = v11 | 0x78770000;
    goto LABEL_30;
  }

  if (PixelFormat > 1885745711)
  {
    if (PixelFormat <= 1885746227)
    {
      BOOL v8 = PixelFormat == 1885745712;
      int v9 = 1885745714;
      goto LABEL_30;
    }

    BOOL v8 = PixelFormat == 1885746228;
    unsigned __int16 v10 = 12848;
    goto LABEL_27;
  }

  if (PixelFormat > 1027423537)
  {
LABEL_35:
    int v7 = 0;
    goto LABEL_36;
  }

  BOOL v8 = PixelFormat == 875704422 || PixelFormat == 875704934;
  int v9 = 875836518;
LABEL_30:
  if (v8 || PixelFormat == v9) {
    goto LABEL_35;
  }
LABEL_36:
  int v13 = 0;
  IOSurfaceGetYCbCrMatrix(v5, &v13);
  uint64_t result = 0LL;
  if ((v13 - 11) >= 2)
  {
    if (v13 == 7 || v13 == 1)
    {
      if (v7) {
        return 2LL;
      }
      else {
        return 4LL;
      }
    }

    else if (v7)
    {
      return 1LL;
    }

    else
    {
      return 3LL;
    }
  }

  return result;
}

uint64_t sub_17E08(_DWORD *a1)
{
  uint64_t v2 = *(_WORD **)a1;
  int v3 = *(unsigned __int16 *)(*(void *)a1 + 192LL);
  uint64_t result = sub_178DC(*(_WORD *)(*(void *)a1 + 192LL));
  if (!(_DWORD)result)
  {
    int v6 = 0;
    goto LABEL_10;
  }

  int v5 = 1;
  if ((v3 - 35429) >= 0x10)
  {
    int v6 = 0;
    if ((v3 - 37875) <= 0x1C)
    {
      int v7 = 1 << (v3 + 13);
      if ((v7 & 0x1800003F) != 0) {
        goto LABEL_5;
      }
      if ((v7 & 0x700) != 0) {
        goto LABEL_10;
      }
    }

    if (v3 == 35409) {
      goto LABEL_10;
    }
    int v5 = 0;
  }

void sub_17EC8(_DWORD *a1)
{
  uint64_t v2 = *(_WORD **)a1;
  if (!sub_178DC(*(_WORD *)(*(void *)a1 + 192LL)))
  {
    int v5 = 0;
LABEL_18:
    a1[61] = v5;
    return;
  }

  a1[61] = 2;
  if ((*v2 & 0x800) != 0)
  {
    sub_132A0(a1);
    CFTypeRef v3 = IOSurfaceCopyValue(*(IOSurfaceRef *)(*(void *)a1 + 256LL), kIOSurfaceChromaLocationTopField);
    if (v3)
    {
      BOOL v4 = v3;
      if (CFEqual(v3, kIOSurfaceChromaLocation_Left))
      {
        int v5 = 1;
      }

      else if (CFEqual(v4, kIOSurfaceChromaLocation_Center))
      {
        int v5 = 2;
      }

      else if (CFEqual(v4, kIOSurfaceChromaLocation_TopLeft))
      {
        int v5 = 3;
      }

      else if (CFEqual(v4, kIOSurfaceChromaLocation_Top))
      {
        int v5 = 4;
      }

      else if (CFEqual(v4, kIOSurfaceChromaLocation_BottomLeft))
      {
        int v5 = 5;
      }

      else
      {
        if (!CFEqual(v4, kIOSurfaceChromaLocation_Bottom))
        {
          CFRelease(v4);
          return;
        }

        int v5 = 6;
      }

      CFRelease(v4);
      goto LABEL_18;
    }
  }

uint64_t sub_18014(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  if (v12 == 20)
  {
    unsigned int CompressedBlockHeight = glgGetCompressedBlockHeight(20LL, v11);
    uint64_t v8 = a3;
    uint64_t v7 = (a4 + CompressedBlockHeight - 1) / CompressedBlockHeight;
  }

  else if (v12 == 19)
  {
    unsigned int v6 = glgGetCompressedBlockHeight(19LL, v11);
    uint64_t v7 = v6 * (uint64_t)a3;
    uint64_t v8 = (a4 + v6 - 1) / v6;
  }

  else
  {
    uint64_t v8 = a3;
    uint64_t v7 = a4;
  }

  return v7 * v8;
}

uint64_t sub_180B0(uint64_t a1, int a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, int a7)
{
  if (xmmword_7C430 == 2)
  {
    if (a7)
    {
      unsigned int v14 = (uint64_t *)(a1 + 8LL * *(unsigned int *)(a1 + 408) + 80);
    }

    else
    {
      sub_132A0((void *)a1);
      unsigned int v14 = (uint64_t *)(a1 + 24);
    }

    uint64_t v17 = *v14;
    uint64_t v18 = sub_18314((uint64_t *)a1, a2, a5);
    uint64_t v19 = sub_18344(a1, a5) + v18;
    if (a3) {
      v19 += sub_186E8(a1, a5) * a3;
    }
    BOOL v20 = *(_WORD **)a1;
    __int16 v21 = *(_WORD *)(*(void *)a1 + 214LL);
    if ((v21 & 0x2000) != 0)
    {
      v19 += sub_186E8(a1, a5) * a4;
      BOOL v20 = *(_WORD **)a1;
      __int16 v21 = *(_WORD *)(*(void *)a1 + 214LL);
    }

    if ((v21 & 0x1800) == 0) {
      goto LABEL_31;
    }
    unint64_t v22 = sub_18718(a1);
    goto LABEL_30;
  }

  if (xmmword_7C430 == 1)
  {
    if (a7)
    {
      uint64_t v15 = (uint64_t *)(a1 + 8LL * *(unsigned int *)(a1 + 408) + 80);
    }

    else
    {
      sub_132A0((void *)a1);
      uint64_t v15 = (uint64_t *)(a1 + 24);
    }

    uint64_t v17 = *v15;
    uint64_t v23 = sub_18314((uint64_t *)a1, a2, a5);
    uint64_t v19 = sub_18344(a1, a5) + v23;
    if (a3) {
      v19 += sub_186E8(a1, a5) * a3;
    }
    BOOL v20 = *(_WORD **)a1;
    __int16 v24 = *(_WORD *)(*(void *)a1 + 214LL);
    if ((v24 & 0x2000) != 0)
    {
      v19 += sub_186E8(a1, a5) * a4;
      BOOL v20 = *(_WORD **)a1;
      __int16 v24 = *(_WORD *)(*(void *)a1 + 214LL);
    }

    if ((v24 & 0x1800) == 0) {
      goto LABEL_31;
    }
    unint64_t v22 = sub_19128(a1);
    goto LABEL_30;
  }

  if ((_BYTE)xmmword_7C430) {
    return 0LL;
  }
  if (a7)
  {
    int v13 = (uint64_t *)(a1 + 8LL * *(unsigned int *)(a1 + 408) + 80);
  }

  else
  {
    sub_132A0((void *)a1);
    int v13 = (uint64_t *)(a1 + 24);
  }

  uint64_t v17 = *v13;
  uint64_t v25 = sub_18314((uint64_t *)a1, a2, a5);
  uint64_t v19 = sub_18344(a1, a5) + v25;
  if (a3) {
    v19 += sub_186E8(a1, a5) * a3;
  }
  BOOL v20 = *(_WORD **)a1;
  if ((*(_WORD *)(*(void *)a1 + 214LL) & 0x2000) != 0)
  {
    unint64_t v22 = sub_186E8(a1, a5);
LABEL_30:
    v19 += v22 * a4;
    BOOL v20 = *(_WORD **)a1;
  }

uint64_t sub_18314(uint64_t *a1, int a2, unsigned int a3)
{
  if ((_BYTE)xmmword_7C430) {
    return 0LL;
  }
  return sub_18F18(a1, a2, a3);
}

uint64_t sub_18344(uint64_t a1, int a2)
{
  if (xmmword_7C430 == 2)
  {
    if (!a2) {
      return 0LL;
    }
    unsigned int v11 = 0;
    uint64_t v5 = 0LL;
    do
    {
      switch(*(_DWORD *)(a1 + 368))
      {
        case 1:
        case 2:
          uint64_t v13 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
          sub_132A0((void *)a1);
          uint64_t v12 = sub_179BC(a1, *(__IOSurface **)(*(void *)a1 + 256LL), 0) * v13;
          break;
        case 3:
        case 5:
        case 7:
          uint64_t v12 = sub_18A34(a1, *(unsigned __int8 *)(a1 + 385), v11);
          break;
        case 4:
          unint64_t v14 = sub_189C0(a1, v11);
          uint64_t v15 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
          goto LABEL_30;
        case 6:
          unint64_t v14 = sub_189C0(a1, v11);
          goto LABEL_29;
        case 8:
        case 9:
          unint64_t v14 = sub_189C0(a1, v11);
          uint64_t v15 = *(unsigned __int8 *)(*(void *)a1 + 211LL);
          goto LABEL_30;
        case 0xA:
          unint64_t v14 = sub_18718(a1);
LABEL_29:
          uint64_t v15 = *(unsigned __int16 *)(*(void *)a1 + 198LL);
LABEL_30:
          uint64_t v12 = v14 * v15;
          break;
        default:
          uint64_t v12 = 0LL;
          break;
      }

      int v16 = xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
      if (!v11 && v16) {
        uint64_t v12 = (v12 + dword_7C4B8 - 1) & -(uint64_t)dword_7C4B8;
      }
      v5 += v12;
      ++v11;
    }

    while (a2 != v11);
  }

  else
  {
    if (xmmword_7C430 != 1)
    {
      if (!(_BYTE)xmmword_7C430 && a2)
      {
        unsigned int v4 = 0;
        uint64_t v5 = 0LL;
        do
        {
          switch(*(_DWORD *)(a1 + 368))
          {
            case 1:
            case 2:
              uint64_t v7 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
              sub_132A0((void *)a1);
              uint64_t v6 = sub_179BC(a1, *(__IOSurface **)(*(void *)a1 + 256LL), 0) * v7;
              break;
            case 3:
            case 5:
            case 7:
            case 0xA:
              uint64_t v6 = sub_18F18((uint64_t *)a1, *(unsigned __int8 *)(a1 + 385), v4);
              break;
            case 4:
              unint64_t v8 = sub_188F4(a1, v4);
              uint64_t v9 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
              goto LABEL_13;
            case 6:
              unint64_t v8 = sub_188F4(a1, v4);
              uint64_t v9 = *(unsigned __int16 *)(*(void *)a1 + 198LL);
              goto LABEL_13;
            case 8:
            case 9:
              unint64_t v8 = sub_188F4(a1, v4);
              uint64_t v9 = *(unsigned __int8 *)(*(void *)a1 + 211LL);
LABEL_13:
              uint64_t v6 = v8 * v9;
              break;
            default:
              uint64_t v6 = 0LL;
              break;
          }

          int v10 = xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
          if (!v4 && v10) {
            uint64_t v6 = (v6 + dword_7C4B8 - 1) & -(uint64_t)dword_7C4B8;
          }
          v5 += v6;
          ++v4;
        }

        while (a2 != v4);
        return v5;
      }

      return 0LL;
    }

    if (!a2) {
      return 0LL;
    }
    unsigned int v17 = 0;
    uint64_t v5 = 0LL;
    do
    {
      switch(*(_DWORD *)(a1 + 368))
      {
        case 1:
        case 2:
          uint64_t v19 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
          sub_132A0((void *)a1);
          uint64_t v18 = sub_179BC(a1, *(__IOSurface **)(*(void *)a1 + 256LL), 0) * v19;
          break;
        case 3:
        case 5:
        case 7:
          uint64_t v18 = sub_18BFC(a1, *(unsigned __int8 *)(a1 + 385), v17);
          break;
        case 4:
          unint64_t v20 = sub_1894C(a1, v17);
          uint64_t v21 = *(unsigned __int16 *)(*(void *)a1 + 196LL);
          goto LABEL_47;
        case 6:
          unint64_t v20 = sub_1894C(a1, v17);
          goto LABEL_46;
        case 8:
        case 9:
          unint64_t v20 = sub_1894C(a1, v17);
          uint64_t v21 = *(unsigned __int8 *)(*(void *)a1 + 211LL);
          goto LABEL_47;
        case 0xA:
          unint64_t v20 = sub_19128(a1);
LABEL_46:
          uint64_t v21 = *(unsigned __int16 *)(*(void *)a1 + 198LL);
LABEL_47:
          uint64_t v18 = v20 * v21;
          break;
        default:
          uint64_t v18 = 0LL;
          break;
      }

      int v22 = xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
      if (!v17 && v22) {
        uint64_t v18 = (v18 + dword_7C4B8 - 1) & -(uint64_t)dword_7C4B8;
      }
      v5 += v18;
      ++v17;
    }

    while (a2 != v17);
  }

  return v5;
}

unint64_t sub_186E8(uint64_t a1, unsigned int a2)
{
  if ((_BYTE)xmmword_7C430) {
    return 0LL;
  }
  return sub_188F4(a1, a2);
}

unint64_t sub_18718(uint64_t a1)
{
  unint64_t v2 = sub_1878C((uint64_t *)a1, *(unsigned __int8 *)(a1 + 385), 0);
  if (sub_13624((_DWORD *)a1)) {
    unint64_t v2 = (v2 + dword_7C4B8 - 1) & -(uint64_t)dword_7C4B8;
  }
  uint64_t v3 = -16384LL;
  if (v2 <= 0x4000) {
    uint64_t v3 = -128LL;
  }
  uint64_t v4 = 0x3FFFLL;
  if (v2 <= 0x4000) {
    uint64_t v4 = 127LL;
  }
  return (v4 + v2) & v3;
}

uint64_t sub_1878C(uint64_t *a1, int a2, unsigned int a3)
{
  uint64_t v6 = a1[a3 + 49];
  unsigned int v7 = *(unsigned __int8 *)(v6 + 57);
  unint64_t v8 = (_DWORD *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v6 + 60));
  unsigned int v9 = 1 << -(char)__clz((*v8 + *(unsigned __int16 *)(*a1 + 194) - 1) / *v8 - 1);
  unsigned int v10 = 1 << -(char)__clz((v8[1] + *(unsigned __int16 *)(*a1 + 196) - 1) / v8[1] - 1);
  if ((*((_DWORD *)a1 + 92) - 3) <= 6 && *(_BYTE *)(v6 + 56) && sub_143D8(a1, 0, 0, 0) == 1)
  {
    int v11 = -1 << *(_BYTE *)(v6 + 56);
    unsigned int v9 = (v9 + ~v11) & v11;
    unsigned int v10 = (v10 + ~v11) & v11;
  }

  if (*(unsigned __int8 *)(*a1 + 208) + a2 <= *(unsigned __int8 *)(*a1 + 208))
  {
    uint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v12 = 0LL;
    do
    {
      v12 += (v7 * (unint64_t)(v9 * v10) + 127) & 0x1FFFFFFFF80LL;
      v10 >>= v10 > 1;
      v9 >>= v9 > 1;
      --a2;
    }

    while (a2);
  }

  else {
    uint64_t v13 = *((unsigned __int8 *)a1 + 384);
  }
  return v12 * v13;
}

unint64_t sub_188F4(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = sub_18F18((uint64_t *)a1, *(unsigned __int8 *)(a1 + 385), a2);
  if (sub_13624((_DWORD *)a1)) {
    uint64_t v3 = (v3 + dword_7C4B8 - 1) & -(uint64_t)dword_7C4B8;
  }
  return (v3 + 4095) & 0xFFFFFFFFFFFFF000LL;
}

unint64_t sub_1894C(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = sub_18BFC(a1, *(unsigned __int8 *)(a1 + 385), a2);
  if (sub_13624((_DWORD *)a1)) {
    unint64_t v3 = (v3 + dword_7C4B8 - 1) & -(uint64_t)dword_7C4B8;
  }
  uint64_t v4 = -64LL;
  if (v3 > 0x4000) {
    uint64_t v4 = -16384LL;
  }
  uint64_t v5 = 63LL;
  if (v3 > 0x4000) {
    uint64_t v5 = 0x3FFFLL;
  }
  return (v5 + v3) & v4;
}

unint64_t sub_189C0(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = sub_18A34(a1, *(unsigned __int8 *)(a1 + 385), a2);
  if (sub_13624((_DWORD *)a1)) {
    unint64_t v3 = (v3 + dword_7C4B8 - 1) & -(uint64_t)dword_7C4B8;
  }
  uint64_t v4 = -16384LL;
  if (v3 <= 0x4000) {
    uint64_t v4 = -128LL;
  }
  uint64_t v5 = 0x3FFFLL;
  if (v3 <= 0x4000) {
    uint64_t v5 = 127LL;
  }
  return (v5 + v3) & v4;
}

uint64_t sub_18A34(uint64_t a1, int a2, unsigned int a3)
{
  int v4 = a2;
  if ((*(_WORD *)(*(void *)a1 + 214LL) & 0x1800) != 0) {
    return sub_1878C((uint64_t *)a1, a2, a3);
  }
  xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
  uint64_t v7 = *(void *)(a1 + 8LL * a3 + 392);
  unsigned int v8 = *(unsigned __int8 *)(v7 + 57);
  unsigned int v9 = (_DWORD *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v7 + 60));
  unsigned int v10 = 1 << -(char)__clz((*v9 + *(unsigned __int16 *)(*(void *)a1 + 194LL) - 1) / *v9 - 1);
  unsigned int v11 = 1 << -(char)__clz((v9[1] + *(unsigned __int16 *)(*(void *)a1 + 196LL) - 1) / v9[1] - 1);
  int v12 = *(_DWORD *)(a1 + 368);
  if ((v12 - 3) >= 7)
  {
    unsigned int v14 = *(unsigned __int16 *)(*(void *)a1 + 198LL);
    if (*(_WORD *)(*(void *)a1 + 198LL)) {
      int v15 = *(unsigned __int16 *)(*(void *)a1 + 198LL);
    }
    else {
      int v15 = 1;
    }
    if (v12 == 10) {
      unsigned int v14 = v15;
    }
  }

  else
  {
    if (*(_BYTE *)(v7 + 56) && sub_143D8((uint64_t *)a1, 0, 0, 0) == 1)
    {
      int v13 = -1 << *(_BYTE *)(v7 + 56);
      unsigned int v10 = (v10 + ~v13) & v13;
      unsigned int v11 = (v11 + ~v13) & v13;
    }

    unsigned int v14 = 1;
  }

  if (*(unsigned __int8 *)(*(void *)a1 + 208LL) + v4 <= *(unsigned __int8 *)(*(void *)a1 + 208LL))
  {
    uint64_t v16 = 0LL;
  }

  else
  {
    uint64_t v16 = 0LL;
    do
    {
      v16 += ((v8 * (unint64_t)(v10 * v11) + 127) & 0x1FFFFFFFF80LL) * v14;
      char v18 = *(_DWORD *)(a1 + 368) == 10 && v14 > 1;
      v14 >>= v18;
      v11 >>= v11 > 1;
      v10 >>= v10 > 1;
      --v4;
    }

    while (v4);
  }

  else {
    uint64_t v19 = *(unsigned __int8 *)(a1 + 384);
  }
  return v16 * v19;
}

uint64_t sub_18BFC(uint64_t a1, int a2, unsigned int a3)
{
  int v4 = a2;
  if ((*(_WORD *)(*(void *)a1 + 214LL) & 0x1800) != 0) {
    return sub_18DBC((uint64_t *)a1, a2, a3);
  }
  xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
  uint64_t v7 = *(void *)(a1 + 8LL * a3 + 392);
  unsigned int v8 = *(unsigned __int8 *)(v7 + 57);
  unsigned int v9 = (_DWORD *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v7 + 60));
  unsigned int v10 = 1 << -(char)__clz((*v9 + *(unsigned __int16 *)(*(void *)a1 + 194LL) - 1) / *v9 - 1);
  unsigned int v11 = 1 << -(char)__clz((v9[1] + *(unsigned __int16 *)(*(void *)a1 + 196LL) - 1) / v9[1] - 1);
  int v12 = *(_DWORD *)(a1 + 368);
  if ((v12 - 3) >= 7)
  {
    unsigned int v14 = *(unsigned __int16 *)(*(void *)a1 + 198LL);
    if (*(_WORD *)(*(void *)a1 + 198LL)) {
      int v15 = *(unsigned __int16 *)(*(void *)a1 + 198LL);
    }
    else {
      int v15 = 1;
    }
    if (v12 == 10) {
      unsigned int v14 = v15;
    }
  }

  else
  {
    if (*(_BYTE *)(v7 + 56) && sub_143D8((uint64_t *)a1, 0, 0, 0) == 1)
    {
      int v13 = -1 << *(_BYTE *)(v7 + 56);
      unsigned int v10 = (v10 + ~v13) & v13;
      unsigned int v11 = (v11 + ~v13) & v13;
    }

    unsigned int v14 = 1;
  }

  if (*(unsigned __int8 *)(*(void *)a1 + 208LL) + v4 <= *(unsigned __int8 *)(*(void *)a1 + 208LL))
  {
    uint64_t v16 = 0LL;
  }

  else
  {
    uint64_t v16 = 0LL;
    do
    {
      v16 += v8 * (unint64_t)(v10 * v11) * v14;
      char v18 = *(_DWORD *)(a1 + 368) == 10 && v14 > 1;
      v14 >>= v18;
      v11 >>= v11 > 1;
      v10 >>= v10 > 1;
      --v4;
    }

    while (v4);
  }

  else {
    uint64_t v19 = *(unsigned __int8 *)(a1 + 384);
  }
  return v16 * v19;
}

uint64_t sub_18DBC(uint64_t *a1, int a2, unsigned int a3)
{
  uint64_t v6 = a1[a3 + 49];
  unsigned int v7 = *(unsigned __int8 *)(v6 + 57);
  unsigned int v8 = (_DWORD *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v6 + 60));
  unsigned int v9 = 1 << -(char)__clz((*v8 + *(unsigned __int16 *)(*a1 + 194) - 1) / *v8 - 1);
  unsigned int v10 = 1 << -(char)__clz((v8[1] + *(unsigned __int16 *)(*a1 + 196) - 1) / v8[1] - 1);
  if ((*((_DWORD *)a1 + 92) - 3) <= 6 && *(_BYTE *)(v6 + 56) && sub_143D8(a1, 0, 0, 0) == 1)
  {
    int v11 = -1 << *(_BYTE *)(v6 + 56);
    unsigned int v9 = (v9 + ~v11) & v11;
    unsigned int v10 = (v10 + ~v11) & v11;
  }

  if (*(unsigned __int8 *)(*a1 + 208) + a2 <= *(unsigned __int8 *)(*a1 + 208))
  {
    uint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v12 = 0LL;
    do
    {
      v12 += v7 * (unint64_t)(v9 * v10);
      v10 >>= v10 > 1;
      v9 >>= v9 > 1;
      --a2;
    }

    while (a2);
  }

  else {
    uint64_t v13 = *((unsigned __int8 *)a1 + 384);
  }
  return v12 * v13;
}

uint64_t sub_18F18(uint64_t *a1, int a2, unsigned int a3)
{
  uint64_t v6 = a1[a3 + 49];
  unsigned int v7 = *(unsigned __int8 *)(v6 + 57);
  unsigned int v8 = (_DWORD *)((char *)&unk_70B00 + 8 * *(unsigned int *)(v6 + 60));
  unsigned int v9 = 1 << -(char)__clz((*v8 + *(unsigned __int16 *)(*a1 + 194) - 1) / *v8 - 1);
  unsigned int v10 = 1 << -(char)__clz((v8[1] + *(unsigned __int16 *)(*a1 + 196) - 1) / v8[1] - 1);
  int v11 = *((_DWORD *)a1 + 92);
  if ((v11 - 3) < 5)
  {
LABEL_8:
    if (*(_BYTE *)(v6 + 56) && sub_143D8(a1, 0, 0, 0) == 1)
    {
      int v14 = -1 << *(_BYTE *)(v6 + 56);
      unsigned int v9 = (v9 + ~v14) & v14;
      unsigned int v10 = (v10 + ~v14) & v14;
    }

    unsigned int v15 = 1;
    goto LABEL_25;
  }

  if ((v11 - 8) < 2)
  {
    BOOL v12 = sub_1393C(a1);
    if (v9 <= v10) {
      unsigned int v13 = v10;
    }
    else {
      unsigned int v13 = v9;
    }
    if (v12)
    {
      unsigned int v10 = v13;
      unsigned int v9 = v13;
    }

    goto LABEL_8;
  }

  unsigned int v15 = *(unsigned __int16 *)(*a1 + 198);
  if (v9 <= 4) {
    int v16 = 4;
  }
  else {
    int v16 = v9;
  }
  if (v10 <= 4) {
    int v17 = 4;
  }
  else {
    int v17 = v10;
  }
  unsigned int v18 = 1 << -(char)__clz(v15 - 1);
  if (v18 <= 4) {
    unsigned int v18 = 4;
  }
  if (v15 >= 2) {
    int v19 = v18;
  }
  else {
    int v19 = 4;
  }
  if (v11 == 10)
  {
    unsigned int v10 = v17;
    unsigned int v9 = v16;
    unsigned int v15 = v19;
  }

unint64_t sub_19128(uint64_t a1)
{
  unint64_t v2 = sub_18DBC((uint64_t *)a1, *(unsigned __int8 *)(a1 + 385), 0);
  if (sub_13624((_DWORD *)a1)) {
    unint64_t v2 = (v2 + dword_7C4B8 - 1) & -(uint64_t)dword_7C4B8;
  }
  uint64_t v3 = -64LL;
  if (v2 > 0x4000) {
    uint64_t v3 = -16384LL;
  }
  uint64_t v4 = 63LL;
  if (v2 > 0x4000) {
    uint64_t v4 = 0x3FFFLL;
  }
  return (v4 + v2) & v3;
}

unint64_t sub_1919C(uint64_t *a1, unsigned int a2, unsigned int a3, int a4)
{
  if (a4)
  {
    uint64_t v7 = *a1;
    unsigned int v8 = (__IOSurface **)(*a1 + 8LL * *((unsigned int *)a1 + 102) + 48);
  }

  else
  {
    sub_132A0(a1);
    uint64_t v7 = *a1;
    unsigned int v8 = (__IOSurface **)(*a1 + 256);
  }

  unsigned int v9 = *v8;
  if (xmmword_7C430 != 2 && xmmword_7C430 != 1)
  {
    if ((_BYTE)xmmword_7C430) {
      return 0LL;
    }
    xmmword_7C350(*(unsigned __int16 *)(v7 + 192));
    uint64_t v10 = a1[a3 + 49];
    if ((*(_WORD *)*a1 & 0x800) == 0)
    {
      int v11 = *((_DWORD *)a1 + 92);
      unsigned int v12 = *(unsigned __int16 *)(*a1 + 32LL * a2 + 268);
      int v21 = 1 << -(char)__clz(v12 - 1);
      if (v12 < 2) {
        unsigned int v22 = 1;
      }
      else {
        unsigned int v22 = v21;
      }
      if (v22 <= 4) {
        unsigned int v23 = 4;
      }
      else {
        unsigned int v23 = v22;
      }
      if (v11 == 10) {
        return v23;
      }
      else {
        return v22;
      }
    }

LABEL_13:
    if (sub_13ED4(a1)) {
      size_t v17 = 0LL;
    }
    else {
      size_t v17 = *(unsigned __int16 *)(*a1 + 248);
    }
    size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v9, v17);
    if (IOSurfaceIsTiled(v9))
    {
      size_t v19 = (256 << -(char)__clz((BytesPerRowOfPlane >> 8) - 1));
      else {
        size_t BytesPerRowOfPlane = 4096LL;
      }
    }

    return off_7C398(BytesPerRowOfPlane, v10, 0LL, 0LL);
  }

  xmmword_7C350(*(unsigned __int16 *)(v7 + 192));
  uint64_t v10 = a1[a3 + 49];
  if ((*(_WORD *)*a1 & 0x800) != 0) {
    goto LABEL_13;
  }
  unsigned int v13 = *(unsigned __int16 *)(*a1 + 32LL * a2 + 268);
  if ((*((_DWORD *)a1 + 92) - 1) < 2)
  {
LABEL_12:
    unint64_t v14 = *(unsigned __int8 *)(v10 + 57);
    uint64_t v15 = off_7C388(v14 * *(unsigned __int16 *)(*a1 + 32LL * a2 + 268));
    return off_7C3A0(v15, v14) / v14;
  }

  uint64_t v20 = (1 << -(char)__clz(v13 - 1));
  if (v13 < 2) {
    return 1LL;
  }
  else {
    return v20;
  }
}

unint64_t sub_193A8(uint64_t a1)
{
  if (xmmword_7C430 == 2)
  {
    if ((*(_WORD *)(*(void *)a1 + 214LL) & 0x2000) != 0) {
      return sub_189C0(a1, 0);
    }
    if ((*(_WORD *)(*(void *)a1 + 214LL) & 0x1800) != 0) {
      return sub_18718(a1);
    }
  }

  else if (xmmword_7C430 == 1)
  {
    if ((*(_WORD *)(*(void *)a1 + 214LL) & 0x2000) != 0) {
      return sub_1894C(a1, 0);
    }
    if ((*(_WORD *)(*(void *)a1 + 214LL) & 0x1800) != 0) {
      return sub_19128(a1);
    }
  }

  else if (!(_BYTE)xmmword_7C430 {
         && ((*(_WORD *)(*(void *)a1 + 214LL) & 0x2000) != 0
  }
          || (*(_WORD *)(*(void *)a1 + 214LL) & 0x1800) == 0 && *(unsigned __int8 *)(*(void *)a1 + 211LL) >= 2u))
  {
    return sub_188F4(a1, 0);
  }

  return 0LL;
}

uint64_t sub_19464(unsigned __int16 **a1)
{
  unint64_t v2 = *a1;
  uint64_t v3 = (*a1)[96];
  uint64_t v4 = (*a1)[100];
  if ((_DWORD)v4 == 5 || (_DWORD)v4 == 3)
  {
    uint64_t v4 = v2[140];
    uint64_t v6 = v2 + 141;
  }

  else
  {
    uint64_t v6 = v2 + 101;
  }

  uint64_t v7 = *v6;
  a1[49] = 0LL;
  a1[50] = 0LL;
  xmmword_7C350(v2[96]);
  uint64_t v8 = 0LL;
  char v9 = 1;
  do
  {
    char v10 = v9;
    a1[v8 + 49] = (unsigned __int16 *)off_7C340( v4,  v7,  v3,  *((unsigned __int8 *)*a1 + 3),  *a1 + 120,  v8,  (**a1 >> 11) & 1,  0LL);
    uint64_t result = xmmword_7C350((*a1)[96]);
    if (!(_DWORD)result) {
      break;
    }
    char v9 = 0;
    uint64_t v8 = 1LL;
  }

  while ((v10 & 1) != 0);
  return result;
}

uint64_t sub_19544(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 408) <= 3u)
  {
    sub_132A0((void *)a1);
    for (uint64_t i = 0LL; i != 4; ++i)
    {
      if (*(void *)(*(void *)a1 + 48LL + 8 * i) == *(void *)(*(void *)a1 + 256LL)) {
        break;
      }
    }

    uint64_t GPUVirtualAddress = IOAccelResourceGetGPUVirtualAddress(*(void *)(a1 + 8LL * *(unsigned int *)(a1 + 408) + 80));
    int v6 = *(unsigned __int16 *)(*(void *)a1 + 268LL);
    int v7 = *(unsigned __int16 *)(*(void *)a1 + 270LL);
    if (GPUVirtualAddress != ((GPUVirtualAddress + 3) & 0xFFFFFFFFFFFFFFFCLL))
    {
      xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
      unsigned int v14 = *(_DWORD *)(*(void *)a1 + 4LL * *(unsigned int *)(a1 + 408) + 80);
      LODWORD(v15) = (v14 >> 2) & 1;
      if ((~v14 & 3) != 0) {
        uint64_t v15 = v15;
      }
      else {
        uint64_t v15 = (v14 >> 2) & 1 | 2;
      }
      __asm { BR              X12 }
    }

    uint64_t v28 = 0LL;
    int v29 = v6;
    int v30 = v7;
    uint64_t v25 = 0LL;
    int v26 = v6;
    int v27 = v7;
    __int128 v18 = *(_OWORD *)(*(void *)(a2 + 24) + 13288LL);
    char v19 = 0;
    uint64_t v20 = 0x260000002600LL;
    int v21 = 1;
    char v22 = 0;
    __asm { FMOV            V0.2S, #1.0 }

    uint64_t v23 = _D0;
    char v24 = 0;
    sub_6E8F0((uint64_t)v17, a1, 0, 0, 0, 0, 1, 1, 0, 0LL);
    sub_6E8F0((uint64_t)v16, a1, 0, 0, 0, 0, 1, 0, 0, 0LL);
    sub_6DE0C(a2, (uint64_t)v17, (uint64_t)v16, (uint64_t)&v18);
    *(_DWORD *)(a2 + 2392) |= 8u;
    sub_6D250(*(void *)(*(void *)(a2 + 16) + 8LL), (void *)a1);
  }

  uint64_t result = gpusReleaseAccumIOSurface(*(void *)(a2 + 16), a1);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(void *)a1 + 100LL);
  return result;
}

#error "19970: call analysis failed (funcsize=246)"
void sub_19B9C(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  dispatch_queue_s *v9;
  dispatch_group_s *v10;
  uint64_t v11;
  sub_132A0(a1);
  IOAccelResourceGetClientShared(a1[3], &v11);
  if ((*(int *)(v11 + 24) > 1 || (uint64_t v8 = a2[336]) != 0 && *(_DWORD *)(v8 + 12))
    && a2[269] > (unint64_t)(a2[271] + 24LL))
  {
    sub_260F0((uint64_t)a2);
  }

  char v9 = (dispatch_queue_s *)a1[52];
  if (!v9)
  {
    char v9 = dispatch_queue_create("com.apple.AGXGLDriver.TexImage", 0LL);
    a1[52] = v9;
    if (a3) {
      goto LABEL_8;
    }
LABEL_12:
    dispatch_async(v9, a4);
    return;
  }

  if (!a3) {
    goto LABEL_12;
  }
LABEL_8:
  char v10 = *(dispatch_group_s **)(a3 + 32);
  if (!v10)
  {
    char v10 = dispatch_group_create();
    *(void *)(a3 + 32) = v10;
    char v9 = (dispatch_queue_s *)a1[52];
  }

  dispatch_group_async(v10, v9, a4);
}

uint64_t sub_19C74(uint64_t a1, uint64_t a2)
{
  uint64_t result = off_7C320();
  *(void *)(a2 + 232) = result;
  *(void *)(a2 + 240) = 0LL;
  *(_WORD *)(a2 + 384) = 0;
  *(_BYTE *)(a2 + 386) = 0;
  *(void *)(a2 + 392) = 0LL;
  *(void *)(a2 + 400) = 0LL;
  *(void *)(a2 + 376) = a1;
  *(void *)(a2 + 416) = 0LL;
  return result;
}

void sub_19CB8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 232);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    uint64_t v4 = *(dispatch_object_s **)(a2 + 416);
    if (v4) {
      dispatch_release(v4);
    }
  }

BOOL sub_19CF8(void *a1, uint64_t a2, unsigned int a3, int a4)
{
  BOOL result = sub_19F10((void *)a2, a3, a4);
  if (!result)
  {
    *(_DWORD *)(a1[2] + 304LL) |= 0x8000000u;
    a1[613] |= 0x100000uLL;
    return result;
  }

  uint64_t v8 = *(void *)a2;
  int v9 = *(unsigned __int16 *)(*(void *)a2 + 194LL);
  if (!*(_WORD *)(*(void *)a2 + 194LL)) {
    goto LABEL_27;
  }
  int v10 = *(unsigned __int16 *)(v8 + 196);
  if (((v9 - 1) & v9) != 0 || v10 == 0) {
    goto LABEL_27;
  }
  int v12 = *(_DWORD *)(a2 + 368);
  unsigned int v13 = v12 - 3;
  BOOL v14 = ((v10 - 1) & v10) != 0 || v13 > 7;
  if (v14 || v13 >= 4 && v12 != 8) {
    goto LABEL_27;
  }
  xmmword_7C350(*(unsigned __int16 *)(v8 + 192));
  uint64_t v15 = *(void *)(a2 + 392);
  if (*(unsigned __int8 *)(v15 + 57) * (unint64_t)(v10 * v9) > 0x100000
    || *(_DWORD *)(v15 + 28) >> 1 != 2560)
  {
    goto LABEL_27;
  }

  int v16 = *(_DWORD *)(v15 + 24);
  if (v16 > 33318)
  {
    int v17 = 36244;
  }

  else
  {
    int v17 = 32993;
  }

  if (v16 != v17) {
    goto LABEL_27;
  }
LABEL_25:
  sub_132A0((void *)a2);
  if (!sub_22184((uint64_t)a1, *(void *)(a2 + 24), 1))
  {
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 0x40000000LL;
    v20[2] = sub_19FCC;
    v20[3] = &unk_78AF8;
    v20[4] = a2;
    v20[5] = a1;
    v20[6] = a2;
    unsigned int v21 = a3;
    sub_19B9C((void *)a2, a1, 0LL, v20);
    goto LABEL_28;
  }

  unsigned __int8 v18 = sub_1A008(a2, a3);
  uint64_t v19 = a1[613] | 0x100000LL;
  a1[613] = v19;
  if ((v18 & 1) == 0)
  {
LABEL_27:
    sub_1A08C((uint64_t)a1, (_DWORD *)a2, a3);
LABEL_28:
    uint64_t v19 = a1[613] | 0x100000LL;
  }

  *(_DWORD *)(a1[2] + 304LL) |= 0x10000000u;
  a1[613] = v19;
  return 1LL;
}

BOOL sub_19F10(void *a1, unsigned int a2, int a3)
{
  if (a3) {
    return 0LL;
  }
  if ((*(_WORD *)(*a1 + 214LL) & 0x1800) != 0) {
    return 0LL;
  }
  xmmword_7C350(*(unsigned __int16 *)(*a1 + 192LL));
  if ((*(_BYTE *)(a1[49] + 64LL) & 2) == 0) {
    return 0LL;
  }
  xmmword_7C350(*(unsigned __int16 *)(*a1 + 192LL));
  if (*(_DWORD *)(a1[49] + 40LL) == 18) {
    return 0LL;
  }
  uint64_t v6 = sub_180B0((uint64_t)a1, *(unsigned __int8 *)(*a1 + 210LL), a2, 0, 0, 0, 0);
  return v6 == ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
}

uint8x16_t *(*sub_19FCC( uint64_t a1))(uint8x16_t *result, const __int16 *a2, int a3, int a4, int a5)
{
  unint64_t v2 = *(void **)(a1 + 32);
  sub_132A0(v2);
  IOAccelResourceFinishEvent(v2[3], 0LL);
  return sub_1A008(*(void *)(a1 + 48), *(_DWORD *)(a1 + 56));
}

uint8x16_t *(*sub_1A008( uint64_t a1, unsigned int a2))(uint8x16_t *result, const __int16 *a2, int a3, int a4, int a5)
{
  uint64_t v4 = *(void *)a1;
  if ((*(_BYTE *)(*(void *)a1 + 130LL) & 1) != 0)
  {
    unsigned int v6 = *(unsigned __int8 *)(v4 + 210);
    __int16 v5 = *(_WORD *)(v4 + 214);
  }

  else
  {
    __int16 v5 = *(_WORD *)(v4 + 214);
    unsigned int v6 = v5 >> 4;
  }

  unsigned int v7 = (v5 & 0xF) + 1;
  if (v7 > v6) {
    return (uint8x16_t *(*)(uint8x16_t *, const __int16 *, int, int, int))(&dword_0 + 1);
  }
  do
  {
    BOOL result = sub_174B4(a1, a2, v7);
    if (!(_DWORD)result) {
      break;
    }
  }

  while (v7++ < v6);
  return result;
}

uint64_t sub_1A08C(uint64_t result, _DWORD *a2, unsigned int a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)a2;
  if ((*(_BYTE *)(*(void *)a2 + 130LL) & 1) != 0) {
    unsigned int v7 = *(unsigned __int8 *)(v6 + 210);
  }
  else {
    unsigned int v7 = *(unsigned __int8 *)(v6 + 214) >> 4;
  }
  int v29 = DWORD2(xmmword_7C450);
  BOOL v8 = DWORD2(xmmword_7C450) == 0;
  int v9 = 1;
  if (DWORD2(xmmword_7C450)) {
    int v10 = 1;
  }
  else {
    int v10 = 2;
  }
  int v11 = a2[92];
  if ((v11 - 9) < 2 || v11 == 6)
  {
    unsigned int v13 = (_WORD *)(v6 + 198);
    goto LABEL_15;
  }

  if (v11 == 4)
  {
    unsigned int v13 = (_WORD *)(v6 + 196);
LABEL_15:
    int v9 = (unsigned __int16)*v13;
    if (!*v13) {
      return result;
    }
  }

  int v28 = v9;
  int v14 = 0;
  __asm { FMOV            V9.2S, #1.0 }

  do
  {
    for (unsigned int i = (*(_WORD *)(*(void *)a2 + 214LL) & 0xF) + 1; i <= v7; i += v10)
    {
      uint64_t v20 = i - 1;
      uint64_t v42 = 0LL;
      uint64_t v21 = *(void *)a2 + 480LL * a3 + 264;
      uint64_t v22 = v21 + 32 * v20;
      int v43 = *(unsigned __int16 *)(v22 + 4);
      int v23 = *(unsigned __int16 *)(v22 + 6);
      int v44 = v23;
      uint64_t v39 = 0LL;
      uint64_t v24 = v21 + 32LL * i;
      int v40 = *(unsigned __int16 *)(v24 + 4);
      int v41 = *(unsigned __int16 *)(v24 + 6);
      if (v8)
      {
        int v25 = v23 & 3;
        if ((v43 & 3) != 0 || v25 != 0 || i >= v7)
        {
          BOOL v8 = 0;
          int v10 = 1;
        }

        else
        {
          BOOL v8 = 1;
        }
      }

      else if (v29 | v43 & 3)
      {
        BOOL v8 = 0;
      }

      else
      {
        BOOL v8 = (v23 & 3) == 0 && i < v7;
        if ((v23 & 3) == 0 && i < v7) {
          int v10 = 2;
        }
      }

      sub_6E8F0((uint64_t)v38, (uint64_t)a2, a3, v20, v14, 0, 1, 0, 0, 0LL);
      sub_6E8F0((uint64_t)v37, (uint64_t)a2, a3, i, v14, 0, 1, 0, v8, 0LL);
      __int128 v30 = *(_OWORD *)(*(void *)(v5 + 24) + 13288LL);
      char v31 = 0;
      uint64_t v32 = 0x260100002701LL;
      int v33 = 4;
      char v34 = 0;
      uint64_t v35 = _D9;
      char v36 = 1;
      BOOL result = sub_6DE0C(v5, (uint64_t)v38, (uint64_t)v37, (uint64_t)&v30);
    }

    ++v14;
  }

  while (v14 != v28);
  return result;
}

uint64_t sub_1A2F8(uint64_t result, uint64_t *a2, unsigned int a3, char a4)
{
  if (a2)
  {
    uint64_t v7 = result;
    uint64_t v8 = *a2;
    if ((a4 & 1) != 0)
    {
      int v9 = 1 << a3;
      *(_DWORD *)(result + 2992) |= 1 << a3;
      __int16 v10 = *(_WORD *)(result + 3392 + 2LL * a3);
      int v11 = *(_DWORD *)(result + 3492) & ~(1 << a3);
      *(_DWORD *)(result + 3492) = v11;
      BOOL result = *(unsigned __int16 *)(v8 + 192);
      if ((result & 0xFFFE) != 0x8CAC)
      {
        BOOL result = xmmword_7C350(result);
        int v11 = *(_DWORD *)(v7 + 3492);
        if (*(_DWORD *)(a2[49] + 92) == 2)
        {
          v11 |= v9;
          *(_DWORD *)(v7 + 3492) = v11;
        }
      }

      BOOL v12 = (v11 & *(_DWORD *)(v7 + 3488) & v9) != 0;
      *(_WORD *)(v7 + 3392 + 2LL * a3) = *(_WORD *)(v7 + 3392 + 2LL * a3) & 0xFFEF | (16 * v12);
      if (((((v10 & 0x10) == 0) ^ v12) & 1) == 0)
      {
        ++*(_DWORD *)(v7 + 2500);
        ++*(_DWORD *)(v7 + 2516);
        uint64_t v13 = a3 >> 4;
        uint64_t v14 = *(void *)(v7 + 24);
        if ((~(*(void *)(v14 + 8LL * v13 + 12688) >> (4 * (a3 & 0xF))) & 0xFLL) != 0)
        {
          *(_DWORD *)(v7 + 2980) |= 0x40u;
          *(_DWORD *)(*(void *)(v7 + 120) + 12LL) |= 0x40000u;
        }

        if ((~(*(void *)(v14 + 8 * v13 + 12624) >> (4 * (a3 & 0xF))) & 0xFLL) != 0)
        {
          *(_DWORD *)(v7 + 2980) |= 0x80u;
          *(_DWORD *)(*(void *)(v7 + 120) + 12LL) |= 0x400000u;
        }
      }
    }

    if (a4 < 0)
    {
      uint64_t v15 = (_BYTE *)(v7 + a3 + 4136);
      if (*v15 != ((*(_BYTE *)(v8 + 214) >> 4) - (*(_BYTE *)(v8 + 214) & 0xF)))
      {
        *uint64_t v15 = (*(_BYTE *)(v8 + 214) >> 4) - (*(_BYTE *)(v8 + 214) & 0xF);
        *(_DWORD *)(v7 + 4168) |= 1 << a3;
        *(_DWORD *)(v7 + 2980) |= 0x80u;
      }

      BOOL result = sub_13ED4(a2);
      if ((_DWORD)result)
      {
        *(_DWORD *)(v7 + 4168) |= 1 << a3;
        *(_DWORD *)(v7 + 2980) |= 0x80u;
      }
    }
  }

  return result;
}

uint64_t sub_1A4EC(uint64_t a1, unsigned __int16 **a2, int a3)
{
  int v4 = a3;
  uint64_t v5 = a2;
  if ((a3 & 2) != 0)
  {
    sub_19464(a2);
    sub_17E08(v5);
    sub_17EC8(v5);
  }

  uint64_t v7 = *v5;
  uint64_t v90 = a1;
  if ((v4 & 1) != 0)
  {
    uint64_t v8 = v7[96];
    if (sub_178DC(v7[96]))
    {
      int v9 = 2;
    }

    else if ((*v7 & 0x800) != 0)
    {
      int v9 = 1;
    }

    else if (*((unsigned __int8 *)v7 + 211) < 2u)
    {
      if ((v7[107] & 0x1800) != 0)
      {
        int v9 = 10;
      }

      else if ((v7[107] & 0x600) != 0)
      {
        if ((v7[107] & 0x2000) != 0)
        {
          int v9 = 6;
        }

        else if (*((_BYTE *)v7 + 212))
        {
          int v9 = 7;
        }

        else
        {
          int v9 = 5;
        }
      }

      else if ((v7[107] & 0x2000) != 0)
      {
        int v9 = 4;
      }

      else
      {
        int v9 = 3;
      }
    }

    else if ((v7[107] & 0x2000) != 0)
    {
      int v9 = 9;
    }

    else
    {
      int v9 = 8;
    }

    *((_DWORD *)v5 + 92) = v9;
    unsigned int v10 = *((unsigned __int8 *)v7 + 209);
    unsigned int v11 = v7[97];
    if ((v7[107] & 0x1800) != 0) {
      unsigned int v12 = v7[99];
    }
    else {
      unsigned int v12 = 1;
    }
    if (v11 <= v7[98]) {
      unsigned int v11 = v7[98];
    }
    if (v11 <= v12) {
      unsigned int v11 = v12;
    }
    unsigned int v13 = 32 - __clz(v11);
    if (v11) {
      char v14 = v13;
    }
    else {
      char v14 = 0;
    }
    if (v10 >= 2) {
      LOBYTE(v10) = v14;
    }
    *((_BYTE *)v5 + 385) = v10;
    unsigned int v15 = *((unsigned __int8 *)v7 + 212);
    if (v15 >= 2)
    {
      if (v15 == 2)
      {
        char v16 = 2;
      }

      else
      {
        char v16 = 4;
        if (v15 >= 5)
        {
          if (dword_7C428 < v15 || v15 > 8) {
            char v16 = 4;
          }
          else {
            char v16 = 8;
          }
        }
      }
    }

    else
    {
      char v16 = 1;
    }

    *((_BYTE *)v5 + 384) = v16;
  }

  else
  {
    uint64_t v8 = v7[96];
  }

  xmmword_7C350(v8);
  if (!v5[49] || !*((_DWORD *)v5 + 92)) {
    return 0LL;
  }
  unsigned __int8 v18 = *v5;
  int v19 = **v5;
  if ((v19 & 0x1C00) == 0x1000)
  {
    if ((v4 & 1) == 0) {
      goto LABEL_112;
    }
    if (xmmword_7C430 == 2)
    {
      xmmword_7C350(v18[96]);
      unsigned int v36 = 0;
      uint64_t v25 = 0LL;
      char v37 = 1;
      do
      {
        char v38 = v37;
        v25 += sub_14920((uint64_t)v5, v36);
        char v37 = 0;
        unsigned int v36 = 1;
      }

      while ((v38 & 1) != 0);
      v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFFFFFELL | sub_13624(v5));
      BOOL v39 = sub_1393C(v5);
      uint64_t v40 = 4096LL;
      if (!v39) {
        uint64_t v40 = 0LL;
      }
      v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFF8FFFLL | v40 | ((unint64_t)(*((_DWORD *)v5 + 92) == 10) << 14) | ((unint64_t)(((_DWORD)v5[46] & 0xFFFFFFFE) == 8) << 13));
      xmmword_7C350((*v5)[96]);
      unint64_t v41 = (unint64_t)v5[44] & 0xFFFFFFFFFFFFFF8FLL | (16LL * (v5[49][28] & 7));
      v5[44] = (unsigned __int16 *)v41;
      uint64_t v42 = *v5;
      if (*((_BYTE *)*v5 + 212))
      {
        unsigned int v43 = *((unsigned __int8 *)v5 + 384);
        uint64_t v44 = (-2 * __clz((v43 - 1))) & 0xE;
        if (v43 >= 2) {
          uint64_t v45 = v44;
        }
        else {
          uint64_t v45 = 0LL;
        }
      }

      else
      {
        uint64_t v45 = 0LL;
      }

      v5[44] = (unsigned __int16 *)(v45 | v41 & 0xFFFFFFFFFFFFFFF1LL);
      int v60 = xmmword_7C350(v42[96]);
      uint64_t v61 = 128LL;
      if (!v60) {
        uint64_t v61 = 0LL;
      }
      v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFFFF7FLL | v61);
      if (v60)
      {
        xmmword_7C350((*v5)[96]);
        v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFFFCFFLL | ((((unint64_t)((*((unsigned __int8 *)v5[49] + 57) << 8) + 768) >> 8) & 3) << 8));
        xmmword_7C350((*v5)[96]);
        v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFFF3FFLL | ((((unint64_t)((*((unsigned __int8 *)v5[50] + 57) << 10) + 3072) >> 10) & 3) << 10));
      }

      char v58 = v5 + 31;
      xmmword_7C350((*v5)[96]);
      unsigned __int8 v62 = (_DWORD *)((char *)&unk_70B00 + 8 * *((unsigned int *)v5[49] + 15));
      unint64_t v63 = (unint64_t)v5[44] & 0xFFFFFFFF38007FFFLL | ((*v62 & 0xFLL) << 15) & 0xFFFFFFFFF807FFFFLL | ((v62[1] & 0xFLL) << 19) & 0xFFFFFFFFF87FFFFFLL | ((unint64_t)(*((_BYTE *)v5 + 385) & 0xF) << 23) | 0x80000000;
    }

    else
    {
      if (xmmword_7C430 != 1)
      {
        if ((_BYTE)xmmword_7C430) {
          return 0LL;
        }
        xmmword_7C350(v18[96]);
        unsigned int v24 = 0;
        uint64_t v25 = 0LL;
        char v26 = 1;
        do
        {
          char v27 = v26;
          v25 += sub_1584C((uint64_t)v5, v24);
          char v26 = 0;
          unsigned int v24 = 1;
        }

        while ((v27 & 1) != 0);
        v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFFFFFELL | sub_13624(v5));
        BOOL v28 = sub_1393C(v5);
        uint64_t v29 = 4096LL;
        if (!v28) {
          uint64_t v29 = 0LL;
        }
        v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFF8FFFLL | v29 | ((unint64_t)(*((_DWORD *)v5 + 92) == 10) << 14) | ((unint64_t)(((_DWORD)v5[46] & 0xFFFFFFFE) == 8) << 13));
        xmmword_7C350((*v5)[96]);
        unint64_t v30 = (unint64_t)v5[44] & 0xFFFFFFFFFFFFFF8FLL | (16LL * (v5[49][28] & 7));
        v5[44] = (unsigned __int16 *)v30;
        char v31 = *v5;
        if (*((_BYTE *)*v5 + 212))
        {
          unsigned int v32 = *((unsigned __int8 *)v5 + 384);
          uint64_t v33 = (-2 * __clz((v32 - 1))) & 0xE;
          if (v32 >= 2) {
            uint64_t v34 = v33;
          }
          else {
            uint64_t v34 = 0LL;
          }
        }

        else
        {
          uint64_t v34 = 0LL;
        }

        v5[44] = (unsigned __int16 *)(v34 | v30 & 0xFFFFFFFFFFFFFFF1LL);
        int v56 = xmmword_7C350(v31[96]);
        uint64_t v57 = 128LL;
        if (!v56) {
          uint64_t v57 = 0LL;
        }
        v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFFFF7FLL | v57);
        if (v56)
        {
          xmmword_7C350((*v5)[96]);
          v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFFFCFFLL | ((((unint64_t)((*((unsigned __int8 *)v5[49] + 57) << 8) + 768) >> 8) & 3) << 8));
          xmmword_7C350((*v5)[96]);
          v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFFF3FFLL | ((((unint64_t)((*((unsigned __int8 *)v5[50] + 57) << 10) + 3072) >> 10) & 3) << 10));
        }

        char v58 = v5 + 31;
        xmmword_7C350((*v5)[96]);
        unsigned int v59 = (_DWORD *)((char *)&unk_70B00 + 8 * *((unsigned int *)v5[49] + 15));
        v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFF38007FFFLL | ((*v59 & 0xFLL) << 15) & 0xFFFFFFFFF807FFFFLL | ((v59[1] & 0xFLL) << 19) & 0xFFFFFFFFF87FFFFFLL | ((unint64_t)(*((_BYTE *)v5 + 385) & 0xF) << 23));
        goto LABEL_111;
      }

      xmmword_7C350(v18[96]);
      unsigned int v46 = 0;
      uint64_t v25 = 0LL;
      char v47 = 1;
      do
      {
        char v48 = v47;
        v25 += sub_152C8((uint64_t)v5, v46);
        char v47 = 0;
        unsigned int v46 = 1;
      }

      while ((v48 & 1) != 0);
      v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFFFFFELL | sub_13624(v5));
      BOOL v49 = sub_1393C(v5);
      uint64_t v50 = 4096LL;
      if (!v49) {
        uint64_t v50 = 0LL;
      }
      v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFF8FFFLL | v50 | ((unint64_t)(*((_DWORD *)v5 + 92) == 10) << 14) | ((unint64_t)(((_DWORD)v5[46] & 0xFFFFFFFE) == 8) << 13));
      xmmword_7C350((*v5)[96]);
      unint64_t v51 = (unint64_t)v5[44] & 0xFFFFFFFFFFFFFF8FLL | (16LL * (v5[49][28] & 7));
      v5[44] = (unsigned __int16 *)v51;
      unsigned int v52 = *v5;
      if (*((_BYTE *)*v5 + 212))
      {
        unsigned int v53 = *((unsigned __int8 *)v5 + 384);
        uint64_t v54 = (-2 * __clz((v53 - 1))) & 0xE;
        if (v53 >= 2) {
          uint64_t v55 = v54;
        }
        else {
          uint64_t v55 = 0LL;
        }
      }

      else
      {
        uint64_t v55 = 0LL;
      }

      v5[44] = (unsigned __int16 *)(v55 | v51 & 0xFFFFFFFFFFFFFFF1LL);
      int v64 = xmmword_7C350(v52[96]);
      uint64_t v65 = 128LL;
      if (!v64) {
        uint64_t v65 = 0LL;
      }
      v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFFFF7FLL | v65);
      if (v64)
      {
        xmmword_7C350((*v5)[96]);
        v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFFFCFFLL | ((((unint64_t)((*((unsigned __int8 *)v5[49] + 57) << 8) + 768) >> 8) & 3) << 8));
        xmmword_7C350((*v5)[96]);
        v5[44] = (unsigned __int16 *)((unint64_t)v5[44] & 0xFFFFFFFFFFFFF3FFLL | ((((unint64_t)((*((unsigned __int8 *)v5[50] + 57) << 10) + 3072) >> 10) & 3) << 10));
      }

      char v58 = v5 + 31;
      xmmword_7C350((*v5)[96]);
      unsigned __int16 v66 = (_DWORD *)((char *)&unk_70B00 + 8 * *((unsigned int *)v5[49] + 15));
      unint64_t v63 = (unint64_t)v5[44] & 0xFFFFFFFF38007FFFLL | ((*v66 & 0xFLL) << 15) & 0xFFFFFFFFF807FFFFLL | ((v66[1] & 0xFLL) << 19) & 0xFFFFFFFFF87FFFFFLL | ((unint64_t)(*((_BYTE *)v5 + 385) & 0xF) << 23) | 0x40000000;
    }

    v5[44] = (unsigned __int16 *)v63;
LABEL_111:
    xmmword_7C350((*v5)[96]);
    uint64_t result = gpusGetKernelTexture( a1,  v5,  128LL,  *((unsigned __int8 *)v5[49] + 57),  0LL,  0LL,  v25,  0LL,  0LL,  0LL,  1024,  v58);
    if (!(_DWORD)result) {
      return result;
    }
LABEL_112:
    int v88 = v4;
    if ((v4 & 5) != 0)
    {
      uint64_t v67 = *v5;
      if (*((_BYTE *)*v5 + 211))
      {
        uint64_t v68 = 0LL;
        unint64_t v69 = 0LL;
        do
        {
          uint64_t v89 = v68;
          if (*((_BYTE *)v67 + 209))
          {
            unsigned __int16 v70 = v67[107];
            unint64_t v71 = v70 & 0xF;
            uint64_t v72 = 16 * v71;
            do
            {
              if (((1 << v71) & v5[1][v69 + 4]) != 0 && ((1 << v71) & v67[v69 + 114]) != 0)
              {
                uint64_t v73 = v5;
                if ((v70 & 0x1800) == 0x1000 || (int v74 = 3, (v70 & 0x2000) != 0) && (v70 & 0x600) != 0) {
                  int v74 = 4;
                }
                unsigned int v75 = v3 & 0xFFFFFF00;
                int v76 = (unsigned __int16 *)((char *)&v67[v72] + v68);
                uint64_t v77 = v76[140];
                uint64_t v78 = v76[141];
                gpusPixelSettings(v77, v78, v76[134], v76[135], v109, v108, v107, 0LL, v74);
                uint64_t v79 = v109[0];
                uint64_t v80 = sub_18014(v77, v78, v109[0], *(unsigned __int16 *)((char *)&(*v73)[v72 + 135] + v68));
                unsigned int v81 = *v73;
                int v82 = (unsigned __int16 *)((char *)&(*v73)[v72] + v68);
                int v83 = v82[134];
                int v84 = v82[135];
                LODWORD(v82) = v82[136];
                block[0] = _NSConcreteStackBlock;
                block[1] = 0x40000000LL;
                block[2] = sub_1B084;
                block[3] = &unk_78B98;
                block[4] = v73;
                block[5] = v90;
                block[6] = v73;
                int v95 = v69;
                int v96 = v71;
                v92[0] = v77;
                v92[1] = v78;
                uint64_t v5 = v73;
                uint64_t v93 = v79;
                uint64_t v94 = v80;
                uint64_t v97 = 0LL;
                int v98 = 0;
                int v99 = v83;
                int v100 = v84;
                int v101 = (int)v82;
                int v102 = v69;
                int v103 = v71;
                unsigned int v104 = v75;
                unsigned int v3 = v75;
                int v105 = 0;
                int v106 = 0;
                char v85 = (dispatch_queue_s *)v73[52];
                if (v85) {
                  dispatch_sync(v85, block);
                }
                else {
                  sub_15968((uint64_t)v73, v90, *(char **)((char *)&v81[v72 + 144] + v68), v92, (unsigned int *)&v97);
                }
                uint64_t v67 = *v73;
              }

              ++v71;
              unsigned __int16 v70 = v67[107];
              v68 += 32LL;
            }

            while (v71 < (v70 & 0xF) + (unint64_t)*((unsigned __int8 *)v67 + 209));
          }

          ++v69;
          uint64_t v68 = v89 + 480;
        }

        while (v69 < *((unsigned __int8 *)v67 + 211));
      }
    }

    uint64_t v86 = (uint64_t)v5;
    int v87 = v88;
    goto LABEL_136;
  }

  if ((v19 & 0x1C00) != 0x800)
  {
    printf( "%s - unknown texture type 0x%04X",  "BOOL32_t glrUpdateTexture(GLDShareGroup, GLDTexture, bitfield8_t, const bitfield16_t *)",  v19);
    putchar(10);
    return 0LL;
  }

  if ((v18[12] & 8) != 0) {
    goto LABEL_133;
  }
  if ((v18[12] & 2) != 0 && !v5[23])
  {
    uint64_t v20 = *((unsigned int *)v5 + 54);
    uint64_t v21 = &v5[v20];
    v5[23] = v21[14];
    v5[24] = v21[18];
    *((_DWORD *)v5 + 102) = v20;
  }

  if ((v4 & 0xF) == 4) {
    return 1LL;
  }
  if (*(_BYTE *)(a1 + 308))
  {
    uint64_t v22 = mach_absolute_time();
    int v23 = (*(&xmmword_7C130 + 1))(*((void *)*v5 + 4));
    v5[26] = (unsigned __int16 *)((char *)v5[26] + mach_absolute_time() - v22);
  }

  else
  {
    int v23 = (*(&xmmword_7C130 + 1))(*((void *)*v5 + 4));
  }

  if (v23) {
    return 0LL;
  }
  v4 |= 1u;
LABEL_133:
  if ((v4 & 0xF) == 0) {
    return 1LL;
  }
  uint64_t result = sub_14A48(a1, v5);
  if ((_DWORD)result)
  {
    uint64_t v86 = (uint64_t)v5;
    int v87 = v4;
LABEL_136:
    sub_1B014(v86, v87);
    return 1LL;
  }

  return result;
}

uint64_t sub_1B014(uint64_t result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 232);
  if ((a2 & 1) != 0) {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)v4 + 40LL))( *(void *)(result + 232),  result,  0LL);
  }
  if ((a2 & 0xFFFFFF81) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48LL))(v4, v3);
  }
  return result;
}

uint64_t sub_1B084(uint64_t a1)
{
  return sub_15968( *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(char **)(**(void **)(a1 + 48)
                    + 480LL * *(unsigned int *)(a1 + 80)
                    + 32LL * *(unsigned int *)(a1 + 84)
                    + 288),
           (int *)(a1 + 56),
           (unsigned int *)(a1 + 88));
}

uint64_t sub_1B0B4( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, _DWORD *a5, signed int a6, signed int a7)
{
  int v11 = a5[92];
  if (v11 == 4)
  {
    uint64_t v12 = *(void *)a5;
    int v13 = *(unsigned __int16 *)(*(void *)a5 + 196LL);
  }

  else
  {
    if (v11 == 6)
    {
LABEL_4:
      uint64_t v12 = *(void *)a5;
      int v13 = *(unsigned __int16 *)(*(void *)a5 + 198LL);
      goto LABEL_7;
    }

    uint64_t v12 = *(void *)a5;
    int v13 = 1;
  }

LABEL_7:
  int v37 = v13;
  char v14 = (unsigned __int16 *)(v12 + 480LL * a6 + 32LL * a7);
  uint64_t v15 = v14[134];
  uint64_t v16 = v14[135];
  uint64_t v17 = v14[140];
  uint64_t v18 = v14[141];
  if (v14[141]) {
    uint64_t v21 = *(void *)(a1 + 24) + 16212LL;
  }
  else {
    uint64_t v21 = 0LL;
  }
  __int16 v22 = *(_WORD *)(v12 + 214);
  int v23 = v22 & 0x1800;
  if ((v22 & 0x600) != 0) {
    int v24 = 4;
  }
  else {
    int v24 = 3;
  }
  if ((v22 & 0x2000) != 0) {
    int v25 = v24;
  }
  else {
    int v25 = 3;
  }
  if (v23 == 4096) {
    int v25 = 4;
  }
  gpusPixelSettings(v17, v18, v15, v16, v51, &v50, v49, v21, v25);
  unint64_t v26 = sub_18014(v17, v18, v51[0], v16);
  int v27 = sub_1B378(a2, a6, a7, 0, v15, v37, 0LL, 0LL, v26, v51[0], v50, &v48, &v47);
  xmmword_7C350(*(unsigned __int16 *)(*(void *)a5 + 192LL));
  uint64_t v28 = 0LL;
  if (v27)
  {
    if (*(unsigned __int8 *)(*((void *)a5 + 49) + 57LL) * (unint64_t)(v16 * v15) <= 0x40000)
    {
      return 0LL;
    }

    else if (v37)
    {
      int v29 = 0;
      __asm { FMOV            V9.2S, #1.0 }

      uint64_t v28 = 1LL;
      do
      {
        sub_6E8F0((uint64_t)v46, a2, a3, a4, v29, 0, 0, 0, 0, 0LL);
        sub_6E8F0((uint64_t)v45, (uint64_t)a5, a6, a7, v29, 0, 0, 0, 0, 0LL);
        v38[0] = 0LL;
        v38[1] = v15 | (v16 << 32);
        char v39 = 0;
        uint64_t v40 = 0x260000002600LL;
        int v41 = 1;
        char v42 = 0;
        uint64_t v43 = _D9;
        char v44 = 0;
        sub_6DE0C(a1, (uint64_t)v45, (uint64_t)v46, (uint64_t)v38);
        ++v29;
      }

      while (v37 != v29);
    }

    else
    {
      return 1LL;
    }
  }

  return v28;
}

uint64_t sub_1B378( uint64_t a1, unsigned int a2, int a3, int a4, char a5, int a6, uint64_t a7, void **a8, unint64_t a9, int a10, int a11, _BYTE *a12, void *a13)
{
  *a13 = 0LL;
  *a12 = 0;
  xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
  uint64_t result = 0LL;
  if (!*(_DWORD *)(*(void *)(a1 + 392) + 60LL))
  {
    xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
    if ((*(_BYTE *)(*(void *)(a1 + 392) + 64LL) & 2) != 0
      && (xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL)) & 1) == 0)
    {
      uint64_t v33 = a1;
      if (!((a10 % a11) | a5 & 1))
      {
        xmmword_7C350(*(unsigned __int16 *)(*(void *)a1 + 192LL));
        if (!*(_DWORD *)(*(void *)(a1 + 392) + 84LL))
        {
          uint64_t v21 = (uint64_t (*)(unint64_t, BOOL))off_7C380;
          unint64_t v22 = sub_193A8(a1);
          unint64_t v23 = v21(v22, (*(_DWORD *)(a1 + 368) - 1) < 2);
          int v24 = a3;
          int v25 = a3;
          unsigned int v26 = a2;
          int v27 = a4;
          BOOL v28 = sub_180B0(v33, v25, a2, a4, 0, 0, 0) % v23 == 0;
          if (a6 < 2)
          {
            int v29 = a13;
            unint64_t v30 = a12;
          }

          else
          {
            int v29 = a13;
            unint64_t v30 = a12;
            do
            {
              BOOL v28 = v28 && sub_180B0(v33, v24, v26, v27++, 0, 0, 0) % v23 == 0;
              --a6;
            }

            while (a6);
          }

          if (v28 && off_7C388(a10) == a10)
          {
            if (a8)
            {
              unint64_t v31 = a7 - **a8;
              uint64_t GPUVirtualAddress = IOAccelResourceGetGPUVirtualAddress(*a8[2]);
              *int v29 = v31 + GPUVirtualAddress;
              if (!((v31 + GPUVirtualAddress) % v23) && !(a10 % a11) && !(a9 % v23) && !(v31 % a11)) {
                return 1LL;
              }
            }

            if (((a9 + 3) & 0xFFFFFFFFFFFFFFFCLL) <= 0xFFF80)
            {
              uint64_t result = 1LL;
              *unint64_t v30 = 1;
              return result;
            }
          }
        }
      }
    }

    return 0LL;
  }

  return result;
}

BOOL sub_1B5F4( uint64_t a1, void *a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8, unsigned int a9, unsigned int a10, int a11, int a12, uint64_t a13, int a14, void **a15, int a16)
{
  uint64_t v20 = a3;
  _ZF = (*(_BYTE *)(*a2 + 130LL) & 1) != 0 && a4 == 0;
  char v24 = !_ZF;
  if (!_ZF || (BOOL result = sub_19F10(a2, a3, a16)))
  {
    uint64_t v26 = 0LL;
    int v27 = a12;
    *((void *)&v91 + 1) = a9;
    if (a12 && !a14) {
      uint64_t v26 = *(void *)(a1 + 24) + 16212LL;
    }
    unsigned int v92 = a2;
    unsigned int v88 = a5;
    unsigned int v89 = a6;
    if ((*(_WORD *)(*a2 + 214LL) & 0x1800) == 0x1000)
    {
      int v28 = 4;
    }

    else
    {
      int v28 = 3;
      if ((*(_WORD *)(*a2 + 214LL) & 0x2000) != 0)
      {
        if ((*(_WORD *)(*a2 + 214LL) & 0x600) != 0) {
          int v28 = 4;
        }
        else {
          int v28 = 3;
        }
      }
    }

    DWORD1(v91) = a8;
    gpusPixelSettings(a11, a12, a8, a9, v134, &v133, &v132, v26, v28);
    uint64_t v29 = v132;
    char v85 = v24;
    uint64_t v87 = sub_18014(a11, a12, v134[0], a9);
    if (a11 == 36248 || a11 == 6407)
    {
      BOOL v30 = 0;
      if (a12 != 33635 && a12 != 35899) {
        BOOL v30 = a12 != 35902;
      }
    }

    else
    {
      BOOL v30 = 0;
    }

    BOOL v31 = 0;
    unsigned int v32 = a15;
    uint64_t v90 = (char *)(a13 + v29);
    unsigned __int8 v131 = 0;
    uint64_t v130 = 0LL;
    if ((*(_BYTE *)(*a2 + 24LL) & 4) != 0)
    {
      sub_132A0(a2);
      int v33 = sub_22184(a1, a2[3], 1);
      unsigned int v32 = a15;
      BOOL v31 = v33 == 0;
    }

    int v34 = a7;
    unsigned int v35 = a4;
    if (v30
      || (uint64_t v36 = (uint64_t)v32,
          v37 = sub_1B378( (uint64_t)a2,  v20,  a4,  v34,  SBYTE4(v91),  a10,  (uint64_t)v90,  v32,  v87,  v134[0],  v133,  &v131,  &v130),  unsigned int v32 = (void **)v36,  (v37 & 1) == 0))
    {
      BOOL v38 = v32 != 0LL;
      uint64_t v43 = v92;
      uint64_t v44 = *v92;
    }

    else
    {
      BOOL v38 = v36 != 0;
      if (v36) {
        BOOL v39 = v31;
      }
      else {
        BOOL v39 = 0;
      }
      if (v39)
      {
        v119[0] = _NSConcreteStackBlock;
        v119[1] = 0x40000000LL;
        v119[2] = sub_1C1E4;
        v119[3] = &unk_78B18;
        v119[4] = v92;
        v119[5] = v36;
        int v120 = a11;
        int v121 = a12;
        int v122 = v134[0];
        uint64_t v123 = *(void *)((char *)&v91 + 4);
        unsigned int v124 = a10;
        unsigned int v125 = a4;
        int v126 = v20;
        unsigned int v127 = a5;
        unsigned int v128 = v89;
        int v129 = v34;
        v119[6] = v87;
        v119[7] = a1;
        v119[8] = v90;
        sub_19B9C(v92, (void *)a1, v36, v119);
        if ((v85 & 1) == 0)
        {
          uint64_t v40 = *v92;
          if ((*(_BYTE *)(*v92 + 130LL) & 1) != 0)
          {
            int v42 = *(unsigned __int8 *)(v40 + 210);
            __int16 v41 = *(_WORD *)(v40 + 214);
          }

          else
          {
            __int16 v41 = *(_WORD *)(v40 + 214);
            int v42 = v41 >> 4;
          }

          int v52 = (v41 & 0xF) + 1;
          sub_132A0(v92);
          unsigned int v53 = (unsigned int *)(v92[5] + 24LL);
          do
            unsigned int v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
          v115[0] = _NSConcreteStackBlock;
          v115[1] = 0x40000000LL;
          v115[2] = sub_1C2B0;
          v115[3] = &unk_78BB8;
          int v116 = v52;
          int v117 = v42;
          v115[4] = v92;
          int v118 = v20;
          sub_19B9C(v92, (void *)a1, 0LL, v115);
        }

        return 1LL;
      }

      uint64_t v44 = *v92;
      if (v31)
      {
        xmmword_7C350(*(unsigned __int16 *)(v44 + 192));
        unsigned int v51 = *(_DWORD *)(v92[49] + 24LL);
        if (v51 < 0x8D94)
        {
          if (v51 == 33320) {
            unsigned int v51 = 33319;
          }
        }

        else if (v51 < 0x8D9A)
        {
          v51 -= 29841;
        }

        if (v51 == a11)
        {
          xmmword_7C350(*(unsigned __int16 *)(*v92 + 192LL));
          if (*(_DWORD *)(v92[49] + 28LL) == a12)
          {
            xmmword_7C350(*(unsigned __int16 *)(*v92 + 192LL));
            uint64_t v55 = v92[49];
            goto LABEL_102;
          }
        }

        if (a11 > 33318)
        {
          if (a11 <= 36243)
          {
            if (a11 == 33319)
            {
              uint64_t v57 = 0LL;
              uint64_t v56 = 1LL;
              switch(a12)
              {
                case 5120:
                  uint64_t v57 = 36757LL;
                  break;
                case 5121:
                  uint64_t v57 = 33323LL;
                  break;
                case 5122:
                  uint64_t v57 = 33337LL;
                  break;
                case 5123:
                  uint64_t v57 = 33338LL;
                  break;
                case 5124:
                  uint64_t v57 = 33339LL;
                  break;
                case 5125:
                  uint64_t v57 = 33340LL;
                  break;
                case 5126:
                  uint64_t v57 = 33328LL;
                  break;
                case 5127:
                case 5128:
                case 5129:
                case 5130:
                  goto LABEL_101;
                case 5131:
                  goto LABEL_141;
                default:
                  if (a12 == 36193) {
LABEL_141:
                  }
                    uint64_t v57 = 33327LL;
                  break;
              }

              goto LABEL_101;
            }

            if (a11 != 33320) {
              goto LABEL_98;
            }
            unsigned int v58 = a12 - 5120;
            int v59 = 28215;
          }

          else
          {
            if (a11 != 36244)
            {
              if (a11 == 36248)
              {
                if ((a12 - 5120) < 6)
                {
                  uint64_t v57 = dword_70B88[a12 - 5120];
LABEL_100:
                  uint64_t v56 = 1LL;
LABEL_101:
                  v115[0] = 0LL;
                  uint64_t v55 = off_7C340(v56, a12, v57, 0LL, v115, 0LL, 0LL, 1LL);
LABEL_102:
                  uint64_t v62 = a10;
                  if (v131)
                  {
                    uint64_t v63 = 0LL;
                    uint64_t v64 = 0LL;
                    int v65 = 0;
                  }

                  else
                  {
                    unsigned __int16 v66 = *(uint64_t **)(v36 + 16);
                    uint64_t v64 = v66[2] + 24;
                    uint64_t v63 = *v66;
                    int v65 = *(_DWORD *)(v66[1] + 256);
                  }

                  int v81 = v65;
                  uint64_t v82 = v64;
                  uint64_t v83 = v63;
                  int v84 = v131;
                  uint64_t v67 = v92;
                  if (a10)
                  {
                    int v68 = v34;
                    uint64_t v69 = 0LL;
                    uint64_t v80 = v130;
                    __asm { FMOV            V9.2S, #1.0 }

                    do
                    {
                      unsigned int v74 = v20;
                      uint64_t v75 = v20;
                      uint64_t v76 = v62;
                      sub_6E8F0((uint64_t)v115, (uint64_t)v67, v74, a4, v68, 0, 0, 0, 0, 0LL);
                      uint64_t v77 = (uint64_t)&v90[v69];
                      if (v84) {
                        uint64_t v78 = 0LL;
                      }
                      else {
                        uint64_t v78 = v80 + v69;
                      }
                      if (!v84) {
                        uint64_t v77 = 0LL;
                      }
                      sub_6E1B0( (uint64_t)v114,  v55,  v78,  v83,  v82,  v81,  SDWORD1(v91),  a9,  (v134[0] / v133),  1,  *(_DWORD *)(v55 + 84),  1,  0,  0,  v77,  v87);
                      v107[0] = 0LL;
                      v107[1] = v91 >> 32;
                      char v108 = 0;
                      uint64_t v109 = 0x260000002600LL;
                      int v110 = 1;
                      char v111 = 0;
                      uint64_t v112 = _D9;
                      char v113 = 0;
                      uint64_t v104 = 0LL;
                      int v105 = DWORD1(v91);
                      unsigned int v106 = a9;
                      unsigned int v100 = a5;
                      unsigned int v101 = v89;
                      int v102 = DWORD1(v91);
                      unsigned int v103 = a9;
                      sub_6DE0C(a1, (uint64_t)v114, (uint64_t)v115, (uint64_t)v107);
                      uint64_t v79 = v76;
                      uint64_t v20 = v75;
                      uint64_t v67 = v92;
                      ++v68;
                      v69 += v87;
                      uint64_t v62 = v79 - 1;
                    }

                    while (v62);
                  }

                  *(_DWORD *)(a1 + 2392) |= 8u;
                  sub_6D250(*(void *)(*(void *)(a1 + 16) + 8LL), v67);
                  uint64_t v43 = v67;
                  if ((v85 & 1) != 0) {
                    return 1LL;
                  }
                  goto LABEL_45;
                }

LABEL_99:
                uint64_t v57 = 0LL;
                goto LABEL_100;
              }

              if (a11 == 36249)
              {
                switch(a12)
                {
                  case 5120:
                    uint64_t v56 = 1LL;
                    uint64_t v57 = 36238LL;
                    break;
                  case 5121:
                    uint64_t v56 = 1LL;
                    uint64_t v57 = 36220LL;
                    break;
                  case 5122:
                    uint64_t v56 = 1LL;
                    goto LABEL_146;
                  case 5123:
                    uint64_t v56 = 1LL;
                    goto LABEL_148;
                  case 5124:
                    uint64_t v56 = 1LL;
                    goto LABEL_143;
                  case 5125:
                    uint64_t v56 = 1LL;
                    goto LABEL_150;
                  default:
                    if (a12 != 33640) {
                      goto LABEL_99;
                    }
                    uint64_t v56 = 1LL;
                    uint64_t v57 = 36975LL;
                    break;
                }

                goto LABEL_101;
              }

LABEL_98:
              printf( "%s:%d Unknown format: 0x%x, type: 0x%x",  "agxuGetInternalFormatForTextureTransfer",  4378,  a11,  a12);
              putchar(10);
              goto LABEL_99;
            }

            unsigned int v58 = a12 - 5120;
            int v59 = 28209;
          }

          unsigned int v61 = a12 + v59;
          if (v58 >= 6) {
            uint64_t v57 = 0LL;
          }
          else {
            uint64_t v57 = v61;
          }
          goto LABEL_100;
        }

        if (a11 <= 6407)
        {
          if (a11 == 6403)
          {
            uint64_t v57 = 0LL;
            uint64_t v56 = 1LL;
            switch(a12)
            {
              case 5120:
                uint64_t v57 = 36756LL;
                break;
              case 5121:
                uint64_t v57 = 33321LL;
                break;
              case 5122:
                uint64_t v57 = 33331LL;
                break;
              case 5123:
                uint64_t v57 = 33332LL;
                break;
              case 5124:
                uint64_t v57 = 33333LL;
                break;
              case 5125:
                uint64_t v57 = 33334LL;
                break;
              case 5126:
                uint64_t v57 = 33326LL;
                break;
              case 5127:
              case 5128:
              case 5129:
              case 5130:
                goto LABEL_101;
              case 5131:
                goto LABEL_139;
              default:
                if (a12 == 36193) {
LABEL_139:
                }
                  uint64_t v57 = 33325LL;
                break;
            }

            goto LABEL_101;
          }

          if (a11 == 6407)
          {
            uint64_t v57 = 0LL;
            uint64_t v56 = 1LL;
            if (a12 > 33634)
            {
              if (a12 > 35901)
              {
                if (a12 == 35902)
                {
                  uint64_t v57 = 35901LL;
                }

                else if (a12 == 36193)
                {
LABEL_133:
                  uint64_t v57 = 34843LL;
                }
              }

              else if (a12 == 33635)
              {
                uint64_t v57 = 36194LL;
              }

              else if (a12 == 35899)
              {
                uint64_t v57 = 35898LL;
              }
            }

            else
            {
              switch(a12)
              {
                case 5120:
                  uint64_t v57 = 36758LL;
                  break;
                case 5121:
                  uint64_t v57 = 32849LL;
                  break;
                case 5122:
                  uint64_t v57 = 36233LL;
                  break;
                case 5123:
                  uint64_t v57 = 36215LL;
                  break;
                case 5124:
                  uint64_t v57 = 36227LL;
                  break;
                case 5125:
                  uint64_t v57 = 36209LL;
                  break;
                case 5126:
                  uint64_t v57 = 34837LL;
                  break;
                case 5131:
                  goto LABEL_133;
                default:
                  goto LABEL_101;
              }
            }

            goto LABEL_101;
          }

          goto LABEL_98;
        }

        if (a11 == 6408)
        {
          uint64_t v57 = 0LL;
          uint64_t v56 = 1LL;
          if (a12 <= 32818)
          {
            switch(a12)
            {
              case 5120:
                goto LABEL_130;
              case 5121:
                goto LABEL_118;
              case 5122:
LABEL_146:
                uint64_t v57 = 36232LL;
                break;
              case 5123:
LABEL_148:
                uint64_t v57 = 36214LL;
                break;
              case 5124:
LABEL_143:
                uint64_t v57 = 36226LL;
                break;
              case 5125:
LABEL_150:
                uint64_t v57 = 36208LL;
                break;
              case 5126:
                uint64_t v57 = 34836LL;
                break;
              case 5131:
                goto LABEL_123;
              default:
                goto LABEL_101;
            }

            goto LABEL_101;
          }

          if (a12 > 33637)
          {
            if (a12 != 33638)
            {
              if (a12 == 33640)
              {
                uint64_t v57 = 32857LL;
              }

              else if (a12 == 36193)
              {
LABEL_123:
                uint64_t v57 = 34842LL;
              }

              goto LABEL_101;
            }

            goto LABEL_136;
          }

          if (a12 != 32819)
          {
            if (a12 != 32820) {
              goto LABEL_101;
            }
            goto LABEL_136;
          }
        }

        else
        {
          if (a11 != 32993) {
            goto LABEL_98;
          }
          uint64_t v57 = 0LL;
          uint64_t v56 = 32993LL;
          if (a12 <= 32818)
          {
            if (a12 == 5120)
            {
LABEL_130:
              uint64_t v57 = 36759LL;
              goto LABEL_101;
            }

            int v60 = 5121;
LABEL_117:
            if (a12 == v60) {
LABEL_118:
            }
              uint64_t v57 = 32856LL;
            goto LABEL_101;
          }

          if (a12 != 32819)
          {
            if (a12 != 32820)
            {
              int v60 = 33639;
              goto LABEL_117;
            }

LABEL_136:
            uint64_t v57 = 32855LL;
            goto LABEL_101;
          }
        }

        uint64_t v57 = 32854LL;
        goto LABEL_101;
      }

      uint64_t v43 = v92;
      unsigned int v35 = a4;
    }

    char v45 = v85;
    unsigned int v46 = a9;
    if ((*(_BYTE *)(v44 + 24) & 4) != 0)
    {
      int v47 = v20;
      int v48 = v34;
      BOOL v49 = v32;
      sub_132A0(v43);
      sub_21FF0((void *)a1, v43[3], 1);
      unsigned int v32 = v49;
      int v34 = v48;
      LODWORD(v20) = v47;
      int v27 = a12;
      char v45 = v85;
      unsigned int v46 = a9;
    }

    if (v38) {
      sub_21FF0((void *)a1, *v32[2], 1);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = sub_1C294;
    block[3] = &unk_78B38;
    block[4] = v43;
    block[5] = a1;
    block[6] = v90;
    v94[0] = a11;
    v94[1] = v27;
    uint64_t v95 = v134[0];
    uint64_t v96 = v87;
    v97[0] = v88;
    v97[1] = v89;
    v97[2] = v34;
    v97[3] = DWORD1(v91);
    v97[4] = v46;
    v97[5] = a10;
    v97[6] = v20;
    v97[7] = v35;
    uint64_t v98 = 0LL;
    int v99 = 0;
    int v50 = (dispatch_queue_s *)v43[52];
    if (v50)
    {
      dispatch_sync(v50, block);
      if ((v45 & 1) != 0) {
        return 1LL;
      }
    }

    else
    {
      sub_15968((uint64_t)v43, *(void *)(a1 + 16), v90, v94, v97);
      if ((v45 & 1) != 0) {
        return 1LL;
      }
    }

    abort();
  }

LABEL_45:
    sub_1A08C(a1, v43, v20);
    return 1LL;
  }

  return result;
}

  uint64_t v36 = v34[7];
  if (v34[7]) {
    LODWORD(v36) = *(int *)((char *)v13 + v36);
  }
  if (v35 >= 0x13 && (char v37 = v34[9]) != 0) {
    BOOL v38 = *(int *)((char *)v13 + v37);
  }
  else {
LABEL_50:
  }
    BOOL v38 = 0;
  *((_DWORD *)v10 + 33) += (v38 + v36) >> 2;
  sub_6682C( *(void *)(v11 + 64),  *((int **)v10 + 9),  *((int **)v10 + 10),  (int *)v10 + 35,  (_DWORD *)v10 + 34,  (BOOL *)&v51);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v10;
  BOOL v39 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 16LL))(v39);
  if ((result & 1) == 0)
  {
    uint64_t v40 = *(void *)(*(void *)(a1 + 32) + 8LL);
    BOOL result = *(void *)(v40 + 24);
    if (result)
    {
      BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
      uint64_t v40 = *(void *)(*(void *)(a1 + 32) + 8LL);
    }

    *(void *)(v40 + 24) = 0LL;
  }

  return result;
}

              *uint64_t v26 = v37;
              unsigned int v32 = 1LL << (v37 + 16);
              goto LABEL_46;
            }

            uint64_t v29 = v28 & 0xFF0000FF | 0x300;
          }

          *uint64_t v26 = v29;
LABEL_26:
          v25 += 2;
          ++v26;
          if (!--v27)
          {
            int v13 = *(void *)(a1 + 3352);
            goto LABEL_48;
          }
        }
      }
    }
  }

  uint64_t v15 = 0LL;
  unint64_t v23 = 0LL;
  unint64_t v22 = 0LL;
LABEL_48:
  *(void *)(a1 + 3352) = v13 & 0xFFFFFFFF00000000LL | v15;
  if (dword_7C464)
  {
    *(void *)(a1 + 3344) = v23 >> 16;
    *(void *)(a1 + 3336) = v22 >> 16;
  }

  __int16 v41 = *(_DWORD *)(a1 + 3488);
  int v42 = *((void *)v9 + 3);
  LODWORD(v67[0]) = 1;
  *(void *)((char *)v67 + 4) = 0x1010000001ALL;
  HIDWORD(v67[0]) = 6698;
  *(_OWORD *)((char *)&v67[16] + 8) = 0u;
  *(_OWORD *)((char *)&v67[17] + 8) = 0u;
  *(_OWORD *)((char *)&v67[18] + 8) = 0u;
  *(_OWORD *)((char *)&v67[15] + 8) = 0u;
  uint64_t v43 = *(_OWORD *)(a1 + 3320);
  v67[3] = *(_OWORD *)(a1 + 3304);
  v67[4] = v43;
  uint64_t v44 = *(_OWORD *)(a1 + 3352);
  v67[5] = *(_OWORD *)(a1 + 3336);
  v67[6] = v44;
  char v45 = *(_OWORD *)(a1 + 3288);
  v67[1] = *(_OWORD *)(a1 + 3272);
  v67[2] = v45;
  *((void *)&v67[19] + 1) = 0LL;
  *(void *)&v67[20] = &v67[1];
  LODWORD(v67[7]) = 15406;
  *(_OWORD *)((char *)&v67[7] + 4) = *(_OWORD *)v42;
  unsigned int v46 = *(_OWORD *)(v42 + 16);
  int v47 = *(_OWORD *)(v42 + 32);
  int v48 = *(_OWORD *)(v42 + 48);
  *(_OWORD *)((char *)&v67[11] + 4) = *(_OWORD *)(v42 + 64);
  *(_OWORD *)((char *)&v67[10] + 4) = v48;
  *(_OWORD *)((char *)&v67[9] + 4) = v47;
  *(_OWORD *)((char *)&v67[8] + 4) = v46;
  BOOL v49 = *(_OWORD *)(v42 + 80);
  int v50 = *(_OWORD *)(v42 + 96);
  unsigned int v51 = *(_OWORD *)(v42 + 112);
  DWORD1(v67[15]) = *(_DWORD *)(v42 + 128);
  *(_OWORD *)((char *)&v67[14] + 4) = v51;
  *(_OWORD *)((char *)&v67[13] + 4) = v50;
  *(_OWORD *)((char *)&v67[12] + 4) = v49;
  if (v41)
  {
    DWORD2(v67[15]) = 19759;
    int v52 = *(_OWORD *)(a1 + 3424);
    *(_OWORD *)((char *)&v67[16] + 12) = *(_OWORD *)(a1 + 3408);
    *(_OWORD *)((char *)&v67[17] + 12) = v52;
    *(_OWORD *)((char *)&v67[18] + 12) = *(_OWORD *)(a1 + 3440);
    *(_OWORD *)((char *)&v67[15] + 12) = *(_OWORD *)(a1 + 3392);
    unsigned int v53 = 77;
  }

  else
  {
    unsigned int v53 = 60;
  }

  unsigned int v54 = v53 + 1;
  DWORD1(v67[0]) = v53 + 1;
  *((_DWORD *)v67 + v53 + 2) = 68;
  uint64_t v55 = *((void *)v9 + 5);
  uint64_t v56 = *(void **)v55;
  if (*(void *)v55)
  {
    uint64_t v57 = 0LL;
    unsigned int v58 = *(_DWORD **)v55;
    while (1)
    {
      int v59 = v57;
      uint64_t v57 = v58;
      unsigned int v58 = (_DWORD *)v57[42];
      if (!v58) {
        goto LABEL_59;
      }
    }

    if (v57 == v56)
    {
      uint64_t v57 = v56;
    }

    else
    {
      v59[42] = v57[42];
      v57[42] = v56;
      *(void *)uint64_t v55 = v57;
    }
  }

  else
  {
LABEL_59:
    uint64_t v57 = operator new(0x158uLL);
    int v60 = (*(uint64_t (**)(void, _OWORD *))(**(void **)(v55 + 8) + 16LL))(*(void *)(v55 + 8), v67);
    memcpy(v57, v67, 0x148uLL);
    v57[41] = v60;
    v57[42] = *(void *)v55;
    *(void *)uint64_t v55 = v57;
    unsigned int v61 = *(_DWORD *)(v55 + 16);
    uint64_t v62 = *(_DWORD *)(v55 + 20) + 1;
    *(_DWORD *)(v55 + 20) = v62;
    if (v62 > v61)
    {
      uint64_t v63 = v57;
      do
      {
        uint64_t v64 = v63;
        uint64_t v63 = v57;
        uint64_t v57 = (void *)v57[42];
      }

      while (v57);
      v64[42] = 0LL;
      (*(void (**)(void, void))(**(void **)(v55 + 8) + 24LL))(*(void *)(v55 + 8), v63[41]);
      operator delete(v63);
      --*(_DWORD *)(v55 + 20);
      uint64_t v57 = *(void **)v55;
    }
  }

  int v65 = v57[41];
  if (v65)
  {
    if (v65 == *((void *)v9 + 6)) {
      goto LABEL_68;
    }
  }

  else
  {
    *((_DWORD *)v9 + 5) = 2;
  }

  *((void *)v9 + 6) = v65;
  *((_DWORD *)v9 + 4) |= 1u;
LABEL_68:
  if (*((_DWORD *)v9 + 5) == 2) {
    return 0LL;
  }
  if (a2 && ((*((_DWORD *)v9 + 4) | v5) & 9) != 0) {
    sub_66264(v65, *a2);
  }
  return v9;
}

uint64_t sub_1C1E4(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  sub_132A0(v2);
  IOAccelResourceFinishEvent(v2[3], 0LL);
  IOAccelResourceFinishEvent(**(void **)(*(void *)(a1 + 40) + 16LL), 1LL);
  uint64_t v13 = 0LL;
  char v12 = 0;
  v14[0] = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  v14[1] = *(int *)(a1 + 80);
  v14[2] = v3;
  uint64_t v5 = *(void *)(a1 + 84);
  int v10 = *(_DWORD *)(a1 + 92);
  int32x2_t v11 = vrev64_s32(*(int32x2_t *)(a1 + 96));
  unsigned int v8 = *(_DWORD *)(a1 + 104);
  *(void *)&__int128 v6 = *(void *)(a1 + 108);
  *((void *)&v6 + 1) = v5;
  __int128 v9 = v6;
  return sub_15968(*(void *)(a1 + 32), *(void *)(v4 + 16), *(char **)(a1 + 64), (int *)v14, &v8);
}

uint64_t sub_1C294(uint64_t a1)
{
  return sub_15968( *(void *)(a1 + 32),  *(void *)(*(void *)(a1 + 40) + 16LL),  *(char **)(a1 + 48),  (int *)(a1 + 56),  (unsigned int *)(a1 + 80));
}

void *sub_1C2B0(uint64_t a1)
{
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  for (unsigned int i = *(_DWORD *)(a1 + 44);
        v3 <= i && (sub_174B4(*(void *)(a1 + 32), *(_DWORD *)(a1 + 48), v3) & 1) != 0;
        unsigned int i = *(_DWORD *)(a1 + 44))
  {
    ++v3;
  }

  uint64_t v4 = *(void **)(a1 + 32);
  BOOL result = sub_132A0(v4);
  __int128 v6 = (unsigned int *)(v4[5] + 24LL);
  do
    unsigned int v7 = __ldxr(v6);
  while (__stxr(v7 - 1, v6));
  return result;
}

uint64_t sub_1C31C(uint64_t a1, unsigned __int8 *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v10 = (unsigned __int16 *)(*(void *)a2 + 480LL * a3 + 32LL * a4);
  gpusPixelSettings(v10[140], v10[141], v10[134], v10[135], v41, v40, &v39, 0LL, 3);
  uint64_t v11 = v39;
  unint64_t v12 = v41[0] * (unint64_t)a2[384];
  uint64_t v13 = sub_18014(a5, a6, v41[0] * a2[384], v10[135]);
  int v14 = v10[134];
  int v15 = v10[135];
  int v16 = v10[136];
  else {
    unsigned __int8 v17 = *(_BYTE *)(*(void *)a2 + 24LL) & 1;
  }
  uint64_t v18 = (char *)(a7 + v11);
  sub_132A0(a2);
  IOAccelResourceFinishEvent(*((void *)a2 + 3), 1LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1C4D0;
  block[3] = &unk_78B58;
  block[4] = a2;
  block[5] = a1;
  block[6] = v18;
  v26[0] = a5;
  v26[1] = a6;
  unint64_t v27 = v12;
  uint64_t v28 = v13;
  uint64_t v29 = 0LL;
  int v30 = 0;
  int v31 = v14;
  int v32 = v15;
  int v33 = v16;
  int v34 = a3;
  int v35 = a4;
  unsigned __int8 v36 = v17;
  int v37 = 0;
  int v38 = 0;
  int v19 = (dispatch_queue_s *)*((void *)a2 + 52);
  if (v19) {
    dispatch_sync(v19, block);
  }
  else {
    sub_10954((uint64_t)a2, a1, v18, v26, (uint64_t)&v29);
  }
  return 0LL;
}

uint64_t sub_1C4D0(uint64_t a1)
{
  return sub_10954(*(void *)(a1 + 32), *(void *)(a1 + 40), *(char **)(a1 + 48), (unsigned int *)(a1 + 56), a1 + 80);
}

uint64_t sub_1C4E8(uint64_t a1, unsigned __int8 *a2, int a3, int a4)
{
  uint64_t v6 = *(void *)a2 + 480LL * a3 + 32LL * a4;
  uint64_t v22 = *(void *)(v6 + 288);
  gpusPixelSettings( *(unsigned __int16 *)(v6 + 280),  *(unsigned __int16 *)(v6 + 282),  *(unsigned __int16 *)(v6 + 268),  *(unsigned __int16 *)(v6 + 270),  v41,  v40,  &v39,  0LL,  3);
  uint64_t v7 = v39;
  unsigned int v8 = *(unsigned __int16 *)(v6 + 280);
  unsigned int v9 = *(unsigned __int16 *)(v6 + 282);
  unint64_t v21 = v41[0] * (unint64_t)a2[384];
  uint64_t v10 = sub_18014( *(unsigned __int16 *)(v6 + 280),  *(unsigned __int16 *)(v6 + 282),  v41[0],  *(unsigned __int16 *)(v6 + 270));
  int v11 = *(unsigned __int16 *)(v6 + 268);
  int v12 = *(unsigned __int16 *)(v6 + 270);
  int v13 = *(unsigned __int16 *)(v6 + 272);
  int v14 = *(unsigned __int16 *)(v6 + 280);
  else {
    unsigned __int8 v17 = *(_BYTE *)(*(void *)a2 + 24LL) & 1;
  }
  uint64_t v18 = (char *)(v22 + v7);
  sub_132A0(a2);
  IOAccelResourceFinishEvent(*((void *)a2 + 3), 1LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1C6B0;
  block[3] = &unk_78B78;
  block[4] = a2;
  block[5] = a1;
  block[6] = v18;
  v26[0] = v8;
  v26[1] = v9;
  unint64_t v27 = v21;
  uint64_t v28 = v10;
  uint64_t v29 = 0LL;
  int v30 = 0;
  int v31 = v11;
  int v32 = v12;
  int v33 = v13;
  int v34 = a3;
  int v35 = a4;
  unsigned __int8 v36 = v17;
  int v37 = 0;
  int v38 = 0;
  int v19 = (dispatch_queue_s *)*((void *)a2 + 52);
  if (v19) {
    dispatch_sync(v19, block);
  }
  else {
    sub_10954((uint64_t)a2, a1, v18, v26, (uint64_t)&v29);
  }
  *(_DWORD *)(a1 + 304) |= 1u;
  return 0LL;
}

uint64_t sub_1C6B0(uint64_t a1)
{
  return sub_10954(*(void *)(a1 + 32), *(void *)(a1 + 40), *(char **)(a1 + 48), (unsigned int *)(a1 + 56), a1 + 80);
}

void sub_1C6C8(uint64_t a1, unsigned __int16 **a2)
{
}

void sub_1C6F8(int a1, uint64_t *a2, int a3, int a4, char *a5)
{
  uint64_t v7 = *a2;
  int v8 = *(unsigned __int16 *)(*a2 + 192);
  *((_WORD *)a5 + 4) = v8;
  if (v8 <= 35055)
  {
    if (v8 > 33320)
    {
      switch(v8)
      {
        case 33321:
        case 33329:
        case 33330:
          goto LABEL_10;
        case 33322:
        case 33324:
          goto LABEL_93;
        case 33323:
        case 33335:
        case 33336:
          goto LABEL_31;
        case 33325:
        case 33331:
        case 33332:
          __int16 v9 = 16;
          goto LABEL_43;
        case 33326:
        case 33333:
        case 33334:
          __int16 v9 = 32;
          goto LABEL_43;
        case 33327:
        case 33337:
        case 33338:
          int v15 = 1048592;
          goto LABEL_46;
        case 33328:
        case 33339:
        case 33340:
          int v15 = 2097184;
          goto LABEL_46;
        default:
          switch(v8)
          {
            case 34836:
              goto LABEL_21;
            case 34837:
              goto LABEL_51;
            case 34838:
              __int16 v12 = 32;
              goto LABEL_89;
            case 34840:
              __int16 v21 = 32;
              goto LABEL_91;
            case 34841:
              int v17 = 2097184;
              goto LABEL_83;
            case 34842:
              goto LABEL_28;
            case 34843:
              goto LABEL_52;
            case 34844:
              __int16 v12 = 16;
              goto LABEL_89;
            case 34846:
              __int16 v21 = 16;
              goto LABEL_91;
            case 34847:
              int v17 = 1048592;
              goto LABEL_83;
            default:
              goto LABEL_93;
          }
      }
    }

    if (v8 > 32847)
    {
      switch(v8)
      {
        case 32848:
          goto LABEL_58;
        case 32849:
          goto LABEL_29;
        case 32850:
        case 32851:
        case 32852:
        case 32853:
          goto LABEL_93;
        case 32854:
          uint64_t v11 = 0x4000400040004LL;
          goto LABEL_63;
        case 32855:
          uint64_t v11 = 0x1000500050005LL;
          goto LABEL_63;
        case 32856:
          goto LABEL_30;
        case 32857:
          goto LABEL_60;
        default:
          *((_WORD *)a5 + 11) = 24;
          *((_WORD *)a5 + 4) = -32346;
          break;
      }

      goto LABEL_64;
    }

    switch(v8)
    {
      case 32828:
        __int16 v12 = 8;
LABEL_89:
        *((_WORD *)a5 + 8) = v12;
        goto LABEL_64;
      case 32832:
        __int16 v21 = 8;
LABEL_91:
        *((_WORD *)a5 + 9) = v21;
        goto LABEL_64;
      case 32837:
        int v17 = 524296;
LABEL_83:
        *((_DWORD *)a5 + 4) = v17;
        goto LABEL_64;
    }

LABEL_93:
    printf("%s:%d - Unsupported InternalFormat 0x%04X", "glrGetTextureInfo", 5150, v8);
    putchar(10);
    uint64_t v7 = *a2;
    goto LABEL_64;
  }

  if (v8 > 36207)
  {
    if (v8 <= 36231)
    {
      switch(v8)
      {
        case 36208:
        case 36226:
LABEL_21:
          uint64_t v11 = 0x20002000200020LL;
          goto LABEL_63;
        case 36209:
        case 36227:
LABEL_51:
          *(_DWORD *)(a5 + 10) = 2097184;
          __int16 v14 = 32;
          goto LABEL_59;
        case 36214:
LABEL_28:
          uint64_t v11 = 0x10001000100010LL;
          goto LABEL_63;
        case 36215:
LABEL_52:
          *(_DWORD *)(a5 + 10) = 1048592;
          __int16 v14 = 16;
          goto LABEL_59;
        case 36220:
          goto LABEL_30;
        case 36221:
          goto LABEL_29;
        default:
          goto LABEL_93;
      }
    }

    if (v8 <= 36755)
    {
      switch(v8)
      {
        case 36232:
          goto LABEL_28;
        case 36233:
          goto LABEL_52;
        case 36238:
          goto LABEL_30;
        case 36239:
          goto LABEL_29;
        default:
          goto LABEL_93;
      }
    }

    if (v8 <= 36974)
    {
      switch(v8)
      {
        case 36756:
LABEL_10:
          __int16 v9 = 8;
LABEL_43:
          *((_WORD *)a5 + 5) = v9;
          break;
        case 36757:
LABEL_31:
          int v15 = 524296;
LABEL_46:
          *(_DWORD *)(a5 + 10) = v15;
          break;
        case 36758:
          goto LABEL_29;
        case 36759:
          goto LABEL_30;
        default:
          goto LABEL_93;
      }

      goto LABEL_64;
    }

    if (v8 == 36975)
    {
LABEL_60:
      uint64_t v11 = 0x2000A000A000ALL;
      goto LABEL_63;
    }

    if (v8 != 37874)
    {
      if (v8 != 37881) {
        goto LABEL_93;
      }
      uint64_t v11 = 0x8000A000A000ALL;
LABEL_63:
      *(void *)(a5 + 10) = v11;
      goto LABEL_64;
    }

    goto LABEL_54;
  }

  if (v8 <= 35897)
  {
    if (v8 > 35445)
    {
LABEL_54:
      int v10 = 655370;
LABEL_55:
      *(_DWORD *)(a5 + 10) = v10;
      __int16 v14 = 10;
      goto LABEL_59;
    }

    __int16 v13 = -30480;
    if (v8 == 35056)
    {
      unsigned __int16 v16 = 24;
      goto LABEL_85;
    }

    if (v8 != 35359 && v8 != 35409) {
      goto LABEL_93;
    }
LABEL_29:
    *(_DWORD *)(a5 + 10) = 524296;
    __int16 v14 = 8;
LABEL_59:
    *((_WORD *)a5 + 7) = v14;
    goto LABEL_64;
  }

  if (v8 > 36011)
  {
    if (v8 <= 36167)
    {
      __int16 v13 = -29524;
      if (v8 == 36012)
      {
        *((_WORD *)a5 + 11) = 32;
        goto LABEL_87;
      }

      __int16 v13 = -29523;
      if (v8 != 36013) {
        goto LABEL_93;
      }
      unsigned __int16 v16 = 32;
LABEL_85:
      *(_DWORD *)(a5 + 22) = v16 | 0x80000;
LABEL_87:
      *((_WORD *)a5 + 4) = v13;
      goto LABEL_64;
    }

    if (v8 == 36168)
    {
      *(_DWORD *)(a5 + 22) = 0x80000;
      goto LABEL_64;
    }

    if (v8 != 36194) {
      goto LABEL_93;
    }
LABEL_58:
    *(_DWORD *)(a5 + 10) = 393221;
    __int16 v14 = 5;
    goto LABEL_59;
  }

  switch(v8)
  {
    case 35898:
      int v10 = 720907;
      goto LABEL_55;
    case 35901:
      *(_DWORD *)(a5 + 10) = 589833;
      *((_WORD *)a5 + 7) = 9;
      *((_WORD *)a5 + 13) = 5;
      break;
    case 35905:
      goto LABEL_29;
    case 35907:
LABEL_30:
      uint64_t v11 = 0x8000800080008LL;
      goto LABEL_63;
    default:
      goto LABEL_93;
  }

_DWORD *sub_1CBBC(_DWORD *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 2976);
  if ((v2 & 0x70) != 0)
  {
    int v3 = 0;
  }

  else if ((v2 & 0xE) != 0)
  {
    int v3 = 0x10000000;
  }

  else
  {
    uint64_t v4 = *(void *)(a2 + 3512);
    if (v4 && *(_BYTE *)(v4 + 1456))
    {
      if (result[7]) {
        int v3 = 0x40000000;
      }
      else {
        int v3 = 0x20000000;
      }
    }

    else
    {
      int v3 = 805306368;
    }
  }

  result[11] = v3 | result[11] & 0xFFFFFFF;
  result[9] |= 0x3Fu;
  return result;
}

uint64_t sub_1CC2C(uint64_t result, _DWORD *a2, int a3, int a4, unsigned int a5, int a6, BOOL *a7)
{
  BOOL v8 = a3 == a4 || a5 == a6;
  *(void *)(result + 92) = 0x80000000LL;
  BOOL v9 = !(a5 | a3) && *a2 == a4 && a2[1] == a6;
  *a7 = v9;
  if (v8)
  {
    unsigned int v10 = *(_DWORD *)(result + 40) & 0xFFFEFFFF;
LABEL_18:
    *(_DWORD *)(result + 40) = v10 | 0x10000;
    *(void *)(result + 160) = a4 | (a3 << 16) | ((unint64_t)(a6 | (a5 << 16)) << 32);
    int v11 = 1;
    goto LABEL_19;
  }

  *(_DWORD *)(result + 92) = (a3 << 11) & 0x7FFF0000 | ((a4 - 1) >> 5) | 0x80000000;
  *(_DWORD *)(result + 96) = ((a6 - 1) >> 5) | (a5 >> 5 << 16);
  unsigned int v10 = *(_DWORD *)(result + 40) & 0xFFFEFFFF;
  *(_DWORD *)(result + 40) = v10;
  int v11 = 0;
  if ((a6 & 0x1F) != 0 && a2[1] > a6) {
    goto LABEL_18;
  }
LABEL_19:
  *(_DWORD *)(result + 16) = v11;
  *(_DWORD *)(result + 36) |= 0xC3Fu;
  return result;
}

uint64_t sub_1CD1C(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)(a3 + 13032);
  float v4 = roundf(fmaxf(v3, 1.0));
  if (!*(_BYTE *)(*(void *)a2 + 182LL)) {
    float v3 = v4;
  }
  float v5 = v3 * 16.0;
  float v6 = v5 + 0.5;
  if (v5 > 255.0) {
    float v6 = 255.5;
  }
  unsigned int v7 = v6;
  if (v5 < 0.0) {
    unsigned int v7 = 0;
  }
  if (byte_7C001) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  int v9 = !v8;
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFF00FF | ((v7 - v9) << 8);
  *(_DWORD *)(result + 36) |= 0x3Fu;
  return result;
}

uint64_t sub_1CDA8(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 144) = v2 & 0xFFFFFFBF;
  if (*(_WORD *)(a2 + 4)) {
    *(_DWORD *)(result + 144) = v2 | 0x40;
  }
  *(_DWORD *)(result + 36) |= 0x200000u;
  return result;
}

uint64_t sub_1CDD4(uint64_t result, uint64_t a2, char a3, _DWORD *a4)
{
  float v4 = (_DWORD *)result;
  *(_BYTE *)(result + 193) = 0;
  float v5 = (_BYTE *)(result + 193);
  *(_DWORD *)(result + 40) &= ~0x80000u;
  *a4 &= 0xFFFFFFF3;
  if ((*(_BYTE *)(result + 33) & 2) != 0)
  {
    int v7 = *(_DWORD *)(a2 + 13372);
    if ((v7 & 1) != 0)
    {
      if ((a3 & 0x70) == 0) {
        goto LABEL_13;
      }
      if ((v7 & 0x74) != 0)
      {
        int v9 = *(unsigned __int16 *)(a2 + 13256) == 2305;
        int v10 = *(_DWORD *)(result + 28);
        BOOL v11 = v10 == v9;
        BOOL v12 = v10 != v9;
        int v13 = v11;
        *(_DWORD *)(result + 40) |= 0x80000u;
        int v14 = 2 * v12;
        sub_1E0D0(a2, 2 * v13, (_DWORD *)(result + 44), (_DWORD *)(result + 48), a4, v5);
        uint64_t v15 = a2;
        unsigned int v16 = v14;
        int v17 = v4 + 13;
        unsigned int v18 = v4 + 14;
        goto LABEL_14;
      }

      if (*(_BYTE *)(a2 + 13262) && *(_WORD *)(a2 + 13258) == 1029)
      {
        int v17 = (_DWORD *)(result + 44);
        unsigned int v18 = (_DWORD *)(result + 48);
        uint64_t v15 = a2;
        unsigned int v16 = 2;
      }

      else
      {
LABEL_13:
        int v17 = (_DWORD *)(result + 44);
        unsigned int v18 = (_DWORD *)(result + 48);
        uint64_t v15 = a2;
        unsigned int v16 = 0;
      }

_DWORD *sub_1CF1C(_DWORD *result, uint64_t a2)
{
  unsigned int v2 = result[36] & 0xFFFFFFFC;
  result[36] = v2;
  if (*(_BYTE *)(a2 + 13262))
  {
    int v3 = *(unsigned __int16 *)(a2 + 13258);
    if (v3 != 1032)
    {
      if (result[7] == ((v3 != 1028) ^ (*(_WORD *)(a2 + 13256) == 2305))) {
        int v4 = 2;
      }
      else {
        int v4 = 1;
      }
      result[36] = v4 | v2;
    }
  }

  result[9] |= 0x200000u;
  return result;
}

_DWORD *sub_1CF84(_DWORD *result, uint64_t a2, uint64_t a3, char a4)
{
  int v4 = result[10];
  result[10] = v4 & 0xFFFDFFFF;
  if ((a4 & 0x70) != 0 && *(_BYTE *)(a3 + 13265)
    || (a4 & 1) != 0 && *(_BYTE *)(a3 + 13263)
    || (a4 & 0xE) != 0 && *(_BYTE *)(a3 + 13264))
  {
    result[10] = v4 | 0x20000;
    int v5 = *(_DWORD *)(a3 + 13244);
    result[42] = *(_DWORD *)(a3 + 13248);
    result[43] = v5;
    result[44] = 0;
    result[5] = 1;
  }

  result[9] |= 0x3Fu;
  return result;
}

uint64_t sub_1CFF4(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[32] = 0;
  int v5 = *(int **)(a3 + 1440);
  float v6 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v7 = *v6;
  if (*(_BYTE *)(a4 + 52))
  {
    int v8 = 1;
  }

  else
  {
    if (v7 >= 0x15)
    {
      if (v6[10]) {
        int v8 = *((unsigned __int8 *)v5 + v6[10]) != 0;
      }
      else {
        int v8 = 0;
      }
      goto LABEL_8;
    }

    int v8 = 0;
  }

  if (v7 < 0xB)
  {
    LODWORD(v9) = 0;
    goto LABEL_11;
  }

float sub_1D24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 6944);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 6960);
  float v3 = *(float *)(a2 + 6948);
  if (*(_DWORD *)(a1 + 28))
  {
    *(float *)(a1 + 112) = -v3;
    float v4 = (float)*(int *)(a3 + 4) - *(float *)(a2 + 6964);
  }

  else
  {
    *(float *)(a1 + 112) = v3;
    float v4 = *(float *)(a2 + 6964);
  }

  *(float *)(a1 + 108) = v4;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 6952);
  float result = *(float *)(a2 + 6968);
  *(float *)(a1 + 116) = result;
  *(_DWORD *)(a1 + 36) |= 0xC00u;
  return result;
}

uint64_t sub_1D2B0(uint64_t result, uint64_t a2, int *a3)
{
  *(_BYTE *)(result + 192) = 0;
  if (*(_BYTE *)(a2 + 12932)) {
    int v3 = *(_BYTE *)(result + 33) & 1;
  }
  else {
    int v3 = 0;
  }
  unsigned int v4 = *(_DWORD *)(result + 44) & 0xFFD1FFFF;
  int v5 = v3 & ((unsigned __int16)(*(_WORD *)(a2 + 13070) & 0x100) >> 8);
  if (v3)
  {
    switch(*(_WORD *)(a2 + 12928))
    {
      case 0x200:
        int v6 = 0;
        char v7 = 1;
        break;
      case 0x201:
        char v7 = 0;
        int v6 = 0x20000;
        break;
      case 0x202:
        char v7 = 0;
        int v6 = 0x40000;
        break;
      case 0x203:
        char v7 = 0;
        int v6 = 393216;
        break;
      case 0x204:
        char v7 = 0;
        int v6 = 0x80000;
        break;
      case 0x205:
        char v7 = 0;
        *(_BYTE *)(result + 192) = 1;
        int v6 = 655360;
        break;
      case 0x206:
        char v7 = 0;
        int v6 = 786432;
        break;
      case 0x207:
        goto LABEL_7;
      default:
        char v7 = 0;
        goto LABEL_8;
    }
  }

  else
  {
LABEL_7:
    char v7 = 1;
LABEL_8:
    int v6 = 917504;
  }

  if (v5) {
    int v8 = 0;
  }
  else {
    int v8 = 0x200000;
  }
  *(_DWORD *)(result + 44) = v8 | v6 | v4;
  int v9 = *a3;
  unsigned int v10 = *a3 & 0xFFFFFFFC;
  *a3 = v10;
  if (v5)
  {
    int v11 = v9 | 3;
LABEL_16:
    *a3 = v11;
    goto LABEL_17;
  }

  if ((v7 & 1) == 0)
  {
    int v11 = v10 | 1;
    goto LABEL_16;
  }

uint64_t sub_1D3D0(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(result + 42) << 16;
  *(_DWORD *)(result + 40) = v2;
  if (*(_DWORD *)(a2 + 4464) == -1)
  {
    int v3 = 0;
  }

  else
  {
    *(_DWORD *)(result + 40) = v2 | 0xC000;
    int v3 = 1;
  }

  *(_DWORD *)(result + 24) = v3;
  *(_DWORD *)(result + 36) |= 0x3Fu;
  return result;
}

_DWORD *sub_1D410(_DWORD *result, uint64_t a2, char a3, unsigned int *a4)
{
  unsigned int v4 = *(_DWORD *)(a2 + 1460);
  int v5 = result[11];
  result[10] = (*(_DWORD *)(a2 + 1468) << 21) | (*(_DWORD *)(a2 + 1464) << 22) | result[10] & 0xFC1FFFFF;
  unsigned int v6 = v5 & 0xF8FFFFFF;
  if (v4 <= 6)
  {
    if (((1 << v4) & 0x1A) != 0)
    {
      result[11] = v6 | (v4 << 24);
      unsigned int v8 = *a4;
      goto LABEL_6;
    }

    if (((1 << v4) & 0x60) != 0)
    {
      int v7 = 83886080;
LABEL_9:
      result[11] = v6 | v7;
      unsigned int v8 = *a4;
LABEL_10:
      unsigned int v9 = v8 | 0x20;
      goto LABEL_11;
    }

    if (v4 == 2)
    {
      int v7 = 0x2000000;
      goto LABEL_9;
    }
  }

  result[11] = v6;
  unsigned int v8 = *a4;
  if (v4 - 5 < 2) {
    goto LABEL_10;
  }
LABEL_6:
  unsigned int v9 = v8 & 0xFFFFFFDF;
LABEL_11:
  *a4 = v9;
  uint64_t v10 = *(void *)(*(void *)(a2 + 64) + 8LL);
  uint64_t v11 = *(void *)(*(void *)(a2 + 1568) + 8LL);
  uint64_t v12 = *(void *)(v10 + 24);
  uint64_t v13 = *(void *)(v10 + 80);
  uint64_t v14 = *(int **)(a2 + 1448);
  int v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 5u && (uint64_t v16 = v15[2]) != 0) {
    unsigned int v17 = (*(int *)((char *)v14 + v16) + 15) & 0xFFFFFFF0;
  }
  else {
    unsigned int v17 = 0;
  }
  unsigned int v18 = ((*(_DWORD *)(v11 + 48) << 14) + 0x4000) & 0xFFFF8000 | ((*(_DWORD *)(a2 + 48) << 19) + 7864320) & 0xFF800000;
  result[18] = (((_DWORD)v13 << 12) + 49152) & 0xFFFF0000 | (((_DWORD)v12 << 19) + 6291456) & 0xFF800000 | ((*(void *)(v11 + 24) << 6) + 768) & 0xFFFFFC00 | v17;
  result[19] = v18;
  if ((a3 & 0xF) != 0 || v4 <= 6 && ((0x74u >> v4) & 1) != 0 || *(_BYTE *)(a2 + 1458)) {
    result[19] = v18 | 0x4000;
  }
  result[9] |= 0x3FFu;
  return result;
}

uint64_t sub_1D594(uint64_t result)
{
  if ((*(_BYTE *)(result + 36) & 2) != 0) {
    *(_DWORD *)(result + 52) = *(_DWORD *)(result + 44) & 0xFFFFFF00 | *(unsigned __int8 *)(result + 52);
  }
  return result;
}

uint64_t sub_1D5B4(uint64_t result, uint64_t a2)
{
  return result;
}

BOOL sub_1D5E4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 36) != 0;
}

uint64_t sub_1D5FC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20)) {
    return 12LL;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1D610(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 168);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(result + 176);
  *(void *)a3 = v3;
  *(_WORD *)(result + 62) = a2 / 0xC;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_1D63C(uint64_t a1)
{
  return 8LL * (*(_DWORD *)(a1 + 16) != 0);
}

uint64_t sub_1D650(uint64_t result, void *a2)
{
  *a2 = *(void *)(result + 160);
  return result;
}

uint64_t sub_1D65C(uint64_t result, unsigned int a2)
{
  *(_WORD *)(result + 60) = a2 >> 3;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1D66C()
{
  return 1LL;
}

uint64_t sub_1D674(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1D67C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 4468) | *(_DWORD *)(result + 40) & 0xFFFFC000;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1D698(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36);
  if ((v1 & 0x3F) != 0) {
    uint64_t v2 = (4LL * (v1 != 0)) | 0x18;
  }
  else {
    uint64_t v2 = 4LL * (v1 != 0);
  }
  if ((v1 & 0x3C0) != 0) {
    v2 += 28LL;
  }
  if ((v1 & 0xC00) != 0) {
    v2 += 32LL;
  }
  if ((v1 & 0x1E0000) != 0) {
    v2 += 16LL;
  }
  if ((v1 & 0x200000) != 0) {
    v2 += 4LL;
  }
  if ((v1 & 0xC00000) != 0) {
    v2 += 12LL;
  }
  if ((v1 & 0x10000) != 0) {
    return v2 + 4;
  }
  else {
    return v2;
  }
}

uint64_t sub_1D704(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 36);
  if ((v2 & 0x3F) != 0) {
    v2 |= 0x3Fu;
  }
  if ((v2 & 0x3C0) != 0) {
    v2 |= 0x3C0u;
  }
  if ((v2 & 0xC00) != 0) {
    v2 |= 0xC00u;
  }
  int v3 = v2 | 0x1E0000;
  if ((v2 & 0x1E0000) == 0) {
    int v3 = v2;
  }
  *(_DWORD *)a2 = v3;
  uint64_t v4 = a2 + 4;
  if ((v3 & 0x3F) != 0)
  {
    __int128 v5 = *(_OWORD *)(result + 40);
    *(void *)(a2 + 20) = *(void *)(result + 56);
    *(_OWORD *)uint64_t v4 = v5;
    uint64_t v4 = a2 + 28;
  }

  if ((v3 & 0x3C0) != 0)
  {
    __int128 v6 = *(_OWORD *)(result + 64);
    *(_OWORD *)(v4 + 12) = *(_OWORD *)(result + 76);
    *(_OWORD *)uint64_t v4 = v6;
    v4 += 28LL;
  }

  if ((v3 & 0xC00) != 0)
  {
    __int128 v7 = *(_OWORD *)(result + 108);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(result + 92);
    *(_OWORD *)(v4 + 16) = v7;
    v4 += 32LL;
  }

  if ((v3 & 0x10000) != 0)
  {
    *(_DWORD *)uint64_t v4 = *(_DWORD *)(result + 124);
    v4 += 4LL;
  }

  if ((v3 & 0x1E0000) != 0)
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(result + 128);
    v4 += 16LL;
  }

  if ((v3 & 0x200000) != 0)
  {
    *(_DWORD *)uint64_t v4 = *(_DWORD *)(result + 144);
    v4 += 4LL;
  }

  if ((v3 & 0xC00000) != 0)
  {
    uint64_t v8 = *(void *)(result + 148);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(result + 156);
    *(void *)uint64_t v4 = v8;
  }

  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1D7D0()
{
  return 28LL;
}

uint64_t sub_1D7D8()
{
  return 0LL;
}

_DWORD *sub_1D7E0(_DWORD *a1, _DWORD *a2)
{
  *a2 = a1[16];
  a2[1] = a1[17];
  a2[2] = a1[18];
  a2[3] = a1[20];
  a2[4] = a1[21];
  a2[5] = a1[22];
  int v2 = a1[19];
  float result = a2 + 7;
  a2[6] = v2;
  return result;
}

uint64_t sub_1D820(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if ((v1 & 0x80000) != 0) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  int v3 = v2 << ((v1 & 0x40000) != 0);
  if ((v1 & 0x30000) != 0) {
    int v4 = 2;
  }
  else {
    int v4 = 1;
  }
  return (4 * (v4 + v3));
}

_DWORD *sub_1D84C(_DWORD *a1, _DWORD *a2)
{
  int v2 = a1[10];
  int v3 = v2 & 0x30000;
  *a2 = v2;
  a2[1] = a1[11];
  if ((v2 & 0x40000) != 0)
  {
    a2[2] = a1[12];
    if ((v2 & 0x80000) == 0)
    {
      int v4 = a2 + 3;
      goto LABEL_8;
    }

    int v4 = a2 + 4;
    a2[3] = a1[13];
    __int128 v5 = a1 + 14;
    uint64_t v6 = 5LL;
  }

  else
  {
    int v4 = a2 + 2;
    if ((v2 & 0x80000) == 0) {
      goto LABEL_8;
    }
    __int128 v5 = a1 + 13;
    uint64_t v6 = 3LL;
  }

  *int v4 = *v5;
  int v4 = &a2[v6];
LABEL_8:
  if (v3) {
    *v4++ = a1[15];
  }
  return v4;
}

uint64_t sub_1D8C0()
{
  return 1LL;
}

uint64_t sub_1D8C8()
{
  return 12LL;
}

uint64_t sub_1D8D0(uint64_t result, _DWORD *a2)
{
  *a2 = 0x2000000;
  a2[1] = *(_DWORD *)(result + 180);
  a2[2] = *(_DWORD *)(result + 184);
  return result;
}

_DWORD *sub_1D8EC(_DWORD *result)
{
  int v1 = result[10];
  result[9] |= 0x3F0FFFu;
  result[5] = 1;
  if ((v1 & 0x10000) == 0)
  {
    if ((v1 & 0x8000) == 0) {
      return result;
    }
LABEL_5:
    result[6] = 1;
    return result;
  }

  result[4] = 1;
  if ((v1 & 0x8000) != 0) {
    goto LABEL_5;
  }
  return result;
}

double sub_1D928( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  int v7 = *(_DWORD *)(a6 + 136);
  int v8 = *(_DWORD *)(a6 + 140);
  unsigned int v9 = *(int **)(a6 + 80);
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 5u && (uint64_t v11 = v10[2]) != 0) {
    unsigned int v12 = (*(int *)((char *)v9 + v11) + 15) & 0xFFFFFFF0;
  }
  else {
    unsigned int v12 = 0;
  }
  unsigned int v13 = *(_DWORD *)(a6 + 48);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_DWORD *)(a1 + 40) = ((a3 << 8) & 0x40000 | (((a3 >> 14) & 1) << 21) | (v8 << 22)) ^ 0x200000;
  unsigned int v14 = v7 - 1;
  if (v14 > 5) {
    int v15 = 0;
  }
  else {
    int v15 = dword_70BA0[v14];
  }
  int v16 = *(unsigned __int8 *)(a2 + 3164) | 0xE92FF00;
  *(_DWORD *)(a1 + 44) = ((a3 << 13) & 0x200000 | v15) ^ 0x2E0000 | *(_DWORD *)(a2 + 3160);
  *(_DWORD *)(a1 + 48) = v16;
  *(int8x8_t *)(a1 + 72) = vorr_s8( vorr_s8( vand_s8( (int8x8_t)vadd_s32( (int32x2_t)vshl_u32( (uint32x2_t)__PAIR64__(a5, a7),  (uint32x2_t)0xE00000006LL),  (int32x2_t)0x400000000300LL),  (int8x8_t)0xFFFF8000FFFFFC00LL),  (int8x8_t)(v12 | 0x100000000LL)),  (int8x8_t)(*(void *)&vadd_s32( (int32x2_t)vshl_u32( (uint32x2_t)__PAIR64__(v13, a4),  (uint32x2_t)0x1300000015LL),  (int32x2_t)0x78000000600000LL) & 0xFF87FFFFFF87FFFFLL));
  *(void *)(a1 + 124) = 0x40100001E3CE508LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)&double result = 0x100000060LL;
  *(void *)(a1 + 144) = 0x100000060LL;
  *(_DWORD *)(a1 + 36) = 15074403;
  *(_DWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  return result;
}

double sub_1DA88(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(a1 + 152) = 0LL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  int v4 = *(_DWORD *)(a3 + 136);
  int v5 = *(_DWORD *)(a3 + 140) << 22;
  *(_DWORD *)(a1 + 36) = 2491491;
  *(_DWORD *)(a1 + 40) = v5;
  unsigned int v6 = v4 - 1;
  if (v6 > 5) {
    int v7 = 3014656;
  }
  else {
    int v7 = dword_70BB8[v6];
  }
  uint64_t v8 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 12900) | v7;
  *(_DWORD *)(a1 + 48) = 244514560;
  *(_DWORD *)(a1 + 48) = *(unsigned __int8 *)(v8 + 13052) | 0xE92FF00;
  unsigned int v9 = *(int **)(a3 + 80);
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 5u && (uint64_t v11 = v10[2]) != 0) {
    __int32 v12 = *(int *)((char *)v9 + v11);
  }
  else {
    __int32 v12 = 0;
  }
  v13.i32[0] = v12;
  v13.i32[1] = *(_DWORD *)(a3 + 48) << 19;
  *(int8x8_t *)(a1 + 72) = vorr_s8( vand_s8( (int8x8_t)vadd_s32(v13, (int32x2_t)0x7800000000000FLL),  (int8x8_t)0xFF800000FFFFFFF0LL),  (int8x8_t)(((*(void *)(*(void *)(*(void *)(a3 + 64) + 8LL) + 24LL) << 19)
  *(void *)(a1 + 124) = 0x40100001E3CE508LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)&double result = 0x100000060LL;
  *(void *)(a1 + 144) = 0x100000060LL;
  *(_DWORD *)(a1 + 36) = 15074403;
  *(void *)(a1 + 180) = (((*(unsigned __int16 *)(**(void **)(a2 + 56) + 180LL) + 31) >> 5) - 1) | ((((*(unsigned __int16 *)(**(void **)(a2 + 56) + 178LL) << 13) + 253952) & 0x3FFC0000) - 0x40000);
  return result;
}

double sub_1DC04(uint64_t a1)
{
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_DWORD *)(a1 + 76) = 1;
  *(void *)(a1 + 124) = 0x40100001E3CE508LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 144) = 0x100000060LL;
  double result = 1.60333469e-290;
  *(_OWORD *)(a1 + 36) = xmmword_70250;
  *(_DWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  return result;
}

uint64_t sub_1DC58(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9 = *(int **)(a3 + 72);
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 < 0xBu)
  {
    LODWORD(v11) = 0;
  }

  else
  {
    uint64_t v11 = v10[5];
    if (v11) {
      LODWORD(v11) = *(int *)((char *)v9 + v11) << 24;
    }
  }

  int v12 = a1[32] | v11;
  a1[32] = v12;
  int32x2_t v13 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v13 < 9u)
  {
    LODWORD(v14) = 0;
  }

  else
  {
    uint64_t v14 = v13[4];
    if (v14) {
      LODWORD(v14) = (*((_BYTE *)v9 + v14) != 0) << 18;
    }
  }

  int v15 = v14 | v12;
  a1[32] = v15;
  int v16 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v16 < 7u)
  {
    LODWORD(v17) = 0;
  }

  else
  {
    uint64_t v17 = v16[3];
    if (v17) {
      LODWORD(v17) = (*((_BYTE *)v9 + v17) != 0) << 16;
    }
  }

  a1[32] = v17 | v15;
  int v18 = a1[33] | sub_F9D0(v9);
  a1[33] = v18;
  unsigned int v19 = v18 | (sub_FA2C(v9) << 8);
  a1[33] = v19;
  a1[33] = v19 | (sub_FA88(v9) << 16);
  unsigned int v20 = a1[34] | (sub_FAE4(v9) << 8);
  a1[34] = v20;
  unsigned int v21 = v20 | (sub_FB40(v9) << 16);
  a1[34] = v21;
  a1[34] = v21 | (sub_FB9C(v9) << 24);
  uint64_t v25 = 0LL;
  int v22 = *(_DWORD *)(a2 + 248);
  int v26 = *(_DWORD *)(a2 + 244);
  int v27 = v22;
  v24[0] = v26;
  v24[1] = v22;
  return sub_30FC8((uint64_t)a1, a5, (uint64_t)&v25, (uint64_t)v24);
}

uint64_t sub_1DDF8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 152) = 0LL;
  *(_OWORD *)(result + 136) = 0u;
  *(_OWORD *)(result + 120) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  int v3 = *(_DWORD *)(a3 + 148);
  int v4 = *(_DWORD *)(a3 + 152) << 22;
  *(_DWORD *)(result + 36) = 2493539;
  *(_DWORD *)(result + 40) = v4;
  unsigned int v5 = v3 - 1;
  if (v5 > 5) {
    int v6 = 3014656;
  }
  else {
    int v6 = dword_70BB8[v5];
  }
  *(_DWORD *)(result + 44) = v6;
  *(_DWORD *)(result + 48) = 244514560;
  uint64_t v7 = *(void *)(*(void *)(a3 + 64) + 8LL);
  int v8 = *(_DWORD *)(v7 + 24);
  int v9 = *(_DWORD *)(v7 + 80);
  unsigned int v10 = ((*(_DWORD *)(a3 + 48) << 19) + 7864320) & 0xFF800000;
  unsigned int v11 = ((v9 << 12) + 49152) & 0xFFFF0000 | ((v8 << 19) + 6291456) & 0xFF800000;
  *(_DWORD *)(result + 72) = v11;
  *(_DWORD *)(result + 76) = v10;
  uint64_t v12 = *(void *)(*(void *)(a3 + 136) + 8LL);
  uint64_t v13 = *(void *)(v12 + 24);
  int v14 = *(_DWORD *)(v12 + 48);
  int v15 = *(int **)(a3 + 80);
  int v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    unsigned int v18 = (*(int *)((char *)v15 + v17) + 15) & 0xFFFFFFF0;
  }
  else {
    unsigned int v18 = 0;
  }
  *(_DWORD *)(result + 72) = (((_DWORD)v13 << 6) + 768) & 0xFFFFFC00 | v18 | v11;
  *(_DWORD *)(result + 76) = v10 | ((v14 << 14) + 0x4000) & 0xFFFF8000;
  *(void *)(result + 128) = 0LL;
  *(_DWORD *)(result + 136) = 0;
  *(void *)(result + 152) = 0LL;
  *(void *)(result + 144) = 0x100000040LL;
  *(_DWORD *)(result + 36) = 15076451;
  *(void *)(result + 180) = 0LL;
  unsigned int v19 = (((*(_DWORD *)(a2 + 244) << 13) + 253952) & 0xFFFC0000) - 0x40000;
  *(_DWORD *)(result + 180) = v19;
  *(_DWORD *)(result + 180) = (((*(_DWORD *)(a2 + 248) + 31) >> 5) - 1) | v19;
  return result;
}

_DWORD *sub_1DF60(_DWORD *result, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  if (a6) {
    int v7 = 2;
  }
  else {
    int v7 = 0;
  }
  result[37] = v7 | a7 ^ 1;
  result[38] = (((2 * a3) & 0xFFFFFFF8) + 30) & 0xFFFFFFE0 | ((unint64_t)(4 * a4 + 7) >> 3);
  result[39] = a2 & 0xFFFFFFF0;
  result[9] |= 0xC00000u;
  return result;
}

uint64_t sub_1DFB0()
{
  return 12LL;
}

void sub_1DFB8(uint64_t a1, unsigned int *a2, int a3, int a4)
{
  *a2 = (2 * a3 + 30) & 0xFFFFF7E1 | 0x800;
  a2[1] = (a4 + 15) & 0xFFFFFFF0;
}

uint64_t sub_1DFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, int a6)
{
  uint64_t v12 = *(_DWORD **)a3;
  size_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336LL))(a1);
  bzero(v12, v13);
  int v14 = v12[2];
  unsigned int v15 = (((2 * a6) & 0xFFFFFFF8) + 30) & 0xFFFFFFE1 | v12[1] | 0x800;
  *uint64_t v12 = 0x800000;
  v12[1] = v15;
  v12[2] = v14 | a5 & 0xFFFFFFF0;
  uint64_t v16 = *(void *)(a2 + 3960);
  uint64_t v17 = *a4;
  uint64_t v18 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 336LL))(a1) >> 2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v16 + 72LL))( v16,  v17,  v18,  *(void *)(a3 + 8));
}

uint64_t sub_1E09C(uint64_t result)
{
  *(_DWORD *)(result + 36) |= 0x3C0u;
  return result;
}

_DWORD *sub_1E0AC(_DWORD *result, int a2, int a3, int a4, int a5, int a6)
{
  result[16] = a2 & 0xFFFFFFF0;
  result[17] = a3 & 0xFFFFFFF0;
  result[20] = a6 & 0xFFFFFFF0;
  result[21] = a4 & 0xFFFFFFF0;
  result[22] = a5 & 0xFFFFFFF0;
  return result;
}

uint64_t sub_1E0D0(uint64_t result, unsigned int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _BYTE *a6)
{
  uint64_t v9 = result + 13324;
  *a3 &= 0xFFFFFF00;
  int v10 = *(unsigned __int16 *)(result + 13324 + 16LL * a2 + 10);
  if (v10 != 7680 || *(_WORD *)(v9 + 16LL * a2 + 12) != 7680) {
    *a6 = 1;
  }
  int v11 = 0;
  int v12 = 0;
  uint64_t v13 = v9 + 16LL * a2;
  int v14 = (unsigned __int16 *)(v13 + 14);
  unsigned int v15 = (unsigned __int16 *)(v13 + 12);
  do
  {
    switch(v11)
    {
      case 2:
        int v6 = *v14;
        char v7 = 16;
        break;
      case 1:
        int v6 = *v15;
        char v7 = 19;
        break;
      case 0:
        int v6 = v10;
        char v7 = 22;
        break;
    }

    if (v6 <= 7679)
    {
      if (v6 == 5386) {
        int v8 = 5;
      }
      if (!v6) {
        int v8 = 1;
      }
    }

    else
    {
      switch(v6)
      {
        case 7680:
          int v8 = 0;
          break;
        case 7681:
          int v8 = 2;
          break;
        case 7682:
          int v8 = 3;
          break;
        case 7683:
          int v8 = 4;
          break;
        default:
          if (v6 == 34056) {
            int v8 = 7;
          }
          if (v6 == 34055) {
            int v8 = 6;
          }
          break;
      }
    }

    v12 |= v8 << v7;
    ++v11;
  }

  while (v11 != 3);
  switch(*(_WORD *)(v9 + 16LL * a2 + 8))
  {
    case 0x200:
      int v16 = 0;
      goto LABEL_38;
    case 0x201:
      char v17 = 0;
      int v16 = 0x2000000;
      break;
    case 0x202:
      char v17 = 0;
      int v16 = 0x4000000;
      break;
    case 0x203:
      char v17 = 0;
      int v16 = 100663296;
      break;
    case 0x204:
      char v17 = 0;
      int v16 = 0x8000000;
      break;
    case 0x205:
      char v17 = 0;
      int v16 = 167772160;
      break;
    case 0x206:
      char v17 = 0;
      int v16 = 201326592;
      break;
    case 0x207:
      int v16 = 234881024;
LABEL_38:
      char v17 = 1;
      break;
    default:
      char v17 = 0;
      int v16 = 0;
      break;
  }

  *a4 = v12 | v16;
  if ((v12 & 0x1FF0000) == 0)
  {
    if ((v17 & 1) != 0) {
      goto LABEL_48;
    }
    int v18 = 4;
LABEL_47:
    *a5 |= v18;
    goto LABEL_48;
  }

  if (*(_BYTE *)(result + 4LL * a2 + 13052))
  {
    char v17 = 0;
    int v18 = 12;
  }

  else
  {
    int v18 = 4;
  }

  if ((v17 & 1) == 0) {
    goto LABEL_47;
  }
LABEL_48:
  uint64_t v19 = v9 + 16LL * a2;
  *a3 |= *(unsigned __int8 *)(v19 + 4);
  LODWORD(v19) = (*(_DWORD *)v19 << 8) | *a4;
  *a4 = v19;
  *a4 = *(unsigned __int8 *)(result + 4LL * a2 + 13052) | v19;
  return result;
}

uint64_t sub_1E34C(uint64_t result, int a2, int a3, int a4)
{
  unsigned int v4 = a3 + 5;
  if (a4) {
    unsigned int v4 = a3 + 1;
  }
  if (v4 > 0x20)
  {
    if (v4 > 0x30)
    {
      if (v4 > 0x40)
      {
        int v5 = 0x40000000;
        int v6 = 1920;
      }

      else
      {
        int v5 = (dword_7C444 < 0x120) << 30;
        int v6 = 3968;
      }
    }

    else
    {
      int v5 = (dword_7C444 < 0x120) << 30;
      int v6 = 8064;
    }
  }

  else
  {
    int v5 = 0;
    else {
      int v6 = 8064;
    }
  }

  if (a4) {
    int v7 = 64;
  }
  else {
    int v7 = 0;
  }
  unsigned int v8 = v6 | v7 | *(_DWORD *)(result + 12) & 0xFFFF803F;
  unsigned int v9 = *(_DWORD *)(result + 32) & 0x83FE07FF;
  *(_DWORD *)(result + 28) = a3;
  *(_DWORD *)(result + 32) = ((a2 << 9) + 1920) & 0xFFFFF800 | v5 | v9;
  *(_DWORD *)(result + 12) = v8 | 0x4000000;
  *(_BYTE *)(result + 8) = 1;
  return result;
}

BOOL sub_1E430(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  uint64_t v4 = *(void *)(a2 + 24);
  BOOL v5 = a3 == 5375 || *(_BYTE *)(v4 + 15444) == 0;
  int v6 = !v5;
  int v7 = (v3 >> 5) & 1;
  unsigned int v8 = *(_DWORD *)(a1 + 12);
  BOOL v5 = v7 == v6;
  BOOL v9 = v7 != v6;
  if (!v5)
  {
    if (v6) {
      int v10 = 32;
    }
    else {
      int v10 = 0;
    }
    unsigned int v8 = v10 | v3 & 0xFFFFFFDF;
    *(_DWORD *)(a1 + 12) = v8;
    *(_BYTE *)(a1 + 8) = 1;
  }

  if (v6)
  {
    int v11 = *(_DWORD *)(v4 + 15448);
    int v12 = (unsigned __int16)v11;
    if (a3 == 5121) {
      int v11 = v11;
    }
    if (a3 == 5123) {
      int v11 = v12;
    }
    if ((v3 & 0x20) == 0 || v11 != *(_DWORD *)(a1 + 16))
    {
      *(_DWORD *)(a1 + 12) = v8 | 0x10000000;
      *(_DWORD *)(a1 + 16) = v11;
      BOOL v9 = 1LL;
      *(_BYTE *)(a1 + 8) = 1;
    }
  }

  return v9;
}

uint64_t sub_1E4D4(uint64_t result)
{
  *(_DWORD *)(result + 12) |= 0x1C000000u;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t sub_1E4EC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 8)) {
    return 0LL;
  }
  int v1 = *(_DWORD *)(a1 + 12);
  uint64_t v2 = 8LL;
  if ((v1 & 0x10000000) == 0) {
    uint64_t v2 = 4LL;
  }
  if ((v1 & 0x8000000) != 0) {
    v2 += 4LL;
  }
  if ((v1 & 0x4000000) != 0) {
    return v2 + 12;
  }
  else {
    return v2;
  }
}

uint64_t sub_1E52C(uint64_t result, _DWORD *a2)
{
  int v2 = *(_DWORD *)(result + 12);
  *a2 = v2;
  unsigned int v3 = a2 + 1;
  if ((v2 & 0x10000000) == 0)
  {
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    *v3++ = *(_DWORD *)(result + 20);
    *(_DWORD *)(result + 12) &= ~0x8000000u;
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  unsigned int v3 = a2 + 2;
  a2[1] = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 12) &= ~0x10000000u;
  if ((v2 & 0x8000000) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v2 & 0x4000000) != 0)
  {
LABEL_4:
    uint64_t v4 = *(void *)(result + 24);
    v3[2] = *(_DWORD *)(result + 32);
    *(void *)unsigned int v3 = v4;
    *(_DWORD *)(result + 12) &= ~0x4000000u;
  }

void sub_1E5A0(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *a2 = HIDWORD(a3) | 0x80000000;
  a2[1] = a3 & 0xFFFFFFFC;
}

void sub_1E5B4(uint64_t a1, int *a2, int a3)
{
  if (a3) {
    int v3 = -536805376;
  }
  else {
    int v3 = -536870912;
  }
  *a2 = v3;
}

void sub_1E5CC(uint64_t a1, int *a2, int a3, uint64_t a4)
{
  *a2 = HIDWORD(a4) | (a3 << 8);
  a2[1] = a4 & 0xFFFFFFFC;
}

void sub_1E5E0(uint64_t a1, _DWORD *a2)
{
  *a2 = -1073741824;
}

uint64_t sub_1E5EC(uint64_t a1, unsigned int a2)
{
  if (a2 > 6) {
    return 0LL;
  }
  else {
    return dword_70BD0[a2];
  }
}

void sub_1E60C(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  if (a5) {
    int v6 = 234881024;
  }
  else {
    int v6 = 167772160;
  }
  *a2 = v6 | (a3 << 8) | 0x60000000;
  a2[1] = a4;
  if (a5)
  {
    a2[2] = a5 - 1;
    uint64_t v7 = 3LL;
  }

  else
  {
    uint64_t v7 = 2LL;
  }

  a2[v7] = a6;
}

void sub_1E648(uint64_t a1, int *a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  if (a8 == 5123) {
    int v8 = 503447552;
  }
  else {
    int v8 = 503316480;
  }
  if (a8 == 5125) {
    int v8 = 503578624;
  }
  *a2 = HIDWORD(a5) | (a3 << 8) | v8 | 0x60000000;
  a2[1] = a5;
  a2[2] = a4;
  a2[3] = a6 - 1;
  a2[4] = a7;
}

uint64_t sub_1E690(uint64_t result, int a2, int a3, int a4)
{
  *(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 32) = (32 * a2 + 56) & 0xFFFFFFC0 | ((a3 + 15) >> 4) | *(_DWORD *)(result + 32) & 0xFFFFF800;
  *(_DWORD *)(result + 12) |= 0x4000000u;
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t sub_1E6D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  *(_DWORD *)(result + 12) |= 0x8000000u;
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t sub_1E6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 12) = 1073741828LL;
  int v8 = *(int **)(a2 + 80);
  BOOL v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 5u && (uint64_t v10 = v9[2]) != 0) {
    uint64_t v11 = *(unsigned int *)((char *)v8 + v10);
  }
  else {
    uint64_t v11 = 0LL;
  }
  int v12 = *(int **)(a2 + 72);
  uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 0xBu && (uint64_t v14 = v13[5]) != 0) {
    uint64_t v15 = *(unsigned int *)((char *)v12 + v14);
  }
  else {
    uint64_t v15 = 0LL;
  }
  (**(void (***)(uint64_t, uint64_t, uint64_t, void))a1)(a1, v11, v15, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 112LL))(a1, 1LL, 32LL, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a4);
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t sub_1E7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 12) = 1073741828LL;
  uint64_t v9 = *(unsigned int *)(a3 + 40);
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t v11 = *(int **)(a2 + 80);
  int v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 5u && (uint64_t v13 = v12[2]) != 0) {
    uint64_t v14 = *(unsigned int *)((char *)v11 + v13);
  }
  else {
    uint64_t v14 = 0LL;
  }
  uint64_t v15 = *(int **)(a2 + 72);
  int v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 0xBu && (uint64_t v17 = v16[5]) != 0) {
    uint64_t v18 = *(unsigned int *)((char *)v15 + v17);
  }
  else {
    uint64_t v18 = 0LL;
  }
  (**(void (***)(uint64_t, uint64_t, uint64_t, void))a1)(a1, v14, v18, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 112LL))(a1, v9, v10, a4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a5);
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

void sub_1E8BC(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  *a2 = ((a4 << 13) + 129024) & 0xFFFE07FF | ((unint64_t)(a3 + 15) >> 4) | 0x20000000;
  a2[1] = (a6 + 15) & 0xFFFFFFF0;
  a2[2] = (a5 + 15) & 0xFFFFFFF0;
}

void sub_1E8F4(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  *a2 = ((a4 << 7) + 1920) & 0xFFFFF87F | ((unint64_t)(a3 + 15) >> 4) | 0x24000000;
  a2[1] = (a6 + 15) & 0xFFFFFFF0 | 5;
  a2[2] = (a5 + 15) & 0xFFFFFFF0;
}

void sub_1E934(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  *a2 = ((a4 << 7) + 1920) & 0xFFFFF87F | ((unint64_t)(a3 + 15) >> 4) | 0x21000000;
  a2[1] = (a6 + 15) & 0xFFFFFFF0 | 1;
  a2[2] = (a5 + 15) & 0xFFFFFFF0;
}

void sub_1E974(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  *a2 = ((a4 << 7) + 1920) & 0xFFFFF87F | ((unint64_t)(a3 + 15) >> 4) | 0x20000000;
  a2[1] = (a6 + 15) & 0xFFFFFFF0 | 5;
  a2[2] = (a5 + 15) & 0xFFFFFFF0;
}

void sub_1E9B0(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, int a5)
{
  *a2 = ((unint64_t)(a3 + 15) >> 4) | 0x24000040;
  a2[1] = (a5 + 15) & 0xFFFFFFF0 | 5;
  a2[2] = (a4 + 15) & 0xFFFFFFF0;
}

void sub_1E9E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(a3 + 8);
  a2[6] = *(void *)a3;
  a2[7] = v4;
  uint64_t v5 = *(unsigned int *)(a4 + 8);
  a2[9] = *(void *)a4;
  a2[10] = v5;
}

void sub_1EA00(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  *(void *)(a2 + 64) = *a3;
  *(void *)(a2 + 88) = *a4;
}

void sub_1EA14(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  *a2 = (a4 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  *a3 = (a5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
}

void sub_1EA30(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  *a2 = (8 * a4 + 56) & 0xFFFFFFC7 | ((unint64_t)(a3 + 15) >> 4) | 0x20000000;
  a2[1] = (a6 + 15) & 0xFFFFFFF0 | 5;
  a2[2] = (a5 + 15) & 0xFFFFFFF0;
}

void sub_1EA74(int8x8_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v6 = a5[1];
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v7 = *(void *)(v6 + 72);
  unint64_t v9 = v8 | v7;
  if (!(v8 | v7))
  {
    uint64_t v14 = 0LL;
    unint64_t v17 = 0LL;
    unint64_t v16 = 0LL;
    goto LABEL_39;
  }

  if (dword_7C424)
  {
    unsigned int v12 = *(unsigned __int16 *)(*a5 + 178LL);
    unsigned int v13 = *(unsigned __int16 *)(*a5 + 180LL);
    if (*(_DWORD *)(a3 + 4680) || *(_DWORD *)(a3 + 4684))
    {
      if (v12 <= 0x20) {
        unsigned int v12 = 32;
      }
      if (v13 <= 0x20) {
        unsigned int v13 = 32;
      }
    }

    uint64_t v14 = 139264LL;
    if (*(unsigned __int8 *)(**(void **)(a3 + 48) + 182LL) > 1u || v7 != 0)
    {
      unsigned int v12 = (v12 + 31) & 0x1FFE0;
      unsigned int v13 = (v13 + 31) & 0x1FFE0;
    }

    unint64_t v16 = (v12 - 1) | ((unint64_t)(v13 - 1) << 15);
  }

  else
  {
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    if (*(_DWORD *)(a3 + 4680) || *(_DWORD *)(a3 + 4684))
    {
      uint64_t v18 = (*(_DWORD *)(a5[4] + 32LL) >> 8) & 0xF;
      unsigned int v19 = *(_DWORD *)(a3 + 4688);
      unsigned int v20 = *(_DWORD *)(a3 + 4692);
    }

    else
    {
      uint64_t v18 = (*(_DWORD *)(a5[4] + 32LL) >> 8) & 0xF;
      unsigned int v19 = *(unsigned __int16 *)(*a5 + 178LL);
      unsigned int v20 = *(unsigned __int16 *)(*a5 + 180LL);
    }

    sub_1F164(v18, v19, v20, &v31, &v30, a1);
    unint64_t v16 = 0LL;
    uint64_t v14 = (8 * v31 - 8) | ((v30 << 27) - 0x8000000) | 0x22000;
  }

  if (v8)
  {
    if (*(_DWORD *)(a3 + 4680)) {
      uint64_t GPUVirtualAddress = IOAccelResourceGetGPUVirtualAddress(*(void *)(a3 + 4528));
    }
    else {
      uint64_t GPUVirtualAddress = sub_180B0( v8,  *(_DWORD *)(*a5 + 136LL),  *(_DWORD *)(*a5 + 132LL),  *(_DWORD *)(*a5 + 140LL),  0,  0,  0);
    }
    unint64_t v17 = GPUVirtualAddress & 0xFFFFFFFFFFFFFFFELL;
    xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL));
    unsigned int v22 = *(_DWORD *)(*(void *)(v8 + 392) + 92LL) - 1;
    unint64_t v23 = v17;
    if (v22 <= 2) {
      unint64_t v23 = qword_70E08[v22];
    }
    uint64_t v14 = v14 & 0xFFFFFFFFF87FFFFFLL | (v23 << 25) | (v23 << 23) & 0xFFFFFFFFF9FFFFFFLL | (*((_DWORD *)a5 + 115) != 0);
    if (v7) {
      goto LABEL_29;
    }
LABEL_24:
    unint64_t v9 = 0LL;
    goto LABEL_39;
  }

  unint64_t v17 = 0LL;
  if (!v7) {
    goto LABEL_24;
  }
LABEL_29:
  uint64_t v24 = *a5;
  unsigned int v25 = xmmword_7C350(*(unsigned __int16 *)(*(void *)v7 + 192LL));
  if (v8) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 1LL;
  }
  if (*(_DWORD *)(a3 + 4684))
  {
    uint64_t v27 = IOAccelResourceGetGPUVirtualAddress(*(void *)(a3 + 4568));
  }

  else
  {
    if ((xmmword_7C350(*(unsigned __int16 *)(*(void *)v7 + 192LL)) & 1) != 0)
    {
      uint64_t v28 = v7;
      unsigned int v29 = 1;
    }

    else
    {
      uint64_t v28 = v7;
      unsigned int v29 = 0;
    }

    uint64_t v27 = sub_180B0(v28, *(_DWORD *)(v24 + 152), *(_DWORD *)(v24 + 148), *(_DWORD *)(v24 + 156), v29, 0, 0);
  }

  unint64_t v9 = v27 & 0xFFFFFFFFFFFFFFF0LL | v26;
LABEL_39:
  a4[27] = v14;
  a4[28] = v16;
  a4[29] = v17;
  a4[33] = v17;
  a4[37] = v9;
  a4[41] = v9;
  a4[93] = v17;
  a4[95] = v9;
}

void sub_1ED14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  *(void *)(a3 + 216) = a5 | (unint64_t)(a4 << 58) | *(void *)(a3 + 216) & 0xF3FFFFFFFFFFFFFELL;
  *(void *)(a3 + 264) = a2 & 0xFFFFFFFFFFFFFFFELL;
}

uint64_t sub_1ED3C(uint64_t a1, void *a2)
{
  if ((a2[27] & 0x400000LL) != 0) {
    int v3 = "\tRGX_CR_ISP_ZLSCTL_FB_STOREEN_EN enabled";
  }
  else {
    int v3 = "\tRGX_CR_ISP_ZLSCTL_FB_STOREEN_EN disabled";
  }
  puts(v3);
  if ((a2[27] & 0x200000LL) != 0) {
    uint64_t v4 = "\tRGX_CR_ISP_ZLSCTL_FB_LOADEN_EN enabled";
  }
  else {
    uint64_t v4 = "\tRGX_CR_ISP_ZLSCTL_FB_LOADEN_EN disabled";
  }
  puts(v4);
  if ((a2[27] & 0x100000LL) != 0) {
    uint64_t v5 = "\tRGX_CR_ISP_ZLSCTL_MSTOREEN_EN enabled";
  }
  else {
    uint64_t v5 = "\tRGX_CR_ISP_ZLSCTL_MSTOREEN_EN disabled";
  }
  puts(v5);
  if ((a2[27] & 0x40000LL) != 0) {
    uint64_t v6 = "\tRGX_CR_ISP_ZLSCTL_SSTOREEN_EN enabled";
  }
  else {
    uint64_t v6 = "\tRGX_CR_ISP_ZLSCTL_SSTOREEN_EN disabled";
  }
  puts(v6);
  if ((a2[27] & 0x80000LL) != 0) {
    uint64_t v7 = "\tRGX_CR_ISP_ZLSCTL_ZSTOREEN_EN enabled";
  }
  else {
    uint64_t v7 = "\tRGX_CR_ISP_ZLSCTL_ZSTOREEN_EN disabled";
  }
  puts(v7);
  if ((a2[27] & 0x20000LL) != 0) {
    uint64_t v8 = "\tRGX_CR_ISP_ZLSCTL_STORETWIDDLED_EN enabled";
  }
  else {
    uint64_t v8 = "\tRGX_CR_ISP_ZLSCTL_STORETWIDDLED_EN disabled";
  }
  puts(v8);
  if ((a2[27] & 0x10000LL) != 0) {
    unint64_t v9 = "\tRGX_CR_ISP_ZLSCTL_MLOADEN_EN enabled";
  }
  else {
    unint64_t v9 = "\tRGX_CR_ISP_ZLSCTL_MLOADEN_EN disabled";
  }
  puts(v9);
  if ((a2[27] & 0x8000LL) != 0) {
    uint64_t v10 = "\tRGX_CR_ISP_ZLSCTL_ZLOADEN_EN enabled";
  }
  else {
    uint64_t v10 = "\tRGX_CR_ISP_ZLSCTL_ZLOADEN_EN disabled";
  }
  puts(v10);
  if ((a2[27] & 0x4000LL) != 0) {
    uint64_t v11 = "\tRGX_CR_ISP_ZLSCTL_SLOADEN_EN enabled";
  }
  else {
    uint64_t v11 = "\tRGX_CR_ISP_ZLSCTL_SLOADEN_EN disabled";
  }
  puts(v11);
  if ((a2[27] & 0x2000LL) != 0) {
    unsigned int v12 = "\tRGX_CR_ISP_ZLSCTL_LOADTWIDDLED_EN enabled";
  }
  else {
    unsigned int v12 = "\tRGX_CR_ISP_ZLSCTL_LOADTWIDDLED_EN disabled";
  }
  puts(v12);
  if ((a2[27] & 4LL) != 0) {
    unsigned int v13 = "\tRGX_CR_ISP_ZLSCTL_FORCEZSTORE_EN enabled";
  }
  else {
    unsigned int v13 = "\tRGX_CR_ISP_ZLSCTL_FORCEZSTORE_EN disabled";
  }
  puts(v13);
  if ((a2[27] & 2LL) != 0) {
    uint64_t v14 = "\tRGX_CR_ISP_ZLSCTL_FORCEZLOAD_EN enabled";
  }
  else {
    uint64_t v14 = "\tRGX_CR_ISP_ZLSCTL_FORCEZLOAD_EN disabled";
  }
  puts(v14);
  if ((a2[27] & 1LL) != 0) {
    uint64_t v15 = "\tRGX_CR_ISP_ZLSCTL_ZONLYRENDER_EN enabled";
  }
  else {
    uint64_t v15 = "\tRGX_CR_ISP_ZLSCTL_ZONLYRENDER_EN disabled";
  }
  puts(v15);
  printf("Register: ISP_ZLS: %llx\n", a2[28]);
  printf("\tPIXELS_X: 0x%llx\n", a2[28] & 0x7FFFLL);
  printf("\tPIXELS_Y: 0x%llx\n", (a2[28] >> 15) & 0x7FFFLL);
  puts("Register: ISP_ZLOAD_BASE");
  printf("\tZLOAD_BASE_ADDR: 0x%llx\n", a2[29]);
  puts("Register: ISP_ZSTORE_BASE");
  printf("\tZSTORE_BASE_ADDR: 0x%llx\n", a2[33]);
  puts("Register: ISP_ZSTORE_BASE for SPM");
  printf("\tZSTORE_BASE_ADDR: 0x%llx\n", a2[93]);
  puts("Register: ISP_STENCIL_LOAD_BASE");
  printf("\tSTENCIL_LOAD_BASE_ADDR: 0x%llx\n", a2[37]);
  puts("Register: ISP_STENCIL_STORE_BASE");
  printf("\tSTENCIL_STORE_BASE_ADDR: 0x%llx\n", a2[41]);
  puts("Register: ISP_STENCIL_STORE_BASE for SPM");
  printf("\tSTENCIL_STORE_BASE_ADDR: 0x%llx\n", a2[95]);
  return printf("%s: ---- End ---- \n", "virtual void G4G::AGXHalZLSConfigGen1::print(AGX3DCommand &) const");
}

void sub_1F0C0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0xA) != 0) {
    uint64_t v3 = (2LL * ((a3 & 5) != 0)) | 4;
  }
  else {
    uint64_t v3 = 2LL * ((a3 & 5) != 0);
  }
  *(void *)(a2 + 216) |= v3 | (a3 << 18) & 0x80000 | ((a3 & 1) << 15) | (((a3 >> 2) & 1) << 14) & 0xFFFBFFFF | (((a3 >> 3) & 1) << 18);
}

uint64_t sub_1F114(uint64_t a1, unint64_t a2)
{
  return (a2 >> 15) & 1;
}

uint64_t sub_1F11C(uint64_t a1, unint64_t a2)
{
  return (a2 >> 14) & 1;
}

uint64_t sub_1F124(uint64_t a1, unint64_t a2)
{
  return (a2 >> 19) & 1;
}

uint64_t sub_1F12C(uint64_t a1, unint64_t a2)
{
  return (a2 >> 18) & 1;
}

void sub_1F134(uint64_t a1, void *a2)
{
  *a2 &= ~0x80000uLL;
}

void sub_1F144(uint64_t a1, void *a2)
{
  *a2 &= ~0x40000uLL;
}

void sub_1F154(uint64_t a1, void *a2)
{
  *a2 &= ~4uLL;
}

uint64_t sub_1F164(uint64_t result, unsigned int a2, unsigned int a3, void *a4, uint64_t *a5, int8x8_t a6)
{
  int v8 = a3;
  int v9 = a2;
  int v10 = result;
  a6.i32[0] = a2;
  int8x8_t v11 = vcnt_s8(a6);
  v11.i16[0] = vaddlv_u8((uint8x8_t)v11);
  if (v11.i32[0] != 1)
  {
    int v12 = 1 << -(char)__clz(a2 - 1);
    if (a2 >= 2) {
      int v9 = v12;
    }
    else {
      int v9 = 1;
    }
  }

  v11.i32[0] = a3;
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.i32[0] != 1)
  {
    int v14 = 1 << -(char)__clz(a3 - 1);
    if (a3 >= 2) {
      int v8 = v14;
    }
    else {
      int v8 = 1;
    }
  }

  if (result < 9 && ((0x117u >> result) & 1) != 0)
  {
    unsigned int v15 = dword_70D74[result];
    unsigned int v16 = dword_70D98[result];
    int v17 = dword_70DBC[result];
    int v18 = dword_70DE0[result];
  }

  else
  {
    printf("getZLSExtent: Unsupported number of samples: %d\n", result);
    uint64_t result = putchar(10);
    unsigned int v15 = 0;
    unsigned int v16 = 0;
    int v17 = 0;
    int v18 = 0;
  }

  *a4 = (v15 + v17 * v9 - 1) / v15;
  uint64_t v19 = (v16 + v18 * v8 - 1) / v16;
  *a5 = v19;
  return result;
}

uint64_t sub_1F2B0(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a5 + 56);
  int v10 = sub_25A80( a2,  6LL,  (*(void *)(a5 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)__dst,  0);
  uint64_t result = 0LL;
  if (v10)
  {
    memcpy(__dst[0], *(const void **)(a5 + 16), *(void *)(a5 + 24));
    uint64_t v12 = *(void *)(*(void *)(a5 + 64) + 8LL);
    uint64_t v14 = *(void *)(v12 + 16);
    uint64_t v13 = *(void *)(v12 + 24);
    uint64_t v15 = *(unsigned int *)(a5 + 88);
    v30[0] = 0LL;
    v30[1] = 0LL;
    uint64_t v28 = 0LL;
    unint64_t v29 = 0LL;
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    if (!v14 || (v16 = sub_25A80(a2, 6LL, v14, 16LL, 0LL, (uint64_t *)&v28, 0), uint64_t result = 0LL, v16))
    {
      if (!v13 || (v17 = sub_25A80(a2, 6LL, v13, 16LL, 0LL, (uint64_t *)&v26, 0), uint64_t result = 0LL, v17))
      {
        if (!(_DWORD)v15 || (v18 = sub_25A80(a2, 5LL, v15, 4LL, 0LL, v30, 0), uint64_t result = 0LL, v18))
        {
          sub_67420(a5);
          if (v14) {
            memcpy(v28, *(const void **)(v12 + 32), *(void *)(v12 + 16));
          }
          if (v13) {
            memcpy(v26, *(const void **)(v12 + 40), *(void *)(v12 + 24));
          }
          if (a4) {
            *a4 = v30[0];
          }
          uint64_t v19 = *(void *)(*(void *)(a2 + 2536) + 168LL);
          int v20 = sub_25A80(a2, 6LL, *(void *)(v19 + 8), 16LL, 0LL, (uint64_t *)v31, 0);
          uint64_t result = 0LL;
          if (v20)
          {
            unsigned int v21 = *(int **)(a5 + 40);
            unsigned int v22 = (unsigned __int16 *)((char *)v21 - *v21);
            if (*v22 >= 5u && (uint64_t v23 = v22[2]) != 0) {
              uint64_t v24 = *(unsigned int *)((char *)v21 + v23);
            }
            else {
              uint64_t v24 = 0LL;
            }
            (*(void (**)(uint64_t, void *, uint64_t, uint64_t, void))(*(void *)v19 + 16LL))( v19,  __dst[1],  v24,  v9,  0LL);
            unsigned int v25 = (char *)v31[0];
            memcpy(v31[0], *(const void **)(v19 + 40), *(void *)(v19 + 24));
            memcpy(&v25[*(void *)(v19 + 24)], *(const void **)(v19 + 32), *(void *)(v19 + 16));
            *a3 = (unint64_t)v31[1] & 0xFFFFFFFFFFFFFFF0LL | (v29 >> 4 << 36);
            a3[1] = 0LL;
            a3[2] = v27 & 0xFFFFFFFFFFFFFFF0LL;
            a3[3] = ((*(void *)(v12 + 24) << 19) + 6291456LL) & 0xFFFFFFFFFF800000LL | ((unint64_t)((*(_DWORD *)(v12 + 48) + 3) >> 2) << 46) | ((unint64_t)((*(_DWORD *)(a5 + 48) + 15) >> 4) << 55);
            return 1LL;
          }
        }
      }
    }
  }

  return result;
}

void *sub_1F540()
{
  uint64_t result = operator new(8uLL);
  *uint64_t result = &off_78E58;
  return result;
}

double sub_1F564()
{
  uint64_t v0 = (char *)operator new(0x30uLL);
  v0[8] = 1;
  *(void *)uint64_t v0 = off_78D70;
  *(void *)(v0 + 28) = 0LL;
  *(void *)(v0 + 20) = 0LL;
  *(void *)&double result = 1073741828LL;
  *(void *)(v0 + 12) = 1073741828LL;
  *((_DWORD *)v0 + 9) = 0;
  *((_DWORD *)v0 + 10) = 0;
  return result;
}

double sub_1F5A8()
{
  uint64_t v0 = operator new(0x10uLL);
  double result = 0.0078125;
  v0[1] = 0x3F80000000000300LL;
  void *v0 = off_78ED0;
  return result;
}

uint64_t sub_1F5D8(int a1, _DWORD *a2, int *a3, unsigned int *a4, _DWORD *a5)
{
  *a2 = 16;
  if (byte_7C00B) {
    int v5 = 24592;
  }
  else {
    int v5 = 12304;
  }
  *a3 = v5;
  unsigned int v6 = v5 + ((a1 + 15) & 0xFFFFFFF0);
  *a4 = v6;
  *a5 = v6 + 496;
  return v6 + 652;
}

double sub_1F61C()
{
  uint64_t v0 = (char *)operator new(0xC8uLL);
  *(void *)uint64_t v0 = off_78BE8;
  *(void *)(v0 + 36) = 0x400000020003FLL;
  double result = 0.0;
  *(_OWORD *)(v0 + 44) = 0u;
  *(_OWORD *)(v0 + 60) = 0u;
  *(_OWORD *)(v0 + 76) = 0u;
  *(_OWORD *)(v0 + 92) = 0u;
  *(_OWORD *)(v0 + 108) = 0u;
  *((_DWORD *)v0 + 31) = 507307272;
  *((void *)v0 + 16) = 0LL;
  *((void *)v0 + 17) = 0LL;
  *((_DWORD *)v0 + 36) = 1440;
  *(void *)(v0 + 148) = 0LL;
  *((_DWORD *)v0 + 39) = 0;
  *((_DWORD *)v0 + 47) = 0;
  *((_WORD *)v0 + 96) = 0;
  *((void *)v0 + 2) = 0LL;
  *((_DWORD *)v0 + 6) = 0;
  return result;
}

uint64_t sub_1F694(int a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v8 = 158LL;
  switch(a3)
  {
    case 37808:
      uint64_t v8 = 143LL;
      break;
    case 37809:
      uint64_t v8 = 144LL;
      break;
    case 37810:
      uint64_t v8 = 145LL;
      break;
    case 37811:
      uint64_t v8 = 146LL;
      break;
    case 37812:
      uint64_t v8 = 147LL;
      break;
    case 37813:
      uint64_t v8 = 149LL;
      break;
    case 37814:
      uint64_t v8 = 150LL;
      break;
    case 37815:
      uint64_t v8 = 151LL;
      break;
    case 37816:
      uint64_t v8 = 152LL;
      break;
    case 37817:
      uint64_t v8 = 153LL;
      break;
    case 37818:
      uint64_t v8 = 154LL;
      break;
    case 37819:
      uint64_t v8 = 155LL;
      break;
    case 37820:
      uint64_t v8 = 156LL;
      break;
    case 37821:
      uint64_t v8 = 157LL;
      break;
    case 37822:
    case 37823:
    case 37824:
    case 37825:
    case 37826:
    case 37827:
    case 37828:
    case 37829:
    case 37830:
    case 37831:
    case 37832:
    case 37833:
    case 37834:
    case 37835:
    case 37836:
    case 37837:
    case 37838:
    case 37839:
    case 37854:
    case 37855:
    case 37856:
    case 37857:
    case 37858:
    case 37859:
    case 37860:
    case 37861:
    case 37862:
    case 37863:
    case 37864:
    case 37865:
    case 37866:
    case 37867:
    case 37868:
    case 37869:
    case 37870:
    case 37871:
    case 37872:
    case 37873:
    case 37875:
    case 37876:
    case 37877:
    case 37878:
    case 37879:
    case 37880:
    case 37881:
    case 37882:
    case 37883:
LABEL_50:
      uint64_t v8 = 0LL;
      if (a3 > 35428)
      {
        if (a3 > 36231)
        {
          if (a3 <= 37487)
          {
            switch(a3)
            {
              case 36232:
                uint64_t v8 = 73LL;
                break;
              case 36233:
                BOOL v10 = a7 == 0;
                uint64_t v8 = 83LL;
                goto LABEL_184;
              case 36234:
              case 36235:
              case 36236:
              case 36237:
                goto LABEL_73;
              case 36238:
                uint64_t v8 = 71LL;
                break;
              case 36239:
                BOOL v10 = a7 == 0;
                uint64_t v8 = 82LL;
LABEL_184:
                if (!v10) {
                  uint64_t v8 = 0LL;
                }
                break;
              default:
                switch(a3)
                {
                  case 36756:
                    uint64_t v8 = 3LL;
                    break;
                  case 36757:
                    uint64_t v8 = 16LL;
                    break;
                  case 36758:
                    BOOL v10 = a7 == 0;
                    uint64_t v8 = 79LL;
                    goto LABEL_184;
                  case 36759:
                    uint64_t v8 = 66LL;
                    break;
                  default:
                    BOOL v14 = a3 == 36975;
                    uint64_t v8 = 88LL;
                    goto LABEL_130;
                }

                break;
            }
          }

          else
          {
            switch(a3)
            {
              case 37488:
                uint64_t v8 = 12LL;
                break;
              case 37489:
                uint64_t v8 = 13LL;
                break;
              case 37490:
                uint64_t v8 = 25LL;
                break;
              case 37491:
                uint64_t v8 = 26LL;
                break;
              case 37492:
                uint64_t v8 = 47LL;
                break;
              case 37493:
                uint64_t v8 = 48LL;
                break;
              case 37494:
                uint64_t v8 = 95LL;
                break;
              case 37495:
                uint64_t v8 = 96LL;
                break;
              case 37496:
                uint64_t v8 = 93LL;
                break;
              case 37497:
                uint64_t v8 = 94LL;
                break;
              default:
                BOOL v14 = a3 == 37883;
                uint64_t v8 = 117LL;
                goto LABEL_130;
            }
          }
        }

        else if (a3 > 36011)
        {
          if (a3 <= 36193)
          {
            if (a3 == 36012)
            {
LABEL_115:
              uint64_t v8 = 106LL;
            }

            else if (a3 == 36013)
            {
LABEL_134:
              BOOL v16 = a6 == 0;
              uint64_t v8 = 109LL;
              uint64_t v17 = 106LL;
LABEL_138:
              if (v16) {
                uint64_t v8 = v17;
              }
            }

            else
            {
              BOOL v14 = a3 == 36168;
              uint64_t v8 = 109LL;
LABEL_130:
              if (!v14) {
                uint64_t v8 = 0LL;
              }
            }
          }

          else
          {
            switch(a3)
            {
              case 36208:
                uint64_t v8 = 77LL;
                break;
              case 36209:
                BOOL v10 = a7 == 0;
                uint64_t v8 = 87LL;
                goto LABEL_184;
              case 36210:
              case 36211:
              case 36212:
              case 36213:
              case 36216:
              case 36217:
              case 36218:
              case 36219:
              case 36222:
              case 36223:
              case 36224:
              case 36225:
                goto LABEL_73;
              case 36214:
                uint64_t v8 = 76LL;
                break;
              case 36215:
                BOOL v10 = a7 == 0;
                uint64_t v8 = 86LL;
                goto LABEL_184;
              case 36220:
                uint64_t v8 = 75LL;
                break;
              case 36221:
                BOOL v10 = a7 == 0;
                uint64_t v8 = 85LL;
                goto LABEL_184;
              case 36226:
                uint64_t v8 = 74LL;
                break;
              case 36227:
                BOOL v10 = a7 == 0;
                uint64_t v8 = 84LL;
                goto LABEL_184;
              default:
                if (a3 == 36194) {
LABEL_176:
                }
                  uint64_t v8 = 27LL;
                break;
            }
          }
        }

        else
        {
          switch(a3)
          {
            case 35429:
              uint64_t v8 = 116LL;
              break;
            case 35430:
              uint64_t v8 = 119LL;
              break;
            case 35431:
            case 35432:
            case 35433:
            case 35434:
            case 35435:
            case 35436:
              goto LABEL_73;
            case 35437:
              uint64_t v8 = 118LL;
              break;
            case 35438:
              uint64_t v8 = 120LL;
              break;
            default:
              switch(a3)
              {
                case 35840:
                  uint64_t v8 = 43LL;
                  break;
                case 35841:
                  uint64_t v8 = 45LL;
                  break;
                case 35842:
                  uint64_t v8 = 89LL;
                  break;
                case 35843:
                  uint64_t v8 = 91LL;
                  break;
                default:
                  switch(a3)
                  {
                    case 35898:
                      uint64_t v8 = 32LL;
                      break;
                    case 35901:
                      uint64_t v8 = 31LL;
                      break;
                    case 35905:
                      uint64_t v8 = 29LL;
                      break;
                    case 35907:
                      BOOL v16 = a1 == 32993;
                      uint64_t v8 = 57LL;
                      uint64_t v17 = 60LL;
                      goto LABEL_138;
                    default:
                      goto LABEL_73;
                  }

                  break;
              }

              break;
          }
        }
      }

      else if (a3 > 34835)
      {
        switch(a3)
        {
          case 34836:
            uint64_t v8 = 70LL;
            break;
          case 34837:
            BOOL v10 = a7 == 0;
            uint64_t v8 = 81LL;
            goto LABEL_184;
          case 34838:
            uint64_t v8 = 99LL;
            break;
          case 34839:
          case 34845:
            goto LABEL_73;
          case 34840:
            uint64_t v8 = 105LL;
            break;
          case 34841:
            uint64_t v8 = 102LL;
            break;
          case 34842:
            uint64_t v8 = 69LL;
            break;
          case 34843:
            BOOL v10 = a7 == 0;
            uint64_t v8 = 80LL;
            goto LABEL_184;
          case 34844:
            uint64_t v8 = 98LL;
            break;
          case 34846:
            uint64_t v8 = 104LL;
            break;
          case 34847:
            uint64_t v8 = 101LL;
            break;
          default:
            switch(a3)
            {
              case 35409:
                BOOL v11 = a2 == 34235;
                uint64_t v8 = 41LL;
LABEL_120:
                if (!v11) {
                  ++v8;
                }
                break;
              case 35410:
              case 35411:
                goto LABEL_73;
              case 35412:
                uint64_t v8 = 46LL;
                break;
              case 35413:
                uint64_t v8 = 44LL;
                break;
              case 35414:
                uint64_t v8 = 92LL;
                break;
              case 35415:
                uint64_t v8 = 90LL;
                break;
              default:
                if (a3 == 35056) {
                  goto LABEL_134;
                }
                break;
            }

            break;
        }
      }

      else if (a3 <= 33188)
      {
        if (a3 <= 32847)
        {
          uint64_t v12 = 100LL;
          if (a3 != 32837) {
            uint64_t v12 = 0LL;
          }
          if (a3 == 32832) {
            uint64_t v13 = 103LL;
          }
          else {
            uint64_t v13 = v12;
          }
          if (a3 == 32828) {
            uint64_t v8 = 97LL;
          }
          else {
            uint64_t v8 = v13;
          }
        }

        else
        {
          switch(a3)
          {
            case 32848:
              goto LABEL_176;
            case 32849:
              BOOL v10 = a7 == 0;
              uint64_t v8 = 78LL;
              goto LABEL_184;
            case 32854:
              if (a1 == 32993) {
                int v15 = 1;
              }
              else {
                int v15 = a7;
              }
              BOOL v11 = v15 == 0;
              uint64_t v8 = 49LL;
              goto LABEL_120;
            case 32855:
              if (a2 > 33637)
              {
                if (a2 == 33638)
                {
                  uint64_t v8 = 55LL;
                  goto LABEL_73;
                }

                if (a2 == 33640)
                {
LABEL_206:
                  uint64_t v8 = 64LL;
                  goto LABEL_73;
                }
              }

              else
              {
                if (a2 == 5121)
                {
                  uint64_t v8 = 56LL;
                  goto LABEL_73;
                }

                if (a2 == 32820)
                {
                  BOOL v16 = a1 == 32993;
                  uint64_t v8 = 52LL;
                  uint64_t v17 = 55LL;
                  goto LABEL_138;
                }
              }

              uint64_t v8 = 52LL;
              break;
            case 32856:
              BOOL v16 = a1 == 32993;
              uint64_t v8 = 56LL;
              uint64_t v17 = 58LL;
              goto LABEL_138;
            case 32857:
              goto LABEL_206;
            default:
              goto LABEL_73;
          }
        }
      }

      else
      {
        switch(a3)
        {
          case 33321:
            uint64_t v8 = 1LL;
            break;
          case 33322:
          case 33324:
            goto LABEL_73;
          case 33323:
            uint64_t v8 = 14LL;
            break;
          case 33325:
            uint64_t v8 = 4LL;
            break;
          case 33326:
            uint64_t v8 = 5LL;
            break;
          case 33327:
            uint64_t v8 = 17LL;
            break;
          case 33328:
            uint64_t v8 = 18LL;
            break;
          case 33329:
            uint64_t v8 = 6LL;
            break;
          case 33330:
            uint64_t v8 = 9LL;
            break;
          case 33331:
            uint64_t v8 = 7LL;
            break;
          case 33332:
            uint64_t v8 = 10LL;
            break;
          case 33333:
            uint64_t v8 = 8LL;
            break;
          case 33334:
            uint64_t v8 = 11LL;
            break;
          case 33335:
            uint64_t v8 = 19LL;
            break;
          case 33336:
            uint64_t v8 = 22LL;
            break;
          case 33337:
            uint64_t v8 = 20LL;
            break;
          case 33338:
            uint64_t v8 = 23LL;
            break;
          case 33339:
            uint64_t v8 = 21LL;
            break;
          case 33340:
            uint64_t v8 = 24LL;
            break;
          default:
            break;
        }
      }

      break;
    case 37840:
      uint64_t v8 = 175LL;
      break;
    case 37841:
      uint64_t v8 = 176LL;
      break;
    case 37842:
      uint64_t v8 = 177LL;
      break;
    case 37843:
      uint64_t v8 = 178LL;
      break;
    case 37844:
      uint64_t v8 = 179LL;
      break;
    case 37845:
      uint64_t v8 = 181LL;
      break;
    case 37846:
      uint64_t v8 = 182LL;
      break;
    case 37847:
      uint64_t v8 = 183LL;
      break;
    case 37848:
      uint64_t v8 = 184LL;
      break;
    case 37849:
      uint64_t v8 = 185LL;
      break;
    case 37850:
      uint64_t v8 = 186LL;
      break;
    case 37851:
      uint64_t v8 = 187LL;
      break;
    case 37852:
      uint64_t v8 = 188LL;
      break;
    case 37853:
      uint64_t v8 = 189LL;
      break;
    case 37874:
      uint64_t v8 = 140LL;
      break;
    case 37884:
      uint64_t v8 = 121LL;
      break;
    case 37885:
      uint64_t v8 = 122LL;
      break;
    case 37886:
      break;
    case 37887:
      uint64_t v8 = 159LL;
      break;
    case 37888:
      uint64_t v8 = 160LL;
      break;
    case 37889:
      uint64_t v8 = 161LL;
      break;
    case 37890:
      uint64_t v8 = 162LL;
      break;
    case 37891:
      uint64_t v8 = 163LL;
      break;
    case 37892:
      uint64_t v8 = 164LL;
      break;
    case 37893:
      uint64_t v8 = 165LL;
      break;
    case 37894:
      uint64_t v8 = 166LL;
      break;
    case 37895:
      uint64_t v8 = 167LL;
      break;
    case 37896:
      uint64_t v8 = 168LL;
      break;
    case 37897:
      uint64_t v8 = 169LL;
      break;
    case 37898:
      uint64_t v8 = 170LL;
      break;
    case 37899:
      uint64_t v8 = 171LL;
      break;
    case 37900:
      uint64_t v8 = 172LL;
      break;
    case 37901:
      uint64_t v8 = 173LL;
      break;
    default:
      switch(a3)
      {
        case 35420:
          uint64_t v8 = 142LL;
          break;
        case 35421:
          uint64_t v8 = 148LL;
          break;
        case 35422:
          uint64_t v8 = 174LL;
          break;
        case 35423:
          uint64_t v8 = 180LL;
          break;
        case 35431:
          uint64_t v8 = 126LL;
          break;
        case 35432:
          uint64_t v8 = 128LL;
          break;
        case 35433:
          uint64_t v8 = 130LL;
          break;
        case 35434:
          uint64_t v8 = 132LL;
          break;
        case 35435:
          uint64_t v8 = 134LL;
          break;
        case 35436:
          uint64_t v8 = 136LL;
          break;
        case 35439:
          uint64_t v8 = 127LL;
          break;
        case 35440:
          uint64_t v8 = 129LL;
          break;
        case 35441:
          uint64_t v8 = 131LL;
          break;
        case 35442:
          uint64_t v8 = 133LL;
          break;
        case 35443:
          uint64_t v8 = 135LL;
          break;
        case 35444:
          uint64_t v8 = 137LL;
          break;
        case 35446:
          uint64_t v8 = 138LL;
          break;
        case 35447:
          uint64_t v8 = 139LL;
          break;
        case 35448:
          uint64_t v8 = 2LL;
          break;
        default:
          goto LABEL_50;
      }

      break;
  }

LABEL_73:
  if (a8) {
    uint64_t v8 = *((unsigned int *)*(&off_7A1A0 + v8) + 13);
  }
  return (uint64_t)*(&off_7A1A0 + v8);
}

    ++v31;
    uint64_t v56 = *result;
    uint64_t v57 = (char *)result - v56;
    int v35 = *(unsigned __int16 *)((char *)result - v56 + 24);
    uint64_t v30 = *(unsigned int *)((char *)result + v35);
  }

  while (v31 < *(unsigned int *)((char *)result + v35 + v30));
  LODWORD(v28) = *((unsigned __int16 *)v57 + 11);
  if (*((_WORD *)v57 + 11))
  {
    unsigned int v6 = *result;
LABEL_76:
    unsigned int v58 = *(int *)((char *)result + v28);
    LODWORD(v56) = v6;
  }

  else
  {
    unsigned int v58 = 0;
  }

  LODWORD(v26) = v58 + v26;
  uint64_t v7 = (int)v56;
LABEL_79:
  int v59 = (unsigned int *)((char *)result + *(unsigned __int16 *)((char *)result - v7 + 30));
  int v60 = (unsigned int *)((char *)v59 + *v59);
  unsigned int v61 = *v60;
  if ((_DWORD)v61) {
    return (int *)memcpy((char *)a2 + (v26 & 0xFFFFFFFC), v60 + 1, v61);
  }
  return result;
}

uint64_t sub_1FF10(unsigned int a1)
{
  return (uint64_t)*(&off_7A1A0 + a1);
}

BOOL sub_1FF20(int a1)
{
  return a1 == 36013 || a1 == 35056;
}

uint64_t sub_1FF38()
{
  return 4LL;
}

unint64_t sub_1FF44(unint64_t a1, unint64_t a2)
{
  return ((a1 / a2 + 1) & 0xFFFFFFFFFFFFFFFELL) * a2;
}

BOOL sub_1FF58(unint64_t a1, unint64_t a2)
{
  return ((a1 / a2) & 1) == 0;
}

BOOL sub_1FF68(char a1)
{
  return (a1 & 3) == 0LL;
}

uint64_t sub_1FF74(uint64_t result)
{
  if ((_DWORD)result == 3) {
    int v1 = 15;
  }
  else {
    int v1 = result;
  }
  if ((_DWORD)result == 2) {
    unsigned int v2 = 14;
  }
  else {
    unsigned int v2 = v1;
  }
  if ((result & 0xFFFFFFFE) == 2) {
    return v2;
  }
  else {
    return result;
  }
}

uint64_t sub_1FF9C(int a1)
{
  return (1 << -__clz(a1 - 1));
}

uint64_t sub_1FFBC(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if (!*(void *)(result + 808)) {
      *(_DWORD *)(result + 2980) |= 1u;
    }
    if (dword_7C464) {
      int v2 = 4;
    }
    else {
      int v2 = 34;
    }
    *(_DWORD *)(result + 2996) |= v2;
  }

  return result;
}

uint64_t sub_1FFFC()
{
  return 0LL;
}

uint64_t sub_20004(int a1)
{
  unsigned int v1 = a1 & 0xFFFF9FFF;
  uint64_t result = 11LL;
  switch(v1)
  {
    case 0x1400u:
      uint64_t result = 7LL;
      break;
    case 0x1401u:
      uint64_t result = 8LL;
      break;
    case 0x1402u:
      uint64_t result = 5LL;
      break;
    case 0x1403u:
      uint64_t result = 6LL;
      break;
    case 0x1404u:
      uint64_t result = 3LL;
      break;
    case 0x1405u:
      uint64_t result = 4LL;
      break;
    case 0x1406u:
      uint64_t result = 0LL;
      break;
    case 0x1407u:
    case 0x1408u:
    case 0x1409u:
    case 0x140Au:
      return result;
    case 0x140Bu:
      uint64_t result = 2LL;
      break;
    case 0x140Cu:
      uint64_t result = 1LL;
      break;
    default:
      if (v1 == 36255) {
        unsigned int v3 = 9;
      }
      else {
        unsigned int v3 = 11;
      }
      if (v1 == 33640) {
        uint64_t result = 10LL;
      }
      else {
        uint64_t result = v3;
      }
      break;
  }

  return result;
}

uint64_t sub_200A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a3 & 0xFFFFFFFF0000LL;
  if ((a3 & 0xFFFFFFFF0000LL) == 0) {
    return 1LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 768);
  while (1)
  {
    unsigned int v6 = __clz(__rbit64(v3)) - 16;
    uint64_t v7 = 0x10000LL << v6;
    if ((v5 & (0x10000LL << v6)) != 0
      && ((*(_BYTE *)(v4 + 24LL * v6) & 3) != 0
       || (*(_BYTE *)(v4 + 24LL * v6 + 16) & 3) != 0
       || sub_20004(*(unsigned __int16 *)(v4 + 24LL * v6 + 20)) == 11))
    {
      break;
    }

    v3 ^= v7;
    if (!v3) {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t sub_20140(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 120);
  if ((*(_BYTE *)(v4 + 14) & 4) != 0
    || *(void *)(result + 4112) != *(void *)(a2 + 152)
    || (uint64_t result = memcmp((const void *)(result + 4016), (const void *)(a2 + 56), 2LL * *(unsigned int *)(result + 4120)),
        (_DWORD)result))
  {
    __int128 v5 = *(_OWORD *)(a2 + 56);
    __int128 v6 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(v3 + 4048) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v3 + 4032) = v6;
    *(_OWORD *)(v3 + 4016) = v5;
    __int128 v7 = *(_OWORD *)(a2 + 104);
    __int128 v8 = *(_OWORD *)(a2 + 120);
    __int128 v9 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(v3 + 4112) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(v3 + 4096) = v9;
    *(_OWORD *)(v3 + 4080) = v8;
    *(_OWORD *)(v3 + 4064) = v7;
    ++*(_DWORD *)(v3 + 2500);
    *(_DWORD *)(v4 + 12) |= 0x40000u;
  }

  *(_DWORD *)(v3 + 2980) |= 1u;
  return result;
}

uint64_t sub_201F8( uint64_t a1, int a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, uint64_t a7, int a8)
{
  if (a5 > 0xFFFFFFFC) {
    return 0LL;
  }
  if (sub_3F88(a1) || !*(_BYTE *)(*(void *)(a1 + 24) + 15712LL))
  {
    int v65 = a4;
    unsigned int v67 = a6;
    uint64_t v64 = a7;
    (*(void (**)(void))(**(void **)(a1 + 2536) + 192LL))(*(void *)(a1 + 2536));
    uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 2536) + 184LL))(*(void *)(a1 + 2536));
    if (!a5)
    {
LABEL_101:
      if (sub_3F88(a1))
      {
        uint64_t v51 = *(void *)(a1 + 3952);
        unsigned int v52 = a5 / 3;
        unsigned int v53 = a5 >> 1;
        if (a3 != 1) {
          unsigned int v53 = 0;
        }
        if (a3 != 4) {
          unsigned int v52 = v53;
        }
        if (!a3) {
          unsigned int v52 = a5;
        }
        int v54 = v52 * a8;
        *(void *)(*(void *)(v51 + 8) + 24LL) = (v54 + *(_DWORD *)(*(void *)(v51 + 8) + 24LL));
        uint64_t v55 = *(unsigned int *)(v51 + 16);
        if ((_DWORD)v55 != -1) {
          *(_DWORD *)(*(void *)(a1 + 2232) + 16 * v55) += v54;
        }
      }

      return 1LL;
    }

    uint64_t v16 = 0LL;
    int v69 = 0;
    BOOL v17 = v15 != 0;
    unsigned int v58 = (void *)(a7 + 4LL * a4);
    int v59 = (void *)(a7 + 2LL * a4);
    size_t __n_4 = a7 + a4;
    uint64_t v18 = 16LL;
    if (!a8) {
      uint64_t v18 = 12LL;
    }
    uint64_t v62 = v18;
    uint64_t v63 = (int)(a3 - 3);
    while (1)
    {
      if (!*(void *)(a1 + 2688))
      {
        sub_26DA0(a1, 0);
        BOOL v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 2536) + 184LL))(*(void *)(a1 + 2536)) != 0;
      }

      if (!sub_24974(a1))
      {
        sub_260F0(a1);
        goto LABEL_31;
      }

      uint64_t v19 = v16;
      unint64_t v20 = a5 - v16;
      uint64_t v21 = *(void *)(a1 + 808);
      uint64_t v22 = *(void *)(v21 + 8);
      unint64_t v23 = *(void *)(*(void *)v21 + 768LL);
      while (v23)
      {
        unsigned int v24 = __clz(__rbit64(v23)) - 16;
        v23 ^= 0x10000LL << v24;
        unsigned int v25 = *(uint64_t **)(*(void *)(v22 + 8LL * v24) + 16LL);
        if (!sub_639A8( a1 + 2544,  *(_DWORD **)(a1 + 2688),  *(_DWORD *)(v25[1] + 256),  *v25,  1,  (unsigned int *)(v25[2] + 24),  0,  0LL)) {
          goto LABEL_29;
        }
      }

      if (*(_BYTE *)(v21 + 40)
        && !sub_639A8( a1 + 2544,  *(_DWORD **)(a1 + 2688),  *(_DWORD *)(*(void *)(*(void *)(*(void *)(v22 + 256) + 16LL) + 8LL) + 256LL),  **(void **)(*(void *)(v22 + 256) + 16LL),  1,  (unsigned int *)(*(void *)(*(void *)(*(void *)(v22 + 256) + 16LL) + 16LL) + 24LL),  0,  0LL)
        || !(*(unsigned int (**)(void, BOOL))(**(void **)(a1 + 2536) + 200LL))( *(void *)(a1 + 2536),  v17))
      {
LABEL_29:
        sub_260F0(a1);
LABEL_30:
        uint64_t v16 = v19;
        goto LABEL_31;
      }

      if ((*(unsigned int (**)(void, uint64_t, void))(**(void **)(a1 + 3960) + 24LL))( *(void *)(a1 + 3960),  a1,  v67))
      {
        *(_DWORD *)(a1 + 2996) |= 0x20u;
      }

      if (!(*(unsigned int (**)(void))(**(void **)(a1 + 2536) + 80LL))(*(void *)(a1 + 2536)))
      {
LABEL_49:
        sub_260F0(a1);
        BOOL v17 = 0;
        goto LABEL_30;
      }

      unint64_t v26 = v20;
      if (a2 != 3 && a2 != 1)
      {
        if (!a2)
        {
          if ((sub_25F38(a1, v62, v72) & 1) == 0) {
            goto LABEL_49;
          }
        }

        BOOL v27 = 0;
        int v28 = 0;
        uint64_t v29 = 0LL;
        LODWORD(v16) = v19;
        goto LABEL_88;
      }

      BOOL v30 = a8 > 1;
      BOOL v31 = byte_7C003 != 0;
      if (v30 && v31) {
        uint64_t v29 = 20LL;
      }
      else {
        uint64_t v29 = 0LL;
      }
      if (v30 && v31) {
        uint64_t v32 = 28LL;
      }
      else {
        uint64_t v32 = 20LL;
      }
      if ((sub_25F38(a1, v32, v72) & 1) == 0) {
        goto LABEL_49;
      }
      if (v20 >= a5 || a3 != 6)
      {
        uint64_t v34 = *(void *)(a1 + 808);
        if (*(_BYTE *)(v34 + 40))
        {
          uint64_t v35 = v29;
          unsigned __int8 v36 = *(void ***)(*(void *)(v34 + 8) + 256LL);
          uint64_t v37 = v64 - **v36;
          LODWORD(v16) = v19;
          switch(v67)
          {
            case 0x1405u:
              uint64_t GPUVirtualAddress = IOAccelResourceGetGPUVirtualAddress(*v36[2]);
              uint64_t v39 = v37 + 4LL * (v19 + v65);
              break;
            case 0x1403u:
              uint64_t GPUVirtualAddress = IOAccelResourceGetGPUVirtualAddress(*v36[2]);
              uint64_t v39 = v37 + 2LL * (v19 + v65);
              break;
            case 0x1401u:
              uint64_t GPUVirtualAddress = IOAccelResourceGetGPUVirtualAddress(*v36[2]);
              uint64_t v39 = v37 + (v19 + v65);
              break;
            default:
LABEL_57:
              int v42 = __src;
              uint64_t v29 = v35;
LABEL_84:
              int v28 = 1;
              __vImage_Buffer src = v42;
              if (a8 >= 2 && byte_7C003)
              {
                uint64_t v46 = v72[0];
                BOOL v27 = 1;
                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 3960) + 64LL))( *(void *)(a1 + 3960),  v72[0],  1LL);
                v72[0] = v46 + 4;
              }

              else
              {
                BOOL v27 = a8 > 1;
              }

LABEL_88:
              uint64_t v47 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 3960) + 88LL))( *(void *)(a1 + 3960),  a3);
              uint64_t v48 = *(void *)(a1 + 3960);
              uint64_t v49 = v72[0];
              if (v28) {
                (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void *, void, void, void))(*(void *)v48 + 104LL))( v48,  v72[0],  v47,  v26,  v60,  a8,  0LL,  v67);
              }
              else {
                (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void, void))(*(void *)v48 + 96LL))( v48,  v72[0],  v47,  v26,  a8,  (v16 + v65));
              }
              *(_BYTE *)(a1 + 2552) = 1;
              char v50 = !v27;
              if (!byte_7C003) {
                char v50 = 1;
              }
              if ((v50 & 1) == 0)
              {
                v72[0] = v49 + v29;
                (*(void (**)(void))(**(void **)(a1 + 3960) + 64LL))(*(void *)(a1 + 3960));
              }

              else {
                int v69 = dword_704C0[v63];
              }
              if (!*(_BYTE *)(a1 + 4899)) {
                *(_DWORD *)(*(void *)(a1 + 2688) + 4LL) = 0;
              }
              BOOL v17 = 0;
              uint64_t v16 = (v26 + v16 - v69);
              *(_BYTE *)(a1 + 3004) = 1;
              *(_DWORD *)(a1 + 2840) = 0;
              *(_DWORD *)(a1 + 2944) |= *(_DWORD *)(a1 + 2940) & *(_DWORD *)(a1 + 2936);
              goto LABEL_31;
          }

          int v60 = (void *)(v39 + GPUVirtualAddress);
          goto LABEL_57;
        }
      }

      uint64_t v16 = v19;
      switch(v67)
      {
        case 0x1405u:
          LODWORD(v40) = v26 & 0x3FFFFFFF;
          __vImage_Buffer src = (void *)(v64 + 4LL * (v16 + v65));
          int v41 = 4;
          break;
        case 0x1403u:
          __vImage_Buffer src = (void *)(v64 + 2LL * (v19 + v65));
          __unint64_t n = 2;
          unint64_t v40 = ((unint64_t)(2 * v26) + 3) >> 2;
          goto LABEL_62;
        case 0x1401u:
          unint64_t v40 = (v26 + 3) >> 2;
          __vImage_Buffer src = (void *)(v64 + (v16 + v65));
          int v41 = 1;
          break;
        default:
          LODWORD(v40) = 0;
          goto LABEL_62;
      }

      __unint64_t n = v41;
LABEL_62:
      LODWORD(v43) = v40;
      if (!*(_BYTE *)(*(void *)(a1 + 24) + 15444LL))
      {
        switch(a3)
        {
          case 1u:
          case 3u:
            unint64_t v43 = ((unint64_t)(2 * __n) + 3) >> 2;
            break;
          case 2u:
            LODWORD(v43) = v40;
            break;
          case 4u:
          case 5u:
          case 6u:
            unint64_t v43 = ((unint64_t)(3 * __n) + 3) >> 2;
            break;
          default:
            LODWORD(v43) = 1;
            break;
        }
      }

      if (sub_25CF4((void *)a1, 4uLL, v43, v40, &v70, (unint64_t *)__dst))
      {
        if (v70 != (_DWORD)v40)
        {
          unint64_t v26 = 4 * (unint64_t)v70 / __n;
          if (a3 == 1)
          {
            unint64_t v26 = (4 * (unint64_t)v70 / __n) & 0xFFFFFFFE;
          }

          else if (a3 == 4)
          {
            unint64_t v26 = 3 * (v26 / 3);
          }
        }

        uint64_t v44 = __dst[0];
        memcpy(__dst[0], __src, v26 * __n);
        int v60 = __dst[1];
        if (a3 == 6 && v26 < a5)
        {
          if (v67 == 5125)
          {
            int v42 = v58;
            unsigned int v45 = __n;
          }

          else
          {
            int v42 = v59;
            unsigned int v45 = __n;
            if (v67 != 5123)
            {
              int v42 = __src;
              if (v67 == 5121) {
                int v42 = (void *)__n_4;
              }
            }
          }

          memcpy(v44, v42, v45);
        }

        else
        {
          int v42 = __src;
        }

        goto LABEL_84;
      }

      sub_260F0(a1);
      BOOL v17 = 0;
LABEL_31:
    }
  }

  return 1LL;
}

void sub_209F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2 + 7;
  bzero(a2 + 7, 0x20uLL);
  *(void *)&__int128 v4 = -1LL;
  *((void *)&v4 + 1) = -1LL;
  *(_OWORD *)(a2 + 17) = v4;
  *(_OWORD *)(a2 + 15) = v4;
  *(_OWORD *)(a2 + 13) = v4;
  *(_OWORD *)(a2 + 11) = v4;
  uint64_t v5 = *a2;
  unint64_t v6 = *(void *)(*a2 + 768);
  if (v6)
  {
    unsigned __int8 v7 = 0;
    int v8 = dword_7C464;
    do
    {
      unsigned __int8 v9 = __clz(__rbit64(v6)) - 16;
      uint64_t v10 = v5 + 24LL * v9;
      __int16 v11 = *((_WORD *)v3 + v7) & 0xFFE0 | sub_20004(*(unsigned __int16 *)(v10 + 20));
      *((_WORD *)v3 + v7) = v11;
      __int16 v12 = v11 & 0xC00F | (32 * (*(_BYTE *)(v10 + 22) & 7)) | ((v9 & 0x3F) << 8);
      *((_WORD *)v3 + v7) = v12;
      __int16 v13 = v12 & 0xBFFF | (2 * *(_WORD *)(v10 + 20)) & 0x4000;
      *((_WORD *)v3 + v7) = v13;
      if (v8) {
        *((_WORD *)v3 + v7) = v13 & 0x7FEF | ((*(_DWORD *)(v5 + 24LL * v9 + 8) != 0) << 15);
      }
      *((_BYTE *)a2 + v9 + 88) = v7++;
      v6 ^= 0x10000LL << v9;
    }

    while (v6);
    uint64_t v14 = *(void *)(v5 + 768);
    int v15 = v7;
  }

  else
  {
    uint64_t v14 = 0LL;
    int v15 = 0;
  }

  a2[19] = v14;
  *((_DWORD *)a2 + 40) = v15;
}

void sub_20B30(void *a1)
{
  unsigned int v1 = sub_20B44(a1);
  operator delete(v1);
}

void *sub_20B44(void *a1)
{
  *a1 = off_78EF8;
  uint64_t v2 = a1[8];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    a1[8] = 0LL;
  }

  uint64_t v3 = a1[17];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    a1[17] = 0LL;
  }

  uint64_t v4 = a1[12];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    a1[12] = 0LL;
  }

  uint64_t v5 = a1[16];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = a1[14];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  *a1 = &off_7AAC0;
  if (a1[1])
  {
    IOAccelResourceRelease();
    a1[1] = 0LL;
  }

  return a1;
}

uint64_t sub_20BFC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!*(_BYTE *)(a1 + 72)) {
    return 1LL;
  }
  if (a4)
  {
    uint64_t v7 = *(void *)(a1 + 64);
    size_t v8 = *(void *)(v7 + 24);
    size_t v9 = *(void *)(v7 + 32);
    int v10 = sub_25A80(a2, 3LL, v9, 16LL, 64LL, (uint64_t *)__dst, 0);
    uint64_t result = 0LL;
    if (v10)
    {
      int v12 = sub_25A80(a2, 3LL, v8, 16LL, 64LL, (uint64_t *)v20, 0);
      uint64_t result = 0LL;
      if (v12)
      {
        memcpy(__dst[0], *(const void **)(*(void *)(a1 + 64) + 16LL), v9);
        memcpy(v20[0], *(const void **)(*(void *)(a1 + 64) + 8LL), v8);
        uint64_t v13 = *(void *)(a1 + 64);
        uint64_t v15 = *(void *)(v13 + 40);
        uint64_t v14 = *(void *)(v13 + 48);
        if (v14) {
          BOOL v16 = v15 == 0;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16) {
          return 0LL;
        }
        *(_BYTE *)(a1 + 72) = 0;
        goto LABEL_14;
      }
    }
  }

  else
  {
    int v17 = sub_25A80(a2, 3LL, 32LL, 16LL, 64LL, (uint64_t *)__dst, 0);
    uint64_t result = 0LL;
    if (v17)
    {
      int v18 = sub_25A80(a2, 3LL, 32LL, 16LL, 64LL, (uint64_t *)v20, 0);
      uint64_t result = 0LL;
      if (v18)
      {
        uint64_t v15 = 16LL;
        off_7C2E0(__dst[0], 16LL);
        off_7C2E0(v20[0], 16LL);
        uint64_t v14 = 16LL;
LABEL_14:
        uint64_t v19 = *(void *)(a2 + 3968);
        (*(void (**)(uint64_t, _BYTE *, uint64_t, void *))(*(void *)v19 + 344LL))(v19, v23, v14, __dst[1]);
        (*(void (**)(uint64_t, _BYTE *, uint64_t, void *))(*(void *)v19 + 344LL))(v19, v22, v15, v20[1]);
        (*(void (**)(void, uint64_t, _BYTE *, _BYTE *))(**(void **)(a2 + 3960) + 192LL))( *(void *)(a2 + 3960),  a3,  v23,  v22);
        return 1LL;
      }
    }
  }

  return result;
}

uint64_t sub_20DF8(uint64_t a1, uint64_t a2)
{
  uint64_t result = off_7C318();
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_20E24(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a2 + 32);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

uint64_t sub_20E40(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    (*(void (**)(void, void))(**(void **)(a2 + 32) + 72LL))(*(void *)(a2 + 32), *(void *)a2);
  }
  return 1LL;
}

uint64_t sub_20E70(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 8LL * a3;
    uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a2 + 32) + 112LL))( *(void *)(a2 + 32),  *(void *)(v6 + 4176));
    if ((_DWORD)result)
    {
      char v7 = result;
      if ((result & 2) != 0)
      {
        int v8 = 1 << a3;
        *(_DWORD *)(v5 + 3488) &= ~(1 << a3);
        uint64_t v9 = v5 + 3392;
        *(_WORD *)(v5 + 3392 + 2LL * a3) = 0;
        if ((unsigned __int16)(*(_WORD *)(*(void *)(a2 + 32) + 36LL) - 512) <= 7u)
        {
          int v10 = word_704D0[(unsigned __int16)(*(_WORD *)(*(void *)(a2 + 32) + 36LL) - 512)];
          *(_DWORD *)(v5 + 3488) |= v8;
          int v11 = *(_WORD *)(v9 + 2LL * a3) & 0xFFEF | (16 * ((*(_DWORD *)(v5 + 3492) & v8) != 0));
          *(_WORD *)(v9 + 2LL * a3) = v11;
          if ((_DWORD)xmmword_7C470)
          {
            unsigned int v12 = v11 & 0xFFFFFFF0 | v10;
            *(_WORD *)(v9 + 2LL * a3) = v12;
            unsigned int v13 = v12 & 0xFFFFFFDF | (32 * ((*(_DWORD *)(*(void *)(a2 + 32) + 36LL) >> 17) & 1));
            *(_WORD *)(v9 + 2LL * a3) = v13;
            unsigned int v14 = v13 & 0xFFFFFFBF | (((*(_DWORD *)(*(void *)(a2 + 32) + 36LL) >> 18) & 1) << 6);
            *(_WORD *)(v9 + 2LL * a3) = v14;
            unsigned int v15 = v14 & 0xFFFFFF7F | (((*(_DWORD *)(*(void *)(a2 + 32) + 36LL) >> 19) & 1) << 7);
            *(_WORD *)(v9 + 2LL * a3) = v15;
            *(_WORD *)(v9 + 2LL * a3) = (*(_DWORD *)(*(void *)(a2 + 32) + 36LL) >> 12) & 0x100 | v15 & 0xFEFF;
          }
        }

        ++*(_DWORD *)(v5 + 2500);
        ++*(_DWORD *)(v5 + 2516);
      }

      uint64_t v16 = a3 >> 4;
      if (off_7C3C8) {
        uint64_t result = off_7C3C8(v5, *(void *)(a2 + 32), a3, result);
      }
      else {
        uint64_t result = 0LL;
      }
      int v17 = (uint64_t *)(v6 + 4176);
      uint64_t v18 = *(void *)(v5 + 24);
      if ((~(*(void *)(v18 + 8LL * v16 + 12688) >> (4 * (a3 & 0xFu))) & 0xFLL) != 0)
      {
        *(_DWORD *)(v5 + 2980) |= 0x40u;
        if ((v7 & 2) != 0) {
          *(_DWORD *)(*(void *)(v5 + 120) + 12LL) |= 0x40000u;
        }
      }

      if ((~(*(void *)(v18 + 8 * v16 + 12624) >> (4 * (a3 & 0xFu))) & 0xFLL) != 0)
      {
        *(_DWORD *)(v5 + 2980) |= 0x80u;
      }

      *(_DWORD *)(v5 + 4168) |= 1 << a3;
      uint64_t v19 = *(void *)(a2 + 32);
      uint64_t v20 = *v17;
      if (*v17 != v19)
      {
        uint64_t v21 = 0LL;
        char v22 = 1;
        do
        {
          char v23 = v22;
          unsigned int v24 = *(const void **)(v19 + 8 * v21 + 16);
          if (v24) {
            uint64_t result = (uint64_t)memcpy(*(void **)(v20 + 8 * v21 + 16), v24, 8LL * *(unsigned int *)(v20 + 8));
          }
          char v22 = 0;
          uint64_t v21 = 1LL;
        }

        while ((v23 & 1) != 0);
        *(_BYTE *)(v20 + 32) = *(_BYTE *)(v19 + 32);
        *(_DWORD *)(v20 + 36) = *(_DWORD *)(v19 + 36);
      }
    }
  }

  return result;
}

void *sub_210EC(void *a1)
{
  *a1 = &off_78F18;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    malloc_zone_free((malloc_zone_t *)qword_7C218, v2);
  }
  return a1;
}

void sub_2112C(void *__p)
{
  *__p = &off_78F18;
  uint64_t v2 = (void *)__p[2];
  if (v2) {
    malloc_zone_free((malloc_zone_t *)qword_7C218, v2);
  }
  operator delete(__p);
}

uint64_t sub_2116C(uint64_t result, int a2)
{
  **(void **)(result + 16) |= (unint64_t)(a2 - 1) << 34;
  return result;
}

uint64_t sub_21184(uint64_t result, int a2)
{
  **(void **)(result + 16) |= (unint64_t)(a2 - 1) << 48;
  return result;
}

uint64_t sub_2119C(uint64_t result, int a2)
{
  **(void **)(result + 16) |= qword_70BF0[a2];
  return result;
}

uint64_t sub_211BC(uint64_t a1, uint64_t a2)
{
  **(void **)(a1 + 16) |= **(void **)(a2 + 392);
  sub_21984(a1, *(_DWORD *)(a2 + 368));
  uint64_t v4 = *(void *)a2;
  if ((**(_WORD **)a2 & 0x800) != 0)
  {
    int v7 = *(_DWORD *)(v4 + 100);
    int v8 = (unsigned __int16 *)(v4 + 196);
    uint64_t v6 = (unsigned __int16 *)(v4 + 194);
    BOOL v9 = (v7 & 4) == 0;
    if ((v7 & 4) != 0) {
      uint64_t v5 = v6;
    }
    else {
      uint64_t v5 = v8;
    }
    if (!v9) {
      uint64_t v6 = v8;
    }
  }

  else
  {
    uint64_t v5 = (unsigned __int16 *)(v4 + 196);
    uint64_t v6 = (unsigned __int16 *)(v4 + 194);
  }

  uint64_t v10 = *v6;
  uint64_t v11 = *v5;
  if (sub_143D8((uint64_t *)a2, 0, 0, 0) == 1)
  {
    xmmword_7C350(*(unsigned __int16 *)(*(void *)a2 + 192LL));
    unsigned int v12 = ~(-1 << *(_BYTE *)(*(void *)(a2 + 392) + 56LL)) + v10;
    xmmword_7C350(*(unsigned __int16 *)(*(void *)a2 + 192LL));
    (*(void (**)(uint64_t, void))(*(void *)a1 + 16LL))( a1,  (-1 << *(_BYTE *)(*(void *)(a2 + 392) + 56LL)) & v12);
    xmmword_7C350(*(unsigned __int16 *)(*(void *)a2 + 192LL));
    unsigned int v13 = ~(-1 << *(_BYTE *)(*(void *)(a2 + 392) + 56LL)) + v11;
    xmmword_7C350(*(unsigned __int16 *)(*(void *)a2 + 192LL));
    uint64_t v11 = (-1 << *(_BYTE *)(*(void *)(a2 + 392) + 56LL)) & v13;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16LL))(a1, v10);
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, v11);
  unsigned int v14 = *(unsigned __int8 *)(a2 + 384);
  unint64_t v15 = (unint64_t)-__clz(v14 - 1) << 62;
  if (v14 >= 2) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = 0LL;
  }
  **(void **)(a1 + 16) |= v16;
  xmmword_7C350(*(unsigned __int16 *)(*(void *)a2 + 192LL));
  int v17 = *(_DWORD *)(*(void *)(a2 + 392) + 84LL);
  uint64_t v18 = *(void *)(a1 + 24);
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v19 = sub_180B0(a2, 0, 0, 0, 0, 0, 0);
  unint64_t v20 = 0LL;
  uint64_t v21 = *(unsigned __int8 *)(*(void *)a2 + 209LL);
  uint64_t v22 = *(unsigned __int16 *)(*(void *)a2 + 198LL);
  xmmword_7C350(*(unsigned __int16 *)(*(void *)a2 + 192LL));
  if (*(_DWORD *)(*(void *)(a2 + 392) + 84LL)) {
    BOOL v23 = v17 == 4;
  }
  else {
    BOOL v23 = 1;
  }
  uint64_t v24 = !v23;
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, BOOL, uint64_t, uint64_t, void))(*(void *)v18 + 16LL))( v18,  v26,  v19,  v20,  v21,  v21 > 1,  v22,  v24,  *(void *)(a2 + 240));
  xmmword_7C350(*(unsigned __int16 *)(*(void *)a2 + 192LL));
  return sub_21AC4(a1, v17, (*(_DWORD *)(*(void *)(a2 + 392) + 24LL) - 37886) < 0x10);
}

uint64_t sub_214B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72LL))(a1, a2, 1LL);
}

uint64_t sub_21504(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 72LL))(a1, a2, 0LL);
}

uint64_t sub_21558(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  **(void **)(a1 + 16) = ((unint64_t)(a2[16] - 1) << 34) & 0xC000FFFFFFFFFFFFLL | **(void **)(a1 + 16) & 0xC0000003FFFFFFFFLL | ((unint64_t)(a2[17] - 1) << 48);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  if (a2[34] == 10) {
    *(void *)(*(void *)(a1 + 16) + 8LL) = *(void *)(*(void *)(a1 + 16) + 8LL) & 0xFFFFFFFFFFFF800FLL | (16LL * (a2[18] - 1));
  }
  return result;
}

uint64_t sub_215EC(void **a1, void *a2, int a3)
{
  uint64_t v6 = *a2;
  xmmword_7C350(*(unsigned __int16 *)(*a2 + 192LL));
  uint64_t v7 = a2[49];
  int v8 = *(_DWORD *)(v7 + 24);
  *a1[2] &= 0xFFFFFFFFFFFE001FLL;
  if (v8 == 34041 || v8 == 6402)
  {
    if (*(_WORD *)(v6 + 114) == 6403) {
      unsigned int v10 = 183072;
    }
    else {
      unsigned int v10 = 182784;
    }
    if (!a3) {
      goto LABEL_12;
    }
  }

  else
  {
    unsigned int v10 = *(_DWORD *)(v7 + 68);
    if (!a3)
    {
LABEL_12:
      LOWORD(v13) = (unsigned __int16)v10 >> 3;
      LOWORD(v14) = (unsigned __int16)v10 >> 6;
      LOBYTE(v12) = v10;
      LOWORD(v10) = (unsigned __int16)v10 >> 9;
      return ((uint64_t (*)(void **, void, void, void, void))(*a1)[10])( a1,  v12 & 7,  v13 & 7,  v14 & 7,  v10 & 7);
    }
  }

  unsigned int v11 = *(unsigned __int16 *)(v6 + 128);
  unsigned int v12 = v10 >> (3 * (v11 & 7));
  unsigned int v13 = v10 >> (3 * ((v11 >> 3) & 7));
  unsigned int v14 = v10 >> (3 * ((v11 >> 6) & 7));
  v10 >>= 3 * ((v11 >> 9) & 7);
  return ((uint64_t (*)(void **, void, void, void, void))(*a1)[10])( a1,  v12 & 7,  v13 & 7,  v14 & 7,  v10 & 7);
}

uint64_t sub_216E8(uint64_t result, int a2, int a3, int a4, int a5)
{
  **(void **)(result + 16) |= (qword_70C48[a2] << 14) | (qword_70C48[a3] << 11) | (qword_70C48[a4] << 8) | (32LL * qword_70C48[a5]);
  return result;
}

uint64_t sub_21720(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (a2) {
    uint64_t v3 = *(void *)(v2 + 8) | 0x100000000000000LL;
  }
  else {
    uint64_t v3 = 0xFEFFFFFFFFFFFFFFLL;
  }
  *(void *)(v2 + 8) = v3;
  return result;
}

uint64_t sub_21740(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 32LL))( *(void *)(a1 + 24),  *(void *)(a1 + 16));
}

uint64_t sub_21794(uint64_t result, int a2)
{
  if (a2)
  {
    if (qword_7C390) {
      return qword_7C390(*(void *)(result + 16));
    }
  }

  return result;
}

uint64_t sub_217B4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6 = *(_DWORD *)(a2 + 136);
  if (v6 > 0xA) {
    goto LABEL_7;
  }
  if (((1 << v6) & 0x4FE) != 0)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    int v7 = *(_DWORD *)(a2 + 136);
  }

  else
  {
    if (((1 << v6) & 0x300) == 0) {
      goto LABEL_7;
    }
    int v7 = 5;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, 5LL);
  }

  sub_21984(a1, v7);
LABEL_7:
  **(void **)(a1 + 16) |= *(void *)(a2 + 32);
  uint64_t v8 = *(unsigned int *)(a2 + 64);
  if (*(_DWORD *)(a2 + 208) == 1)
  {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 16LL))( a1,  ((_DWORD)v8 + ~(-1 << *(_DWORD *)(a2 + 88))) & (-1 << *(_DWORD *)(a2 + 88)));
    uint64_t v9 = (*(_DWORD *)(a2 + 68) + ~(-1 << *(_DWORD *)(a2 + 88))) & (-1 << *(_DWORD *)(a2 + 88));
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16LL))(a1, v8);
    uint64_t v9 = *(unsigned int *)(a2 + 68);
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, v9);
  unsigned int v10 = __clz(a3 - 1);
  if (a3 >= 2) {
    uint64_t v11 = -v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = *(void *)(a1 + 24);
  **(void **)(a1 + 16) |= v11 << 62;
  int v13 = *(_DWORD *)(a2 + 180);
  (*(void (**)(uint64_t))(*(void *)v12 + 16LL))(v12);
  (*(void (**)(void, void, void))(**(void **)(a1 + 24) + 40LL))( *(void *)(a1 + 24),  *(void *)(a1 + 16),  0LL);
  (*(void (**)(uint64_t, void, void, void, void))(*(void *)a1 + 80LL))( a1,  *(_DWORD *)(a2 + 140) & 7,  (*(_DWORD *)(a2 + 140) >> 3) & 7,  (*(_DWORD *)(a2 + 140) >> 6) & 7,  (*(_DWORD *)(a2 + 140) >> 9) & 7);
  return sub_21AC4(a1, v13, *(unsigned __int8 *)(a2 + 184));
}

uint64_t sub_21984(uint64_t result, int a2)
{
  if ((a2 - 3) < 8)
  {
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_7C038);
    if ((v2 & 1) != 0)
    {
      uint64_t v3 = &qword_7C030;
LABEL_4:
      *(void *)(result + 24) = v3;
      return result;
    }

    uint64_t v11 = result;
    int v6 = __cxa_guard_acquire(&qword_7C038);
    uint64_t v3 = &qword_7C030;
    unsigned int v10 = &qword_7C030;
    if (v6)
    {
      qword_7C030 = (uint64_t)&off_78FF8;
      int v7 = &qword_7C038;
LABEL_14:
      __cxa_guard_release(v7);
      uint64_t v3 = v10;
      uint64_t result = v11;
      goto LABEL_4;
    }

    goto LABEL_19;
  }

  if (a2 == 2)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_7C028);
    if ((v5 & 1) != 0)
    {
      uint64_t v3 = &qword_7C020;
      goto LABEL_4;
    }

    uint64_t v11 = result;
    int v9 = __cxa_guard_acquire(&qword_7C028);
    uint64_t v3 = &qword_7C020;
    unsigned int v10 = &qword_7C020;
    if (v9)
    {
      qword_7C020 = (uint64_t)&off_79038;
      int v7 = &qword_7C028;
      goto LABEL_14;
    }

    goto LABEL_19;
  }

  if (a2 == 1)
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_7C018);
    if ((v4 & 1) != 0)
    {
      uint64_t v3 = &qword_7C010;
      goto LABEL_4;
    }

    uint64_t v11 = result;
    int v8 = __cxa_guard_acquire(&qword_7C018);
    uint64_t v3 = &qword_7C010;
    unsigned int v10 = &qword_7C010;
    if (v8)
    {
      qword_7C010 = (uint64_t)&off_78FB8;
      int v7 = &qword_7C018;
      goto LABEL_14;
    }

LABEL_19:
    uint64_t result = v11;
    goto LABEL_4;
  }

  return result;
}

uint64_t sub_21AC4(uint64_t result, int a2, int a3)
{
  switch(a2)
  {
    case 0:
      if (a3)
      {
        if (qword_7C390) {
          uint64_t result = qword_7C390(*(void *)(result + 16));
        }
      }

      break;
    case 1:
    case 3:
    case 4:
      uint64_t v3 = *(uint64_t **)(result + 16);
      uint64_t v4 = *v3 | 8;
      goto LABEL_7;
    case 2:
      uint64_t v3 = *(uint64_t **)(result + 16);
      uint64_t v4 = *v3 | 0x18;
LABEL_7:
      *uint64_t v3 = v4;
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_21B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  *(void *)(a2 + 8) |= 16LL * (a7 - 1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a5, a6);
  if (a8) {
    *(void *)(a2 + 8) |= 0x800000000000000uLL;
  }
  return result;
}

void sub_21BB8(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  if (a4) {
    unint64_t v4 = *(void *)(a2 + 8) & 0xFFC000000000FFFFLL | (a3 >> 2 << 16);
  }
  else {
    unint64_t v4 = *(void *)(a2 + 8) | (a3 >> 2 << 16);
  }
  *(void *)(a2 + 8) = v4;
}

void sub_21BE4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = 0x8000LL;
  if (!a4) {
    uint64_t v4 = 0LL;
  }
  *(void *)(a2 + 8) = v4 | a3 & 0xFFFF7FFF | *(void *)(a2 + 8) & 0xFFFFFFFFFFFF7FF0LL;
}

void sub_21C10(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  *(void *)(a2 + 8) = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)a3 << 60);
}

uint64_t sub_21C28( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, int a10)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 24LL))(a1, a2, a3, 0LL);
  unint64_t v13 = ((unint64_t)a9 << 60) | ((unint64_t)(a4 - 1) << 38) | *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v13;
  uint64_t v14 = 0x80000000000000LL;
  switch(a10)
  {
    case 2:
    case 6:
      return result;
    case 3:
      uint64_t v14 = 0x280000000000000LL;
      goto LABEL_4;
    case 4:
      uint64_t v14 = 0x200000000000000LL;
      goto LABEL_4;
    default:
LABEL_4:
      *(void *)(a2 + 8) = v13 | v14;
      return result;
  }

void sub_21CBC(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  if (a4) {
    unint64_t v4 = *(void *)(a2 + 8) & 0xFFFFFFC000000000LL;
  }
  else {
    unint64_t v4 = *(void *)(a2 + 8);
  }
  *(void *)(a2 + 8) = v4 | (a3 >> 2);
}

uint64_t sub_21CEC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  *(void *)(a2 + 8) |= (a4 - 1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a5, a6);
  if (a8) {
    *(void *)(a2 + 8) |= 0x800000000000000uLL;
  }
  return result;
}

void sub_21D78(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  if (a4) {
    unint64_t v4 = *(void *)(a2 + 8) & 0xFFC000000000FFFFLL | (a3 >> 2 << 16);
  }
  else {
    unint64_t v4 = *(void *)(a2 + 8) | (a3 >> 2 << 16);
  }
  *(void *)(a2 + 8) = v4;
}

void sub_21DA4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = 0x8000LL;
  if (!a4) {
    uint64_t v4 = 0LL;
  }
  *(void *)(a2 + 8) = *(void *)(a2 + 8) & 0xFFFFFFFFFFF7FFFLL | (a3 << 60) | v4;
}

_DWORD *sub_21DD0()
{
  uint64_t v0 = operator new(0x20uLL);
  *(void *)uint64_t v0 = &off_78F18;
  v0[2] = 2;
  unsigned int v1 = malloc_zone_calloc((malloc_zone_t *)qword_7C218, 2uLL, 8uLL);
  if (!v1) {
    abort();
  }
  *((void *)v0 + 2) = v1;
  *((void *)v0 + 3) = 0LL;
  return v0;
}

void sub_21E2C(unint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  v7[2] = sub_21F50;
  v7[3] = &unk_79068;
  v7[4] = a1;
  IOAccelSharedSetWaitForGPUCallback(v2, v7);
  IONotificationPortRef v3 = IONotificationPortCreate(kIOMasterPortDefault);
  *(void *)(a1 + 384) = v3;
  if (v3)
  {
    uint64_t v4 = v3;
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(21LL, 0LL);
    IONotificationPortSetDispatchQueue(v4, global_queue);
    reference[0] = 0LL;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    reference[1] = (uint64_t)sub_21F64;
    __int128 v9 = a1;
    LODWORD(v4) = IOAccelSharedGetConnect(*(void *)(a1 + 40));
    mach_port_t MachPort = IONotificationPortGetMachPort(*(IONotificationPortRef *)(a1 + 384));
    if (IOConnectCallAsyncScalarMethod((mach_port_t)v4, 0x10u, MachPort, reference, 3u, 0LL, 0, 0LL, 0LL))
    {
      IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 384));
      *(void *)(a1 + 384) = 0LL;
    }
  }

uint64_t sub_21F50(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 304LL) |= 0x8000u;
  return result;
}

uint64_t sub_21F64(uint64_t result, uint64_t a2, int *a3)
{
  uint64_t v3 = result;
  int v4 = *a3;
  if (*(_BYTE *)(result + 288))
  {
    uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 48));
    int v5 = *(unsigned __int8 *)(v3 + 288);
    *(_DWORD *)(v3 + 392) = v4;
    if (v5) {
      return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 48));
    }
  }

  else
  {
    *(_DWORD *)(result + 392) = v4;
  }

  return result;
}

void sub_21FC4(uint64_t a1)
{
  uint64_t v2 = *(IONotificationPort **)(a1 + 384);
  if (v2)
  {
    IONotificationPortDestroy(v2);
    *(void *)(a1 + 384) = 0LL;
  }

uint64_t sub_21FF0(void *a1, uint64_t a2, int a3)
{
  if ((*(int *)(v8 + 24) > 1 || (uint64_t v6 = a1[336]) != 0 && *(_DWORD *)(v6 + 12))
    && a1[269] > (unint64_t)(a1[271] + 24LL))
  {
    sub_260F0((uint64_t)a1);
  }

  return IOAccelResourceFinishEvent(a2, a3 == 0);
}

uint64_t sub_2207C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = a2[4];
  if (!*(_DWORD *)(*(void *)(*(void *)a2 + 2200LL) + 16 * v2))
  {
    int v5 = (_BYTE *)(a1 + 4896);
    *(_BYTE *)(a1 + 4897) = 1;
    unint64_t v6 = *(void *)(a1 + 2152);
    unint64_t v7 = *(void *)(a1 + 2160);
    if (*(_BYTE *)(a1 + 4896))
    {
      *(void *)unint64_t v6 = 164096LL;
      v6 += 8LL;
      *(void *)(a1 + 2152) = v6;
      *int v5 = 0;
    }

    if (v6 + 20 <= v7)
    {
      *(void *)(a1 + 2152) = v6 + 12;
      if (v6)
      {
LABEL_11:
        *(void *)unint64_t v6 = 229888LL;
        *(_DWORD *)(v6 + 8) = v2;
        return 1LL;
      }

      unint64_t v6 = 12LL;
    }

    if (v6 > *(void *)(a1 + 2168) + 24LL)
    {
      sub_260F0(a1);
      unint64_t v6 = *(void *)(a1 + 2152);
      if (*v5)
      {
        *(void *)unint64_t v6 = 164096LL;
        v6 += 8LL;
        *int v5 = 0;
      }
    }

    *(void *)(a1 + 2152) = v6 + 12;
    LODWORD(v2) = a2[4];
    goto LABEL_11;
  }

  return 1LL;
}

uint64_t sub_22168(uint64_t a1)
{
  return a1;
}

uint64_t sub_22184(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 2688);
  if (v6 && *(_DWORD *)(v6 + 12)) {
    return 0LL;
  }
  else {
    return IOAccelResourceTestEvent(a2, a3 == 0);
  }
}

double sub_221FC(uint64_t a1)
{
  *(_DWORD *)(a1 + 12) |= 0x20000u;
  unsigned int v1 = *(_DWORD *)(a1 + 20) & 0x8000;
  *(int8x8_t *)(a1 + 28) = vand_s8(*(int8x8_t *)(a1 + 28), (int8x8_t)0x8000000800LL);
  *(void *)(a1 + 20) = v1;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 43) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(void *)(a1 + 124) = 0LL;
  return result;
}

double sub_22250(uint64_t a1)
{
  *(void *)(a1 + 80) = 4912LL;
  *(_OWORD *)(a1 + 64) = xmmword_70260;
  *(void *)&double result = 584LL;
  *(_OWORD *)(a1 + 96) = xmmword_70270;
  *(_OWORD *)(a1 + 112) = xmmword_70280;
  *(void *)(a1 + 128) = 40LL;
  return result;
}

uint64_t sub_22284(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 12) |= 0x20000u;
  if ((*(_DWORD *)(a1 + 32) & 1) != 0)
  {
    int v4 = 1;
    *(_DWORD *)(a1 + 32) = 1;
    if ((*(_BYTE *)(a1 + 29) & 8) == 0) {
      goto LABEL_6;
    }
LABEL_5:
    int v4 = 2048;
    goto LABEL_6;
  }

  *(_DWORD *)(a1 + 32) &= 0x80u;
  if ((*(_BYTE *)(a1 + 29) & 8) != 0) {
    goto LABEL_5;
  }
  int v4 = 1;
LABEL_6:
  *(_DWORD *)(a1 + 28) = v4;
  uint64_t v5 = 0LL;
  *(_BYTE *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = 0LL;
  if ((*(_BYTE *)(a1 + 21) & 0x80) != 0)
  {
    *(_DWORD *)(a1 + 20) = 0x8000;
    uint64_t v5 = 1LL;
  }

  for (unsigned int i = 0; i < v5; unsigned int i = 1)
  {
  }

  return v5;
}

uint64_t sub_22338(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 10014LL;
  }
  unsigned int v2 = *(_DWORD *)(a2 + 52);
  if (!v2 || (v2 & ~*(_DWORD *)(*(void *)a1 + 220LL)) != 0) {
    return 10006LL;
  }
  int v4 = *(_DWORD *)(a2 + 12);
  if ((v4 & 2) != 0)
  {
    do
    {
      unsigned int v5 = v2;
      v2 >>= 1;
    }

    while ((v5 & 1) == 0);
    if (v5 != 1) {
      return 10006LL;
    }
  }

  if (*(unsigned __int8 *)(a2 + 9) << 8 != 28928
    || *(_WORD *)(a2 + 38)
    || *(_WORD *)(a2 + 40)
    || *(_WORD *)(a2 + 42)
    || *(_DWORD *)(a2 + 44))
  {
    return 10002LL;
  }

  uint64_t result = 10002LL;
  if ((v4 & 0xFFFDF07C) == 0 && !*(_BYTE *)(a2 + 48) && (*(_DWORD *)(a2 + 20) & 0xFFFF7FFF) == 0)
  {
    int v6 = *(_DWORD *)(a2 + 32);
    if (v6 == 128 || v6 == 1)
    {
      int v7 = *(_DWORD *)(a2 + 28);
      if (v7 != 1 || v6 != 1 || (*(_DWORD *)(a2 + 12) & 0x800) == 0) {
        unsigned int v10 = 0;
      }
      else {
        unsigned int v10 = 10002;
      }
      if ((v7 & 0xFFFFF7FE) != 0) {
        return 10002LL;
      }
      else {
        return v10;
      }
    }
  }

  return result;
}

uint64_t sub_22420(uint64_t a1)
{
  *(void *)(a1 + 2544) = 0LL;
  uint64_t v2 = a1 + 4732;
  *(_BYTE *)(a1 + 2552) = 0;
  *(void *)&__int128 v3 = -1LL;
  *((void *)&v3 + 1) = -1LL;
  *(_OWORD *)(a1 + 2554) = v3;
  *(_OWORD *)(a1 + 2570) = v3;
  *(_OWORD *)(a1 + 2586) = v3;
  *(_OWORD *)(a1 + 2602) = v3;
  *(_OWORD *)(a1 + 2618) = v3;
  *(_OWORD *)(a1 + 2634) = v3;
  *(_OWORD *)(a1 + 2650) = v3;
  *(_OWORD *)(a1 + 2666) = v3;
  *(_OWORD *)(a1 + 2848) = 0u;
  *(_OWORD *)(a1 + 2864) = 0u;
  *(_OWORD *)(a1 + 2880) = 0u;
  *(_OWORD *)(a1 + 2896) = 0u;
  *(_OWORD *)(a1 + 2912) = 0u;
  *(_DWORD *)(a1 + 3496) = 0;
  *(_OWORD *)(a1 + 3272) = 0u;
  *(_OWORD *)(a1 + 3288) = 0u;
  *(_OWORD *)(a1 + 3304) = 0u;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(_OWORD *)(a1 + 3336) = 0u;
  *(_OWORD *)(a1 + 3352) = 0u;
  *(_OWORD *)(a1 + 3368) = 0u;
  *(_OWORD *)(a1 + 3384) = 0u;
  *(_OWORD *)(a1 + 3400) = 0u;
  *(_OWORD *)(a1 + 3416) = 0u;
  *(_OWORD *)(a1 + 3432) = 0u;
  *(_OWORD *)(a1 + 3448) = 0u;
  *(_OWORD *)(a1 + 3464) = 0u;
  *(_OWORD *)(a1 + 3480) = 0u;
  *(_OWORD *)(a1 + 3504) = 0u;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 3520) = &off_793E0;
  *(void *)(a1 + 3528) = v4;
  *(_OWORD *)(a1 + 3536) = 0u;
  *(_OWORD *)(a1 + 3552) = 0u;
  *(void *)(a1 + 3568) = 0LL;
  *(void *)(a1 + 3576) = &off_79438;
  *(void *)(a1 + 3584) = v4;
  *(_OWORD *)(a1 + 3592) = 0u;
  *(_OWORD *)(a1 + 3608) = 0u;
  *(void *)(a1 + 3624) = &off_791D0;
  *(void *)(a1 + 3632) = v4;
  *(_OWORD *)(a1 + 3640) = 0u;
  *(_OWORD *)(a1 + 3656) = 0u;
  *(void *)(a1 + 3672) = a1 + 3624;
  *(void *)(a1 + 3680) = 64LL;
  *(void *)(a1 + 3688) = &off_79228;
  *(void *)(a1 + 3696) = v4;
  *(_OWORD *)(a1 + 3704) = 0u;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(void *)(a1 + 3736) = a1 + 3688;
  *(void *)(a1 + 3744) = 64LL;
  *(void *)(a1 + 3752) = 0LL;
  *(void *)(a1 + 3760) = &off_79330;
  *(void *)(a1 + 3768) = v4;
  *(_OWORD *)(a1 + 3792) = 0u;
  *(_OWORD *)(a1 + 3776) = 0u;
  *(void *)(a1 + 3808) = a1 + 3760;
  *(void *)(a1 + 3816) = 8LL;
  *(void *)(a1 + 3824) = &off_79228;
  *(void *)(a1 + 3832) = v4;
  *(_OWORD *)(a1 + 3856) = 0u;
  *(_OWORD *)(a1 + 3840) = 0u;
  *(void *)(a1 + 3872) = a1 + 3824;
  *(void *)(a1 + 3880) = 8LL;
  *(void *)(a1 + 3888) = &off_79280;
  *(void *)(a1 + 3896) = v4;
  *(_OWORD *)(a1 + 3920) = 0u;
  *(_OWORD *)(a1 + 3904) = 0u;
  *(void *)(a1 + 3936) = a1 + 3888;
  *(void *)(a1 + 3944) = 8LL;
  *(void *)(a1 + 4504) = 0LL;
  *(_DWORD *)(a1 + 4512) = 0;
  *(_DWORD *)(a1 + 4464) = -1;
  *(void *)(a1 + 4472) = 0LL;
  *(void *)(a1 + 4480) = a1 + 4472;
  *(void *)(a1 + 4488) = 0LL;
  *(void *)(a1 + 4496) = a1 + 4488;
  *(void *)(a1 + 4688) = 0LL;
  *(_OWORD *)(a1 + 4648) = 0u;
  *(_OWORD *)(a1 + 4664) = 0u;
  *(_OWORD *)(a1 + 4616) = 0u;
  *(_OWORD *)(a1 + 4632) = 0u;
  *(_OWORD *)(a1 + 4584) = 0u;
  *(_OWORD *)(a1 + 4600) = 0u;
  *(_OWORD *)(a1 + 4552) = 0u;
  *(_OWORD *)(a1 + 4568) = 0u;
  *(_OWORD *)(a1 + 4520) = 0u;
  *(_OWORD *)(a1 + 4536) = 0u;
  *(void *)(a1 + 4704) = 0LL;
  *(_DWORD *)(a1 + 4712) = 0;
  *(void *)(a1 + 4720) = 0LL;
  *(_DWORD *)(a1 + 4728) = 0;
  *(_DWORD *)(a1 + 4736) = 0;
  *(void *)(a1 + 4696) = -1LL;
  uint64_t v5 = a1 + 4784;
  uint64_t v6 = 4752LL;
  *(_BYTE *)(a1 + 4732) = 0;
  do
  {
    uint64_t v7 = a1 + v6;
    *(void *)uint64_t v7 = 0LL;
    *(_BYTE *)(v7 + 8) = 0;
    v6 += 16LL;
  }

  while (v7 + 16 != v5);
  *(void *)(a1 + 2544) = 0LL;
  *(_BYTE *)(a1 + 2552) = 1;
  *(_DWORD *)(a1 + 2840) = 0;
  *(_OWORD *)(a1 + 2688) = 0u;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(_DWORD *)(a1 + 2720) = 0;
  *(_DWORD *)(a1 + 2936) = 16;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 2976) = 0LL;
  *(_DWORD *)(a1 + 2984) = 0;
  *(_DWORD *)(a1 + 2996) = 0;
  *(void *)(a1 + 2952) = 0LL;
  size_t v15 = 8LL;
  unint64_t v16 = 0LL;
  if (sysctlbyname("hw.memsize", &v16, &v15, 0LL, 0LL))
  {
    fprintf( __stderrp,  "AGX: %s:%d:%s: !!! Verification failed: %s\n",  "agxs_util.cpp",  369,  "size_t getSystemMemorySize()",  "status == 0");
    syslog( 3,  "AGX: %s:%d:%s: !!! Verification failed: %s\n",  "agxs_util.cpp",  369,  "size_t getSystemMemorySize()",  "status == 0");
    goto LABEL_13;
  }

  *(void *)(a1 + 2528) = v16 >> 1;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 3048) = 0u;
  *(_OWORD *)(a1 + 3064) = 0u;
  *(_OWORD *)(a1 + 3080) = 0u;
  *(_OWORD *)(a1 + 3096) = 0u;
  *(_OWORD *)(a1 + 3112) = 0u;
  *(_OWORD *)(a1 + 3128) = 0u;
  *(_OWORD *)(a1 + 3144) = 0u;
  *(_OWORD *)(a1 + 3160) = 0u;
  *(_OWORD *)(a1 + 3176) = 0u;
  *(_OWORD *)(a1 + 3192) = 0u;
  uint64_t v8 = malloc_zone_calloc((malloc_zone_t *)qword_7C218, 1uLL, 0x44uLL);
  if (!v8
    || (*(void *)(a1 + 4000) = v8, (__int128 v9 = malloc_zone_calloc((malloc_zone_t *)qword_7C218, 1uLL, 0x44uLL)) == 0LL))
  {
LABEL_13:
    abort();
  }

  *(void *)(a1 + 4008) = v9;
  if (!dword_7C464)
  {
    unsigned int v10 = malloc_zone_calloc((malloc_zone_t *)qword_7C218, 1uLL, 0x1A0uLL);
    if (v10)
    {
      *(void *)(a1 + 4128) = v10;
      goto LABEL_9;
    }

    goto LABEL_13;
  }

void sub_228A4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 4000);
  if (v2)
  {
    malloc_zone_free((malloc_zone_t *)qword_7C218, v2);
    *(void *)(a1 + 4000) = 0LL;
  }

  __int128 v3 = *(void **)(a1 + 4008);
  if (v3)
  {
    malloc_zone_free((malloc_zone_t *)qword_7C218, v3);
    *(void *)(a1 + 4008) = 0LL;
  }

  if (!dword_7C464)
  {
    uint64_t v4 = *(void **)(a1 + 4128);
    if (v4)
    {
      malloc_zone_free((malloc_zone_t *)qword_7C218, v4);
      *(void *)(a1 + 4128) = 0LL;
    }
  }

  uint64_t v5 = *(void **)(a1 + 4816);
  if (v5) {
    operator delete(v5);
  }
  *(void *)(a1 + 4816) = 0LL;
  uint64_t v6 = *(void **)(a1 + 4824);
  if (v6) {
    operator delete(v6);
  }
  *(void *)(a1 + 4824) = 0LL;
  uint64_t v7 = *(void **)(a1 + 4832);
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = 0LL;
  *(void *)(a1 + 4832) = 0LL;
  uint64_t v9 = a1 + 4176;
  do
  {
    uint64_t v10 = *(void *)(v9 + v8);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
    *(void *)(v9 + v8) = 0LL;
    v8 += 8LL;
  }

  while (v8 != 256);
  __int128 v11 = *(void **)(a1 + 3952);
  if (v11) {
    operator delete(v11);
  }
  *(void *)(a1 + 3952) = 0LL;
  uint64_t v12 = *(void *)(a1 + 3616);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  *(void *)(a1 + 3616) = 0LL;
  uint64_t v13 = *(void *)(a1 + 3568);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void *)(a1 + 3568) = 0LL;
  uint64_t v14 = *(void *)(a1 + 3560);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  *(void *)(a1 + 3560) = 0LL;
  uint64_t v15 = *(void *)(a1 + 3960);
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 16LL))(v15);
  }
  uint64_t v16 = *(void *)(a1 + 3968);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 128LL))(v16);
  }
  uint64_t v17 = *(void *)(a1 + 3992);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }
  uint64_t v18 = *(void *)(a1 + 2536);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  *(void *)(a1 + 2536) = 0LL;
  uint64_t v19 = *(dispatch_group_s **)(a1 + 4848);
  if (v19)
  {
    dispatch_group_wait(v19, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(*(dispatch_object_t *)(a1 + 4848));
  }

  *(void *)(a1 + 4704) = 0LL;
  *(_DWORD *)(a1 + 4712) = 0;
  *(void *)(a1 + 4720) = 0LL;
  *(_DWORD *)(a1 + 4728) = 0;
  *(_DWORD *)(a1 + 4736) = 0;
  *(void *)(a1 + 4696) = -1LL;
  *(_BYTE *)(a1 + 4732) = 0;
  uint64_t v20 = *(void *)(a1 + 4528);
  if (v20)
  {
    if (v20 == *(void *)(a1 + 4568))
    {
      *(void *)(a1 + 4592) = 0LL;
      *(_OWORD *)(a1 + 4576) = 0u;
      *(_OWORD *)(a1 + 4560) = 0u;
    }

    IOAccelResourceRelease();
    *(void *)(a1 + 4552) = 0LL;
    *(_OWORD *)(a1 + 4520) = 0u;
    *(_OWORD *)(a1 + 4536) = 0u;
  }

  if (*(void *)(a1 + 4568))
  {
    IOAccelResourceRelease();
    *(void *)(a1 + 4592) = 0LL;
    *(_OWORD *)(a1 + 4576) = 0u;
    *(_OWORD *)(a1 + 4560) = 0u;
  }

  uint64_t v21 = *(void **)(a1 + 4600);
  if (v21) {
    malloc_zone_free((malloc_zone_t *)qword_7C218, v21);
  }
  uint64_t v22 = *(void **)(a1 + 4608);
  if (v22) {
    malloc_zone_free((malloc_zone_t *)qword_7C218, v22);
  }
  BOOL v23 = *(void **)(a1 + 4664);
  if (v23) {
    malloc_zone_free((malloc_zone_t *)qword_7C218, v23);
  }
  uint64_t v24 = *(void **)(a1 + 4672);
  if (v24) {
    malloc_zone_free((malloc_zone_t *)qword_7C218, v24);
  }
  unsigned int v25 = *(void **)(a1 + 4472);
  if (v25)
  {
    do
    {
      BOOL v27 = (void *)v25[5];
      uint64_t v26 = (void *)v25[6];
      if (v27)
      {
        v27[6] = v26;
        uint64_t v26 = (void *)v25[6];
      }

      else
      {
        *(void *)(a1 + 4480) = v26;
      }

      *uint64_t v26 = v27;
      if (*v25) {
        IOAccelResourceRelease();
      }
      operator delete(v25);
      unsigned int v25 = v27;
    }

    while (v27);
  }

  sub_B574(a1 + 3928);
  sub_B5C4(a1 + 3864);
  for (uint64_t i = *(void *)(a1 + 3800); i; *(void *)(a1 + 3800) = i)
  {
    uint64_t v29 = *(void *)(i + 80);
    uint64_t i = *(void *)(i + 88);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 3808) + 24LL))(*(void *)(a1 + 3808), v29);
    BOOL v30 = *(void **)(a1 + 3800);
    if (v30) {
      operator delete(v30);
    }
  }

  sub_B5C4(a1 + 3728);
  for (uint64_t j = *(void *)(a1 + 3664); j; *(void *)(a1 + 3664) = j)
  {
    uint64_t v32 = *(void *)(j + 80);
    uint64_t j = *(void *)(j + 88);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 3672) + 24LL))(*(void *)(a1 + 3672), v32);
    int v33 = *(void **)(a1 + 3664);
    if (v33) {
      operator delete(v33);
    }
  }

double gldPopulateContextDispatch(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = sub_24B60;
  *(void *)(a2 + 8) = nullsub_31;
  *(void *)(a2 + 16) = nullsub_31;
  *(void *)(a2 + 24) = nullsub_31;
  *(void *)(a2 + 32) = nullsub_31;
  *(void *)(a2 + 40) = nullsub_31;
  *(void *)(a2 + 48) = nullsub_31;
  *(void *)(a2 + 56) = nullsub_31;
  *(void *)(a2 + 64) = nullsub_31;
  *(void *)(a2 + 72) = nullsub_31;
  *(void *)(a2 + 80) = nullsub_31;
  *(void *)(a2 + 88) = nullsub_31;
  *(void *)(a2 + 96) = nullsub_31;
  *(void *)(a2 + 136) = nullsub_31;
  *(void *)(a2 + 144) = nullsub_31;
  *(void *)(a2 + 152) = nullsub_31;
  *(void *)(a2 + 160) = sub_310CC;
  *(void *)(a2 + 168) = sub_31240;
  *(void *)(a2 + 176) = sub_313CC;
  *(void *)(a2 + 184) = sub_315A0;
  *(void *)(a2 + 192) = sub_22C44;
  double result = 0.0;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  return result;
}

uint64_t sub_22C44()
{
  return 0LL;
}

uint64_t gldUpdateDispatch(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a3;
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 120) = a3;
  if (*(_BYTE *)(v9 + 288)) {
    pthread_mutex_lock((pthread_mutex_t *)(v9 + 48));
  }
  *(_DWORD *)(a1 + 2980) = 0;
  *(_DWORD *)v7 |= *(_DWORD *)(a1 + 836);
  int v10 = *(_DWORD *)(a1 + 2984);
  if ((v10 & 1) != 0)
  {
    *(_DWORD *)(v7 + 8) |= 1u;
    int v10 = *(_DWORD *)(a1 + 2984);
  }

  if ((v10 & 2) != 0) {
    *(_DWORD *)(v7 + 12) |= 0x400000u;
  }
  *(_DWORD *)(a1 + 836) = 0;
  int v11 = *(_DWORD *)(v7 + 4);
  if (v11 < 0)
  {
    int v12 = *(_DWORD *)(*(void *)(a1 + 24) + 8LL);
    if ((v12 & 0x3FF) == 0) {
      int v12 = *(_DWORD *)(*(void *)(a1 + 32) + 584LL) & 0x3FF;
    }
    *(_DWORD *)(a1 + 2976) = v12;
    int v11 = *(_DWORD *)(v7 + 4);
  }

  uint64_t v264 = v7;
  if ((v11 & 0x40000000) != 0)
  {
    gpusLoadTransformFeedbackBuffers(a1);
    if (*(void *)(a1 + 816))
    {
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
      do
      {
        uint64_t v15 = *(void ***)(*(void *)(a1 + 816) + v13);
        if (v15)
        {
          uint64_t GPUVirtualAddress = IOAccelResourceGetGPUVirtualAddress(*v15[2]);
          uint64_t v17 = (*v15)[2];
          v266[v14] = GPUVirtualAddress;
          *(void *)&v265[8 * v14] = v17;
          uint64_t v14 = (v14 + 1);
        }

        v13 += 8LL;
      }

      while (v13 != 32);
      uint64_t v7 = v264;
      if ((_DWORD)v14)
      {
        unint64_t v18 = 0LL;
        uint64_t v19 = *(void *)(a1 + 24);
        do
        {
          uint64_t v20 = v266[v18 / 8];
          unint64_t v21 = *(void *)&v265[v18] + v20;
          uint64_t v22 = *(void *)(v19 + v18 + 15720) + v20;
          v266[v18 / 8] = v22;
          if (v21 >= *(void *)(v19 + v18 + 15752) + v22) {
            unint64_t v21 = *(void *)(v19 + v18 + 15752) + v22;
          }
          *(void *)&v265[v18] = v21 - v22;
          v18 += 8LL;
        }

        while (8LL * v14 != v18);
        (*(void (**)(void, uint64_t *, _BYTE *, uint64_t))(**(void **)(a1 + 2536) + 24LL))( *(void *)(a1 + 2536),  v266,  v265,  v14);
      }
    }

    if (sub_3F88(a1))
    {
      *(_DWORD *)(a1 + 2980) |= 4u;
      *(_DWORD *)(a1 + 2988) |= 2u;
      *(_DWORD *)(a1 + 2996) |= 0x1000u;
    }
  }

  if (*(_WORD *)(v7 + 16)) {
    gpusLoadCurrentSamplers(a1);
  }
  uint64_t v23 = *(unsigned __int16 *)(v7 + 4);
  if (*(_WORD *)(v7 + 4))
  {
    if (*(_BYTE *)(*(void *)(a1 + 16) + 308LL))
    {
      uint64_t v24 = mach_absolute_time();
      gpusLoadCurrentTextures(a1, v23, *(void *)(a1 + 24) + 12704LL);
      *(void *)(a1 + 4744) += mach_absolute_time() - v24;
    }

    else
    {
      gpusLoadCurrentTextures(a1, *(unsigned __int16 *)(v7 + 4), *(void *)(a1 + 24) + 12704LL);
    }
  }

  unsigned int v25 = *(_DWORD *)(a1 + 4168);
  if (v25)
  {
    uint64_t v26 = 0LL;
    uint64_t v27 = *(unsigned int *)(v9 + 392);
    uint64_t v28 = a1 + 4136;
    while (1)
    {
      uint64_t v29 = *(void *)(a1 + 8 * v26 + 200);
      if (v29 && ((v25 >> v26) & 1) != 0)
      {
        uint64_t v30 = v28 + 8 * v26;
        uint64_t v31 = a1 + 8 * v26;
        uint64_t v32 = **(void **)(v31 + 456);
        a4.n128_u8[0] = *(_BYTE *)(v28 + v26);
        a5.n128_f32[0] = (float)a4.n128_u32[0];
        a4.n128_u32[0] = *(_DWORD *)(v32 + 20);
        if (a4.n128_f32[0] >= a5.n128_f32[0]) {
          a4.n128_f32[0] = a5.n128_f32[0];
        }
        (*(void (**)(void, __n128, __n128))(**(void **)(v30 + 40) + 80LL))(*(void *)(v30 + 40), a4, a5);
        if (sub_13ED4((void *)v29))
        {
          int v33 = sub_17850((void *)v29);
          qword_7C370(v33, *(void *)(v29 + 232), *(void *)(v30 + 40));
        }

        if (unk_7C3D0) {
          unk_7C3D0(a1, v29, v26, v264);
        }
        if (byte_7C004 && (*(_BYTE *)(*(void *)(v30 + 40) + 38LL) & 0x20) != 0 && *(_DWORD *)(v29 + 240)) {
          return 0LL;
        }
        if (sub_1393C((void *)v29))
        {
          xmmword_7C350(*(unsigned __int16 *)(*(void *)v29 + 192LL));
          if ((*(_DWORD *)(*(void *)(v29 + 392) + 24LL) - 37886) >= 0x10)
          {
            xmmword_7C350(*(unsigned __int16 *)(*(void *)v29 + 192LL));
            if (!*(_DWORD *)(*(void *)(v29 + 392) + 84LL)) {
              (*(void (**)(void, BOOL))(**(void **)(v29 + 232) + 112LL))( *(void *)(v29 + 232),  ***(unsigned __int16 ***)(v31 + 456) != 9728);
            }
          }
        }

        if ((*(_BYTE *)(*(void *)(v30 + 40) + 38LL) & 0x20) != 0)
        {
          xmmword_7C350(*(unsigned __int16 *)(*(void *)v29 + 192LL));
          v34.n128_u32[0] = 0;
          v35.n128_u32[0] = 0;
          (*(void (**)(__n128, __n128))(**(void **)(v30 + 40) + 24LL))(v34, v35);
        }

        (*(void (**)(void, uint64_t))(**(void **)(v30 + 40) + 96LL))(*(void *)(v30 + 40), v27);
        unint64_t v36 = *(void *)(a1 + 4904) | ((unint64_t)(*(_DWORD *)(v29 + 240) != 0) << 19);
        *(void *)(a1 + 4904) = v36;
        a4.n128_u32[0] = *(_DWORD *)(**(void **)(v31 + 456) + 16LL);
        *(void *)(a1 + 4904) = *(_DWORD *)(*(void *)(v30 + 40) + 36LL) & 0x10000 | ((unint64_t)(a4.n128_f32[0] != 1.0) << 17) | v36;
      }

      if (++v26 == 32)
      {
        *(_DWORD *)(a1 + 4168) = 0;
        break;
      }
    }
  }

  uint64_t v37 = v264;
  if (*(unsigned __int8 *)(v264 + 18) << 16)
  {
    unsigned int v38 = *(unsigned __int8 *)(v264 + 18);
    do
    {
      uint64_t v39 = __clz(__rbit32(v38));
      uint64_t v40 = *(void *)(a1 + 8LL * v39 + 456);
      if (v40)
      {
        float v41 = *(float *)(*(void *)(a1 + 24) + 4 * v39 + 13988) + *(float *)(*(void *)v40 + 28LL);
        uint64_t v42 = a1 + 4 * v39;
        if (v41 != *(float *)(v42 + 4432))
        {
          *(float *)(v42 + 4432) = v41;
          (*(void (**)(void))(**(void **)(a1 + 8 * v39 + 4176) + 16LL))(*(void *)(a1 + 8 * v39 + 4176));
          *(_DWORD *)(a1 + 2980) |= 0x80u;
        }
      }

      v38 ^= 1 << v39;
    }

    while (v38);
  }

  if ((*(_BYTE *)(v264 + 6) & 0x80) != 0) {
    gpumLoadCurrentQueries(a1, sub_31F1C, sub_31FC4);
  }
  unsigned int v43 = *(unsigned __int16 *)(a1 + 3360);
  int v44 = (v43 >> 9) & 1;
  uint64_t v45 = *(void *)(a1 + 16);
  int v46 = *(unsigned __int8 *)(v45 + 309);
  __int16 v47 = v43 & 0xFCFF | ((v46 & 1) << 9);
  int v48 = *(_DWORD *)(a1 + 2976);
  int v49 = v48 ^ (v43 >> 8);
  LOWORD(v43) = (_WORD)v48 << 8;
  *(_WORD *)(a1 + 3360) = v47 | ((_WORD)v48 << 8) & 0x100;
  unsigned int v50 = *(_DWORD *)(a1 + 3368);
  int v51 = *(unsigned __int8 *)(v45 + 309);
  unsigned int v52 = v50 & 0xFFF7FFFF | ((v51 & 1) << 19);
  *(_DWORD *)(a1 + 3368) = v52;
  if ((v43 & 0x100) != 0 && !*(void *)(*(void *)(a1 + 40) + 360LL))
  {
    unsigned int v55 = v52 | 0x40000;
    *(_DWORD *)(a1 + 3368) = v52 | 0x40000;
    uint64_t v56 = *(void *)(a1 + 24);
    BOOL v54 = *(_BYTE *)(v56 + 13104) != 0;
    int v53 = 1;
  }

  else
  {
    int v53 = 0;
    BOOL v54 = 0;
    unsigned int v55 = v50 & 0xFFF3FFFF | ((v51 & 1) << 19);
    *(_DWORD *)(a1 + 3368) = v55;
    uint64_t v56 = *(void *)(a1 + 24);
    unsigned int v52 = v50;
  }

  int v57 = v44 ^ v46;
  int v58 = v49 & 1;
  uint64_t v59 = v56 + 12732;
  if ((v55 & 0x40000) != 0) {
    int v60 = (*(_BYTE *)(v56 + 13104) != 0) << 16;
  }
  else {
    int v60 = 0;
  }
  int v61 = v58 | v57;
  unsigned int v62 = v60 | v55 & 0xFFFEFFFF;
  *(_DWORD *)(a1 + 3368) = v62;
  int v63 = *(unsigned __int8 *)(v56 + 13105);
  unsigned int v64 = v62 & 0xFFFDFFFF | ((v63 & 1) << 17);
  *(_DWORD *)(a1 + 3368) = v64;
  BOOL v65 = (!*(_BYTE *)(v56 + 12932)
      || (*(_WORD *)(v56 + 13070) & 0x100) == 0
      || (*(_DWORD *)(**(void **)(a1 + 48) + 200LL) & 0x100) == 0)
     && ((*(_BYTE *)(v56 + 13372) & 1) == 0
      || (*(_BYTE *)(**(void **)(a1 + 48) + 201LL) & 2) == 0
      || (*(_WORD *)(v56 + 13070) & 0x600) == 0
      || *(_WORD *)(v56 + 13334) == 7680
      && *(_WORD *)(v56 + 13336) == 7680
      && *(_WORD *)(v56 + 13338) == 7680
      && *(_WORD *)(v56 + 13366) == 7680
      && *(_WORD *)(v56 + 13368) == 7680
      && *(_WORD *)(v56 + 13370) == 7680)
     && *(_DWORD *)(a1 + 4464) == -1;
  *(_DWORD *)(a1 + 3368) = v64 & 0xFFFFFFEF | (16 * v65);
  if (v61)
  {
    ++*(_DWORD *)(a1 + 2500);
    int v61 = 0x40000;
  }

  if (((v50 >> 19) & 1) != v51
    || ((v50 >> 18) & 1) != v53
    || (HIWORD(v52) & 1) != v54
    || ((v55 >> 17) & 1) != v63
    || ((v55 >> 4) & 1) != v65)
  {
    ++*(_DWORD *)(a1 + 2516);
    v61 |= 0x400000u;
  }

  int v66 = *(_DWORD *)(v264 + 12) | v61;
  *(_DWORD *)(v264 + 12) = v66;
  if (*(_BYTE *)(v264 + 11))
  {
    __int16 v67 = *(_WORD *)(v56 + 15300);
    __int16 v68 = *(_WORD *)(a1 + 3360);
    *(_WORD *)(a1 + 3360) = v68 & 0xFF00 | v67;
    if (v68 != v67)
    {
      ++*(_DWORD *)(a1 + 2500);
      int v69 = 0x40000;
    }

    else
    {
      int v69 = 0;
    }

    int v66 = *(_DWORD *)(v264 + 12) | v69;
    *(_DWORD *)(v264 + 12) = v66;
  }

  int v70 = *(_DWORD *)v264;
  if ((*(_DWORD *)v264 & 0x20020003) != 0)
  {
    if ((v70 & 1) != 0)
    {
      unsigned int v72 = *(_DWORD *)(a1 + 3368);
      if (*(_BYTE *)(v59 + 2))
      {
        BOOL v73 = (*(_DWORD *)(a1 + 3368) & 0x800) == 0;
        int v74 = v72 | 0x800;
        *(_DWORD *)(a1 + 3368) = v72 | 0x800;
        int v75 = (unsigned __int16)v72 >> 12;
        switch(*(_WORD *)v59)
        {
          case 0x200:
            int v71 = v73 | v75 ^ 1;
            int v76 = 4096;
            break;
          case 0x201:
            int v71 = (v73 | v75) ^ 2;
            int v76 = 0x2000;
            break;
          case 0x202:
            int v71 = (v73 | v75) ^ 6;
            int v76 = 24576;
            break;
          case 0x203:
            int v71 = v73 | v75 ^ 3;
            int v76 = 12288;
            break;
          case 0x204:
            int v71 = (v73 | v75) ^ 4;
            int v76 = 0x4000;
            break;
          case 0x205:
            int v71 = v73 | v75 ^ 7;
            int v76 = 28672;
            break;
          case 0x206:
            int v71 = v73 | v75 ^ 5;
            int v76 = 20480;
            break;
          case 0x207:
            int v71 = (v73 | v75) ^ 8;
            int v76 = 0x8000;
            break;
          default:
            int v76 = 0;
            int v71 = v73 | v75;
            break;
        }

        *(_DWORD *)(a1 + 3368) = v76 | v74 & 0xFFFF0FFF;
        *(void *)(a1 + 4904) |= 1uLL;
      }

      else
      {
        int v71 = (v72 >> 11) & 1 | ((unsigned __int16)v72 >> 12);
        *(_DWORD *)(a1 + 3368) = v72 & 0xFFFF07FF;
      }
    }

    else
    {
      int v71 = 0;
    }

    if ((v70 & 0x20002) != 0)
    {
      unsigned int v78 = *(_DWORD *)(a1 + 3368);
      int v79 = *(unsigned __int8 *)(v59 + 315);
      BOOL v80 = *(_BYTE *)(v59 + 315) != 0;
      unsigned int v81 = v78 & 0xFFFFFFDF | (32 * v80);
      *(_DWORD *)(a1 + 3368) = v81;
      BOOL v82 = *(_BYTE *)(v59 + 116) != 0;
      if (v79) {
        BOOL v82 = 0;
      }
      unsigned int v83 = *(_DWORD *)(a1 + 3384);
      v71 |= (v78 >> 5) & 1 ^ v80 | v83 & 1 ^ v82;
      int v84 = v80 & 0x7FFFFFF ^ 1;
      if (!*(_BYTE *)(v59 + 116)) {
        int v84 = 0;
      }
      unsigned int v85 = v84 | v83 & 0xFFFFFFFE;
      *(_DWORD *)(a1 + 3384) = v85;
      if (v79)
      {
        int v86 = (v78 >> 6) & 0x1F;
        else {
          int v87 = dword_70ECC[(unsigned __int16)(*(_WORD *)(v59 + 312) - 5376)];
        }
        v71 |= v87 ^ v86;
        unsigned int v88 = v81 & 0xFFFFF83F | (v87 << 6);
      }

      else
      {
        unsigned int v88 = v81 & 0xFFFFF83F;
      }

      *(_DWORD *)(a1 + 3368) = v88;
      if (!v84)
      {
        *(_DWORD *)(a1 + 3384) = 0;
        if ((v70 & 0x20000000) != 0) {
          goto LABEL_128;
        }
        goto LABEL_132;
      }

      int v89 = sub_642DC(*(unsigned __int16 *)(v59 + 4));
      int v262 = v89 ^ (v83 >> 1) & 0x1F;
      unsigned int v90 = v85 & 0xFFFFFFC1 | (2 * v89);
      *(_DWORD *)(a1 + 3384) = v90;
      int v91 = sub_642DC(*(unsigned __int16 *)(v59 + 6));
      int v92 = v91 ^ (v83 >> 6) & 0x1F;
      unsigned int v93 = v90 & 0xFFFFF81F | (v91 << 6);
      *(_DWORD *)(a1 + 3384) = v93;
      int v94 = sub_642DC(*(unsigned __int16 *)(v59 + 8));
      int v95 = v94 ^ ((unsigned __int16)v83 >> 11);
      unsigned int v96 = v93 & 0xFFFF03FF | (v94 << 11);
      *(_DWORD *)(a1 + 3384) = v96;
      int v97 = sub_642DC(*(unsigned __int16 *)(v59 + 10));
      int v98 = v97 ^ HIWORD(v83) & 0x1F;
      unsigned int v99 = v96 & 0xFFE07FFF | (v97 << 16);
      *(_DWORD *)(a1 + 3384) = v99;
      int v100 = sub_643BC(*(unsigned __int16 *)(v59 + 12));
      int v101 = v100 ^ (v83 >> 21) & 7;
      unsigned int v102 = v99 & 0xFF0FFFFF | (v100 << 21);
      *(_DWORD *)(a1 + 3384) = v102;
      int v103 = sub_643BC(*(unsigned __int16 *)(v59 + 14));
      int v104 = v101 | v103 ^ HIBYTE(v83) & 7;
      uint64_t v37 = v264;
      v71 |= v262 | v92 | v95 | v98 | v104;
      *(_DWORD *)(a1 + 3384) = v102 & 0xF8FFFFFF | (v103 << 24);
      *(void *)(a1 + 4904) |= 2uLL;
    }

    if ((v70 & 0x20000000) != 0)
    {
LABEL_128:
      unsigned int v105 = *(_DWORD *)(a1 + 3368);
      if (*(_BYTE *)(**(void **)(a1 + 48) + 182LL))
      {
        int v106 = *(unsigned __int8 *)(v59 + 2677);
        int v107 = *(_DWORD *)(a1 + 3368) & 1 ^ v106;
        unsigned int v108 = v105 & 0xFFFFFFFE | v106 & 1;
        *(_DWORD *)(a1 + 3368) = v108;
        int v109 = *(unsigned __int8 *)(v59 + 2678);
        int v110 = (v105 >> 1) & 1 ^ v109;
        unsigned int v111 = v108 & 0xFFFFFFFD | (2 * (v109 & 1));
        *(_DWORD *)(a1 + 3368) = v111;
        int v112 = *(unsigned __int8 *)(v59 + 2679);
        int v113 = (v105 >> 2) & 1 ^ v112;
        unsigned int v114 = v111 & 0xFFFFFFFB | (4 * (v112 & 1));
        *(_DWORD *)(a1 + 3368) = v114;
        int v115 = *(unsigned __int8 *)(v59 + 2680);
        *(_DWORD *)(a1 + 3368) = v114 & 0xFFFFFFF7 | (8 * (v115 & 1));
        *(void *)(a1 + 4904) |= ((unint64_t)(*(_BYTE *)(v59 + 2678) != 0) << 7) | ((unint64_t)(*(_BYTE *)(v59 + 2677) != 0) << 8) | ((unint64_t)(*(_BYTE *)(v59 + 2679) != 0) << 9);
        if (!(v107 | v110 | v113 | (v105 >> 3) & 1 ^ v115 | v71)) {
          goto LABEL_135;
        }
LABEL_133:
        ++*(_DWORD *)(a1 + 2516);
        int v116 = 0x400000;
LABEL_136:
        int v66 = *(_DWORD *)(v37 + 12) | v116;
        *(_DWORD *)(v37 + 12) = v66;
        goto LABEL_137;
      }

      *(_DWORD *)(a1 + 3368) = v105 & 0xFFFFFFF0;
      if (v71 | ((v105 & 0xF) != 0)) {
        goto LABEL_133;
      }
LABEL_135:
      int v116 = 0;
      goto LABEL_136;
    }

LABEL_132:
    if (v71) {
      goto LABEL_133;
    }
    goto LABEL_135;
  }

LABEL_137:
  if (v66 < 0)
  {
    int v117 = *(_DWORD *)(a1 + 144);
    if (*(_WORD *)(*(void *)(a1 + 24) + 4LL))
    {
      if (*(_WORD *)(*(void *)(a1 + 24) + 4LL) == 1) {
        v117 |= 0x100u;
      }
      else {
        v117 |= 0x100100u;
      }
    }

    int v118 = *(_DWORD *)(a1 + 136);
    if (v117 != (v118 & 0x300300))
    {
      *(_DWORD *)(a1 + 136) = v118 & 0xFFCFFCFF | v117;
      int v66 = *(_DWORD *)(v37 + 12) | 0x8C40000;
      *(_DWORD *)(v37 + 12) = v66;
    }
  }

  if ((v66 & 0x1000) != 0)
  {
    gpusLoadCurrentVertexArray(a1);
    if (*(void *)(a1 + 808)) {
      int v119 = sub_201F8;
    }
    else {
      int v119 = sub_22C44;
    }
    *(void *)(a2 + 192) = v119;
    int v66 = *(_DWORD *)(v37 + 12);
  }

  int v120 = (int *)(a1 + 2980);
  if ((v66 & 0x38C40000) != 0)
  {
    if ((v66 & 0x20000000) != 0)
    {
      BOOL v121 = gpumUpdateUniformBuffers(a1) != 0;
      int v66 = *(_DWORD *)(v37 + 12);
    }

    else
    {
      BOOL v121 = 1;
    }

    if ((v66 & 0x903C0000) == 0)
    {
      if ((v66 & 0x800000) != 0 && *(void *)(a1 + 160))
      {
        uint64_t v130 = *(_BYTE ***)(*(void *)(a1 + 40) + 328LL);
        if (v130)
        {
          if ((**v130 & 1) != 0) {
            unsigned __int8 v131 = *(uint64_t **)(*(void *)(a1 + 40) + 328LL);
          }
          else {
            unsigned __int8 v131 = 0LL;
          }
        }

        else
        {
          unsigned __int8 v131 = 0LL;
        }

        sub_64424(a1, v131, a3, *(void *)(a1 + 2256), a7, 32);
      }

      if (v60 == ++v61)
      {
        int v76 = *v23;
        int v44 = -v76;
        uint64_t v26 = *(unsigned __int16 *)((char *)v23 - v76);
        goto LABEL_139;
      }
    }

    if (v65 < 7)
    {
      __int16 v68 = 0LL;
    }

    else
    {
      else {
        __int16 v68 = 0LL;
      }
      if (v65 >= 9)
      {
        unsigned int v72 = *(unsigned __int16 *)((char *)&v59[v61 + 3] + v63);
        if (v72)
        {
          BOOL v73 = *(unsigned int *)((char *)&v59[v61 + 1] + v62 + v72);
LABEL_129:
          *(_DWORD *)(a1 + 4 * v68 + 1056) = v73;
          goto LABEL_130;
        }
      }
    }

    BOOL v73 = 0;
    goto LABEL_129;
  }

LABEL_216:
      int v151 = *(_DWORD *)(v37 + 12);
      if ((v151 & 0x903C0000) != 0)
      {
        if (*(_WORD *)(a1 + 136))
        {
          uint64_t v152 = *(void *)(*(void *)(a1 + 40) + 296LL);
          if (*(void *)(a1 + 160) != v152)
          {
            uint64_t v155 = sub_92FC(a1, *(void *)(*(void *)(a1 + 40) + 296LL), v266);
            if (!v155)
            {
              uint64_t v152 = 0LL;
              *(_DWORD *)(a1 + 136) |= 0x80000u;
              *(_DWORD *)(v37 + 12) |= 0x10400000u;
            }

            int v156 = *(_DWORD *)(v266[0] + 16);
            *(_OWORD *)(a1 + 2400) = *(_OWORD *)v266[0];
            *(_DWORD *)(a1 + 2416) = v156;
            sub_64424(a1, 0LL, v153, (uint64_t)v155, v154, 127);
            if (v155) {
              ++*((_DWORD *)v155 + 3);
            }
            *(void *)(a1 + 2256) = v155;
            *(void *)(a1 + 160) = v152;
            int v151 = *(_DWORD *)(v37 + 12);
          }
        }
      }

      if ((v151 & 0x90400000) == 0)
      {
        if ((v151 & 0x8000000) != 0 && *(void *)(a1 + 192))
        {
          uint64_t v163 = *(_BYTE ***)(*(void *)(a1 + 40) + 360LL);
          if (v163)
          {
            if ((**v163 & 0x10) != 0) {
              int v164 = *(uint64_t **)(*(void *)(a1 + 40) + 360LL);
            }
            else {
              int v164 = 0LL;
            }
          }

          else
          {
            int v164 = 0LL;
          }

          sub_64A88(a1, v164, a3, *(void *)(a1 + 2288), a7, 32);
        }

        goto LABEL_364;
      }

      int v157 = *(_DWORD *)(a1 + 136);
      unsigned int v158 = v157 & 0xFFFCFFFF;
      *(_DWORD *)(a1 + 136) = v157 & 0xFFFCFFFF;
      if ((v157 & 0x3F80000) != 0)
      {
        unsigned __int8 v159 = 0LL;
LABEL_227:
        if (!*(_DWORD *)(a1 + 2480))
        {
          uint64_t v160 = 0LL;
          goto LABEL_313;
        }

        uint64_t v160 = 0LL;
        char v161 = 0LL;
        *(void *)(a1 + 2480) = 0LL;
        *(void *)(a1 + 2488) = 0LL;
        *(_DWORD *)(a1 + 2496) = 0;
        int v162 = 127;
        goto LABEL_306;
      }

      uint64_t v165 = *(void *)(a1 + 40);
      unsigned __int8 v159 = *(uint64_t **)(v165 + 360);
      if (v159 && (*(_BYTE *)*v159 & 0x10) != 0)
      {
        if (!v121)
        {
          unsigned __int8 v159 = 0LL;
          *(_DWORD *)(a1 + 136) = v158 | 0x10000;
          goto LABEL_227;
        }

        v166 = (uint64_t *)(v159[1] + 32);
      }

      else
      {
        uint64_t v160 = *(void *)(v165 + 288);
        if (*(void *)(*(void *)v160 + 8LL) || *(void *)(*(void *)v160 + 16LL))
        {
          unsigned __int8 v159 = 0LL;
          goto LABEL_262;
        }

        unsigned __int8 v159 = 0LL;
        v166 = (uint64_t *)(v165 + 320);
      }

      uint64_t v160 = *v166;
      if (!*v166) {
        goto LABEL_227;
      }
LABEL_262:
      v171 = *(int **)(v160 + 8);
      int v172 = *v171;
      int *v171 = 0;
      uint64_t v173 = *(_DWORD **)(a1 + 16);
      uint64_t v174 = (int *)(v160 + 56);
      if ((v172 & 1) != 0)
      {
        int v187 = v173[89] + 1;
        v173[89] = v187;
        *uint64_t v174 = v187;
        if ((v172 & 2) == 0)
        {
LABEL_264:
          if ((v172 & 4) == 0) {
            goto LABEL_265;
          }
          goto LABEL_303;
        }
      }

      else if ((v172 & 2) == 0)
      {
        goto LABEL_264;
      }

      int v188 = v173[90] + 1;
      v173[90] = v188;
      *(_DWORD *)(v160 + 60) = v188;
      if ((v172 & 4) == 0)
      {
LABEL_265:
        if ((v172 & 8) == 0) {
          goto LABEL_267;
        }
        goto LABEL_266;
      }

LABEL_303:
      int v189 = v173[91] + 1;
      v173[91] = v189;
      *(_DWORD *)(v160 + 64) = v189;
      if ((v172 & 8) == 0)
      {
LABEL_267:
        uint64_t CachedProgram = gpumGetCachedProgram(a1, v160);
        int v177 = *(_DWORD *)(a1 + 2516);
        *(_DWORD *)(v160 + 72) = v177;
        uint64_t v178 = CachedProgram + 32;
        unsigned int v179 = *(_DWORD *)(v160 + 56) != *(_DWORD *)(CachedProgram + 32);
        if (*(_DWORD *)(v160 + 60) != *(_DWORD *)(CachedProgram + 36)) {
          v179 |= 2u;
        }
        if (*(_DWORD *)(v160 + 64) != *(_DWORD *)(CachedProgram + 40)) {
          v179 |= 4u;
        }
        if (*(_DWORD *)(v160 + 68) != *(_DWORD *)(CachedProgram + 44)) {
          v179 |= 8u;
        }
        if (v177 == *(_DWORD *)(CachedProgram + 48)) {
          unsigned int v180 = v179;
        }
        else {
          unsigned int v180 = v179 | 0x10;
        }
        char v161 = *(char **)(CachedProgram + 24);
        if (v161) {
          a7 = v180;
        }
        else {
          a7 = v180 & 0xF;
        }
        if ((a7 & 0x1D) != 0)
        {
          uint64_t v181 = CachedProgram;
          char v161 = sub_64B00(a1, v159, v160, v161, a7);
          uint64_t v182 = *(char **)(v181 + 24);
          if (v161 != v182)
          {
            if (v161)
            {
              ++*((_DWORD *)v161 + 3);
              uint64_t v182 = *(char **)(v181 + 24);
            }

            if (v182)
            {
              int v183 = *((_DWORD *)v182 + 3) - 1;
              *((_DWORD *)v182 + 3) = v183;
              if (!v183) {
                (*(void (**)(char *))(*(void *)v182 + 24LL))(v182);
              }
            }

            *(void *)(v181 + 24) = v161;
          }
        }

        __int128 v184 = *(_OWORD *)v174;
        *(_DWORD *)(v178 + 16) = *(_DWORD *)(v160 + 72);
        *(_OWORD *)uint64_t v178 = v184;
        uint64_t v37 = v264;
        if (!v161) {
          uint64_t v178 = *(void *)(a1 + 16) + 336LL;
        }
        int v185 = *(_DWORD *)v178 != *(_DWORD *)(a1 + 2480);
        if (*(_DWORD *)(v178 + 4) != *(_DWORD *)(a1 + 2484)) {
          v185 |= 2u;
        }
        if (*(_DWORD *)(v178 + 8) != *(_DWORD *)(a1 + 2488)) {
          v185 |= 4u;
        }
        int v186 = *(_DWORD *)(v178 + 16);
        if (*(_DWORD *)(v178 + 12) != *(_DWORD *)(a1 + 2492)) {
          v185 |= 8u;
        }
        if (v186 == *(_DWORD *)(a1 + 2496)) {
          int v162 = v185;
        }
        else {
          int v162 = v185 | 0x10;
        }
        *(_OWORD *)(a1 + 2480) = *(_OWORD *)v178;
        *(_DWORD *)(a1 + 2496) = v186;
        if (v161)
        {
          v162 |= (*(_DWORD *)(v264 + 12) >> 22) & 0x20;
          if (!v162) {
            goto LABEL_313;
          }
        }

        else
        {
          uint64_t v160 = 0LL;
          unsigned __int8 v159 = 0LL;
          *(_DWORD *)(a1 + 136) |= 0x20000u;
          if (!v162) {
            goto LABEL_313;
          }
        }

LABEL_306:
        sub_64A88(a1, v159, a3, (uint64_t)v161, a7, v162);
        int v190 = *(char **)(a1 + 2288);
        if (v161 != v190)
        {
          if (v161)
          {
            ++*((_DWORD *)v161 + 3);
            int v190 = *(char **)(a1 + 2288);
          }

          if (v190)
          {
            int v191 = *((_DWORD *)v190 + 3) - 1;
            *((_DWORD *)v190 + 3) = v191;
            if (!v191) {
              (*(void (**)(char *))(*(void *)v190 + 24LL))(v190);
            }
          }

          *(void *)(a1 + 2288) = v161;
        }

LABEL_313:
        *(void *)(a1 + 192) = v160;
        if (*(_DWORD *)(a1 + 136) < 0x10000u) {
          goto LABEL_364;
        }
        uint64_t v192 = *(void *)(a1 + 40);
        uint64_t v193 = *(void *)(v192 + 304);
        if (*(void *)(a1 + 160) == v193)
        {
LABEL_327:
          uint64_t v201 = *(void *)(v192 + 320);
          if (v160 != v201)
          {
            uint64_t v202 = *(int **)(v201 + 8);
            int v203 = *v202;
            *uint64_t v202 = 0;
            unint64_t v204 = *(_DWORD **)(a1 + 16);
            char v205 = (int *)(v201 + 56);
            if ((v203 & 1) != 0)
            {
              int v220 = v204[89] + 1;
              v204[89] = v220;
              *char v205 = v220;
              if ((v203 & 2) == 0)
              {
LABEL_330:
                if ((v203 & 4) == 0) {
                  goto LABEL_331;
                }
                goto LABEL_357;
              }
            }

            else if ((v203 & 2) == 0)
            {
              goto LABEL_330;
            }

            int v221 = v204[90] + 1;
            v204[90] = v221;
            *(_DWORD *)(v201 + 60) = v221;
            if ((v203 & 4) == 0)
            {
LABEL_331:
              if ((v203 & 8) == 0)
              {
LABEL_333:
                uint64_t v207 = gpumGetCachedProgram(a1, v201);
                int v208 = *(_DWORD *)(a1 + 2516);
                *(_DWORD *)(v201 + 72) = v208;
                uint64_t v209 = v207 + 32;
                int v210 = *(_DWORD *)(v201 + 56) != *(_DWORD *)(v207 + 32);
                if (*(_DWORD *)(v201 + 60) != *(_DWORD *)(v207 + 36)) {
                  v210 |= 2u;
                }
                if (*(_DWORD *)(v201 + 64) != *(_DWORD *)(v207 + 40)) {
                  v210 |= 4u;
                }
                if (*(_DWORD *)(v201 + 68) != *(_DWORD *)(v207 + 44)) {
                  v210 |= 8u;
                }
                if (v208 == *(_DWORD *)(v207 + 48)) {
                  int v211 = v210;
                }
                else {
                  int v211 = v210 | 0x10;
                }
                uint64_t v212 = *(char **)(v207 + 24);
                if (v212) {
                  int v213 = v211;
                }
                else {
                  int v213 = v211 & 0xF;
                }
                if ((v213 & 0x1D) != 0)
                {
                  uint64_t v214 = v207;
                  uint64_t v212 = sub_64B00(a1, 0LL, v201, v212, v213);
                  v215 = *(char **)(v214 + 24);
                  if (v212 != v215)
                  {
                    if (v212)
                    {
                      ++*((_DWORD *)v212 + 3);
                      v215 = *(char **)(v214 + 24);
                    }

                    if (v215)
                    {
                      int v216 = *((_DWORD *)v215 + 3) - 1;
                      *((_DWORD *)v215 + 3) = v216;
                      if (!v216) {
                        (*(void (**)(char *))(*(void *)v215 + 24LL))(v215);
                      }
                    }

                    *(void *)(v214 + 24) = v212;
                  }
                }

                __int128 v217 = *(_OWORD *)v205;
                *(_DWORD *)(v209 + 16) = *(_DWORD *)(v201 + 72);
                *(_OWORD *)uint64_t v209 = v217;
                if (v212)
                {
                  __int128 v218 = *(_OWORD *)v205;
                  *(_DWORD *)(a1 + 2496) = *(_DWORD *)(v201 + 72);
                  *(_OWORD *)(a1 + 2480) = v218;
                  uint64_t v219 = *((void *)v212 + 6);
                  sub_64228( (uint64_t)v212,  127,  *(void *)(a1 + 24) + 15696LL,  0LL,  56,  1984,  256,  (_DWORD *)(a1 + 2980),  (_DWORD *)(a1 + 2996),  (_DWORD *)(a1 + 2992),  v219);
                  *(void *)(a1 + 3512) = v219;
                  ++*((_DWORD *)v212 + 3);
                }

                else
                {
                  uint64_t v223 = *(void *)(a1 + 16);
                  int v224 = *(_DWORD *)(v223 + 352);
                  *(_OWORD *)(a1 + 2480) = *(_OWORD *)(v223 + 336);
                  *(_DWORD *)(a1 + 2496) = v224;
                }

                uint64_t v37 = v264;
                char v225 = *(_DWORD **)(a1 + 2288);
                if (v225)
                {
                  int v226 = v225[3] - 1;
                  v225[3] = v226;
                  if (!v226) {
                    (*(void (**)(_DWORD *))(*(void *)v225 + 24LL))(v225);
                  }
                }

                *(void *)(a1 + 2288) = v212;
                *(void *)(a1 + 192) = v201;
                goto LABEL_364;
              }

LABEL_332:
              int v206 = v204[92] + 1;
              v204[92] = v206;
              *(_DWORD *)(v201 + 68) = v206;
              goto LABEL_333;
            }

LABEL_357:
            int v222 = v204[91] + 1;
            v204[91] = v222;
            *(_DWORD *)(v201 + 64) = v222;
            if ((v203 & 8) == 0) {
              goto LABEL_333;
            }
            goto LABEL_332;
          }

LABEL_364:
          if ((*(_DWORD *)(v37 + 12) & 0x90000000) != 0)
          {
            for (uint64_t i = 328LL; i != 368; i += 8LL)
            {
              BOOL v228 = *(void **)(*(void *)(a1 + 40) + i);
              if (v228)
              {
                uint64_t v229 = v228[1];
                *(_DWORD *)(v229 + 64) = 0;
                bzero(*(void **)(v229 + 48), ((*(_DWORD *)(*v228 + 40LL) + 31) >> 3) & 0x1FFFFFFC);
                uint64_t v230 = v228[1];
                *(_DWORD *)(v230 + 56) = *(_DWORD *)(*v228 + 40LL);
                *(_DWORD *)(v230 + 60) = -1;
              }
            }
          }

          goto LABEL_369;
        }

        if (v193)
        {
          uint64_t v194 = sub_92FC(a1, *(void *)(v192 + 304), v266);
          char v195 = v194;
          if (v194)
          {
            int v196 = *(_DWORD *)(v266[0] + 16);
            *(_OWORD *)(a1 + 2400) = *(_OWORD *)v266[0];
            *(_DWORD *)(a1 + 2416) = v196;
            uint64_t v197 = *((void *)v194 + 6);
            if (dword_7C464) {
              int v198 = 125;
            }
            else {
              int v198 = 123;
            }
            sub_64228( (uint64_t)v194,  127,  *(void *)(a1 + 24) + 15632LL,  0LL,  15,  v198,  16,  (_DWORD *)(a1 + 2980),  (_DWORD *)(a1 + 2996),  (_DWORD *)(a1 + 2992),  v197);
            *(void *)(a1 + 3504) = v197;
            ++*((_DWORD *)v195 + 3);
            goto LABEL_323;
          }
        }

        else
        {
          char v195 = 0LL;
        }

        *(void *)(a1 + 3504) = 0LL;
LABEL_323:
        unsigned int v199 = *(_DWORD **)(a1 + 2256);
        if (v199)
        {
          int v200 = v199[3] - 1;
          v199[3] = v200;
          if (!v200) {
            (*(void (**)(_DWORD *))(*(void *)v199 + 24LL))(v199);
          }
        }

        *(void *)(a1 + 2256) = v195;
        *(void *)(a1 + 160) = v193;
        uint64_t v192 = *(void *)(a1 + 40);
        uint64_t v160 = *(void *)(a1 + 192);
        goto LABEL_327;
      }

LABEL_266:
      int v175 = v173[92] + 1;
      v173[92] = v175;
      *(_DWORD *)(v160 + 68) = v175;
      goto LABEL_267;
    }

    int v122 = *(_DWORD *)(a1 + 136);
    unsigned int v123 = v122 & 0xFFF7FF00;
    *(_DWORD *)(a1 + 136) = v122 & 0xFFF7FF00;
    if ((v122 & 0x3F03F00) != 0)
    {
      unsigned int v124 = 0LL;
LABEL_156:
      if (*(_DWORD *)(a1 + 2400))
      {
        uint64_t v125 = 0LL;
        int v126 = 0LL;
        *(void *)(a1 + 2400) = 0LL;
        *(void *)(a1 + 2408) = 0LL;
        *(_DWORD *)(a1 + 2416) = 0;
        int v127 = 127;
        goto LABEL_158;
      }

      uint64_t v125 = 0LL;
LABEL_215:
      *(void *)(a1 + 160) = v125;
      goto LABEL_216;
    }

    uint64_t v132 = *(void *)(a1 + 40);
    unsigned int v124 = *(uint64_t **)(v132 + 328);
    if (!v124 || (int v133 = *(_DWORD *)*v124, (v133 & 1) == 0))
    {
      unsigned int v124 = 0LL;
      int v134 = (uint64_t *)(v132 + 256);
      goto LABEL_174;
    }

    if (v121)
    {
      if ((v133 & 2) != 0)
      {
        int v170 = 32;
      }

      else if ((v133 & 4) != 0)
      {
        int v170 = 64;
      }

      else
      {
        if ((v133 & 8) == 0)
        {
          int v134 = (uint64_t *)v124[1];
LABEL_174:
          uint64_t v125 = *v134;
          if (!*v134) {
            goto LABEL_156;
          }
          BOOL v135 = *(int **)(v125 + 8);
          int v136 = *v135;
          *BOOL v135 = 0;
          char v137 = *(_DWORD **)(a1 + 16);
          unsigned int v138 = (int *)(v125 + 56);
          if ((v136 & 1) != 0)
          {
            int v167 = v137[89] + 1;
            v137[89] = v167;
            *unsigned int v138 = v167;
            if ((v136 & 2) == 0)
            {
LABEL_177:
              if ((v136 & 4) == 0) {
                goto LABEL_178;
              }
              goto LABEL_250;
            }
          }

          else if ((v136 & 2) == 0)
          {
            goto LABEL_177;
          }

          int v168 = v137[90] + 1;
          v137[90] = v168;
          *(_DWORD *)(v125 + 60) = v168;
          if ((v136 & 4) == 0)
          {
LABEL_178:
            if ((v136 & 8) == 0) {
              goto LABEL_180;
            }
            goto LABEL_179;
          }

LABEL_250:
          int v169 = v137[91] + 1;
          v137[91] = v169;
          *(_DWORD *)(v125 + 64) = v169;
          if ((v136 & 8) == 0)
          {
LABEL_180:
            uint64_t v140 = gpumGetCachedProgram(a1, v125);
            int v141 = *(_DWORD *)(a1 + 2500);
            *(_DWORD *)(v125 + 72) = v141;
            uint64_t v142 = v140 + 32;
            unsigned int v143 = *(_DWORD *)(v125 + 56) != *(_DWORD *)(v140 + 32);
            if (*(_DWORD *)(v125 + 60) != *(_DWORD *)(v140 + 36)) {
              v143 |= 2u;
            }
            if (*(_DWORD *)(v125 + 64) != *(_DWORD *)(v140 + 40)) {
              v143 |= 4u;
            }
            if (*(_DWORD *)(v125 + 68) != *(_DWORD *)(v140 + 44)) {
              v143 |= 8u;
            }
            if (v141 == *(_DWORD *)(v140 + 48)) {
              unsigned int v144 = v143;
            }
            else {
              unsigned int v144 = v143 | 0x10;
            }
            int v126 = *(char **)(v140 + 24);
            if (v126) {
              a7 = v144;
            }
            else {
              a7 = v144 & 0xF;
            }
            if ((a7 & 0x1D) != 0)
            {
              uint64_t v145 = v140;
              int v126 = sub_644B4(a1, v124, v125, v126, a7);
              size_t v146 = *(char **)(v145 + 24);
              if (v126 != v146)
              {
                if (v126)
                {
                  ++*((_DWORD *)v126 + 3);
                  size_t v146 = *(char **)(v145 + 24);
                }

                if (v146)
                {
                  int v147 = *((_DWORD *)v146 + 3) - 1;
                  *((_DWORD *)v146 + 3) = v147;
                  if (!v147) {
                    (*(void (**)(char *))(*(void *)v146 + 24LL))(v146);
                  }
                }

                *(void *)(v145 + 24) = v126;
              }
            }

            __int128 v148 = *(_OWORD *)v138;
            *(_DWORD *)(v142 + 16) = *(_DWORD *)(v125 + 72);
            *(_OWORD *)uint64_t v142 = v148;
            uint64_t v37 = v264;
            if (!v126) {
              uint64_t v142 = *(void *)(a1 + 16) + 336LL;
            }
            int v149 = *(_DWORD *)v142 != *(_DWORD *)(a1 + 2400);
            if (*(_DWORD *)(v142 + 4) != *(_DWORD *)(a1 + 2404)) {
              v149 |= 2u;
            }
            if (*(_DWORD *)(v142 + 8) != *(_DWORD *)(a1 + 2408)) {
              v149 |= 4u;
            }
            int v150 = *(_DWORD *)(v142 + 16);
            if (*(_DWORD *)(v142 + 12) != *(_DWORD *)(a1 + 2412)) {
              v149 |= 8u;
            }
            if (v150 == *(_DWORD *)(a1 + 2416)) {
              int v127 = v149;
            }
            else {
              int v127 = v149 | 0x10;
            }
            *(_OWORD *)(a1 + 2400) = *(_OWORD *)v142;
            *(_DWORD *)(a1 + 2416) = v150;
            if (v126)
            {
              v127 |= (*(_DWORD *)(v264 + 12) >> 18) & 0x20;
              if (!v127) {
                goto LABEL_215;
              }
            }

            else
            {
              uint64_t v125 = 0LL;
              unsigned int v124 = 0LL;
              *(_DWORD *)(a1 + 136) |= 0x10u;
              if (!v127) {
                goto LABEL_215;
              }
            }

LABEL_158:
            sub_64424(a1, v124, a3, (uint64_t)v126, a7, v127);
            unsigned int v128 = *(char **)(a1 + 2256);
            if (v126 != v128)
            {
              if (v126)
              {
                ++*((_DWORD *)v126 + 3);
                unsigned int v128 = *(char **)(a1 + 2256);
              }

              if (v128)
              {
                int v129 = *((_DWORD *)v128 + 3) - 1;
                *((_DWORD *)v128 + 3) = v129;
                if (!v129) {
                  (*(void (**)(char *))(*(void *)v128 + 24LL))(v128);
                }
              }

              *(void *)(a1 + 2256) = v126;
            }

            goto LABEL_215;
          }

LABEL_179:
          int v139 = v137[92] + 1;
          v137[92] = v139;
          *(_DWORD *)(v125 + 68) = v139;
          goto LABEL_180;
        }

        int v170 = 128;
      }
    }

    else
    {
      int v170 = 1;
    }

    unsigned int v124 = 0LL;
    *(_DWORD *)(a1 + 136) = v123 | v170;
    goto LABEL_156;
  }

LABEL_369:
  if ((*(_DWORD *)(a1 + 136) & 0xFFFFFEFF) == 0)
  {
    uint64_t v231 = *(void *)(a1 + 3504);
    if (!v231) {
      goto LABEL_410;
    }
    uint64_t v232 = *(void *)(a1 + 3512);
    int v233 = *(_DWORD *)(a1 + 2980);
    if (v232 && (v233 & 8) != 0)
    {
      sub_66D34();
      if (*(void *)(v232 + 1496)) {
        sub_66D34();
      }
      (*(void (**)(void, void))(**(void **)(a1 + 2536) + 16LL))( *(void *)(a1 + 2536),  *(void *)(a1 + 3504));
      uint64_t v231 = *(void *)(a1 + 3504);
      uint64_t v37 = v264;
      if (!v231) {
        goto LABEL_410;
      }
      int v233 = *v120;
      if ((*v120 & 4) == 0)
      {
LABEL_389:
        uint64_t v242 = *(void *)(a1 + 2256);
        if ((v233 & 2) != 0)
        {
          uint64_t v245 = *(void *)(v242 + 48);
          int v246 = *(_DWORD *)(v245 + 76);
          if ((v246 & 2) != 0) {
            *(_DWORD *)(v245 + 72) |= 2u;
          }
          if ((v246 & 4) != 0) {
            *(_DWORD *)(v245 + 72) |= 4u;
          }
          if (sub_662B8(v245, *(void *)(a1 + 40) + 528LL, *(void *)(a1 + 24) + 15784LL)) {
            *(_DWORD *)(a1 + 2988) |= 1u;
          }
          sub_663E0(v245, a1, dword_70EA4);
          goto LABEL_410;
        }

        uint64_t v243 = *(void *)(v242 + 48);
        if (*(_WORD *)(v37 + 4) && (*(_BYTE *)(v243 + 76) & 2) != 0)
        {
          *(_DWORD *)(v243 + 72) |= 2u;
          int v244 = 1;
          if ((v233 & 0x40) == 0) {
            goto LABEL_405;
          }
        }

        else
        {
          int v244 = 0;
          if ((v233 & 0x40) == 0)
          {
LABEL_405:
            if ((*(_BYTE *)(v37 + 15) & 0x20) != 0
              && sub_662B8(v243, *(void *)(a1 + 40) + 528LL, *(void *)(a1 + 24) + 15784LL))
            {
              *(_DWORD *)(a1 + 2988) |= 1u;
              sub_663E0(v243, a1, (_DWORD *)v37);
            }

            else if ((v244 | sub_663E0(v243, a1, (_DWORD *)v37)) != 1)
            {
              goto LABEL_410;
            }

            *(_DWORD *)(a1 + 2996) |= 0x10u;
LABEL_410:
            uint64_t v248 = *(void *)(a1 + 3512);
            if (!v248) {
              goto LABEL_437;
            }
            unsigned int v249 = *(_DWORD *)(v248 + 1460);
            if (v249 <= 6 && ((0x74u >> v249) & 1) != 0) {
              *(_DWORD *)(a1 + 2392) |= 0x20000u;
            }
            int v251 = *(_DWORD *)(a1 + 2980);
            uint64_t v252 = *(void *)(a1 + 2288);
            if ((v251 & 0x10) != 0)
            {
              uint64_t v255 = *(void *)(v252 + 48);
              int v256 = *(_DWORD *)(v255 + 76);
              if ((v256 & 2) != 0) {
                *(_DWORD *)(v255 + 72) |= 2u;
              }
              if ((v256 & 4) != 0) {
                *(_DWORD *)(v255 + 72) |= 4u;
              }
              if (sub_662B8(v255, *(void *)(a1 + 40) + 528LL, *(void *)(a1 + 24) + 15784LL)) {
                *(_DWORD *)(a1 + 2988) |= 1u;
              }
              sub_663E0(v255, a1, dword_70EB8);
              goto LABEL_437;
            }

            uint64_t v253 = *(void *)(v252 + 48);
            if (*(_WORD *)(v37 + 4) && (*(_BYTE *)(v253 + 76) & 2) != 0)
            {
              *(_DWORD *)(v253 + 72) |= 2u;
              int v254 = 1;
              if ((v251 & 0x80) == 0) {
                goto LABEL_432;
              }
            }

            else
            {
              int v254 = 0;
              if ((v251 & 0x80) == 0) {
                goto LABEL_432;
              }
            }

            int v257 = *(_DWORD *)(v253 + 76);
            if ((v257 & 4) != 0) {
              *(_DWORD *)(v253 + 72) |= 4u;
            }
            v254 |= (v257 & 4) >> 2;
LABEL_432:
            if ((*(_BYTE *)(v37 + 15) & 0x20) != 0
              && sub_662B8(v253, *(void *)(a1 + 40) + 528LL, *(void *)(a1 + 24) + 15784LL))
            {
              *(_DWORD *)(a1 + 2988) |= 1u;
              sub_663E0(v253, a1, (_DWORD *)v37);
            }

            else if ((v254 | sub_663E0(v253, a1, (_DWORD *)v37)) != 1)
            {
              goto LABEL_437;
            }

            *(_DWORD *)(a1 + 2996) |= 0x200u;
LABEL_437:
            sub_30C18(*(_DWORD **)(a1 + 3968), a1, (int *)v37);
            if ((*(_DWORD *)(a1 + 136) & 0x100) != 0) {
              uint64_t v77 = 4LL;
            }
            else {
              uint64_t v77 = 5LL;
            }
            (*(void (**)(void))(**(void **)(a1 + 2536) + 72LL))(*(void *)(a1 + 2536));
            if ((*(_BYTE *)(v37 + 14) & 4) != 0)
            {
              uint64_t v258 = *(void *)(*(void *)(a1 + 3504) + 1464LL);
              int8x16_t v259 = *(int8x16_t *)(a1 + 4000);
              *(int8x16_t *)(*(void *)(a1 + 32) + 536LL) = vextq_s8(v259, v259, 8uLL);
              memcpy((void *)v259.i64[0], (const void *)(v258 + 40), 4LL * *(unsigned __int8 *)(v258 + 40) + 4);
              memcpy(*(void **)(a1 + 4008), (const void *)(v258 + 108), 4LL * *(unsigned __int8 *)(v258 + 108) + 4);
              uint64_t v77 = v77 | 2;
            }

            goto LABEL_442;
          }
        }

        int v247 = *(_DWORD *)(v243 + 76);
        if ((v247 & 4) != 0) {
          *(_DWORD *)(v243 + 72) |= 4u;
        }
        v244 |= (v247 & 4) >> 2;
        goto LABEL_405;
      }
    }

    else
    {
      uint64_t v37 = v264;
      if ((v233 & 4) == 0) {
        goto LABEL_389;
      }
    }

    uint64_t v234 = *(int **)(v231 + 1448);
    uint64_t v235 = (unsigned __int16 *)((char *)v234 - *v234);
    if (*v235 >= 5u && (uint64_t v236 = v235[2]) != 0) {
      uint64_t v237 = *(unsigned int *)((char *)v234 + v236);
    }
    else {
      uint64_t v237 = 0LL;
    }
    uint64_t v238 = *(int **)(v231 + 1440);
    unint64_t v239 = (unsigned __int16 *)((char *)v238 - *v238);
    if (*v239 >= 0xBu && (uint64_t v240 = v239[5]) != 0) {
      uint64_t v241 = *(unsigned int *)((char *)v238 + v240);
    }
    else {
      uint64_t v241 = 0LL;
    }
    (***(void (****)(void, uint64_t, uint64_t, BOOL))(a1 + 3960))( *(void *)(a1 + 3960),  v237,  v241,  *(_BYTE *)(*(void *)(a1 + 24) + 15712LL) != 0);
    *(_DWORD *)(a1 + 2996) |= 0x20u;
    int v233 = *(_DWORD *)(a1 + 2980);
    goto LABEL_389;
  }

  sub_30C18(*(_DWORD **)(a1 + 3968), a1, (int *)v37);
  uint64_t v77 = 2LL;
LABEL_442:
  uint64_t v260 = *(void *)(a1 + 16);
  if (*(_BYTE *)(v260 + 288)) {
    pthread_mutex_unlock((pthread_mutex_t *)(v260 + 48));
  }
  *(void *)int v120 = 0LL;
  *(void *)(a1 + 120) = 0LL;
  return v77;
}

BOOL sub_24974(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 2988);
  int v3 = *(_DWORD *)(a1 + 2988);
  unsigned int v4 = *(_DWORD *)(a1 + 2992);
  if (v4)
  {
    char v5 = 0;
    uint64_t v6 = *(_DWORD **)(a1 + 2688);
    uint64_t v7 = *(void *)(a1 + 24);
    unint64_t v8 = *(void *)(v7 + 12688);
    unint64_t v9 = *(void *)(v7 + 12624);
    uint64_t v10 = 200LL;
    while (1)
    {
      int v11 = *(void **)(a1 + v10);
      if (v11)
      {
        __int16 v12 = (~(v9 >> v5) & 0xF) != 0 ? ((~(v8 >> v5) & 0xF) != 0) | 4 : (~(v8 >> v5) & 0xF) != 0;
        if (!sub_63B3C(a1 + 2544, a1, v6, v11, v12, 0, 0LL)) {
          break;
        }
      }

      v5 += 4;
      v10 += 8LL;
      BOOL v13 = v4 > 1;
      v4 >>= 1;
      if (!v13) {
        goto LABEL_9;
      }
    }

LABEL_20:
    BOOL v14 = 0;
  }

  else
  {
LABEL_9:
    if ((v3 & 1) != 0)
    {
      uint64_t v15 = *(void *)(a1 + 40) + 528LL;
      uint64_t v16 = *(void *)(*(void *)(a1 + 3504) + 88LL);
      uint64_t v17 = *(void *)(*(void *)(a1 + 3512) + 88LL);
      unint64_t v18 = v17 | v16;
      while (v18)
      {
        unint64_t v19 = __clz(__rbit64(v18));
        v18 &= ~(1LL << v19);
        uint64_t v20 = *(void *)(v15 + 8 * v19);
        uint64_t v21 = 1 << v19;
        if ((v17 & v21) != 0) {
          __int16 v22 = ((v16 & v21) != 0) | 4;
        }
        else {
          __int16 v22 = (v16 & v21) != 0;
        }
        if (!sub_639A8( a1 + 2544,  *(_DWORD **)(a1 + 2688),  *(_DWORD *)(*(void *)(*(void *)(v20 + 16) + 8LL) + 256LL),  **(void **)(v20 + 16),  v22,  (unsigned int *)(*(void *)(*(void *)(v20 + 16) + 16LL) + 24LL),  0,  0LL)) {
          goto LABEL_20;
        }
      }
    }

    if ((v3 & 2) == 0
      || *(__int16 *)(*(void *)(a1 + 24) + 15714LL) == -1
      || *(_BYTE *)(*(void *)(a1 + 24) + 15713LL))
    {
      BOOL v14 = 1;
    }

    else
    {
      unint64_t v24 = 0LL;
      BOOL v14 = 0;
      do
      {
        uint64_t v25 = *(void *)(*(void *)(a1 + 816) + 8 * v24);
        if (v25
          && !sub_639A8( a1 + 2544,  *(_DWORD **)(a1 + 2688),  *(_DWORD *)(*(void *)(*(void *)(v25 + 16) + 8LL) + 256LL),  **(void **)(v25 + 16),  3,  (unsigned int *)(*(void *)(*(void *)(v25 + 16) + 16LL) + 24LL),  0,  0LL))
        {
          break;
        }

        BOOL v14 = v24++ > 2;
      }

      while (v24 != 4);
    }
  }

  BOOL result = v14;
  *uint64_t v2 = 0LL;
  return result;
}

void sub_24B60(uint64_t a1, int a2, double a3, uint8x8_t a4)
{
  uint64_t v6 = *(void *)(a1 + 24);
  int v7 = *(unsigned __int8 *)(v6 + 13064);
  int v8 = *(unsigned __int8 *)(v6 + 13065);
  int v9 = *(unsigned __int8 *)(v6 + 13066);
  int v10 = *(unsigned __int8 *)(v6 + 13067);
  int v11 = v8 & v7 & v9 & v10;
  int v12 = v8 | v7 | v9 | v10;
  BOOL v14 = (a2 & 0x4000) == 0 || v11 == v12;
  BOOL v15 = (a2 & 0x400) != 0 && *(unsigned __int8 *)(v6 + 13052) != 0xFF;
  char v16 = v14 && !v15;
  int v17 = *(_DWORD *)(a1 + 3000);
  if (*(_DWORD *)(a1 + 3204) != *(_DWORD *)(v6 + 13304))
  {
    if (!v17) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  if (!v17) {
    goto LABEL_24;
  }
  if (*(void *)(a1 + 3188) != *(void *)(v6 + 13288) || *(void *)(a1 + 3196) != *(void *)(v6 + 13296))
  {
LABEL_23:
    *(_BYTE *)(a1 + 3004) = 1;
    goto LABEL_24;
  }

  if (*(_BYTE *)(a1 + 3005)) {
    char v19 = v16;
  }
  else {
    char v19 = 1;
  }
  if ((v19 & 1) == 0)
  {
    char v16 = 0;
    goto LABEL_23;
  }

LABEL_124:
  uint64_t v89 = *(void *)(a1 + 2696);
  *(_BYTE *)(v89 + 1088) = 1;
LABEL_127:
  if (*(_BYTE *)(a1 + 4899))
  {
    if (!v93) {
      goto LABEL_138;
    }
  }

  else
  {
    *(_DWORD *)(*(void *)(a1 + 2688) + 4LL) = 0;
    if (!v93) {
      goto LABEL_138;
    }
  }

  if ((v51 & 0x4000) != 0
    && ((HIWORD(*(_DWORD *)(a1 + 3376)) & (*(_DWORD *)(a1 + 3376) >> 8) & HIBYTE(*(_DWORD *)(a1 + 3376)) & *(_DWORD *)(a1 + 3376) ^ 0xFF) & *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 32LL) + 32LL)) == 0)
  {
    *(int8x8_t *)(a1 + 2940) = vand_s8(*(int8x8_t *)(a1 + 2940), (int8x8_t)0xFFFFFFEFFFFFFFCFLL);
  }

  if (v90) {
    *(_DWORD *)(a1 + 2940) &= ~1u;
  }
  if (v91) {
    *(_DWORD *)(a1 + 2940) &= ~4u;
  }
LABEL_138:
  if ((v51 & 0x4000) == 0)
  {
    if ((v51 & 0x100) == 0) {
      goto LABEL_140;
    }
LABEL_144:
    *(_DWORD *)(a1 + 2944) |= *(_DWORD *)(a1 + 2940) & 3;
    if ((v51 & 0x400) == 0) {
      goto LABEL_142;
    }
LABEL_141:
    *(_DWORD *)(a1 + 2944) |= *(_DWORD *)(a1 + 2940) & 0xC;
    goto LABEL_142;
  }

  *(_DWORD *)(a1 + 2840) = 0;
  *(_DWORD *)(a1 + 2944) |= *(_DWORD *)(a1 + 2940) & 0x10;
  if ((v51 & 0x100) != 0) {
    goto LABEL_144;
  }
LABEL_140:
  if ((v51 & 0x400) != 0) {
    goto LABEL_141;
  }
LABEL_142:
  *(_DWORD *)(a1 + 3376) = v92;
}

void sub_25430(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if ((_DWORD)a3 == -1)
  {
    switch(a4)
    {
      case 0:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Resource list size exceeded (0)";
        break;
      case 1:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Resource list bind offset mismatch (1)";
        break;
      case 2:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Resource list size exceeded (2)";
        break;
      case 3:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Resource list initialization failed (3)";
        break;
      case 4:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Resource list allocation failed (4)";
        break;
      case 5:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Resource list size exceeded (5)";
        break;
      case 6:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Invalid resource flags (6)";
        break;
      case 7:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Invalid resource flags (7)";
        break;
      case 8:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Render target memory exhausted (8)";
        break;
      case 9:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Render target tracking event not found (9)";
        break;
      case 10:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Parameter management resource prepare failed (10)";
        break;
      case 11:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Resource prepare failed (11)";
        break;
      case 12:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Render target prepare failed (12)";
        break;
      case 13:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Hardware command size validation failed (13)";
        break;
      case 14:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Command buffer 3D payload metadata mismatched (14)";
        break;
      case 15:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Command buffer payload offset invalid (15)";
        break;
      case 16:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Hardware command payload sub-type invalid (16)";
        break;
      default:
        __chkstk_darwin();
        v9[0] = 0;
        int v8 = "GL client killed. Unknown error";
        break;
    }

    _os_trace_with_buffer(&dword_0, v8, 0xC1u, v9, 1uLL, 0LL);
    sub_25A6C();
  }

  else
  {
    if ((a3 & 0xFFFFFF00) == 0x200)
    {
      switch(a3 >> 4)
      {
        case 0:
          __chkstk_darwin();
          v9[0] = 0;
          int v7 = "GL client killed. GPU restart, unknown lockup (0)";
          break;
        case 1:
          __chkstk_darwin();
          v9[0] = 0;
          int v7 = "GL client killed. GPU restart, timestamp timeout (1)";
          break;
        case 2:
          __chkstk_darwin();
          v9[0] = 0;
          int v7 = "GL client killed. GPU restart, progress timeout (2)";
          break;
        case 3:
          __chkstk_darwin();
          v9[0] = 0;
          int v7 = "GL client killed. GPU restart, page fault (3)";
          break;
        case 4:
          __chkstk_darwin();
          v9[0] = 0;
          int v7 = "GL client killed. GPU restart, firmware-detected lockup (4)";
          break;
        case 5:
          __chkstk_darwin();
          v9[0] = 0;
          int v7 = "GL client killed. GPU restart, firmware assert (5)";
          break;
        default:
          __chkstk_darwin();
          v9[0] = 0;
          int v7 = "GL client killed. GPU restart, Unknown reason";
          break;
      }

      _os_trace_with_buffer(&dword_0, v7, 0xC1u, v9, 1uLL, 0LL);
    }

    gpusGenerateCrashLog(a1, a2, a3);
  }

void sub_25A6C()
{
  *(int *)((char *)&dword_0 + 1) = -559038737;
}

uint64_t sub_25A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7)
{
  int v8 = (void *)(a1 + ((unint64_t)a2 << 6));
  int v9 = v8 + 139;
  int v10 = v8 + 141;
  uint64_t v11 = a4 - 1;
  uint64_t v12 = -a4;
  uint64_t v13 = (a4 - 1 + v8[141]) & -a4;
  uint64_t v14 = v13 + a3;
  unint64_t v15 = v8[140] - a5;
  if (v13 + a3 > v15)
  {
    unint64_t v18 = (v11 + a3) & v12;
    if (v18 <= v15 - *v9) {
      uint64_t v19 = 0LL;
    }
    else {
      uint64_t v19 = v18 + a5;
    }
    uint64_t result = sub_25B74(a1, a2, v19, a7);
    if (!(_DWORD)result) {
      goto LABEL_8;
    }
    uint64_t v13 = (v11 + *v10) & v12;
    uint64_t v14 = v13 + a3;
    if (v13 + a3 > (unint64_t)(v8[140] - a5))
    {
      uint64_t result = 0LL;
LABEL_8:
      *a6 = 0LL;
      a6[1] = 0LL;
      return result;
    }
  }

  *int v10 = v14;
  uint64_t v21 = IOAccelResourceGetGPUVirtualAddress(v8[144]) + v13 - *v9;
  *a6 = v13;
  a6[1] = v21;
  return 1LL;
}

uint64_t sub_25B74(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = 2688LL;
  if (a4) {
    uint64_t v7 = 4792LL;
  }
  int v8 = *(int32x2_t **)(a1 + v7);
  uint64_t v9 = a2;
  int v10 = (char *)&unk_7C070 + 16 * a2;
  unsigned int v13 = *((_DWORD *)v10 + 1);
  uint64_t v12 = (unsigned int *)(v10 + 4);
  unint64_t v11 = v13;
  if (a4)
  {
    uint64_t result = 0LL;
    if ((v8[5].i32[1] - 1) <= 2 && (v8[1].i32[1] + v8[1].i32[0]) <= 0x3FF)
    {
      unint64_t v15 = *(void *)(a1 + 4768);
      BOOL v16 = v15 >= v11;
      unint64_t v17 = v15 - v11;
      if (v16)
      {
        *(void *)(a1 + 4768) = v17;
LABEL_14:
        ++v8[1].i32[1];
        return !gpusGetDataBuffer(a1, a2, a3)
            && sub_63C40( a1 + 4768,  v8,  *(_DWORD *)(*(void *)(a1 + (v9 << 6) + 1136) + 256LL),  *(void *)(a1 + (v9 << 6) + 1152),  *((_WORD *)&unk_7C070 + 8 * v9 + 4),  (unsigned int *)(*(void *)(a1 + (v9 << 6) + 1144) + 24LL),  1,  *v12);
      }

      int v18 = *(unsigned __int8 *)(a1 + 4776);
      *(void *)(a1 + 4768) = 0LL;
      if (!v18) {
        goto LABEL_14;
      }
      return 0LL;
    }
  }

  else
  {
    uint64_t result = sub_639A8( a1 + 2544,  v8,  *(_DWORD *)(*(void *)(a1 + (v9 << 6) + 1136) + 256LL),  *(void *)(a1 + (v9 << 6) + 1152),  *((_WORD *)&unk_7C070 + 8 * v9 + 4),  (unsigned int *)(*(void *)(a1 + (v9 << 6) + 1144) + 24LL),  1,  *v12);
    if ((_DWORD)result) {
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_25CF4( void *a1, unint64_t a2, unsigned int a3, unsigned int a4, _DWORD *a5, unint64_t *a6)
{
  LODWORD(v8) = a4;
  unint64_t v10 = (a1[141] + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  unint64_t v11 = a1[140] - 16LL;
  uint64_t v12 = a4 * a2;
  unint64_t v13 = v10 + v12;
  if (v10 + v12 > v11)
  {
    uint64_t v15 = a3 * a2;
    if (v10 + v15 <= v11)
    {
      unint64_t v8 = (v11 - v10) / a2;
      unint64_t v13 = v10 + v8 * a2;
    }

    else
    {
      uint64_t result = sub_25B74((uint64_t)a1, 0LL, v12 + 16, 0);
      if (!(_DWORD)result)
      {
LABEL_7:
        *a5 = 0;
        *a6 = 0LL;
        a6[1] = 0LL;
        return result;
      }

      unint64_t v10 = (a1[141] + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
      unint64_t v17 = a1[140] - 16LL;
      unint64_t v13 = v10 + v12;
      if (v10 + v12 > v17)
      {
        if (v10 + v15 > v17)
        {
          uint64_t result = 0LL;
          goto LABEL_7;
        }

        unint64_t v8 = (v17 - v10) / a2;
        unint64_t v13 = v10 + v8 * a2;
      }
    }
  }

  a1[141] = v13;
  *a5 = v8;
  uint64_t v18 = IOAccelResourceGetGPUVirtualAddress(a1[144]) + v10 - a1[139];
  *a6 = v10;
  a6[1] = v18;
  return 1LL;
}

uint64_t sub_25E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = a2;
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_7C048);
  if ((v7 & 1) == 0)
  {
    uint64_t v21 = a1;
    uint64_t v17 = a3;
    uint64_t v19 = a4;
    int v11 = __cxa_guard_acquire(&qword_7C048);
    uint64_t v6 = a2;
    a3 = v17;
    a4 = v19;
    int v12 = v11;
    a1 = v21;
    if (v12)
    {
      __cxa_guard_release(&qword_7C048);
      a1 = v21;
      uint64_t v6 = a2;
      a3 = v17;
      a4 = v19;
    }
  }

  unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_7C058);
  uint64_t v9 = &unk_7C000;
  if ((v8 & 1) == 0)
  {
    uint64_t v22 = a1;
    uint64_t v18 = a3;
    uint64_t v20 = a4;
    uint64_t v16 = v6;
    int v13 = __cxa_guard_acquire(&qword_7C058);
    uint64_t v9 = &unk_7C000;
    uint64_t v6 = v16;
    a3 = v18;
    a4 = v20;
    int v14 = v13;
    a1 = v22;
    if (v14)
    {
      qword_7C050 = (4 * qword_7C040 + 60) & 0xFFFFFFFFFFFFFFC0LL;
      __cxa_guard_release(&qword_7C058);
      uint64_t v9 = (void *)&unk_7C000;
      a1 = v22;
      uint64_t v6 = v16;
      a3 = v18;
      a4 = v20;
    }
  }

  return sub_25A80(a1, 1LL, v6, a3, v9[10], a4, 0);
}

uint64_t sub_25F38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_7C068);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_7C068))
  {
    uint64_t v9 = 56LL;
    qword_7C060 = v9;
    __cxa_guard_release(&qword_7C068);
  }

  uint64_t v7 = sub_25A80(a1, 2LL, a2, 4LL, ((4 * qword_7C060 + 28) & 0xFFFFFFFFFFFFFFE0LL) + dword_7C498, a3, 0);
  if ((_DWORD)v7) {
    (*(void (**)(void, uint64_t, unint64_t))(**(void **)(a1 + 3960) + 56LL))( *(void *)(a1 + 3960),  *a3,  a3[1] + ((a2 + 3) & 0xFFFFFFFFFFFFFFFCLL));
  }
  return v7;
}

BOOL sub_26024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5 = (void *)(a1 + ((unint64_t)a2 << 6));
  uint64_t v6 = a4 - 1;
  uint64_t v7 = -a4;
  unint64_t v8 = v5[140] - a5;
  unint64_t v11 = (v6 + a3) & v7;
  if (v11 <= v8 - v5[139]) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = v11 + a5;
  }
  int v13 = sub_25B74(a1, a2, v12, 0);
  BOOL result = 0LL;
  if (v13) {
    return ((v6 + v5[141]) & (unint64_t)v7) + a3 <= v5[140] - a5;
  }
  return result;
}

void sub_260E4()
{
}

uint64_t sub_260F0(uint64_t a1)
{
  uint64_t v2 = (_BYTE *)(a1 + 4760);
  uint64_t v3 = *(void *)(a1 + 2688);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 + 44);
    if (v4 == 2)
    {
      sub_268AC(a1);
    }

    else if (v4 == 1)
    {
      sub_26240(a1, *(void *)(a1 + 3968));
    }
  }

  *(void *)(a1 + 4752) = 0LL;
  *uint64_t v2 = 1;
  *(void *)(a1 + 4768) = 0LL;
  v2[16] = 1;
  *(_OWORD *)(a1 + 4784) = 0u;
  *(_DWORD *)(a1 + 4800) = 0;
  char v5 = *(void **)(a1 + 4824);
  if (v5) {
    operator delete(v5);
  }
  *(void *)(a1 + 4824) = 0LL;
  uint64_t v6 = *(void **)(a1 + 4816);
  if (v6) {
    operator delete(v6);
  }
  *(void *)(a1 + 4816) = 0LL;
  uint64_t v7 = *(void **)(a1 + 4832);
  if (v7) {
    operator delete(v7);
  }
  *(void *)(a1 + 4832) = 0LL;
  *(void *)(a1 + 4804) = 0LL;
  *(void *)(a1 + 4856) = 0LL;
  *(void *)(a1 + 4872) = 0LL;
  *(void *)(a1 + 4864) = 0LL;
  (*(void (**)(void))(**(void **)(a1 + 2536) + 136LL))(*(void *)(a1 + 2536));
  unint64_t v8 = *(dispatch_group_s **)(a1 + 4848);
  if (v8) {
    dispatch_group_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v9 = *(_DWORD **)(a1 + 2152);
  *uint64_t v9 = 512;
  v9[1] = (*(void *)(a1 + 1128) - *(void *)(a1 + 1112)) >> 2;
  v9 += 2;
  *(void *)(a1 + 2152) = v9;
  *(_DWORD *)(*(void *)(a1 + 2168) + 8LL) = ((unint64_t)v9 - *(void *)(a1 + 2168) - 16) >> 2;
  *(_DWORD *)(a1 + 2392) |= 0x4000u;
  uint64_t result = gpusSubmitDataBuffers(a1);
  v2[136] = 1;
  unint64_t v11 = (unint64_t *)(*(void *)(a1 + 8) + 832LL);
  uint64_t v12 = *(void *)(a1 + 4904);
  do
    unint64_t v13 = __ldaxr(v11);
  while (__stlxr(v13 | v12, v11));
  return result;
}

uint64_t sub_26240(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 4732;
  int v4 = (void *)(a1 + 2688);
  if (*(_DWORD *)(*(void *)(a1 + 2688) + 4LL)) {
    goto LABEL_2;
  }
  (*(void (**)(void, void))(**(void **)(a1 + 2536) + 96LL))( *(void *)(a1 + 2536),  *(void *)(a1 + 2696));
  unint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 264LL))(a2);
  sub_25A80(a1, 1LL, v15, 4LL, 0LL, v47, 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 272LL))(a2, v47[0]);
  sub_28088(a1, v15 >> 2, v47[1]);
  sub_25A80(a1, 2LL, 4LL, 4LL, dword_7C498, v47, 0);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 3960) + 80LL))(*(void *)(a1 + 3960), v47[0]);
  off_7C368(a1, 1LL, 1LL);
  (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 3992) + 40LL))( *(void *)(a1 + 3992),  *(void *)(a1 + 2696) + 312LL,  *(unsigned int *)(a1 + 2944));
  int v16 = *(_DWORD *)(a1 + 2944);
  BOOL v17 = (v16 & 5) != 0;
  if ((v16 & 0xA) == 0) {
    BOOL v17 = 0;
  }
  if ((v16 & 0x30) != 0) {
    BOOL v17 = 1;
  }
  *(_BYTE *)(*(void *)(a1 + 2696) + 837LL) = v17;
  unsigned int v18 = *(_DWORD *)(a1 + 2720);
  if (v18)
  {
    while (1)
    {
      unsigned int v19 = __clz(__rbit32(v18));
      uint64_t v20 = *(void *)(a1 + 8LL * v19 + 2760);
      BOOL v21 = sub_63B3C( a1 + 2544,  a1,  *(_DWORD **)(a1 + 2688),  (void *)v20,  12,  1,  *(unsigned int *)(*(void *)v20 + 104LL));
      if (!v21) {
        goto LABEL_24;
      }
LABEL_25:
      v18 &= ~(1 << v19);
      if (!v18)
      {
        sub_6EE74((uint64_t)v47, a1, *(void **)(a1 + 48), 17, 1);
        if (!*(_DWORD *)(*(void *)(a1 + 2688) + 4LL)) {
          sub_269B0(a1, (unsigned __int8 *)v47);
        }
        uint64_t v22 = *(void *)(a1 + 3752);
        if (v22) {
          sub_27D14(*(float **)(a1 + 2728), v22, (unsigned __int8 *)v47, a1 + 3208);
        }
        goto LABEL_30;
      }
    }

LABEL_30:
  if (!*(void *)(a1 + 3752))
  {
    uint64_t v23 = (_OWORD *)(*(void *)(a1 + 2696) + 312LL);
    __int128 v24 = *(_OWORD *)(*(void *)(a1 + 2696) + 872LL);
    _BYTE v23[8] = *(_OWORD *)(*(void *)(a1 + 2696) + 856LL);
    v23[9] = v24;
    v23[10] = v23[36];
  }

  unsigned int v25 = *(_DWORD *)(a1 + 2840);
  if (v25)
  {
    unint64_t v26 = *(void *)(a1 + 2920);
    uint64_t v27 = (v26 >> 43) & 0x1F;
    if (v27)
    {
      int v28 = ~(-1 << v27);
      do
      {
        uint64_t v29 = __clz(v25) ^ 0x1F;
        LOBYTE(v28) = v28 & ~*(_BYTE *)(a1 + v29 + 2928);
        v25 ^= 1 << v29;
      }

      while (v25);
      *(void *)(a1 + 2920) = v26 & 0xFFFFFFFFFFFF0000LL | v28;
      __int128 v30 = *(_OWORD *)(a1 + 2880);
      __int128 v31 = *(_OWORD *)(a1 + 2896);
      __int128 v32 = *(_OWORD *)(a1 + 2848);
      v45[2] = *(_OWORD *)(a1 + 2864);
      v45[3] = v30;
      __int128 v33 = *(_OWORD *)(a1 + 2912);
      v45[4] = v31;
      v45[5] = v33;
      v45[0] = xmmword_701E0;
      v45[1] = v32;
      int v46 = 68;
      uint64_t v34 = sub_B164(a1 + 3928, v45);
      if (v34)
      {
        uint64_t v35 = v34;
        uint64_t v36 = 56LL;
        if (!*(_DWORD *)(a1 + 2724)) {
          uint64_t v36 = 48LL;
        }
        unsigned int v37 = *(unsigned __int8 *)(**(void **)(a1 + v36) + 182LL);
        if (v37 >= 2)
        {
          if (v37 == 2)
          {
            uint64_t v38 = 2LL;
          }

          else
          {
            uint64_t v38 = 4LL;
            if (v37 >= 5)
            {
              if (dword_7C428 < v37 || v37 > 8) {
                uint64_t v38 = 4LL;
              }
              else {
                uint64_t v38 = 8LL;
              }
            }
          }
        }

        else
        {
          uint64_t v38 = 1LL;
        }

        if ((*(unsigned int (**)(void, uint64_t, uint64_t, void, uint64_t, void))(**(void **)(a1 + 2536)
                                                                                               + 160LL))( *(void *)(a1 + 2536),  v34,  *(void *)(a1 + 2696) + 312LL,  *(unsigned int *)(*(void *)(a1 + 2696) + 1244LL),  v38,  0LL))
        {
          sub_6EE74((uint64_t)v47, a1, *(void **)(a1 + 48), 17, *(_DWORD *)(a1 + 2720) != 0);
          sub_67608( *(int **)(v35 + 40),  *(_DWORD **)(a1 + 2744),  *(void *)(a1 + 2696) + 1276LL,  *(_DWORD *)(*(void *)(a1 + 2696) + 1532LL),  a1 + 3208,  (uint64_t)v47);
        }
      }
    }
  }

LABEL_2:
  else {
    int v5 = 30;
  }
  uint64_t v6 = *(void *)(a1 + 2688);
  if ((*(_DWORD *)(v6 + 8) + v5) < 0x400)
  {
    *(void *)(a1 + 4768) = *(void *)(a1 + 4752);
    *(_BYTE *)(v3 + 44) = *(_BYTE *)(v3 + 28);
    *(void *)(a1 + 4752) = *(void *)(a1 + 2544);
    *(_BYTE *)(v3 + 28) = *(_BYTE *)(a1 + 2552);
    *(void *)(a1 + 2544) = 0LL;
    *(_BYTE *)(a1 + 2552) = 1;
    *(void *)(a1 + 4792) = *(void *)(a1 + 4784);
    *(void *)(a1 + 4784) = v6;
    (*(void (**)(void))(**(void **)(a1 + 2536) + 128LL))(*(void *)(a1 + 2536));
    *(_DWORD *)(a1 + 4808) = *(_DWORD *)(a1 + 4804);
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 16);
    }
    *(_DWORD *)(a1 + 4804) = v7;
    *(_DWORD *)(a1 + 4860) = *(_DWORD *)(a1 + 4856);
    *(_DWORD *)(a1 + 4856) = *(_DWORD *)(a1 + 4872);
    *(_DWORD *)(a1 + 4868) = *(_DWORD *)(a1 + 4864);
    *(_DWORD *)(a1 + 4864) = *(_DWORD *)(a1 + 4876);
    *(void *)(a1 + 4872) = 0LL;
  }

  else
  {
    *(void *)(a1 + 4768) = 0LL;
    *(_BYTE *)(v3 + 44) = 1;
    *(void *)(a1 + 4752) = 0LL;
    *(void *)(a1 + 4804) = 0LL;
    *(_BYTE *)(v3 + 28) = 1;
    *(_OWORD *)(a1 + 4784) = 0u;
    (*(void (**)(void, void))(**(void **)(a1 + 2536) + 120LL))(*(void *)(a1 + 2536), 0LL);
    (*(void (**)(void))(**(void **)(a1 + 2536) + 136LL))(*(void *)(a1 + 2536));
    int v5 = 0;
  }

  uint64_t v8 = *(void *)(a1 + 2688);
  uint64_t v9 = *(unsigned int *)(v8 + 16) + v8;
  if (v9 + 0x2000 == *(void *)(a1 + 2152))
  {
    uint64_t v10 = v9 + 8LL * (*(_DWORD *)(v8 + 8) + v5);
    *(void *)(a1 + 2152) = v10;
    *(_WORD *)(v8 - 6) = (v10 - v8 + 8) >> 2;
  }

  uint64_t v11 = *(void *)(a1 + 2696);
  if (v11)
  {
    if (*(_BYTE *)v3)
    {
      int v12 = *(_DWORD *)(a1 + 4696);
      char v13 = 1;
    }

    else
    {
      char v13 = 0;
      int v12 = -1;
    }

    *(_BYTE *)(v11 + 1124) = v13;
    *(_DWORD *)(v11 + 1120) = v12;
    int v39 = *(_DWORD *)(a1 + 2392);
    *(_DWORD *)(a1 + 2392) = v39 | 0x400;
    if (!*(_BYTE *)(v11 + 1552)) {
      *(_DWORD *)(a1 + 2392) = v39 | 0x600;
    }
    int v40 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 3992) + 48LL))( *(void *)(a1 + 3992),  *(void *)(v11 + 528));
    if (v40) {
      *(_DWORD *)(a1 + 2392) |= 0x40u;
    }
    if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 3992) + 56LL))( *(void *)(a1 + 3992),  *(void *)(v11 + 528)))
    {
      *(_DWORD *)(a1 + 2392) |= 0x80u;
    }

    else if (!v40)
    {
LABEL_51:
      if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 3992) + 64LL))( *(void *)(a1 + 3992),  *(void *)(v11 + 528)))
      {
        *(_DWORD *)(a1 + 2392) |= 0x800u;
      }

      if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 3992) + 72LL))( *(void *)(a1 + 3992),  *(void *)(v11 + 528)))
      {
        *(_DWORD *)(a1 + 2392) |= 0x1000u;
      }

      goto LABEL_57;
    }

    if (*(_BYTE *)(**(void **)(a1 + 48) + 182LL)) {
      *(_DWORD *)(a1 + 2392) |= 0x100u;
    }
    goto LABEL_51;
  }

  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 8) + 3968LL)
                                                                       + 176LL))( *(void *)(*(void *)(a1 + 8) + 3968LL),  *(void *)(a1 + 8),  *(void *)(a1 + 8) + 104LL,  *(void *)(a1 + 8) + 3984LL);
  if ((_DWORD)result)
  {
    else {
      uint64_t v6 = 7;
    }
    a2[208] = v6;
    return 1LL;
  }

  return result;
}

LABEL_57:
  *(_WORD *)(v3 + 165) = 256;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_DWORD *)(a1 + 2840) = 0;
  *(void *)(a1 + 3984) = -1LL;
  *(void *)(a1 + 2544) = 0LL;
  *(_BYTE *)(a1 + 2552) = 1;
  *int v4 = 0LL;
  v4[1] = 0LL;
  uint64_t v41 = *(void *)(a1 + 4504);
  if (v41)
  {
    *(void *)(v41 + 40) = 0LL;
    int v42 = *(void **)(a1 + 4496);
    *(void *)(v41 + 48) = v42;
    *int v42 = v41;
    *(void *)(a1 + 4496) = *(void *)(a1 + 4504) + 40LL;
    *(void *)(a1 + 4504) = 0LL;
  }

  *(_BYTE *)(a1 + 3004) = 1;
  return sub_6E0FC(a1 + 4520, a1);
}

uint64_t sub_268AC(uint64_t a1)
{
  uint64_t v2 = a1 + 4760;
  if (!*(_DWORD *)(*(void *)(a1 + 2688) + 4LL))
  {
    (*(void (**)(void, void))(**(void **)(a1 + 2536) + 112LL))( *(void *)(a1 + 2536),  *(void *)(a1 + 2704));
    off_7C368(a1, 0LL, 0LL);
  }

  *(void *)(a1 + 4768) = 0LL;
  *(_BYTE *)(v2 + 16) = 1;
  *(void *)(a1 + 4752) = 0LL;
  *(void *)(a1 + 4804) = 0LL;
  *(_BYTE *)uint64_t v2 = 1;
  *(_OWORD *)(a1 + 4784) = 0u;
  (*(void (**)(void))(**(void **)(a1 + 2536) + 136LL))(*(void *)(a1 + 2536));
  uint64_t v3 = *(void *)(a1 + 2688);
  uint64_t v4 = *(unsigned int *)(v3 + 16) + v3;
  if (v4 + 0x2000 == *(void *)(a1 + 2152))
  {
    uint64_t v5 = v4 + 8LL * *(unsigned int *)(v3 + 8);
    *(void *)(a1 + 2152) = v5;
    *(_WORD *)(v3 - 6) = (v5 - v3 + 8) >> 2;
  }

  *(_WORD *)(v2 + 137) = 256;
  *(void *)(a1 + 2720) = 0LL;
  *(_DWORD *)(a1 + 2840) = 0;
  *(void *)(a1 + 2544) = 0LL;
  *(_BYTE *)(a1 + 2552) = 1;
  *(void *)(a1 + 2688) = 0LL;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(_BYTE *)(a1 + 3004) = 1;
  return sub_6E0FC(a1 + 4520, a1);
}

float *sub_269B0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(void *)(a1 + 2712);
  uint64_t v5 = *(void *)(v4 + 312);
  BOOL v6 = sub_26A74(*(int **)(v5 + 40));
  uint64_t v7 = *(void *)(a1 + 2696);
  *(_BYTE *)(v7 + 839) |= v6;
  sub_280F4( a1,  *(void *)(v4 + 384),  (char *)(v7 + 312),  (char *)(v7 + 1276),  a2,  *(_DWORD *)(a1 + 2724) != 0,  0,  *(_BYTE *)(*(void *)(a1 + 24) + 12952LL) != 0);
  __int128 v8 = *(_OWORD *)(v7 + 392);
  *(_OWORD *)(v7 + 992) = *(_OWORD *)(v7 + 376);
  *(_OWORD *)(v7 + 1008) = v8;
  __int128 v9 = *(_OWORD *)(v7 + 424);
  *(_OWORD *)(v7 + 1024) = *(_OWORD *)(v7 + 408);
  *(_OWORD *)(v7 + 1040) = v9;
  __int128 v10 = *(_OWORD *)(v7 + 328);
  *(_OWORD *)(v7 + 928) = *(_OWORD *)(v7 + 312);
  *(_OWORD *)(v7 + 944) = v10;
  __int128 v11 = *(_OWORD *)(v7 + 360);
  *(_OWORD *)(v7 + 960) = *(_OWORD *)(v7 + 344);
  *(_OWORD *)(v7 + 976) = v11;
  return sub_27D14(*(float **)(a1 + 2736), v5, a2, a1 + 3208);
}

BOOL sub_26A74(int *a1)
{
  unsigned int v1 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v2 = *v1;
  if (v2 < 0x25)
  {
    if (v2 < 0x21) {
      return 0LL;
    }
  }

  else if (v1[18] && *((_BYTE *)a1 + v1[18]) {
         || v2 >= 0x27 && (v1[19] && *((_BYTE *)a1 + v1[19]) || v2 >= 0x29 && v1[20] && *((_BYTE *)a1 + v1[20])))
  }
  {
    return 1LL;
  }

  uint64_t v4 = v1[16];
  if (v4) {
    return *(int *)((char *)a1 + v4) != 0;
  }
  return 0LL;
}

BOOL sub_26AF8(uint64_t a1)
{
  unsigned int v2 = (void *)(*(unsigned int *)(*(void *)(a1 + 2688) + 40LL) + *(void *)(a1 + 2688));
  bzero(v2, 0x2B8uLL);
  int v3 = (*(uint64_t (**)(void, void *))(**(void **)(a1 + 2536) + 104LL))(*(void *)(a1 + 2536), v2);
  if (v3)
  {
    *(void *)(a1 + 2704) = v2;
    *(void *)(a1 + 2940) = 127LL;
    (*(void (**)(void))(**(void **)(a1 + 3960) + 32LL))(*(void *)(a1 + 3960));
    (*(void (**)(void))(**(void **)(a1 + 3968) + 280LL))(*(void *)(a1 + 3968));
    *(_DWORD *)(a1 + 2988) = 3;
    *(void *)(a1 + 2992) = 0x67FFFFFFFFFFLL;
    *(_OWORD *)(a1 + 4880) = 0u;
  }

  return v3 != 0;
}

_DWORD *sub_26BA4(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3 = a2 + 8248;
  uint64_t v4 = *(void *)(a1 + 2152);
  unint64_t v5 = *(void *)(a1 + 2160);
  if (*(_BYTE *)(a1 + 4896))
  {
    *(void *)uint64_t v4 = 164096LL;
    v4 += 8LL;
    *(void *)(a1 + 2152) = v4;
    *(_BYTE *)(a1 + 4896) = 0;
  }

  *(void *)(a1 + 2152) = v4 + 4LL * (v3 >> 2);
  if (!v4) {
    return 0LL;
  }
  *(_WORD *)uint64_t v4 = 0x8000;
  *(_WORD *)(v4 + 2) = v3 >> 2;
  *(_DWORD *)(v4 + 4) = 0;
  BOOL v6 = (_DWORD *)(v4 + 8);
  *(void *)(v4 + 12) = 1LL;
  *(_DWORD *)(v4 + 20) = 0;
  *(_DWORD *)(v4 + 24) = a2 + 48;
  *(void *)(v4 + 28) = 0LL;
  *(_DWORD *)(v4 + 44) = a2;
  *(_DWORD *)(v4 + 48) = 48;
  *(_DWORD *)(v4 + 52) = a3;
  *(void *)(a1 + 4872) = 0LL;
  *(void *)(a1 + 3752) = 0LL;
  *(_OWORD *)(a1 + 2728) = 0u;
  *(void *)(a1 + 2688) = v4 + 8;
  *(void *)&__int128 v7 = -1LL;
  *((void *)&v7 + 1) = -1LL;
  *(_OWORD *)&v17[65] = v7;
  *(_OWORD *)&v17[81] = v7;
  *(_OWORD *)&v17[97] = v7;
  *(_OWORD *)&v17[113] = v7;
  *(_OWORD *)&v17[1] = v7;
  *(_OWORD *)&v17[17] = v7;
  *(_OWORD *)&v17[33] = v7;
  *(_OWORD *)&v17[49] = v7;
  uint64_t v8 = a1 + 2544;
  *(void *)(a1 + 2544) = *(void *)(a1 + 2528);
  *(_BYTE *)(a1 + 2552) = 0;
  __int128 v9 = (_OWORD *)(a1 + 2553);
  *(_OWORD *)(a1 + 2649) = *(_OWORD *)&v17[96];
  *(_OWORD *)(a1 + 2665) = *(_OWORD *)&v17[112];
  *(_BYTE *)(a1 + 2681) = -1;
  *(_OWORD *)(a1 + 2585) = *(_OWORD *)&v17[32];
  *(_OWORD *)(a1 + 2601) = *(_OWORD *)&v17[48];
  *(_OWORD *)(a1 + 2617) = *(_OWORD *)&v17[64];
  *(_OWORD *)(a1 + 2633) = *(_OWORD *)&v17[80];
  if (a3 == 2) {
    int v10 = 12;
  }
  else {
    int v10 = 0;
  }
  if (a3 == 1) {
    int v11 = 15;
  }
  else {
    int v11 = v10;
  }
  int v12 = (uint64_t *)(a1 + 1152);
  BOOL v13 = 1;
  uint64_t v14 = &dword_8;
  *__int128 v9 = *(_OWORD *)v17;
  v9[1] = *(_OWORD *)&v17[16];
  do
  {
    int v15 = *(unsigned __int16 *)((char *)&unk_7C070 + v14);
    if ((v11 & v15) != 0 && v13) {
      BOOL v13 = sub_639A8(v8, v6, *(_DWORD *)(*(v12 - 2) + 256), *v12, v11 & v15, (unsigned int *)(*(v12 - 1) + 24), 0, 0LL);
    }
    v14 += 16LL;
    v12 += 8;
  }

  while (v14 != 184);
  if (v13) {
    return v6;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_26DA0(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4 = (_BYTE *)(a1 + 48);
  unint64_t v5 = *(void **)(a1 + 48);
  uint64_t v6 = v5[1];
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(v6 + 72);
  *(void *)(a1 + 4680) = 0LL;
  *(void *)(a1 + 4520) = 0LL;
  *(void *)(a1 + 4560) = 0LL;
  uint64_t v123 = a1 + 4520;
  __int128 v126 = *(_OWORD *)(*(void *)(a1 + 24) + 13288LL);
  char v127 = 0;
  uint64_t v128 = 0x260000002600LL;
  int v129 = 1;
  char v130 = 0;
  __asm { FMOV            V0.2S, #1.0 }

  uint64_t v131 = _D0;
  char v132 = 0;
  if (v7
    && (uint64_t v14 = *v5,
        uint64_t v15 = *(void *)v7,
        unsigned int v16 = *(_DWORD *)(*v5 + 132LL),
        uint64_t v17 = *(unsigned int *)(*v5 + 136LL),
        char v18 = sub_180B0(v7, *(_DWORD *)(*v5 + 136LL), v16, 0, 0, 0, 0),
        sub_143D8((uint64_t *)v7, v17, v16, v18) == 2))
  {
    uint64_t v19 = v15 + 480LL * v16 + 32 * v17;
    sub_6DE74(v123, (void *)a1, 0, (unsigned __int8 *)v7, v19 + 264, v14 + 128);
    xmmword_7C350(*(unsigned __int16 *)(*(void *)v7 + 192LL));
    uint64_t v20 = *(void *)(v7 + 392);
    *(void *)(a1 + 4632) = 0LL;
    *(_DWORD *)(a1 + 4640) = *(unsigned __int16 *)(v19 + 268);
    *(_DWORD *)(a1 + 4644) = *(unsigned __int16 *)(v19 + 270);
    if (!*(void *)(a1 + 4600))
    {
      BOOL v21 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, 0x8E0uLL);
      if (!v21) {
        goto LABEL_136;
      }
      *(void *)(a1 + 4600) = v21;
    }

    unsigned __int8 v120 = a2;
    if (!*(void *)(a1 + 4616))
    {
      uint64_t v22 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, 0x8E0uLL);
      if (!v22) {
        goto LABEL_136;
      }
      *(void *)(a1 + 4616) = v22;
    }

    uint64_t v116 = off_7C348(*(unsigned int *)(v20 + 52));
    BOOL v23 = *(_DWORD *)(v20 + 36) == 2;
    *(void *)(a1 + 4648) = sub_6E8F0( *(void *)(a1 + 4600),  v7,  *(_DWORD *)(v14 + 132),  *(_DWORD *)(v14 + 136),  *(_DWORD *)(v14 + 140),  0,  0,  0,  0,  v116);
    uint64_t v24 = *(void *)(a1 + 4616);
    uint64_t GPUVirtualAddress = IOAccelResourceGetGPUVirtualAddress(*(void *)(a1 + 4528));
    uint64_t v111 = *(void *)(a1 + 4528);
    uint64_t v113 = GPUVirtualAddress;
    uint64_t v109 = *(void *)(a1 + 4544) + 24LL;
    int v107 = *(_DWORD *)(*(void *)(a1 + 4536) + 256LL);
    int v26 = *(_DWORD *)(a1 + 4688);
    int v106 = *(_DWORD *)(a1 + 4692);
    int v125 = 1;
    char v27 = *(_BYTE *)(v7 + 384);
    xmmword_7C350(*(unsigned __int16 *)(*(void *)v7 + 192LL));
    sub_6E1B0( v24,  v116,  v113,  v111,  v109,  v107,  v26,  v106,  (1 << -(char)__clz(v26 - 1)),  v27,  *(_DWORD *)(*(void *)(v7 + 392) + 84LL),  5,  *(_DWORD *)(v7 + 240),  *(_DWORD *)(v7 + 244),  0LL,  0LL);
    *(void *)(a1 + 4664) = v24;
    sub_6DE0C(a1, *(void *)(a1 + 4648), v24, (uint64_t)&v126);
    a2 = v120;
  }

  else
  {
    int v125 = 0;
    BOOL v23 = 0;
  }

  int v28 = 0;
  if (!v8) {
    goto LABEL_24;
  }
  if (v23) {
    goto LABEL_24;
  }
  uint64_t v29 = *v5;
  uint64_t v30 = *(void *)v8;
  unsigned int v31 = *(_DWORD *)(*v5 + 148LL);
  uint64_t v32 = *(unsigned int *)(*v5 + 152LL);
  char v33 = sub_180B0(v8, *(_DWORD *)(*v5 + 152LL), v31, 0, 0, 0, 0);
  int v28 = 0;
  unsigned __int8 v121 = a2;
  sub_6DE74(v123, (void *)a1, 1u, (unsigned __int8 *)v8, v30 + 480LL * v31 + 32 * v32 + 264, v29 + 144);
  unsigned int v34 = xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL));
  xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL));
  uint64_t v35 = v8 + 8LL * v34;
  uint64_t v36 = *(void *)(v35 + 392);
  uint64_t v37 = sub_180B0(v8, *(_DWORD *)(v29 + 152), *(_DWORD *)(v29 + 148), *(_DWORD *)(v29 + 156), v34, 0, 0);
  if (v37 != ((v37 + 3) & 0xFFFFFFFFFFFFFFFCLL))
  {
    int v28 = 2;
    goto LABEL_23;
  }

  *(void *)(a1 + 4632) = 0LL;
  uint64_t v38 = v30 + 480LL * v31 + 32 * v32;
  *(_DWORD *)(a1 + 4640) = *(unsigned __int16 *)(v38 + 268);
  *(_DWORD *)(a1 + 4644) = *(unsigned __int16 *)(v38 + 270);
  if (!*(void *)(a1 + 4608))
  {
    int v39 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, 0x8E0uLL);
    if (!v39) {
      goto LABEL_136;
    }
    *(void *)(a1 + 4608) = v39;
  }

  if (!*(void *)(a1 + 4624))
  {
    int v40 = malloc_zone_malloc((malloc_zone_t *)qword_7C218, 0x8E0uLL);
    if (v40)
    {
      *(void *)(a1 + 4624) = v40;
      goto LABEL_21;
    }

LABEL_21:
  uint64_t v118 = v35 + 392;
  uint64_t v41 = off_7C348(*(unsigned int *)(v36 + 52));
  *(void *)(a1 + 4656) = sub_6E8F0( *(void *)(a1 + 4608),  v8,  *(_DWORD *)(v29 + 148),  *(_DWORD *)(v29 + 152),  *(_DWORD *)(v29 + 156),  v34,  0,  0,  0,  v41);
  uint64_t v42 = *(void *)(a1 + 4624);
  uint64_t v43 = IOAccelResourceGetGPUVirtualAddress(*(void *)(a1 + 4568));
  uint64_t v114 = *(void *)(a1 + 4568);
  uint64_t v117 = v43;
  uint64_t v112 = *(void *)(a1 + 4584) + 24LL;
  int v44 = *(_DWORD *)(*(void *)(a1 + 4576) + 256LL);
  int v45 = *(_DWORD *)(a1 + 4688);
  int v110 = *(_DWORD *)(a1 + 4692);
  int v28 = 1;
  char v46 = *(_BYTE *)(v8 + 384);
  xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL));
  sub_6E1B0( v42,  v41,  v117,  v114,  v112,  v44,  v45,  v110,  (1 << -(char)__clz(v45 - 1)),  v46,  *(_DWORD *)(*(void *)v118 + 84LL),  5,  *(_DWORD *)(v8 + 240),  *(_DWORD *)(v8 + 244),  0LL,  0LL);
  *(void *)(a1 + 4672) = v42;
  sub_6DE0C(a1, *(void *)(a1 + 4656), v42, (uint64_t)&v126);
LABEL_23:
  a2 = v121;
LABEL_24:
  unsigned __int8 v115 = a2;
  unsigned int v124 = a2 & 0x10;
  *(_DWORD *)(a1 + 4680) = v125;
  *(_DWORD *)(a1 + 4684) = v28;
  uint64_t v47 = **(void **)(*(void *)(a1 + 48) + 8LL);
  if (v47 && *(void *)(v47 + 184)) {
    sub_19544(v47, a1);
  }
  uint64_t v122 = a2;
  unsigned int v108 = (unsigned int *)(a1 + 4464);
  uint64_t v119 = a1 + 56;
  while (1)
  {
    int v48 = sub_26BA4(a1, 1560LL, 1);
    if (!v48) {
      goto LABEL_118;
    }
    int v49 = v48;
    uint64_t v50 = 0LL;
    int v51 = 1;
    do
    {
      uint64_t v52 = **(void **)v4;
      if ((*(_DWORD *)(v52 + 200) & (1 << v50)) != 0)
      {
        uint64_t v53 = *(void *)(*(void *)(*(void *)v4 + 8LL) + 8 * v50);
        if (v53)
        {
          if ((v50 & 0x7FFFFFFE) == 8)
          {
            if (*(_DWORD *)(v52 + 192)) {
              int v54 = 16;
            }
            else {
              int v54 = 32;
            }
            *(_BYTE *)(v53 + 386) = (**(_DWORD **)(a1 + 32) & v54) != 0;
          }

          if ((*(_BYTE *)(*(void *)v53 + 24LL) & 8) != 0)
          {
            if (v51) {
              int v51 = sub_63B3C(a1 + 2544, a1, v49, (void *)v53, 12, 0, 0LL);
            }
          }

          else
          {
            if (v51) {
              int v51 = sub_63948(a1 + 2544, v49, *(unsigned int *)(*(void *)v53 + 104LL));
            }
            *(_DWORD *)(a1 + 2720) |= 1 << v50;
            *(void *)(a1 + 8 * v50 + 2760) = v53;
          }

          int v55 = *(_DWORD *)(v53 + 56);
        }

        else
        {
          int v55 = 0;
        }

        if ((_DWORD)v50 == 9)
        {
          *(_DWORD *)(a1 + 4876) = v55;
        }

        else if ((_DWORD)v50 == 8)
        {
          *(_DWORD *)(a1 + 4872) = v55;
        }
      }

      ++v50;
    }

    while (v50 != 10);
    LODWORD(v56) = 0;
    unsigned int v57 = *(_DWORD *)(*(void *)v4 + 456LL) & 0xFFFFFFFE;
    if (v57)
    {
      int v58 = dword_7C40C;
      int v59 = *(_DWORD *)(a1 + 2392) | 0x40000000;
      *(_DWORD *)(a1 + 2392) = v59;
      uint64_t v60 = *(void *)(a1 + 4904) | 0x40000000LL;
      *(void *)(a1 + 4904) = v60;
      int v61 = dword_7C3FC;
      do
      {
        unsigned int v62 = __clz(v57) ^ 0x1F;
        uint64_t v63 = (v61 << (*(unsigned __int8 *)(**(void **)v4 + 182LL) > 1u));
        if (v58)
        {
          LODWORD(v56) = v63 + v56;
        }

        else
        {
          v51 &= sub_25A80(a1, 7LL, v63, xmmword_7C410, *(void *)(a1 + 4888), &v133, 0);
          *(void *)(a1 + 3208 + 8LL * v62) = v134;
          int v61 = dword_7C3FC;
          int v58 = dword_7C40C;
          int v59 = *(_DWORD *)(a1 + 2392);
          uint64_t v60 = *(void *)(a1 + 4904);
        }

        v59 |= 0x40000000u;
        *(_DWORD *)(a1 + 2392) = v59;
        v60 |= 0x40000000uLL;
        *(void *)(a1 + 4904) = v60;
        v57 ^= 1 << v62;
      }

      while (v57);
      if (v58 == 1 && (_DWORD)v56)
      {
        else {
          uint64_t v56 = (v61 * dword_7C404);
        }
        v51 &= sub_25A80(a1, 7LL, v56, xmmword_7C410, *(void *)(a1 + 4888), &v133, 0);
      }
    }

    if (v51 != 1) {
      goto LABEL_118;
    }
    int v64 = (void **)v4;
    if (v124)
    {
      uint64_t v65 = 0LL;
      BOOL v66 = 1;
      do
      {
        if (((*(_DWORD *)(**(void **)v119 + 200LL) >> v65) & 1) != 0)
        {
          float v67 = *(void **)(*(void *)(*(void *)v119 + 8LL) + 8 * v65);
          if (v67)
          {
            if (v66) {
              BOOL v66 = sub_63B3C(a1 + 2544, a1, v49, v67, 12, 0, 0LL);
            }
          }
        }

        ++v65;
      }

      while (v65 != 10);
      int v64 = (void **)(a1 + 56);
      if (!v66) {
        goto LABEL_118;
      }
    }

    int v68 = *v64;
    uint64_t v69 = (uint64_t)*v64 + 468;
    uint64_t v70 = (void *)(*(unsigned int *)(*(void *)(a1 + 2688) + 40LL) + *(void *)(a1 + 2688));
    bzero(v70, 0x618uLL);
    __int128 v71 = *(_OWORD *)v69;
    __int128 v72 = *(_OWORD *)(v69 + 16);
    *((_OWORD *)v70 + 75) = *(_OWORD *)(v69 + 32);
    *((_OWORD *)v70 + 74) = v72;
    *((_OWORD *)v70 + 73) = v71;
    __int128 v73 = *(_OWORD *)(v69 + 48);
    __int128 v74 = *(_OWORD *)(v69 + 64);
    __int128 v75 = *(_OWORD *)(v69 + 80);
    v70[158] = *(void *)(v69 + 96);
    *((_OWORD *)v70 + 78) = v75;
    *((_OWORD *)v70 + 77) = v74;
    *((_OWORD *)v70 + 76) = v73;
    v70[64] = IOAccelResourceGetGPUVirtualAddress(*(void *)(a1 + 1728));
    v70[65] = IOAccelResourceGetGPUVirtualAddress(*(void *)(a1 + 1664));
    if (!(*(unsigned int (**)(void, void *, uint64_t))(**(void **)(a1 + 2536) + 88LL))( *(void *)(a1 + 2536),  v70,  v122)) {
      goto LABEL_118;
    }
    if (!(*(unsigned int (**)(void, void *))(**(void **)(a1 + 2536) + 144LL))( *(void *)(a1 + 2536),  v70)) {
      goto LABEL_118;
    }
    *uint64_t v70 = IOAccelResourceGetGPUVirtualAddress(*(void *)(a1 + 1280)) + *(void *)(a1 + 1256) - *(void *)(a1 + 1240);
    BOOL v76 = sub_3F88(a1);
    if (!(*(unsigned int (**)(void, void *, BOOL))(**(void **)(a1 + 2536) + 40LL))( *(void *)(a1 + 2536),  v70,  v76)) {
      goto LABEL_118;
    }
    *(void *)(a1 + 2696) = v70;
    *(void *)(a1 + 2940) = 127LL;
    (*(void (**)(void))(**(void **)(a1 + 3960) + 32LL))(*(void *)(a1 + 3960));
    (*(void (**)(void))(**(void **)(a1 + 3968) + 280LL))(*(void *)(a1 + 3968));
    *(void *)(a1 + 2988) = 0xFFFFFFFF00000003LL;
    if (v76) {
      int v77 = 24575;
    }
    else {
      int v77 = 26623;
    }
    *(_DWORD *)(a1 + 2996) = v77;
    *(void *)(a1 + 4880) = 0LL;
    *(void *)(a1 + 4888) = 0LL;
    *((_BYTE *)v70 + 303) = 1;
    *((_BYTE *)v70 + 1136) = 1;
    uint64_t v78 = *(void *)(a1 + 2696);
    *(_BYTE *)(v78 + 1552) = v124 >> 4;
    int v79 = *(_DWORD *)(a1 + 4900);
    *(_BYTE *)(v78 + 296) = v79 == 3;
    *(_BYTE *)(v78 + 838) = (v79 & 0xFFFFFFFE) == 2;
    if (dword_7C40C == 1 && (_DWORD)v56)
    {
      *(void *)(v78 + 704) = v134;
      *(_DWORD *)(v78 + 712) = v56 / dword_7C400;
    }

    *(_OWORD *)(v78 + 792) = 0u;
    *(_OWORD *)(v78 + 808) = 0u;
    *(_OWORD *)(v78 + 760) = 0u;
    *(_OWORD *)(v78 + 776) = 0u;
    if (*(_DWORD *)(a1 + 4680))
    {
      if (!sub_639A8( a1 + 2544,  *(_DWORD **)(a1 + 2688),  *(_DWORD *)(*(void *)(a1 + 4536) + 256LL),  *(void *)(a1 + 4528),  12,  (unsigned int *)(*(void *)(a1 + 4544) + 24LL),  0,  0LL)) {
        goto LABEL_118;
      }
    }

    int v80 = *(_DWORD *)(a1 + 4684);
    if (v80)
    {
      if (v80 == 2)
      {
        uint64_t v81 = **(void **)(v68[1] + 72LL);
        unsigned int v83 = *(_DWORD *)(*v68 + 148LL);
        uint64_t v82 = *(unsigned int *)(*v68 + 152LL);
        *(void *)(v78 + 792) = *(void *)(a1 + 4688);
        uint64_t v84 = v81 + 480LL * v83 + 32 * v82;
        *(_DWORD *)(v78 + 800) = *(unsigned __int16 *)(v84 + 268);
        *(_DWORD *)(v78 + 804) = *(unsigned __int16 *)(v84 + 270);
        *(void *)(v78 + 784) = *(void *)(a1 + 4560);
        *(void *)(v78 + 776) = IOAccelResourceGetGPUVirtualAddress(*(void *)(a1 + 4568));
        *(_DWORD *)(v78 + 812) = *(_DWORD *)(a1 + 4592);
        *(_WORD *)(v78 + 818) = 257;
      }

      if (!sub_639A8( a1 + 2544,  *(_DWORD **)(a1 + 2688),  *(_DWORD *)(*(void *)(a1 + 4576) + 256LL),  *(void *)(a1 + 4568),  12,  (unsigned int *)(*(void *)(a1 + 4584) + 24LL),  0,  0LL)) {
        goto LABEL_118;
      }
    }

    if (v124) {
      BOOL v85 = *(unsigned __int8 *)(**(void **)v119 + 182LL) > 1u;
    }
    else {
      BOOL v85 = 0;
    }
    *(_DWORD *)(a1 + 2724) = v85;
    uint64_t v86 = *(void **)(a1 + 48);
    *(void *)(a1 + 2712) = v86;
    v4[4850] = *(_BYTE *)(*v86 + 182LL);
    _ZF = !v85;
    uint64_t v87 = 48LL;
    if (!_ZF) {
      uint64_t v87 = 56LL;
    }
    unsigned int v88 = *(unsigned __int8 *)(**(void **)(a1 + v87) + 182LL);
    if (v88 >= 2)
    {
      if (v88 == 2)
      {
        uint64_t v89 = 2LL;
      }

      else if (v88 >= 5)
      {
        BOOL v90 = dword_7C428 < v88 || v88 > 8;
        uint64_t v89 = v90 ? 4LL : 8LL;
      }

      else
      {
        uint64_t v89 = 4LL;
      }
    }

    else
    {
      uint64_t v89 = 1LL;
    }

    if (!(*(unsigned int (**)(void, void, uint64_t, void, uint64_t, void))(**(void **)(a1 + 2536)
                                                                                           + 160LL))( *(void *)(a1 + 2536),  v86[48],  *(void *)(a1 + 2696) + 312LL,  *(unsigned int *)(*(void *)(a1 + 2696) + 1244LL),  v89,  0LL))
      goto LABEL_118;
    unsigned int v91 = v68;
    int v92 = *(void **)(*(void *)(*(void *)v4 + 8LL) + 64LL);
    int v93 = v91;
    uint64_t v94 = v91[72];
    if ((v115 & 1) != 0)
    {
      float v97 = *(float *)(a1 + 3156);
      if (!v92
        || (xmmword_7C350(*(unsigned __int16 *)(*v92 + 192LL)),
            int v98 = *(_DWORD *)(v92[49] + 92LL),
            (v98 - 2) < 2))
      {
        *(float *)(v94 + 12) = v97;
        goto LABEL_112;
      }

      if (v98 != 1) {
        goto LABEL_112;
      }
      unsigned int v96 = (v97 * 65535.0);
    }

    else if (v92 {
           && (xmmword_7C350(*(unsigned __int16 *)(*v92 + 192LL)),
    }
               int v95 = *(_DWORD *)(v92[49] + 92LL),
               (v95 - 2) >= 2))
    {
      if (v95 != 1) {
        goto LABEL_112;
      }
      unsigned int v96 = 0xFFFF;
    }

    else
    {
      unsigned int v96 = 1065353216;
    }

    *(_DWORD *)(v94 + 12) = v96;
LABEL_112:
    int v99 = (v115 & 2) != 0 ? *(_DWORD *)(a1 + 3160) : 0;
    *(_DWORD *)(v93[72] + 8LL) = *(_DWORD *)(v93[72] + 8LL) & 0xFFFFFF00 | v99;
    (*(void (**)(void, uint64_t, uint64_t, void *))(**(void **)(a1 + 3992) + 16LL))( *(void *)(a1 + 3992),  a1,  v78 + 312,  v93);
    uint64_t v100 = v93[72];
    int v101 = *(int32x2_t **)(a1 + 2696);
    if ((**(unsigned int (***)(uint64_t, uint64_t, uint64_t, uint64_t, void))v100)( v100,  a1,  (uint64_t)&v101[107],  a1 + 2736,  *(void *)(*(void *)(a1 + 48) + 312LL)))
    {
      v101[103] = vrev64_s32(*(int32x2_t *)(v100 + 8));
      *(void *)(v78 + 848) = 0LL;
      uint64_t result = a1 + 4464;
      if (*v108 == -1) {
        goto LABEL_124;
      }
      uint64_t result = sub_6F58C(v108, a1);
      if ((_DWORD)result) {
        break;
      }
    }

  uint64_t v14 = v9[16];
  if (v14) {
    LODWORD(v14) = *(int *)((char *)v8 + v14);
  }
LABEL_24:
  *(void *)(a1 + 1048) = v14;
  int __pattern4 = -1;
  memset_pattern4((void *)(a1 + 1056), &__pattern4, 0x80uLL);
  memset_pattern4((void *)(a1 + 1184), &__pattern4, 0x80uLL);
  *(_DWORD *)(a1 + 1024) = -1;
  *(void *)(a1 + 1040) = 0LL;
  *(void *)(a1 + 1032) = 0LL;
  uint64_t v15 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v16 = *v15;
  if (v16 < 0x17)
  {
    char v18 = 0LL;
    *(void *)(a1 + 136) = 0LL;
    if (v16 < 0xF)
    {
      char v18 = 0LL;
      *(void *)(a1 + 160) = 0LL;
      *(void *)(a1 + 184) = 0LL;
      goto LABEL_37;
    }
  }

  else
  {
    uint64_t v17 = v15[11];
    if (v15[11]) {
      LODWORD(v17) = *(int *)((char *)v8 + v17);
    }
    char v18 = v17;
    *(void *)(a1 + 136) = v17;
  }

  uint64_t v19 = v15[7];
  if (v15[7]) {
    LODWORD(v19) = *(int *)((char *)v8 + v19);
  }
  *(void *)(a1 + 160) = v19;
  if (v16 < 0x13)
  {
    LODWORD(v20) = 0;
  }

  else
  {
    uint64_t v20 = v15[9];
    if (v15[9]) {
      LODWORD(v20) = *(int *)((char *)v8 + v20);
    }
  }

  *(void *)(a1 + 184) = v20;
LABEL_37:
  BOOL v21 = v15[5];
  if (v15[5]) {
    LODWORD(v21) = *(int *)((char *)v8 + v21);
  }
  *(void *)(a1 + 208) = v21;
  *(void *)(a1 + 280) = *(unsigned int *)((char *)v8 + v15[15] + *(unsigned int *)((char *)v8 + v15[15]));
  uint64_t v22 = v15[13];
  if (v22) {
    LODWORD(v22) = *(int *)((char *)v8 + v22);
  }
  *(void *)(a1 + 304) = v22;
  *(void *)(a1 + 328) = 12LL;
  *(void *)(a1 + 128) = malloc_zone_calloc(*(malloc_zone_t **)qword_7C220, 1uLL, v18);
  *(void *)(a1 + 200) = malloc_zone_calloc(*(malloc_zone_t **)qword_7C220, 1uLL, *(void *)(a1 + 208));
  *(void *)(a1 + 296) = malloc_zone_calloc(*(malloc_zone_t **)qword_7C220, 1uLL, *(void *)(a1 + 304));
  *(void *)(a1 + 320) = malloc_zone_calloc(*(malloc_zone_t **)qword_7C220, 1uLL, *(void *)(a1 + 328));
  BOOL v23 = *(int **)(a1 + 40);
  uint64_t v24 = *v23;
  unsigned int v25 = (char *)v23 - v24;
  int v26 = *(unsigned __int16 *)((char *)v23 - v24);
  if (v26 < 0x1F)
  {
    *(void *)(a1 + 272) = 4LL;
    if (v26 < 9)
    {
      int v28 = 0LL;
      goto LABEL_49;
    }
  }

  else
  {
    char v27 = *((unsigned __int16 *)v25 + 15);
    if (*((_WORD *)v25 + 15)) {
      v27 += (uint64_t)v23 + *(unsigned int *)((char *)v23 + v27);
    }
    *(void *)(a1 + 272) = v27 + 4;
  }

  int v28 = (unsigned int *)*((unsigned __int16 *)v25 + 4);
  if (v28) {
    int v28 = (unsigned int *)((char *)v28 + (void)v23 + *(unsigned int *)((char *)v28 + (void)v23));
  }
LABEL_49:
  uint64_t v29 = *v28;
  if ((_DWORD)v29)
  {
    uint64_t v30 = 0LL;
    unsigned int v31 = 0LL;
    uint64_t v32 = 4 * v29;
    while (1)
    {
      char v33 = v28[v30 / 4 + 1];
      unsigned int v34 = (char *)&v28[v30 / 4] + v33;
      uint64_t v35 = v33 - *((int *)v34 + 1);
      uint64_t v36 = (char *)&v28[v30 / 4] + v35;
      uint64_t v37 = *((unsigned __int16 *)v36 + 2);
      if (v37 < 5)
      {
        LODWORD(v38) = 0;
      }

      else
      {
        uint64_t v38 = *((unsigned __int16 *)v36 + 4);
        if (v38)
        {
          LODWORD(v38) = *((char *)&v28[v30 / 4 + 1] + v33 + v38);
          if ((_DWORD)v38 == 5)
          {
            if (v37 < 7)
            {
              LODWORD(v39) = 0;
            }

            else
            {
              int v39 = *(unsigned __int16 *)((char *)&v28[v30 / 4 + 2] + v35 + 2);
              if (v39) {
                LODWORD(v39) = *(unsigned int *)((char *)&v28[v30 / 4 + 1] + v33 + v39);
              }
            }

            *(_DWORD *)(a1 + 12LL * v39 + 420) |= 1 << v31;
            *(_DWORD *)(a1 + 80) |= 1LL << v39;
            goto LABEL_59;
          }
        }
      }

      *(_DWORD *)(a1 + 24LL * v38 + 144) |= 1 << v31;
      *(_DWORD *)(a1 + 76) |= 1 << v38;
LABEL_59:
      int v40 = (char *)&v28[v30 / 4] + v33 - *((int *)v34 + 1);
      else {
        LOWORD(v42) = 0;
      }
      *(_WORD *)(a1 + 704 + 2 * v31++) = 4 * v42;
      v30 += 4LL;
      if (v32 == v30)
      {
        uint64_t v43 = *v23;
        int v44 = -v43;
        int v26 = *(unsigned __int16 *)((char *)v23 - v43);
        goto LABEL_68;
      }
    }
  }

  int v44 = -v24;
LABEL_68:
  if (v26 < 0xD)
  {
    int v45 = 0LL;
  }

  else
  {
    int v45 = (unsigned int *)*(unsigned __int16 *)((char *)v23 + v44 + 12);
  }

  char v46 = *v45;
  if ((_DWORD)v46)
  {
    uint64_t v47 = 0LL;
    while (1)
    {
      int v48 = v45[v47 + 1];
      int v49 = v48 - *(int *)((char *)&v45[v47 + 1] + v48);
      uint64_t v50 = (char *)&v45[v47] + v49;
      int v51 = *((unsigned __int16 *)v50 + 2);
      if (v51 < 5) {
        break;
      }
      uint64_t v52 = *((unsigned __int16 *)v50 + 4);
      if (v52)
      {
        LODWORD(v52) = *((char *)&v45[v47 + 1] + v48 + v52);
        if ((_DWORD)v52 == 5)
        {
          if (v51 < 7)
          {
            uint64_t v53 = 0;
          }

          else
          {
            if (*(_WORD *)((char *)&v45[v47 + 2] + v49 + 2)) {
              uint64_t v53 = *(unsigned int *)((char *)&v45[v47 + 1]
            }
                                    + v48
                                    + *(unsigned __int16 *)((char *)&v45[v47 + 2] + v49 + 2));
            else {
              uint64_t v53 = 0;
            }
            if (v51 >= 9)
            {
              uint64_t v56 = *(unsigned __int16 *)((char *)&v45[v47 + 3] + v49);
              if (v56)
              {
                unsigned int v57 = *(unsigned int *)((char *)&v45[v47 + 1] + v48 + v56);
LABEL_94:
                *(_DWORD *)(a1 + 12LL * v53 + 424) = v57;
                *(_DWORD *)(a1 + 80) |= 1LL << v53;
                goto LABEL_86;
              }
            }
          }

          unsigned int v57 = 0;
          goto LABEL_94;
        }
      }

      if (v51 < 9) {
        goto LABEL_84;
      }
      int v54 = *(unsigned __int16 *)((char *)&v45[v47 + 3] + v49);
      if (!v54) {
        goto LABEL_84;
      }
      int v55 = *(unsigned int *)((char *)&v45[v47 + 1] + v48 + v54);
LABEL_85:
      *(_DWORD *)(a1 + 24LL * v52 + 148) = v55;
      *(_DWORD *)(a1 + 76) |= 1 << v52;
LABEL_86:
      if (v46 == ++v47)
      {
        int v58 = *v23;
        int v44 = -v58;
        int v26 = *(unsigned __int16 *)((char *)v23 - v58);
        goto LABEL_95;
      }
    }

    LODWORD(v52) = 0;
LABEL_84:
    int v55 = 0;
    goto LABEL_85;
  }

LABEL_118:
    sub_260F0(a1);
  }

  *(void *)(v78 + 848) = *(void *)(*(void *)(a1 + 4504) + 24LL);
LABEL_124:
  if (!*(_DWORD *)(a1 + 2720))
  {
    sub_6EE74((uint64_t)&v126, a1, *(void **)(a1 + 48), 17, 0);
    uint64_t result = (uint64_t)sub_269B0(a1, (unsigned __int8 *)&v126);
  }

  *(_BYTE *)(v78 + 1124) = v4[4684] != 0;
  int v103 = *(_DWORD *)(a1 + 4696);
  if (v103 == -2) {
    int v104 = 0;
  }
  else {
    int v104 = v103 + 1;
  }
  *(_DWORD *)(a1 + 4696) = v104;
  if (!*(_BYTE *)(v78 + 1552)) {
    *(_DWORD *)(a1 + 2392) |= 0x10u;
  }
  if (v47 && (v115 & 4) == 0)
  {
    int v105 = *(_DWORD *)(a1 + 2392);
    *(_DWORD *)(a1 + 2392) = v105 | 0x20;
    if (*(_BYTE *)(**(void **)(a1 + 48) + 182LL)) {
      *(_DWORD *)(a1 + 2392) = v105 | 0x120;
    }
  }

  return result;
}

uint64_t sub_27B64(unsigned int a1)
{
  if (a1 <= 4) {
    int v1 = 4;
  }
  else {
    int v1 = a1;
  }
  return 4LL * (1024 << -(char)__clz(v1 - 1));
}

BOOL sub_27B8C(uint64_t a1, int a2, unsigned int a3)
{
  if (a3 <= 4) {
    int v3 = 4;
  }
  else {
    int v3 = a3;
  }
  unint64_t v4 = 4LL * (1024 << -(char)__clz(v3 - 1));
  if (a2) {
    uint64_t v5 = 4880LL;
  }
  else {
    uint64_t v5 = 4888LL;
  }
  unint64_t v6 = *(void *)(a1 + v5);
  if (v4 <= v6) {
    return 1LL;
  }
  *(void *)(a1 + v5) = 0LL;
  if (a2) {
    uint64_t v8 = 4LL;
  }
  else {
    uint64_t v8 = 7LL;
  }
  BOOL result = sub_26024(a1, v8, v4, xmmword_7C410, 0LL);
  if (result) {
    unint64_t v10 = v4;
  }
  else {
    unint64_t v10 = v6;
  }
  *(void *)(a1 + v5) = v10;
  return result;
}

uint64_t sub_27C28(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 4880);
  *(void *)(result + 4880) = 0LL;
  if (v2)
  {
    BOOL result = sub_25A80(result, 4LL, v2, xmmword_7C410, 0LL, &v8, 0);
    uint64_t v3 = *(void *)(v1 + 2696);
    *(void *)(v3 + 176) = v9;
    unsigned int v4 = 32 - __clz((v2 >> 14) - 1);
    *(_DWORD *)(v3 + 184) = v2 >> 2;
    *(_DWORD *)(v3 + 188) = v4;
  }

  uint64_t v5 = *(void *)(v1 + 4888);
  *(void *)(v1 + 4888) = 0LL;
  if (v5)
  {
    BOOL result = sub_25A80(v1, 7LL, v5, xmmword_7C410, 0LL, &v8, 0);
    uint64_t v6 = *(void *)(v1 + 2696);
    *(void *)(v6 + 720) = v9;
    *(_DWORD *)(v6 + 728) = v5 >> 2;
    unsigned int v7 = 32 - __clz((v5 >> 14) - 1);
    *(_DWORD *)(v6 + 732) = v7;
  }

  return result;
}

float *sub_27D14(float *result, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  if (*(_DWORD *)(a2 + 88))
  {
    uint64_t v6 = result;
    uint64_t v7 = off_7C320();
    BOOL result = (float *)off_7C318();
    uint64_t v8 = result;
    if (*((_DWORD *)a3 + 1))
    {
      unint64_t v9 = 0LL;
      unint64_t v10 = a3 + 160;
      do
      {
        if (!*((_DWORD *)v10 + 33))
        {
          int v11 = v10 - 128;
          if (v10[112] && *((_DWORD *)v10 + 16) == 1)
          {
            BOOL result = (float *)qword_7C370(*(void *)v11, v7, v8);
          }

          else
          {
            uint64_t v12 = *((unsigned int *)v10 + 11);
            BOOL result = (float *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, void))(*(void *)v7 + 64LL))( v7,  v11,  *a3);
            uint64_t v13 = a2 + 4 * v12;
            uint64_t v14 = *(unsigned int *)(v13 + 132);
            if ((_DWORD)v14 != -1)
            {
              uint64_t v15 = &v6[v14];
              (*(void (**)(uint64_t))(*(void *)v7 + 136LL))(v7);
              BOOL result = (float *)memcpy(v15, *(const void **)(v7 + 16), 8LL * *(unsigned int *)(v7 + 8));
            }

            uint64_t v16 = *(unsigned int *)(v13 + 196);
            if ((_DWORD)v16 != -1)
            {
              uint64_t v17 = *((unsigned int *)v10 + 1);
              char v18 = &v6[v16];
              float v19 = flt_70F0C[v17];
              *char v18 = v19;
              v18[1] = flt_70F0C[((_DWORD)v17 - 1) & 3];
              float v20 = flt_70F0C[((_BYTE)v17 + 1) & 3];
              _OWORD v18[2] = v20;
              v18[3] = v19;
              unsigned int v21 = (v17 - 1) > 1 ? 0 : *((_DWORD *)v10 - 16);
              v18[4] = (float)v21;
              unsigned int v22 = (v17 & 0xFFFFFFFE) == 2 ? *((_DWORD *)v10 - 15) : 0;
              v18[5] = (float)v22;
              if (*v10)
              {
                float v23 = (float)*((unsigned int *)v10 + 22);
                v18[4] = (float)v21 + (float)(v20 * v23);
                v18[5] = (float)v22 + (float)(v19 * v23);
                _OWORD v18[2] = -v20;
                v18[3] = -v19;
              }
            }

            uint64_t v24 = *(unsigned int *)(a2 + 4 * v12 + 228);
            if ((_DWORD)v24 != -1) {
              v6[v24] = (float)*((int *)v10 - 9);
            }
          }
        }

        ++v9;
        v10 += 280;
      }

      while (v9 < *((unsigned int *)a3 + 1));
    }

    for (unsigned int i = *(_DWORD *)(a2 + 124); i; i ^= 1 << v26)
    {
      uint64_t v26 = __clz(i) ^ 0x1F;
      uint64_t v27 = *(unsigned int *)(a2 + 4LL * v26 + 92);
      if ((_DWORD)v27 != -1) {
        *(void *)&v6[v27] = *(void *)(a4 + 8 * v26);
      }
    }

    if (*(_DWORD *)(a2 + 264) != -1)
    {
      (*(void (**)(float *, void))(*(void *)v8 + 64LL))(v8, 0LL);
      BOOL result = (float *)(*(uint64_t (**)(float *, float *))(*(void *)v8 + 128LL))( v8,  &v6[*(unsigned int *)(a2 + 264)]);
    }

    int v28 = *(int **)(a2 + 40);
    uint64_t v29 = (unsigned __int16 *)((char *)v28 - *v28);
    uint64_t v30 = (unsigned int *)((char *)v28 + v29[15] + *(unsigned int *)((char *)v28 + v29[15]));
    size_t v31 = *v30;
    if ((_DWORD)v31)
    {
      uint64_t v32 = v29[7];
      if (v29[7]) {
        LODWORD(v32) = *(int *)((char *)v28 + v32);
      }
      uint64_t v33 = v29[9];
      if (v29[9]) {
        LODWORD(v33) = *(int *)((char *)v28 + v33);
      }
      int v34 = v33 + v32;
      uint64_t v35 = v29[11];
      if (v35) {
        int v36 = *(int *)((char *)v28 + v35);
      }
      else {
        int v36 = 0;
      }
      BOOL result = (float *)memcpy((char *)v6 + ((v34 + v36) & 0xFFFFFFFC), v30 + 1, v31);
    }

    if (v7) {
      BOOL result = (float *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
    if (v8) {
      return (float *)(*(uint64_t (**)(float *))(*(void *)v8 + 8LL))(v8);
    }
  }

  return result;
}

uint64_t sub_28024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_25F38(a1, 8LL, &v7);
  if ((_DWORD)result)
  {
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 3960) + 72LL))( *(void *)(a1 + 3960),  v7,  a2,  a3);
    return 1LL;
  }

  return result;
}

uint64_t sub_28088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 3960) + 72LL))( *(void *)(a1 + 3960),  v7,  a2,  a3);
}

int *sub_280F4(uint64_t a1, uint64_t a2, char *a3, char *a4, unsigned __int8 *a5, int a6, int a7, int a8)
{
  int v49 = a7;
  int v50 = a8;
  int v48 = a6;
  uint64_t v47 = a3;
  uint64_t v12 = qword_7C330();
  uint64_t v13 = v12;
  if (a4)
  {
    int v14 = *(_DWORD *)(v12 + 12);
    unsigned int v51 = *(_DWORD *)(v12 + 8);
    *((_DWORD *)a4 + 64) = v51;
    uint64_t v52 = a4;
  }

  else
  {
    __chkstk_darwin();
    uint64_t v52 = (char *)&v43;
    int v14 = *(_DWORD *)(v13 + 12);
    unsigned int v51 = *(_DWORD *)(v13 + 8);
  }

  if (!*((_DWORD *)a5 + 1))
  {
LABEL_35:
    uint64_t v55 = 0LL;
    uint64_t v36 = off_7C340(1LL, 5126LL, 36012LL, 0LL, &v55, 0LL, 0LL, 0LL);
    sub_6E1B0((uint64_t)&v53, v36, 0LL, 0LL, 0LL, 0, 2, 2, 2LL, 1, 0, 5, 0, 0, 0LL, 0LL);
    WORD2(v41) = 0;
    LODWORD(v41) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, void, void, void, void, void, uint64_t, uint64_t))(*(void *)v13 + 16LL))( v13,  1LL,  &v54,  0LL,  0LL,  0LL,  0LL,  0LL,  v41,  0x100000000LL);
    uint64_t v37 = *(unsigned int *)(v13 + 12);
    if ((_DWORD)v37) {
      memcpy(v47, *(const void **)(v13 + 24), 8 * v37);
    }
    memcpy(v52, *(const void **)(v13 + 16), 4LL * *(unsigned int *)(v13 + 8));
    goto LABEL_38;
  }

  uint64_t v15 = a1;
  uint64_t v44 = a2;
  int v16 = 0;
  int v17 = 0;
  unint64_t v18 = 0LL;
  int v45 = a5 + 100;
  char v46 = a5 + 96;
  float v19 = a5 + 292;
  do
  {
    if (*((_BYTE *)v19 - 20) || (float v20 = v45, v21 = v46, *v19))
    {
      unsigned int v21 = (unsigned __int8 *)(v19 - 49);
      float v20 = (unsigned __int8 *)(v19 - 48);
    }

    uint64_t v22 = *(unsigned int *)v21;
    uint64_t v23 = *(unsigned int *)v20;
    unsigned int v24 = *(_DWORD *)(v15 + 4900);
    if (v24 == 1)
    {
      uint64_t v25 = 1LL;
      unsigned int v26 = 1;
      unsigned int v27 = 1;
      uint64_t v28 = 1LL;
      uint64_t v29 = 1LL;
      if ((v49 & 1) != 0) {
        goto LABEL_28;
      }
    }

    else
    {
      if (v49)
      {
        uint64_t v29 = *((unsigned int *)a4 + 65);
        uint64_t v25 = *((unsigned int *)a4 + 66);
        uint64_t v28 = *((unsigned int *)a4 + 67);
        unsigned int v24 = *((_DWORD *)a4 + 68);
        goto LABEL_28;
      }

      uint64_t v25 = 0LL;
      unsigned int v26 = v23;
      unsigned int v27 = v22;
    }

    unsigned int v30 = *(v19 - 32) & 0xFFFFFFFD;
    BOOL v31 = v30 == 1;
    if (v30 == 1) {
      uint64_t v28 = v26;
    }
    else {
      uint64_t v28 = v27;
    }
    if (v30 == 1) {
      unsigned int v24 = v27;
    }
    else {
      unsigned int v24 = v26;
    }
    if (v31) {
      uint64_t v32 = v22;
    }
    else {
      uint64_t v32 = v23;
    }
    if (v31) {
      uint64_t v22 = v23;
    }
    else {
      uint64_t v22 = v22;
    }
    uint64_t v29 = v25;
    uint64_t v23 = v32;
LABEL_28:
    BOOL v33 = (v48 & 1) != 0 || *v19 != 0;
    LODWORD(v42) = v18;
    HIDWORD(v42) = *a5;
    BYTE5(v40) = v50;
    BYTE4(v40) = v33;
    LODWORD(v40) = v24;
    (*(void (**)(uint64_t, void, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 16LL))( v13,  0LL,  v19 - 65,  v22,  v23,  v29,  v25,  v28,  v40,  v42);
    uint64_t v34 = *(unsigned int *)(v13 + 12);
    if ((_DWORD)v34) {
      memcpy(&v47[8 * v16], *(const void **)(v13 + 24), 8 * v34);
    }
    memcpy(&v52[4 * v17], *(const void **)(v13 + 16), 4LL * *(unsigned int *)(v13 + 8));
    ++v18;
    unint64_t v35 = *((unsigned int *)a5 + 1);
    v17 += v51;
    v16 += v14;
    v19 += 70;
  }

  while (v18 < v35);
  a2 = v44;
  a1 = v15;
  if (!(_DWORD)v35) {
    goto LABEL_35;
  }
LABEL_38:
  uint64_t result = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  int v39 = *(_DWORD **)(a1 + 2744);
  if (v39) {
    return sub_67608(*(int **)(a2 + 40), v39, (uint64_t)v52, v51, a1 + 3208, (uint64_t)a5);
  }
  return result;
}

void sub_2846C(void *a1)
{
  uint64_t v1 = sub_2D1DC(a1);
  operator delete(v1);
}

uint64_t sub_28480(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(int **)(a2 + 1440);
  unsigned int v4 = (unsigned __int16 *)((char *)v3 - *v3);
  unsigned int v5 = *v4;
  if (v5 < 0x19)
  {
    uint64_t v6 = 0LL;
LABEL_9:
    uint64_t v8 = 0LL;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)v2 + 24LL))(v2, v6, v8);
  }

  if (v4[12]) {
    uint64_t v6 = (char *)v3 + v4[12] + *(unsigned int *)((char *)v3 + v4[12]);
  }
  else {
    uint64_t v6 = 0LL;
  }
  if (v5 < 0x1B) {
    goto LABEL_9;
  }
  uint64_t v7 = v4[13];
  if (!v7) {
    goto LABEL_9;
  }
  uint64_t v8 = *(unsigned int *)((char *)v3 + v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)v2 + 24LL))(v2, v6, v8);
}

uint64_t sub_284E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
}

uint64_t sub_284F8(uint64_t result, uint64_t a2)
{
  return result;
}

uint64_t sub_28524(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = off_7C298();
  uint64_t v8 = *(void *)(v6 + 3960);
  BOOL v9 = sub_639A8( v6 + 2544,  *(_DWORD **)(v6 + 2688),  *(_DWORD *)(*(void *)(a1 + 40) + 256LL),  *(void *)(a1 + 32),  3,  (unsigned int *)(*(void *)(a1 + 48) + 24LL),  0,  0LL);
  uint64_t result = 0LL;
  if (v9)
  {
    int v11 = sub_25A80( v6,  3LL,  (*(void *)(*(void *)(a1 + 136) + 24LL) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)__dst,  0);
    uint64_t result = 0LL;
    if (v11)
    {
      int v12 = sub_25A80( v6,  3LL,  (*(void *)(*(void *)(a1 + 152) + 24LL) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)v23,  0);
      uint64_t result = 0LL;
      if (v12)
      {
        int v13 = sub_25A80(v6, 3LL, *(void *)(*(void *)(a1 + 160) + 16LL), 16LL, 64LL, (uint64_t *)v22, 0);
        uint64_t result = 0LL;
        if (v13)
        {
          int v14 = sub_25A80(v6, 3LL, *(void *)(*(void *)(a1 + 160) + 24LL), 16LL, 64LL, (uint64_t *)v21, 0);
          uint64_t result = 0LL;
          if (v14)
          {
            int v15 = sub_25A80(v6, 3LL, *(void *)(*(void *)(a1 + 160) + 16LL), 16LL, 64LL, (uint64_t *)v20, 0);
            uint64_t result = 0LL;
            if (v15)
            {
              int v16 = sub_25A80(v6, 3LL, *(void *)(*(void *)(a1 + 160) + 24LL), 16LL, 64LL, (uint64_t *)v19, 0);
              uint64_t result = 0LL;
              if (v16)
              {
                memcpy( __dst[0],  *(const void **)(*(void *)(a1 + 136) + 16LL),  *(void *)(*(void *)(a1 + 136) + 24LL));
                memcpy( v23[0],  *(const void **)(*(void *)(a1 + 152) + 16LL),  *(void *)(*(void *)(a1 + 152) + 24LL));
                (*(void (**)(void, void *, void, uint64_t, void))(**(void **)(a1 + 160) + 16LL))( *(void *)(a1 + 160),  __dst[1],  *(unsigned int *)(a1 + 132),  v7,  0LL);
                memcpy( v21[0],  *(const void **)(*(void *)(a1 + 160) + 40LL),  *(void *)(*(void *)(a1 + 160) + 24LL));
                memcpy( v22[0],  *(const void **)(*(void *)(a1 + 160) + 32LL),  *(void *)(*(void *)(a1 + 160) + 16LL));
                (*(void (**)(void, void *, void, uint64_t, void))(**(void **)(a1 + 160) + 16LL))( *(void *)(a1 + 160),  v23[1],  *(unsigned int *)(a1 + 148),  v7,  0LL);
                memcpy( v19[0],  *(const void **)(*(void *)(a1 + 160) + 40LL),  *(void *)(*(void *)(a1 + 160) + 24LL));
                memcpy( v20[0],  *(const void **)(*(void *)(a1 + 160) + 32LL),  *(void *)(*(void *)(a1 + 160) + 16LL));
                (*(void (**)(uint64_t, _BYTE *, void, void, void *, void *))(*(void *)v8 + 152LL))( v8,  v26,  *(void *)(*(void *)(a1 + 160) + 24LL),  *(unsigned int *)(a1 + 128),  v22[1],  v21[1]);
                (*(void (**)(uint64_t, _BYTE *, void, void, void *, void *))(*(void *)v8 + 160LL))( v8,  v25,  *(void *)(*(void *)(a1 + 160) + 24LL),  *(unsigned int *)(a1 + 144),  v20[1],  v19[1]);
                if (off_7C2F8) {
                  off_7C2F8( a2,  *(void *)(*(void *)(v6 + 2536) + 280LL),  *(void *)(*(void *)(v6 + 2536) + 272LL),  16LL);
                }
                uint64_t GPUVirtualAddress = IOAccelResourceGetGPUVirtualAddress(*(void *)(a1 + 32));
                (*(void (**)(uint64_t, uint64_t, _BYTE *, _BYTE *))(*(void *)v8 + 184LL))(v8, a2, v26, v25);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 200LL))( v8,  a2 + 96,  a2 + 104,  GPUVirtualAddress + *(unsigned int *)(a1 + 116),  GPUVirtualAddress + *(unsigned int *)(a1 + 112));
                unint64_t v18 = GPUVirtualAddress + *(unsigned int *)(a1 + 100);
                *(void *)(a2 + 16) = v18;
                if (byte_7C00B)
                {
                  *(int64x2_t *)(a2 + 24) = vaddq_s64(vdupq_n_s64(v18), (int64x2_t)xmmword_70290);
                  *(void *)(a2 + 40) = v18 + 12;
                }

                *(_BYTE *)(a1 + 96) = 1;
                return sub_20BFC(a1 + 24, v6, a2, a3);
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_288D4(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8 = *(void **)(a1 + 8);
  uint64_t v9 = v8[317];
  uint64_t v11 = v8[6];
  uint64_t v10 = v8[7];
  int v12 = sub_25A80( (uint64_t)v8,  3LL,  (*(void *)(*(void *)(v11 + 240) + 24LL) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)__dst,  0);
  uint64_t result = 0LL;
  if (!v12) {
    return result;
  }
  memcpy(__dst[0], *(const void **)(*(void *)(v11 + 240) + 16LL), *(void *)(*(void *)(v11 + 240) + 24LL));
  int v14 = sub_25A80(*(void *)(a1 + 8), 3LL, 256LL, 16LL, 64LL, v92, 0);
  uint64_t result = 0LL;
  if (!v14) {
    return result;
  }
  int v15 = sub_25A80(*(void *)(a1 + 8), 3LL, 256LL, 16LL, 64LL, v91, 0);
  uint64_t result = 0LL;
  if (!v15) {
    return result;
  }
  int v16 = *(int **)(*(void *)(v11 + 240) + 40LL);
  int v17 = (unsigned __int16 *)((char *)v16 - *v16);
  unsigned int v72 = a4;
  if (*v17 >= 5u && (uint64_t v18 = v17[2]) != 0) {
    uint64_t v19 = *(unsigned int *)((char *)v16 + v18);
  }
  else {
    uint64_t v19 = 0LL;
  }
  off_7C2D8(v92[0], v91[0], __dst[1], a2, 12LL, v19);
  float v20 = *(__int128 **)(v11 + 32);
  __int128 v21 = v20[1];
  __int128 v93 = *v20;
  __int128 v94 = v21;
  unsigned int v22 = *((_DWORD *)v20 + 9);
  uint16x8_t v23 = *(uint16x8_t *)(*(void *)v8[6] + 160LL);
  int8x16_t v24 = (int8x16_t)vceqzq_s32((int32x4_t)vmovl_high_u16(v23));
  uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0xFFFF7320);
  int8x16_t v26 = (int8x16_t)vceqzq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v23.i8));
  uint32x4_t v27 = vaddw_u16(v25, *(uint16x4_t *)v23.i8);
  uint32x4_t v28 = vaddw_high_u16(v25, v23);
  v25.i64[0] = 0x100000001LL;
  v25.i64[1] = 0x100000001LL;
  int8x16_t v29 = vbicq_s8((int8x16_t)vshlq_u32(v25, v28), v24);
  v24.i64[0] = 0xFF000000FFLL;
  v24.i64[1] = 0xFF000000FFLL;
  int8x16_t v30 = vorrq_s8( vorrq_s8( vandq_s8(vbicq_s8((int8x16_t)vshlq_u32(v25, v27), v26), v24),  (int8x16_t)((_DWORD)v20[2] & 0xFFFFFF00)),  vandq_s8(v29, v24));
  *(int8x8_t *)v30.i8 = vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
  char v71 = v30.i8[0] | v30.i8[4];
  unsigned __int32 v31 = (v30.i32[0] | v30.i32[1]) & 0xFFFFF0FF | (((*(_DWORD *)(*(void *)(v10 + 32) + 32LL) >> 8) & 0xF) << 8);
  __int128 v83 = v93;
  __int128 v84 = v21;
  *(void *)&__int128 v85 = __PAIR64__(v22, v31);
  uint64_t v86 = &v83;
  __int128 v82 = xmmword_702A0;
  DWORD2(v85) = 68;
  uint64_t v32 = *(void **)(v11 + 432);
  if (v32)
  {
    BOOL v33 = 0LL;
    uint64_t v34 = *(_DWORD **)(v11 + 432);
    while (1)
    {
      unint64_t v35 = v33;
      BOOL v33 = v34;
      uint64_t v34 = (_DWORD *)v33[10];
      if (!v34) {
        goto LABEL_14;
      }
    }

    if (v33 == v32)
    {
      BOOL v33 = v32;
    }

    else
    {
      v35[10] = v33[10];
      v33[10] = v32;
      *(void *)(v11 + 432) = v33;
    }
  }

  else
  {
LABEL_14:
    BOOL v33 = operator new(0x58uLL);
    uint64_t v36 = (*(uint64_t (**)(void, __int128 *))(**(void **)(v11 + 440) + 16LL))( *(void *)(v11 + 440),  &v82);
    __int128 v37 = v85;
    *((_OWORD *)v33 + 2) = v84;
    *((_OWORD *)v33 + 3) = v37;
    uint64_t v38 = v86;
    __int128 v39 = v83;
    *(_OWORD *)BOOL v33 = v82;
    *((_OWORD *)v33 + 1) = v39;
    v33[8] = v38;
    v33[9] = v36;
    v33[10] = *(void *)(v11 + 432);
    *(void *)(v11 + 432) = v33;
    LODWORD(v38) = *(_DWORD *)(v11 + 452) + 1;
    *(_DWORD *)(v11 + 452) = (_DWORD)v38;
    if (v38 > *(_DWORD *)(v11 + 448))
    {
      uint64_t v40 = v33;
      do
      {
        uint64_t v41 = v40;
        uint64_t v40 = v33;
        BOOL v33 = (void *)v33[10];
      }

      while (v33);
      v41[10] = 0LL;
      (*(void (**)(void, void))(**(void **)(v11 + 440) + 24LL))(*(void *)(v11 + 440), v40[9]);
      operator delete(v40);
      --*(_DWORD *)(v11 + 452);
      BOOL v33 = *(void **)(v11 + 432);
    }
  }

  uint64_t v42 = v33[9];
  if (!v42) {
    return 0LL;
  }
  int v43 = sub_25A80( *(void *)(a1 + 8),  6LL,  (*(void *)(v42 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)v81,  0);
  uint64_t result = 0LL;
  if (v43)
  {
    memcpy(v81[0], *(const void **)(v42 + 16), *(void *)(v42 + 24));
    uint64_t v44 = *(void *)(*(void *)(v42 + 64) + 8LL);
    int v79 = 0LL;
    uint64_t v80 = 0LL;
    int v77 = 0LL;
    uint64_t v78 = 0LL;
    __int128 v75 = 0LL;
    uint64_t v76 = 0LL;
    int v45 = *(_DWORD *)(v42 + 88);
    uint64_t v47 = *(void *)(v44 + 16);
    uint64_t v46 = *(void *)(v44 + 24);
    if (!v45
      || (int v48 = sub_25A80(*(void *)(a1 + 8), 5LL, *(unsigned int *)(v42 + 88), 4LL, 0LL, (uint64_t *)&v79, 0),
          uint64_t result = 0LL,
          v48))
    {
      if (!v47 || (v49 = sub_25A80(*(void *)(a1 + 8), 6LL, v47, 16LL, 0LL, (uint64_t *)&v77, 0), uint64_t result = 0LL, v49))
      {
        if (!v46 || (v50 = sub_25A80(*(void *)(a1 + 8), 6LL, v46, 16LL, 0LL, (uint64_t *)&v75, 0), uint64_t result = 0LL, v50))
        {
          if (v45)
          {
            unsigned int v51 = (void *)v8[7];
            if (*(_WORD *)(*v51 + 176LL)) {
              sub_679BC( v42,  v79,  v80,  *(void *)(v51[1] + 8LL * (*(unsigned __int16 *)(*v51 + 176LL) - 36064)),  a3 != 0,  *(void *)(a1 + 8) + 3208LL);
            }
          }

          if (v47) {
            memcpy(v77, *(const void **)(v44 + 32), *(void *)(v44 + 16));
          }
          if (v46) {
            memcpy(v75, *(const void **)(v44 + 40), *(void *)(v44 + 24));
          }
          int v52 = sub_25A80(*(void *)(a1 + 8), 6LL, 16LL, 16LL, 0LL, v90, 0);
          uint64_t result = 0LL;
          if (v52)
          {
            off_7C2E0(v90[0], 0LL);
            uint64_t v53 = *(void *)(v9 + 168);
            int v54 = sub_25A80(*(void *)(a1 + 8), 6LL, *(void *)(v53 + 8), 16LL, 0LL, (uint64_t *)v89, 0);
            uint64_t result = 0LL;
            if (v54)
            {
              uint64_t v55 = *(int **)(v42 + 40);
              uint64_t v56 = (unsigned __int16 *)((char *)v55 - *v55);
              if (*v56 < 5u)
              {
                uint64_t v59 = 0LL;
                uint64_t v58 = v72;
              }

              else
              {
                uint64_t v57 = v56[2];
                uint64_t v58 = v72;
                if (v57) {
                  uint64_t v59 = *(unsigned int *)((char *)v55 + v57);
                }
                else {
                  uint64_t v59 = 0LL;
                }
              }

              (*(void (**)(uint64_t, void *, uint64_t, void, void))(*(void *)v53 + 16LL))( v53,  v81[1],  v59,  *(unsigned int *)(v42 + 56),  0LL);
              uint64_t v60 = (char *)v89[0];
              memcpy(v89[0], *(const void **)(v53 + 40), *(void *)(v53 + 24));
              int v61 = memcpy(&v60[*(void *)(v53 + 24)], *(const void **)(v53 + 32), *(void *)(v53 + 16));
              uint64_t v62 = off_7C328(v61);
              (*(void (**)(uint64_t, void *, uint64_t, void))(*(void *)v62 + 296LL))(v62, v8, v42, 0LL);
              (*(void (**)(uint64_t, void *, uint64_t, void, uint64_t, uint64_t))(*(void *)v62 + 368LL))( v62,  v89[1],  v78,  0LL,  v76,  v90[1]);
              unint64_t v63 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 200LL))(v62);
              if ((sub_25E10(*(void *)(a1 + 8), v63, 4LL, v88) & 1) != 0)
              {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v62 + 208LL))(v62, v88[0]);
                if (sub_28024(*(void *)(a1 + 8), v63 >> 2, v88[1]))
                {
                  uint64_t v64 = off_7C300();
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v64 + 128LL))( v64,  *(void *)(v11 + 240),  v92[1],  v91[1]);
                  uint64_t v65 = *(void *)(a1 + 8);
                  uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)v64 + 40LL))(v64);
                  if ((sub_25F38(v65, v66, &v74) & 1) != 0 && (sub_25F38(*(void *)(a1 + 8), 12LL, &v73) & 1) != 0)
                  {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v64 + 48LL))(v64, v74);
                    uint64_t v67 = v73;
                    uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v64 + 88LL))(v64, 5LL);
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v64 + 96LL))( v64,  v67,  v68,  4LL,  0LL,  0LL);
                    (*(void (**)(uint64_t))(*(void *)v64 + 16LL))(v64);
                    uint64_t v69 = *(void *)(a1 + 8);
                    if (!*(_BYTE *)(v69 + 4899)) {
                      *(_DWORD *)(*(void *)(v69 + 2688) + 4LL) = 0;
                    }
                    *(_BYTE *)(v69 + 3004) = 1;
                    if ((_DWORD)v58)
                    {
                      uint64_t v70 = sub_180B0( *(void *)(*(void *)(v8[6] + 8LL) + 64LL),  *(_DWORD *)(*(void *)v8[6] + 136LL),  *(_DWORD *)(*(void *)v8[6] + 132LL),  *(_DWORD *)(*(void *)v8[6] + 140LL),  0,  0,  0);
                      (*(void (**)(void, uint64_t, uint64_t, uint64_t, BOOL))(**(void **)(*(void *)(a1 + 8) + 3992LL)
                                                                                      + 24LL))( *(void *)(*(void *)(a1 + 8) + 3992LL),  v70,  *(void *)(*(void *)(a1 + 8) + 2696LL) + 312LL,  v58,  v71 == 0);
                      uint64_t v69 = *(void *)(a1 + 8);
                      *(_DWORD *)(v69 + 2944) |= 3u;
                    }

                    if (*(void *)(v69 + 2688)) {
                      sub_26240(v69, v62);
                    }
                    (*(void (**)(uint64_t))(*(void *)v62 + 128LL))(v62);
                    (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 3960LL) + 32LL))(*(void *)(*(void *)(a1 + 8) + 3960LL));
                    (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 3968LL) + 280LL))(*(void *)(*(void *)(a1 + 8) + 3968LL));
                    *(_DWORD *)(*(void *)(a1 + 8) + 2996LL) |= 0x23u;
                    return 1LL;
                  }

                  (*(void (**)(uint64_t))(*(void *)v64 + 16LL))(v64);
                }
              }

              (*(void (**)(uint64_t))(*(void *)v62 + 128LL))(v62);
              return 0LL;
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_290E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(void **)(a1 + 8);
  uint64_t v9 = v8[317];
  uint64_t v10 = v8[446];
  uint64_t v11 = (uint64_t)v8;
  if (!v10)
  {
    __int128 v74 = xmmword_702B0;
    uint64_t v10 = sub_305FC(v8 + 440, &v74);
    uint64_t v11 = *(void *)(a1 + 8);
    *(void *)(v11 + 3568) = v10;
    if (!v10) {
      return 0LL;
    }
  }

  uint64_t v12 = 0LL;
  if (sub_25A80( v11,  3LL,  (*(void *)(v10 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)&v76,  0))
  {
    memcpy( v76,  *(const void **)(*(void *)(*(void *)(a1 + 8) + 3568LL) + 16LL),  *(void *)(*(void *)(*(void *)(a1 + 8) + 3568LL) + 24LL));
    uint64_t v12 = 0LL;
    if (sub_25A80(*(void *)(a1 + 8), 3LL, 256LL, 16LL, 64LL, v82, 0))
    {
      uint64_t v12 = 0LL;
      if (sub_25A80(*(void *)(a1 + 8), 3LL, 256LL, 16LL, 64LL, v81, 0))
      {
        int v13 = *(int **)(*(void *)(*(void *)(a1 + 8) + 3568LL) + 40LL);
        int v14 = (unsigned __int16 *)((char *)v13 - *v13);
        int v61 = a3;
        if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0) {
          uint64_t v16 = *(unsigned int *)((char *)v13 + v15);
        }
        else {
          uint64_t v16 = 0LL;
        }
        uint64_t v60 = v77;
        uint64_t v17 = off_7C2D8(v82[0], v81[0], v77, a4, 12LL, v16);
        uint64_t v62 = off_7C300(v17);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v62 + 128LL))( v62,  *(void *)(*(void *)(a1 + 8) + 3568LL),  v82[1],  v81[1]);
        uint64_t v18 = *(void *)(a1 + 8);
        uint64_t v19 = *(void *)(v8[6] + 32LL);
        LODWORD(v74) = 7;
        memset(&v75[24], 0, 28);
        *(_OWORD *)&v75[8] = 0u;
        *(void *)&v75[56] = 0LL;
        int v20 = *(_DWORD *)(v18 + 3376);
        HIDWORD(v74) = 826;
        *(_DWORD *)__int128 v75 = v20;
        *(void *)((char *)&v74 + 4) = 0x1070000000ELL;
        *(_DWORD *)&v75[4] = 3632;
        uint64_t v21 = *(void *)(v19 + 32);
        __int128 v22 = *(_OWORD *)(v19 + 16);
        *(_OWORD *)&v75[8] = *(_OWORD *)v19;
        *(_OWORD *)&v75[24] = v22;
        *(void *)&v75[40] = v21;
        *(void *)&v75[56] = &v75[8];
        DWORD1(v74) = 15;
        *(_DWORD *)&v75[48] = 68;
        uint16x8_t v23 = *(void **)(v18 + 3664);
        if (v23)
        {
          int8x16_t v24 = 0LL;
          uint32x4_t v25 = *(_DWORD **)(v18 + 3664);
          while (1)
          {
            int8x16_t v26 = v24;
            int8x16_t v24 = v25;
            uint32x4_t v25 = (_DWORD *)v24[11];
            if (!v25) {
              goto LABEL_17;
            }
          }

          if (v24 == v23)
          {
            int8x16_t v24 = v23;
          }

          else
          {
            v26[11] = v24[11];
            v24[11] = v23;
            *(void *)(v18 + 3664) = v24;
          }
        }

        else
        {
LABEL_17:
          int8x16_t v24 = operator new(0x60uLL);
          uint64_t v27 = (*(uint64_t (**)(void, __int128 *))(**(void **)(v18 + 3672) + 16LL))( *(void *)(v18 + 3672),  &v74);
          __int128 v28 = *(_OWORD *)&v75[32];
          *((_OWORD *)v24 + 2) = *(_OWORD *)&v75[16];
          *((_OWORD *)v24 + 3) = v28;
          *((_OWORD *)v24 + 4) = *(_OWORD *)&v75[48];
          __int128 v29 = *(_OWORD *)v75;
          *(_OWORD *)int8x16_t v24 = v74;
          *((_OWORD *)v24 + 1) = v29;
          v24[10] = v27;
          v24[11] = *(void *)(v18 + 3664);
          *(void *)(v18 + 3664) = v24;
          unsigned int v30 = *(_DWORD *)(v18 + 3684) + 1;
          *(_DWORD *)(v18 + 3684) = v30;
          if (v30 > *(_DWORD *)(v18 + 3680))
          {
            unsigned __int32 v31 = v24;
            uint64_t v32 = v62;
            do
            {
              BOOL v33 = v31;
              unsigned __int32 v31 = v24;
              int8x16_t v24 = (void *)v24[11];
            }

            while (v24);
            v33[11] = 0LL;
            (*(void (**)(void, void))(**(void **)(v18 + 3672) + 24LL))( *(void *)(v18 + 3672),  v31[10]);
            operator delete(v31);
            --*(_DWORD *)(v18 + 3684);
            int8x16_t v24 = *(void **)(v18 + 3664);
            goto LABEL_25;
          }
        }

        uint64_t v32 = v62;
LABEL_25:
        uint64_t v34 = v24[10];
        if (v34)
        {
          uint64_t v12 = 0LL;
          if (sub_25A80( *(void *)(a1 + 8),  6LL,  (*(void *)(v34 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)&__dst,  0))
          {
            memcpy(__dst, *(const void **)(v34 + 16), *(void *)(v34 + 24));
            uint64_t v35 = *(void *)(*(void *)(v34 + 64) + 8LL);
            uint64_t v70 = 0LL;
            uint64_t v71 = 0LL;
            uint64_t v68 = 0LL;
            uint64_t v69 = 0LL;
            uint64_t v66 = 0LL;
            uint64_t v67 = 0LL;
            uint64_t v36 = *(unsigned int *)(v34 + 88);
            uint64_t v37 = *(void *)(v35 + 16);
            uint64_t v63 = *(void *)(v35 + 24);
            if (!(_DWORD)v36 || (uint64_t v12 = 0LL, sub_25A80(*(void *)(a1 + 8), 5LL, v36, 4LL, 0LL, &v70, 0)))
            {
              if (!v37
                || (uint64_t v12 = 0LL, sub_25A80(*(void *)(a1 + 8), 6LL, v37, 16LL, 0LL, (uint64_t *)&v68, 0)))
              {
                if (!v63
                  || (uint64_t v12 = 0LL, sub_25A80(*(void *)(a1 + 8), 6LL, v63, 16LL, 0LL, (uint64_t *)&v66, 0)))
                {
                  if ((_DWORD)v36) {
                    sub_6720C((unsigned int *)v34, v70, v71, *(void *)(a1 + 8) + 3024LL, *(void *)(a1 + 8) + 3208LL);
                  }
                  if (v37) {
                    memcpy(v68, *(const void **)(v35 + 32), *(void *)(v35 + 16));
                  }
                  if (v63) {
                    memcpy(v66, *(const void **)(v35 + 40), *(void *)(v35 + 24));
                  }
                  uint64_t v38 = *(void *)(v9 + 168);
                  uint64_t v12 = 0LL;
                  if (sub_25A80( *(void *)(a1 + 8),  6LL,  *(void *)(v38 + 8),  16LL,  0LL,  (uint64_t *)v79,  0))
                  {
                    uint64_t v39 = v73;
                    uint64_t v40 = *(int **)(v34 + 40);
                    uint64_t v41 = (unsigned __int16 *)((char *)v40 - *v40);
                    if (*v41 >= 5u && (uint64_t v42 = v41[2]) != 0) {
                      uint64_t v43 = *(unsigned int *)((char *)v40 + v42);
                    }
                    else {
                      uint64_t v43 = 0LL;
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v38 + 16LL))( v38,  v73,  v43,  *(unsigned int *)(v34 + 56),  0LL);
                    int v45 = (char *)v79[0];
                    memcpy(v79[0], *(const void **)(v38 + 40), *(void *)(v38 + 24));
                    memcpy(&v45[*(void *)(v38 + 24)], *(const void **)(v38 + 32), *(void *)(v38 + 16));
                    uint64_t v12 = 0LL;
                    if (sub_25A80(*(void *)(a1 + 8), 6LL, 16LL, 16LL, 0LL, v80, 0))
                    {
                      uint64_t v46 = off_7C2E0(v80[0], 0LL);
                      uint64_t v47 = off_7C328(v46);
                      (*(void (**)(uint64_t, void *, uint64_t, void, void, uint64_t, void))(*(void *)v47 + 288LL))( v47,  v8,  a2,  *(void *)(v35 + 24),  *(unsigned int *)(v35 + 48),  v34,  0LL);
                      (*(void (**)(uint64_t, void *, uint64_t, void, uint64_t, uint64_t))(*(void *)v47 + 368LL))( v47,  v79[1],  v69,  0LL,  v67,  v80[1]);
                      unint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 200LL))(v47);
                      if (sub_25E10(*(void *)(a1 + 8), v48, 4LL, v78)
                        && ((*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 208LL))(v47, v78[0]),
                            sub_28024(*(void *)(a1 + 8), v48 >> 2, v78[1]))
                        && (uint64_t v49 = *(void *)(a1 + 8),
                            uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 40LL))(v32),
                            sub_25F38(v49, v50, &v65))
                        && sub_25F38(*(void *)(a1 + 8), 12LL, v64))
                      {
                        (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 48LL))(v32, v65);
                        uint64_t v51 = v64[0];
                        uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 88LL))(v32, 5LL);
                        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v32 + 96LL))( v32,  v51,  v52,  4LL,  0LL,  0LL);
                        uint64_t v53 = *(void *)(a1 + 8);
                        *(_BYTE *)(v53 + 2552) = 1;
                        uint64_t v54 = *(void *)(v53 + 3008);
                        if (v54)
                        {
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v32 + 56LL))( v32,  v54,  *(void *)(v53 + 3016) + 12LL);
                          uint64_t v53 = *(void *)(a1 + 8);
                        }

                        *(void *)(v53 + 3008) = v51;
                        *(void *)(v53 + 3016) = v64[1];
                        (*(void (**)(void))(**(void **)(v53 + 3960) + 32LL))(*(void *)(v53 + 3960));
                        (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 3968LL) + 280LL))(*(void *)(*(void *)(a1 + 8) + 3968LL));
                        uint64_t v55 = *(void *)(a1 + 8);
                        *(_DWORD *)(v55 + 2996) |= 0x23u;
                        if (*(_BYTE *)(v55 + 4732))
                        {
                          unint64_t v56 = v60 + (*(void *)(*(void *)(v55 + 3568) + 24LL) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                          unsigned int v57 = *(_DWORD *)(v55 + 4736);
                          uint64_t v58 = *(void *)(v55 + 4704) + 40LL * v57;
                          *(void *)(v58 + 8) = v60;
                          *(void *)(v58 + 16) = v56;
                          unint64_t v59 = v39 + (*(void *)(v34 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                          *(void *)(v58 + 24) = v39;
                          *(void *)(v58 + 32) = v59;
                          *(_DWORD *)(v58 + 4) = -1;
                          *(_DWORD *)uint64_t v58 = *(_DWORD *)(v55 + 4696);
                          *(_DWORD *)(v55 + 4736) = (v57 + 1) % *(_DWORD *)(v55 + 4712);
                        }

                        uint64_t v12 = 1LL;
                      }

                      else
                      {
                        uint64_t v12 = 0LL;
                      }

                      (*(void (**)(uint64_t))(*(void *)v47 + 128LL))(v47);
                    }
                  }
                }
              }
            }
          }
        }

        else
        {
          uint64_t v12 = 0LL;
        }

        (*(void (**)(uint64_t))(*(void *)v32 + 16LL))(v32);
      }
    }
  }

  return v12;
}

uint64_t sub_298B8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int *a5, int *a6)
{
  uint64_t v7 = a2;
  if (xmmword_7C430 == 1)
  {
    uint64_t v54 = *(void *)(a1 + 8);
    if (*(void *)(v54 + 2688)) {
      sub_26240(*(void *)(a1 + 8), *(void *)(v54 + 3968));
    }
    __srca = v7 + 32;
    uint64_t v121 = v54 + 2544;
    uint64_t v112 = (float **)(v54 + 2728);
    while (1)
    {
      if (*(void *)(v54 + 2688)) {
        sub_26240(v54, *(void *)(v54 + 3968));
      }
      if (sub_26BA4(v54, 696LL, 2))
      {
        *(void *)&v159[88] = 0LL;
        memset(&v159[216], 0, 25);
        *(_DWORD *)&v159[96] = 0;
        memset(v159, 0, 76);
        memset(&v159[104], 0, 25);
        *(_OWORD *)&v159[132] = xmmword_702C0;
        memset(&v159[152], 0, 33);
        *(void *)&v159[188] = 0LL;
        v159[196] = 0;
        *(_OWORD *)&v159[200] = xmmword_702D0;
        v159[256] = 0;
        *(_DWORD *)&v159[260] = 0;
        *(void *)&v159[264] = 0LL;
        uint64_t v55 = __srca;
        if (*((void *)v7 + 2))
        {
          size_t v56 = (*((void *)v7 + 35) * *((unsigned int *)v7 + 62) + 3LL) & 0xFFFFFFFFFFFFFFFCLL;
          if (v56 <= 0x4000) {
            uint64_t v57 = 64LL;
          }
          else {
            uint64_t v57 = 0x4000LL;
          }
          if ((sub_25A80( v54,  10LL,  (*((void *)v7 + 35) * *((unsigned int *)v7 + 62) + 3LL) & 0xFFFFFFFFFFFFFFFCLL,  v57,  0LL,  (uint64_t *)__dst,  0) & 1) == 0) {
            goto LABEL_146;
          }
          if (v56 == *((void *)v7 + 3))
          {
            memcpy(__dst[0], *((const void **)v7 + 2), v56);
          }

          else
          {
            uint64_t v58 = *((unsigned int *)v7 + 62);
            if ((_DWORD)v58)
            {
              size_t v59 = *((void *)a2 + 17) * *((void *)a2 + 18);
              uint64_t v60 = *((void *)a2 + 35);
              int v61 = (char *)__dst[0];
              uint64_t v62 = (char *)*((void *)a2 + 2);
              do
              {
                memcpy(v61, v62, v59);
                v61 += v60;
                v62 += v59;
                --v58;
              }

              while (v58);
            }
          }

          uint64_t v55 = v159;
          memcpy(v159, __srca, sizeof(v159));
          *(void **)unsigned __int8 v159 = __dst[1];
          *(void **)&v159[8] = __dst[1];
          uint64_t v63 = *(void *)(v54 + 1792);
          *(void **)&v159[16] = __dst[1];
          *(void *)&v159[152] = v63;
          *(void *)&v159[160] = *(void *)(v54 + 1784) + 24LL;
          *(_DWORD *)&v159[168] = *(_DWORD *)(*(void *)(v54 + 1776) + 256LL);
        }

        uint64_t v158 = 0LL;
        __int128 v156 = 0u;
        __int128 v157 = 0u;
        __int128 v151 = 0u;
        __int128 v152 = 0u;
        __int128 v153 = 0u;
        __int128 v154 = 0u;
        unsigned __int8 v64 = *a3;
        unsigned __int8 v65 = *((_DWORD *)a3 + 39);
        int v66 = ((*a3 & 0xF) << 12) | ((*a3 & 0xF) << 8) | (v65 << 16);
        LODWORD(v158) = v66;
        unint64_t v67 = ((unint64_t)(v65 & 0x7F) << 36) | ((unint64_t)(v64 & 0xF) << 32);
        int v68 = *((_DWORD *)a3 + 1);
        *(void *)&__int128 v155 = 0LL;
        *((void *)&v155 + 1) = ~(-1 << v68) | ((unint64_t)(v68 & 0x1F) << 43) | v67;
        uint64_t v116 = (uint64_t)v55;
        if (v68)
        {
          unint64_t v69 = 0LL;
          LODWORD(v70) = 0;
          int v71 = 1;
          do
          {
            while (1)
            {
              unsigned int v72 = (unsigned int *)&a3[280 * v69];
              uint64_t v73 = v72[51];
              uint64_t v74 = v72[42];
              if ((_DWORD)v74 == 10) {
                int v75 = 3;
              }
              else {
                int v75 = 2;
              }
              if (!v72[73])
              {
                uint64_t v76 = &a3[280 * v69];
                int v77 = (32 * (*((_DWORD *)v76 + 23) & 7)) | *((_DWORD *)v76 + 22) & 0x1F | (*((_DWORD *)v76 + 38) << 15);
                int v78 = *((_DWORD *)v76 + 53);
                if (dword_7C494) {
                  BOOL v79 = v78 == 0;
                }
                else {
                  BOOL v79 = 1;
                }
                if (v79) {
                  int v80 = 0;
                }
                else {
                  int v80 = 256;
                }
                *((_DWORD *)&v156 + v73) = v80 | v77 | *((_DWORD *)&v156 + v73) & 0xFF807E00;
                int v66 = v158 | (1 << v73);
                LODWORD(v158) = v66;
              }

              uint64_t v81 = (char *)&v151 + 4 * v69;
              if (off_7C2A8) {
                off_7C2A8(v81, v74, *(unsigned int *)&a3[280 * v69 + 212], *(unsigned int *)&a3[280 * v69 + 88], *a3);
              }
              uint64_t v70 = (unsigned __int16)(v75 << (2 * v73)) | v70;
              if (v71) {
                break;
              }
            }

            BOOL v82 = sub_639A8( v121,  *(_DWORD **)(v54 + 2688),  *(_DWORD *)&a3[280 * v69 + 200],  *(void *)&a3[280 * v69 + 184],  12,  *(unsigned int **)&a3[280 * v69 + 192],  0,  0LL);
            int v71 = v82;
            ++v69;
          }

          while (v69 < *((unsigned int *)a3 + 1));
          if (!v82)
          {
LABEL_145:
            uint64_t v7 = a2;
            goto LABEL_146;
          }

          uint64_t v55 = (_BYTE *)v116;
        }

        else
        {
          uint64_t v70 = 0LL;
        }

        if (!sub_639A8( v121,  *(_DWORD **)(v54 + 2688),  *((_DWORD *)v55 + 42),  *((void *)v55 + 19),  4,  *((unsigned int **)v55 + 20),  0,  0LL)
          || !sub_26AF8(v54))
        {
          goto LABEL_145;
        }

        uint64_t v83 = *a3;
        uint64_t v84 = *(void *)(v54 + 2704);
        *(_DWORD *)(v84 + 608) = v83;
        __int128 v85 = &unk_70E9C;
        memcpy((void *)(v84 + 612), v85, 8 * v83);
        *(_DWORD *)(*(void *)(v54 + 2704) + 676LL) = (BYTE2(v66) * dword_7C488 + 3) >> 2;
        if (off_7C3D8) {
          off_7C3D8();
        }
        __int128 v147 = v153;
        __int128 v148 = v154;
        __int128 v149 = v155;
        __int128 v145 = v151;
        __int128 v146 = v152;
        *(_OWORD *)__dst = xmmword_701E0;
        int v150 = 68;
        uint64_t v86 = sub_B164(v54 + 3928, __dst);
        if (!v86) {
          goto LABEL_145;
        }
        uint64_t v87 = v86;
        if (!(*(unsigned int (**)(void, uint64_t, void, void, void, void))(**(void **)(v54 + 2536)
                                                                                              + 152LL))( *(void *)(v54 + 2536),  v86,  *(void *)(v54 + 2704),  (dword_7C488 * BYTE2(v66) + 3) >> 2,  *a3,  0LL))
          goto LABEL_145;
        sub_280F4(v54, v87, *(char **)(v54 + 2704), 0LL, a3, 0, 0, 0);
        *(_BYTE *)(v54 + 4898) = *a3;
        unint64_t v137 = v70 | ((unint64_t)v66 << 32);
        __int128 v139 = v156;
        __int128 v140 = v157;
        uint64_t v141 = v158;
        unsigned int v143 = &v139;
        __int128 __s1 = xmmword_702E0;
        int v138 = 3888;
        int v142 = 68;
        uint64_t v88 = sub_CA1C(v54 + 3864, &__s1);
        if (!v88) {
          goto LABEL_145;
        }
        uint64_t v89 = v88;
        uint64_t v90 = off_7C308();
        if (!v90) {
          goto LABEL_145;
        }
        unsigned int v91 = (int32x2_t *)v90;
        *(_DWORD *)(v90 + 8) &= 0xFFFFFF00;
        *(_DWORD *)(v90 + 12) = 0;
        unsigned int v92 = *((_DWORD *)a3 + 3) & 0xFFFFFFFE;
        if (v92)
        {
          uint64_t v114 = v89;
          unsigned int v93 = 0;
          int v94 = dword_7C40C;
          int v95 = dword_7C3FC;
          int v96 = 1;
          do
          {
            unsigned int v97 = __clz(v92) ^ 0x1F;
            uint64_t v98 = (v95 << (*a3 > 1u));
            if (v94)
            {
              v93 += v98;
            }

            else
            {
              v96 &= sub_25A80(v54, 7LL, v98, xmmword_7C410, *(void *)(v54 + 4888), &v134, 0);
              v161[v97] = v135;
              int v95 = dword_7C3FC;
              int v94 = dword_7C40C;
            }

            v92 ^= 1 << v97;
          }

          while (v92);
          if (v94 == 1 && v93)
          {
            unsigned int v99 = v95 * dword_7C404;
            if (v99 <= v93) {
              uint64_t v100 = v93;
            }
            else {
              uint64_t v100 = v99;
            }
            v96 &= sub_25A80(v54, 7LL, v100, xmmword_7C410, *(void *)(v54 + 4888), &v134, 0);
            uint64_t v101 = *(void *)(v54 + 2704);
            *(void *)(v101 + 392) = v135;
            *(_DWORD *)(v101 + 400) = v100 / dword_7C400;
          }

          uint64_t v89 = v114;
          if (v96 != 1) {
            goto LABEL_145;
          }
        }

        unsigned int v102 = *(int32x2_t **)(v54 + 2704);
        if (!(**(unint64_t (***)(int32x2_t *, uint64_t, uint64_t, float **, uint64_t))v91)( v91,  v54,  (uint64_t)&v102[16],  v112,  v89)) {
          goto LABEL_145;
        }
        v102[64] = vrev64_s32(v91[1]);
        sub_27D14(*v112, v89, a3, (uint64_t)v161);
        (*(void (**)(int32x2_t *))(*(void *)v91 + 16LL))(v91);
        uint64_t v7 = a2;
        int v127 = 8 * (*a2 & 0xF);
        int v128 = 3632;
        __int128 v129 = v156;
        __int128 v130 = v157;
        uint64_t v131 = v158;
        uint64_t v133 = &v129;
        __int128 v126 = xmmword_702F0;
        int v132 = 68;
        uint64_t v103 = sub_CA1C(v54 + 3800, &v126);
        if (v103)
        {
          uint64_t v104 = v103;
          __int128 v124 = 0uLL;
          uint64_t v125 = 0LL;
          v160.n128_u8[0] = 0;
          *(unint64_t *)((char *)v160.n128_u64 + 4) = 0x200000002LL;
          v160.n128_u32[3] = 2;
          sub_65394((char **)&v124, &v160);
          int v105 = (void *)v124;
          sub_68148();
          if (v105) {
            operator delete(v105);
          }
          if ((sub_25A80( v54,  6LL,  (*(void *)(v104 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)&v124,  0) & 1) != 0)
          {
            memcpy((void *)v124, *(const void **)(v104 + 16), *(void *)(v104 + 24));
            __n128 v160 = 0uLL;
            uint64_t v106 = *(unsigned int *)(v104 + 88);
            if ((_DWORD)v106)
            {
              sub_67D8C(v104, v160.n128_i64[0], v160.n128_i64[1], v116, *a2, (uint64_t)v161, a4);
            }

            __int128 v122 = v124;
            uint64_t v123 = v104;
          }
        }
      }

LABEL_146:
    }
  }

  if (!(_BYTE)xmmword_7C430)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    if (*(void *)(v8 + 2688)) {
      sub_26240(*(void *)(a1 + 8), *(void *)(v8 + 3968));
    }
    __vImage_Buffer src = v7 + 32;
    uint64_t v120 = v8 + 2544;
    uint64_t v111 = (float **)(v8 + 2728);
    while (1)
    {
      if (*(void *)(v8 + 2688)) {
        sub_26240(v8, *(void *)(v8 + 3968));
      }
      if (sub_26BA4(v8, 696LL, 2))
      {
        *(void *)&v159[88] = 0LL;
        memset(&v159[216], 0, 25);
        *(_DWORD *)&v159[96] = 0;
        memset(v159, 0, 76);
        memset(&v159[104], 0, 25);
        *(_OWORD *)&v159[132] = xmmword_702C0;
        memset(&v159[152], 0, 33);
        *(void *)&v159[188] = 0LL;
        v159[196] = 0;
        *(_OWORD *)&v159[200] = xmmword_702D0;
        v159[256] = 0;
        *(_DWORD *)&v159[260] = 0;
        *(void *)&v159[264] = 0LL;
        uint64_t v9 = __src;
        if (*((void *)v7 + 2))
        {
          if (!sub_25A80( v8,  10LL,  (*((void *)v7 + 3) + 3LL) & 0xFFFFFFFFFFFFFFFCLL,  4LL,  0LL,  (uint64_t *)__dst,  0)) {
            goto LABEL_70;
          }
          memcpy(__dst[0], *((const void **)v7 + 2), *((void *)v7 + 3));
          uint64_t v9 = v159;
          memcpy(v159, __src, sizeof(v159));
          *(void **)unsigned __int8 v159 = __dst[1];
          *(void **)&v159[8] = __dst[1];
          uint64_t v10 = *(void *)(v8 + 1792);
          *(void **)&v159[16] = __dst[1];
          *(void *)&v159[152] = v10;
          *(void *)&v159[160] = *(void *)(v8 + 1784) + 24LL;
          *(_DWORD *)&v159[168] = *(_DWORD *)(*(void *)(v8 + 1776) + 256LL);
        }

        uint64_t v158 = 0LL;
        __int128 v156 = 0u;
        __int128 v157 = 0u;
        __int128 v151 = 0u;
        __int128 v152 = 0u;
        __int128 v153 = 0u;
        __int128 v154 = 0u;
        unsigned __int8 v11 = *a3;
        unsigned __int8 v12 = *((_DWORD *)a3 + 39);
        int v13 = ((*a3 & 0xF) << 12) | ((*a3 & 0xF) << 8) | (v12 << 16);
        LODWORD(v158) = v13;
        unint64_t v14 = ((unint64_t)(v12 & 0x7F) << 36) | ((unint64_t)(v11 & 0xF) << 32);
        int v15 = *((_DWORD *)a3 + 1);
        *(void *)&__int128 v155 = 0LL;
        *((void *)&v155 + 1) = ~(-1 << v15) | ((unint64_t)(v15 & 0x1F) << 43) | v14;
        uint64_t v115 = (uint64_t)v9;
        if (v15)
        {
          unint64_t v16 = 0LL;
          LODWORD(v17) = 0;
          int v18 = 1;
          do
          {
            while (1)
            {
              uint64_t v19 = (unsigned int *)&a3[280 * v16];
              uint64_t v20 = v19[51];
              uint64_t v21 = v19[42];
              if ((_DWORD)v21 == 10) {
                int v22 = 3;
              }
              else {
                int v22 = 2;
              }
              if (!v19[73])
              {
                uint16x8_t v23 = &a3[280 * v16];
                int v24 = (32 * (*((_DWORD *)v23 + 23) & 7)) | *((_DWORD *)v23 + 22) & 0x1F | (*((_DWORD *)v23 + 38) << 15);
                int v25 = *((_DWORD *)v23 + 53);
                if (dword_7C494) {
                  BOOL v26 = v25 == 0;
                }
                else {
                  BOOL v26 = 1;
                }
                if (v26) {
                  int v27 = 0;
                }
                else {
                  int v27 = 256;
                }
                *((_DWORD *)&v156 + v20) = v27 | v24 | *((_DWORD *)&v156 + v20) & 0xFF807E00;
                int v13 = v158 | (1 << v20);
                LODWORD(v158) = v13;
              }

              __int128 v28 = (char *)&v151 + 4 * v16;
              if (off_7C2A8) {
                off_7C2A8(v28, v21, *(unsigned int *)&a3[280 * v16 + 212], *(unsigned int *)&a3[280 * v16 + 88], *a3);
              }
              uint64_t v17 = (unsigned __int16)(v22 << (2 * v20)) | v17;
              if (v18) {
                break;
              }
            }

            BOOL v29 = sub_639A8( v120,  *(_DWORD **)(v8 + 2688),  *(_DWORD *)&a3[280 * v16 + 200],  *(void *)&a3[280 * v16 + 184],  12,  *(unsigned int **)&a3[280 * v16 + 192],  0,  0LL);
            int v18 = v29;
            ++v16;
          }

          while (v16 < *((unsigned int *)a3 + 1));
          if (!v29)
          {
LABEL_69:
            uint64_t v7 = a2;
            goto LABEL_70;
          }

          uint64_t v9 = (_BYTE *)v115;
        }

        else
        {
          uint64_t v17 = 0LL;
        }

        if (!sub_639A8( v120,  *(_DWORD **)(v8 + 2688),  *((_DWORD *)v9 + 42),  *((void *)v9 + 19),  4,  *((unsigned int **)v9 + 20),  0,  0LL)
          || !sub_26AF8(v8))
        {
          goto LABEL_69;
        }

        uint64_t v30 = *a3;
        uint64_t v31 = *(void *)(v8 + 2704);
        *(_DWORD *)(v31 + 608) = v30;
        uint64_t v32 = &unk_70E9C;
        memcpy((void *)(v31 + 612), v32, 8 * v30);
        *(_DWORD *)(*(void *)(v8 + 2704) + 676LL) = (BYTE2(v13) * dword_7C488 + 3) >> 2;
        if (off_7C3D8) {
          off_7C3D8();
        }
        __int128 v147 = v153;
        __int128 v148 = v154;
        __int128 v149 = v155;
        __int128 v145 = v151;
        __int128 v146 = v152;
        *(_OWORD *)__dst = xmmword_701E0;
        int v150 = 68;
        uint64_t v33 = sub_B164(v8 + 3928, __dst);
        uint64_t v7 = a2;
        if (v33)
        {
          uint64_t v34 = v33;
          if ((*(unsigned int (**)(void, uint64_t, void, void, void, void))(**(void **)(v8 + 2536)
                                                                                               + 152LL))( *(void *)(v8 + 2536),  v33,  *(void *)(v8 + 2704),  (dword_7C488 * BYTE2(v13) + 3) >> 2,  *a3,  0LL))
          {
            sub_280F4(v8, v34, *(char **)(v8 + 2704), 0LL, a3, 0, 0, 0);
            *(_BYTE *)(v8 + 4898) = *a3;
            unint64_t v137 = v17 | ((unint64_t)v13 << 32);
            __int128 v139 = v156;
            __int128 v140 = v157;
            uint64_t v141 = v158;
            unsigned int v143 = &v139;
            __int128 __s1 = xmmword_702E0;
            int v138 = 3888;
            int v142 = 68;
            uint64_t v35 = sub_CA1C(v8 + 3864, &__s1);
            if (v35)
            {
              uint64_t v36 = v35;
              uint64_t v37 = off_7C308();
              if (v37)
              {
                uint64_t v38 = (int32x2_t *)v37;
                *(_DWORD *)(v37 + 8) &= 0xFFFFFF00;
                *(_DWORD *)(v37 + 12) = 0;
                unsigned int v39 = *((_DWORD *)a3 + 3) & 0xFFFFFFFE;
                if (!v39) {
                  goto LABEL_59;
                }
                uint64_t v113 = v36;
                unsigned int v40 = 0;
                int v41 = dword_7C40C;
                int v42 = dword_7C3FC;
                int v43 = 1;
                do
                {
                  unsigned int v44 = __clz(v39) ^ 0x1F;
                  uint64_t v45 = (v42 << (*a3 > 1u));
                  if (v41)
                  {
                    v40 += v45;
                  }

                  else
                  {
                    v43 &= sub_25A80(v8, 7LL, v45, xmmword_7C410, *(void *)(v8 + 4888), &v134, 0);
                    v161[v44] = v135;
                    int v42 = dword_7C3FC;
                    int v41 = dword_7C40C;
                  }

                  v39 ^= 1 << v44;
                }

                while (v39);
                if (v41 == 1 && v40)
                {
                  unsigned int v46 = v42 * dword_7C404;
                  if (v46 <= v40) {
                    uint64_t v47 = v40;
                  }
                  else {
                    uint64_t v47 = v46;
                  }
                  v43 &= sub_25A80(v8, 7LL, v47, xmmword_7C410, *(void *)(v8 + 4888), &v134, 0);
                  uint64_t v48 = *(void *)(v8 + 2704);
                  *(void *)(v48 + 392) = v135;
                  *(_DWORD *)(v48 + 400) = v47 / dword_7C400;
                }

                BOOL v26 = v43 == 1;
                uint64_t v7 = a2;
                uint64_t v36 = v113;
                if (v26)
                {
LABEL_59:
                  uint64_t v49 = *(int32x2_t **)(v8 + 2704);
                  if ((**(unint64_t (***)(int32x2_t *, uint64_t, uint64_t, float **, uint64_t))v38)( v38,  v8,  (uint64_t)&v49[16],  v111,  v36))
                  {
                    v49[64] = vrev64_s32(v38[1]);
                    sub_27D14(*v111, v36, a3, (uint64_t)v161);
                    (*(void (**)(int32x2_t *))(*(void *)v38 + 16LL))(v38);
                    int v127 = 8 * (*v7 & 0xF);
                    int v128 = 3632;
                    __int128 v129 = v156;
                    __int128 v130 = v157;
                    uint64_t v131 = v158;
                    uint64_t v133 = &v129;
                    __int128 v126 = xmmword_702F0;
                    int v132 = 68;
                    uint64_t v50 = sub_CA1C(v8 + 3800, &v126);
                    if (v50)
                    {
                      uint64_t v51 = v50;
                      __int128 v124 = 0uLL;
                      uint64_t v125 = 0LL;
                      v160.n128_u8[0] = 0;
                      *(unint64_t *)((char *)v160.n128_u64 + 4) = 0x200000002LL;
                      v160.n128_u32[3] = 2;
                      sub_65394((char **)&v124, &v160);
                      uint64_t v52 = (void *)v124;
                      sub_68148();
                      if (v52) {
                        operator delete(v52);
                      }
                      if ((sub_25A80( v8,  6LL,  (*(void *)(v51 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)&v124,  0) & 1) != 0)
                      {
                        memcpy((void *)v124, *(const void **)(v51 + 16), *(void *)(v51 + 24));
                        __n128 v160 = 0uLL;
                        uint64_t v53 = *(unsigned int *)(v51 + 88);
                        if ((_DWORD)v53)
                        {
                          sub_67D8C(v51, v160.n128_i64[0], v160.n128_i64[1], v115, *v7, (uint64_t)v161, a4);
                        }

                        __int128 v122 = v124;
                        uint64_t v123 = v51;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

LABEL_70:
    }
  }

  return 1LL;
}

void sub_2AA40(uint64_t a1)
{
  if (!dword_7C464)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (*(void *)(v2 + 808))
    {
      if ((*(_BYTE *)(v2 + 2980) & 1) != 0)
      {
        uint64_t v3 = *(void **)(*(void *)(v2 + 3504) + 1464LL);
        unsigned int v4 = *(uint64_t **)(*(void *)(v2 + 40) + 368LL);
        unsigned int v5 = *(char **)(v2 + 4128);
        uint64_t v6 = *v4;
        unint64_t v7 = *(void *)(*v4 + 768);
        bzero(v5, 0x1A0uLL);
        *(_DWORD *)unsigned int v5 = 0;
        *((_DWORD *)v5 + 49) = 0;
        v5[328] = 0;
        uint64_t v8 = (int *)v3[2];
        uint64_t v9 = *(unsigned __int16 *)((char *)v8 - *v8 + 4);
        uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
        LODWORD(v11) = *(int *)((char *)v8 + v9 + v10);
        if ((_DWORD)v11)
        {
          uint64_t v12 = 0LL;
          int v13 = 0;
          unint64_t v11 = 0LL;
          int v14 = 0;
          uint64_t v15 = 0LL;
          unint64_t v16 = v5 + 9;
          while (1)
          {
            uint64_t v17 = v9;
            uint64_t v18 = v10 + v9;
            uint64_t v19 = *(unsigned int *)((char *)&v8[v12 + 1] + v18);
            uint64_t v20 = v18 + v19;
            uint64_t v21 = (char *)&v8[v12] + v18 + v19;
            uint64_t v22 = *((int *)v21 + 1);
            if (*(unsigned __int16 *)((char *)&v8[v12 + 1] + v20 - v22) >= 7u
              && (uint64_t v23 = v17 + v10 + v19, *(_WORD *)((char *)&v8[v12 + 2] + v23 - v22 + 2)))
            {
              unsigned int v24 = *(int *)((char *)v8 + v23
                                        + v12 * 4
            }

            else
            {
              unsigned int v24 = 0;
            }

            if (((v7 >> v24) & 0x10000) != 0)
            {
              char v25 = 0;
              int v26 = 0;
              int v27 = &v5[8 * v13];
              LOBYTE(v28) = v13++;
              *((_DWORD *)v5 + 49) = v13;
              uint64_t v29 = v6 + 24LL * v24;
              *((_DWORD *)v27 + 50) = *(_DWORD *)(v29 + 16);
              *((_DWORD *)v27 + 51) = *(_DWORD *)(v29 + 8);
            }

            else
            {
              if (v15)
              {
                int v28 = *((_DWORD *)v5 + 102);
              }

              else
              {
                *((_DWORD *)v5 + 102) = v13;
                uint64_t v30 = &v5[8 * v13];
                LOBYTE(v28) = v13++;
                *((_DWORD *)v5 + 49) = v13;
                *((void *)v30 + 25) = 0LL;
              }

              int v26 = v15;
              v15 += 16LL;
              char v25 = v14++;
            }

            *(v16 - 5) = v24;
            uint64_t v31 = *((int *)v21 + 1);
            uint64_t v32 = (char *)&v8[v12] + v17 + v10 + v19 - v31;
            unsigned int v33 = *((unsigned __int16 *)v32 + 2);
            if (v33 <= 4)
            {
              *(v16 - 4) = 0;
            }

            else
            {
              uint64_t v34 = *((unsigned __int16 *)v32 + 4);
              if (v34) {
                LODWORD(v34) = *(int *)((char *)v8 + v17 + v10 + v19 + v12 * 4 + v34 + 4);
              }
              *(v16 - 4) = v34;
              if (v33 >= 9)
              {
                uint64_t v35 = v17 + v10 + v19;
                if (*(_WORD *)((char *)&v8[v12 + 3] + v35 - v31)) {
                  int v36 = *(int *)((char *)v8 + v35
                }
                                            + v12 * 4
                else {
                  LOBYTE(v36) = 0;
                }
                *(v16 - 3) = v36;
                *(v16 - 1) = v28;
                *unint64_t v16 = v25;
                if (v33 >= 0xB && (uint64_t v38 = v17 + v10 + v19, *(_WORD *)((char *)&v8[v12 + 3] + v38 - v31 + 2))) {
                  int v37 = *(int *)((char *)v8
                }
                               + v38
                               + v12 * 4
                else {
                  LOWORD(v37) = 0;
                }
                goto LABEL_25;
              }
            }

            LOWORD(v37) = 0;
            *(v16 - 3) = 0;
            *(v16 - 1) = v28;
            *unint64_t v16 = v25;
LABEL_25:
            *(_WORD *)(v16 + 1) = v37;
            *(_DWORD *)(v16 + 3) = v26;
            ++v11;
            uint64_t v9 = *(unsigned __int16 *)((char *)v8 - *v8 + 4);
            uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
            ++v12;
            v16 += 12;
          }
        }

        uint64_t v15 = 0LL;
LABEL_33:
        *(_DWORD *)unsigned int v5 = v11;
        *((void *)v5 + 50) = v15;
        uint64_t v39 = *(unsigned __int16 *)((char *)v8 - *v8 + 6);
        uint64_t v40 = *(unsigned int *)((char *)v8 + v39);
        if (*(int *)((char *)v8 + v39 + v40))
        {
          uint64_t v41 = 0LL;
          unint64_t v42 = 1LL;
          do
          {
            uint64_t v43 = v39;
            uint64_t v44 = *(unsigned int *)((char *)v8 + v39 + v40 + v41 * 4 + 4);
            uint64_t v45 = v40 + v39 + v44;
            unsigned int v46 = &v8[v41];
            uint64_t v47 = (char *)&v8[v41] + v45;
            uint64_t v48 = *((int *)v47 + 1);
            if (*(unsigned __int16 *)((char *)&v8[v41 + 1] + v45 - v48) >= 0xBu
              && (uint64_t v49 = v40 + v43 + v44, (v50 = *(unsigned __int16 *)((char *)v46 + v49 - v48 + 14)) != 0))
            {
              char v51 = *((_BYTE *)v8 + v49 + v41 * 4 + v50 + 4);
            }

            else
            {
              char v51 = 0;
            }

            v5[v41 * 4 + 332] = v51;
            uint64_t v52 = v40 + v43 + v44 - *((int *)v47 + 1);
            if (*(unsigned __int16 *)((char *)v46 + v52 + 4) >= 0xDu && *(_WORD *)((char *)&v8[v41 + 4] + v52)) {
              int v53 = *(int *)((char *)v8
            }
                           + v40
                           + v43
                           + v44
                           + v41 * 4
            else {
              LOWORD(v53) = 0;
            }
            *(_WORD *)&v5[v41 * 4 + 334] = v53;
            v5[328] = v42;
            uint64_t v8 = (int *)v3[2];
            uint64_t v39 = *(unsigned __int16 *)((char *)v8 - *v8 + 6);
            uint64_t v40 = *(unsigned int *)((char *)v8 + v39);
            ++v41;
          }

          while (v42++ < *(unsigned int *)((char *)v8 + v39 + v40));
        }

        uint64_t v55 = *(void **)(*(void *)(a1 + 8) + 4128LL);
        __vImage_Buffer src = v55;
        char v68 = 0;
        uint64_t v56 = v3[49];
        uint64_t v57 = *(const void ***)v56;
        if (*(void *)v56)
        {
          uint64_t v58 = 0LL;
          size_t v59 = *(const void ***)v56;
          while (1)
          {
            uint64_t v60 = v59;
            if (!memcmp(v55, *v59, 0x1A0uLL)) {
              break;
            }
            size_t v59 = (const void **)v60[3];
            uint64_t v58 = v60;
            if (!v59) {
              goto LABEL_49;
            }
          }

          if (v60 == v57)
          {
            uint64_t v60 = v57;
          }

          else
          {
            v58[3] = v60[3];
            v60[3] = v57;
            *(void *)uint64_t v56 = v60;
          }
        }

        else
        {
LABEL_49:
          uint64_t v60 = (const void **)operator new(0x20uLL);
          uint64_t v61 = (*(uint64_t (**)(void, void **))(**(void **)(v56 + 8) + 16LL))( *(void *)(v56 + 8),  &__src);
          uint64_t v62 = operator new(0x1A0uLL);
          memcpy(v62, __src, 0x1A0uLL);
          *uint64_t v60 = v62;
          *((_BYTE *)v60 + 8) = 1;
          v60[2] = (const void *)v61;
          v60[3] = *(const void **)v56;
          *(void *)uint64_t v56 = v60;
          unsigned int v63 = *(_DWORD *)(v56 + 16);
          unsigned int v64 = *(_DWORD *)(v56 + 20) + 1;
          *(_DWORD *)(v56 + 20) = v64;
          if (v64 > v63)
          {
            unsigned __int8 v65 = v60;
            do
            {
              int v66 = v65;
              unsigned __int8 v65 = v60;
              uint64_t v60 = (const void **)v60[3];
            }

            while (v60);
            v66[3] = 0LL;
            (*(void (**)(void, const void *))(**(void **)(v56 + 8) + 24LL))(*(void *)(v56 + 8), v65[2]);
            if (*((_BYTE *)v65 + 8) && *v65) {
              operator delete((void *)*v65);
            }
            operator delete(v65);
            --*(_DWORD *)(v56 + 20);
            uint64_t v60 = *(const void ***)v56;
          }
        }

        v3[53] = v60[2];
        if (v68)
        {
          if (__src) {
            operator delete(__src);
          }
        }

        *(_DWORD *)(*(void *)(a1 + 8) + 2996LL) |= 0x23u;
      }
    }
  }

uint64_t sub_2AF8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(v2 + 2996);
  if (*(_BYTE *)(v2 + 4732))
  {
    if (dword_7C464) {
      __int16 v4 = 5;
    }
    else {
      __int16 v4 = 3;
    }
    LOWORD(v3) = v3 | v4 | 0x3F8;
  }

  uint64_t v5 = *(void *)(v2 + 3960);
  uint64_t v6 = *(_BYTE **)(v2 + 3968);
  uint64_t v7 = *(void *)(v2 + 3504);
  uint64_t v8 = *(void *)(v2 + 3512);
  uint64_t v9 = *(void *)(a1 + 176);
  unsigned int v91 = *(uint64_t **)(*(void *)(v2 + 2536) + 168LL);
  uint64_t v10 = *(void *)(*(void *)(v8 + 64) + 8LL);
  uint64_t v92 = *(void *)(*(void *)(v8 + 1568) + 8LL);
  uint64_t v93 = *(void *)(*(void *)(v7 + 64) + 8LL);
  uint64_t v11 = (*(uint64_t (**)(_BYTE *))(*(void *)v6 + 184LL))(v6);
  if ((_DWORD)v11) {
    uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 3968LL) + 192LL))(*(void *)(*(void *)(a1 + 8) + 3968LL));
  }
  uint64_t v94 = v10;
  if ((v3 & 8) == 0)
  {
    int v12 = 1;
    goto LABEL_18;
  }

  uint64_t v11 = sub_25A80( *(void *)(a1 + 8),  3LL,  (*(void *)(v7 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)&v116,  0);
  int v12 = v11;
  uint64_t v13 = *(void *)(v93 + 16);
  if (v13)
  {
    uint64_t v11 = sub_25A80(*(void *)(a1 + 8), 3LL, v13, 16LL, 64LL, (uint64_t *)v119, 0);
    v12 &= v11;
  }

  *(_DWORD *)(v7 + 72) = *(_DWORD *)(v7 + 76);
  if (*(_BYTE *)(v7 + 124))
  {
    uint64_t v14 = *(void *)(v7 + 1048);
    if (v14)
    {
      uint64_t v11 = off_7C360(*(void *)(a1 + 8), 1LL, v14, v118);
      v12 &= v11;
    }

    else
    {
      uint64_t v11 = sub_26A74(*(int **)(v7 + 40));
      if (!(_DWORD)v11)
      {
LABEL_17:
        *(_DWORD *)(v2 + 2392) |= 0x800000u;
        *(void *)(v2 + 4904) |= 0x800000uLL;
        goto LABEL_18;
      }
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 8) + 2696LL) + 297LL) = 1;
    goto LABEL_17;
  }

LABEL_33:
  if ((v3 & 0x23) != 0)
  {
    uint64_t v29 = *(void *)(a1 + 8);
    uint64_t v30 = (*(uint64_t (**)(void))(**(void **)(v29 + 3960) + 40LL))(*(void *)(v29 + 3960));
    uint64_t v11 = sub_25F38(v29, v30, &v113);
    v12 &= v11;
  }

  if ((v3 & 0x80) != 0)
  {
    int v31 = sub_25A80( *(void *)(a1 + 8),  6LL,  (*(void *)(v8 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)&v101,  0);
    uint64_t v11 = sub_25A80(*(void *)(a1 + 8), 6LL, v91[1], 16LL, 0LL, (uint64_t *)v100, 0);
    v12 &= v31 & v11;
    uint64_t v32 = *(void *)(v94 + 16);
    if (v32)
    {
      uint64_t v11 = sub_25A80(*(void *)(a1 + 8), 6LL, v32, 16LL, 0LL, (uint64_t *)v104, 0);
      v12 &= v11;
    }

    if (*(_BYTE *)(v8 + 1457))
    {
      uint64_t v33 = *(unsigned int *)(v8 + 1520);
      if ((_DWORD)v33 != -1)
      {
        *(_DWORD *)(*(void *)(v8 + 296) + 4 * v33) = (v102
                                                      + (unint64_t)*(unsigned int *)((char *)v34 + *v34 + 8)) >> 2;
      }
    }

    uint64_t v35 = *(void *)(a1 + 8);
    unsigned int v36 = *(_DWORD *)(v8 + 1560) & 0xFFFFFFFE;
    if (v36)
    {
      uint64_t v37 = *(void *)(v8 + 128);
      do
      {
        unsigned int v38 = __clz(v36) ^ 0x1F;
        *(void *)(v37 + 4LL * *(unsigned int *)(v8 + 4LL * v38 + 1528)) = *(void *)(v35 + 3208 + 8LL * v38);
        v36 ^= 1 << v38;
      }

      while (v36);
    }

    *(_DWORD *)(v8 + 72) = *(_DWORD *)(v8 + 76);
    if (!*(_BYTE *)(v8 + 124)) {
      goto LABEL_50;
    }
    uint64_t v39 = *(void *)(v8 + 1048);
    if (v39)
    {
      uint64_t v11 = off_7C360(v35, 0LL, v39, v103);
      v12 &= v11;
      uint64_t v35 = *(void *)(a1 + 8);
    }

    else
    {
      uint64_t v11 = sub_26A74(*(int **)(v8 + 40));
      if (!(_DWORD)v11)
      {
LABEL_49:
        *(_DWORD *)(v2 + 2392) |= 0x1000000u;
        *(void *)(v2 + 4904) |= 0x1000000uLL;
LABEL_50:
        if (*(_BYTE *)(v35 + 4732))
        {
          unint64_t v40 = v102 + (*(void *)(v8 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 4;
          uint64_t v41 = *(void *)(v35 + 4704) + 40LL * *(unsigned int *)(v35 + 4736);
          *(void *)(v41 + 24) = v102;
          *(void *)(v41 + 32) = v40;
        }

        goto LABEL_52;
      }
    }

    *(_BYTE *)(*(void *)(v35 + 2696) + 839LL) = 1;
    goto LABEL_49;
  }

LABEL_52:
  if ((v3 & 0x40) != 0)
  {
    uint64_t v11 = sub_25A80(*(void *)(a1 + 8), 6LL, *(void *)(v92 + 8), 16LL, 0LL, (uint64_t *)v107, 0);
    v12 &= v11;
  }

  if ((v3 & 0x10) != 0)
  {
    uint64_t v11 = sub_665A0(v7);
    uint64_t v42 = v11;
    uint64_t v43 = *(void *)(v93 + 24);
    if (v11)
    {
      uint64_t v11 = sub_25A80(*(void *)(a1 + 8), 0LL, v11, 4LL, 0LL, (uint64_t *)v121, 0);
      v12 &= v11;
    }

    if (v43)
    {
      char v44 = (_BYTE)word_7C009 == 0;
      int v45 = sub_25A80(*(void *)(a1 + 8), 3LL, v43, 16LL, 64LL, (uint64_t *)v120, 0);
      uint64_t v11 = sub_25F38(*(void *)(a1 + 8), 12LL << v44, &v112);
      v12 &= v45 & v11;
    }

    if (!(v43 | v42)) {
      LOWORD(v3) = v3 & 0xFFEF;
    }
  }

  if ((v3 & 0x300) != 0)
  {
    uint64_t v11 = sub_665A0(v8);
    uint64_t v46 = v11;
    uint64_t v47 = *(void *)(v94 + 24);
    if (v11)
    {
      uint64_t v11 = sub_25A80(*(void *)(a1 + 8), 5LL, v11, 4LL, 0LL, (uint64_t *)v106, 0);
      v12 &= v11;
    }

    if (v47)
    {
      uint64_t v11 = sub_25A80(*(void *)(a1 + 8), 6LL, *(void *)(v94 + 24), 16LL, 0LL, (uint64_t *)v105, 0);
      v12 &= v11;
    }

    if (!(v47 | v46)) {
      LOWORD(v3) = v3 & 0xFCFF;
    }
  }

  if ((v3 & 0x3C0) != 0)
  {
    uint64_t v11 = (*(uint64_t (**)(_BYTE *))(*(void *)v6 + 360LL))(v6);
    LOWORD(v3) = v3 | 0x400;
  }

  if ((v3 & 0x400) == 0)
  {
    uint64_t v48 = 0LL;
    if (v12) {
      goto LABEL_72;
    }
    return 0LL;
  }

  uint64_t v51 = *(void *)(a1 + 8);
  uint64_t v52 = (*(uint64_t (**)(_BYTE *))(*(void *)v6 + 200LL))(v6);
  int v53 = v12 & sub_25E10(v51, v52, 4LL, v99);
  uint64_t v54 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 3968LL) + 152LL))(*(void *)(*(void *)(a1 + 8) + 3968LL));
  uint64_t v55 = *(void *)(a1 + 8);
  if (v54)
  {
    if (*(_BYTE *)(v55 + 3976))
    {
      uint64_t v48 = *(void *)(v55 + 3984);
    }

    else
    {
      int v75 = sub_25A80(*(void *)(a1 + 8), 9LL, v54, 4LL, 0LL, &v98, 0);
      uint64_t v87 = v98;
      uint64_t v48 = v98 - *(void *)(v55 + 1688);
      v53 &= v75;
      uint64_t v55 = *(void *)(a1 + 8);
    }
  }

  else
  {
    uint64_t v48 = 0LL;
  }

  uint64_t v76 = (*(uint64_t (**)(void))(**(void **)(v55 + 3968) + 136LL))(*(void *)(v55 + 3968));
  if (v76)
  {
    uint64_t v77 = *(void *)(a1 + 8);
    int v78 = sub_25A80(v77, 8LL, v76, 4LL, 0LL, &v97, 0);
    uint64_t v88 = v97 - *(void *)(v77 + 1624);
    v53 &= v78;
  }

  uint64_t v11 = sub_25F38(*(void *)(a1 + 8), 8LL, &v96);
LABEL_72:
  if ((v3 & 8) != 0)
  {
    uint64_t v11 = (uint64_t)memcpy(v116, *(const void **)(*(void *)v95 + 16LL), *(void *)(*(void *)v95 + 24LL));
    *(void *)(a1 + 288) = v117;
    size_t v49 = *(void *)(v93 + 16);
    if (v49)
    {
      uint64_t v11 = (uint64_t)memcpy(v119[0], *(const void **)(v93 + 32), v49);
      uint64_t v50 = v119[1];
    }

    else
    {
      uint64_t v50 = 0LL;
    }

    *(void *)(a1 + 296) = v50;
    uint64_t v56 = *(void *)(*(void *)v95 + 1048LL);
    if (v56 && dword_7C408)
    {
      uint64_t v57 = *(void *)(*(void *)v95 + 320LL);
      *(void *)uint64_t v57 = v118[1];
      *(_DWORD *)(v57 + 8) = v56;
      *(_DWORD *)(*(void *)v95 + 72LL) |= 0x100u;
    }

    uint64_t v58 = *(void *)(a1 + 8);
    if (*(_BYTE *)(v58 + 4732))
    {
      unint64_t v59 = v117 + (*(void *)(*(void *)v95 + 24LL) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      uint64_t v60 = *(void *)(v58 + 4704) + 40LL * *(unsigned int *)(v58 + 4736);
      *(void *)(v60 + 8) = v117;
      *(void *)(v60 + 16) = v59;
    }
  }

  if ((v3 & 1) != 0) {
    uint64_t v11 = (uint64_t)memcpy(v115[0], *(const void **)(v89 + 32), *(void *)(v89 + 16));
  }
  if ((v3 & 3) != 0)
  {
    uint64_t v61 = *(void *)(a1 + 288);
    uint64_t v62 = *(int **)(*(void *)v95 + 40LL);
    unsigned int v63 = (unsigned __int16 *)((char *)v62 - *v62);
    if (*v63 >= 5u && (uint64_t v64 = v63[2]) != 0) {
      uint64_t v65 = *(unsigned int *)((char *)v62 + v64);
    }
    else {
      uint64_t v65 = 0LL;
    }
    uint64_t v66 = off_7C298(v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v89 + 16LL))( v89,  v61,  v65,  v66,  0LL);
    memcpy(v114[0], *(const void **)(v89 + 40), *(void *)(v89 + 24));
  }

  if ((v3 & 0x23) != 0) {
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 3960LL) + 48LL))( *(void *)(*(void *)(a1 + 8) + 3960LL),  v113);
  }
  if ((v3 & 0x80) != 0)
  {
    memcpy(v101, *(const void **)(v8 + 16), *(void *)(v8 + 24));
    unint64_t v67 = *(int **)(v8 + 40);
    char v68 = (unsigned __int16 *)((char *)v67 - *v67);
    if (*v68 >= 5u && (uint64_t v69 = v68[2]) != 0) {
      uint64_t v70 = *(unsigned int *)((char *)v67 + v69);
    }
    else {
      uint64_t v70 = 0LL;
    }
    int v71 = v91;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, void, void))(*v91 + 16))( v91,  v102,  v70,  *(unsigned int *)(v8 + 56),  *(unsigned __int8 *)(v8 + 1457));
    unsigned int v72 = (char *)v100[0];
    memcpy(v100[0], (const void *)v71[5], v71[3]);
    memcpy(&v72[v71[3]], (const void *)v71[4], v71[2]);
    *(void **)(a1 + 304) = v100[1];
    size_t v73 = *(void *)(v94 + 16);
    if (v73)
    {
      memcpy(v104[0], *(const void **)(v94 + 32), v73);
      uint64_t v74 = v104[1];
    }

    else
    {
      uint64_t v74 = 0LL;
    }

    *(void *)(a1 + 312) = v74;
    uint64_t v80 = *(void *)(v8 + 1048);
    if (v80 && dword_7C408)
    {
      uint64_t v81 = *(void *)(v8 + 320);
      *(void *)uint64_t v81 = v103[1];
      *(_DWORD *)(v81 + 8) = v80;
      *(_DWORD *)(v8 + 72) |= 0x100u;
    }

    *(void *)(a1 + 320) = 0LL;
    *(void *)(a1 + 328) = 0LL;
    if ((v3 & 0x40) == 0)
    {
LABEL_97:
      if ((v3 & 0x10) == 0) {
        goto LABEL_119;
      }
LABEL_116:
      sub_665EC(*(_DWORD **)v95, v121[0], (uint64_t)v121[1], v2 + 200, *(void *)(a1 + 8) + 4176LL);
      memcpy(v120[0], *(const void **)(v93 + 40), *(void *)(v93 + 24));
      uint64_t v82 = v112;
      if (!(_BYTE)word_7C009) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v90 + 144LL))( v90,  v112,  16LL,  1LL,  *(void *)(a1 + 280),  *(void *)(a1 + 272));
      }
      (*(void (**)(uint64_t, uint64_t, void, void, void, void *))(*(void *)v90 + 144LL))( v90,  v82 + 12,  *(void *)(v93 + 24),  *(unsigned int *)(*(void *)v95 + 48LL),  *(void *)(a1 + 296),  v120[1]);
      goto LABEL_119;
    }
  }

  else if ((v3 & 0x40) == 0)
  {
    goto LABEL_97;
  }

  memcpy(v107[0], *(const void **)(v92 + 40), *(void *)(v92 + 16) + *(void *)(v92 + 24));
  *(void **)(a1 + 336) = v107[1];
  if ((v3 & 0x10) != 0) {
    goto LABEL_116;
  }
LABEL_119:
  if ((v3 & 0x300) != 0)
  {
    sub_665EC((_DWORD *)v8, v106[0], (uint64_t)v106[1], v2 + 200, *(void *)(a1 + 8) + 4176LL);
    memcpy(v105[0], *(const void **)(v94 + 40), *(void *)(v94 + 24));
    *(void **)(a1 + 320) = v105[1];
  }

  if ((v3 & 0x800) != 0) {
    (*(void (**)(_BYTE *, void, uint64_t *, uint64_t *, void *, void))(*(void *)v6 + 352LL))( v6,  *(void *)(a1 + 8),  v109,  v108,  __dst[1],  *(void *)(*(void *)(a1 + 16) + 24LL));
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v3 & 0x3C0) != 0) {
      (*(void (**)(_BYTE *, void, void, void, void, void))(*(void *)v6 + 368LL))( v6,  *(void *)(a1 + 304),  *(void *)(a1 + 312),  *(void *)(a1 + 328),  *(void *)(a1 + 320),  *(void *)(a1 + 336));
    }
    if ((*(uint64_t (**)(_BYTE *))(*(void *)v6 + 152LL))(v6))
    {
      if (!*(_BYTE *)(*(void *)(a1 + 8) + 3976LL)) {
        (*(void (**)(_BYTE *, uint64_t))(*(void *)v6 + 160LL))(v6, v87);
      }
      (*(void (**)(_BYTE *, uint64_t))(*(void *)v6 + 168LL))(v6, v48);
    }

    unint64_t v83 = (*(uint64_t (**)(_BYTE *))(*(void *)v6 + 200LL))(v6);
    (*(void (**)(_BYTE *, uint64_t))(*(void *)v6 + 208LL))(v6, v99[0]);
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v90 + 72LL))( v90,  v96,  v83 >> 2,  v99[1]);
  }

  if ((v3 & 0x480) != 0)
  {
    unsigned int v84 = *(_DWORD *)(v8 + 1460);
    if (v84 <= 6 && ((0x74u >> v84) & 1) != 0 && v6[192] && !v6[193]) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 8) + 2696LL) + 841LL) = 1;
    }
  }

  uint64_t v85 = *(void *)(a1 + 8);
  *(_DWORD *)(v85 + 2996) = 0;
  if (*(_BYTE *)(v85 + 4732))
  {
    unsigned int v86 = *(_DWORD *)(v85 + 4736);
    *(void *)(*(void *)(v85 + 4704) + 40LL * v86) = *(void *)(v85 + 4696);
    *(_DWORD *)(v85 + 4736) = (v86 + 1) % *(_DWORD *)(v85 + 4712);
  }

  return 1LL;
}

    if (a1 <= 37807)
    {
      if (a1 <= 37487)
      {
        switch(a1)
        {
          case 35420:
          case 35422:
LABEL_91:
            uint64_t v7 = sub_33000;
            break;
          case 35421:
          case 35423:
LABEL_104:
            uint64_t v7 = sub_3320C;
            break;
          default:
            switch(a1)
            {
              case 35840:
              case 35842:
                uint64_t v7 = sub_32F34;
                break;
              case 35841:
              case 35843:
                uint64_t v7 = sub_32F0C;
                break;
              default:
                uint64_t v10 = 6402;
                goto LABEL_84;
            }

            break;
        }
      }

      else
      {
        uint64_t v7 = v6;
        if ((a1 - 37488) <= 9)
        {
          if (((1 << (a1 - 112)) & 0xF3) != 0) {
            return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))sub_32F60;
          }
          else {
            return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))sub_32FB0;
          }
        }
      }
    }

    else
    {
      uint64_t v7 = v6;
      switch(a1)
      {
        case 37808:
        case 37840:
        case 37887:
          return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))sub_32FB0;
        case 37809:
        case 37841:
        case 37888:
          uint64_t v7 = sub_33050;
          break;
        case 37810:
        case 37842:
        case 37889:
          uint64_t v7 = sub_330B4;
          break;
        case 37811:
        case 37843:
        case 37890:
          uint64_t v7 = sub_33124;
          break;
        case 37812:
        case 37844:
        case 37891:
          uint64_t v7 = sub_3319C;
          break;
        case 37813:
        case 37845:
        case 37893:
          uint64_t v7 = sub_3325C;
          break;
        case 37814:
        case 37846:
        case 37894:
          uint64_t v7 = sub_332C0;
          break;
        case 37815:
        case 37847:
        case 37895:
          uint64_t v7 = sub_33324;
          break;
        case 37816:
        case 37848:
        case 37896:
          uint64_t v7 = sub_33374;
          break;
        case 37817:
        case 37849:
        case 37897:
          uint64_t v7 = sub_333E4;
          break;
        case 37818:
        case 37850:
        case 37898:
          uint64_t v7 = sub_3345C;
          break;
        case 37819:
        case 37851:
        case 37899:
          uint64_t v7 = sub_334C0;
          break;
        case 37820:
        case 37852:
        case 37900:
          uint64_t v7 = sub_33530;
          break;
        case 37821:
        case 37853:
        case 37901:
          uint64_t v7 = sub_335A8;
          break;
        case 37822:
        case 37823:
        case 37824:
        case 37825:
        case 37826:
        case 37827:
        case 37828:
        case 37829:
        case 37830:
        case 37831:
        case 37832:
        case 37833:
        case 37834:
        case 37835:
        case 37836:
        case 37837:
        case 37838:
        case 37839:
        case 37854:
        case 37855:
        case 37856:
        case 37857:
        case 37858:
        case 37859:
        case 37860:
        case 37861:
        case 37862:
        case 37863:
        case 37864:
        case 37865:
        case 37866:
        case 37867:
        case 37868:
        case 37869:
        case 37870:
        case 37871:
        case 37872:
        case 37873:
        case 37874:
        case 37875:
        case 37876:
        case 37877:
        case 37878:
        case 37879:
        case 37880:
        case 37881:
        case 37882:
        case 37883:
        case 37884:
        case 37885:
          return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
        case 37886:
          goto LABEL_91;
        case 37892:
          goto LABEL_104;
        default:
          return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v6;
      }
    }

    return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
  }

  switch(a2)
  {
    case 33635:
      uint64_t v7 = sub_32E64;
      uint64_t v8 = 6407;
      goto LABEL_49;
    case 33637:
    case 33638:
LABEL_30:
      if (a1 == 32993) {
        goto LABEL_59;
      }
      uint64_t v9 = 6408;
LABEL_32:
      uint64_t v7 = v6;
      if (a1 == v9) {
LABEL_59:
      }
        uint64_t v7 = sub_32E64;
      break;
    case 33639:
      if (a1 == 32993) {
        goto LABEL_85;
      }
      uint64_t v10 = 6408;
LABEL_84:
      uint64_t v7 = v6;
      if (a1 == v10) {
LABEL_85:
      }
        uint64_t v7 = sub_32E2C;
      break;
    case 33640:
      return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
    default:
      goto LABEL_52;
  }

  return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
}

uint64_t sub_2BD88(uint64_t a1, _DWORD *a2, char a3)
{
  if (byte_7C005 | byte_7C006)
  {
    BOOL v7 = a2[294] > 1u;
    if ((a3 & 0x10) != 0) {
      BOOL v7 = 0;
    }
    *(_BYTE *)(a1 + 214) = v7;
    *(_BYTE *)(a1 + 215) = (a3 & 0x10) >> 4;
    *(_BYTE *)(a1 + 216) = (a3 & 8) != 0;
    if (*(_BYTE *)(a1 + 208)) {
      BOOL v8 = (a3 & 0x10) == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8 && !*(_BYTE *)(a1 + 210))
    {
      (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 184) + 56LL))( *(void *)(a1 + 184),  *(void *)(a1 + 224),  *(void *)(a1 + 248) + 12LL);
      *(_BYTE *)(*(void *)(*(void *)(a1 + 8) + 4784LL)
    }

    unsigned int v9 = a2[292];
    unsigned int v10 = a2[293];
    if (sub_25A80(*(void *)(a1 + 8), 0LL, 48LL, 4LL, 0LL, v26, 0))
    {
      uint64_t v11 = v26[0];
      *(void *)v26[0] = 0LL;
      *(_DWORD *)(v11 + 8) = 0;
      *(float *)(v11 + 12) = (float)v9;
      *(void *)(v11 + 16) = 0LL;
      *(_DWORD *)(v11 + 24) = 0;
      *(float *)(v11 + 28) = (float)v10;
      *(_DWORD *)(v11 + 32) = 0;
      *(float *)(v11 + 36) = (float)v9;
      *(float *)(v11 + 40) = (float)v10;
      *(_DWORD *)(v11 + 44) = 0;
      uint64_t v12 = *(void *)(a1 + 8);
      uint64_t v13 = *(void *)(v12 + 3568);
      if (v13
        || (__int128 v21 = xmmword_702B0,
            uint64_t v13 = sub_305FC((void *)(v12 + 3520), &v21),
            uint64_t v12 = *(void *)(a1 + 8),
            (*(void *)(v12 + 3568) = v13) != 0LL))
      {
        if (sub_25A80( v12,  3LL,  (*(void *)(v13 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)__dst,  0))
        {
          memcpy( __dst[0],  *(const void **)(*(void *)(*(void *)(a1 + 8) + 3568LL) + 16LL),  *(void *)(*(void *)(*(void *)(a1 + 8) + 3568LL) + 24LL));
          if (sub_25A80(*(void *)(a1 + 8), 3LL, 256LL, 16LL, 64LL, v24, 0))
          {
            if (sub_25A80(*(void *)(a1 + 8), 3LL, 256LL, 16LL, 64LL, v23, 0))
            {
              uint64_t v14 = *(int **)(*(void *)(*(void *)(a1 + 8) + 3568LL) + 40LL);
              uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
              if (*v15 >= 5u && (uint64_t v16 = v15[2]) != 0) {
                uint64_t v17 = *(unsigned int *)((char *)v14 + v16);
              }
              else {
                uint64_t v17 = 0LL;
              }
              off_7C2D8(v24[0], v23[0], __dst[1], v26[1], 12LL, v17);
              uint64_t v18 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 184) + 128LL))( *(void *)(a1 + 184),  *(void *)(*(void *)(a1 + 8) + 3568LL),  v24[1],  v23[1]);
              uint64_t v19 = off_7C328(v18);
              (*(void (**)(uint64_t))(*(void *)v19 + 304LL))(v19);
              (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v19 + 368LL))( v19,  2896997536LL,  2896997536LL,  0LL,  2896997536LL,  2896997536LL);
              uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 200LL))(v19);
              if (sub_25E10(*(void *)(a1 + 8), v20, 4LL, v22))
              {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 208LL))(v19, v22[0]);
                *(void *)(a1 + 192) = v22[1];
                *(void *)(a1 + 200) = v20;
                (*(void (**)(uint64_t))(*(void *)v19 + 128LL))(v19);
                goto LABEL_2;
              }

              (*(void (**)(uint64_t))(*(void *)v19 + 128LL))(v19);
            }
          }
        }
      }
    }

    return 0LL;
  }

uint64_t sub_2C0E0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)result;
  if (byte_7C005 | byte_7C006)
  {
    if (*(_BYTE *)(result + 216) || *(_BYTE *)(result + 214))
    {
      uint64_t v4 = *(void *)(result + 184);
      sub_28088(*(void *)(result + 8), *(void *)(result + 200) >> 2, *(void *)(result + 192));
      uint64_t v5 = v2[1];
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40LL))(v4);
      sub_25A80(v5, 2LL, v6, 4LL, dword_7C498, &v12, 0);
      sub_25A80(v2[1], 2LL, 12LL, 4LL, dword_7C498, v13, 0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 48LL))(v4, v12);
      uint64_t v7 = v13[0];
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 88LL))(v4, 5LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v4 + 96LL))( v4,  v7,  v8,  4LL,  0LL,  0LL);
      (*(void (**)(void))(**(void **)(v2[1] + 3960) + 32LL))(*(void *)(v2[1] + 3960));
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v2[1] + 3968) + 280LL))(*(void *)(v2[1] + 3968));
      char v9 = 0;
      *(_DWORD *)(v2[1] + 2996) |= 0x23u;
      uint64_t v10 = v13[1];
      *(_BYTE *)(a2 + 1137) = 0;
    }

    else
    {
      uint64_t v10 = 0LL;
      uint64_t v7 = 0LL;
      char v9 = 1;
    }

    *(_BYTE *)(a2 + 1090) = v9;
    v2[30] = v7;
    v2[33] = v10;
  }

  uint64_t v11 = v2[1];
  if ((*(_BYTE *)(v11 + 2944) & 0x40) != 0) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v11 + 3968) + 256LL))( *(void *)(v11 + 3968),  v11,  1LL);
  }
  return result;
}

uint64_t sub_2C294(uint64_t a1)
{
  if (byte_7C005 | byte_7C006)
  {
    *(_WORD *)(a1 + 214) = 0;
    *(_BYTE *)(a1 + 216) = 0;
  }

  return 1LL;
}

uint64_t sub_2C2BC(uint64_t result)
{
  *(void *)(result + 240) = 0LL;
  *(void *)(result + 264) = 0LL;
  return result;
}

uint64_t sub_2C2C8(uint64_t result, char a2)
{
  if (byte_7C005 | byte_7C006)
  {
    uint64_t v2 = result;
    if (*(_BYTE *)(result + 211))
    {
      if (!*(_BYTE *)(result + 213) && *(_BYTE *)(result + 209) && (a2 & 1) == 0)
      {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(result + 184) + 56LL))( *(void *)(result + 184),  *(void *)(result + 232),  *(void *)(result + 256) + 12LL);
        uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 4792LL);
        if (v3) {
          *(_BYTE *)(v3 + *(unsigned int *)(v3 + 40) + 1090) = 1;
        }
      }
    }
  }

  return result;
}

uint64_t sub_2C354(uint64_t result)
{
  if (byte_7C005 | byte_7C006)
  {
    uint64_t v1 = *(void *)(result + 224);
    uint64_t v2 = *(void *)(result + 248);
    *(void *)(result + 224) = *(void *)(result + 240);
    *(void *)(result + 232) = v1;
    uint64_t v3 = *(void *)(result + 264);
    *(void *)(result + 240) = 0LL;
    *(void *)(result + 248) = v3;
    *(void *)(result + 256) = v2;
    *(void *)(result + 264) = 0LL;
    *(_BYTE *)(result + 211) = *(_BYTE *)(result + 208);
    *(_WORD *)(result + 212) = *(_WORD *)(result + 209);
    *(_WORD *)(result + 208) = *(_WORD *)(result + 214);
    *(_BYTE *)(result + 210) = *(_BYTE *)(result + 216);
    *(_WORD *)(result + 214) = 0;
    *(_BYTE *)(result + 216) = 0;
    *(void *)(result + 192) = 0LL;
    *(void *)(result + 200) = 0LL;
  }

  return result;
}

uint64_t sub_2C3B4(uint64_t result)
{
  if (byte_7C005 | byte_7C006)
  {
    *(_WORD *)(result + 212) = 0;
    *(_DWORD *)(result + 208) = 0;
    *(void *)(result + 224) = 0LL;
    *(void *)(result + 232) = 0LL;
    *(void *)(result + 248) = 0LL;
    *(void *)(result + 256) = 0LL;
  }

  return result;
}

uint64_t sub_2C3E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(v4 + 2536);
  int v6 = sub_25A80(v4, 3LL, 32LL, 16LL, 64LL, &v19, 0);
  uint64_t result = 0LL;
  if (v6)
  {
    off_7C2E0(v19, 16LL);
    uint64_t v8 = v20 + 16;
    a1[34] = v20;
    a1[35] = v8;
    uint64_t v9 = a1[1];
    uint64_t v10 = *(void *)(v9 + 3560);
    if (v10
      || (*(_OWORD *)__dst = xmmword_70300,
          uint64_t v10 = sub_305FC((void *)(v9 + 3520), __dst),
          uint64_t v9 = a1[1],
          (*(void *)(v9 + 3560) = v10) != 0LL))
    {
      int v11 = sub_25A80( v9,  3LL,  (*(void *)(v10 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)__dst,  0);
      uint64_t result = 0LL;
      if (v11)
      {
        memcpy( __dst[0],  *(const void **)(*(void *)(a1[1] + 3560) + 16LL),  *(void *)(*(void *)(a1[1] + 3560) + 24LL));
        uint64_t v12 = *(void *)(v5 + 168);
        int v13 = sub_25A80(a1[1], 3LL, *(void *)(v12 + 8), 16LL, 64LL, (uint64_t *)v21, 0);
        uint64_t result = 0LL;
        if (v13)
        {
          uint64_t v14 = *(int **)(*(void *)(a1[1] + 3560) + 40LL);
          uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v15 >= 5u && (uint64_t v16 = v15[2]) != 0) {
            uint64_t v17 = *(unsigned int *)((char *)v14 + v16);
          }
          else {
            uint64_t v17 = 0LL;
          }
          (*(void (**)(uint64_t, void *, uint64_t, void, void))(*(void *)v12 + 16LL))( v12,  __dst[1],  v17,  0LL,  0LL);
          uint64_t v18 = (char *)v21[0];
          memcpy(v21[0], *(const void **)(v12 + 40), *(void *)(v12 + 24));
          memcpy(&v18[*(void *)(v12 + 24)], *(const void **)(v12 + 32), *(void *)(v12 + 16));
          *(void **)(a2 + 8) = v21[1];
          return 1LL;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_2C594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *(void *)(*(void *)(a2 + 64) + 8LL);
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  uint64_t result = sub_25A80( *(void *)(a1 + 8),  6LL,  (*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 4,  *((uint64_t *)&xmmword_7C410 + 1),  0LL,  (uint64_t *)__dst,  a6);
  if ((_DWORD)result)
  {
    uint64_t result = sub_25A80(*(void *)(a1 + 8), 5LL, v11, 4LL, 0LL, &v34, a6);
    if ((_DWORD)result)
    {
      uint64_t result = sub_25A80(*(void *)(a1 + 8), 6LL, *(void *)(v10 + 16), 16LL, 0LL, (uint64_t *)&v37, a6);
      if ((_DWORD)result)
      {
        uint64_t result = sub_25A80(*(void *)(a1 + 8), 6LL, *(void *)(v10 + 24), 16LL, 0LL, (uint64_t *)&v35, a6);
        if ((_DWORD)result)
        {
          int v13 = memcpy(__dst[0], *(const void **)(a2 + 16), *(void *)(a2 + 24));
          uint64_t v14 = *(int **)(a2 + 40);
          uint64_t v15 = *v14;
          uint64_t v16 = *(unsigned int *)((char *)v14
          if ((_DWORD)v16)
          {
            uint64_t v17 = 0LL;
            int v18 = 0;
            uint64_t v19 = 4 * v16;
            while (1)
            {
              uint64_t v20 = *(int **)(a2 + 40);
              __int128 v21 = (unsigned __int16 *)((char *)v20 - *v20);
              if (*v21 >= 9u && (uint64_t v22 = v21[4]) != 0) {
                uint64_t v23 = (char *)v20 + v22 + *(unsigned int *)((char *)v20 + v22);
              }
              else {
                uint64_t v23 = 0LL;
              }
              uint64_t v24 = *(unsigned int *)&v23[v17 + 4];
              uint64_t v25 = &v23[v17 + v24 - *(int *)&v23[v17 + 4 + v24]];
              uint64_t v26 = *((unsigned __int16 *)v25 + 4);
              if (!v26) {
                break;
              }
              int v27 = v23[v17 + 4 + v26 + v24];
              if (!v27) {
                break;
              }
              if (v27 == 6)
              {
                int v28 = *(uint64_t (**)(void))(**(void **)(a2 + 64) + 16LL);
                goto LABEL_18;
              }

              if (v27 == 1)
              {
                int v28 = *(uint64_t (**)(void))(**(void **)(a2 + 64) + 16LL);
LABEL_18:
                int v13 = (void *)v28();
              }

              ++v18;
              v17 += 4LL;
              if (v19 == v17)
              {
                uint64_t v14 = *(int **)(a2 + 40);
                uint64_t v15 = *v14;
                goto LABEL_22;
              }
            }

            int v28 = *(uint64_t (**)(void))(**(void **)(a2 + 64) + 16LL);
            goto LABEL_18;
          }

BOOL sub_2C8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
  BOOL result = v8 != 0;
  if (v8)
  {
    if ((a6 & 1) == 0)
    {
      *(_OWORD *)(a3 + 592) = *(_OWORD *)(a3 + 176);
      *(_DWORD *)(a3 + 608) = *(_DWORD *)(a3 + 192);
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_2C8F4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(v1 + 3504) + 1464LL) + 416LL);
  if (*(void *)(result + 176) != v2)
  {
    *(void *)(result + 176) = v2;
    *(_DWORD *)(v1 + 2996) |= 0x23u;
  }

  return result;
}

uint64_t sub_2C928(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (dword_7C464)
  {
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v4 = *(void *)(v3 + 3504);
    uint64_t v5 = *(unsigned int *)(v4 + 1460);
    uint64_t v6 = *(void *)(v4 + 128);
    if ((_DWORD)v5 != -1) {
      *(_DWORD *)(v6 + 4 * v5) = 1;
    }
    uint64_t v7 = *(void *)(v4 + 1464);
    uint64_t v8 = *(unsigned __int8 *)(v7 + 176);
    if (*(_BYTE *)(v7 + 176))
    {
      int v9 = 4 * *(unsigned __int8 *)(v7 + 42);
      uint64_t v10 = (unsigned int *)(v7 + 308);
      uint64_t v11 = (unsigned __int16 *)(v7 + 186);
      do
      {
        uint64_t v12 = v6 + 4LL * *(unsigned int *)(v11 - 3);
        *(void *)uint64_t v12 = *v11 + a2;
        *(_DWORD *)(v12 + 8) = v9;
        unsigned int v14 = *v10++;
        uint64_t v13 = v14;
        if (v14 != -1) {
          *(void *)(v6 + 4 * v13) = 0xFFFFFFFFLL;
        }
        v11 += 4;
        --v8;
      }

      while (v8);
    }

    *(_DWORD *)(v4 + 72) |= 1u;
    int v15 = 50;
  }

  else
  {
    uint64_t v16 = *(void *)(result + 176);
    BOOL result = off_7C2C0(a2);
    uint64_t v17 = *(unsigned __int16 *)(v16 + 80);
    if (*(_WORD *)(v16 + 80))
    {
      uint64_t v19 = *(uint64_t ***)(v16 + 64);
      int v18 = *(unsigned __int16 **)(v16 + 72);
      do
      {
        unsigned int v20 = *v18++;
        uint64_t v21 = result + v20;
        uint64_t v22 = *v19++;
        *uint64_t v22 = v21;
        --v17;
      }

      while (v17);
    }

    uint64_t v3 = *(void *)(v2 + 8);
    int v15 = 34;
  }

  *(_DWORD *)(v3 + 2996) |= v15;
  return result;
}

uint64_t sub_2CA28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (dword_7C464) {
    return *(unsigned __int8 *)(*(void *)(*(void *)(v1 + 3504) + 1464LL) + 177LL);
  }
  else {
    return *(void *)(*(void *)(v1 + 4128) + 400LL);
  }
}

uint64_t sub_2CA54(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(v1 + 3504) + 1464LL) + 424LL);
  if (*(void *)(result + 176) != v2)
  {
    *(void *)(result + 176) = v2;
    *(_DWORD *)(v1 + 2996) |= 0x23u;
  }

  return result;
}

uint64_t sub_2CA88(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 3504);
  if (!a2)
  {
    int v19 = *(_DWORD *)(v3 + 2996);
    if ((v19 & 2) != 0)
    {
      uint64_t v18 = *(void *)(a1 + 8);
      if (!dword_7C464)
      {
        sub_2CDF0( *(void *)(a1 + 176),  **(void **)(v3 + 808),  *(void *)(*(void *)(v3 + 808) + 8LL),  *(unsigned int **)(v3 + 4128),  0LL);
        uint64_t v18 = *(void *)(a1 + 8);
        int v19 = *(_DWORD *)(v18 + 2996);
      }
    }

    else
    {
      uint64_t v18 = *(void *)(a1 + 8);
    }

    goto LABEL_29;
  }

  if (dword_7C464)
  {
    int v5 = sub_25A80( *(void *)(a1 + 8),  0LL,  *(unsigned __int8 *)(*(void *)(v4 + 1464) + 177LL),  4LL,  0LL,  (uint64_t *)&v51,  0);
    uint64_t result = 0LL;
    if (!v5) {
      return result;
    }
    uint64_t v7 = *(void *)(v4 + 1464);
    unsigned int v8 = *(unsigned __int16 *)(v7 + 178);
    if (*(_WORD *)(v7 + 178))
    {
      uint64_t v9 = *(void *)(v3 + 24);
      uint64_t v10 = *(void *)(v4 + 128);
      uint64_t v12 = v51;
      uint64_t v11 = v52;
      while (1)
      {
        unsigned int v13 = __clz(__rbit32(v8));
        uint64_t v14 = v7 + 8LL * v13;
        uint64_t v15 = *(unsigned __int16 *)(v14 + 184);
        if (v15 <= 0x1F)
        {
          uint64_t v16 = (_OWORD *)(v9 + 32LL * (v15 - 16) + 6416);
          goto LABEL_10;
        }

LABEL_12:
    *(_DWORD *)(v4 + 72) |= 1u;
    uint64_t v18 = *(void *)(a1 + 8);
    int v19 = *(_DWORD *)(v18 + 2996) | 0x10;
    goto LABEL_27;
  }

  unsigned int v20 = *(unsigned int **)(v3 + 4128);
  unint64_t v21 = *(void *)(**(void **)(v3 + 808) + 768LL);
  int v22 = sub_25A80(*(void *)(a1 + 8), 0LL, *((void *)v20 + 50), 4LL, 0LL, (uint64_t *)&v51, 0);
  uint64_t result = 0LL;
  if (!v22) {
    return result;
  }
  unint64_t v23 = *v20;
  if ((_DWORD)v23)
  {
    unint64_t v24 = 0LL;
    uint64_t v25 = *(void *)(v3 + 24);
    uint64_t v26 = v51;
    uint64_t v27 = 1LL;
    do
    {
      uint64_t v28 = LOBYTE(v20[v27]);
      if (((v21 >> v28) & 0x10000) == 0)
      {
        if (v28 <= 0xF)
        {
          uint64_t v29 = (_OWORD *)(v25 + 6160 + 16 * v28);
LABEL_24:
          *v26++ = *v29;
          unint64_t v23 = *v20;
          goto LABEL_25;
        }

        if (v28 <= 0x1F)
        {
          uint64_t v29 = (_OWORD *)(v25 + 32LL * (v28 - 16) + 6416);
          goto LABEL_24;
        }
      }

uint64_t sub_2CDE8()
{
  return 1LL;
}

uint64_t sub_2CDF0(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v5 = *a4;
  if ((_DWORD)v5)
  {
    uint64_t v10 = result;
    unint64_t v11 = 0LL;
    unint64_t v12 = *(void *)(a2 + 768);
    unsigned int v13 = a4 + 3;
    do
    {
      uint64_t v14 = *((unsigned __int8 *)v13 - 8);
      if (((v12 >> v14) & 0x10000) != 0)
      {
        uint64_t v15 = 24LL * *((unsigned __int8 *)v13 - 8);
        uint64_t result = IOAccelResourceGetGPUVirtualAddress(**(void **)(*(void *)(a3 + 8 * v14) + 16LL));
        **(void **)(*(void *)(v10 + 64) + 8 * v11) = result + *(void *)(a2 + v15);
        unint64_t v5 = *a4;
      }

      else
      {
        **(void **)(*(void *)(v10 + 64) + 8 * v11) = *v13 + a5;
      }

      ++v11;
      v13 += 3;
    }

    while (v11 < v5);
  }

  return result;
}

uint64_t sub_2CEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, int *a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a1 + 2536);
  uint64_t v14 = off_7C328(a1);
  uint64_t v15 = *(void *)(*(void *)(*(void *)(a7 + 16) + 136LL) + 8LL);
  uint64_t v16 = 0LL;
  if (sub_25A80(a1, 6LL, *(void *)(v15 + 8), 16LL, 0LL, (uint64_t *)v37, 0))
  {
    uint64_t v16 = 0LL;
    if (sub_25A80(a1, 6LL, 256LL, 16LL, 0LL, &v36, 0))
    {
      uint64_t v16 = 0LL;
      if (sub_25A80(a1, 6LL, 256LL, 16LL, 0LL, &v35, 0))
      {
        uint64_t v16 = 0LL;
        if (sub_25A80(a1, 5LL, 4LL * *(unsigned int *)(*(void *)(a7 + 16) + 48LL), 4LL, 0LL, &v34, 0))
        {
          uint64_t v16 = 0LL;
          if (sub_25A80(a1, 6LL, *(void *)(*(void *)(v13 + 168) + 8LL), 16LL, 0LL, (uint64_t *)v33, 0))
          {
            memcpy(v37[0], *(const void **)(v15 + 40), *(void *)(v15 + 16) + *(void *)(v15 + 24));
            uint64_t v17 = *(void *)(*(void *)(*(void *)(a7 + 16) + 64LL) + 8LL);
            __dst = 0LL;
            uint64_t v32 = 0LL;
            uint64_t v29 = 0LL;
            uint64_t v30 = 0LL;
            uint64_t v26 = *(void *)(v17 + 16);
            uint64_t v27 = *(void *)(v17 + 24);
            if (!v26 || (uint64_t v16 = 0LL, sub_25A80(a1, 6LL, v26, 16LL, 0LL, (uint64_t *)&__dst, 0)))
            {
              if (!v27 || (uint64_t v16 = 0LL, sub_25A80(a1, 6LL, v27, 16LL, 0LL, (uint64_t *)&v29, 0)))
              {
                if (v26) {
                  memcpy(__dst, *(const void **)(v17 + 32), *(void *)(v17 + 16));
                }
                if (v27) {
                  memcpy(v29, *(const void **)(v17 + 40), *(void *)(v17 + 24));
                }
                uint64_t v18 = *(void *)(v13 + 168);
                uint64_t v19 = *(void *)(a7 + 16);
                unsigned int v20 = *(int **)(v19 + 40);
                unint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
                if (*v21 >= 5u && (uint64_t v22 = v21[2]) != 0) {
                  uint64_t v23 = *(unsigned int *)((char *)v20 + v22);
                }
                else {
                  uint64_t v23 = 0LL;
                }
                (*(void (**)(void, void, uint64_t, void, BOOL))(*(void *)v18 + 16LL))( *(void *)(v13 + 168),  *(void *)(a7 + 8),  v23,  *(unsigned int *)(v19 + 56),  *(_DWORD *)(v19 + 60) > 1u);
                unint64_t v24 = (char *)v33[0];
                memcpy(v33[0], *(const void **)(v18 + 40), *(void *)(v18 + 24));
                memcpy(&v24[*(void *)(v18 + 24)], *(const void **)(v18 + 32), *(void *)(v18 + 16));
                (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v14 + 320LL))( v14,  a3,  *(void *)(a7 + 16),  a4);
                (*(void (**)(uint64_t, void *, uint64_t, void, uint64_t, void *))(*(void *)v14 + 368LL))( v14,  v33[1],  v32,  0LL,  v30,  v37[1]);
                *(void *)(*(void *)(a1 + 2704) + 536LL) = sub_6D900( a1,  a2,  a3,  a4,  a5,  a6,  v14,  (unsigned int *)(*(void *)(a1 + 2704) + 592LL));
                if (!*(_BYTE *)(a1 + 4899)) {
                  *(_DWORD *)(*(void *)(a1 + 2688) + 4LL) = 0;
                }
                uint64_t v16 = 1LL;
                *(_BYTE *)(a1 + 3004) = 1;
                sub_268AC(a1);
                (*(void (**)(uint64_t))(*(void *)v14 + 128LL))(v14);
              }
            }
          }
        }
      }
    }
  }

  return v16;
}

void *sub_2D1DC(void *a1)
{
  *a1 = off_79098;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  a1[2] = 0LL;
  uint64_t v3 = a1[21];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  a1[21] = 0LL;
  if (byte_7C005 | byte_7C006)
  {
    uint64_t v4 = a1[23];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 16LL))(v4);
    }
    a1[23] = 0LL;
  }

  sub_20B44(a1 + 3);
  return a1;
}

char *sub_2D270(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x158uLL);
  *(void *)uint64_t v2 = off_79098;
  *((void *)v2 + 1) = a1;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *(_OWORD *)(v2 + 60) = 0u;
  *((void *)v2 + 3) = off_78EF8;
  *((_DWORD *)v2 + 25) = 0;
  *((_DWORD *)v2 + 26) = 0;
  *((void *)v2 + 15) = 0LL;
  *((void *)v2 + 17) = 0LL;
  *((void *)v2 + 19) = 0LL;
  *((void *)v2 + 20) = 0LL;
  uint64_t v3 = qword_7C2B0();
  *((void *)v2 + 11) = v3;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  unsigned int v5 = qword_7C310(v4, v2 + 104, v2 + 108, v2 + 112, v2 + 116);
  *((_DWORD *)v2 + 18) = v5;
  v2[96] = 1;
  uint64_t v6 = *(void *)(a1 + 16);
  __int128 v32 = 0u;
  uint64_t v33 = 0LL;
  uint64_t v40 = 0LL;
  __int128 v39 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0uLL;
  v38[0] = 0LL;
  v38[1] = (dword_7C4B8 + (unint64_t)v5 - 1) & -(uint64_t)dword_7C4B8;
  LOWORD(v35) = 257;
  WORD4(v32) = (dword_7C4B8 + v5 - 1) & -(__int16)dword_7C4B8;
  *(_DWORD *)((char *)&v32 + 10) = 65537;
  size_t v34 = v38[1];
  DWORD1(v32) = 1024;
  BYTE3(v35) = 1;
  uint64_t v7 = IOAccelResourceCreate(*(void *)(v6 + 40), &v32, 120LL);
  uint64_t v8 = v7;
  *((void *)v2 + 4) = v7;
  if (v7)
  {
    *((void *)v2 + 5) = IOAccelResourceGetClientShared(v7, v2 + 48);
    *(_BYTE *)(*((void *)v2 + 6) + 28LL) = 1;
    *((void *)v2 + 7) = IOAccelResourceGetClientSharedPrivate(*((void *)v2 + 4), v2 + 64);
    *((void *)v2 + 10) = IOAccelResourceGetGPUVirtualAddress(*((void *)v2 + 4));
    DataBytes = (void *)IOAccelResourceGetDataBytes(*((void *)v2 + 4));
    bzero(DataBytes, v38[1]);
  }

  uint64_t v10 = (void *)*((void *)v2 + 15);
  if (!v10)
  {
    uint64_t v10 = operator new(0x28uLL);
    uint64_t v11 = *(void *)(a1 + 16);
    *uint64_t v10 = &off_792D8;
    v10[1] = v11;
    v10[3] = 0LL;
    v10[4] = 0LL;
    v10[2] = 0LL;
    *((void *)v2 + 15) = v10;
  }

  if (!*((void *)v2 + 17))
  {
    if (byte_7C00B) {
      unsigned int v12 = 27;
    }
    else {
      unsigned int v12 = 25;
    }
    *(void *)&__int128 v32 = v12 | 0x200000000LL;
    DWORD2(v32) = v12 | 0x100;
    HIDWORD(v32) = 68;
    uint64_t v13 = (*(uint64_t (**)(void *, __int128 *))(*v10 + 16LL))(v10, &v32);
    *((void *)v2 + 17) = v13;
    if (!v13) {
      goto LABEL_36;
    }
    uint64_t v14 = *(int **)(v13 + 80);
    uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v15 >= 5u && (uint64_t v16 = v15[2]) != 0) {
      unint64_t v17 = (4 * (unint64_t)*(unsigned int *)((char *)v14 + v16) + 15) >> 4;
    }
    else {
      LODWORD(v17) = 0;
    }
    *((_DWORD *)v2 + 32) = v17;
    uint64_t v18 = *(int **)(v13 + 40);
    uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v19 >= 5u && (uint64_t v20 = v19[2]) != 0) {
      int v21 = *(int *)((char *)v18 + v20);
    }
    else {
      int v21 = 0;
    }
    *((_DWORD *)v2 + 33) = v21;
  }

  if (!*((void *)v2 + 19))
  {
    if (byte_7C00B) {
      unsigned int v22 = 28;
    }
    else {
      unsigned int v22 = 26;
    }
    *(void *)&__int128 v32 = v22 | 0x200000000LL;
    DWORD2(v32) = v22 | 0x100;
    HIDWORD(v32) = 68;
    uint64_t v13 = (*(uint64_t (**)(void, __int128 *))(**((void **)v2 + 15) + 16LL))(*((void *)v2 + 15), &v32);
    *((void *)v2 + 19) = v13;
    if (!v13) {
      goto LABEL_36;
    }
    uint64_t v23 = *(int **)(v13 + 80);
    unint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
    if (*v24 >= 5u && (uint64_t v25 = v24[2]) != 0) {
      unint64_t v26 = (4 * (unint64_t)*(unsigned int *)((char *)v23 + v25) + 15) >> 4;
    }
    else {
      LODWORD(v26) = 0;
    }
    *((_DWORD *)v2 + 36) = v26;
    uint64_t v27 = *(int **)(v13 + 40);
    uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
    if (*v28 >= 5u && (uint64_t v29 = v28[2]) != 0) {
      int v30 = *(int *)((char *)v27 + v29);
    }
    else {
      int v30 = 0;
    }
    *((_DWORD *)v2 + 37) = v30;
  }

  uint64_t v13 = qword_7C270( *((void *)v2 + 10) + *((unsigned int *)v2 + 25),  *((void *)v2 + 10) + *((unsigned int *)v2 + 26),  0LL);
  *((void *)v2 + 20) = v13;
  if (v13 && v8) {
    uint64_t v13 = (*(uint64_t (**)(void, void))(**((void **)v2 + 11) + 16LL))( *((void *)v2 + 11),  *((void *)v2 + 10) + *((unsigned int *)v2 + 27));
  }
LABEL_36:
  *((void *)v2 + 2) = off_7C2B8(v13);
  *((void *)v2 + 21) = off_7C260();
  *((void *)v2 + 22) = 0LL;
  bzero(v2 + 184, 0x58uLL);
  return v2;
}

uint64_t sub_2D630(void *a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1[1] + 8LL) + 816LL);
  dispatch_data_t v5 = dispatch_data_create(a2 + 2, 4LL * a2[1], 0LL, 0LL);
  uint64_t v6 = (unsigned int *)a1[4];
  if (v6) {
    dispatch_data_t v7 = dispatch_data_create(v6 + 1, *v6, 0LL, 0LL);
  }
  else {
    dispatch_data_t v7 = 0LL;
  }
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  uint64_t v15 = 0LL;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000LL;
  v11[2] = sub_2D794;
  v11[3] = &unk_79178;
  v11[4] = &v12;
  v11[5] = a2;
  if ((*(unsigned int (**)(uint64_t, dispatch_data_t, dispatch_data_t, void *))(*(void *)v4 + 16LL))( v4,  v5,  v7,  v11))
  {
    if (*a2 == 1)
    {
      int v8 = 0x100000;
    }

    else
    {
      if (*a2 != 2) {
        goto LABEL_10;
      }
      int v8 = 0x200000;
    }

    *(_DWORD *)(a1[2] + 2392LL) |= v8;
  }

uint64_t sub_2D77C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
  }
  return result;
}

uint64_t sub_2D794(uint64_t a1, const void *a2, size_t size)
{
  unint64_t v44 = malloc_zone_malloc(*(malloc_zone_t **)qword_7C220, size);
  memcpy(v44, a2, size);
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  __int128 v57 = 0u;
  __int128 v58 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  __int128 v54 = 0u;
  uint64_t result = sub_2DB90((uint64_t)&v54, (uint64_t)v44, size);
  if ((_DWORD)result)
  {
    __int128 v45 = v54;
    if ((void)v54)
    {
      if (*((void *)&v45 + 1))
      {
        uint64_t v7 = 0LL;
        int v8 = (int *)(v55 + *(unsigned int *)v55);
        uint64_t v9 = (int *)(v58 + *(unsigned int *)v58);
        unint64_t v46 = v8;
        uint64_t v48 = v9;
        if ((void)v57 && *((void *)&v57 + 1)) {
          uint64_t v7 = v57 + *(unsigned int *)v57;
        }
        uint64_t v10 = 0LL;
        uint64_t v49 = v7;
        if ((void)v61 && *((void *)&v61 + 1)) {
          uint64_t v10 = v61 + *(unsigned int *)v61;
        }
        uint64_t v11 = 0LL;
        uint64_t v52 = v10;
        if ((void)v60 && *((void *)&v60 + 1)) {
          uint64_t v11 = v60 + *(unsigned int *)v60;
        }
        uint64_t v51 = v11;
        __int128 v47 = v56;
        __int128 v50 = v59;
        __int128 v53 = v62;
        uint64_t v12 = operator new(0x5C0uLL);
        uint64_t v13 = *(void *)(a1 + 40);
        *(void *)sub_65668((uint64_t)v12, (uint64_t)&v44) = off_79FC0;
        uint64_t v14 = (unsigned __int16 *)((char *)v9 - *v9);
        if (*v14 < 7u)
        {
          uint64_t v15 = 0LL;
        }

        else
        {
          uint64_t v15 = (int *)v14[3];
          if (v15) {
            uint64_t v15 = (int *)((char *)v15 + (void)v9 + *(unsigned int *)((char *)v15 + (void)v9));
          }
        }

        v12[180] = v15;
        uint64_t v16 = (unsigned __int16 *)((char *)v8 - *v8);
        if (*v16 < 7u)
        {
          uint64_t v17 = 0LL;
        }

        else
        {
          uint64_t v17 = v16[3];
          if (v17) {
            v17 += (uint64_t)v8 + *(unsigned int *)((char *)v8 + v17);
          }
        }

        v12[181] = v17;
        v12[182] = -1LL;
        uint64_t v18 = (int *)v12[5];
        uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
        if (*v19 >= 0x19u && (uint64_t v20 = v19[12]) != 0) {
          int v21 = (char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20);
        }
        else {
          int v21 = 0LL;
        }
        unsigned int v22 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v22 >= 5u && (uint64_t v23 = v22[2]) != 0) {
          unint64_t v24 = (char *)v15 + v23 + *(unsigned int *)((char *)v15 + v23);
        }
        else {
          unint64_t v24 = 0LL;
        }
        v12[183] = off_7C240(v21, v24, *(void *)(v13 + 320));
        v12[8] = off_7C238(v25);
        unint64_t v26 = (int *)v12[5];
        uint64_t v27 = (unsigned int *)((char *)v26 + *(unsigned __int16 *)((char *)v26 - *v26 + 24));
        uint64_t v28 = *(unsigned int *)((char *)v27 + *v27);
        if ((_DWORD)v28)
        {
          uint64_t v29 = 0LL;
          uint64_t v30 = 4 * v28;
          do
          {
            uint64_t v31 = (unsigned __int16 *)((char *)v26 - *v26);
            if (*v31 < 0x19u)
            {
              uint64_t v32 = 0LL;
            }

            else
            {
              uint64_t v32 = v31[12];
              if (v32) {
                v32 += (uint64_t)v26 + *(unsigned int *)((char *)v26 + v32);
              }
            }

            uint64_t v33 = *(unsigned int *)(v32 + v29 + 4);
            size_t v34 = (int *)(v32 + v29 + 4 + v33);
            uint64_t v35 = v33 - *v34;
            __int128 v36 = (unsigned __int16 *)(v32 + v29 + v35);
            unsigned int v37 = v36[2];
            if (v37 >= 5 && v36[4])
            {
              int v38 = *(unsigned __int8 *)(v32 + v29 + v36[4] + v33 + 4);
              if (v38 == 26)
              {
                if (v37 >= 9 && (uint64_t v39 = v32 + v29, *(_WORD *)(v39 + v35 + 12))) {
                  int v40 = *(_DWORD *)(v39 + *(unsigned __int16 *)(v39 + v35 + 12) + v33 + 4);
                }
                else {
                  int v40 = 0;
                }
                *((_DWORD *)v12 + 365) = v40;
              }

              else if (v38 == 21)
              {
                if (v37 < 9)
                {
                  LODWORD(v43) = 0;
                }

                else
                {
                  uint64_t v43 = v36[6];
                  if (v36[6]) {
                    LODWORD(v43) = *(int *)((char *)v34 + v43);
                  }
                }

                *((_DWORD *)v12 + 364) = v43;
                *((_DWORD *)v12 + 26) |= 0x400000u;
                break;
              }
            }

            v29 += 4LL;
          }

          while (v30 != v29);
        }

        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v12;
        uint64_t v41 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 16LL))(v41);
        if ((result & 1) == 0)
        {
          uint64_t v42 = *(void *)(*(void *)(a1 + 32) + 8LL);
          uint64_t result = *(void *)(v42 + 24);
          if (result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
            uint64_t v42 = *(void *)(*(void *)(a1 + 32) + 8LL);
          }

          *(void *)(v42 + 24) = 0LL;
        }
      }
    }
  }

  return result;
}

BOOL sub_2DB90(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 0x28) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = a2 + 40;
  uint64_t v6 = (void *)(a1 + 8);
  do
  {
    uint64_t v7 = *(unsigned int *)(a2 + v4);
    if ((_DWORD)v7) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 0LL;
    }
    *(v6 - 1) = v8;
    void *v6 = v7;
    v5 += (v7 + 7) & 0x1FFFFFFF8LL;
    v4 += 4LL;
    v6 += 2;
  }

  while (v4 != 36);
  unint64_t v9 = 40LL;
  for (uint64_t i = 8LL; i != 152; i += 16LL)
    v9 += (*(void *)(a1 + i) + 7LL) & 0xFFFFFFFFFFFFFFF8LL;
  return v9 <= a3;
}

uint64_t sub_2DC10(void *a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1[1] + 8LL) + 816LL);
  dispatch_data_t v5 = dispatch_data_create(a2 + 2, 4LL * a2[1], 0LL, 0LL);
  uint64_t v6 = (unsigned int *)a1[4];
  if (v6) {
    dispatch_data_t v7 = dispatch_data_create(v6 + 1, *v6, 0LL, 0LL);
  }
  else {
    dispatch_data_t v7 = 0LL;
  }
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  uint64_t v15 = 0LL;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000LL;
  v11[2] = sub_2DD74;
  v11[3] = &unk_791A0;
  v11[4] = &v12;
  v11[5] = a2;
  if ((*(unsigned int (**)(uint64_t, dispatch_data_t, dispatch_data_t, void *))(*(void *)v4 + 16LL))( v4,  v5,  v7,  v11))
  {
    if (*a2 == 1)
    {
      int v8 = 0x100000;
    }

    else
    {
      if (*a2 != 2) {
        goto LABEL_10;
      }
      int v8 = 0x200000;
    }

    *(_DWORD *)(a1[2] + 2392LL) |= v8;
  }

uint64_t sub_2DD5C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
  }
  return result;
}

uint64_t sub_2DD74(uint64_t a1, const void *a2, size_t size)
{
  unsigned int v108 = malloc_zone_malloc(*(malloc_zone_t **)qword_7C220, size);
  memcpy(v108, a2, size);
  __int128 v125 = 0u;
  __int128 v126 = 0u;
  __int128 v123 = 0u;
  __int128 v124 = 0u;
  __int128 v121 = 0u;
  __int128 v122 = 0u;
  __int128 v119 = 0u;
  __int128 v120 = 0u;
  __int128 __pattern4 = 0u;
  uint64_t result = sub_2DB90((uint64_t)&__pattern4, (uint64_t)v108, size);
  if (!(_DWORD)result) {
    return result;
  }
  __int128 v109 = __pattern4;
  if (!(void)__pattern4 || !*((void *)&v109 + 1)) {
    return result;
  }
  uint64_t v7 = 0LL;
  int v8 = (int *)(v119 + *(unsigned int *)v119);
  int v110 = v8;
  uint64_t v9 = (int *)(v122 + *(unsigned int *)v122);
  uint64_t v112 = v9;
  if ((void)v121 && *((void *)&v121 + 1)) {
    uint64_t v7 = v121 + *(unsigned int *)v121;
  }
  uint64_t v10 = 0LL;
  uint64_t v113 = v7;
  if ((void)v125 && *((void *)&v125 + 1)) {
    uint64_t v10 = v125 + *(unsigned int *)v125;
  }
  uint64_t v11 = 0LL;
  uint64_t v116 = v10;
  if ((void)v124 && *((void *)&v124 + 1)) {
    uint64_t v11 = v124 + *(unsigned int *)v124;
  }
  uint64_t v115 = v11;
  __int128 v111 = v120;
  __int128 v114 = v123;
  __int128 v117 = v126;
  uint64_t v12 = (char *)operator new(0x628uLL);
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)sub_65668((uint64_t)v12, (uint64_t)&v108) = off_79FF8;
  uint64_t v14 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v14 >= 9u && (uint64_t v15 = v14[4]) != 0) {
    uint64_t v16 = (int *)((char *)v9 + v15 + *(unsigned int *)((char *)v9 + v15));
  }
  else {
    uint64_t v16 = 0LL;
  }
  *((void *)v12 + 180) = v16;
  uint64_t v17 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0) {
    uint64_t v19 = (int *)((char *)v8 + v18 + *(unsigned int *)((char *)v8 + v18));
  }
  else {
    uint64_t v19 = 0LL;
  }
  LOBYTE(v20) = 0;
  *((void *)v12 + 181) = v19;
  *((_WORD *)v12 + 728) = 0;
  int v21 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v21 >= 5u)
  {
    uint64_t v20 = v21[2];
    if (v21[2]) {
      LOBYTE(v20) = *((_BYTE *)v16 + v20) != 0;
    }
  }

  v12[1458] = v20;
  *((void *)v12 + 185) = 0LL;
  *((_OWORD *)v12 + 93) = 0u;
  *((void *)v12 + 188) = -1LL;
  *((void *)v12 + 189) = -1LL;
  *((void *)v12 + 190) = -1LL;
  *(_OWORD *)(v12 + 1560) = 0u;
  uint64_t v22 = *v19;
  uint64_t v23 = (unsigned int *)((char *)v19 + *(unsigned __int16 *)((char *)v19 - v22 + 12));
  unsigned int v24 = *(unsigned int *)((char *)v23 + *v23);
  if (v24 < 2)
  {
    if (*((_DWORD *)v12 + 15) < 2u) {
      goto LABEL_40;
    }
  }

  else
  {
    *((_DWORD *)v12 + 15) = v24;
    uint64_t v22 = *v19;
  }

  uint64_t v25 = -v22;
  if (*(unsigned __int16 *)((char *)v19 + v25) < 0xDu)
  {
    uint64_t v26 = 0LL;
  }

  else
  {
    uint64_t v26 = *(unsigned __int16 *)((char *)v19 + v25 + 12);
  }

  uint64_t v27 = (int *)(v26 + 4 + *(unsigned int *)(v26 + 4));
  uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v28 >= 7u)
  {
    uint64_t v29 = v28[3];
    if (v29)
    {
      int v30 = *((char *)v27 + v29);
      if ((v30 - 1) <= 1)
      {
        *((_DWORD *)v12 + 14) = v30;
        uint64_t v25 = -(uint64_t)*v19;
      }
    }
  }

  uint64_t v31 = (unsigned int *)((char *)v19 + *(unsigned __int16 *)((char *)v19 + v25 + 12));
  uint64_t v32 = (int *)((char *)v31 + *v31 + *(unsigned int *)((char *)v31 + *v31 + 8) + 8);
  uint64_t v33 = (unsigned __int16 *)((char *)v32 - *v32);
  v35 = *v33 >= 7u && (uint64_t v34 = v33[3]) != 0 && *((unsigned __int8 *)v32 + v34) - 1 < 2;
  v12[1457] = v35;
LABEL_40:
  LODWORD(__pattern4) = -1;
  memset_pattern4(v12 + 1528, &__pattern4, 0x20uLL);
  __int128 v36 = (int *)*((void *)v12 + 5);
  uint64_t v37 = *v36;
  int v38 = (unsigned int *)((char *)v36 + *(unsigned __int16 *)((char *)v36 - v37 + 24));
  uint64_t v39 = *(unsigned int *)((char *)v38 + *v38);
  if ((_DWORD)v39)
  {
    uint64_t v40 = 0LL;
    uint64_t v41 = 4 * v39;
    do
    {
      uint64_t v42 = (unsigned __int16 *)((char *)v36 - *v36);
      if (*v42 >= 0x19u && (uint64_t v43 = v42[12]) != 0) {
        unint64_t v44 = (char *)v36 + v43 + *(unsigned int *)((char *)v36 + v43);
      }
      else {
        unint64_t v44 = 0LL;
      }
      uint64_t v45 = *(unsigned int *)&v44[v40 + 4];
      unint64_t v46 = &v44[v40 + v45];
      uint64_t v47 = v45 - *((int *)v46 + 1);
      uint64_t v48 = &v44[v40 + v47];
      unsigned int v49 = *((unsigned __int16 *)v48 + 2);
      if (v49 >= 5)
      {
        uint64_t v50 = *((unsigned __int16 *)v48 + 4);
        if (v50)
        {
          switch(v44[v40 + 4 + v50 + v45])
          {
            case 24:
              if (v49 >= 9 && (uint64_t v51 = &v44[v40], *(_WORD *)&v51[v47 + 12])) {
                int v52 = *(_DWORD *)&v51[*(unsigned __int16 *)&v51[v47 + 12] + 4 + v45];
              }
              else {
                int v52 = 0;
              }
              *((_DWORD *)v12 + 379) = v52;
              *((int8x8_t *)v12 + 13) = vorr_s8(*(int8x8_t *)(v12 + 104), (int8x8_t)0x8000000000800000LL);
              break;
            case 25:
              if (v49 >= 9 && (__int128 v54 = &v44[v40], *(_WORD *)&v54[v47 + 12])) {
                int v55 = *(_DWORD *)&v54[*(unsigned __int16 *)&v54[v47 + 12] + 4 + v45];
              }
              else {
                int v55 = 0;
              }
              *((_DWORD *)v12 + 376) = v55;
              int v62 = *((_DWORD *)v12 + 26) | 1;
              goto LABEL_78;
            case 26:
              if (v49 >= 9 && (__int128 v56 = &v44[v40], *(_WORD *)&v56[v47 + 12])) {
                int v57 = *(_DWORD *)&v56[*(unsigned __int16 *)&v56[v47 + 12] + 4 + v45];
              }
              else {
                int v57 = 0;
              }
              *((_DWORD *)v12 + 378) = v57;
              *((_DWORD *)v12 + 28) |= 1u;
              break;
            case 27:
              if (v49 >= 9 && (__int128 v58 = &v44[v40], *(_WORD *)&v58[v47 + 12])) {
                int v59 = *(_DWORD *)&v58[*(unsigned __int16 *)&v58[v47 + 12] + 4 + v45];
              }
              else {
                int v59 = 0;
              }
              *((_DWORD *)v12 + 377) = v59;
              int v62 = *((_DWORD *)v12 + 26) | 4;
              goto LABEL_78;
            case 28:
              if (v49 >= 9 && (__int128 v60 = &v44[v40], *(_WORD *)&v60[v47 + 12])) {
                int v61 = *(_DWORD *)&v60[*(unsigned __int16 *)&v60[v47 + 12] + 4 + v45];
              }
              else {
                int v61 = 0;
              }
              *((_DWORD *)v12 + 381) = v61;
              int v62 = *((_DWORD *)v12 + 26) | 0x20000000;
LABEL_78:
              *((_DWORD *)v12 + 26) = v62;
              break;
            default:
              if (v44[v40 + 4 + v50 + v45] != 4) {
                break;
              }
              if (v49 < 9)
              {
                int v53 = 0;
                if (v49 < 7)
                {
                  uint64_t v63 = 0LL;
                  goto LABEL_84;
                }
              }

              else if (*(_WORD *)&v44[v40 + 12 + v47])
              {
                int v53 = *(_DWORD *)&v44[v40 + 4 + *(unsigned __int16 *)&v44[v40 + 12 + v47] + v45];
              }

              else
              {
                int v53 = 0;
              }

              uint64_t v63 = *(unsigned __int16 *)&v44[v40 + 10 + v47];
              if (v63) {
                uint64_t v63 = *(unsigned int *)&v44[v40 + 4 + v63 + v45];
              }
LABEL_84:
              *(_DWORD *)&v12[4 * v63 + 1528] = v53;
              uint64_t v64 = &v44[v40 + v45 - *((int *)v46 + 1)];
              else {
                LOBYTE(v66) = 0;
              }
              *((_DWORD *)v12 + 390) |= 1 << v66;
              break;
          }
        }
      }

      v40 += 4LL;
    }

    while (v41 != v40);
    uint64_t v37 = *v36;
  }

  unint64_t v67 = (unsigned int *)((char *)v36 + *(unsigned __int16 *)((char *)v36 - v37 + 28));
  uint64_t v68 = *(unsigned int *)((char *)v67 + *v67);
  if ((_DWORD)v68)
  {
    uint64_t v69 = 0LL;
    uint64_t v70 = 4 * v68;
    do
    {
      int v71 = (unsigned __int16 *)((char *)v36 - *v36);
      if (*v71 < 0x1Du)
      {
        uint64_t v72 = 0LL;
      }

      else
      {
        uint64_t v72 = v71[14];
        if (v72) {
          v72 += (uint64_t)v36 + *(unsigned int *)((char *)v36 + v72);
        }
      }

      uint64_t v73 = *(unsigned int *)(v72 + v69 + 4);
      uint64_t v74 = v73 - *(int *)(v72 + v69 + v73 + 4);
      uint64_t v75 = v72 + v69 + v74;
      unsigned int v76 = *(unsigned __int16 *)(v75 + 4);
      if (v76 >= 5)
      {
        uint64_t v77 = *(unsigned __int16 *)(v75 + 8);
        if (v77)
        {
          if (*(_BYTE *)(v72 + v69 + v77 + v73 + 4) == 20)
          {
            else {
              int v80 = 0;
            }
            *((_DWORD *)v12 + 380) = v80;
          }
        }
      }

      v69 += 4LL;
    }

    while (v70 != v69);
  }

  uint64_t v81 = *(unsigned __int16 *)((char *)v19 - *v19 + 8);
  uint64_t v82 = *(unsigned int *)((char *)v19 + v81);
  unint64_t v83 = (unsigned int *)((char *)v19 + v81 + v82);
  uint64_t v84 = *v83;
  if ((_DWORD)v84)
  {
    unint64_t v85 = 0LL;
    uint64_t v86 = 4 * v84;
    uint64_t v87 = (char *)v19 + v81 + v82;
    do
    {
      uint64_t v88 = *(unsigned int *)&v87[v85 + 4];
      uint64_t v89 = &v87[v85 + v88 - *(int *)((char *)&v83[v85 / 4 + 1] + v88)];
      if (*((unsigned __int16 *)v89 + 2) >= 5u)
      {
        uint64_t v90 = *((unsigned __int16 *)v89 + 4);
        if (v90)
        {
          int v91 = v87[v85 + 4 + v88 + v90];
          if (v91 == 5)
          {
            v12[1456] = 1;
          }

          else if (v91 == 6)
          {
            v12[52] = 1;
          }
        }
      }

      v85 += 4LL;
    }

    while (v86 != v85);
    *((_DWORD *)v12 + 391) = 1;
  }

  sub_6682C(*(void *)(v13 + 328), v16, v19, (int *)v12 + 366, (_DWORD *)v12 + 365, (BOOL *)v12 + 367);
  *((void *)v12 + 8) = off_7C248(&v108, 0LL);
  uint64_t v92 = (int *)*((void *)v12 + 181);
  uint64_t v93 = (unsigned __int16 *)((char *)v92 - *v92);
  if (*v93 >= 9u && (uint64_t v94 = v93[4]) != 0) {
    int v95 = (char *)v92 + v94 + *(unsigned int *)((char *)v92 + v94);
  }
  else {
    int v95 = 0LL;
  }
  *((void *)v12 + 196) = off_7C258(v95);
  uint64_t v96 = (int *)*((void *)v12 + 180);
  int v97 = *((_DWORD *)v12 + 14);
  uint64_t v98 = (unsigned __int16 *)((char *)v96 - *v96);
  if (*v98 >= 9u && (uint64_t v99 = v98[4]) != 0)
  {
    unint64_t v100 = *(void *)((char *)v96 + v99);
    if (v97) {
      goto LABEL_130;
    }
  }

  else
  {
    unint64_t v100 = 0LL;
    if (v97) {
      goto LABEL_130;
    }
  }

  uint64_t v101 = *(void *)(v13 + 328);
  int v102 = *((_DWORD *)v12 + 365);
  if (v102 == 5 || !v102)
  {
    unsigned int v103 = *(unsigned __int8 *)(v101 + 32);
    do
    {
      BOOL v104 = v103 == 0;
      if (!v103) {
        goto LABEL_131;
      }
      unsigned int v105 = __clz(__rbit32(v103));
      v103 ^= 1 << v105;
    }

    while ((~(v100 >> (4 * v105)) & ~(-1 << (*(_DWORD *)(v101 + 4LL * v105) >> 5))) == 0);
  }

uint64_t sub_2E660(void *a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1[1] + 8LL) + 816LL);
  dispatch_data_t v5 = dispatch_data_create(a2 + 2, 4LL * a2[1], 0LL, 0LL);
  uint64_t v6 = (unsigned int *)a1[4];
  if (v6) {
    dispatch_data_t v7 = dispatch_data_create(v6 + 1, *v6, 0LL, 0LL);
  }
  else {
    dispatch_data_t v7 = 0LL;
  }
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  uint64_t v15 = 0LL;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000LL;
  v11[2] = sub_2E7C4;
  v11[3] = &unk_791F8;
  v11[4] = &v12;
  v11[5] = a2;
  if ((*(unsigned int (**)(uint64_t, dispatch_data_t, dispatch_data_t, void *))(*(void *)v4 + 16LL))( v4,  v5,  v7,  v11))
  {
    if (*a2 == 1)
    {
      int v8 = 0x100000;
    }

    else
    {
      if (*a2 != 2) {
        goto LABEL_10;
      }
      int v8 = 0x200000;
    }

    *(_DWORD *)(a1[2] + 2392LL) |= v8;
  }

uint64_t sub_2E7AC(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
  }
  return result;
}

uint64_t sub_2E7C4(uint64_t a1, const void *a2, size_t size)
{
  uint64_t v39 = malloc_zone_malloc(*(malloc_zone_t **)qword_7C220, size);
  memcpy(v39, a2, size);
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v49 = 0u;
  uint64_t result = sub_2DB90((uint64_t)&v49, (uint64_t)v39, size);
  if ((_DWORD)result)
  {
    __int128 v40 = v49;
    if ((void)v49)
    {
      if (*((void *)&v40 + 1))
      {
        uint64_t v7 = 0LL;
        uint64_t v41 = v50 + *(unsigned int *)v50;
        uint64_t v43 = v53 + *(unsigned int *)v53;
        if ((void)v52 && *((void *)&v52 + 1)) {
          uint64_t v7 = v52 + *(unsigned int *)v52;
        }
        uint64_t v8 = 0LL;
        uint64_t v44 = v7;
        if ((void)v56 && *((void *)&v56 + 1)) {
          uint64_t v8 = v56 + *(unsigned int *)v56;
        }
        uint64_t v9 = 0LL;
        uint64_t v47 = v8;
        if ((void)v55 && *((void *)&v55 + 1)) {
          uint64_t v9 = v55 + *(unsigned int *)v55;
        }
        uint64_t v46 = v9;
        __int128 v42 = v51;
        __int128 v45 = v54;
        __int128 v48 = v57;
        uint64_t v10 = operator new(0xB0uLL);
        uint64_t v11 = *(void *)(a1 + 40);
        uint64_t v12 = sub_66FD8((uint64_t)v10, (uint64_t)&v39);
        *(void *)uint64_t v12 = &off_7A060;
        *(_DWORD *)(v12 + 132) = 0;
        *(_OWORD *)(v12 + 144) = 0u;
        *(_OWORD *)(v12 + 160) = 0u;
        uint64_t v13 = *(int **)(v12 + 40);
        uint64_t v14 = (unsigned int *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 24));
        uint64_t v15 = *(unsigned int *)((char *)v14 + *v14);
        if ((_DWORD)v15)
        {
          uint64_t v16 = 0LL;
          uint64_t v17 = 4 * v15;
          while (1)
          {
            uint64_t v18 = (unsigned __int16 *)((char *)v13 - *v13);
            if (*v18 < 0x19u)
            {
              uint64_t v19 = 0LL;
            }

            else
            {
              uint64_t v19 = v18[12];
              if (v19) {
                v19 += (uint64_t)v13 + *(unsigned int *)((char *)v13 + v19);
              }
            }

            uint64_t v20 = *(unsigned int *)(v19 + v16 + 4);
            uint64_t v21 = v19 + v16 + v20;
            uint64_t v22 = v20 - *(int *)(v21 + 4);
            uint64_t v23 = v19 + v16 + v22;
            unsigned int v24 = *(unsigned __int16 *)(v23 + 4);
            if (v24 < 5) {
              goto LABEL_26;
            }
            uint64_t v25 = *(unsigned __int16 *)(v23 + 8);
            if (!v25) {
              break;
            }
            int v26 = *(unsigned __int8 *)(v19 + v16 + v25 + v20 + 4);
            if (v26 == 4)
            {
              if (v24 >= 9)
              {
                if (*(_WORD *)(v19 + v16 + v22 + 12)) {
                  int v32 = *(_DWORD *)(v19 + v16 + *(unsigned __int16 *)(v19 + v16 + v22 + 12) + v20 + 4);
                }
                else {
                  int v32 = 0;
                }
                goto LABEL_40;
              }

              int v32 = 0;
              if (v24 >= 7)
              {
LABEL_40:
                uint64_t v33 = *(unsigned __int16 *)(v19 + v16 + v22 + 10);
                if (v33) {
                  uint64_t v33 = *(unsigned int *)(v19 + v16 + v33 + v20 + 4);
                }
              }

              else
              {
                uint64_t v33 = 0LL;
              }

              *((_DWORD *)v10 + v33 + 23) = v32;
              uint64_t v34 = v19 + v16 + v20 - *(int *)(v21 + 4);
              else {
                LOBYTE(v36) = 0;
              }
              *((_DWORD *)v10 + 31) |= 1 << v36;
              goto LABEL_32;
            }

            if (!v26) {
              break;
            }
LABEL_32:
            v16 += 4LL;
            if (v17 == v16) {
              goto LABEL_47;
            }
          }

          if (v24 < 7)
          {
LABEL_26:
            uint64_t v27 = 0LL;
          }

          else
          {
            uint64_t v27 = *(unsigned __int16 *)(v19 + v16 + v22 + 10);
            if (v27) {
              uint64_t v27 = *(unsigned int *)(v19 + v16 + v27 + v20 + 4);
            }
          }

          *((_DWORD *)v10 + 33) |= 1LL << v27;
          uint64_t v28 = v20 - *(int *)(v21 + 4);
          if (*(unsigned __int16 *)(v19 + v16 + v28 + 4) >= 9u
            && (uint64_t v29 = v19 + v16, (v30 = *(unsigned __int16 *)(v29 + v28 + 12)) != 0))
          {
            int v31 = *(_DWORD *)(v29 + v30 + v20 + 4);
          }

          else
          {
            int v31 = 0;
          }

          *((_DWORD *)v10 + v27 + 36) = v31;
          goto LABEL_32;
        }

LABEL_47:
        sub_6682C( *(void *)(v11 + 72),  *((int **)v10 + 9),  *((int **)v10 + 10),  (int *)v10 + 35,  (_DWORD *)v10 + 34,  (BOOL *)&v49);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v10;
        uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 16LL))(v37);
        if ((result & 1) == 0)
        {
          uint64_t v38 = *(void *)(*(void *)(a1 + 32) + 8LL);
          uint64_t result = *(void *)(v38 + 24);
          if (result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
            uint64_t v38 = *(void *)(*(void *)(a1 + 32) + 8LL);
          }

          *(void *)(v38 + 24) = 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t sub_2EB8C(void *a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1[1] + 8LL) + 816LL);
  dispatch_data_t v5 = dispatch_data_create(a2 + 2, 4LL * a2[1], 0LL, 0LL);
  uint64_t v6 = (unsigned int *)a1[4];
  if (v6) {
    dispatch_data_t v7 = dispatch_data_create(v6 + 1, *v6, 0LL, 0LL);
  }
  else {
    dispatch_data_t v7 = 0LL;
  }
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  uint64_t v15 = 0LL;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000LL;
  v11[2] = sub_2ECF0;
  v11[3] = &unk_79250;
  v11[4] = &v12;
  v11[5] = a2;
  if ((*(unsigned int (**)(uint64_t, dispatch_data_t, dispatch_data_t, void *))(*(void *)v4 + 16LL))( v4,  v5,  v7,  v11))
  {
    if (*a2 == 1)
    {
      int v8 = 0x100000;
    }

    else
    {
      if (*a2 != 2) {
        goto LABEL_10;
      }
      int v8 = 0x200000;
    }

    *(_DWORD *)(a1[2] + 2392LL) |= v8;
  }

uint64_t sub_2ECD8(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
  }
  return result;
}

uint64_t sub_2ECF0(uint64_t a1, const void *a2, size_t size)
{
  int v66 = malloc_zone_malloc(*(malloc_zone_t **)qword_7C220, size);
  memcpy(v66, a2, size);
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  __int128 v81 = 0u;
  __int128 v82 = 0u;
  __int128 v79 = 0u;
  __int128 v80 = 0u;
  __int128 v77 = 0u;
  __int128 v78 = 0u;
  __int128 __pattern4 = 0u;
  uint64_t result = sub_2DB90((uint64_t)&__pattern4, (uint64_t)v66, size);
  if ((_DWORD)result)
  {
    __int128 v67 = __pattern4;
    if ((void)__pattern4)
    {
      if (*((void *)&v67 + 1))
      {
        uint64_t v7 = 0LL;
        uint64_t v68 = v77 + *(unsigned int *)v77;
        uint64_t v70 = v80 + *(unsigned int *)v80;
        if ((void)v79 && *((void *)&v79 + 1)) {
          uint64_t v7 = v79 + *(unsigned int *)v79;
        }
        uint64_t v8 = 0LL;
        uint64_t v71 = v7;
        if ((void)v83 && *((void *)&v83 + 1)) {
          uint64_t v8 = v83 + *(unsigned int *)v83;
        }
        uint64_t v9 = 0LL;
        uint64_t v74 = v8;
        if ((void)v82 && *((void *)&v82 + 1)) {
          uint64_t v9 = v82 + *(unsigned int *)v82;
        }
        uint64_t v73 = v9;
        __int128 v69 = v78;
        __int128 v72 = v81;
        __int128 v75 = v84;
        uint64_t v10 = (char *)operator new(0x110uLL);
        uint64_t v11 = *(void *)(a1 + 40);
        uint64_t v12 = sub_66FD8((uint64_t)v10, (uint64_t)&v66);
        *(void *)uint64_t v12 = &off_7A090;
        uint64_t v13 = (void *)(v12 + 132);
        *(_DWORD *)(v12 + 264) = -1;
        LODWORD(__pattern4) = -1;
        memset_pattern4((void *)(v12 + 228), &__pattern4, 0x20uLL);
        memset_pattern4(v10 + 196, &__pattern4, 0x20uLL);
        memset_pattern4(v10 + 164, &__pattern4, 0x20uLL);
        memset_pattern4(v13, &__pattern4, 0x20uLL);
        uint64_t v14 = (int *)*((void *)v10 + 5);
        uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v15 >= 0x11u && (uint64_t v16 = v15[8]) != 0) {
          uint64_t v17 = (unsigned int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
        }
        else {
          uint64_t v17 = 0LL;
        }
        *((_DWORD *)v10 + 65) = sub_66140(v17, (uint64_t)v13);
        uint64_t v18 = (int *)*((void *)v10 + 5);
        uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
        if (*v19 >= 0x15u && (uint64_t v20 = v19[10]) != 0) {
          uint64_t v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
        }
        else {
          uint64_t v21 = 0LL;
        }
        sub_66140(v21, (uint64_t)(v10 + 264));
        uint64_t v22 = (int *)*((void *)v10 + 5);
        uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
        uint64_t v24 = v23[7];
        if (v23[7]) {
          LODWORD(v24) = *(int *)((char *)v22 + v24);
        }
        uint64_t v25 = v23[9];
        if (v23[9]) {
          LODWORD(v25) = *(int *)((char *)v22 + v25);
        }
        uint64_t v26 = *(unsigned int *)((char *)v22 + v23[12] + *(unsigned int *)((char *)v22 + v23[12]));
        if ((_DWORD)v26)
        {
          uint64_t v27 = 0LL;
          unsigned int v28 = (v25 + v24) >> 2;
          do
          {
            uint64_t v29 = (unsigned __int16 *)((char *)v22 - *v22);
            if (*v29 >= 0x19u && (uint64_t v30 = v29[12]) != 0) {
              int v31 = (char *)v22 + v30 + *(unsigned int *)((char *)v22 + v30);
            }
            else {
              int v31 = 0LL;
            }
            uint64_t v32 = *(unsigned int *)&v31[v27 + 4];
            uint64_t v33 = &v31[v27 + v32];
            uint64_t v34 = v32 - *((int *)v33 + 1);
            uint64_t v35 = &v31[v27 + v34];
            unsigned int v36 = *((unsigned __int16 *)v35 + 2);
            if (v36 >= 5)
            {
              uint64_t v37 = *((unsigned __int16 *)v35 + 4);
              if (v37)
              {
                switch(v31[v27 + 4 + v37 + v32])
                {
                  case 0:
                    goto LABEL_34;
                  case 1:
                    if (v36 < 9)
                    {
                      unsigned int v46 = v28;
                      if (v36 < 7)
                      {
                        uint64_t v47 = 0LL;
                        unsigned int v46 = v28;
                        goto LABEL_67;
                      }
                    }

                    else
                    {
                      if (*(_WORD *)&v31[v27 + 12 + v34]) {
                        int v41 = *(_DWORD *)&v31[v27 + 4 + *(unsigned __int16 *)&v31[v27 + 12 + v34] + v32];
                      }
                      else {
                        int v41 = 0;
                      }
                      unsigned int v46 = v41 + v28;
                    }

                    __int128 v52 = &v31[v27];
                    uint64_t v53 = *(unsigned __int16 *)&v52[v34 + 10];
                    if (v53) {
                      uint64_t v47 = *(unsigned int *)&v52[v53 + 4 + v32];
                    }
                    else {
                      uint64_t v47 = 0LL;
                    }
LABEL_67:
                    *(_DWORD *)&v10[4 * v47 + 228] = v46;
                    goto LABEL_40;
                  case 2:
                    if (v36 < 9)
                    {
                      unsigned int v48 = v28;
                      if (v36 < 7)
                      {
                        uint64_t v49 = 0LL;
                        unsigned int v48 = v28;
                        goto LABEL_73;
                      }
                    }

                    else
                    {
                      if (*(_WORD *)&v31[v27 + 12 + v34]) {
                        int v42 = *(_DWORD *)&v31[v27 + 4 + *(unsigned __int16 *)&v31[v27 + 12 + v34] + v32];
                      }
                      else {
                        int v42 = 0;
                      }
                      unsigned int v48 = v42 + v28;
                    }

                    __int128 v54 = &v31[v27];
                    uint64_t v55 = *(unsigned __int16 *)&v54[v34 + 10];
                    if (v55) {
                      uint64_t v49 = *(unsigned int *)&v54[v55 + 4 + v32];
                    }
                    else {
                      uint64_t v49 = 0LL;
                    }
LABEL_73:
                    *(_DWORD *)&v10[4 * v49 + 196] = v48;
                    goto LABEL_40;
                  case 4:
                    if (v36 < 9)
                    {
                      unsigned int v50 = v28;
                      if (v36 < 7)
                      {
                        uint64_t v51 = 0LL;
                        unsigned int v50 = v28;
                        goto LABEL_78;
                      }
                    }

                    else
                    {
                      if (*(_WORD *)&v31[v27 + 12 + v34]) {
                        int v43 = *(_DWORD *)&v31[v27 + 4 + *(unsigned __int16 *)&v31[v27 + 12 + v34] + v32];
                      }
                      else {
                        int v43 = 0;
                      }
                      unsigned int v50 = v43 + v28;
                    }

                    uint64_t v51 = *(unsigned __int16 *)&v31[v27 + 10 + v34];
                    if (v51) {
                      uint64_t v51 = *(unsigned int *)&v31[v27 + 4 + v51 + v32];
                    }
LABEL_78:
                    *(_DWORD *)&v10[4 * v51 + 92] = v50;
                    __int128 v56 = &v31[v27 + v32 - *((int *)v33 + 1)];
                    else {
                      LOBYTE(v58) = 0;
                    }
                    *((_DWORD *)v10 + 31) |= 1 << v58;
                    break;
                  default:
                    goto LABEL_40;
                }

                goto LABEL_40;
              }

uint64_t sub_2F2E0(void *a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1[1] + 8LL) + 816LL);
  dispatch_data_t v5 = dispatch_data_create(a2 + 2, 4LL * a2[1], 0LL, 0LL);
  uint64_t v6 = (unsigned int *)a1[4];
  if (v6) {
    dispatch_data_t v7 = dispatch_data_create(v6 + 1, *v6, 0LL, 0LL);
  }
  else {
    dispatch_data_t v7 = 0LL;
  }
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  uint64_t v15 = 0LL;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000LL;
  v11[2] = sub_2F444;
  v11[3] = &unk_792A8;
  v11[4] = &v12;
  v11[5] = a2;
  if ((*(unsigned int (**)(uint64_t, dispatch_data_t, dispatch_data_t, void *))(*(void *)v4 + 16LL))( v4,  v5,  v7,  v11))
  {
    if (*a2 == 1)
    {
      int v8 = 0x100000;
    }

    else
    {
      if (*a2 != 2) {
        goto LABEL_10;
      }
      int v8 = 0x200000;
    }

    *(_DWORD *)(a1[2] + 2392LL) |= v8;
  }

uint64_t sub_2F42C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
  }
  return result;
}

uint64_t sub_2F444(uint64_t a1, const void *a2, size_t size)
{
  uint64_t v26 = malloc_zone_malloc(*(malloc_zone_t **)qword_7C220, size);
  memcpy(v26, a2, size);
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v36 = 0u;
  uint64_t result = sub_2DB90((uint64_t)&v36, (uint64_t)v26, size);
  if ((_DWORD)result)
  {
    __int128 v27 = v36;
    if ((void)v36)
    {
      if (*((void *)&v27 + 1))
      {
        uint64_t v7 = 0LL;
        uint64_t v8 = v40 + *(unsigned int *)v40;
        uint64_t v28 = v37 + *(unsigned int *)v37;
        uint64_t v30 = v8;
        if ((void)v39 && *((void *)&v39 + 1)) {
          uint64_t v7 = v39 + *(unsigned int *)v39;
        }
        uint64_t v9 = 0LL;
        uint64_t v31 = v7;
        if ((void)v43 && *((void *)&v43 + 1)) {
          uint64_t v9 = v43 + *(unsigned int *)v43;
        }
        uint64_t v10 = 0LL;
        uint64_t v34 = v9;
        if ((void)v42 && *((void *)&v42 + 1)) {
          uint64_t v10 = v42 + *(unsigned int *)v42;
        }
        uint64_t v33 = v10;
        __int128 v29 = v38;
        __int128 v32 = v41;
        __int128 v35 = v44;
        uint64_t v11 = operator new(0x50uLL);
        v12.n128_f64[0] = sub_654A8((uint64_t)v11, (uint64_t)&v26);
        LODWORD(v13) = 0;
        *(void *)uint64_t v14 = &off_7A0C0;
        *(_DWORD *)(v14 + 72) = 0;
        uint64_t v15 = *(int **)(v14 + 40);
        uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v16 >= 0x17u)
        {
          uint64_t v13 = v16[11];
          if (v16[11]) {
            LODWORD(v13) = *(int *)((char *)v15 + v13);
          }
        }

        v11[18] = v13;
        uint64_t v17 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v17 < 0xFu)
        {
          LODWORD(v18) = 0;
        }

        else
        {
          uint64_t v18 = v17[7];
          if (v18) {
            LODWORD(v18) = *(int *)((char *)v15 + v18);
          }
        }

        int v19 = v18 + v13;
        v11[18] = v19;
        uint64_t v20 = (unsigned int *)((char *)v15 + *(unsigned __int16 *)((char *)v15 - *v15 + 30));
        v11[18] = *(unsigned int *)((char *)v20 + *v20) + v19;
        uint64_t v21 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v21 >= 9u && (uint64_t v22 = v21[4]) != 0) {
          uint64_t v23 = (char *)v15 + v22 + *(unsigned int *)((char *)v15 + v22);
        }
        else {
          uint64_t v23 = 0LL;
        }
        *((void *)v11 + 8) = qword_7C250(v23, v12);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v11;
        uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 16LL))(v24);
        if ((result & 1) == 0)
        {
          uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 8LL);
          uint64_t result = *(void *)(v25 + 24);
          if (result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
            uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 8LL);
          }

          *(void *)(v25 + 24) = 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t sub_2F6BC(void *a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1[1] + 8LL) + 816LL);
  dispatch_data_t v5 = dispatch_data_create(a2 + 2, 4LL * a2[1], 0LL, 0LL);
  uint64_t v6 = (unsigned int *)a1[4];
  if (v6) {
    dispatch_data_t v7 = dispatch_data_create(v6 + 1, *v6, 0LL, 0LL);
  }
  else {
    dispatch_data_t v7 = 0LL;
  }
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  uint64_t v15 = 0LL;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000LL;
  v11[2] = sub_2F820;
  v11[3] = &unk_79300;
  v11[4] = &v12;
  v11[5] = a2;
  if ((*(unsigned int (**)(uint64_t, dispatch_data_t, dispatch_data_t, void *))(*(void *)v4 + 16LL))( v4,  v5,  v7,  v11))
  {
    if (*a2 == 1)
    {
      int v8 = 0x100000;
    }

    else
    {
      if (*a2 != 2) {
        goto LABEL_10;
      }
      int v8 = 0x200000;
    }

    *(_DWORD *)(a1[2] + 2392LL) |= v8;
  }

uint64_t sub_2F808(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
  }
  return result;
}

uint64_t sub_2F820(uint64_t a1, const void *a2, size_t size)
{
  uint64_t v21 = malloc_zone_malloc(*(malloc_zone_t **)qword_7C220, size);
  memcpy(v21, a2, size);
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v31 = 0u;
  uint64_t result = sub_2DB90((uint64_t)&v31, (uint64_t)v21, size);
  if ((_DWORD)result)
  {
    __int128 v22 = v31;
    if ((void)v31)
    {
      if (*((void *)&v22 + 1))
      {
        uint64_t v7 = 0LL;
        int v8 = (int *)(v32 + *(unsigned int *)v32);
        uint64_t v9 = (int *)(v35 + *(unsigned int *)v35);
        uint64_t v23 = v8;
        uint64_t v25 = v9;
        if ((void)v34 && *((void *)&v34 + 1)) {
          uint64_t v7 = v34 + *(unsigned int *)v34;
        }
        uint64_t v10 = 0LL;
        uint64_t v26 = v7;
        if ((void)v38 && *((void *)&v38 + 1)) {
          uint64_t v10 = v38 + *(unsigned int *)v38;
        }
        uint64_t v11 = 0LL;
        uint64_t v29 = v10;
        if ((void)v37 && *((void *)&v37 + 1)) {
          uint64_t v11 = v37 + *(unsigned int *)v37;
        }
        uint64_t v28 = v11;
        __int128 v24 = v33;
        __int128 v27 = v36;
        __int128 v30 = v39;
        uint64_t v12 = operator new(0x58uLL);
        v13.n128_f64[0] = sub_654A8((uint64_t)v12, (uint64_t)&v21);
        *uint64_t v14 = &off_7A180;
        uint64_t v15 = (unsigned __int16 *)((char *)v9 - *v9);
        if (*v15 < 0xBu)
        {
          uint64_t v16 = 0LL;
        }

        else
        {
          uint64_t v16 = v15[5];
          if (v16) {
            v16 += (uint64_t)v9 + *(unsigned int *)((char *)v9 + v16);
          }
        }

        v12[9] = v16;
        uint64_t v17 = (unsigned __int16 *)((char *)v8 - *v8);
        if (*v17 < 0xBu)
        {
          uint64_t v18 = 0LL;
        }

        else
        {
          uint64_t v18 = v17[5];
          if (v18) {
            v18 += (uint64_t)v8 + *(unsigned int *)((char *)v8 + v18);
          }
        }

        v12[10] = v18;
        v12[8] = off_7C238(v13);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v12;
        uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16LL))(v19);
        if ((result & 1) == 0)
        {
          uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 8LL);
          uint64_t result = *(void *)(v20 + 24);
          if (result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
            uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 8LL);
          }

          *(void *)(v20 + 24) = 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t sub_2FA88(void *a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1[1] + 8LL) + 816LL);
  dispatch_data_t v5 = dispatch_data_create(a2 + 2, 4LL * a2[1], 0LL, 0LL);
  uint64_t v6 = (unsigned int *)a1[4];
  if (v6) {
    dispatch_data_t v7 = dispatch_data_create(v6 + 1, *v6, 0LL, 0LL);
  }
  else {
    dispatch_data_t v7 = 0LL;
  }
  uint64_t v12 = 0LL;
  __n128 v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  uint64_t v15 = 0LL;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000LL;
  v11[2] = sub_2FBEC;
  v11[3] = &unk_79358;
  v11[4] = &v12;
  v11[5] = a2;
  if ((*(unsigned int (**)(uint64_t, dispatch_data_t, dispatch_data_t, void *))(*(void *)v4 + 16LL))( v4,  v5,  v7,  v11))
  {
    if (*a2 == 1)
    {
      int v8 = 0x100000;
    }

    else
    {
      if (*a2 != 2) {
        goto LABEL_10;
      }
      int v8 = 0x200000;
    }

    *(_DWORD *)(a1[2] + 2392LL) |= v8;
  }

uint64_t sub_2FBD4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
  }
  return result;
}

uint64_t sub_2FBEC(uint64_t a1, const void *a2, size_t size)
{
  int v61 = malloc_zone_malloc(*(malloc_zone_t **)qword_7C220, size);
  memcpy(v61, a2, size);
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  __int128 v76 = 0u;
  __int128 v77 = 0u;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  __int128 v71 = 0u;
  uint64_t result = sub_2DB90((uint64_t)&v71, (uint64_t)v61, size);
  if ((_DWORD)result)
  {
    __int128 v62 = v71;
    if ((void)v71)
    {
      if (*((void *)&v62 + 1))
      {
        uint64_t v7 = 0LL;
        uint64_t v63 = v72 + *(unsigned int *)v72;
        uint64_t v65 = v75 + *(unsigned int *)v75;
        if ((void)v74 && *((void *)&v74 + 1)) {
          uint64_t v7 = v74 + *(unsigned int *)v74;
        }
        uint64_t v8 = 0LL;
        uint64_t v66 = v7;
        if ((void)v78 && *((void *)&v78 + 1)) {
          uint64_t v8 = v78 + *(unsigned int *)v78;
        }
        uint64_t v9 = 0LL;
        uint64_t v69 = v8;
        if ((void)v77 && *((void *)&v77 + 1)) {
          uint64_t v9 = v77 + *(unsigned int *)v77;
        }
        uint64_t v68 = v9;
        __int128 v64 = v73;
        __int128 v67 = v76;
        __int128 v70 = v79;
        uint64_t v10 = operator new(0xE0uLL);
        uint64_t v11 = *(void *)(a1 + 40);
        uint64_t v12 = sub_66FD8((uint64_t)v10, (uint64_t)&v61);
        *(_OWORD *)(v12 + 156) = 0u;
        uint64_t v13 = v12 + 156;
        *(_OWORD *)(v12 + 188) = 0u;
        uint64_t v14 = v12 + 188;
        *(void *)uint64_t v12 = off_7A150;
        *(_OWORD *)(v12 + 172) = 0u;
        *(_OWORD *)(v12 + 204) = 0u;
        *(_DWORD *)(v12 + 144) = *(_DWORD *)v11;
        uint64_t v15 = *(int **)(v12 + 80);
        uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v16 >= 9u && (uint64_t v17 = v16[4]) != 0) {
          uint64_t v18 = (char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17);
        }
        else {
          uint64_t v18 = 0LL;
        }
        *((void *)v10 + 17) = off_7C258(v18);
        if ((*(_BYTE *)(*(void *)(v11 + 72) + 33LL) & 0xE) != 0) {
          *((_DWORD *)v10 + 14) = 2;
        }
        uint64_t v19 = (int *)*((void *)v10 + 10);
        uint64_t v20 = *(unsigned __int16 *)((char *)v19 - *v19 + 8);
        uint64_t v21 = *(unsigned int *)((char *)v19 + v20);
        __int128 v22 = (unsigned int *)((char *)v19 + v20 + v21);
        uint64_t v23 = *v22;
        if ((_DWORD)v23)
        {
          unint64_t v24 = 0LL;
          uint64_t v25 = 4 * v23;
          uint64_t v26 = (char *)v19 + v20 + v21;
          do
          {
            uint64_t v27 = *(unsigned int *)&v26[v24 + 4];
            uint64_t v28 = &v26[v24 + v27 - *(int *)((char *)&v22[v24 / 4 + 1] + v27)];
            if (*((unsigned __int16 *)v28 + 2) >= 5u)
            {
              uint64_t v29 = *((unsigned __int16 *)v28 + 4);
              if (v29)
              {
                if (v26[v24 + 4 + v27 + v29] == 6) {
                  *((_BYTE *)v10 + 52) = 1;
                }
              }
            }

            v24 += 4LL;
          }

          while (v25 != v24);
        }

        __int128 v30 = (int *)*((void *)v10 + 5);
        __int128 v31 = (unsigned __int16 *)((char *)v30 - *v30);
        if (*v31 >= 0x11u && (uint64_t v32 = v31[8]) != 0) {
          __int128 v33 = (unsigned int *)((char *)v30 + v32 + *(unsigned int *)((char *)v30 + v32));
        }
        else {
          __int128 v33 = 0LL;
        }
        sub_66140(v33, v13);
        __int128 v34 = (int *)*((void *)v10 + 5);
        __int128 v35 = (unsigned __int16 *)((char *)v34 - *v34);
        if (*v35 >= 0x15u && (uint64_t v36 = v35[10]) != 0) {
          __int128 v37 = (unsigned int *)((char *)v34 + v36 + *(unsigned int *)((char *)v34 + v36));
        }
        else {
          __int128 v37 = 0LL;
        }
        sub_66140(v37, v14);
        __int128 v38 = (int *)*((void *)v10 + 5);
        __int128 v39 = (unsigned __int16 *)((char *)v38 - *v38);
        uint64_t v40 = v39[7];
        if (v39[7]) {
          LODWORD(v40) = *(int *)((char *)v38 + v40);
        }
        uint64_t v41 = v39[9];
        if (v39[9]) {
          LODWORD(v41) = *(int *)((char *)v38 + v41);
        }
        uint64_t v42 = *(unsigned int *)((char *)v38 + v39[12] + *(unsigned int *)((char *)v38 + v39[12]));
        if ((_DWORD)v42)
        {
          uint64_t v43 = 0LL;
          unsigned int v44 = (v41 + v40) >> 2;
          while (1)
          {
            uint64_t v45 = (unsigned __int16 *)((char *)v38 - *v38);
            if (*v45 < 0x19u)
            {
              uint64_t v46 = 0LL;
            }

            else
            {
              uint64_t v46 = v45[12];
              if (v46) {
                v46 += (uint64_t)v38 + *(unsigned int *)((char *)v38 + v46);
              }
            }

            uint64_t v47 = *(unsigned int *)(v46 + v43 + 4);
            uint64_t v48 = v46 + v43 + v47;
            uint64_t v49 = v47 - *(int *)(v48 + 4);
            uint64_t v50 = v46 + v43 + v49;
            unsigned int v51 = *(unsigned __int16 *)(v50 + 4);
            if (v51 < 5) {
              goto LABEL_61;
            }
            uint64_t v52 = *(unsigned __int16 *)(v50 + 8);
            if (!v52 || *(_BYTE *)(v46 + v43 + v52 + v47 + 4) != 4) {
              goto LABEL_61;
            }
            if (v51 >= 9) {
              break;
            }
            unsigned int v54 = v44;
            if (v51 >= 7) {
              goto LABEL_54;
            }
            uint64_t v55 = 0LL;
            unsigned int v54 = v44;
LABEL_56:
            *((_DWORD *)v10 + v55 + 23) = v54;
            uint64_t v56 = v46 + v43 + v47 - *(int *)(v48 + 4);
            else {
              LOBYTE(v58) = 0;
            }
            *((_DWORD *)v10 + 31) |= 1 << v58;
LABEL_61:
            v43 += 4LL;
            if (4 * v42 == v43) {
              goto LABEL_62;
            }
          }

          if (*(_WORD *)(v46 + v43 + v49 + 12)) {
            int v53 = *(_DWORD *)(v46 + v43 + *(unsigned __int16 *)(v46 + v43 + v49 + 12) + v47 + 4);
          }
          else {
            int v53 = 0;
          }
          unsigned int v54 = v53 + v44;
LABEL_54:
          uint64_t v55 = *(unsigned __int16 *)(v46 + v43 + v49 + 10);
          if (v55) {
            uint64_t v55 = *(unsigned int *)(v46 + v43 + v55 + v47 + 4);
          }
          goto LABEL_56;
        }

LABEL_62:
        sub_6682C( *(void *)(v11 + 72),  *((int **)v10 + 9),  *((int **)v10 + 10),  (int *)v10 + 38,  (_DWORD *)v10 + 37,  (BOOL *)&v71);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v10;
        uint64_t v59 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 16LL))(v59);
        if ((result & 1) == 0)
        {
          uint64_t v60 = *(void *)(*(void *)(a1 + 32) + 8LL);
          uint64_t result = *(void *)(v60 + 24);
          if (result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
            uint64_t v60 = *(void *)(*(void *)(a1 + 32) + 8LL);
          }

          *(void *)(v60 + 24) = 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t sub_300CC(void *a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1[1] + 8LL) + 816LL);
  dispatch_data_t v5 = dispatch_data_create(a2 + 2, 4LL * a2[1], 0LL, 0LL);
  uint64_t v6 = (unsigned int *)a1[4];
  if (v6) {
    dispatch_data_t v7 = dispatch_data_create(v6 + 1, *v6, 0LL, 0LL);
  }
  else {
    dispatch_data_t v7 = 0LL;
  }
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  uint64_t v15 = 0LL;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000LL;
  v11[2] = sub_30230;
  v11[3] = &unk_793B0;
  v11[4] = &v12;
  v11[5] = a2;
  if ((*(unsigned int (**)(uint64_t, dispatch_data_t, dispatch_data_t, void *))(*(void *)v4 + 16LL))( v4,  v5,  v7,  v11))
  {
    if (*a2 == 1)
    {
      int v8 = 0x100000;
    }

    else
    {
      if (*a2 != 2) {
        goto LABEL_10;
      }
      int v8 = 0x200000;
    }

    *(_DWORD *)(a1[2] + 2392LL) |= v8;
  }

uint64_t sub_30218(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
  }
  return result;
}

uint64_t sub_30230(uint64_t a1, const void *a2, size_t size)
{
  uint64_t v41 = malloc_zone_malloc(*(malloc_zone_t **)qword_7C220, size);
  memcpy(v41, a2, size);
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v51 = 0u;
  uint64_t result = sub_2DB90((uint64_t)&v51, (uint64_t)v41, size);
  if (!(_DWORD)result) {
    return result;
  }
  __int128 v42 = v51;
  if (!(void)v51 || !*((void *)&v42 + 1)) {
    return result;
  }
  uint64_t v7 = 0LL;
  uint64_t v43 = v52 + *(unsigned int *)v52;
  uint64_t v45 = v55 + *(unsigned int *)v55;
  if ((void)v54 && *((void *)&v54 + 1)) {
    uint64_t v7 = v54 + *(unsigned int *)v54;
  }
  uint64_t v8 = 0LL;
  uint64_t v46 = v7;
  if ((void)v58 && *((void *)&v58 + 1)) {
    uint64_t v8 = v58 + *(unsigned int *)v58;
  }
  uint64_t v9 = 0LL;
  uint64_t v49 = v8;
  if ((void)v57 && *((void *)&v57 + 1)) {
    uint64_t v9 = v57 + *(unsigned int *)v57;
  }
  uint64_t v48 = v9;
  __int128 v44 = v53;
  __int128 v47 = v56;
  __int128 v50 = v59;
  uint64_t v10 = operator new(0x90uLL);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = (void *)sub_66FD8((uint64_t)v10, (uint64_t)&v41);
  *uint64_t v12 = &off_7A0F0;
  uint64_t v13 = (int *)v12[5];
  uint64_t v14 = *v13;
  uint64_t v15 = (unsigned int *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - v14 + 24));
  uint64_t v16 = *(unsigned int *)((char *)v15 + *v15);
  if (!(_DWORD)v16)
  {
    unsigned int v35 = *(unsigned __int16 *)((char *)v13 - v14);
    __int128 v34 = (unsigned __int16 *)((char *)v13 - v14);
    goto LABEL_45;
  }

  uint64_t v17 = 0LL;
  do
  {
    uint64_t v18 = (unsigned __int16 *)((char *)v13 - *v13);
    if (*v18 < 0x19u)
    {
      uint64_t v19 = 0LL;
    }

    else
    {
      uint64_t v19 = v18[12];
      if (v19) {
        v19 += (uint64_t)v13 + *(unsigned int *)((char *)v13 + v19);
      }
    }

    uint64_t v20 = *(unsigned int *)(v19 + v17 + 4);
    uint64_t v21 = v19 + v17 + v20;
    uint64_t v22 = v20 - *(int *)(v21 + 4);
    uint64_t v23 = v19 + v17 + v22;
    unsigned int v24 = *(unsigned __int16 *)(v23 + 4);
    if (v24 >= 5)
    {
      uint64_t v25 = *(unsigned __int16 *)(v23 + 8);
      if (v25)
      {
        int v26 = *(unsigned __int8 *)(v19 + v17 + v25 + v20 + 4);
        if (v26 != 4)
        {
          if (v26 == 26)
          {
            if (v24 >= 9 && (uint64_t v27 = v19 + v17, *(_WORD *)(v27 + v22 + 12))) {
              int v28 = *(_DWORD *)(v27 + *(unsigned __int16 *)(v27 + v22 + 12) + v20 + 4);
            }
            else {
              int v28 = 0;
            }
            *((_DWORD *)v10 + 33) = v28;
          }

          goto LABEL_41;
        }

        if (v24 < 9)
        {
          int v29 = 0;
          if (v24 < 7)
          {
            uint64_t v30 = 0LL;
LABEL_36:
            *((_DWORD *)v10 + v30 + 23) = v29;
            uint64_t v31 = v19 + v17 + v20 - *(int *)(v21 + 4);
            else {
              LOBYTE(v33) = 0;
            }
            *((_DWORD *)v10 + 31) |= 1 << v33;
            goto LABEL_41;
          }
        }

        else if (*(_WORD *)(v19 + v17 + v22 + 12))
        {
          int v29 = *(_DWORD *)(v19 + v17 + *(unsigned __int16 *)(v19 + v17 + v22 + 12) + v20 + 4);
        }

        else
        {
          int v29 = 0;
        }

        uint64_t v30 = *(unsigned __int16 *)(v19 + v17 + v22 + 10);
        if (v30) {
          uint64_t v30 = *(unsigned int *)(v19 + v17 + v30 + v20 + 4);
        }
        goto LABEL_36;
      }
    }

uint64_t sub_305FC(void *a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1[1] + 8LL) + 816LL);
  dispatch_data_t v5 = dispatch_data_create(a2 + 2, 4LL * a2[1], 0LL, 0LL);
  uint64_t v6 = (unsigned int *)a1[4];
  if (v6) {
    dispatch_data_t v7 = dispatch_data_create(v6 + 1, *v6, 0LL, 0LL);
  }
  else {
    dispatch_data_t v7 = 0LL;
  }
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  uint64_t v15 = 0LL;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000LL;
  v11[2] = sub_30760;
  v11[3] = &unk_79408;
  v11[4] = &v12;
  v11[5] = a2;
  if ((*(unsigned int (**)(uint64_t, dispatch_data_t, dispatch_data_t, void *))(*(void *)v4 + 16LL))( v4,  v5,  v7,  v11))
  {
    if (*a2 == 1)
    {
      int v8 = 0x100000;
    }

    else
    {
      if (*a2 != 2) {
        goto LABEL_10;
      }
      int v8 = 0x200000;
    }

    *(_DWORD *)(a1[2] + 2392LL) |= v8;
  }

uint64_t sub_30748(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
  }
  return result;
}

uint64_t sub_30760(uint64_t a1, const void *a2, size_t size)
{
  uint64_t v14 = malloc_zone_malloc(*(malloc_zone_t **)qword_7C220, size);
  memcpy(v14, a2, size);
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v24 = 0u;
  uint64_t result = sub_2DB90((uint64_t)&v24, (uint64_t)v14, size);
  if ((_DWORD)result)
  {
    __int128 v15 = v24;
    if ((void)v24)
    {
      if (*((void *)&v15 + 1))
      {
        uint64_t v7 = 0LL;
        uint64_t v8 = v28 + *(unsigned int *)v28;
        uint64_t v16 = v25 + *(unsigned int *)v25;
        uint64_t v18 = v8;
        if ((void)v27 && *((void *)&v27 + 1)) {
          uint64_t v7 = v27 + *(unsigned int *)v27;
        }
        uint64_t v9 = 0LL;
        uint64_t v19 = v7;
        if ((void)v31 && *((void *)&v31 + 1)) {
          uint64_t v9 = v31 + *(unsigned int *)v31;
        }
        uint64_t v10 = 0LL;
        uint64_t v22 = v9;
        if ((void)v30 && *((void *)&v30 + 1)) {
          uint64_t v10 = v30 + *(unsigned int *)v30;
        }
        uint64_t v21 = v10;
        __int128 v17 = v26;
        __int128 v20 = v29;
        __int128 v23 = v32;
        uint64_t v11 = operator new(0x58uLL);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = sub_65574(v11, (uint64_t)&v14);
        uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16LL))(v12);
        if ((result & 1) == 0)
        {
          uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8LL);
          uint64_t result = *(void *)(v13 + 24);
          if (result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
            uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8LL);
          }

          *(void *)(v13 + 24) = 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t sub_30908(void *a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1[1] + 8LL) + 816LL);
  dispatch_data_t v5 = dispatch_data_create(a2 + 2, 4LL * a2[1], 0LL, 0LL);
  uint64_t v6 = (unsigned int *)a1[4];
  if (v6) {
    dispatch_data_t v7 = dispatch_data_create(v6 + 1, *v6, 0LL, 0LL);
  }
  else {
    dispatch_data_t v7 = 0LL;
  }
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  uint64_t v15 = 0LL;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000LL;
  v11[2] = sub_30A6C;
  v11[3] = &unk_79460;
  v11[4] = &v12;
  v11[5] = a2;
  if ((*(unsigned int (**)(uint64_t, dispatch_data_t, dispatch_data_t, void *))(*(void *)v4 + 16LL))( v4,  v5,  v7,  v11))
  {
    if (*a2 == 1)
    {
      int v8 = 0x100000;
    }

    else
    {
      if (*a2 != 2) {
        goto LABEL_10;
      }
      int v8 = 0x200000;
    }

    *(_DWORD *)(a1[2] + 2392LL) |= v8;
  }

uint64_t sub_30A54(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
  }
  return result;
}

uint64_t sub_30A6C(uint64_t a1, const void *a2, size_t size)
{
  uint64_t v15 = malloc_zone_malloc(*(malloc_zone_t **)qword_7C220, size);
  memcpy(v15, a2, size);
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v25 = 0u;
  uint64_t result = sub_2DB90((uint64_t)&v25, (uint64_t)v15, size);
  if ((_DWORD)result)
  {
    __int128 v16 = v25;
    if ((void)v25)
    {
      if (*((void *)&v16 + 1))
      {
        uint64_t v7 = 0LL;
        uint64_t v8 = v29 + *(unsigned int *)v29;
        uint64_t v17 = v26 + *(unsigned int *)v26;
        uint64_t v19 = v8;
        if ((void)v28 && *((void *)&v28 + 1)) {
          uint64_t v7 = v28 + *(unsigned int *)v28;
        }
        uint64_t v9 = 0LL;
        uint64_t v20 = v7;
        if ((void)v32 && *((void *)&v32 + 1)) {
          uint64_t v9 = v32 + *(unsigned int *)v32;
        }
        uint64_t v10 = 0LL;
        uint64_t v23 = v9;
        if ((void)v31 && *((void *)&v31 + 1)) {
          uint64_t v10 = v31 + *(unsigned int *)v31;
        }
        uint64_t v22 = v10;
        __int128 v18 = v27;
        __int128 v21 = v30;
        __int128 v24 = v33;
        uint64_t v11 = operator new(0x58uLL);
        uint64_t v12 = sub_65574(v11, (uint64_t)&v15);
        *uint64_t v12 = &off_7A120;
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v12;
        uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16LL))(v13);
        if ((result & 1) == 0)
        {
          uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8LL);
          uint64_t result = *(void *)(v14 + 24);
          if (result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
            uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8LL);
          }

          *(void *)(v14 + 24) = 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t sub_30C18(_DWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 24);
  int v7 = *a3;
  int v6 = a3[1];
  int v19 = *(_DWORD *)(a2 + 2980);
  uint64_t v8 = *(unsigned int *)(a2 + 2976);
  int v17 = a3[2];
  int v18 = *(_DWORD *)(a2 + 2984);
  uint64_t v9 = *(void *)(a2 + 3504);
  uint64_t v10 = *(void *)(a2 + 3512);
  if (a3[3] < 0)
  {
    (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 24LL))(a1, v5);
    if (v6 < 0)
    {
LABEL_7:
      (**(void (***)(_DWORD *, uint64_t))a1)(a1, a2);
      goto LABEL_8;
    }
  }

  else if (v6 < 0)
  {
    goto LABEL_7;
  }

  if ((v8 & 1) != 0 && (v19 & 0x20) != 0) {
    goto LABEL_7;
  }
LABEL_8:
  if ((v7 & 0x4000) != 0) {
    (*(void (**)(_DWORD *, void, uint64_t))(*(void *)a1 + 16LL))(a1, *(void *)(a2 + 48), v5);
  }
  if ((v7 & 0x800000) != 0)
  {
    (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 40LL))(a1, v5);
    if (*(_BYTE *)(v5 + 13262)) {
      uint64_t v11 = 4LL * (*(_WORD *)(v5 + 13258) != 1032);
    }
    else {
      uint64_t v11 = 0LL;
    }
    *(void *)(a2 + 4904) |= v11;
  }

  else if ((v6 & 0x80000000) == 0)
  {
    goto LABEL_25;
  }

  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, *(void *)(a2 + 48), v5, v8);
  if ((v8 & 0x70) != 0 && *(_BYTE *)(v5 + 13265)
    || (v8 & 1) != 0 && *(_BYTE *)(v5 + 13263)
    || (uint64_t v12 = 0LL, (v8 & 0xE) != 0) && *(_BYTE *)(v5 + 13264))
  {
    uint64_t v12 = 32LL;
  }

  *(void *)(a2 + 4904) |= v12;
LABEL_25:
  if (v9 && v10 && v7 & 0x8000000 | v19 & 8) {
    (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 56LL))(a1, v5, v9, v10);
  }
  if ((v17 & 1) != 0)
  {
    (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 64LL))(a1, v5, a2 + 104);
  }

  else if ((v18 & 0x10) == 0)
  {
    goto LABEL_37;
  }

  __int128 v20 = *(_OWORD *)(v5 + 7024);
  sub_30FC8((uint64_t)a1, v5 + 13268, (uint64_t)&v20, a2 + 104);
  if (*(_BYTE *)(*(void *)(a2 + 24) + 13284LL)) {
    unint64_t v13 = (unint64_t)(*(_BYTE *)(a2 + 3976) == 0) << 10;
  }
  else {
    unint64_t v13 = 0LL;
  }
  *(void *)(a2 + 4904) |= v13;
LABEL_37:
  if (v6 < 0 || (v18 & 8) != 0 || (v7 & 0x10800000) != 0)
  {
    (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, v5, v8, a2 + 2936);
    if (*(_DWORD *)(*(void *)(a2 + 24) + 13372LL)) {
      uint64_t v14 = (4 * a1[8]) & 0x800LL;
    }
    else {
      uint64_t v14 = 0LL;
    }
    *(void *)(a2 + 4904) |= v14;
  }

  if (v7 & 0x200 | v18 & 4)
  {
    (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 72LL))(a1, v5, a2 + 2936);
    if (*(_BYTE *)(*(void *)(a2 + 24) + 12932LL)) {
      unint64_t v15 = ((unint64_t)a1[8] >> 5) & 8;
    }
    else {
      unint64_t v15 = 0LL;
    }
    *(void *)(a2 + 4904) |= v15;
  }

  if ((v6 & 0x800000) != 0) {
    (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 80LL))(a1, a2);
  }
  if (((v19 & 0x20) != 0 || v6 < 0) && v10) {
    (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, v10, v8, a2 + 2936);
  }
  *(void *)(a2 + 4904) |= 16LL * (*(_BYTE *)(*(void *)(a2 + 24) + 12952LL) != 0);
  (*(void (**)(_DWORD *))(*(void *)a1 + 96LL))(a1);
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 112LL))(a1);
  if ((_DWORD)result) {
    *(_DWORD *)(a2 + 2996) |= 0x400u;
  }
  return result;
}

uint64_t sub_30FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 8LL))(a1, a4);
}

unint64_t sub_310CC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v5 = 4LL * *(unsigned __int8 *)(*(void *)(a1 + 4000) + 2LL);
  (*(void (**)(void))(**(void **)(a1 + 2536) + 168LL))(*(void *)(a1 + 2536));
  if (12 * ((*a3 + 11) / 0xCu) <= 0xC) {
    unsigned int v6 = 12;
  }
  else {
    unsigned int v6 = 12 * ((*a3 + 11) / 0xCu);
  }
  while (1)
  {
    if (!*(void *)(a1 + 2688)) {
      sub_26DA0(a1, 0);
    }
    if (sub_24974(a1) && (sub_25CF4((void *)a1, v5, 0xCu, v6, &v8, v10) & 1) != 0)
    {
      (*(void (**)(void, unint64_t))(**(void **)(a1 + 2536) + 176LL))( *(void *)(a1 + 2536),  v10[1]);
      if ((*(unsigned int (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 3960) + 24LL))( *(void *)(a1 + 3960),  a1,  5375LL))
      {
        *(_DWORD *)(a1 + 2996) |= 0x20u;
      }

      if ((*(unsigned int (**)(void))(**(void **)(a1 + 2536) + 80LL))(*(void *)(a1 + 2536))
        && (sub_25F38(a1, 12LL, &v9) & 1) != 0)
      {
        break;
      }
    }

    sub_260F0(a1);
  }

  *(void *)(a1 + 2952) = v9;
  (*(void (**)(void))(**(void **)(a1 + 3960) + 56LL))(*(void *)(a1 + 3960));
  *a3 = 12 * (v8 / 0xC);
  return v10[0];
}

uint64_t sub_31240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t result = sub_3F88(a1);
  if ((_DWORD)result
    || ((*(_BYTE *)(a1 + 2976) & 0x70) == 0 || !*(_BYTE *)(v7 + 13262)
      ? (BOOL v11 = 0)
      : (BOOL v11 = *(unsigned __int16 *)(v7 + 13258) == 1032),
        !(v11 | *(unsigned __int8 *)(v7 + 15712))))
  {
    if (sub_3F88(a1))
    {
      uint64_t v9 = *(void *)(a1 + 3952);
      unsigned int v10 = a4;
      if ((_DWORD)a3)
      {
        if ((_DWORD)a3 == 4)
        {
          unsigned int v10 = a4 / 3;
        }

        else if ((_DWORD)a3 == 1)
        {
          unsigned int v10 = a4 >> 1;
        }

        else
        {
          unsigned int v10 = 0;
        }
      }

      *(void *)(*(void *)(v9 + 8) + 24LL) = v10 + *(_DWORD *)(*(void *)(v9 + 8) + 24LL);
      uint64_t v12 = *(unsigned int *)(v9 + 16);
      if ((_DWORD)v12 != -1) {
        *(_DWORD *)(*(void *)(a1 + 2232) + 16 * v12) += v10;
      }
    }

    uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 3960) + 88LL))(*(void *)(a1 + 3960), a3);
    uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void, void))(**(void **)(a1 + 3960)
                                                                                         + 96LL))( *(void *)(a1 + 3960),  *(void *)(a1 + 2952),  v13,  a4,  0LL,  0LL);
    *(_BYTE *)(a1 + 2552) = 1;
    *(void *)(a1 + 2952) = 0LL;
    if (!*(_BYTE *)(a1 + 4899)) {
      *(_DWORD *)(*(void *)(a1 + 2688) + 4LL) = 0;
    }
    *(_BYTE *)(a1 + 3004) = 1;
    *(_DWORD *)(a1 + 2840) = 0;
    *(_DWORD *)(a1 + 2944) |= *(_DWORD *)(a1 + 2940) & *(_DWORD *)(a1 + 2936);
    *(_DWORD *)(a1 + 2392) |= 0x2000000u;
    *(void *)(a1 + 4904) |= 0x2000000uLL;
  }

  else
  {
    *(void *)(a1 + 2952) = 0LL;
  }

  return result;
}

uint64_t sub_313CC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6)
{
  else {
    uint64_t v11 = qword_70D10[(a5 - 5121)];
  }
  uint64_t v12 = 4 * *(unsigned __int8 *)(*(void *)(a1 + 4000) + 2LL) * (uint64_t)(a4 - a3 + 1);
  unint64_t v13 = (v11 * a6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  int v14 = 3;
  while (1)
  {
    while (1)
    {
      if (!*(void *)(a1 + 2688)) {
        sub_26DA0(a1, 0);
      }
      if (sub_24974(a1)) {
        break;
      }
LABEL_14:
      sub_260F0(a1);
    }

    sub_260F0(a1);
    if (!--v14) {
      return 0LL;
    }
  }

  (*(void (**)(void, uint64_t))(**(void **)(a1 + 2536) + 176LL))(*(void *)(a1 + 2536), v20[1]);
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 3960) + 24LL))( *(void *)(a1 + 3960),  a1,  a5))
  {
    *(_DWORD *)(a1 + 2996) |= 0x20u;
  }

  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 2536) + 80LL))(*(void *)(a1 + 2536))
    || (sub_25F38(a1, 20LL, &v18) & 1) == 0)
  {
    goto LABEL_14;
  }

  *(void *)(a1 + 2952) = v18;
  uint64_t v17 = v19[1];
  *(void *)(a1 + 2960) = v19[0];
  *(void *)(a1 + 2968) = v17;
  uint64_t v15 = v20[0];
  (*(void (**)(void))(**(void **)(a1 + 3960) + 56LL))(*(void *)(a1 + 3960));
  return v15;
}

uint64_t sub_315A0(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, void *__src)
{
  uint64_t v11 = result;
  uint64_t v12 = *(void *)(result + 24);
  unint64_t v13 = (unsigned __int8 *)(v12 + 15712);
  BOOL v15 = (*(_BYTE *)(result + 2976) & 0x70) != 0
  if (v15 | *v13)
  {
    *(void *)(result + 2968) = 0LL;
    *(_OWORD *)(result + 2952) = 0u;
  }

  else
  {
    else {
      uint64_t v16 = qword_70D10[(a5 - 5121)];
    }
    memcpy(*(void **)(result + 2960), __src, v16 * (int)a6);
    uint64_t v17 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v11 + 3960) + 88LL))(*(void *)(v11 + 3960), a2);
    uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void, uint64_t, void, uint64_t))(**(void **)(v11 + 3960) + 104LL))( *(void *)(v11 + 3960),  *(void *)(v11 + 2952),  v17,  a6,  *(void *)(v11 + 2968),  1LL,  -a3,  a5);
    *(_BYTE *)(v11 + 2552) = 1;
    *(void *)(v11 + 2952) = 0LL;
    *(void *)(v11 + 2968) = 0LL;
    *(void *)(v11 + 2960) = 0LL;
    if (!*(_BYTE *)(v11 + 4899)) {
      *(_DWORD *)(*(void *)(v11 + 2688) + 4LL) = 0;
    }
    *(_BYTE *)(v11 + 3004) = 1;
    *(_DWORD *)(v11 + 2840) = 0;
    *(_DWORD *)(v11 + 2944) |= *(_DWORD *)(v11 + 2940) & *(_DWORD *)(v11 + 2936);
    *(_DWORD *)(v11 + 2392) |= 0x2000000u;
    *(void *)(v11 + 4904) |= 0x2000000uLL;
  }

  return result;
}

uint64_t sub_31718( uint64_t a1, int a2, _DWORD *a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, int a8, int a9, unsigned __int8 a10, char a11, unsigned int a12)
{
  if (a2)
  {
    *(int8x16_t *)*(void *)(a1 + 24) = vorrq_s8(*(int8x16_t *)*(void *)(a1 + 24), (int8x16_t)xmmword_70310);
    return (*(uint64_t (**)(uint64_t, void, _DWORD *))(*(void *)a1 + 32LL))(a1, a12, a3);
  }

  uint64_t v18 = *(unint64_t **)(a1 + 24);
  unint64_t v19 = *v18 | ((unint64_t)a3[33] << 50);
  *uint64_t v18 = v19;
  int v20 = a3[36];
  if (v20 > 181839)
  {
    int v21 = a9;
    if (v20 > 182919)
    {
      int v22 = a10;
      if (v20 > 183071)
      {
        if (v20 == 183072)
        {
          uint64_t v23 = 2524971008LL;
        }

        else
        {
          if (v20 != 183076) {
            goto LABEL_43;
          }
          uint64_t v23 = 2530213888LL;
        }
      }

      else if (v20 == 182920)
      {
        uint64_t v23 = 2290089984LL;
      }

      else
      {
        if (v20 != 183048) {
          goto LABEL_43;
        }
        uint64_t v23 = 2491416576LL;
      }
    }

    else
    {
      int v22 = a10;
      if (v20 > 182783)
      {
        if (v20 == 182784)
        {
          uint64_t v23 = 0x80000000LL;
        }

        else
        {
          if (v20 != 182794) {
            goto LABEL_43;
          }
          uint64_t v23 = 2157969408LL;
        }
      }

      else if (v20 == 181840)
      {
        uint64_t v23 = 1694498816LL;
      }

      else
      {
        if (v20 != 181896) {
          goto LABEL_43;
        }
        uint64_t v23 = 1753219072LL;
      }
    }
  }

  else
  {
    int v21 = a9;
    if (v20 > 180735)
    {
      int v22 = a10;
      if (v20 > 181314)
      {
        if (v20 == 181315)
        {
          uint64_t v23 = 1143996416LL;
        }

        else
        {
          if (v20 != 181770) {
            goto LABEL_43;
          }
          uint64_t v23 = 1621098496LL;
        }
      }

      else if (v20 == 180736)
      {
        uint64_t v23 = 0x20000000LL;
      }

      else
      {
        if (v20 != 181024) {
          goto LABEL_43;
        }
        uint64_t v23 = 542113792LL;
      }
    }

    else
    {
      int v22 = a10;
      if (v20 > 180432)
      {
        if (v20 == 180433)
        {
          uint64_t v23 = 219152384LL;
        }

        else
        {
          if (v20 != 180516) {
            goto LABEL_43;
          }
          uint64_t v23 = 382730240LL;
        }
      }

      else if (v20 == 180307)
      {
        uint64_t v23 = 87031808LL;
      }

      else
      {
        if (v20 != 180426) {
          goto LABEL_43;
        }
        uint64_t v23 = 211812352LL;
      }
    }
  }

  v19 |= v23;
  *uint64_t v18 = v19;
LABEL_43:
  int v24 = a3[34];
  if ((v24 - 3) < 7)
  {
    v19 |= 0x100000000uLL;
LABEL_45:
    *uint64_t v18 = v19;
    goto LABEL_50;
  }

  if ((v24 - 1) >= 2)
  {
    if (v24 == 10)
    {
      v19 |= 0x200000000uLL;
      goto LABEL_45;
    }

    printf("Layout: %x unsupported", a3[34]);
    putchar(10);
    uint64_t v18 = *(unint64_t **)(a1 + 24);
    unint64_t v19 = *v18;
  }

LABEL_50:
  uint64_t v25 = v19 | 0x200000000000000LL;
  if (a11 && !a3[47] && (unsigned int v46 = a3[24], v46 <= 0x14) && ((1 << v46) & 0x100070) != 0) {
    uint64_t v26 = 0x400000000000000LL;
  }
  else {
    uint64_t v26 = 0LL;
  }
  *uint64_t v18 = v26 | v25;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a1 + 48LL))(a1, a3);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a1 + 56LL))(a1, a3);
  if (v22) {
    uint64_t v27 = 0x100000000000000LL;
  }
  else {
    uint64_t v27 = 0LL;
  }
  __int128 v28 = *(unint64_t **)(a1 + 24);
  unint64_t v29 = v27 | ((unint64_t)a6 << 6) | *v28;
  unint64_t v30 = ((unint64_t)(a8 - 1) << 32) | (a7 << 46) | (v21 - 1) | v28[1];
  unint64_t *v28 = v29;
  v28[1] = v30;
  int v31 = a3[34];
  if ((v31 - 3) >= 7)
  {
    if (v31 != 10) {
      return (*(uint64_t (**)(uint64_t, void, _DWORD *))(*(void *)a1 + 32LL))(a1, a12, a3);
    }
    unsigned int v36 = 1 << -(char)__clz(a4 - 1);
    if (a4 < 3) {
      unsigned int v36 = 4;
    }
    unsigned int v37 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v37 = 4;
    }
    unsigned int v38 = a3[18];
    unsigned int v39 = 1 << -__clz(v38 - 1);
    if (v38 < 3) {
      unsigned int v39 = 4;
    }
    unsigned int v40 = __clz(v36 - 1);
    if (v36 >= 2) {
      uint64_t v41 = -v40;
    }
    else {
      uint64_t v41 = 0LL;
    }
    unsigned int v42 = 32 - __clz(v37 - 1);
    if (v37 < 2) {
      unsigned int v42 = 0;
    }
    unint64_t v43 = ((unint64_t)v42 << 28) | (v41 << 60);
    unsigned int v44 = 32 - __clz(v39 - 1);
    if (v39 >= 2) {
      uint64_t v45 = v44;
    }
    else {
      uint64_t v45 = 0LL;
    }
    uint64_t v34 = v43 | ((uint64_t)(int)a3[23] << 14) | v30;
    unint64_t *v28 = v29 | (v45 << 52);
  }

  else
  {
    if (a4 < 2) {
      unint64_t v32 = 0LL;
    }
    else {
      unint64_t v32 = (unint64_t)-__clz(~(-1 << -(char)__clz(a4 - 1))) << 60;
    }
    if (a5 < 2) {
      unint64_t v33 = 0LL;
    }
    else {
      unint64_t v33 = (unint64_t)(32 - __clz(~(-1 << -(char)__clz(a5 - 1)))) << 28;
    }
    uint64_t v34 = v32 | v33 | v30;
  }

  v28[1] = v34;
  return (*(uint64_t (**)(uint64_t, void, _DWORD *))(*(void *)a1 + 32LL))(a1, a12, a3);
}

uint64_t sub_31C40(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
}

void sub_31C50(void *a1)
{
  uint64_t v1 = sub_31E54(a1);
  operator delete(v1);
}

void sub_31C64(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD **)(a1 + 16);
  int v7 = v6[1] | *(unsigned __int8 *)(a3 + 4);
  *v6 |= *(_DWORD *)a3 & 0xFFFFFFFC;
  v6[1] = v7;
  unsigned int v8 = *(_DWORD *)(a3 + 188);
  int v9 = v6[2] | (4 * (v8 != 0));
  v6[2] = v9;
  int v10 = v9 | (a2 << 8);
  v6[2] = v10;
  int v11 = v10 | (16 * (*(_DWORD *)(a3 + 120) % *(_DWORD *)(a3 + 124)));
  v6[2] = v11;
  int v12 = v11 | (*(_DWORD *)(a3 + 96) << 16);
  v6[2] = v12;
  if (v8 >= 2 && (*(_DWORD *)(a3 + 192) || *(_DWORD *)(a3 + 96) == 3))
  {
    switch(*(_DWORD *)(a3 + 204))
    {
      case 1:
        BOOL v17 = v8 == 2;
        int v18 = 4096;
        goto LABEL_14;
      case 2:
      case 5:
      case 6:
        BOOL v17 = v8 == 2;
        int v18 = 12288;
LABEL_14:
        if (v17) {
          int v13 = v18;
        }
        else {
          int v13 = 0x4000;
        }
        break;
      case 3:
        int v13 = 4096;
        break;
      case 4:
        int v13 = 12288;
        break;
      default:
        goto LABEL_6;
    }
  }

  else
  {
LABEL_6:
    int v13 = 0;
  }

  int v14 = v13 | v12;
  v6[2] = v14;
  unsigned int v15 = *(_DWORD *)(a3 + 56) - 2;
  if (v15 > 0xE) {
    int v16 = 0;
  }
  else {
    int v16 = dword_70D38[v15];
  }
  v6[2] = v16 | v14;
}

uint64_t sub_31DC8(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 180);
  if (v2) {
    BOOL v3 = *(_DWORD *)(a2 + 188) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    if (v2 == 2)
    {
      uint64_t v4 = *(uint64_t **)(result + 24);
      uint64_t v5 = *v4 | 0x30;
    }

    else
    {
      uint64_t v4 = *(uint64_t **)(result + 24);
      uint64_t v5 = *v4 | 0x10;
    }

    *uint64_t v4 = v5;
  }

  else
  {
    uint64_t v4 = *(uint64_t **)(result + 24);
    uint64_t v5 = *v4;
  }

  *uint64_t v4 = ((*(void *)(a2 + 112) >> *(_BYTE *)(a2 + 196) << 33) - 0x200000000LL) & 0xFFFFFFFC00000000LL | v5;
  return result;
}

uint64_t sub_31E38(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 128)) {
    **(void **)(result + 24) |= 1uLL;
  }
  return result;
}

void *sub_31E54(void *a1)
{
  *a1 = off_79490;
  int v2 = (void *)a1[2];
  if (v2) {
    malloc_zone_free((malloc_zone_t *)qword_7C218, v2);
  }
  BOOL v3 = (void *)a1[3];
  if (v3) {
    malloc_zone_free((malloc_zone_t *)qword_7C218, v3);
  }
  return a1;
}

void *sub_31EA4()
{
  uint64_t v0 = operator new(0x20uLL);
  void *v0 = &off_794E0;
  v0[1] = 0x200000004LL;
  uint64_t v1 = malloc_zone_calloc((malloc_zone_t *)qword_7C218, 2uLL, 8uLL);
  if (!v1 || (v0[3] = v1, (int v2 = malloc_zone_calloc((malloc_zone_t *)qword_7C218, 4uLL, 4uLL)) == 0LL)) {
    abort();
  }
  v0[2] = v2;
  return v0;
}

uint64_t sub_31F1C(uint64_t result, _DWORD *a2, int a3)
{
  BOOL v3 = (void *)result;
  if (a3 == 6)
  {
    *a2 = 1;
    uint64_t v4 = a2[2];
    *(_DWORD *)(*(void *)(result + 3952) + 16LL) = v4;
    *(_DWORD *)(*(void *)(result + 2232) + 16 * v4) = 0;
  }

  else if (!a3)
  {
    *a2 = 0;
    *(_DWORD *)(result + 4464) = a2[2];
    if (*(void *)(result + 2696))
    {
      uint64_t result = sub_6F58C((unsigned int *)(result + 4464), result);
      if ((_DWORD)result)
      {
        *(void *)(v3[337] + 848LL) = *(void *)(v3[563] + 24LL);
      }

      else if (v3[336])
      {
        uint64_t result = sub_26240((uint64_t)v3, v3[496]);
      }
    }
  }

  v3[613] |= 0x1000uLL;
  return result;
}

uint64_t sub_31FC4(uint64_t result, _DWORD *a2, int a3)
{
  if (a3 == 6)
  {
    *a2 = 1;
    BOOL v3 = (_DWORD *)(*(void *)(result + 3952) + 16LL);
  }

  else
  {
    if (a3) {
      return result;
    }
    *a2 = 0;
    BOOL v3 = (_DWORD *)(result + 4464);
  }

  *BOOL v3 = -1;
  return result;
}

uint64_t sub_31FFC(void *a1, _DWORD *a2, uint64_t a3, void *a4)
{
  if (*a2 == 1)
  {
    int v13 = (unsigned int *)(a1[279] + 16LL * a2[2]);
  }

  else
  {
    if (*a2) {
      return 10010LL;
    }
    uint64_t v7 = a2[2];
    uint64_t v8 = a1[279];
    uint64_t v9 = v8 + 16 * v7;
    uint64_t v10 = *(void *)(v9 + 8);
    if (v10)
    {
      sub_6F91C(a1, *(void *)(v9 + 8));
      uint64_t v11 = *(void *)(v10 + 40);
      int v12 = *(void **)(v10 + 48);
      if (v11)
      {
        *(void *)(v11 + 48) = v12;
        int v12 = *(void **)(v10 + 48);
      }

      else
      {
        a1[562] = v12;
      }

      *int v12 = v11;
      uint64_t v15 = a1[559];
      *(void *)(v10 + 40) = v15;
      if (v15) {
        int v16 = (void *)(v15 + 48);
      }
      else {
        int v16 = a1 + 560;
      }
      *int v16 = v10 + 40;
      a1[559] = v10;
      *(void *)(v10 + 48) = a1 + 559;
      uint64_t v8 = a1[279];
      uint64_t v7 = a2[2];
    }

    int v13 = (unsigned int *)(v8 + 16 * v7);
  }

  uint64_t result = 0LL;
  *a4 = *v13;
  return result;
}

uint64_t sub_320D8(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(*(void *)(result + 2232) + 16LL * *(unsigned int *)(a2 + 8)) = a3;
  return result;
}

void sub_320FC(int8x8_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v6 = a5[1];
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v7 = *(void *)(v6 + 72);
  unint64_t v9 = v8 | v7;
  if (!(v8 | v7))
  {
    uint64_t v14 = 0LL;
    unint64_t v17 = 0LL;
    unint64_t v16 = 0LL;
    goto LABEL_39;
  }

  if (dword_7C424)
  {
    unsigned int v12 = *(unsigned __int16 *)(*a5 + 178LL);
    unsigned int v13 = *(unsigned __int16 *)(*a5 + 180LL);
    if (*(_DWORD *)(a3 + 4680) || *(_DWORD *)(a3 + 4684))
    {
      if (v12 <= 0x20) {
        unsigned int v12 = 32;
      }
      if (v13 <= 0x20) {
        unsigned int v13 = 32;
      }
    }

    uint64_t v14 = 139264LL;
    if (*(unsigned __int8 *)(**(void **)(a3 + 48) + 182LL) > 1u || v7 != 0)
    {
      unsigned int v12 = (v12 + 31) & 0x1FFE0;
      unsigned int v13 = (v13 + 31) & 0x1FFE0;
    }

    unint64_t v16 = (v12 - 1) | ((unint64_t)(v13 - 1) << 15);
  }

  else
  {
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    if (*(_DWORD *)(a3 + 4680) || *(_DWORD *)(a3 + 4684))
    {
      uint64_t v18 = (*(_DWORD *)(a5[4] + 32LL) >> 8) & 0xF;
      unsigned int v19 = *(_DWORD *)(a3 + 4688);
      unsigned int v20 = *(_DWORD *)(a3 + 4692);
    }

    else
    {
      uint64_t v18 = (*(_DWORD *)(a5[4] + 32LL) >> 8) & 0xF;
      unsigned int v19 = *(unsigned __int16 *)(*a5 + 178LL);
      unsigned int v20 = *(unsigned __int16 *)(*a5 + 180LL);
    }

    sub_1F164(v18, v19, v20, &v31, &v30, a1);
    unint64_t v16 = 0LL;
    uint64_t v14 = (8 * v31 - 8) | ((v30 << 27) - 0x8000000) | 0x22000;
  }

  if (v8)
  {
    if (*(_DWORD *)(a3 + 4680)) {
      uint64_t GPUVirtualAddress = IOAccelResourceGetGPUVirtualAddress(*(void *)(a3 + 4528));
    }
    else {
      uint64_t GPUVirtualAddress = sub_180B0( v8,  *(_DWORD *)(*a5 + 136LL),  *(_DWORD *)(*a5 + 132LL),  *(_DWORD *)(*a5 + 140LL),  0,  0,  0);
    }
    unint64_t v17 = GPUVirtualAddress & 0xFFFFFFFFFFFFFFF0LL;
    xmmword_7C350(*(unsigned __int16 *)(*(void *)v8 + 192LL));
    unsigned int v22 = *(_DWORD *)(*(void *)(v8 + 392) + 92LL) - 1;
    unint64_t v23 = v17;
    if (v22 <= 2) {
      unint64_t v23 = qword_70E08[v22];
    }
    uint64_t v14 = v14 & 0xFFFFFFFFF87FFFFFLL | (v23 << 23) | (v23 << 25) | (*((_DWORD *)a5 + 115) != 0);
    if (v7) {
      goto LABEL_29;
    }
LABEL_24:
    unint64_t v9 = 0LL;
    goto LABEL_39;
  }

  unint64_t v17 = 0LL;
  if (!v7) {
    goto LABEL_24;
  }
LABEL_29:
  uint64_t v24 = *a5;
  unsigned int v25 = xmmword_7C350(*(unsigned __int16 *)(*(void *)v7 + 192LL));
  if (v8) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 1LL;
  }
  if (*(_DWORD *)(a3 + 4684))
  {
    uint64_t v27 = IOAccelResourceGetGPUVirtualAddress(*(void *)(a3 + 4568));
  }

  else
  {
    if ((xmmword_7C350(*(unsigned __int16 *)(*(void *)v7 + 192LL)) & 1) != 0)
    {
      uint64_t v28 = v7;
      unsigned int v29 = 1;
    }

    else
    {
      uint64_t v28 = v7;
      unsigned int v29 = 0;
    }

    uint64_t v27 = sub_180B0(v28, *(_DWORD *)(v24 + 152), *(_DWORD *)(v24 + 148), *(_DWORD *)(v24 + 156), v29, 0, 0);
  }

  unint64_t v9 = v27 & 0xFFFFFFFFFFFFFFF0LL | v26;
LABEL_39:
  a4[27] = v14;
  a4[28] = v16;
  a4[29] = v17;
  a4[33] = v17;
  a4[37] = v9;
  a4[41] = v9;
  a4[93] = v17;
  a4[95] = v9;
}

void sub_32394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  *(void *)(a3 + 216) = a5 | (unint64_t)(a4 << 58) | *(void *)(a3 + 216) & 0xF3FFFFFFFFFFFFFELL;
  *(void *)(a3 + 264) = a2 & 0xFFFFFFFFFFFFFFF0LL;
}

uint64_t sub_323BC(uint64_t a1, void *a2)
{
  if ((a2[27] & 0x400000LL) != 0) {
    BOOL v3 = "\tRGX_CR_ISP_ZLSCTL_FB_STOREEN_EN enabled";
  }
  else {
    BOOL v3 = "\tRGX_CR_ISP_ZLSCTL_FB_STOREEN_EN disabled";
  }
  puts(v3);
  if ((a2[27] & 0x200000LL) != 0) {
    uint64_t v4 = "\tRGX_CR_ISP_ZLSCTL_FB_LOADEN_EN enabled";
  }
  else {
    uint64_t v4 = "\tRGX_CR_ISP_ZLSCTL_FB_LOADEN_EN disabled";
  }
  puts(v4);
  if ((a2[27] & 0x100000LL) != 0) {
    uint64_t v5 = "\tRGX_CR_ISP_ZLSCTL_MSTOREEN_EN enabled";
  }
  else {
    uint64_t v5 = "\tRGX_CR_ISP_ZLSCTL_MSTOREEN_EN disabled";
  }
  puts(v5);
  if ((a2[27] & 0x40000LL) != 0) {
    uint64_t v6 = "\tRGX_CR_ISP_ZLSCTL_SSTOREEN_EN enabled";
  }
  else {
    uint64_t v6 = "\tRGX_CR_ISP_ZLSCTL_SSTOREEN_EN disabled";
  }
  puts(v6);
  if ((a2[27] & 0x80000LL) != 0) {
    uint64_t v7 = "\tRGX_CR_ISP_ZLSCTL_ZSTOREEN_EN enabled";
  }
  else {
    uint64_t v7 = "\tRGX_CR_ISP_ZLSCTL_ZSTOREEN_EN disabled";
  }
  puts(v7);
  if ((a2[27] & 0x20000LL) != 0) {
    uint64_t v8 = "\tRGX_CR_ISP_ZLSCTL_STORETWIDDLED_EN enabled";
  }
  else {
    uint64_t v8 = "\tRGX_CR_ISP_ZLSCTL_STORETWIDDLED_EN disabled";
  }
  puts(v8);
  if ((a2[27] & 0x10000LL) != 0) {
    unint64_t v9 = "\tRGX_CR_ISP_ZLSCTL_MLOADEN_EN enabled";
  }
  else {
    unint64_t v9 = "\tRGX_CR_ISP_ZLSCTL_MLOADEN_EN disabled";
  }
  puts(v9);
  if ((a2[27] & 0x8000LL) != 0) {
    uint64_t v10 = "\tRGX_CR_ISP_ZLSCTL_ZLOADEN_EN enabled";
  }
  else {
    uint64_t v10 = "\tRGX_CR_ISP_ZLSCTL_ZLOADEN_EN disabled";
  }
  puts(v10);
  if ((a2[27] & 0x4000LL) != 0) {
    uint64_t v11 = "\tRGX_CR_ISP_ZLSCTL_SLOADEN_EN enabled";
  }
  else {
    uint64_t v11 = "\tRGX_CR_ISP_ZLSCTL_SLOADEN_EN disabled";
  }
  puts(v11);
  if ((a2[27] & 0x2000LL) != 0) {
    unsigned int v12 = "\tRGX_CR_ISP_ZLSCTL_LOADTWIDDLED_EN enabled";
  }
  else {
    unsigned int v12 = "\tRGX_CR_ISP_ZLSCTL_LOADTWIDDLED_EN disabled";
  }
  puts(v12);
  if ((a2[27] & 4LL) != 0) {
    unsigned int v13 = "\tRGX_CR_ISP_ZLSCTL_FORCEZSTORE_EN enabled";
  }
  else {
    unsigned int v13 = "\tRGX_CR_ISP_ZLSCTL_FORCEZSTORE_EN disabled";
  }
  puts(v13);
  if ((a2[27] & 2LL) != 0) {
    uint64_t v14 = "\tRGX_CR_ISP_ZLSCTL_FORCEZLOAD_EN enabled";
  }
  else {
    uint64_t v14 = "\tRGX_CR_ISP_ZLSCTL_FORCEZLOAD_EN disabled";
  }
  puts(v14);
  if ((a2[27] & 1LL) != 0) {
    uint64_t v15 = "\tRGX_CR_ISP_ZLSCTL_ZONLYRENDER_EN enabled";
  }
  else {
    uint64_t v15 = "\tRGX_CR_ISP_ZLSCTL_ZONLYRENDER_EN disabled";
  }
  puts(v15);
  printf("Register: ISP_ZLS: %llx\n", a2[28]);
  printf("\tPIXELS_X: 0x%llx\n", a2[28] & 0x7FFFLL);
  printf("\tPIXELS_Y: 0x%llx\n", (a2[28] >> 15) & 0x7FFFLL);
  puts("Register: ISP_ZLOAD_BASE");
  printf("\tZLOAD_BASE_ADDR: 0x%llx\n", a2[29]);
  puts("Register: ISP_ZSTORE_BASE");
  printf("\tZSTORE_BASE_ADDR: 0x%llx\n", a2[33]);
  puts("Register: ISP_ZSTORE_BASE for SPM");
  printf("\tZSTORE_BASE_ADDR: 0x%llx\n", a2[93]);
  puts("Register: ISP_STENCIL_LOAD_BASE");
  printf("\tSTENCIL_LOAD_BASE_ADDR: 0x%llx\n", a2[37]);
  puts("Register: ISP_STENCIL_STORE_BASE");
  printf("\tSTENCIL_STORE_BASE_ADDR: 0x%llx\n", a2[41]);
  puts("Register: ISP_STENCIL_STORE_BASE for SPM");
  printf("\tSTENCIL_STORE_BASE_ADDR: 0x%llx\n", a2[95]);
  return printf("%s: ---- End ---- \n", "virtual void G4P::AGXHalZLSConfigGen1::print(AGX3DCommand &) const");
}

void sub_32740(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0xA) != 0) {
    uint64_t v3 = (2LL * ((a3 & 5) != 0)) | 4;
  }
  else {
    uint64_t v3 = 2LL * ((a3 & 5) != 0);
  }
  *(void *)(a2 + 216) |= v3 | (a3 << 18) & 0x80000 | ((a3 & 1) << 15) | (((a3 >> 2) & 1) << 14) & 0xFFFBFFFF | (((a3 >> 3) & 1) << 18);
}

uint64_t sub_32794(uint64_t a1, unint64_t a2)
{
  return (a2 >> 15) & 1;
}

uint64_t sub_3279C(uint64_t a1, unint64_t a2)
{
  return (a2 >> 14) & 1;
}

uint64_t sub_327A4(uint64_t a1, unint64_t a2)
{
  return (a2 >> 19) & 1;
}

uint64_t sub_327AC(uint64_t a1, unint64_t a2)
{
  return (a2 >> 18) & 1;
}

void sub_327B4(uint64_t a1, void *a2)
{
  *a2 &= ~0x80000uLL;
}

void sub_327C4(uint64_t a1, void *a2)
{
  *a2 &= ~0x40000uLL;
}

void sub_327D4(uint64_t a1, void *a2)
{
  *a2 &= ~4uLL;
}

void *sub_327E4()
{
  uint64_t result = operator new(8uLL);
  *uint64_t result = &off_79530;
  return result;
}

unint64_t sub_3280C(unint64_t a1, unint64_t a2)
{
  return ((a1 / a2 + 1) & 0xFFFFFFFFFFFFFFFELL) * a2;
}

BOOL sub_32820(unint64_t a1, unint64_t a2)
{
  return ((a1 / a2) & 1) == 0;
}

BOOL sub_32830(char a1)
{
  return (a1 & 3) == 0LL;
}

uint64_t sub_3283C(uint64_t result)
{
  if ((_DWORD)result == 3) {
    int v1 = 15;
  }
  else {
    int v1 = result;
  }
  if ((_DWORD)result == 2) {
    unsigned int v2 = 14;
  }
  else {
    unsigned int v2 = v1;
  }
  if ((result & 0xFFFFFFFE) == 2) {
    return v2;
  }
  else {
    return result;
  }
}

uint64_t sub_32864(int a1)
{
  return (1 << -__clz(a1 - 1));
}

uint64_t (*sub_3287C( int a1, int a2, uint64_t a3))(uint64_t a1, int *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  BOOL v3 = a1 == 36248 || a1 == 6407;
  if (v3
    && a2 >> 1 == 2560
    && ((int v4 = *(_DWORD *)(a3 + 24), v4 != 36249) ? (v5 = v4 == 6408) : (v5 = 1), v5))
  {
    uint64_t v6 = sub_32E10;
    if (*(_DWORD *)(a3 + 28) >> 1 != 2560) {
      uint64_t v6 = 0LL;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  if (*(_DWORD *)(a3 + 24) != a1 || *(_DWORD *)(a3 + 28) != a2) {
    return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v6;
  }
  if (a2 <= 33634)
  {
    switch(a2)
    {
      case 5120:
      case 5121:
        if (a1 > 33318)
        {
          if (a1 > 36247)
          {
            if (a1 != 36248)
            {
              int v10 = 36249;
              goto LABEL_84;
            }

            return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))sub_32E48;
          }

          else
          {
            uint64_t v7 = v6;
            if (a1 == 36244) {
              return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))sub_32E80;
            }
          }
        }

        else
        {
          uint64_t v7 = v6;
          switch(a1)
          {
            case 6401:
            case 6403:
            case 6406:
            case 6409:
              return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))sub_32E80;
            case 6402:
            case 6404:
            case 6405:
              return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
            case 6407:
              return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))sub_32E48;
            case 6408:
              goto LABEL_85;
            case 6410:
              goto LABEL_59;
            default:
              int v10 = 32993;
              goto LABEL_84;
          }
        }

        return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
      case 5122:
      case 5123:
        if (a1 <= 33318)
        {
          uint64_t v7 = v6;
          switch(a1)
          {
            case 6402:
            case 6403:
            case 6406:
            case 6409:
              goto LABEL_59;
            case 6404:
            case 6405:
              return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
            case 6407:
              return sub_32E9C;
            case 6408:
              goto LABEL_82;
            case 6410:
              goto LABEL_85;
            default:
              return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v6;
          }

          return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
        }

        if (a1 > 36243)
        {
          if (a1 == 36249) {
            goto LABEL_82;
          }
          if (a1 != 36248)
          {
            int v9 = 36244;
            goto LABEL_32;
          }

          return sub_32E9C;
        }

        else
        {
          uint64_t v7 = v6;
        }

        return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
      case 5124:
      case 5125:
        if (a1 > 33318)
        {
          if (a1 > 36247)
          {
            if (a1 == 36248)
            {
LABEL_72:
              uint64_t v7 = sub_32ED4;
            }

            else
            {
              uint64_t v7 = v6;
              if (a1 == 36249) {
LABEL_71:
              }
                uint64_t v7 = sub_32EF0;
            }
          }

          else
          {
            if ((a1 - 33319) >= 2)
            {
              int v10 = 36244;
              goto LABEL_84;
            }

LABEL_82:
            uint64_t v7 = sub_32EB8;
          }
        }

        else
        {
          uint64_t v7 = v6;
          switch(a1)
          {
            case 6403:
            case 6406:
            case 6409:
              goto LABEL_85;
            case 6404:
            case 6405:
              return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
            case 6407:
              goto LABEL_72;
            case 6408:
              goto LABEL_71;
            case 6410:
              goto LABEL_82;
            default:
              return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v6;
          }
        }

        break;
      case 5126:
        uint64_t v7 = v6;
        switch(a1)
        {
          case 6402:
          case 6403:
          case 6406:
          case 6409:
            goto LABEL_85;
          case 6404:
          case 6405:
            return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
          case 6407:
            goto LABEL_72;
          case 6408:
            goto LABEL_71;
          case 6410:
            goto LABEL_82;
          default:
            uint64_t v7 = v6;
            if (a1 == 33319) {
              goto LABEL_82;
            }
            break;
        }

        return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
      case 5127:
      case 5128:
      case 5129:
      case 5130:
        goto LABEL_52;
      case 5131:
        goto LABEL_36;
      default:
        goto LABEL_52;
    }

    return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
  }

  uint64_t v7 = sub_32E2C;
  if (a2 > 34041)
  {
    if (a2 > 35901)
    {
      if (a2 == 35902) {
        return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
      }
      if (a2 == 36193)
      {
LABEL_36:
        uint64_t v7 = v6;
        switch(a1)
        {
          case 6403:
          case 6406:
          case 6409:
            goto LABEL_59;
          case 6404:
          case 6405:
            return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
          case 6407:
            return sub_32E9C;
          case 6408:
            goto LABEL_82;
          case 6410:
            goto LABEL_85;
          default:
            int v10 = 33319;
            goto LABEL_84;
        }

        return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
      }
    }

    else
    {
      if (a2 == 34042)
      {
        int v8 = 34041;
LABEL_49:
        if (a1 != v8) {
          return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v6;
        }
        return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
      }

      if (a2 == 35899) {
        return (uint64_t (*)(uint64_t, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, double, int32x2_t, unsigned int, unsigned int, uint64_t, unsigned __int16 *, uint64_t))v7;
      }
    }

uint64_t sub_32E10( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_3AC30(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_32E2C( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_39E54(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_32E48( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_39068(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_32E64( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_375F0(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_32E80( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_365B8(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_32E9C( uint64_t a1, int *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_35CD0(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_32EB8( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_34628(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_32ED4( uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_353E8(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_32EF0( uint64_t a1, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_33618(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

void *sub_32F0C( void *result, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  if (result)
  {
    if (a2) {
      return memcpy(result, a2, ((a10 + 3) >> 2) * (unint64_t)((a9 + 7) & 0xFFFFFFF8));
    }
  }

  return result;
}

void *sub_32F34( void *result, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  if (result)
  {
    if (a2) {
      return memcpy(result, a2, 8 * ((a9 + 3) >> 2) * (unint64_t)((a10 + 3) >> 2));
    }
  }

  return result;
}

uint64_t sub_32F60( uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_34628( result,  a2,  (a3 + 3) >> 2,  (a4 + 3) >> 2,  a5,  a6,  a7 >> 2,  a8 >> 2,  a9,  a10,  (a11 + 3) >> 2,  (a12 + 3) >> 2,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_32FB0( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 3) >> 2,  (a4 + 3) >> 2,  a5,  a6,  a7 >> 2,  a8 >> 2,  a9,  a10,  (a11 + 3) >> 2,  (a12 + 3) >> 2,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_33000( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 3) >> 2,  (a4 + 1) >> 1,  a5,  a6,  a7 >> 2,  a8 >> 1,  a9,  a10,  (a11 + 3) >> 2,  (a12 + 1) >> 1,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_33050( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 4) / 5u,  (a4 + 3) >> 2,  a5,  a6,  a7 / 5,  a8 >> 2,  a9,  a10,  (a11 + 4) / 5u,  (a12 + 3) >> 2,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_330B4( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 4) / 5u,  (a4 + 4) / 5u,  a5,  a6,  a7 / 5,  a8 / 5,  a9,  a10,  (a11 + 4) / 5u,  (a12 + 4) / 5u,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_33124( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 5) / 6u,  (a4 + 4) / 5u,  a5,  a6,  a7 / 6,  a8 / 5,  a9,  a10,  (a11 + 5) / 6u,  (a12 + 4) / 5u,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_3319C( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 5) / 6u,  (a4 + 5) / 6u,  a5,  a6,  a7 / 6,  a8 / 6,  a9,  a10,  (a11 + 5) / 6u,  (a12 + 5) / 6u,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_3320C( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 7) >> 3,  (a4 + 3) >> 2,  a5,  a6,  a7 >> 3,  a8 >> 2,  a9,  a10,  (a11 + 7) >> 3,  (a12 + 3) >> 2,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_3325C( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 7) >> 3,  (a4 + 4) / 5u,  a5,  a6,  a7 >> 3,  a8 / 5,  a9,  a10,  (a11 + 7) >> 3,  (a12 + 4) / 5u,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_332C0( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 7) >> 3,  (a4 + 5) / 6u,  a5,  a6,  a7 >> 3,  a8 / 6,  a9,  a10,  (a11 + 7) >> 3,  (a12 + 5) / 6u,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_33324( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 7) >> 3,  (a4 + 7) >> 3,  a5,  a6,  a7 >> 3,  a8 >> 3,  a9,  a10,  (a11 + 7) >> 3,  (a12 + 7) >> 3,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_33374( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 9) / 0xAu,  (a4 + 4) / 5u,  a5,  a6,  a7 / 0xA,  a8 / 5,  a9,  a10,  (a11 + 9) / 0xAu,  (a12 + 4) / 5u,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_333E4( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 9) / 0xAu,  (a4 + 5) / 6u,  a5,  a6,  a7 / 0xA,  a8 / 6,  a9,  a10,  (a11 + 9) / 0xAu,  (a12 + 5) / 6u,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_3345C( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 9) / 0xAu,  (a4 + 7) >> 3,  a5,  a6,  a7 / 0xA,  a8 >> 3,  a9,  a10,  (a11 + 9) / 0xAu,  (a12 + 7) >> 3,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_334C0( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 9) / 0xAu,  (a4 + 9) / 0xAu,  a5,  a6,  a7 / 0xA,  a8 / 0xA,  a9,  a10,  (a11 + 9) / 0xAu,  (a12 + 9) / 0xAu,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_33530( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 11) / 0xCu,  (a4 + 9) / 0xAu,  a5,  a6,  a7 / 0xC,  a8 / 0xA,  a9,  a10,  (a11 + 11) / 0xCu,  (a12 + 9) / 0xAu,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_335A8( uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_33618( result,  a2,  (a3 + 11) / 0xCu,  (a4 + 11) / 0xCu,  a5,  a6,  a7 / 0xC,  a8 / 0xC,  a9,  a10,  (a11 + 11) / 0xCu,  (a12 + 11) / 0xCu,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_33618( uint64_t result, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    unsigned int v18 = a12;
    if (a14)
    {
      uint64_t v158 = result;
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v161);
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v160, &v159);
        unsigned int v120 = v162;
        if (v162)
        {
          int v19 = 0;
          unsigned __int16 v122 = 0;
          char v118 = v160;
          unsigned int v114 = a7 >> v160;
          char v152 = v159;
          unsigned int v139 = a8 >> v159;
          unsigned int v156 = v163;
          unsigned int v112 = a11 + a7;
          int v108 = ((1 << v160) - 1) & a7;
          int v110 = ((1 << v160) - 1) & (a11 + a7);
          int v106 = (1 << v160) - v108;
          unsigned int v137 = a12 + a8;
          int v124 = ((1 << v159) - 1) & a8;
          int v133 = (1 << v159) - v124;
          int v135 = ((1 << v159) - 1) & (a12 + a8);
          int v116 = 1 << v160;
          if (1 << v160 >= a5) {
            unsigned int v20 = a5;
          }
          else {
            unsigned int v20 = 1 << v160;
          }
          int v141 = 1 << v159;
          if (1 << v159 >= a6) {
            unsigned int v21 = a6;
          }
          else {
            unsigned int v21 = 1 << v159;
          }
          unsigned int v22 = 32 - __clz(v21 - 1);
          if (v21 < 2) {
            unsigned int v22 = 0;
          }
          unsigned int v23 = 32 - __clz(v20 - 1);
          if (v20 < 2) {
            unsigned int v23 = 0;
          }
          int v148 = v23;
          int v150 = v22;
          unsigned int v129 = ~(-1 << v22);
          unsigned int v131 = ~(-1 << v23);
          int v24 = v23;
          do
          {
            if (v156)
            {
              int v25 = 0;
              unsigned __int16 v26 = 0;
              unsigned int v27 = (v19 + v114) << v118;
              unsigned int v28 = a11;
              if (v112 >= (v19 + v114 + 1) << v118) {
                unsigned int v28 = v106;
              }
              int v29 = v116;
              if (v112 < (v19 + v114 + 1) << v118) {
                int v29 = v110;
              }
              int v30 = v19 << v118;
              if (v27 >= a7) {
                unsigned int v31 = v29;
              }
              else {
                unsigned int v31 = v28;
              }
              unsigned int v32 = v108;
              if (v27 >= a7) {
                unsigned int v32 = 0;
              }
              unsigned int v144 = v32;
              __int128 v126 = &a2[v32 + v30];
              do
              {
                LOWORD(v33) = v122;
                HIWORD(v33) = v26;
                uint64_t result = sub_34358(v161, v33);
                int v34 = *(_DWORD *)(v17 + 4LL * result);
                if (v34 < 0)
                {
                  unint64_t v35 = v158 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                  unsigned int v36 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v36) {
                    v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v37 = a12;
                  if (v137 >= (v25 + v139 + 1) << v152) {
                    unsigned int v37 = v133;
                  }
                  int v38 = v141;
                  if (v137 < (v25 + v139 + 1) << v152) {
                    int v38 = v135;
                  }
                  if ((v25 + v139) << v152 >= a8) {
                    unsigned int v39 = v38;
                  }
                  else {
                    unsigned int v39 = v37;
                  }
                  uint64_t v40 = sub_34508(v131, 0, v24, v150);
                  uint64_t v41 = sub_34508(0, v129, v24, v150);
                  uint64_t result = sub_34508(v144, 0, v24, v150);
                  if (v39)
                  {
                    uint64_t v42 = result;
                    if ((v25 + v139) << v152 >= a8) {
                      unsigned int v43 = 0;
                    }
                    else {
                      unsigned int v43 = v124;
                    }
                    unsigned int v44 = (__int128 *)((char *)v126 + (v43 + (v25 << v152)) * a13);
                    uint64_t result = sub_34508(0, v43, v148, v150);
                    for (int i = 0; i != v39; ++i)
                    {
                      unsigned int v46 = v31;
                      __int128 v47 = v44;
                      for (uint64_t j = v42; v46; --v46)
                      {
                        __int128 v49 = *v47++;
                        *(_OWORD *)(v35 + 16 * (j + result)) = v49;
                        uint64_t j = (j - v40) & v40;
                      }

                      uint64_t result = (result - v41) & v41;
                      unsigned int v44 = (__int128 *)((char *)v44 + a13);
                    }
                  }
                }

                int v25 = ++v26;
                uint64_t v17 = v158;
              }

              while (v156 > v26);
            }

            int v19 = ++v122;
          }

          while (v120 > v122);
        }
      }

      else
      {
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v161, &v160);
        unsigned int v66 = 1 << v160;
        char v67 = *((_BYTE *)a14 + 15);
        unsigned int v68 = 1 << v67;
        if (v67) {
          BOOL v69 = v68 > a3;
        }
        else {
          BOOL v69 = 1;
        }
        BOOL v70 = v69 || v68 > a4;
        int v71 = (~(-1 << v67) + a3) & (-1 << v67);
        if (v70) {
          int v72 = a3;
        }
        else {
          int v72 = v71;
        }
        unsigned int v125 = a8 >> v160;
        int v127 = 1 << v160;
        unsigned int v73 = v66 - 1;
        unsigned int v123 = a12 + a8;
        char v121 = v160;
        unsigned int v74 = (v66 - 1 + a12 + a8) >> v160;
        if (a8 >> v160 < v74)
        {
          unsigned int v117 = (v72 + ~(-1 << SLOBYTE(v161[0]))) >> SLOBYTE(v161[0]);
          unsigned int v75 = a7 >> SLOBYTE(v161[0]);
          char v151 = v161[0];
          unsigned int v147 = ((1 << SLOBYTE(v161[0])) - 1 + a11 + a7) >> SLOBYTE(v161[0]);
          int v142 = ((1 << SLOBYTE(v161[0])) - 1) & (a11 + a7);
          unsigned int v143 = a11 + a7;
          uint64_t v149 = ((1 << SLOBYTE(v161[0])) - 1) & a7;
          unsigned int v140 = (1 << SLOBYTE(v161[0])) - v149;
          int v113 = v73 & v123;
          unsigned int v76 = 1 << v160;
          uint64_t v115 = v73 & a8;
          unsigned int v111 = v66 - v115;
          int v145 = 1 << SLOBYTE(v161[0]);
          if (1 << SLOBYTE(v161[0]) >= a5) {
            unsigned int v77 = a5;
          }
          else {
            unsigned int v77 = 1 << SLOBYTE(v161[0]);
          }
          if (v66 >= a6) {
            unsigned int v76 = a6;
          }
          unsigned int v78 = 32 - __clz(v76 - 1);
          if (v76 < 2) {
            unsigned int v78 = 0;
          }
          unsigned int v79 = 32 - __clz(v77 - 1);
          if (v77 >= 2) {
            unsigned int v80 = v79;
          }
          else {
            unsigned int v80 = 0;
          }
          int v153 = v80;
          unsigned int v109 = ~(-1 << v80);
          int v155 = v78;
          unsigned int v107 = ~(-1 << v78);
          unsigned int v81 = a8 >> v160;
          unsigned int v119 = (v66 - 1 + a12 + a8) >> v160;
          unsigned int v138 = a7 >> SLOBYTE(v161[0]);
          do
          {
            if (v75 >= v147)
            {
              unsigned int v105 = v81 + 1;
            }

            else
            {
              unsigned int v82 = v81 << v121;
              unsigned int v130 = v81 + 1;
              if (v123 >= (v81 + 1) << v121) {
                int v83 = v127;
              }
              else {
                int v83 = v113;
              }
              if (v123 >= (v81 + 1) << v121) {
                unsigned int v84 = v111;
              }
              else {
                unsigned int v84 = v18;
              }
              int v136 = v81 * v117;
              uint64_t v85 = sub_34508(v109, 0, v153, v155);
              uint64_t v86 = sub_34508(0, v107, v153, v155);
              BOOL v87 = v82 >= a8;
              if (v82 >= a8) {
                int v88 = v83;
              }
              else {
                int v88 = v84;
              }
              if (v87) {
                unsigned int v89 = 0;
              }
              else {
                unsigned int v89 = v115;
              }
              unsigned int v134 = v89;
              uint64_t v132 = (v89 + ((v81 - v125) << v121) - v115) * a13;
              do
              {
                unsigned int v90 = v75 << v151;
                unsigned int v157 = v75 + 1;
                unsigned int v91 = a11;
                if (v143 >= (v75 + 1) << v151) {
                  unsigned int v91 = v140;
                }
                int v92 = v145;
                if (v143 < (v75 + 1) << v151) {
                  int v92 = v142;
                }
                if (v90 >= a7) {
                  unsigned int v93 = 0;
                }
                else {
                  unsigned int v93 = v149;
                }
                if (v90 >= a7) {
                  unsigned int v94 = v92;
                }
                else {
                  unsigned int v94 = v91;
                }
                int v95 = a14[3];
                int v96 = *((unsigned __int8 *)a14 + 9);
                uint64_t result = sub_34508(v93, 0, v153, v155);
                if (v88)
                {
                  uint64_t v97 = result;
                  uint64_t v98 = (v75 + v136) * v95 * v96 + v158;
                  uint64_t v99 = (__int128 *)((char *)&a2[v93 + ((v75 - v138) << v151) - v149] + v132);
                  uint64_t result = sub_34508(0, v134, v153, v155);
                  for (int k = 0; k != v88; ++k)
                  {
                    unsigned int v101 = v94;
                    int v102 = v99;
                    for (uint64_t m = v97; v101; --v101)
                    {
                      __int128 v104 = *v102++;
                      *(_OWORD *)(v98 + 16 * (m + result)) = v104;
                      uint64_t m = (m - v85) & v85;
                    }

                    uint64_t result = (result - v86) & v86;
                    uint64_t v99 = (__int128 *)((char *)v99 + a13);
                  }
                }

                ++v75;
              }

              while (v157 != v147);
              unsigned int v18 = a12;
              unsigned int v74 = v119;
              unsigned int v75 = v138;
              unsigned int v105 = v130;
            }

            unsigned int v81 = v105;
          }

          while (v105 != v74);
        }
      }
    }

    else
    {
      unsigned int v50 = 32 - __clz(a6 - 1);
      if (a6 >= 2) {
        int v51 = v50;
      }
      else {
        int v51 = 0;
      }
      unsigned int v52 = 32 - __clz(a5 - 1);
      if (a5 >= 2) {
        int v53 = v52;
      }
      else {
        int v53 = 0;
      }
      uint64_t v55 = sub_34508(~(-1 << v53), 0, v53, v51);
      uint64_t v56 = sub_34508(0, ~(-1 << v51), v53, v51);
      uint64_t result = sub_34508(a7, 0, v53, v51);
      if (a12)
      {
        uint64_t v57 = result;
        uint64_t result = sub_34508(0, a8, v53, v51);
        __int128 v58 = a2;
        for (int n = 0; n != a12; ++n)
        {
          unsigned int v60 = a11;
          int v61 = v58;
          for (iint i = v57; v60; --v60)
          {
            __int128 v63 = *v61++;
            *(_OWORD *)(v17 + 16 * (ii + result)) = v63;
            iint i = (ii - v55) & v55;
          }

          uint64_t result = (result - v56) & v56;
          __int128 v58 = (__int128 *)((char *)v58 + a13);
        }
      }
    }
  }

  return result;
}

BOOL sub_33EA8( unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, int a12, unsigned int a13, char a14, unsigned int a15, unsigned int a16, unsigned int a17, unsigned int a18, uint64_t a19)
{
  unsigned int v19 = a4 - 1;
  unsigned int v20 = (a4 - 1 + a2) / a4;
  unsigned int v21 = a5 - 1;
  unsigned int v22 = 32 - __clz(a1 / a6 - 1);
  if (a1 / a6 >= 2) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = 0;
  }
  unsigned int v24 = (a5 - 1 + a3) / a5;
  if (v20 < 2) {
    unsigned int v25 = 0;
  }
  else {
    unsigned int v25 = 32 - __clz(~(-1 << -(char)__clz(v20 - 1)));
  }
  unsigned int v26 = v23 >> 1;
  unsigned int v27 = v23 - (v23 >> 1);
  if (v24 < 2) {
    unsigned int v30 = 0;
  }
  else {
    unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v24 - 1)));
  }
  int v31 = 0;
  uint64_t v32 = 0LL;
  v76[0] = 0;
  if (a8 + 1 > 1) {
    uint64_t v33 = a8 + 1;
  }
  else {
    uint64_t v33 = 1LL;
  }
  do
  {
    int v34 = v25 - v32;
    int v35 = v30 - v32;
    unsigned int v36 = v34 + v35;
    BOOL v37 = v36 >= v23;
    char v38 = v36 - v23;
    if (!v37) {
      char v38 = 0;
    }
    v31 += 1 << v38;
    v76[++v32] = v31;
  }

  while (v33 != v32);
  unsigned int v39 = 0;
  if (a7 >= 2)
  {
    unsigned int v40 = a7 - a8;
    if (a7 > a8)
    {
      unsigned int v41 = (v40 + 3) & 0xFFFFFFFC;
      __int32 v42 = v40 - 1;
      a10.i32[0] = v42;
      uint32x4_t v43 = (uint32x4_t)vdupq_n_s32(v25);
      uint32x4_t v44 = (uint32x4_t)vdupq_n_s32(v30);
      int32x4_t v45 = vaddq_s32(vdupq_n_s32(a8), (int32x4_t)xmmword_70320);
      uint64x2_t v46 = (uint64x2_t)vdupq_n_s64(a6);
      int8x16_t v47 = 0uLL;
      v48.i64[0] = 0x7F0000007FLL;
      v48.i64[1] = 0x7F0000007FLL;
      v49.i64[0] = 0x400000004LL;
      v49.i64[1] = 0x400000004LL;
      do
      {
        int32x4_t v50 = (int32x4_t)v47;
        int32x4_t v51 = vaddq_s32((int32x4_t)vqsubq_u32(v43, (uint32x4_t)v45), (int32x4_t)vqsubq_u32(v44, (uint32x4_t)v45));
        v52.i64[0] = v51.u32[0];
        v52.i64[1] = v51.u32[1];
        uint64x2_t v53 = v52;
        v52.i64[0] = v51.u32[2];
        v52.i64[1] = v51.u32[3];
        int8x16_t v47 = (int8x16_t)vaddq_s32( (int32x4_t)(*(_OWORD *)&vaddq_s32( vuzp1q_s32( (int32x4_t)vshlq_u64(v46, v53),  (int32x4_t)vshlq_u64(v46, v52)),  v48) & __PAIR128__(0xFFFFFF80FFFFFF80LL, 0xFFFFFF80FFFFFF80LL)),  v50);
        int32x4_t v45 = vaddq_s32(v45, v49);
        v41 -= 4;
      }

      while (v41);
      unsigned int v39 = vaddvq_s32((int32x4_t)vbslq_s8( (int8x16_t)vcgtq_u32( (uint32x4_t)vorrq_s8( (int8x16_t)vdupq_n_s32(v42 & 0xFFFFFFFC),  (int8x16_t)xmmword_70320),  (uint32x4_t)vdupq_lane_s32(a10, 0)),  (int8x16_t)v50,  v47));
    }
  }

  if (a13 >= a8) {
    unsigned int v54 = a8;
  }
  else {
    unsigned int v54 = a13;
  }
  if (a7 <= 1) {
    int v55 = 1;
  }
  else {
    int v55 = a8 + 1;
  }
  unsigned int v56 = (v76[v55] + 255) & 0xFFFFFF00;
  v76[v55] = v56;
  unsigned int v57 = a2 >> v54;
  unsigned int v58 = a3 >> v54;
  if ((a14 & 1) == 0)
  {
    if (v57 && (unsigned int v61 = (v19 + v57) / a4, v61 >= 2))
    {
      unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz(v61 - 1)));
      if (!v58) {
        goto LABEL_43;
      }
    }

    else
    {
      unsigned int v59 = 0;
      if (!v58) {
        goto LABEL_43;
      }
    }

    unsigned int v62 = (v21 + v58) / a5;
    if (v62 >= 2)
    {
      unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz(v62 - 1)));
      goto LABEL_44;
    }

LABEL_43:
    unsigned int v60 = 0;
    goto LABEL_44;
  }

  if (v25 >= v54) {
    unsigned int v59 = v25 - v54;
  }
  else {
    unsigned int v59 = 0;
  }
  if (v30 >= v54) {
    unsigned int v60 = v30 - v54;
  }
  else {
    unsigned int v60 = 0;
  }
LABEL_44:
  unsigned int v63 = 1 << v59;
  unsigned int v64 = 1 << v60;
  if (1 << v27 >= (1 << v60) || v63 >> v26)
  {
    if (!(v64 >> v27) && 1 << v26 < v63)
    {
      if (v60) {
        unsigned int v65 = __clz(~(-1 << -(char)__clz(v64 - 1))) - 32;
      }
      else {
        unsigned int v65 = 0;
      }
      unsigned int v26 = v65 + v23;
      unsigned int v27 = -v65;
    }
  }

  else
  {
    if (v59) {
      unsigned int v26 = 32 - __clz(~(-1 << -(char)__clz(v63 - 1)));
    }
    else {
      unsigned int v26 = 0;
    }
    unsigned int v27 = v23 - v26;
  }

  if (v59 >= v26) {
    unsigned int v66 = v59 - v26;
  }
  else {
    unsigned int v66 = 0;
  }
  unsigned int v67 = v60 - v27;
  if (v60 < v27) {
    unsigned int v67 = 0;
  }
  *(_DWORD *)(a19 + 12) = v66;
  *(_DWORD *)(a19 + 16) = v67;
  BOOL result = a8 <= a13 && v39 > a1;
  if (result) {
    *(_DWORD *)(a19 + 12) = v66 + 1;
  }
  *(_BYTE *)(a19 + 40) = v27 != v26;
  *(_DWORD *)(a19 + 20) = v26;
  *(_DWORD *)(a19 + 24) = v27;
  *(_DWORD *)(a19 + 8) = v76[v54] + v56 * a12;
  *(_BYTE *)(a19 + 37) = a6;
  if ((a14 & 1) != 0)
  {
    unsigned int v71 = a17;
    unsigned int v70 = a18;
    goto LABEL_75;
  }

  unsigned int v71 = a17;
  if (!v57)
  {
    unsigned int v63 = 1;
    if (v58) {
      goto LABEL_71;
    }
LABEL_73:
    unsigned int v64 = 1;
    goto LABEL_74;
  }

  unsigned int v63 = (v19 + v57) / a4;
  if (!v58) {
    goto LABEL_73;
  }
LABEL_71:
  unsigned int v64 = (v21 + v58) / a5;
LABEL_74:
  unsigned int v70 = a18;
LABEL_75:
  if (v54 >= a11)
  {
    a16 = 0;
    a15 = 0;
    unsigned int v70 = v64;
    unsigned int v71 = v63;
  }

  unsigned int v72 = v21 + v70 + a16;
  unsigned int v73 = (a15 / a4) >> v26;
  unsigned int v74 = (a16 / a5) >> v27;
  *(_DWORD *)a19 = v73;
  *(_DWORD *)(a19 + 4) = v74;
  unsigned int v75 = (((v19 + v71 + a15) / a4 + ~(-1 << v26)) >> v26) - v73;
  *(_DWORD *)(a19 + 28) = v75;
  *(_DWORD *)(a19 + 32) = ((v72 / a5 + ~(-1 << v27)) >> v27) - v74;
  if (result) {
    *(_DWORD *)(a19 + 28) = v75 + 1;
  }
  return result;
}

uint64_t sub_34358(int *a1, float a2)
{
  int v2 = *a1;
  int v3 = a1[1];
  int v5 = a1[2];
  unsigned int v4 = a1[3];
  unsigned int v6 = a1[4];
  if (*((_BYTE *)a1 + 40))
  {
    int v7 = v3 + HIWORD(a2);
    int v8 = v2 + LOWORD(a2);
    int v9 = v6;
  }

  else
  {
    int v7 = v2 + LOWORD(a2);
    int v8 = v3 + HIWORD(a2);
    int v9 = v4;
    unsigned int v4 = v6;
  }

  int v10 = sub_3459C(v7, v8, v9, v4);
  return (v10 + v5) | ((v10 + v5) >> 8 << 9);
}

uint64_t sub_343C0( unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8)
{
  unsigned int v8 = (a5 - 1 + a3) / a5;
  unsigned int v9 = (a6 - 1 + a4) / a6;
  unsigned int v10 = 32 - __clz(~(-1 << -__clz(v8 - 1)));
  if (v8 >= 2) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v9 < 2) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = 32 - __clz(~(-1 << -(char)__clz(v9 - 1)));
  }
  if (a2 >= a1) {
    return 0LL;
  }
  uint64_t v13 = 0LL;
  do
  {
    if (a8)
    {
      LOBYTE(v14) = v11 - a2;
      if (v11 < a2) {
        LOBYTE(v14) = 0;
      }
      LOBYTE(v15) = v12 - a2;
      if (v12 < a2) {
        LOBYTE(v15) = 0;
      }
    }

    else
    {
      unsigned int v14 = a3 >> a2;
      if (a3 >> a2)
      {
        unsigned int v16 = (a5 - 1 + v14) / a5;
        if (v16 < 2) {
          LOBYTE(v14) = 0;
        }
        else {
          unsigned int v14 = 32 - __clz(~(-1 << -(char)__clz(v16 - 1)));
        }
      }

      unsigned int v15 = a4 >> a2;
      if (a4 >> a2)
      {
        unsigned int v17 = (a6 - 1 + v15) / a6;
        if (v17 < 2) {
          LOBYTE(v15) = 0;
        }
        else {
          unsigned int v15 = 32 - __clz(~(-1 << -(char)__clz(v17 - 1)));
        }
      }
    }

    v13 += (((unint64_t)a7 << (v15 + v14)) + 127) & 0xFFFFFFFFFFFFFF80LL;
    ++a2;
  }

  while (a1 != a2);
  return v13;
}

uint64_t sub_34508(unsigned int a1, unsigned int a2, int a3, int a4)
{
  if (!(a3 | a4)) {
    return 0LL;
  }
  int v4 = 0;
  uint64_t v5 = 0LL;
  BOOL v6 = a4 != 0;
  BOOL v7 = a3 != 0;
  int v8 = 1;
  do
  {
    if (v6) {
      --a4;
    }
    else {
      a4 = 0;
    }
    if (v6) {
      v5 |= (unint64_t)(v8 & a2) << v4++;
    }
    if (v7) {
      --a3;
    }
    else {
      a3 = 0;
    }
    if (v7) {
      v5 |= (unint64_t)(v8 & a1) << v4++;
    }
    v8 *= 2;
    --v4;
    BOOL v7 = a3 != 0;
    BOOL v6 = a4 != 0;
  }

  while (a3 | a4);
  return v5;
}

uint64_t sub_3459C(int a1, int a2, int a3, unsigned int a4)
{
  uint64_t v4 = a3 | a4;
  if ((_DWORD)v4)
  {
    int v5 = 0;
    LODWORD(v4) = 0;
    BOOL v6 = a4 != 0;
    BOOL v7 = a3 != 0;
    int v8 = 1;
    do
    {
      if (v6) {
        --a4;
      }
      else {
        a4 = 0;
      }
      if (v6) {
        LODWORD(v4) = ((v8 & a2) << v5++) | v4;
      }
      if (v7) {
        --a3;
      }
      else {
        a3 = 0;
      }
      if (v7) {
        uint64_t v4 = ((v8 & a1) << v5) | v4;
      }
      else {
        uint64_t v4 = v4;
      }
      if (v7) {
        ++v5;
      }
      v8 *= 2;
      --v5;
      BOOL v7 = a3 != 0;
      BOOL v6 = a4 != 0;
    }

    while (a3 | a4);
  }

  return v4;
}

uint64_t sub_34628( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    uint64_t v18 = a13;
    unsigned int v19 = a12;
    if (a14)
    {
      unsigned int v115 = a7;
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v119);
        BOOL result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v118, &v117);
        unsigned int v92 = v120;
        if (v120)
        {
          int v20 = 0;
          unsigned __int16 v94 = 0;
          char v21 = v117;
          char v90 = v118;
          unsigned int v86 = v115 >> v118;
          unsigned int v109 = a8 >> v117;
          unsigned int v22 = v121;
          unsigned int v84 = a11 + v115;
          unsigned int v82 = ((1 << v118) - 1) & v115;
          int v83 = ((1 << v118) - 1) & (a11 + v115);
          unsigned int v81 = (1 << v118) - v82;
          unsigned int v107 = a12 + a8;
          int v105 = ((1 << v117) - 1) & (a12 + a8);
          int v102 = ((1 << v117) - 1) & a8;
          int v100 = (1 << v117) - v102;
          int v88 = 1 << v118;
          if (1 << v118 >= a5) {
            int v23 = a5;
          }
          else {
            int v23 = 1 << v118;
          }
          int v24 = 1 << v117;
          if (1 << v117 >= a6) {
            int v25 = a6;
          }
          else {
            int v25 = 1 << v117;
          }
          unsigned int v96 = v25;
          unsigned int v98 = v23;
          do
          {
            if (v22)
            {
              int v26 = 0;
              unsigned __int16 v27 = 0;
              unsigned int v28 = (v20 + v86) << v90;
              unsigned int v29 = a11;
              if (v84 >= (v20 + v86 + 1) << v90) {
                unsigned int v29 = v81;
              }
              int v30 = v88;
              if (v84 < (v20 + v86 + 1) << v90) {
                int v30 = v83;
              }
              int v31 = v20 << v90;
              if (v28 >= v115) {
                unsigned int v29 = v30;
              }
              unsigned int v111 = v29;
              if (v28 >= v115) {
                uint64_t v32 = 0LL;
              }
              else {
                uint64_t v32 = v82;
              }
              uint64_t v33 = a2 + 8LL * (v32 + v31);
              do
              {
                LOWORD(v34) = v94;
                HIWORD(v34) = v27;
                BOOL result = sub_34358(v119, v34);
                int v35 = *(_DWORD *)(v17 + 4LL * result);
                if (v35 < 0)
                {
                  uint64_t v36 = v17 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                  unsigned int v37 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v37) {
                    v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v38 = a12;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    unsigned int v38 = v100;
                  }
                  unsigned int v39 = v105;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    unsigned int v39 = v24;
                  }
                  unsigned int v40 = v102;
                  if ((v26 + v109) << v21 < a8)
                  {
                    unsigned int v41 = v38;
                  }

                  else
                  {
                    unsigned int v40 = 0;
                    unsigned int v41 = v39;
                  }

                  BOOL result = sub_34BF8(v36, v33 + (v40 + (v26 << v21)) * a13, v98, v96, v111, v41, a13, v32, v40);
                }

                int v26 = ++v27;
              }

              while (v22 > v27);
            }

            int v20 = ++v94;
          }

          while (v92 > v94);
        }
      }

      else
      {
        BOOL result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v119, &v118);
        int v44 = 1 << v118;
        char v45 = *((_BYTE *)a14 + 15);
        unsigned int v46 = 1 << v45;
        if (v45) {
          BOOL v47 = v46 > a3;
        }
        else {
          BOOL v47 = 1;
        }
        BOOL v48 = v47 || v46 > a4;
        int v49 = (~(-1 << v45) + a3) & (-1 << v45);
        if (v48) {
          int v50 = a3;
        }
        else {
          int v50 = v49;
        }
        unsigned int v99 = a8 >> v118;
        unsigned int v101 = 1 << v118;
        int v51 = v44 - 1;
        unsigned int v97 = a12 + a8;
        char v95 = v118;
        unsigned int v52 = (v44 - 1 + a12 + a8) >> v118;
        if (a8 >> v118 < v52)
        {
          uint64_t v53 = v119[0];
          uint64_t v54 = (1 << SLOBYTE(v119[0]));
          unsigned int v91 = (v50 + ~(-1 << v53)) >> v53;
          uint64_t v55 = v115 >> SLOBYTE(v119[0]);
          unsigned int v56 = a11 + v115;
          unsigned int v57 = ((_DWORD)v54 - 1 + a11 + v115) >> SLOBYTE(v119[0]);
          uint64_t v58 = ((_DWORD)v54 - 1) & v115;
          unsigned int v59 = (v54 - 1) & (a11 + v115);
          BOOL result = (v54 - v58);
          int v85 = v51 & v97;
          uint64_t v87 = v51 & a8;
          else {
            unsigned int v60 = 1 << SLOBYTE(v119[0]);
          }
          if (v101 >= a6) {
            unsigned int v61 = a6;
          }
          else {
            unsigned int v61 = 1 << v118;
          }
          int v62 = v57 - v55;
          unsigned int v63 = a8 >> v118;
          unsigned int v93 = v52;
          unsigned int v89 = ((_DWORD)v54 - 1 + a11 + v115) >> SLOBYTE(v119[0]);
          uint64_t v104 = v17;
          uint64_t v106 = ((_DWORD)v54 - 1) & v115;
          do
          {
            if (v57 <= v55)
            {
              unsigned int v80 = v63 + 1;
            }

            else
            {
              int v64 = 0;
              unsigned int v65 = v63 << v95;
              unsigned int v103 = v63 + 1;
              unsigned int v66 = v101;
              if (v97 < (v63 + 1) << v95) {
                unsigned int v66 = v85;
              }
              unsigned int v67 = v101 - v87;
              if (v97 < (v63 + 1) << v95) {
                unsigned int v67 = v19;
              }
              if (v65 < a8) {
                unsigned int v66 = v67;
              }
              unsigned int v116 = v66;
              if (v65 >= a8) {
                unsigned int v68 = 0;
              }
              else {
                unsigned int v68 = v87;
              }
              unsigned int v112 = v68;
              uint64_t v110 = (v68 + ((v63 - v99) << v95) - v87) * v18;
              int v108 = v55 + v63 * v91;
              do
              {
                unsigned int v69 = ((_DWORD)v55 + v64) << v53;
                unsigned int v70 = ((_DWORD)v55 + v64 + 1) << v53;
                BOOL v71 = v56 >= v70;
                if (v56 >= v70) {
                  unsigned int v72 = v54;
                }
                else {
                  unsigned int v72 = v59;
                }
                unsigned int v73 = a11;
                if (v71) {
                  unsigned int v73 = result;
                }
                if (v69 >= v115) {
                  uint64_t v74 = 0LL;
                }
                else {
                  uint64_t v74 = v58;
                }
                if (v69 >= v115) {
                  unsigned int v75 = v72;
                }
                else {
                  unsigned int v75 = v73;
                }
                uint64_t v76 = result;
                uint64_t v77 = v53;
                uint64_t v78 = v54;
                uint64_t v79 = v55;
                sub_34BF8( (v108 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v104,  a2 + 8 * ((v74 + (v64 << v53)) - v58) + v110,  v60,  v61,  v75,  v116,  a13,  v74,  v112);
                uint64_t v53 = v77;
                uint64_t v58 = v106;
                BOOL result = v76;
                uint64_t v55 = v79;
                uint64_t v54 = v78;
                ++v64;
              }

              while (v62 != v64);
              uint64_t v18 = a13;
              unsigned int v19 = a12;
              unsigned int v52 = v93;
              unsigned int v57 = v89;
              unsigned int v80 = v103;
            }

            unsigned int v63 = v80;
          }

          while (v80 != v52);
        }
      }
    }

    else
    {
      return sub_34BF8(result, a2, a5, a6, a11, a12, a13, a7, a8);
    }
  }

  return result;
}

uint64_t sub_34BF8( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v11 = a6;
  unsigned int v12 = a5;
  unsigned int v14 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0LL;
  }
  if (a4 <= 1)
  {
    uint64_t v16 = 0LL;
    else {
      uint64_t v17 = sub_34EA8;
    }
LABEL_42:
    HIDWORD(v32) = a5;
    LODWORD(v32) = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, unsigned int))v17)( result,  a2,  v15,  v16,  a8,  a9,  a7,  0LL,  v32,  a6);
  }

  uint64_t v16 = 32 - __clz(a4 - 1);
  else {
    uint64_t v17 = sub_34EA8;
  }
  uint64_t v18 = sub_35274;
  if (a4 == 2 || !(_DWORD)v15) {
    goto LABEL_42;
  }
  uint64_t v33 = v18;
  unsigned int v36 = v16;
  uint64_t v19 = result;
  int v20 = 4 - (a9 & 3);
  if ((a9 & 3) == 0) {
    int v20 = 0;
  }
  unsigned int v21 = 4 - (a8 & 3);
  if ((a8 & 3) == 0) {
    unsigned int v21 = 0;
  }
  int v22 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  unsigned int v23 = v21 + (((_BYTE)a8 + (_BYTE)a5) & 3);
  if (v23 > a5) {
    unsigned int v21 = a5;
  }
  unsigned int v37 = v21;
  if (v23 <= a5) {
    int v24 = ((_BYTE)a8 + (_BYTE)a5) & 3;
  }
  else {
    int v24 = 0;
  }
  int v34 = v24;
  if (v20 + v22 <= a6) {
    unsigned int v25 = v20;
  }
  else {
    unsigned int v25 = a6;
  }
  if (v20 + v22 <= a6) {
    int v26 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  }
  else {
    int v26 = 0;
  }
  int v35 = v17;
  if (v25)
  {
    HIDWORD(v30) = a5;
    LODWORD(v30) = 0;
    BOOL result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, void, uint64_t, unsigned int))v17)( result,  a2,  v15,  v36,  a8,  a9,  a7,  0LL,  v30,  v25);
    v11 -= v25;
  }

  if (v26)
  {
    v11 -= v26;
    *(void *)((char *)&v31 + 4) = __PAIR64__(v26, v12);
    LODWORD(v31) = v11 + v25;
    uint64_t v27 = v19;
    uint64_t v28 = v19;
    uint64_t v29 = v36;
    BOOL result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, void, void, _DWORD))v35)( v28,  a2,  v15,  v36,  a8,  a9,  a7,  0LL,  v31,  DWORD2(v31));
  }

  else
  {
    uint64_t v27 = v19;
    uint64_t v29 = v36;
  }

  if (v11)
  {
    if (v37)
    {
      BOOL result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, unint64_t, unsigned int))v35)( v27,  a2,  v15,  v29,  a8,  a9,  a7,  0LL,  __PAIR64__(v37, v25),  v11);
      v12 -= v37;
    }

    if (v34)
    {
      v12 -= v34;
      BOOL result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, unint64_t, unsigned int))v35)( v27,  a2,  v15,  v29,  a8,  a9,  a7,  v12 + v37,  __PAIR64__(v34, v25),  v11);
    }

    if (v12) {
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))v33)( v27,  a2,  v15,  v29,  a8,  a9,  a7);
    }
  }

  return result;
}

uint64_t sub_34EA8( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  uint64_t v18 = sub_34508(~(-1 << a3), 0, a3, a4);
  uint64_t v19 = sub_34508(0, ~(-1 << a4), a3, a4);
  uint64_t result = sub_34508(a8 + a5, 0, a3, a4);
  if (a11)
  {
    uint64_t v21 = result;
    unsigned int v28 = a8;
    uint64_t v22 = a2 + a9 * a7;
    uint64_t result = sub_34508(0, a9 + a6, a3, a4);
    for (int i = 0; i != a11; ++i)
    {
      if (a10)
      {
        int v24 = (uint64_t *)(v22 + 8LL * v28);
        int v25 = a10;
        uint64_t v26 = v21;
        do
        {
          uint64_t v27 = *v24++;
          *(void *)(a1 + 8 * (v26 + result)) = v27;
          uint64_t v26 = (v26 - v18) & v18;
          --v25;
        }

        while (v25);
      }

      uint64_t result = (result - v19) & v19;
      v22 += a7;
    }
  }

  return result;
}

uint64_t sub_34FD4( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  uint64_t v18 = sub_34508(~(-1 << a3), 0, a3, a4);
  uint64_t v19 = sub_34508(0, ~(-1 << a4), a3, a4);
  uint64_t result = sub_34508(a8 + a5, 0, a3, a4);
  if (a11)
  {
    uint64_t v21 = result;
    unsigned int v28 = a8;
    uint64_t v22 = a2 + a9 * a7;
    uint64_t result = sub_34508(0, a9 + a6, a3, a4);
    for (int i = 0; i != a11; ++i)
    {
      if (a10)
      {
        int v24 = (uint64_t *)(v22 + 8LL * v28);
        int v25 = a10;
        uint64_t v26 = v21;
        do
        {
          uint64_t v27 = *v24++;
          *(void *)(a1 + 8 * (v26 + result)) = v27;
          uint64_t v26 = (v26 - v18) & v18;
          --v25;
        }

        while (v25);
      }

      uint64_t result = (result - v19) & v19;
      v22 += a7;
    }
  }

  return result;
}

uint64_t sub_35100( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  uint64_t v17 = sub_34508(~(-1 << a3) & 0x7FFFFFFC, 0, a3, a4);
  uint64_t v18 = sub_34508(0, ~(-1 << a4) & 0x7FFFFFFC, a3, a4);
  uint64_t result = sub_34508(a8 + a5, 0, a3, a4);
  if (a11)
  {
    uint64_t v20 = result;
    uint64_t v21 = a2 + a9 * a7;
    uint64_t result = sub_34508(0, a9 + a6, a3, a4);
    for (unsigned int i = 0; i < a11; i += 4)
    {
      if (a10)
      {
        unsigned int v23 = 0;
        int v24 = (int64x2_t *)(v21 + 8LL * a8);
        uint64_t v25 = v20;
        do
        {
          uint64_t v26 = (int64x2_t *)(a1 + 8 * (v25 + result));
          int64x2_t v27 = v24[1];
          int64x2_t v29 = *(int64x2_t *)((char *)v24 + a7);
          int64x2_t v30 = *(int64x2_t *)((char *)&v24[1] + a7);
          unsigned int v28 = (int64x2_t *)((char *)v24 + a7 + a7);
          int64x2_t v32 = *v28;
          int64x2_t v33 = v28[1];
          __int128 v31 = (int64x2_t *)((char *)v28 + a7);
          int64x2_t v34 = *v31;
          int64x2_t v35 = v31[1];
          int64x2_t v36 = vtrn2q_s64(*v24, v29);
          *uint64_t v26 = vtrn1q_s64(*v24, v29);
          v26[1] = v36;
          uint64_t v26[2] = vtrn1q_s64(v32, v34);
          v26[3] = vtrn2q_s64(v32, v34);
          v26 += 4;
          *uint64_t v26 = vtrn1q_s64(v27, v30);
          v26[1] = vtrn2q_s64(v27, v30);
          uint64_t v26[2] = vtrn1q_s64(v33, v35);
          v26[3] = vtrn2q_s64(v33, v35);
          uint64_t v25 = (v25 - v17) & v17;
          v24 += 2;
          v23 += 4;
        }

        while (v23 < a10);
      }

      uint64_t result = (result - v18) & v18;
      v21 += 4 * a7;
    }
  }

  return result;
}

uint64_t sub_35274( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  uint64_t v17 = sub_34508(~(-1 << a3) & 0x7FFFFFFC, 0, a3, a4);
  uint64_t v18 = sub_34508(0, ~(-1 << a4) & 0x7FFFFFFC, a3, a4);
  uint64_t result = sub_34508(a8 + a5, 0, a3, a4);
  if (a11)
  {
    uint64_t v20 = result;
    uint64_t v21 = a2 + a9 * a7;
    uint64_t result = sub_34508(0, a9 + a6, a3, a4);
    for (unsigned int i = 0; i < a11; i += 4)
    {
      if (a10)
      {
        unsigned int v23 = 0;
        int v24 = (int64x2_t *)(v21 + 8LL * a8);
        uint64_t v25 = v20;
        do
        {
          uint64_t v26 = (int64x2_t *)(a1 + 8 * (v25 + result));
          int64x2_t v27 = v24[1];
          int64x2_t v29 = *(int64x2_t *)((char *)v24 + a7);
          int64x2_t v30 = *(int64x2_t *)((char *)&v24[1] + a7);
          unsigned int v28 = (int64x2_t *)((char *)v24 + a7 + a7);
          int64x2_t v32 = *v28;
          int64x2_t v33 = v28[1];
          __int128 v31 = (int64x2_t *)((char *)v28 + a7);
          int64x2_t v34 = *v31;
          int64x2_t v35 = v31[1];
          int64x2_t v36 = vtrn2q_s64(*v24, v29);
          *uint64_t v26 = vtrn1q_s64(*v24, v29);
          v26[1] = v36;
          uint64_t v26[2] = vtrn1q_s64(v32, v34);
          v26[3] = vtrn2q_s64(v32, v34);
          v26 += 4;
          *uint64_t v26 = vtrn1q_s64(v27, v30);
          v26[1] = vtrn2q_s64(v27, v30);
          uint64_t v26[2] = vtrn1q_s64(v33, v35);
          v26[3] = vtrn2q_s64(v33, v35);
          uint64_t v25 = (v25 - v17) & v17;
          v24 += 2;
          v23 += 4;
        }

        while (v23 < a10);
      }

      uint64_t result = (result - v18) & v18;
      v21 += 4 * a7;
    }
  }

  return result;
}

uint64_t sub_353E8( uint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v159 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v162);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v161, &v160);
          unsigned int v120 = v163;
          if (v163)
          {
            int v20 = 0;
            unsigned __int16 v122 = 0;
            char v118 = v161;
            unsigned int v114 = a7 >> v161;
            char v152 = v160;
            unsigned int v139 = a8 >> v160;
            unsigned int v156 = v164;
            unsigned int v112 = a11 + a7;
            int v108 = ((1 << v161) - 1) & a7;
            int v110 = ((1 << v161) - 1) & (a11 + a7);
            int v106 = (1 << v161) - v108;
            unsigned int v137 = a12 + a8;
            int v124 = ((1 << v160) - 1) & a8;
            int v133 = (1 << v160) - v124;
            int v135 = ((1 << v160) - 1) & (a12 + a8);
            int v116 = 1 << v161;
            if (1 << v161 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v161;
            }
            int v141 = 1 << v160;
            if (1 << v160 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v160;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v148 = v24;
            unsigned int v131 = ~(-1 << v24);
            int v150 = v23;
            unsigned int v129 = ~(-1 << v23);
            do
            {
              if (v156)
              {
                int v25 = 0;
                unsigned __int16 v26 = 0;
                unsigned int v27 = (v20 + v114) << v118;
                unsigned int v28 = a11;
                if (v112 >= (v20 + v114 + 1) << v118) {
                  unsigned int v28 = v106;
                }
                int v29 = v116;
                if (v112 < (v20 + v114 + 1) << v118) {
                  int v29 = v110;
                }
                int v30 = v20 << v118;
                if (v27 >= a7) {
                  unsigned int v31 = v29;
                }
                else {
                  unsigned int v31 = v28;
                }
                unsigned int v32 = v108;
                if (v27 >= a7) {
                  unsigned int v32 = 0;
                }
                unsigned int v144 = v32;
                uint64_t v126 = (uint64_t)a2 + 12 * v32 + 12 * v30;
                do
                {
                  LOWORD(v33) = v122;
                  HIWORD(v33) = v26;
                  uint64_t result = sub_34358(v162, v33);
                  int v34 = *(_DWORD *)(v18 + 4LL * result);
                  if (v34 < 0)
                  {
                    unint64_t v35 = v159 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                    unsigned int v36 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v36) {
                      v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v37 = a12;
                    if (v137 >= (v25 + v139 + 1) << v152) {
                      unsigned int v37 = v133;
                    }
                    int v38 = v141;
                    if (v137 < (v25 + v139 + 1) << v152) {
                      int v38 = v135;
                    }
                    if ((v25 + v139) << v152 >= a8) {
                      unsigned int v39 = v38;
                    }
                    else {
                      unsigned int v39 = v37;
                    }
                    uint64_t v40 = sub_34508(v131, 0, v148, v150);
                    uint64_t v41 = sub_34508(0, v129, v148, v150);
                    uint64_t result = sub_34508(v144, 0, v148, v150);
                    if (v39)
                    {
                      uint64_t v42 = result;
                      if ((v25 + v139) << v152 >= a8) {
                        unsigned int v43 = 0;
                      }
                      else {
                        unsigned int v43 = v124;
                      }
                      int v44 = (uint64_t *)(v126 + (v43 + (v25 << v152)) * a13);
                      uint64_t result = sub_34508(0, v43, v148, v150);
                      for (int i = 0; i != v39; ++i)
                      {
                        unsigned int v46 = v31;
                        BOOL v47 = v44;
                        for (uint64_t j = v42; v46; --v46)
                        {
                          unint64_t v49 = v35 + 12 * (j + result);
                          uint64_t v50 = *v47;
                          *(_DWORD *)(v49 + 8) = *((_DWORD *)v47 + 2);
                          *(void *)unint64_t v49 = v50;
                          uint64_t j = (j - v40) & v40;
                          BOOL v47 = (uint64_t *)((char *)v47 + 12);
                        }

                        uint64_t result = (result - v41) & v41;
                        int v44 = (uint64_t *)((char *)v44 + a13);
                      }
                    }
                  }

                  int v25 = ++v26;
                  uint64_t v18 = v159;
                }

                while (v156 > v26);
              }

              int v20 = ++v122;
            }

            while (v120 > v122);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v162, &v161);
          unsigned int v66 = 1 << v161;
          char v67 = *((_BYTE *)a14 + 15);
          unsigned int v68 = 1 << v67;
          if (v67) {
            BOOL v69 = v68 > a3;
          }
          else {
            BOOL v69 = 1;
          }
          BOOL v70 = v69 || v68 > a4;
          int v71 = (~(-1 << v67) + a3) & (-1 << v67);
          if (v70) {
            int v72 = a3;
          }
          else {
            int v72 = v71;
          }
          unsigned int v123 = a8 >> v161;
          int v125 = 1 << v161;
          unsigned int v73 = v66 - 1;
          unsigned int v121 = a12 + a8;
          char v119 = v161;
          unsigned int v74 = (v66 - 1 + a12 + a8) >> v161;
          if (a8 >> v161 < v74)
          {
            unsigned int v115 = (v72 + ~(-1 << SLOBYTE(v162[0]))) >> SLOBYTE(v162[0]);
            unsigned int v75 = a7 >> SLOBYTE(v162[0]);
            char v151 = v162[0];
            unsigned int v145 = ((1 << SLOBYTE(v162[0])) - 1 + a11 + a7) >> SLOBYTE(v162[0]);
            int v140 = ((1 << SLOBYTE(v162[0])) - 1) & (a11 + a7);
            unsigned int v142 = a11 + a7;
            uint64_t v149 = ((1 << SLOBYTE(v162[0])) - 1) & a7;
            unsigned int v138 = (1 << SLOBYTE(v162[0])) - v149;
            int v111 = v73 & v121;
            unsigned int v76 = 1 << v161;
            uint64_t v113 = v73 & a8;
            unsigned int v109 = v66 - v113;
            int v143 = 1 << SLOBYTE(v162[0]);
            if (1 << SLOBYTE(v162[0]) >= a5) {
              unsigned int v77 = a5;
            }
            else {
              unsigned int v77 = 1 << SLOBYTE(v162[0]);
            }
            if (v66 >= a6) {
              unsigned int v76 = a6;
            }
            unsigned int v78 = 32 - __clz(v76 - 1);
            if (v76 < 2) {
              unsigned int v78 = 0;
            }
            unsigned int v79 = 32 - __clz(v77 - 1);
            if (v77 >= 2) {
              unsigned int v80 = v79;
            }
            else {
              unsigned int v80 = 0;
            }
            int v153 = v80;
            unsigned int v107 = ~(-1 << v80);
            int v155 = v78;
            unsigned int v105 = ~(-1 << v78);
            unsigned int v81 = a8 >> v161;
            unsigned int v117 = (v66 - 1 + a12 + a8) >> v161;
            unsigned int v136 = a7 >> SLOBYTE(v162[0]);
            do
            {
              if (v75 >= v145)
              {
                unsigned int v104 = v81 + 1;
              }

              else
              {
                unsigned int v157 = v81 << v119;
                unsigned int v127 = v81 + 1;
                if (v121 >= (v81 + 1) << v119) {
                  int v82 = v125;
                }
                else {
                  int v82 = v111;
                }
                if (v121 >= (v81 + 1) << v119) {
                  unsigned int v83 = v109;
                }
                else {
                  unsigned int v83 = v19;
                }
                int v134 = v81 * v115;
                uint64_t v84 = sub_34508(v107, 0, v153, v155);
                uint64_t v85 = sub_34508(0, v105, v153, v155);
                if (v157 >= a8) {
                  int v86 = v82;
                }
                else {
                  int v86 = v83;
                }
                if (v157 >= a8) {
                  unsigned int v87 = 0;
                }
                else {
                  unsigned int v87 = v113;
                }
                unsigned int v132 = v87;
                uint64_t v130 = (v87 + ((v81 - v123) << v119) - v113) * a13;
                unsigned int v88 = v75;
                do
                {
                  unsigned int v89 = v88 << v151;
                  unsigned int v158 = v88 + 1;
                  unsigned int v90 = a11;
                  if (v142 >= (v88 + 1) << v151) {
                    unsigned int v90 = v138;
                  }
                  int v91 = v143;
                  if (v142 < (v88 + 1) << v151) {
                    int v91 = v140;
                  }
                  if (v89 >= a7) {
                    unsigned int v92 = 0;
                  }
                  else {
                    unsigned int v92 = v149;
                  }
                  if (v89 >= a7) {
                    unsigned int v93 = v91;
                  }
                  else {
                    unsigned int v93 = v90;
                  }
                  int v94 = a14[3];
                  int v147 = *((unsigned __int8 *)a14 + 9);
                  uint64_t result = sub_34508(v92, 0, v153, v155);
                  if (v86)
                  {
                    uint64_t v95 = result;
                    uint64_t v96 = (v88 + v134) * v94 * v147 + v159;
                    unsigned int v97 = (uint64_t *)((char *)a2 + 12 * (v92 + ((v88 - v136) << v151) - v149) + v130);
                    uint64_t result = sub_34508(0, v132, v153, v155);
                    for (int k = 0; k != v86; ++k)
                    {
                      unsigned int v99 = v93;
                      int v100 = v97;
                      for (uint64_t m = v95; v99; --v99)
                      {
                        uint64_t v102 = v96 + 12 * (m + result);
                        uint64_t v103 = *v100;
                        *(_DWORD *)(v102 + 8) = *((_DWORD *)v100 + 2);
                        *(void *)uint64_t v102 = v103;
                        uint64_t m = (m - v84) & v84;
                        int v100 = (uint64_t *)((char *)v100 + 12);
                      }

                      uint64_t result = (result - v85) & v85;
                      unsigned int v97 = (uint64_t *)((char *)v97 + a13);
                    }
                  }

                  ++v88;
                }

                while (v158 != v145);
                unsigned int v19 = a12;
                unsigned int v74 = v117;
                unsigned int v75 = v136;
                unsigned int v104 = v127;
              }

              unsigned int v81 = v104;
            }

            while (v104 != v74);
          }
        }
      }

      else
      {
        unsigned int v51 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v52 = v51;
        }
        else {
          int v52 = 0;
        }
        unsigned int v53 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v54 = v53;
        }
        else {
          int v54 = 0;
        }
        uint64_t v55 = sub_34508(~(-1 << v54), 0, v54, v52);
        uint64_t v56 = sub_34508(0, ~(-1 << v52), v54, v52);
        uint64_t result = sub_34508(a7, 0, v54, v52);
        if (a12)
        {
          uint64_t v57 = result;
          uint64_t result = sub_34508(0, a8, v54, v52);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v59 = a11;
            unsigned int v60 = v15;
            for (iint i = v57; v59; --v59)
            {
              uint64_t v62 = v18 + 12 * (ii + result);
              uint64_t v63 = *v60;
              *(_DWORD *)(v62 + 8) = *((_DWORD *)v60 + 2);
              *(void *)uint64_t v62 = v63;
              iint i = (ii - v55) & v55;
              unsigned int v60 = (uint64_t *)((char *)v60 + 12);
            }

            uint64_t result = (result - v56) & v56;
            uint64_t v15 = (uint64_t *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_35CD0( uint64_t result, int *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v159 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v162);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v161, &v160);
          unsigned int v120 = v163;
          if (v163)
          {
            int v20 = 0;
            unsigned __int16 v122 = 0;
            char v118 = v161;
            unsigned int v114 = a7 >> v161;
            char v152 = v160;
            unsigned int v139 = a8 >> v160;
            unsigned int v156 = v164;
            unsigned int v112 = a11 + a7;
            int v108 = ((1 << v161) - 1) & a7;
            int v110 = ((1 << v161) - 1) & (a11 + a7);
            int v106 = (1 << v161) - v108;
            unsigned int v137 = a12 + a8;
            int v124 = ((1 << v160) - 1) & a8;
            int v133 = (1 << v160) - v124;
            int v135 = ((1 << v160) - 1) & (a12 + a8);
            int v116 = 1 << v161;
            if (1 << v161 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v161;
            }
            int v141 = 1 << v160;
            if (1 << v160 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v160;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v148 = v24;
            unsigned int v131 = ~(-1 << v24);
            int v150 = v23;
            unsigned int v129 = ~(-1 << v23);
            do
            {
              if (v156)
              {
                int v25 = 0;
                unsigned __int16 v26 = 0;
                unsigned int v27 = (v20 + v114) << v118;
                unsigned int v28 = a11;
                if (v112 >= (v20 + v114 + 1) << v118) {
                  unsigned int v28 = v106;
                }
                int v29 = v116;
                if (v112 < (v20 + v114 + 1) << v118) {
                  int v29 = v110;
                }
                int v30 = v20 << v118;
                if (v27 >= a7) {
                  unsigned int v31 = v29;
                }
                else {
                  unsigned int v31 = v28;
                }
                unsigned int v32 = v108;
                if (v27 >= a7) {
                  unsigned int v32 = 0;
                }
                unsigned int v144 = v32;
                uint64_t v126 = (uint64_t)a2 + 6 * v32 + 6 * v30;
                do
                {
                  LOWORD(v33) = v122;
                  HIWORD(v33) = v26;
                  uint64_t result = sub_34358(v162, v33);
                  int v34 = *(_DWORD *)(v18 + 4LL * result);
                  if (v34 < 0)
                  {
                    unint64_t v35 = v159 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                    unsigned int v36 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v36) {
                      v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v37 = a12;
                    if (v137 >= (v25 + v139 + 1) << v152) {
                      unsigned int v37 = v133;
                    }
                    int v38 = v141;
                    if (v137 < (v25 + v139 + 1) << v152) {
                      int v38 = v135;
                    }
                    if ((v25 + v139) << v152 >= a8) {
                      unsigned int v39 = v38;
                    }
                    else {
                      unsigned int v39 = v37;
                    }
                    uint64_t v40 = sub_34508(v131, 0, v148, v150);
                    uint64_t v41 = sub_34508(0, v129, v148, v150);
                    uint64_t result = sub_34508(v144, 0, v148, v150);
                    if (v39)
                    {
                      uint64_t v42 = result;
                      if ((v25 + v139) << v152 >= a8) {
                        unsigned int v43 = 0;
                      }
                      else {
                        unsigned int v43 = v124;
                      }
                      int v44 = (int *)(v126 + (v43 + (v25 << v152)) * a13);
                      uint64_t result = sub_34508(0, v43, v148, v150);
                      for (int i = 0; i != v39; ++i)
                      {
                        unsigned int v46 = v31;
                        BOOL v47 = v44;
                        for (uint64_t j = v42; v46; --v46)
                        {
                          unint64_t v49 = v35 + 6 * (j + result);
                          int v50 = *v47;
                          *(_WORD *)(v49 + 4) = *((_WORD *)v47 + 2);
                          *(_DWORD *)unint64_t v49 = v50;
                          uint64_t j = (j - v40) & v40;
                          BOOL v47 = (int *)((char *)v47 + 6);
                        }

                        uint64_t result = (result - v41) & v41;
                        int v44 = (int *)((char *)v44 + a13);
                      }
                    }
                  }

                  int v25 = ++v26;
                  uint64_t v18 = v159;
                }

                while (v156 > v26);
              }

              int v20 = ++v122;
            }

            while (v120 > v122);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v162, &v161);
          unsigned int v66 = 1 << v161;
          char v67 = *((_BYTE *)a14 + 15);
          unsigned int v68 = 1 << v67;
          if (v67) {
            BOOL v69 = v68 > a3;
          }
          else {
            BOOL v69 = 1;
          }
          BOOL v70 = v69 || v68 > a4;
          int v71 = (~(-1 << v67) + a3) & (-1 << v67);
          if (v70) {
            int v72 = a3;
          }
          else {
            int v72 = v71;
          }
          unsigned int v123 = a8 >> v161;
          int v125 = 1 << v161;
          unsigned int v73 = v66 - 1;
          unsigned int v121 = a12 + a8;
          char v119 = v161;
          unsigned int v74 = (v66 - 1 + a12 + a8) >> v161;
          if (a8 >> v161 < v74)
          {
            unsigned int v115 = (v72 + ~(-1 << SLOBYTE(v162[0]))) >> SLOBYTE(v162[0]);
            unsigned int v75 = a7 >> SLOBYTE(v162[0]);
            char v151 = v162[0];
            unsigned int v145 = ((1 << SLOBYTE(v162[0])) - 1 + a11 + a7) >> SLOBYTE(v162[0]);
            int v140 = ((1 << SLOBYTE(v162[0])) - 1) & (a11 + a7);
            unsigned int v142 = a11 + a7;
            uint64_t v149 = ((1 << SLOBYTE(v162[0])) - 1) & a7;
            unsigned int v138 = (1 << SLOBYTE(v162[0])) - v149;
            int v111 = v73 & v121;
            unsigned int v76 = 1 << v161;
            uint64_t v113 = v73 & a8;
            unsigned int v109 = v66 - v113;
            int v143 = 1 << SLOBYTE(v162[0]);
            if (1 << SLOBYTE(v162[0]) >= a5) {
              unsigned int v77 = a5;
            }
            else {
              unsigned int v77 = 1 << SLOBYTE(v162[0]);
            }
            if (v66 >= a6) {
              unsigned int v76 = a6;
            }
            unsigned int v78 = 32 - __clz(v76 - 1);
            if (v76 < 2) {
              unsigned int v78 = 0;
            }
            unsigned int v79 = 32 - __clz(v77 - 1);
            if (v77 >= 2) {
              unsigned int v80 = v79;
            }
            else {
              unsigned int v80 = 0;
            }
            int v153 = v80;
            unsigned int v107 = ~(-1 << v80);
            int v155 = v78;
            unsigned int v105 = ~(-1 << v78);
            unsigned int v81 = a8 >> v161;
            unsigned int v117 = (v66 - 1 + a12 + a8) >> v161;
            unsigned int v136 = a7 >> SLOBYTE(v162[0]);
            do
            {
              if (v75 >= v145)
              {
                unsigned int v104 = v81 + 1;
              }

              else
              {
                unsigned int v157 = v81 << v119;
                unsigned int v127 = v81 + 1;
                if (v121 >= (v81 + 1) << v119) {
                  int v82 = v125;
                }
                else {
                  int v82 = v111;
                }
                if (v121 >= (v81 + 1) << v119) {
                  unsigned int v83 = v109;
                }
                else {
                  unsigned int v83 = v19;
                }
                int v134 = v81 * v115;
                uint64_t v84 = sub_34508(v107, 0, v153, v155);
                uint64_t v85 = sub_34508(0, v105, v153, v155);
                if (v157 >= a8) {
                  int v86 = v82;
                }
                else {
                  int v86 = v83;
                }
                if (v157 >= a8) {
                  unsigned int v87 = 0;
                }
                else {
                  unsigned int v87 = v113;
                }
                unsigned int v132 = v87;
                uint64_t v130 = (v87 + ((v81 - v123) << v119) - v113) * a13;
                unsigned int v88 = v75;
                do
                {
                  unsigned int v89 = v88 << v151;
                  unsigned int v158 = v88 + 1;
                  unsigned int v90 = a11;
                  if (v142 >= (v88 + 1) << v151) {
                    unsigned int v90 = v138;
                  }
                  int v91 = v143;
                  if (v142 < (v88 + 1) << v151) {
                    int v91 = v140;
                  }
                  if (v89 >= a7) {
                    unsigned int v92 = 0;
                  }
                  else {
                    unsigned int v92 = v149;
                  }
                  if (v89 >= a7) {
                    unsigned int v93 = v91;
                  }
                  else {
                    unsigned int v93 = v90;
                  }
                  int v94 = a14[3];
                  int v147 = *((unsigned __int8 *)a14 + 9);
                  uint64_t result = sub_34508(v92, 0, v153, v155);
                  if (v86)
                  {
                    uint64_t v95 = result;
                    uint64_t v96 = (v88 + v134) * v94 * v147 + v159;
                    unsigned int v97 = (int *)((char *)a2 + 6 * (v92 + ((v88 - v136) << v151) - v149) + v130);
                    uint64_t result = sub_34508(0, v132, v153, v155);
                    for (int k = 0; k != v86; ++k)
                    {
                      unsigned int v99 = v93;
                      int v100 = v97;
                      for (uint64_t m = v95; v99; --v99)
                      {
                        uint64_t v102 = v96 + 6 * (m + result);
                        int v103 = *v100;
                        *(_WORD *)(v102 + 4) = *((_WORD *)v100 + 2);
                        *(_DWORD *)uint64_t v102 = v103;
                        uint64_t m = (m - v84) & v84;
                        int v100 = (int *)((char *)v100 + 6);
                      }

                      uint64_t result = (result - v85) & v85;
                      unsigned int v97 = (int *)((char *)v97 + a13);
                    }
                  }

                  ++v88;
                }

                while (v158 != v145);
                unsigned int v19 = a12;
                unsigned int v74 = v117;
                unsigned int v75 = v136;
                unsigned int v104 = v127;
              }

              unsigned int v81 = v104;
            }

            while (v104 != v74);
          }
        }
      }

      else
      {
        unsigned int v51 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v52 = v51;
        }
        else {
          int v52 = 0;
        }
        unsigned int v53 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v54 = v53;
        }
        else {
          int v54 = 0;
        }
        uint64_t v55 = sub_34508(~(-1 << v54), 0, v54, v52);
        uint64_t v56 = sub_34508(0, ~(-1 << v52), v54, v52);
        uint64_t result = sub_34508(a7, 0, v54, v52);
        if (a12)
        {
          uint64_t v57 = result;
          uint64_t result = sub_34508(0, a8, v54, v52);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v59 = a11;
            unsigned int v60 = v15;
            for (iint i = v57; v59; --v59)
            {
              uint64_t v62 = v18 + 6 * (ii + result);
              int v63 = *v60;
              *(_WORD *)(v62 + 4) = *((_WORD *)v60 + 2);
              *(_DWORD *)uint64_t v62 = v63;
              iint i = (ii - v55) & v55;
              unsigned int v60 = (int *)((char *)v60 + 6);
            }

            uint64_t result = (result - v56) & v56;
            uint64_t v15 = (int *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_365B8( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v18 = result;
    uint64_t v19 = a13;
    unsigned int v20 = a12;
    if (a14)
    {
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v124);
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v123, &v122);
        unsigned int v96 = v125;
        if (v125)
        {
          int v21 = 0;
          unsigned __int16 v98 = 0;
          char v22 = v122;
          char v92 = v123;
          unsigned int v88 = a7 >> v123;
          unsigned int v113 = a8 >> v122;
          unsigned int v23 = v126;
          unsigned int v87 = a11 + a7;
          int v85 = ((1 << v123) - 1) & a7;
          int v86 = ((1 << v123) - 1) & (a11 + a7);
          int v84 = (1 << v123) - v85;
          unsigned int v111 = a12 + a8;
          int v109 = ((1 << v122) - 1) & (a12 + a8);
          int v106 = ((1 << v122) - 1) & a8;
          int v104 = (1 << v122) - v106;
          int v90 = 1 << v123;
          if (1 << v123 >= a5) {
            int v24 = a5;
          }
          else {
            int v24 = 1 << v123;
          }
          int v115 = 1 << v122;
          if (1 << v122 >= a6) {
            int v25 = a6;
          }
          else {
            int v25 = 1 << v122;
          }
          unsigned int v100 = v25;
          unsigned int v102 = v24;
          do
          {
            if (v23)
            {
              int v26 = 0;
              unsigned __int16 v27 = 0;
              unsigned int v28 = (v21 + v88) << v92;
              unsigned int v29 = a11;
              if (v87 >= (v21 + v88 + 1) << v92) {
                unsigned int v29 = v84;
              }
              int v30 = v90;
              if (v87 < (v21 + v88 + 1) << v92) {
                int v30 = v86;
              }
              int v31 = v21 << v92;
              if (v28 >= a7) {
                unsigned int v29 = v30;
              }
              unsigned int v117 = v29;
              if (v28 >= a7) {
                unsigned int v32 = 0;
              }
              else {
                unsigned int v32 = v85;
              }
              uint64_t v33 = v32 + v31 + a2;
              do
              {
                LOWORD(v34) = v98;
                HIWORD(v34) = v27;
                uint64_t result = sub_34358(v124, v34);
                int v35 = *(_DWORD *)(v18 + 4LL * result);
                if (v35 < 0)
                {
                  uint64_t v36 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                  unsigned int v37 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v37) {
                    v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v38 = a12;
                  if (v111 >= (v26 + v113 + 1) << v22) {
                    unsigned int v38 = v104;
                  }
                  unsigned int v39 = v115;
                  if (v111 < (v26 + v113 + 1) << v22) {
                    unsigned int v39 = v109;
                  }
                  unsigned int v40 = v106;
                  if ((v26 + v113) << v22 < a8)
                  {
                    unsigned int v41 = v38;
                  }

                  else
                  {
                    unsigned int v40 = 0;
                    unsigned int v41 = v39;
                  }

                  uint64_t result = sub_36BA4(v36, v33 + (v40 + (v26 << v22)) * a13, v102, v100, v117, v41, a13, v32, v40);
                }

                int v26 = ++v27;
              }

              while (v23 > v27);
            }

            int v21 = ++v98;
          }

          while (v96 > v98);
        }
      }

      else
      {
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v124, &v123);
        int v44 = 1 << v123;
        char v45 = *((_BYTE *)a14 + 15);
        unsigned int v46 = 1 << v45;
        if (v45) {
          BOOL v47 = v46 > a3;
        }
        else {
          BOOL v47 = 1;
        }
        BOOL v48 = v47 || v46 > a4;
        int v49 = (~(-1 << v45) + a3) & (-1 << v45);
        if (v48) {
          int v50 = a3;
        }
        else {
          int v50 = v49;
        }
        unsigned int v103 = a8 >> v123;
        unsigned int v105 = 1 << v123;
        int v51 = v44 - 1;
        unsigned int v101 = a12 + a8;
        char v99 = v123;
        unsigned int v52 = (v44 - 1 + a12 + a8) >> v123;
        if (a8 >> v123 < v52)
        {
          uint64_t v53 = v124[0];
          uint64_t v54 = (1 << SLOBYTE(v124[0]));
          unsigned int v95 = (v50 + ~(-1 << v53)) >> v53;
          uint64_t v55 = a7 >> SLOBYTE(v124[0]);
          unsigned int v56 = a11 + a7;
          unsigned int v57 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v124[0]);
          uint64_t v58 = ((_DWORD)v54 - 1) & a7;
          unsigned int v59 = (v54 - 1) & (a11 + a7);
          unsigned int v60 = v54 - v58;
          int v89 = v51 & v101;
          uint64_t v91 = v51 & a8;
          uint64_t v61 = a2 - v58;
          else {
            unsigned int v62 = 1 << SLOBYTE(v124[0]);
          }
          if (v105 >= a6) {
            uint64_t v63 = a6;
          }
          else {
            uint64_t v63 = v105;
          }
          unsigned int v64 = a8 >> v123;
          unsigned int v97 = v52;
          unsigned int v93 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v124[0]);
          int v110 = v57 - v55;
          unsigned int v112 = v54 - v58;
          uint64_t v108 = v18;
          do
          {
            if (v57 <= v55)
            {
              unsigned int v83 = v64 + 1;
            }

            else
            {
              int v65 = 0;
              unsigned int v66 = v64 << v99;
              unsigned int v107 = v64 + 1;
              unsigned int v67 = v105;
              if (v101 < (v64 + 1) << v99) {
                unsigned int v67 = v89;
              }
              unsigned int v68 = v105 - v91;
              if (v101 < (v64 + 1) << v99) {
                unsigned int v68 = v20;
              }
              if (v66 < a8) {
                unsigned int v67 = v68;
              }
              unsigned int v121 = v67;
              if (v66 >= a8) {
                unsigned int v69 = 0;
              }
              else {
                unsigned int v69 = v91;
              }
              unsigned int v118 = v69;
              uint64_t v116 = (v69 + ((v64 - v103) << v99) - v91) * v19;
              int v114 = v55 + v64 * v95;
              do
              {
                unsigned int v70 = ((_DWORD)v55 + v65) << v53;
                unsigned int v71 = ((_DWORD)v55 + v65 + 1) << v53;
                BOOL v72 = v56 >= v71;
                if (v56 >= v71) {
                  unsigned int v73 = v54;
                }
                else {
                  unsigned int v73 = v59;
                }
                unsigned int v74 = a11;
                if (v72) {
                  unsigned int v74 = v60;
                }
                if (v70 >= a7) {
                  unsigned int v75 = 0;
                }
                else {
                  unsigned int v75 = v58;
                }
                if (v70 >= a7) {
                  unsigned int v76 = v73;
                }
                else {
                  unsigned int v76 = v74;
                }
                uint64_t v77 = v61;
                uint64_t v78 = v53;
                uint64_t v79 = v63;
                uint64_t v80 = v54;
                uint64_t v81 = v55;
                uint64_t v82 = v58;
                uint64_t result = sub_36BA4( (v114 + v65) * a14[3] * *((unsigned __int8 *)a14 + 9) + v108,  v61 + v116 + v75 + (v65 << v53),  v62,  v63,  v76,  v121,  a13,  v75,  v118);
                unsigned int v60 = v112;
                uint64_t v63 = v79;
                uint64_t v53 = v78;
                uint64_t v61 = v77;
                uint64_t v58 = v82;
                uint64_t v55 = v81;
                uint64_t v54 = v80;
                ++v65;
              }

              while (v110 != v65);
              uint64_t v19 = a13;
              unsigned int v20 = a12;
              unsigned int v52 = v97;
              unsigned int v57 = v93;
              unsigned int v83 = v107;
            }

            unsigned int v64 = v83;
          }

          while (v83 != v52);
        }
      }
    }

    else
    {
      return sub_36BA4(result, a2, a5, a6, a11, a12, a13, a7, a8);
    }
  }

  return result;
}

uint64_t sub_36BA4( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v10 = a5;
  uint64_t v12 = result;
  unsigned int v13 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 0;
  }
  int v343 = v14;
  unsigned int v344 = a6;
  if (a4 < 2)
  {
    int v342 = 0;
    goto LABEL_57;
  }

  int v342 = 32 - __clz(a4 - 1);
  if (a4 < 0x11 || v14 <= 3)
  {
LABEL_57:
    uint64_t v332 = sub_34508(~(-1 << v14), 0, v14, v342);
    uint64_t v333 = sub_34508(0, ~(-1 << v342), v14, v342);
    uint64_t result = sub_34508(a8, 0, v14, v342);
    if (v344)
    {
      uint64_t v334 = result;
      uint64_t result = sub_34508(0, a9, v14, v342);
      for (int i = 0; i != v344; ++i)
      {
        if (v10)
        {
          uint64_t v336 = 0LL;
          uint64_t v337 = v334;
          do
          {
            *(_BYTE *)(result + v12 + v337) = *(_BYTE *)(a2 + v336);
            uint64_t v337 = (v337 - v332) & v332;
            ++v336;
          }

          while (v10 != (_DWORD)v336);
        }

        uint64_t result = (result - v333) & v333;
        a2 += a7;
      }
    }

    return result;
  }

  unsigned int v15 = 32 - (a9 & 0x1F);
  if ((a9 & 0x1F) == 0) {
    unsigned int v15 = 0;
  }
  int v16 = 32 - (a8 & 0x1F);
  if ((a8 & 0x1F) == 0) {
    int v16 = 0;
  }
  int v17 = ((_BYTE)a8 + (_BYTE)a5) & 0x1F;
  int v18 = ((_BYTE)a9 + (_BYTE)a6) & 0x1F;
  if (v16 + v17 <= a5) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = a5;
  }
  if (v16 + v17 <= a5) {
    int v20 = ((_BYTE)a8 + (_BYTE)a5) & 0x1F;
  }
  else {
    int v20 = 0;
  }
  int v339 = v20;
  if (v15 + v18 <= a6) {
    uint64_t v21 = v15;
  }
  else {
    uint64_t v21 = a6;
  }
  if (v15 + v18 <= a6) {
    int v22 = ((_BYTE)a9 + (_BYTE)a6) & 0x1F;
  }
  else {
    int v22 = 0;
  }
  uint64_t v340 = v21;
  if ((_DWORD)v21)
  {
    uint64_t v23 = sub_34508(~(-1 << v343), 0, v343, v342);
    uint64_t v24 = sub_34508(0, ~(-1 << v342), v343, v342);
    uint64_t v25 = sub_34508(a8, 0, v343, v342);
    uint64_t result = sub_34508(0, a9, v343, v342);
    uint64_t v21 = v340;
    int v26 = 0;
    uint64_t v27 = a2;
    do
    {
      if (v10)
      {
        uint64_t v28 = 0LL;
        uint64_t v29 = v25;
        do
        {
          *(_BYTE *)(result + v12 + v29) = *(_BYTE *)(v27 + v28);
          uint64_t v29 = (v29 - v23) & v23;
          ++v28;
        }

        while (v10 != (_DWORD)v28);
      }

      uint64_t result = (result - v24) & v24;
      v27 += a7;
      ++v26;
    }

    while (v26 != (_DWORD)v340);
    a6 = v344 - v340;
  }

  if (v22)
  {
    unsigned int v345 = a6 - v22;
    uint64_t v338 = a6 - v22 + v21;
    uint64_t v30 = sub_34508(~(-1 << v343), 0, v343, v342);
    uint64_t v31 = sub_34508(0, ~(-1 << v342), v343, v342);
    uint64_t v32 = sub_34508(a8, 0, v343, v342);
    uint64_t v33 = a2 + v338 * a7;
    uint64_t result = sub_34508(0, v338 + a9, v343, v342);
    for (int j = 0; j != v22; ++j)
    {
      if (v10)
      {
        uint64_t v35 = 0LL;
        uint64_t v36 = v32;
        do
        {
          *(_BYTE *)(result + v12 + v36) = *(_BYTE *)(v33 + v35);
          uint64_t v36 = (v36 - v30) & v30;
          ++v35;
        }

        while (v10 != (_DWORD)v35);
      }

      uint64_t result = (result - v31) & v31;
      v33 += a7;
    }

    a6 = v345;
    uint64_t v21 = v340;
  }

  if (a6)
  {
    unsigned int v346 = a6;
    if (v19)
    {
      uint64_t v37 = v21;
      uint64_t v38 = sub_34508(~(-1 << v343), 0, v343, v342);
      uint64_t v39 = sub_34508(0, ~(-1 << v342), v343, v342);
      uint64_t v40 = sub_34508(a8, 0, v343, v342);
      int v41 = v37;
      uint64_t v42 = a2 + v37 * a7;
      uint64_t result = sub_34508(0, v41 + a9, v343, v342);
      int v43 = 0;
      int v44 = v339;
      do
      {
        uint64_t v45 = 0LL;
        uint64_t v46 = v40;
        do
        {
          *(_BYTE *)(result + v12 + v46) = *(_BYTE *)(v42 + v45);
          uint64_t v46 = (v46 - v38) & v38;
          ++v45;
        }

        while (v19 != (_DWORD)v45);
        uint64_t result = (result - v39) & v39;
        v42 += a7;
        ++v43;
      }

      while (v43 != v346);
      v10 -= v19;
      if (!v339)
      {
LABEL_50:
        if (v10)
        {
          uint64_t v57 = sub_34508(~(-1 << v343) & 0x7FFFFFE0, 0, v343, v342);
          uint64_t v58 = sub_34508(0, ~(-1 << v342) & 0x7FFFFFE0, v343, v342);
          uint64_t v59 = sub_34508(v19 + a8, 0, v343, v342);
          uint64_t result = sub_34508(0, v340 + a9, v343, v342);
          unsigned int v60 = 0;
          uint64_t v61 = a2 + v340 * a7 + v19;
          do
          {
            uint64_t v62 = 0LL;
            uint64_t v63 = result + v12;
            uint64_t v64 = v59;
            do
            {
              int v65 = (int8x16_t *)(v63 + v64);
              unsigned int v66 = (int32x4_t *)(v61 + v62 + 16);
              int32x4_t v68 = *(int32x4_t *)(v61 + v62);
              unsigned int v67 = (int32x4_t *)(v61 + v62 + a7);
              int32x4_t v70 = *v67;
              unsigned int v69 = (int32x4_t *)((char *)v67 + a7);
              int32x4_t v72 = *v69;
              unsigned int v71 = (int32x4_t *)((char *)v69 + a7);
              int32x4_t v74 = *v71;
              unsigned int v73 = (int32x4_t *)((char *)v71 + a7);
              int32x4_t v76 = *v73;
              unsigned int v75 = (int32x4_t *)((char *)v73 + a7);
              int32x4_t v78 = *v75;
              uint64_t v77 = (int32x4_t *)((char *)v75 + a7);
              int32x4_t v80 = *v77;
              uint64_t v79 = (int32x4_t *)((char *)v77 + a7);
              int32x4_t v82 = *v79;
              uint64_t v81 = (int32x4_t *)((char *)v79 + a7);
              int32x4_t v84 = *v81;
              unsigned int v83 = (int32x4_t *)((char *)v81 + a7);
              int32x4_t v86 = *v83;
              int v85 = (int32x4_t *)((char *)v83 + a7);
              int32x4_t v88 = *v85;
              unsigned int v87 = (int32x4_t *)((char *)v85 + a7);
              int32x4_t v90 = *v87;
              int v89 = (int32x4_t *)((char *)v87 + a7);
              int32x4_t v92 = *v89;
              uint64_t v91 = (int32x4_t *)((char *)v89 + a7);
              int32x4_t v94 = *v91;
              unsigned int v93 = (int32x4_t *)((char *)v91 + a7);
              int32x4_t v96 = *v93;
              unsigned int v95 = (int32x4_t *)((char *)v93 + a7);
              int32x4_t v98 = *v95;
              unsigned int v97 = (int32x4_t *)((char *)v95 + a7);
              int16x8_t v99 = (int16x8_t)vzip1q_s32(v68, v76);
              int16x8_t v100 = (int16x8_t)vzip2q_s32(v68, v76);
              int16x8_t v101 = (int16x8_t)vzip1q_s32(v70, v78);
              int16x8_t v102 = (int16x8_t)vzip2q_s32(v70, v78);
              int16x8_t v103 = (int16x8_t)vzip1q_s32(v72, v80);
              int16x8_t v104 = (int16x8_t)vzip2q_s32(v72, v80);
              int16x8_t v105 = (int16x8_t)vzip1q_s32(v74, v82);
              int16x8_t v106 = (int16x8_t)vzip2q_s32(v74, v82);
              int16x8_t v107 = (int16x8_t)vzip1q_s32(v84, v92);
              int16x8_t v108 = (int16x8_t)vzip2q_s32(v84, v92);
              int16x8_t v109 = (int16x8_t)vzip1q_s32(v86, v94);
              int16x8_t v110 = (int16x8_t)vzip2q_s32(v86, v94);
              int16x8_t v111 = (int16x8_t)vzip1q_s32(v88, v96);
              int16x8_t v112 = (int16x8_t)vzip2q_s32(v88, v96);
              int16x8_t v113 = (int16x8_t)vzip1q_s32(v90, v98);
              int16x8_t v114 = (int16x8_t)vzip2q_s32(v90, v98);
              int8x16_t v115 = (int8x16_t)vzip1q_s16(v108, v112);
              int8x16_t v116 = (int8x16_t)vzip2q_s16(v108, v112);
              int8x16_t v117 = (int8x16_t)vzip1q_s16(v110, v114);
              int8x16_t v118 = (int8x16_t)vzip2q_s16(v110, v114);
              int8x16_t v119 = (int8x16_t)vzip1q_s16(v107, v111);
              int8x16_t v120 = (int8x16_t)vzip2q_s16(v107, v111);
              int8x16_t v121 = (int8x16_t)vzip1q_s16(v109, v113);
              int8x16_t v122 = (int8x16_t)vzip2q_s16(v109, v113);
              int8x16_t v123 = (int8x16_t)vzip1q_s16(v100, v104);
              int8x16_t v124 = (int8x16_t)vzip2q_s16(v100, v104);
              int8x16_t v125 = (int8x16_t)vzip1q_s16(v102, v106);
              int8x16_t v126 = (int8x16_t)vzip2q_s16(v102, v106);
              int8x16_t v127 = (int8x16_t)vzip1q_s16(v99, v103);
              int8x16_t v128 = (int8x16_t)vzip2q_s16(v99, v103);
              int8x16_t v129 = (int8x16_t)vzip1q_s16(v101, v105);
              int8x16_t v130 = (int8x16_t)vzip2q_s16(v101, v105);
              *int v65 = vzip1q_s8(v127, v129);
              v65[1] = vzip2q_s8(v127, v129);
              v65[2] = vzip1q_s8(v128, v130);
              v65[3] = vzip2q_s8(v128, v130);
              unsigned int v131 = (int8x16_t *)(v63 + v64 + 64);
              int8x16_t *v131 = vzip1q_s8(v119, v121);
              v131[1] = vzip2q_s8(v119, v121);
              v131[2] = vzip1q_s8(v120, v122);
              v131[3] = vzip2q_s8(v120, v122);
              unsigned int v132 = (int8x16_t *)(v63 + v64 + 128);
              *unsigned int v132 = vzip1q_s8(v123, v125);
              v132[1] = vzip2q_s8(v123, v125);
              v132[2] = vzip1q_s8(v124, v126);
              v132[3] = vzip2q_s8(v124, v126);
              int v133 = (int8x16_t *)(v63 + v64 + 192);
              *int v133 = vzip1q_s8(v115, v117);
              v133[1] = vzip2q_s8(v115, v117);
              v133[2] = vzip1q_s8(v116, v118);
              v133[3] = vzip2q_s8(v116, v118);
              int v134 = (int8x16_t *)(v63 + v64 + 256);
              int32x4_t v136 = *v97;
              int v135 = (int32x4_t *)((char *)v97 + a7);
              int32x4_t v138 = *v135;
              unsigned int v137 = (int32x4_t *)((char *)v135 + a7);
              int32x4_t v140 = *v137;
              unsigned int v139 = (int32x4_t *)((char *)v137 + a7);
              int32x4_t v142 = *v139;
              int v141 = (int32x4_t *)((char *)v139 + a7);
              int32x4_t v144 = *v141;
              int v143 = (int32x4_t *)((char *)v141 + a7);
              int32x4_t v146 = *v143;
              unsigned int v145 = (int32x4_t *)((char *)v143 + a7);
              int32x4_t v148 = *v145;
              int v147 = (int32x4_t *)((char *)v145 + a7);
              int32x4_t v150 = *v147;
              uint64_t v149 = (int32x4_t *)((char *)v147 + a7);
              int32x4_t v152 = *v149;
              char v151 = (int32x4_t *)((char *)v149 + a7);
              int32x4_t v154 = *v151;
              int v153 = (int32x4_t *)((char *)v151 + a7);
              int32x4_t v156 = *v153;
              int v155 = (int32x4_t *)((char *)v153 + a7);
              int32x4_t v158 = *v155;
              unsigned int v157 = (int32x4_t *)((char *)v155 + a7);
              int32x4_t v160 = *v157;
              uint64_t v159 = (int32x4_t *)((char *)v157 + a7);
              int32x4_t v162 = *v159;
              int v161 = (int32x4_t *)((char *)v159 + a7);
              int32x4_t v163 = *(int32x4_t *)((char *)v161 + a7);
              int16x8_t v164 = (int16x8_t)vzip1q_s32(v136, v144);
              int16x8_t v165 = (int16x8_t)vzip2q_s32(v136, v144);
              int16x8_t v166 = (int16x8_t)vzip1q_s32(v138, v146);
              int16x8_t v167 = (int16x8_t)vzip2q_s32(v138, v146);
              int16x8_t v168 = (int16x8_t)vzip1q_s32(v140, v148);
              int16x8_t v169 = (int16x8_t)vzip2q_s32(v140, v148);
              int16x8_t v170 = (int16x8_t)vzip1q_s32(v142, v150);
              int16x8_t v171 = (int16x8_t)vzip2q_s32(v142, v150);
              int16x8_t v172 = (int16x8_t)vzip1q_s32(v152, v160);
              int16x8_t v173 = (int16x8_t)vzip2q_s32(v152, v160);
              int16x8_t v174 = (int16x8_t)vzip1q_s32(v154, v162);
              int16x8_t v175 = (int16x8_t)vzip2q_s32(v154, v162);
              int16x8_t v176 = (int16x8_t)vzip1q_s32(v156, *v161);
              int16x8_t v177 = (int16x8_t)vzip2q_s32(v156, *v161);
              int16x8_t v178 = (int16x8_t)vzip1q_s32(v158, v163);
              int16x8_t v179 = (int16x8_t)vzip2q_s32(v158, v163);
              int8x16_t v180 = (int8x16_t)vzip1q_s16(v173, v177);
              int8x16_t v181 = (int8x16_t)vzip2q_s16(v173, v177);
              int8x16_t v182 = (int8x16_t)vzip1q_s16(v175, v179);
              int8x16_t v183 = (int8x16_t)vzip2q_s16(v175, v179);
              int8x16_t v184 = (int8x16_t)vzip1q_s16(v172, v176);
              int8x16_t v185 = (int8x16_t)vzip2q_s16(v172, v176);
              int8x16_t v186 = (int8x16_t)vzip1q_s16(v174, v178);
              int8x16_t v187 = (int8x16_t)vzip2q_s16(v174, v178);
              int8x16_t v188 = (int8x16_t)vzip1q_s16(v165, v169);
              int8x16_t v189 = (int8x16_t)vzip2q_s16(v165, v169);
              int8x16_t v190 = (int8x16_t)vzip1q_s16(v167, v171);
              int8x16_t v191 = (int8x16_t)vzip2q_s16(v167, v171);
              int8x16_t v192 = (int8x16_t)vzip1q_s16(v164, v168);
              int8x16_t v193 = (int8x16_t)vzip2q_s16(v164, v168);
              int8x16_t v194 = (int8x16_t)vzip1q_s16(v166, v170);
              int8x16_t v195 = (int8x16_t)vzip2q_s16(v166, v170);
              *int v134 = vzip1q_s8(v192, v194);
              v134[1] = vzip2q_s8(v192, v194);
              v134[2] = vzip1q_s8(v193, v195);
              int v134[3] = vzip2q_s8(v193, v195);
              int v196 = (int8x16_t *)(v63 + v64 + 320);
              *int v196 = vzip1q_s8(v184, v186);
              v196[1] = vzip2q_s8(v184, v186);
              v196[2] = vzip1q_s8(v185, v187);
              v196[3] = vzip2q_s8(v185, v187);
              uint64_t v197 = (int8x16_t *)(v63 + v64 + 384);
              *uint64_t v197 = vzip1q_s8(v188, v190);
              v197[1] = vzip2q_s8(v188, v190);
              v197[2] = vzip1q_s8(v189, v191);
              v197[3] = vzip2q_s8(v189, v191);
              int v198 = (int8x16_t *)(v63 + v64 + 448);
              *int v198 = vzip1q_s8(v180, v182);
              v198[1] = vzip2q_s8(v180, v182);
              v198[2] = vzip1q_s8(v181, v183);
              v198[3] = vzip2q_s8(v181, v183);
              unsigned int v199 = (int8x16_t *)(v63 + v64 + 512);
              int32x4_t v201 = *v66;
              int v200 = (int32x4_t *)((char *)v66 + a7);
              int32x4_t v203 = *v200;
              uint64_t v202 = (int32x4_t *)((char *)v200 + a7);
              int32x4_t v205 = *v202;
              unint64_t v204 = (int32x4_t *)((char *)v202 + a7);
              int32x4_t v207 = *v204;
              int v206 = (int32x4_t *)((char *)v204 + a7);
              int32x4_t v209 = *v206;
              int v208 = (int32x4_t *)((char *)v206 + a7);
              int32x4_t v211 = *v208;
              int v210 = (int32x4_t *)((char *)v208 + a7);
              int32x4_t v213 = *v210;
              uint64_t v212 = (int32x4_t *)((char *)v210 + a7);
              int32x4_t v215 = *v212;
              uint64_t v214 = (int32x4_t *)((char *)v212 + a7);
              int32x4_t v217 = *v214;
              int v216 = (int32x4_t *)((char *)v214 + a7);
              int32x4_t v219 = *v216;
              __int128 v218 = (int32x4_t *)((char *)v216 + a7);
              int32x4_t v221 = *v218;
              int v220 = (int32x4_t *)((char *)v218 + a7);
              int32x4_t v223 = *v220;
              int v222 = (int32x4_t *)((char *)v220 + a7);
              int32x4_t v225 = *v222;
              int v224 = (int32x4_t *)((char *)v222 + a7);
              int32x4_t v227 = *v224;
              int v226 = (int32x4_t *)((char *)v224 + a7);
              int32x4_t v229 = *v226;
              BOOL v228 = (int32x4_t *)((char *)v226 + a7);
              int32x4_t v231 = *v228;
              uint64_t v230 = (int32x4_t *)((char *)v228 + a7);
              int16x8_t v232 = (int16x8_t)vzip1q_s32(v201, v209);
              int16x8_t v233 = (int16x8_t)vzip2q_s32(v201, v209);
              int16x8_t v234 = (int16x8_t)vzip1q_s32(v203, v211);
              int16x8_t v235 = (int16x8_t)vzip2q_s32(v203, v211);
              int16x8_t v236 = (int16x8_t)vzip1q_s32(v205, v213);
              int16x8_t v237 = (int16x8_t)vzip2q_s32(v205, v213);
              int16x8_t v238 = (int16x8_t)vzip1q_s32(v207, v215);
              int16x8_t v239 = (int16x8_t)vzip2q_s32(v207, v215);
              int16x8_t v240 = (int16x8_t)vzip1q_s32(v217, v225);
              int16x8_t v241 = (int16x8_t)vzip2q_s32(v217, v225);
              int16x8_t v242 = (int16x8_t)vzip1q_s32(v219, v227);
              int16x8_t v243 = (int16x8_t)vzip2q_s32(v219, v227);
              int16x8_t v244 = (int16x8_t)vzip1q_s32(v221, v229);
              int16x8_t v245 = (int16x8_t)vzip2q_s32(v221, v229);
              int16x8_t v246 = (int16x8_t)vzip1q_s32(v223, v231);
              int16x8_t v247 = (int16x8_t)vzip2q_s32(v223, v231);
              int8x16_t v248 = (int8x16_t)vzip1q_s16(v241, v245);
              int8x16_t v249 = (int8x16_t)vzip2q_s16(v241, v245);
              int8x16_t v250 = (int8x16_t)vzip1q_s16(v243, v247);
              int8x16_t v251 = (int8x16_t)vzip2q_s16(v243, v247);
              int8x16_t v252 = (int8x16_t)vzip1q_s16(v240, v244);
              int8x16_t v253 = (int8x16_t)vzip2q_s16(v240, v244);
              int8x16_t v254 = (int8x16_t)vzip1q_s16(v242, v246);
              int8x16_t v255 = (int8x16_t)vzip2q_s16(v242, v246);
              int8x16_t v256 = (int8x16_t)vzip1q_s16(v233, v237);
              int8x16_t v257 = (int8x16_t)vzip2q_s16(v233, v237);
              int8x16_t v258 = (int8x16_t)vzip1q_s16(v235, v239);
              int8x16_t v259 = (int8x16_t)vzip2q_s16(v235, v239);
              int8x16_t v260 = (int8x16_t)vzip1q_s16(v232, v236);
              int8x16_t v261 = (int8x16_t)vzip2q_s16(v232, v236);
              int8x16_t v262 = (int8x16_t)vzip1q_s16(v234, v238);
              int8x16_t v263 = (int8x16_t)vzip2q_s16(v234, v238);
              *unsigned int v199 = vzip1q_s8(v260, v262);
              v199[1] = vzip2q_s8(v260, v262);
              v199[2] = vzip1q_s8(v261, v263);
              v199[3] = vzip2q_s8(v261, v263);
              uint64_t v264 = (int8x16_t *)(v63 + v64 + 576);
              int8x16_t *v264 = vzip1q_s8(v252, v254);
              v264[1] = vzip2q_s8(v252, v254);
              v264[2] = vzip1q_s8(v253, v255);
              v264[3] = vzip2q_s8(v253, v255);
              BOOL v265 = (int8x16_t *)(v63 + v64 + 640);
              *BOOL v265 = vzip1q_s8(v256, v258);
              v265[1] = vzip2q_s8(v256, v258);
              v265[2] = vzip1q_s8(v257, v259);
              v265[3] = vzip2q_s8(v257, v259);
              uint64_t v266 = (int8x16_t *)(v63 + v64 + 704);
              int8x16_t *v266 = vzip1q_s8(v248, v250);
              v266[1] = vzip2q_s8(v248, v250);
              v266[2] = vzip1q_s8(v249, v251);
              v266[3] = vzip2q_s8(v249, v251);
              int v267 = (int8x16_t *)(v63 + v64 + 768);
              int32x4_t v269 = *v230;
              uint64_t v268 = (int32x4_t *)((char *)v230 + a7);
              int32x4_t v271 = *v268;
              unsigned __int8 v270 = (int32x4_t *)((char *)v268 + a7);
              int32x4_t v273 = *v270;
              char v272 = (int32x4_t *)((char *)v270 + a7);
              int32x4_t v275 = *v272;
              v274 = (int32x4_t *)((char *)v272 + a7);
              int32x4_t v277 = *v274;
              char v276 = (int32x4_t *)((char *)v274 + a7);
              int32x4_t v279 = *v276;
              unint64_t v278 = (int32x4_t *)((char *)v276 + a7);
              int32x4_t v281 = *v278;
              int v280 = (int32x4_t *)((char *)v278 + a7);
              int32x4_t v283 = *v280;
              uint64_t v282 = (int32x4_t *)((char *)v280 + a7);
              int32x4_t v285 = *v282;
              uint64_t v284 = (int32x4_t *)((char *)v282 + a7);
              int32x4_t v287 = *v284;
              unsigned int v286 = (int32x4_t *)((char *)v284 + a7);
              int32x4_t v289 = *v286;
              uint64_t v288 = (int32x4_t *)((char *)v286 + a7);
              int32x4_t v291 = *v288;
              int v290 = (int32x4_t *)((char *)v288 + a7);
              int32x4_t v293 = *v290;
              int v292 = (int32x4_t *)((char *)v290 + a7);
              int32x4_t v295 = *v292;
              unsigned int v294 = (int32x4_t *)((char *)v292 + a7);
              int32x4_t v296 = *(int32x4_t *)((char *)v294 + a7);
              int16x8_t v297 = (int16x8_t)vzip1q_s32(v269, v277);
              int16x8_t v298 = (int16x8_t)vzip2q_s32(v269, v277);
              int16x8_t v299 = (int16x8_t)vzip1q_s32(v271, v279);
              int16x8_t v300 = (int16x8_t)vzip2q_s32(v271, v279);
              int16x8_t v301 = (int16x8_t)vzip1q_s32(v273, v281);
              int16x8_t v302 = (int16x8_t)vzip2q_s32(v273, v281);
              int16x8_t v303 = (int16x8_t)vzip1q_s32(v275, v283);
              int16x8_t v304 = (int16x8_t)vzip2q_s32(v275, v283);
              int16x8_t v305 = (int16x8_t)vzip1q_s32(v285, v293);
              int16x8_t v306 = (int16x8_t)vzip2q_s32(v285, v293);
              int16x8_t v307 = (int16x8_t)vzip1q_s32(v287, v295);
              int16x8_t v308 = (int16x8_t)vzip2q_s32(v287, v295);
              int16x8_t v309 = (int16x8_t)vzip1q_s32(v289, *v294);
              int16x8_t v310 = (int16x8_t)vzip2q_s32(v289, *v294);
              int16x8_t v311 = (int16x8_t)vzip1q_s32(v291, v296);
              int16x8_t v312 = (int16x8_t)vzip2q_s32(v291, v296);
              int8x16_t v313 = (int8x16_t)vzip1q_s16(v306, v310);
              int8x16_t v314 = (int8x16_t)vzip2q_s16(v306, v310);
              int8x16_t v315 = (int8x16_t)vzip1q_s16(v308, v312);
              int8x16_t v316 = (int8x16_t)vzip2q_s16(v308, v312);
              int8x16_t v317 = (int8x16_t)vzip1q_s16(v305, v309);
              int8x16_t v318 = (int8x16_t)vzip2q_s16(v305, v309);
              int8x16_t v319 = (int8x16_t)vzip1q_s16(v307, v311);
              int8x16_t v320 = (int8x16_t)vzip2q_s16(v307, v311);
              int8x16_t v321 = (int8x16_t)vzip1q_s16(v298, v302);
              int8x16_t v322 = (int8x16_t)vzip2q_s16(v298, v302);
              int8x16_t v323 = (int8x16_t)vzip1q_s16(v300, v304);
              int8x16_t v324 = (int8x16_t)vzip2q_s16(v300, v304);
              int8x16_t v325 = (int8x16_t)vzip1q_s16(v297, v301);
              int8x16_t v326 = (int8x16_t)vzip2q_s16(v297, v301);
              int8x16_t v327 = (int8x16_t)vzip1q_s16(v299, v303);
              int8x16_t v328 = (int8x16_t)vzip2q_s16(v299, v303);
              *int v267 = vzip1q_s8(v325, v327);
              v267[1] = vzip2q_s8(v325, v327);
              v267[2] = vzip1q_s8(v326, v328);
              v267[3] = vzip2q_s8(v326, v328);
              uint64_t v329 = (int8x16_t *)(v63 + v64 + 832);
              *uint64_t v329 = vzip1q_s8(v317, v319);
              v329[1] = vzip2q_s8(v317, v319);
              v329[2] = vzip1q_s8(v318, v320);
              v329[3] = vzip2q_s8(v318, v320);
              char v330 = (int8x16_t *)(v63 + v64 + 896);
              *char v330 = vzip1q_s8(v321, v323);
              v330[1] = vzip2q_s8(v321, v323);
              v330[2] = vzip1q_s8(v322, v324);
              v330[3] = vzip2q_s8(v322, v324);
              uint64_t v331 = (int8x16_t *)(v63 + v64 + 960);
              *uint64_t v331 = vzip1q_s8(v313, v315);
              v331[1] = vzip2q_s8(v313, v315);
              v331[2] = vzip1q_s8(v314, v316);
              v331[3] = vzip2q_s8(v314, v316);
              uint64_t v64 = (v64 - v57) & v57;
              v62 += 32LL;
            }

            while (v62 < v10);
            uint64_t result = (result - v58) & v58;
            v60 += 32;
            v61 += 32 * a7;
          }

          while (v60 < v346);
        }

        return result;
      }
    }

    else
    {
      int v44 = v339;
      if (!v339) {
        goto LABEL_50;
      }
    }

    v10 -= v44;
    uint64_t v47 = v10 + v19;
    uint64_t v48 = sub_34508(~(-1 << v343), 0, v343, v342);
    uint64_t v49 = sub_34508(0, ~(-1 << v342), v343, v342);
    uint64_t v50 = sub_34508(v47 + a8, 0, v343, v342);
    uint64_t v51 = a2 + v340 * a7;
    uint64_t result = sub_34508(0, v340 + a9, v343, v342);
    for (int k = 0; k != v346; ++k)
    {
      uint64_t v53 = (char *)(v51 + v47);
      int v54 = v339;
      uint64_t v55 = v50;
      do
      {
        char v56 = *v53++;
        *(_BYTE *)(result + v12 + v55) = v56;
        uint64_t v55 = (v55 - v48) & v48;
        --v54;
      }

      while (v54);
      uint64_t result = (result - v49) & v49;
      v51 += a7;
    }

    goto LABEL_50;
  }

  return result;
}

uint64_t sub_375F0( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    uint64_t v18 = a13;
    unsigned int v19 = a12;
    if (a14)
    {
      unsigned int v115 = a7;
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v119);
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v118, &v117);
        unsigned int v92 = v120;
        if (v120)
        {
          int v20 = 0;
          unsigned __int16 v94 = 0;
          char v21 = v117;
          char v90 = v118;
          unsigned int v86 = v115 >> v118;
          unsigned int v109 = a8 >> v117;
          unsigned int v22 = v121;
          unsigned int v84 = a11 + v115;
          unsigned int v82 = ((1 << v118) - 1) & v115;
          int v83 = ((1 << v118) - 1) & (a11 + v115);
          unsigned int v81 = (1 << v118) - v82;
          unsigned int v107 = a12 + a8;
          int v105 = ((1 << v117) - 1) & (a12 + a8);
          int v102 = ((1 << v117) - 1) & a8;
          int v100 = (1 << v117) - v102;
          int v88 = 1 << v118;
          if (1 << v118 >= a5) {
            int v23 = a5;
          }
          else {
            int v23 = 1 << v118;
          }
          int v24 = 1 << v117;
          if (1 << v117 >= a6) {
            int v25 = a6;
          }
          else {
            int v25 = 1 << v117;
          }
          unsigned int v96 = v25;
          unsigned int v98 = v23;
          do
          {
            if (v22)
            {
              int v26 = 0;
              unsigned __int16 v27 = 0;
              unsigned int v28 = (v20 + v86) << v90;
              unsigned int v29 = a11;
              if (v84 >= (v20 + v86 + 1) << v90) {
                unsigned int v29 = v81;
              }
              int v30 = v88;
              if (v84 < (v20 + v86 + 1) << v90) {
                int v30 = v83;
              }
              int v31 = v20 << v90;
              if (v28 >= v115) {
                unsigned int v29 = v30;
              }
              unsigned int v111 = v29;
              if (v28 >= v115) {
                uint64_t v32 = 0LL;
              }
              else {
                uint64_t v32 = v82;
              }
              uint64_t v33 = a2 + 2LL * (v32 + v31);
              do
              {
                LOWORD(v34) = v94;
                HIWORD(v34) = v27;
                uint64_t result = sub_34358(v119, v34);
                int v35 = *(_DWORD *)(v17 + 4LL * result);
                if (v35 < 0)
                {
                  uint64_t v36 = v17 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                  unsigned int v37 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v37) {
                    v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v38 = a12;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    unsigned int v38 = v100;
                  }
                  unsigned int v39 = v105;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    unsigned int v39 = v24;
                  }
                  unsigned int v40 = v102;
                  if ((v26 + v109) << v21 < a8)
                  {
                    unsigned int v41 = v38;
                  }

                  else
                  {
                    unsigned int v40 = 0;
                    unsigned int v41 = v39;
                  }

                  uint64_t result = sub_37BC0(v36, v33 + (v40 + (v26 << v21)) * a13, v98, v96, v111, v41, a13, v32, v40);
                }

                int v26 = ++v27;
              }

              while (v22 > v27);
            }

            int v20 = ++v94;
          }

          while (v92 > v94);
        }
      }

      else
      {
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v119, &v118);
        int v44 = 1 << v118;
        char v45 = *((_BYTE *)a14 + 15);
        unsigned int v46 = 1 << v45;
        if (v45) {
          BOOL v47 = v46 > a3;
        }
        else {
          BOOL v47 = 1;
        }
        BOOL v48 = v47 || v46 > a4;
        int v49 = (~(-1 << v45) + a3) & (-1 << v45);
        if (v48) {
          int v50 = a3;
        }
        else {
          int v50 = v49;
        }
        unsigned int v99 = a8 >> v118;
        unsigned int v101 = 1 << v118;
        int v51 = v44 - 1;
        unsigned int v97 = a12 + a8;
        char v95 = v118;
        unsigned int v52 = (v44 - 1 + a12 + a8) >> v118;
        if (a8 >> v118 < v52)
        {
          uint64_t v53 = v119[0];
          uint64_t v54 = (1 << SLOBYTE(v119[0]));
          unsigned int v91 = (v50 + ~(-1 << v53)) >> v53;
          uint64_t v55 = v115 >> SLOBYTE(v119[0]);
          unsigned int v56 = a11 + v115;
          unsigned int v57 = ((_DWORD)v54 - 1 + a11 + v115) >> SLOBYTE(v119[0]);
          uint64_t v58 = ((_DWORD)v54 - 1) & v115;
          unsigned int v59 = (v54 - 1) & (a11 + v115);
          uint64_t result = (v54 - v58);
          int v85 = v51 & v97;
          uint64_t v87 = v51 & a8;
          else {
            unsigned int v60 = 1 << SLOBYTE(v119[0]);
          }
          if (v101 >= a6) {
            unsigned int v61 = a6;
          }
          else {
            unsigned int v61 = 1 << v118;
          }
          int v62 = v57 - v55;
          unsigned int v63 = a8 >> v118;
          unsigned int v93 = v52;
          unsigned int v89 = ((_DWORD)v54 - 1 + a11 + v115) >> SLOBYTE(v119[0]);
          uint64_t v104 = v17;
          uint64_t v106 = ((_DWORD)v54 - 1) & v115;
          do
          {
            if (v57 <= v55)
            {
              unsigned int v80 = v63 + 1;
            }

            else
            {
              int v64 = 0;
              unsigned int v65 = v63 << v95;
              unsigned int v103 = v63 + 1;
              unsigned int v66 = v101;
              if (v97 < (v63 + 1) << v95) {
                unsigned int v66 = v85;
              }
              unsigned int v67 = v101 - v87;
              if (v97 < (v63 + 1) << v95) {
                unsigned int v67 = v19;
              }
              if (v65 < a8) {
                unsigned int v66 = v67;
              }
              unsigned int v116 = v66;
              if (v65 >= a8) {
                unsigned int v68 = 0;
              }
              else {
                unsigned int v68 = v87;
              }
              unsigned int v112 = v68;
              uint64_t v110 = (v68 + ((v63 - v99) << v95) - v87) * v18;
              int v108 = v55 + v63 * v91;
              do
              {
                unsigned int v69 = ((_DWORD)v55 + v64) << v53;
                unsigned int v70 = ((_DWORD)v55 + v64 + 1) << v53;
                BOOL v71 = v56 >= v70;
                if (v56 >= v70) {
                  unsigned int v72 = v54;
                }
                else {
                  unsigned int v72 = v59;
                }
                unsigned int v73 = a11;
                if (v71) {
                  unsigned int v73 = result;
                }
                if (v69 >= v115) {
                  uint64_t v74 = 0LL;
                }
                else {
                  uint64_t v74 = v58;
                }
                if (v69 >= v115) {
                  unsigned int v75 = v72;
                }
                else {
                  unsigned int v75 = v73;
                }
                uint64_t v76 = result;
                uint64_t v77 = v53;
                uint64_t v78 = v54;
                uint64_t v79 = v55;
                sub_37BC0( (v108 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v104,  a2 + 2 * ((v74 + (v64 << v53)) - v58) + v110,  v60,  v61,  v75,  v116,  a13,  v74,  v112);
                uint64_t v53 = v77;
                uint64_t v58 = v106;
                uint64_t result = v76;
                uint64_t v55 = v79;
                uint64_t v54 = v78;
                ++v64;
              }

              while (v62 != v64);
              uint64_t v18 = a13;
              unsigned int v19 = a12;
              unsigned int v52 = v93;
              unsigned int v57 = v89;
              unsigned int v80 = v103;
            }

            unsigned int v63 = v80;
          }

          while (v80 != v52);
        }
      }
    }

    else
    {
      return sub_37BC0(result, a2, a5, a6, a11, a12, a13, a7, a8);
    }
  }

  return result;
}

uint64_t sub_37BC0( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v11 = a6;
  unsigned int v12 = a5;
  unsigned int v14 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0LL;
  }
  if (a4 <= 1)
  {
    uint64_t v16 = 0LL;
    else {
      uint64_t v17 = sub_37E70;
    }
LABEL_42:
    HIDWORD(v32) = a5;
    LODWORD(v32) = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, unsigned int))v17)( result,  a2,  v15,  v16,  a8,  a9,  a7,  0LL,  v32,  a6);
  }

  uint64_t v16 = 32 - __clz(a4 - 1);
  else {
    uint64_t v17 = sub_37E70;
  }
  uint64_t v18 = sub_38898;
  uint64_t v33 = v18;
  unsigned int v36 = v16;
  uint64_t v19 = result;
  int v20 = 32 - (a9 & 0x1F);
  if ((a9 & 0x1F) == 0) {
    int v20 = 0;
  }
  unsigned int v21 = 32 - (a8 & 0x1F);
  if ((a8 & 0x1F) == 0) {
    unsigned int v21 = 0;
  }
  int v22 = ((_BYTE)a9 + (_BYTE)a6) & 0x1F;
  unsigned int v23 = v21 + (((_BYTE)a8 + (_BYTE)a5) & 0x1F);
  if (v23 > a5) {
    unsigned int v21 = a5;
  }
  unsigned int v37 = v21;
  if (v23 <= a5) {
    int v24 = ((_BYTE)a8 + (_BYTE)a5) & 0x1F;
  }
  else {
    int v24 = 0;
  }
  int v34 = v24;
  if (v20 + v22 <= a6) {
    unsigned int v25 = v20;
  }
  else {
    unsigned int v25 = a6;
  }
  if (v20 + v22 <= a6) {
    int v26 = ((_BYTE)a9 + (_BYTE)a6) & 0x1F;
  }
  else {
    int v26 = 0;
  }
  int v35 = v17;
  if (v25)
  {
    HIDWORD(v30) = a5;
    LODWORD(v30) = 0;
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, void, uint64_t, unsigned int))v17)( result,  a2,  v15,  v36,  a8,  a9,  a7,  0LL,  v30,  v25);
    v11 -= v25;
  }

  if (v26)
  {
    v11 -= v26;
    *(void *)((char *)&v31 + 4) = __PAIR64__(v26, v12);
    LODWORD(v31) = v11 + v25;
    uint64_t v27 = v19;
    uint64_t v28 = v19;
    uint64_t v29 = v36;
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, void, void, _DWORD))v35)( v28,  a2,  v15,  v36,  a8,  a9,  a7,  0LL,  v31,  DWORD2(v31));
  }

  else
  {
    uint64_t v27 = v19;
    uint64_t v29 = v36;
  }

  if (v11)
  {
    if (v37)
    {
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, unint64_t, unsigned int))v35)( v27,  a2,  v15,  v29,  a8,  a9,  a7,  0LL,  __PAIR64__(v37, v25),  v11);
      v12 -= v37;
    }

    if (v34)
    {
      v12 -= v34;
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, unint64_t, unsigned int))v35)( v27,  a2,  v15,  v29,  a8,  a9,  a7,  v12 + v37,  __PAIR64__(v34, v25),  v11);
    }

    if (v12) {
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))v33)( v27,  a2,  v15,  v29,  a8,  a9,  a7);
    }
  }

  return result;
}

uint64_t sub_37E70( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  uint64_t v18 = sub_34508(~(-1 << a3), 0, a3, a4);
  uint64_t v19 = sub_34508(0, ~(-1 << a4), a3, a4);
  uint64_t result = sub_34508(a8 + a5, 0, a3, a4);
  if (a11)
  {
    uint64_t v21 = result;
    unsigned int v28 = a8;
    uint64_t v22 = a2 + a9 * a7;
    uint64_t result = sub_34508(0, a9 + a6, a3, a4);
    for (int i = 0; i != a11; ++i)
    {
      if (a10)
      {
        int v24 = (__int16 *)(v22 + 2LL * v28);
        int v25 = a10;
        uint64_t v26 = v21;
        do
        {
          __int16 v27 = *v24++;
          *(_WORD *)(a1 + 2 * (v26 + result)) = v27;
          uint64_t v26 = (v26 - v18) & v18;
          --v25;
        }

        while (v25);
      }

      uint64_t result = (result - v19) & v19;
      v22 += a7;
    }
  }

  return result;
}

uint64_t sub_37F9C( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  uint64_t v18 = sub_34508(~(-1 << a3), 0, a3, a4);
  uint64_t v19 = sub_34508(0, ~(-1 << a4), a3, a4);
  uint64_t result = sub_34508(a8 + a5, 0, a3, a4);
  if (a11)
  {
    uint64_t v21 = result;
    unsigned int v28 = a8;
    uint64_t v22 = a2 + a9 * a7;
    uint64_t result = sub_34508(0, a9 + a6, a3, a4);
    for (int i = 0; i != a11; ++i)
    {
      if (a10)
      {
        int v24 = (__int16 *)(v22 + 2LL * v28);
        int v25 = a10;
        uint64_t v26 = v21;
        do
        {
          __int16 v27 = *v24++;
          *(_WORD *)(a1 + 2 * (v26 + result)) = v27;
          uint64_t v26 = (v26 - v18) & v18;
          --v25;
        }

        while (v25);
      }

      uint64_t result = (result - v19) & v19;
      v22 += a7;
    }
  }

  return result;
}

uint64_t sub_380C8( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  uint64_t v17 = sub_34508(~(-1 << a3) & 0x7FFFFFE0, 0, a3, a4);
  uint64_t v18 = sub_34508(0, ~(-1 << a4) & 0x7FFFFFE0, a3, a4);
  uint64_t result = sub_34508(a8 + a5, 0, a3, a4);
  if (a11)
  {
    uint64_t v20 = result;
    uint64_t v21 = a2 + a9 * a7;
    uint64_t result = sub_34508(0, a9 + a6, a3, a4);
    for (unsigned int i = 0; i < a11; i += 32)
    {
      if (a10)
      {
        unsigned int v23 = 0;
        int v24 = (int32x4_t *)(v21 + 2LL * a8);
        uint64_t v25 = v20;
        do
        {
          uint64_t v26 = (int16x8_t *)(a1 + 2 * (v25 + result));
          int32x4_t v28 = *(int32x4_t *)((char *)v24 + a7);
          __int16 v27 = (int32x4_t *)((char *)v24 + a7 + a7);
          int32x4_t v30 = *v27;
          uint64_t v29 = (int32x4_t *)((char *)v27 + a7);
          int32x4_t v32 = *v29;
          __int128 v31 = (int32x4_t *)((char *)v29 + a7);
          int32x4_t v34 = *v31;
          uint64_t v33 = (int32x4_t *)((char *)v31 + a7);
          int32x4_t v36 = *v33;
          int v35 = (int32x4_t *)((char *)v33 + a7);
          int32x4_t v38 = *v35;
          unsigned int v37 = (int32x4_t *)((char *)v35 + a7);
          int32x4_t v40 = *v37;
          unsigned int v39 = (int32x4_t *)((char *)v37 + a7);
          int16x8_t v41 = (int16x8_t)vzip1q_s32(v34, v38);
          int16x8_t v42 = (int16x8_t)vzip2q_s32(v34, v38);
          int16x8_t v43 = (int16x8_t)vzip1q_s32(v36, v40);
          int16x8_t v44 = (int16x8_t)vzip2q_s32(v36, v40);
          int16x8_t v45 = (int16x8_t)vzip1q_s32(*v24, v30);
          int16x8_t v46 = (int16x8_t)vzip2q_s32(*v24, v30);
          int16x8_t v47 = (int16x8_t)vzip1q_s32(v28, v32);
          int16x8_t v48 = (int16x8_t)vzip2q_s32(v28, v32);
          *uint64_t v26 = vzip1q_s16(v45, v47);
          v26[1] = vzip2q_s16(v45, v47);
          uint64_t v26[2] = vzip1q_s16(v41, v43);
          v26[3] = vzip2q_s16(v41, v43);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v46, v48);
          v26[1] = vzip2q_s16(v46, v48);
          uint64_t v26[2] = vzip1q_s16(v42, v44);
          v26[3] = vzip2q_s16(v42, v44);
          v26 += 4;
          int32x4_t v50 = *v39;
          int v49 = (int32x4_t *)((char *)v39 + a7);
          int32x4_t v52 = *v49;
          int v51 = (int32x4_t *)((char *)v49 + a7);
          int32x4_t v54 = *v51;
          uint64_t v53 = (int32x4_t *)((char *)v51 + a7);
          int32x4_t v56 = *v53;
          uint64_t v55 = (int32x4_t *)((char *)v53 + a7);
          int32x4_t v58 = *v55;
          unsigned int v57 = (int32x4_t *)((char *)v55 + a7);
          int32x4_t v60 = *v57;
          unsigned int v59 = (int32x4_t *)((char *)v57 + a7);
          int32x4_t v62 = *v59;
          unsigned int v61 = (int32x4_t *)((char *)v59 + a7);
          int32x4_t v64 = *v61;
          unsigned int v63 = (int32x4_t *)((char *)v61 + a7);
          int16x8_t v65 = (int16x8_t)vzip1q_s32(v58, v62);
          int16x8_t v66 = (int16x8_t)vzip2q_s32(v58, v62);
          int16x8_t v67 = (int16x8_t)vzip1q_s32(v60, v64);
          int16x8_t v68 = (int16x8_t)vzip2q_s32(v60, v64);
          int16x8_t v69 = (int16x8_t)vzip1q_s32(v50, v54);
          int16x8_t v70 = (int16x8_t)vzip2q_s32(v50, v54);
          int16x8_t v71 = (int16x8_t)vzip1q_s32(v52, v56);
          int16x8_t v72 = (int16x8_t)vzip2q_s32(v52, v56);
          *uint64_t v26 = vzip1q_s16(v69, v71);
          v26[1] = vzip2q_s16(v69, v71);
          uint64_t v26[2] = vzip1q_s16(v65, v67);
          v26[3] = vzip2q_s16(v65, v67);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v70, v72);
          v26[1] = vzip2q_s16(v70, v72);
          uint64_t v26[2] = vzip1q_s16(v66, v68);
          v26[3] = vzip2q_s16(v66, v68);
          v26 += 4;
          int32x4_t v74 = v24[1];
          unsigned int v73 = (int32x4_t *)((char *)v24 + a7 + 16);
          int32x4_t v76 = *v73;
          unsigned int v75 = (int32x4_t *)((char *)v73 + a7);
          int32x4_t v78 = *v75;
          uint64_t v77 = (int32x4_t *)((char *)v75 + a7);
          int32x4_t v80 = *v77;
          uint64_t v79 = (int32x4_t *)((char *)v77 + a7);
          int32x4_t v82 = *v79;
          unsigned int v81 = (int32x4_t *)((char *)v79 + a7);
          int32x4_t v84 = *v81;
          int v83 = (int32x4_t *)((char *)v81 + a7);
          int32x4_t v86 = *v83;
          int v85 = (int32x4_t *)((char *)v83 + a7);
          int32x4_t v88 = *v85;
          uint64_t v87 = (int32x4_t *)((char *)v85 + a7);
          int16x8_t v89 = (int16x8_t)vzip1q_s32(v82, v86);
          int16x8_t v90 = (int16x8_t)vzip2q_s32(v82, v86);
          int16x8_t v91 = (int16x8_t)vzip1q_s32(v84, v88);
          int16x8_t v92 = (int16x8_t)vzip2q_s32(v84, v88);
          int16x8_t v93 = (int16x8_t)vzip1q_s32(v74, v78);
          int16x8_t v94 = (int16x8_t)vzip2q_s32(v74, v78);
          int16x8_t v95 = (int16x8_t)vzip1q_s32(v76, v80);
          int16x8_t v96 = (int16x8_t)vzip2q_s32(v76, v80);
          *uint64_t v26 = vzip1q_s16(v93, v95);
          v26[1] = vzip2q_s16(v93, v95);
          uint64_t v26[2] = vzip1q_s16(v89, v91);
          v26[3] = vzip2q_s16(v89, v91);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v94, v96);
          v26[1] = vzip2q_s16(v94, v96);
          uint64_t v26[2] = vzip1q_s16(v90, v92);
          v26[3] = vzip2q_s16(v90, v92);
          v26 += 4;
          int32x4_t v98 = *v87;
          unsigned int v97 = (int32x4_t *)((char *)v87 + a7);
          int32x4_t v100 = *v97;
          unsigned int v99 = (int32x4_t *)((char *)v97 + a7);
          int32x4_t v102 = *v99;
          unsigned int v101 = (int32x4_t *)((char *)v99 + a7);
          int32x4_t v104 = *v101;
          unsigned int v103 = (int32x4_t *)((char *)v101 + a7);
          int32x4_t v106 = *v103;
          int v105 = (int32x4_t *)((char *)v103 + a7);
          int32x4_t v108 = *v105;
          unsigned int v107 = (int32x4_t *)((char *)v105 + a7);
          int32x4_t v109 = *(int32x4_t *)((char *)v107 + a7);
          int16x8_t v110 = (int16x8_t)vzip1q_s32(v106, *v107);
          int16x8_t v111 = (int16x8_t)vzip2q_s32(v106, *v107);
          int16x8_t v112 = (int16x8_t)vzip1q_s32(v108, v109);
          int16x8_t v113 = (int16x8_t)vzip2q_s32(v108, v109);
          int16x8_t v114 = (int16x8_t)vzip1q_s32(v98, v102);
          int16x8_t v115 = (int16x8_t)vzip2q_s32(v98, v102);
          int16x8_t v116 = (int16x8_t)vzip1q_s32(v100, v104);
          int16x8_t v117 = (int16x8_t)vzip2q_s32(v100, v104);
          *uint64_t v26 = vzip1q_s16(v114, v116);
          v26[1] = vzip2q_s16(v114, v116);
          uint64_t v26[2] = vzip1q_s16(v110, v112);
          v26[3] = vzip2q_s16(v110, v112);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v115, v117);
          v26[1] = vzip2q_s16(v115, v117);
          uint64_t v26[2] = vzip1q_s16(v111, v113);
          v26[3] = vzip2q_s16(v111, v113);
          v26 += 4;
          int v118 = v63 + 1;
          int32x4_t v120 = *v63;
          int8x16_t v119 = (int32x4_t *)((char *)v63 + a7);
          int32x4_t v122 = *v119;
          unsigned int v121 = (int32x4_t *)((char *)v119 + a7);
          int32x4_t v124 = *v121;
          int8x16_t v123 = (int32x4_t *)((char *)v121 + a7);
          int32x4_t v126 = *v123;
          int8x16_t v125 = (int32x4_t *)((char *)v123 + a7);
          int32x4_t v128 = *v125;
          int8x16_t v127 = (int32x4_t *)((char *)v125 + a7);
          int32x4_t v130 = *v127;
          int8x16_t v129 = (int32x4_t *)((char *)v127 + a7);
          int32x4_t v132 = *v129;
          unsigned int v131 = (int32x4_t *)((char *)v129 + a7);
          int32x4_t v134 = *v131;
          int v133 = (int32x4_t *)((char *)v131 + a7);
          int16x8_t v135 = (int16x8_t)vzip1q_s32(v128, v132);
          int16x8_t v136 = (int16x8_t)vzip2q_s32(v128, v132);
          int16x8_t v137 = (int16x8_t)vzip1q_s32(v130, v134);
          int16x8_t v138 = (int16x8_t)vzip2q_s32(v130, v134);
          int16x8_t v139 = (int16x8_t)vzip1q_s32(v120, v124);
          int16x8_t v140 = (int16x8_t)vzip2q_s32(v120, v124);
          int16x8_t v141 = (int16x8_t)vzip1q_s32(v122, v126);
          int16x8_t v142 = (int16x8_t)vzip2q_s32(v122, v126);
          *uint64_t v26 = vzip1q_s16(v139, v141);
          v26[1] = vzip2q_s16(v139, v141);
          uint64_t v26[2] = vzip1q_s16(v135, v137);
          v26[3] = vzip2q_s16(v135, v137);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v140, v142);
          v26[1] = vzip2q_s16(v140, v142);
          uint64_t v26[2] = vzip1q_s16(v136, v138);
          v26[3] = vzip2q_s16(v136, v138);
          v26 += 4;
          int32x4_t v144 = *v133;
          int v143 = (int32x4_t *)((char *)v133 + a7);
          int32x4_t v146 = *v143;
          unsigned int v145 = (int32x4_t *)((char *)v143 + a7);
          int32x4_t v148 = *v145;
          int v147 = (int32x4_t *)((char *)v145 + a7);
          int32x4_t v150 = *v147;
          uint64_t v149 = (int32x4_t *)((char *)v147 + a7);
          int32x4_t v152 = *v149;
          char v151 = (int32x4_t *)((char *)v149 + a7);
          int32x4_t v154 = *v151;
          int v153 = (int32x4_t *)((char *)v151 + a7);
          int32x4_t v155 = *(int32x4_t *)((char *)v153 + a7);
          int16x8_t v156 = (int16x8_t)vzip1q_s32(v152, *v153);
          int16x8_t v157 = (int16x8_t)vzip2q_s32(v152, *v153);
          int16x8_t v158 = (int16x8_t)vzip1q_s32(v154, v155);
          int16x8_t v159 = (int16x8_t)vzip2q_s32(v154, v155);
          int16x8_t v160 = (int16x8_t)vzip1q_s32(v144, v148);
          int16x8_t v161 = (int16x8_t)vzip2q_s32(v144, v148);
          int16x8_t v162 = (int16x8_t)vzip1q_s32(v146, v150);
          int16x8_t v163 = (int16x8_t)vzip2q_s32(v146, v150);
          *uint64_t v26 = vzip1q_s16(v160, v162);
          v26[1] = vzip2q_s16(v160, v162);
          uint64_t v26[2] = vzip1q_s16(v156, v158);
          v26[3] = vzip2q_s16(v156, v158);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v161, v163);
          v26[1] = vzip2q_s16(v161, v163);
          uint64_t v26[2] = vzip1q_s16(v157, v159);
          v26[3] = vzip2q_s16(v157, v159);
          v26 += 4;
          int32x4_t v165 = *v118;
          int16x8_t v164 = (int32x4_t *)((char *)v118 + a7);
          int32x4_t v167 = *v164;
          int16x8_t v166 = (int32x4_t *)((char *)v164 + a7);
          int32x4_t v169 = *v166;
          int16x8_t v168 = (int32x4_t *)((char *)v166 + a7);
          int32x4_t v171 = *v168;
          int16x8_t v170 = (int32x4_t *)((char *)v168 + a7);
          int32x4_t v173 = *v170;
          int16x8_t v172 = (int32x4_t *)((char *)v170 + a7);
          int32x4_t v175 = *v172;
          int16x8_t v174 = (int32x4_t *)((char *)v172 + a7);
          int32x4_t v177 = *v174;
          int16x8_t v176 = (int32x4_t *)((char *)v174 + a7);
          int32x4_t v179 = *v176;
          int16x8_t v178 = (int32x4_t *)((char *)v176 + a7);
          int16x8_t v180 = (int16x8_t)vzip1q_s32(v173, v177);
          int16x8_t v181 = (int16x8_t)vzip2q_s32(v173, v177);
          int16x8_t v182 = (int16x8_t)vzip1q_s32(v175, v179);
          int16x8_t v183 = (int16x8_t)vzip2q_s32(v175, v179);
          int16x8_t v184 = (int16x8_t)vzip1q_s32(v165, v169);
          int16x8_t v185 = (int16x8_t)vzip2q_s32(v165, v169);
          int16x8_t v186 = (int16x8_t)vzip1q_s32(v167, v171);
          int16x8_t v187 = (int16x8_t)vzip2q_s32(v167, v171);
          *uint64_t v26 = vzip1q_s16(v184, v186);
          v26[1] = vzip2q_s16(v184, v186);
          uint64_t v26[2] = vzip1q_s16(v180, v182);
          v26[3] = vzip2q_s16(v180, v182);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v185, v187);
          v26[1] = vzip2q_s16(v185, v187);
          uint64_t v26[2] = vzip1q_s16(v181, v183);
          v26[3] = vzip2q_s16(v181, v183);
          v26 += 4;
          int32x4_t v189 = *v178;
          int8x16_t v188 = (int32x4_t *)((char *)v178 + a7);
          int32x4_t v191 = *v188;
          int8x16_t v190 = (int32x4_t *)((char *)v188 + a7);
          int32x4_t v193 = *v190;
          int8x16_t v192 = (int32x4_t *)((char *)v190 + a7);
          int32x4_t v195 = *v192;
          int8x16_t v194 = (int32x4_t *)((char *)v192 + a7);
          int32x4_t v197 = *v194;
          int v196 = (int32x4_t *)((char *)v194 + a7);
          int32x4_t v199 = *v196;
          int v198 = (int32x4_t *)((char *)v196 + a7);
          int32x4_t v200 = *(int32x4_t *)((char *)v198 + a7);
          int16x8_t v201 = (int16x8_t)vzip1q_s32(v197, *v198);
          int16x8_t v202 = (int16x8_t)vzip2q_s32(v197, *v198);
          int16x8_t v203 = (int16x8_t)vzip1q_s32(v199, v200);
          int16x8_t v204 = (int16x8_t)vzip2q_s32(v199, v200);
          int16x8_t v205 = (int16x8_t)vzip1q_s32(v189, v193);
          int16x8_t v206 = (int16x8_t)vzip2q_s32(v189, v193);
          int16x8_t v207 = (int16x8_t)vzip1q_s32(v191, v195);
          int16x8_t v208 = (int16x8_t)vzip2q_s32(v191, v195);
          *uint64_t v26 = vzip1q_s16(v205, v207);
          v26[1] = vzip2q_s16(v205, v207);
          uint64_t v26[2] = vzip1q_s16(v201, v203);
          v26[3] = vzip2q_s16(v201, v203);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v206, v208);
          v26[1] = vzip2q_s16(v206, v208);
          uint64_t v26[2] = vzip1q_s16(v202, v204);
          v26[3] = vzip2q_s16(v202, v204);
          v26 += 4;
          int32x4_t v210 = v24[2];
          int32x4_t v209 = (int32x4_t *)((char *)v24 + a7 + 32);
          int32x4_t v212 = *v209;
          int32x4_t v211 = (int32x4_t *)((char *)v209 + a7);
          int32x4_t v214 = *v211;
          int32x4_t v213 = (int32x4_t *)((char *)v211 + a7);
          int32x4_t v216 = *v213;
          int32x4_t v215 = (int32x4_t *)((char *)v213 + a7);
          int32x4_t v218 = *v215;
          int32x4_t v217 = (int32x4_t *)((char *)v215 + a7);
          int32x4_t v220 = *v217;
          int32x4_t v219 = (int32x4_t *)((char *)v217 + a7);
          int32x4_t v222 = *v219;
          int32x4_t v221 = (int32x4_t *)((char *)v219 + a7);
          int32x4_t v224 = *v221;
          int32x4_t v223 = (int32x4_t *)((char *)v221 + a7);
          int16x8_t v225 = (int16x8_t)vzip1q_s32(v218, v222);
          int16x8_t v226 = (int16x8_t)vzip2q_s32(v218, v222);
          int16x8_t v227 = (int16x8_t)vzip1q_s32(v220, v224);
          int16x8_t v228 = (int16x8_t)vzip2q_s32(v220, v224);
          int16x8_t v229 = (int16x8_t)vzip1q_s32(v210, v214);
          int16x8_t v230 = (int16x8_t)vzip2q_s32(v210, v214);
          int16x8_t v231 = (int16x8_t)vzip1q_s32(v212, v216);
          int16x8_t v232 = (int16x8_t)vzip2q_s32(v212, v216);
          *uint64_t v26 = vzip1q_s16(v229, v231);
          v26[1] = vzip2q_s16(v229, v231);
          uint64_t v26[2] = vzip1q_s16(v225, v227);
          v26[3] = vzip2q_s16(v225, v227);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v230, v232);
          v26[1] = vzip2q_s16(v230, v232);
          uint64_t v26[2] = vzip1q_s16(v226, v228);
          v26[3] = vzip2q_s16(v226, v228);
          v26 += 4;
          int32x4_t v234 = *v223;
          int16x8_t v233 = (int32x4_t *)((char *)v223 + a7);
          int32x4_t v236 = *v233;
          int16x8_t v235 = (int32x4_t *)((char *)v233 + a7);
          int32x4_t v238 = *v235;
          int16x8_t v237 = (int32x4_t *)((char *)v235 + a7);
          int32x4_t v240 = *v237;
          int16x8_t v239 = (int32x4_t *)((char *)v237 + a7);
          int32x4_t v242 = *v239;
          int16x8_t v241 = (int32x4_t *)((char *)v239 + a7);
          int32x4_t v244 = *v241;
          int16x8_t v243 = (int32x4_t *)((char *)v241 + a7);
          int32x4_t v246 = *v243;
          int16x8_t v245 = (int32x4_t *)((char *)v243 + a7);
          int32x4_t v248 = *v245;
          int16x8_t v247 = (int32x4_t *)((char *)v245 + a7);
          int16x8_t v249 = (int16x8_t)vzip1q_s32(v242, v246);
          int16x8_t v250 = (int16x8_t)vzip2q_s32(v242, v246);
          int16x8_t v251 = (int16x8_t)vzip1q_s32(v244, v248);
          int16x8_t v252 = (int16x8_t)vzip2q_s32(v244, v248);
          int16x8_t v253 = (int16x8_t)vzip1q_s32(v234, v238);
          int16x8_t v254 = (int16x8_t)vzip2q_s32(v234, v238);
          int16x8_t v255 = (int16x8_t)vzip1q_s32(v236, v240);
          int16x8_t v256 = (int16x8_t)vzip2q_s32(v236, v240);
          *uint64_t v26 = vzip1q_s16(v253, v255);
          v26[1] = vzip2q_s16(v253, v255);
          uint64_t v26[2] = vzip1q_s16(v249, v251);
          v26[3] = vzip2q_s16(v249, v251);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v254, v256);
          v26[1] = vzip2q_s16(v254, v256);
          uint64_t v26[2] = vzip1q_s16(v250, v252);
          v26[3] = vzip2q_s16(v250, v252);
          v26 += 4;
          int32x4_t v258 = v24[3];
          int8x16_t v257 = (int32x4_t *)((char *)v24 + a7 + 48);
          int32x4_t v260 = *v257;
          int8x16_t v259 = (int32x4_t *)((char *)v257 + a7);
          int32x4_t v262 = *v259;
          int8x16_t v261 = (int32x4_t *)((char *)v259 + a7);
          int32x4_t v264 = *v261;
          int8x16_t v263 = (int32x4_t *)((char *)v261 + a7);
          int32x4_t v266 = *v263;
          BOOL v265 = (int32x4_t *)((char *)v263 + a7);
          int32x4_t v268 = *v265;
          int v267 = (int32x4_t *)((char *)v265 + a7);
          int32x4_t v270 = *v267;
          int32x4_t v269 = (int32x4_t *)((char *)v267 + a7);
          int32x4_t v272 = *v269;
          int32x4_t v271 = (int32x4_t *)((char *)v269 + a7);
          int16x8_t v273 = (int16x8_t)vzip1q_s32(v266, v270);
          int16x8_t v274 = (int16x8_t)vzip2q_s32(v266, v270);
          int16x8_t v275 = (int16x8_t)vzip1q_s32(v268, v272);
          int16x8_t v276 = (int16x8_t)vzip2q_s32(v268, v272);
          int16x8_t v277 = (int16x8_t)vzip1q_s32(v258, v262);
          int16x8_t v278 = (int16x8_t)vzip2q_s32(v258, v262);
          int16x8_t v279 = (int16x8_t)vzip1q_s32(v260, v264);
          int16x8_t v280 = (int16x8_t)vzip2q_s32(v260, v264);
          *uint64_t v26 = vzip1q_s16(v277, v279);
          v26[1] = vzip2q_s16(v277, v279);
          uint64_t v26[2] = vzip1q_s16(v273, v275);
          v26[3] = vzip2q_s16(v273, v275);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v278, v280);
          v26[1] = vzip2q_s16(v278, v280);
          uint64_t v26[2] = vzip1q_s16(v274, v276);
          v26[3] = vzip2q_s16(v274, v276);
          v26 += 4;
          int32x4_t v282 = *v271;
          int32x4_t v281 = (int32x4_t *)((char *)v271 + a7);
          int32x4_t v284 = *v281;
          int32x4_t v283 = (int32x4_t *)((char *)v281 + a7);
          int32x4_t v286 = *v283;
          int32x4_t v285 = (int32x4_t *)((char *)v283 + a7);
          int32x4_t v288 = *v285;
          int32x4_t v287 = (int32x4_t *)((char *)v285 + a7);
          int32x4_t v290 = *v287;
          int32x4_t v289 = (int32x4_t *)((char *)v287 + a7);
          int32x4_t v292 = *v289;
          int32x4_t v291 = (int32x4_t *)((char *)v289 + a7);
          int32x4_t v293 = *(int32x4_t *)((char *)v291 + a7);
          int16x8_t v294 = (int16x8_t)vzip1q_s32(v290, *v291);
          int16x8_t v295 = (int16x8_t)vzip2q_s32(v290, *v291);
          int16x8_t v296 = (int16x8_t)vzip1q_s32(v292, v293);
          int16x8_t v297 = (int16x8_t)vzip2q_s32(v292, v293);
          int16x8_t v298 = (int16x8_t)vzip1q_s32(v282, v286);
          int16x8_t v299 = (int16x8_t)vzip2q_s32(v282, v286);
          int16x8_t v300 = (int16x8_t)vzip1q_s32(v284, v288);
          int16x8_t v301 = (int16x8_t)vzip2q_s32(v284, v288);
          *uint64_t v26 = vzip1q_s16(v298, v300);
          v26[1] = vzip2q_s16(v298, v300);
          uint64_t v26[2] = vzip1q_s16(v294, v296);
          v26[3] = vzip2q_s16(v294, v296);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v299, v301);
          v26[1] = vzip2q_s16(v299, v301);
          uint64_t v26[2] = vzip1q_s16(v295, v297);
          v26[3] = vzip2q_s16(v295, v297);
          v26 += 4;
          int16x8_t v302 = v247 + 1;
          int32x4_t v304 = *v247;
          int16x8_t v303 = (int32x4_t *)((char *)v247 + a7);
          int32x4_t v306 = *v303;
          int16x8_t v305 = (int32x4_t *)((char *)v303 + a7);
          int32x4_t v308 = *v305;
          int16x8_t v307 = (int32x4_t *)((char *)v305 + a7);
          int32x4_t v310 = *v307;
          int16x8_t v309 = (int32x4_t *)((char *)v307 + a7);
          int32x4_t v312 = *v309;
          int16x8_t v311 = (int32x4_t *)((char *)v309 + a7);
          int32x4_t v314 = *v311;
          int8x16_t v313 = (int32x4_t *)((char *)v311 + a7);
          int32x4_t v316 = *v313;
          int8x16_t v315 = (int32x4_t *)((char *)v313 + a7);
          int32x4_t v318 = *v315;
          int8x16_t v317 = (int32x4_t *)((char *)v315 + a7);
          int16x8_t v319 = (int16x8_t)vzip1q_s32(v312, v316);
          int16x8_t v320 = (int16x8_t)vzip2q_s32(v312, v316);
          int16x8_t v321 = (int16x8_t)vzip1q_s32(v314, v318);
          int16x8_t v322 = (int16x8_t)vzip2q_s32(v314, v318);
          int16x8_t v323 = (int16x8_t)vzip1q_s32(v304, v308);
          int16x8_t v324 = (int16x8_t)vzip2q_s32(v304, v308);
          int16x8_t v325 = (int16x8_t)vzip1q_s32(v306, v310);
          int16x8_t v326 = (int16x8_t)vzip2q_s32(v306, v310);
          *uint64_t v26 = vzip1q_s16(v323, v325);
          v26[1] = vzip2q_s16(v323, v325);
          uint64_t v26[2] = vzip1q_s16(v319, v321);
          v26[3] = vzip2q_s16(v319, v321);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v324, v326);
          v26[1] = vzip2q_s16(v324, v326);
          uint64_t v26[2] = vzip1q_s16(v320, v322);
          v26[3] = vzip2q_s16(v320, v322);
          v26 += 4;
          int32x4_t v328 = *v317;
          int8x16_t v327 = (int32x4_t *)((char *)v317 + a7);
          int32x4_t v330 = *v327;
          uint64_t v329 = (int32x4_t *)((char *)v327 + a7);
          int32x4_t v332 = *v329;
          uint64_t v331 = (int32x4_t *)((char *)v329 + a7);
          int32x4_t v334 = *v331;
          uint64_t v333 = (int32x4_t *)((char *)v331 + a7);
          int32x4_t v336 = *v333;
          uint64_t v335 = (int32x4_t *)((char *)v333 + a7);
          int32x4_t v338 = *v335;
          uint64_t v337 = (int32x4_t *)((char *)v335 + a7);
          int32x4_t v339 = *(int32x4_t *)((char *)v337 + a7);
          int16x8_t v340 = (int16x8_t)vzip1q_s32(v336, *v337);
          int16x8_t v341 = (int16x8_t)vzip2q_s32(v336, *v337);
          int16x8_t v342 = (int16x8_t)vzip1q_s32(v338, v339);
          int16x8_t v343 = (int16x8_t)vzip2q_s32(v338, v339);
          int16x8_t v344 = (int16x8_t)vzip1q_s32(v328, v332);
          int16x8_t v345 = (int16x8_t)vzip2q_s32(v328, v332);
          int16x8_t v346 = (int16x8_t)vzip1q_s32(v330, v334);
          int16x8_t v347 = (int16x8_t)vzip2q_s32(v330, v334);
          *uint64_t v26 = vzip1q_s16(v344, v346);
          v26[1] = vzip2q_s16(v344, v346);
          uint64_t v26[2] = vzip1q_s16(v340, v342);
          v26[3] = vzip2q_s16(v340, v342);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v345, v347);
          v26[1] = vzip2q_s16(v345, v347);
          uint64_t v26[2] = vzip1q_s16(v341, v343);
          v26[3] = vzip2q_s16(v341, v343);
          v26 += 4;
          int32x4_t v349 = *v302;
          int v348 = (int32x4_t *)((char *)v302 + a7);
          int32x4_t v351 = *v348;
          unsigned int v350 = (int32x4_t *)((char *)v348 + a7);
          int32x4_t v353 = *v350;
          unsigned int v352 = (int32x4_t *)((char *)v350 + a7);
          int32x4_t v355 = *v352;
          BOOL v354 = (int32x4_t *)((char *)v352 + a7);
          int32x4_t v357 = *v354;
          int v356 = (int32x4_t *)((char *)v354 + a7);
          int32x4_t v359 = *v356;
          unsigned int v358 = (int32x4_t *)((char *)v356 + a7);
          int32x4_t v361 = *v358;
          BOOL v360 = (int32x4_t *)((char *)v358 + a7);
          int32x4_t v363 = *v360;
          unsigned int v362 = (int32x4_t *)((char *)v360 + a7);
          int16x8_t v364 = (int16x8_t)vzip1q_s32(v357, v361);
          int16x8_t v365 = (int16x8_t)vzip2q_s32(v357, v361);
          int16x8_t v366 = (int16x8_t)vzip1q_s32(v359, v363);
          int16x8_t v367 = (int16x8_t)vzip2q_s32(v359, v363);
          int16x8_t v368 = (int16x8_t)vzip1q_s32(v349, v353);
          int16x8_t v369 = (int16x8_t)vzip2q_s32(v349, v353);
          int16x8_t v370 = (int16x8_t)vzip1q_s32(v351, v355);
          int16x8_t v371 = (int16x8_t)vzip2q_s32(v351, v355);
          *uint64_t v26 = vzip1q_s16(v368, v370);
          v26[1] = vzip2q_s16(v368, v370);
          uint64_t v26[2] = vzip1q_s16(v364, v366);
          v26[3] = vzip2q_s16(v364, v366);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v369, v371);
          v26[1] = vzip2q_s16(v369, v371);
          uint64_t v26[2] = vzip1q_s16(v365, v367);
          v26[3] = vzip2q_s16(v365, v367);
          v26 += 4;
          int32x4_t v373 = *v362;
          int v372 = (int32x4_t *)((char *)v362 + a7);
          int32x4_t v375 = *v372;
          BOOL v374 = (int32x4_t *)((char *)v372 + a7);
          int32x4_t v377 = *v374;
          v376 = (int32x4_t *)((char *)v374 + a7);
          int32x4_t v379 = *v376;
          unint64_t v378 = (int32x4_t *)((char *)v376 + a7);
          int32x4_t v381 = *v378;
          unint64_t v380 = (int32x4_t *)((char *)v378 + a7);
          int32x4_t v383 = *v380;
          unint64_t v382 = (int32x4_t *)((char *)v380 + a7);
          int32x4_t v384 = *(int32x4_t *)((char *)v382 + a7);
          int16x8_t v385 = (int16x8_t)vzip1q_s32(v381, *v382);
          int16x8_t v386 = (int16x8_t)vzip2q_s32(v381, *v382);
          int16x8_t v387 = (int16x8_t)vzip1q_s32(v383, v384);
          int16x8_t v388 = (int16x8_t)vzip2q_s32(v383, v384);
          int16x8_t v389 = (int16x8_t)vzip1q_s32(v373, v377);
          int16x8_t v390 = (int16x8_t)vzip2q_s32(v373, v377);
          int16x8_t v391 = (int16x8_t)vzip1q_s32(v375, v379);
          int16x8_t v392 = (int16x8_t)vzip2q_s32(v375, v379);
          *uint64_t v26 = vzip1q_s16(v389, v391);
          v26[1] = vzip2q_s16(v389, v391);
          uint64_t v26[2] = vzip1q_s16(v385, v387);
          v26[3] = vzip2q_s16(v385, v387);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v390, v392);
          v26[1] = vzip2q_s16(v390, v392);
          uint64_t v26[2] = vzip1q_s16(v386, v388);
          v26[3] = vzip2q_s16(v386, v388);
          uint64_t v25 = (v25 - v17) & v17;
          v23 += 32;
          v24 += 4;
        }

        while (v23 < a10);
      }

      uint64_t result = (result - v18) & v18;
      v21 += 32 * a7;
    }
  }

  return result;
}

uint64_t sub_38898( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  uint64_t v17 = sub_34508(~(-1 << a3) & 0x7FFFFFE0, 0, a3, a4);
  uint64_t v18 = sub_34508(0, ~(-1 << a4) & 0x7FFFFFE0, a3, a4);
  uint64_t result = sub_34508(a8 + a5, 0, a3, a4);
  if (a11)
  {
    uint64_t v20 = result;
    uint64_t v21 = a2 + a9 * a7;
    uint64_t result = sub_34508(0, a9 + a6, a3, a4);
    for (unsigned int i = 0; i < a11; i += 32)
    {
      if (a10)
      {
        unsigned int v23 = 0;
        int v24 = (int32x4_t *)(v21 + 2LL * a8);
        uint64_t v25 = v20;
        do
        {
          uint64_t v26 = (int16x8_t *)(a1 + 2 * (v25 + result));
          int32x4_t v28 = *(int32x4_t *)((char *)v24 + a7);
          __int16 v27 = (int32x4_t *)((char *)v24 + a7 + a7);
          int32x4_t v30 = *v27;
          uint64_t v29 = (int32x4_t *)((char *)v27 + a7);
          int32x4_t v32 = *v29;
          __int128 v31 = (int32x4_t *)((char *)v29 + a7);
          int32x4_t v34 = *v31;
          uint64_t v33 = (int32x4_t *)((char *)v31 + a7);
          int32x4_t v36 = *v33;
          int v35 = (int32x4_t *)((char *)v33 + a7);
          int32x4_t v38 = *v35;
          unsigned int v37 = (int32x4_t *)((char *)v35 + a7);
          int32x4_t v40 = *v37;
          unsigned int v39 = (int32x4_t *)((char *)v37 + a7);
          int16x8_t v41 = (int16x8_t)vzip1q_s32(v34, v38);
          int16x8_t v42 = (int16x8_t)vzip2q_s32(v34, v38);
          int16x8_t v43 = (int16x8_t)vzip1q_s32(v36, v40);
          int16x8_t v44 = (int16x8_t)vzip2q_s32(v36, v40);
          int16x8_t v45 = (int16x8_t)vzip1q_s32(*v24, v30);
          int16x8_t v46 = (int16x8_t)vzip2q_s32(*v24, v30);
          int16x8_t v47 = (int16x8_t)vzip1q_s32(v28, v32);
          int16x8_t v48 = (int16x8_t)vzip2q_s32(v28, v32);
          *uint64_t v26 = vzip1q_s16(v45, v47);
          v26[1] = vzip2q_s16(v45, v47);
          uint64_t v26[2] = vzip1q_s16(v41, v43);
          v26[3] = vzip2q_s16(v41, v43);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v46, v48);
          v26[1] = vzip2q_s16(v46, v48);
          uint64_t v26[2] = vzip1q_s16(v42, v44);
          v26[3] = vzip2q_s16(v42, v44);
          v26 += 4;
          int32x4_t v50 = *v39;
          int v49 = (int32x4_t *)((char *)v39 + a7);
          int32x4_t v52 = *v49;
          int v51 = (int32x4_t *)((char *)v49 + a7);
          int32x4_t v54 = *v51;
          uint64_t v53 = (int32x4_t *)((char *)v51 + a7);
          int32x4_t v56 = *v53;
          uint64_t v55 = (int32x4_t *)((char *)v53 + a7);
          int32x4_t v58 = *v55;
          unsigned int v57 = (int32x4_t *)((char *)v55 + a7);
          int32x4_t v60 = *v57;
          unsigned int v59 = (int32x4_t *)((char *)v57 + a7);
          int32x4_t v62 = *v59;
          unsigned int v61 = (int32x4_t *)((char *)v59 + a7);
          int32x4_t v64 = *v61;
          unsigned int v63 = (int32x4_t *)((char *)v61 + a7);
          int16x8_t v65 = (int16x8_t)vzip1q_s32(v58, v62);
          int16x8_t v66 = (int16x8_t)vzip2q_s32(v58, v62);
          int16x8_t v67 = (int16x8_t)vzip1q_s32(v60, v64);
          int16x8_t v68 = (int16x8_t)vzip2q_s32(v60, v64);
          int16x8_t v69 = (int16x8_t)vzip1q_s32(v50, v54);
          int16x8_t v70 = (int16x8_t)vzip2q_s32(v50, v54);
          int16x8_t v71 = (int16x8_t)vzip1q_s32(v52, v56);
          int16x8_t v72 = (int16x8_t)vzip2q_s32(v52, v56);
          *uint64_t v26 = vzip1q_s16(v69, v71);
          v26[1] = vzip2q_s16(v69, v71);
          uint64_t v26[2] = vzip1q_s16(v65, v67);
          v26[3] = vzip2q_s16(v65, v67);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v70, v72);
          v26[1] = vzip2q_s16(v70, v72);
          uint64_t v26[2] = vzip1q_s16(v66, v68);
          v26[3] = vzip2q_s16(v66, v68);
          v26 += 4;
          int32x4_t v74 = v24[1];
          unsigned int v73 = (int32x4_t *)((char *)v24 + a7 + 16);
          int32x4_t v76 = *v73;
          unsigned int v75 = (int32x4_t *)((char *)v73 + a7);
          int32x4_t v78 = *v75;
          uint64_t v77 = (int32x4_t *)((char *)v75 + a7);
          int32x4_t v80 = *v77;
          uint64_t v79 = (int32x4_t *)((char *)v77 + a7);
          int32x4_t v82 = *v79;
          unsigned int v81 = (int32x4_t *)((char *)v79 + a7);
          int32x4_t v84 = *v81;
          int v83 = (int32x4_t *)((char *)v81 + a7);
          int32x4_t v86 = *v83;
          int v85 = (int32x4_t *)((char *)v83 + a7);
          int32x4_t v88 = *v85;
          uint64_t v87 = (int32x4_t *)((char *)v85 + a7);
          int16x8_t v89 = (int16x8_t)vzip1q_s32(v82, v86);
          int16x8_t v90 = (int16x8_t)vzip2q_s32(v82, v86);
          int16x8_t v91 = (int16x8_t)vzip1q_s32(v84, v88);
          int16x8_t v92 = (int16x8_t)vzip2q_s32(v84, v88);
          int16x8_t v93 = (int16x8_t)vzip1q_s32(v74, v78);
          int16x8_t v94 = (int16x8_t)vzip2q_s32(v74, v78);
          int16x8_t v95 = (int16x8_t)vzip1q_s32(v76, v80);
          int16x8_t v96 = (int16x8_t)vzip2q_s32(v76, v80);
          *uint64_t v26 = vzip1q_s16(v93, v95);
          v26[1] = vzip2q_s16(v93, v95);
          uint64_t v26[2] = vzip1q_s16(v89, v91);
          v26[3] = vzip2q_s16(v89, v91);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v94, v96);
          v26[1] = vzip2q_s16(v94, v96);
          uint64_t v26[2] = vzip1q_s16(v90, v92);
          v26[3] = vzip2q_s16(v90, v92);
          v26 += 4;
          int32x4_t v98 = *v87;
          unsigned int v97 = (int32x4_t *)((char *)v87 + a7);
          int32x4_t v100 = *v97;
          unsigned int v99 = (int32x4_t *)((char *)v97 + a7);
          int32x4_t v102 = *v99;
          unsigned int v101 = (int32x4_t *)((char *)v99 + a7);
          int32x4_t v104 = *v101;
          unsigned int v103 = (int32x4_t *)((char *)v101 + a7);
          int32x4_t v106 = *v103;
          int v105 = (int32x4_t *)((char *)v103 + a7);
          int32x4_t v108 = *v105;
          unsigned int v107 = (int32x4_t *)((char *)v105 + a7);
          int32x4_t v109 = *(int32x4_t *)((char *)v107 + a7);
          int16x8_t v110 = (int16x8_t)vzip1q_s32(v106, *v107);
          int16x8_t v111 = (int16x8_t)vzip2q_s32(v106, *v107);
          int16x8_t v112 = (int16x8_t)vzip1q_s32(v108, v109);
          int16x8_t v113 = (int16x8_t)vzip2q_s32(v108, v109);
          int16x8_t v114 = (int16x8_t)vzip1q_s32(v98, v102);
          int16x8_t v115 = (int16x8_t)vzip2q_s32(v98, v102);
          int16x8_t v116 = (int16x8_t)vzip1q_s32(v100, v104);
          int16x8_t v117 = (int16x8_t)vzip2q_s32(v100, v104);
          *uint64_t v26 = vzip1q_s16(v114, v116);
          v26[1] = vzip2q_s16(v114, v116);
          uint64_t v26[2] = vzip1q_s16(v110, v112);
          v26[3] = vzip2q_s16(v110, v112);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v115, v117);
          v26[1] = vzip2q_s16(v115, v117);
          uint64_t v26[2] = vzip1q_s16(v111, v113);
          v26[3] = vzip2q_s16(v111, v113);
          v26 += 4;
          int v118 = v63 + 1;
          int32x4_t v120 = *v63;
          int8x16_t v119 = (int32x4_t *)((char *)v63 + a7);
          int32x4_t v122 = *v119;
          unsigned int v121 = (int32x4_t *)((char *)v119 + a7);
          int32x4_t v124 = *v121;
          int8x16_t v123 = (int32x4_t *)((char *)v121 + a7);
          int32x4_t v126 = *v123;
          int8x16_t v125 = (int32x4_t *)((char *)v123 + a7);
          int32x4_t v128 = *v125;
          int8x16_t v127 = (int32x4_t *)((char *)v125 + a7);
          int32x4_t v130 = *v127;
          int8x16_t v129 = (int32x4_t *)((char *)v127 + a7);
          int32x4_t v132 = *v129;
          unsigned int v131 = (int32x4_t *)((char *)v129 + a7);
          int32x4_t v134 = *v131;
          int v133 = (int32x4_t *)((char *)v131 + a7);
          int16x8_t v135 = (int16x8_t)vzip1q_s32(v128, v132);
          int16x8_t v136 = (int16x8_t)vzip2q_s32(v128, v132);
          int16x8_t v137 = (int16x8_t)vzip1q_s32(v130, v134);
          int16x8_t v138 = (int16x8_t)vzip2q_s32(v130, v134);
          int16x8_t v139 = (int16x8_t)vzip1q_s32(v120, v124);
          int16x8_t v140 = (int16x8_t)vzip2q_s32(v120, v124);
          int16x8_t v141 = (int16x8_t)vzip1q_s32(v122, v126);
          int16x8_t v142 = (int16x8_t)vzip2q_s32(v122, v126);
          *uint64_t v26 = vzip1q_s16(v139, v141);
          v26[1] = vzip2q_s16(v139, v141);
          uint64_t v26[2] = vzip1q_s16(v135, v137);
          v26[3] = vzip2q_s16(v135, v137);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v140, v142);
          v26[1] = vzip2q_s16(v140, v142);
          uint64_t v26[2] = vzip1q_s16(v136, v138);
          v26[3] = vzip2q_s16(v136, v138);
          v26 += 4;
          int32x4_t v144 = *v133;
          int v143 = (int32x4_t *)((char *)v133 + a7);
          int32x4_t v146 = *v143;
          unsigned int v145 = (int32x4_t *)((char *)v143 + a7);
          int32x4_t v148 = *v145;
          int v147 = (int32x4_t *)((char *)v145 + a7);
          int32x4_t v150 = *v147;
          uint64_t v149 = (int32x4_t *)((char *)v147 + a7);
          int32x4_t v152 = *v149;
          char v151 = (int32x4_t *)((char *)v149 + a7);
          int32x4_t v154 = *v151;
          int v153 = (int32x4_t *)((char *)v151 + a7);
          int32x4_t v155 = *(int32x4_t *)((char *)v153 + a7);
          int16x8_t v156 = (int16x8_t)vzip1q_s32(v152, *v153);
          int16x8_t v157 = (int16x8_t)vzip2q_s32(v152, *v153);
          int16x8_t v158 = (int16x8_t)vzip1q_s32(v154, v155);
          int16x8_t v159 = (int16x8_t)vzip2q_s32(v154, v155);
          int16x8_t v160 = (int16x8_t)vzip1q_s32(v144, v148);
          int16x8_t v161 = (int16x8_t)vzip2q_s32(v144, v148);
          int16x8_t v162 = (int16x8_t)vzip1q_s32(v146, v150);
          int16x8_t v163 = (int16x8_t)vzip2q_s32(v146, v150);
          *uint64_t v26 = vzip1q_s16(v160, v162);
          v26[1] = vzip2q_s16(v160, v162);
          uint64_t v26[2] = vzip1q_s16(v156, v158);
          v26[3] = vzip2q_s16(v156, v158);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v161, v163);
          v26[1] = vzip2q_s16(v161, v163);
          uint64_t v26[2] = vzip1q_s16(v157, v159);
          v26[3] = vzip2q_s16(v157, v159);
          v26 += 4;
          int32x4_t v165 = *v118;
          int16x8_t v164 = (int32x4_t *)((char *)v118 + a7);
          int32x4_t v167 = *v164;
          int16x8_t v166 = (int32x4_t *)((char *)v164 + a7);
          int32x4_t v169 = *v166;
          int16x8_t v168 = (int32x4_t *)((char *)v166 + a7);
          int32x4_t v171 = *v168;
          int16x8_t v170 = (int32x4_t *)((char *)v168 + a7);
          int32x4_t v173 = *v170;
          int16x8_t v172 = (int32x4_t *)((char *)v170 + a7);
          int32x4_t v175 = *v172;
          int16x8_t v174 = (int32x4_t *)((char *)v172 + a7);
          int32x4_t v177 = *v174;
          int16x8_t v176 = (int32x4_t *)((char *)v174 + a7);
          int32x4_t v179 = *v176;
          int16x8_t v178 = (int32x4_t *)((char *)v176 + a7);
          int16x8_t v180 = (int16x8_t)vzip1q_s32(v173, v177);
          int16x8_t v181 = (int16x8_t)vzip2q_s32(v173, v177);
          int16x8_t v182 = (int16x8_t)vzip1q_s32(v175, v179);
          int16x8_t v183 = (int16x8_t)vzip2q_s32(v175, v179);
          int16x8_t v184 = (int16x8_t)vzip1q_s32(v165, v169);
          int16x8_t v185 = (int16x8_t)vzip2q_s32(v165, v169);
          int16x8_t v186 = (int16x8_t)vzip1q_s32(v167, v171);
          int16x8_t v187 = (int16x8_t)vzip2q_s32(v167, v171);
          *uint64_t v26 = vzip1q_s16(v184, v186);
          v26[1] = vzip2q_s16(v184, v186);
          uint64_t v26[2] = vzip1q_s16(v180, v182);
          v26[3] = vzip2q_s16(v180, v182);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v185, v187);
          v26[1] = vzip2q_s16(v185, v187);
          uint64_t v26[2] = vzip1q_s16(v181, v183);
          v26[3] = vzip2q_s16(v181, v183);
          v26 += 4;
          int32x4_t v189 = *v178;
          int8x16_t v188 = (int32x4_t *)((char *)v178 + a7);
          int32x4_t v191 = *v188;
          int8x16_t v190 = (int32x4_t *)((char *)v188 + a7);
          int32x4_t v193 = *v190;
          int8x16_t v192 = (int32x4_t *)((char *)v190 + a7);
          int32x4_t v195 = *v192;
          int8x16_t v194 = (int32x4_t *)((char *)v192 + a7);
          int32x4_t v197 = *v194;
          int v196 = (int32x4_t *)((char *)v194 + a7);
          int32x4_t v199 = *v196;
          int v198 = (int32x4_t *)((char *)v196 + a7);
          int32x4_t v200 = *(int32x4_t *)((char *)v198 + a7);
          int16x8_t v201 = (int16x8_t)vzip1q_s32(v197, *v198);
          int16x8_t v202 = (int16x8_t)vzip2q_s32(v197, *v198);
          int16x8_t v203 = (int16x8_t)vzip1q_s32(v199, v200);
          int16x8_t v204 = (int16x8_t)vzip2q_s32(v199, v200);
          int16x8_t v205 = (int16x8_t)vzip1q_s32(v189, v193);
          int16x8_t v206 = (int16x8_t)vzip2q_s32(v189, v193);
          int16x8_t v207 = (int16x8_t)vzip1q_s32(v191, v195);
          int16x8_t v208 = (int16x8_t)vzip2q_s32(v191, v195);
          *uint64_t v26 = vzip1q_s16(v205, v207);
          v26[1] = vzip2q_s16(v205, v207);
          uint64_t v26[2] = vzip1q_s16(v201, v203);
          v26[3] = vzip2q_s16(v201, v203);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v206, v208);
          v26[1] = vzip2q_s16(v206, v208);
          uint64_t v26[2] = vzip1q_s16(v202, v204);
          v26[3] = vzip2q_s16(v202, v204);
          v26 += 4;
          int32x4_t v210 = v24[2];
          int32x4_t v209 = (int32x4_t *)((char *)v24 + a7 + 32);
          int32x4_t v212 = *v209;
          int32x4_t v211 = (int32x4_t *)((char *)v209 + a7);
          int32x4_t v214 = *v211;
          int32x4_t v213 = (int32x4_t *)((char *)v211 + a7);
          int32x4_t v216 = *v213;
          int32x4_t v215 = (int32x4_t *)((char *)v213 + a7);
          int32x4_t v218 = *v215;
          int32x4_t v217 = (int32x4_t *)((char *)v215 + a7);
          int32x4_t v220 = *v217;
          int32x4_t v219 = (int32x4_t *)((char *)v217 + a7);
          int32x4_t v222 = *v219;
          int32x4_t v221 = (int32x4_t *)((char *)v219 + a7);
          int32x4_t v224 = *v221;
          int32x4_t v223 = (int32x4_t *)((char *)v221 + a7);
          int16x8_t v225 = (int16x8_t)vzip1q_s32(v218, v222);
          int16x8_t v226 = (int16x8_t)vzip2q_s32(v218, v222);
          int16x8_t v227 = (int16x8_t)vzip1q_s32(v220, v224);
          int16x8_t v228 = (int16x8_t)vzip2q_s32(v220, v224);
          int16x8_t v229 = (int16x8_t)vzip1q_s32(v210, v214);
          int16x8_t v230 = (int16x8_t)vzip2q_s32(v210, v214);
          int16x8_t v231 = (int16x8_t)vzip1q_s32(v212, v216);
          int16x8_t v232 = (int16x8_t)vzip2q_s32(v212, v216);
          *uint64_t v26 = vzip1q_s16(v229, v231);
          v26[1] = vzip2q_s16(v229, v231);
          uint64_t v26[2] = vzip1q_s16(v225, v227);
          v26[3] = vzip2q_s16(v225, v227);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v230, v232);
          v26[1] = vzip2q_s16(v230, v232);
          uint64_t v26[2] = vzip1q_s16(v226, v228);
          v26[3] = vzip2q_s16(v226, v228);
          v26 += 4;
          int32x4_t v234 = *v223;
          int16x8_t v233 = (int32x4_t *)((char *)v223 + a7);
          int32x4_t v236 = *v233;
          int16x8_t v235 = (int32x4_t *)((char *)v233 + a7);
          int32x4_t v238 = *v235;
          int16x8_t v237 = (int32x4_t *)((char *)v235 + a7);
          int32x4_t v240 = *v237;
          int16x8_t v239 = (int32x4_t *)((char *)v237 + a7);
          int32x4_t v242 = *v239;
          int16x8_t v241 = (int32x4_t *)((char *)v239 + a7);
          int32x4_t v244 = *v241;
          int16x8_t v243 = (int32x4_t *)((char *)v241 + a7);
          int32x4_t v246 = *v243;
          int16x8_t v245 = (int32x4_t *)((char *)v243 + a7);
          int32x4_t v248 = *v245;
          int16x8_t v247 = (int32x4_t *)((char *)v245 + a7);
          int16x8_t v249 = (int16x8_t)vzip1q_s32(v242, v246);
          int16x8_t v250 = (int16x8_t)vzip2q_s32(v242, v246);
          int16x8_t v251 = (int16x8_t)vzip1q_s32(v244, v248);
          int16x8_t v252 = (int16x8_t)vzip2q_s32(v244, v248);
          int16x8_t v253 = (int16x8_t)vzip1q_s32(v234, v238);
          int16x8_t v254 = (int16x8_t)vzip2q_s32(v234, v238);
          int16x8_t v255 = (int16x8_t)vzip1q_s32(v236, v240);
          int16x8_t v256 = (int16x8_t)vzip2q_s32(v236, v240);
          *uint64_t v26 = vzip1q_s16(v253, v255);
          v26[1] = vzip2q_s16(v253, v255);
          uint64_t v26[2] = vzip1q_s16(v249, v251);
          v26[3] = vzip2q_s16(v249, v251);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v254, v256);
          v26[1] = vzip2q_s16(v254, v256);
          uint64_t v26[2] = vzip1q_s16(v250, v252);
          v26[3] = vzip2q_s16(v250, v252);
          v26 += 4;
          int32x4_t v258 = v24[3];
          int8x16_t v257 = (int32x4_t *)((char *)v24 + a7 + 48);
          int32x4_t v260 = *v257;
          int8x16_t v259 = (int32x4_t *)((char *)v257 + a7);
          int32x4_t v262 = *v259;
          int8x16_t v261 = (int32x4_t *)((char *)v259 + a7);
          int32x4_t v264 = *v261;
          int8x16_t v263 = (int32x4_t *)((char *)v261 + a7);
          int32x4_t v266 = *v263;
          BOOL v265 = (int32x4_t *)((char *)v263 + a7);
          int32x4_t v268 = *v265;
          int v267 = (int32x4_t *)((char *)v265 + a7);
          int32x4_t v270 = *v267;
          int32x4_t v269 = (int32x4_t *)((char *)v267 + a7);
          int32x4_t v272 = *v269;
          int32x4_t v271 = (int32x4_t *)((char *)v269 + a7);
          int16x8_t v273 = (int16x8_t)vzip1q_s32(v266, v270);
          int16x8_t v274 = (int16x8_t)vzip2q_s32(v266, v270);
          int16x8_t v275 = (int16x8_t)vzip1q_s32(v268, v272);
          int16x8_t v276 = (int16x8_t)vzip2q_s32(v268, v272);
          int16x8_t v277 = (int16x8_t)vzip1q_s32(v258, v262);
          int16x8_t v278 = (int16x8_t)vzip2q_s32(v258, v262);
          int16x8_t v279 = (int16x8_t)vzip1q_s32(v260, v264);
          int16x8_t v280 = (int16x8_t)vzip2q_s32(v260, v264);
          *uint64_t v26 = vzip1q_s16(v277, v279);
          v26[1] = vzip2q_s16(v277, v279);
          uint64_t v26[2] = vzip1q_s16(v273, v275);
          v26[3] = vzip2q_s16(v273, v275);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v278, v280);
          v26[1] = vzip2q_s16(v278, v280);
          uint64_t v26[2] = vzip1q_s16(v274, v276);
          v26[3] = vzip2q_s16(v274, v276);
          v26 += 4;
          int32x4_t v282 = *v271;
          int32x4_t v281 = (int32x4_t *)((char *)v271 + a7);
          int32x4_t v284 = *v281;
          int32x4_t v283 = (int32x4_t *)((char *)v281 + a7);
          int32x4_t v286 = *v283;
          int32x4_t v285 = (int32x4_t *)((char *)v283 + a7);
          int32x4_t v288 = *v285;
          int32x4_t v287 = (int32x4_t *)((char *)v285 + a7);
          int32x4_t v290 = *v287;
          int32x4_t v289 = (int32x4_t *)((char *)v287 + a7);
          int32x4_t v292 = *v289;
          int32x4_t v291 = (int32x4_t *)((char *)v289 + a7);
          int32x4_t v293 = *(int32x4_t *)((char *)v291 + a7);
          int16x8_t v294 = (int16x8_t)vzip1q_s32(v290, *v291);
          int16x8_t v295 = (int16x8_t)vzip2q_s32(v290, *v291);
          int16x8_t v296 = (int16x8_t)vzip1q_s32(v292, v293);
          int16x8_t v297 = (int16x8_t)vzip2q_s32(v292, v293);
          int16x8_t v298 = (int16x8_t)vzip1q_s32(v282, v286);
          int16x8_t v299 = (int16x8_t)vzip2q_s32(v282, v286);
          int16x8_t v300 = (int16x8_t)vzip1q_s32(v284, v288);
          int16x8_t v301 = (int16x8_t)vzip2q_s32(v284, v288);
          *uint64_t v26 = vzip1q_s16(v298, v300);
          v26[1] = vzip2q_s16(v298, v300);
          uint64_t v26[2] = vzip1q_s16(v294, v296);
          v26[3] = vzip2q_s16(v294, v296);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v299, v301);
          v26[1] = vzip2q_s16(v299, v301);
          uint64_t v26[2] = vzip1q_s16(v295, v297);
          v26[3] = vzip2q_s16(v295, v297);
          v26 += 4;
          int16x8_t v302 = v247 + 1;
          int32x4_t v304 = *v247;
          int16x8_t v303 = (int32x4_t *)((char *)v247 + a7);
          int32x4_t v306 = *v303;
          int16x8_t v305 = (int32x4_t *)((char *)v303 + a7);
          int32x4_t v308 = *v305;
          int16x8_t v307 = (int32x4_t *)((char *)v305 + a7);
          int32x4_t v310 = *v307;
          int16x8_t v309 = (int32x4_t *)((char *)v307 + a7);
          int32x4_t v312 = *v309;
          int16x8_t v311 = (int32x4_t *)((char *)v309 + a7);
          int32x4_t v314 = *v311;
          int8x16_t v313 = (int32x4_t *)((char *)v311 + a7);
          int32x4_t v316 = *v313;
          int8x16_t v315 = (int32x4_t *)((char *)v313 + a7);
          int32x4_t v318 = *v315;
          int8x16_t v317 = (int32x4_t *)((char *)v315 + a7);
          int16x8_t v319 = (int16x8_t)vzip1q_s32(v312, v316);
          int16x8_t v320 = (int16x8_t)vzip2q_s32(v312, v316);
          int16x8_t v321 = (int16x8_t)vzip1q_s32(v314, v318);
          int16x8_t v322 = (int16x8_t)vzip2q_s32(v314, v318);
          int16x8_t v323 = (int16x8_t)vzip1q_s32(v304, v308);
          int16x8_t v324 = (int16x8_t)vzip2q_s32(v304, v308);
          int16x8_t v325 = (int16x8_t)vzip1q_s32(v306, v310);
          int16x8_t v326 = (int16x8_t)vzip2q_s32(v306, v310);
          *uint64_t v26 = vzip1q_s16(v323, v325);
          v26[1] = vzip2q_s16(v323, v325);
          uint64_t v26[2] = vzip1q_s16(v319, v321);
          v26[3] = vzip2q_s16(v319, v321);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v324, v326);
          v26[1] = vzip2q_s16(v324, v326);
          uint64_t v26[2] = vzip1q_s16(v320, v322);
          v26[3] = vzip2q_s16(v320, v322);
          v26 += 4;
          int32x4_t v328 = *v317;
          int8x16_t v327 = (int32x4_t *)((char *)v317 + a7);
          int32x4_t v330 = *v327;
          uint64_t v329 = (int32x4_t *)((char *)v327 + a7);
          int32x4_t v332 = *v329;
          uint64_t v331 = (int32x4_t *)((char *)v329 + a7);
          int32x4_t v334 = *v331;
          uint64_t v333 = (int32x4_t *)((char *)v331 + a7);
          int32x4_t v336 = *v333;
          uint64_t v335 = (int32x4_t *)((char *)v333 + a7);
          int32x4_t v338 = *v335;
          uint64_t v337 = (int32x4_t *)((char *)v335 + a7);
          int32x4_t v339 = *(int32x4_t *)((char *)v337 + a7);
          int16x8_t v340 = (int16x8_t)vzip1q_s32(v336, *v337);
          int16x8_t v341 = (int16x8_t)vzip2q_s32(v336, *v337);
          int16x8_t v342 = (int16x8_t)vzip1q_s32(v338, v339);
          int16x8_t v343 = (int16x8_t)vzip2q_s32(v338, v339);
          int16x8_t v344 = (int16x8_t)vzip1q_s32(v328, v332);
          int16x8_t v345 = (int16x8_t)vzip2q_s32(v328, v332);
          int16x8_t v346 = (int16x8_t)vzip1q_s32(v330, v334);
          int16x8_t v347 = (int16x8_t)vzip2q_s32(v330, v334);
          *uint64_t v26 = vzip1q_s16(v344, v346);
          v26[1] = vzip2q_s16(v344, v346);
          uint64_t v26[2] = vzip1q_s16(v340, v342);
          v26[3] = vzip2q_s16(v340, v342);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v345, v347);
          v26[1] = vzip2q_s16(v345, v347);
          uint64_t v26[2] = vzip1q_s16(v341, v343);
          v26[3] = vzip2q_s16(v341, v343);
          v26 += 4;
          int32x4_t v349 = *v302;
          int v348 = (int32x4_t *)((char *)v302 + a7);
          int32x4_t v351 = *v348;
          unsigned int v350 = (int32x4_t *)((char *)v348 + a7);
          int32x4_t v353 = *v350;
          unsigned int v352 = (int32x4_t *)((char *)v350 + a7);
          int32x4_t v355 = *v352;
          BOOL v354 = (int32x4_t *)((char *)v352 + a7);
          int32x4_t v357 = *v354;
          int v356 = (int32x4_t *)((char *)v354 + a7);
          int32x4_t v359 = *v356;
          unsigned int v358 = (int32x4_t *)((char *)v356 + a7);
          int32x4_t v361 = *v358;
          BOOL v360 = (int32x4_t *)((char *)v358 + a7);
          int32x4_t v363 = *v360;
          unsigned int v362 = (int32x4_t *)((char *)v360 + a7);
          int16x8_t v364 = (int16x8_t)vzip1q_s32(v357, v361);
          int16x8_t v365 = (int16x8_t)vzip2q_s32(v357, v361);
          int16x8_t v366 = (int16x8_t)vzip1q_s32(v359, v363);
          int16x8_t v367 = (int16x8_t)vzip2q_s32(v359, v363);
          int16x8_t v368 = (int16x8_t)vzip1q_s32(v349, v353);
          int16x8_t v369 = (int16x8_t)vzip2q_s32(v349, v353);
          int16x8_t v370 = (int16x8_t)vzip1q_s32(v351, v355);
          int16x8_t v371 = (int16x8_t)vzip2q_s32(v351, v355);
          *uint64_t v26 = vzip1q_s16(v368, v370);
          v26[1] = vzip2q_s16(v368, v370);
          uint64_t v26[2] = vzip1q_s16(v364, v366);
          v26[3] = vzip2q_s16(v364, v366);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v369, v371);
          v26[1] = vzip2q_s16(v369, v371);
          uint64_t v26[2] = vzip1q_s16(v365, v367);
          v26[3] = vzip2q_s16(v365, v367);
          v26 += 4;
          int32x4_t v373 = *v362;
          int v372 = (int32x4_t *)((char *)v362 + a7);
          int32x4_t v375 = *v372;
          BOOL v374 = (int32x4_t *)((char *)v372 + a7);
          int32x4_t v377 = *v374;
          v376 = (int32x4_t *)((char *)v374 + a7);
          int32x4_t v379 = *v376;
          unint64_t v378 = (int32x4_t *)((char *)v376 + a7);
          int32x4_t v381 = *v378;
          unint64_t v380 = (int32x4_t *)((char *)v378 + a7);
          int32x4_t v383 = *v380;
          unint64_t v382 = (int32x4_t *)((char *)v380 + a7);
          int32x4_t v384 = *(int32x4_t *)((char *)v382 + a7);
          int16x8_t v385 = (int16x8_t)vzip1q_s32(v381, *v382);
          int16x8_t v386 = (int16x8_t)vzip2q_s32(v381, *v382);
          int16x8_t v387 = (int16x8_t)vzip1q_s32(v383, v384);
          int16x8_t v388 = (int16x8_t)vzip2q_s32(v383, v384);
          int16x8_t v389 = (int16x8_t)vzip1q_s32(v373, v377);
          int16x8_t v390 = (int16x8_t)vzip2q_s32(v373, v377);
          int16x8_t v391 = (int16x8_t)vzip1q_s32(v375, v379);
          int16x8_t v392 = (int16x8_t)vzip2q_s32(v375, v379);
          *uint64_t v26 = vzip1q_s16(v389, v391);
          v26[1] = vzip2q_s16(v389, v391);
          uint64_t v26[2] = vzip1q_s16(v385, v387);
          v26[3] = vzip2q_s16(v385, v387);
          v26 += 4;
          *uint64_t v26 = vzip1q_s16(v390, v392);
          v26[1] = vzip2q_s16(v390, v392);
          uint64_t v26[2] = vzip1q_s16(v386, v388);
          v26[3] = vzip2q_s16(v386, v388);
          uint64_t v25 = (v25 - v17) & v17;
          v23 += 32;
          v24 += 4;
        }

        while (v23 < a10);
      }

      uint64_t result = (result - v18) & v18;
      v21 += 32 * a7;
    }
  }

  return result;
}

uint64_t sub_39068( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    uint64_t v18 = a13;
    unsigned int v19 = a12;
    if (a14)
    {
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v120);
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v119, &v118);
        unsigned int v93 = v121;
        if (v121)
        {
          int v20 = 0;
          unsigned __int16 v95 = 0;
          char v21 = v118;
          char v91 = v119;
          unsigned int v87 = a7 >> v119;
          unsigned int v110 = a8 >> v118;
          unsigned int v22 = v122;
          unsigned int v85 = a11 + a7;
          int v83 = ((1 << v119) - 1) & a7;
          int v84 = ((1 << v119) - 1) & (a11 + a7);
          int v82 = (1 << v119) - v83;
          unsigned int v108 = a12 + a8;
          int v106 = ((1 << v118) - 1) & (a12 + a8);
          int v103 = ((1 << v118) - 1) & a8;
          int v101 = (1 << v118) - v103;
          int v89 = 1 << v119;
          if (1 << v119 >= a5) {
            int v23 = a5;
          }
          else {
            int v23 = 1 << v119;
          }
          int v24 = 1 << v118;
          if (1 << v118 >= a6) {
            int v25 = a6;
          }
          else {
            int v25 = 1 << v118;
          }
          unsigned int v97 = v25;
          unsigned int v99 = v23;
          do
          {
            if (v22)
            {
              int v26 = 0;
              unsigned __int16 v27 = 0;
              unsigned int v28 = (v20 + v87) << v91;
              unsigned int v29 = a11;
              if (v85 >= (v20 + v87 + 1) << v91) {
                unsigned int v29 = v82;
              }
              int v30 = v89;
              if (v85 < (v20 + v87 + 1) << v91) {
                int v30 = v84;
              }
              int v31 = v20 << v91;
              if (v28 >= a7) {
                unsigned int v29 = v30;
              }
              unsigned int v112 = v29;
              if (v28 >= a7) {
                unsigned int v32 = 0;
              }
              else {
                unsigned int v32 = v83;
              }
              uint64_t v33 = &a2[3 * v32 + 3 * v31];
              do
              {
                LOWORD(v34) = v95;
                HIWORD(v34) = v27;
                uint64_t result = sub_34358(v120, v34);
                int v35 = *(_DWORD *)(v17 + 4LL * result);
                if (v35 < 0)
                {
                  uint64_t v36 = v17 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                  unsigned int v37 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v37) {
                    v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v38 = a12;
                  if (v108 >= (v26 + v110 + 1) << v21) {
                    unsigned int v38 = v101;
                  }
                  unsigned int v39 = v106;
                  if (v108 >= (v26 + v110 + 1) << v21) {
                    unsigned int v39 = v24;
                  }
                  unsigned int v40 = v103;
                  if ((v26 + v110) << v21 < a8)
                  {
                    unsigned int v41 = v38;
                  }

                  else
                  {
                    unsigned int v40 = 0;
                    unsigned int v41 = v39;
                  }

                  uint64_t result = sub_39654(v36, &v33[(v40 + (v26 << v21)) * a13], v99, v97, v112, v41, a13, v32, v40);
                }

                int v26 = ++v27;
              }

              while (v22 > v27);
            }

            int v20 = ++v95;
          }

          while (v93 > v95);
        }
      }

      else
      {
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v120, &v119);
        unsigned int v44 = a11;
        int v45 = 1 << v119;
        char v46 = *((_BYTE *)a14 + 15);
        unsigned int v47 = 1 << v46;
        if (v46) {
          BOOL v48 = v47 > a3;
        }
        else {
          BOOL v48 = 1;
        }
        BOOL v49 = v48 || v47 > a4;
        int v50 = (~(-1 << v46) + a3) & (-1 << v46);
        if (v49) {
          int v51 = a3;
        }
        else {
          int v51 = v50;
        }
        unsigned int v100 = a8 >> v119;
        unsigned int v102 = 1 << v119;
        int v52 = v45 - 1;
        unsigned int v98 = a12 + a8;
        char v96 = v119;
        unsigned int v53 = (v45 - 1 + a12 + a8) >> v119;
        if (a8 >> v119 < v53)
        {
          uint64_t v54 = v120[0];
          int v55 = 1 << SLOBYTE(v120[0]);
          unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
          uint64_t v56 = a7 >> SLOBYTE(v120[0]);
          uint64_t v57 = a11 + a7;
          unsigned int v58 = ((1 << SLOBYTE(v120[0])) - 1 + v57) >> SLOBYTE(v120[0]);
          uint64_t v59 = ((1 << SLOBYTE(v120[0])) - 1) & a7;
          uint64_t result = ((1 << SLOBYTE(v120[0])) - 1) & v57;
          uint64_t v60 = ((1 << SLOBYTE(v120[0])) - v59);
          int v86 = v52 & v98;
          uint64_t v88 = v52 & a8;
          if (1 << SLOBYTE(v120[0]) >= a5) {
            unsigned int v61 = a5;
          }
          else {
            unsigned int v61 = 1 << SLOBYTE(v120[0]);
          }
          if (v102 >= a6) {
            unsigned int v62 = a6;
          }
          else {
            unsigned int v62 = 1 << v119;
          }
          unsigned int v63 = a8 >> v119;
          unsigned int v94 = v53;
          unsigned int v90 = ((1 << SLOBYTE(v120[0])) - 1 + v57) >> SLOBYTE(v120[0]);
          int v107 = v58 - v56;
          uint64_t v105 = v17;
          do
          {
            if (v58 <= v56)
            {
              unsigned int v81 = v63 + 1;
            }

            else
            {
              int v64 = 0;
              unsigned int v65 = v63 << v96;
              unsigned int v104 = v63 + 1;
              unsigned int v66 = v102;
              if (v98 < (v63 + 1) << v96) {
                unsigned int v66 = v86;
              }
              unsigned int v67 = v102 - v88;
              if (v98 < (v63 + 1) << v96) {
                unsigned int v67 = v19;
              }
              if (v65 < a8) {
                unsigned int v66 = v67;
              }
              unsigned int v117 = v66;
              if (v65 >= a8) {
                unsigned int v68 = 0;
              }
              else {
                unsigned int v68 = v88;
              }
              unsigned int v113 = v68;
              uint64_t v111 = (v68 + ((v63 - v100) << v96) - v88) * v18;
              int v109 = v56 + v63 * v92;
              do
              {
                unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                BOOL v71 = v57 >= v70;
                else {
                  unsigned int v72 = result;
                }
                if (v71) {
                  unsigned int v73 = v60;
                }
                else {
                  unsigned int v73 = v44;
                }
                if (v69 >= a7) {
                  unsigned int v74 = 0;
                }
                else {
                  unsigned int v74 = v59;
                }
                if (v69 >= a7) {
                  unsigned int v75 = v72;
                }
                else {
                  unsigned int v75 = v73;
                }
                uint64_t v76 = v60;
                uint64_t v77 = result;
                uint64_t v78 = v54;
                uint64_t v79 = v56;
                uint64_t v80 = v57;
                sub_39654( (v109 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v105,  &a2[3 * (v74 + (v64 << v54) - v59) + v111],  v61,  v62,  v75,  v117,  a13,  v74,  v113);
                uint64_t v54 = v78;
                uint64_t v60 = v76;
                uint64_t result = v77;
                uint64_t v57 = v80;
                uint64_t v56 = v79;
                unsigned int v44 = a11;
                ++v64;
              }

              while (v107 != v64);
              uint64_t v18 = a13;
              unsigned int v19 = a12;
              unsigned int v53 = v94;
              unsigned int v58 = v90;
              unsigned int v81 = v104;
            }

            unsigned int v63 = v81;
          }

          while (v81 != v53);
        }
      }
    }

    else
    {
      return sub_39654(result, a2, a5, a6, a11, a12, a13, a7, a8);
    }
  }

  return result;
}

uint64_t sub_39654( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v10 = a6;
  unsigned int v11 = a5;
  uint64_t v13 = result;
  int v14 = 32 - __clz(a3 - 1);
  if (a3 < 2) {
    int v14 = 0;
  }
  int v110 = v14;
  if (a4 < 2)
  {
    int v109 = 0;
  }

  else
  {
    int v109 = 32 - __clz(a4 - 1);
    if (a4 >= 5 && v14)
    {
      unsigned int v15 = a8;
      unsigned int v16 = 4 - (a9 & 3);
      if ((a9 & 3) == 0) {
        unsigned int v16 = 0;
      }
      int v17 = 8 - (a8 & 7);
      if ((a8 & 7) == 0) {
        int v17 = 0;
      }
      int v18 = ((_BYTE)a8 + (_BYTE)a5) & 7;
      int v19 = ((_BYTE)a9 + (_BYTE)a6) & 3;
      if (v17 + v18 <= a5) {
        unsigned int v20 = v17;
      }
      else {
        unsigned int v20 = a5;
      }
      if (v17 + v18 <= a5) {
        int v21 = ((_BYTE)a8 + (_BYTE)a5) & 7;
      }
      else {
        int v21 = 0;
      }
      int v105 = v21;
      if (v16 + v19 <= a6) {
        uint64_t v22 = v16;
      }
      else {
        uint64_t v22 = a6;
      }
      if (v16 + v19 <= a6) {
        int v23 = ((_BYTE)a9 + (_BYTE)a6) & 3;
      }
      else {
        int v23 = 0;
      }
      uint64_t v106 = v22;
      unsigned int v107 = v20;
      if ((_DWORD)v22)
      {
        uint64_t v24 = sub_34508(~(-1 << v110), 0, v110, v109);
        uint64_t v25 = sub_34508(0, ~(-1 << v109), v110, v109);
        uint64_t v26 = sub_34508(a8, 0, v110, v109);
        uint64_t result = sub_34508(0, a9, v110, v109);
        LODWORD(v22) = v106;
        int v27 = 0;
        unsigned int v28 = a2;
        do
        {
          unsigned int v29 = v11;
          int v30 = v28;
          for (uint64_t i = v26; v29; --v29)
          {
            unsigned int v32 = (_BYTE *)(3 * (i + result) + v13);
            *unsigned int v32 = *v30;
            v32[1] = v30[1];
            v32[2] = v30[2];
            uint64_t i = (i - v24) & v24;
            v30 += 3;
          }

          uint64_t result = (result - v25) & v25;
          v28 += a7;
          ++v27;
        }

        while (v27 != (_DWORD)v106);
        v10 -= v106;
        unsigned int v15 = a8;
        unsigned int v20 = v107;
      }

      if (v23)
      {
        v10 -= v23;
        uint64_t v103 = v10 + v22;
        uint64_t v33 = sub_34508(~(-1 << v110), 0, v110, v109);
        uint64_t v34 = sub_34508(0, ~(-1 << v109), v110, v109);
        uint64_t v35 = sub_34508(a8, 0, v110, v109);
        uint64_t v36 = &a2[v103 * a7];
        uint64_t result = sub_34508(0, v103 + a9, v110, v109);
        unsigned int v20 = v107;
        for (int j = 0; j != v23; ++j)
        {
          unsigned int v38 = v11;
          unsigned int v39 = v36;
          for (uint64_t k = v35; v38; --v38)
          {
            unsigned int v41 = (_BYTE *)(3 * (k + result) + v13);
            *unsigned int v41 = *v39;
            v41[1] = v39[1];
            v41[2] = v39[2];
            uint64_t k = (k - v33) & v33;
            v39 += 3;
          }

          uint64_t result = (result - v34) & v34;
          v36 += a7;
        }

        unsigned int v15 = a8;
      }

      if (v10)
      {
        if (v20)
        {
          uint64_t v42 = sub_34508(~(-1 << v110), 0, v110, v109);
          uint64_t v43 = sub_34508(0, ~(-1 << v109), v110, v109);
          uint64_t v44 = sub_34508(v15, 0, v110, v109);
          int v45 = &a2[v106 * a7];
          uint64_t result = sub_34508(0, v106 + a9, v110, v109);
          unsigned int v20 = v107;
          for (int m = 0; m != v10; ++m)
          {
            unsigned int v47 = v107;
            BOOL v48 = v45;
            uint64_t v49 = v44;
            do
            {
              int v50 = (_BYTE *)(3 * (v49 + result) + v13);
              _BYTE *v50 = *v48;
              v50[1] = v48[1];
              v50[2] = v48[2];
              uint64_t v49 = (v49 - v42) & v42;
              v48 += 3;
              --v47;
            }

            while (v47);
            uint64_t result = (result - v43) & v43;
            v45 += a7;
          }

          v11 -= v107;
          unsigned int v15 = a8;
        }

        if (v105)
        {
          v11 -= v105;
          uint64_t v104 = v11 + v20;
          uint64_t v51 = sub_34508(~(-1 << v110), 0, v110, v109);
          uint64_t v52 = sub_34508(0, ~(-1 << v109), v110, v109);
          uint64_t v53 = sub_34508(v104 + v15, 0, v110, v109);
          uint64_t v54 = &a2[v106 * a7];
          uint64_t result = sub_34508(0, v106 + a9, v110, v109);
          for (int n = 0; n != v10; ++n)
          {
            uint64_t v56 = &v54[2 * v104 + v104];
            int v57 = v105;
            uint64_t v58 = v53;
            do
            {
              uint64_t v59 = (_BYTE *)(3 * (v58 + result) + v13);
              _BYTE *v59 = *v56;
              v59[1] = v56[1];
              v59[2] = v56[2];
              uint64_t v58 = (v58 - v51) & v51;
              v56 += 3;
              --v57;
            }

            while (v57);
            uint64_t result = (result - v52) & v52;
            v54 += a7;
          }

          unsigned int v15 = a8;
        }

        if (v11)
        {
          uint64_t v60 = sub_34508(~(-1 << v110) & 0x7FFFFFF8, 0, v110, v109);
          uint64_t v61 = sub_34508(0, ~(-1 << v109) & 0x7FFFFFFC, v110, v109);
          uint64_t v62 = sub_34508(v107 + v15, 0, v110, v109);
          unsigned int v63 = &a2[v106 * a7];
          uint64_t result = sub_34508(0, v106 + a9, v110, v109);
          unsigned int v65 = 0;
          int8x16_t v66 = (int8x16_t)xmmword_70330;
          int8x16_t v67 = (int8x16_t)xmmword_70340;
          int8x16_t v68 = (int8x16_t)xmmword_70350;
          int8x16_t v69 = (int8x16_t)xmmword_70360;
          int8x16_t v70 = (int8x16_t)xmmword_70370;
          int8x16_t v71 = (int8x16_t)xmmword_70380;
          int8x16_t v72 = (int8x16_t)xmmword_70390;
          int8x16_t v73 = (int8x16_t)xmmword_703A0;
          int8x16_t v74 = (int8x16_t)xmmword_703B0;
          int8x16_t v75 = (int8x16_t)xmmword_703C0;
          int8x16_t v76 = (int8x16_t)xmmword_703D0;
          int8x16_t v77 = (int8x16_t)xmmword_703E0;
          do
          {
            unsigned int v78 = 0;
            uint64_t v79 = &v63[3 * v107];
            uint64_t v80 = v62;
            do
            {
              unsigned int v81 = (int8x16_t *)(3 * (v80 + result) + v13);
              int v82 = (int8x16_t *)&v79[a7 + a7 + a7];
              int8x16_t v83 = *v82;
              uint64_t v84 = v82[1].i64[0];
              int8x16_t v85 = vdupq_n_s8(0xCu);
              int8x16_t v86 = vqtbx1q_s8(*v82, v69);
              int8x16_t v87 = vaddq_s8(v69, v85);
              int8x16_t v88 = vqtbx1q_s8(*v82, v73);
              int8x16_t v89 = vaddq_s8(v73, v85);
              int8x16_t v90 = vqtbx1q_s8(*v82, v77);
              int8x16_t v91 = vaddq_s8(v77, v85);
              *unsigned int v81 = v86;
              v81[1] = v88;
              uint64_t v81[2] = v90;
              v81 += 6;
              int8x16_t v66 = vsubq_s8(vaddq_s8(v66, v85), v85);
              int8x16_t v67 = vsubq_s8(vaddq_s8(v67, v85), v85);
              int8x16_t v68 = vsubq_s8(vaddq_s8(v68, v85), v85);
              int8x16_t v92 = vqtbx2q_s8(*(int8x16x2_t *)(&v64 - 3), v87);
              int8x16_t v69 = vsubq_s8(v87, v85);
              int8x16_t v70 = vsubq_s8(vaddq_s8(v70, v85), v85);
              int8x16_t v71 = vsubq_s8(vaddq_s8(v71, v85), v85);
              int8x16_t v72 = vsubq_s8(vaddq_s8(v72, v85), v85);
              int8x16_t v93 = vqtbx2q_s8(*(int8x16x2_t *)(&v64 - 3), v89);
              int8x16_t v73 = vsubq_s8(v89, v85);
              int8x16_t v74 = vsubq_s8(vaddq_s8(v74, v85), v85);
              int8x16_t v75 = vsubq_s8(vaddq_s8(v75, v85), v85);
              int8x16_t v76 = vsubq_s8(vaddq_s8(v76, v85), v85);
              int8x16_t v94 = vqtbx2q_s8(*(int8x16x2_t *)(&v64 - 3), v91);
              int8x16_t v77 = vsubq_s8(v91, v85);
              *unsigned int v81 = v92;
              v81[1] = v93;
              uint64_t v81[2] = v94;
              uint64_t v80 = (v80 - v60) & v60;
              v79 += 24;
              v78 += 8;
            }

            while (v78 < v11);
            uint64_t result = (result - v61) & v61;
            v63 += 4 * a7;
            v65 += 4;
          }

          while (v65 < v10);
        }
      }

      return result;
    }
  }

  uint64_t v95 = sub_34508(~(-1 << v14), 0, v14, v109);
  uint64_t v96 = sub_34508(0, ~(-1 << v109), v110, v109);
  uint64_t result = sub_34508(a8, 0, v110, v109);
  if (v10)
  {
    uint64_t v97 = result;
    uint64_t result = sub_34508(0, a9, v110, v109);
    for (iuint64_t i = 0; ii != v10; ++ii)
    {
      unsigned int v99 = v11;
      unsigned int v100 = a2;
      for (jint j = v97; v99; --v99)
      {
        unsigned int v102 = (_BYTE *)(3 * (jj + result) + v13);
        *unsigned int v102 = *v100;
        v102[1] = v100[1];
        v102[2] = v100[2];
        jint j = (jj - v95) & v95;
        v100 += 3;
      }

      uint64_t result = (result - v96) & v96;
      a2 += a7;
    }
  }

  return result;
}

uint64_t sub_39E54( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    uint64_t v18 = a13;
    unsigned int v19 = a12;
    if (a14)
    {
      unsigned int v115 = a7;
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v119);
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v118, &v117);
        unsigned int v92 = v120;
        if (v120)
        {
          int v20 = 0;
          unsigned __int16 v94 = 0;
          char v21 = v117;
          char v90 = v118;
          unsigned int v86 = v115 >> v118;
          unsigned int v109 = a8 >> v117;
          unsigned int v22 = v121;
          unsigned int v84 = a11 + v115;
          unsigned int v82 = ((1 << v118) - 1) & v115;
          int v83 = ((1 << v118) - 1) & (a11 + v115);
          unsigned int v81 = (1 << v118) - v82;
          unsigned int v107 = a12 + a8;
          int v105 = ((1 << v117) - 1) & (a12 + a8);
          int v102 = ((1 << v117) - 1) & a8;
          int v100 = (1 << v117) - v102;
          int v88 = 1 << v118;
          if (1 << v118 >= a5) {
            int v23 = a5;
          }
          else {
            int v23 = 1 << v118;
          }
          int v24 = 1 << v117;
          if (1 << v117 >= a6) {
            int v25 = a6;
          }
          else {
            int v25 = 1 << v117;
          }
          unsigned int v96 = v25;
          unsigned int v98 = v23;
          do
          {
            if (v22)
            {
              int v26 = 0;
              unsigned __int16 v27 = 0;
              unsigned int v28 = (v20 + v86) << v90;
              unsigned int v29 = a11;
              if (v84 >= (v20 + v86 + 1) << v90) {
                unsigned int v29 = v81;
              }
              int v30 = v88;
              if (v84 < (v20 + v86 + 1) << v90) {
                int v30 = v83;
              }
              int v31 = v20 << v90;
              if (v28 >= v115) {
                unsigned int v29 = v30;
              }
              unsigned int v111 = v29;
              if (v28 >= v115) {
                uint64_t v32 = 0LL;
              }
              else {
                uint64_t v32 = v82;
              }
              uint64_t v33 = a2 + 4LL * (v32 + v31);
              do
              {
                LOWORD(v34) = v94;
                HIWORD(v34) = v27;
                uint64_t result = sub_34358(v119, v34);
                int v35 = *(_DWORD *)(v17 + 4LL * result);
                if (v35 < 0)
                {
                  uint64_t v36 = v17 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                  unsigned int v37 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v37) {
                    v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v38 = a12;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    unsigned int v38 = v100;
                  }
                  unsigned int v39 = v105;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    unsigned int v39 = v24;
                  }
                  unsigned int v40 = v102;
                  if ((v26 + v109) << v21 < a8)
                  {
                    unsigned int v41 = v38;
                  }

                  else
                  {
                    unsigned int v40 = 0;
                    unsigned int v41 = v39;
                  }

                  uint64_t result = sub_3A424(v36, v33 + (v40 + (v26 << v21)) * a13, v98, v96, v111, v41, a13, v32, v40);
                }

                int v26 = ++v27;
              }

              while (v22 > v27);
            }

            int v20 = ++v94;
          }

          while (v92 > v94);
        }
      }

      else
      {
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v119, &v118);
        int v44 = 1 << v118;
        char v45 = *((_BYTE *)a14 + 15);
        unsigned int v46 = 1 << v45;
        if (v45) {
          BOOL v47 = v46 > a3;
        }
        else {
          BOOL v47 = 1;
        }
        BOOL v48 = v47 || v46 > a4;
        int v49 = (~(-1 << v45) + a3) & (-1 << v45);
        if (v48) {
          int v50 = a3;
        }
        else {
          int v50 = v49;
        }
        unsigned int v99 = a8 >> v118;
        unsigned int v101 = 1 << v118;
        int v51 = v44 - 1;
        unsigned int v97 = a12 + a8;
        char v95 = v118;
        unsigned int v52 = (v44 - 1 + a12 + a8) >> v118;
        if (a8 >> v118 < v52)
        {
          uint64_t v53 = v119[0];
          uint64_t v54 = (1 << SLOBYTE(v119[0]));
          unsigned int v91 = (v50 + ~(-1 << v53)) >> v53;
          uint64_t v55 = v115 >> SLOBYTE(v119[0]);
          unsigned int v56 = a11 + v115;
          unsigned int v57 = ((_DWORD)v54 - 1 + a11 + v115) >> SLOBYTE(v119[0]);
          uint64_t v58 = ((_DWORD)v54 - 1) & v115;
          unsigned int v59 = (v54 - 1) & (a11 + v115);
          uint64_t result = (v54 - v58);
          int v85 = v51 & v97;
          uint64_t v87 = v51 & a8;
          else {
            unsigned int v60 = 1 << SLOBYTE(v119[0]);
          }
          if (v101 >= a6) {
            unsigned int v61 = a6;
          }
          else {
            unsigned int v61 = 1 << v118;
          }
          int v62 = v57 - v55;
          unsigned int v63 = a8 >> v118;
          unsigned int v93 = v52;
          unsigned int v89 = ((_DWORD)v54 - 1 + a11 + v115) >> SLOBYTE(v119[0]);
          uint64_t v104 = v17;
          uint64_t v106 = ((_DWORD)v54 - 1) & v115;
          do
          {
            if (v57 <= v55)
            {
              unsigned int v80 = v63 + 1;
            }

            else
            {
              int v64 = 0;
              unsigned int v65 = v63 << v95;
              unsigned int v103 = v63 + 1;
              unsigned int v66 = v101;
              if (v97 < (v63 + 1) << v95) {
                unsigned int v66 = v85;
              }
              unsigned int v67 = v101 - v87;
              if (v97 < (v63 + 1) << v95) {
                unsigned int v67 = v19;
              }
              if (v65 < a8) {
                unsigned int v66 = v67;
              }
              unsigned int v116 = v66;
              if (v65 >= a8) {
                unsigned int v68 = 0;
              }
              else {
                unsigned int v68 = v87;
              }
              unsigned int v112 = v68;
              uint64_t v110 = (v68 + ((v63 - v99) << v95) - v87) * v18;
              int v108 = v55 + v63 * v91;
              do
              {
                unsigned int v69 = ((_DWORD)v55 + v64) << v53;
                unsigned int v70 = ((_DWORD)v55 + v64 + 1) << v53;
                BOOL v71 = v56 >= v70;
                if (v56 >= v70) {
                  unsigned int v72 = v54;
                }
                else {
                  unsigned int v72 = v59;
                }
                unsigned int v73 = a11;
                if (v71) {
                  unsigned int v73 = result;
                }
                if (v69 >= v115) {
                  uint64_t v74 = 0LL;
                }
                else {
                  uint64_t v74 = v58;
                }
                if (v69 >= v115) {
                  unsigned int v75 = v72;
                }
                else {
                  unsigned int v75 = v73;
                }
                uint64_t v76 = result;
                uint64_t v77 = v53;
                uint64_t v78 = v54;
                uint64_t v79 = v55;
                sub_3A424( (v108 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v104,  a2 + 4 * ((v74 + (v64 << v53)) - v58) + v110,  v60,  v61,  v75,  v116,  a13,  v74,  v112);
                uint64_t v53 = v77;
                uint64_t v58 = v106;
                uint64_t result = v76;
                uint64_t v55 = v79;
                uint64_t v54 = v78;
                ++v64;
              }

              while (v62 != v64);
              uint64_t v18 = a13;
              unsigned int v19 = a12;
              unsigned int v52 = v93;
              unsigned int v57 = v89;
              unsigned int v80 = v103;
            }

            unsigned int v63 = v80;
          }

          while (v80 != v52);
        }
      }
    }

    else
    {
      return sub_3A424(result, a2, a5, a6, a11, a12, a13, a7, a8);
    }
  }

  return result;
}

uint64_t sub_3A424( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v11 = a6;
  unsigned int v12 = a5;
  unsigned int v14 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0LL;
  }
  if (a4 <= 1)
  {
    uint64_t v16 = 0LL;
    else {
      uint64_t v17 = sub_3A6D8;
    }
LABEL_42:
    HIDWORD(v32) = a5;
    LODWORD(v32) = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, unsigned int))v17)( result,  a2,  v15,  v16,  a8,  a9,  a7,  0LL,  v32,  a6);
  }

  uint64_t v16 = 32 - __clz(a4 - 1);
  else {
    uint64_t v17 = sub_3A6D8;
  }
  uint64_t v18 = sub_3AAB0;
  if (a4 < 5 || !(_DWORD)v15) {
    goto LABEL_42;
  }
  uint64_t v33 = v18;
  unsigned int v36 = v16;
  uint64_t v19 = result;
  int v20 = 4 - (a9 & 3);
  if ((a9 & 3) == 0) {
    int v20 = 0;
  }
  unsigned int v21 = 8 - (a8 & 7);
  if ((a8 & 7) == 0) {
    unsigned int v21 = 0;
  }
  int v22 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  unsigned int v23 = v21 + (((_BYTE)a8 + (_BYTE)a5) & 7);
  if (v23 > a5) {
    unsigned int v21 = a5;
  }
  unsigned int v37 = v21;
  if (v23 <= a5) {
    int v24 = ((_BYTE)a8 + (_BYTE)a5) & 7;
  }
  else {
    int v24 = 0;
  }
  int v34 = v24;
  if (v20 + v22 <= a6) {
    unsigned int v25 = v20;
  }
  else {
    unsigned int v25 = a6;
  }
  if (v20 + v22 <= a6) {
    int v26 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  }
  else {
    int v26 = 0;
  }
  int v35 = v17;
  if (v25)
  {
    HIDWORD(v30) = a5;
    LODWORD(v30) = 0;
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, void, uint64_t, unsigned int))v17)( result,  a2,  v15,  v36,  a8,  a9,  a7,  0LL,  v30,  v25);
    v11 -= v25;
  }

  if (v26)
  {
    v11 -= v26;
    *(void *)((char *)&v31 + 4) = __PAIR64__(v26, v12);
    LODWORD(v31) = v11 + v25;
    uint64_t v27 = v19;
    uint64_t v28 = v19;
    uint64_t v29 = v36;
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, void, void, _DWORD))v35)( v28,  a2,  v15,  v36,  a8,  a9,  a7,  0LL,  v31,  DWORD2(v31));
  }

  else
  {
    uint64_t v27 = v19;
    uint64_t v29 = v36;
  }

  if (v11)
  {
    if (v37)
    {
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, unint64_t, unsigned int))v35)( v27,  a2,  v15,  v29,  a8,  a9,  a7,  0LL,  __PAIR64__(v37, v25),  v11);
      v12 -= v37;
    }

    if (v34)
    {
      v12 -= v34;
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, unint64_t, unsigned int))v35)( v27,  a2,  v15,  v29,  a8,  a9,  a7,  v12 + v37,  __PAIR64__(v34, v25),  v11);
    }

    if (v12) {
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))v33)( v27,  a2,  v15,  v29,  a8,  a9,  a7);
    }
  }

  return result;
}

uint64_t sub_3A6D8( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  uint64_t v18 = sub_34508(~(-1 << a3), 0, a3, a4);
  uint64_t v19 = sub_34508(0, ~(-1 << a4), a3, a4);
  uint64_t result = sub_34508(a8 + a5, 0, a3, a4);
  if (a11)
  {
    uint64_t v21 = result;
    unsigned int v28 = a8;
    uint64_t v22 = a2 + a9 * a7;
    uint64_t result = sub_34508(0, a9 + a6, a3, a4);
    for (int i = 0; i != a11; ++i)
    {
      if (a10)
      {
        int v24 = (int *)(v22 + 4LL * v28);
        int v25 = a10;
        uint64_t v26 = v21;
        do
        {
          int v27 = *v24++;
          *(_DWORD *)(a1 + 4 * (v26 + result)) = v27;
          uint64_t v26 = (v26 - v18) & v18;
          --v25;
        }

        while (v25);
      }

      uint64_t result = (result - v19) & v19;
      v22 += a7;
    }
  }

  return result;
}

uint64_t sub_3A804( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  uint64_t v18 = sub_34508(~(-1 << a3), 0, a3, a4);
  uint64_t v19 = sub_34508(0, ~(-1 << a4), a3, a4);
  uint64_t result = sub_34508(a8 + a5, 0, a3, a4);
  if (a11)
  {
    uint64_t v21 = result;
    unsigned int v28 = a8;
    uint64_t v22 = a2 + a9 * a7;
    uint64_t result = sub_34508(0, a9 + a6, a3, a4);
    for (int i = 0; i != a11; ++i)
    {
      if (a10)
      {
        int v24 = (int *)(v22 + 4LL * v28);
        int v25 = a10;
        uint64_t v26 = v21;
        do
        {
          int v27 = *v24++;
          *(_DWORD *)(a1 + 4 * (v26 + result)) = v27;
          uint64_t v26 = (v26 - v18) & v18;
          --v25;
        }

        while (v25);
      }

      uint64_t result = (result - v19) & v19;
      v22 += a7;
    }
  }

  return result;
}

uint64_t sub_3A930( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  uint64_t v18 = sub_34508(~(-1 << a3) & 0x7FFFFFF8, 0, a3, a4);
  uint64_t v19 = sub_34508(0, ~(-1 << a4) & 0x7FFFFFFC, a3, a4);
  uint64_t result = sub_34508(a8 + a5, 0, a3, a4);
  if (a11)
  {
    uint64_t v21 = result;
    unsigned int v38 = a8;
    uint64_t v22 = a2 + a9 * a7;
    uint64_t result = sub_34508(0, a9 + a6, a3, a4);
    for (unsigned int i = 0; i < a11; i += 4)
    {
      if (a10)
      {
        unsigned int v24 = 0;
        int v25 = (int32x4_t *)(v22 + 4LL * v38);
        uint64_t v26 = v21;
        do
        {
          int v27 = (int32x4_t *)(a1 + 4 * (v26 + result));
          int32x4_t v28 = v25[1];
          int32x4_t v30 = *(int32x4_t *)((char *)v25 + a7);
          int32x4_t v31 = *(int32x4_t *)((char *)&v25[1] + a7);
          uint64_t v29 = (int32x4_t *)((char *)v25 + a7 + a7);
          int32x4_t v33 = *v29;
          int32x4_t v34 = v29[1];
          uint64_t v32 = (int32x4_t *)((char *)v29 + a7);
          int32x4_t v35 = *v32;
          int32x4_t v36 = v32[1];
          int32x4_t v37 = vzip2q_s32(*v25, v30);
          *int v27 = vzip1q_s32(*v25, v30);
          v27[1] = vzip1q_s32(v33, v35);
          v27[2] = v37;
          v27[3] = vzip2q_s32(v33, v35);
          v27 += 8;
          *int v27 = vzip1q_s32(v28, v31);
          v27[1] = vzip1q_s32(v34, v36);
          v27[2] = vzip2q_s32(v28, v31);
          v27[3] = vzip2q_s32(v34, v36);
          uint64_t v26 = (v26 - v18) & v18;
          v25 += 2;
          v24 += 8;
        }

        while (v24 < a10);
      }

      uint64_t result = (result - v19) & v19;
      v22 += 4 * a7;
    }
  }

  return result;
}

uint64_t sub_3AAB0( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  uint64_t v18 = sub_34508(~(-1 << a3) & 0x7FFFFFF8, 0, a3, a4);
  uint64_t v19 = sub_34508(0, ~(-1 << a4) & 0x7FFFFFFC, a3, a4);
  uint64_t result = sub_34508(a8 + a5, 0, a3, a4);
  if (a11)
  {
    uint64_t v21 = result;
    unsigned int v38 = a8;
    uint64_t v22 = a2 + a9 * a7;
    uint64_t result = sub_34508(0, a9 + a6, a3, a4);
    for (unsigned int i = 0; i < a11; i += 4)
    {
      if (a10)
      {
        unsigned int v24 = 0;
        int v25 = (int32x4_t *)(v22 + 4LL * v38);
        uint64_t v26 = v21;
        do
        {
          int v27 = (int32x4_t *)(a1 + 4 * (v26 + result));
          int32x4_t v28 = v25[1];
          int32x4_t v30 = *(int32x4_t *)((char *)v25 + a7);
          int32x4_t v31 = *(int32x4_t *)((char *)&v25[1] + a7);
          uint64_t v29 = (int32x4_t *)((char *)v25 + a7 + a7);
          int32x4_t v33 = *v29;
          int32x4_t v34 = v29[1];
          uint64_t v32 = (int32x4_t *)((char *)v29 + a7);
          int32x4_t v35 = *v32;
          int32x4_t v36 = v32[1];
          int32x4_t v37 = vzip2q_s32(*v25, v30);
          *int v27 = vzip1q_s32(*v25, v30);
          v27[1] = vzip1q_s32(v33, v35);
          v27[2] = v37;
          v27[3] = vzip2q_s32(v33, v35);
          v27 += 8;
          *int v27 = vzip1q_s32(v28, v31);
          v27[1] = vzip1q_s32(v34, v36);
          v27[2] = vzip2q_s32(v28, v31);
          v27[3] = vzip2q_s32(v34, v36);
          uint64_t v26 = (v26 - v18) & v18;
          v25 += 2;
          v24 += 8;
        }

        while (v24 < a10);
      }

      uint64_t result = (result - v19) & v19;
      v22 += 4 * a7;
    }
  }

  return result;
}

uint64_t sub_3AC30( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    uint64_t v18 = a13;
    unsigned int v19 = a12;
    if (a14)
    {
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v120);
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v119, &v118);
        unsigned int v93 = v121;
        if (v121)
        {
          int v20 = 0;
          unsigned __int16 v95 = 0;
          char v21 = v118;
          char v91 = v119;
          unsigned int v87 = a7 >> v119;
          unsigned int v110 = a8 >> v118;
          unsigned int v22 = v122;
          unsigned int v85 = a11 + a7;
          int v83 = ((1 << v119) - 1) & a7;
          int v84 = ((1 << v119) - 1) & (a11 + a7);
          int v82 = (1 << v119) - v83;
          unsigned int v108 = a12 + a8;
          int v106 = ((1 << v118) - 1) & (a12 + a8);
          int v103 = ((1 << v118) - 1) & a8;
          int v101 = (1 << v118) - v103;
          int v89 = 1 << v119;
          if (1 << v119 >= a5) {
            int v23 = a5;
          }
          else {
            int v23 = 1 << v119;
          }
          int v24 = 1 << v118;
          if (1 << v118 >= a6) {
            int v25 = a6;
          }
          else {
            int v25 = 1 << v118;
          }
          unsigned int v97 = v25;
          unsigned int v99 = v23;
          do
          {
            if (v22)
            {
              int v26 = 0;
              unsigned __int16 v27 = 0;
              unsigned int v28 = (v20 + v87) << v91;
              unsigned int v29 = a11;
              if (v85 >= (v20 + v87 + 1) << v91) {
                unsigned int v29 = v82;
              }
              int v30 = v89;
              if (v85 < (v20 + v87 + 1) << v91) {
                int v30 = v84;
              }
              int v31 = v20 << v91;
              if (v28 >= a7) {
                unsigned int v29 = v30;
              }
              unsigned int v112 = v29;
              if (v28 >= a7) {
                unsigned int v32 = 0;
              }
              else {
                unsigned int v32 = v83;
              }
              int32x4_t v33 = &a2[3 * v32 + 3 * v31];
              do
              {
                LOWORD(v34) = v95;
                HIWORD(v34) = v27;
                uint64_t result = sub_34358(v120, v34);
                int v35 = *(_DWORD *)(v17 + 4LL * result);
                if (v35 < 0)
                {
                  uint64_t v36 = v17 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                  unsigned int v37 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v37) {
                    v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v38 = a12;
                  if (v108 >= (v26 + v110 + 1) << v21) {
                    unsigned int v38 = v101;
                  }
                  unsigned int v39 = v106;
                  if (v108 >= (v26 + v110 + 1) << v21) {
                    unsigned int v39 = v24;
                  }
                  unsigned int v40 = v103;
                  if ((v26 + v110) << v21 < a8)
                  {
                    unsigned int v41 = v38;
                  }

                  else
                  {
                    unsigned int v40 = 0;
                    unsigned int v41 = v39;
                  }

                  uint64_t result = sub_3B21C(v36, &v33[(v40 + (v26 << v21)) * a13], v99, v97, v112, v41, a13, v32, v40);
                }

                int v26 = ++v27;
              }

              while (v22 > v27);
            }

            int v20 = ++v95;
          }

          while (v93 > v95);
        }
      }

      else
      {
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v120, &v119);
        unsigned int v44 = a11;
        int v45 = 1 << v119;
        char v46 = *((_BYTE *)a14 + 15);
        unsigned int v47 = 1 << v46;
        if (v46) {
          BOOL v48 = v47 > a3;
        }
        else {
          BOOL v48 = 1;
        }
        BOOL v49 = v48 || v47 > a4;
        int v50 = (~(-1 << v46) + a3) & (-1 << v46);
        if (v49) {
          int v51 = a3;
        }
        else {
          int v51 = v50;
        }
        unsigned int v100 = a8 >> v119;
        unsigned int v102 = 1 << v119;
        int v52 = v45 - 1;
        unsigned int v98 = a12 + a8;
        char v96 = v119;
        unsigned int v53 = (v45 - 1 + a12 + a8) >> v119;
        if (a8 >> v119 < v53)
        {
          uint64_t v54 = v120[0];
          int v55 = 1 << SLOBYTE(v120[0]);
          unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
          uint64_t v56 = a7 >> SLOBYTE(v120[0]);
          uint64_t v57 = a11 + a7;
          unsigned int v58 = ((1 << SLOBYTE(v120[0])) - 1 + v57) >> SLOBYTE(v120[0]);
          uint64_t v59 = ((1 << SLOBYTE(v120[0])) - 1) & a7;
          uint64_t result = ((1 << SLOBYTE(v120[0])) - 1) & v57;
          uint64_t v60 = ((1 << SLOBYTE(v120[0])) - v59);
          int v86 = v52 & v98;
          uint64_t v88 = v52 & a8;
          if (1 << SLOBYTE(v120[0]) >= a5) {
            unsigned int v61 = a5;
          }
          else {
            unsigned int v61 = 1 << SLOBYTE(v120[0]);
          }
          if (v102 >= a6) {
            unsigned int v62 = a6;
          }
          else {
            unsigned int v62 = 1 << v119;
          }
          unsigned int v63 = a8 >> v119;
          unsigned int v94 = v53;
          unsigned int v90 = ((1 << SLOBYTE(v120[0])) - 1 + v57) >> SLOBYTE(v120[0]);
          int v107 = v58 - v56;
          uint64_t v105 = v17;
          do
          {
            if (v58 <= v56)
            {
              unsigned int v81 = v63 + 1;
            }

            else
            {
              int v64 = 0;
              unsigned int v65 = v63 << v96;
              unsigned int v104 = v63 + 1;
              unsigned int v66 = v102;
              if (v98 < (v63 + 1) << v96) {
                unsigned int v66 = v86;
              }
              unsigned int v67 = v102 - v88;
              if (v98 < (v63 + 1) << v96) {
                unsigned int v67 = v19;
              }
              if (v65 < a8) {
                unsigned int v66 = v67;
              }
              unsigned int v117 = v66;
              if (v65 >= a8) {
                unsigned int v68 = 0;
              }
              else {
                unsigned int v68 = v88;
              }
              unsigned int v113 = v68;
              uint64_t v111 = (v68 + ((v63 - v100) << v96) - v88) * v18;
              int v109 = v56 + v63 * v92;
              do
              {
                unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                BOOL v71 = v57 >= v70;
                else {
                  unsigned int v72 = result;
                }
                if (v71) {
                  unsigned int v73 = v60;
                }
                else {
                  unsigned int v73 = v44;
                }
                if (v69 >= a7) {
                  unsigned int v74 = 0;
                }
                else {
                  unsigned int v74 = v59;
                }
                if (v69 >= a7) {
                  unsigned int v75 = v72;
                }
                else {
                  unsigned int v75 = v73;
                }
                uint64_t v76 = v60;
                uint64_t v77 = result;
                uint64_t v78 = v54;
                uint64_t v79 = v56;
                uint64_t v80 = v57;
                sub_3B21C( (v109 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v105,  &a2[3 * (v74 + (v64 << v54) - v59) + v111],  v61,  v62,  v75,  v117,  a13,  v74,  v113);
                uint64_t v54 = v78;
                uint64_t v60 = v76;
                uint64_t result = v77;
                uint64_t v57 = v80;
                uint64_t v56 = v79;
                unsigned int v44 = a11;
                ++v64;
              }

              while (v107 != v64);
              uint64_t v18 = a13;
              unsigned int v19 = a12;
              unsigned int v53 = v94;
              unsigned int v58 = v90;
              unsigned int v81 = v104;
            }

            unsigned int v63 = v81;
          }

          while (v81 != v53);
        }
      }
    }

    else
    {
      return sub_3B21C(result, a2, a5, a6, a11, a12, a13, a7, a8);
    }
  }

  return result;
}

uint64_t sub_3B21C( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v10 = a6;
  unsigned int v11 = a5;
  uint64_t v13 = result;
  int v14 = 32 - __clz(a3 - 1);
  if (a3 < 2) {
    int v14 = 0;
  }
  int v107 = v14;
  if (a4 < 2)
  {
    int v106 = 0;
  }

  else
  {
    int v106 = 32 - __clz(a4 - 1);
    if (a4 >= 5 && v14)
    {
      unsigned int v15 = a8;
      unsigned int v16 = 4 - (a9 & 3);
      if ((a9 & 3) == 0) {
        unsigned int v16 = 0;
      }
      int v17 = 8 - (a8 & 7);
      if ((a8 & 7) == 0) {
        int v17 = 0;
      }
      int v18 = ((_BYTE)a8 + (_BYTE)a5) & 7;
      int v19 = ((_BYTE)a9 + (_BYTE)a6) & 3;
      if (v17 + v18 <= a5) {
        unsigned int v20 = v17;
      }
      else {
        unsigned int v20 = a5;
      }
      if (v17 + v18 <= a5) {
        int v21 = ((_BYTE)a8 + (_BYTE)a5) & 7;
      }
      else {
        int v21 = 0;
      }
      int v102 = v21;
      if (v16 + v19 <= a6) {
        uint64_t v22 = v16;
      }
      else {
        uint64_t v22 = a6;
      }
      if (v16 + v19 <= a6) {
        int v23 = ((_BYTE)a9 + (_BYTE)a6) & 3;
      }
      else {
        int v23 = 0;
      }
      uint64_t v103 = v22;
      unsigned int v104 = v20;
      if ((_DWORD)v22)
      {
        uint64_t v24 = sub_34508(~(-1 << v107), 0, v107, v106);
        uint64_t v25 = sub_34508(0, ~(-1 << v106), v107, v106);
        uint64_t v26 = sub_34508(a8, 0, v107, v106);
        uint64_t result = sub_34508(0, a9, v107, v106);
        LODWORD(v22) = v103;
        int v27 = 0;
        unsigned int v28 = a2;
        do
        {
          unsigned int v29 = v11;
          int v30 = v28;
          for (uint64_t i = v26; v29; --v29)
          {
            unsigned int v32 = (_BYTE *)(v13 + 4 * (i + result));
            *unsigned int v32 = *v30;
            v32[1] = v30[1];
            v32[2] = v30[2];
            v32[3] = -1;
            uint64_t i = (i - v24) & v24;
            v30 += 3;
          }

          uint64_t result = (result - v25) & v25;
          v28 += a7;
          ++v27;
        }

        while (v27 != (_DWORD)v103);
        v10 -= v103;
        unsigned int v15 = a8;
        unsigned int v20 = v104;
      }

      if (v23)
      {
        v10 -= v23;
        uint64_t v100 = v10 + v22;
        uint64_t v33 = sub_34508(~(-1 << v107), 0, v107, v106);
        uint64_t v34 = sub_34508(0, ~(-1 << v106), v107, v106);
        uint64_t v35 = sub_34508(a8, 0, v107, v106);
        uint64_t v36 = &a2[v100 * a7];
        uint64_t result = sub_34508(0, v100 + a9, v107, v106);
        unsigned int v20 = v104;
        for (int j = 0; j != v23; ++j)
        {
          unsigned int v38 = v11;
          unsigned int v39 = v36;
          for (uint64_t k = v35; v38; --v38)
          {
            unsigned int v41 = (_BYTE *)(v13 + 4 * (k + result));
            *unsigned int v41 = *v39;
            v41[1] = v39[1];
            v41[2] = v39[2];
            int v41[3] = -1;
            uint64_t k = (k - v33) & v33;
            v39 += 3;
          }

          uint64_t result = (result - v34) & v34;
          v36 += a7;
        }

        unsigned int v15 = a8;
      }

      if (v10)
      {
        if (v20)
        {
          uint64_t v42 = sub_34508(~(-1 << v107), 0, v107, v106);
          uint64_t v43 = sub_34508(0, ~(-1 << v106), v107, v106);
          uint64_t v44 = sub_34508(v15, 0, v107, v106);
          int v45 = &a2[v103 * a7];
          uint64_t result = sub_34508(0, v103 + a9, v107, v106);
          unsigned int v20 = v104;
          for (int m = 0; m != v10; ++m)
          {
            unsigned int v47 = v104;
            BOOL v48 = v45;
            uint64_t v49 = v44;
            do
            {
              int v50 = (_BYTE *)(v13 + 4 * (v49 + result));
              _BYTE *v50 = *v48;
              v50[1] = v48[1];
              v50[2] = v48[2];
              v50[3] = -1;
              uint64_t v49 = (v49 - v42) & v42;
              v48 += 3;
              --v47;
            }

            while (v47);
            uint64_t result = (result - v43) & v43;
            v45 += a7;
          }

          v11 -= v104;
          unsigned int v15 = a8;
        }

        if (v102)
        {
          v11 -= v102;
          uint64_t v101 = v11 + v20;
          uint64_t v51 = sub_34508(~(-1 << v107), 0, v107, v106);
          uint64_t v52 = sub_34508(0, ~(-1 << v106), v107, v106);
          uint64_t v53 = sub_34508(v101 + v15, 0, v107, v106);
          uint64_t v54 = &a2[v103 * a7];
          uint64_t result = sub_34508(0, v103 + a9, v107, v106);
          for (int n = 0; n != v10; ++n)
          {
            uint64_t v56 = &v54[2 * v101 + v101];
            int v57 = v102;
            uint64_t v58 = v53;
            do
            {
              uint64_t v59 = (_BYTE *)(v13 + 4 * (v58 + result));
              _BYTE *v59 = *v56;
              v59[1] = v56[1];
              v59[2] = v56[2];
              _DWORD v59[3] = -1;
              uint64_t v58 = (v58 - v51) & v51;
              v56 += 3;
              --v57;
            }

            while (v57);
            uint64_t result = (result - v52) & v52;
            v54 += a7;
          }

          unsigned int v15 = a8;
        }

        if (v11)
        {
          uint64_t v60 = sub_34508(~(-1 << v107) & 0x7FFFFFF8, 0, v107, v106);
          uint64_t v61 = sub_34508(0, ~(-1 << v106) & 0x7FFFFFFC, v107, v106);
          uint64_t v62 = sub_34508(v104 + v15, 0, v107, v106);
          unsigned int v63 = &a2[v103 * a7];
          uint64_t result = sub_34508(0, v103 + a9, v107, v106);
          unsigned int v66 = 0;
          int8x16_t v67 = (int8x16_t)xmmword_703F0;
          int8x16_t v68 = (int8x16_t)xmmword_70400;
          do
          {
            unsigned int v69 = 0;
            unsigned int v70 = &v63[3 * v104];
            uint64_t v71 = v62;
            do
            {
              unsigned int v72 = (int8x16_t *)(v13 + 4 * (v71 + result));
              int8x16_t v73 = *(int8x16_t *)&v70[a7];
              v64.i64[0] = *(void *)&v70[a7 + 16];
              unsigned int v74 = (int8x16_t *)&v70[a7 + a7 + a7];
              int8x16_t v75 = *v74;
              v65.i64[0] = v74[1].i64[0];
              int8x16_t v76 = vdupq_n_s8(6u);
              int8x16_t v77 = vqtbx1q_s8(v73, v68);
              int8x16_t v78 = vqtbx1q_s8(*v74, v68);
              int8x16_t v79 = vaddq_s8(v68, v76);
              int8x16_t v80 = vqtbx1q_s8(v73, v79);
              int8x16_t v81 = vaddq_s8(vaddq_s8(v67, v76), v76);
              int8x16_t v82 = vqtbx1q_s8(*v74, v79);
              int8x16_t v83 = vaddq_s8(v79, v76);
              *unsigned int v72 = v77;
              v72[1] = v78;
              v72[2] = v80;
              uint64_t v72[3] = v82;
              v72 += 8;
              int8x16_t v84 = vdupq_n_s8(0xAu);
              int8x16_t v85 = vqtbx2q_s8(*(int8x16x2_t *)(&v64 - 1), v83);
              int8x16_t v86 = vsubq_s8(v81, v84);
              int8x16_t v87 = vqtbx2q_s8(*(int8x16x2_t *)(&v65 - 1), v83);
              int8x16_t v88 = vsubq_s8(v83, v84);
              int8x16_t v89 = vdupq_n_s8(2u);
              int8x16_t v90 = vqtbx1q_s8(v64, v88);
              int8x16_t v67 = vsubq_s8(v86, v89);
              int8x16_t v91 = vqtbx1q_s8(v65, v88);
              int8x16_t v68 = vsubq_s8(v88, v89);
              *unsigned int v72 = v85;
              v72[1] = v87;
              v72[2] = v90;
              uint64_t v72[3] = v91;
              uint64_t v71 = (v71 - v60) & v60;
              v70 += 24;
              v69 += 8;
            }

            while (v69 < v11);
            uint64_t result = (result - v61) & v61;
            v63 += 4 * a7;
            v66 += 4;
          }

          while (v66 < v10);
        }
      }

      return result;
    }
  }

  uint64_t v92 = sub_34508(~(-1 << v14), 0, v14, v106);
  uint64_t v93 = sub_34508(0, ~(-1 << v106), v107, v106);
  uint64_t result = sub_34508(a8, 0, v107, v106);
  if (v10)
  {
    uint64_t v94 = result;
    uint64_t result = sub_34508(0, a9, v107, v106);
    for (iuint64_t i = 0; ii != v10; ++ii)
    {
      unsigned int v96 = v11;
      unsigned int v97 = a2;
      for (jint j = v94; v96; --v96)
      {
        unsigned int v99 = (_BYTE *)(v13 + 4 * (jj + result));
        *unsigned int v99 = *v97;
        v99[1] = v97[1];
        uint64_t v99[2] = v97[2];
        int v99[3] = -1;
        jint j = (jj - v92) & v92;
        v97 += 3;
      }

      uint64_t result = (result - v93) & v93;
      a2 += a7;
    }
  }

  return result;
}

uint64_t (*sub_3B9B8( int a1, unsigned int a2, uint64_t a3))(uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (a2)
  {
    if ((a1 == 36248 || a1 == 6407)
      && a2 >> 1 == 2560
      && ((int v4 = *(_DWORD *)(a3 + 24), v4 != 36249) ? (v5 = v4 == 6408) : (v5 = 1),
          v5 && *(_DWORD *)(a3 + 28) >> 1 == 2560))
    {
      return (uint64_t (*)(uint64_t, __int128 *, int, int, double, int32x2_t, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, uint64_t))sub_3CDD4;
    }

    else if (*(_DWORD *)(a3 + 24) == a1 {
           && *(_DWORD *)(a3 + 28) == a2
    }
           && (*(_BYTE *)(a3 + 57) - 1) <= 0xFu)
    {
      return (uint64_t (*)(uint64_t, __int128 *, int, int, double, int32x2_t, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, uint64_t))off_795D8[(*(_BYTE *)(a3 + 57) - 1)];
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    switch(a1)
    {
      case 37808:
      case 37840:
        uint64_t result = sub_3BC84;
        break;
      case 37809:
      case 37841:
        uint64_t result = sub_3BD94;
        break;
      case 37810:
      case 37842:
        uint64_t result = sub_3BEBC;
        break;
      case 37811:
      case 37843:
        uint64_t result = sub_3BFE8;
        break;
      case 37812:
      case 37844:
        uint64_t result = sub_3C11C;
        break;
      case 37813:
      case 37845:
        uint64_t result = sub_3C358;
        break;
      case 37814:
      case 37846:
        uint64_t result = sub_3C484;
        break;
      case 37815:
      case 37847:
        uint64_t result = sub_3C5B0;
        break;
      case 37816:
      case 37848:
        uint64_t result = sub_3C6C0;
        break;
      case 37817:
      case 37849:
        uint64_t result = sub_3C7EC;
        break;
      case 37818:
      case 37850:
        uint64_t result = sub_3C920;
        break;
      case 37819:
      case 37851:
        uint64_t result = sub_3CA48;
        break;
      case 37820:
      case 37852:
        uint64_t result = sub_3CB74;
        break;
      case 37821:
      case 37853:
        uint64_t result = sub_3CCA8;
        break;
      case 37822:
      case 37823:
      case 37824:
      case 37825:
      case 37826:
      case 37827:
      case 37828:
      case 37829:
      case 37830:
      case 37831:
      case 37832:
      case 37833:
      case 37834:
      case 37835:
      case 37836:
      case 37837:
      case 37838:
      case 37839:
        return result;
      default:
        switch(a1)
        {
          case 35420:
          case 35422:
            uint64_t result = sub_3BB74;
            break;
          case 35421:
          case 35423:
            uint64_t result = sub_3C248;
            break;
          default:
            return result;
        }

        break;
    }
  }

  return result;
}

uint64_t sub_3BB74( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 1) >> 1;
        unsigned int v28 = (a3 + 3) >> 2;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 >> 2,  a12 >> 1,  a5,  a6,  (a14 + 3) >> 2,  (a15 + 1) >> 1,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3BC84( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 3) >> 2;
        unsigned int v28 = (a3 + 3) >> 2;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 >> 2,  a12 >> 2,  a5,  a6,  (a14 + 3) >> 2,  (a15 + 3) >> 2,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3BD94( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v28 = (a3 + 4) / 5u;
        unsigned int v27 = (a4 + 3) >> 2;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 5,  a12 >> 2,  a5,  a6,  (a14 + 4) / 5u,  (a15 + 3) >> 2,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3BEBC( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 4) / 5u;
        unsigned int v28 = (a3 + 4) / 5u;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 5,  a12 / 5,  a5,  a6,  (a14 + 4) / 5u,  (a15 + 4) / 5u,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3BFE8( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 4) / 5u;
        unsigned int v28 = (a3 + 5) / 6u;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 6,  a12 / 5,  a5,  a6,  (a14 + 5) / 6u,  (a15 + 4) / 5u,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3C11C( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 5) / 6u;
        unsigned int v28 = (a3 + 5) / 6u;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 6,  a12 / 6,  a5,  a6,  (a14 + 5) / 6u,  (a15 + 5) / 6u,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3C248( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 3) >> 2;
        unsigned int v28 = (a3 + 7) >> 3;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 >> 3,  a12 >> 2,  a5,  a6,  (a14 + 7) >> 3,  (a15 + 3) >> 2,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3C358( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v28 = (a3 + 7) >> 3;
        unsigned int v27 = (a4 + 4) / 5u;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 >> 3,  a12 / 5,  a5,  a6,  (a14 + 7) >> 3,  (a15 + 4) / 5u,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3C484( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v28 = (a3 + 7) >> 3;
        unsigned int v27 = (a4 + 5) / 6u;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 >> 3,  a12 / 6,  a5,  a6,  (a14 + 7) >> 3,  (a15 + 5) / 6u,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3C5B0( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 7) >> 3;
        unsigned int v28 = (a3 + 7) >> 3;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 >> 3,  a12 >> 3,  a5,  a6,  (a14 + 7) >> 3,  (a15 + 7) >> 3,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3C6C0( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 4) / 5u;
        unsigned int v28 = (a3 + 9) / 0xAu;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 0xA,  a12 / 5,  a5,  a6,  (a14 + 9) / 0xAu,  (a15 + 4) / 5u,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3C7EC( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 5) / 6u;
        unsigned int v28 = (a3 + 9) / 0xAu;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 0xA,  a12 / 6,  a5,  a6,  (a14 + 9) / 0xAu,  (a15 + 5) / 6u,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3C920( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v28 = (a3 + 9) / 0xAu;
        unsigned int v27 = (a4 + 7) >> 3;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 0xA,  a12 >> 3,  a5,  a6,  (a14 + 9) / 0xAu,  (a15 + 7) >> 3,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3CA48( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 9) / 0xAu;
        unsigned int v28 = (a3 + 9) / 0xAu;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 0xA,  a12 / 0xA,  a5,  a6,  (a14 + 9) / 0xAu,  (a15 + 9) / 0xAu,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3CB74( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 9) / 0xAu;
        unsigned int v28 = (a3 + 11) / 0xCu;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 0xC,  a12 / 0xA,  a5,  a6,  (a14 + 11) / 0xCu,  (a15 + 9) / 0xAu,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_3CCA8( uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 11) / 0xCu;
        unsigned int v28 = (a3 + 11) / 0xCu;
        do
        {
          uint64_t result = sub_33618( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 0xC,  a12 / 0xC,  a5,  a6,  (a14 + 11) / 0xCu,  (a15 + 11) / 0xCu,  a17,  a19,  a20);
          unsigned int v20 = (__int128 *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

unint64_t sub_3CDD4( unint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  unsigned int v29 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          int v30 = v29;
          for (uint64_t j = 0LL; j != a13; ++j)
          {
            if (a12)
            {
              unsigned int v24 = a9;
              uint64_t v25 = v30;
              uint64_t v26 = a12;
              do
              {
                uint64_t result = sub_3CF94(v24, (int)j + a10, (int)i + a11, v18, v20, v22);
                unsigned int v27 = (_BYTE *)(v23 + 4 * result);
                *unsigned int v27 = *v25;
                v27[1] = v25[1];
                v27[2] = v25[2];
                v27[3] = -1;
                ++v24;
                v25 += 3;
                --v26;
              }

              while (v26);
            }

            v30 += a15;
          }
        }

        v29 += a16;
      }
    }
  }

  return result;
}

unint64_t sub_3CF94( unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  unint64_t result = (4 * a1) & 8 | (2 * (a1 & 1)) & 0xCB | a2 & 1 | (4 * ((a2 >> 1) & 1)) & 0xFFFFFFCF | (16 * (a3 & 3));
  BOOL v8 = a5 > 2;
  BOOL v9 = a6 > 2;
  BOOL v10 = a4 > 2;
  if (a4 > 2 || a5 > 2 || a6 >= 3)
  {
    int v11 = 4;
    int v12 = 4;
    do
    {
      BOOL v13 = !v8;
      if (v8)
      {
        --a5;
        unint64_t v14 = ((unint64_t)(v11 & a2) << v12) | result;
      }

      else
      {
        unint64_t v14 = result;
      }

      if (!v13) {
        ++v12;
      }
      BOOL v15 = !v10;
      if (v10)
      {
        --a4;
        unint64_t v16 = ((unint64_t)(v11 & a1) << v12) | v14;
      }

      else
      {
        unint64_t v16 = v14;
      }

      if (v15) {
        int v17 = v12;
      }
      else {
        int v17 = v12 + 1;
      }
      if (v9)
      {
        --a6;
        unint64_t result = ((unint64_t)(v11 & a3) << v17) | v16;
      }

      else
      {
        unint64_t result = v16;
      }

      if (v9) {
        int v18 = v17 + 1;
      }
      else {
        int v18 = v17;
      }
      v11 *= 2;
      int v12 = v18 - 1;
      BOOL v8 = a5 > 2;
      BOOL v9 = a6 > 2;
      BOOL v10 = a4 > 2;
    }

    while (a4 > 2 || a5 > 2 || a6 > 2);
  }

  return result;
}

unint64_t sub_3D08C( unint64_t result, char *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  int v30 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          int v31 = v30;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v31;
              do
              {
                unint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                char v28 = *v26++;
                *(_BYTE *)(result + v23) = v28;
                ++v25;
                --v27;
              }

              while (v27);
            }

            ++v24;
            v31 += a15;
          }

          while (v24 != a13);
        }

        v30 += a16;
      }
    }
  }

  return result;
}

unint64_t sub_3D22C( unint64_t result, __int16 *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  int v30 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          int v31 = v30;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v31;
              do
              {
                unint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                __int16 v28 = *v26++;
                *(_WORD *)(v23 + 2 * result) = v28;
                ++v25;
                --v27;
              }

              while (v27);
            }

            ++v24;
            int v31 = (__int16 *)((char *)v31 + a15);
          }

          while (v24 != a13);
        }

        int v30 = (__int16 *)((char *)v30 + a16);
      }
    }
  }

  return result;
}

unint64_t sub_3D3CC( unint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  int v30 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          int v31 = v30;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v31;
              do
              {
                unint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                __int16 v28 = (_BYTE *)(3 * result + v23);
                _BYTE *v28 = *v26;
                v28[1] = v26[1];
                v28[2] = v26[2];
                ++v25;
                v26 += 3;
                --v27;
              }

              while (v27);
            }

            ++v24;
            v31 += a15;
          }

          while (v24 != a13);
        }

        v30 += a16;
      }
    }
  }

  return result;
}

unint64_t sub_3D588( unint64_t result, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  int v30 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          int v31 = v30;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v31;
              do
              {
                unint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                int v28 = *v26++;
                *(_DWORD *)(v23 + 4 * result) = v28;
                ++v25;
                --v27;
              }

              while (v27);
            }

            ++v24;
            int v31 = (int *)((char *)v31 + a15);
          }

          while (v24 != a13);
        }

        int v30 = (int *)((char *)v30 + a16);
      }
    }
  }

  return result;
}

unint64_t sub_3D728( unint64_t result, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  int v31 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          unsigned int v32 = v31;
          for (uint64_t j = 0LL; j != a13; ++j)
          {
            if (a12)
            {
              unsigned int v24 = a9;
              unsigned int v25 = v32;
              uint64_t v26 = a12;
              do
              {
                unint64_t result = sub_3CF94(v24, (int)j + a10, (int)i + a11, v18, v20, v22);
                __int16 v27 = *((_WORD *)v25 + 2);
                int v28 = *v25;
                unsigned int v25 = (int *)((char *)v25 + 6);
                unint64_t v29 = v23 + 6 * result;
                *(_DWORD *)unint64_t v29 = v28;
                *(_WORD *)(v29 + 4) = v27;
                ++v24;
                --v26;
              }

              while (v26);
            }

            unsigned int v32 = (int *)((char *)v32 + a15);
          }
        }

        int v31 = (int *)((char *)v31 + a16);
      }
    }
  }

  return result;
}

unint64_t sub_3D8D8( unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  int v30 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          int v31 = v30;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v31;
              do
              {
                unint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                uint64_t v28 = *v26++;
                *(void *)(v23 + 8 * result) = v28;
                ++v25;
                --v27;
              }

              while (v27);
            }

            ++v24;
            int v31 = (uint64_t *)((char *)v31 + a15);
          }

          while (v24 != a13);
        }

        int v30 = (uint64_t *)((char *)v30 + a16);
      }
    }
  }

  return result;
}

unint64_t sub_3DA78( unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  int v31 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          unsigned int v32 = v31;
          for (uint64_t j = 0LL; j != a13; ++j)
          {
            if (a12)
            {
              unsigned int v24 = a9;
              unsigned int v25 = v32;
              uint64_t v26 = a12;
              do
              {
                unint64_t result = sub_3CF94(v24, (int)j + a10, (int)i + a11, v18, v20, v22);
                int v27 = *((_DWORD *)v25 + 2);
                uint64_t v28 = *v25;
                unsigned int v25 = (uint64_t *)((char *)v25 + 12);
                unint64_t v29 = v23 + 12 * result;
                *(void *)unint64_t v29 = v28;
                *(_DWORD *)(v29 + 8) = v27;
                ++v24;
                --v26;
              }

              while (v26);
            }

            unsigned int v32 = (uint64_t *)((char *)v32 + a15);
          }
        }

        int v31 = (uint64_t *)((char *)v31 + a16);
      }
    }
  }

  return result;
}

unint64_t sub_3DC28( unint64_t result, __int128 *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  int v30 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          int v31 = v30;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v31;
              do
              {
                unint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                __int128 v28 = *v26++;
                *(_OWORD *)(v23 + 16 * result) = v28;
                ++v25;
                --v27;
              }

              while (v27);
            }

            ++v24;
            int v31 = (__int128 *)((char *)v31 + a15);
          }

          while (v24 != a13);
        }

        int v30 = (__int128 *)((char *)v30 + a16);
      }
    }
  }

  return result;
}

uint64_t (*sub_3DDC8( int a1, unsigned int a2, uint64_t a3))(uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (a2)
  {
    if ((a1 == 36248 || a1 == 6407)
      && a2 >> 1 == 2560
      && ((int v4 = *(_DWORD *)(a3 + 24), v4 != 36249) ? (v5 = v4 == 6408) : (v5 = 1),
          v5 && *(_DWORD *)(a3 + 28) >> 1 == 2560))
    {
      return (uint64_t (*)(uint64_t, __int128 *, int, int, double, int32x2_t, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, uint64_t))sub_3DF84;
    }

    else if (*(_DWORD *)(a3 + 24) == a1 {
           && *(_DWORD *)(a3 + 28) == a2
    }
           && (*(_BYTE *)(a3 + 57) - 1) <= 0xFu)
    {
      return (uint64_t (*)(uint64_t, __int128 *, int, int, double, int32x2_t, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, uint64_t))off_79658[(*(_BYTE *)(a3 + 57) - 1)];
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    unint64_t result = 0LL;
    switch(a1)
    {
      case 37808:
      case 37840:
        unint64_t result = sub_3BC84;
        break;
      case 37809:
      case 37841:
        unint64_t result = sub_3BD94;
        break;
      case 37810:
      case 37842:
        unint64_t result = sub_3BEBC;
        break;
      case 37811:
      case 37843:
        unint64_t result = sub_3BFE8;
        break;
      case 37812:
      case 37844:
        unint64_t result = sub_3C11C;
        break;
      case 37813:
      case 37845:
        unint64_t result = sub_3C358;
        break;
      case 37814:
      case 37846:
        unint64_t result = sub_3C484;
        break;
      case 37815:
      case 37847:
        unint64_t result = sub_3C5B0;
        break;
      case 37816:
      case 37848:
        unint64_t result = sub_3C6C0;
        break;
      case 37817:
      case 37849:
        unint64_t result = sub_3C7EC;
        break;
      case 37818:
      case 37850:
        unint64_t result = sub_3C920;
        break;
      case 37819:
      case 37851:
        unint64_t result = sub_3CA48;
        break;
      case 37820:
      case 37852:
        unint64_t result = sub_3CB74;
        break;
      case 37821:
      case 37853:
        unint64_t result = sub_3CCA8;
        break;
      case 37822:
      case 37823:
      case 37824:
      case 37825:
      case 37826:
      case 37827:
      case 37828:
      case 37829:
      case 37830:
      case 37831:
      case 37832:
      case 37833:
      case 37834:
      case 37835:
      case 37836:
      case 37837:
      case 37838:
      case 37839:
        return result;
      default:
        switch(a1)
        {
          case 35420:
          case 35422:
            unint64_t result = sub_3BB74;
            break;
          case 35421:
          case 35423:
            unint64_t result = sub_3C248;
            break;
          default:
            return result;
        }

        break;
    }
  }

  return result;
}

uint64_t sub_3DF84( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_3AC30(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_3AC30(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3E08C( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_365B8(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_365B8(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3E194( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_375F0(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_375F0(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3E29C( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_39068(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_39068(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3E3A4( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_39E54(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_39E54(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3E4AC( uint64_t result, int *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_35CD0(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_35CD0(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        uint64_t v20 = (int *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3E5B4( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_34628(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_34628(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3E6BC( uint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_353E8(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_353E8(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        uint64_t v20 = (uint64_t *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3E7C4( uint64_t result, __int128 *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_33618(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_33618(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        uint64_t v20 = (__int128 *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t (*sub_3E8CC( int a1, unsigned int a2, uint64_t a3))(uint64_t result, __int128 *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (a2)
  {
    if ((a1 == 36248 || a1 == 6407)
      && a2 >> 1 == 2560
      && ((int v4 = *(_DWORD *)(a3 + 24), v4 != 36249) ? (v5 = v4 == 6408) : (v5 = 1),
          v5 && *(_DWORD *)(a3 + 28) >> 1 == 2560))
    {
      return (uint64_t (*)(uint64_t, __int128 *, int, int, double, int32x2_t, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, uint64_t))sub_3EA88;
    }

    else if (*(_DWORD *)(a3 + 24) == a1 {
           && *(_DWORD *)(a3 + 28) == a2
    }
           && (*(_BYTE *)(a3 + 57) - 1) <= 0xFu)
    {
      return (uint64_t (*)(uint64_t, __int128 *, int, int, double, int32x2_t, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, uint64_t))off_796D8[(*(_BYTE *)(a3 + 57) - 1)];
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    unint64_t result = 0LL;
    switch(a1)
    {
      case 37808:
      case 37840:
        unint64_t result = sub_3BC84;
        break;
      case 37809:
      case 37841:
        unint64_t result = sub_3BD94;
        break;
      case 37810:
      case 37842:
        unint64_t result = sub_3BEBC;
        break;
      case 37811:
      case 37843:
        unint64_t result = sub_3BFE8;
        break;
      case 37812:
      case 37844:
        unint64_t result = sub_3C11C;
        break;
      case 37813:
      case 37845:
        unint64_t result = sub_3C358;
        break;
      case 37814:
      case 37846:
        unint64_t result = sub_3C484;
        break;
      case 37815:
      case 37847:
        unint64_t result = sub_3C5B0;
        break;
      case 37816:
      case 37848:
        unint64_t result = sub_3C6C0;
        break;
      case 37817:
      case 37849:
        unint64_t result = sub_3C7EC;
        break;
      case 37818:
      case 37850:
        unint64_t result = sub_3C920;
        break;
      case 37819:
      case 37851:
        unint64_t result = sub_3CA48;
        break;
      case 37820:
      case 37852:
        unint64_t result = sub_3CB74;
        break;
      case 37821:
      case 37853:
        unint64_t result = sub_3CCA8;
        break;
      case 37822:
      case 37823:
      case 37824:
      case 37825:
      case 37826:
      case 37827:
      case 37828:
      case 37829:
      case 37830:
      case 37831:
      case 37832:
      case 37833:
      case 37834:
      case 37835:
      case 37836:
      case 37837:
      case 37838:
      case 37839:
        return result;
      default:
        switch(a1)
        {
          case 35420:
          case 35422:
            unint64_t result = sub_3BB74;
            break;
          case 35421:
          case 35423:
            unint64_t result = sub_3C248;
            break;
          default:
            return result;
        }

        break;
    }
  }

  return result;
}

uint64_t sub_3EA88( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_3AC30(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_3AC30(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3EB90( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_365B8(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_365B8(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3EC98( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_375F0(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_375F0(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3EDA0( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_39068(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_39068(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3EEA8( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_39E54(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_39E54(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3EFB0( uint64_t result, int *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_35CD0(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_35CD0(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        uint64_t v20 = (int *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3F0B8( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_34628(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_34628(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3F1C0( uint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_353E8(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_353E8(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        uint64_t v20 = (uint64_t *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_3F2C8( uint64_t result, __int128 *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          unint64_t result = sub_33618(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          unint64_t result = sub_33618(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        uint64_t v20 = (__int128 *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t (*sub_3F3D0( int a1, unsigned int a2, int a3, uint64_t a4, int a5))(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t)
{
  if (a1 == 20)
  {
    if (a2 < 0x10)
    {
      BOOL v7 = &off_797B0[a2];
      return *v7;
    }

    return 0LL;
  }

  if (a1 == 19)
  {
    unsigned int v5 = a2 - 21;
    if (a2 - 21 < 0xB)
    {
      BOOL v6 = (uint64_t (**)(int, int, int, int, int, int, int, int, int, int, __int128, uint64_t))off_79758;
LABEL_5:
      BOOL v7 = (uint64_t (**)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))&v6[v5];
      return *v7;
    }

    return 0LL;
  }

  if ((a5 & 0x8000) != 0)
  {
    switch(a4)
    {
      case 4LL:
        if ((a5 & 0x100000) != 0)
        {
          unsigned int v5 = a3 - 1;
          if ((a3 - 1) < 8)
          {
            BOOL v6 = &off_79930;
            goto LABEL_5;
          }
        }

        else if (a2 == 1)
        {
          unsigned int v5 = a3 - 1;
          if ((a3 - 1) < 8)
          {
            BOOL v6 = &off_799B0;
            goto LABEL_5;
          }
        }

        else if (!a2)
        {
          unsigned int v5 = a3 - 1;
          if ((a3 - 1) < 8)
          {
            BOOL v6 = &off_79970;
            goto LABEL_5;
          }
        }

        break;
      case 8LL:
        unsigned int v5 = a3 - 1;
        if ((a5 & 0x100000) != 0)
        {
          if (v5 < 8)
          {
            BOOL v6 = &off_798B0;
            goto LABEL_5;
          }
        }

        else if (v5 < 8)
        {
          BOOL v6 = &off_798F0;
          goto LABEL_5;
        }

        break;
      case 16LL:
        unsigned int v5 = a3 - 1;
        if ((a5 & 0x100000) != 0)
        {
          if (v5 < 8)
          {
            BOOL v6 = &off_79830;
            goto LABEL_5;
          }
        }

        else if (v5 < 8)
        {
          BOOL v6 = &off_79870;
          goto LABEL_5;
        }

        break;
    }

    return 0LL;
  }

  unint64_t result = 0LL;
  switch(a4)
  {
    case 1LL:
      unsigned int v5 = a3 - 1;
      BOOL v6 = &off_79BB0;
      goto LABEL_5;
    case 2LL:
      unsigned int v5 = a3 - 1;
      BOOL v6 = &off_79B70;
      goto LABEL_5;
    case 3LL:
      unsigned int v5 = a3 - 1;
      BOOL v6 = &off_79B30;
      goto LABEL_5;
    case 4LL:
      unsigned int v5 = a3 - 1;
      BOOL v6 = &off_79AF0;
      goto LABEL_5;
    case 6LL:
      unsigned int v5 = a3 - 1;
      BOOL v6 = &off_79AB0;
      goto LABEL_5;
    case 8LL:
      unsigned int v5 = a3 - 1;
      BOOL v6 = &off_79A70;
      goto LABEL_5;
    case 12LL:
      unsigned int v5 = a3 - 1;
      BOOL v6 = &off_79A30;
      goto LABEL_5;
    case 16LL:
      unsigned int v5 = a3 - 1;
      BOOL v6 = &off_799F0;
      goto LABEL_5;
    default:
      return result;
  }

  return result;
}

uint64_t sub_3F5D4( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_40F40(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_3F5F0( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    BOOL v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v150 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v153);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v152, &v151);
          unsigned int v116 = v154;
          if (v154)
          {
            int v118 = 0;
            char v112 = v152;
            unsigned int v108 = a7 >> v152;
            char v143 = v151;
            unsigned int v133 = a8 >> v151;
            unsigned int v147 = v155;
            unsigned int v106 = a11 + a7;
            int v102 = ((1 << v152) - 1) & a7;
            int v104 = ((1 << v152) - 1) & (a11 + a7);
            int v100 = (1 << v152) - v102;
            unsigned int v131 = a12 + a8;
            int v120 = ((1 << v151) - 1) & a8;
            int v127 = (1 << v151) - v120;
            int v129 = ((1 << v151) - 1) & (a12 + a8);
            int v110 = 1 << v152;
            if (1 << v152 >= a5) {
              unsigned int v20 = a5;
            }
            else {
              unsigned int v20 = 1 << v152;
            }
            int v135 = 1 << v151;
            if (1 << v151 >= a6) {
              unsigned int v21 = a6;
            }
            else {
              unsigned int v21 = 1 << v151;
            }
            unsigned int v22 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v22 = 0;
            }
            unsigned int v23 = 32 - __clz(v20 - 1);
            if (v20 >= 2) {
              int v24 = v23;
            }
            else {
              int v24 = 0;
            }
            int v141 = v22;
            unsigned int v124 = ~(-1 << v22);
            do
            {
              if (v147)
              {
                int v25 = 0;
                unsigned int v26 = (v118 + v108) << v112;
                unsigned int v27 = a11;
                if (v106 >= (v118 + v108 + 1) << v112) {
                  unsigned int v27 = v100;
                }
                int v28 = v110;
                if (v106 < (v118 + v108 + 1) << v112) {
                  int v28 = v104;
                }
                if (v26 >= a7) {
                  unsigned int v29 = v28;
                }
                else {
                  unsigned int v29 = v27;
                }
                unsigned int v30 = v102;
                if (v26 >= a7) {
                  unsigned int v30 = 0;
                }
                unsigned int v139 = v30;
                unsigned int v122 = &a2[v30 + (v118 << v112)];
                do
                {
                  LOWORD(v31) = v118;
                  HIWORD(v31) = v25;
                  unint64_t result = sub_34358(v153, v31);
                  int v32 = *(_DWORD *)(v18 + 4LL * result);
                  if (v32 < 0)
                  {
                    unint64_t v33 = v150 - *(void *)(a15 + 24) + ((unint64_t)(v32 & 0x3FFFFFF) << 14);
                    unsigned int v34 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v34) {
                      v33 += sub_343C0( *(_DWORD *)a15,  v34,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v35 = (v25 + v133) << v143;
                    unsigned int v36 = a12;
                    if (v131 >= (v25 + v133 + 1) << v143) {
                      unsigned int v36 = v127;
                    }
                    int v37 = v135;
                    if (v131 < (v25 + v133 + 1) << v143) {
                      int v37 = v129;
                    }
                    if (v35 >= a8) {
                      unsigned int v38 = v37;
                    }
                    else {
                      unsigned int v38 = v36;
                    }
                    uint64_t v39 = sub_34508(~(-1 << v24), 0, v24, v141);
                    uint64_t v40 = sub_34508(0, v124, v24, v141);
                    unint64_t result = sub_34508(v139, 0, v24, v141);
                    if (v38)
                    {
                      uint64_t v41 = result;
                      if (v35 >= a8) {
                        unsigned int v42 = 0;
                      }
                      else {
                        unsigned int v42 = v120;
                      }
                      uint64_t v43 = (_WORD *)((char *)v122 + (v42 + (v25 << v143)) * a13);
                      unint64_t result = sub_34508(0, v42, v24, v141);
                      for (int i = 0; i != v38; ++i)
                      {
                        unsigned int v45 = v29;
                        char v46 = v43;
                        for (uint64_t j = v41; v45; --v45)
                        {
                          *v46++ = *(_WORD *)(v33 + 2 * (j + result));
                          uint64_t j = (j - v39) & v39;
                        }

                        unint64_t result = (result - v40) & v40;
                        uint64_t v43 = (_WORD *)((char *)v43 + a13);
                      }
                    }
                  }

                  ++v25;
                  uint64_t v18 = v150;
                }

                while (v147 > (unsigned __int16)v25);
              }

              ++v118;
            }

            while (v116 > (unsigned __int16)v118);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v153, &v152);
          unsigned int v61 = 1 << v152;
          char v62 = *((_BYTE *)a14 + 15);
          unsigned int v63 = 1 << v62;
          if (v62) {
            BOOL v64 = v63 > a3;
          }
          else {
            BOOL v64 = 1;
          }
          BOOL v65 = v64 || v63 > a4;
          int v66 = (~(-1 << v62) + a3) & (-1 << v62);
          if (v65) {
            int v67 = a3;
          }
          else {
            int v67 = v66;
          }
          unsigned int v117 = a8 >> v152;
          int v119 = 1 << v152;
          unsigned int v68 = v61 - 1;
          unsigned int v113 = a12 + a8;
          char v111 = v152;
          unsigned int v69 = (v61 - 1 + a12 + a8) >> v152;
          if (a8 >> v152 < v69)
          {
            unsigned int v107 = (v67 + ~(-1 << SLOBYTE(v153[0]))) >> SLOBYTE(v153[0]);
            unsigned int v70 = a7 >> SLOBYTE(v153[0]);
            char v142 = v153[0];
            unsigned int v137 = ((1 << SLOBYTE(v153[0])) - 1 + a11 + a7) >> SLOBYTE(v153[0]);
            int v132 = ((1 << SLOBYTE(v153[0])) - 1) & (a11 + a7);
            unsigned int v134 = a11 + a7;
            uint64_t v140 = ((1 << SLOBYTE(v153[0])) - 1) & a7;
            unsigned int v130 = (1 << SLOBYTE(v153[0])) - v140;
            int v103 = v68 & v113;
            unsigned int v71 = 1 << v152;
            uint64_t v105 = v68 & a8;
            unsigned int v101 = v61 - v105;
            int v136 = 1 << SLOBYTE(v153[0]);
            if (1 << SLOBYTE(v153[0]) >= a5) {
              unsigned int v72 = a5;
            }
            else {
              unsigned int v72 = 1 << SLOBYTE(v153[0]);
            }
            if (v61 >= a6) {
              unsigned int v71 = a6;
            }
            unsigned int v73 = 32 - __clz(v71 - 1);
            if (v71 < 2) {
              unsigned int v73 = 0;
            }
            unsigned int v74 = 32 - __clz(v72 - 1);
            if (v72 >= 2) {
              unsigned int v75 = v74;
            }
            else {
              unsigned int v75 = 0;
            }
            int v144 = v75;
            unsigned int v99 = ~(-1 << v75);
            int v146 = v73;
            unsigned int v98 = ~(-1 << v73);
            unsigned int v76 = a8 >> v152;
            unsigned int v115 = v15;
            unsigned int v109 = (v61 - 1 + a12 + a8) >> v152;
            unsigned int v128 = a7 >> SLOBYTE(v153[0]);
            do
            {
              if (v70 >= v137)
              {
                unsigned int v97 = v76 + 1;
              }

              else
              {
                unsigned int v148 = v76 << v111;
                unsigned int v121 = v76 + 1;
                if (v113 >= (v76 + 1) << v111) {
                  int v77 = v119;
                }
                else {
                  int v77 = v103;
                }
                if (v113 >= (v76 + 1) << v111) {
                  unsigned int v78 = v101;
                }
                else {
                  unsigned int v78 = v19;
                }
                int v126 = v76 * v107;
                uint64_t v79 = sub_34508(v99, 0, v144, v146);
                uint64_t v80 = sub_34508(0, v98, v144, v146);
                if (v148 >= a8) {
                  int v81 = v77;
                }
                else {
                  int v81 = v78;
                }
                if (v148 >= a8) {
                  unsigned int v82 = 0;
                }
                else {
                  unsigned int v82 = v105;
                }
                unsigned int v125 = v82;
                int8x16_t v123 = (char *)v15 + (v82 + ((v76 - v117) << v111) - v105) * a13;
                do
                {
                  unsigned int v83 = v70 << v142;
                  unsigned int v149 = v70 + 1;
                  unsigned int v84 = a11;
                  if (v134 >= (v70 + 1) << v142) {
                    unsigned int v84 = v130;
                  }
                  int v85 = v136;
                  if (v134 < (v70 + 1) << v142) {
                    int v85 = v132;
                  }
                  if (v83 >= a7) {
                    unsigned int v86 = 0;
                  }
                  else {
                    unsigned int v86 = v140;
                  }
                  if (v83 >= a7) {
                    unsigned int v87 = v85;
                  }
                  else {
                    unsigned int v87 = v84;
                  }
                  int v88 = a14[3];
                  int v89 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v86, 0, v144, v146);
                  if (v81)
                  {
                    uint64_t v90 = result;
                    uint64_t v91 = (v70 + v126) * v88 * v89 + v150;
                    uint64_t v92 = &v123[2 * (v86 + ((v70 - v128) << v142) - v140)];
                    unint64_t result = sub_34508(0, v125, v144, v146);
                    for (int k = 0; k != v81; ++k)
                    {
                      unsigned int v94 = v87;
                      unsigned __int16 v95 = v92;
                      for (uint64_t m = v90; v94; --v94)
                      {
                        *(_WORD *)unsigned __int16 v95 = *(_WORD *)(v91 + 2 * (m + result));
                        v95 += 2;
                        uint64_t m = (m - v79) & v79;
                      }

                      unint64_t result = (result - v80) & v80;
                      v92 += a13;
                    }
                  }

                  ++v70;
                }

                while (v149 != v137);
                BOOL v15 = v115;
                unsigned int v19 = a12;
                unsigned int v69 = v109;
                unsigned int v70 = v128;
                unsigned int v97 = v121;
              }

              unsigned int v76 = v97;
            }

            while (v97 != v69);
          }
        }
      }

      else
      {
        unsigned int v48 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v49 = v48;
        }
        else {
          int v49 = 0;
        }
        unsigned int v50 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v51 = v50;
        }
        else {
          int v51 = 0;
        }
        uint64_t v52 = sub_34508(~(-1 << v51), 0, v51, v49);
        uint64_t v53 = sub_34508(0, ~(-1 << v49), v51, v49);
        unint64_t result = sub_34508(a7, 0, v51, v49);
        if (a12)
        {
          uint64_t v54 = result;
          unint64_t result = sub_34508(0, a8, v51, v49);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v56 = a11;
            int v57 = v15;
            for (iint i = v54; v56; --v56)
            {
              *v57++ = *(_WORD *)(v18 + 2 * (ii + result));
              iint i = (ii - v52) & v52;
            }

            unint64_t result = (result - v53) & v53;
            BOOL v15 = (_WORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_3FE60( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    BOOL v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v150 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v153);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v152, &v151);
          unsigned int v116 = v154;
          if (v154)
          {
            int v118 = 0;
            char v112 = v152;
            unsigned int v108 = a7 >> v152;
            char v143 = v151;
            unsigned int v133 = a8 >> v151;
            unsigned int v147 = v155;
            unsigned int v106 = a11 + a7;
            int v102 = ((1 << v152) - 1) & a7;
            int v104 = ((1 << v152) - 1) & (a11 + a7);
            int v100 = (1 << v152) - v102;
            unsigned int v131 = a12 + a8;
            int v120 = ((1 << v151) - 1) & a8;
            int v127 = (1 << v151) - v120;
            int v129 = ((1 << v151) - 1) & (a12 + a8);
            int v110 = 1 << v152;
            if (1 << v152 >= a5) {
              unsigned int v20 = a5;
            }
            else {
              unsigned int v20 = 1 << v152;
            }
            int v135 = 1 << v151;
            if (1 << v151 >= a6) {
              unsigned int v21 = a6;
            }
            else {
              unsigned int v21 = 1 << v151;
            }
            unsigned int v22 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v22 = 0;
            }
            unsigned int v23 = 32 - __clz(v20 - 1);
            if (v20 >= 2) {
              int v24 = v23;
            }
            else {
              int v24 = 0;
            }
            int v141 = v22;
            unsigned int v124 = ~(-1 << v22);
            do
            {
              if (v147)
              {
                int v25 = 0;
                unsigned int v26 = (v118 + v108) << v112;
                unsigned int v27 = a11;
                if (v106 >= (v118 + v108 + 1) << v112) {
                  unsigned int v27 = v100;
                }
                int v28 = v110;
                if (v106 < (v118 + v108 + 1) << v112) {
                  int v28 = v104;
                }
                if (v26 >= a7) {
                  unsigned int v29 = v28;
                }
                else {
                  unsigned int v29 = v27;
                }
                unsigned int v30 = v102;
                if (v26 >= a7) {
                  unsigned int v30 = 0;
                }
                unsigned int v139 = v30;
                unsigned int v122 = &a2[v30 + (v118 << v112)];
                do
                {
                  LOWORD(v31) = v118;
                  HIWORD(v31) = v25;
                  unint64_t result = sub_34358(v153, v31);
                  int v32 = *(_DWORD *)(v18 + 4LL * result);
                  if (v32 < 0)
                  {
                    unint64_t v33 = v150 - *(void *)(a15 + 24) + ((unint64_t)(v32 & 0x3FFFFFF) << 14);
                    unsigned int v34 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v34) {
                      v33 += sub_343C0( *(_DWORD *)a15,  v34,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v35 = (v25 + v133) << v143;
                    unsigned int v36 = a12;
                    if (v131 >= (v25 + v133 + 1) << v143) {
                      unsigned int v36 = v127;
                    }
                    int v37 = v135;
                    if (v131 < (v25 + v133 + 1) << v143) {
                      int v37 = v129;
                    }
                    if (v35 >= a8) {
                      unsigned int v38 = v37;
                    }
                    else {
                      unsigned int v38 = v36;
                    }
                    uint64_t v39 = sub_34508(~(-1 << v24), 0, v24, v141);
                    uint64_t v40 = sub_34508(0, v124, v24, v141);
                    unint64_t result = sub_34508(v139, 0, v24, v141);
                    if (v38)
                    {
                      uint64_t v41 = result;
                      if (v35 >= a8) {
                        unsigned int v42 = 0;
                      }
                      else {
                        unsigned int v42 = v120;
                      }
                      uint64_t v43 = (_DWORD *)((char *)v122 + (v42 + (v25 << v143)) * a13);
                      unint64_t result = sub_34508(0, v42, v24, v141);
                      for (int i = 0; i != v38; ++i)
                      {
                        unsigned int v45 = v29;
                        char v46 = v43;
                        for (uint64_t j = v41; v45; --v45)
                        {
                          *v46++ = *(_DWORD *)(v33 + 4 * (j + result));
                          uint64_t j = (j - v39) & v39;
                        }

                        unint64_t result = (result - v40) & v40;
                        uint64_t v43 = (_DWORD *)((char *)v43 + a13);
                      }
                    }
                  }

                  ++v25;
                  uint64_t v18 = v150;
                }

                while (v147 > (unsigned __int16)v25);
              }

              ++v118;
            }

            while (v116 > (unsigned __int16)v118);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v153, &v152);
          unsigned int v61 = 1 << v152;
          char v62 = *((_BYTE *)a14 + 15);
          unsigned int v63 = 1 << v62;
          if (v62) {
            BOOL v64 = v63 > a3;
          }
          else {
            BOOL v64 = 1;
          }
          BOOL v65 = v64 || v63 > a4;
          int v66 = (~(-1 << v62) + a3) & (-1 << v62);
          if (v65) {
            int v67 = a3;
          }
          else {
            int v67 = v66;
          }
          unsigned int v117 = a8 >> v152;
          int v119 = 1 << v152;
          unsigned int v68 = v61 - 1;
          unsigned int v113 = a12 + a8;
          char v111 = v152;
          unsigned int v69 = (v61 - 1 + a12 + a8) >> v152;
          if (a8 >> v152 < v69)
          {
            unsigned int v107 = (v67 + ~(-1 << SLOBYTE(v153[0]))) >> SLOBYTE(v153[0]);
            unsigned int v70 = a7 >> SLOBYTE(v153[0]);
            char v142 = v153[0];
            unsigned int v137 = ((1 << SLOBYTE(v153[0])) - 1 + a11 + a7) >> SLOBYTE(v153[0]);
            int v132 = ((1 << SLOBYTE(v153[0])) - 1) & (a11 + a7);
            unsigned int v134 = a11 + a7;
            uint64_t v140 = ((1 << SLOBYTE(v153[0])) - 1) & a7;
            unsigned int v130 = (1 << SLOBYTE(v153[0])) - v140;
            int v103 = v68 & v113;
            unsigned int v71 = 1 << v152;
            uint64_t v105 = v68 & a8;
            unsigned int v101 = v61 - v105;
            int v136 = 1 << SLOBYTE(v153[0]);
            if (1 << SLOBYTE(v153[0]) >= a5) {
              unsigned int v72 = a5;
            }
            else {
              unsigned int v72 = 1 << SLOBYTE(v153[0]);
            }
            if (v61 >= a6) {
              unsigned int v71 = a6;
            }
            unsigned int v73 = 32 - __clz(v71 - 1);
            if (v71 < 2) {
              unsigned int v73 = 0;
            }
            unsigned int v74 = 32 - __clz(v72 - 1);
            if (v72 >= 2) {
              unsigned int v75 = v74;
            }
            else {
              unsigned int v75 = 0;
            }
            int v144 = v75;
            unsigned int v99 = ~(-1 << v75);
            int v146 = v73;
            unsigned int v98 = ~(-1 << v73);
            unsigned int v76 = a8 >> v152;
            unsigned int v115 = v15;
            unsigned int v109 = (v61 - 1 + a12 + a8) >> v152;
            unsigned int v128 = a7 >> SLOBYTE(v153[0]);
            do
            {
              if (v70 >= v137)
              {
                unsigned int v97 = v76 + 1;
              }

              else
              {
                unsigned int v148 = v76 << v111;
                unsigned int v121 = v76 + 1;
                if (v113 >= (v76 + 1) << v111) {
                  int v77 = v119;
                }
                else {
                  int v77 = v103;
                }
                if (v113 >= (v76 + 1) << v111) {
                  unsigned int v78 = v101;
                }
                else {
                  unsigned int v78 = v19;
                }
                int v126 = v76 * v107;
                uint64_t v79 = sub_34508(v99, 0, v144, v146);
                uint64_t v80 = sub_34508(0, v98, v144, v146);
                if (v148 >= a8) {
                  int v81 = v77;
                }
                else {
                  int v81 = v78;
                }
                if (v148 >= a8) {
                  unsigned int v82 = 0;
                }
                else {
                  unsigned int v82 = v105;
                }
                unsigned int v125 = v82;
                int8x16_t v123 = (char *)v15 + (v82 + ((v76 - v117) << v111) - v105) * a13;
                do
                {
                  unsigned int v83 = v70 << v142;
                  unsigned int v149 = v70 + 1;
                  unsigned int v84 = a11;
                  if (v134 >= (v70 + 1) << v142) {
                    unsigned int v84 = v130;
                  }
                  int v85 = v136;
                  if (v134 < (v70 + 1) << v142) {
                    int v85 = v132;
                  }
                  if (v83 >= a7) {
                    unsigned int v86 = 0;
                  }
                  else {
                    unsigned int v86 = v140;
                  }
                  if (v83 >= a7) {
                    unsigned int v87 = v85;
                  }
                  else {
                    unsigned int v87 = v84;
                  }
                  int v88 = a14[3];
                  int v89 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v86, 0, v144, v146);
                  if (v81)
                  {
                    uint64_t v90 = result;
                    uint64_t v91 = (v70 + v126) * v88 * v89 + v150;
                    uint64_t v92 = &v123[4 * (v86 + ((v70 - v128) << v142) - v140)];
                    unint64_t result = sub_34508(0, v125, v144, v146);
                    for (int k = 0; k != v81; ++k)
                    {
                      unsigned int v94 = v87;
                      unsigned __int16 v95 = v92;
                      for (uint64_t m = v90; v94; --v94)
                      {
                        *(_DWORD *)unsigned __int16 v95 = *(_DWORD *)(v91 + 4 * (m + result));
                        v95 += 4;
                        uint64_t m = (m - v79) & v79;
                      }

                      unint64_t result = (result - v80) & v80;
                      v92 += a13;
                    }
                  }

                  ++v70;
                }

                while (v149 != v137);
                BOOL v15 = v115;
                unsigned int v19 = a12;
                unsigned int v69 = v109;
                unsigned int v70 = v128;
                unsigned int v97 = v121;
              }

              unsigned int v76 = v97;
            }

            while (v97 != v69);
          }
        }
      }

      else
      {
        unsigned int v48 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v49 = v48;
        }
        else {
          int v49 = 0;
        }
        unsigned int v50 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v51 = v50;
        }
        else {
          int v51 = 0;
        }
        uint64_t v52 = sub_34508(~(-1 << v51), 0, v51, v49);
        uint64_t v53 = sub_34508(0, ~(-1 << v49), v51, v49);
        unint64_t result = sub_34508(a7, 0, v51, v49);
        if (a12)
        {
          uint64_t v54 = result;
          unint64_t result = sub_34508(0, a8, v51, v49);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v56 = a11;
            int v57 = v15;
            for (iint i = v54; v56; --v56)
            {
              *v57++ = *(_DWORD *)(v18 + 4 * (ii + result));
              iint i = (ii - v52) & v52;
            }

            unint64_t result = (result - v53) & v53;
            BOOL v15 = (_DWORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_406D0( uint64_t result, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    BOOL v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v150 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v153);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v152, &v151);
          unsigned int v116 = v154;
          if (v154)
          {
            int v118 = 0;
            char v112 = v152;
            unsigned int v108 = a7 >> v152;
            char v143 = v151;
            unsigned int v133 = a8 >> v151;
            unsigned int v147 = v155;
            unsigned int v106 = a11 + a7;
            int v102 = ((1 << v152) - 1) & a7;
            int v104 = ((1 << v152) - 1) & (a11 + a7);
            int v100 = (1 << v152) - v102;
            unsigned int v131 = a12 + a8;
            int v120 = ((1 << v151) - 1) & a8;
            int v127 = (1 << v151) - v120;
            int v129 = ((1 << v151) - 1) & (a12 + a8);
            int v110 = 1 << v152;
            if (1 << v152 >= a5) {
              unsigned int v20 = a5;
            }
            else {
              unsigned int v20 = 1 << v152;
            }
            int v135 = 1 << v151;
            if (1 << v151 >= a6) {
              unsigned int v21 = a6;
            }
            else {
              unsigned int v21 = 1 << v151;
            }
            unsigned int v22 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v22 = 0;
            }
            unsigned int v23 = 32 - __clz(v20 - 1);
            if (v20 >= 2) {
              int v24 = v23;
            }
            else {
              int v24 = 0;
            }
            int v141 = v22;
            unsigned int v124 = ~(-1 << v22);
            do
            {
              if (v147)
              {
                int v25 = 0;
                unsigned int v26 = (v118 + v108) << v112;
                unsigned int v27 = a11;
                if (v106 >= (v118 + v108 + 1) << v112) {
                  unsigned int v27 = v100;
                }
                int v28 = v110;
                if (v106 < (v118 + v108 + 1) << v112) {
                  int v28 = v104;
                }
                if (v26 >= a7) {
                  unsigned int v29 = v28;
                }
                else {
                  unsigned int v29 = v27;
                }
                unsigned int v30 = v102;
                if (v26 >= a7) {
                  unsigned int v30 = 0;
                }
                unsigned int v139 = v30;
                unsigned int v122 = &a2[v30 + (v118 << v112)];
                do
                {
                  LOWORD(v31) = v118;
                  HIWORD(v31) = v25;
                  unint64_t result = sub_34358(v153, v31);
                  int v32 = *(_DWORD *)(v18 + 4LL * result);
                  if (v32 < 0)
                  {
                    unint64_t v33 = v150 - *(void *)(a15 + 24) + ((unint64_t)(v32 & 0x3FFFFFF) << 14);
                    unsigned int v34 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v34) {
                      v33 += sub_343C0( *(_DWORD *)a15,  v34,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v35 = (v25 + v133) << v143;
                    unsigned int v36 = a12;
                    if (v131 >= (v25 + v133 + 1) << v143) {
                      unsigned int v36 = v127;
                    }
                    int v37 = v135;
                    if (v131 < (v25 + v133 + 1) << v143) {
                      int v37 = v129;
                    }
                    if (v35 >= a8) {
                      unsigned int v38 = v37;
                    }
                    else {
                      unsigned int v38 = v36;
                    }
                    uint64_t v39 = sub_34508(~(-1 << v24), 0, v24, v141);
                    uint64_t v40 = sub_34508(0, v124, v24, v141);
                    unint64_t result = sub_34508(v139, 0, v24, v141);
                    if (v38)
                    {
                      uint64_t v41 = result;
                      if (v35 >= a8) {
                        unsigned int v42 = 0;
                      }
                      else {
                        unsigned int v42 = v120;
                      }
                      uint64_t v43 = (void *)((char *)v122 + (v42 + (v25 << v143)) * a13);
                      unint64_t result = sub_34508(0, v42, v24, v141);
                      for (int i = 0; i != v38; ++i)
                      {
                        unsigned int v45 = v29;
                        char v46 = v43;
                        for (uint64_t j = v41; v45; --v45)
                        {
                          *v46++ = *(void *)(v33 + 8 * (j + result));
                          uint64_t j = (j - v39) & v39;
                        }

                        unint64_t result = (result - v40) & v40;
                        uint64_t v43 = (void *)((char *)v43 + a13);
                      }
                    }
                  }

                  ++v25;
                  uint64_t v18 = v150;
                }

                while (v147 > (unsigned __int16)v25);
              }

              ++v118;
            }

            while (v116 > (unsigned __int16)v118);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v153, &v152);
          unsigned int v61 = 1 << v152;
          char v62 = *((_BYTE *)a14 + 15);
          unsigned int v63 = 1 << v62;
          if (v62) {
            BOOL v64 = v63 > a3;
          }
          else {
            BOOL v64 = 1;
          }
          BOOL v65 = v64 || v63 > a4;
          int v66 = (~(-1 << v62) + a3) & (-1 << v62);
          if (v65) {
            int v67 = a3;
          }
          else {
            int v67 = v66;
          }
          unsigned int v117 = a8 >> v152;
          int v119 = 1 << v152;
          unsigned int v68 = v61 - 1;
          unsigned int v113 = a12 + a8;
          char v111 = v152;
          unsigned int v69 = (v61 - 1 + a12 + a8) >> v152;
          if (a8 >> v152 < v69)
          {
            unsigned int v107 = (v67 + ~(-1 << SLOBYTE(v153[0]))) >> SLOBYTE(v153[0]);
            unsigned int v70 = a7 >> SLOBYTE(v153[0]);
            char v142 = v153[0];
            unsigned int v137 = ((1 << SLOBYTE(v153[0])) - 1 + a11 + a7) >> SLOBYTE(v153[0]);
            int v132 = ((1 << SLOBYTE(v153[0])) - 1) & (a11 + a7);
            unsigned int v134 = a11 + a7;
            uint64_t v140 = ((1 << SLOBYTE(v153[0])) - 1) & a7;
            unsigned int v130 = (1 << SLOBYTE(v153[0])) - v140;
            int v103 = v68 & v113;
            unsigned int v71 = 1 << v152;
            uint64_t v105 = v68 & a8;
            unsigned int v101 = v61 - v105;
            int v136 = 1 << SLOBYTE(v153[0]);
            if (1 << SLOBYTE(v153[0]) >= a5) {
              unsigned int v72 = a5;
            }
            else {
              unsigned int v72 = 1 << SLOBYTE(v153[0]);
            }
            if (v61 >= a6) {
              unsigned int v71 = a6;
            }
            unsigned int v73 = 32 - __clz(v71 - 1);
            if (v71 < 2) {
              unsigned int v73 = 0;
            }
            unsigned int v74 = 32 - __clz(v72 - 1);
            if (v72 >= 2) {
              unsigned int v75 = v74;
            }
            else {
              unsigned int v75 = 0;
            }
            int v144 = v75;
            unsigned int v99 = ~(-1 << v75);
            int v146 = v73;
            unsigned int v98 = ~(-1 << v73);
            unsigned int v76 = a8 >> v152;
            unsigned int v115 = v15;
            unsigned int v109 = (v61 - 1 + a12 + a8) >> v152;
            unsigned int v128 = a7 >> SLOBYTE(v153[0]);
            do
            {
              if (v70 >= v137)
              {
                unsigned int v97 = v76 + 1;
              }

              else
              {
                unsigned int v148 = v76 << v111;
                unsigned int v121 = v76 + 1;
                if (v113 >= (v76 + 1) << v111) {
                  int v77 = v119;
                }
                else {
                  int v77 = v103;
                }
                if (v113 >= (v76 + 1) << v111) {
                  unsigned int v78 = v101;
                }
                else {
                  unsigned int v78 = v19;
                }
                int v126 = v76 * v107;
                uint64_t v79 = sub_34508(v99, 0, v144, v146);
                uint64_t v80 = sub_34508(0, v98, v144, v146);
                if (v148 >= a8) {
                  int v81 = v77;
                }
                else {
                  int v81 = v78;
                }
                if (v148 >= a8) {
                  unsigned int v82 = 0;
                }
                else {
                  unsigned int v82 = v105;
                }
                unsigned int v125 = v82;
                int8x16_t v123 = (char *)v15 + (v82 + ((v76 - v117) << v111) - v105) * a13;
                do
                {
                  unsigned int v83 = v70 << v142;
                  unsigned int v149 = v70 + 1;
                  unsigned int v84 = a11;
                  if (v134 >= (v70 + 1) << v142) {
                    unsigned int v84 = v130;
                  }
                  int v85 = v136;
                  if (v134 < (v70 + 1) << v142) {
                    int v85 = v132;
                  }
                  if (v83 >= a7) {
                    unsigned int v86 = 0;
                  }
                  else {
                    unsigned int v86 = v140;
                  }
                  if (v83 >= a7) {
                    unsigned int v87 = v85;
                  }
                  else {
                    unsigned int v87 = v84;
                  }
                  int v88 = a14[3];
                  int v89 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v86, 0, v144, v146);
                  if (v81)
                  {
                    uint64_t v90 = result;
                    uint64_t v91 = (v70 + v126) * v88 * v89 + v150;
                    uint64_t v92 = &v123[8 * (v86 + ((v70 - v128) << v142) - v140)];
                    unint64_t result = sub_34508(0, v125, v144, v146);
                    for (int k = 0; k != v81; ++k)
                    {
                      unsigned int v94 = v87;
                      unsigned __int16 v95 = v92;
                      for (uint64_t m = v90; v94; --v94)
                      {
                        *(void *)unsigned __int16 v95 = *(void *)(v91 + 8 * (m + result));
                        v95 += 8;
                        uint64_t m = (m - v79) & v79;
                      }

                      unint64_t result = (result - v80) & v80;
                      v92 += a13;
                    }
                  }

                  ++v70;
                }

                while (v149 != v137);
                BOOL v15 = v115;
                unsigned int v19 = a12;
                unsigned int v69 = v109;
                unsigned int v70 = v128;
                unsigned int v97 = v121;
              }

              unsigned int v76 = v97;
            }

            while (v97 != v69);
          }
        }
      }

      else
      {
        unsigned int v48 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v49 = v48;
        }
        else {
          int v49 = 0;
        }
        unsigned int v50 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v51 = v50;
        }
        else {
          int v51 = 0;
        }
        uint64_t v52 = sub_34508(~(-1 << v51), 0, v51, v49);
        uint64_t v53 = sub_34508(0, ~(-1 << v49), v51, v49);
        unint64_t result = sub_34508(a7, 0, v51, v49);
        if (a12)
        {
          uint64_t v54 = result;
          unint64_t result = sub_34508(0, a8, v51, v49);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v56 = a11;
            int v57 = v15;
            for (iint i = v54; v56; --v56)
            {
              *v57++ = *(void *)(v18 + 8 * (ii + result));
              iint i = (ii - v52) & v52;
            }

            unint64_t result = (result - v53) & v53;
            BOOL v15 = (void *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_40F40( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  uint64_t v148 = result;
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      unsigned int v18 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v151);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v150, &v149);
          unsigned int v115 = v152;
          if (v152)
          {
            int v117 = 0;
            char v111 = v150;
            unsigned int v107 = a7 >> v150;
            char v142 = v149;
            unsigned int v132 = a8 >> v149;
            unsigned int v146 = v153;
            unsigned int v105 = a11 + a7;
            int v101 = ((1 << v150) - 1) & a7;
            int v103 = ((1 << v150) - 1) & (a11 + a7);
            int v99 = (1 << v150) - v101;
            unsigned int v130 = a12 + a8;
            int v119 = ((1 << v149) - 1) & a8;
            int v126 = (1 << v149) - v119;
            int v128 = ((1 << v149) - 1) & (a12 + a8);
            int v109 = 1 << v150;
            if (1 << v150 >= a5) {
              unsigned int v19 = a5;
            }
            else {
              unsigned int v19 = 1 << v150;
            }
            int v134 = 1 << v149;
            if (1 << v149 >= a6) {
              unsigned int v20 = a6;
            }
            else {
              unsigned int v20 = 1 << v149;
            }
            unsigned int v21 = 32 - __clz(v20 - 1);
            if (v20 < 2) {
              unsigned int v21 = 0;
            }
            unsigned int v22 = 32 - __clz(v19 - 1);
            if (v19 >= 2) {
              int v23 = v22;
            }
            else {
              int v23 = 0;
            }
            int v140 = v21;
            unsigned int v123 = ~(-1 << v21);
            do
            {
              if (v146)
              {
                int v24 = 0;
                unsigned int v25 = (v117 + v107) << v111;
                if (v105 >= (v117 + v107 + 1) << v111) {
                  unsigned int v26 = v99;
                }
                else {
                  unsigned int v26 = a11;
                }
                int v27 = v109;
                if (v105 < (v117 + v107 + 1) << v111) {
                  int v27 = v103;
                }
                if (v25 >= a7) {
                  unsigned int v28 = v27;
                }
                else {
                  unsigned int v28 = v26;
                }
                unsigned int v29 = v101;
                if (v25 >= a7) {
                  unsigned int v29 = 0;
                }
                unsigned int v137 = v29;
                uint64_t v121 = v29 + (v117 << v111) + a2;
                do
                {
                  LOWORD(v30) = v117;
                  HIWORD(v30) = v24;
                  unint64_t result = sub_34358(v151, v30);
                  int v31 = *(_DWORD *)(v148 + 4LL * result);
                  if (v31 < 0)
                  {
                    unint64_t v32 = v148 - *(void *)(a15 + 24) + ((unint64_t)(v31 & 0x3FFFFFF) << 14);
                    unsigned int v33 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v33) {
                      v32 += sub_343C0( *(_DWORD *)a15,  v33,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v34 = (v24 + v132) << v142;
                    unsigned int v35 = a12;
                    if (v130 >= (v24 + v132 + 1) << v142) {
                      unsigned int v35 = v126;
                    }
                    int v36 = v134;
                    if (v130 < (v24 + v132 + 1) << v142) {
                      int v36 = v128;
                    }
                    if (v34 >= a8) {
                      unsigned int v37 = v36;
                    }
                    else {
                      unsigned int v37 = v35;
                    }
                    uint64_t v38 = sub_34508(~(-1 << v23), 0, v23, v140);
                    uint64_t v39 = sub_34508(0, v123, v23, v140);
                    unint64_t result = sub_34508(v137, 0, v23, v140);
                    if (v37)
                    {
                      uint64_t v40 = result;
                      if (v34 >= a8) {
                        unsigned int v41 = 0;
                      }
                      else {
                        unsigned int v41 = v119;
                      }
                      uint64_t v42 = v121 + (v41 + (v24 << v142)) * a13;
                      unint64_t result = sub_34508(0, v41, v23, v140);
                      for (int i = 0; i != v37; ++i)
                      {
                        if (v28)
                        {
                          uint64_t v44 = 0LL;
                          uint64_t v45 = v40;
                          do
                          {
                            *(_BYTE *)(v42 + v44) = *(_BYTE *)(result + v32 + v45);
                            uint64_t v45 = (v45 - v38) & v38;
                            ++v44;
                          }

                          while (v28 != (_DWORD)v44);
                        }

                        unint64_t result = (result - v39) & v39;
                        v42 += a13;
                      }
                    }
                  }

                  ++v24;
                }

                while (v146 > (unsigned __int16)v24);
              }

              ++v117;
            }

            while (v115 > (unsigned __int16)v117);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v151, &v150);
          unsigned int v58 = 1 << v150;
          char v59 = *((_BYTE *)a14 + 15);
          unsigned int v60 = 1 << v59;
          if (v59) {
            BOOL v61 = v60 > a3;
          }
          else {
            BOOL v61 = 1;
          }
          BOOL v62 = v61 || v60 > a4;
          int v63 = (~(-1 << v59) + a3) & (-1 << v59);
          if (v62) {
            int v64 = a3;
          }
          else {
            int v64 = v63;
          }
          int v116 = 1 << v150;
          unsigned int v65 = v58 - 1;
          unsigned int v112 = a12 + a8;
          char v110 = v150;
          unsigned int v66 = (v58 - 1 + a12 + a8) >> v150;
          unsigned int v114 = a8 >> v150;
          if (a8 >> v150 < v66)
          {
            unsigned int v106 = (v64 + ~(-1 << SLOBYTE(v151[0]))) >> SLOBYTE(v151[0]);
            char v141 = v151[0];
            unsigned int v138 = ((1 << SLOBYTE(v151[0])) - 1 + a11 + a7) >> SLOBYTE(v151[0]);
            unsigned int v67 = ((1 << SLOBYTE(v151[0])) - 1) & a7;
            uint64_t v68 = v65 & a8;
            unsigned int v135 = a11 + a7;
            int v136 = 1 << SLOBYTE(v151[0]);
            int v131 = ((1 << SLOBYTE(v151[0])) - 1) & (a11 + a7);
            unsigned int v129 = (1 << SLOBYTE(v151[0])) - v67;
            int v102 = v65 & v112;
            unsigned int v69 = 1 << v150;
            uint64_t v104 = v68;
            unsigned int v100 = v58 - v68;
            if (1 << SLOBYTE(v151[0]) >= a5) {
              unsigned int v70 = a5;
            }
            else {
              unsigned int v70 = 1 << SLOBYTE(v151[0]);
            }
            if (v58 >= a6) {
              unsigned int v69 = a6;
            }
            unsigned int v71 = 32 - __clz(v69 - 1);
            if (v69 < 2) {
              unsigned int v71 = 0;
            }
            unsigned int v72 = 32 - __clz(v70 - 1);
            if (v70 >= 2) {
              unsigned int v73 = v72;
            }
            else {
              unsigned int v73 = 0;
            }
            int v143 = v73;
            unsigned int v98 = ~(-1 << v73);
            int v145 = v71;
            unsigned int v97 = ~(-1 << v71);
            int v133 = ((1 << SLOBYTE(v151[0])) - 1) & a7;
            uint64_t v120 = v15 - v67;
            unsigned int v74 = a7 >> SLOBYTE(v151[0]);
            unsigned int v75 = a8 >> v150;
            unsigned int v108 = (v58 - 1 + a12 + a8) >> v150;
            unsigned int v127 = a7 >> SLOBYTE(v151[0]);
            do
            {
              if (v74 >= v138)
              {
                unsigned int v96 = v75 + 1;
              }

              else
              {
                unsigned int v76 = v75 << v110;
                unsigned int v118 = v75 + 1;
                if (v112 >= (v75 + 1) << v110) {
                  int v77 = v116;
                }
                else {
                  int v77 = v102;
                }
                if (v112 >= (v75 + 1) << v110) {
                  unsigned int v78 = v100;
                }
                else {
                  unsigned int v78 = v18;
                }
                int v125 = v75 * v106;
                uint64_t v79 = sub_34508(v98, 0, v143, v145);
                uint64_t v80 = sub_34508(0, v97, v143, v145);
                if (v76 >= a8) {
                  int v81 = v77;
                }
                else {
                  int v81 = v78;
                }
                if (v76 >= a8) {
                  unsigned int v82 = 0;
                }
                else {
                  unsigned int v82 = v104;
                }
                unsigned int v124 = v82;
                uint64_t v122 = (v82 + ((v75 - v114) << v110) - v104) * a13;
                do
                {
                  unsigned int v83 = v74 << v141;
                  unsigned int v147 = v74 + 1;
                  if (v135 >= (v74 + 1) << v141) {
                    unsigned int v84 = v129;
                  }
                  else {
                    unsigned int v84 = a11;
                  }
                  int v85 = v136;
                  if (v135 < (v74 + 1) << v141) {
                    int v85 = v131;
                  }
                  if (v83 >= a7) {
                    unsigned int v86 = 0;
                  }
                  else {
                    unsigned int v86 = v133;
                  }
                  if (v83 >= a7) {
                    unsigned int v87 = v85;
                  }
                  else {
                    unsigned int v87 = v84;
                  }
                  int v88 = a14[3];
                  int v89 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v86, 0, v143, v145);
                  if (v81)
                  {
                    uint64_t v90 = result;
                    uint64_t v91 = (v74 + v125) * v88 * v89 + v148;
                    uint64_t v92 = v120 + v122 + v86 + ((v74 - v127) << v141);
                    unint64_t result = sub_34508(0, v124, v143, v145);
                    for (int j = 0; j != v81; ++j)
                    {
                      if (v87)
                      {
                        uint64_t v94 = 0LL;
                        uint64_t v95 = v90;
                        do
                        {
                          *(_BYTE *)(v92 + v94) = *(_BYTE *)(v91 + result + v95);
                          uint64_t v95 = (v95 - v79) & v79;
                          ++v94;
                        }

                        while (v87 != (_DWORD)v94);
                      }

                      unint64_t result = (result - v80) & v80;
                      v92 += a13;
                    }
                  }

                  ++v74;
                }

                while (v147 != v138);
                unsigned int v18 = a12;
                unsigned int v66 = v108;
                unsigned int v74 = v127;
                unsigned int v96 = v118;
              }

              unsigned int v75 = v96;
            }

            while (v96 != v66);
          }
        }
      }

      else
      {
        unsigned int v46 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v47 = v46;
        }
        else {
          int v47 = 0;
        }
        unsigned int v48 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v49 = v48;
        }
        else {
          int v49 = 0;
        }
        uint64_t v50 = sub_34508(~(-1 << v49), 0, v49, v47);
        uint64_t v51 = sub_34508(0, ~(-1 << v47), v49, v47);
        unint64_t result = sub_34508(a7, 0, v49, v47);
        if (a12)
        {
          uint64_t v52 = result;
          unint64_t result = sub_34508(0, a8, v49, v47);
          for (int k = 0; k != a12; ++k)
          {
            if (a11)
            {
              uint64_t v54 = 0LL;
              uint64_t v55 = v52;
              do
              {
                *(_BYTE *)(v15 + v54) = *(_BYTE *)(result + v148 + v55);
                uint64_t v55 = (v55 - v50) & v50;
                ++v54;
              }

              while (a11 != (_DWORD)v54);
            }

            unint64_t result = (result - v51) & v51;
            v15 += a13;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_417A4( uint64_t a1, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_43134(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_417C0( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v150 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v153);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v152, &v151);
          unsigned int v116 = v154;
          if (v154)
          {
            int v118 = 0;
            char v112 = v152;
            unsigned int v108 = a7 >> v152;
            char v143 = v151;
            unsigned int v133 = a8 >> v151;
            unsigned int v147 = v155;
            unsigned int v106 = a11 + a7;
            int v102 = ((1 << v152) - 1) & a7;
            int v104 = ((1 << v152) - 1) & (a11 + a7);
            int v100 = (1 << v152) - v102;
            unsigned int v131 = a12 + a8;
            int v120 = ((1 << v151) - 1) & a8;
            int v127 = (1 << v151) - v120;
            int v129 = ((1 << v151) - 1) & (a12 + a8);
            int v110 = 1 << v152;
            if (1 << v152 >= a5) {
              unsigned int v20 = a5;
            }
            else {
              unsigned int v20 = 1 << v152;
            }
            int v135 = 1 << v151;
            if (1 << v151 >= a6) {
              unsigned int v21 = a6;
            }
            else {
              unsigned int v21 = 1 << v151;
            }
            unsigned int v22 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v22 = 0;
            }
            unsigned int v23 = 32 - __clz(v20 - 1);
            if (v20 >= 2) {
              int v24 = v23;
            }
            else {
              int v24 = 0;
            }
            int v141 = v22;
            unsigned int v124 = ~(-1 << v22);
            do
            {
              if (v147)
              {
                int v25 = 0;
                unsigned int v26 = (v118 + v108) << v112;
                unsigned int v27 = a11;
                if (v106 >= (v118 + v108 + 1) << v112) {
                  unsigned int v27 = v100;
                }
                int v28 = v110;
                if (v106 < (v118 + v108 + 1) << v112) {
                  int v28 = v104;
                }
                if (v26 >= a7) {
                  unsigned int v29 = v28;
                }
                else {
                  unsigned int v29 = v27;
                }
                unsigned int v30 = v102;
                if (v26 >= a7) {
                  unsigned int v30 = 0;
                }
                unsigned int v139 = v30;
                uint64_t v122 = &a2[v30 + (v118 << v112)];
                do
                {
                  LOWORD(v31) = v118;
                  HIWORD(v31) = v25;
                  unint64_t result = sub_34358(v153, v31);
                  int v32 = *(_DWORD *)(v18 + 4LL * result);
                  if (v32 < 0)
                  {
                    unint64_t v33 = v150 - *(void *)(a15 + 24) + ((unint64_t)(v32 & 0x3FFFFFF) << 14);
                    unsigned int v34 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v34) {
                      v33 += sub_343C0( *(_DWORD *)a15,  v34,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v35 = (v25 + v133) << v143;
                    unsigned int v36 = a12;
                    if (v131 >= (v25 + v133 + 1) << v143) {
                      unsigned int v36 = v127;
                    }
                    int v37 = v135;
                    if (v131 < (v25 + v133 + 1) << v143) {
                      int v37 = v129;
                    }
                    if (v35 >= a8) {
                      unsigned int v38 = v37;
                    }
                    else {
                      unsigned int v38 = v36;
                    }
                    uint64_t v39 = sub_34508(~(-1 << v24), 0, v24, v141);
                    uint64_t v40 = sub_34508(0, v124, v24, v141);
                    unint64_t result = sub_34508(v139, 0, v24, v141);
                    if (v38)
                    {
                      uint64_t v41 = result;
                      if (v35 >= a8) {
                        unsigned int v42 = 0;
                      }
                      else {
                        unsigned int v42 = v120;
                      }
                      uint64_t v43 = (_DWORD *)((char *)v122 + (v42 + (v25 << v143)) * a13);
                      unint64_t result = sub_34508(0, v42, v24, v141);
                      for (int i = 0; i != v38; ++i)
                      {
                        unsigned int v45 = v29;
                        unsigned int v46 = v43;
                        for (uint64_t j = v41; v45; --v45)
                        {
                          *v46++ = *(_DWORD *)(v33 + 4 * (j + result));
                          uint64_t j = (j - v39) & v39;
                        }

                        unint64_t result = (result - v40) & v40;
                        uint64_t v43 = (_DWORD *)((char *)v43 + a13);
                      }
                    }
                  }

                  ++v25;
                  uint64_t v18 = v150;
                }

                while (v147 > (unsigned __int16)v25);
              }

              ++v118;
            }

            while (v116 > (unsigned __int16)v118);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v153, &v152);
          unsigned int v61 = 1 << v152;
          char v62 = *((_BYTE *)a14 + 15);
          unsigned int v63 = 1 << v62;
          if (v62) {
            BOOL v64 = v63 > a3;
          }
          else {
            BOOL v64 = 1;
          }
          BOOL v65 = v64 || v63 > a4;
          int v66 = (~(-1 << v62) + a3) & (-1 << v62);
          if (v65) {
            int v67 = a3;
          }
          else {
            int v67 = v66;
          }
          unsigned int v117 = a8 >> v152;
          int v119 = 1 << v152;
          unsigned int v68 = v61 - 1;
          unsigned int v113 = a12 + a8;
          char v111 = v152;
          unsigned int v69 = (v61 - 1 + a12 + a8) >> v152;
          if (a8 >> v152 < v69)
          {
            unsigned int v107 = (v67 + ~(-1 << SLOBYTE(v153[0]))) >> SLOBYTE(v153[0]);
            unsigned int v70 = a7 >> SLOBYTE(v153[0]);
            char v142 = v153[0];
            unsigned int v137 = ((1 << SLOBYTE(v153[0])) - 1 + a11 + a7) >> SLOBYTE(v153[0]);
            int v132 = ((1 << SLOBYTE(v153[0])) - 1) & (a11 + a7);
            unsigned int v134 = a11 + a7;
            uint64_t v140 = ((1 << SLOBYTE(v153[0])) - 1) & a7;
            unsigned int v130 = (1 << SLOBYTE(v153[0])) - v140;
            int v103 = v68 & v113;
            unsigned int v71 = 1 << v152;
            uint64_t v105 = v68 & a8;
            unsigned int v101 = v61 - v105;
            int v136 = 1 << SLOBYTE(v153[0]);
            if (1 << SLOBYTE(v153[0]) >= a5) {
              unsigned int v72 = a5;
            }
            else {
              unsigned int v72 = 1 << SLOBYTE(v153[0]);
            }
            if (v61 >= a6) {
              unsigned int v71 = a6;
            }
            unsigned int v73 = 32 - __clz(v71 - 1);
            if (v71 < 2) {
              unsigned int v73 = 0;
            }
            unsigned int v74 = 32 - __clz(v72 - 1);
            if (v72 >= 2) {
              unsigned int v75 = v74;
            }
            else {
              unsigned int v75 = 0;
            }
            int v144 = v75;
            unsigned int v99 = ~(-1 << v75);
            int v146 = v73;
            unsigned int v98 = ~(-1 << v73);
            unsigned int v76 = a8 >> v152;
            unsigned int v115 = v15;
            unsigned int v109 = (v61 - 1 + a12 + a8) >> v152;
            unsigned int v128 = a7 >> SLOBYTE(v153[0]);
            do
            {
              if (v70 >= v137)
              {
                unsigned int v97 = v76 + 1;
              }

              else
              {
                unsigned int v148 = v76 << v111;
                unsigned int v121 = v76 + 1;
                if (v113 >= (v76 + 1) << v111) {
                  int v77 = v119;
                }
                else {
                  int v77 = v103;
                }
                if (v113 >= (v76 + 1) << v111) {
                  unsigned int v78 = v101;
                }
                else {
                  unsigned int v78 = v19;
                }
                int v126 = v76 * v107;
                uint64_t v79 = sub_34508(v99, 0, v144, v146);
                uint64_t v80 = sub_34508(0, v98, v144, v146);
                if (v148 >= a8) {
                  int v81 = v77;
                }
                else {
                  int v81 = v78;
                }
                if (v148 >= a8) {
                  unsigned int v82 = 0;
                }
                else {
                  unsigned int v82 = v105;
                }
                unsigned int v125 = v82;
                unsigned int v123 = (char *)v15 + (v82 + ((v76 - v117) << v111) - v105) * a13;
                do
                {
                  unsigned int v83 = v70 << v142;
                  unsigned int v149 = v70 + 1;
                  unsigned int v84 = a11;
                  if (v134 >= (v70 + 1) << v142) {
                    unsigned int v84 = v130;
                  }
                  int v85 = v136;
                  if (v134 < (v70 + 1) << v142) {
                    int v85 = v132;
                  }
                  if (v83 >= a7) {
                    unsigned int v86 = 0;
                  }
                  else {
                    unsigned int v86 = v140;
                  }
                  if (v83 >= a7) {
                    unsigned int v87 = v85;
                  }
                  else {
                    unsigned int v87 = v84;
                  }
                  int v88 = a14[3];
                  int v89 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v86, 0, v144, v146);
                  if (v81)
                  {
                    uint64_t v90 = result;
                    uint64_t v91 = (v70 + v126) * v88 * v89 + v150;
                    uint64_t v92 = &v123[4 * (v86 + ((v70 - v128) << v142) - v140)];
                    unint64_t result = sub_34508(0, v125, v144, v146);
                    for (int k = 0; k != v81; ++k)
                    {
                      unsigned int v94 = v87;
                      uint64_t v95 = v92;
                      for (uint64_t m = v90; v94; --v94)
                      {
                        *(_DWORD *)uint64_t v95 = *(_DWORD *)(v91 + 4 * (m + result));
                        v95 += 4;
                        uint64_t m = (m - v79) & v79;
                      }

                      unint64_t result = (result - v80) & v80;
                      v92 += a13;
                    }
                  }

                  ++v70;
                }

                while (v149 != v137);
                uint64_t v15 = v115;
                unsigned int v19 = a12;
                unsigned int v69 = v109;
                unsigned int v70 = v128;
                unsigned int v97 = v121;
              }

              unsigned int v76 = v97;
            }

            while (v97 != v69);
          }
        }
      }

      else
      {
        unsigned int v48 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v49 = v48;
        }
        else {
          int v49 = 0;
        }
        unsigned int v50 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v51 = v50;
        }
        else {
          int v51 = 0;
        }
        uint64_t v52 = sub_34508(~(-1 << v51), 0, v51, v49);
        uint64_t v53 = sub_34508(0, ~(-1 << v49), v51, v49);
        unint64_t result = sub_34508(a7, 0, v51, v49);
        if (a12)
        {
          uint64_t v54 = result;
          unint64_t result = sub_34508(0, a8, v51, v49);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v56 = a11;
            int v57 = v15;
            for (iint i = v54; v56; --v56)
            {
              *v57++ = *(_DWORD *)(v18 + 4 * (ii + result));
              iint i = (ii - v52) & v52;
            }

            unint64_t result = (result - v53) & v53;
            uint64_t v15 = (_DWORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_42030( uint64_t result, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v150 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v153);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v152, &v151);
          unsigned int v116 = v154;
          if (v154)
          {
            int v118 = 0;
            char v112 = v152;
            unsigned int v108 = a7 >> v152;
            char v143 = v151;
            unsigned int v133 = a8 >> v151;
            unsigned int v147 = v155;
            unsigned int v106 = a11 + a7;
            int v102 = ((1 << v152) - 1) & a7;
            int v104 = ((1 << v152) - 1) & (a11 + a7);
            int v100 = (1 << v152) - v102;
            unsigned int v131 = a12 + a8;
            int v120 = ((1 << v151) - 1) & a8;
            int v127 = (1 << v151) - v120;
            int v129 = ((1 << v151) - 1) & (a12 + a8);
            int v110 = 1 << v152;
            if (1 << v152 >= a5) {
              unsigned int v20 = a5;
            }
            else {
              unsigned int v20 = 1 << v152;
            }
            int v135 = 1 << v151;
            if (1 << v151 >= a6) {
              unsigned int v21 = a6;
            }
            else {
              unsigned int v21 = 1 << v151;
            }
            unsigned int v22 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v22 = 0;
            }
            unsigned int v23 = 32 - __clz(v20 - 1);
            if (v20 >= 2) {
              int v24 = v23;
            }
            else {
              int v24 = 0;
            }
            int v141 = v22;
            unsigned int v124 = ~(-1 << v22);
            do
            {
              if (v147)
              {
                int v25 = 0;
                unsigned int v26 = (v118 + v108) << v112;
                unsigned int v27 = a11;
                if (v106 >= (v118 + v108 + 1) << v112) {
                  unsigned int v27 = v100;
                }
                int v28 = v110;
                if (v106 < (v118 + v108 + 1) << v112) {
                  int v28 = v104;
                }
                if (v26 >= a7) {
                  unsigned int v29 = v28;
                }
                else {
                  unsigned int v29 = v27;
                }
                unsigned int v30 = v102;
                if (v26 >= a7) {
                  unsigned int v30 = 0;
                }
                unsigned int v139 = v30;
                uint64_t v122 = &a2[v30 + (v118 << v112)];
                do
                {
                  LOWORD(v31) = v118;
                  HIWORD(v31) = v25;
                  unint64_t result = sub_34358(v153, v31);
                  int v32 = *(_DWORD *)(v18 + 4LL * result);
                  if (v32 < 0)
                  {
                    unint64_t v33 = v150 - *(void *)(a15 + 24) + ((unint64_t)(v32 & 0x3FFFFFF) << 14);
                    unsigned int v34 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v34) {
                      v33 += sub_343C0( *(_DWORD *)a15,  v34,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v35 = (v25 + v133) << v143;
                    unsigned int v36 = a12;
                    if (v131 >= (v25 + v133 + 1) << v143) {
                      unsigned int v36 = v127;
                    }
                    int v37 = v135;
                    if (v131 < (v25 + v133 + 1) << v143) {
                      int v37 = v129;
                    }
                    if (v35 >= a8) {
                      unsigned int v38 = v37;
                    }
                    else {
                      unsigned int v38 = v36;
                    }
                    uint64_t v39 = sub_34508(~(-1 << v24), 0, v24, v141);
                    uint64_t v40 = sub_34508(0, v124, v24, v141);
                    unint64_t result = sub_34508(v139, 0, v24, v141);
                    if (v38)
                    {
                      uint64_t v41 = result;
                      if (v35 >= a8) {
                        unsigned int v42 = 0;
                      }
                      else {
                        unsigned int v42 = v120;
                      }
                      uint64_t v43 = (void *)((char *)v122 + (v42 + (v25 << v143)) * a13);
                      unint64_t result = sub_34508(0, v42, v24, v141);
                      for (int i = 0; i != v38; ++i)
                      {
                        unsigned int v45 = v29;
                        unsigned int v46 = v43;
                        for (uint64_t j = v41; v45; --v45)
                        {
                          *v46++ = *(void *)(v33 + 8 * (j + result));
                          uint64_t j = (j - v39) & v39;
                        }

                        unint64_t result = (result - v40) & v40;
                        uint64_t v43 = (void *)((char *)v43 + a13);
                      }
                    }
                  }

                  ++v25;
                  uint64_t v18 = v150;
                }

                while (v147 > (unsigned __int16)v25);
              }

              ++v118;
            }

            while (v116 > (unsigned __int16)v118);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v153, &v152);
          unsigned int v61 = 1 << v152;
          char v62 = *((_BYTE *)a14 + 15);
          unsigned int v63 = 1 << v62;
          if (v62) {
            BOOL v64 = v63 > a3;
          }
          else {
            BOOL v64 = 1;
          }
          BOOL v65 = v64 || v63 > a4;
          int v66 = (~(-1 << v62) + a3) & (-1 << v62);
          if (v65) {
            int v67 = a3;
          }
          else {
            int v67 = v66;
          }
          unsigned int v117 = a8 >> v152;
          int v119 = 1 << v152;
          unsigned int v68 = v61 - 1;
          unsigned int v113 = a12 + a8;
          char v111 = v152;
          unsigned int v69 = (v61 - 1 + a12 + a8) >> v152;
          if (a8 >> v152 < v69)
          {
            unsigned int v107 = (v67 + ~(-1 << SLOBYTE(v153[0]))) >> SLOBYTE(v153[0]);
            unsigned int v70 = a7 >> SLOBYTE(v153[0]);
            char v142 = v153[0];
            unsigned int v137 = ((1 << SLOBYTE(v153[0])) - 1 + a11 + a7) >> SLOBYTE(v153[0]);
            int v132 = ((1 << SLOBYTE(v153[0])) - 1) & (a11 + a7);
            unsigned int v134 = a11 + a7;
            uint64_t v140 = ((1 << SLOBYTE(v153[0])) - 1) & a7;
            unsigned int v130 = (1 << SLOBYTE(v153[0])) - v140;
            int v103 = v68 & v113;
            unsigned int v71 = 1 << v152;
            uint64_t v105 = v68 & a8;
            unsigned int v101 = v61 - v105;
            int v136 = 1 << SLOBYTE(v153[0]);
            if (1 << SLOBYTE(v153[0]) >= a5) {
              unsigned int v72 = a5;
            }
            else {
              unsigned int v72 = 1 << SLOBYTE(v153[0]);
            }
            if (v61 >= a6) {
              unsigned int v71 = a6;
            }
            unsigned int v73 = 32 - __clz(v71 - 1);
            if (v71 < 2) {
              unsigned int v73 = 0;
            }
            unsigned int v74 = 32 - __clz(v72 - 1);
            if (v72 >= 2) {
              unsigned int v75 = v74;
            }
            else {
              unsigned int v75 = 0;
            }
            int v144 = v75;
            unsigned int v99 = ~(-1 << v75);
            int v146 = v73;
            unsigned int v98 = ~(-1 << v73);
            unsigned int v76 = a8 >> v152;
            unsigned int v115 = v15;
            unsigned int v109 = (v61 - 1 + a12 + a8) >> v152;
            unsigned int v128 = a7 >> SLOBYTE(v153[0]);
            do
            {
              if (v70 >= v137)
              {
                unsigned int v97 = v76 + 1;
              }

              else
              {
                unsigned int v148 = v76 << v111;
                unsigned int v121 = v76 + 1;
                if (v113 >= (v76 + 1) << v111) {
                  int v77 = v119;
                }
                else {
                  int v77 = v103;
                }
                if (v113 >= (v76 + 1) << v111) {
                  unsigned int v78 = v101;
                }
                else {
                  unsigned int v78 = v19;
                }
                int v126 = v76 * v107;
                uint64_t v79 = sub_34508(v99, 0, v144, v146);
                uint64_t v80 = sub_34508(0, v98, v144, v146);
                if (v148 >= a8) {
                  int v81 = v77;
                }
                else {
                  int v81 = v78;
                }
                if (v148 >= a8) {
                  unsigned int v82 = 0;
                }
                else {
                  unsigned int v82 = v105;
                }
                unsigned int v125 = v82;
                unsigned int v123 = (char *)v15 + (v82 + ((v76 - v117) << v111) - v105) * a13;
                do
                {
                  unsigned int v83 = v70 << v142;
                  unsigned int v149 = v70 + 1;
                  unsigned int v84 = a11;
                  if (v134 >= (v70 + 1) << v142) {
                    unsigned int v84 = v130;
                  }
                  int v85 = v136;
                  if (v134 < (v70 + 1) << v142) {
                    int v85 = v132;
                  }
                  if (v83 >= a7) {
                    unsigned int v86 = 0;
                  }
                  else {
                    unsigned int v86 = v140;
                  }
                  if (v83 >= a7) {
                    unsigned int v87 = v85;
                  }
                  else {
                    unsigned int v87 = v84;
                  }
                  int v88 = a14[3];
                  int v89 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v86, 0, v144, v146);
                  if (v81)
                  {
                    uint64_t v90 = result;
                    uint64_t v91 = (v70 + v126) * v88 * v89 + v150;
                    uint64_t v92 = &v123[8 * (v86 + ((v70 - v128) << v142) - v140)];
                    unint64_t result = sub_34508(0, v125, v144, v146);
                    for (int k = 0; k != v81; ++k)
                    {
                      unsigned int v94 = v87;
                      uint64_t v95 = v92;
                      for (uint64_t m = v90; v94; --v94)
                      {
                        *(void *)uint64_t v95 = *(void *)(v91 + 8 * (m + result));
                        v95 += 8;
                        uint64_t m = (m - v79) & v79;
                      }

                      unint64_t result = (result - v80) & v80;
                      v92 += a13;
                    }
                  }

                  ++v70;
                }

                while (v149 != v137);
                uint64_t v15 = v115;
                unsigned int v19 = a12;
                unsigned int v69 = v109;
                unsigned int v70 = v128;
                unsigned int v97 = v121;
              }

              unsigned int v76 = v97;
            }

            while (v97 != v69);
          }
        }
      }

      else
      {
        unsigned int v48 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v49 = v48;
        }
        else {
          int v49 = 0;
        }
        unsigned int v50 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v51 = v50;
        }
        else {
          int v51 = 0;
        }
        uint64_t v52 = sub_34508(~(-1 << v51), 0, v51, v49);
        uint64_t v53 = sub_34508(0, ~(-1 << v49), v51, v49);
        unint64_t result = sub_34508(a7, 0, v51, v49);
        if (a12)
        {
          uint64_t v54 = result;
          unint64_t result = sub_34508(0, a8, v51, v49);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v56 = a11;
            int v57 = v15;
            for (iint i = v54; v56; --v56)
            {
              *v57++ = *(void *)(v18 + 8 * (ii + result));
              iint i = (ii - v52) & v52;
            }

            unint64_t result = (result - v53) & v53;
            uint64_t v15 = (void *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_428A0( uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v154 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v157);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v156, &v155);
          unsigned int v116 = v158;
          if (v158)
          {
            int v20 = 0;
            unsigned __int16 v118 = 0;
            char v112 = v156;
            unsigned int v108 = a7 >> v156;
            char v147 = v155;
            unsigned int v134 = a8 >> v155;
            unsigned int v151 = v159;
            unsigned int v106 = a11 + a7;
            int v102 = ((1 << v156) - 1) & a7;
            int v104 = ((1 << v156) - 1) & (a11 + a7);
            int v100 = (1 << v156) - v102;
            unsigned int v132 = a12 + a8;
            int v120 = ((1 << v155) - 1) & a8;
            int v128 = (1 << v155) - v120;
            int v130 = ((1 << v155) - 1) & (a12 + a8);
            int v110 = 1 << v156;
            if (1 << v156 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v156;
            }
            int v136 = 1 << v155;
            if (1 << v155 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v155;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v143 = v24;
            int v145 = v23;
            unsigned int v124 = ~(-1 << v23);
            unsigned int v126 = ~(-1 << v24);
            int v25 = v24;
            do
            {
              if (v151)
              {
                int v26 = 0;
                unsigned __int16 v27 = 0;
                unsigned int v28 = (v20 + v108) << v112;
                unsigned int v29 = a11;
                if (v106 >= (v20 + v108 + 1) << v112) {
                  unsigned int v29 = v100;
                }
                int v30 = v110;
                if (v106 < (v20 + v108 + 1) << v112) {
                  int v30 = v104;
                }
                int v31 = v20 << v112;
                if (v28 >= a7) {
                  unsigned int v32 = v30;
                }
                else {
                  unsigned int v32 = v29;
                }
                unsigned int v33 = v102;
                if (v28 >= a7) {
                  unsigned int v33 = 0;
                }
                unsigned int v139 = v33;
                uint64_t v122 = &a2[v33 + v31];
                do
                {
                  LOWORD(v34) = v118;
                  HIWORD(v34) = v27;
                  unint64_t result = sub_34358(v157, v34);
                  int v35 = *(_DWORD *)(v18 + 4LL * result);
                  if (v35 < 0)
                  {
                    unint64_t v36 = v154 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                    unsigned int v37 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v37) {
                      v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v38 = a12;
                    if (v132 >= (v26 + v134 + 1) << v147) {
                      unsigned int v38 = v128;
                    }
                    int v39 = v136;
                    if (v132 < (v26 + v134 + 1) << v147) {
                      int v39 = v130;
                    }
                    if ((v26 + v134) << v147 >= a8) {
                      unsigned int v40 = v39;
                    }
                    else {
                      unsigned int v40 = v38;
                    }
                    uint64_t v41 = sub_34508(v126, 0, v25, v145);
                    uint64_t v42 = sub_34508(0, v124, v25, v145);
                    unint64_t result = sub_34508(v139, 0, v25, v145);
                    if (v40)
                    {
                      uint64_t v43 = result;
                      if ((v26 + v134) << v147 >= a8) {
                        unsigned int v44 = 0;
                      }
                      else {
                        unsigned int v44 = v120;
                      }
                      unsigned int v45 = (_OWORD *)((char *)v122 + (v44 + (v26 << v147)) * a13);
                      unint64_t result = sub_34508(0, v44, v143, v145);
                      for (int i = 0; i != v40; ++i)
                      {
                        unsigned int v47 = v32;
                        unsigned int v48 = v45;
                        for (uint64_t j = v43; v47; --v47)
                        {
                          *v48++ = *(_OWORD *)(v36 + 16 * (j + result));
                          uint64_t j = (j - v41) & v41;
                        }

                        unint64_t result = (result - v42) & v42;
                        unsigned int v45 = (_OWORD *)((char *)v45 + a13);
                      }
                    }
                  }

                  int v26 = ++v27;
                  uint64_t v18 = v154;
                }

                while (v151 > v27);
              }

              int v20 = ++v118;
            }

            while (v116 > v118);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v157, &v156);
          unsigned int v63 = 1 << v156;
          char v64 = *((_BYTE *)a14 + 15);
          unsigned int v65 = 1 << v64;
          if (v64) {
            BOOL v66 = v65 > a3;
          }
          else {
            BOOL v66 = 1;
          }
          BOOL v67 = v66 || v65 > a4;
          int v68 = (~(-1 << v64) + a3) & (-1 << v64);
          if (v67) {
            int v69 = a3;
          }
          else {
            int v69 = v68;
          }
          unsigned int v121 = a8 >> v156;
          int v123 = 1 << v156;
          unsigned int v70 = v63 - 1;
          unsigned int v119 = a12 + a8;
          char v117 = v156;
          unsigned int v71 = (v63 - 1 + a12 + a8) >> v156;
          if (a8 >> v156 < v71)
          {
            unsigned int v111 = (v69 + ~(-1 << SLOBYTE(v157[0]))) >> SLOBYTE(v157[0]);
            unsigned int v72 = a7 >> SLOBYTE(v157[0]);
            char v146 = v157[0];
            unsigned int v142 = ((1 << SLOBYTE(v157[0])) - 1 + a11 + a7) >> SLOBYTE(v157[0]);
            int v137 = ((1 << SLOBYTE(v157[0])) - 1) & (a11 + a7);
            unsigned int v138 = a11 + a7;
            uint64_t v144 = ((1 << SLOBYTE(v157[0])) - 1) & a7;
            unsigned int v135 = (1 << SLOBYTE(v157[0])) - v144;
            int v107 = v70 & v119;
            unsigned int v73 = 1 << v156;
            uint64_t v109 = v70 & a8;
            unsigned int v105 = v63 - v109;
            int v140 = 1 << SLOBYTE(v157[0]);
            if (1 << SLOBYTE(v157[0]) >= a5) {
              unsigned int v74 = a5;
            }
            else {
              unsigned int v74 = 1 << SLOBYTE(v157[0]);
            }
            if (v63 >= a6) {
              unsigned int v73 = a6;
            }
            unsigned int v75 = 32 - __clz(v73 - 1);
            if (v73 < 2) {
              unsigned int v75 = 0;
            }
            unsigned int v76 = 32 - __clz(v74 - 1);
            if (v74 >= 2) {
              unsigned int v77 = v76;
            }
            else {
              unsigned int v77 = 0;
            }
            int v148 = v77;
            unsigned int v103 = ~(-1 << v77);
            int v150 = v75;
            unsigned int v101 = ~(-1 << v75);
            unsigned int v78 = a8 >> v156;
            unsigned int v115 = v15;
            unsigned int v113 = (v63 - 1 + a12 + a8) >> v156;
            unsigned int v133 = a7 >> SLOBYTE(v157[0]);
            do
            {
              if (v72 >= v142)
              {
                unsigned int v99 = v78 + 1;
              }

              else
              {
                unsigned int v152 = v78 << v117;
                unsigned int v125 = v78 + 1;
                if (v119 >= (v78 + 1) << v117) {
                  int v79 = v123;
                }
                else {
                  int v79 = v107;
                }
                if (v119 >= (v78 + 1) << v117) {
                  unsigned int v80 = v105;
                }
                else {
                  unsigned int v80 = v19;
                }
                int v131 = v78 * v111;
                uint64_t v81 = sub_34508(v103, 0, v148, v150);
                uint64_t v82 = sub_34508(0, v101, v148, v150);
                if (v152 >= a8) {
                  int v83 = v79;
                }
                else {
                  int v83 = v80;
                }
                if (v152 >= a8) {
                  unsigned int v84 = 0;
                }
                else {
                  unsigned int v84 = v109;
                }
                unsigned int v129 = v84;
                int v127 = (char *)v15 + (v84 + ((v78 - v121) << v117) - v109) * a13;
                do
                {
                  unsigned int v85 = v72 << v146;
                  unsigned int v153 = v72 + 1;
                  unsigned int v86 = a11;
                  if (v138 >= (v72 + 1) << v146) {
                    unsigned int v86 = v135;
                  }
                  int v87 = v140;
                  if (v138 < (v72 + 1) << v146) {
                    int v87 = v137;
                  }
                  if (v85 >= a7) {
                    unsigned int v88 = 0;
                  }
                  else {
                    unsigned int v88 = v144;
                  }
                  if (v85 >= a7) {
                    unsigned int v89 = v87;
                  }
                  else {
                    unsigned int v89 = v86;
                  }
                  int v90 = a14[3];
                  int v91 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v88, 0, v148, v150);
                  if (v83)
                  {
                    uint64_t v92 = result;
                    uint64_t v93 = (v72 + v131) * v90 * v91 + v154;
                    unsigned int v94 = &v127[16 * (v88 + ((v72 - v133) << v146) - v144)];
                    unint64_t result = sub_34508(0, v129, v148, v150);
                    for (int k = 0; k != v83; ++k)
                    {
                      unsigned int v96 = v89;
                      unsigned int v97 = v94;
                      for (uint64_t m = v92; v96; --v96)
                      {
                        *(_OWORD *)unsigned int v97 = *(_OWORD *)(v93 + 16 * (m + result));
                        v97 += 16;
                        uint64_t m = (m - v81) & v81;
                      }

                      unint64_t result = (result - v82) & v82;
                      v94 += a13;
                    }
                  }

                  ++v72;
                }

                while (v153 != v142);
                uint64_t v15 = v115;
                unsigned int v19 = a12;
                unsigned int v71 = v113;
                unsigned int v72 = v133;
                unsigned int v99 = v125;
              }

              unsigned int v78 = v99;
            }

            while (v99 != v71);
          }
        }
      }

      else
      {
        unsigned int v50 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v51 = v50;
        }
        else {
          int v51 = 0;
        }
        unsigned int v52 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v53 = v52;
        }
        else {
          int v53 = 0;
        }
        uint64_t v54 = sub_34508(~(-1 << v53), 0, v53, v51);
        uint64_t v55 = sub_34508(0, ~(-1 << v51), v53, v51);
        unint64_t result = sub_34508(a7, 0, v53, v51);
        if (a12)
        {
          uint64_t v56 = result;
          unint64_t result = sub_34508(0, a8, v53, v51);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v58 = a11;
            char v59 = v15;
            for (iint i = v56; v58; --v58)
            {
              *v59++ = *(_OWORD *)(v18 + 16 * (ii + result));
              iint i = (ii - v54) & v54;
            }

            unint64_t result = (result - v55) & v55;
            uint64_t v15 = (_OWORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_43134( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    unsigned int v18 = a12;
    if (a14)
    {
      uint64_t v151 = result;
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v154);
        unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v153, &v152);
        unsigned int v117 = v155;
        if (v155)
        {
          int v119 = 0;
          char v115 = v153;
          unsigned int v111 = a7 >> v153;
          char v145 = v152;
          unsigned int v135 = a8 >> v152;
          unsigned int v149 = v156;
          unsigned int v109 = a11 + a7;
          int v105 = ((1 << v153) - 1) & a7;
          int v107 = ((1 << v153) - 1) & (a11 + a7);
          int v103 = (1 << v153) - v105;
          unsigned int v133 = a12 + a8;
          int v121 = ((1 << v152) - 1) & a8;
          int v129 = (1 << v152) - v121;
          int v131 = ((1 << v152) - 1) & (a12 + a8);
          int v113 = 1 << v153;
          if (1 << v153 >= a5) {
            unsigned int v19 = a5;
          }
          else {
            unsigned int v19 = 1 << v153;
          }
          int v137 = 1 << v152;
          if (1 << v152 >= a6) {
            unsigned int v20 = a6;
          }
          else {
            unsigned int v20 = 1 << v152;
          }
          unsigned int v21 = 32 - __clz(v20 - 1);
          if (v20 < 2) {
            unsigned int v21 = 0;
          }
          unsigned int v22 = 32 - __clz(v19 - 1);
          if (v19 >= 2) {
            int v23 = v22;
          }
          else {
            int v23 = 0;
          }
          int v143 = v21;
          unsigned int v126 = ~(-1 << v21);
          do
          {
            if (v149)
            {
              int v24 = 0;
              unsigned int v25 = (v119 + v111) << v115;
              unsigned int v26 = a11;
              if (v109 >= (v119 + v111 + 1) << v115) {
                unsigned int v26 = v103;
              }
              int v27 = v113;
              if (v109 < (v119 + v111 + 1) << v115) {
                int v27 = v107;
              }
              if (v25 >= a7) {
                unsigned int v28 = v27;
              }
              else {
                unsigned int v28 = v26;
              }
              unsigned int v29 = v105;
              if (v25 >= a7) {
                unsigned int v29 = 0;
              }
              unsigned int v141 = v29;
              int v123 = &a2[v29 + (v119 << v115)];
              do
              {
                LOWORD(v30) = v119;
                HIWORD(v30) = v24;
                unint64_t result = sub_34358(v154, v30);
                int v31 = *(_DWORD *)(v17 + 4LL * result);
                if (v31 < 0)
                {
                  unint64_t v32 = v151 - *(void *)(a15 + 24) + ((unint64_t)(v31 & 0x3FFFFFF) << 14);
                  unsigned int v33 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v33) {
                    v32 += sub_343C0( *(_DWORD *)a15,  v33,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v34 = (v24 + v135) << v145;
                  unsigned int v35 = a12;
                  if (v133 >= (v24 + v135 + 1) << v145) {
                    unsigned int v35 = v129;
                  }
                  int v36 = v137;
                  if (v133 < (v24 + v135 + 1) << v145) {
                    int v36 = v131;
                  }
                  if (v34 >= a8) {
                    unsigned int v37 = v36;
                  }
                  else {
                    unsigned int v37 = v35;
                  }
                  uint64_t v38 = sub_34508(~(-1 << v23), 0, v23, v143);
                  uint64_t v39 = sub_34508(0, v126, v23, v143);
                  unint64_t result = sub_34508(v141, 0, v23, v143);
                  if (v37)
                  {
                    uint64_t v40 = result;
                    if (v34 >= a8) {
                      unsigned int v41 = 0;
                    }
                    else {
                      unsigned int v41 = v121;
                    }
                    uint64_t v42 = (_WORD *)((char *)v123 + (v41 + (v24 << v145)) * a13);
                    unint64_t result = sub_34508(0, v41, v23, v143);
                    for (int i = 0; i != v37; ++i)
                    {
                      unsigned int v44 = v28;
                      unsigned int v45 = v42;
                      for (uint64_t j = v40; v44; --v44)
                      {
                        *v45++ = *(_WORD *)(v32 + 2 * (j + result));
                        uint64_t j = (j - v38) & v38;
                      }

                      unint64_t result = (result - v39) & v39;
                      uint64_t v42 = (_WORD *)((char *)v42 + a13);
                    }
                  }
                }

                ++v24;
                uint64_t v17 = v151;
              }

              while (v149 > (unsigned __int16)v24);
            }

            ++v119;
          }

          while (v117 > (unsigned __int16)v119);
        }
      }

      else
      {
        unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v154, &v153);
        unsigned int v62 = 1 << v153;
        char v63 = *((_BYTE *)a14 + 15);
        unsigned int v64 = 1 << v63;
        if (v63) {
          BOOL v65 = v64 > a3;
        }
        else {
          BOOL v65 = 1;
        }
        BOOL v66 = v65 || v64 > a4;
        int v67 = (~(-1 << v63) + a3) & (-1 << v63);
        if (v66) {
          int v68 = a3;
        }
        else {
          int v68 = v67;
        }
        unsigned int v118 = a8 >> v153;
        int v120 = 1 << v153;
        unsigned int v69 = v62 - 1;
        unsigned int v116 = a12 + a8;
        char v114 = v153;
        unsigned int v70 = (v62 - 1 + a12 + a8) >> v153;
        if (a8 >> v153 < v70)
        {
          unsigned int v110 = (v68 + ~(-1 << SLOBYTE(v154[0]))) >> SLOBYTE(v154[0]);
          unsigned int v71 = a7 >> SLOBYTE(v154[0]);
          char v144 = v154[0];
          unsigned int v139 = ((1 << SLOBYTE(v154[0])) - 1 + a11 + a7) >> SLOBYTE(v154[0]);
          int v134 = ((1 << SLOBYTE(v154[0])) - 1) & (a11 + a7);
          unsigned int v136 = a11 + a7;
          uint64_t v142 = ((1 << SLOBYTE(v154[0])) - 1) & a7;
          unsigned int v132 = (1 << SLOBYTE(v154[0])) - v142;
          int v106 = v69 & v116;
          unsigned int v72 = 1 << v153;
          uint64_t v108 = v69 & a8;
          unsigned int v104 = v62 - v108;
          int v138 = 1 << SLOBYTE(v154[0]);
          if (1 << SLOBYTE(v154[0]) >= a5) {
            unsigned int v73 = a5;
          }
          else {
            unsigned int v73 = 1 << SLOBYTE(v154[0]);
          }
          if (v62 >= a6) {
            unsigned int v72 = a6;
          }
          unsigned int v74 = 32 - __clz(v72 - 1);
          if (v72 < 2) {
            unsigned int v74 = 0;
          }
          unsigned int v75 = 32 - __clz(v73 - 1);
          if (v73 >= 2) {
            unsigned int v76 = v75;
          }
          else {
            unsigned int v76 = 0;
          }
          int v146 = v76;
          unsigned int v102 = ~(-1 << v76);
          int v148 = v74;
          unsigned int v101 = ~(-1 << v74);
          unsigned int v77 = a8 >> v153;
          unsigned int v112 = (v62 - 1 + a12 + a8) >> v153;
          unsigned int v130 = a7 >> SLOBYTE(v154[0]);
          do
          {
            if (v71 >= v139)
            {
              unsigned int v100 = v77 + 1;
            }

            else
            {
              unsigned int v78 = v77 << v114;
              unsigned int v122 = v77 + 1;
              if (v116 >= (v77 + 1) << v114) {
                int v79 = v120;
              }
              else {
                int v79 = v106;
              }
              if (v116 >= (v77 + 1) << v114) {
                unsigned int v80 = v104;
              }
              else {
                unsigned int v80 = v18;
              }
              int v128 = v77 * v110;
              uint64_t v81 = sub_34508(v102, 0, v146, v148);
              uint64_t v82 = sub_34508(0, v101, v146, v148);
              BOOL v83 = v78 >= a8;
              if (v78 >= a8) {
                int v84 = v79;
              }
              else {
                int v84 = v80;
              }
              if (v83) {
                unsigned int v85 = 0;
              }
              else {
                unsigned int v85 = v108;
              }
              unsigned int v127 = v85;
              uint64_t v124 = (v85 + ((v77 - v118) << v114) - v108) * a13;
              do
              {
                unsigned int v86 = v71 << v144;
                unsigned int v150 = v71 + 1;
                unsigned int v87 = a11;
                if (v136 >= (v71 + 1) << v144) {
                  unsigned int v87 = v132;
                }
                int v88 = v138;
                if (v136 < (v71 + 1) << v144) {
                  int v88 = v134;
                }
                if (v86 >= a7) {
                  unsigned int v89 = 0;
                }
                else {
                  unsigned int v89 = v142;
                }
                if (v86 >= a7) {
                  unsigned int v90 = v88;
                }
                else {
                  unsigned int v90 = v87;
                }
                int v91 = a14[3];
                int v92 = *((unsigned __int8 *)a14 + 9);
                unint64_t result = sub_34508(v89, 0, v146, v148);
                if (v84)
                {
                  uint64_t v93 = result;
                  uint64_t v94 = (v71 + v128) * v91 * v92 + v151;
                  uint64_t v95 = (_WORD *)((char *)&a2[v89 + ((v71 - v130) << v144) - v142] + v124);
                  unint64_t result = sub_34508(0, v127, v146, v148);
                  for (int k = 0; k != v84; ++k)
                  {
                    unsigned int v97 = v90;
                    unsigned int v98 = v95;
                    for (uint64_t m = v93; v97; --v97)
                    {
                      *v98++ = *(_WORD *)(v94 + 2 * (m + result));
                      uint64_t m = (m - v81) & v81;
                    }

                    unint64_t result = (result - v82) & v82;
                    uint64_t v95 = (_WORD *)((char *)v95 + a13);
                  }
                }

                ++v71;
              }

              while (v150 != v139);
              unsigned int v18 = a12;
              unsigned int v70 = v112;
              unsigned int v71 = v130;
              unsigned int v100 = v122;
            }

            unsigned int v77 = v100;
          }

          while (v100 != v70);
        }
      }
    }

    else
    {
      unsigned int v47 = 32 - __clz(a6 - 1);
      if (a6 >= 2) {
        int v48 = v47;
      }
      else {
        int v48 = 0;
      }
      unsigned int v49 = 32 - __clz(a5 - 1);
      if (a5 >= 2) {
        int v50 = v49;
      }
      else {
        int v50 = 0;
      }
      uint64_t v52 = sub_34508(~(-1 << v50), 0, v50, v48);
      uint64_t v53 = sub_34508(0, ~(-1 << v48), v50, v48);
      unint64_t result = sub_34508(a7, 0, v50, v48);
      if (a12)
      {
        uint64_t v54 = result;
        unint64_t result = sub_34508(0, a8, v50, v48);
        uint64_t v55 = a2;
        for (int n = 0; n != a12; ++n)
        {
          unsigned int v57 = a11;
          unsigned int v58 = v55;
          for (iint i = v54; v57; --v57)
          {
            *v58++ = *(_WORD *)(v17 + 2 * (ii + result));
            iint i = (ii - v52) & v52;
          }

          unint64_t result = (result - v53) & v53;
          uint64_t v55 = (_WORD *)((char *)v55 + a13);
        }
      }
    }
  }

  return result;
}

uint64_t sub_439A0( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_45468(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_439BC( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v161 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v164);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v163, &v162);
          unsigned int v122 = v165;
          if (v165)
          {
            int v20 = 0;
            unsigned __int16 v124 = 0;
            char v118 = v163;
            unsigned int v114 = a7 >> v163;
            char v154 = v162;
            unsigned int v140 = a8 >> v162;
            unsigned int v158 = v166;
            unsigned int v112 = a11 + a7;
            int v108 = ((1 << v163) - 1) & a7;
            int v110 = ((1 << v163) - 1) & (a11 + a7);
            int v106 = (1 << v163) - v108;
            unsigned int v138 = a12 + a8;
            int v126 = ((1 << v162) - 1) & a8;
            int v134 = (1 << v162) - v126;
            int v136 = ((1 << v162) - 1) & (a12 + a8);
            int v116 = 1 << v163;
            if (1 << v163 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v163;
            }
            int v142 = 1 << v162;
            if (1 << v162 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v162;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v150 = v24;
            unsigned int v132 = ~(-1 << v24);
            int v152 = v23;
            unsigned int v130 = ~(-1 << v23);
            do
            {
              if (v158)
              {
                int v25 = 0;
                unsigned __int16 v26 = 0;
                unsigned int v27 = (v20 + v114) << v118;
                unsigned int v28 = a11;
                if (v112 >= (v20 + v114 + 1) << v118) {
                  unsigned int v28 = v106;
                }
                int v29 = v116;
                if (v112 < (v20 + v114 + 1) << v118) {
                  int v29 = v110;
                }
                int v30 = v20 << v118;
                if (v27 >= a7) {
                  unsigned int v31 = v29;
                }
                else {
                  unsigned int v31 = v28;
                }
                unsigned int v32 = v108;
                if (v27 >= a7) {
                  unsigned int v32 = 0;
                }
                unsigned int v145 = v32;
                uint64_t v128 = a2 + 6LL * (v32 + v30);
                do
                {
                  LOWORD(v33) = v124;
                  HIWORD(v33) = v26;
                  unint64_t result = sub_34358(v164, v33);
                  int v34 = *(_DWORD *)(v161 + 4LL * result);
                  if (v34 < 0)
                  {
                    unint64_t v35 = v161 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                    unsigned int v36 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v36) {
                      v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v37 = a12;
                    if (v138 >= (v25 + v140 + 1) << v154) {
                      unsigned int v37 = v134;
                    }
                    int v38 = v142;
                    if (v138 < (v25 + v140 + 1) << v154) {
                      int v38 = v136;
                    }
                    if ((v25 + v140) << v154 >= a8) {
                      unsigned int v39 = v38;
                    }
                    else {
                      unsigned int v39 = v37;
                    }
                    uint64_t v40 = sub_34508(v132, 0, v150, v152);
                    uint64_t v41 = sub_34508(0, v130, v150, v152);
                    unint64_t result = sub_34508(v145, 0, v150, v152);
                    if (v39)
                    {
                      uint64_t v42 = result;
                      if ((v25 + v140) << v154 >= a8) {
                        unsigned int v43 = 0;
                      }
                      else {
                        unsigned int v43 = v126;
                      }
                      uint64_t v44 = v128 + (v43 + (v25 << v154)) * a13;
                      unint64_t result = sub_34508(0, v43, v150, v152);
                      for (int i = 0; i != v39; ++i)
                      {
                        unsigned int v46 = v31;
                        uint64_t v47 = v44;
                        for (uint64_t j = v42; v46; --v46)
                        {
                          unint64_t v49 = v35 + 6 * (j + result);
                          int v50 = *(_DWORD *)v49;
                          *(_WORD *)(v47 + 4) = *(_WORD *)(v49 + 4);
                          *(_DWORD *)uint64_t v47 = v50;
                          v47 += 6LL;
                          uint64_t j = (j - v40) & v40;
                        }

                        unint64_t result = (result - v41) & v41;
                        v44 += a13;
                      }
                    }
                  }

                  int v25 = ++v26;
                }

                while (v158 > v26);
              }

              int v20 = ++v124;
            }

            while (v122 > v124);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v164, &v163);
          unsigned int v66 = 1 << v163;
          char v67 = *((_BYTE *)a14 + 15);
          unsigned int v68 = 1 << v67;
          if (v67) {
            BOOL v69 = v68 > a3;
          }
          else {
            BOOL v69 = 1;
          }
          BOOL v70 = v69 || v68 > a4;
          int v71 = (~(-1 << v67) + a3) & (-1 << v67);
          if (v70) {
            int v72 = a3;
          }
          else {
            int v72 = v71;
          }
          unsigned int v125 = a8 >> v163;
          int v127 = 1 << v163;
          unsigned int v73 = v66 - 1;
          unsigned int v123 = a12 + a8;
          char v119 = v163;
          unsigned int v74 = (v66 - 1 + a12 + a8) >> v163;
          if (a8 >> v163 < v74)
          {
            unsigned int v115 = (v72 + ~(-1 << SLOBYTE(v164[0]))) >> SLOBYTE(v164[0]);
            unsigned int v75 = a7 >> SLOBYTE(v164[0]);
            char v153 = v164[0];
            unsigned int v146 = ((1 << SLOBYTE(v164[0])) - 1 + a11 + a7) >> SLOBYTE(v164[0]);
            int v141 = ((1 << SLOBYTE(v164[0])) - 1) & (a11 + a7);
            unsigned int v143 = a11 + a7;
            uint64_t v151 = ((1 << SLOBYTE(v164[0])) - 1) & a7;
            unsigned int v139 = (1 << SLOBYTE(v164[0])) - v151;
            int v111 = v73 & v123;
            unsigned int v76 = 1 << v163;
            uint64_t v113 = v73 & a8;
            unsigned int v109 = v66 - v113;
            int v144 = 1 << SLOBYTE(v164[0]);
            if (1 << SLOBYTE(v164[0]) >= a5) {
              unsigned int v77 = a5;
            }
            else {
              unsigned int v77 = 1 << SLOBYTE(v164[0]);
            }
            if (v66 >= a6) {
              unsigned int v76 = a6;
            }
            unsigned int v78 = 32 - __clz(v76 - 1);
            if (v76 < 2) {
              unsigned int v78 = 0;
            }
            unsigned int v79 = 32 - __clz(v77 - 1);
            if (v77 >= 2) {
              unsigned int v80 = v79;
            }
            else {
              unsigned int v80 = 0;
            }
            int v155 = v80;
            unsigned int v107 = ~(-1 << v80);
            int v157 = v78;
            unsigned int v105 = ~(-1 << v78);
            unsigned int v81 = a8 >> v163;
            uint64_t v121 = v15;
            unsigned int v117 = (v66 - 1 + a12 + a8) >> v163;
            unsigned int v137 = a7 >> SLOBYTE(v164[0]);
            do
            {
              if (v75 >= v146)
              {
                unsigned int v104 = v81 + 1;
              }

              else
              {
                unsigned int v159 = v81 << v119;
                unsigned int v129 = v81 + 1;
                int v82 = v127;
                if (v123 < (v81 + 1) << v119) {
                  int v82 = v111;
                }
                int v148 = v82;
                if (v123 >= (v81 + 1) << v119) {
                  unsigned int v83 = v109;
                }
                else {
                  unsigned int v83 = v19;
                }
                int v135 = v81 * v115;
                unsigned int v84 = v75;
                uint64_t v85 = sub_34508(v107, 0, v155, v157);
                uint64_t v86 = sub_34508(0, v105, v155, v157);
                if (v159 >= a8) {
                  unsigned int v87 = v148;
                }
                else {
                  unsigned int v87 = v83;
                }
                if (v159 >= a8) {
                  unsigned int v88 = 0;
                }
                else {
                  unsigned int v88 = v113;
                }
                unsigned int v133 = v88;
                uint64_t v131 = v15 + (v88 + ((v81 - v125) << v119) - v113) * a13;
                do
                {
                  unsigned int v89 = v84 << v153;
                  unsigned int v160 = v84 + 1;
                  unsigned int v90 = a11;
                  if (v143 >= (v84 + 1) << v153) {
                    unsigned int v90 = v139;
                  }
                  int v91 = v144;
                  if (v143 < (v84 + 1) << v153) {
                    int v91 = v141;
                  }
                  if (v89 >= a7) {
                    unsigned int v92 = 0;
                  }
                  else {
                    unsigned int v92 = v151;
                  }
                  if (v89 >= a7) {
                    unsigned int v93 = v91;
                  }
                  else {
                    unsigned int v93 = v90;
                  }
                  int v94 = a14[3];
                  int v149 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v92, 0, v155, v157);
                  if (v87)
                  {
                    uint64_t v95 = result;
                    uint64_t v96 = (v84 + v135) * v94 * v149 + v161;
                    uint64_t v97 = v131 + 6 * (v92 + ((v84 - v137) << v153) - v151);
                    unint64_t result = sub_34508(0, v133, v155, v157);
                    for (int k = 0; k != v87; ++k)
                    {
                      unsigned int v99 = v93;
                      uint64_t v100 = v97;
                      for (uint64_t m = v95; v99; --v99)
                      {
                        unsigned int v102 = (int *)(v96 + 6 * (m + result));
                        int v103 = *v102;
                        *(_WORD *)(v100 + 4) = *((_WORD *)v102 + 2);
                        *(_DWORD *)uint64_t v100 = v103;
                        v100 += 6LL;
                        uint64_t m = (m - v85) & v85;
                      }

                      unint64_t result = (result - v86) & v86;
                      v97 += a13;
                    }
                  }

                  ++v84;
                }

                while (v160 != v146);
                uint64_t v15 = v121;
                unsigned int v19 = a12;
                unsigned int v74 = v117;
                unsigned int v75 = v137;
                unsigned int v104 = v129;
              }

              unsigned int v81 = v104;
            }

            while (v104 != v74);
          }
        }
      }

      else
      {
        unsigned int v51 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v52 = v51;
        }
        else {
          int v52 = 0;
        }
        unsigned int v53 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v54 = v53;
        }
        else {
          int v54 = 0;
        }
        uint64_t v55 = sub_34508(~(-1 << v54), 0, v54, v52);
        uint64_t v56 = sub_34508(0, ~(-1 << v52), v54, v52);
        unint64_t result = sub_34508(a7, 0, v54, v52);
        if (a12)
        {
          uint64_t v57 = result;
          unint64_t result = sub_34508(0, a8, v54, v52);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v59 = a11;
            uint64_t v60 = v15;
            for (iint i = v57; v59; --v59)
            {
              uint64_t v62 = v18 + 6 * (ii + result);
              int v63 = *(_DWORD *)v62;
              *(_WORD *)(v60 + 4) = *(_WORD *)(v62 + 4);
              *(_DWORD *)uint64_t v60 = v63;
              v60 += 6LL;
              iint i = (ii - v55) & v55;
            }

            unint64_t result = (result - v56) & v56;
            v15 += a13;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_442A0( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v161 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v164);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v163, &v162);
          unsigned int v122 = v165;
          if (v165)
          {
            int v20 = 0;
            unsigned __int16 v124 = 0;
            char v118 = v163;
            unsigned int v114 = a7 >> v163;
            char v154 = v162;
            unsigned int v140 = a8 >> v162;
            unsigned int v158 = v166;
            unsigned int v112 = a11 + a7;
            int v108 = ((1 << v163) - 1) & a7;
            int v110 = ((1 << v163) - 1) & (a11 + a7);
            int v106 = (1 << v163) - v108;
            unsigned int v138 = a12 + a8;
            int v126 = ((1 << v162) - 1) & a8;
            int v134 = (1 << v162) - v126;
            int v136 = ((1 << v162) - 1) & (a12 + a8);
            int v116 = 1 << v163;
            if (1 << v163 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v163;
            }
            int v142 = 1 << v162;
            if (1 << v162 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v162;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v150 = v24;
            unsigned int v132 = ~(-1 << v24);
            int v152 = v23;
            unsigned int v130 = ~(-1 << v23);
            do
            {
              if (v158)
              {
                int v25 = 0;
                unsigned __int16 v26 = 0;
                unsigned int v27 = (v20 + v114) << v118;
                unsigned int v28 = a11;
                if (v112 >= (v20 + v114 + 1) << v118) {
                  unsigned int v28 = v106;
                }
                int v29 = v116;
                if (v112 < (v20 + v114 + 1) << v118) {
                  int v29 = v110;
                }
                int v30 = v20 << v118;
                if (v27 >= a7) {
                  unsigned int v31 = v29;
                }
                else {
                  unsigned int v31 = v28;
                }
                unsigned int v32 = v108;
                if (v27 >= a7) {
                  unsigned int v32 = 0;
                }
                unsigned int v145 = v32;
                uint64_t v128 = a2 + 12LL * (v32 + v30);
                do
                {
                  LOWORD(v33) = v124;
                  HIWORD(v33) = v26;
                  unint64_t result = sub_34358(v164, v33);
                  int v34 = *(_DWORD *)(v161 + 4LL * result);
                  if (v34 < 0)
                  {
                    unint64_t v35 = v161 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                    unsigned int v36 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v36) {
                      v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v37 = a12;
                    if (v138 >= (v25 + v140 + 1) << v154) {
                      unsigned int v37 = v134;
                    }
                    int v38 = v142;
                    if (v138 < (v25 + v140 + 1) << v154) {
                      int v38 = v136;
                    }
                    if ((v25 + v140) << v154 >= a8) {
                      unsigned int v39 = v38;
                    }
                    else {
                      unsigned int v39 = v37;
                    }
                    uint64_t v40 = sub_34508(v132, 0, v150, v152);
                    uint64_t v41 = sub_34508(0, v130, v150, v152);
                    unint64_t result = sub_34508(v145, 0, v150, v152);
                    if (v39)
                    {
                      uint64_t v42 = result;
                      if ((v25 + v140) << v154 >= a8) {
                        unsigned int v43 = 0;
                      }
                      else {
                        unsigned int v43 = v126;
                      }
                      uint64_t v44 = v128 + (v43 + (v25 << v154)) * a13;
                      unint64_t result = sub_34508(0, v43, v150, v152);
                      for (int i = 0; i != v39; ++i)
                      {
                        unsigned int v46 = v31;
                        uint64_t v47 = v44;
                        for (uint64_t j = v42; v46; --v46)
                        {
                          unint64_t v49 = v35 + 12 * (j + result);
                          uint64_t v50 = *(void *)v49;
                          *(_DWORD *)(v47 + 8) = *(_DWORD *)(v49 + 8);
                          *(void *)uint64_t v47 = v50;
                          v47 += 12LL;
                          uint64_t j = (j - v40) & v40;
                        }

                        unint64_t result = (result - v41) & v41;
                        v44 += a13;
                      }
                    }
                  }

                  int v25 = ++v26;
                }

                while (v158 > v26);
              }

              int v20 = ++v124;
            }

            while (v122 > v124);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v164, &v163);
          unsigned int v66 = 1 << v163;
          char v67 = *((_BYTE *)a14 + 15);
          unsigned int v68 = 1 << v67;
          if (v67) {
            BOOL v69 = v68 > a3;
          }
          else {
            BOOL v69 = 1;
          }
          BOOL v70 = v69 || v68 > a4;
          int v71 = (~(-1 << v67) + a3) & (-1 << v67);
          if (v70) {
            int v72 = a3;
          }
          else {
            int v72 = v71;
          }
          unsigned int v125 = a8 >> v163;
          int v127 = 1 << v163;
          unsigned int v73 = v66 - 1;
          unsigned int v123 = a12 + a8;
          char v119 = v163;
          unsigned int v74 = (v66 - 1 + a12 + a8) >> v163;
          if (a8 >> v163 < v74)
          {
            unsigned int v115 = (v72 + ~(-1 << SLOBYTE(v164[0]))) >> SLOBYTE(v164[0]);
            unsigned int v75 = a7 >> SLOBYTE(v164[0]);
            char v153 = v164[0];
            unsigned int v146 = ((1 << SLOBYTE(v164[0])) - 1 + a11 + a7) >> SLOBYTE(v164[0]);
            int v141 = ((1 << SLOBYTE(v164[0])) - 1) & (a11 + a7);
            unsigned int v143 = a11 + a7;
            uint64_t v151 = ((1 << SLOBYTE(v164[0])) - 1) & a7;
            unsigned int v139 = (1 << SLOBYTE(v164[0])) - v151;
            int v111 = v73 & v123;
            unsigned int v76 = 1 << v163;
            uint64_t v113 = v73 & a8;
            unsigned int v109 = v66 - v113;
            int v144 = 1 << SLOBYTE(v164[0]);
            if (1 << SLOBYTE(v164[0]) >= a5) {
              unsigned int v77 = a5;
            }
            else {
              unsigned int v77 = 1 << SLOBYTE(v164[0]);
            }
            if (v66 >= a6) {
              unsigned int v76 = a6;
            }
            unsigned int v78 = 32 - __clz(v76 - 1);
            if (v76 < 2) {
              unsigned int v78 = 0;
            }
            unsigned int v79 = 32 - __clz(v77 - 1);
            if (v77 >= 2) {
              unsigned int v80 = v79;
            }
            else {
              unsigned int v80 = 0;
            }
            int v155 = v80;
            unsigned int v107 = ~(-1 << v80);
            int v157 = v78;
            unsigned int v105 = ~(-1 << v78);
            unsigned int v81 = a8 >> v163;
            uint64_t v121 = v15;
            unsigned int v117 = (v66 - 1 + a12 + a8) >> v163;
            unsigned int v137 = a7 >> SLOBYTE(v164[0]);
            do
            {
              if (v75 >= v146)
              {
                unsigned int v104 = v81 + 1;
              }

              else
              {
                unsigned int v159 = v81 << v119;
                unsigned int v129 = v81 + 1;
                int v82 = v127;
                if (v123 < (v81 + 1) << v119) {
                  int v82 = v111;
                }
                int v148 = v82;
                if (v123 >= (v81 + 1) << v119) {
                  unsigned int v83 = v109;
                }
                else {
                  unsigned int v83 = v19;
                }
                int v135 = v81 * v115;
                unsigned int v84 = v75;
                uint64_t v85 = sub_34508(v107, 0, v155, v157);
                uint64_t v86 = sub_34508(0, v105, v155, v157);
                if (v159 >= a8) {
                  unsigned int v87 = v148;
                }
                else {
                  unsigned int v87 = v83;
                }
                if (v159 >= a8) {
                  unsigned int v88 = 0;
                }
                else {
                  unsigned int v88 = v113;
                }
                unsigned int v133 = v88;
                uint64_t v131 = v15 + (v88 + ((v81 - v125) << v119) - v113) * a13;
                do
                {
                  unsigned int v89 = v84 << v153;
                  unsigned int v160 = v84 + 1;
                  unsigned int v90 = a11;
                  if (v143 >= (v84 + 1) << v153) {
                    unsigned int v90 = v139;
                  }
                  int v91 = v144;
                  if (v143 < (v84 + 1) << v153) {
                    int v91 = v141;
                  }
                  if (v89 >= a7) {
                    unsigned int v92 = 0;
                  }
                  else {
                    unsigned int v92 = v151;
                  }
                  if (v89 >= a7) {
                    unsigned int v93 = v91;
                  }
                  else {
                    unsigned int v93 = v90;
                  }
                  int v94 = a14[3];
                  int v149 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v92, 0, v155, v157);
                  if (v87)
                  {
                    uint64_t v95 = result;
                    uint64_t v96 = (v84 + v135) * v94 * v149 + v161;
                    uint64_t v97 = v131 + 12 * (v92 + ((v84 - v137) << v153) - v151);
                    unint64_t result = sub_34508(0, v133, v155, v157);
                    for (int k = 0; k != v87; ++k)
                    {
                      unsigned int v99 = v93;
                      uint64_t v100 = v97;
                      for (uint64_t m = v95; v99; --v99)
                      {
                        unsigned int v102 = (uint64_t *)(v96 + 12 * (m + result));
                        uint64_t v103 = *v102;
                        *(_DWORD *)(v100 + 8) = *((_DWORD *)v102 + 2);
                        *(void *)uint64_t v100 = v103;
                        v100 += 12LL;
                        uint64_t m = (m - v85) & v85;
                      }

                      unint64_t result = (result - v86) & v86;
                      v97 += a13;
                    }
                  }

                  ++v84;
                }

                while (v160 != v146);
                uint64_t v15 = v121;
                unsigned int v19 = a12;
                unsigned int v74 = v117;
                unsigned int v75 = v137;
                unsigned int v104 = v129;
              }

              unsigned int v81 = v104;
            }

            while (v104 != v74);
          }
        }
      }

      else
      {
        unsigned int v51 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v52 = v51;
        }
        else {
          int v52 = 0;
        }
        unsigned int v53 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v54 = v53;
        }
        else {
          int v54 = 0;
        }
        uint64_t v55 = sub_34508(~(-1 << v54), 0, v54, v52);
        uint64_t v56 = sub_34508(0, ~(-1 << v52), v54, v52);
        unint64_t result = sub_34508(a7, 0, v54, v52);
        if (a12)
        {
          uint64_t v57 = result;
          unint64_t result = sub_34508(0, a8, v54, v52);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v59 = a11;
            uint64_t v60 = v15;
            for (iint i = v57; v59; --v59)
            {
              uint64_t v62 = v18 + 12 * (ii + result);
              uint64_t v63 = *(void *)v62;
              *(_DWORD *)(v60 + 8) = *(_DWORD *)(v62 + 8);
              *(void *)uint64_t v60 = v63;
              v60 += 12LL;
              iint i = (ii - v55) & v55;
            }

            unint64_t result = (result - v56) & v56;
            v15 += a13;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_44B84( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v161 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v164);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v163, &v162);
          unsigned int v122 = v165;
          if (v165)
          {
            int v20 = 0;
            unsigned __int16 v124 = 0;
            char v118 = v163;
            unsigned int v114 = a7 >> v163;
            char v154 = v162;
            unsigned int v140 = a8 >> v162;
            unsigned int v158 = v166;
            unsigned int v112 = a11 + a7;
            int v108 = ((1 << v163) - 1) & a7;
            int v110 = ((1 << v163) - 1) & (a11 + a7);
            int v106 = (1 << v163) - v108;
            unsigned int v138 = a12 + a8;
            int v126 = ((1 << v162) - 1) & a8;
            int v134 = (1 << v162) - v126;
            int v136 = ((1 << v162) - 1) & (a12 + a8);
            int v116 = 1 << v163;
            if (1 << v163 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v163;
            }
            int v142 = 1 << v162;
            if (1 << v162 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v162;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v150 = v24;
            unsigned int v132 = ~(-1 << v24);
            int v152 = v23;
            unsigned int v130 = ~(-1 << v23);
            do
            {
              if (v158)
              {
                int v25 = 0;
                unsigned __int16 v26 = 0;
                unsigned int v27 = (v20 + v114) << v118;
                unsigned int v28 = a11;
                if (v112 >= (v20 + v114 + 1) << v118) {
                  unsigned int v28 = v106;
                }
                int v29 = v116;
                if (v112 < (v20 + v114 + 1) << v118) {
                  int v29 = v110;
                }
                int v30 = v20 << v118;
                if (v27 >= a7) {
                  unsigned int v31 = v29;
                }
                else {
                  unsigned int v31 = v28;
                }
                unsigned int v32 = v108;
                if (v27 >= a7) {
                  unsigned int v32 = 0;
                }
                unsigned int v145 = v32;
                uint64_t v128 = a2 + 24LL * (v32 + v30);
                do
                {
                  LOWORD(v33) = v124;
                  HIWORD(v33) = v26;
                  unint64_t result = sub_34358(v164, v33);
                  int v34 = *(_DWORD *)(v161 + 4LL * result);
                  if (v34 < 0)
                  {
                    unint64_t v35 = v161 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                    unsigned int v36 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v36) {
                      v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v37 = a12;
                    if (v138 >= (v25 + v140 + 1) << v154) {
                      unsigned int v37 = v134;
                    }
                    int v38 = v142;
                    if (v138 < (v25 + v140 + 1) << v154) {
                      int v38 = v136;
                    }
                    if ((v25 + v140) << v154 >= a8) {
                      unsigned int v39 = v38;
                    }
                    else {
                      unsigned int v39 = v37;
                    }
                    uint64_t v40 = sub_34508(v132, 0, v150, v152);
                    uint64_t v41 = sub_34508(0, v130, v150, v152);
                    unint64_t result = sub_34508(v145, 0, v150, v152);
                    if (v39)
                    {
                      uint64_t v42 = result;
                      if ((v25 + v140) << v154 >= a8) {
                        unsigned int v43 = 0;
                      }
                      else {
                        unsigned int v43 = v126;
                      }
                      uint64_t v44 = v128 + (v43 + (v25 << v154)) * a13;
                      unint64_t result = sub_34508(0, v43, v150, v152);
                      for (int i = 0; i != v39; ++i)
                      {
                        unsigned int v46 = v31;
                        uint64_t v47 = v44;
                        for (uint64_t j = v42; v46; --v46)
                        {
                          unint64_t v49 = v35 + 24 * (j + result);
                          __int128 v50 = *(_OWORD *)v49;
                          *(void *)(v47 + 16) = *(void *)(v49 + 16);
                          *(_OWORD *)uint64_t v47 = v50;
                          v47 += 24LL;
                          uint64_t j = (j - v40) & v40;
                        }

                        unint64_t result = (result - v41) & v41;
                        v44 += a13;
                      }
                    }
                  }

                  int v25 = ++v26;
                }

                while (v158 > v26);
              }

              int v20 = ++v124;
            }

            while (v122 > v124);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v164, &v163);
          unsigned int v66 = 1 << v163;
          char v67 = *((_BYTE *)a14 + 15);
          unsigned int v68 = 1 << v67;
          if (v67) {
            BOOL v69 = v68 > a3;
          }
          else {
            BOOL v69 = 1;
          }
          BOOL v70 = v69 || v68 > a4;
          int v71 = (~(-1 << v67) + a3) & (-1 << v67);
          if (v70) {
            int v72 = a3;
          }
          else {
            int v72 = v71;
          }
          unsigned int v125 = a8 >> v163;
          int v127 = 1 << v163;
          unsigned int v73 = v66 - 1;
          unsigned int v123 = a12 + a8;
          char v119 = v163;
          unsigned int v74 = (v66 - 1 + a12 + a8) >> v163;
          if (a8 >> v163 < v74)
          {
            unsigned int v115 = (v72 + ~(-1 << SLOBYTE(v164[0]))) >> SLOBYTE(v164[0]);
            unsigned int v75 = a7 >> SLOBYTE(v164[0]);
            char v153 = v164[0];
            unsigned int v146 = ((1 << SLOBYTE(v164[0])) - 1 + a11 + a7) >> SLOBYTE(v164[0]);
            int v141 = ((1 << SLOBYTE(v164[0])) - 1) & (a11 + a7);
            unsigned int v143 = a11 + a7;
            uint64_t v151 = ((1 << SLOBYTE(v164[0])) - 1) & a7;
            unsigned int v139 = (1 << SLOBYTE(v164[0])) - v151;
            int v111 = v73 & v123;
            unsigned int v76 = 1 << v163;
            uint64_t v113 = v73 & a8;
            unsigned int v109 = v66 - v113;
            int v144 = 1 << SLOBYTE(v164[0]);
            if (1 << SLOBYTE(v164[0]) >= a5) {
              unsigned int v77 = a5;
            }
            else {
              unsigned int v77 = 1 << SLOBYTE(v164[0]);
            }
            if (v66 >= a6) {
              unsigned int v76 = a6;
            }
            unsigned int v78 = 32 - __clz(v76 - 1);
            if (v76 < 2) {
              unsigned int v78 = 0;
            }
            unsigned int v79 = 32 - __clz(v77 - 1);
            if (v77 >= 2) {
              unsigned int v80 = v79;
            }
            else {
              unsigned int v80 = 0;
            }
            int v155 = v80;
            unsigned int v107 = ~(-1 << v80);
            int v157 = v78;
            unsigned int v105 = ~(-1 << v78);
            unsigned int v81 = a8 >> v163;
            uint64_t v121 = v15;
            unsigned int v117 = (v66 - 1 + a12 + a8) >> v163;
            unsigned int v137 = a7 >> SLOBYTE(v164[0]);
            do
            {
              if (v75 >= v146)
              {
                unsigned int v104 = v81 + 1;
              }

              else
              {
                unsigned int v159 = v81 << v119;
                unsigned int v129 = v81 + 1;
                int v82 = v127;
                if (v123 < (v81 + 1) << v119) {
                  int v82 = v111;
                }
                int v148 = v82;
                if (v123 >= (v81 + 1) << v119) {
                  unsigned int v83 = v109;
                }
                else {
                  unsigned int v83 = v19;
                }
                int v135 = v81 * v115;
                unsigned int v84 = v75;
                uint64_t v85 = sub_34508(v107, 0, v155, v157);
                uint64_t v86 = sub_34508(0, v105, v155, v157);
                if (v159 >= a8) {
                  unsigned int v87 = v148;
                }
                else {
                  unsigned int v87 = v83;
                }
                if (v159 >= a8) {
                  unsigned int v88 = 0;
                }
                else {
                  unsigned int v88 = v113;
                }
                unsigned int v133 = v88;
                uint64_t v131 = v15 + (v88 + ((v81 - v125) << v119) - v113) * a13;
                do
                {
                  unsigned int v89 = v84 << v153;
                  unsigned int v160 = v84 + 1;
                  unsigned int v90 = a11;
                  if (v143 >= (v84 + 1) << v153) {
                    unsigned int v90 = v139;
                  }
                  int v91 = v144;
                  if (v143 < (v84 + 1) << v153) {
                    int v91 = v141;
                  }
                  if (v89 >= a7) {
                    unsigned int v92 = 0;
                  }
                  else {
                    unsigned int v92 = v151;
                  }
                  if (v89 >= a7) {
                    unsigned int v93 = v91;
                  }
                  else {
                    unsigned int v93 = v90;
                  }
                  int v94 = a14[3];
                  int v149 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v92, 0, v155, v157);
                  if (v87)
                  {
                    uint64_t v95 = result;
                    uint64_t v96 = (v84 + v135) * v94 * v149 + v161;
                    uint64_t v97 = v131 + 24 * (v92 + ((v84 - v137) << v153) - v151);
                    unint64_t result = sub_34508(0, v133, v155, v157);
                    for (int k = 0; k != v87; ++k)
                    {
                      unsigned int v99 = v93;
                      uint64_t v100 = v97;
                      for (uint64_t m = v95; v99; --v99)
                      {
                        unsigned int v102 = (__int128 *)(v96 + 24 * (m + result));
                        __int128 v103 = *v102;
                        *(void *)(v100 + 16) = *((void *)v102 + 2);
                        *(_OWORD *)uint64_t v100 = v103;
                        v100 += 24LL;
                        uint64_t m = (m - v85) & v85;
                      }

                      unint64_t result = (result - v86) & v86;
                      v97 += a13;
                    }
                  }

                  ++v84;
                }

                while (v160 != v146);
                uint64_t v15 = v121;
                unsigned int v19 = a12;
                unsigned int v74 = v117;
                unsigned int v75 = v137;
                unsigned int v104 = v129;
              }

              unsigned int v81 = v104;
            }

            while (v104 != v74);
          }
        }
      }

      else
      {
        unsigned int v51 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v52 = v51;
        }
        else {
          int v52 = 0;
        }
        unsigned int v53 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v54 = v53;
        }
        else {
          int v54 = 0;
        }
        uint64_t v55 = sub_34508(~(-1 << v54), 0, v54, v52);
        uint64_t v56 = sub_34508(0, ~(-1 << v52), v54, v52);
        unint64_t result = sub_34508(a7, 0, v54, v52);
        if (a12)
        {
          uint64_t v57 = result;
          unint64_t result = sub_34508(0, a8, v54, v52);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v59 = a11;
            uint64_t v60 = v15;
            for (iint i = v57; v59; --v59)
            {
              uint64_t v62 = v18 + 24 * (ii + result);
              __int128 v63 = *(_OWORD *)v62;
              *(void *)(v60 + 16) = *(void *)(v62 + 16);
              *(_OWORD *)uint64_t v60 = v63;
              v60 += 24LL;
              iint i = (ii - v55) & v55;
            }

            unint64_t result = (result - v56) & v56;
            v15 += a13;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_45468( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    unsigned int v18 = a12;
    if (a14)
    {
      uint64_t v161 = result;
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v164);
        unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v163, &v162);
        unsigned int v123 = v165;
        if (v165)
        {
          int v19 = 0;
          unsigned __int16 v125 = 0;
          char v121 = v163;
          unsigned int v117 = a7 >> v163;
          char v155 = v162;
          unsigned int v142 = a8 >> v162;
          unsigned int v159 = v166;
          unsigned int v115 = a11 + a7;
          int v111 = ((1 << v163) - 1) & a7;
          int v113 = ((1 << v163) - 1) & (a11 + a7);
          int v109 = (1 << v163) - v111;
          unsigned int v140 = a12 + a8;
          int v127 = ((1 << v162) - 1) & a8;
          int v136 = (1 << v162) - v127;
          int v138 = ((1 << v162) - 1) & (a12 + a8);
          int v119 = 1 << v163;
          if (1 << v163 >= a5) {
            unsigned int v20 = a5;
          }
          else {
            unsigned int v20 = 1 << v163;
          }
          int v144 = 1 << v162;
          if (1 << v162 >= a6) {
            unsigned int v21 = a6;
          }
          else {
            unsigned int v21 = 1 << v162;
          }
          unsigned int v22 = 32 - __clz(v21 - 1);
          if (v21 < 2) {
            unsigned int v22 = 0;
          }
          unsigned int v23 = 32 - __clz(v20 - 1);
          if (v20 < 2) {
            unsigned int v23 = 0;
          }
          int v151 = v23;
          int v153 = v22;
          unsigned int v132 = ~(-1 << v22);
          unsigned int v134 = ~(-1 << v23);
          int v24 = v23;
          do
          {
            if (v159)
            {
              int v25 = 0;
              unsigned __int16 v26 = 0;
              unsigned int v27 = (v19 + v117) << v121;
              unsigned int v28 = a11;
              if (v115 >= (v19 + v117 + 1) << v121) {
                unsigned int v28 = v109;
              }
              int v29 = v119;
              if (v115 < (v19 + v117 + 1) << v121) {
                int v29 = v113;
              }
              int v30 = v19 << v121;
              if (v27 >= a7) {
                unsigned int v31 = v29;
              }
              else {
                unsigned int v31 = v28;
              }
              unsigned int v32 = v111;
              if (v27 >= a7) {
                unsigned int v32 = 0;
              }
              unsigned int v147 = v32;
              uint64_t v129 = 3LL * (v32 + v30) + a2;
              do
              {
                LOWORD(v33) = v125;
                HIWORD(v33) = v26;
                unint64_t result = sub_34358(v164, v33);
                int v34 = *(_DWORD *)(v17 + 4LL * result);
                if (v34 < 0)
                {
                  unint64_t v35 = v161 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                  unsigned int v36 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v36) {
                    v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v37 = a12;
                  if (v140 >= (v25 + v142 + 1) << v155) {
                    unsigned int v37 = v136;
                  }
                  int v38 = v144;
                  if (v140 < (v25 + v142 + 1) << v155) {
                    int v38 = v138;
                  }
                  if ((v25 + v142) << v155 >= a8) {
                    unsigned int v39 = v38;
                  }
                  else {
                    unsigned int v39 = v37;
                  }
                  uint64_t v40 = sub_34508(v134, 0, v24, v153);
                  uint64_t v41 = sub_34508(0, v132, v24, v153);
                  unint64_t result = sub_34508(v147, 0, v24, v153);
                  if (v39)
                  {
                    uint64_t v42 = result;
                    if ((v25 + v142) << v155 >= a8) {
                      unsigned int v43 = 0;
                    }
                    else {
                      unsigned int v43 = v127;
                    }
                    uint64_t v44 = v129 + (v43 + (v25 << v155)) * a13;
                    unint64_t result = sub_34508(0, v43, v151, v153);
                    for (int i = 0; i != v39; ++i)
                    {
                      unsigned int v46 = v31;
                      uint64_t v47 = v44;
                      for (uint64_t j = v42; v46; --v46)
                      {
                        unint64_t v49 = 3 * (j + result) + v35;
                        __int16 v50 = *(_WORD *)v49;
                        *(_BYTE *)(v47 + 2) = *(_BYTE *)(v49 + 2);
                        *(_WORD *)uint64_t v47 = v50;
                        v47 += 3LL;
                        uint64_t j = (j - v40) & v40;
                      }

                      unint64_t result = (result - v41) & v41;
                      v44 += a13;
                    }
                  }
                }

                int v25 = ++v26;
                uint64_t v17 = v161;
              }

              while (v159 > v26);
            }

            int v19 = ++v125;
          }

          while (v123 > v125);
        }
      }

      else
      {
        unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v164, &v163);
        unsigned int v68 = 1 << v163;
        char v69 = *((_BYTE *)a14 + 15);
        unsigned int v70 = 1 << v69;
        if (v69) {
          BOOL v71 = v70 > a3;
        }
        else {
          BOOL v71 = 1;
        }
        BOOL v72 = v71 || v70 > a4;
        int v73 = (~(-1 << v69) + a3) & (-1 << v69);
        if (v72) {
          int v74 = a3;
        }
        else {
          int v74 = v73;
        }
        unsigned int v128 = a8 >> v163;
        int v130 = 1 << v163;
        unsigned int v75 = v68 - 1;
        unsigned int v126 = a12 + a8;
        char v124 = v163;
        unsigned int v76 = (v68 - 1 + a12 + a8) >> v163;
        if (a8 >> v163 < v76)
        {
          unsigned int v120 = (v74 + ~(-1 << SLOBYTE(v164[0]))) >> SLOBYTE(v164[0]);
          unsigned int v77 = a7 >> SLOBYTE(v164[0]);
          char v154 = v164[0];
          unsigned int v150 = ((1 << SLOBYTE(v164[0])) - 1 + a11 + a7) >> SLOBYTE(v164[0]);
          int v145 = ((1 << SLOBYTE(v164[0])) - 1) & (a11 + a7);
          unsigned int v146 = a11 + a7;
          uint64_t v152 = ((1 << SLOBYTE(v164[0])) - 1) & a7;
          unsigned int v143 = (1 << SLOBYTE(v164[0])) - v152;
          int v116 = v75 & v126;
          unsigned int v78 = 1 << v163;
          uint64_t v118 = v75 & a8;
          unsigned int v114 = v68 - v118;
          int v148 = 1 << SLOBYTE(v164[0]);
          if (1 << SLOBYTE(v164[0]) >= a5) {
            unsigned int v79 = a5;
          }
          else {
            unsigned int v79 = 1 << SLOBYTE(v164[0]);
          }
          if (v68 >= a6) {
            unsigned int v78 = a6;
          }
          unsigned int v80 = 32 - __clz(v78 - 1);
          if (v78 < 2) {
            unsigned int v80 = 0;
          }
          unsigned int v81 = 32 - __clz(v79 - 1);
          if (v79 >= 2) {
            unsigned int v82 = v81;
          }
          else {
            unsigned int v82 = 0;
          }
          int v156 = v82;
          unsigned int v112 = ~(-1 << v82);
          int v158 = v80;
          unsigned int v110 = ~(-1 << v80);
          unsigned int v83 = a8 >> v163;
          unsigned int v122 = (v68 - 1 + a12 + a8) >> v163;
          unsigned int v141 = a7 >> SLOBYTE(v164[0]);
          do
          {
            if (v77 >= v150)
            {
              unsigned int v108 = v83 + 1;
            }

            else
            {
              unsigned int v84 = v83 << v124;
              unsigned int v133 = v83 + 1;
              if (v126 >= (v83 + 1) << v124) {
                int v85 = v130;
              }
              else {
                int v85 = v116;
              }
              if (v126 >= (v83 + 1) << v124) {
                unsigned int v86 = v114;
              }
              else {
                unsigned int v86 = v18;
              }
              int v139 = v83 * v120;
              uint64_t v87 = sub_34508(v112, 0, v156, v158);
              uint64_t v88 = sub_34508(0, v110, v156, v158);
              BOOL v89 = v84 >= a8;
              if (v84 >= a8) {
                int v90 = v85;
              }
              else {
                int v90 = v86;
              }
              if (v89) {
                unsigned int v91 = 0;
              }
              else {
                unsigned int v91 = v118;
              }
              unsigned int v137 = v91;
              uint64_t v135 = (v91 + ((v83 - v128) << v124) - v118) * a13;
              do
              {
                unsigned int v92 = v77 << v154;
                unsigned int v160 = v77 + 1;
                unsigned int v93 = a11;
                if (v146 >= (v77 + 1) << v154) {
                  unsigned int v93 = v143;
                }
                int v94 = v148;
                if (v146 < (v77 + 1) << v154) {
                  int v94 = v145;
                }
                if (v92 >= a7) {
                  unsigned int v95 = 0;
                }
                else {
                  unsigned int v95 = v152;
                }
                if (v92 >= a7) {
                  unsigned int v96 = v94;
                }
                else {
                  unsigned int v96 = v93;
                }
                int v97 = a14[3];
                int v98 = *((unsigned __int8 *)a14 + 9);
                unint64_t result = sub_34508(v95, 0, v156, v158);
                if (v90)
                {
                  uint64_t v99 = result;
                  uint64_t v100 = (v77 + v139) * v97 * v98 + v161;
                  uint64_t v101 = 3 * (v95 + ((v77 - v141) << v154) - v152) + a2 + v135;
                  unint64_t result = sub_34508(0, v137, v156, v158);
                  for (int k = 0; k != v90; ++k)
                  {
                    unsigned int v103 = v96;
                    uint64_t v104 = v101;
                    for (uint64_t m = v99; v103; --v103)
                    {
                      int v106 = (__int16 *)(v100 + 3 * (m + result));
                      __int16 v107 = *v106;
                      *(_BYTE *)(v104 + 2) = *((_BYTE *)v106 + 2);
                      *(_WORD *)uint64_t v104 = v107;
                      v104 += 3LL;
                      uint64_t m = (m - v87) & v87;
                    }

                    unint64_t result = (result - v88) & v88;
                    v101 += a13;
                  }
                }

                ++v77;
              }

              while (v160 != v150);
              unsigned int v18 = a12;
              unsigned int v76 = v122;
              unsigned int v77 = v141;
              unsigned int v108 = v133;
            }

            unsigned int v83 = v108;
          }

          while (v108 != v76);
        }
      }
    }

    else
    {
      unsigned int v51 = 32 - __clz(a6 - 1);
      if (a6 >= 2) {
        int v52 = v51;
      }
      else {
        int v52 = 0;
      }
      unsigned int v53 = 32 - __clz(a5 - 1);
      if (a5 >= 2) {
        int v54 = v53;
      }
      else {
        int v54 = 0;
      }
      uint64_t v56 = sub_34508(~(-1 << v54), 0, v54, v52);
      uint64_t v57 = sub_34508(0, ~(-1 << v52), v54, v52);
      unint64_t result = sub_34508(a7, 0, v54, v52);
      if (a12)
      {
        uint64_t v58 = result;
        unint64_t result = sub_34508(0, a8, v54, v52);
        uint64_t v59 = a2;
        for (int n = 0; n != a12; ++n)
        {
          unsigned int v61 = a11;
          uint64_t v62 = v59;
          for (iint i = v58; v61; --v61)
          {
            uint64_t v64 = 3 * (ii + result) + v17;
            __int16 v65 = *(_WORD *)v64;
            *(_BYTE *)(v62 + 2) = *(_BYTE *)(v64 + 2);
            *(_WORD *)uint64_t v62 = v65;
            v62 += 3LL;
            iint i = (ii - v56) & v56;
          }

          unint64_t result = (result - v57) & v57;
          v59 += a13;
        }
      }
    }
  }

  return result;
}

uint64_t sub_45D30( uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_476F0(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_45D4C( uint64_t result, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v150 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v153);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v152, &v151);
          unsigned int v116 = v154;
          if (v154)
          {
            int v118 = 0;
            char v112 = v152;
            unsigned int v108 = a7 >> v152;
            char v143 = v151;
            unsigned int v133 = a8 >> v151;
            unsigned int v147 = v155;
            unsigned int v106 = a11 + a7;
            int v102 = ((1 << v152) - 1) & a7;
            int v104 = ((1 << v152) - 1) & (a11 + a7);
            int v100 = (1 << v152) - v102;
            unsigned int v131 = a12 + a8;
            int v120 = ((1 << v151) - 1) & a8;
            int v127 = (1 << v151) - v120;
            int v129 = ((1 << v151) - 1) & (a12 + a8);
            int v110 = 1 << v152;
            if (1 << v152 >= a5) {
              unsigned int v20 = a5;
            }
            else {
              unsigned int v20 = 1 << v152;
            }
            int v135 = 1 << v151;
            if (1 << v151 >= a6) {
              unsigned int v21 = a6;
            }
            else {
              unsigned int v21 = 1 << v151;
            }
            unsigned int v22 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v22 = 0;
            }
            unsigned int v23 = 32 - __clz(v20 - 1);
            if (v20 >= 2) {
              int v24 = v23;
            }
            else {
              int v24 = 0;
            }
            int v141 = v22;
            unsigned int v124 = ~(-1 << v22);
            do
            {
              if (v147)
              {
                int v25 = 0;
                unsigned int v26 = (v118 + v108) << v112;
                unsigned int v27 = a11;
                if (v106 >= (v118 + v108 + 1) << v112) {
                  unsigned int v27 = v100;
                }
                int v28 = v110;
                if (v106 < (v118 + v108 + 1) << v112) {
                  int v28 = v104;
                }
                if (v26 >= a7) {
                  unsigned int v29 = v28;
                }
                else {
                  unsigned int v29 = v27;
                }
                unsigned int v30 = v102;
                if (v26 >= a7) {
                  unsigned int v30 = 0;
                }
                unsigned int v139 = v30;
                unsigned int v122 = &a2[v30 + (v118 << v112)];
                do
                {
                  LOWORD(v31) = v118;
                  HIWORD(v31) = v25;
                  unint64_t result = sub_34358(v153, v31);
                  int v32 = *(_DWORD *)(v18 + 4LL * result);
                  if (v32 < 0)
                  {
                    unint64_t v33 = v150 - *(void *)(a15 + 24) + ((unint64_t)(v32 & 0x3FFFFFF) << 14);
                    unsigned int v34 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v34) {
                      v33 += sub_343C0( *(_DWORD *)a15,  v34,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v35 = (v25 + v133) << v143;
                    unsigned int v36 = a12;
                    if (v131 >= (v25 + v133 + 1) << v143) {
                      unsigned int v36 = v127;
                    }
                    int v37 = v135;
                    if (v131 < (v25 + v133 + 1) << v143) {
                      int v37 = v129;
                    }
                    if (v35 >= a8) {
                      unsigned int v38 = v37;
                    }
                    else {
                      unsigned int v38 = v36;
                    }
                    uint64_t v39 = sub_34508(~(-1 << v24), 0, v24, v141);
                    uint64_t v40 = sub_34508(0, v124, v24, v141);
                    unint64_t result = sub_34508(v139, 0, v24, v141);
                    if (v38)
                    {
                      uint64_t v41 = result;
                      if (v35 >= a8) {
                        unsigned int v42 = 0;
                      }
                      else {
                        unsigned int v42 = v120;
                      }
                      unsigned int v43 = (void *)((char *)v122 + (v42 + (v25 << v143)) * a13);
                      unint64_t result = sub_34508(0, v42, v24, v141);
                      for (int i = 0; i != v38; ++i)
                      {
                        unsigned int v45 = v29;
                        unsigned int v46 = v43;
                        for (uint64_t j = v41; v45; --v45)
                        {
                          *v46++ = *(void *)(v33 + 8 * (j + result));
                          uint64_t j = (j - v39) & v39;
                        }

                        unint64_t result = (result - v40) & v40;
                        unsigned int v43 = (void *)((char *)v43 + a13);
                      }
                    }
                  }

                  ++v25;
                  uint64_t v18 = v150;
                }

                while (v147 > (unsigned __int16)v25);
              }

              ++v118;
            }

            while (v116 > (unsigned __int16)v118);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v153, &v152);
          unsigned int v61 = 1 << v152;
          char v62 = *((_BYTE *)a14 + 15);
          unsigned int v63 = 1 << v62;
          if (v62) {
            BOOL v64 = v63 > a3;
          }
          else {
            BOOL v64 = 1;
          }
          BOOL v65 = v64 || v63 > a4;
          int v66 = (~(-1 << v62) + a3) & (-1 << v62);
          if (v65) {
            int v67 = a3;
          }
          else {
            int v67 = v66;
          }
          unsigned int v117 = a8 >> v152;
          int v119 = 1 << v152;
          unsigned int v68 = v61 - 1;
          unsigned int v113 = a12 + a8;
          char v111 = v152;
          unsigned int v69 = (v61 - 1 + a12 + a8) >> v152;
          if (a8 >> v152 < v69)
          {
            unsigned int v107 = (v67 + ~(-1 << SLOBYTE(v153[0]))) >> SLOBYTE(v153[0]);
            unsigned int v70 = a7 >> SLOBYTE(v153[0]);
            char v142 = v153[0];
            unsigned int v137 = ((1 << SLOBYTE(v153[0])) - 1 + a11 + a7) >> SLOBYTE(v153[0]);
            int v132 = ((1 << SLOBYTE(v153[0])) - 1) & (a11 + a7);
            unsigned int v134 = a11 + a7;
            uint64_t v140 = ((1 << SLOBYTE(v153[0])) - 1) & a7;
            unsigned int v130 = (1 << SLOBYTE(v153[0])) - v140;
            int v103 = v68 & v113;
            unsigned int v71 = 1 << v152;
            uint64_t v105 = v68 & a8;
            unsigned int v101 = v61 - v105;
            int v136 = 1 << SLOBYTE(v153[0]);
            if (1 << SLOBYTE(v153[0]) >= a5) {
              unsigned int v72 = a5;
            }
            else {
              unsigned int v72 = 1 << SLOBYTE(v153[0]);
            }
            if (v61 >= a6) {
              unsigned int v71 = a6;
            }
            unsigned int v73 = 32 - __clz(v71 - 1);
            if (v71 < 2) {
              unsigned int v73 = 0;
            }
            unsigned int v74 = 32 - __clz(v72 - 1);
            if (v72 >= 2) {
              unsigned int v75 = v74;
            }
            else {
              unsigned int v75 = 0;
            }
            int v144 = v75;
            unsigned int v99 = ~(-1 << v75);
            int v146 = v73;
            unsigned int v98 = ~(-1 << v73);
            unsigned int v76 = a8 >> v152;
            unsigned int v115 = v15;
            unsigned int v109 = (v61 - 1 + a12 + a8) >> v152;
            unsigned int v128 = a7 >> SLOBYTE(v153[0]);
            do
            {
              if (v70 >= v137)
              {
                unsigned int v97 = v76 + 1;
              }

              else
              {
                unsigned int v148 = v76 << v111;
                unsigned int v121 = v76 + 1;
                if (v113 >= (v76 + 1) << v111) {
                  int v77 = v119;
                }
                else {
                  int v77 = v103;
                }
                if (v113 >= (v76 + 1) << v111) {
                  unsigned int v78 = v101;
                }
                else {
                  unsigned int v78 = v19;
                }
                int v126 = v76 * v107;
                uint64_t v79 = sub_34508(v99, 0, v144, v146);
                uint64_t v80 = sub_34508(0, v98, v144, v146);
                if (v148 >= a8) {
                  int v81 = v77;
                }
                else {
                  int v81 = v78;
                }
                if (v148 >= a8) {
                  unsigned int v82 = 0;
                }
                else {
                  unsigned int v82 = v105;
                }
                unsigned int v125 = v82;
                unsigned int v123 = (char *)v15 + (v82 + ((v76 - v117) << v111) - v105) * a13;
                do
                {
                  unsigned int v83 = v70 << v142;
                  unsigned int v149 = v70 + 1;
                  unsigned int v84 = a11;
                  if (v134 >= (v70 + 1) << v142) {
                    unsigned int v84 = v130;
                  }
                  int v85 = v136;
                  if (v134 < (v70 + 1) << v142) {
                    int v85 = v132;
                  }
                  if (v83 >= a7) {
                    unsigned int v86 = 0;
                  }
                  else {
                    unsigned int v86 = v140;
                  }
                  if (v83 >= a7) {
                    unsigned int v87 = v85;
                  }
                  else {
                    unsigned int v87 = v84;
                  }
                  int v88 = a14[3];
                  int v89 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v86, 0, v144, v146);
                  if (v81)
                  {
                    uint64_t v90 = result;
                    uint64_t v91 = (v70 + v126) * v88 * v89 + v150;
                    unsigned int v92 = &v123[8 * (v86 + ((v70 - v128) << v142) - v140)];
                    unint64_t result = sub_34508(0, v125, v144, v146);
                    for (int k = 0; k != v81; ++k)
                    {
                      unsigned int v94 = v87;
                      unsigned int v95 = v92;
                      for (uint64_t m = v90; v94; --v94)
                      {
                        *(void *)unsigned int v95 = *(void *)(v91 + 8 * (m + result));
                        v95 += 8;
                        uint64_t m = (m - v79) & v79;
                      }

                      unint64_t result = (result - v80) & v80;
                      v92 += a13;
                    }
                  }

                  ++v70;
                }

                while (v149 != v137);
                uint64_t v15 = v115;
                unsigned int v19 = a12;
                unsigned int v69 = v109;
                unsigned int v70 = v128;
                unsigned int v97 = v121;
              }

              unsigned int v76 = v97;
            }

            while (v97 != v69);
          }
        }
      }

      else
      {
        unsigned int v48 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v49 = v48;
        }
        else {
          int v49 = 0;
        }
        unsigned int v50 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v51 = v50;
        }
        else {
          int v51 = 0;
        }
        uint64_t v52 = sub_34508(~(-1 << v51), 0, v51, v49);
        uint64_t v53 = sub_34508(0, ~(-1 << v49), v51, v49);
        unint64_t result = sub_34508(a7, 0, v51, v49);
        if (a12)
        {
          uint64_t v54 = result;
          unint64_t result = sub_34508(0, a8, v51, v49);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v56 = a11;
            uint64_t v57 = v15;
            for (iint i = v54; v56; --v56)
            {
              *v57++ = *(void *)(v18 + 8 * (ii + result));
              iint i = (ii - v52) & v52;
            }

            unint64_t result = (result - v53) & v53;
            uint64_t v15 = (void *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_465BC( uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v154 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v157);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v156, &v155);
          unsigned int v116 = v158;
          if (v158)
          {
            int v20 = 0;
            unsigned __int16 v118 = 0;
            char v112 = v156;
            unsigned int v108 = a7 >> v156;
            char v147 = v155;
            unsigned int v134 = a8 >> v155;
            unsigned int v151 = v159;
            unsigned int v106 = a11 + a7;
            int v102 = ((1 << v156) - 1) & a7;
            int v104 = ((1 << v156) - 1) & (a11 + a7);
            int v100 = (1 << v156) - v102;
            unsigned int v132 = a12 + a8;
            int v120 = ((1 << v155) - 1) & a8;
            int v128 = (1 << v155) - v120;
            int v130 = ((1 << v155) - 1) & (a12 + a8);
            int v110 = 1 << v156;
            if (1 << v156 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v156;
            }
            int v136 = 1 << v155;
            if (1 << v155 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v155;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v143 = v24;
            int v145 = v23;
            unsigned int v124 = ~(-1 << v23);
            unsigned int v126 = ~(-1 << v24);
            int v25 = v24;
            do
            {
              if (v151)
              {
                int v26 = 0;
                unsigned __int16 v27 = 0;
                unsigned int v28 = (v20 + v108) << v112;
                unsigned int v29 = a11;
                if (v106 >= (v20 + v108 + 1) << v112) {
                  unsigned int v29 = v100;
                }
                int v30 = v110;
                if (v106 < (v20 + v108 + 1) << v112) {
                  int v30 = v104;
                }
                int v31 = v20 << v112;
                if (v28 >= a7) {
                  unsigned int v32 = v30;
                }
                else {
                  unsigned int v32 = v29;
                }
                unsigned int v33 = v102;
                if (v28 >= a7) {
                  unsigned int v33 = 0;
                }
                unsigned int v139 = v33;
                unsigned int v122 = &a2[v33 + v31];
                do
                {
                  LOWORD(v34) = v118;
                  HIWORD(v34) = v27;
                  unint64_t result = sub_34358(v157, v34);
                  int v35 = *(_DWORD *)(v18 + 4LL * result);
                  if (v35 < 0)
                  {
                    unint64_t v36 = v154 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                    unsigned int v37 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v37) {
                      v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v38 = a12;
                    if (v132 >= (v26 + v134 + 1) << v147) {
                      unsigned int v38 = v128;
                    }
                    int v39 = v136;
                    if (v132 < (v26 + v134 + 1) << v147) {
                      int v39 = v130;
                    }
                    if ((v26 + v134) << v147 >= a8) {
                      unsigned int v40 = v39;
                    }
                    else {
                      unsigned int v40 = v38;
                    }
                    uint64_t v41 = sub_34508(v126, 0, v25, v145);
                    uint64_t v42 = sub_34508(0, v124, v25, v145);
                    unint64_t result = sub_34508(v139, 0, v25, v145);
                    if (v40)
                    {
                      uint64_t v43 = result;
                      if ((v26 + v134) << v147 >= a8) {
                        unsigned int v44 = 0;
                      }
                      else {
                        unsigned int v44 = v120;
                      }
                      unsigned int v45 = (_OWORD *)((char *)v122 + (v44 + (v26 << v147)) * a13);
                      unint64_t result = sub_34508(0, v44, v143, v145);
                      for (int i = 0; i != v40; ++i)
                      {
                        unsigned int v47 = v32;
                        unsigned int v48 = v45;
                        for (uint64_t j = v43; v47; --v47)
                        {
                          *v48++ = *(_OWORD *)(v36 + 16 * (j + result));
                          uint64_t j = (j - v41) & v41;
                        }

                        unint64_t result = (result - v42) & v42;
                        unsigned int v45 = (_OWORD *)((char *)v45 + a13);
                      }
                    }
                  }

                  int v26 = ++v27;
                  uint64_t v18 = v154;
                }

                while (v151 > v27);
              }

              int v20 = ++v118;
            }

            while (v116 > v118);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v157, &v156);
          unsigned int v63 = 1 << v156;
          char v64 = *((_BYTE *)a14 + 15);
          unsigned int v65 = 1 << v64;
          if (v64) {
            BOOL v66 = v65 > a3;
          }
          else {
            BOOL v66 = 1;
          }
          BOOL v67 = v66 || v65 > a4;
          int v68 = (~(-1 << v64) + a3) & (-1 << v64);
          if (v67) {
            int v69 = a3;
          }
          else {
            int v69 = v68;
          }
          unsigned int v121 = a8 >> v156;
          int v123 = 1 << v156;
          unsigned int v70 = v63 - 1;
          unsigned int v119 = a12 + a8;
          char v117 = v156;
          unsigned int v71 = (v63 - 1 + a12 + a8) >> v156;
          if (a8 >> v156 < v71)
          {
            unsigned int v111 = (v69 + ~(-1 << SLOBYTE(v157[0]))) >> SLOBYTE(v157[0]);
            unsigned int v72 = a7 >> SLOBYTE(v157[0]);
            char v146 = v157[0];
            unsigned int v142 = ((1 << SLOBYTE(v157[0])) - 1 + a11 + a7) >> SLOBYTE(v157[0]);
            int v137 = ((1 << SLOBYTE(v157[0])) - 1) & (a11 + a7);
            unsigned int v138 = a11 + a7;
            uint64_t v144 = ((1 << SLOBYTE(v157[0])) - 1) & a7;
            unsigned int v135 = (1 << SLOBYTE(v157[0])) - v144;
            int v107 = v70 & v119;
            unsigned int v73 = 1 << v156;
            uint64_t v109 = v70 & a8;
            unsigned int v105 = v63 - v109;
            int v140 = 1 << SLOBYTE(v157[0]);
            if (1 << SLOBYTE(v157[0]) >= a5) {
              unsigned int v74 = a5;
            }
            else {
              unsigned int v74 = 1 << SLOBYTE(v157[0]);
            }
            if (v63 >= a6) {
              unsigned int v73 = a6;
            }
            unsigned int v75 = 32 - __clz(v73 - 1);
            if (v73 < 2) {
              unsigned int v75 = 0;
            }
            unsigned int v76 = 32 - __clz(v74 - 1);
            if (v74 >= 2) {
              unsigned int v77 = v76;
            }
            else {
              unsigned int v77 = 0;
            }
            int v148 = v77;
            unsigned int v103 = ~(-1 << v77);
            int v150 = v75;
            unsigned int v101 = ~(-1 << v75);
            unsigned int v78 = a8 >> v156;
            unsigned int v115 = v15;
            unsigned int v113 = (v63 - 1 + a12 + a8) >> v156;
            unsigned int v133 = a7 >> SLOBYTE(v157[0]);
            do
            {
              if (v72 >= v142)
              {
                unsigned int v99 = v78 + 1;
              }

              else
              {
                unsigned int v152 = v78 << v117;
                unsigned int v125 = v78 + 1;
                if (v119 >= (v78 + 1) << v117) {
                  int v79 = v123;
                }
                else {
                  int v79 = v107;
                }
                if (v119 >= (v78 + 1) << v117) {
                  unsigned int v80 = v105;
                }
                else {
                  unsigned int v80 = v19;
                }
                int v131 = v78 * v111;
                uint64_t v81 = sub_34508(v103, 0, v148, v150);
                uint64_t v82 = sub_34508(0, v101, v148, v150);
                if (v152 >= a8) {
                  int v83 = v79;
                }
                else {
                  int v83 = v80;
                }
                if (v152 >= a8) {
                  unsigned int v84 = 0;
                }
                else {
                  unsigned int v84 = v109;
                }
                unsigned int v129 = v84;
                int v127 = (char *)v15 + (v84 + ((v78 - v121) << v117) - v109) * a13;
                do
                {
                  unsigned int v85 = v72 << v146;
                  unsigned int v153 = v72 + 1;
                  unsigned int v86 = a11;
                  if (v138 >= (v72 + 1) << v146) {
                    unsigned int v86 = v135;
                  }
                  int v87 = v140;
                  if (v138 < (v72 + 1) << v146) {
                    int v87 = v137;
                  }
                  if (v85 >= a7) {
                    unsigned int v88 = 0;
                  }
                  else {
                    unsigned int v88 = v144;
                  }
                  if (v85 >= a7) {
                    unsigned int v89 = v87;
                  }
                  else {
                    unsigned int v89 = v86;
                  }
                  int v90 = a14[3];
                  int v91 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v88, 0, v148, v150);
                  if (v83)
                  {
                    uint64_t v92 = result;
                    uint64_t v93 = (v72 + v131) * v90 * v91 + v154;
                    unsigned int v94 = &v127[16 * (v88 + ((v72 - v133) << v146) - v144)];
                    unint64_t result = sub_34508(0, v129, v148, v150);
                    for (int k = 0; k != v83; ++k)
                    {
                      unsigned int v96 = v89;
                      unsigned int v97 = v94;
                      for (uint64_t m = v92; v96; --v96)
                      {
                        *(_OWORD *)unsigned int v97 = *(_OWORD *)(v93 + 16 * (m + result));
                        v97 += 16;
                        uint64_t m = (m - v81) & v81;
                      }

                      unint64_t result = (result - v82) & v82;
                      v94 += a13;
                    }
                  }

                  ++v72;
                }

                while (v153 != v142);
                uint64_t v15 = v115;
                unsigned int v19 = a12;
                unsigned int v71 = v113;
                unsigned int v72 = v133;
                unsigned int v99 = v125;
              }

              unsigned int v78 = v99;
            }

            while (v99 != v71);
          }
        }
      }

      else
      {
        unsigned int v50 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v51 = v50;
        }
        else {
          int v51 = 0;
        }
        unsigned int v52 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v53 = v52;
        }
        else {
          int v53 = 0;
        }
        uint64_t v54 = sub_34508(~(-1 << v53), 0, v53, v51);
        uint64_t v55 = sub_34508(0, ~(-1 << v51), v53, v51);
        unint64_t result = sub_34508(a7, 0, v53, v51);
        if (a12)
        {
          uint64_t v56 = result;
          unint64_t result = sub_34508(0, a8, v53, v51);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v58 = a11;
            uint64_t v59 = v15;
            for (iint i = v56; v58; --v58)
            {
              *v59++ = *(_OWORD *)(v18 + 16 * (ii + result));
              iint i = (ii - v54) & v54;
            }

            unint64_t result = (result - v55) & v55;
            uint64_t v15 = (_OWORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_46E50( uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v160 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v163);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v162, &v161);
          unsigned int v122 = v164;
          if (v164)
          {
            int v20 = 0;
            unsigned __int16 v124 = 0;
            char v118 = v162;
            unsigned int v114 = a7 >> v162;
            char v153 = v161;
            unsigned int v140 = a8 >> v161;
            unsigned int v157 = v165;
            unsigned int v112 = a11 + a7;
            int v108 = ((1 << v162) - 1) & a7;
            int v110 = ((1 << v162) - 1) & (a11 + a7);
            int v106 = (1 << v162) - v108;
            unsigned int v138 = a12 + a8;
            int v126 = ((1 << v161) - 1) & a8;
            int v134 = (1 << v161) - v126;
            int v136 = ((1 << v161) - 1) & (a12 + a8);
            int v116 = 1 << v162;
            if (1 << v162 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v162;
            }
            int v142 = 1 << v161;
            if (1 << v161 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v161;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v149 = v24;
            int v151 = v23;
            unsigned int v130 = ~(-1 << v23);
            unsigned int v132 = ~(-1 << v24);
            int v25 = v24;
            do
            {
              if (v157)
              {
                int v26 = 0;
                unsigned __int16 v27 = 0;
                unsigned int v28 = (v20 + v114) << v118;
                unsigned int v29 = a11;
                if (v112 >= (v20 + v114 + 1) << v118) {
                  unsigned int v29 = v106;
                }
                int v30 = v116;
                if (v112 < (v20 + v114 + 1) << v118) {
                  int v30 = v110;
                }
                int v31 = v20 << v118;
                if (v28 >= a7) {
                  unsigned int v32 = v30;
                }
                else {
                  unsigned int v32 = v29;
                }
                unsigned int v33 = v108;
                if (v28 >= a7) {
                  unsigned int v33 = 0;
                }
                unsigned int v145 = v33;
                int v128 = &a2[2 * v33 + 2 * v31];
                do
                {
                  LOWORD(v34) = v124;
                  HIWORD(v34) = v27;
                  unint64_t result = sub_34358(v163, v34);
                  int v35 = *(_DWORD *)(v18 + 4LL * result);
                  if (v35 < 0)
                  {
                    unint64_t v36 = v160 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                    unsigned int v37 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v37) {
                      v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v38 = a12;
                    if (v138 >= (v26 + v140 + 1) << v153) {
                      unsigned int v38 = v134;
                    }
                    int v39 = v142;
                    if (v138 < (v26 + v140 + 1) << v153) {
                      int v39 = v136;
                    }
                    if ((v26 + v140) << v153 >= a8) {
                      unsigned int v40 = v39;
                    }
                    else {
                      unsigned int v40 = v38;
                    }
                    uint64_t v41 = sub_34508(v132, 0, v25, v151);
                    uint64_t v42 = sub_34508(0, v130, v25, v151);
                    unint64_t result = sub_34508(v145, 0, v25, v151);
                    if (v40)
                    {
                      uint64_t v43 = result;
                      if ((v26 + v140) << v153 >= a8) {
                        unsigned int v44 = 0;
                      }
                      else {
                        unsigned int v44 = v126;
                      }
                      unsigned int v45 = (_OWORD *)((char *)v128 + (v44 + (v26 << v153)) * a13);
                      unint64_t result = sub_34508(0, v44, v149, v151);
                      for (int i = 0; i != v40; ++i)
                      {
                        unsigned int v47 = v32;
                        unsigned int v48 = v45;
                        for (uint64_t j = v43; v47; --v47)
                        {
                          unsigned int v50 = (_OWORD *)(v36 + 32 * (j + result));
                          __int128 v51 = v50[1];
                          *unsigned int v48 = *v50;
                          v48[1] = v51;
                          v48 += 2;
                          uint64_t j = (j - v41) & v41;
                        }

                        unint64_t result = (result - v42) & v42;
                        unsigned int v45 = (_OWORD *)((char *)v45 + a13);
                      }
                    }
                  }

                  int v26 = ++v27;
                  uint64_t v18 = v160;
                }

                while (v157 > v27);
              }

              int v20 = ++v124;
            }

            while (v122 > v124);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v163, &v162);
          unsigned int v67 = 1 << v162;
          char v68 = *((_BYTE *)a14 + 15);
          unsigned int v69 = 1 << v68;
          if (v68) {
            BOOL v70 = v69 > a3;
          }
          else {
            BOOL v70 = 1;
          }
          BOOL v71 = v70 || v69 > a4;
          int v72 = (~(-1 << v68) + a3) & (-1 << v68);
          if (v71) {
            int v73 = a3;
          }
          else {
            int v73 = v72;
          }
          unsigned int v127 = a8 >> v162;
          int v129 = 1 << v162;
          unsigned int v74 = v67 - 1;
          unsigned int v125 = a12 + a8;
          char v123 = v162;
          unsigned int v75 = (v67 - 1 + a12 + a8) >> v162;
          if (a8 >> v162 < v75)
          {
            unsigned int v117 = (v73 + ~(-1 << SLOBYTE(v163[0]))) >> SLOBYTE(v163[0]);
            unsigned int v76 = a7 >> SLOBYTE(v163[0]);
            char v152 = v163[0];
            unsigned int v148 = ((1 << SLOBYTE(v163[0])) - 1 + a11 + a7) >> SLOBYTE(v163[0]);
            int v143 = ((1 << SLOBYTE(v163[0])) - 1) & (a11 + a7);
            unsigned int v144 = a11 + a7;
            uint64_t v150 = ((1 << SLOBYTE(v163[0])) - 1) & a7;
            unsigned int v141 = (1 << SLOBYTE(v163[0])) - v150;
            int v113 = v74 & v125;
            unsigned int v77 = 1 << v162;
            uint64_t v115 = v74 & a8;
            unsigned int v111 = v67 - v115;
            int v146 = 1 << SLOBYTE(v163[0]);
            if (1 << SLOBYTE(v163[0]) >= a5) {
              unsigned int v78 = a5;
            }
            else {
              unsigned int v78 = 1 << SLOBYTE(v163[0]);
            }
            if (v67 >= a6) {
              unsigned int v77 = a6;
            }
            unsigned int v79 = 32 - __clz(v77 - 1);
            if (v77 < 2) {
              unsigned int v79 = 0;
            }
            unsigned int v80 = 32 - __clz(v78 - 1);
            if (v78 >= 2) {
              unsigned int v81 = v80;
            }
            else {
              unsigned int v81 = 0;
            }
            int v154 = v81;
            unsigned int v109 = ~(-1 << v81);
            int v156 = v79;
            unsigned int v107 = ~(-1 << v79);
            unsigned int v82 = a8 >> v162;
            unsigned int v121 = v15;
            unsigned int v119 = (v67 - 1 + a12 + a8) >> v162;
            unsigned int v139 = a7 >> SLOBYTE(v163[0]);
            do
            {
              if (v76 >= v148)
              {
                unsigned int v105 = v82 + 1;
              }

              else
              {
                unsigned int v158 = v82 << v123;
                unsigned int v131 = v82 + 1;
                if (v125 >= (v82 + 1) << v123) {
                  int v83 = v129;
                }
                else {
                  int v83 = v113;
                }
                if (v125 >= (v82 + 1) << v123) {
                  unsigned int v84 = v111;
                }
                else {
                  unsigned int v84 = v19;
                }
                int v137 = v82 * v117;
                uint64_t v85 = sub_34508(v109, 0, v154, v156);
                uint64_t v86 = sub_34508(0, v107, v154, v156);
                if (v158 >= a8) {
                  int v87 = v83;
                }
                else {
                  int v87 = v84;
                }
                if (v158 >= a8) {
                  unsigned int v88 = 0;
                }
                else {
                  unsigned int v88 = v115;
                }
                unsigned int v135 = v88;
                unsigned int v133 = (char *)v15 + (v88 + ((v82 - v127) << v123) - v115) * a13;
                do
                {
                  unsigned int v89 = v76 << v152;
                  unsigned int v159 = v76 + 1;
                  unsigned int v90 = a11;
                  if (v144 >= (v76 + 1) << v152) {
                    unsigned int v90 = v141;
                  }
                  int v91 = v146;
                  if (v144 < (v76 + 1) << v152) {
                    int v91 = v143;
                  }
                  if (v89 >= a7) {
                    unsigned int v92 = 0;
                  }
                  else {
                    unsigned int v92 = v150;
                  }
                  if (v89 >= a7) {
                    unsigned int v93 = v91;
                  }
                  else {
                    unsigned int v93 = v90;
                  }
                  int v94 = a14[3];
                  int v95 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v92, 0, v154, v156);
                  if (v87)
                  {
                    uint64_t v96 = result;
                    uint64_t v97 = (v76 + v137) * v94 * v95 + v160;
                    unsigned int v98 = &v133[32 * (v92 + ((v76 - v139) << v152) - v150)];
                    unint64_t result = sub_34508(0, v135, v154, v156);
                    for (int k = 0; k != v87; ++k)
                    {
                      unsigned int v100 = v93;
                      unsigned int v101 = v98;
                      for (uint64_t m = v96; v100; --v100)
                      {
                        unsigned int v103 = (_OWORD *)(v97 + 32 * (m + result));
                        __int128 v104 = v103[1];
                        *(_OWORD *)unsigned int v101 = *v103;
                        *((_OWORD *)v101 + 1) = v104;
                        v101 += 32;
                        uint64_t m = (m - v85) & v85;
                      }

                      unint64_t result = (result - v86) & v86;
                      v98 += a13;
                    }
                  }

                  ++v76;
                }

                while (v159 != v148);
                uint64_t v15 = v121;
                unsigned int v19 = a12;
                unsigned int v75 = v119;
                unsigned int v76 = v139;
                unsigned int v105 = v131;
              }

              unsigned int v82 = v105;
            }

            while (v105 != v75);
          }
        }
      }

      else
      {
        unsigned int v52 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v53 = v52;
        }
        else {
          int v53 = 0;
        }
        unsigned int v54 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v55 = v54;
        }
        else {
          int v55 = 0;
        }
        uint64_t v56 = sub_34508(~(-1 << v55), 0, v55, v53);
        uint64_t v57 = sub_34508(0, ~(-1 << v53), v55, v53);
        unint64_t result = sub_34508(a7, 0, v55, v53);
        if (a12)
        {
          uint64_t v58 = result;
          unint64_t result = sub_34508(0, a8, v55, v53);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v60 = a11;
            unsigned int v61 = v15;
            for (iint i = v58; v60; --v60)
            {
              unsigned int v63 = (_OWORD *)(v18 + 32 * (ii + result));
              __int128 v64 = v63[1];
              *unsigned int v61 = *v63;
              v61[1] = v64;
              v61 += 2;
              iint i = (ii - v56) & v56;
            }

            unint64_t result = (result - v57) & v57;
            uint64_t v15 = (_OWORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_476F0( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    unsigned int v18 = a12;
    if (a14)
    {
      uint64_t v151 = result;
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v154);
        unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v153, &v152);
        unsigned int v117 = v155;
        if (v155)
        {
          int v119 = 0;
          char v115 = v153;
          unsigned int v111 = a7 >> v153;
          char v145 = v152;
          unsigned int v135 = a8 >> v152;
          unsigned int v149 = v156;
          unsigned int v109 = a11 + a7;
          int v105 = ((1 << v153) - 1) & a7;
          int v107 = ((1 << v153) - 1) & (a11 + a7);
          int v103 = (1 << v153) - v105;
          unsigned int v133 = a12 + a8;
          int v121 = ((1 << v152) - 1) & a8;
          int v129 = (1 << v152) - v121;
          int v131 = ((1 << v152) - 1) & (a12 + a8);
          int v113 = 1 << v153;
          if (1 << v153 >= a5) {
            unsigned int v19 = a5;
          }
          else {
            unsigned int v19 = 1 << v153;
          }
          int v137 = 1 << v152;
          if (1 << v152 >= a6) {
            unsigned int v20 = a6;
          }
          else {
            unsigned int v20 = 1 << v152;
          }
          unsigned int v21 = 32 - __clz(v20 - 1);
          if (v20 < 2) {
            unsigned int v21 = 0;
          }
          unsigned int v22 = 32 - __clz(v19 - 1);
          if (v19 >= 2) {
            int v23 = v22;
          }
          else {
            int v23 = 0;
          }
          int v143 = v21;
          unsigned int v126 = ~(-1 << v21);
          do
          {
            if (v149)
            {
              int v24 = 0;
              unsigned int v25 = (v119 + v111) << v115;
              unsigned int v26 = a11;
              if (v109 >= (v119 + v111 + 1) << v115) {
                unsigned int v26 = v103;
              }
              int v27 = v113;
              if (v109 < (v119 + v111 + 1) << v115) {
                int v27 = v107;
              }
              if (v25 >= a7) {
                unsigned int v28 = v27;
              }
              else {
                unsigned int v28 = v26;
              }
              unsigned int v29 = v105;
              if (v25 >= a7) {
                unsigned int v29 = 0;
              }
              unsigned int v141 = v29;
              char v123 = &a2[v29 + (v119 << v115)];
              do
              {
                LOWORD(v30) = v119;
                HIWORD(v30) = v24;
                unint64_t result = sub_34358(v154, v30);
                int v31 = *(_DWORD *)(v17 + 4LL * result);
                if (v31 < 0)
                {
                  unint64_t v32 = v151 - *(void *)(a15 + 24) + ((unint64_t)(v31 & 0x3FFFFFF) << 14);
                  unsigned int v33 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v33) {
                    v32 += sub_343C0( *(_DWORD *)a15,  v33,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v34 = (v24 + v135) << v145;
                  unsigned int v35 = a12;
                  if (v133 >= (v24 + v135 + 1) << v145) {
                    unsigned int v35 = v129;
                  }
                  int v36 = v137;
                  if (v133 < (v24 + v135 + 1) << v145) {
                    int v36 = v131;
                  }
                  if (v34 >= a8) {
                    unsigned int v37 = v36;
                  }
                  else {
                    unsigned int v37 = v35;
                  }
                  uint64_t v38 = sub_34508(~(-1 << v23), 0, v23, v143);
                  uint64_t v39 = sub_34508(0, v126, v23, v143);
                  unint64_t result = sub_34508(v141, 0, v23, v143);
                  if (v37)
                  {
                    uint64_t v40 = result;
                    if (v34 >= a8) {
                      unsigned int v41 = 0;
                    }
                    else {
                      unsigned int v41 = v121;
                    }
                    uint64_t v42 = (_DWORD *)((char *)v123 + (v41 + (v24 << v145)) * a13);
                    unint64_t result = sub_34508(0, v41, v23, v143);
                    for (int i = 0; i != v37; ++i)
                    {
                      unsigned int v44 = v28;
                      unsigned int v45 = v42;
                      for (uint64_t j = v40; v44; --v44)
                      {
                        *v45++ = *(_DWORD *)(v32 + 4 * (j + result));
                        uint64_t j = (j - v38) & v38;
                      }

                      unint64_t result = (result - v39) & v39;
                      uint64_t v42 = (_DWORD *)((char *)v42 + a13);
                    }
                  }
                }

                ++v24;
                uint64_t v17 = v151;
              }

              while (v149 > (unsigned __int16)v24);
            }

            ++v119;
          }

          while (v117 > (unsigned __int16)v119);
        }
      }

      else
      {
        unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v154, &v153);
        unsigned int v62 = 1 << v153;
        char v63 = *((_BYTE *)a14 + 15);
        unsigned int v64 = 1 << v63;
        if (v63) {
          BOOL v65 = v64 > a3;
        }
        else {
          BOOL v65 = 1;
        }
        BOOL v66 = v65 || v64 > a4;
        int v67 = (~(-1 << v63) + a3) & (-1 << v63);
        if (v66) {
          int v68 = a3;
        }
        else {
          int v68 = v67;
        }
        unsigned int v118 = a8 >> v153;
        int v120 = 1 << v153;
        unsigned int v69 = v62 - 1;
        unsigned int v116 = a12 + a8;
        char v114 = v153;
        unsigned int v70 = (v62 - 1 + a12 + a8) >> v153;
        if (a8 >> v153 < v70)
        {
          unsigned int v110 = (v68 + ~(-1 << SLOBYTE(v154[0]))) >> SLOBYTE(v154[0]);
          unsigned int v71 = a7 >> SLOBYTE(v154[0]);
          char v144 = v154[0];
          unsigned int v139 = ((1 << SLOBYTE(v154[0])) - 1 + a11 + a7) >> SLOBYTE(v154[0]);
          int v134 = ((1 << SLOBYTE(v154[0])) - 1) & (a11 + a7);
          unsigned int v136 = a11 + a7;
          uint64_t v142 = ((1 << SLOBYTE(v154[0])) - 1) & a7;
          unsigned int v132 = (1 << SLOBYTE(v154[0])) - v142;
          int v106 = v69 & v116;
          unsigned int v72 = 1 << v153;
          uint64_t v108 = v69 & a8;
          unsigned int v104 = v62 - v108;
          int v138 = 1 << SLOBYTE(v154[0]);
          if (1 << SLOBYTE(v154[0]) >= a5) {
            unsigned int v73 = a5;
          }
          else {
            unsigned int v73 = 1 << SLOBYTE(v154[0]);
          }
          if (v62 >= a6) {
            unsigned int v72 = a6;
          }
          unsigned int v74 = 32 - __clz(v72 - 1);
          if (v72 < 2) {
            unsigned int v74 = 0;
          }
          unsigned int v75 = 32 - __clz(v73 - 1);
          if (v73 >= 2) {
            unsigned int v76 = v75;
          }
          else {
            unsigned int v76 = 0;
          }
          int v146 = v76;
          unsigned int v102 = ~(-1 << v76);
          int v148 = v74;
          unsigned int v101 = ~(-1 << v74);
          unsigned int v77 = a8 >> v153;
          unsigned int v112 = (v62 - 1 + a12 + a8) >> v153;
          unsigned int v130 = a7 >> SLOBYTE(v154[0]);
          do
          {
            if (v71 >= v139)
            {
              unsigned int v100 = v77 + 1;
            }

            else
            {
              unsigned int v78 = v77 << v114;
              unsigned int v122 = v77 + 1;
              if (v116 >= (v77 + 1) << v114) {
                int v79 = v120;
              }
              else {
                int v79 = v106;
              }
              if (v116 >= (v77 + 1) << v114) {
                unsigned int v80 = v104;
              }
              else {
                unsigned int v80 = v18;
              }
              int v128 = v77 * v110;
              uint64_t v81 = sub_34508(v102, 0, v146, v148);
              uint64_t v82 = sub_34508(0, v101, v146, v148);
              BOOL v83 = v78 >= a8;
              if (v78 >= a8) {
                int v84 = v79;
              }
              else {
                int v84 = v80;
              }
              if (v83) {
                unsigned int v85 = 0;
              }
              else {
                unsigned int v85 = v108;
              }
              unsigned int v127 = v85;
              uint64_t v124 = (v85 + ((v77 - v118) << v114) - v108) * a13;
              do
              {
                unsigned int v86 = v71 << v144;
                unsigned int v150 = v71 + 1;
                unsigned int v87 = a11;
                if (v136 >= (v71 + 1) << v144) {
                  unsigned int v87 = v132;
                }
                int v88 = v138;
                if (v136 < (v71 + 1) << v144) {
                  int v88 = v134;
                }
                if (v86 >= a7) {
                  unsigned int v89 = 0;
                }
                else {
                  unsigned int v89 = v142;
                }
                if (v86 >= a7) {
                  unsigned int v90 = v88;
                }
                else {
                  unsigned int v90 = v87;
                }
                int v91 = a14[3];
                int v92 = *((unsigned __int8 *)a14 + 9);
                unint64_t result = sub_34508(v89, 0, v146, v148);
                if (v84)
                {
                  uint64_t v93 = result;
                  uint64_t v94 = (v71 + v128) * v91 * v92 + v151;
                  int v95 = (_DWORD *)((char *)&a2[v89 + ((v71 - v130) << v144) - v142] + v124);
                  unint64_t result = sub_34508(0, v127, v146, v148);
                  for (int k = 0; k != v84; ++k)
                  {
                    unsigned int v97 = v90;
                    unsigned int v98 = v95;
                    for (uint64_t m = v93; v97; --v97)
                    {
                      *v98++ = *(_DWORD *)(v94 + 4 * (m + result));
                      uint64_t m = (m - v81) & v81;
                    }

                    unint64_t result = (result - v82) & v82;
                    int v95 = (_DWORD *)((char *)v95 + a13);
                  }
                }

                ++v71;
              }

              while (v150 != v139);
              unsigned int v18 = a12;
              unsigned int v70 = v112;
              unsigned int v71 = v130;
              unsigned int v100 = v122;
            }

            unsigned int v77 = v100;
          }

          while (v100 != v70);
        }
      }
    }

    else
    {
      unsigned int v47 = 32 - __clz(a6 - 1);
      if (a6 >= 2) {
        int v48 = v47;
      }
      else {
        int v48 = 0;
      }
      unsigned int v49 = 32 - __clz(a5 - 1);
      if (a5 >= 2) {
        int v50 = v49;
      }
      else {
        int v50 = 0;
      }
      uint64_t v52 = sub_34508(~(-1 << v50), 0, v50, v48);
      uint64_t v53 = sub_34508(0, ~(-1 << v48), v50, v48);
      unint64_t result = sub_34508(a7, 0, v50, v48);
      if (a12)
      {
        uint64_t v54 = result;
        unint64_t result = sub_34508(0, a8, v50, v48);
        int v55 = a2;
        for (int n = 0; n != a12; ++n)
        {
          unsigned int v57 = a11;
          uint64_t v58 = v55;
          for (iint i = v54; v57; --v57)
          {
            *v58++ = *(_DWORD *)(v17 + 4 * (ii + result));
            iint i = (ii - v52) & v52;
          }

          unint64_t result = (result - v53) & v53;
          int v55 = (_DWORD *)((char *)v55 + a13);
        }
      }
    }
  }

  return result;
}

uint64_t sub_47F5C( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_49A24(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_47F78( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v161 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v164);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v163, &v162);
          unsigned int v122 = v165;
          if (v165)
          {
            int v20 = 0;
            unsigned __int16 v124 = 0;
            char v118 = v163;
            unsigned int v114 = a7 >> v163;
            char v154 = v162;
            unsigned int v140 = a8 >> v162;
            unsigned int v158 = v166;
            unsigned int v112 = a11 + a7;
            int v108 = ((1 << v163) - 1) & a7;
            int v110 = ((1 << v163) - 1) & (a11 + a7);
            int v106 = (1 << v163) - v108;
            unsigned int v138 = a12 + a8;
            int v126 = ((1 << v162) - 1) & a8;
            int v134 = (1 << v162) - v126;
            int v136 = ((1 << v162) - 1) & (a12 + a8);
            int v116 = 1 << v163;
            if (1 << v163 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v163;
            }
            int v142 = 1 << v162;
            if (1 << v162 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v162;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v150 = v24;
            unsigned int v132 = ~(-1 << v24);
            int v152 = v23;
            unsigned int v130 = ~(-1 << v23);
            do
            {
              if (v158)
              {
                int v25 = 0;
                unsigned __int16 v26 = 0;
                unsigned int v27 = (v20 + v114) << v118;
                unsigned int v28 = a11;
                if (v112 >= (v20 + v114 + 1) << v118) {
                  unsigned int v28 = v106;
                }
                int v29 = v116;
                if (v112 < (v20 + v114 + 1) << v118) {
                  int v29 = v110;
                }
                int v30 = v20 << v118;
                if (v27 >= a7) {
                  unsigned int v31 = v29;
                }
                else {
                  unsigned int v31 = v28;
                }
                unsigned int v32 = v108;
                if (v27 >= a7) {
                  unsigned int v32 = 0;
                }
                unsigned int v145 = v32;
                uint64_t v128 = a2 + 12LL * (v32 + v30);
                do
                {
                  LOWORD(v33) = v124;
                  HIWORD(v33) = v26;
                  unint64_t result = sub_34358(v164, v33);
                  int v34 = *(_DWORD *)(v161 + 4LL * result);
                  if (v34 < 0)
                  {
                    unint64_t v35 = v161 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                    unsigned int v36 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v36) {
                      v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v37 = a12;
                    if (v138 >= (v25 + v140 + 1) << v154) {
                      unsigned int v37 = v134;
                    }
                    int v38 = v142;
                    if (v138 < (v25 + v140 + 1) << v154) {
                      int v38 = v136;
                    }
                    if ((v25 + v140) << v154 >= a8) {
                      unsigned int v39 = v38;
                    }
                    else {
                      unsigned int v39 = v37;
                    }
                    uint64_t v40 = sub_34508(v132, 0, v150, v152);
                    uint64_t v41 = sub_34508(0, v130, v150, v152);
                    unint64_t result = sub_34508(v145, 0, v150, v152);
                    if (v39)
                    {
                      uint64_t v42 = result;
                      if ((v25 + v140) << v154 >= a8) {
                        unsigned int v43 = 0;
                      }
                      else {
                        unsigned int v43 = v126;
                      }
                      uint64_t v44 = v128 + (v43 + (v25 << v154)) * a13;
                      unint64_t result = sub_34508(0, v43, v150, v152);
                      for (int i = 0; i != v39; ++i)
                      {
                        unsigned int v46 = v31;
                        uint64_t v47 = v44;
                        for (uint64_t j = v42; v46; --v46)
                        {
                          unint64_t v49 = v35 + 12 * (j + result);
                          uint64_t v50 = *(void *)v49;
                          *(_DWORD *)(v47 + 8) = *(_DWORD *)(v49 + 8);
                          *(void *)uint64_t v47 = v50;
                          v47 += 12LL;
                          uint64_t j = (j - v40) & v40;
                        }

                        unint64_t result = (result - v41) & v41;
                        v44 += a13;
                      }
                    }
                  }

                  int v25 = ++v26;
                }

                while (v158 > v26);
              }

              int v20 = ++v124;
            }

            while (v122 > v124);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v164, &v163);
          unsigned int v66 = 1 << v163;
          char v67 = *((_BYTE *)a14 + 15);
          unsigned int v68 = 1 << v67;
          if (v67) {
            BOOL v69 = v68 > a3;
          }
          else {
            BOOL v69 = 1;
          }
          BOOL v70 = v69 || v68 > a4;
          int v71 = (~(-1 << v67) + a3) & (-1 << v67);
          if (v70) {
            int v72 = a3;
          }
          else {
            int v72 = v71;
          }
          unsigned int v125 = a8 >> v163;
          int v127 = 1 << v163;
          unsigned int v73 = v66 - 1;
          unsigned int v123 = a12 + a8;
          char v119 = v163;
          unsigned int v74 = (v66 - 1 + a12 + a8) >> v163;
          if (a8 >> v163 < v74)
          {
            unsigned int v115 = (v72 + ~(-1 << SLOBYTE(v164[0]))) >> SLOBYTE(v164[0]);
            unsigned int v75 = a7 >> SLOBYTE(v164[0]);
            char v153 = v164[0];
            unsigned int v146 = ((1 << SLOBYTE(v164[0])) - 1 + a11 + a7) >> SLOBYTE(v164[0]);
            int v141 = ((1 << SLOBYTE(v164[0])) - 1) & (a11 + a7);
            unsigned int v143 = a11 + a7;
            uint64_t v151 = ((1 << SLOBYTE(v164[0])) - 1) & a7;
            unsigned int v139 = (1 << SLOBYTE(v164[0])) - v151;
            int v111 = v73 & v123;
            unsigned int v76 = 1 << v163;
            uint64_t v113 = v73 & a8;
            unsigned int v109 = v66 - v113;
            int v144 = 1 << SLOBYTE(v164[0]);
            if (1 << SLOBYTE(v164[0]) >= a5) {
              unsigned int v77 = a5;
            }
            else {
              unsigned int v77 = 1 << SLOBYTE(v164[0]);
            }
            if (v66 >= a6) {
              unsigned int v76 = a6;
            }
            unsigned int v78 = 32 - __clz(v76 - 1);
            if (v76 < 2) {
              unsigned int v78 = 0;
            }
            unsigned int v79 = 32 - __clz(v77 - 1);
            if (v77 >= 2) {
              unsigned int v80 = v79;
            }
            else {
              unsigned int v80 = 0;
            }
            int v155 = v80;
            unsigned int v107 = ~(-1 << v80);
            int v157 = v78;
            unsigned int v105 = ~(-1 << v78);
            unsigned int v81 = a8 >> v163;
            uint64_t v121 = v15;
            unsigned int v117 = (v66 - 1 + a12 + a8) >> v163;
            unsigned int v137 = a7 >> SLOBYTE(v164[0]);
            do
            {
              if (v75 >= v146)
              {
                unsigned int v104 = v81 + 1;
              }

              else
              {
                unsigned int v159 = v81 << v119;
                unsigned int v129 = v81 + 1;
                int v82 = v127;
                if (v123 < (v81 + 1) << v119) {
                  int v82 = v111;
                }
                int v148 = v82;
                if (v123 >= (v81 + 1) << v119) {
                  unsigned int v83 = v109;
                }
                else {
                  unsigned int v83 = v19;
                }
                int v135 = v81 * v115;
                unsigned int v84 = v75;
                uint64_t v85 = sub_34508(v107, 0, v155, v157);
                uint64_t v86 = sub_34508(0, v105, v155, v157);
                if (v159 >= a8) {
                  unsigned int v87 = v148;
                }
                else {
                  unsigned int v87 = v83;
                }
                if (v159 >= a8) {
                  unsigned int v88 = 0;
                }
                else {
                  unsigned int v88 = v113;
                }
                unsigned int v133 = v88;
                uint64_t v131 = v15 + (v88 + ((v81 - v125) << v119) - v113) * a13;
                do
                {
                  unsigned int v89 = v84 << v153;
                  unsigned int v160 = v84 + 1;
                  unsigned int v90 = a11;
                  if (v143 >= (v84 + 1) << v153) {
                    unsigned int v90 = v139;
                  }
                  int v91 = v144;
                  if (v143 < (v84 + 1) << v153) {
                    int v91 = v141;
                  }
                  if (v89 >= a7) {
                    unsigned int v92 = 0;
                  }
                  else {
                    unsigned int v92 = v151;
                  }
                  if (v89 >= a7) {
                    unsigned int v93 = v91;
                  }
                  else {
                    unsigned int v93 = v90;
                  }
                  int v94 = a14[3];
                  int v149 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v92, 0, v155, v157);
                  if (v87)
                  {
                    uint64_t v95 = result;
                    uint64_t v96 = (v84 + v135) * v94 * v149 + v161;
                    uint64_t v97 = v131 + 12 * (v92 + ((v84 - v137) << v153) - v151);
                    unint64_t result = sub_34508(0, v133, v155, v157);
                    for (int k = 0; k != v87; ++k)
                    {
                      unsigned int v99 = v93;
                      uint64_t v100 = v97;
                      for (uint64_t m = v95; v99; --v99)
                      {
                        unsigned int v102 = (uint64_t *)(v96 + 12 * (m + result));
                        uint64_t v103 = *v102;
                        *(_DWORD *)(v100 + 8) = *((_DWORD *)v102 + 2);
                        *(void *)uint64_t v100 = v103;
                        v100 += 12LL;
                        uint64_t m = (m - v85) & v85;
                      }

                      unint64_t result = (result - v86) & v86;
                      v97 += a13;
                    }
                  }

                  ++v84;
                }

                while (v160 != v146);
                uint64_t v15 = v121;
                unsigned int v19 = a12;
                unsigned int v74 = v117;
                unsigned int v75 = v137;
                unsigned int v104 = v129;
              }

              unsigned int v81 = v104;
            }

            while (v104 != v74);
          }
        }
      }

      else
      {
        unsigned int v51 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v52 = v51;
        }
        else {
          int v52 = 0;
        }
        unsigned int v53 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v54 = v53;
        }
        else {
          int v54 = 0;
        }
        uint64_t v55 = sub_34508(~(-1 << v54), 0, v54, v52);
        uint64_t v56 = sub_34508(0, ~(-1 << v52), v54, v52);
        unint64_t result = sub_34508(a7, 0, v54, v52);
        if (a12)
        {
          uint64_t v57 = result;
          unint64_t result = sub_34508(0, a8, v54, v52);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v59 = a11;
            uint64_t v60 = v15;
            for (iint i = v57; v59; --v59)
            {
              uint64_t v62 = v18 + 12 * (ii + result);
              uint64_t v63 = *(void *)v62;
              *(_DWORD *)(v60 + 8) = *(_DWORD *)(v62 + 8);
              *(void *)uint64_t v60 = v63;
              v60 += 12LL;
              iint i = (ii - v55) & v55;
            }

            unint64_t result = (result - v56) & v56;
            v15 += a13;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_4885C( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v161 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v164);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v163, &v162);
          unsigned int v122 = v165;
          if (v165)
          {
            int v20 = 0;
            unsigned __int16 v124 = 0;
            char v118 = v163;
            unsigned int v114 = a7 >> v163;
            char v154 = v162;
            unsigned int v140 = a8 >> v162;
            unsigned int v158 = v166;
            unsigned int v112 = a11 + a7;
            int v108 = ((1 << v163) - 1) & a7;
            int v110 = ((1 << v163) - 1) & (a11 + a7);
            int v106 = (1 << v163) - v108;
            unsigned int v138 = a12 + a8;
            int v126 = ((1 << v162) - 1) & a8;
            int v134 = (1 << v162) - v126;
            int v136 = ((1 << v162) - 1) & (a12 + a8);
            int v116 = 1 << v163;
            if (1 << v163 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v163;
            }
            int v142 = 1 << v162;
            if (1 << v162 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v162;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v150 = v24;
            unsigned int v132 = ~(-1 << v24);
            int v152 = v23;
            unsigned int v130 = ~(-1 << v23);
            do
            {
              if (v158)
              {
                int v25 = 0;
                unsigned __int16 v26 = 0;
                unsigned int v27 = (v20 + v114) << v118;
                unsigned int v28 = a11;
                if (v112 >= (v20 + v114 + 1) << v118) {
                  unsigned int v28 = v106;
                }
                int v29 = v116;
                if (v112 < (v20 + v114 + 1) << v118) {
                  int v29 = v110;
                }
                int v30 = v20 << v118;
                if (v27 >= a7) {
                  unsigned int v31 = v29;
                }
                else {
                  unsigned int v31 = v28;
                }
                unsigned int v32 = v108;
                if (v27 >= a7) {
                  unsigned int v32 = 0;
                }
                unsigned int v145 = v32;
                uint64_t v128 = a2 + 24LL * (v32 + v30);
                do
                {
                  LOWORD(v33) = v124;
                  HIWORD(v33) = v26;
                  unint64_t result = sub_34358(v164, v33);
                  int v34 = *(_DWORD *)(v161 + 4LL * result);
                  if (v34 < 0)
                  {
                    unint64_t v35 = v161 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                    unsigned int v36 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v36) {
                      v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v37 = a12;
                    if (v138 >= (v25 + v140 + 1) << v154) {
                      unsigned int v37 = v134;
                    }
                    int v38 = v142;
                    if (v138 < (v25 + v140 + 1) << v154) {
                      int v38 = v136;
                    }
                    if ((v25 + v140) << v154 >= a8) {
                      unsigned int v39 = v38;
                    }
                    else {
                      unsigned int v39 = v37;
                    }
                    uint64_t v40 = sub_34508(v132, 0, v150, v152);
                    uint64_t v41 = sub_34508(0, v130, v150, v152);
                    unint64_t result = sub_34508(v145, 0, v150, v152);
                    if (v39)
                    {
                      uint64_t v42 = result;
                      if ((v25 + v140) << v154 >= a8) {
                        unsigned int v43 = 0;
                      }
                      else {
                        unsigned int v43 = v126;
                      }
                      uint64_t v44 = v128 + (v43 + (v25 << v154)) * a13;
                      unint64_t result = sub_34508(0, v43, v150, v152);
                      for (int i = 0; i != v39; ++i)
                      {
                        unsigned int v46 = v31;
                        uint64_t v47 = v44;
                        for (uint64_t j = v42; v46; --v46)
                        {
                          unint64_t v49 = v35 + 24 * (j + result);
                          __int128 v50 = *(_OWORD *)v49;
                          *(void *)(v47 + 16) = *(void *)(v49 + 16);
                          *(_OWORD *)uint64_t v47 = v50;
                          v47 += 24LL;
                          uint64_t j = (j - v40) & v40;
                        }

                        unint64_t result = (result - v41) & v41;
                        v44 += a13;
                      }
                    }
                  }

                  int v25 = ++v26;
                }

                while (v158 > v26);
              }

              int v20 = ++v124;
            }

            while (v122 > v124);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v164, &v163);
          unsigned int v66 = 1 << v163;
          char v67 = *((_BYTE *)a14 + 15);
          unsigned int v68 = 1 << v67;
          if (v67) {
            BOOL v69 = v68 > a3;
          }
          else {
            BOOL v69 = 1;
          }
          BOOL v70 = v69 || v68 > a4;
          int v71 = (~(-1 << v67) + a3) & (-1 << v67);
          if (v70) {
            int v72 = a3;
          }
          else {
            int v72 = v71;
          }
          unsigned int v125 = a8 >> v163;
          int v127 = 1 << v163;
          unsigned int v73 = v66 - 1;
          unsigned int v123 = a12 + a8;
          char v119 = v163;
          unsigned int v74 = (v66 - 1 + a12 + a8) >> v163;
          if (a8 >> v163 < v74)
          {
            unsigned int v115 = (v72 + ~(-1 << SLOBYTE(v164[0]))) >> SLOBYTE(v164[0]);
            unsigned int v75 = a7 >> SLOBYTE(v164[0]);
            char v153 = v164[0];
            unsigned int v146 = ((1 << SLOBYTE(v164[0])) - 1 + a11 + a7) >> SLOBYTE(v164[0]);
            int v141 = ((1 << SLOBYTE(v164[0])) - 1) & (a11 + a7);
            unsigned int v143 = a11 + a7;
            uint64_t v151 = ((1 << SLOBYTE(v164[0])) - 1) & a7;
            unsigned int v139 = (1 << SLOBYTE(v164[0])) - v151;
            int v111 = v73 & v123;
            unsigned int v76 = 1 << v163;
            uint64_t v113 = v73 & a8;
            unsigned int v109 = v66 - v113;
            int v144 = 1 << SLOBYTE(v164[0]);
            if (1 << SLOBYTE(v164[0]) >= a5) {
              unsigned int v77 = a5;
            }
            else {
              unsigned int v77 = 1 << SLOBYTE(v164[0]);
            }
            if (v66 >= a6) {
              unsigned int v76 = a6;
            }
            unsigned int v78 = 32 - __clz(v76 - 1);
            if (v76 < 2) {
              unsigned int v78 = 0;
            }
            unsigned int v79 = 32 - __clz(v77 - 1);
            if (v77 >= 2) {
              unsigned int v80 = v79;
            }
            else {
              unsigned int v80 = 0;
            }
            int v155 = v80;
            unsigned int v107 = ~(-1 << v80);
            int v157 = v78;
            unsigned int v105 = ~(-1 << v78);
            unsigned int v81 = a8 >> v163;
            uint64_t v121 = v15;
            unsigned int v117 = (v66 - 1 + a12 + a8) >> v163;
            unsigned int v137 = a7 >> SLOBYTE(v164[0]);
            do
            {
              if (v75 >= v146)
              {
                unsigned int v104 = v81 + 1;
              }

              else
              {
                unsigned int v159 = v81 << v119;
                unsigned int v129 = v81 + 1;
                int v82 = v127;
                if (v123 < (v81 + 1) << v119) {
                  int v82 = v111;
                }
                int v148 = v82;
                if (v123 >= (v81 + 1) << v119) {
                  unsigned int v83 = v109;
                }
                else {
                  unsigned int v83 = v19;
                }
                int v135 = v81 * v115;
                unsigned int v84 = v75;
                uint64_t v85 = sub_34508(v107, 0, v155, v157);
                uint64_t v86 = sub_34508(0, v105, v155, v157);
                if (v159 >= a8) {
                  unsigned int v87 = v148;
                }
                else {
                  unsigned int v87 = v83;
                }
                if (v159 >= a8) {
                  unsigned int v88 = 0;
                }
                else {
                  unsigned int v88 = v113;
                }
                unsigned int v133 = v88;
                uint64_t v131 = v15 + (v88 + ((v81 - v125) << v119) - v113) * a13;
                do
                {
                  unsigned int v89 = v84 << v153;
                  unsigned int v160 = v84 + 1;
                  unsigned int v90 = a11;
                  if (v143 >= (v84 + 1) << v153) {
                    unsigned int v90 = v139;
                  }
                  int v91 = v144;
                  if (v143 < (v84 + 1) << v153) {
                    int v91 = v141;
                  }
                  if (v89 >= a7) {
                    unsigned int v92 = 0;
                  }
                  else {
                    unsigned int v92 = v151;
                  }
                  if (v89 >= a7) {
                    unsigned int v93 = v91;
                  }
                  else {
                    unsigned int v93 = v90;
                  }
                  int v94 = a14[3];
                  int v149 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v92, 0, v155, v157);
                  if (v87)
                  {
                    uint64_t v95 = result;
                    uint64_t v96 = (v84 + v135) * v94 * v149 + v161;
                    uint64_t v97 = v131 + 24 * (v92 + ((v84 - v137) << v153) - v151);
                    unint64_t result = sub_34508(0, v133, v155, v157);
                    for (int k = 0; k != v87; ++k)
                    {
                      unsigned int v99 = v93;
                      uint64_t v100 = v97;
                      for (uint64_t m = v95; v99; --v99)
                      {
                        unsigned int v102 = (__int128 *)(v96 + 24 * (m + result));
                        __int128 v103 = *v102;
                        *(void *)(v100 + 16) = *((void *)v102 + 2);
                        *(_OWORD *)uint64_t v100 = v103;
                        v100 += 24LL;
                        uint64_t m = (m - v85) & v85;
                      }

                      unint64_t result = (result - v86) & v86;
                      v97 += a13;
                    }
                  }

                  ++v84;
                }

                while (v160 != v146);
                uint64_t v15 = v121;
                unsigned int v19 = a12;
                unsigned int v74 = v117;
                unsigned int v75 = v137;
                unsigned int v104 = v129;
              }

              unsigned int v81 = v104;
            }

            while (v104 != v74);
          }
        }
      }

      else
      {
        unsigned int v51 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v52 = v51;
        }
        else {
          int v52 = 0;
        }
        unsigned int v53 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v54 = v53;
        }
        else {
          int v54 = 0;
        }
        uint64_t v55 = sub_34508(~(-1 << v54), 0, v54, v52);
        uint64_t v56 = sub_34508(0, ~(-1 << v52), v54, v52);
        unint64_t result = sub_34508(a7, 0, v54, v52);
        if (a12)
        {
          uint64_t v57 = result;
          unint64_t result = sub_34508(0, a8, v54, v52);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v59 = a11;
            uint64_t v60 = v15;
            for (iint i = v57; v59; --v59)
            {
              uint64_t v62 = v18 + 24 * (ii + result);
              __int128 v63 = *(_OWORD *)v62;
              *(void *)(v60 + 16) = *(void *)(v62 + 16);
              *(_OWORD *)uint64_t v60 = v63;
              v60 += 24LL;
              iint i = (ii - v55) & v55;
            }

            unint64_t result = (result - v56) & v56;
            v15 += a13;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_49140( uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v164 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v167);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v166, &v165);
          unsigned int v125 = v168;
          if (v168)
          {
            int v20 = 0;
            unsigned __int16 v127 = 0;
            char v121 = v166;
            unsigned int v117 = a7 >> v166;
            char v157 = v165;
            unsigned int v143 = a8 >> v165;
            unsigned int v161 = v169;
            unsigned int v115 = a11 + a7;
            int v111 = ((1 << v166) - 1) & a7;
            int v113 = ((1 << v166) - 1) & (a11 + a7);
            int v109 = (1 << v166) - v111;
            unsigned int v141 = a12 + a8;
            int v129 = ((1 << v165) - 1) & a8;
            int v137 = (1 << v165) - v129;
            int v139 = ((1 << v165) - 1) & (a12 + a8);
            int v119 = 1 << v166;
            if (1 << v166 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v166;
            }
            int v145 = 1 << v165;
            if (1 << v165 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v165;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v153 = v24;
            unsigned int v135 = ~(-1 << v24);
            int v155 = v23;
            unsigned int v133 = ~(-1 << v23);
            do
            {
              if (v161)
              {
                int v25 = 0;
                unsigned __int16 v26 = 0;
                unsigned int v27 = (v20 + v117) << v121;
                unsigned int v28 = a11;
                if (v115 >= (v20 + v117 + 1) << v121) {
                  unsigned int v28 = v109;
                }
                int v29 = v119;
                if (v115 < (v20 + v117 + 1) << v121) {
                  int v29 = v113;
                }
                int v30 = v20 << v121;
                if (v27 >= a7) {
                  unsigned int v31 = v29;
                }
                else {
                  unsigned int v31 = v28;
                }
                unsigned int v32 = v111;
                if (v27 >= a7) {
                  unsigned int v32 = 0;
                }
                unsigned int v148 = v32;
                uint64_t v131 = &a2[3 * v32 + 3 * v30];
                do
                {
                  LOWORD(v33) = v127;
                  HIWORD(v33) = v26;
                  unint64_t result = sub_34358(v167, v33);
                  int v34 = *(_DWORD *)(v164 + 4LL * result);
                  if (v34 < 0)
                  {
                    unint64_t v35 = v164 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                    unsigned int v36 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v36) {
                      v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v37 = a12;
                    if (v141 >= (v25 + v143 + 1) << v157) {
                      unsigned int v37 = v137;
                    }
                    int v38 = v145;
                    if (v141 < (v25 + v143 + 1) << v157) {
                      int v38 = v139;
                    }
                    if ((v25 + v143) << v157 >= a8) {
                      unsigned int v39 = v38;
                    }
                    else {
                      unsigned int v39 = v37;
                    }
                    uint64_t v40 = sub_34508(v135, 0, v153, v155);
                    uint64_t v41 = sub_34508(0, v133, v153, v155);
                    unint64_t result = sub_34508(v148, 0, v153, v155);
                    if (v39)
                    {
                      uint64_t v42 = result;
                      if ((v25 + v143) << v157 >= a8) {
                        unsigned int v43 = 0;
                      }
                      else {
                        unsigned int v43 = v129;
                      }
                      uint64_t v44 = (_OWORD *)((char *)v131 + (v43 + (v25 << v157)) * a13);
                      unint64_t result = sub_34508(0, v43, v153, v155);
                      for (int i = 0; i != v39; ++i)
                      {
                        unsigned int v46 = v31;
                        uint64_t v47 = v44;
                        for (uint64_t j = v42; v46; --v46)
                        {
                          unint64_t v49 = (__int128 *)(v35 + 48 * (j + result));
                          __int128 v50 = *v49;
                          __int128 v51 = v49[2];
                          v47[1] = v49[1];
                          v47[2] = v51;
                          *uint64_t v47 = v50;
                          v47 += 3;
                          uint64_t j = (j - v40) & v40;
                        }

                        unint64_t result = (result - v41) & v41;
                        uint64_t v44 = (_OWORD *)((char *)v44 + a13);
                      }
                    }
                  }

                  int v25 = ++v26;
                }

                while (v161 > v26);
              }

              int v20 = ++v127;
            }

            while (v125 > v127);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v167, &v166);
          unsigned int v68 = 1 << v166;
          char v69 = *((_BYTE *)a14 + 15);
          unsigned int v70 = 1 << v69;
          if (v69) {
            BOOL v71 = v70 > a3;
          }
          else {
            BOOL v71 = 1;
          }
          BOOL v72 = v71 || v70 > a4;
          int v73 = (~(-1 << v69) + a3) & (-1 << v69);
          if (v72) {
            int v74 = a3;
          }
          else {
            int v74 = v73;
          }
          unsigned int v128 = a8 >> v166;
          int v130 = 1 << v166;
          unsigned int v75 = v68 - 1;
          unsigned int v126 = a12 + a8;
          char v122 = v166;
          unsigned int v76 = (v68 - 1 + a12 + a8) >> v166;
          if (a8 >> v166 < v76)
          {
            unsigned int v118 = (v74 + ~(-1 << SLOBYTE(v167[0]))) >> SLOBYTE(v167[0]);
            unsigned int v77 = a7 >> SLOBYTE(v167[0]);
            char v156 = v167[0];
            unsigned int v149 = ((1 << SLOBYTE(v167[0])) - 1 + a11 + a7) >> SLOBYTE(v167[0]);
            int v144 = ((1 << SLOBYTE(v167[0])) - 1) & (a11 + a7);
            unsigned int v146 = a11 + a7;
            uint64_t v154 = ((1 << SLOBYTE(v167[0])) - 1) & a7;
            unsigned int v142 = (1 << SLOBYTE(v167[0])) - v154;
            int v114 = v75 & v126;
            unsigned int v78 = 1 << v166;
            uint64_t v116 = v75 & a8;
            unsigned int v112 = v68 - v116;
            int v147 = 1 << SLOBYTE(v167[0]);
            if (1 << SLOBYTE(v167[0]) >= a5) {
              unsigned int v79 = a5;
            }
            else {
              unsigned int v79 = 1 << SLOBYTE(v167[0]);
            }
            if (v68 >= a6) {
              unsigned int v78 = a6;
            }
            unsigned int v80 = 32 - __clz(v78 - 1);
            if (v78 < 2) {
              unsigned int v80 = 0;
            }
            unsigned int v81 = 32 - __clz(v79 - 1);
            if (v79 >= 2) {
              unsigned int v82 = v81;
            }
            else {
              unsigned int v82 = 0;
            }
            int v158 = v82;
            unsigned int v110 = ~(-1 << v82);
            int v160 = v80;
            unsigned int v108 = ~(-1 << v80);
            unsigned int v83 = a8 >> v166;
            unsigned __int16 v124 = v15;
            unsigned int v120 = (v68 - 1 + a12 + a8) >> v166;
            unsigned int v140 = a7 >> SLOBYTE(v167[0]);
            do
            {
              if (v77 >= v149)
              {
                unsigned int v107 = v83 + 1;
              }

              else
              {
                unsigned int v162 = v83 << v122;
                unsigned int v132 = v83 + 1;
                int v84 = v130;
                if (v126 < (v83 + 1) << v122) {
                  int v84 = v114;
                }
                int v151 = v84;
                if (v126 >= (v83 + 1) << v122) {
                  unsigned int v85 = v112;
                }
                else {
                  unsigned int v85 = v19;
                }
                int v138 = v83 * v118;
                unsigned int v86 = v77;
                uint64_t v87 = sub_34508(v110, 0, v158, v160);
                uint64_t v88 = sub_34508(0, v108, v158, v160);
                if (v162 >= a8) {
                  unsigned int v89 = v151;
                }
                else {
                  unsigned int v89 = v85;
                }
                if (v162 >= a8) {
                  unsigned int v90 = 0;
                }
                else {
                  unsigned int v90 = v116;
                }
                unsigned int v136 = v90;
                int v134 = (char *)v15 + (v90 + ((v83 - v128) << v122) - v116) * a13;
                do
                {
                  unsigned int v91 = v86 << v156;
                  unsigned int v163 = v86 + 1;
                  unsigned int v92 = a11;
                  if (v146 >= (v86 + 1) << v156) {
                    unsigned int v92 = v142;
                  }
                  int v93 = v147;
                  if (v146 < (v86 + 1) << v156) {
                    int v93 = v144;
                  }
                  if (v91 >= a7) {
                    unsigned int v94 = 0;
                  }
                  else {
                    unsigned int v94 = v154;
                  }
                  if (v91 >= a7) {
                    unsigned int v95 = v93;
                  }
                  else {
                    unsigned int v95 = v92;
                  }
                  int v96 = a14[3];
                  int v152 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v94, 0, v158, v160);
                  if (v89)
                  {
                    uint64_t v97 = result;
                    uint64_t v98 = (v86 + v138) * v96 * v152 + v164;
                    unsigned int v99 = &v134[48 * (v94 + ((v86 - v140) << v156) - v154)];
                    unint64_t result = sub_34508(0, v136, v158, v160);
                    for (int k = 0; k != v89; ++k)
                    {
                      unsigned int v101 = v95;
                      unsigned int v102 = v99;
                      for (uint64_t m = v97; v101; --v101)
                      {
                        unsigned int v104 = (__int128 *)(v98 + 48 * (m + result));
                        __int128 v105 = *v104;
                        __int128 v106 = v104[2];
                        *((_OWORD *)v102 + 1) = v104[1];
                        *((_OWORD *)v102 + 2) = v106;
                        *(_OWORD *)unsigned int v102 = v105;
                        v102 += 48;
                        uint64_t m = (m - v87) & v87;
                      }

                      unint64_t result = (result - v88) & v88;
                      v99 += a13;
                    }
                  }

                  ++v86;
                }

                while (v163 != v149);
                uint64_t v15 = v124;
                unsigned int v19 = a12;
                unsigned int v76 = v120;
                unsigned int v77 = v140;
                unsigned int v107 = v132;
              }

              unsigned int v83 = v107;
            }

            while (v107 != v76);
          }
        }
      }

      else
      {
        unsigned int v52 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v53 = v52;
        }
        else {
          int v53 = 0;
        }
        unsigned int v54 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v55 = v54;
        }
        else {
          int v55 = 0;
        }
        uint64_t v56 = sub_34508(~(-1 << v55), 0, v55, v53);
        uint64_t v57 = sub_34508(0, ~(-1 << v53), v55, v53);
        unint64_t result = sub_34508(a7, 0, v55, v53);
        if (a12)
        {
          uint64_t v58 = result;
          unint64_t result = sub_34508(0, a8, v55, v53);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v60 = a11;
            unsigned int v61 = v15;
            for (iint i = v58; v60; --v60)
            {
              __int128 v63 = (__int128 *)(v18 + 48 * (ii + result));
              __int128 v64 = *v63;
              __int128 v65 = v63[2];
              v61[1] = v63[1];
              v61[2] = v65;
              *unsigned int v61 = v64;
              v61 += 3;
              iint i = (ii - v56) & v56;
            }

            unint64_t result = (result - v57) & v57;
            uint64_t v15 = (_OWORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_49A24( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v159 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v162);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v161, &v160);
          unsigned int v120 = v163;
          if (v163)
          {
            int v20 = 0;
            unsigned __int16 v122 = 0;
            char v118 = v161;
            unsigned int v114 = a7 >> v161;
            char v152 = v160;
            unsigned int v139 = a8 >> v160;
            unsigned int v156 = v164;
            unsigned int v112 = a11 + a7;
            int v108 = ((1 << v161) - 1) & a7;
            int v110 = ((1 << v161) - 1) & (a11 + a7);
            int v106 = (1 << v161) - v108;
            unsigned int v137 = a12 + a8;
            int v124 = ((1 << v160) - 1) & a8;
            int v133 = (1 << v160) - v124;
            int v135 = ((1 << v160) - 1) & (a12 + a8);
            int v116 = 1 << v161;
            if (1 << v161 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v161;
            }
            int v141 = 1 << v160;
            if (1 << v160 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v160;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v148 = v24;
            unsigned int v131 = ~(-1 << v24);
            int v150 = v23;
            unsigned int v129 = ~(-1 << v23);
            do
            {
              if (v156)
              {
                int v25 = 0;
                unsigned __int16 v26 = 0;
                unsigned int v27 = (v20 + v114) << v118;
                unsigned int v28 = a11;
                if (v112 >= (v20 + v114 + 1) << v118) {
                  unsigned int v28 = v106;
                }
                int v29 = v116;
                if (v112 < (v20 + v114 + 1) << v118) {
                  int v29 = v110;
                }
                int v30 = v20 << v118;
                if (v27 >= a7) {
                  unsigned int v31 = v29;
                }
                else {
                  unsigned int v31 = v28;
                }
                unsigned int v32 = v108;
                if (v27 >= a7) {
                  unsigned int v32 = 0;
                }
                unsigned int v144 = v32;
                uint64_t v126 = a2 + 6LL * (v32 + v30);
                do
                {
                  LOWORD(v33) = v122;
                  HIWORD(v33) = v26;
                  unint64_t result = sub_34358(v162, v33);
                  int v34 = *(_DWORD *)(v18 + 4LL * result);
                  if (v34 < 0)
                  {
                    unint64_t v35 = v159 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                    unsigned int v36 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v36) {
                      v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v37 = a12;
                    if (v137 >= (v25 + v139 + 1) << v152) {
                      unsigned int v37 = v133;
                    }
                    int v38 = v141;
                    if (v137 < (v25 + v139 + 1) << v152) {
                      int v38 = v135;
                    }
                    if ((v25 + v139) << v152 >= a8) {
                      unsigned int v39 = v38;
                    }
                    else {
                      unsigned int v39 = v37;
                    }
                    uint64_t v40 = sub_34508(v131, 0, v148, v150);
                    uint64_t v41 = sub_34508(0, v129, v148, v150);
                    unint64_t result = sub_34508(v144, 0, v148, v150);
                    if (v39)
                    {
                      uint64_t v42 = result;
                      if ((v25 + v139) << v152 >= a8) {
                        unsigned int v43 = 0;
                      }
                      else {
                        unsigned int v43 = v124;
                      }
                      uint64_t v44 = v126 + (v43 + (v25 << v152)) * a13;
                      unint64_t result = sub_34508(0, v43, v148, v150);
                      for (int i = 0; i != v39; ++i)
                      {
                        unsigned int v46 = v31;
                        uint64_t v47 = v44;
                        for (uint64_t j = v42; v46; --v46)
                        {
                          unint64_t v49 = v35 + 6 * (j + result);
                          int v50 = *(_DWORD *)v49;
                          *(_WORD *)(v47 + 4) = *(_WORD *)(v49 + 4);
                          *(_DWORD *)uint64_t v47 = v50;
                          v47 += 6LL;
                          uint64_t j = (j - v40) & v40;
                        }

                        unint64_t result = (result - v41) & v41;
                        v44 += a13;
                      }
                    }
                  }

                  int v25 = ++v26;
                  uint64_t v18 = v159;
                }

                while (v156 > v26);
              }

              int v20 = ++v122;
            }

            while (v120 > v122);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v162, &v161);
          unsigned int v66 = 1 << v161;
          char v67 = *((_BYTE *)a14 + 15);
          unsigned int v68 = 1 << v67;
          if (v67) {
            BOOL v69 = v68 > a3;
          }
          else {
            BOOL v69 = 1;
          }
          BOOL v70 = v69 || v68 > a4;
          int v71 = (~(-1 << v67) + a3) & (-1 << v67);
          if (v70) {
            int v72 = a3;
          }
          else {
            int v72 = v71;
          }
          unsigned int v123 = a8 >> v161;
          int v125 = 1 << v161;
          unsigned int v73 = v66 - 1;
          unsigned int v121 = a12 + a8;
          char v119 = v161;
          unsigned int v74 = (v66 - 1 + a12 + a8) >> v161;
          if (a8 >> v161 < v74)
          {
            unsigned int v115 = (v72 + ~(-1 << SLOBYTE(v162[0]))) >> SLOBYTE(v162[0]);
            unsigned int v75 = a7 >> SLOBYTE(v162[0]);
            char v151 = v162[0];
            unsigned int v145 = ((1 << SLOBYTE(v162[0])) - 1 + a11 + a7) >> SLOBYTE(v162[0]);
            int v140 = ((1 << SLOBYTE(v162[0])) - 1) & (a11 + a7);
            unsigned int v142 = a11 + a7;
            uint64_t v149 = ((1 << SLOBYTE(v162[0])) - 1) & a7;
            unsigned int v138 = (1 << SLOBYTE(v162[0])) - v149;
            int v111 = v73 & v121;
            unsigned int v76 = 1 << v161;
            uint64_t v113 = v73 & a8;
            unsigned int v109 = v66 - v113;
            int v143 = 1 << SLOBYTE(v162[0]);
            if (1 << SLOBYTE(v162[0]) >= a5) {
              unsigned int v77 = a5;
            }
            else {
              unsigned int v77 = 1 << SLOBYTE(v162[0]);
            }
            if (v66 >= a6) {
              unsigned int v76 = a6;
            }
            unsigned int v78 = 32 - __clz(v76 - 1);
            if (v76 < 2) {
              unsigned int v78 = 0;
            }
            unsigned int v79 = 32 - __clz(v77 - 1);
            if (v77 >= 2) {
              unsigned int v80 = v79;
            }
            else {
              unsigned int v80 = 0;
            }
            int v153 = v80;
            unsigned int v107 = ~(-1 << v80);
            int v155 = v78;
            unsigned int v105 = ~(-1 << v78);
            unsigned int v81 = a8 >> v161;
            unsigned int v117 = (v66 - 1 + a12 + a8) >> v161;
            unsigned int v136 = a7 >> SLOBYTE(v162[0]);
            do
            {
              if (v75 >= v145)
              {
                unsigned int v104 = v81 + 1;
              }

              else
              {
                unsigned int v157 = v81 << v119;
                unsigned int v127 = v81 + 1;
                if (v121 >= (v81 + 1) << v119) {
                  int v82 = v125;
                }
                else {
                  int v82 = v111;
                }
                if (v121 >= (v81 + 1) << v119) {
                  unsigned int v83 = v109;
                }
                else {
                  unsigned int v83 = v19;
                }
                int v134 = v81 * v115;
                uint64_t v84 = sub_34508(v107, 0, v153, v155);
                uint64_t v85 = sub_34508(0, v105, v153, v155);
                if (v157 >= a8) {
                  int v86 = v82;
                }
                else {
                  int v86 = v83;
                }
                if (v157 >= a8) {
                  unsigned int v87 = 0;
                }
                else {
                  unsigned int v87 = v113;
                }
                unsigned int v132 = v87;
                uint64_t v130 = (v87 + ((v81 - v123) << v119) - v113) * a13;
                unsigned int v88 = v75;
                do
                {
                  unsigned int v89 = v88 << v151;
                  unsigned int v158 = v88 + 1;
                  unsigned int v90 = a11;
                  if (v142 >= (v88 + 1) << v151) {
                    unsigned int v90 = v138;
                  }
                  int v91 = v143;
                  if (v142 < (v88 + 1) << v151) {
                    int v91 = v140;
                  }
                  if (v89 >= a7) {
                    unsigned int v92 = 0;
                  }
                  else {
                    unsigned int v92 = v149;
                  }
                  if (v89 >= a7) {
                    unsigned int v93 = v91;
                  }
                  else {
                    unsigned int v93 = v90;
                  }
                  int v94 = a14[3];
                  int v147 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v92, 0, v153, v155);
                  if (v86)
                  {
                    uint64_t v95 = result;
                    uint64_t v96 = (v88 + v134) * v94 * v147 + v159;
                    uint64_t v97 = a2 + 6 * (v92 + ((v88 - v136) << v151) - v149) + v130;
                    unint64_t result = sub_34508(0, v132, v153, v155);
                    for (int k = 0; k != v86; ++k)
                    {
                      unsigned int v99 = v93;
                      uint64_t v100 = v97;
                      for (uint64_t m = v95; v99; --v99)
                      {
                        unsigned int v102 = (int *)(v96 + 6 * (m + result));
                        int v103 = *v102;
                        *(_WORD *)(v100 + 4) = *((_WORD *)v102 + 2);
                        *(_DWORD *)uint64_t v100 = v103;
                        v100 += 6LL;
                        uint64_t m = (m - v84) & v84;
                      }

                      unint64_t result = (result - v85) & v85;
                      v97 += a13;
                    }
                  }

                  ++v88;
                }

                while (v158 != v145);
                unsigned int v19 = a12;
                unsigned int v74 = v117;
                unsigned int v75 = v136;
                unsigned int v104 = v127;
              }

              unsigned int v81 = v104;
            }

            while (v104 != v74);
          }
        }
      }

      else
      {
        unsigned int v51 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v52 = v51;
        }
        else {
          int v52 = 0;
        }
        unsigned int v53 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v54 = v53;
        }
        else {
          int v54 = 0;
        }
        uint64_t v55 = sub_34508(~(-1 << v54), 0, v54, v52);
        uint64_t v56 = sub_34508(0, ~(-1 << v52), v54, v52);
        unint64_t result = sub_34508(a7, 0, v54, v52);
        if (a12)
        {
          uint64_t v57 = result;
          unint64_t result = sub_34508(0, a8, v54, v52);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v59 = a11;
            uint64_t v60 = v15;
            for (iint i = v57; v59; --v59)
            {
              uint64_t v62 = v18 + 6 * (ii + result);
              int v63 = *(_DWORD *)v62;
              *(_WORD *)(v60 + 4) = *(_WORD *)(v62 + 4);
              *(_DWORD *)uint64_t v60 = v63;
              v60 += 6LL;
              iint i = (ii - v55) & v55;
            }

            unint64_t result = (result - v56) & v56;
            v15 += a13;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_4A300( uint64_t a1, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_4BD08(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_4A31C( uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v154 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v157);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v156, &v155);
          unsigned int v116 = v158;
          if (v158)
          {
            int v20 = 0;
            unsigned __int16 v118 = 0;
            char v112 = v156;
            unsigned int v108 = a7 >> v156;
            char v147 = v155;
            unsigned int v134 = a8 >> v155;
            unsigned int v151 = v159;
            unsigned int v106 = a11 + a7;
            int v102 = ((1 << v156) - 1) & a7;
            int v104 = ((1 << v156) - 1) & (a11 + a7);
            int v100 = (1 << v156) - v102;
            unsigned int v132 = a12 + a8;
            int v120 = ((1 << v155) - 1) & a8;
            int v128 = (1 << v155) - v120;
            int v130 = ((1 << v155) - 1) & (a12 + a8);
            int v110 = 1 << v156;
            if (1 << v156 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v156;
            }
            int v136 = 1 << v155;
            if (1 << v155 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v155;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v143 = v24;
            int v145 = v23;
            unsigned int v124 = ~(-1 << v23);
            unsigned int v126 = ~(-1 << v24);
            int v25 = v24;
            do
            {
              if (v151)
              {
                int v26 = 0;
                unsigned __int16 v27 = 0;
                unsigned int v28 = (v20 + v108) << v112;
                unsigned int v29 = a11;
                if (v106 >= (v20 + v108 + 1) << v112) {
                  unsigned int v29 = v100;
                }
                int v30 = v110;
                if (v106 < (v20 + v108 + 1) << v112) {
                  int v30 = v104;
                }
                int v31 = v20 << v112;
                if (v28 >= a7) {
                  unsigned int v32 = v30;
                }
                else {
                  unsigned int v32 = v29;
                }
                unsigned int v33 = v102;
                if (v28 >= a7) {
                  unsigned int v33 = 0;
                }
                unsigned int v139 = v33;
                unsigned __int16 v122 = &a2[v33 + v31];
                do
                {
                  LOWORD(v34) = v118;
                  HIWORD(v34) = v27;
                  unint64_t result = sub_34358(v157, v34);
                  int v35 = *(_DWORD *)(v18 + 4LL * result);
                  if (v35 < 0)
                  {
                    unint64_t v36 = v154 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                    unsigned int v37 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v37) {
                      v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v38 = a12;
                    if (v132 >= (v26 + v134 + 1) << v147) {
                      unsigned int v38 = v128;
                    }
                    int v39 = v136;
                    if (v132 < (v26 + v134 + 1) << v147) {
                      int v39 = v130;
                    }
                    if ((v26 + v134) << v147 >= a8) {
                      unsigned int v40 = v39;
                    }
                    else {
                      unsigned int v40 = v38;
                    }
                    uint64_t v41 = sub_34508(v126, 0, v25, v145);
                    uint64_t v42 = sub_34508(0, v124, v25, v145);
                    unint64_t result = sub_34508(v139, 0, v25, v145);
                    if (v40)
                    {
                      uint64_t v43 = result;
                      if ((v26 + v134) << v147 >= a8) {
                        unsigned int v44 = 0;
                      }
                      else {
                        unsigned int v44 = v120;
                      }
                      unsigned int v45 = (_OWORD *)((char *)v122 + (v44 + (v26 << v147)) * a13);
                      unint64_t result = sub_34508(0, v44, v143, v145);
                      for (int i = 0; i != v40; ++i)
                      {
                        unsigned int v47 = v32;
                        int v48 = v45;
                        for (uint64_t j = v43; v47; --v47)
                        {
                          *v48++ = *(_OWORD *)(v36 + 16 * (j + result));
                          uint64_t j = (j - v41) & v41;
                        }

                        unint64_t result = (result - v42) & v42;
                        unsigned int v45 = (_OWORD *)((char *)v45 + a13);
                      }
                    }
                  }

                  int v26 = ++v27;
                  uint64_t v18 = v154;
                }

                while (v151 > v27);
              }

              int v20 = ++v118;
            }

            while (v116 > v118);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v157, &v156);
          unsigned int v63 = 1 << v156;
          char v64 = *((_BYTE *)a14 + 15);
          unsigned int v65 = 1 << v64;
          if (v64) {
            BOOL v66 = v65 > a3;
          }
          else {
            BOOL v66 = 1;
          }
          BOOL v67 = v66 || v65 > a4;
          int v68 = (~(-1 << v64) + a3) & (-1 << v64);
          if (v67) {
            int v69 = a3;
          }
          else {
            int v69 = v68;
          }
          unsigned int v121 = a8 >> v156;
          int v123 = 1 << v156;
          unsigned int v70 = v63 - 1;
          unsigned int v119 = a12 + a8;
          char v117 = v156;
          unsigned int v71 = (v63 - 1 + a12 + a8) >> v156;
          if (a8 >> v156 < v71)
          {
            unsigned int v111 = (v69 + ~(-1 << SLOBYTE(v157[0]))) >> SLOBYTE(v157[0]);
            unsigned int v72 = a7 >> SLOBYTE(v157[0]);
            char v146 = v157[0];
            unsigned int v142 = ((1 << SLOBYTE(v157[0])) - 1 + a11 + a7) >> SLOBYTE(v157[0]);
            int v137 = ((1 << SLOBYTE(v157[0])) - 1) & (a11 + a7);
            unsigned int v138 = a11 + a7;
            uint64_t v144 = ((1 << SLOBYTE(v157[0])) - 1) & a7;
            unsigned int v135 = (1 << SLOBYTE(v157[0])) - v144;
            int v107 = v70 & v119;
            unsigned int v73 = 1 << v156;
            uint64_t v109 = v70 & a8;
            unsigned int v105 = v63 - v109;
            int v140 = 1 << SLOBYTE(v157[0]);
            if (1 << SLOBYTE(v157[0]) >= a5) {
              unsigned int v74 = a5;
            }
            else {
              unsigned int v74 = 1 << SLOBYTE(v157[0]);
            }
            if (v63 >= a6) {
              unsigned int v73 = a6;
            }
            unsigned int v75 = 32 - __clz(v73 - 1);
            if (v73 < 2) {
              unsigned int v75 = 0;
            }
            unsigned int v76 = 32 - __clz(v74 - 1);
            if (v74 >= 2) {
              unsigned int v77 = v76;
            }
            else {
              unsigned int v77 = 0;
            }
            int v148 = v77;
            unsigned int v103 = ~(-1 << v77);
            int v150 = v75;
            unsigned int v101 = ~(-1 << v75);
            unsigned int v78 = a8 >> v156;
            unsigned int v115 = v15;
            unsigned int v113 = (v63 - 1 + a12 + a8) >> v156;
            unsigned int v133 = a7 >> SLOBYTE(v157[0]);
            do
            {
              if (v72 >= v142)
              {
                unsigned int v99 = v78 + 1;
              }

              else
              {
                unsigned int v152 = v78 << v117;
                unsigned int v125 = v78 + 1;
                if (v119 >= (v78 + 1) << v117) {
                  int v79 = v123;
                }
                else {
                  int v79 = v107;
                }
                if (v119 >= (v78 + 1) << v117) {
                  unsigned int v80 = v105;
                }
                else {
                  unsigned int v80 = v19;
                }
                int v131 = v78 * v111;
                uint64_t v81 = sub_34508(v103, 0, v148, v150);
                uint64_t v82 = sub_34508(0, v101, v148, v150);
                if (v152 >= a8) {
                  int v83 = v79;
                }
                else {
                  int v83 = v80;
                }
                if (v152 >= a8) {
                  unsigned int v84 = 0;
                }
                else {
                  unsigned int v84 = v109;
                }
                unsigned int v129 = v84;
                unsigned int v127 = (char *)v15 + (v84 + ((v78 - v121) << v117) - v109) * a13;
                do
                {
                  unsigned int v85 = v72 << v146;
                  unsigned int v153 = v72 + 1;
                  unsigned int v86 = a11;
                  if (v138 >= (v72 + 1) << v146) {
                    unsigned int v86 = v135;
                  }
                  int v87 = v140;
                  if (v138 < (v72 + 1) << v146) {
                    int v87 = v137;
                  }
                  if (v85 >= a7) {
                    unsigned int v88 = 0;
                  }
                  else {
                    unsigned int v88 = v144;
                  }
                  if (v85 >= a7) {
                    unsigned int v89 = v87;
                  }
                  else {
                    unsigned int v89 = v86;
                  }
                  int v90 = a14[3];
                  int v91 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v88, 0, v148, v150);
                  if (v83)
                  {
                    uint64_t v92 = result;
                    uint64_t v93 = (v72 + v131) * v90 * v91 + v154;
                    int v94 = &v127[16 * (v88 + ((v72 - v133) << v146) - v144)];
                    unint64_t result = sub_34508(0, v129, v148, v150);
                    for (int k = 0; k != v83; ++k)
                    {
                      unsigned int v96 = v89;
                      uint64_t v97 = v94;
                      for (uint64_t m = v92; v96; --v96)
                      {
                        *(_OWORD *)uint64_t v97 = *(_OWORD *)(v93 + 16 * (m + result));
                        v97 += 16;
                        uint64_t m = (m - v81) & v81;
                      }

                      unint64_t result = (result - v82) & v82;
                      v94 += a13;
                    }
                  }

                  ++v72;
                }

                while (v153 != v142);
                uint64_t v15 = v115;
                unsigned int v19 = a12;
                unsigned int v71 = v113;
                unsigned int v72 = v133;
                unsigned int v99 = v125;
              }

              unsigned int v78 = v99;
            }

            while (v99 != v71);
          }
        }
      }

      else
      {
        unsigned int v50 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v51 = v50;
        }
        else {
          int v51 = 0;
        }
        unsigned int v52 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v53 = v52;
        }
        else {
          int v53 = 0;
        }
        uint64_t v54 = sub_34508(~(-1 << v53), 0, v53, v51);
        uint64_t v55 = sub_34508(0, ~(-1 << v51), v53, v51);
        unint64_t result = sub_34508(a7, 0, v53, v51);
        if (a12)
        {
          uint64_t v56 = result;
          unint64_t result = sub_34508(0, a8, v53, v51);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v58 = a11;
            unsigned int v59 = v15;
            for (iint i = v56; v58; --v58)
            {
              *v59++ = *(_OWORD *)(v18 + 16 * (ii + result));
              iint i = (ii - v54) & v54;
            }

            unint64_t result = (result - v55) & v55;
            uint64_t v15 = (_OWORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_4ABB0( uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v160 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v163);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v162, &v161);
          unsigned int v122 = v164;
          if (v164)
          {
            int v20 = 0;
            unsigned __int16 v124 = 0;
            char v118 = v162;
            unsigned int v114 = a7 >> v162;
            char v153 = v161;
            unsigned int v140 = a8 >> v161;
            unsigned int v157 = v165;
            unsigned int v112 = a11 + a7;
            int v108 = ((1 << v162) - 1) & a7;
            int v110 = ((1 << v162) - 1) & (a11 + a7);
            int v106 = (1 << v162) - v108;
            unsigned int v138 = a12 + a8;
            int v126 = ((1 << v161) - 1) & a8;
            int v134 = (1 << v161) - v126;
            int v136 = ((1 << v161) - 1) & (a12 + a8);
            int v116 = 1 << v162;
            if (1 << v162 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v162;
            }
            int v142 = 1 << v161;
            if (1 << v161 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v161;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v149 = v24;
            int v151 = v23;
            unsigned int v130 = ~(-1 << v23);
            unsigned int v132 = ~(-1 << v24);
            int v25 = v24;
            do
            {
              if (v157)
              {
                int v26 = 0;
                unsigned __int16 v27 = 0;
                unsigned int v28 = (v20 + v114) << v118;
                unsigned int v29 = a11;
                if (v112 >= (v20 + v114 + 1) << v118) {
                  unsigned int v29 = v106;
                }
                int v30 = v116;
                if (v112 < (v20 + v114 + 1) << v118) {
                  int v30 = v110;
                }
                int v31 = v20 << v118;
                if (v28 >= a7) {
                  unsigned int v32 = v30;
                }
                else {
                  unsigned int v32 = v29;
                }
                unsigned int v33 = v108;
                if (v28 >= a7) {
                  unsigned int v33 = 0;
                }
                unsigned int v145 = v33;
                int v128 = &a2[2 * v33 + 2 * v31];
                do
                {
                  LOWORD(v34) = v124;
                  HIWORD(v34) = v27;
                  unint64_t result = sub_34358(v163, v34);
                  int v35 = *(_DWORD *)(v18 + 4LL * result);
                  if (v35 < 0)
                  {
                    unint64_t v36 = v160 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                    unsigned int v37 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v37) {
                      v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v38 = a12;
                    if (v138 >= (v26 + v140 + 1) << v153) {
                      unsigned int v38 = v134;
                    }
                    int v39 = v142;
                    if (v138 < (v26 + v140 + 1) << v153) {
                      int v39 = v136;
                    }
                    if ((v26 + v140) << v153 >= a8) {
                      unsigned int v40 = v39;
                    }
                    else {
                      unsigned int v40 = v38;
                    }
                    uint64_t v41 = sub_34508(v132, 0, v25, v151);
                    uint64_t v42 = sub_34508(0, v130, v25, v151);
                    unint64_t result = sub_34508(v145, 0, v25, v151);
                    if (v40)
                    {
                      uint64_t v43 = result;
                      if ((v26 + v140) << v153 >= a8) {
                        unsigned int v44 = 0;
                      }
                      else {
                        unsigned int v44 = v126;
                      }
                      unsigned int v45 = (_OWORD *)((char *)v128 + (v44 + (v26 << v153)) * a13);
                      unint64_t result = sub_34508(0, v44, v149, v151);
                      for (int i = 0; i != v40; ++i)
                      {
                        unsigned int v47 = v32;
                        int v48 = v45;
                        for (uint64_t j = v43; v47; --v47)
                        {
                          unsigned int v50 = (_OWORD *)(v36 + 32 * (j + result));
                          __int128 v51 = v50[1];
                          *int v48 = *v50;
                          v48[1] = v51;
                          v48 += 2;
                          uint64_t j = (j - v41) & v41;
                        }

                        unint64_t result = (result - v42) & v42;
                        unsigned int v45 = (_OWORD *)((char *)v45 + a13);
                      }
                    }
                  }

                  int v26 = ++v27;
                  uint64_t v18 = v160;
                }

                while (v157 > v27);
              }

              int v20 = ++v124;
            }

            while (v122 > v124);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v163, &v162);
          unsigned int v67 = 1 << v162;
          char v68 = *((_BYTE *)a14 + 15);
          unsigned int v69 = 1 << v68;
          if (v68) {
            BOOL v70 = v69 > a3;
          }
          else {
            BOOL v70 = 1;
          }
          BOOL v71 = v70 || v69 > a4;
          int v72 = (~(-1 << v68) + a3) & (-1 << v68);
          if (v71) {
            int v73 = a3;
          }
          else {
            int v73 = v72;
          }
          unsigned int v127 = a8 >> v162;
          int v129 = 1 << v162;
          unsigned int v74 = v67 - 1;
          unsigned int v125 = a12 + a8;
          char v123 = v162;
          unsigned int v75 = (v67 - 1 + a12 + a8) >> v162;
          if (a8 >> v162 < v75)
          {
            unsigned int v117 = (v73 + ~(-1 << SLOBYTE(v163[0]))) >> SLOBYTE(v163[0]);
            unsigned int v76 = a7 >> SLOBYTE(v163[0]);
            char v152 = v163[0];
            unsigned int v148 = ((1 << SLOBYTE(v163[0])) - 1 + a11 + a7) >> SLOBYTE(v163[0]);
            int v143 = ((1 << SLOBYTE(v163[0])) - 1) & (a11 + a7);
            unsigned int v144 = a11 + a7;
            uint64_t v150 = ((1 << SLOBYTE(v163[0])) - 1) & a7;
            unsigned int v141 = (1 << SLOBYTE(v163[0])) - v150;
            int v113 = v74 & v125;
            unsigned int v77 = 1 << v162;
            uint64_t v115 = v74 & a8;
            unsigned int v111 = v67 - v115;
            int v146 = 1 << SLOBYTE(v163[0]);
            if (1 << SLOBYTE(v163[0]) >= a5) {
              unsigned int v78 = a5;
            }
            else {
              unsigned int v78 = 1 << SLOBYTE(v163[0]);
            }
            if (v67 >= a6) {
              unsigned int v77 = a6;
            }
            unsigned int v79 = 32 - __clz(v77 - 1);
            if (v77 < 2) {
              unsigned int v79 = 0;
            }
            unsigned int v80 = 32 - __clz(v78 - 1);
            if (v78 >= 2) {
              unsigned int v81 = v80;
            }
            else {
              unsigned int v81 = 0;
            }
            int v154 = v81;
            unsigned int v109 = ~(-1 << v81);
            int v156 = v79;
            unsigned int v107 = ~(-1 << v79);
            unsigned int v82 = a8 >> v162;
            unsigned int v121 = v15;
            unsigned int v119 = (v67 - 1 + a12 + a8) >> v162;
            unsigned int v139 = a7 >> SLOBYTE(v163[0]);
            do
            {
              if (v76 >= v148)
              {
                unsigned int v105 = v82 + 1;
              }

              else
              {
                unsigned int v158 = v82 << v123;
                unsigned int v131 = v82 + 1;
                if (v125 >= (v82 + 1) << v123) {
                  int v83 = v129;
                }
                else {
                  int v83 = v113;
                }
                if (v125 >= (v82 + 1) << v123) {
                  unsigned int v84 = v111;
                }
                else {
                  unsigned int v84 = v19;
                }
                int v137 = v82 * v117;
                uint64_t v85 = sub_34508(v109, 0, v154, v156);
                uint64_t v86 = sub_34508(0, v107, v154, v156);
                if (v158 >= a8) {
                  int v87 = v83;
                }
                else {
                  int v87 = v84;
                }
                if (v158 >= a8) {
                  unsigned int v88 = 0;
                }
                else {
                  unsigned int v88 = v115;
                }
                unsigned int v135 = v88;
                unsigned int v133 = (char *)v15 + (v88 + ((v82 - v127) << v123) - v115) * a13;
                do
                {
                  unsigned int v89 = v76 << v152;
                  unsigned int v159 = v76 + 1;
                  unsigned int v90 = a11;
                  if (v144 >= (v76 + 1) << v152) {
                    unsigned int v90 = v141;
                  }
                  int v91 = v146;
                  if (v144 < (v76 + 1) << v152) {
                    int v91 = v143;
                  }
                  if (v89 >= a7) {
                    unsigned int v92 = 0;
                  }
                  else {
                    unsigned int v92 = v150;
                  }
                  if (v89 >= a7) {
                    unsigned int v93 = v91;
                  }
                  else {
                    unsigned int v93 = v90;
                  }
                  int v94 = a14[3];
                  int v95 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v92, 0, v154, v156);
                  if (v87)
                  {
                    uint64_t v96 = result;
                    uint64_t v97 = (v76 + v137) * v94 * v95 + v160;
                    uint64_t v98 = &v133[32 * (v92 + ((v76 - v139) << v152) - v150)];
                    unint64_t result = sub_34508(0, v135, v154, v156);
                    for (int k = 0; k != v87; ++k)
                    {
                      unsigned int v100 = v93;
                      unsigned int v101 = v98;
                      for (uint64_t m = v96; v100; --v100)
                      {
                        unsigned int v103 = (_OWORD *)(v97 + 32 * (m + result));
                        __int128 v104 = v103[1];
                        *(_OWORD *)unsigned int v101 = *v103;
                        *((_OWORD *)v101 + 1) = v104;
                        v101 += 32;
                        uint64_t m = (m - v85) & v85;
                      }

                      unint64_t result = (result - v86) & v86;
                      v98 += a13;
                    }
                  }

                  ++v76;
                }

                while (v159 != v148);
                uint64_t v15 = v121;
                unsigned int v19 = a12;
                unsigned int v75 = v119;
                unsigned int v76 = v139;
                unsigned int v105 = v131;
              }

              unsigned int v82 = v105;
            }

            while (v105 != v75);
          }
        }
      }

      else
      {
        unsigned int v52 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v53 = v52;
        }
        else {
          int v53 = 0;
        }
        unsigned int v54 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v55 = v54;
        }
        else {
          int v55 = 0;
        }
        uint64_t v56 = sub_34508(~(-1 << v55), 0, v55, v53);
        uint64_t v57 = sub_34508(0, ~(-1 << v53), v55, v53);
        unint64_t result = sub_34508(a7, 0, v55, v53);
        if (a12)
        {
          uint64_t v58 = result;
          unint64_t result = sub_34508(0, a8, v55, v53);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v60 = a11;
            unsigned int v61 = v15;
            for (iint i = v58; v60; --v60)
            {
              unsigned int v63 = (_OWORD *)(v18 + 32 * (ii + result));
              __int128 v64 = v63[1];
              *unsigned int v61 = *v63;
              v61[1] = v64;
              v61 += 2;
              iint i = (ii - v56) & v56;
            }

            unint64_t result = (result - v57) & v57;
            uint64_t v15 = (_OWORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_4B450( uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v166 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v169);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v168, &v167);
          unsigned int v128 = v170;
          if (v170)
          {
            int v20 = 0;
            unsigned __int16 v130 = 0;
            char v124 = v168;
            unsigned int v120 = a7 >> v168;
            char v159 = v167;
            unsigned int v146 = a8 >> v167;
            unsigned int v163 = v171;
            unsigned int v118 = a11 + a7;
            int v114 = ((1 << v168) - 1) & a7;
            int v116 = ((1 << v168) - 1) & (a11 + a7);
            int v112 = (1 << v168) - v114;
            unsigned int v144 = a12 + a8;
            int v132 = ((1 << v167) - 1) & a8;
            int v140 = (1 << v167) - v132;
            int v142 = ((1 << v167) - 1) & (a12 + a8);
            int v122 = 1 << v168;
            if (1 << v168 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v168;
            }
            int v148 = 1 << v167;
            if (1 << v167 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v167;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v155 = v24;
            int v157 = v23;
            unsigned int v136 = ~(-1 << v23);
            unsigned int v138 = ~(-1 << v24);
            int v25 = v24;
            do
            {
              if (v163)
              {
                int v26 = 0;
                unsigned __int16 v27 = 0;
                unsigned int v28 = (v20 + v120) << v124;
                unsigned int v29 = a11;
                if (v118 >= (v20 + v120 + 1) << v124) {
                  unsigned int v29 = v112;
                }
                int v30 = v122;
                if (v118 < (v20 + v120 + 1) << v124) {
                  int v30 = v116;
                }
                int v31 = v20 << v124;
                if (v28 >= a7) {
                  unsigned int v32 = v30;
                }
                else {
                  unsigned int v32 = v29;
                }
                unsigned int v33 = v114;
                if (v28 >= a7) {
                  unsigned int v33 = 0;
                }
                unsigned int v151 = v33;
                int v134 = &a2[4 * (unint64_t)(v33 + v31)];
                do
                {
                  LOWORD(v34) = v130;
                  HIWORD(v34) = v27;
                  unint64_t result = sub_34358(v169, v34);
                  int v35 = *(_DWORD *)(v18 + 4LL * result);
                  if (v35 < 0)
                  {
                    unint64_t v36 = v166 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                    unsigned int v37 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v37) {
                      v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v38 = a12;
                    if (v144 >= (v26 + v146 + 1) << v159) {
                      unsigned int v38 = v140;
                    }
                    int v39 = v148;
                    if (v144 < (v26 + v146 + 1) << v159) {
                      int v39 = v142;
                    }
                    if ((v26 + v146) << v159 >= a8) {
                      unsigned int v40 = v39;
                    }
                    else {
                      unsigned int v40 = v38;
                    }
                    uint64_t v41 = sub_34508(v138, 0, v25, v157);
                    uint64_t v42 = sub_34508(0, v136, v25, v157);
                    unint64_t result = sub_34508(v151, 0, v25, v157);
                    if (v40)
                    {
                      uint64_t v43 = result;
                      if ((v26 + v146) << v159 >= a8) {
                        unsigned int v44 = 0;
                      }
                      else {
                        unsigned int v44 = v132;
                      }
                      unsigned int v45 = (_OWORD *)((char *)v134 + (v44 + (v26 << v159)) * a13);
                      unint64_t result = sub_34508(0, v44, v155, v157);
                      for (int i = 0; i != v40; ++i)
                      {
                        unsigned int v47 = v32;
                        int v48 = v45;
                        for (uint64_t j = v43; v47; --v47)
                        {
                          unsigned int v50 = (__int128 *)(v36 + ((j + result) << 6));
                          __int128 v51 = *v50;
                          __int128 v52 = v50[1];
                          __int128 v53 = v50[3];
                          v48[2] = v50[2];
                          v48[3] = v53;
                          *int v48 = v51;
                          v48[1] = v52;
                          v48 += 4;
                          uint64_t j = (j - v41) & v41;
                        }

                        unint64_t result = (result - v42) & v42;
                        unsigned int v45 = (_OWORD *)((char *)v45 + a13);
                      }
                    }
                  }

                  int v26 = ++v27;
                  uint64_t v18 = v166;
                }

                while (v163 > v27);
              }

              int v20 = ++v130;
            }

            while (v128 > v130);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v169, &v168);
          unsigned int v71 = 1 << v168;
          char v72 = *((_BYTE *)a14 + 15);
          unsigned int v73 = 1 << v72;
          if (v72) {
            BOOL v74 = v73 > a3;
          }
          else {
            BOOL v74 = 1;
          }
          BOOL v75 = v74 || v73 > a4;
          int v76 = (~(-1 << v72) + a3) & (-1 << v72);
          if (v75) {
            int v77 = a3;
          }
          else {
            int v77 = v76;
          }
          unsigned int v133 = a8 >> v168;
          int v135 = 1 << v168;
          unsigned int v78 = v71 - 1;
          unsigned int v131 = a12 + a8;
          char v129 = v168;
          unsigned int v79 = (v71 - 1 + a12 + a8) >> v168;
          if (a8 >> v168 < v79)
          {
            unsigned int v123 = (v77 + ~(-1 << SLOBYTE(v169[0]))) >> SLOBYTE(v169[0]);
            unsigned int v80 = a7 >> SLOBYTE(v169[0]);
            char v158 = v169[0];
            unsigned int v154 = ((1 << SLOBYTE(v169[0])) - 1 + a11 + a7) >> SLOBYTE(v169[0]);
            int v149 = ((1 << SLOBYTE(v169[0])) - 1) & (a11 + a7);
            unsigned int v150 = a11 + a7;
            uint64_t v156 = ((1 << SLOBYTE(v169[0])) - 1) & a7;
            unsigned int v147 = (1 << SLOBYTE(v169[0])) - v156;
            int v119 = v78 & v131;
            unsigned int v81 = 1 << v168;
            uint64_t v121 = v78 & a8;
            unsigned int v117 = v71 - v121;
            int v152 = 1 << SLOBYTE(v169[0]);
            if (1 << SLOBYTE(v169[0]) >= a5) {
              unsigned int v82 = a5;
            }
            else {
              unsigned int v82 = 1 << SLOBYTE(v169[0]);
            }
            if (v71 >= a6) {
              unsigned int v81 = a6;
            }
            unsigned int v83 = 32 - __clz(v81 - 1);
            if (v81 < 2) {
              unsigned int v83 = 0;
            }
            unsigned int v84 = 32 - __clz(v82 - 1);
            if (v82 >= 2) {
              unsigned int v85 = v84;
            }
            else {
              unsigned int v85 = 0;
            }
            int v160 = v85;
            unsigned int v115 = ~(-1 << v85);
            int v162 = v83;
            unsigned int v113 = ~(-1 << v83);
            unsigned int v86 = a8 >> v168;
            unsigned int v127 = v15;
            unsigned int v125 = (v71 - 1 + a12 + a8) >> v168;
            unsigned int v145 = a7 >> SLOBYTE(v169[0]);
            do
            {
              if (v80 >= v154)
              {
                unsigned int v111 = v86 + 1;
              }

              else
              {
                unsigned int v164 = v86 << v129;
                unsigned int v137 = v86 + 1;
                if (v131 >= (v86 + 1) << v129) {
                  int v87 = v135;
                }
                else {
                  int v87 = v119;
                }
                if (v131 >= (v86 + 1) << v129) {
                  unsigned int v88 = v117;
                }
                else {
                  unsigned int v88 = v19;
                }
                int v143 = v86 * v123;
                uint64_t v89 = sub_34508(v115, 0, v160, v162);
                uint64_t v90 = sub_34508(0, v113, v160, v162);
                if (v164 >= a8) {
                  int v91 = v87;
                }
                else {
                  int v91 = v88;
                }
                if (v164 >= a8) {
                  unsigned int v92 = 0;
                }
                else {
                  unsigned int v92 = v121;
                }
                unsigned int v141 = v92;
                unsigned int v139 = (char *)v15 + (v92 + ((v86 - v133) << v129) - v121) * a13;
                do
                {
                  unsigned int v93 = v80 << v158;
                  unsigned int v165 = v80 + 1;
                  unsigned int v94 = a11;
                  if (v150 >= (v80 + 1) << v158) {
                    unsigned int v94 = v147;
                  }
                  int v95 = v152;
                  if (v150 < (v80 + 1) << v158) {
                    int v95 = v149;
                  }
                  if (v93 >= a7) {
                    unsigned int v96 = 0;
                  }
                  else {
                    unsigned int v96 = v156;
                  }
                  if (v93 >= a7) {
                    unsigned int v97 = v95;
                  }
                  else {
                    unsigned int v97 = v94;
                  }
                  int v98 = a14[3];
                  int v99 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v96, 0, v160, v162);
                  if (v91)
                  {
                    uint64_t v100 = result;
                    uint64_t v101 = (v80 + v143) * v98 * v99 + v166;
                    int v102 = &v139[64 * (v96 + ((v80 - v145) << v158) - v156)];
                    unint64_t result = sub_34508(0, v141, v160, v162);
                    for (int k = 0; k != v91; ++k)
                    {
                      unsigned int v104 = v97;
                      unsigned int v105 = v102;
                      for (uint64_t m = v100; v104; --v104)
                      {
                        unsigned int v107 = (__int128 *)(v101 + ((m + result) << 6));
                        __int128 v108 = *v107;
                        __int128 v109 = v107[1];
                        __int128 v110 = v107[3];
                        *((_OWORD *)v105 + 2) = v107[2];
                        *((_OWORD *)v105 + 3) = v110;
                        *(_OWORD *)unsigned int v105 = v108;
                        *((_OWORD *)v105 + 1) = v109;
                        v105 += 64;
                        uint64_t m = (m - v89) & v89;
                      }

                      unint64_t result = (result - v90) & v90;
                      v102 += a13;
                    }
                  }

                  ++v80;
                }

                while (v165 != v154);
                uint64_t v15 = v127;
                unsigned int v19 = a12;
                unsigned int v79 = v125;
                unsigned int v80 = v145;
                unsigned int v111 = v137;
              }

              unsigned int v86 = v111;
            }

            while (v111 != v79);
          }
        }
      }

      else
      {
        unsigned int v54 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v55 = v54;
        }
        else {
          int v55 = 0;
        }
        unsigned int v56 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v57 = v56;
        }
        else {
          int v57 = 0;
        }
        uint64_t v58 = sub_34508(~(-1 << v57), 0, v57, v55);
        uint64_t v59 = sub_34508(0, ~(-1 << v55), v57, v55);
        unint64_t result = sub_34508(a7, 0, v57, v55);
        if (a12)
        {
          uint64_t v60 = result;
          unint64_t result = sub_34508(0, a8, v57, v55);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v62 = a11;
            unsigned int v63 = v15;
            for (iint i = v60; v62; --v62)
            {
              unsigned int v65 = (__int128 *)(v18 + ((ii + result) << 6));
              __int128 v66 = *v65;
              __int128 v67 = v65[1];
              __int128 v68 = v65[3];
              v63[2] = v65[2];
              v63[3] = v68;
              *unsigned int v63 = v66;
              v63[1] = v67;
              v63 += 4;
              iint i = (ii - v58) & v58;
            }

            unint64_t result = (result - v59) & v59;
            uint64_t v15 = (_OWORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_4BD08( uint64_t result, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    unsigned int v18 = a12;
    if (a14)
    {
      uint64_t v151 = result;
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v154);
        unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v153, &v152);
        unsigned int v117 = v155;
        if (v155)
        {
          int v119 = 0;
          char v115 = v153;
          unsigned int v111 = a7 >> v153;
          char v145 = v152;
          unsigned int v135 = a8 >> v152;
          unsigned int v149 = v156;
          unsigned int v109 = a11 + a7;
          int v105 = ((1 << v153) - 1) & a7;
          int v107 = ((1 << v153) - 1) & (a11 + a7);
          int v103 = (1 << v153) - v105;
          unsigned int v133 = a12 + a8;
          int v121 = ((1 << v152) - 1) & a8;
          int v129 = (1 << v152) - v121;
          int v131 = ((1 << v152) - 1) & (a12 + a8);
          int v113 = 1 << v153;
          if (1 << v153 >= a5) {
            unsigned int v19 = a5;
          }
          else {
            unsigned int v19 = 1 << v153;
          }
          int v137 = 1 << v152;
          if (1 << v152 >= a6) {
            unsigned int v20 = a6;
          }
          else {
            unsigned int v20 = 1 << v152;
          }
          unsigned int v21 = 32 - __clz(v20 - 1);
          if (v20 < 2) {
            unsigned int v21 = 0;
          }
          unsigned int v22 = 32 - __clz(v19 - 1);
          if (v19 >= 2) {
            int v23 = v22;
          }
          else {
            int v23 = 0;
          }
          int v143 = v21;
          unsigned int v126 = ~(-1 << v21);
          do
          {
            if (v149)
            {
              int v24 = 0;
              unsigned int v25 = (v119 + v111) << v115;
              unsigned int v26 = a11;
              if (v109 >= (v119 + v111 + 1) << v115) {
                unsigned int v26 = v103;
              }
              int v27 = v113;
              if (v109 < (v119 + v111 + 1) << v115) {
                int v27 = v107;
              }
              if (v25 >= a7) {
                unsigned int v28 = v27;
              }
              else {
                unsigned int v28 = v26;
              }
              unsigned int v29 = v105;
              if (v25 >= a7) {
                unsigned int v29 = 0;
              }
              unsigned int v141 = v29;
              unsigned int v123 = &a2[v29 + (v119 << v115)];
              do
              {
                LOWORD(v30) = v119;
                HIWORD(v30) = v24;
                unint64_t result = sub_34358(v154, v30);
                int v31 = *(_DWORD *)(v17 + 4LL * result);
                if (v31 < 0)
                {
                  unint64_t v32 = v151 - *(void *)(a15 + 24) + ((unint64_t)(v31 & 0x3FFFFFF) << 14);
                  unsigned int v33 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v33) {
                    v32 += sub_343C0( *(_DWORD *)a15,  v33,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v34 = (v24 + v135) << v145;
                  unsigned int v35 = a12;
                  if (v133 >= (v24 + v135 + 1) << v145) {
                    unsigned int v35 = v129;
                  }
                  int v36 = v137;
                  if (v133 < (v24 + v135 + 1) << v145) {
                    int v36 = v131;
                  }
                  if (v34 >= a8) {
                    unsigned int v37 = v36;
                  }
                  else {
                    unsigned int v37 = v35;
                  }
                  uint64_t v38 = sub_34508(~(-1 << v23), 0, v23, v143);
                  uint64_t v39 = sub_34508(0, v126, v23, v143);
                  unint64_t result = sub_34508(v141, 0, v23, v143);
                  if (v37)
                  {
                    uint64_t v40 = result;
                    if (v34 >= a8) {
                      unsigned int v41 = 0;
                    }
                    else {
                      unsigned int v41 = v121;
                    }
                    uint64_t v42 = (void *)((char *)v123 + (v41 + (v24 << v145)) * a13);
                    unint64_t result = sub_34508(0, v41, v23, v143);
                    for (int i = 0; i != v37; ++i)
                    {
                      unsigned int v44 = v28;
                      unsigned int v45 = v42;
                      for (uint64_t j = v40; v44; --v44)
                      {
                        *v45++ = *(void *)(v32 + 8 * (j + result));
                        uint64_t j = (j - v38) & v38;
                      }

                      unint64_t result = (result - v39) & v39;
                      uint64_t v42 = (void *)((char *)v42 + a13);
                    }
                  }
                }

                ++v24;
                uint64_t v17 = v151;
              }

              while (v149 > (unsigned __int16)v24);
            }

            ++v119;
          }

          while (v117 > (unsigned __int16)v119);
        }
      }

      else
      {
        unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v154, &v153);
        unsigned int v62 = 1 << v153;
        char v63 = *((_BYTE *)a14 + 15);
        unsigned int v64 = 1 << v63;
        if (v63) {
          BOOL v65 = v64 > a3;
        }
        else {
          BOOL v65 = 1;
        }
        BOOL v66 = v65 || v64 > a4;
        int v67 = (~(-1 << v63) + a3) & (-1 << v63);
        if (v66) {
          int v68 = a3;
        }
        else {
          int v68 = v67;
        }
        unsigned int v118 = a8 >> v153;
        int v120 = 1 << v153;
        unsigned int v69 = v62 - 1;
        unsigned int v116 = a12 + a8;
        char v114 = v153;
        unsigned int v70 = (v62 - 1 + a12 + a8) >> v153;
        if (a8 >> v153 < v70)
        {
          unsigned int v110 = (v68 + ~(-1 << SLOBYTE(v154[0]))) >> SLOBYTE(v154[0]);
          unsigned int v71 = a7 >> SLOBYTE(v154[0]);
          char v144 = v154[0];
          unsigned int v139 = ((1 << SLOBYTE(v154[0])) - 1 + a11 + a7) >> SLOBYTE(v154[0]);
          int v134 = ((1 << SLOBYTE(v154[0])) - 1) & (a11 + a7);
          unsigned int v136 = a11 + a7;
          uint64_t v142 = ((1 << SLOBYTE(v154[0])) - 1) & a7;
          unsigned int v132 = (1 << SLOBYTE(v154[0])) - v142;
          int v106 = v69 & v116;
          unsigned int v72 = 1 << v153;
          uint64_t v108 = v69 & a8;
          unsigned int v104 = v62 - v108;
          int v138 = 1 << SLOBYTE(v154[0]);
          if (1 << SLOBYTE(v154[0]) >= a5) {
            unsigned int v73 = a5;
          }
          else {
            unsigned int v73 = 1 << SLOBYTE(v154[0]);
          }
          if (v62 >= a6) {
            unsigned int v72 = a6;
          }
          unsigned int v74 = 32 - __clz(v72 - 1);
          if (v72 < 2) {
            unsigned int v74 = 0;
          }
          unsigned int v75 = 32 - __clz(v73 - 1);
          if (v73 >= 2) {
            unsigned int v76 = v75;
          }
          else {
            unsigned int v76 = 0;
          }
          int v146 = v76;
          unsigned int v102 = ~(-1 << v76);
          int v148 = v74;
          unsigned int v101 = ~(-1 << v74);
          unsigned int v77 = a8 >> v153;
          unsigned int v112 = (v62 - 1 + a12 + a8) >> v153;
          unsigned int v130 = a7 >> SLOBYTE(v154[0]);
          do
          {
            if (v71 >= v139)
            {
              unsigned int v100 = v77 + 1;
            }

            else
            {
              unsigned int v78 = v77 << v114;
              unsigned int v122 = v77 + 1;
              if (v116 >= (v77 + 1) << v114) {
                int v79 = v120;
              }
              else {
                int v79 = v106;
              }
              if (v116 >= (v77 + 1) << v114) {
                unsigned int v80 = v104;
              }
              else {
                unsigned int v80 = v18;
              }
              int v128 = v77 * v110;
              uint64_t v81 = sub_34508(v102, 0, v146, v148);
              uint64_t v82 = sub_34508(0, v101, v146, v148);
              BOOL v83 = v78 >= a8;
              if (v78 >= a8) {
                int v84 = v79;
              }
              else {
                int v84 = v80;
              }
              if (v83) {
                unsigned int v85 = 0;
              }
              else {
                unsigned int v85 = v108;
              }
              unsigned int v127 = v85;
              uint64_t v124 = (v85 + ((v77 - v118) << v114) - v108) * a13;
              do
              {
                unsigned int v86 = v71 << v144;
                unsigned int v150 = v71 + 1;
                unsigned int v87 = a11;
                if (v136 >= (v71 + 1) << v144) {
                  unsigned int v87 = v132;
                }
                int v88 = v138;
                if (v136 < (v71 + 1) << v144) {
                  int v88 = v134;
                }
                if (v86 >= a7) {
                  unsigned int v89 = 0;
                }
                else {
                  unsigned int v89 = v142;
                }
                if (v86 >= a7) {
                  unsigned int v90 = v88;
                }
                else {
                  unsigned int v90 = v87;
                }
                int v91 = a14[3];
                int v92 = *((unsigned __int8 *)a14 + 9);
                unint64_t result = sub_34508(v89, 0, v146, v148);
                if (v84)
                {
                  uint64_t v93 = result;
                  uint64_t v94 = (v71 + v128) * v91 * v92 + v151;
                  int v95 = (void *)((char *)&a2[v89 + ((v71 - v130) << v144) - v142] + v124);
                  unint64_t result = sub_34508(0, v127, v146, v148);
                  for (int k = 0; k != v84; ++k)
                  {
                    unsigned int v97 = v90;
                    int v98 = v95;
                    for (uint64_t m = v93; v97; --v97)
                    {
                      *v98++ = *(void *)(v94 + 8 * (m + result));
                      uint64_t m = (m - v81) & v81;
                    }

                    unint64_t result = (result - v82) & v82;
                    int v95 = (void *)((char *)v95 + a13);
                  }
                }

                ++v71;
              }

              while (v150 != v139);
              unsigned int v18 = a12;
              unsigned int v70 = v112;
              unsigned int v71 = v130;
              unsigned int v100 = v122;
            }

            unsigned int v77 = v100;
          }

          while (v100 != v70);
        }
      }
    }

    else
    {
      unsigned int v47 = 32 - __clz(a6 - 1);
      if (a6 >= 2) {
        int v48 = v47;
      }
      else {
        int v48 = 0;
      }
      unsigned int v49 = 32 - __clz(a5 - 1);
      if (a5 >= 2) {
        int v50 = v49;
      }
      else {
        int v50 = 0;
      }
      uint64_t v52 = sub_34508(~(-1 << v50), 0, v50, v48);
      uint64_t v53 = sub_34508(0, ~(-1 << v48), v50, v48);
      unint64_t result = sub_34508(a7, 0, v50, v48);
      if (a12)
      {
        uint64_t v54 = result;
        unint64_t result = sub_34508(0, a8, v50, v48);
        int v55 = a2;
        for (int n = 0; n != a12; ++n)
        {
          unsigned int v57 = a11;
          uint64_t v58 = v55;
          for (iint i = v54; v57; --v57)
          {
            *v58++ = *(void *)(v17 + 8 * (ii + result));
            iint i = (ii - v52) & v52;
          }

          unint64_t result = (result - v53) & v53;
          int v55 = (void *)((char *)v55 + a13);
        }
      }
    }
  }

  return result;
}

uint64_t sub_4C574( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_4E060(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_4C590( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v161 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v164);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v163, &v162);
          unsigned int v122 = v165;
          if (v165)
          {
            int v20 = 0;
            unsigned __int16 v124 = 0;
            char v118 = v163;
            unsigned int v114 = a7 >> v163;
            char v154 = v162;
            unsigned int v140 = a8 >> v162;
            unsigned int v158 = v166;
            unsigned int v112 = a11 + a7;
            int v108 = ((1 << v163) - 1) & a7;
            int v110 = ((1 << v163) - 1) & (a11 + a7);
            int v106 = (1 << v163) - v108;
            unsigned int v138 = a12 + a8;
            int v126 = ((1 << v162) - 1) & a8;
            int v134 = (1 << v162) - v126;
            int v136 = ((1 << v162) - 1) & (a12 + a8);
            int v116 = 1 << v163;
            if (1 << v163 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v163;
            }
            int v142 = 1 << v162;
            if (1 << v162 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v162;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v150 = v24;
            unsigned int v132 = ~(-1 << v24);
            int v152 = v23;
            unsigned int v130 = ~(-1 << v23);
            do
            {
              if (v158)
              {
                int v25 = 0;
                unsigned __int16 v26 = 0;
                unsigned int v27 = (v20 + v114) << v118;
                unsigned int v28 = a11;
                if (v112 >= (v20 + v114 + 1) << v118) {
                  unsigned int v28 = v106;
                }
                int v29 = v116;
                if (v112 < (v20 + v114 + 1) << v118) {
                  int v29 = v110;
                }
                int v30 = v20 << v118;
                if (v27 >= a7) {
                  unsigned int v31 = v29;
                }
                else {
                  unsigned int v31 = v28;
                }
                unsigned int v32 = v108;
                if (v27 >= a7) {
                  unsigned int v32 = 0;
                }
                unsigned int v145 = v32;
                uint64_t v128 = a2 + 24LL * (v32 + v30);
                do
                {
                  LOWORD(v33) = v124;
                  HIWORD(v33) = v26;
                  unint64_t result = sub_34358(v164, v33);
                  int v34 = *(_DWORD *)(v161 + 4LL * result);
                  if (v34 < 0)
                  {
                    unint64_t v35 = v161 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                    unsigned int v36 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v36) {
                      v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v37 = a12;
                    if (v138 >= (v25 + v140 + 1) << v154) {
                      unsigned int v37 = v134;
                    }
                    int v38 = v142;
                    if (v138 < (v25 + v140 + 1) << v154) {
                      int v38 = v136;
                    }
                    if ((v25 + v140) << v154 >= a8) {
                      unsigned int v39 = v38;
                    }
                    else {
                      unsigned int v39 = v37;
                    }
                    uint64_t v40 = sub_34508(v132, 0, v150, v152);
                    uint64_t v41 = sub_34508(0, v130, v150, v152);
                    unint64_t result = sub_34508(v145, 0, v150, v152);
                    if (v39)
                    {
                      uint64_t v42 = result;
                      if ((v25 + v140) << v154 >= a8) {
                        unsigned int v43 = 0;
                      }
                      else {
                        unsigned int v43 = v126;
                      }
                      uint64_t v44 = v128 + (v43 + (v25 << v154)) * a13;
                      unint64_t result = sub_34508(0, v43, v150, v152);
                      for (int i = 0; i != v39; ++i)
                      {
                        unsigned int v46 = v31;
                        uint64_t v47 = v44;
                        for (uint64_t j = v42; v46; --v46)
                        {
                          unint64_t v49 = v35 + 24 * (j + result);
                          __int128 v50 = *(_OWORD *)v49;
                          *(void *)(v47 + 16) = *(void *)(v49 + 16);
                          *(_OWORD *)uint64_t v47 = v50;
                          v47 += 24LL;
                          uint64_t j = (j - v40) & v40;
                        }

                        unint64_t result = (result - v41) & v41;
                        v44 += a13;
                      }
                    }
                  }

                  int v25 = ++v26;
                }

                while (v158 > v26);
              }

              int v20 = ++v124;
            }

            while (v122 > v124);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v164, &v163);
          unsigned int v66 = 1 << v163;
          char v67 = *((_BYTE *)a14 + 15);
          unsigned int v68 = 1 << v67;
          if (v67) {
            BOOL v69 = v68 > a3;
          }
          else {
            BOOL v69 = 1;
          }
          BOOL v70 = v69 || v68 > a4;
          int v71 = (~(-1 << v67) + a3) & (-1 << v67);
          if (v70) {
            int v72 = a3;
          }
          else {
            int v72 = v71;
          }
          unsigned int v125 = a8 >> v163;
          int v127 = 1 << v163;
          unsigned int v73 = v66 - 1;
          unsigned int v123 = a12 + a8;
          char v119 = v163;
          unsigned int v74 = (v66 - 1 + a12 + a8) >> v163;
          if (a8 >> v163 < v74)
          {
            unsigned int v115 = (v72 + ~(-1 << SLOBYTE(v164[0]))) >> SLOBYTE(v164[0]);
            unsigned int v75 = a7 >> SLOBYTE(v164[0]);
            char v153 = v164[0];
            unsigned int v146 = ((1 << SLOBYTE(v164[0])) - 1 + a11 + a7) >> SLOBYTE(v164[0]);
            int v141 = ((1 << SLOBYTE(v164[0])) - 1) & (a11 + a7);
            unsigned int v143 = a11 + a7;
            uint64_t v151 = ((1 << SLOBYTE(v164[0])) - 1) & a7;
            unsigned int v139 = (1 << SLOBYTE(v164[0])) - v151;
            int v111 = v73 & v123;
            unsigned int v76 = 1 << v163;
            uint64_t v113 = v73 & a8;
            unsigned int v109 = v66 - v113;
            int v144 = 1 << SLOBYTE(v164[0]);
            if (1 << SLOBYTE(v164[0]) >= a5) {
              unsigned int v77 = a5;
            }
            else {
              unsigned int v77 = 1 << SLOBYTE(v164[0]);
            }
            if (v66 >= a6) {
              unsigned int v76 = a6;
            }
            unsigned int v78 = 32 - __clz(v76 - 1);
            if (v76 < 2) {
              unsigned int v78 = 0;
            }
            unsigned int v79 = 32 - __clz(v77 - 1);
            if (v77 >= 2) {
              unsigned int v80 = v79;
            }
            else {
              unsigned int v80 = 0;
            }
            int v155 = v80;
            unsigned int v107 = ~(-1 << v80);
            int v157 = v78;
            unsigned int v105 = ~(-1 << v78);
            unsigned int v81 = a8 >> v163;
            uint64_t v121 = v15;
            unsigned int v117 = (v66 - 1 + a12 + a8) >> v163;
            unsigned int v137 = a7 >> SLOBYTE(v164[0]);
            do
            {
              if (v75 >= v146)
              {
                unsigned int v104 = v81 + 1;
              }

              else
              {
                unsigned int v159 = v81 << v119;
                unsigned int v129 = v81 + 1;
                int v82 = v127;
                if (v123 < (v81 + 1) << v119) {
                  int v82 = v111;
                }
                int v148 = v82;
                if (v123 >= (v81 + 1) << v119) {
                  unsigned int v83 = v109;
                }
                else {
                  unsigned int v83 = v19;
                }
                int v135 = v81 * v115;
                unsigned int v84 = v75;
                uint64_t v85 = sub_34508(v107, 0, v155, v157);
                uint64_t v86 = sub_34508(0, v105, v155, v157);
                if (v159 >= a8) {
                  unsigned int v87 = v148;
                }
                else {
                  unsigned int v87 = v83;
                }
                if (v159 >= a8) {
                  unsigned int v88 = 0;
                }
                else {
                  unsigned int v88 = v113;
                }
                unsigned int v133 = v88;
                uint64_t v131 = v15 + (v88 + ((v81 - v125) << v119) - v113) * a13;
                do
                {
                  unsigned int v89 = v84 << v153;
                  unsigned int v160 = v84 + 1;
                  unsigned int v90 = a11;
                  if (v143 >= (v84 + 1) << v153) {
                    unsigned int v90 = v139;
                  }
                  int v91 = v144;
                  if (v143 < (v84 + 1) << v153) {
                    int v91 = v141;
                  }
                  if (v89 >= a7) {
                    unsigned int v92 = 0;
                  }
                  else {
                    unsigned int v92 = v151;
                  }
                  if (v89 >= a7) {
                    unsigned int v93 = v91;
                  }
                  else {
                    unsigned int v93 = v90;
                  }
                  int v94 = a14[3];
                  int v149 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v92, 0, v155, v157);
                  if (v87)
                  {
                    uint64_t v95 = result;
                    uint64_t v96 = (v84 + v135) * v94 * v149 + v161;
                    uint64_t v97 = v131 + 24 * (v92 + ((v84 - v137) << v153) - v151);
                    unint64_t result = sub_34508(0, v133, v155, v157);
                    for (int k = 0; k != v87; ++k)
                    {
                      unsigned int v99 = v93;
                      uint64_t v100 = v97;
                      for (uint64_t m = v95; v99; --v99)
                      {
                        unsigned int v102 = (__int128 *)(v96 + 24 * (m + result));
                        __int128 v103 = *v102;
                        *(void *)(v100 + 16) = *((void *)v102 + 2);
                        *(_OWORD *)uint64_t v100 = v103;
                        v100 += 24LL;
                        uint64_t m = (m - v85) & v85;
                      }

                      unint64_t result = (result - v86) & v86;
                      v97 += a13;
                    }
                  }

                  ++v84;
                }

                while (v160 != v146);
                uint64_t v15 = v121;
                unsigned int v19 = a12;
                unsigned int v74 = v117;
                unsigned int v75 = v137;
                unsigned int v104 = v129;
              }

              unsigned int v81 = v104;
            }

            while (v104 != v74);
          }
        }
      }

      else
      {
        unsigned int v51 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v52 = v51;
        }
        else {
          int v52 = 0;
        }
        unsigned int v53 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v54 = v53;
        }
        else {
          int v54 = 0;
        }
        uint64_t v55 = sub_34508(~(-1 << v54), 0, v54, v52);
        uint64_t v56 = sub_34508(0, ~(-1 << v52), v54, v52);
        unint64_t result = sub_34508(a7, 0, v54, v52);
        if (a12)
        {
          uint64_t v57 = result;
          unint64_t result = sub_34508(0, a8, v54, v52);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v59 = a11;
            uint64_t v60 = v15;
            for (iint i = v57; v59; --v59)
            {
              uint64_t v62 = v18 + 24 * (ii + result);
              __int128 v63 = *(_OWORD *)v62;
              *(void *)(v60 + 16) = *(void *)(v62 + 16);
              *(_OWORD *)uint64_t v60 = v63;
              v60 += 24LL;
              iint i = (ii - v55) & v55;
            }

            unint64_t result = (result - v56) & v56;
            v15 += a13;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_4CE74( uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v164 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v167);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v166, &v165);
          unsigned int v125 = v168;
          if (v168)
          {
            int v20 = 0;
            unsigned __int16 v127 = 0;
            char v121 = v166;
            unsigned int v117 = a7 >> v166;
            char v157 = v165;
            unsigned int v143 = a8 >> v165;
            unsigned int v161 = v169;
            unsigned int v115 = a11 + a7;
            int v111 = ((1 << v166) - 1) & a7;
            int v113 = ((1 << v166) - 1) & (a11 + a7);
            int v109 = (1 << v166) - v111;
            unsigned int v141 = a12 + a8;
            int v129 = ((1 << v165) - 1) & a8;
            int v137 = (1 << v165) - v129;
            int v139 = ((1 << v165) - 1) & (a12 + a8);
            int v119 = 1 << v166;
            if (1 << v166 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v166;
            }
            int v145 = 1 << v165;
            if (1 << v165 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v165;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v153 = v24;
            unsigned int v135 = ~(-1 << v24);
            int v155 = v23;
            unsigned int v133 = ~(-1 << v23);
            do
            {
              if (v161)
              {
                int v25 = 0;
                unsigned __int16 v26 = 0;
                unsigned int v27 = (v20 + v117) << v121;
                unsigned int v28 = a11;
                if (v115 >= (v20 + v117 + 1) << v121) {
                  unsigned int v28 = v109;
                }
                int v29 = v119;
                if (v115 < (v20 + v117 + 1) << v121) {
                  int v29 = v113;
                }
                int v30 = v20 << v121;
                if (v27 >= a7) {
                  unsigned int v31 = v29;
                }
                else {
                  unsigned int v31 = v28;
                }
                unsigned int v32 = v111;
                if (v27 >= a7) {
                  unsigned int v32 = 0;
                }
                unsigned int v148 = v32;
                uint64_t v131 = &a2[3 * v32 + 3 * v30];
                do
                {
                  LOWORD(v33) = v127;
                  HIWORD(v33) = v26;
                  unint64_t result = sub_34358(v167, v33);
                  int v34 = *(_DWORD *)(v164 + 4LL * result);
                  if (v34 < 0)
                  {
                    unint64_t v35 = v164 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                    unsigned int v36 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v36) {
                      v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v37 = a12;
                    if (v141 >= (v25 + v143 + 1) << v157) {
                      unsigned int v37 = v137;
                    }
                    int v38 = v145;
                    if (v141 < (v25 + v143 + 1) << v157) {
                      int v38 = v139;
                    }
                    if ((v25 + v143) << v157 >= a8) {
                      unsigned int v39 = v38;
                    }
                    else {
                      unsigned int v39 = v37;
                    }
                    uint64_t v40 = sub_34508(v135, 0, v153, v155);
                    uint64_t v41 = sub_34508(0, v133, v153, v155);
                    unint64_t result = sub_34508(v148, 0, v153, v155);
                    if (v39)
                    {
                      uint64_t v42 = result;
                      if ((v25 + v143) << v157 >= a8) {
                        unsigned int v43 = 0;
                      }
                      else {
                        unsigned int v43 = v129;
                      }
                      uint64_t v44 = (_OWORD *)((char *)v131 + (v43 + (v25 << v157)) * a13);
                      unint64_t result = sub_34508(0, v43, v153, v155);
                      for (int i = 0; i != v39; ++i)
                      {
                        unsigned int v46 = v31;
                        uint64_t v47 = v44;
                        for (uint64_t j = v42; v46; --v46)
                        {
                          unint64_t v49 = (__int128 *)(v35 + 48 * (j + result));
                          __int128 v50 = *v49;
                          __int128 v51 = v49[2];
                          v47[1] = v49[1];
                          v47[2] = v51;
                          *uint64_t v47 = v50;
                          v47 += 3;
                          uint64_t j = (j - v40) & v40;
                        }

                        unint64_t result = (result - v41) & v41;
                        uint64_t v44 = (_OWORD *)((char *)v44 + a13);
                      }
                    }
                  }

                  int v25 = ++v26;
                }

                while (v161 > v26);
              }

              int v20 = ++v127;
            }

            while (v125 > v127);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v167, &v166);
          unsigned int v68 = 1 << v166;
          char v69 = *((_BYTE *)a14 + 15);
          unsigned int v70 = 1 << v69;
          if (v69) {
            BOOL v71 = v70 > a3;
          }
          else {
            BOOL v71 = 1;
          }
          BOOL v72 = v71 || v70 > a4;
          int v73 = (~(-1 << v69) + a3) & (-1 << v69);
          if (v72) {
            int v74 = a3;
          }
          else {
            int v74 = v73;
          }
          unsigned int v128 = a8 >> v166;
          int v130 = 1 << v166;
          unsigned int v75 = v68 - 1;
          unsigned int v126 = a12 + a8;
          char v122 = v166;
          unsigned int v76 = (v68 - 1 + a12 + a8) >> v166;
          if (a8 >> v166 < v76)
          {
            unsigned int v118 = (v74 + ~(-1 << SLOBYTE(v167[0]))) >> SLOBYTE(v167[0]);
            unsigned int v77 = a7 >> SLOBYTE(v167[0]);
            char v156 = v167[0];
            unsigned int v149 = ((1 << SLOBYTE(v167[0])) - 1 + a11 + a7) >> SLOBYTE(v167[0]);
            int v144 = ((1 << SLOBYTE(v167[0])) - 1) & (a11 + a7);
            unsigned int v146 = a11 + a7;
            uint64_t v154 = ((1 << SLOBYTE(v167[0])) - 1) & a7;
            unsigned int v142 = (1 << SLOBYTE(v167[0])) - v154;
            int v114 = v75 & v126;
            unsigned int v78 = 1 << v166;
            uint64_t v116 = v75 & a8;
            unsigned int v112 = v68 - v116;
            int v147 = 1 << SLOBYTE(v167[0]);
            if (1 << SLOBYTE(v167[0]) >= a5) {
              unsigned int v79 = a5;
            }
            else {
              unsigned int v79 = 1 << SLOBYTE(v167[0]);
            }
            if (v68 >= a6) {
              unsigned int v78 = a6;
            }
            unsigned int v80 = 32 - __clz(v78 - 1);
            if (v78 < 2) {
              unsigned int v80 = 0;
            }
            unsigned int v81 = 32 - __clz(v79 - 1);
            if (v79 >= 2) {
              unsigned int v82 = v81;
            }
            else {
              unsigned int v82 = 0;
            }
            int v158 = v82;
            unsigned int v110 = ~(-1 << v82);
            int v160 = v80;
            unsigned int v108 = ~(-1 << v80);
            unsigned int v83 = a8 >> v166;
            unsigned __int16 v124 = v15;
            unsigned int v120 = (v68 - 1 + a12 + a8) >> v166;
            unsigned int v140 = a7 >> SLOBYTE(v167[0]);
            do
            {
              if (v77 >= v149)
              {
                unsigned int v107 = v83 + 1;
              }

              else
              {
                unsigned int v162 = v83 << v122;
                unsigned int v132 = v83 + 1;
                int v84 = v130;
                if (v126 < (v83 + 1) << v122) {
                  int v84 = v114;
                }
                int v151 = v84;
                if (v126 >= (v83 + 1) << v122) {
                  unsigned int v85 = v112;
                }
                else {
                  unsigned int v85 = v19;
                }
                int v138 = v83 * v118;
                unsigned int v86 = v77;
                uint64_t v87 = sub_34508(v110, 0, v158, v160);
                uint64_t v88 = sub_34508(0, v108, v158, v160);
                if (v162 >= a8) {
                  unsigned int v89 = v151;
                }
                else {
                  unsigned int v89 = v85;
                }
                if (v162 >= a8) {
                  unsigned int v90 = 0;
                }
                else {
                  unsigned int v90 = v116;
                }
                unsigned int v136 = v90;
                int v134 = (char *)v15 + (v90 + ((v83 - v128) << v122) - v116) * a13;
                do
                {
                  unsigned int v91 = v86 << v156;
                  unsigned int v163 = v86 + 1;
                  unsigned int v92 = a11;
                  if (v146 >= (v86 + 1) << v156) {
                    unsigned int v92 = v142;
                  }
                  int v93 = v147;
                  if (v146 < (v86 + 1) << v156) {
                    int v93 = v144;
                  }
                  if (v91 >= a7) {
                    unsigned int v94 = 0;
                  }
                  else {
                    unsigned int v94 = v154;
                  }
                  if (v91 >= a7) {
                    unsigned int v95 = v93;
                  }
                  else {
                    unsigned int v95 = v92;
                  }
                  int v96 = a14[3];
                  int v152 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v94, 0, v158, v160);
                  if (v89)
                  {
                    uint64_t v97 = result;
                    uint64_t v98 = (v86 + v138) * v96 * v152 + v164;
                    unsigned int v99 = &v134[48 * (v94 + ((v86 - v140) << v156) - v154)];
                    unint64_t result = sub_34508(0, v136, v158, v160);
                    for (int k = 0; k != v89; ++k)
                    {
                      unsigned int v101 = v95;
                      unsigned int v102 = v99;
                      for (uint64_t m = v97; v101; --v101)
                      {
                        unsigned int v104 = (__int128 *)(v98 + 48 * (m + result));
                        __int128 v105 = *v104;
                        __int128 v106 = v104[2];
                        *((_OWORD *)v102 + 1) = v104[1];
                        *((_OWORD *)v102 + 2) = v106;
                        *(_OWORD *)unsigned int v102 = v105;
                        v102 += 48;
                        uint64_t m = (m - v87) & v87;
                      }

                      unint64_t result = (result - v88) & v88;
                      v99 += a13;
                    }
                  }

                  ++v86;
                }

                while (v163 != v149);
                uint64_t v15 = v124;
                unsigned int v19 = a12;
                unsigned int v76 = v120;
                unsigned int v77 = v140;
                unsigned int v107 = v132;
              }

              unsigned int v83 = v107;
            }

            while (v107 != v76);
          }
        }
      }

      else
      {
        unsigned int v52 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v53 = v52;
        }
        else {
          int v53 = 0;
        }
        unsigned int v54 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v55 = v54;
        }
        else {
          int v55 = 0;
        }
        uint64_t v56 = sub_34508(~(-1 << v55), 0, v55, v53);
        uint64_t v57 = sub_34508(0, ~(-1 << v53), v55, v53);
        unint64_t result = sub_34508(a7, 0, v55, v53);
        if (a12)
        {
          uint64_t v58 = result;
          unint64_t result = sub_34508(0, a8, v55, v53);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v60 = a11;
            unsigned int v61 = v15;
            for (iint i = v58; v60; --v60)
            {
              __int128 v63 = (__int128 *)(v18 + 48 * (ii + result));
              __int128 v64 = *v63;
              __int128 v65 = v63[2];
              v61[1] = v63[1];
              v61[2] = v65;
              *unsigned int v61 = v64;
              v61 += 3;
              iint i = (ii - v56) & v56;
            }

            unint64_t result = (result - v57) & v57;
            uint64_t v15 = (_OWORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_4D758( uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v170 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v173);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v172, &v171);
          unsigned int v131 = v174;
          if (v174)
          {
            int v20 = 0;
            unsigned __int16 v133 = 0;
            char v127 = v172;
            unsigned int v123 = a7 >> v172;
            char v163 = v171;
            unsigned int v149 = a8 >> v171;
            unsigned int v167 = v175;
            unsigned int v121 = a11 + a7;
            int v117 = ((1 << v172) - 1) & a7;
            int v119 = ((1 << v172) - 1) & (a11 + a7);
            int v115 = (1 << v172) - v117;
            unsigned int v147 = a12 + a8;
            int v135 = ((1 << v171) - 1) & a8;
            int v143 = (1 << v171) - v135;
            int v145 = ((1 << v171) - 1) & (a12 + a8);
            int v125 = 1 << v172;
            if (1 << v172 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v172;
            }
            int v151 = 1 << v171;
            if (1 << v171 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v171;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v159 = v24;
            unsigned int v141 = ~(-1 << v24);
            int v161 = v23;
            unsigned int v139 = ~(-1 << v23);
            do
            {
              if (v167)
              {
                int v25 = 0;
                unsigned __int16 v26 = 0;
                unsigned int v27 = (v20 + v123) << v127;
                unsigned int v28 = a11;
                if (v121 >= (v20 + v123 + 1) << v127) {
                  unsigned int v28 = v115;
                }
                int v29 = v125;
                if (v121 < (v20 + v123 + 1) << v127) {
                  int v29 = v119;
                }
                int v30 = v20 << v127;
                if (v27 >= a7) {
                  unsigned int v31 = v29;
                }
                else {
                  unsigned int v31 = v28;
                }
                unsigned int v32 = v117;
                if (v27 >= a7) {
                  unsigned int v32 = 0;
                }
                unsigned int v154 = v32;
                int v137 = &a2[6 * v32 + 6 * v30];
                do
                {
                  LOWORD(v33) = v133;
                  HIWORD(v33) = v26;
                  unint64_t result = sub_34358(v173, v33);
                  int v34 = *(_DWORD *)(v170 + 4LL * result);
                  if (v34 < 0)
                  {
                    unint64_t v35 = v170 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                    unsigned int v36 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v36) {
                      v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v37 = a12;
                    if (v147 >= (v25 + v149 + 1) << v163) {
                      unsigned int v37 = v143;
                    }
                    int v38 = v151;
                    if (v147 < (v25 + v149 + 1) << v163) {
                      int v38 = v145;
                    }
                    if ((v25 + v149) << v163 >= a8) {
                      unsigned int v39 = v38;
                    }
                    else {
                      unsigned int v39 = v37;
                    }
                    uint64_t v40 = sub_34508(v141, 0, v159, v161);
                    uint64_t v41 = sub_34508(0, v139, v159, v161);
                    unint64_t result = sub_34508(v154, 0, v159, v161);
                    if (v39)
                    {
                      uint64_t v42 = result;
                      if ((v25 + v149) << v163 >= a8) {
                        unsigned int v43 = 0;
                      }
                      else {
                        unsigned int v43 = v135;
                      }
                      uint64_t v44 = (_OWORD *)((char *)v137 + (v43 + (v25 << v163)) * a13);
                      unint64_t result = sub_34508(0, v43, v159, v161);
                      for (int i = 0; i != v39; ++i)
                      {
                        unsigned int v46 = v31;
                        uint64_t v47 = v44;
                        for (uint64_t j = v42; v46; --v46)
                        {
                          unint64_t v49 = (_OWORD *)(v35 + 96 * (j + result));
                          __int128 v50 = v49[1];
                          *uint64_t v47 = *v49;
                          v47[1] = v50;
                          __int128 v51 = v49[2];
                          __int128 v52 = v49[3];
                          __int128 v53 = v49[5];
                          v47[4] = v49[4];
                          v47[5] = v53;
                          v47[2] = v51;
                          v47[3] = v52;
                          uint64_t j = (j - v40) & v40;
                          v47 += 6;
                        }

                        unint64_t result = (result - v41) & v41;
                        uint64_t v44 = (_OWORD *)((char *)v44 + a13);
                      }
                    }
                  }

                  int v25 = ++v26;
                }

                while (v167 > v26);
              }

              int v20 = ++v133;
            }

            while (v131 > v133);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v173, &v172);
          unsigned int v72 = 1 << v172;
          char v73 = *((_BYTE *)a14 + 15);
          unsigned int v74 = 1 << v73;
          if (v73) {
            BOOL v75 = v74 > a3;
          }
          else {
            BOOL v75 = 1;
          }
          BOOL v76 = v75 || v74 > a4;
          int v77 = (~(-1 << v73) + a3) & (-1 << v73);
          if (v76) {
            int v78 = a3;
          }
          else {
            int v78 = v77;
          }
          unsigned int v134 = a8 >> v172;
          int v136 = 1 << v172;
          unsigned int v79 = v72 - 1;
          unsigned int v132 = a12 + a8;
          char v128 = v172;
          unsigned int v80 = (v72 - 1 + a12 + a8) >> v172;
          if (a8 >> v172 < v80)
          {
            unsigned int v124 = (v78 + ~(-1 << SLOBYTE(v173[0]))) >> SLOBYTE(v173[0]);
            unsigned int v81 = a7 >> SLOBYTE(v173[0]);
            char v162 = v173[0];
            unsigned int v155 = ((1 << SLOBYTE(v173[0])) - 1 + a11 + a7) >> SLOBYTE(v173[0]);
            int v150 = ((1 << SLOBYTE(v173[0])) - 1) & (a11 + a7);
            unsigned int v152 = a11 + a7;
            uint64_t v160 = ((1 << SLOBYTE(v173[0])) - 1) & a7;
            unsigned int v148 = (1 << SLOBYTE(v173[0])) - v160;
            int v120 = v79 & v132;
            unsigned int v82 = 1 << v172;
            uint64_t v122 = v79 & a8;
            unsigned int v118 = v72 - v122;
            int v153 = 1 << SLOBYTE(v173[0]);
            if (1 << SLOBYTE(v173[0]) >= a5) {
              unsigned int v83 = a5;
            }
            else {
              unsigned int v83 = 1 << SLOBYTE(v173[0]);
            }
            if (v72 >= a6) {
              unsigned int v82 = a6;
            }
            unsigned int v84 = 32 - __clz(v82 - 1);
            if (v82 < 2) {
              unsigned int v84 = 0;
            }
            unsigned int v85 = 32 - __clz(v83 - 1);
            if (v83 >= 2) {
              unsigned int v86 = v85;
            }
            else {
              unsigned int v86 = 0;
            }
            int v164 = v86;
            unsigned int v116 = ~(-1 << v86);
            int v166 = v84;
            unsigned int v114 = ~(-1 << v84);
            unsigned int v87 = a8 >> v172;
            int v130 = v15;
            unsigned int v126 = (v72 - 1 + a12 + a8) >> v172;
            unsigned int v146 = a7 >> SLOBYTE(v173[0]);
            do
            {
              if (v81 >= v155)
              {
                unsigned int v113 = v87 + 1;
              }

              else
              {
                unsigned int v168 = v87 << v128;
                unsigned int v138 = v87 + 1;
                int v88 = v136;
                if (v132 < (v87 + 1) << v128) {
                  int v88 = v120;
                }
                int v157 = v88;
                if (v132 >= (v87 + 1) << v128) {
                  unsigned int v89 = v118;
                }
                else {
                  unsigned int v89 = v19;
                }
                int v144 = v87 * v124;
                unsigned int v90 = v81;
                uint64_t v91 = sub_34508(v116, 0, v164, v166);
                uint64_t v92 = sub_34508(0, v114, v164, v166);
                if (v168 >= a8) {
                  unsigned int v93 = v157;
                }
                else {
                  unsigned int v93 = v89;
                }
                if (v168 >= a8) {
                  unsigned int v94 = 0;
                }
                else {
                  unsigned int v94 = v122;
                }
                unsigned int v142 = v94;
                unsigned int v140 = (char *)v15 + (v94 + ((v87 - v134) << v128) - v122) * a13;
                do
                {
                  unsigned int v95 = v90 << v162;
                  unsigned int v169 = v90 + 1;
                  unsigned int v96 = a11;
                  if (v152 >= (v90 + 1) << v162) {
                    unsigned int v96 = v148;
                  }
                  int v97 = v153;
                  if (v152 < (v90 + 1) << v162) {
                    int v97 = v150;
                  }
                  if (v95 >= a7) {
                    unsigned int v98 = 0;
                  }
                  else {
                    unsigned int v98 = v160;
                  }
                  if (v95 >= a7) {
                    unsigned int v99 = v97;
                  }
                  else {
                    unsigned int v99 = v96;
                  }
                  int v100 = a14[3];
                  int v158 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v98, 0, v164, v166);
                  if (v93)
                  {
                    uint64_t v101 = result;
                    uint64_t v102 = (v90 + v144) * v100 * v158 + v170;
                    __int128 v103 = &v140[96 * (v98 + ((v90 - v146) << v162) - v160)];
                    unint64_t result = sub_34508(0, v142, v164, v166);
                    for (int k = 0; k != v93; ++k)
                    {
                      unsigned int v105 = v99;
                      __int128 v106 = v103;
                      for (uint64_t m = v101; v105; --v105)
                      {
                        unsigned int v108 = (_OWORD *)(v102 + 96 * (m + result));
                        __int128 v109 = v108[1];
                        *(_OWORD *)__int128 v106 = *v108;
                        *((_OWORD *)v106 + 1) = v109;
                        __int128 v110 = v108[2];
                        __int128 v111 = v108[3];
                        __int128 v112 = v108[5];
                        *((_OWORD *)v106 + 4) = v108[4];
                        *((_OWORD *)v106 + 5) = v112;
                        *((_OWORD *)v106 + 2) = v110;
                        *((_OWORD *)v106 + 3) = v111;
                        uint64_t m = (m - v91) & v91;
                        v106 += 96;
                      }

                      unint64_t result = (result - v92) & v92;
                      v103 += a13;
                    }
                  }

                  ++v90;
                }

                while (v169 != v155);
                uint64_t v15 = v130;
                unsigned int v19 = a12;
                unsigned int v80 = v126;
                unsigned int v81 = v146;
                unsigned int v113 = v138;
              }

              unsigned int v87 = v113;
            }

            while (v113 != v80);
          }
        }
      }

      else
      {
        unsigned int v54 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v55 = v54;
        }
        else {
          int v55 = 0;
        }
        unsigned int v56 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v57 = v56;
        }
        else {
          int v57 = 0;
        }
        uint64_t v58 = sub_34508(~(-1 << v57), 0, v57, v55);
        uint64_t v59 = sub_34508(0, ~(-1 << v55), v57, v55);
        unint64_t result = sub_34508(a7, 0, v57, v55);
        if (a12)
        {
          uint64_t v60 = result;
          unint64_t result = sub_34508(0, a8, v57, v55);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v62 = a11;
            __int128 v63 = v15;
            for (iint i = v60; v62; --v62)
            {
              __int128 v65 = (_OWORD *)(v18 + 96 * (ii + result));
              __int128 v66 = v65[1];
              *__int128 v63 = *v65;
              v63[1] = v66;
              __int128 v67 = v65[2];
              __int128 v68 = v65[3];
              __int128 v69 = v65[5];
              v63[4] = v65[4];
              v63[5] = v69;
              v63[2] = v67;
              v63[3] = v68;
              iint i = (ii - v58) & v58;
              v63 += 6;
            }

            unint64_t result = (result - v59) & v59;
            uint64_t v15 = (_OWORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_4E060( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v159 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v162);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v161, &v160);
          unsigned int v120 = v163;
          if (v163)
          {
            int v20 = 0;
            unsigned __int16 v122 = 0;
            char v118 = v161;
            unsigned int v114 = a7 >> v161;
            char v152 = v160;
            unsigned int v139 = a8 >> v160;
            unsigned int v156 = v164;
            unsigned int v112 = a11 + a7;
            int v108 = ((1 << v161) - 1) & a7;
            int v110 = ((1 << v161) - 1) & (a11 + a7);
            int v106 = (1 << v161) - v108;
            unsigned int v137 = a12 + a8;
            int v124 = ((1 << v160) - 1) & a8;
            int v133 = (1 << v160) - v124;
            int v135 = ((1 << v160) - 1) & (a12 + a8);
            int v116 = 1 << v161;
            if (1 << v161 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v161;
            }
            int v141 = 1 << v160;
            if (1 << v160 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v160;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v148 = v24;
            unsigned int v131 = ~(-1 << v24);
            int v150 = v23;
            unsigned int v129 = ~(-1 << v23);
            do
            {
              if (v156)
              {
                int v25 = 0;
                unsigned __int16 v26 = 0;
                unsigned int v27 = (v20 + v114) << v118;
                unsigned int v28 = a11;
                if (v112 >= (v20 + v114 + 1) << v118) {
                  unsigned int v28 = v106;
                }
                int v29 = v116;
                if (v112 < (v20 + v114 + 1) << v118) {
                  int v29 = v110;
                }
                int v30 = v20 << v118;
                if (v27 >= a7) {
                  unsigned int v31 = v29;
                }
                else {
                  unsigned int v31 = v28;
                }
                unsigned int v32 = v108;
                if (v27 >= a7) {
                  unsigned int v32 = 0;
                }
                unsigned int v144 = v32;
                uint64_t v126 = a2 + 12LL * (v32 + v30);
                do
                {
                  LOWORD(v33) = v122;
                  HIWORD(v33) = v26;
                  unint64_t result = sub_34358(v162, v33);
                  int v34 = *(_DWORD *)(v18 + 4LL * result);
                  if (v34 < 0)
                  {
                    unint64_t v35 = v159 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                    unsigned int v36 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v36) {
                      v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v37 = a12;
                    if (v137 >= (v25 + v139 + 1) << v152) {
                      unsigned int v37 = v133;
                    }
                    int v38 = v141;
                    if (v137 < (v25 + v139 + 1) << v152) {
                      int v38 = v135;
                    }
                    if ((v25 + v139) << v152 >= a8) {
                      unsigned int v39 = v38;
                    }
                    else {
                      unsigned int v39 = v37;
                    }
                    uint64_t v40 = sub_34508(v131, 0, v148, v150);
                    uint64_t v41 = sub_34508(0, v129, v148, v150);
                    unint64_t result = sub_34508(v144, 0, v148, v150);
                    if (v39)
                    {
                      uint64_t v42 = result;
                      if ((v25 + v139) << v152 >= a8) {
                        unsigned int v43 = 0;
                      }
                      else {
                        unsigned int v43 = v124;
                      }
                      uint64_t v44 = v126 + (v43 + (v25 << v152)) * a13;
                      unint64_t result = sub_34508(0, v43, v148, v150);
                      for (int i = 0; i != v39; ++i)
                      {
                        unsigned int v46 = v31;
                        uint64_t v47 = v44;
                        for (uint64_t j = v42; v46; --v46)
                        {
                          unint64_t v49 = v35 + 12 * (j + result);
                          uint64_t v50 = *(void *)v49;
                          *(_DWORD *)(v47 + 8) = *(_DWORD *)(v49 + 8);
                          *(void *)uint64_t v47 = v50;
                          v47 += 12LL;
                          uint64_t j = (j - v40) & v40;
                        }

                        unint64_t result = (result - v41) & v41;
                        v44 += a13;
                      }
                    }
                  }

                  int v25 = ++v26;
                  uint64_t v18 = v159;
                }

                while (v156 > v26);
              }

              int v20 = ++v122;
            }

            while (v120 > v122);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v162, &v161);
          unsigned int v66 = 1 << v161;
          char v67 = *((_BYTE *)a14 + 15);
          unsigned int v68 = 1 << v67;
          if (v67) {
            BOOL v69 = v68 > a3;
          }
          else {
            BOOL v69 = 1;
          }
          BOOL v70 = v69 || v68 > a4;
          int v71 = (~(-1 << v67) + a3) & (-1 << v67);
          if (v70) {
            int v72 = a3;
          }
          else {
            int v72 = v71;
          }
          unsigned int v123 = a8 >> v161;
          int v125 = 1 << v161;
          unsigned int v73 = v66 - 1;
          unsigned int v121 = a12 + a8;
          char v119 = v161;
          unsigned int v74 = (v66 - 1 + a12 + a8) >> v161;
          if (a8 >> v161 < v74)
          {
            unsigned int v115 = (v72 + ~(-1 << SLOBYTE(v162[0]))) >> SLOBYTE(v162[0]);
            unsigned int v75 = a7 >> SLOBYTE(v162[0]);
            char v151 = v162[0];
            unsigned int v145 = ((1 << SLOBYTE(v162[0])) - 1 + a11 + a7) >> SLOBYTE(v162[0]);
            int v140 = ((1 << SLOBYTE(v162[0])) - 1) & (a11 + a7);
            unsigned int v142 = a11 + a7;
            uint64_t v149 = ((1 << SLOBYTE(v162[0])) - 1) & a7;
            unsigned int v138 = (1 << SLOBYTE(v162[0])) - v149;
            int v111 = v73 & v121;
            unsigned int v76 = 1 << v161;
            uint64_t v113 = v73 & a8;
            unsigned int v109 = v66 - v113;
            int v143 = 1 << SLOBYTE(v162[0]);
            if (1 << SLOBYTE(v162[0]) >= a5) {
              unsigned int v77 = a5;
            }
            else {
              unsigned int v77 = 1 << SLOBYTE(v162[0]);
            }
            if (v66 >= a6) {
              unsigned int v76 = a6;
            }
            unsigned int v78 = 32 - __clz(v76 - 1);
            if (v76 < 2) {
              unsigned int v78 = 0;
            }
            unsigned int v79 = 32 - __clz(v77 - 1);
            if (v77 >= 2) {
              unsigned int v80 = v79;
            }
            else {
              unsigned int v80 = 0;
            }
            int v153 = v80;
            unsigned int v107 = ~(-1 << v80);
            int v155 = v78;
            unsigned int v105 = ~(-1 << v78);
            unsigned int v81 = a8 >> v161;
            unsigned int v117 = (v66 - 1 + a12 + a8) >> v161;
            unsigned int v136 = a7 >> SLOBYTE(v162[0]);
            do
            {
              if (v75 >= v145)
              {
                unsigned int v104 = v81 + 1;
              }

              else
              {
                unsigned int v157 = v81 << v119;
                unsigned int v127 = v81 + 1;
                if (v121 >= (v81 + 1) << v119) {
                  int v82 = v125;
                }
                else {
                  int v82 = v111;
                }
                if (v121 >= (v81 + 1) << v119) {
                  unsigned int v83 = v109;
                }
                else {
                  unsigned int v83 = v19;
                }
                int v134 = v81 * v115;
                uint64_t v84 = sub_34508(v107, 0, v153, v155);
                uint64_t v85 = sub_34508(0, v105, v153, v155);
                if (v157 >= a8) {
                  int v86 = v82;
                }
                else {
                  int v86 = v83;
                }
                if (v157 >= a8) {
                  unsigned int v87 = 0;
                }
                else {
                  unsigned int v87 = v113;
                }
                unsigned int v132 = v87;
                uint64_t v130 = (v87 + ((v81 - v123) << v119) - v113) * a13;
                unsigned int v88 = v75;
                do
                {
                  unsigned int v89 = v88 << v151;
                  unsigned int v158 = v88 + 1;
                  unsigned int v90 = a11;
                  if (v142 >= (v88 + 1) << v151) {
                    unsigned int v90 = v138;
                  }
                  int v91 = v143;
                  if (v142 < (v88 + 1) << v151) {
                    int v91 = v140;
                  }
                  if (v89 >= a7) {
                    unsigned int v92 = 0;
                  }
                  else {
                    unsigned int v92 = v149;
                  }
                  if (v89 >= a7) {
                    unsigned int v93 = v91;
                  }
                  else {
                    unsigned int v93 = v90;
                  }
                  int v94 = a14[3];
                  int v147 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v92, 0, v153, v155);
                  if (v86)
                  {
                    uint64_t v95 = result;
                    uint64_t v96 = (v88 + v134) * v94 * v147 + v159;
                    uint64_t v97 = a2 + 12 * (v92 + ((v88 - v136) << v151) - v149) + v130;
                    unint64_t result = sub_34508(0, v132, v153, v155);
                    for (int k = 0; k != v86; ++k)
                    {
                      unsigned int v99 = v93;
                      uint64_t v100 = v97;
                      for (uint64_t m = v95; v99; --v99)
                      {
                        uint64_t v102 = (uint64_t *)(v96 + 12 * (m + result));
                        uint64_t v103 = *v102;
                        *(_DWORD *)(v100 + 8) = *((_DWORD *)v102 + 2);
                        *(void *)uint64_t v100 = v103;
                        v100 += 12LL;
                        uint64_t m = (m - v84) & v84;
                      }

                      unint64_t result = (result - v85) & v85;
                      v97 += a13;
                    }
                  }

                  ++v88;
                }

                while (v158 != v145);
                unsigned int v19 = a12;
                unsigned int v74 = v117;
                unsigned int v75 = v136;
                unsigned int v104 = v127;
              }

              unsigned int v81 = v104;
            }

            while (v104 != v74);
          }
        }
      }

      else
      {
        unsigned int v51 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v52 = v51;
        }
        else {
          int v52 = 0;
        }
        unsigned int v53 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v54 = v53;
        }
        else {
          int v54 = 0;
        }
        uint64_t v55 = sub_34508(~(-1 << v54), 0, v54, v52);
        uint64_t v56 = sub_34508(0, ~(-1 << v52), v54, v52);
        unint64_t result = sub_34508(a7, 0, v54, v52);
        if (a12)
        {
          uint64_t v57 = result;
          unint64_t result = sub_34508(0, a8, v54, v52);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v59 = a11;
            uint64_t v60 = v15;
            for (iint i = v57; v59; --v59)
            {
              uint64_t v62 = v18 + 12 * (ii + result);
              uint64_t v63 = *(void *)v62;
              *(_DWORD *)(v60 + 8) = *(_DWORD *)(v62 + 8);
              *(void *)uint64_t v60 = v63;
              v60 += 12LL;
              iint i = (ii - v55) & v55;
            }

            unint64_t result = (result - v56) & v56;
            v15 += a13;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_4E93C( uint64_t a1, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_503A4(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_4E958( uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v160 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v163);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v162, &v161);
          unsigned int v122 = v164;
          if (v164)
          {
            int v20 = 0;
            unsigned __int16 v124 = 0;
            char v118 = v162;
            unsigned int v114 = a7 >> v162;
            char v153 = v161;
            unsigned int v140 = a8 >> v161;
            unsigned int v157 = v165;
            unsigned int v112 = a11 + a7;
            int v108 = ((1 << v162) - 1) & a7;
            int v110 = ((1 << v162) - 1) & (a11 + a7);
            int v106 = (1 << v162) - v108;
            unsigned int v138 = a12 + a8;
            int v126 = ((1 << v161) - 1) & a8;
            int v134 = (1 << v161) - v126;
            int v136 = ((1 << v161) - 1) & (a12 + a8);
            int v116 = 1 << v162;
            if (1 << v162 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v162;
            }
            int v142 = 1 << v161;
            if (1 << v161 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v161;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v149 = v24;
            int v151 = v23;
            unsigned int v130 = ~(-1 << v23);
            unsigned int v132 = ~(-1 << v24);
            int v25 = v24;
            do
            {
              if (v157)
              {
                int v26 = 0;
                unsigned __int16 v27 = 0;
                unsigned int v28 = (v20 + v114) << v118;
                unsigned int v29 = a11;
                if (v112 >= (v20 + v114 + 1) << v118) {
                  unsigned int v29 = v106;
                }
                int v30 = v116;
                if (v112 < (v20 + v114 + 1) << v118) {
                  int v30 = v110;
                }
                int v31 = v20 << v118;
                if (v28 >= a7) {
                  unsigned int v32 = v30;
                }
                else {
                  unsigned int v32 = v29;
                }
                unsigned int v33 = v108;
                if (v28 >= a7) {
                  unsigned int v33 = 0;
                }
                unsigned int v145 = v33;
                char v128 = &a2[2 * v33 + 2 * v31];
                do
                {
                  LOWORD(v34) = v124;
                  HIWORD(v34) = v27;
                  unint64_t result = sub_34358(v163, v34);
                  int v35 = *(_DWORD *)(v18 + 4LL * result);
                  if (v35 < 0)
                  {
                    unint64_t v36 = v160 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                    unsigned int v37 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v37) {
                      v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v38 = a12;
                    if (v138 >= (v26 + v140 + 1) << v153) {
                      unsigned int v38 = v134;
                    }
                    int v39 = v142;
                    if (v138 < (v26 + v140 + 1) << v153) {
                      int v39 = v136;
                    }
                    if ((v26 + v140) << v153 >= a8) {
                      unsigned int v40 = v39;
                    }
                    else {
                      unsigned int v40 = v38;
                    }
                    uint64_t v41 = sub_34508(v132, 0, v25, v151);
                    uint64_t v42 = sub_34508(0, v130, v25, v151);
                    unint64_t result = sub_34508(v145, 0, v25, v151);
                    if (v40)
                    {
                      uint64_t v43 = result;
                      if ((v26 + v140) << v153 >= a8) {
                        unsigned int v44 = 0;
                      }
                      else {
                        unsigned int v44 = v126;
                      }
                      unsigned int v45 = (_OWORD *)((char *)v128 + (v44 + (v26 << v153)) * a13);
                      unint64_t result = sub_34508(0, v44, v149, v151);
                      for (int i = 0; i != v40; ++i)
                      {
                        unsigned int v47 = v32;
                        int v48 = v45;
                        for (uint64_t j = v43; v47; --v47)
                        {
                          uint64_t v50 = (_OWORD *)(v36 + 32 * (j + result));
                          __int128 v51 = v50[1];
                          *int v48 = *v50;
                          v48[1] = v51;
                          v48 += 2;
                          uint64_t j = (j - v41) & v41;
                        }

                        unint64_t result = (result - v42) & v42;
                        unsigned int v45 = (_OWORD *)((char *)v45 + a13);
                      }
                    }
                  }

                  int v26 = ++v27;
                  uint64_t v18 = v160;
                }

                while (v157 > v27);
              }

              int v20 = ++v124;
            }

            while (v122 > v124);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v163, &v162);
          unsigned int v67 = 1 << v162;
          char v68 = *((_BYTE *)a14 + 15);
          unsigned int v69 = 1 << v68;
          if (v68) {
            BOOL v70 = v69 > a3;
          }
          else {
            BOOL v70 = 1;
          }
          BOOL v71 = v70 || v69 > a4;
          int v72 = (~(-1 << v68) + a3) & (-1 << v68);
          if (v71) {
            int v73 = a3;
          }
          else {
            int v73 = v72;
          }
          unsigned int v127 = a8 >> v162;
          int v129 = 1 << v162;
          unsigned int v74 = v67 - 1;
          unsigned int v125 = a12 + a8;
          char v123 = v162;
          unsigned int v75 = (v67 - 1 + a12 + a8) >> v162;
          if (a8 >> v162 < v75)
          {
            unsigned int v117 = (v73 + ~(-1 << SLOBYTE(v163[0]))) >> SLOBYTE(v163[0]);
            unsigned int v76 = a7 >> SLOBYTE(v163[0]);
            char v152 = v163[0];
            unsigned int v148 = ((1 << SLOBYTE(v163[0])) - 1 + a11 + a7) >> SLOBYTE(v163[0]);
            int v143 = ((1 << SLOBYTE(v163[0])) - 1) & (a11 + a7);
            unsigned int v144 = a11 + a7;
            uint64_t v150 = ((1 << SLOBYTE(v163[0])) - 1) & a7;
            unsigned int v141 = (1 << SLOBYTE(v163[0])) - v150;
            int v113 = v74 & v125;
            unsigned int v77 = 1 << v162;
            uint64_t v115 = v74 & a8;
            unsigned int v111 = v67 - v115;
            int v146 = 1 << SLOBYTE(v163[0]);
            if (1 << SLOBYTE(v163[0]) >= a5) {
              unsigned int v78 = a5;
            }
            else {
              unsigned int v78 = 1 << SLOBYTE(v163[0]);
            }
            if (v67 >= a6) {
              unsigned int v77 = a6;
            }
            unsigned int v79 = 32 - __clz(v77 - 1);
            if (v77 < 2) {
              unsigned int v79 = 0;
            }
            unsigned int v80 = 32 - __clz(v78 - 1);
            if (v78 >= 2) {
              unsigned int v81 = v80;
            }
            else {
              unsigned int v81 = 0;
            }
            int v154 = v81;
            unsigned int v109 = ~(-1 << v81);
            int v156 = v79;
            unsigned int v107 = ~(-1 << v79);
            unsigned int v82 = a8 >> v162;
            unsigned int v121 = v15;
            unsigned int v119 = (v67 - 1 + a12 + a8) >> v162;
            unsigned int v139 = a7 >> SLOBYTE(v163[0]);
            do
            {
              if (v76 >= v148)
              {
                unsigned int v105 = v82 + 1;
              }

              else
              {
                unsigned int v158 = v82 << v123;
                unsigned int v131 = v82 + 1;
                if (v125 >= (v82 + 1) << v123) {
                  int v83 = v129;
                }
                else {
                  int v83 = v113;
                }
                if (v125 >= (v82 + 1) << v123) {
                  unsigned int v84 = v111;
                }
                else {
                  unsigned int v84 = v19;
                }
                int v137 = v82 * v117;
                uint64_t v85 = sub_34508(v109, 0, v154, v156);
                uint64_t v86 = sub_34508(0, v107, v154, v156);
                if (v158 >= a8) {
                  int v87 = v83;
                }
                else {
                  int v87 = v84;
                }
                if (v158 >= a8) {
                  unsigned int v88 = 0;
                }
                else {
                  unsigned int v88 = v115;
                }
                unsigned int v135 = v88;
                int v133 = (char *)v15 + (v88 + ((v82 - v127) << v123) - v115) * a13;
                do
                {
                  unsigned int v89 = v76 << v152;
                  unsigned int v159 = v76 + 1;
                  unsigned int v90 = a11;
                  if (v144 >= (v76 + 1) << v152) {
                    unsigned int v90 = v141;
                  }
                  int v91 = v146;
                  if (v144 < (v76 + 1) << v152) {
                    int v91 = v143;
                  }
                  if (v89 >= a7) {
                    unsigned int v92 = 0;
                  }
                  else {
                    unsigned int v92 = v150;
                  }
                  if (v89 >= a7) {
                    unsigned int v93 = v91;
                  }
                  else {
                    unsigned int v93 = v90;
                  }
                  int v94 = a14[3];
                  int v95 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v92, 0, v154, v156);
                  if (v87)
                  {
                    uint64_t v96 = result;
                    uint64_t v97 = (v76 + v137) * v94 * v95 + v160;
                    unsigned int v98 = &v133[32 * (v92 + ((v76 - v139) << v152) - v150)];
                    unint64_t result = sub_34508(0, v135, v154, v156);
                    for (int k = 0; k != v87; ++k)
                    {
                      unsigned int v100 = v93;
                      uint64_t v101 = v98;
                      for (uint64_t m = v96; v100; --v100)
                      {
                        uint64_t v103 = (_OWORD *)(v97 + 32 * (m + result));
                        __int128 v104 = v103[1];
                        *(_OWORD *)uint64_t v101 = *v103;
                        *((_OWORD *)v101 + 1) = v104;
                        v101 += 32;
                        uint64_t m = (m - v85) & v85;
                      }

                      unint64_t result = (result - v86) & v86;
                      v98 += a13;
                    }
                  }

                  ++v76;
                }

                while (v159 != v148);
                uint64_t v15 = v121;
                unsigned int v19 = a12;
                unsigned int v75 = v119;
                unsigned int v76 = v139;
                unsigned int v105 = v131;
              }

              unsigned int v82 = v105;
            }

            while (v105 != v75);
          }
        }
      }

      else
      {
        unsigned int v52 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v53 = v52;
        }
        else {
          int v53 = 0;
        }
        unsigned int v54 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v55 = v54;
        }
        else {
          int v55 = 0;
        }
        uint64_t v56 = sub_34508(~(-1 << v55), 0, v55, v53);
        uint64_t v57 = sub_34508(0, ~(-1 << v53), v55, v53);
        unint64_t result = sub_34508(a7, 0, v55, v53);
        if (a12)
        {
          uint64_t v58 = result;
          unint64_t result = sub_34508(0, a8, v55, v53);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v60 = a11;
            unsigned int v61 = v15;
            for (iint i = v58; v60; --v60)
            {
              uint64_t v63 = (_OWORD *)(v18 + 32 * (ii + result));
              __int128 v64 = v63[1];
              *unsigned int v61 = *v63;
              v61[1] = v64;
              v61 += 2;
              iint i = (ii - v56) & v56;
            }

            unint64_t result = (result - v57) & v57;
            uint64_t v15 = (_OWORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_4F1F8( uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v166 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v169);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v168, &v167);
          unsigned int v128 = v170;
          if (v170)
          {
            int v20 = 0;
            unsigned __int16 v130 = 0;
            char v124 = v168;
            unsigned int v120 = a7 >> v168;
            char v159 = v167;
            unsigned int v146 = a8 >> v167;
            unsigned int v163 = v171;
            unsigned int v118 = a11 + a7;
            int v114 = ((1 << v168) - 1) & a7;
            int v116 = ((1 << v168) - 1) & (a11 + a7);
            int v112 = (1 << v168) - v114;
            unsigned int v144 = a12 + a8;
            int v132 = ((1 << v167) - 1) & a8;
            int v140 = (1 << v167) - v132;
            int v142 = ((1 << v167) - 1) & (a12 + a8);
            int v122 = 1 << v168;
            if (1 << v168 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v168;
            }
            int v148 = 1 << v167;
            if (1 << v167 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v167;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v155 = v24;
            int v157 = v23;
            unsigned int v136 = ~(-1 << v23);
            unsigned int v138 = ~(-1 << v24);
            int v25 = v24;
            do
            {
              if (v163)
              {
                int v26 = 0;
                unsigned __int16 v27 = 0;
                unsigned int v28 = (v20 + v120) << v124;
                unsigned int v29 = a11;
                if (v118 >= (v20 + v120 + 1) << v124) {
                  unsigned int v29 = v112;
                }
                int v30 = v122;
                if (v118 < (v20 + v120 + 1) << v124) {
                  int v30 = v116;
                }
                int v31 = v20 << v124;
                if (v28 >= a7) {
                  unsigned int v32 = v30;
                }
                else {
                  unsigned int v32 = v29;
                }
                unsigned int v33 = v114;
                if (v28 >= a7) {
                  unsigned int v33 = 0;
                }
                unsigned int v151 = v33;
                int v134 = &a2[4 * (unint64_t)(v33 + v31)];
                do
                {
                  LOWORD(v34) = v130;
                  HIWORD(v34) = v27;
                  unint64_t result = sub_34358(v169, v34);
                  int v35 = *(_DWORD *)(v18 + 4LL * result);
                  if (v35 < 0)
                  {
                    unint64_t v36 = v166 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                    unsigned int v37 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v37) {
                      v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v38 = a12;
                    if (v144 >= (v26 + v146 + 1) << v159) {
                      unsigned int v38 = v140;
                    }
                    int v39 = v148;
                    if (v144 < (v26 + v146 + 1) << v159) {
                      int v39 = v142;
                    }
                    if ((v26 + v146) << v159 >= a8) {
                      unsigned int v40 = v39;
                    }
                    else {
                      unsigned int v40 = v38;
                    }
                    uint64_t v41 = sub_34508(v138, 0, v25, v157);
                    uint64_t v42 = sub_34508(0, v136, v25, v157);
                    unint64_t result = sub_34508(v151, 0, v25, v157);
                    if (v40)
                    {
                      uint64_t v43 = result;
                      if ((v26 + v146) << v159 >= a8) {
                        unsigned int v44 = 0;
                      }
                      else {
                        unsigned int v44 = v132;
                      }
                      unsigned int v45 = (_OWORD *)((char *)v134 + (v44 + (v26 << v159)) * a13);
                      unint64_t result = sub_34508(0, v44, v155, v157);
                      for (int i = 0; i != v40; ++i)
                      {
                        unsigned int v47 = v32;
                        int v48 = v45;
                        for (uint64_t j = v43; v47; --v47)
                        {
                          uint64_t v50 = (__int128 *)(v36 + ((j + result) << 6));
                          __int128 v51 = *v50;
                          __int128 v52 = v50[1];
                          __int128 v53 = v50[3];
                          v48[2] = v50[2];
                          v48[3] = v53;
                          *int v48 = v51;
                          v48[1] = v52;
                          v48 += 4;
                          uint64_t j = (j - v41) & v41;
                        }

                        unint64_t result = (result - v42) & v42;
                        unsigned int v45 = (_OWORD *)((char *)v45 + a13);
                      }
                    }
                  }

                  int v26 = ++v27;
                  uint64_t v18 = v166;
                }

                while (v163 > v27);
              }

              int v20 = ++v130;
            }

            while (v128 > v130);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v169, &v168);
          unsigned int v71 = 1 << v168;
          char v72 = *((_BYTE *)a14 + 15);
          unsigned int v73 = 1 << v72;
          if (v72) {
            BOOL v74 = v73 > a3;
          }
          else {
            BOOL v74 = 1;
          }
          BOOL v75 = v74 || v73 > a4;
          int v76 = (~(-1 << v72) + a3) & (-1 << v72);
          if (v75) {
            int v77 = a3;
          }
          else {
            int v77 = v76;
          }
          unsigned int v133 = a8 >> v168;
          int v135 = 1 << v168;
          unsigned int v78 = v71 - 1;
          unsigned int v131 = a12 + a8;
          char v129 = v168;
          unsigned int v79 = (v71 - 1 + a12 + a8) >> v168;
          if (a8 >> v168 < v79)
          {
            unsigned int v123 = (v77 + ~(-1 << SLOBYTE(v169[0]))) >> SLOBYTE(v169[0]);
            unsigned int v80 = a7 >> SLOBYTE(v169[0]);
            char v158 = v169[0];
            unsigned int v154 = ((1 << SLOBYTE(v169[0])) - 1 + a11 + a7) >> SLOBYTE(v169[0]);
            int v149 = ((1 << SLOBYTE(v169[0])) - 1) & (a11 + a7);
            unsigned int v150 = a11 + a7;
            uint64_t v156 = ((1 << SLOBYTE(v169[0])) - 1) & a7;
            unsigned int v147 = (1 << SLOBYTE(v169[0])) - v156;
            int v119 = v78 & v131;
            unsigned int v81 = 1 << v168;
            uint64_t v121 = v78 & a8;
            unsigned int v117 = v71 - v121;
            int v152 = 1 << SLOBYTE(v169[0]);
            if (1 << SLOBYTE(v169[0]) >= a5) {
              unsigned int v82 = a5;
            }
            else {
              unsigned int v82 = 1 << SLOBYTE(v169[0]);
            }
            if (v71 >= a6) {
              unsigned int v81 = a6;
            }
            unsigned int v83 = 32 - __clz(v81 - 1);
            if (v81 < 2) {
              unsigned int v83 = 0;
            }
            unsigned int v84 = 32 - __clz(v82 - 1);
            if (v82 >= 2) {
              unsigned int v85 = v84;
            }
            else {
              unsigned int v85 = 0;
            }
            int v160 = v85;
            unsigned int v115 = ~(-1 << v85);
            int v162 = v83;
            unsigned int v113 = ~(-1 << v83);
            unsigned int v86 = a8 >> v168;
            unsigned int v127 = v15;
            unsigned int v125 = (v71 - 1 + a12 + a8) >> v168;
            unsigned int v145 = a7 >> SLOBYTE(v169[0]);
            do
            {
              if (v80 >= v154)
              {
                unsigned int v111 = v86 + 1;
              }

              else
              {
                unsigned int v164 = v86 << v129;
                unsigned int v137 = v86 + 1;
                if (v131 >= (v86 + 1) << v129) {
                  int v87 = v135;
                }
                else {
                  int v87 = v119;
                }
                if (v131 >= (v86 + 1) << v129) {
                  unsigned int v88 = v117;
                }
                else {
                  unsigned int v88 = v19;
                }
                int v143 = v86 * v123;
                uint64_t v89 = sub_34508(v115, 0, v160, v162);
                uint64_t v90 = sub_34508(0, v113, v160, v162);
                if (v164 >= a8) {
                  int v91 = v87;
                }
                else {
                  int v91 = v88;
                }
                if (v164 >= a8) {
                  unsigned int v92 = 0;
                }
                else {
                  unsigned int v92 = v121;
                }
                unsigned int v141 = v92;
                unsigned int v139 = (char *)v15 + (v92 + ((v86 - v133) << v129) - v121) * a13;
                do
                {
                  unsigned int v93 = v80 << v158;
                  unsigned int v165 = v80 + 1;
                  unsigned int v94 = a11;
                  if (v150 >= (v80 + 1) << v158) {
                    unsigned int v94 = v147;
                  }
                  int v95 = v152;
                  if (v150 < (v80 + 1) << v158) {
                    int v95 = v149;
                  }
                  if (v93 >= a7) {
                    unsigned int v96 = 0;
                  }
                  else {
                    unsigned int v96 = v156;
                  }
                  if (v93 >= a7) {
                    unsigned int v97 = v95;
                  }
                  else {
                    unsigned int v97 = v94;
                  }
                  int v98 = a14[3];
                  int v99 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v96, 0, v160, v162);
                  if (v91)
                  {
                    uint64_t v100 = result;
                    uint64_t v101 = (v80 + v143) * v98 * v99 + v166;
                    uint64_t v102 = &v139[64 * (v96 + ((v80 - v145) << v158) - v156)];
                    unint64_t result = sub_34508(0, v141, v160, v162);
                    for (int k = 0; k != v91; ++k)
                    {
                      unsigned int v104 = v97;
                      unsigned int v105 = v102;
                      for (uint64_t m = v100; v104; --v104)
                      {
                        unsigned int v107 = (__int128 *)(v101 + ((m + result) << 6));
                        __int128 v108 = *v107;
                        __int128 v109 = v107[1];
                        __int128 v110 = v107[3];
                        *((_OWORD *)v105 + 2) = v107[2];
                        *((_OWORD *)v105 + 3) = v110;
                        *(_OWORD *)unsigned int v105 = v108;
                        *((_OWORD *)v105 + 1) = v109;
                        v105 += 64;
                        uint64_t m = (m - v89) & v89;
                      }

                      unint64_t result = (result - v90) & v90;
                      v102 += a13;
                    }
                  }

                  ++v80;
                }

                while (v165 != v154);
                uint64_t v15 = v127;
                unsigned int v19 = a12;
                unsigned int v79 = v125;
                unsigned int v80 = v145;
                unsigned int v111 = v137;
              }

              unsigned int v86 = v111;
            }

            while (v111 != v79);
          }
        }
      }

      else
      {
        unsigned int v54 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v55 = v54;
        }
        else {
          int v55 = 0;
        }
        unsigned int v56 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v57 = v56;
        }
        else {
          int v57 = 0;
        }
        uint64_t v58 = sub_34508(~(-1 << v57), 0, v57, v55);
        uint64_t v59 = sub_34508(0, ~(-1 << v55), v57, v55);
        unint64_t result = sub_34508(a7, 0, v57, v55);
        if (a12)
        {
          uint64_t v60 = result;
          unint64_t result = sub_34508(0, a8, v57, v55);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v62 = a11;
            uint64_t v63 = v15;
            for (iint i = v60; v62; --v62)
            {
              __int128 v65 = (__int128 *)(v18 + ((ii + result) << 6));
              __int128 v66 = *v65;
              __int128 v67 = v65[1];
              __int128 v68 = v65[3];
              v63[2] = v65[2];
              v63[3] = v68;
              *uint64_t v63 = v66;
              v63[1] = v67;
              v63 += 4;
              iint i = (ii - v58) & v58;
            }

            unint64_t result = (result - v59) & v59;
            uint64_t v15 = (_OWORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_4FAB0( uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        uint64_t v175 = result;
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v178);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v177, &v176);
          unsigned int v137 = v179;
          if (v179)
          {
            int v20 = 0;
            unsigned __int16 v139 = 0;
            char v133 = v177;
            unsigned int v129 = a7 >> v177;
            char v168 = v176;
            unsigned int v155 = a8 >> v176;
            unsigned int v172 = v180;
            unsigned int v127 = a11 + a7;
            int v123 = ((1 << v177) - 1) & a7;
            int v125 = ((1 << v177) - 1) & (a11 + a7);
            int v121 = (1 << v177) - v123;
            unsigned int v153 = a12 + a8;
            int v141 = ((1 << v176) - 1) & a8;
            int v149 = (1 << v176) - v141;
            int v151 = ((1 << v176) - 1) & (a12 + a8);
            int v131 = 1 << v177;
            if (1 << v177 >= a5) {
              unsigned int v21 = a5;
            }
            else {
              unsigned int v21 = 1 << v177;
            }
            int v157 = 1 << v176;
            if (1 << v176 >= a6) {
              unsigned int v22 = a6;
            }
            else {
              unsigned int v22 = 1 << v176;
            }
            unsigned int v23 = 32 - __clz(v22 - 1);
            if (v22 < 2) {
              unsigned int v23 = 0;
            }
            unsigned int v24 = 32 - __clz(v21 - 1);
            if (v21 < 2) {
              unsigned int v24 = 0;
            }
            int v164 = v24;
            int v166 = v23;
            unsigned int v145 = ~(-1 << v23);
            unsigned int v147 = ~(-1 << v24);
            int v25 = v24;
            do
            {
              if (v172)
              {
                int v26 = 0;
                unsigned __int16 v27 = 0;
                unsigned int v28 = (v20 + v129) << v133;
                unsigned int v29 = a11;
                if (v127 >= (v20 + v129 + 1) << v133) {
                  unsigned int v29 = v121;
                }
                int v30 = v131;
                if (v127 < (v20 + v129 + 1) << v133) {
                  int v30 = v125;
                }
                int v31 = v20 << v133;
                if (v28 >= a7) {
                  unsigned int v32 = v30;
                }
                else {
                  unsigned int v32 = v29;
                }
                unsigned int v33 = v123;
                if (v28 >= a7) {
                  unsigned int v33 = 0;
                }
                unsigned int v160 = v33;
                int v143 = &a2[8 * (unint64_t)(v33 + v31)];
                do
                {
                  LOWORD(v34) = v139;
                  HIWORD(v34) = v27;
                  unint64_t result = sub_34358(v178, v34);
                  int v35 = *(_DWORD *)(v18 + 4LL * result);
                  if (v35 < 0)
                  {
                    unint64_t v36 = v175 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                    unsigned int v37 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v37) {
                      v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v38 = a12;
                    if (v153 >= (v26 + v155 + 1) << v168) {
                      unsigned int v38 = v149;
                    }
                    int v39 = v157;
                    if (v153 < (v26 + v155 + 1) << v168) {
                      int v39 = v151;
                    }
                    if ((v26 + v155) << v168 >= a8) {
                      unsigned int v40 = v39;
                    }
                    else {
                      unsigned int v40 = v38;
                    }
                    uint64_t v41 = sub_34508(v147, 0, v25, v166);
                    uint64_t v42 = sub_34508(0, v145, v25, v166);
                    unint64_t result = sub_34508(v160, 0, v25, v166);
                    if (v40)
                    {
                      uint64_t v43 = result;
                      if ((v26 + v155) << v168 >= a8) {
                        unsigned int v44 = 0;
                      }
                      else {
                        unsigned int v44 = v141;
                      }
                      unsigned int v45 = (_OWORD *)((char *)v143 + (v44 + (v26 << v168)) * a13);
                      unint64_t result = sub_34508(0, v44, v164, v166);
                      for (int i = 0; i != v40; ++i)
                      {
                        unsigned int v47 = v32;
                        int v48 = v45;
                        for (uint64_t j = v43; v47; --v47)
                        {
                          uint64_t v50 = (__int128 *)(v36 + ((j + result) << 7));
                          __int128 v51 = *v50;
                          __int128 v52 = v50[1];
                          __int128 v53 = v50[3];
                          v48[2] = v50[2];
                          v48[3] = v53;
                          *int v48 = v51;
                          v48[1] = v52;
                          __int128 v54 = v50[4];
                          __int128 v55 = v50[5];
                          __int128 v56 = v50[7];
                          v48[6] = v50[6];
                          v48[7] = v56;
                          v48[4] = v54;
                          v48[5] = v55;
                          uint64_t j = (j - v41) & v41;
                          v48 += 8;
                        }

                        unint64_t result = (result - v42) & v42;
                        unsigned int v45 = (_OWORD *)((char *)v45 + a13);
                      }
                    }
                  }

                  int v26 = ++v27;
                  uint64_t v18 = v175;
                }

                while (v172 > v27);
              }

              int v20 = ++v139;
            }

            while (v137 > v139);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v178, &v177);
          unsigned int v77 = 1 << v177;
          char v78 = *((_BYTE *)a14 + 15);
          unsigned int v79 = 1 << v78;
          if (v78) {
            BOOL v80 = v79 > a3;
          }
          else {
            BOOL v80 = 1;
          }
          BOOL v81 = v80 || v79 > a4;
          int v82 = (~(-1 << v78) + a3) & (-1 << v78);
          if (v81) {
            int v83 = a3;
          }
          else {
            int v83 = v82;
          }
          unsigned int v142 = a8 >> v177;
          int v144 = 1 << v177;
          unsigned int v84 = v77 - 1;
          unsigned int v140 = a12 + a8;
          char v138 = v177;
          unsigned int v85 = (v77 - 1 + a12 + a8) >> v177;
          if (a8 >> v177 < v85)
          {
            unsigned int v132 = (v83 + ~(-1 << SLOBYTE(v178[0]))) >> SLOBYTE(v178[0]);
            unsigned int v86 = a7 >> SLOBYTE(v178[0]);
            char v167 = v178[0];
            unsigned int v163 = ((1 << SLOBYTE(v178[0])) - 1 + a11 + a7) >> SLOBYTE(v178[0]);
            int v158 = ((1 << SLOBYTE(v178[0])) - 1) & (a11 + a7);
            unsigned int v159 = a11 + a7;
            uint64_t v165 = ((1 << SLOBYTE(v178[0])) - 1) & a7;
            unsigned int v156 = (1 << SLOBYTE(v178[0])) - v165;
            int v128 = v84 & v140;
            unsigned int v87 = 1 << v177;
            uint64_t v130 = v84 & a8;
            unsigned int v126 = v77 - v130;
            int v161 = 1 << SLOBYTE(v178[0]);
            if (1 << SLOBYTE(v178[0]) >= a5) {
              unsigned int v88 = a5;
            }
            else {
              unsigned int v88 = 1 << SLOBYTE(v178[0]);
            }
            if (v77 >= a6) {
              unsigned int v87 = a6;
            }
            unsigned int v89 = 32 - __clz(v87 - 1);
            if (v87 < 2) {
              unsigned int v89 = 0;
            }
            unsigned int v90 = 32 - __clz(v88 - 1);
            if (v88 >= 2) {
              unsigned int v91 = v90;
            }
            else {
              unsigned int v91 = 0;
            }
            int v169 = v91;
            unsigned int v124 = ~(-1 << v91);
            int v171 = v89;
            unsigned int v122 = ~(-1 << v89);
            unsigned int v92 = a8 >> v177;
            unsigned int v136 = v15;
            unsigned int v134 = (v77 - 1 + a12 + a8) >> v177;
            unsigned int v154 = a7 >> SLOBYTE(v178[0]);
            do
            {
              if (v86 >= v163)
              {
                unsigned int v120 = v92 + 1;
              }

              else
              {
                unsigned int v173 = v92 << v138;
                unsigned int v146 = v92 + 1;
                if (v140 >= (v92 + 1) << v138) {
                  int v93 = v144;
                }
                else {
                  int v93 = v128;
                }
                if (v140 >= (v92 + 1) << v138) {
                  unsigned int v94 = v126;
                }
                else {
                  unsigned int v94 = v19;
                }
                int v152 = v92 * v132;
                uint64_t v95 = sub_34508(v124, 0, v169, v171);
                uint64_t v96 = sub_34508(0, v122, v169, v171);
                if (v173 >= a8) {
                  int v97 = v93;
                }
                else {
                  int v97 = v94;
                }
                if (v173 >= a8) {
                  unsigned int v98 = 0;
                }
                else {
                  unsigned int v98 = v130;
                }
                unsigned int v150 = v98;
                int v148 = (char *)v15 + (v98 + ((v92 - v142) << v138) - v130) * a13;
                do
                {
                  unsigned int v99 = v86 << v167;
                  unsigned int v174 = v86 + 1;
                  unsigned int v100 = a11;
                  if (v159 >= (v86 + 1) << v167) {
                    unsigned int v100 = v156;
                  }
                  int v101 = v161;
                  if (v159 < (v86 + 1) << v167) {
                    int v101 = v158;
                  }
                  if (v99 >= a7) {
                    unsigned int v102 = 0;
                  }
                  else {
                    unsigned int v102 = v165;
                  }
                  if (v99 >= a7) {
                    unsigned int v103 = v101;
                  }
                  else {
                    unsigned int v103 = v100;
                  }
                  int v104 = a14[3];
                  int v105 = *((unsigned __int8 *)a14 + 9);
                  unint64_t result = sub_34508(v102, 0, v169, v171);
                  if (v97)
                  {
                    uint64_t v106 = result;
                    uint64_t v107 = (v86 + v152) * v104 * v105 + v175;
                    __int128 v108 = &v148[128 * (v102 + ((v86 - v154) << v167) - v165)];
                    unint64_t result = sub_34508(0, v150, v169, v171);
                    for (int k = 0; k != v97; ++k)
                    {
                      unsigned int v110 = v103;
                      unsigned int v111 = v108;
                      for (uint64_t m = v106; v110; --v110)
                      {
                        unsigned int v113 = (__int128 *)(v107 + ((m + result) << 7));
                        __int128 v114 = *v113;
                        __int128 v115 = v113[1];
                        __int128 v116 = v113[3];
                        *((_OWORD *)v111 + 2) = v113[2];
                        *((_OWORD *)v111 + 3) = v116;
                        *(_OWORD *)unsigned int v111 = v114;
                        *((_OWORD *)v111 + 1) = v115;
                        __int128 v117 = v113[4];
                        __int128 v118 = v113[5];
                        __int128 v119 = v113[7];
                        *((_OWORD *)v111 + 6) = v113[6];
                        *((_OWORD *)v111 + 7) = v119;
                        *((_OWORD *)v111 + 4) = v117;
                        *((_OWORD *)v111 + 5) = v118;
                        uint64_t m = (m - v95) & v95;
                        v111 += 128;
                      }

                      unint64_t result = (result - v96) & v96;
                      v108 += a13;
                    }
                  }

                  ++v86;
                }

                while (v174 != v163);
                uint64_t v15 = v136;
                unsigned int v19 = a12;
                unsigned int v85 = v134;
                unsigned int v86 = v154;
                unsigned int v120 = v146;
              }

              unsigned int v92 = v120;
            }

            while (v120 != v85);
          }
        }
      }

      else
      {
        unsigned int v57 = 32 - __clz(a6 - 1);
        if (a6 >= 2) {
          int v58 = v57;
        }
        else {
          int v58 = 0;
        }
        unsigned int v59 = 32 - __clz(a5 - 1);
        if (a5 >= 2) {
          int v60 = v59;
        }
        else {
          int v60 = 0;
        }
        uint64_t v61 = sub_34508(~(-1 << v60), 0, v60, v58);
        uint64_t v62 = sub_34508(0, ~(-1 << v58), v60, v58);
        unint64_t result = sub_34508(a7, 0, v60, v58);
        if (a12)
        {
          uint64_t v63 = result;
          unint64_t result = sub_34508(0, a8, v60, v58);
          for (int n = 0; n != a12; ++n)
          {
            unsigned int v65 = a11;
            __int128 v66 = v15;
            for (iint i = v63; v65; --v65)
            {
              __int128 v68 = (__int128 *)(v18 + ((ii + result) << 7));
              __int128 v69 = *v68;
              __int128 v70 = v68[1];
              __int128 v71 = v68[3];
              v66[2] = v68[2];
              v66[3] = v71;
              *__int128 v66 = v69;
              v66[1] = v70;
              __int128 v72 = v68[4];
              __int128 v73 = v68[5];
              __int128 v74 = v68[7];
              v66[6] = v68[6];
              v66[7] = v74;
              v66[4] = v72;
              v66[5] = v73;
              iint i = (ii - v61) & v61;
              v66 += 8;
            }

            unint64_t result = (result - v62) & v62;
            uint64_t v15 = (_OWORD *)((char *)v15 + a13);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_503A4( uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    unsigned int v18 = a12;
    if (a14)
    {
      uint64_t v155 = result;
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v158);
        unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v157, &v156);
        unsigned int v117 = v159;
        if (v159)
        {
          int v19 = 0;
          unsigned __int16 v119 = 0;
          char v115 = v157;
          unsigned int v111 = a7 >> v157;
          char v149 = v156;
          unsigned int v136 = a8 >> v156;
          unsigned int v153 = v160;
          unsigned int v109 = a11 + a7;
          int v105 = ((1 << v157) - 1) & a7;
          int v107 = ((1 << v157) - 1) & (a11 + a7);
          int v103 = (1 << v157) - v105;
          unsigned int v134 = a12 + a8;
          int v121 = ((1 << v156) - 1) & a8;
          int v130 = (1 << v156) - v121;
          int v132 = ((1 << v156) - 1) & (a12 + a8);
          int v113 = 1 << v157;
          if (1 << v157 >= a5) {
            unsigned int v20 = a5;
          }
          else {
            unsigned int v20 = 1 << v157;
          }
          int v138 = 1 << v156;
          if (1 << v156 >= a6) {
            unsigned int v21 = a6;
          }
          else {
            unsigned int v21 = 1 << v156;
          }
          unsigned int v22 = 32 - __clz(v21 - 1);
          if (v21 < 2) {
            unsigned int v22 = 0;
          }
          unsigned int v23 = 32 - __clz(v20 - 1);
          if (v20 < 2) {
            unsigned int v23 = 0;
          }
          int v145 = v23;
          int v147 = v22;
          unsigned int v126 = ~(-1 << v22);
          unsigned int v128 = ~(-1 << v23);
          int v24 = v23;
          do
          {
            if (v153)
            {
              int v25 = 0;
              unsigned __int16 v26 = 0;
              unsigned int v27 = (v19 + v111) << v115;
              unsigned int v28 = a11;
              if (v109 >= (v19 + v111 + 1) << v115) {
                unsigned int v28 = v103;
              }
              int v29 = v113;
              if (v109 < (v19 + v111 + 1) << v115) {
                int v29 = v107;
              }
              int v30 = v19 << v115;
              if (v27 >= a7) {
                unsigned int v31 = v29;
              }
              else {
                unsigned int v31 = v28;
              }
              unsigned int v32 = v105;
              if (v27 >= a7) {
                unsigned int v32 = 0;
              }
              unsigned int v141 = v32;
              int v123 = &a2[v32 + v30];
              do
              {
                LOWORD(v33) = v119;
                HIWORD(v33) = v26;
                unint64_t result = sub_34358(v158, v33);
                int v34 = *(_DWORD *)(v17 + 4LL * result);
                if (v34 < 0)
                {
                  unint64_t v35 = v155 - *(void *)(a15 + 24) + ((unint64_t)(v34 & 0x3FFFFFF) << 14);
                  unsigned int v36 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v36) {
                    v35 += sub_343C0( *(_DWORD *)a15,  v36,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v37 = a12;
                  if (v134 >= (v25 + v136 + 1) << v149) {
                    unsigned int v37 = v130;
                  }
                  int v38 = v138;
                  if (v134 < (v25 + v136 + 1) << v149) {
                    int v38 = v132;
                  }
                  if ((v25 + v136) << v149 >= a8) {
                    unsigned int v39 = v38;
                  }
                  else {
                    unsigned int v39 = v37;
                  }
                  uint64_t v40 = sub_34508(v128, 0, v24, v147);
                  uint64_t v41 = sub_34508(0, v126, v24, v147);
                  unint64_t result = sub_34508(v141, 0, v24, v147);
                  if (v39)
                  {
                    uint64_t v42 = result;
                    if ((v25 + v136) << v149 >= a8) {
                      unsigned int v43 = 0;
                    }
                    else {
                      unsigned int v43 = v121;
                    }
                    unsigned int v44 = (_OWORD *)((char *)v123 + (v43 + (v25 << v149)) * a13);
                    unint64_t result = sub_34508(0, v43, v145, v147);
                    for (int i = 0; i != v39; ++i)
                    {
                      unsigned int v46 = v31;
                      unsigned int v47 = v44;
                      for (uint64_t j = v42; v46; --v46)
                      {
                        *v47++ = *(_OWORD *)(v35 + 16 * (j + result));
                        uint64_t j = (j - v40) & v40;
                      }

                      unint64_t result = (result - v41) & v41;
                      unsigned int v44 = (_OWORD *)((char *)v44 + a13);
                    }
                  }
                }

                int v25 = ++v26;
                uint64_t v17 = v155;
              }

              while (v153 > v26);
            }

            int v19 = ++v119;
          }

          while (v117 > v119);
        }
      }

      else
      {
        unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v158, &v157);
        unsigned int v64 = 1 << v157;
        char v65 = *((_BYTE *)a14 + 15);
        unsigned int v66 = 1 << v65;
        if (v65) {
          BOOL v67 = v66 > a3;
        }
        else {
          BOOL v67 = 1;
        }
        BOOL v68 = v67 || v66 > a4;
        int v69 = (~(-1 << v65) + a3) & (-1 << v65);
        if (v68) {
          int v70 = a3;
        }
        else {
          int v70 = v69;
        }
        unsigned int v122 = a8 >> v157;
        int v124 = 1 << v157;
        unsigned int v71 = v64 - 1;
        unsigned int v120 = a12 + a8;
        char v118 = v157;
        unsigned int v72 = (v64 - 1 + a12 + a8) >> v157;
        if (a8 >> v157 < v72)
        {
          unsigned int v114 = (v70 + ~(-1 << SLOBYTE(v158[0]))) >> SLOBYTE(v158[0]);
          unsigned int v73 = a7 >> SLOBYTE(v158[0]);
          char v148 = v158[0];
          unsigned int v144 = ((1 << SLOBYTE(v158[0])) - 1 + a11 + a7) >> SLOBYTE(v158[0]);
          int v139 = ((1 << SLOBYTE(v158[0])) - 1) & (a11 + a7);
          unsigned int v140 = a11 + a7;
          uint64_t v146 = ((1 << SLOBYTE(v158[0])) - 1) & a7;
          unsigned int v137 = (1 << SLOBYTE(v158[0])) - v146;
          int v110 = v71 & v120;
          unsigned int v74 = 1 << v157;
          uint64_t v112 = v71 & a8;
          unsigned int v108 = v64 - v112;
          int v142 = 1 << SLOBYTE(v158[0]);
          if (1 << SLOBYTE(v158[0]) >= a5) {
            unsigned int v75 = a5;
          }
          else {
            unsigned int v75 = 1 << SLOBYTE(v158[0]);
          }
          if (v64 >= a6) {
            unsigned int v74 = a6;
          }
          unsigned int v76 = 32 - __clz(v74 - 1);
          if (v74 < 2) {
            unsigned int v76 = 0;
          }
          unsigned int v77 = 32 - __clz(v75 - 1);
          if (v75 >= 2) {
            unsigned int v78 = v77;
          }
          else {
            unsigned int v78 = 0;
          }
          int v150 = v78;
          unsigned int v106 = ~(-1 << v78);
          int v152 = v76;
          unsigned int v104 = ~(-1 << v76);
          unsigned int v79 = a8 >> v157;
          unsigned int v116 = (v64 - 1 + a12 + a8) >> v157;
          unsigned int v135 = a7 >> SLOBYTE(v158[0]);
          do
          {
            if (v73 >= v144)
            {
              unsigned int v102 = v79 + 1;
            }

            else
            {
              unsigned int v80 = v79 << v118;
              unsigned int v127 = v79 + 1;
              if (v120 >= (v79 + 1) << v118) {
                int v81 = v124;
              }
              else {
                int v81 = v110;
              }
              if (v120 >= (v79 + 1) << v118) {
                unsigned int v82 = v108;
              }
              else {
                unsigned int v82 = v18;
              }
              int v133 = v79 * v114;
              uint64_t v83 = sub_34508(v106, 0, v150, v152);
              uint64_t v84 = sub_34508(0, v104, v150, v152);
              BOOL v85 = v80 >= a8;
              if (v80 >= a8) {
                int v86 = v81;
              }
              else {
                int v86 = v82;
              }
              if (v85) {
                unsigned int v87 = 0;
              }
              else {
                unsigned int v87 = v112;
              }
              unsigned int v131 = v87;
              uint64_t v129 = (v87 + ((v79 - v122) << v118) - v112) * a13;
              do
              {
                unsigned int v88 = v73 << v148;
                unsigned int v154 = v73 + 1;
                unsigned int v89 = a11;
                if (v140 >= (v73 + 1) << v148) {
                  unsigned int v89 = v137;
                }
                int v90 = v142;
                if (v140 < (v73 + 1) << v148) {
                  int v90 = v139;
                }
                if (v88 >= a7) {
                  unsigned int v91 = 0;
                }
                else {
                  unsigned int v91 = v146;
                }
                if (v88 >= a7) {
                  unsigned int v92 = v90;
                }
                else {
                  unsigned int v92 = v89;
                }
                int v93 = a14[3];
                int v94 = *((unsigned __int8 *)a14 + 9);
                unint64_t result = sub_34508(v91, 0, v150, v152);
                if (v86)
                {
                  uint64_t v95 = result;
                  uint64_t v96 = (v73 + v133) * v93 * v94 + v155;
                  int v97 = (_OWORD *)((char *)&a2[v91 + ((v73 - v135) << v148) - v146] + v129);
                  unint64_t result = sub_34508(0, v131, v150, v152);
                  for (int k = 0; k != v86; ++k)
                  {
                    unsigned int v99 = v92;
                    unsigned int v100 = v97;
                    for (uint64_t m = v95; v99; --v99)
                    {
                      *v100++ = *(_OWORD *)(v96 + 16 * (m + result));
                      uint64_t m = (m - v83) & v83;
                    }

                    unint64_t result = (result - v84) & v84;
                    int v97 = (_OWORD *)((char *)v97 + a13);
                  }
                }

                ++v73;
              }

              while (v154 != v144);
              unsigned int v18 = a12;
              unsigned int v72 = v116;
              unsigned int v73 = v135;
              unsigned int v102 = v127;
            }

            unsigned int v79 = v102;
          }

          while (v102 != v72);
        }
      }
    }

    else
    {
      unsigned int v49 = 32 - __clz(a6 - 1);
      if (a6 >= 2) {
        int v50 = v49;
      }
      else {
        int v50 = 0;
      }
      unsigned int v51 = 32 - __clz(a5 - 1);
      if (a5 >= 2) {
        int v52 = v51;
      }
      else {
        int v52 = 0;
      }
      uint64_t v54 = sub_34508(~(-1 << v52), 0, v52, v50);
      uint64_t v55 = sub_34508(0, ~(-1 << v50), v52, v50);
      unint64_t result = sub_34508(a7, 0, v52, v50);
      if (a12)
      {
        uint64_t v56 = result;
        unint64_t result = sub_34508(0, a8, v52, v50);
        unsigned int v57 = a2;
        for (int n = 0; n != a12; ++n)
        {
          unsigned int v59 = a11;
          int v60 = v57;
          for (iint i = v56; v59; --v59)
          {
            *v60++ = *(_OWORD *)(v17 + 16 * (ii + result));
            iint i = (ii - v54) & v54;
          }

          unint64_t result = (result - v55) & v55;
          unsigned int v57 = (_OWORD *)((char *)v57 + a13);
        }
      }
    }
  }

  return result;
}

uint64_t sub_50C34( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_52234(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_50C50( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                int v34 = &a2[8 * v33 + 8 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  unint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    unint64_t result = sub_520C4(v37, &v34[(v41 + (v27 << v21)) * a13], v101, v99, v114, v42, a13, v33, v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            unint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            int v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = &v15[(v68 + ((v63 - v102) << v98) - v88) * a13];
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_520C4( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[8 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  unint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                uint64_t v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_520C4(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_5122C( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                int v34 = &a2[16 * v33 + 16 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  unint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    unint64_t result = sub_51F54(v37, &v34[(v41 + (v27 << v21)) * a13], v101, v99, v114, v42, a13, v33, v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            unint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            int v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = &v15[(v68 + ((v63 - v102) << v98) - v88) * a13];
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_51F54( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[16 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  unint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                uint64_t v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_51F54(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_51808( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    uint64_t v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                int v34 = &a2[32 * v33 + 32 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  unint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    unint64_t result = sub_51DE4(v37, &v34[(v41 + (v27 << v21)) * a13], v101, v99, v114, v42, a13, v33, v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          unint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            unint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            int v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = &v15[(v68 + ((v63 - v102) << v98) - v88) * a13];
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_51DE4( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[32 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  unint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                uint64_t v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_51DE4(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_51DE4( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = a1 + 32 * (v26 + result);
          unsigned int v29 = v25;
          do
          {
            *unsigned int v29 = *(_BYTE *)(v28 + v27);
            v29[1] = *(_BYTE *)(v28 + v27 + 1);
            v29[2] = *(_BYTE *)(v28 + v27 + 2);
            v29[3] = 127;
            v27 += 3LL;
            v29 += 4;
          }

          while ((_DWORD)v27 != 24);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 32;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 += a7;
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_51F54( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = a1 + 16 * (v26 + result);
          unsigned int v29 = v25;
          do
          {
            *unsigned int v29 = *(_BYTE *)(v28 + v27);
            v29[1] = *(_BYTE *)(v28 + v27 + 1);
            v29[2] = *(_BYTE *)(v28 + v27 + 2);
            v29[3] = 127;
            v27 += 3LL;
            v29 += 4;
          }

          while ((_DWORD)v27 != 12);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 16;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 += a7;
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_520C4( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = (_BYTE *)(a1 + 8 * (v26 + result));
          char v28 = 1;
          unsigned int v29 = v25;
          do
          {
            char v30 = v28;
            *unsigned int v29 = *v27;
            v29[1] = v27[1];
            char v31 = v27[2];
            v27 += 3;
            v29[2] = v31;
            v29[3] = 127;
            v29 += 4;
            char v28 = 0;
          }

          while ((v30 & 1) != 0);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 8;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 += a7;
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_52234( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    uint64_t v18 = a13;
    unsigned int v19 = a12;
    if (a14)
    {
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v119);
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v118, &v117);
        unsigned int v92 = v120;
        if (v120)
        {
          int v20 = 0;
          unsigned __int16 v94 = 0;
          char v21 = v117;
          char v90 = v118;
          unsigned int v86 = a7 >> v118;
          unsigned int v109 = a8 >> v117;
          unsigned int v22 = v121;
          unsigned int v84 = a11 + a7;
          int v82 = ((1 << v118) - 1) & a7;
          int v83 = ((1 << v118) - 1) & (a11 + a7);
          int v81 = (1 << v118) - v82;
          unsigned int v107 = a12 + a8;
          int v105 = ((1 << v117) - 1) & (a12 + a8);
          int v102 = ((1 << v117) - 1) & a8;
          int v100 = (1 << v117) - v102;
          int v88 = 1 << v118;
          if (1 << v118 >= a5) {
            int v23 = a5;
          }
          else {
            int v23 = 1 << v118;
          }
          int v24 = 1 << v117;
          if (1 << v117 >= a6) {
            int v25 = a6;
          }
          else {
            int v25 = 1 << v117;
          }
          unsigned int v96 = v25;
          unsigned int v98 = v23;
          do
          {
            if (v22)
            {
              int v26 = 0;
              unsigned __int16 v27 = 0;
              unsigned int v28 = (v20 + v86) << v90;
              unsigned int v29 = a11;
              if (v84 >= (v20 + v86 + 1) << v90) {
                unsigned int v29 = v81;
              }
              int v30 = v88;
              if (v84 < (v20 + v86 + 1) << v90) {
                int v30 = v83;
              }
              int v31 = v20 << v90;
              if (v28 >= a7) {
                unsigned int v29 = v30;
              }
              int v111 = v29;
              if (v28 >= a7) {
                unsigned int v32 = 0;
              }
              else {
                unsigned int v32 = v82;
              }
              unsigned int v33 = &a2[4 * v32 + 4 * v31];
              do
              {
                LOWORD(v34) = v94;
                HIWORD(v34) = v27;
                uint64_t result = sub_34358(v119, v34);
                int v35 = *(_DWORD *)(v17 + 4LL * result);
                if (v35 < 0)
                {
                  uint64_t v36 = v17 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                  unsigned int v37 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v37) {
                    v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v38 = a12;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    unsigned int v38 = v100;
                  }
                  int v39 = v105;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    int v39 = v24;
                  }
                  unsigned int v40 = v102;
                  if ((v26 + v109) << v21 < a8)
                  {
                    int v41 = v38;
                  }

                  else
                  {
                    unsigned int v40 = 0;
                    int v41 = v39;
                  }

                  uint64_t result = sub_52804(v36, &v33[(v40 + (v26 << v21)) * a13], v98, v96, v111, v41, a13, v32, v40);
                }

                int v26 = ++v27;
              }

              while (v22 > v27);
            }

            int v20 = ++v94;
          }

          while (v92 > v94);
        }
      }

      else
      {
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v119, &v118);
        int v44 = 1 << v118;
        char v45 = *((_BYTE *)a14 + 15);
        unsigned int v46 = 1 << v45;
        if (v45) {
          BOOL v47 = v46 > a3;
        }
        else {
          BOOL v47 = 1;
        }
        BOOL v48 = v47 || v46 > a4;
        int v49 = (~(-1 << v45) + a3) & (-1 << v45);
        if (v48) {
          int v50 = a3;
        }
        else {
          int v50 = v49;
        }
        unsigned int v99 = a8 >> v118;
        unsigned int v101 = 1 << v118;
        int v51 = v44 - 1;
        unsigned int v97 = a12 + a8;
        char v95 = v118;
        unsigned int v52 = (v44 - 1 + a12 + a8) >> v118;
        if (a8 >> v118 < v52)
        {
          uint64_t v53 = v119[0];
          uint64_t v54 = (1 << SLOBYTE(v119[0]));
          unsigned int v91 = (v50 + ~(-1 << v53)) >> v53;
          uint64_t v55 = a7 >> SLOBYTE(v119[0]);
          unsigned int v56 = a11 + a7;
          unsigned int v57 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v119[0]);
          uint64_t v58 = ((_DWORD)v54 - 1) & a7;
          int v59 = (v54 - 1) & (a11 + a7);
          uint64_t result = (v54 - v58);
          int v85 = v51 & v97;
          uint64_t v87 = v51 & a8;
          else {
            unsigned int v60 = 1 << SLOBYTE(v119[0]);
          }
          if (v101 >= a6) {
            unsigned int v61 = a6;
          }
          else {
            unsigned int v61 = 1 << v118;
          }
          int v62 = v57 - v55;
          unsigned int v63 = a8 >> v118;
          unsigned int v93 = v52;
          unsigned int v89 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v119[0]);
          uint64_t v104 = v17;
          uint64_t v106 = ((_DWORD)v54 - 1) & a7;
          do
          {
            if (v57 <= v55)
            {
              unsigned int v80 = v63 + 1;
            }

            else
            {
              int v64 = 0;
              unsigned int v65 = v63 << v95;
              unsigned int v103 = v63 + 1;
              int v66 = v101;
              if (v97 < (v63 + 1) << v95) {
                int v66 = v85;
              }
              unsigned int v67 = v101 - v87;
              if (v97 < (v63 + 1) << v95) {
                unsigned int v67 = v19;
              }
              if (v65 < a8) {
                int v66 = v67;
              }
              int v116 = v66;
              if (v65 >= a8) {
                unsigned int v68 = 0;
              }
              else {
                unsigned int v68 = v87;
              }
              unsigned int v112 = v68;
              uint64_t v110 = (v68 + ((v63 - v99) << v95) - v87) * v18;
              int v108 = v55 + v63 * v91;
              do
              {
                unsigned int v69 = ((_DWORD)v55 + v64) << v53;
                unsigned int v70 = ((_DWORD)v55 + v64 + 1) << v53;
                BOOL v71 = v56 >= v70;
                if (v56 >= v70) {
                  int v72 = v54;
                }
                else {
                  int v72 = v59;
                }
                int v73 = a11;
                if (v71) {
                  int v73 = result;
                }
                if (v69 >= a7) {
                  unsigned int v74 = 0;
                }
                else {
                  unsigned int v74 = v58;
                }
                if (v69 >= a7) {
                  int v75 = v72;
                }
                else {
                  int v75 = v73;
                }
                uint64_t v76 = result;
                uint64_t v77 = v53;
                uint64_t v78 = v54;
                uint64_t v79 = v55;
                sub_52804( (v108 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v104,  &a2[4 * (v74 + (v64 << v53) - v58) + v110],  v60,  v61,  v75,  v116,  a13,  v74,  v112);
                uint64_t v53 = v77;
                uint64_t v58 = v106;
                uint64_t result = v76;
                uint64_t v55 = v79;
                uint64_t v54 = v78;
                ++v64;
              }

              while (v62 != v64);
              uint64_t v18 = a13;
              unsigned int v19 = a12;
              unsigned int v52 = v93;
              unsigned int v57 = v89;
              unsigned int v80 = v103;
            }

            unsigned int v63 = v80;
          }

          while (v80 != v52);
        }
      }
    }

    else
    {
      return sub_52804(result, a2, a5, a6, a11, a12, a13, a7, a8);
    }
  }

  return result;
}

uint64_t sub_52804( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      int v24 = a5;
      int v25 = a2;
      for (uint64_t i = v22; v24; --v24)
      {
        unsigned __int16 v27 = (_BYTE *)(a1 + 4 * (i + result));
        *int v25 = *v27;
        v25[1] = v27[1];
        v25[2] = v27[2];
        v25[3] = 127;
        uint64_t i = (i - v19) & v19;
        v25 += 4;
      }

      uint64_t result = (result - v20) & v20;
      a2 += a7;
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_52954( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_53F54(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_52970( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[8 * v33 + 8 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_53DE4(v37, &v34[(v41 + (v27 << v21)) * a13], v101, v99, v114, v42, a13, v33, v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = &v15[(v68 + ((v63 - v102) << v98) - v88) * a13];
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_53DE4( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[8 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_53DE4(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_52F4C( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[16 * v33 + 16 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_53C74(v37, &v34[(v41 + (v27 << v21)) * a13], v101, v99, v114, v42, a13, v33, v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = &v15[(v68 + ((v63 - v102) << v98) - v88) * a13];
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_53C74( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[16 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_53C74(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_53528( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[32 * v33 + 32 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_53B04(v37, &v34[(v41 + (v27 << v21)) * a13], v101, v99, v114, v42, a13, v33, v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = &v15[(v68 + ((v63 - v102) << v98) - v88) * a13];
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_53B04( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[32 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_53B04(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_53B04( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = a1 + 32 * (v26 + result);
          unsigned int v29 = v25;
          do
          {
            *unsigned int v29 = *(_BYTE *)(v28 + v27);
            v29[1] = *(_BYTE *)(v28 + v27 + 1);
            v29[2] = *(_BYTE *)(v28 + v27 + 2);
            v29[3] = -1;
            v27 += 3LL;
            v29 += 4;
          }

          while ((_DWORD)v27 != 24);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 32;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 += a7;
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_53C74( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = a1 + 16 * (v26 + result);
          unsigned int v29 = v25;
          do
          {
            *unsigned int v29 = *(_BYTE *)(v28 + v27);
            v29[1] = *(_BYTE *)(v28 + v27 + 1);
            v29[2] = *(_BYTE *)(v28 + v27 + 2);
            v29[3] = -1;
            v27 += 3LL;
            v29 += 4;
          }

          while ((_DWORD)v27 != 12);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 16;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 += a7;
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_53DE4( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = (_BYTE *)(a1 + 8 * (v26 + result));
          char v28 = 1;
          unsigned int v29 = v25;
          do
          {
            char v30 = v28;
            *unsigned int v29 = *v27;
            v29[1] = v27[1];
            char v31 = v27[2];
            v27 += 3;
            v29[2] = v31;
            v29[3] = -1;
            v29 += 4;
            char v28 = 0;
          }

          while ((v30 & 1) != 0);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 8;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 += a7;
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_53F54( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    uint64_t v18 = a13;
    unsigned int v19 = a12;
    if (a14)
    {
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v119);
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v118, &v117);
        unsigned int v92 = v120;
        if (v120)
        {
          int v20 = 0;
          unsigned __int16 v94 = 0;
          char v21 = v117;
          char v90 = v118;
          unsigned int v86 = a7 >> v118;
          unsigned int v109 = a8 >> v117;
          unsigned int v22 = v121;
          unsigned int v84 = a11 + a7;
          int v82 = ((1 << v118) - 1) & a7;
          int v83 = ((1 << v118) - 1) & (a11 + a7);
          int v81 = (1 << v118) - v82;
          unsigned int v107 = a12 + a8;
          int v105 = ((1 << v117) - 1) & (a12 + a8);
          int v102 = ((1 << v117) - 1) & a8;
          int v100 = (1 << v117) - v102;
          int v88 = 1 << v118;
          if (1 << v118 >= a5) {
            int v23 = a5;
          }
          else {
            int v23 = 1 << v118;
          }
          int v24 = 1 << v117;
          if (1 << v117 >= a6) {
            int v25 = a6;
          }
          else {
            int v25 = 1 << v117;
          }
          unsigned int v96 = v25;
          unsigned int v98 = v23;
          do
          {
            if (v22)
            {
              int v26 = 0;
              unsigned __int16 v27 = 0;
              unsigned int v28 = (v20 + v86) << v90;
              unsigned int v29 = a11;
              if (v84 >= (v20 + v86 + 1) << v90) {
                unsigned int v29 = v81;
              }
              int v30 = v88;
              if (v84 < (v20 + v86 + 1) << v90) {
                int v30 = v83;
              }
              int v31 = v20 << v90;
              if (v28 >= a7) {
                unsigned int v29 = v30;
              }
              int v111 = v29;
              if (v28 >= a7) {
                unsigned int v32 = 0;
              }
              else {
                unsigned int v32 = v82;
              }
              unsigned int v33 = &a2[4 * v32 + 4 * v31];
              do
              {
                LOWORD(v34) = v94;
                HIWORD(v34) = v27;
                uint64_t result = sub_34358(v119, v34);
                int v35 = *(_DWORD *)(v17 + 4LL * result);
                if (v35 < 0)
                {
                  uint64_t v36 = v17 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                  unsigned int v37 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v37) {
                    v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v38 = a12;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    unsigned int v38 = v100;
                  }
                  int v39 = v105;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    int v39 = v24;
                  }
                  unsigned int v40 = v102;
                  if ((v26 + v109) << v21 < a8)
                  {
                    int v41 = v38;
                  }

                  else
                  {
                    unsigned int v40 = 0;
                    int v41 = v39;
                  }

                  uint64_t result = sub_54524(v36, &v33[(v40 + (v26 << v21)) * a13], v98, v96, v111, v41, a13, v32, v40);
                }

                int v26 = ++v27;
              }

              while (v22 > v27);
            }

            int v20 = ++v94;
          }

          while (v92 > v94);
        }
      }

      else
      {
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v119, &v118);
        int v44 = 1 << v118;
        char v45 = *((_BYTE *)a14 + 15);
        unsigned int v46 = 1 << v45;
        if (v45) {
          BOOL v47 = v46 > a3;
        }
        else {
          BOOL v47 = 1;
        }
        BOOL v48 = v47 || v46 > a4;
        int v49 = (~(-1 << v45) + a3) & (-1 << v45);
        if (v48) {
          int v50 = a3;
        }
        else {
          int v50 = v49;
        }
        unsigned int v99 = a8 >> v118;
        unsigned int v101 = 1 << v118;
        int v51 = v44 - 1;
        unsigned int v97 = a12 + a8;
        char v95 = v118;
        unsigned int v52 = (v44 - 1 + a12 + a8) >> v118;
        if (a8 >> v118 < v52)
        {
          uint64_t v53 = v119[0];
          uint64_t v54 = (1 << SLOBYTE(v119[0]));
          unsigned int v91 = (v50 + ~(-1 << v53)) >> v53;
          uint64_t v55 = a7 >> SLOBYTE(v119[0]);
          unsigned int v56 = a11 + a7;
          unsigned int v57 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v119[0]);
          uint64_t v58 = ((_DWORD)v54 - 1) & a7;
          int v59 = (v54 - 1) & (a11 + a7);
          uint64_t result = (v54 - v58);
          int v85 = v51 & v97;
          uint64_t v87 = v51 & a8;
          else {
            unsigned int v60 = 1 << SLOBYTE(v119[0]);
          }
          if (v101 >= a6) {
            unsigned int v61 = a6;
          }
          else {
            unsigned int v61 = 1 << v118;
          }
          int v62 = v57 - v55;
          unsigned int v63 = a8 >> v118;
          unsigned int v93 = v52;
          unsigned int v89 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v119[0]);
          uint64_t v104 = v17;
          uint64_t v106 = ((_DWORD)v54 - 1) & a7;
          do
          {
            if (v57 <= v55)
            {
              unsigned int v80 = v63 + 1;
            }

            else
            {
              int v64 = 0;
              unsigned int v65 = v63 << v95;
              unsigned int v103 = v63 + 1;
              int v66 = v101;
              if (v97 < (v63 + 1) << v95) {
                int v66 = v85;
              }
              unsigned int v67 = v101 - v87;
              if (v97 < (v63 + 1) << v95) {
                unsigned int v67 = v19;
              }
              if (v65 < a8) {
                int v66 = v67;
              }
              int v116 = v66;
              if (v65 >= a8) {
                unsigned int v68 = 0;
              }
              else {
                unsigned int v68 = v87;
              }
              unsigned int v112 = v68;
              uint64_t v110 = (v68 + ((v63 - v99) << v95) - v87) * v18;
              int v108 = v55 + v63 * v91;
              do
              {
                unsigned int v69 = ((_DWORD)v55 + v64) << v53;
                unsigned int v70 = ((_DWORD)v55 + v64 + 1) << v53;
                BOOL v71 = v56 >= v70;
                if (v56 >= v70) {
                  int v72 = v54;
                }
                else {
                  int v72 = v59;
                }
                int v73 = a11;
                if (v71) {
                  int v73 = result;
                }
                if (v69 >= a7) {
                  unsigned int v74 = 0;
                }
                else {
                  unsigned int v74 = v58;
                }
                if (v69 >= a7) {
                  int v75 = v72;
                }
                else {
                  int v75 = v73;
                }
                uint64_t v76 = result;
                uint64_t v77 = v53;
                uint64_t v78 = v54;
                uint64_t v79 = v55;
                sub_54524( (v108 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v104,  &a2[4 * (v74 + (v64 << v53) - v58) + v110],  v60,  v61,  v75,  v116,  a13,  v74,  v112);
                uint64_t v53 = v77;
                uint64_t v58 = v106;
                uint64_t result = v76;
                uint64_t v55 = v79;
                uint64_t v54 = v78;
                ++v64;
              }

              while (v62 != v64);
              uint64_t v18 = a13;
              unsigned int v19 = a12;
              unsigned int v52 = v93;
              unsigned int v57 = v89;
              unsigned int v80 = v103;
            }

            unsigned int v63 = v80;
          }

          while (v80 != v52);
        }
      }
    }

    else
    {
      return sub_54524(result, a2, a5, a6, a11, a12, a13, a7, a8);
    }
  }

  return result;
}

uint64_t sub_54524( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      int v24 = a5;
      int v25 = a2;
      for (uint64_t i = v22; v24; --v24)
      {
        unsigned __int16 v27 = (_BYTE *)(a1 + 4 * (i + result));
        *int v25 = *v27;
        v25[1] = v27[1];
        v25[2] = v27[2];
        v25[3] = -1;
        uint64_t i = (i - v19) & v19;
        v25 += 4;
      }

      uint64_t result = (result - v20) & v20;
      a2 += a7;
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_54674( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_55C74(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_54690( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[8 * v33 + 8 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_55B04(v37, &v34[(v41 + (v27 << v21)) * a13], v101, v99, v114, v42, a13, v33, v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = &v15[(v68 + ((v63 - v102) << v98) - v88) * a13];
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_55B04( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[8 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_55B04(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_54C6C( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[16 * v33 + 16 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_55994(v37, &v34[(v41 + (v27 << v21)) * a13], v101, v99, v114, v42, a13, v33, v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = &v15[(v68 + ((v63 - v102) << v98) - v88) * a13];
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_55994( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[16 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_55994(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_55248( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[32 * v33 + 32 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_55824(v37, &v34[(v41 + (v27 << v21)) * a13], v101, v99, v114, v42, a13, v33, v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = &v15[(v68 + ((v63 - v102) << v98) - v88) * a13];
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_55824( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[32 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_55824(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_55824( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = a1 + 32 * (v26 + result);
          unsigned int v29 = v25;
          do
          {
            *unsigned int v29 = *(_BYTE *)(v28 + v27);
            v29[1] = *(_BYTE *)(v28 + v27 + 1);
            v29[2] = *(_BYTE *)(v28 + v27 + 2);
            v29[3] = 1;
            v27 += 3LL;
            v29 += 4;
          }

          while ((_DWORD)v27 != 24);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 32;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 += a7;
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_55994( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = a1 + 16 * (v26 + result);
          unsigned int v29 = v25;
          do
          {
            *unsigned int v29 = *(_BYTE *)(v28 + v27);
            v29[1] = *(_BYTE *)(v28 + v27 + 1);
            v29[2] = *(_BYTE *)(v28 + v27 + 2);
            v29[3] = 1;
            v27 += 3LL;
            v29 += 4;
          }

          while ((_DWORD)v27 != 12);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 16;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 += a7;
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_55B04( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = (_BYTE *)(a1 + 8 * (v26 + result));
          char v28 = 1;
          unsigned int v29 = v25;
          do
          {
            char v30 = v28;
            *unsigned int v29 = *v27;
            v29[1] = v27[1];
            char v31 = v27[2];
            v27 += 3;
            v29[2] = v31;
            v29[3] = 1;
            v29 += 4;
            char v28 = 0;
          }

          while ((v30 & 1) != 0);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 8;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 += a7;
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_55C74( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    uint64_t v18 = a13;
    unsigned int v19 = a12;
    if (a14)
    {
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v119);
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v118, &v117);
        unsigned int v92 = v120;
        if (v120)
        {
          int v20 = 0;
          unsigned __int16 v94 = 0;
          char v21 = v117;
          char v90 = v118;
          unsigned int v86 = a7 >> v118;
          unsigned int v109 = a8 >> v117;
          unsigned int v22 = v121;
          unsigned int v84 = a11 + a7;
          int v82 = ((1 << v118) - 1) & a7;
          int v83 = ((1 << v118) - 1) & (a11 + a7);
          int v81 = (1 << v118) - v82;
          unsigned int v107 = a12 + a8;
          int v105 = ((1 << v117) - 1) & (a12 + a8);
          int v102 = ((1 << v117) - 1) & a8;
          int v100 = (1 << v117) - v102;
          int v88 = 1 << v118;
          if (1 << v118 >= a5) {
            int v23 = a5;
          }
          else {
            int v23 = 1 << v118;
          }
          int v24 = 1 << v117;
          if (1 << v117 >= a6) {
            int v25 = a6;
          }
          else {
            int v25 = 1 << v117;
          }
          unsigned int v96 = v25;
          unsigned int v98 = v23;
          do
          {
            if (v22)
            {
              int v26 = 0;
              unsigned __int16 v27 = 0;
              unsigned int v28 = (v20 + v86) << v90;
              unsigned int v29 = a11;
              if (v84 >= (v20 + v86 + 1) << v90) {
                unsigned int v29 = v81;
              }
              int v30 = v88;
              if (v84 < (v20 + v86 + 1) << v90) {
                int v30 = v83;
              }
              int v31 = v20 << v90;
              if (v28 >= a7) {
                unsigned int v29 = v30;
              }
              int v111 = v29;
              if (v28 >= a7) {
                unsigned int v32 = 0;
              }
              else {
                unsigned int v32 = v82;
              }
              unsigned int v33 = &a2[4 * v32 + 4 * v31];
              do
              {
                LOWORD(v34) = v94;
                HIWORD(v34) = v27;
                uint64_t result = sub_34358(v119, v34);
                int v35 = *(_DWORD *)(v17 + 4LL * result);
                if (v35 < 0)
                {
                  uint64_t v36 = v17 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                  unsigned int v37 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v37) {
                    v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v38 = a12;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    unsigned int v38 = v100;
                  }
                  int v39 = v105;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    int v39 = v24;
                  }
                  unsigned int v40 = v102;
                  if ((v26 + v109) << v21 < a8)
                  {
                    int v41 = v38;
                  }

                  else
                  {
                    unsigned int v40 = 0;
                    int v41 = v39;
                  }

                  uint64_t result = sub_56244(v36, &v33[(v40 + (v26 << v21)) * a13], v98, v96, v111, v41, a13, v32, v40);
                }

                int v26 = ++v27;
              }

              while (v22 > v27);
            }

            int v20 = ++v94;
          }

          while (v92 > v94);
        }
      }

      else
      {
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v119, &v118);
        int v44 = 1 << v118;
        char v45 = *((_BYTE *)a14 + 15);
        unsigned int v46 = 1 << v45;
        if (v45) {
          BOOL v47 = v46 > a3;
        }
        else {
          BOOL v47 = 1;
        }
        BOOL v48 = v47 || v46 > a4;
        int v49 = (~(-1 << v45) + a3) & (-1 << v45);
        if (v48) {
          int v50 = a3;
        }
        else {
          int v50 = v49;
        }
        unsigned int v99 = a8 >> v118;
        unsigned int v101 = 1 << v118;
        int v51 = v44 - 1;
        unsigned int v97 = a12 + a8;
        char v95 = v118;
        unsigned int v52 = (v44 - 1 + a12 + a8) >> v118;
        if (a8 >> v118 < v52)
        {
          uint64_t v53 = v119[0];
          uint64_t v54 = (1 << SLOBYTE(v119[0]));
          unsigned int v91 = (v50 + ~(-1 << v53)) >> v53;
          uint64_t v55 = a7 >> SLOBYTE(v119[0]);
          unsigned int v56 = a11 + a7;
          unsigned int v57 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v119[0]);
          uint64_t v58 = ((_DWORD)v54 - 1) & a7;
          int v59 = (v54 - 1) & (a11 + a7);
          uint64_t result = (v54 - v58);
          int v85 = v51 & v97;
          uint64_t v87 = v51 & a8;
          else {
            unsigned int v60 = 1 << SLOBYTE(v119[0]);
          }
          if (v101 >= a6) {
            unsigned int v61 = a6;
          }
          else {
            unsigned int v61 = 1 << v118;
          }
          int v62 = v57 - v55;
          unsigned int v63 = a8 >> v118;
          unsigned int v93 = v52;
          unsigned int v89 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v119[0]);
          uint64_t v104 = v17;
          uint64_t v106 = ((_DWORD)v54 - 1) & a7;
          do
          {
            if (v57 <= v55)
            {
              unsigned int v80 = v63 + 1;
            }

            else
            {
              int v64 = 0;
              unsigned int v65 = v63 << v95;
              unsigned int v103 = v63 + 1;
              int v66 = v101;
              if (v97 < (v63 + 1) << v95) {
                int v66 = v85;
              }
              unsigned int v67 = v101 - v87;
              if (v97 < (v63 + 1) << v95) {
                unsigned int v67 = v19;
              }
              if (v65 < a8) {
                int v66 = v67;
              }
              int v116 = v66;
              if (v65 >= a8) {
                unsigned int v68 = 0;
              }
              else {
                unsigned int v68 = v87;
              }
              unsigned int v112 = v68;
              uint64_t v110 = (v68 + ((v63 - v99) << v95) - v87) * v18;
              int v108 = v55 + v63 * v91;
              do
              {
                unsigned int v69 = ((_DWORD)v55 + v64) << v53;
                unsigned int v70 = ((_DWORD)v55 + v64 + 1) << v53;
                BOOL v71 = v56 >= v70;
                if (v56 >= v70) {
                  int v72 = v54;
                }
                else {
                  int v72 = v59;
                }
                int v73 = a11;
                if (v71) {
                  int v73 = result;
                }
                if (v69 >= a7) {
                  unsigned int v74 = 0;
                }
                else {
                  unsigned int v74 = v58;
                }
                if (v69 >= a7) {
                  int v75 = v72;
                }
                else {
                  int v75 = v73;
                }
                uint64_t v76 = result;
                uint64_t v77 = v53;
                uint64_t v78 = v54;
                uint64_t v79 = v55;
                sub_56244( (v108 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v104,  &a2[4 * (v74 + (v64 << v53) - v58) + v110],  v60,  v61,  v75,  v116,  a13,  v74,  v112);
                uint64_t v53 = v77;
                uint64_t v58 = v106;
                uint64_t result = v76;
                uint64_t v55 = v79;
                uint64_t v54 = v78;
                ++v64;
              }

              while (v62 != v64);
              uint64_t v18 = a13;
              unsigned int v19 = a12;
              unsigned int v52 = v93;
              unsigned int v57 = v89;
              unsigned int v80 = v103;
            }

            unsigned int v63 = v80;
          }

          while (v80 != v52);
        }
      }
    }

    else
    {
      return sub_56244(result, a2, a5, a6, a11, a12, a13, a7, a8);
    }
  }

  return result;
}

uint64_t sub_56244( uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      int v24 = a5;
      int v25 = a2;
      for (uint64_t i = v22; v24; --v24)
      {
        unsigned __int16 v27 = (_BYTE *)(a1 + 4 * (i + result));
        *int v25 = *v27;
        v25[1] = v27[1];
        v25[2] = v27[2];
        v25[3] = 1;
        uint64_t i = (i - v19) & v19;
        v25 += 4;
      }

      uint64_t result = (result - v20) & v20;
      a2 += a7;
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_56394( uint64_t a1, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_57994(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_563B0( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[8 * v33 + 8 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_57824( v37,  (_WORD *)((char *)v34 + (v41 + (v27 << v21)) * a13),  v101,  v99,  v114,  v42,  a13,  v33,  v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = (char *)v15 + (v68 + ((v63 - v102) << v98) - v88) * a13;
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_57824( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[16 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_57824(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_5698C( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[16 * v33 + 16 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_576B4( v37,  (_WORD *)((char *)v34 + (v41 + (v27 << v21)) * a13),  v101,  v99,  v114,  v42,  a13,  v33,  v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = (char *)v15 + (v68 + ((v63 - v102) << v98) - v88) * a13;
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_576B4( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[32 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_576B4(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_56F68( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[32 * (unint64_t)(v33 + v32)];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_57544( v37,  (_WORD *)((char *)v34 + (v41 + (v27 << v21)) * a13),  v101,  v99,  v114,  v42,  a13,  v33,  v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = (char *)v15 + (v68 + ((v63 - v102) << v98) - v88) * a13;
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_57544( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[64 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_57544(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_57544( uint64_t a1, _WORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = a1 + ((v26 + result) << 6);
          unsigned int v29 = v25;
          do
          {
            *unsigned int v29 = *(_WORD *)(v28 + v27);
            v29[1] = *(_WORD *)(v28 + v27 + 2);
            v29[2] = *(_WORD *)(v28 + v27 + 4);
            v29[3] = 15360;
            v27 += 6LL;
            v29 += 4;
          }

          while ((_DWORD)v27 != 48);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 32;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_WORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_576B4( uint64_t a1, _WORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = a1 + 32 * (v26 + result);
          unsigned int v29 = v25;
          do
          {
            *unsigned int v29 = *(_WORD *)(v28 + v27);
            v29[1] = *(_WORD *)(v28 + v27 + 2);
            v29[2] = *(_WORD *)(v28 + v27 + 4);
            v29[3] = 15360;
            v27 += 6LL;
            v29 += 4;
          }

          while ((_DWORD)v27 != 24);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 16;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_WORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_57824( uint64_t a1, _WORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = (_WORD *)(a1 + 16 * (v26 + result));
          char v28 = 1;
          unsigned int v29 = v25;
          do
          {
            char v30 = v28;
            *unsigned int v29 = *v27;
            v29[1] = v27[1];
            v29[2] = v27[2];
            v29[3] = 15360;
            v27 += 3;
            v29 += 4;
            char v28 = 0;
          }

          while ((v30 & 1) != 0);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 8;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_WORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_57994( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    uint64_t v18 = a13;
    unsigned int v19 = a12;
    if (a14)
    {
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v119);
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v118, &v117);
        unsigned int v92 = v120;
        if (v120)
        {
          int v20 = 0;
          unsigned __int16 v94 = 0;
          char v21 = v117;
          char v90 = v118;
          unsigned int v86 = a7 >> v118;
          unsigned int v109 = a8 >> v117;
          unsigned int v22 = v121;
          unsigned int v84 = a11 + a7;
          int v82 = ((1 << v118) - 1) & a7;
          int v83 = ((1 << v118) - 1) & (a11 + a7);
          int v81 = (1 << v118) - v82;
          unsigned int v107 = a12 + a8;
          int v105 = ((1 << v117) - 1) & (a12 + a8);
          int v102 = ((1 << v117) - 1) & a8;
          int v100 = (1 << v117) - v102;
          int v88 = 1 << v118;
          if (1 << v118 >= a5) {
            int v23 = a5;
          }
          else {
            int v23 = 1 << v118;
          }
          int v24 = 1 << v117;
          if (1 << v117 >= a6) {
            int v25 = a6;
          }
          else {
            int v25 = 1 << v117;
          }
          unsigned int v96 = v25;
          unsigned int v98 = v23;
          do
          {
            if (v22)
            {
              int v26 = 0;
              unsigned __int16 v27 = 0;
              unsigned int v28 = (v20 + v86) << v90;
              unsigned int v29 = a11;
              if (v84 >= (v20 + v86 + 1) << v90) {
                unsigned int v29 = v81;
              }
              int v30 = v88;
              if (v84 < (v20 + v86 + 1) << v90) {
                int v30 = v83;
              }
              int v31 = v20 << v90;
              if (v28 >= a7) {
                unsigned int v29 = v30;
              }
              int v111 = v29;
              if (v28 >= a7) {
                unsigned int v32 = 0;
              }
              else {
                unsigned int v32 = v82;
              }
              unsigned int v33 = &a2[4 * v32 + 4 * v31];
              do
              {
                LOWORD(v34) = v94;
                HIWORD(v34) = v27;
                uint64_t result = sub_34358(v119, v34);
                int v35 = *(_DWORD *)(v17 + 4LL * result);
                if (v35 < 0)
                {
                  uint64_t v36 = v17 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                  unsigned int v37 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v37) {
                    v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v38 = a12;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    unsigned int v38 = v100;
                  }
                  int v39 = v105;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    int v39 = v24;
                  }
                  unsigned int v40 = v102;
                  if ((v26 + v109) << v21 < a8)
                  {
                    int v41 = v38;
                  }

                  else
                  {
                    unsigned int v40 = 0;
                    int v41 = v39;
                  }

                  uint64_t result = sub_57F64( v36,  (_WORD *)((char *)v33 + (v40 + (v26 << v21)) * a13),  v98,  v96,  v111,  v41,  a13,  v32,  v40);
                }

                int v26 = ++v27;
              }

              while (v22 > v27);
            }

            int v20 = ++v94;
          }

          while (v92 > v94);
        }
      }

      else
      {
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v119, &v118);
        int v44 = 1 << v118;
        char v45 = *((_BYTE *)a14 + 15);
        unsigned int v46 = 1 << v45;
        if (v45) {
          BOOL v47 = v46 > a3;
        }
        else {
          BOOL v47 = 1;
        }
        BOOL v48 = v47 || v46 > a4;
        int v49 = (~(-1 << v45) + a3) & (-1 << v45);
        if (v48) {
          int v50 = a3;
        }
        else {
          int v50 = v49;
        }
        unsigned int v99 = a8 >> v118;
        unsigned int v101 = 1 << v118;
        int v51 = v44 - 1;
        unsigned int v97 = a12 + a8;
        char v95 = v118;
        unsigned int v52 = (v44 - 1 + a12 + a8) >> v118;
        if (a8 >> v118 < v52)
        {
          uint64_t v53 = v119[0];
          uint64_t v54 = (1 << SLOBYTE(v119[0]));
          unsigned int v91 = (v50 + ~(-1 << v53)) >> v53;
          uint64_t v55 = a7 >> SLOBYTE(v119[0]);
          unsigned int v56 = a11 + a7;
          unsigned int v57 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v119[0]);
          uint64_t v58 = ((_DWORD)v54 - 1) & a7;
          int v59 = (v54 - 1) & (a11 + a7);
          uint64_t result = (v54 - v58);
          int v85 = v51 & v97;
          uint64_t v87 = v51 & a8;
          else {
            unsigned int v60 = 1 << SLOBYTE(v119[0]);
          }
          if (v101 >= a6) {
            unsigned int v61 = a6;
          }
          else {
            unsigned int v61 = 1 << v118;
          }
          int v62 = v57 - v55;
          unsigned int v63 = a8 >> v118;
          unsigned int v93 = v52;
          unsigned int v89 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v119[0]);
          uint64_t v104 = v17;
          uint64_t v106 = ((_DWORD)v54 - 1) & a7;
          do
          {
            if (v57 <= v55)
            {
              unsigned int v80 = v63 + 1;
            }

            else
            {
              int v64 = 0;
              unsigned int v65 = v63 << v95;
              unsigned int v103 = v63 + 1;
              int v66 = v101;
              if (v97 < (v63 + 1) << v95) {
                int v66 = v85;
              }
              unsigned int v67 = v101 - v87;
              if (v97 < (v63 + 1) << v95) {
                unsigned int v67 = v19;
              }
              if (v65 < a8) {
                int v66 = v67;
              }
              int v116 = v66;
              if (v65 >= a8) {
                unsigned int v68 = 0;
              }
              else {
                unsigned int v68 = v87;
              }
              unsigned int v112 = v68;
              uint64_t v110 = (v68 + ((v63 - v99) << v95) - v87) * v18;
              int v108 = v55 + v63 * v91;
              do
              {
                unsigned int v69 = ((_DWORD)v55 + v64) << v53;
                unsigned int v70 = ((_DWORD)v55 + v64 + 1) << v53;
                BOOL v71 = v56 >= v70;
                if (v56 >= v70) {
                  int v72 = v54;
                }
                else {
                  int v72 = v59;
                }
                int v73 = a11;
                if (v71) {
                  int v73 = result;
                }
                if (v69 >= a7) {
                  unsigned int v74 = 0;
                }
                else {
                  unsigned int v74 = v58;
                }
                if (v69 >= a7) {
                  int v75 = v72;
                }
                else {
                  int v75 = v73;
                }
                uint64_t v76 = result;
                uint64_t v77 = v53;
                uint64_t v78 = v54;
                uint64_t v79 = v55;
                sub_57F64( (v108 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v104,  (_WORD *)((char *)&a2[4 * (v74 + (v64 << v53) - v58)] + v110),  v60,  v61,  v75,  v116,  a13,  v74,  v112);
                uint64_t v53 = v77;
                uint64_t v58 = v106;
                uint64_t result = v76;
                uint64_t v55 = v79;
                uint64_t v54 = v78;
                ++v64;
              }

              while (v62 != v64);
              uint64_t v18 = a13;
              unsigned int v19 = a12;
              unsigned int v52 = v93;
              unsigned int v57 = v89;
              unsigned int v80 = v103;
            }

            unsigned int v63 = v80;
          }

          while (v80 != v52);
        }
      }
    }

    else
    {
      return sub_57F64(result, a2, a5, a6, a11, a12, a13, a7, a8);
    }
  }

  return result;
}

uint64_t sub_57F64( uint64_t a1, _WORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      int v24 = a5;
      int v25 = a2;
      for (uint64_t i = v22; v24; --v24)
      {
        unsigned __int16 v27 = (_WORD *)(a1 + 8 * (i + result));
        *int v25 = *v27;
        v25[1] = v27[1];
        v25[2] = v27[2];
        v25[3] = 15360;
        uint64_t i = (i - v19) & v19;
        v25 += 4;
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_WORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_580B4( uint64_t a1, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_596B4(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_580D0( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[8 * v33 + 8 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_59544( v37,  (_WORD *)((char *)v34 + (v41 + (v27 << v21)) * a13),  v101,  v99,  v114,  v42,  a13,  v33,  v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = (char *)v15 + (v68 + ((v63 - v102) << v98) - v88) * a13;
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_59544( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[16 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_59544(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_586AC( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[16 * v33 + 16 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_593D4( v37,  (_WORD *)((char *)v34 + (v41 + (v27 << v21)) * a13),  v101,  v99,  v114,  v42,  a13,  v33,  v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = (char *)v15 + (v68 + ((v63 - v102) << v98) - v88) * a13;
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_593D4( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[32 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_593D4(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_58C88( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[32 * (unint64_t)(v33 + v32)];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_59264( v37,  (_WORD *)((char *)v34 + (v41 + (v27 << v21)) * a13),  v101,  v99,  v114,  v42,  a13,  v33,  v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = (char *)v15 + (v68 + ((v63 - v102) << v98) - v88) * a13;
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_59264( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[64 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_59264(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_59264( uint64_t a1, _WORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = a1 + ((v26 + result) << 6);
          unsigned int v29 = v25;
          do
          {
            *unsigned int v29 = *(_WORD *)(v28 + v27);
            v29[1] = *(_WORD *)(v28 + v27 + 2);
            v29[2] = *(_WORD *)(v28 + v27 + 4);
            v29[3] = 1;
            v27 += 6LL;
            v29 += 4;
          }

          while ((_DWORD)v27 != 48);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 32;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_WORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_593D4( uint64_t a1, _WORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = a1 + 32 * (v26 + result);
          unsigned int v29 = v25;
          do
          {
            *unsigned int v29 = *(_WORD *)(v28 + v27);
            v29[1] = *(_WORD *)(v28 + v27 + 2);
            v29[2] = *(_WORD *)(v28 + v27 + 4);
            v29[3] = 1;
            v27 += 6LL;
            v29 += 4;
          }

          while ((_DWORD)v27 != 24);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 16;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_WORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_59544( uint64_t a1, _WORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = (_WORD *)(a1 + 16 * (v26 + result));
          char v28 = 1;
          unsigned int v29 = v25;
          do
          {
            char v30 = v28;
            *unsigned int v29 = *v27;
            v29[1] = v27[1];
            v29[2] = v27[2];
            v29[3] = 1;
            v27 += 3;
            v29 += 4;
            char v28 = 0;
          }

          while ((v30 & 1) != 0);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 8;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_WORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_596B4( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    uint64_t v18 = a13;
    unsigned int v19 = a12;
    if (a14)
    {
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v119);
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v118, &v117);
        unsigned int v92 = v120;
        if (v120)
        {
          int v20 = 0;
          unsigned __int16 v94 = 0;
          char v21 = v117;
          char v90 = v118;
          unsigned int v86 = a7 >> v118;
          unsigned int v109 = a8 >> v117;
          unsigned int v22 = v121;
          unsigned int v84 = a11 + a7;
          int v82 = ((1 << v118) - 1) & a7;
          int v83 = ((1 << v118) - 1) & (a11 + a7);
          int v81 = (1 << v118) - v82;
          unsigned int v107 = a12 + a8;
          int v105 = ((1 << v117) - 1) & (a12 + a8);
          int v102 = ((1 << v117) - 1) & a8;
          int v100 = (1 << v117) - v102;
          int v88 = 1 << v118;
          if (1 << v118 >= a5) {
            int v23 = a5;
          }
          else {
            int v23 = 1 << v118;
          }
          int v24 = 1 << v117;
          if (1 << v117 >= a6) {
            int v25 = a6;
          }
          else {
            int v25 = 1 << v117;
          }
          unsigned int v96 = v25;
          unsigned int v98 = v23;
          do
          {
            if (v22)
            {
              int v26 = 0;
              unsigned __int16 v27 = 0;
              unsigned int v28 = (v20 + v86) << v90;
              unsigned int v29 = a11;
              if (v84 >= (v20 + v86 + 1) << v90) {
                unsigned int v29 = v81;
              }
              int v30 = v88;
              if (v84 < (v20 + v86 + 1) << v90) {
                int v30 = v83;
              }
              int v31 = v20 << v90;
              if (v28 >= a7) {
                unsigned int v29 = v30;
              }
              int v111 = v29;
              if (v28 >= a7) {
                unsigned int v32 = 0;
              }
              else {
                unsigned int v32 = v82;
              }
              unsigned int v33 = &a2[4 * v32 + 4 * v31];
              do
              {
                LOWORD(v34) = v94;
                HIWORD(v34) = v27;
                uint64_t result = sub_34358(v119, v34);
                int v35 = *(_DWORD *)(v17 + 4LL * result);
                if (v35 < 0)
                {
                  uint64_t v36 = v17 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                  unsigned int v37 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v37) {
                    v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v38 = a12;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    unsigned int v38 = v100;
                  }
                  int v39 = v105;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    int v39 = v24;
                  }
                  unsigned int v40 = v102;
                  if ((v26 + v109) << v21 < a8)
                  {
                    int v41 = v38;
                  }

                  else
                  {
                    unsigned int v40 = 0;
                    int v41 = v39;
                  }

                  uint64_t result = sub_59C84( v36,  (_WORD *)((char *)v33 + (v40 + (v26 << v21)) * a13),  v98,  v96,  v111,  v41,  a13,  v32,  v40);
                }

                int v26 = ++v27;
              }

              while (v22 > v27);
            }

            int v20 = ++v94;
          }

          while (v92 > v94);
        }
      }

      else
      {
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v119, &v118);
        int v44 = 1 << v118;
        char v45 = *((_BYTE *)a14 + 15);
        unsigned int v46 = 1 << v45;
        if (v45) {
          BOOL v47 = v46 > a3;
        }
        else {
          BOOL v47 = 1;
        }
        BOOL v48 = v47 || v46 > a4;
        int v49 = (~(-1 << v45) + a3) & (-1 << v45);
        if (v48) {
          int v50 = a3;
        }
        else {
          int v50 = v49;
        }
        unsigned int v99 = a8 >> v118;
        unsigned int v101 = 1 << v118;
        int v51 = v44 - 1;
        unsigned int v97 = a12 + a8;
        char v95 = v118;
        unsigned int v52 = (v44 - 1 + a12 + a8) >> v118;
        if (a8 >> v118 < v52)
        {
          uint64_t v53 = v119[0];
          uint64_t v54 = (1 << SLOBYTE(v119[0]));
          unsigned int v91 = (v50 + ~(-1 << v53)) >> v53;
          uint64_t v55 = a7 >> SLOBYTE(v119[0]);
          unsigned int v56 = a11 + a7;
          unsigned int v57 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v119[0]);
          uint64_t v58 = ((_DWORD)v54 - 1) & a7;
          int v59 = (v54 - 1) & (a11 + a7);
          uint64_t result = (v54 - v58);
          int v85 = v51 & v97;
          uint64_t v87 = v51 & a8;
          else {
            unsigned int v60 = 1 << SLOBYTE(v119[0]);
          }
          if (v101 >= a6) {
            unsigned int v61 = a6;
          }
          else {
            unsigned int v61 = 1 << v118;
          }
          int v62 = v57 - v55;
          unsigned int v63 = a8 >> v118;
          unsigned int v93 = v52;
          unsigned int v89 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v119[0]);
          uint64_t v104 = v17;
          uint64_t v106 = ((_DWORD)v54 - 1) & a7;
          do
          {
            if (v57 <= v55)
            {
              unsigned int v80 = v63 + 1;
            }

            else
            {
              int v64 = 0;
              unsigned int v65 = v63 << v95;
              unsigned int v103 = v63 + 1;
              int v66 = v101;
              if (v97 < (v63 + 1) << v95) {
                int v66 = v85;
              }
              unsigned int v67 = v101 - v87;
              if (v97 < (v63 + 1) << v95) {
                unsigned int v67 = v19;
              }
              if (v65 < a8) {
                int v66 = v67;
              }
              int v116 = v66;
              if (v65 >= a8) {
                unsigned int v68 = 0;
              }
              else {
                unsigned int v68 = v87;
              }
              unsigned int v112 = v68;
              uint64_t v110 = (v68 + ((v63 - v99) << v95) - v87) * v18;
              int v108 = v55 + v63 * v91;
              do
              {
                unsigned int v69 = ((_DWORD)v55 + v64) << v53;
                unsigned int v70 = ((_DWORD)v55 + v64 + 1) << v53;
                BOOL v71 = v56 >= v70;
                if (v56 >= v70) {
                  int v72 = v54;
                }
                else {
                  int v72 = v59;
                }
                int v73 = a11;
                if (v71) {
                  int v73 = result;
                }
                if (v69 >= a7) {
                  unsigned int v74 = 0;
                }
                else {
                  unsigned int v74 = v58;
                }
                if (v69 >= a7) {
                  int v75 = v72;
                }
                else {
                  int v75 = v73;
                }
                uint64_t v76 = result;
                uint64_t v77 = v53;
                uint64_t v78 = v54;
                uint64_t v79 = v55;
                sub_59C84( (v108 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v104,  (_WORD *)((char *)&a2[4 * (v74 + (v64 << v53) - v58)] + v110),  v60,  v61,  v75,  v116,  a13,  v74,  v112);
                uint64_t v53 = v77;
                uint64_t v58 = v106;
                uint64_t result = v76;
                uint64_t v55 = v79;
                uint64_t v54 = v78;
                ++v64;
              }

              while (v62 != v64);
              uint64_t v18 = a13;
              unsigned int v19 = a12;
              unsigned int v52 = v93;
              unsigned int v57 = v89;
              unsigned int v80 = v103;
            }

            unsigned int v63 = v80;
          }

          while (v80 != v52);
        }
      }
    }

    else
    {
      return sub_59C84(result, a2, a5, a6, a11, a12, a13, a7, a8);
    }
  }

  return result;
}

uint64_t sub_59C84( uint64_t a1, _WORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      int v24 = a5;
      int v25 = a2;
      for (uint64_t i = v22; v24; --v24)
      {
        unsigned __int16 v27 = (_WORD *)(a1 + 8 * (i + result));
        *int v25 = *v27;
        v25[1] = v27[1];
        v25[2] = v27[2];
        v25[3] = 1;
        uint64_t i = (i - v19) & v19;
        v25 += 4;
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_WORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_59DD4( uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_5B3C8(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_59DF0( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[8 * v33 + 8 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_5B25C( v37,  (_DWORD *)((char *)v34 + (v41 + (v27 << v21)) * a13),  v101,  v99,  v114,  v42,  a13,  v33,  v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = (char *)v15 + (v68 + ((v63 - v102) << v98) - v88) * a13;
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_5B25C( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[32 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_5B25C(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_5A3CC( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[16 * (unint64_t)(v33 + v32)];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_5B0F0( v37,  (_DWORD *)((char *)v34 + (v41 + (v27 << v21)) * a13),  v101,  v99,  v114,  v42,  a13,  v33,  v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = (char *)v15 + (v68 + ((v63 - v102) << v98) - v88) * a13;
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_5B0F0( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[64 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_5B0F0(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_5A9A8( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[32 * (unint64_t)(v33 + v32)];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_5AF84( v37,  (_DWORD *)((char *)v34 + (v41 + (v27 << v21)) * a13),  v101,  v99,  v114,  v42,  a13,  v33,  v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = (char *)v15 + (v68 + ((v63 - v102) << v98) - v88) * a13;
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_5AF84( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[128 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_5AF84(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_5AF84( uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = a1 + ((v26 + result) << 7);
          unsigned int v29 = v25;
          do
          {
            *unsigned int v29 = *(_DWORD *)(v28 + v27);
            v29[1] = *(_DWORD *)(v28 + v27 + 4);
            v29[2] = *(_DWORD *)(v28 + v27 + 8);
            v29[3] = 1065353216;
            v27 += 12LL;
            v29 += 4;
          }

          while ((_DWORD)v27 != 96);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 32;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_DWORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_5B0F0( uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = a1 + ((v26 + result) << 6);
          unsigned int v29 = v25;
          do
          {
            *unsigned int v29 = *(_DWORD *)(v28 + v27);
            v29[1] = *(_DWORD *)(v28 + v27 + 4);
            v29[2] = *(_DWORD *)(v28 + v27 + 8);
            v29[3] = 1065353216;
            v27 += 12LL;
            v29 += 4;
          }

          while ((_DWORD)v27 != 48);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 16;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_DWORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_5B25C( uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = (_DWORD *)(a1 + 32 * (v26 + result));
          char v28 = 1;
          unsigned int v29 = v25;
          do
          {
            char v30 = v28;
            *unsigned int v29 = *v27;
            v29[1] = v27[1];
            v29[2] = v27[2];
            v29[3] = 1065353216;
            v27 += 3;
            v29 += 4;
            char v28 = 0;
          }

          while ((v30 & 1) != 0);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 8;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_DWORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_5B3C8( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    uint64_t v18 = a13;
    unsigned int v19 = a12;
    if (a14)
    {
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v119);
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v118, &v117);
        unsigned int v92 = v120;
        if (v120)
        {
          int v20 = 0;
          unsigned __int16 v94 = 0;
          char v21 = v117;
          char v90 = v118;
          unsigned int v86 = a7 >> v118;
          unsigned int v109 = a8 >> v117;
          unsigned int v22 = v121;
          unsigned int v84 = a11 + a7;
          int v82 = ((1 << v118) - 1) & a7;
          int v83 = ((1 << v118) - 1) & (a11 + a7);
          int v81 = (1 << v118) - v82;
          unsigned int v107 = a12 + a8;
          int v105 = ((1 << v117) - 1) & (a12 + a8);
          int v102 = ((1 << v117) - 1) & a8;
          int v100 = (1 << v117) - v102;
          int v88 = 1 << v118;
          if (1 << v118 >= a5) {
            int v23 = a5;
          }
          else {
            int v23 = 1 << v118;
          }
          int v24 = 1 << v117;
          if (1 << v117 >= a6) {
            int v25 = a6;
          }
          else {
            int v25 = 1 << v117;
          }
          unsigned int v96 = v25;
          unsigned int v98 = v23;
          do
          {
            if (v22)
            {
              int v26 = 0;
              unsigned __int16 v27 = 0;
              unsigned int v28 = (v20 + v86) << v90;
              unsigned int v29 = a11;
              if (v84 >= (v20 + v86 + 1) << v90) {
                unsigned int v29 = v81;
              }
              int v30 = v88;
              if (v84 < (v20 + v86 + 1) << v90) {
                int v30 = v83;
              }
              int v31 = v20 << v90;
              if (v28 >= a7) {
                unsigned int v29 = v30;
              }
              int v111 = v29;
              if (v28 >= a7) {
                unsigned int v32 = 0;
              }
              else {
                unsigned int v32 = v82;
              }
              unsigned int v33 = &a2[4 * v32 + 4 * v31];
              do
              {
                LOWORD(v34) = v94;
                HIWORD(v34) = v27;
                uint64_t result = sub_34358(v119, v34);
                int v35 = *(_DWORD *)(v17 + 4LL * result);
                if (v35 < 0)
                {
                  uint64_t v36 = v17 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                  unsigned int v37 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v37) {
                    v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v38 = a12;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    unsigned int v38 = v100;
                  }
                  int v39 = v105;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    int v39 = v24;
                  }
                  unsigned int v40 = v102;
                  if ((v26 + v109) << v21 < a8)
                  {
                    int v41 = v38;
                  }

                  else
                  {
                    unsigned int v40 = 0;
                    int v41 = v39;
                  }

                  uint64_t result = sub_5B998( v36,  (_DWORD *)((char *)v33 + (v40 + (v26 << v21)) * a13),  v98,  v96,  v111,  v41,  a13,  v32,  v40);
                }

                int v26 = ++v27;
              }

              while (v22 > v27);
            }

            int v20 = ++v94;
          }

          while (v92 > v94);
        }
      }

      else
      {
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v119, &v118);
        int v44 = 1 << v118;
        char v45 = *((_BYTE *)a14 + 15);
        unsigned int v46 = 1 << v45;
        if (v45) {
          BOOL v47 = v46 > a3;
        }
        else {
          BOOL v47 = 1;
        }
        BOOL v48 = v47 || v46 > a4;
        int v49 = (~(-1 << v45) + a3) & (-1 << v45);
        if (v48) {
          int v50 = a3;
        }
        else {
          int v50 = v49;
        }
        unsigned int v99 = a8 >> v118;
        unsigned int v101 = 1 << v118;
        int v51 = v44 - 1;
        unsigned int v97 = a12 + a8;
        char v95 = v118;
        unsigned int v52 = (v44 - 1 + a12 + a8) >> v118;
        if (a8 >> v118 < v52)
        {
          uint64_t v53 = v119[0];
          uint64_t v54 = (1 << SLOBYTE(v119[0]));
          unsigned int v91 = (v50 + ~(-1 << v53)) >> v53;
          uint64_t v55 = a7 >> SLOBYTE(v119[0]);
          unsigned int v56 = a11 + a7;
          unsigned int v57 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v119[0]);
          uint64_t v58 = ((_DWORD)v54 - 1) & a7;
          int v59 = (v54 - 1) & (a11 + a7);
          uint64_t result = (v54 - v58);
          int v85 = v51 & v97;
          uint64_t v87 = v51 & a8;
          else {
            unsigned int v60 = 1 << SLOBYTE(v119[0]);
          }
          if (v101 >= a6) {
            unsigned int v61 = a6;
          }
          else {
            unsigned int v61 = 1 << v118;
          }
          int v62 = v57 - v55;
          unsigned int v63 = a8 >> v118;
          unsigned int v93 = v52;
          unsigned int v89 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v119[0]);
          uint64_t v104 = v17;
          uint64_t v106 = ((_DWORD)v54 - 1) & a7;
          do
          {
            if (v57 <= v55)
            {
              unsigned int v80 = v63 + 1;
            }

            else
            {
              int v64 = 0;
              unsigned int v65 = v63 << v95;
              unsigned int v103 = v63 + 1;
              int v66 = v101;
              if (v97 < (v63 + 1) << v95) {
                int v66 = v85;
              }
              unsigned int v67 = v101 - v87;
              if (v97 < (v63 + 1) << v95) {
                unsigned int v67 = v19;
              }
              if (v65 < a8) {
                int v66 = v67;
              }
              int v116 = v66;
              if (v65 >= a8) {
                unsigned int v68 = 0;
              }
              else {
                unsigned int v68 = v87;
              }
              unsigned int v112 = v68;
              uint64_t v110 = (v68 + ((v63 - v99) << v95) - v87) * v18;
              int v108 = v55 + v63 * v91;
              do
              {
                unsigned int v69 = ((_DWORD)v55 + v64) << v53;
                unsigned int v70 = ((_DWORD)v55 + v64 + 1) << v53;
                BOOL v71 = v56 >= v70;
                if (v56 >= v70) {
                  int v72 = v54;
                }
                else {
                  int v72 = v59;
                }
                int v73 = a11;
                if (v71) {
                  int v73 = result;
                }
                if (v69 >= a7) {
                  unsigned int v74 = 0;
                }
                else {
                  unsigned int v74 = v58;
                }
                if (v69 >= a7) {
                  int v75 = v72;
                }
                else {
                  int v75 = v73;
                }
                uint64_t v76 = result;
                uint64_t v77 = v53;
                uint64_t v78 = v54;
                uint64_t v79 = v55;
                sub_5B998( (v108 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v104,  (_DWORD *)((char *)&a2[4 * (v74 + (v64 << v53) - v58)] + v110),  v60,  v61,  v75,  v116,  a13,  v74,  v112);
                uint64_t v53 = v77;
                uint64_t v58 = v106;
                uint64_t result = v76;
                uint64_t v55 = v79;
                uint64_t v54 = v78;
                ++v64;
              }

              while (v62 != v64);
              uint64_t v18 = a13;
              unsigned int v19 = a12;
              unsigned int v52 = v93;
              unsigned int v57 = v89;
              unsigned int v80 = v103;
            }

            unsigned int v63 = v80;
          }

          while (v80 != v52);
        }
      }
    }

    else
    {
      return sub_5B998(result, a2, a5, a6, a11, a12, a13, a7, a8);
    }
  }

  return result;
}

uint64_t sub_5B998( uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      int v24 = a5;
      int v25 = a2;
      for (uint64_t i = v22; v24; --v24)
      {
        unsigned __int16 v27 = (_DWORD *)(a1 + 16 * (i + result));
        *int v25 = *v27;
        v25[1] = v27[1];
        v25[2] = v27[2];
        v25[3] = 1065353216;
        uint64_t i = (i - v19) & v19;
        v25 += 4;
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_DWORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_5BAE4( uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  return sub_5D0D8(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a13, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_5BB00( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[8 * v33 + 8 * v32];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_5CF6C( v37,  (_DWORD *)((char *)v34 + (v41 + (v27 << v21)) * a13),  v101,  v99,  v114,  v42,  a13,  v33,  v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = (char *)v15 + (v68 + ((v63 - v102) << v98) - v88) * a13;
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_5CF6C( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[32 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_5CF6C(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_5C0DC( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[16 * (unint64_t)(v33 + v32)];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_5CE00( v37,  (_DWORD *)((char *)v34 + (v41 + (v27 << v21)) * a13),  v101,  v99,  v114,  v42,  a13,  v33,  v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = (char *)v15 + (v68 + ((v63 - v102) << v98) - v88) * a13;
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_5CE00( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[64 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_5CE00(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_5C6B8( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    unsigned int v15 = a2;
    if (a2)
    {
      uint64_t v18 = result;
      unsigned int v19 = a12;
      if (a14)
      {
        if (*((_BYTE *)a14 + 20))
        {
          sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v121);
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v120, &v119);
          unsigned int v95 = v122;
          if (v122)
          {
            int v20 = 0;
            unsigned __int16 v97 = 0;
            char v21 = v119;
            char v91 = v120;
            unsigned int v87 = a7 >> v120;
            unsigned int v112 = a8 >> v119;
            unsigned int v22 = a6;
            unsigned int v23 = v123;
            unsigned int v85 = a11 + a7;
            int v82 = ((1 << v120) - 1) & a7;
            int v83 = ((1 << v120) - 1) & (a11 + a7);
            int v81 = (1 << v120) - v82;
            unsigned int v110 = a12 + a8;
            int v108 = ((1 << v119) - 1) & (a12 + a8);
            int v105 = ((1 << v119) - 1) & a8;
            int v103 = (1 << v119) - v105;
            int v89 = 1 << v120;
            if (1 << v120 >= a5) {
              int v24 = a5;
            }
            else {
              int v24 = 1 << v120;
            }
            int v25 = 1 << v119;
            if (1 << v119 >= v22) {
              int v26 = v22;
            }
            else {
              int v26 = 1 << v119;
            }
            unsigned int v99 = v26;
            unsigned int v101 = v24;
            do
            {
              if (v23)
              {
                int v27 = 0;
                unsigned __int16 v28 = 0;
                unsigned int v29 = (v20 + v87) << v91;
                unsigned int v30 = a11;
                if (v85 >= (v20 + v87 + 1) << v91) {
                  unsigned int v30 = v81;
                }
                int v31 = v89;
                if (v85 < (v20 + v87 + 1) << v91) {
                  int v31 = v83;
                }
                int v32 = v20 << v91;
                if (v29 >= a7) {
                  unsigned int v30 = v31;
                }
                int v114 = v30;
                if (v29 >= a7) {
                  unsigned int v33 = 0;
                }
                else {
                  unsigned int v33 = v82;
                }
                float v34 = &a2[32 * (unint64_t)(v33 + v32)];
                do
                {
                  LOWORD(v35) = v97;
                  HIWORD(v35) = v28;
                  uint64_t result = sub_34358(v121, v35);
                  int v36 = *(_DWORD *)(v18 + 4LL * result);
                  if (v36 < 0)
                  {
                    uint64_t v37 = v18 - *(void *)(a15 + 24) + ((unint64_t)(v36 & 0x3FFFFFF) << 14);
                    unsigned int v38 = *(_DWORD *)(a15 + 8);
                    if (*(_DWORD *)a15 > v38) {
                      v37 += sub_343C0( *(_DWORD *)a15,  v38,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                    }
                    unsigned int v39 = a12;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      unsigned int v39 = v103;
                    }
                    int v40 = v108;
                    if (v110 >= (v27 + v112 + 1) << v21) {
                      int v40 = v25;
                    }
                    unsigned int v41 = v105;
                    if ((v27 + v112) << v21 < a8)
                    {
                      int v42 = v39;
                    }

                    else
                    {
                      unsigned int v41 = 0;
                      int v42 = v40;
                    }

                    uint64_t result = sub_5CC94( v37,  (_DWORD *)((char *)v34 + (v41 + (v27 << v21)) * a13),  v101,  v99,  v114,  v42,  a13,  v33,  v41);
                  }

                  int v27 = ++v28;
                }

                while (v23 > v28);
              }

              int v20 = ++v97;
            }

            while (v95 > v97);
          }
        }

        else
        {
          uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v121, &v120);
          unsigned int v45 = 1 << v120;
          char v46 = *((_BYTE *)a14 + 15);
          unsigned int v47 = 1 << v46;
          if (v46) {
            BOOL v48 = v47 > a3;
          }
          else {
            BOOL v48 = 1;
          }
          BOOL v49 = v48 || v47 > a4;
          int v50 = (~(-1 << v46) + a3) & (-1 << v46);
          if (v49) {
            int v51 = a3;
          }
          else {
            int v51 = v50;
          }
          unsigned int v102 = a8 >> v120;
          int v104 = 1 << v120;
          unsigned int v52 = v45 - 1;
          unsigned int v100 = a12 + a8;
          char v98 = v120;
          unsigned int v53 = (v45 - 1 + a12 + a8) >> v120;
          if (a8 >> v120 < v53)
          {
            char v54 = v121[0];
            int v55 = 1 << SLOBYTE(v121[0]);
            unsigned int v92 = (v51 + ~(-1 << v54)) >> v54;
            uint64_t v56 = a7 >> SLOBYTE(v121[0]);
            unsigned int v57 = a11 + a7;
            unsigned int v58 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v59 = ((1 << SLOBYTE(v121[0])) - 1) & a7;
            uint64_t result = ((1 << SLOBYTE(v121[0])) - 1) & (a11 + a7);
            uint64_t v60 = ((1 << SLOBYTE(v121[0])) - v59);
            int v86 = v52 & v100;
            uint64_t v88 = v52 & a8;
            unsigned int v84 = v45 - v88;
            if (1 << SLOBYTE(v121[0]) >= a5) {
              unsigned int v61 = a5;
            }
            else {
              unsigned int v61 = 1 << SLOBYTE(v121[0]);
            }
            if (v45 >= a6) {
              unsigned int v62 = a6;
            }
            else {
              unsigned int v62 = 1 << v120;
            }
            unsigned int v63 = a8 >> v120;
            unsigned __int16 v94 = v15;
            int v109 = v58 - v56;
            unsigned int v96 = (v45 - 1 + a12 + a8) >> v120;
            unsigned int v90 = ((1 << SLOBYTE(v121[0])) - 1 + a11 + a7) >> SLOBYTE(v121[0]);
            uint64_t v107 = v18;
            do
            {
              if (v58 <= v56)
              {
                unsigned int v80 = v63 + 1;
              }

              else
              {
                int v64 = 0;
                unsigned int v65 = v63 << v98;
                unsigned int v106 = v63 + 1;
                int v66 = v104;
                if (v100 < (v63 + 1) << v98) {
                  int v66 = v86;
                }
                unsigned int v67 = v84;
                if (v100 < (v63 + 1) << v98) {
                  unsigned int v67 = v19;
                }
                if (v65 < a8) {
                  int v66 = v67;
                }
                int v118 = v66;
                if (v65 >= a8) {
                  unsigned int v68 = 0;
                }
                else {
                  unsigned int v68 = v88;
                }
                unsigned int v115 = v68;
                int v113 = (char *)v15 + (v68 + ((v63 - v102) << v98) - v88) * a13;
                int v111 = v56 + v63 * v92;
                do
                {
                  unsigned int v69 = ((_DWORD)v56 + v64) << v54;
                  unsigned int v70 = ((_DWORD)v56 + v64 + 1) << v54;
                  BOOL v71 = v57 >= v70;
                  if (v57 >= v70) {
                    int v72 = v55;
                  }
                  else {
                    int v72 = result;
                  }
                  unsigned int v73 = a11;
                  if (v71) {
                    unsigned int v73 = v60;
                  }
                  if (v69 >= a7) {
                    unsigned int v74 = 0;
                  }
                  else {
                    unsigned int v74 = v59;
                  }
                  if (v69 >= a7) {
                    int v75 = v72;
                  }
                  else {
                    int v75 = v73;
                  }
                  uint64_t v76 = v60;
                  uint64_t v77 = result;
                  uint64_t v78 = v59;
                  uint64_t v79 = v56;
                  sub_5CC94( (v111 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v107,  &v113[128 * (v74 + (v64 << v54) - v59)],  v61,  v62,  v75,  v118,  a13,  v74,  v115);
                  uint64_t v59 = v78;
                  uint64_t v60 = v76;
                  uint64_t result = v77;
                  uint64_t v56 = v79;
                  ++v64;
                }

                while (v109 != v64);
                unsigned int v15 = v94;
                unsigned int v19 = a12;
                unsigned int v53 = v96;
                unsigned int v58 = v90;
                unsigned int v80 = v106;
              }

              unsigned int v63 = v80;
            }

            while (v80 != v53);
          }
        }
      }

      else
      {
        return sub_5CC94(result, a2, a5, a6, a11, a12, a13, a7, a8);
      }
    }
  }

  return result;
}

uint64_t sub_5CC94( uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = a1 + ((v26 + result) << 7);
          unsigned int v29 = v25;
          do
          {
            *unsigned int v29 = *(_DWORD *)(v28 + v27);
            v29[1] = *(_DWORD *)(v28 + v27 + 4);
            v29[2] = *(_DWORD *)(v28 + v27 + 8);
            v29[3] = 1;
            v27 += 12LL;
            v29 += 4;
          }

          while ((_DWORD)v27 != 96);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 32;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_DWORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_5CE00( uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = a1 + ((v26 + result) << 6);
          unsigned int v29 = v25;
          do
          {
            *unsigned int v29 = *(_DWORD *)(v28 + v27);
            v29[1] = *(_DWORD *)(v28 + v27 + 4);
            v29[2] = *(_DWORD *)(v28 + v27 + 8);
            v29[3] = 1;
            v27 += 12LL;
            v29 += 4;
          }

          while ((_DWORD)v27 != 48);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 16;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_DWORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_5CF6C( uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      if (a5)
      {
        int v24 = 0;
        int v25 = a2;
        uint64_t v26 = v22;
        do
        {
          uint64_t v27 = (_DWORD *)(a1 + 32 * (v26 + result));
          char v28 = 1;
          unsigned int v29 = v25;
          do
          {
            char v30 = v28;
            *unsigned int v29 = *v27;
            v29[1] = v27[1];
            v29[2] = v27[2];
            v29[3] = 1;
            v27 += 3;
            v29 += 4;
            char v28 = 0;
          }

          while ((v30 & 1) != 0);
          uint64_t v26 = (v26 - v19) & v19;
          v25 += 8;
          ++v24;
        }

        while (v24 != a5);
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_DWORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_5D0D8( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, unsigned int a11, unsigned int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result && a2)
  {
    uint64_t v17 = result;
    uint64_t v18 = a13;
    unsigned int v19 = a12;
    if (a14)
    {
      if (*((_BYTE *)a14 + 20))
      {
        sub_33EA8( a14[3],  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 8),  *(_DWORD *)(a15 + 8),  a9,  a10,  *(_DWORD *)(a15 + 12),  *(_DWORD *)(a15 + 4),  *(_DWORD *)a15,  *((unsigned __int8 *)a14 + 16) - 1 < 2,  a7,  a8,  a11,  a12,  (uint64_t)v119);
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)&v118, &v117);
        unsigned int v92 = v120;
        if (v120)
        {
          int v20 = 0;
          unsigned __int16 v94 = 0;
          char v21 = v117;
          char v90 = v118;
          unsigned int v86 = a7 >> v118;
          unsigned int v109 = a8 >> v117;
          unsigned int v22 = v121;
          unsigned int v84 = a11 + a7;
          int v82 = ((1 << v118) - 1) & a7;
          int v83 = ((1 << v118) - 1) & (a11 + a7);
          int v81 = (1 << v118) - v82;
          unsigned int v107 = a12 + a8;
          int v105 = ((1 << v117) - 1) & (a12 + a8);
          int v102 = ((1 << v117) - 1) & a8;
          int v100 = (1 << v117) - v102;
          int v88 = 1 << v118;
          if (1 << v118 >= a5) {
            int v23 = a5;
          }
          else {
            int v23 = 1 << v118;
          }
          int v24 = 1 << v117;
          if (1 << v117 >= a6) {
            int v25 = a6;
          }
          else {
            int v25 = 1 << v117;
          }
          unsigned int v96 = v25;
          unsigned int v98 = v23;
          do
          {
            if (v22)
            {
              int v26 = 0;
              unsigned __int16 v27 = 0;
              unsigned int v28 = (v20 + v86) << v90;
              unsigned int v29 = a11;
              if (v84 >= (v20 + v86 + 1) << v90) {
                unsigned int v29 = v81;
              }
              int v30 = v88;
              if (v84 < (v20 + v86 + 1) << v90) {
                int v30 = v83;
              }
              int v31 = v20 << v90;
              if (v28 >= a7) {
                unsigned int v29 = v30;
              }
              int v111 = v29;
              if (v28 >= a7) {
                unsigned int v32 = 0;
              }
              else {
                unsigned int v32 = v82;
              }
              unsigned int v33 = &a2[4 * v32 + 4 * v31];
              do
              {
                LOWORD(v34) = v94;
                HIWORD(v34) = v27;
                uint64_t result = sub_34358(v119, v34);
                int v35 = *(_DWORD *)(v17 + 4LL * result);
                if (v35 < 0)
                {
                  uint64_t v36 = v17 - *(void *)(a15 + 24) + ((unint64_t)(v35 & 0x3FFFFFF) << 14);
                  unsigned int v37 = *(_DWORD *)(a15 + 8);
                  if (*(_DWORD *)a15 > v37) {
                    v36 += sub_343C0( *(_DWORD *)a15,  v37,  *a14,  a14[1],  *((unsigned __int8 *)a14 + 18),  *((unsigned __int8 *)a14 + 19),  *((unsigned __int8 *)a14 + 14),  *((unsigned __int8 *)a14 + 16) - 1 < 2);
                  }
                  unsigned int v38 = a12;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    unsigned int v38 = v100;
                  }
                  int v39 = v105;
                  if (v107 >= (v26 + v109 + 1) << v21) {
                    int v39 = v24;
                  }
                  unsigned int v40 = v102;
                  if ((v26 + v109) << v21 < a8)
                  {
                    int v41 = v38;
                  }

                  else
                  {
                    unsigned int v40 = 0;
                    int v41 = v39;
                  }

                  uint64_t result = sub_5D6A8( v36,  (_DWORD *)((char *)v33 + (v40 + (v26 << v21)) * a13),  v98,  v96,  v111,  v41,  a13,  v32,  v40);
                }

                int v26 = ++v27;
              }

              while (v22 > v27);
            }

            int v20 = ++v94;
          }

          while (v92 > v94);
        }
      }

      else
      {
        uint64_t result = sub_145BC(*((unsigned __int8 *)a14 + 12), *((_BYTE *)a14 + 13), a5, a6, (unsigned int *)v119, &v118);
        int v44 = 1 << v118;
        char v45 = *((_BYTE *)a14 + 15);
        unsigned int v46 = 1 << v45;
        if (v45) {
          BOOL v47 = v46 > a3;
        }
        else {
          BOOL v47 = 1;
        }
        BOOL v48 = v47 || v46 > a4;
        int v49 = (~(-1 << v45) + a3) & (-1 << v45);
        if (v48) {
          int v50 = a3;
        }
        else {
          int v50 = v49;
        }
        unsigned int v99 = a8 >> v118;
        unsigned int v101 = 1 << v118;
        int v51 = v44 - 1;
        unsigned int v97 = a12 + a8;
        char v95 = v118;
        unsigned int v52 = (v44 - 1 + a12 + a8) >> v118;
        if (a8 >> v118 < v52)
        {
          uint64_t v53 = v119[0];
          uint64_t v54 = (1 << SLOBYTE(v119[0]));
          unsigned int v91 = (v50 + ~(-1 << v53)) >> v53;
          uint64_t v55 = a7 >> SLOBYTE(v119[0]);
          unsigned int v56 = a11 + a7;
          unsigned int v57 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v119[0]);
          uint64_t v58 = ((_DWORD)v54 - 1) & a7;
          int v59 = (v54 - 1) & (a11 + a7);
          uint64_t result = (v54 - v58);
          int v85 = v51 & v97;
          uint64_t v87 = v51 & a8;
          else {
            unsigned int v60 = 1 << SLOBYTE(v119[0]);
          }
          if (v101 >= a6) {
            unsigned int v61 = a6;
          }
          else {
            unsigned int v61 = 1 << v118;
          }
          int v62 = v57 - v55;
          unsigned int v63 = a8 >> v118;
          unsigned int v93 = v52;
          unsigned int v89 = ((_DWORD)v54 - 1 + a11 + a7) >> SLOBYTE(v119[0]);
          uint64_t v104 = v17;
          uint64_t v106 = ((_DWORD)v54 - 1) & a7;
          do
          {
            if (v57 <= v55)
            {
              unsigned int v80 = v63 + 1;
            }

            else
            {
              int v64 = 0;
              unsigned int v65 = v63 << v95;
              unsigned int v103 = v63 + 1;
              int v66 = v101;
              if (v97 < (v63 + 1) << v95) {
                int v66 = v85;
              }
              unsigned int v67 = v101 - v87;
              if (v97 < (v63 + 1) << v95) {
                unsigned int v67 = v19;
              }
              if (v65 < a8) {
                int v66 = v67;
              }
              int v116 = v66;
              if (v65 >= a8) {
                unsigned int v68 = 0;
              }
              else {
                unsigned int v68 = v87;
              }
              unsigned int v112 = v68;
              uint64_t v110 = (v68 + ((v63 - v99) << v95) - v87) * v18;
              int v108 = v55 + v63 * v91;
              do
              {
                unsigned int v69 = ((_DWORD)v55 + v64) << v53;
                unsigned int v70 = ((_DWORD)v55 + v64 + 1) << v53;
                BOOL v71 = v56 >= v70;
                if (v56 >= v70) {
                  int v72 = v54;
                }
                else {
                  int v72 = v59;
                }
                int v73 = a11;
                if (v71) {
                  int v73 = result;
                }
                if (v69 >= a7) {
                  unsigned int v74 = 0;
                }
                else {
                  unsigned int v74 = v58;
                }
                if (v69 >= a7) {
                  int v75 = v72;
                }
                else {
                  int v75 = v73;
                }
                uint64_t v76 = result;
                uint64_t v77 = v53;
                uint64_t v78 = v54;
                uint64_t v79 = v55;
                sub_5D6A8( (v108 + v64) * a14[3] * *((unsigned __int8 *)a14 + 9) + v104,  (_DWORD *)((char *)&a2[4 * (v74 + (v64 << v53) - v58)] + v110),  v60,  v61,  v75,  v116,  a13,  v74,  v112);
                uint64_t v53 = v77;
                uint64_t v58 = v106;
                uint64_t result = v76;
                uint64_t v55 = v79;
                uint64_t v54 = v78;
                ++v64;
              }

              while (v62 != v64);
              uint64_t v18 = a13;
              unsigned int v19 = a12;
              unsigned int v52 = v93;
              unsigned int v57 = v89;
              unsigned int v80 = v103;
            }

            unsigned int v63 = v80;
          }

          while (v80 != v52);
        }
      }
    }

    else
    {
      return sub_5D6A8(result, a2, a5, a6, a11, a12, a13, a7, a8);
    }
  }

  return result;
}

uint64_t sub_5D6A8( uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  unsigned int v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = 32 - __clz(a3 - 1);
  if (a3 >= 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = sub_34508(~(-1 << v18), 0, v18, v16);
  uint64_t v20 = sub_34508(0, ~(-1 << v16), v18, v16);
  uint64_t result = sub_34508(a8, 0, v18, v16);
  if (a6)
  {
    uint64_t v22 = result;
    uint64_t result = sub_34508(0, a9, v18, v16);
    int v23 = 0;
    do
    {
      int v24 = a5;
      int v25 = a2;
      for (uint64_t i = v22; v24; --v24)
      {
        unsigned __int16 v27 = (_DWORD *)(a1 + 16 * (i + result));
        *int v25 = *v27;
        v25[1] = v27[1];
        v25[2] = v27[2];
        v25[3] = 1;
        uint64_t i = (i - v19) & v19;
        v25 += 4;
      }

      uint64_t result = (result - v20) & v20;
      a2 = (_DWORD *)((char *)a2 + a7);
      ++v23;
    }

    while (v23 != a6);
  }

  return result;
}

uint64_t sub_5D7F4( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 3) >> 2,  (a4 + 3) >> 2,  a5,  a6,  a7 >> 2,  a8 >> 2,  a9,  a10,  (a11 + 3) >> 2,  (a12 + 3) >> 2,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5D844( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 4) / 5u,  (a4 + 3) >> 2,  a5,  a6,  a7 / 5,  a8 >> 2,  a9,  a10,  (a11 + 4) / 5u,  (a12 + 3) >> 2,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5D8A8( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 4) / 5u,  (a4 + 4) / 5u,  a5,  a6,  a7 / 5,  a8 / 5,  a9,  a10,  (a11 + 4) / 5u,  (a12 + 4) / 5u,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5D918( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 5) / 6u,  (a4 + 4) / 5u,  a5,  a6,  a7 / 6,  a8 / 5,  a9,  a10,  (a11 + 5) / 6u,  (a12 + 4) / 5u,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5D990( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 5) / 6u,  (a4 + 5) / 6u,  a5,  a6,  a7 / 6,  a8 / 6,  a9,  a10,  (a11 + 5) / 6u,  (a12 + 5) / 6u,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5DA00( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 7) >> 3,  (a4 + 4) / 5u,  a5,  a6,  a7 >> 3,  a8 / 5,  a9,  a10,  (a11 + 7) >> 3,  (a12 + 4) / 5u,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5DA64( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 7) >> 3,  (a4 + 5) / 6u,  a5,  a6,  a7 >> 3,  a8 / 6,  a9,  a10,  (a11 + 7) >> 3,  (a12 + 5) / 6u,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5DAC8( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 7) >> 3,  (a4 + 7) >> 3,  a5,  a6,  a7 >> 3,  a8 >> 3,  a9,  a10,  (a11 + 7) >> 3,  (a12 + 7) >> 3,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5DB18( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 9) / 0xAu,  (a4 + 4) / 5u,  a5,  a6,  a7 / 0xA,  a8 / 5,  a9,  a10,  (a11 + 9) / 0xAu,  (a12 + 4) / 5u,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5DB88( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 9) / 0xAu,  (a4 + 5) / 6u,  a5,  a6,  a7 / 0xA,  a8 / 6,  a9,  a10,  (a11 + 9) / 0xAu,  (a12 + 5) / 6u,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5DC00( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 9) / 0xAu,  (a4 + 7) >> 3,  a5,  a6,  a7 / 0xA,  a8 >> 3,  a9,  a10,  (a11 + 9) / 0xAu,  (a12 + 7) >> 3,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5DC64( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 9) / 0xAu,  (a4 + 9) / 0xAu,  a5,  a6,  a7 / 0xA,  a8 / 0xA,  a9,  a10,  (a11 + 9) / 0xAu,  (a12 + 9) / 0xAu,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5DCD4( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 11) / 0xCu,  (a4 + 9) / 0xAu,  a5,  a6,  a7 / 0xC,  a8 / 0xA,  a9,  a10,  (a11 + 11) / 0xCu,  (a12 + 9) / 0xAu,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5DD4C( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 11) / 0xCu,  (a4 + 11) / 0xCu,  a5,  a6,  a7 / 0xC,  a8 / 0xC,  a9,  a10,  (a11 + 11) / 0xCu,  (a12 + 11) / 0xCu,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5DDBC( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 3) >> 2,  (a4 + 1) >> 1,  a5,  a6,  a7 >> 2,  a8 >> 1,  a9,  a10,  (a11 + 3) >> 2,  (a12 + 1) >> 1,  a13,  a14,  a15);
    }
  }

  return result;
}

uint64_t sub_5DE0C( uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_503A4( result,  a2,  (a3 + 7) >> 3,  (a4 + 3) >> 2,  a5,  a6,  a7 >> 3,  a8 >> 2,  a9,  a10,  (a11 + 7) >> 3,  (a12 + 3) >> 2,  a13,  a14,  a15);
    }
  }

  return result;
}

void *sub_5DE5C(void *__src, void *__dst, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  if (__src)
  {
    if (__dst) {
      return memcpy(__dst, __src, 8 * ((a9 + 3) >> 2) * (unint64_t)((a10 + 3) >> 2));
    }
  }

  return __src;
}

void *sub_5DE94(void *__src, void *__dst, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  if (__src)
  {
    if (__dst) {
      return memcpy(__dst, __src, ((a10 + 3) >> 2) * (unint64_t)((a9 + 7) & 0xFFFFFFF8));
    }
  }

  return __src;
}

uint64_t sub_5DEC8( uint64_t result, void *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, int32x2_t a10, int a11, int a12, uint64_t a13, unsigned __int16 *a14, uint64_t a15)
{
  if (result)
  {
    if (a2) {
      return sub_4BD08( result,  a2,  (a3 + 3) >> 2,  (a4 + 3) >> 2,  a5,  a6,  a7 >> 2,  a8 >> 2,  a9,  a10,  (a11 + 3) >> 2,  (a12 + 3) >> 2,  a13,  a14,  a15);
    }
  }

  return result;
}

unint64_t sub_5DF18( unint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  unsigned int v29 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          int v30 = v29;
          for (uint64_t j = 0LL; j != a13; ++j)
          {
            if (a12)
            {
              unsigned int v24 = a9;
              int v25 = v30;
              uint64_t v26 = a12;
              do
              {
                uint64_t result = sub_3CF94(v24, (int)j + a10, (int)i + a11, v18, v20, v22);
                unsigned __int16 v27 = (_DWORD *)(v23 + 16 * result);
                *int v25 = *v27;
                v25[1] = v27[1];
                v25[2] = v27[2];
                v25[3] = 1065353216;
                ++v24;
                v25 += 4;
                --v26;
              }

              while (v26);
            }

            int v30 = (_DWORD *)((char *)v30 + a15);
          }
        }

        unsigned int v29 = (_DWORD *)((char *)v29 + a16);
      }
    }
  }

  return result;
}

unint64_t sub_5E0D4( unint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  int v30 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          int v31 = v30;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v31;
              do
              {
                uint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                unsigned int v28 = (_DWORD *)(v23 + 16 * result);
                *uint64_t v26 = *v28;
                v26[1] = v28[1];
                uint64_t v26[2] = v28[2];
                v26[3] = 1;
                ++v25;
                v26 += 4;
                --v27;
              }

              while (v27);
            }

            ++v24;
            int v31 = (_DWORD *)((char *)v31 + a15);
          }

          while (v24 != a13);
        }

        int v30 = (_DWORD *)((char *)v30 + a16);
      }
    }
  }

  return result;
}

unint64_t sub_5E290( unint64_t result, _WORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  unsigned int v29 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          int v30 = v29;
          for (uint64_t j = 0LL; j != a13; ++j)
          {
            if (a12)
            {
              unsigned int v24 = a9;
              unsigned int v25 = v30;
              uint64_t v26 = a12;
              do
              {
                uint64_t result = sub_3CF94(v24, (int)j + a10, (int)i + a11, v18, v20, v22);
                uint64_t v27 = (_WORD *)(v23 + 8 * result);
                *unsigned int v25 = *v27;
                v25[1] = v27[1];
                v25[2] = v27[2];
                v25[3] = 15360;
                ++v24;
                v25 += 4;
                --v26;
              }

              while (v26);
            }

            int v30 = (_WORD *)((char *)v30 + a15);
          }
        }

        unsigned int v29 = (_WORD *)((char *)v29 + a16);
      }
    }
  }

  return result;
}

unint64_t sub_5E450( unint64_t result, _WORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  int v30 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          int v31 = v30;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v31;
              do
              {
                uint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                unsigned int v28 = (_WORD *)(v23 + 8 * result);
                *uint64_t v26 = *v28;
                v26[1] = v28[1];
                uint64_t v26[2] = v28[2];
                v26[3] = 1;
                ++v25;
                v26 += 4;
                --v27;
              }

              while (v27);
            }

            ++v24;
            int v31 = (_WORD *)((char *)v31 + a15);
          }

          while (v24 != a13);
        }

        int v30 = (_WORD *)((char *)v30 + a16);
      }
    }
  }

  return result;
}

unint64_t sub_5E610( unint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  unsigned int v29 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          int v30 = v29;
          for (uint64_t j = 0LL; j != a13; ++j)
          {
            if (a12)
            {
              unsigned int v24 = a9;
              unsigned int v25 = v30;
              uint64_t v26 = a12;
              do
              {
                uint64_t result = sub_3CF94(v24, (int)j + a10, (int)i + a11, v18, v20, v22);
                uint64_t v27 = (_BYTE *)(v23 + 4 * result);
                *unsigned int v25 = *v27;
                v25[1] = v27[1];
                v25[2] = v27[2];
                v25[3] = 127;
                ++v24;
                v25 += 4;
                --v26;
              }

              while (v26);
            }

            v30 += a15;
          }
        }

        v29 += a16;
      }
    }
  }

  return result;
}

unint64_t sub_5E7D0( unint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  unsigned int v29 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          int v30 = v29;
          for (uint64_t j = 0LL; j != a13; ++j)
          {
            if (a12)
            {
              unsigned int v24 = a9;
              unsigned int v25 = v30;
              uint64_t v26 = a12;
              do
              {
                uint64_t result = sub_3CF94(v24, (int)j + a10, (int)i + a11, v18, v20, v22);
                uint64_t v27 = (_BYTE *)(v23 + 4 * result);
                *unsigned int v25 = *v27;
                v25[1] = v27[1];
                v25[2] = v27[2];
                v25[3] = -1;
                ++v24;
                v25 += 4;
                --v26;
              }

              while (v26);
            }

            v30 += a15;
          }
        }

        v29 += a16;
      }
    }
  }

  return result;
}

unint64_t sub_5E990( unint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  int v30 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          int v31 = v30;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v31;
              do
              {
                uint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                unsigned int v28 = (_BYTE *)(v23 + 4 * result);
                *uint64_t v26 = *v28;
                v26[1] = v28[1];
                uint64_t v26[2] = v28[2];
                v26[3] = 1;
                ++v25;
                v26 += 4;
                --v27;
              }

              while (v27);
            }

            ++v24;
            v31 += a15;
          }

          while (v24 != a13);
        }

        v30 += a16;
      }
    }
  }

  return result;
}

unint64_t sub_5EB50( unint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  unsigned int v29 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          int v30 = v29;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v30;
              do
              {
                uint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                *v26++ = *(_BYTE *)(result + v23);
                ++v25;
                --v27;
              }

              while (v27);
            }

            ++v24;
            v30 += a15;
          }

          while (v24 != a13);
        }

        v29 += a16;
      }
    }
  }

  return result;
}

unint64_t sub_5ECF0( unint64_t result, _WORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  unsigned int v29 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          int v30 = v29;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v30;
              do
              {
                uint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                *v26++ = *(_WORD *)(v23 + 2 * result);
                ++v25;
                --v27;
              }

              while (v27);
            }

            ++v24;
            int v30 = (_WORD *)((char *)v30 + a15);
          }

          while (v24 != a13);
        }

        unsigned int v29 = (_WORD *)((char *)v29 + a16);
      }
    }
  }

  return result;
}

unint64_t sub_5EE90( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  uint64_t v31 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          uint64_t v32 = v31;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v32;
              do
              {
                uint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                unint64_t v28 = 3 * result + v23;
                char v29 = *(_BYTE *)(v28 + 2);
                *(_WORD *)uint64_t v26 = *(_WORD *)v28;
                *(_BYTE *)(v26 + 2) = v29;
                ++v25;
                v26 += 3LL;
                --v27;
              }

              while (v27);
            }

            ++v24;
            v32 += a15;
          }

          while (v24 != a13);
        }

        v31 += a16;
      }
    }
  }

  return result;
}

unint64_t sub_5F044( unint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  char v29 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          int v30 = v29;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v30;
              do
              {
                uint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                *v26++ = *(_DWORD *)(v23 + 4 * result);
                ++v25;
                --v27;
              }

              while (v27);
            }

            ++v24;
            int v30 = (_DWORD *)((char *)v30 + a15);
          }

          while (v24 != a13);
        }

        char v29 = (_DWORD *)((char *)v29 + a16);
      }
    }
  }

  return result;
}

unint64_t sub_5F1E4( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  uint64_t v30 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v31 = v30;
          for (uint64_t j = 0LL; j != a13; ++j)
          {
            if (a12)
            {
              unsigned int v24 = a9;
              uint64_t v25 = v31;
              uint64_t v26 = a12;
              do
              {
                uint64_t result = sub_3CF94(v24, (int)j + a10, (int)i + a11, v18, v20, v22);
                unint64_t v27 = v23 + 6 * result;
                __int16 v28 = *(_WORD *)(v27 + 4);
                *(_DWORD *)uint64_t v25 = *(_DWORD *)v27;
                *(_WORD *)(v25 + 4) = v28;
                ++v24;
                v25 += 6LL;
                --v26;
              }

              while (v26);
            }

            v31 += a15;
          }
        }

        v30 += a16;
      }
    }
  }

  return result;
}

unint64_t sub_5F398( unint64_t result, void *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  char v29 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          uint64_t v30 = v29;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v30;
              do
              {
                uint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                *v26++ = *(void *)(v23 + 8 * result);
                ++v25;
                --v27;
              }

              while (v27);
            }

            ++v24;
            uint64_t v30 = (void *)((char *)v30 + a15);
          }

          while (v24 != a13);
        }

        char v29 = (void *)((char *)v29 + a16);
      }
    }
  }

  return result;
}

unint64_t sub_5F538( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  uint64_t v30 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v31 = v30;
          for (uint64_t j = 0LL; j != a13; ++j)
          {
            if (a12)
            {
              unsigned int v24 = a9;
              uint64_t v25 = v31;
              uint64_t v26 = a12;
              do
              {
                uint64_t result = sub_3CF94(v24, (int)j + a10, (int)i + a11, v18, v20, v22);
                unint64_t v27 = v23 + 12 * result;
                int v28 = *(_DWORD *)(v27 + 8);
                *(void *)uint64_t v25 = *(void *)v27;
                *(_DWORD *)(v25 + 8) = v28;
                ++v24;
                v25 += 12LL;
                --v26;
              }

              while (v26);
            }

            v31 += a15;
          }
        }

        v30 += a16;
      }
    }
  }

  return result;
}

unint64_t sub_5F6EC( unint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, int a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  char v29 = a2;
  if (result && a2)
  {
    unsigned int v16 = 1 << -(char)__clz(a5 - 1);
    if (a5 < 3) {
      unsigned int v16 = 4;
    }
    unsigned int v17 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 0;
    }
    unsigned int v19 = 32 - __clz(a7 - 1);
    if (a7 >= 2) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = 0;
    }
    unsigned int v21 = 32 - __clz(v16 - 1);
    if (v16 >= 2) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 0;
    }
    if (a14)
    {
      unint64_t v23 = result;
      for (uint64_t i = 0LL; i != a14; ++i)
      {
        if (a13)
        {
          uint64_t v24 = 0LL;
          uint64_t v30 = v29;
          do
          {
            if (a12)
            {
              unsigned int v25 = a9;
              uint64_t v27 = a12;
              uint64_t v26 = v30;
              do
              {
                uint64_t result = sub_3CF94(v25, (int)v24 + a10, (int)i + a11, v18, v20, v22);
                *v26++ = *(_OWORD *)(v23 + 16 * result);
                ++v25;
                --v27;
              }

              while (v27);
            }

            ++v24;
            uint64_t v30 = (_OWORD *)((char *)v30 + a15);
          }

          while (v24 != a13);
        }

        char v29 = (_OWORD *)((char *)v29 + a16);
      }
    }
  }

  return result;
}

uint64_t sub_5F88C( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 3) >> 2;
        unsigned int v28 = (a3 + 3) >> 2;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 >> 2,  a12 >> 2,  a5,  a6,  (a14 + 3) >> 2,  (a15 + 3) >> 2,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_5F99C( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v28 = (a3 + 4) / 5u;
        unsigned int v27 = (a4 + 3) >> 2;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 5,  a12 >> 2,  a5,  a6,  (a14 + 4) / 5u,  (a15 + 3) >> 2,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_5FAC4( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 4) / 5u;
        unsigned int v28 = (a3 + 4) / 5u;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 5,  a12 / 5,  a5,  a6,  (a14 + 4) / 5u,  (a15 + 4) / 5u,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_5FBF0( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 4) / 5u;
        unsigned int v28 = (a3 + 5) / 6u;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 6,  a12 / 5,  a5,  a6,  (a14 + 5) / 6u,  (a15 + 4) / 5u,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_5FD24( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 5) / 6u;
        unsigned int v28 = (a3 + 5) / 6u;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 6,  a12 / 6,  a5,  a6,  (a14 + 5) / 6u,  (a15 + 5) / 6u,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_5FE50( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v28 = (a3 + 7) >> 3;
        unsigned int v27 = (a4 + 4) / 5u;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 >> 3,  a12 / 5,  a5,  a6,  (a14 + 7) >> 3,  (a15 + 4) / 5u,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_5FF7C( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v28 = (a3 + 7) >> 3;
        unsigned int v27 = (a4 + 5) / 6u;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 >> 3,  a12 / 6,  a5,  a6,  (a14 + 7) >> 3,  (a15 + 5) / 6u,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_600A8( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 7) >> 3;
        unsigned int v28 = (a3 + 7) >> 3;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 >> 3,  a12 >> 3,  a5,  a6,  (a14 + 7) >> 3,  (a15 + 7) >> 3,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_601B8( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 4) / 5u;
        unsigned int v28 = (a3 + 9) / 0xAu;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 0xA,  a12 / 5,  a5,  a6,  (a14 + 9) / 0xAu,  (a15 + 4) / 5u,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_602E4( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 5) / 6u;
        unsigned int v28 = (a3 + 9) / 0xAu;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 0xA,  a12 / 6,  a5,  a6,  (a14 + 9) / 0xAu,  (a15 + 5) / 6u,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_60418( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v28 = (a3 + 9) / 0xAu;
        unsigned int v27 = (a4 + 7) >> 3;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 0xA,  a12 >> 3,  a5,  a6,  (a14 + 9) / 0xAu,  (a15 + 7) >> 3,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_60540( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 9) / 0xAu;
        unsigned int v28 = (a3 + 9) / 0xAu;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 0xA,  a12 / 0xA,  a5,  a6,  (a14 + 9) / 0xAu,  (a15 + 9) / 0xAu,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_6066C( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 9) / 0xAu;
        unsigned int v28 = (a3 + 11) / 0xCu;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 0xC,  a12 / 0xA,  a5,  a6,  (a14 + 11) / 0xCu,  (a15 + 9) / 0xAu,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_607A0( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 11) / 0xCu;
        unsigned int v28 = (a3 + 11) / 0xCu;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 / 0xC,  a12 / 0xC,  a5,  a6,  (a14 + 11) / 0xCu,  (a15 + 11) / 0xCu,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_608CC( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 1) >> 1;
        unsigned int v28 = (a3 + 3) >> 2;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 >> 2,  a12 >> 1,  a5,  a6,  (a14 + 3) >> 2,  (a15 + 1) >> 1,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_609DC( uint64_t result, _OWORD *a2, int a3, int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, int a14, int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a16)
      {
        uint64_t v25 = result;
        unsigned int v27 = (a4 + 3) >> 2;
        unsigned int v28 = (a3 + 7) >> 3;
        do
        {
          uint64_t result = sub_503A4( v25 + a13++ * a10,  v20,  v28,  v27,  a8,  a9,  a11 >> 3,  a12 >> 2,  a5,  a6,  (a14 + 7) >> 3,  (a15 + 3) >> 2,  a17,  a19,  a20);
          unsigned int v20 = (_OWORD *)((char *)v20 + a18);
          --v21;
        }

        while (v21);
      }
    }
  }

  return result;
}

uint64_t sub_60AEC( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_5B3C8(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_5B3C8(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        unsigned int v20 = (_DWORD *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_60BF4( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_5D0D8(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_5D0D8(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        unsigned int v20 = (_DWORD *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_60CFC( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_57994(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_57994(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        unsigned int v20 = (_WORD *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_60E04( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_596B4(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_596B4(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        unsigned int v20 = (_WORD *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_60F0C( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_52234(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_52234(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_61014( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_53F54(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_53F54(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_6111C( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    unsigned int v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_55C74(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_55C74(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_61224( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_40F40(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_40F40(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_6132C( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_43134(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_43134(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        uint64_t v20 = (_WORD *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_61434( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_45468(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_45468(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_6153C( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_476F0(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_476F0(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        uint64_t v20 = (_DWORD *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_61644( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_49A24(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_49A24(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_6174C( uint64_t result, void *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_4BD08(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_4BD08(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        uint64_t v20 = (void *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_61854( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_4E060(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_4E060(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_6195C( uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_503A4(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_503A4(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        uint64_t v20 = (_OWORD *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_61A64( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_5B3C8(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_5B3C8(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        uint64_t v20 = (_DWORD *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_61B6C( uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_5D0D8(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_5D0D8(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        uint64_t v20 = (_DWORD *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_61C74( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_57994(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_57994(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        uint64_t v20 = (_WORD *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_61D7C( uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_596B4(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_596B4(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        uint64_t v20 = (_WORD *)((char *)v20 + a18);
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_61E84( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_52234(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_52234(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_61F8C( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_53F54(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_53F54(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_62094( uint64_t result, _BYTE *a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_55C74(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_55C74(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}

uint64_t sub_6219C( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, double a5, int32x2_t a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17, uint64_t a18, unsigned __int16 *a19, uint64_t a20)
{
  uint64_t v26 = result;
  if (result)
  {
    uint64_t v20 = a2;
    if (a2)
    {
      uint64_t v21 = a16;
      if (a20)
      {
        uint64_t v25 = *(void *)(a20 + 24);
        if (!a16) {
          return result;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        if (!a16) {
          return result;
        }
      }

      do
      {
        if (a20)
        {
          uint64_t v23 = *(_DWORD *)(a20 + 20) * a13;
          *(void *)(a20 + 24) = v25 + v23;
          uint64_t result = sub_40F40(v26 + v23, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, a20);
        }

        else
        {
          uint64_t result = sub_40F40(v26 + a13 * a10, v20, a3, a4, a8, a9, a11, a12, a5, a6, a14, a15, a17, a19, 0LL);
        }

        ++a13;
        v20 += a18;
        --v21;
      }

      while (v21);
    }
  }

  return result;
}